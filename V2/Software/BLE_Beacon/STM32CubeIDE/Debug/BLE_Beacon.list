
BLE_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9f0  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1004eab0  1004eab0  0000fab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  1004eab4  1004eab4  0000fab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000548  1004eab8  1004eab8  0000fab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1004f000  1004f000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000b0  2000085c  1004f008  0001085c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00011004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  00011004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  00011004  2**2
                  ALLOC
 10 .bss          000006c8  20000194  20000194  00011004  2**2
                  ALLOC
 11 .noinit       000017b8  2000090c  1004f0b8  0001090c  2**2
                  ALLOC
 12 .ota_region_end 00000000  1004f0b8  1004f0b8  0001090c  2**0
                  CONTENTS
 13 .heap         00000000  200020c4  200020c4  0001090c  2**0
                  CONTENTS
 14 .stack        00000c00  2000f400  2000f400  00011400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  0001090c  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  0001090c  2**0
                  CONTENTS, READONLY
 17 .debug_info   00021bc1  00000000  00000000  00010938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00005b3b  00000000  00000000  000324f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000027c8  00000000  00000000  00038038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001dc9  00000000  00000000  0003a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00023c8c  00000000  00000000  0003c5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002808c  00000000  00000000  00060255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000c9d72  00000000  00000000  000882e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000087  00000000  00000000  00152053  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009720  00000000  00000000  001520dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000185  00000000  00000000  0015b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <__gnu_thumb1_case_shi>:
1004021c:	b403      	push	{r0, r1}
1004021e:	4671      	mov	r1, lr
10040220:	0849      	lsrs	r1, r1, #1
10040222:	0040      	lsls	r0, r0, #1
10040224:	0049      	lsls	r1, r1, #1
10040226:	5e09      	ldrsh	r1, [r1, r0]
10040228:	0049      	lsls	r1, r1, #1
1004022a:	448e      	add	lr, r1
1004022c:	bc03      	pop	{r0, r1}
1004022e:	4770      	bx	lr

10040230 <__udivsi3>:
10040230:	2200      	movs	r2, #0
10040232:	0843      	lsrs	r3, r0, #1
10040234:	428b      	cmp	r3, r1
10040236:	d374      	bcc.n	10040322 <__udivsi3+0xf2>
10040238:	0903      	lsrs	r3, r0, #4
1004023a:	428b      	cmp	r3, r1
1004023c:	d35f      	bcc.n	100402fe <__udivsi3+0xce>
1004023e:	0a03      	lsrs	r3, r0, #8
10040240:	428b      	cmp	r3, r1
10040242:	d344      	bcc.n	100402ce <__udivsi3+0x9e>
10040244:	0b03      	lsrs	r3, r0, #12
10040246:	428b      	cmp	r3, r1
10040248:	d328      	bcc.n	1004029c <__udivsi3+0x6c>
1004024a:	0c03      	lsrs	r3, r0, #16
1004024c:	428b      	cmp	r3, r1
1004024e:	d30d      	bcc.n	1004026c <__udivsi3+0x3c>
10040250:	22ff      	movs	r2, #255	@ 0xff
10040252:	0209      	lsls	r1, r1, #8
10040254:	ba12      	rev	r2, r2
10040256:	0c03      	lsrs	r3, r0, #16
10040258:	428b      	cmp	r3, r1
1004025a:	d302      	bcc.n	10040262 <__udivsi3+0x32>
1004025c:	1212      	asrs	r2, r2, #8
1004025e:	0209      	lsls	r1, r1, #8
10040260:	d065      	beq.n	1004032e <__udivsi3+0xfe>
10040262:	0b03      	lsrs	r3, r0, #12
10040264:	428b      	cmp	r3, r1
10040266:	d319      	bcc.n	1004029c <__udivsi3+0x6c>
10040268:	e000      	b.n	1004026c <__udivsi3+0x3c>
1004026a:	0a09      	lsrs	r1, r1, #8
1004026c:	0bc3      	lsrs	r3, r0, #15
1004026e:	428b      	cmp	r3, r1
10040270:	d301      	bcc.n	10040276 <__udivsi3+0x46>
10040272:	03cb      	lsls	r3, r1, #15
10040274:	1ac0      	subs	r0, r0, r3
10040276:	4152      	adcs	r2, r2
10040278:	0b83      	lsrs	r3, r0, #14
1004027a:	428b      	cmp	r3, r1
1004027c:	d301      	bcc.n	10040282 <__udivsi3+0x52>
1004027e:	038b      	lsls	r3, r1, #14
10040280:	1ac0      	subs	r0, r0, r3
10040282:	4152      	adcs	r2, r2
10040284:	0b43      	lsrs	r3, r0, #13
10040286:	428b      	cmp	r3, r1
10040288:	d301      	bcc.n	1004028e <__udivsi3+0x5e>
1004028a:	034b      	lsls	r3, r1, #13
1004028c:	1ac0      	subs	r0, r0, r3
1004028e:	4152      	adcs	r2, r2
10040290:	0b03      	lsrs	r3, r0, #12
10040292:	428b      	cmp	r3, r1
10040294:	d301      	bcc.n	1004029a <__udivsi3+0x6a>
10040296:	030b      	lsls	r3, r1, #12
10040298:	1ac0      	subs	r0, r0, r3
1004029a:	4152      	adcs	r2, r2
1004029c:	0ac3      	lsrs	r3, r0, #11
1004029e:	428b      	cmp	r3, r1
100402a0:	d301      	bcc.n	100402a6 <__udivsi3+0x76>
100402a2:	02cb      	lsls	r3, r1, #11
100402a4:	1ac0      	subs	r0, r0, r3
100402a6:	4152      	adcs	r2, r2
100402a8:	0a83      	lsrs	r3, r0, #10
100402aa:	428b      	cmp	r3, r1
100402ac:	d301      	bcc.n	100402b2 <__udivsi3+0x82>
100402ae:	028b      	lsls	r3, r1, #10
100402b0:	1ac0      	subs	r0, r0, r3
100402b2:	4152      	adcs	r2, r2
100402b4:	0a43      	lsrs	r3, r0, #9
100402b6:	428b      	cmp	r3, r1
100402b8:	d301      	bcc.n	100402be <__udivsi3+0x8e>
100402ba:	024b      	lsls	r3, r1, #9
100402bc:	1ac0      	subs	r0, r0, r3
100402be:	4152      	adcs	r2, r2
100402c0:	0a03      	lsrs	r3, r0, #8
100402c2:	428b      	cmp	r3, r1
100402c4:	d301      	bcc.n	100402ca <__udivsi3+0x9a>
100402c6:	020b      	lsls	r3, r1, #8
100402c8:	1ac0      	subs	r0, r0, r3
100402ca:	4152      	adcs	r2, r2
100402cc:	d2cd      	bcs.n	1004026a <__udivsi3+0x3a>
100402ce:	09c3      	lsrs	r3, r0, #7
100402d0:	428b      	cmp	r3, r1
100402d2:	d301      	bcc.n	100402d8 <__udivsi3+0xa8>
100402d4:	01cb      	lsls	r3, r1, #7
100402d6:	1ac0      	subs	r0, r0, r3
100402d8:	4152      	adcs	r2, r2
100402da:	0983      	lsrs	r3, r0, #6
100402dc:	428b      	cmp	r3, r1
100402de:	d301      	bcc.n	100402e4 <__udivsi3+0xb4>
100402e0:	018b      	lsls	r3, r1, #6
100402e2:	1ac0      	subs	r0, r0, r3
100402e4:	4152      	adcs	r2, r2
100402e6:	0943      	lsrs	r3, r0, #5
100402e8:	428b      	cmp	r3, r1
100402ea:	d301      	bcc.n	100402f0 <__udivsi3+0xc0>
100402ec:	014b      	lsls	r3, r1, #5
100402ee:	1ac0      	subs	r0, r0, r3
100402f0:	4152      	adcs	r2, r2
100402f2:	0903      	lsrs	r3, r0, #4
100402f4:	428b      	cmp	r3, r1
100402f6:	d301      	bcc.n	100402fc <__udivsi3+0xcc>
100402f8:	010b      	lsls	r3, r1, #4
100402fa:	1ac0      	subs	r0, r0, r3
100402fc:	4152      	adcs	r2, r2
100402fe:	08c3      	lsrs	r3, r0, #3
10040300:	428b      	cmp	r3, r1
10040302:	d301      	bcc.n	10040308 <__udivsi3+0xd8>
10040304:	00cb      	lsls	r3, r1, #3
10040306:	1ac0      	subs	r0, r0, r3
10040308:	4152      	adcs	r2, r2
1004030a:	0883      	lsrs	r3, r0, #2
1004030c:	428b      	cmp	r3, r1
1004030e:	d301      	bcc.n	10040314 <__udivsi3+0xe4>
10040310:	008b      	lsls	r3, r1, #2
10040312:	1ac0      	subs	r0, r0, r3
10040314:	4152      	adcs	r2, r2
10040316:	0843      	lsrs	r3, r0, #1
10040318:	428b      	cmp	r3, r1
1004031a:	d301      	bcc.n	10040320 <__udivsi3+0xf0>
1004031c:	004b      	lsls	r3, r1, #1
1004031e:	1ac0      	subs	r0, r0, r3
10040320:	4152      	adcs	r2, r2
10040322:	1a41      	subs	r1, r0, r1
10040324:	d200      	bcs.n	10040328 <__udivsi3+0xf8>
10040326:	4601      	mov	r1, r0
10040328:	4152      	adcs	r2, r2
1004032a:	4610      	mov	r0, r2
1004032c:	4770      	bx	lr
1004032e:	e7ff      	b.n	10040330 <__udivsi3+0x100>
10040330:	b501      	push	{r0, lr}
10040332:	2000      	movs	r0, #0
10040334:	f000 f8f0 	bl	10040518 <__aeabi_idiv0>
10040338:	bd02      	pop	{r1, pc}
1004033a:	46c0      	nop			@ (mov r8, r8)

1004033c <__aeabi_uidivmod>:
1004033c:	2900      	cmp	r1, #0
1004033e:	d0f7      	beq.n	10040330 <__udivsi3+0x100>
10040340:	e776      	b.n	10040230 <__udivsi3>
10040342:	4770      	bx	lr

10040344 <__divsi3>:
10040344:	4603      	mov	r3, r0
10040346:	430b      	orrs	r3, r1
10040348:	d47f      	bmi.n	1004044a <__divsi3+0x106>
1004034a:	2200      	movs	r2, #0
1004034c:	0843      	lsrs	r3, r0, #1
1004034e:	428b      	cmp	r3, r1
10040350:	d374      	bcc.n	1004043c <__divsi3+0xf8>
10040352:	0903      	lsrs	r3, r0, #4
10040354:	428b      	cmp	r3, r1
10040356:	d35f      	bcc.n	10040418 <__divsi3+0xd4>
10040358:	0a03      	lsrs	r3, r0, #8
1004035a:	428b      	cmp	r3, r1
1004035c:	d344      	bcc.n	100403e8 <__divsi3+0xa4>
1004035e:	0b03      	lsrs	r3, r0, #12
10040360:	428b      	cmp	r3, r1
10040362:	d328      	bcc.n	100403b6 <__divsi3+0x72>
10040364:	0c03      	lsrs	r3, r0, #16
10040366:	428b      	cmp	r3, r1
10040368:	d30d      	bcc.n	10040386 <__divsi3+0x42>
1004036a:	22ff      	movs	r2, #255	@ 0xff
1004036c:	0209      	lsls	r1, r1, #8
1004036e:	ba12      	rev	r2, r2
10040370:	0c03      	lsrs	r3, r0, #16
10040372:	428b      	cmp	r3, r1
10040374:	d302      	bcc.n	1004037c <__divsi3+0x38>
10040376:	1212      	asrs	r2, r2, #8
10040378:	0209      	lsls	r1, r1, #8
1004037a:	d065      	beq.n	10040448 <__divsi3+0x104>
1004037c:	0b03      	lsrs	r3, r0, #12
1004037e:	428b      	cmp	r3, r1
10040380:	d319      	bcc.n	100403b6 <__divsi3+0x72>
10040382:	e000      	b.n	10040386 <__divsi3+0x42>
10040384:	0a09      	lsrs	r1, r1, #8
10040386:	0bc3      	lsrs	r3, r0, #15
10040388:	428b      	cmp	r3, r1
1004038a:	d301      	bcc.n	10040390 <__divsi3+0x4c>
1004038c:	03cb      	lsls	r3, r1, #15
1004038e:	1ac0      	subs	r0, r0, r3
10040390:	4152      	adcs	r2, r2
10040392:	0b83      	lsrs	r3, r0, #14
10040394:	428b      	cmp	r3, r1
10040396:	d301      	bcc.n	1004039c <__divsi3+0x58>
10040398:	038b      	lsls	r3, r1, #14
1004039a:	1ac0      	subs	r0, r0, r3
1004039c:	4152      	adcs	r2, r2
1004039e:	0b43      	lsrs	r3, r0, #13
100403a0:	428b      	cmp	r3, r1
100403a2:	d301      	bcc.n	100403a8 <__divsi3+0x64>
100403a4:	034b      	lsls	r3, r1, #13
100403a6:	1ac0      	subs	r0, r0, r3
100403a8:	4152      	adcs	r2, r2
100403aa:	0b03      	lsrs	r3, r0, #12
100403ac:	428b      	cmp	r3, r1
100403ae:	d301      	bcc.n	100403b4 <__divsi3+0x70>
100403b0:	030b      	lsls	r3, r1, #12
100403b2:	1ac0      	subs	r0, r0, r3
100403b4:	4152      	adcs	r2, r2
100403b6:	0ac3      	lsrs	r3, r0, #11
100403b8:	428b      	cmp	r3, r1
100403ba:	d301      	bcc.n	100403c0 <__divsi3+0x7c>
100403bc:	02cb      	lsls	r3, r1, #11
100403be:	1ac0      	subs	r0, r0, r3
100403c0:	4152      	adcs	r2, r2
100403c2:	0a83      	lsrs	r3, r0, #10
100403c4:	428b      	cmp	r3, r1
100403c6:	d301      	bcc.n	100403cc <__divsi3+0x88>
100403c8:	028b      	lsls	r3, r1, #10
100403ca:	1ac0      	subs	r0, r0, r3
100403cc:	4152      	adcs	r2, r2
100403ce:	0a43      	lsrs	r3, r0, #9
100403d0:	428b      	cmp	r3, r1
100403d2:	d301      	bcc.n	100403d8 <__divsi3+0x94>
100403d4:	024b      	lsls	r3, r1, #9
100403d6:	1ac0      	subs	r0, r0, r3
100403d8:	4152      	adcs	r2, r2
100403da:	0a03      	lsrs	r3, r0, #8
100403dc:	428b      	cmp	r3, r1
100403de:	d301      	bcc.n	100403e4 <__divsi3+0xa0>
100403e0:	020b      	lsls	r3, r1, #8
100403e2:	1ac0      	subs	r0, r0, r3
100403e4:	4152      	adcs	r2, r2
100403e6:	d2cd      	bcs.n	10040384 <__divsi3+0x40>
100403e8:	09c3      	lsrs	r3, r0, #7
100403ea:	428b      	cmp	r3, r1
100403ec:	d301      	bcc.n	100403f2 <__divsi3+0xae>
100403ee:	01cb      	lsls	r3, r1, #7
100403f0:	1ac0      	subs	r0, r0, r3
100403f2:	4152      	adcs	r2, r2
100403f4:	0983      	lsrs	r3, r0, #6
100403f6:	428b      	cmp	r3, r1
100403f8:	d301      	bcc.n	100403fe <__divsi3+0xba>
100403fa:	018b      	lsls	r3, r1, #6
100403fc:	1ac0      	subs	r0, r0, r3
100403fe:	4152      	adcs	r2, r2
10040400:	0943      	lsrs	r3, r0, #5
10040402:	428b      	cmp	r3, r1
10040404:	d301      	bcc.n	1004040a <__divsi3+0xc6>
10040406:	014b      	lsls	r3, r1, #5
10040408:	1ac0      	subs	r0, r0, r3
1004040a:	4152      	adcs	r2, r2
1004040c:	0903      	lsrs	r3, r0, #4
1004040e:	428b      	cmp	r3, r1
10040410:	d301      	bcc.n	10040416 <__divsi3+0xd2>
10040412:	010b      	lsls	r3, r1, #4
10040414:	1ac0      	subs	r0, r0, r3
10040416:	4152      	adcs	r2, r2
10040418:	08c3      	lsrs	r3, r0, #3
1004041a:	428b      	cmp	r3, r1
1004041c:	d301      	bcc.n	10040422 <__divsi3+0xde>
1004041e:	00cb      	lsls	r3, r1, #3
10040420:	1ac0      	subs	r0, r0, r3
10040422:	4152      	adcs	r2, r2
10040424:	0883      	lsrs	r3, r0, #2
10040426:	428b      	cmp	r3, r1
10040428:	d301      	bcc.n	1004042e <__divsi3+0xea>
1004042a:	008b      	lsls	r3, r1, #2
1004042c:	1ac0      	subs	r0, r0, r3
1004042e:	4152      	adcs	r2, r2
10040430:	0843      	lsrs	r3, r0, #1
10040432:	428b      	cmp	r3, r1
10040434:	d301      	bcc.n	1004043a <__divsi3+0xf6>
10040436:	004b      	lsls	r3, r1, #1
10040438:	1ac0      	subs	r0, r0, r3
1004043a:	4152      	adcs	r2, r2
1004043c:	1a41      	subs	r1, r0, r1
1004043e:	d200      	bcs.n	10040442 <__divsi3+0xfe>
10040440:	4601      	mov	r1, r0
10040442:	4152      	adcs	r2, r2
10040444:	4610      	mov	r0, r2
10040446:	4770      	bx	lr
10040448:	e05d      	b.n	10040506 <__divsi3+0x1c2>
1004044a:	0fca      	lsrs	r2, r1, #31
1004044c:	d000      	beq.n	10040450 <__divsi3+0x10c>
1004044e:	4249      	negs	r1, r1
10040450:	1003      	asrs	r3, r0, #32
10040452:	d300      	bcc.n	10040456 <__divsi3+0x112>
10040454:	4240      	negs	r0, r0
10040456:	4053      	eors	r3, r2
10040458:	2200      	movs	r2, #0
1004045a:	469c      	mov	ip, r3
1004045c:	0903      	lsrs	r3, r0, #4
1004045e:	428b      	cmp	r3, r1
10040460:	d32d      	bcc.n	100404be <__divsi3+0x17a>
10040462:	0a03      	lsrs	r3, r0, #8
10040464:	428b      	cmp	r3, r1
10040466:	d312      	bcc.n	1004048e <__divsi3+0x14a>
10040468:	22fc      	movs	r2, #252	@ 0xfc
1004046a:	0189      	lsls	r1, r1, #6
1004046c:	ba12      	rev	r2, r2
1004046e:	0a03      	lsrs	r3, r0, #8
10040470:	428b      	cmp	r3, r1
10040472:	d30c      	bcc.n	1004048e <__divsi3+0x14a>
10040474:	0189      	lsls	r1, r1, #6
10040476:	1192      	asrs	r2, r2, #6
10040478:	428b      	cmp	r3, r1
1004047a:	d308      	bcc.n	1004048e <__divsi3+0x14a>
1004047c:	0189      	lsls	r1, r1, #6
1004047e:	1192      	asrs	r2, r2, #6
10040480:	428b      	cmp	r3, r1
10040482:	d304      	bcc.n	1004048e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	d03a      	beq.n	100404fe <__divsi3+0x1ba>
10040488:	1192      	asrs	r2, r2, #6
1004048a:	e000      	b.n	1004048e <__divsi3+0x14a>
1004048c:	0989      	lsrs	r1, r1, #6
1004048e:	09c3      	lsrs	r3, r0, #7
10040490:	428b      	cmp	r3, r1
10040492:	d301      	bcc.n	10040498 <__divsi3+0x154>
10040494:	01cb      	lsls	r3, r1, #7
10040496:	1ac0      	subs	r0, r0, r3
10040498:	4152      	adcs	r2, r2
1004049a:	0983      	lsrs	r3, r0, #6
1004049c:	428b      	cmp	r3, r1
1004049e:	d301      	bcc.n	100404a4 <__divsi3+0x160>
100404a0:	018b      	lsls	r3, r1, #6
100404a2:	1ac0      	subs	r0, r0, r3
100404a4:	4152      	adcs	r2, r2
100404a6:	0943      	lsrs	r3, r0, #5
100404a8:	428b      	cmp	r3, r1
100404aa:	d301      	bcc.n	100404b0 <__divsi3+0x16c>
100404ac:	014b      	lsls	r3, r1, #5
100404ae:	1ac0      	subs	r0, r0, r3
100404b0:	4152      	adcs	r2, r2
100404b2:	0903      	lsrs	r3, r0, #4
100404b4:	428b      	cmp	r3, r1
100404b6:	d301      	bcc.n	100404bc <__divsi3+0x178>
100404b8:	010b      	lsls	r3, r1, #4
100404ba:	1ac0      	subs	r0, r0, r3
100404bc:	4152      	adcs	r2, r2
100404be:	08c3      	lsrs	r3, r0, #3
100404c0:	428b      	cmp	r3, r1
100404c2:	d301      	bcc.n	100404c8 <__divsi3+0x184>
100404c4:	00cb      	lsls	r3, r1, #3
100404c6:	1ac0      	subs	r0, r0, r3
100404c8:	4152      	adcs	r2, r2
100404ca:	0883      	lsrs	r3, r0, #2
100404cc:	428b      	cmp	r3, r1
100404ce:	d301      	bcc.n	100404d4 <__divsi3+0x190>
100404d0:	008b      	lsls	r3, r1, #2
100404d2:	1ac0      	subs	r0, r0, r3
100404d4:	4152      	adcs	r2, r2
100404d6:	d2d9      	bcs.n	1004048c <__divsi3+0x148>
100404d8:	0843      	lsrs	r3, r0, #1
100404da:	428b      	cmp	r3, r1
100404dc:	d301      	bcc.n	100404e2 <__divsi3+0x19e>
100404de:	004b      	lsls	r3, r1, #1
100404e0:	1ac0      	subs	r0, r0, r3
100404e2:	4152      	adcs	r2, r2
100404e4:	1a41      	subs	r1, r0, r1
100404e6:	d200      	bcs.n	100404ea <__divsi3+0x1a6>
100404e8:	4601      	mov	r1, r0
100404ea:	4663      	mov	r3, ip
100404ec:	4152      	adcs	r2, r2
100404ee:	105b      	asrs	r3, r3, #1
100404f0:	4610      	mov	r0, r2
100404f2:	d301      	bcc.n	100404f8 <__divsi3+0x1b4>
100404f4:	4240      	negs	r0, r0
100404f6:	2b00      	cmp	r3, #0
100404f8:	d500      	bpl.n	100404fc <__divsi3+0x1b8>
100404fa:	4249      	negs	r1, r1
100404fc:	4770      	bx	lr
100404fe:	4663      	mov	r3, ip
10040500:	105b      	asrs	r3, r3, #1
10040502:	d300      	bcc.n	10040506 <__divsi3+0x1c2>
10040504:	4240      	negs	r0, r0
10040506:	b501      	push	{r0, lr}
10040508:	2000      	movs	r0, #0
1004050a:	f000 f805 	bl	10040518 <__aeabi_idiv0>
1004050e:	bd02      	pop	{r1, pc}

10040510 <__aeabi_idivmod>:
10040510:	2900      	cmp	r1, #0
10040512:	d0f8      	beq.n	10040506 <__divsi3+0x1c2>
10040514:	e716      	b.n	10040344 <__divsi3>
10040516:	4770      	bx	lr

10040518 <__aeabi_idiv0>:
10040518:	4770      	bx	lr
1004051a:	46c0      	nop			@ (mov r8, r8)

1004051c <__aeabi_llsl>:
1004051c:	4091      	lsls	r1, r2
1004051e:	0003      	movs	r3, r0
10040520:	4090      	lsls	r0, r2
10040522:	469c      	mov	ip, r3
10040524:	3a20      	subs	r2, #32
10040526:	4093      	lsls	r3, r2
10040528:	4319      	orrs	r1, r3
1004052a:	4252      	negs	r2, r2
1004052c:	4663      	mov	r3, ip
1004052e:	40d3      	lsrs	r3, r2
10040530:	4319      	orrs	r1, r3
10040532:	4770      	bx	lr

10040534 <__clzsi2>:
10040534:	211c      	movs	r1, #28
10040536:	2301      	movs	r3, #1
10040538:	041b      	lsls	r3, r3, #16
1004053a:	4298      	cmp	r0, r3
1004053c:	d301      	bcc.n	10040542 <__clzsi2+0xe>
1004053e:	0c00      	lsrs	r0, r0, #16
10040540:	3910      	subs	r1, #16
10040542:	0a1b      	lsrs	r3, r3, #8
10040544:	4298      	cmp	r0, r3
10040546:	d301      	bcc.n	1004054c <__clzsi2+0x18>
10040548:	0a00      	lsrs	r0, r0, #8
1004054a:	3908      	subs	r1, #8
1004054c:	091b      	lsrs	r3, r3, #4
1004054e:	4298      	cmp	r0, r3
10040550:	d301      	bcc.n	10040556 <__clzsi2+0x22>
10040552:	0900      	lsrs	r0, r0, #4
10040554:	3904      	subs	r1, #4
10040556:	a202      	add	r2, pc, #8	@ (adr r2, 10040560 <__clzsi2+0x2c>)
10040558:	5c10      	ldrb	r0, [r2, r0]
1004055a:	1840      	adds	r0, r0, r1
1004055c:	4770      	bx	lr
1004055e:	46c0      	nop			@ (mov r8, r8)
10040560:	02020304 	.word	0x02020304
10040564:	01010101 	.word	0x01010101
	...

10040570 <__aeabi_uldivmod>:
10040570:	2b00      	cmp	r3, #0
10040572:	d111      	bne.n	10040598 <__aeabi_uldivmod+0x28>
10040574:	2a00      	cmp	r2, #0
10040576:	d10f      	bne.n	10040598 <__aeabi_uldivmod+0x28>
10040578:	2900      	cmp	r1, #0
1004057a:	d100      	bne.n	1004057e <__aeabi_uldivmod+0xe>
1004057c:	2800      	cmp	r0, #0
1004057e:	d002      	beq.n	10040586 <__aeabi_uldivmod+0x16>
10040580:	2100      	movs	r1, #0
10040582:	43c9      	mvns	r1, r1
10040584:	0008      	movs	r0, r1
10040586:	b407      	push	{r0, r1, r2}
10040588:	4802      	ldr	r0, [pc, #8]	@ (10040594 <__aeabi_uldivmod+0x24>)
1004058a:	a102      	add	r1, pc, #8	@ (adr r1, 10040594 <__aeabi_uldivmod+0x24>)
1004058c:	1840      	adds	r0, r0, r1
1004058e:	9002      	str	r0, [sp, #8]
10040590:	bd03      	pop	{r0, r1, pc}
10040592:	46c0      	nop			@ (mov r8, r8)
10040594:	ffffff85 	.word	0xffffff85
10040598:	b403      	push	{r0, r1}
1004059a:	4668      	mov	r0, sp
1004059c:	b501      	push	{r0, lr}
1004059e:	9802      	ldr	r0, [sp, #8]
100405a0:	f000 f834 	bl	1004060c <__udivmoddi4>
100405a4:	9b01      	ldr	r3, [sp, #4]
100405a6:	469e      	mov	lr, r3
100405a8:	b002      	add	sp, #8
100405aa:	bc0c      	pop	{r2, r3}
100405ac:	4770      	bx	lr
100405ae:	46c0      	nop			@ (mov r8, r8)

100405b0 <__aeabi_lmul>:
100405b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100405b2:	46ce      	mov	lr, r9
100405b4:	4699      	mov	r9, r3
100405b6:	0c03      	lsrs	r3, r0, #16
100405b8:	469c      	mov	ip, r3
100405ba:	0413      	lsls	r3, r2, #16
100405bc:	4647      	mov	r7, r8
100405be:	0c1b      	lsrs	r3, r3, #16
100405c0:	001d      	movs	r5, r3
100405c2:	000e      	movs	r6, r1
100405c4:	4661      	mov	r1, ip
100405c6:	0404      	lsls	r4, r0, #16
100405c8:	0c24      	lsrs	r4, r4, #16
100405ca:	b580      	push	{r7, lr}
100405cc:	0007      	movs	r7, r0
100405ce:	0c10      	lsrs	r0, r2, #16
100405d0:	434b      	muls	r3, r1
100405d2:	4365      	muls	r5, r4
100405d4:	4341      	muls	r1, r0
100405d6:	4360      	muls	r0, r4
100405d8:	0c2c      	lsrs	r4, r5, #16
100405da:	18c0      	adds	r0, r0, r3
100405dc:	1824      	adds	r4, r4, r0
100405de:	468c      	mov	ip, r1
100405e0:	42a3      	cmp	r3, r4
100405e2:	d903      	bls.n	100405ec <__aeabi_lmul+0x3c>
100405e4:	2380      	movs	r3, #128	@ 0x80
100405e6:	025b      	lsls	r3, r3, #9
100405e8:	4698      	mov	r8, r3
100405ea:	44c4      	add	ip, r8
100405ec:	4649      	mov	r1, r9
100405ee:	4379      	muls	r1, r7
100405f0:	4356      	muls	r6, r2
100405f2:	0c23      	lsrs	r3, r4, #16
100405f4:	042d      	lsls	r5, r5, #16
100405f6:	0c2d      	lsrs	r5, r5, #16
100405f8:	1989      	adds	r1, r1, r6
100405fa:	4463      	add	r3, ip
100405fc:	0424      	lsls	r4, r4, #16
100405fe:	1960      	adds	r0, r4, r5
10040600:	18c9      	adds	r1, r1, r3
10040602:	bcc0      	pop	{r6, r7}
10040604:	46b9      	mov	r9, r7
10040606:	46b0      	mov	r8, r6
10040608:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004060a:	46c0      	nop			@ (mov r8, r8)

1004060c <__udivmoddi4>:
1004060c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004060e:	4657      	mov	r7, sl
10040610:	464e      	mov	r6, r9
10040612:	4645      	mov	r5, r8
10040614:	46de      	mov	lr, fp
10040616:	b5e0      	push	{r5, r6, r7, lr}
10040618:	0004      	movs	r4, r0
1004061a:	000d      	movs	r5, r1
1004061c:	4692      	mov	sl, r2
1004061e:	4699      	mov	r9, r3
10040620:	b083      	sub	sp, #12
10040622:	428b      	cmp	r3, r1
10040624:	d830      	bhi.n	10040688 <__udivmoddi4+0x7c>
10040626:	d02d      	beq.n	10040684 <__udivmoddi4+0x78>
10040628:	4649      	mov	r1, r9
1004062a:	4650      	mov	r0, sl
1004062c:	f000 f8ba 	bl	100407a4 <__clzdi2>
10040630:	0029      	movs	r1, r5
10040632:	0006      	movs	r6, r0
10040634:	0020      	movs	r0, r4
10040636:	f000 f8b5 	bl	100407a4 <__clzdi2>
1004063a:	1a33      	subs	r3, r6, r0
1004063c:	4698      	mov	r8, r3
1004063e:	3b20      	subs	r3, #32
10040640:	d434      	bmi.n	100406ac <__udivmoddi4+0xa0>
10040642:	469b      	mov	fp, r3
10040644:	4653      	mov	r3, sl
10040646:	465a      	mov	r2, fp
10040648:	4093      	lsls	r3, r2
1004064a:	4642      	mov	r2, r8
1004064c:	001f      	movs	r7, r3
1004064e:	4653      	mov	r3, sl
10040650:	4093      	lsls	r3, r2
10040652:	001e      	movs	r6, r3
10040654:	42af      	cmp	r7, r5
10040656:	d83b      	bhi.n	100406d0 <__udivmoddi4+0xc4>
10040658:	42af      	cmp	r7, r5
1004065a:	d100      	bne.n	1004065e <__udivmoddi4+0x52>
1004065c:	e079      	b.n	10040752 <__udivmoddi4+0x146>
1004065e:	465b      	mov	r3, fp
10040660:	1ba4      	subs	r4, r4, r6
10040662:	41bd      	sbcs	r5, r7
10040664:	2b00      	cmp	r3, #0
10040666:	da00      	bge.n	1004066a <__udivmoddi4+0x5e>
10040668:	e076      	b.n	10040758 <__udivmoddi4+0x14c>
1004066a:	2200      	movs	r2, #0
1004066c:	2300      	movs	r3, #0
1004066e:	9200      	str	r2, [sp, #0]
10040670:	9301      	str	r3, [sp, #4]
10040672:	2301      	movs	r3, #1
10040674:	465a      	mov	r2, fp
10040676:	4093      	lsls	r3, r2
10040678:	9301      	str	r3, [sp, #4]
1004067a:	2301      	movs	r3, #1
1004067c:	4642      	mov	r2, r8
1004067e:	4093      	lsls	r3, r2
10040680:	9300      	str	r3, [sp, #0]
10040682:	e029      	b.n	100406d8 <__udivmoddi4+0xcc>
10040684:	4282      	cmp	r2, r0
10040686:	d9cf      	bls.n	10040628 <__udivmoddi4+0x1c>
10040688:	2200      	movs	r2, #0
1004068a:	2300      	movs	r3, #0
1004068c:	9200      	str	r2, [sp, #0]
1004068e:	9301      	str	r3, [sp, #4]
10040690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040692:	2b00      	cmp	r3, #0
10040694:	d001      	beq.n	1004069a <__udivmoddi4+0x8e>
10040696:	601c      	str	r4, [r3, #0]
10040698:	605d      	str	r5, [r3, #4]
1004069a:	9800      	ldr	r0, [sp, #0]
1004069c:	9901      	ldr	r1, [sp, #4]
1004069e:	b003      	add	sp, #12
100406a0:	bcf0      	pop	{r4, r5, r6, r7}
100406a2:	46bb      	mov	fp, r7
100406a4:	46b2      	mov	sl, r6
100406a6:	46a9      	mov	r9, r5
100406a8:	46a0      	mov	r8, r4
100406aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100406ac:	4642      	mov	r2, r8
100406ae:	469b      	mov	fp, r3
100406b0:	2320      	movs	r3, #32
100406b2:	1a9b      	subs	r3, r3, r2
100406b4:	4652      	mov	r2, sl
100406b6:	40da      	lsrs	r2, r3
100406b8:	4641      	mov	r1, r8
100406ba:	0013      	movs	r3, r2
100406bc:	464a      	mov	r2, r9
100406be:	408a      	lsls	r2, r1
100406c0:	0017      	movs	r7, r2
100406c2:	4642      	mov	r2, r8
100406c4:	431f      	orrs	r7, r3
100406c6:	4653      	mov	r3, sl
100406c8:	4093      	lsls	r3, r2
100406ca:	001e      	movs	r6, r3
100406cc:	42af      	cmp	r7, r5
100406ce:	d9c3      	bls.n	10040658 <__udivmoddi4+0x4c>
100406d0:	2200      	movs	r2, #0
100406d2:	2300      	movs	r3, #0
100406d4:	9200      	str	r2, [sp, #0]
100406d6:	9301      	str	r3, [sp, #4]
100406d8:	4643      	mov	r3, r8
100406da:	2b00      	cmp	r3, #0
100406dc:	d0d8      	beq.n	10040690 <__udivmoddi4+0x84>
100406de:	07fb      	lsls	r3, r7, #31
100406e0:	0872      	lsrs	r2, r6, #1
100406e2:	431a      	orrs	r2, r3
100406e4:	4646      	mov	r6, r8
100406e6:	087b      	lsrs	r3, r7, #1
100406e8:	e00e      	b.n	10040708 <__udivmoddi4+0xfc>
100406ea:	42ab      	cmp	r3, r5
100406ec:	d101      	bne.n	100406f2 <__udivmoddi4+0xe6>
100406ee:	42a2      	cmp	r2, r4
100406f0:	d80c      	bhi.n	1004070c <__udivmoddi4+0x100>
100406f2:	1aa4      	subs	r4, r4, r2
100406f4:	419d      	sbcs	r5, r3
100406f6:	2001      	movs	r0, #1
100406f8:	1924      	adds	r4, r4, r4
100406fa:	416d      	adcs	r5, r5
100406fc:	2100      	movs	r1, #0
100406fe:	3e01      	subs	r6, #1
10040700:	1824      	adds	r4, r4, r0
10040702:	414d      	adcs	r5, r1
10040704:	2e00      	cmp	r6, #0
10040706:	d006      	beq.n	10040716 <__udivmoddi4+0x10a>
10040708:	42ab      	cmp	r3, r5
1004070a:	d9ee      	bls.n	100406ea <__udivmoddi4+0xde>
1004070c:	3e01      	subs	r6, #1
1004070e:	1924      	adds	r4, r4, r4
10040710:	416d      	adcs	r5, r5
10040712:	2e00      	cmp	r6, #0
10040714:	d1f8      	bne.n	10040708 <__udivmoddi4+0xfc>
10040716:	9800      	ldr	r0, [sp, #0]
10040718:	9901      	ldr	r1, [sp, #4]
1004071a:	465b      	mov	r3, fp
1004071c:	1900      	adds	r0, r0, r4
1004071e:	4169      	adcs	r1, r5
10040720:	2b00      	cmp	r3, #0
10040722:	db24      	blt.n	1004076e <__udivmoddi4+0x162>
10040724:	002b      	movs	r3, r5
10040726:	465a      	mov	r2, fp
10040728:	4644      	mov	r4, r8
1004072a:	40d3      	lsrs	r3, r2
1004072c:	002a      	movs	r2, r5
1004072e:	40e2      	lsrs	r2, r4
10040730:	001c      	movs	r4, r3
10040732:	465b      	mov	r3, fp
10040734:	0015      	movs	r5, r2
10040736:	2b00      	cmp	r3, #0
10040738:	db2a      	blt.n	10040790 <__udivmoddi4+0x184>
1004073a:	0026      	movs	r6, r4
1004073c:	409e      	lsls	r6, r3
1004073e:	0033      	movs	r3, r6
10040740:	0026      	movs	r6, r4
10040742:	4647      	mov	r7, r8
10040744:	40be      	lsls	r6, r7
10040746:	0032      	movs	r2, r6
10040748:	1a80      	subs	r0, r0, r2
1004074a:	4199      	sbcs	r1, r3
1004074c:	9000      	str	r0, [sp, #0]
1004074e:	9101      	str	r1, [sp, #4]
10040750:	e79e      	b.n	10040690 <__udivmoddi4+0x84>
10040752:	42a3      	cmp	r3, r4
10040754:	d8bc      	bhi.n	100406d0 <__udivmoddi4+0xc4>
10040756:	e782      	b.n	1004065e <__udivmoddi4+0x52>
10040758:	4642      	mov	r2, r8
1004075a:	2320      	movs	r3, #32
1004075c:	2100      	movs	r1, #0
1004075e:	1a9b      	subs	r3, r3, r2
10040760:	2200      	movs	r2, #0
10040762:	9100      	str	r1, [sp, #0]
10040764:	9201      	str	r2, [sp, #4]
10040766:	2201      	movs	r2, #1
10040768:	40da      	lsrs	r2, r3
1004076a:	9201      	str	r2, [sp, #4]
1004076c:	e785      	b.n	1004067a <__udivmoddi4+0x6e>
1004076e:	4642      	mov	r2, r8
10040770:	2320      	movs	r3, #32
10040772:	1a9b      	subs	r3, r3, r2
10040774:	002a      	movs	r2, r5
10040776:	4646      	mov	r6, r8
10040778:	409a      	lsls	r2, r3
1004077a:	0023      	movs	r3, r4
1004077c:	40f3      	lsrs	r3, r6
1004077e:	4644      	mov	r4, r8
10040780:	4313      	orrs	r3, r2
10040782:	002a      	movs	r2, r5
10040784:	40e2      	lsrs	r2, r4
10040786:	001c      	movs	r4, r3
10040788:	465b      	mov	r3, fp
1004078a:	0015      	movs	r5, r2
1004078c:	2b00      	cmp	r3, #0
1004078e:	dad4      	bge.n	1004073a <__udivmoddi4+0x12e>
10040790:	4642      	mov	r2, r8
10040792:	002f      	movs	r7, r5
10040794:	2320      	movs	r3, #32
10040796:	0026      	movs	r6, r4
10040798:	4097      	lsls	r7, r2
1004079a:	1a9b      	subs	r3, r3, r2
1004079c:	40de      	lsrs	r6, r3
1004079e:	003b      	movs	r3, r7
100407a0:	4333      	orrs	r3, r6
100407a2:	e7cd      	b.n	10040740 <__udivmoddi4+0x134>

100407a4 <__clzdi2>:
100407a4:	b510      	push	{r4, lr}
100407a6:	2900      	cmp	r1, #0
100407a8:	d103      	bne.n	100407b2 <__clzdi2+0xe>
100407aa:	f7ff fec3 	bl	10040534 <__clzsi2>
100407ae:	3020      	adds	r0, #32
100407b0:	e002      	b.n	100407b8 <__clzdi2+0x14>
100407b2:	0008      	movs	r0, r1
100407b4:	f7ff febe 	bl	10040534 <__clzsi2>
100407b8:	bd10      	pop	{r4, pc}
100407ba:	46c0      	nop			@ (mov r8, r8)

100407bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100407bc:	b580      	push	{r7, lr}
100407be:	b082      	sub	sp, #8
100407c0:	af00      	add	r7, sp, #0
100407c2:	0002      	movs	r2, r0
100407c4:	1dfb      	adds	r3, r7, #7
100407c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100407c8:	1dfb      	adds	r3, r7, #7
100407ca:	781b      	ldrb	r3, [r3, #0]
100407cc:	2b7f      	cmp	r3, #127	@ 0x7f
100407ce:	d809      	bhi.n	100407e4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100407d0:	1dfb      	adds	r3, r7, #7
100407d2:	781b      	ldrb	r3, [r3, #0]
100407d4:	001a      	movs	r2, r3
100407d6:	231f      	movs	r3, #31
100407d8:	401a      	ands	r2, r3
100407da:	4b04      	ldr	r3, [pc, #16]	@ (100407ec <__NVIC_EnableIRQ+0x30>)
100407dc:	2101      	movs	r1, #1
100407de:	4091      	lsls	r1, r2
100407e0:	000a      	movs	r2, r1
100407e2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100407e4:	46c0      	nop			@ (mov r8, r8)
100407e6:	46bd      	mov	sp, r7
100407e8:	b002      	add	sp, #8
100407ea:	bd80      	pop	{r7, pc}
100407ec:	e000e100 	.word	0xe000e100

100407f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100407f0:	b590      	push	{r4, r7, lr}
100407f2:	b083      	sub	sp, #12
100407f4:	af00      	add	r7, sp, #0
100407f6:	0002      	movs	r2, r0
100407f8:	6039      	str	r1, [r7, #0]
100407fa:	1dfb      	adds	r3, r7, #7
100407fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100407fe:	1dfb      	adds	r3, r7, #7
10040800:	781b      	ldrb	r3, [r3, #0]
10040802:	2b7f      	cmp	r3, #127	@ 0x7f
10040804:	d828      	bhi.n	10040858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040806:	4a2f      	ldr	r2, [pc, #188]	@ (100408c4 <__NVIC_SetPriority+0xd4>)
10040808:	1dfb      	adds	r3, r7, #7
1004080a:	781b      	ldrb	r3, [r3, #0]
1004080c:	b25b      	sxtb	r3, r3
1004080e:	089b      	lsrs	r3, r3, #2
10040810:	33c0      	adds	r3, #192	@ 0xc0
10040812:	009b      	lsls	r3, r3, #2
10040814:	589b      	ldr	r3, [r3, r2]
10040816:	1dfa      	adds	r2, r7, #7
10040818:	7812      	ldrb	r2, [r2, #0]
1004081a:	0011      	movs	r1, r2
1004081c:	2203      	movs	r2, #3
1004081e:	400a      	ands	r2, r1
10040820:	00d2      	lsls	r2, r2, #3
10040822:	21ff      	movs	r1, #255	@ 0xff
10040824:	4091      	lsls	r1, r2
10040826:	000a      	movs	r2, r1
10040828:	43d2      	mvns	r2, r2
1004082a:	401a      	ands	r2, r3
1004082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004082e:	683b      	ldr	r3, [r7, #0]
10040830:	019b      	lsls	r3, r3, #6
10040832:	22ff      	movs	r2, #255	@ 0xff
10040834:	401a      	ands	r2, r3
10040836:	1dfb      	adds	r3, r7, #7
10040838:	781b      	ldrb	r3, [r3, #0]
1004083a:	0018      	movs	r0, r3
1004083c:	2303      	movs	r3, #3
1004083e:	4003      	ands	r3, r0
10040840:	00db      	lsls	r3, r3, #3
10040842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040844:	481f      	ldr	r0, [pc, #124]	@ (100408c4 <__NVIC_SetPriority+0xd4>)
10040846:	1dfb      	adds	r3, r7, #7
10040848:	781b      	ldrb	r3, [r3, #0]
1004084a:	b25b      	sxtb	r3, r3
1004084c:	089b      	lsrs	r3, r3, #2
1004084e:	430a      	orrs	r2, r1
10040850:	33c0      	adds	r3, #192	@ 0xc0
10040852:	009b      	lsls	r3, r3, #2
10040854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10040856:	e031      	b.n	100408bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040858:	4a1b      	ldr	r2, [pc, #108]	@ (100408c8 <__NVIC_SetPriority+0xd8>)
1004085a:	1dfb      	adds	r3, r7, #7
1004085c:	781b      	ldrb	r3, [r3, #0]
1004085e:	0019      	movs	r1, r3
10040860:	230f      	movs	r3, #15
10040862:	400b      	ands	r3, r1
10040864:	3b08      	subs	r3, #8
10040866:	089b      	lsrs	r3, r3, #2
10040868:	3306      	adds	r3, #6
1004086a:	009b      	lsls	r3, r3, #2
1004086c:	18d3      	adds	r3, r2, r3
1004086e:	3304      	adds	r3, #4
10040870:	681b      	ldr	r3, [r3, #0]
10040872:	1dfa      	adds	r2, r7, #7
10040874:	7812      	ldrb	r2, [r2, #0]
10040876:	0011      	movs	r1, r2
10040878:	2203      	movs	r2, #3
1004087a:	400a      	ands	r2, r1
1004087c:	00d2      	lsls	r2, r2, #3
1004087e:	21ff      	movs	r1, #255	@ 0xff
10040880:	4091      	lsls	r1, r2
10040882:	000a      	movs	r2, r1
10040884:	43d2      	mvns	r2, r2
10040886:	401a      	ands	r2, r3
10040888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004088a:	683b      	ldr	r3, [r7, #0]
1004088c:	019b      	lsls	r3, r3, #6
1004088e:	22ff      	movs	r2, #255	@ 0xff
10040890:	401a      	ands	r2, r3
10040892:	1dfb      	adds	r3, r7, #7
10040894:	781b      	ldrb	r3, [r3, #0]
10040896:	0018      	movs	r0, r3
10040898:	2303      	movs	r3, #3
1004089a:	4003      	ands	r3, r0
1004089c:	00db      	lsls	r3, r3, #3
1004089e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100408a0:	4809      	ldr	r0, [pc, #36]	@ (100408c8 <__NVIC_SetPriority+0xd8>)
100408a2:	1dfb      	adds	r3, r7, #7
100408a4:	781b      	ldrb	r3, [r3, #0]
100408a6:	001c      	movs	r4, r3
100408a8:	230f      	movs	r3, #15
100408aa:	4023      	ands	r3, r4
100408ac:	3b08      	subs	r3, #8
100408ae:	089b      	lsrs	r3, r3, #2
100408b0:	430a      	orrs	r2, r1
100408b2:	3306      	adds	r3, #6
100408b4:	009b      	lsls	r3, r3, #2
100408b6:	18c3      	adds	r3, r0, r3
100408b8:	3304      	adds	r3, #4
100408ba:	601a      	str	r2, [r3, #0]
}
100408bc:	46c0      	nop			@ (mov r8, r8)
100408be:	46bd      	mov	sp, r7
100408c0:	b003      	add	sp, #12
100408c2:	bd90      	pop	{r4, r7, pc}
100408c4:	e000e100 	.word	0xe000e100
100408c8:	e000ed00 	.word	0xe000ed00

100408cc <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
100408cc:	b580      	push	{r7, lr}
100408ce:	b086      	sub	sp, #24
100408d0:	af00      	add	r7, sp, #0
100408d2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100408d4:	f3ef 8310 	mrs	r3, PRIMASK
100408d8:	60bb      	str	r3, [r7, #8]
  return(result);
100408da:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
100408dc:	617b      	str	r3, [r7, #20]
100408de:	2301      	movs	r3, #1
100408e0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100408e2:	68fb      	ldr	r3, [r7, #12]
100408e4:	f383 8810 	msr	PRIMASK, r3
}
100408e8:	46c0      	nop			@ (mov r8, r8)
100408ea:	687b      	ldr	r3, [r7, #4]
100408ec:	681b      	ldr	r3, [r3, #0]
100408ee:	2220      	movs	r2, #32
100408f0:	431a      	orrs	r2, r3
100408f2:	687b      	ldr	r3, [r7, #4]
100408f4:	601a      	str	r2, [r3, #0]
100408f6:	697b      	ldr	r3, [r7, #20]
100408f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100408fa:	693b      	ldr	r3, [r7, #16]
100408fc:	f383 8810 	msr	PRIMASK, r3
}
10040900:	46c0      	nop			@ (mov r8, r8)
}
10040902:	46c0      	nop			@ (mov r8, r8)
10040904:	46bd      	mov	sp, r7
10040906:	b006      	add	sp, #24
10040908:	bd80      	pop	{r7, pc}

1004090a <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
1004090a:	b580      	push	{r7, lr}
1004090c:	b086      	sub	sp, #24
1004090e:	af00      	add	r7, sp, #0
10040910:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
10040912:	2000      	movs	r0, #0
10040914:	f002 f953 	bl	10042bbe <APP_DEBUG_SIGNAL_SET>
  UTIL_ADV_TRACE_SetRegion(~0x0);
#endif

  /* USER CODE BEGIN APPE_Init_1 */
#if (CFG_DEBUG_APP_TRACE != 0) && (CFG_DEBUG_APP_ADV_TRACE == 0)
  COM_InitTypeDef COM_Init =
10040918:	2108      	movs	r1, #8
1004091a:	187b      	adds	r3, r7, r1
1004091c:	22e1      	movs	r2, #225	@ 0xe1
1004091e:	0252      	lsls	r2, r2, #9
10040920:	601a      	str	r2, [r3, #0]
10040922:	187b      	adds	r3, r7, r1
10040924:	2200      	movs	r2, #0
10040926:	605a      	str	r2, [r3, #4]
10040928:	187b      	adds	r3, r7, r1
1004092a:	2200      	movs	r2, #0
1004092c:	811a      	strh	r2, [r3, #8]
1004092e:	187b      	adds	r3, r7, r1
10040930:	2200      	movs	r2, #0
10040932:	815a      	strh	r2, [r3, #10]
10040934:	187b      	adds	r3, r7, r1
10040936:	2200      	movs	r2, #0
10040938:	819a      	strh	r2, [r3, #12]
   .WordLength= COM_WORDLENGTH_8B,
   .StopBits = COM_STOPBITS_1,
   .Parity = COM_PARITY_NONE,
   .HwFlowCtl = COM_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &COM_Init);
1004093a:	187b      	adds	r3, r7, r1
1004093c:	0019      	movs	r1, r3
1004093e:	2000      	movs	r0, #0
10040940:	f004 f83e 	bl	100449c0 <BSP_COM_Init>

#endif
  
  RxUART_Init();
10040944:	f000 f814 	bl	10040970 <RxUART_Init>
  
  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
10040948:	f002 fc2e 	bl	100431a8 <HW_RNG_Init>
1004094c:	1e03      	subs	r3, r0, #0
1004094e:	d001      	beq.n	10040954 <MX_APPE_Init+0x4a>
  {
    Error_Handler();
10040950:	f000 faee 	bl	10040f30 <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
10040954:	f002 f998 	bl	10042c88 <HW_AES_Init>
  HW_PKA_Init();
10040958:	f002 faac 	bl	10042eb4 <HW_PKA_Init>
  APP_BLE_Init();
1004095c:	f000 ff56 	bl	1004180c <APP_BLE_Init>
  UTIL_LPM_Init();
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
10040960:	2000      	movs	r0, #0
10040962:	f002 f936 	bl	10042bd2 <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
10040966:	2300      	movs	r3, #0
}
10040968:	0018      	movs	r0, r3
1004096a:	46bd      	mov	sp, r7
1004096c:	b006      	add	sp, #24
1004096e:	bd80      	pop	{r7, pc}

10040970 <RxUART_Init>:
#endif

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

static void RxUART_Init(void)
{
10040970:	b580      	push	{r7, lr}
10040972:	af00      	add	r7, sp, #0
  /* Enable the RX not empty interrupt */
  LL_USART_EnableIT_RXNE(USART1);
10040974:	4b0a      	ldr	r3, [pc, #40]	@ (100409a0 <RxUART_Init+0x30>)
10040976:	0018      	movs	r0, r3
10040978:	f7ff ffa8 	bl	100408cc <LL_USART_EnableIT_RXNE_RXFNE>

  /* Enable the UART IRQ */
  NVIC_SetPriority(USART1_IRQn, IRQ_HIGH_PRIORITY);
1004097c:	2101      	movs	r1, #1
1004097e:	2008      	movs	r0, #8
10040980:	f7ff ff36 	bl	100407f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
10040984:	2008      	movs	r0, #8
10040986:	f7ff ff19 	bl	100407bc <__NVIC_EnableIRQ>
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  setvbuf(stdout, NULL, _IONBF, 0);
1004098a:	4b06      	ldr	r3, [pc, #24]	@ (100409a4 <RxUART_Init+0x34>)
1004098c:	681b      	ldr	r3, [r3, #0]
1004098e:	6898      	ldr	r0, [r3, #8]
10040990:	2300      	movs	r3, #0
10040992:	2202      	movs	r2, #2
10040994:	2100      	movs	r1, #0
10040996:	f00d f94b 	bl	1004dc30 <setvbuf>
#endif
}
1004099a:	46c0      	nop			@ (mov r8, r8)
1004099c:	46bd      	mov	sp, r7
1004099e:	bd80      	pop	{r7, pc}
100409a0:	41004000 	.word	0x41004000
100409a4:	200008bc 	.word	0x200008bc

100409a8 <UartRxCpltCallback>:

void UartRxCpltCallback(uint8_t * pRxDataBuff, uint16_t nDataSize)
{
100409a8:	b580      	push	{r7, lr}
100409aa:	b082      	sub	sp, #8
100409ac:	af00      	add	r7, sp, #0
100409ae:	6078      	str	r0, [r7, #4]
100409b0:	000a      	movs	r2, r1
100409b2:	1cbb      	adds	r3, r7, #2
100409b4:	801a      	strh	r2, [r3, #0]
  // Loop in case nDataSize > 1 (always 1 in current implementation).
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
100409b6:	4b15      	ldr	r3, [pc, #84]	@ (10040a0c <UartRxCpltCallback+0x64>)
100409b8:	881b      	ldrh	r3, [r3, #0]
100409ba:	2bff      	cmp	r3, #255	@ 0xff
100409bc:	d821      	bhi.n	10040a02 <UartRxCpltCallback+0x5a>
  {
    if (*pRxDataBuff == '\r')
100409be:	687b      	ldr	r3, [r7, #4]
100409c0:	781b      	ldrb	r3, [r3, #0]
100409c2:	2b0d      	cmp	r3, #13
100409c4:	d112      	bne.n	100409ec <UartRxCpltCallback+0x44>
    {
      APP_DBG_MSG("received %s\n", CommandString);
100409c6:	4a12      	ldr	r2, [pc, #72]	@ (10040a10 <UartRxCpltCallback+0x68>)
100409c8:	4b12      	ldr	r3, [pc, #72]	@ (10040a14 <UartRxCpltCallback+0x6c>)
100409ca:	0011      	movs	r1, r2
100409cc:	0018      	movs	r0, r3
100409ce:	f00d f8bf 	bl	1004db50 <iprintf>

      UartCmdExecute();
100409d2:	f000 f821 	bl	10040a18 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
100409d6:	4b0d      	ldr	r3, [pc, #52]	@ (10040a0c <UartRxCpltCallback+0x64>)
100409d8:	2200      	movs	r2, #0
100409da:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
100409dc:	2380      	movs	r3, #128	@ 0x80
100409de:	005a      	lsls	r2, r3, #1
100409e0:	4b0b      	ldr	r3, [pc, #44]	@ (10040a10 <UartRxCpltCallback+0x68>)
100409e2:	2100      	movs	r1, #0
100409e4:	0018      	movs	r0, r3
100409e6:	f00d fad3 	bl	1004df90 <memset>
    else
    {
      CommandString[indexReceiveChar++] = *pRxDataBuff;
    }
  }
}
100409ea:	e00a      	b.n	10040a02 <UartRxCpltCallback+0x5a>
      CommandString[indexReceiveChar++] = *pRxDataBuff;
100409ec:	4b07      	ldr	r3, [pc, #28]	@ (10040a0c <UartRxCpltCallback+0x64>)
100409ee:	881b      	ldrh	r3, [r3, #0]
100409f0:	1c5a      	adds	r2, r3, #1
100409f2:	b291      	uxth	r1, r2
100409f4:	4a05      	ldr	r2, [pc, #20]	@ (10040a0c <UartRxCpltCallback+0x64>)
100409f6:	8011      	strh	r1, [r2, #0]
100409f8:	001a      	movs	r2, r3
100409fa:	687b      	ldr	r3, [r7, #4]
100409fc:	7819      	ldrb	r1, [r3, #0]
100409fe:	4b04      	ldr	r3, [pc, #16]	@ (10040a10 <UartRxCpltCallback+0x68>)
10040a00:	5499      	strb	r1, [r3, r2]
}
10040a02:	46c0      	nop			@ (mov r8, r8)
10040a04:	46bd      	mov	sp, r7
10040a06:	b002      	add	sp, #8
10040a08:	bd80      	pop	{r7, pc}
10040a0a:	46c0      	nop			@ (mov r8, r8)
10040a0c:	20000294 	.word	0x20000294
10040a10:	20000194 	.word	0x20000194
10040a14:	1004eab8 	.word	0x1004eab8

10040a18 <UartCmdExecute>:

static void UartCmdExecute(void)
{
10040a18:	b580      	push	{r7, lr}
10040a1a:	af00      	add	r7, sp, #0

}
10040a1c:	46c0      	nop			@ (mov r8, r8)
10040a1e:	46bd      	mov	sp, r7
10040a20:	bd80      	pop	{r7, pc}

10040a22 <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10040a22:	b580      	push	{r7, lr}
10040a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10040a26:	2301      	movs	r3, #1
10040a28:	425b      	negs	r3, r3
10040a2a:	0018      	movs	r0, r3
10040a2c:	f008 fd24 	bl	10049478 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10040a30:	46c0      	nop			@ (mov r8, r8)
10040a32:	46bd      	mov	sp, r7
10040a34:	bd80      	pop	{r7, pc}

10040a36 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10040a36:	b580      	push	{r7, lr}
10040a38:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10040a3a:	46c0      	nop			@ (mov r8, r8)
}
10040a3c:	46bd      	mov	sp, r7
10040a3e:	bd80      	pop	{r7, pc}

10040a40 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10040a40:	b580      	push	{r7, lr}
10040a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10040a44:	46c0      	nop			@ (mov r8, r8)
10040a46:	46bd      	mov	sp, r7
10040a48:	bd80      	pop	{r7, pc}
	...

10040a4c <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10040a4c:	b580      	push	{r7, lr}
10040a4e:	b082      	sub	sp, #8
10040a50:	af00      	add	r7, sp, #0
10040a52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10040a54:	4b08      	ldr	r3, [pc, #32]	@ (10040a78 <LL_PWR_SetNoPullA+0x2c>)
10040a56:	6a1a      	ldr	r2, [r3, #32]
10040a58:	687b      	ldr	r3, [r7, #4]
10040a5a:	43d9      	mvns	r1, r3
10040a5c:	4b06      	ldr	r3, [pc, #24]	@ (10040a78 <LL_PWR_SetNoPullA+0x2c>)
10040a5e:	400a      	ands	r2, r1
10040a60:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10040a62:	4b05      	ldr	r3, [pc, #20]	@ (10040a78 <LL_PWR_SetNoPullA+0x2c>)
10040a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10040a66:	687b      	ldr	r3, [r7, #4]
10040a68:	43d9      	mvns	r1, r3
10040a6a:	4b03      	ldr	r3, [pc, #12]	@ (10040a78 <LL_PWR_SetNoPullA+0x2c>)
10040a6c:	400a      	ands	r2, r1
10040a6e:	625a      	str	r2, [r3, #36]	@ 0x24
}
10040a70:	46c0      	nop			@ (mov r8, r8)
10040a72:	46bd      	mov	sp, r7
10040a74:	b002      	add	sp, #8
10040a76:	bd80      	pop	{r7, pc}
10040a78:	48500000 	.word	0x48500000

10040a7c <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10040a7c:	b580      	push	{r7, lr}
10040a7e:	b082      	sub	sp, #8
10040a80:	af00      	add	r7, sp, #0
10040a82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10040a84:	4b08      	ldr	r3, [pc, #32]	@ (10040aa8 <LL_PWR_SetNoPullB+0x2c>)
10040a86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10040a88:	687b      	ldr	r3, [r7, #4]
10040a8a:	43d9      	mvns	r1, r3
10040a8c:	4b06      	ldr	r3, [pc, #24]	@ (10040aa8 <LL_PWR_SetNoPullB+0x2c>)
10040a8e:	400a      	ands	r2, r1
10040a90:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10040a92:	4b05      	ldr	r3, [pc, #20]	@ (10040aa8 <LL_PWR_SetNoPullB+0x2c>)
10040a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10040a96:	687b      	ldr	r3, [r7, #4]
10040a98:	43d9      	mvns	r1, r3
10040a9a:	4b03      	ldr	r3, [pc, #12]	@ (10040aa8 <LL_PWR_SetNoPullB+0x2c>)
10040a9c:	400a      	ands	r2, r1
10040a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10040aa0:	46c0      	nop			@ (mov r8, r8)
10040aa2:	46bd      	mov	sp, r7
10040aa4:	b002      	add	sp, #8
10040aa6:	bd80      	pop	{r7, pc}
10040aa8:	48500000 	.word	0x48500000

10040aac <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10040aac:	b580      	push	{r7, lr}
10040aae:	b082      	sub	sp, #8
10040ab0:	af00      	add	r7, sp, #0
10040ab2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10040ab4:	687b      	ldr	r3, [r7, #4]
10040ab6:	691b      	ldr	r3, [r3, #16]
}
10040ab8:	0018      	movs	r0, r3
10040aba:	46bd      	mov	sp, r7
10040abc:	b002      	add	sp, #8
10040abe:	bd80      	pop	{r7, pc}

10040ac0 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10040ac0:	b580      	push	{r7, lr}
10040ac2:	b084      	sub	sp, #16
10040ac4:	af00      	add	r7, sp, #0
10040ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10040ac8:	4b07      	ldr	r3, [pc, #28]	@ (10040ae8 <LL_AHB1_GRP1_EnableClock+0x28>)
10040aca:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040acc:	4b06      	ldr	r3, [pc, #24]	@ (10040ae8 <LL_AHB1_GRP1_EnableClock+0x28>)
10040ace:	687a      	ldr	r2, [r7, #4]
10040ad0:	430a      	orrs	r2, r1
10040ad2:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040ad4:	4b04      	ldr	r3, [pc, #16]	@ (10040ae8 <LL_AHB1_GRP1_EnableClock+0x28>)
10040ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040ad8:	687a      	ldr	r2, [r7, #4]
10040ada:	4013      	ands	r3, r2
10040adc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040ade:	68fb      	ldr	r3, [r7, #12]
}
10040ae0:	46c0      	nop			@ (mov r8, r8)
10040ae2:	46bd      	mov	sp, r7
10040ae4:	b004      	add	sp, #16
10040ae6:	bd80      	pop	{r7, pc}
10040ae8:	48400000 	.word	0x48400000

10040aec <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10040aec:	b580      	push	{r7, lr}
10040aee:	b084      	sub	sp, #16
10040af0:	af00      	add	r7, sp, #0
10040af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10040af4:	4b07      	ldr	r3, [pc, #28]	@ (10040b14 <LL_APB2_GRP1_EnableClock+0x28>)
10040af6:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10040af8:	4b06      	ldr	r3, [pc, #24]	@ (10040b14 <LL_APB2_GRP1_EnableClock+0x28>)
10040afa:	687a      	ldr	r2, [r7, #4]
10040afc:	430a      	orrs	r2, r1
10040afe:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10040b00:	4b04      	ldr	r3, [pc, #16]	@ (10040b14 <LL_APB2_GRP1_EnableClock+0x28>)
10040b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040b04:	687a      	ldr	r2, [r7, #4]
10040b06:	4013      	ands	r3, r2
10040b08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040b0a:	68fb      	ldr	r3, [r7, #12]
}
10040b0c:	46c0      	nop			@ (mov r8, r8)
10040b0e:	46bd      	mov	sp, r7
10040b10:	b004      	add	sp, #16
10040b12:	bd80      	pop	{r7, pc}
10040b14:	48400000 	.word	0x48400000

10040b18 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10040b18:	b580      	push	{r7, lr}
10040b1a:	b082      	sub	sp, #8
10040b1c:	af00      	add	r7, sp, #0
10040b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10040b20:	4b06      	ldr	r3, [pc, #24]	@ (10040b3c <LL_APB2_GRP1_IsEnabledClock+0x24>)
10040b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040b24:	687a      	ldr	r2, [r7, #4]
10040b26:	4013      	ands	r3, r2
10040b28:	687a      	ldr	r2, [r7, #4]
10040b2a:	429a      	cmp	r2, r3
10040b2c:	d101      	bne.n	10040b32 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10040b2e:	2301      	movs	r3, #1
10040b30:	e000      	b.n	10040b34 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10040b32:	2300      	movs	r3, #0
}
10040b34:	0018      	movs	r0, r3
10040b36:	46bd      	mov	sp, r7
10040b38:	b002      	add	sp, #8
10040b3a:	bd80      	pop	{r7, pc}
10040b3c:	48400000 	.word	0x48400000

10040b40 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10040b40:	b580      	push	{r7, lr}
10040b42:	b082      	sub	sp, #8
10040b44:	af00      	add	r7, sp, #0
10040b46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10040b48:	4b04      	ldr	r3, [pc, #16]	@ (10040b5c <LL_APB2_GRP1_ForceReset+0x1c>)
10040b4a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10040b4c:	4b03      	ldr	r3, [pc, #12]	@ (10040b5c <LL_APB2_GRP1_ForceReset+0x1c>)
10040b4e:	687a      	ldr	r2, [r7, #4]
10040b50:	430a      	orrs	r2, r1
10040b52:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040b54:	46c0      	nop			@ (mov r8, r8)
10040b56:	46bd      	mov	sp, r7
10040b58:	b002      	add	sp, #8
10040b5a:	bd80      	pop	{r7, pc}
10040b5c:	48400000 	.word	0x48400000

10040b60 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10040b60:	b580      	push	{r7, lr}
10040b62:	b082      	sub	sp, #8
10040b64:	af00      	add	r7, sp, #0
10040b66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10040b68:	4b05      	ldr	r3, [pc, #20]	@ (10040b80 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040b6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10040b6c:	687b      	ldr	r3, [r7, #4]
10040b6e:	43d9      	mvns	r1, r3
10040b70:	4b03      	ldr	r3, [pc, #12]	@ (10040b80 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040b72:	400a      	ands	r2, r1
10040b74:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040b76:	46c0      	nop			@ (mov r8, r8)
10040b78:	46bd      	mov	sp, r7
10040b7a:	b002      	add	sp, #8
10040b7c:	bd80      	pop	{r7, pc}
10040b7e:	46c0      	nop			@ (mov r8, r8)
10040b80:	48400000 	.word	0x48400000

10040b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10040b84:	b580      	push	{r7, lr}
10040b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10040b88:	f004 f982 	bl	10044e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
10040b8c:	f000 f82e 	bl	10040bec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
10040b90:	f000 f863 	bl	10040c5a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10040b94:	f000 f970 	bl	10040e78 <MX_GPIO_Init>
  MX_RADIO_Init();
10040b98:	f000 f890 	bl	10040cbc <MX_RADIO_Init>
  MX_RADIO_TIMER_Init();
10040b9c:	f000 f8ac 	bl	10040cf8 <MX_RADIO_TIMER_Init>
  MX_PKA_Init();
10040ba0:	f000 f878 	bl	10040c94 <MX_PKA_Init>
  MX_USART1_UART_Init();
10040ba4:	f000 f91a 	bl	10040ddc <MX_USART1_UART_Init>
  MX_SPI3_Init();
10040ba8:	f000 f8da 	bl	10040d60 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_BLE */
  MX_APPE_Init(NULL);
10040bac:	2000      	movs	r0, #0
10040bae:	f7ff feac 	bl	1004090a <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  UTIL_SEQ_RegTask(1U << TASK_LED, UTIL_SEQ_RFU, function_TASK_LED);
10040bb2:	4b0c      	ldr	r3, [pc, #48]	@ (10040be4 <main+0x60>)
10040bb4:	001a      	movs	r2, r3
10040bb6:	2100      	movs	r1, #0
10040bb8:	2040      	movs	r0, #64	@ 0x40
10040bba:	f008 fd5d 	bl	10049678 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1U << TASK_LED, CFG_SEQ_PRIO_LOW);
10040bbe:	2102      	movs	r1, #2
10040bc0:	2040      	movs	r0, #64	@ 0x40
10040bc2:	f008 fd7d 	bl	100496c0 <UTIL_SEQ_SetTask>

  HAL_GPIO_WritePin(BATT_EN_GPIO_Port, BATT_EN_Pin, GPIO_PIN_RESET);
10040bc6:	4b08      	ldr	r3, [pc, #32]	@ (10040be8 <main+0x64>)
10040bc8:	2200      	movs	r2, #0
10040bca:	2101      	movs	r1, #1
10040bcc:	0018      	movs	r0, r3
10040bce:	f004 fdc6 	bl	1004575e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMU_EN_GPIO_Port, IMU_EN_Pin, GPIO_PIN_RESET);
10040bd2:	4b05      	ldr	r3, [pc, #20]	@ (10040be8 <main+0x64>)
10040bd4:	2200      	movs	r2, #0
10040bd6:	2140      	movs	r1, #64	@ 0x40
10040bd8:	0018      	movs	r0, r3
10040bda:	f004 fdc0 	bl	1004575e <HAL_GPIO_WritePin>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
10040bde:	f7ff ff20 	bl	10040a22 <MX_APPE_Process>
10040be2:	e7fc      	b.n	10040bde <main+0x5a>
10040be4:	10040f19 	.word	0x10040f19
10040be8:	48100000 	.word	0x48100000

10040bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10040bec:	b590      	push	{r4, r7, lr}
10040bee:	b089      	sub	sp, #36	@ 0x24
10040bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10040bf2:	2408      	movs	r4, #8
10040bf4:	193b      	adds	r3, r7, r4
10040bf6:	0018      	movs	r0, r3
10040bf8:	2318      	movs	r3, #24
10040bfa:	001a      	movs	r2, r3
10040bfc:	2100      	movs	r1, #0
10040bfe:	f00d f9c7 	bl	1004df90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10040c02:	003b      	movs	r3, r7
10040c04:	0018      	movs	r0, r3
10040c06:	2308      	movs	r3, #8
10040c08:	001a      	movs	r2, r3
10040c0a:	2100      	movs	r1, #0
10040c0c:	f00d f9c0 	bl	1004df90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
10040c10:	193b      	adds	r3, r7, r4
10040c12:	2203      	movs	r2, #3
10040c14:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10040c16:	193b      	adds	r3, r7, r4
10040c18:	2280      	movs	r2, #128	@ 0x80
10040c1a:	0252      	lsls	r2, r2, #9
10040c1c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10040c1e:	193b      	adds	r3, r7, r4
10040c20:	2210      	movs	r2, #16
10040c22:	60da      	str	r2, [r3, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10040c24:	193b      	adds	r3, r7, r4
10040c26:	0018      	movs	r0, r3
10040c28:	f007 f99c 	bl	10047f64 <HAL_RCC_OscConfig>
10040c2c:	1e03      	subs	r3, r0, #0
10040c2e:	d001      	beq.n	10040c34 <SystemClock_Config+0x48>
  {
    Error_Handler();
10040c30:	f000 f97e 	bl	10040f30 <Error_Handler>
  }

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10040c34:	003b      	movs	r3, r7
10040c36:	2200      	movs	r2, #0
10040c38:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV2;
10040c3a:	003b      	movs	r3, r7
10040c3c:	2220      	movs	r2, #32
10040c3e:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_0) != HAL_OK)
10040c40:	003b      	movs	r3, r7
10040c42:	2100      	movs	r1, #0
10040c44:	0018      	movs	r0, r3
10040c46:	f007 fad7 	bl	100481f8 <HAL_RCC_ClockConfig>
10040c4a:	1e03      	subs	r3, r0, #0
10040c4c:	d001      	beq.n	10040c52 <SystemClock_Config+0x66>
  {
    Error_Handler();
10040c4e:	f000 f96f 	bl	10040f30 <Error_Handler>
  }
}
10040c52:	46c0      	nop			@ (mov r8, r8)
10040c54:	46bd      	mov	sp, r7
10040c56:	b009      	add	sp, #36	@ 0x24
10040c58:	bd90      	pop	{r4, r7, pc}

10040c5a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10040c5a:	b580      	push	{r7, lr}
10040c5c:	b086      	sub	sp, #24
10040c5e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10040c60:	003b      	movs	r3, r7
10040c62:	0018      	movs	r0, r3
10040c64:	2318      	movs	r3, #24
10040c66:	001a      	movs	r2, r3
10040c68:	2100      	movs	r1, #0
10040c6a:	f00d f991 	bl	1004df90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10040c6e:	003b      	movs	r3, r7
10040c70:	2202      	movs	r2, #2
10040c72:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10040c74:	003b      	movs	r3, r7
10040c76:	2280      	movs	r2, #128	@ 0x80
10040c78:	0152      	lsls	r2, r2, #5
10040c7a:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10040c7c:	003b      	movs	r3, r7
10040c7e:	0018      	movs	r0, r3
10040c80:	f007 fc50 	bl	10048524 <HAL_RCCEx_PeriphCLKConfig>
10040c84:	1e03      	subs	r3, r0, #0
10040c86:	d001      	beq.n	10040c8c <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
10040c88:	f000 f952 	bl	10040f30 <Error_Handler>
  }
}
10040c8c:	46c0      	nop			@ (mov r8, r8)
10040c8e:	46bd      	mov	sp, r7
10040c90:	b006      	add	sp, #24
10040c92:	bd80      	pop	{r7, pc}

10040c94 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
10040c94:	b580      	push	{r7, lr}
10040c96:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */
  
  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10040c98:	4b06      	ldr	r3, [pc, #24]	@ (10040cb4 <MX_PKA_Init+0x20>)
10040c9a:	4a07      	ldr	r2, [pc, #28]	@ (10040cb8 <MX_PKA_Init+0x24>)
10040c9c:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
10040c9e:	4b05      	ldr	r3, [pc, #20]	@ (10040cb4 <MX_PKA_Init+0x20>)
10040ca0:	0018      	movs	r0, r3
10040ca2:	f004 fd79 	bl	10045798 <HAL_PKA_Init>
10040ca6:	1e03      	subs	r3, r0, #0
10040ca8:	d001      	beq.n	10040cae <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10040caa:	f000 f941 	bl	10040f30 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */
  
  /* USER CODE END PKA_Init 2 */

}
10040cae:	46c0      	nop			@ (mov r8, r8)
10040cb0:	46bd      	mov	sp, r7
10040cb2:	bd80      	pop	{r7, pc}
10040cb4:	20000298 	.word	0x20000298
10040cb8:	48300000 	.word	0x48300000

10040cbc <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10040cbc:	b580      	push	{r7, lr}
10040cbe:	b082      	sub	sp, #8
10040cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */

  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
10040cc2:	2300      	movs	r3, #0
10040cc4:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */

  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10040cc6:	2001      	movs	r0, #1
10040cc8:	f7ff ff26 	bl	10040b18 <LL_APB2_GRP1_IsEnabledClock>
10040ccc:	1e03      	subs	r3, r0, #0
10040cce:	d108      	bne.n	10040ce2 <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10040cd0:	2001      	movs	r0, #1
10040cd2:	f7ff ff35 	bl	10040b40 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10040cd6:	2001      	movs	r0, #1
10040cd8:	f7ff ff42 	bl	10040b60 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10040cdc:	2001      	movs	r0, #1
10040cde:	f7ff ff05 	bl	10040aec <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
10040ce2:	23c0      	movs	r3, #192	@ 0xc0
10040ce4:	05db      	lsls	r3, r3, #23
10040ce6:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
10040ce8:	1d3b      	adds	r3, r7, #4
10040cea:	0018      	movs	r0, r3
10040cec:	f005 f84a 	bl	10045d84 <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */

  /* USER CODE END RADIO_Init 2 */

}
10040cf0:	46c0      	nop			@ (mov r8, r8)
10040cf2:	46bd      	mov	sp, r7
10040cf4:	b002      	add	sp, #8
10040cf6:	bd80      	pop	{r7, pc}

10040cf8 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
10040cf8:	b580      	push	{r7, lr}
10040cfa:	b082      	sub	sp, #8
10040cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
  
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
10040cfe:	003b      	movs	r3, r7
10040d00:	0018      	movs	r0, r3
10040d02:	2308      	movs	r3, #8
10040d04:	001a      	movs	r2, r3
10040d06:	2100      	movs	r1, #0
10040d08:	f00d f942 	bl	1004df90 <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
  
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10040d0c:	2001      	movs	r0, #1
10040d0e:	f7ff ff03 	bl	10040b18 <LL_APB2_GRP1_IsEnabledClock>
10040d12:	1e03      	subs	r3, r0, #0
10040d14:	d108      	bne.n	10040d28 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10040d16:	2001      	movs	r0, #1
10040d18:	f7ff ff12 	bl	10040b40 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10040d1c:	2001      	movs	r0, #1
10040d1e:	f7ff ff1f 	bl	10040b60 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10040d22:	2001      	movs	r0, #1
10040d24:	f7ff fee2 	bl	10040aec <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
10040d28:	46c0      	nop			@ (mov r8, r8)
10040d2a:	4b0c      	ldr	r3, [pc, #48]	@ (10040d5c <MX_RADIO_TIMER_Init+0x64>)
10040d2c:	0018      	movs	r0, r3
10040d2e:	f7ff febd 	bl	10040aac <LL_RADIO_TIMER_GetAbsoluteTime>
10040d32:	0003      	movs	r3, r0
10040d34:	2b0f      	cmp	r3, #15
10040d36:	d9f8      	bls.n	10040d2a <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10040d38:	003b      	movs	r3, r7
10040d3a:	22a0      	movs	r2, #160	@ 0xa0
10040d3c:	0052      	lsls	r2, r2, #1
10040d3e:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
10040d40:	003b      	movs	r3, r7
10040d42:	2200      	movs	r2, #0
10040d44:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
10040d46:	003b      	movs	r3, r7
10040d48:	2200      	movs	r2, #0
10040d4a:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10040d4c:	003b      	movs	r3, r7
10040d4e:	0018      	movs	r0, r3
10040d50:	f005 fcde 	bl	10046710 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */

  /* USER CODE END RADIO_TIMER_Init 2 */

}
10040d54:	46c0      	nop			@ (mov r8, r8)
10040d56:	46bd      	mov	sp, r7
10040d58:	b002      	add	sp, #8
10040d5a:	bd80      	pop	{r7, pc}
10040d5c:	60001800 	.word	0x60001800

10040d60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
10040d60:	b580      	push	{r7, lr}
10040d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
10040d64:	4b1b      	ldr	r3, [pc, #108]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040d66:	4a1c      	ldr	r2, [pc, #112]	@ (10040dd8 <MX_SPI3_Init+0x78>)
10040d68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
10040d6a:	4b1a      	ldr	r3, [pc, #104]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040d6c:	2282      	movs	r2, #130	@ 0x82
10040d6e:	0052      	lsls	r2, r2, #1
10040d70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
10040d72:	4b18      	ldr	r3, [pc, #96]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040d74:	2200      	movs	r2, #0
10040d76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
10040d78:	4b16      	ldr	r3, [pc, #88]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040d7a:	22c0      	movs	r2, #192	@ 0xc0
10040d7c:	0092      	lsls	r2, r2, #2
10040d7e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
10040d80:	4b14      	ldr	r3, [pc, #80]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040d82:	2200      	movs	r2, #0
10040d84:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
10040d86:	4b13      	ldr	r3, [pc, #76]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040d88:	2200      	movs	r2, #0
10040d8a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
10040d8c:	4b11      	ldr	r3, [pc, #68]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040d8e:	2280      	movs	r2, #128	@ 0x80
10040d90:	02d2      	lsls	r2, r2, #11
10040d92:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
10040d94:	4b0f      	ldr	r3, [pc, #60]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040d96:	2200      	movs	r2, #0
10040d98:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
10040d9a:	4b0e      	ldr	r3, [pc, #56]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040d9c:	2200      	movs	r2, #0
10040d9e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
10040da0:	4b0c      	ldr	r3, [pc, #48]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040da2:	2200      	movs	r2, #0
10040da4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10040da6:	4b0b      	ldr	r3, [pc, #44]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040da8:	2200      	movs	r2, #0
10040daa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
10040dac:	4b09      	ldr	r3, [pc, #36]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040dae:	2207      	movs	r2, #7
10040db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
10040db2:	4b08      	ldr	r3, [pc, #32]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040db4:	2200      	movs	r2, #0
10040db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
10040db8:	4b06      	ldr	r3, [pc, #24]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040dba:	2208      	movs	r2, #8
10040dbc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
10040dbe:	4b05      	ldr	r3, [pc, #20]	@ (10040dd4 <MX_SPI3_Init+0x74>)
10040dc0:	0018      	movs	r0, r3
10040dc2:	f007 fc87 	bl	100486d4 <HAL_SPI_Init>
10040dc6:	1e03      	subs	r3, r0, #0
10040dc8:	d001      	beq.n	10040dce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
10040dca:	f000 f8b1 	bl	10040f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
10040dce:	46c0      	nop			@ (mov r8, r8)
10040dd0:	46bd      	mov	sp, r7
10040dd2:	bd80      	pop	{r7, pc}
10040dd4:	200002a4 	.word	0x200002a4
10040dd8:	41007000 	.word	0x41007000

10040ddc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
10040ddc:	b580      	push	{r7, lr}
10040dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
10040de0:	4b23      	ldr	r3, [pc, #140]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040de2:	4a24      	ldr	r2, [pc, #144]	@ (10040e74 <MX_USART1_UART_Init+0x98>)
10040de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
10040de6:	4b22      	ldr	r3, [pc, #136]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040de8:	22e1      	movs	r2, #225	@ 0xe1
10040dea:	0252      	lsls	r2, r2, #9
10040dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
10040dee:	4b20      	ldr	r3, [pc, #128]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040df0:	2200      	movs	r2, #0
10040df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
10040df4:	4b1e      	ldr	r3, [pc, #120]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040df6:	2200      	movs	r2, #0
10040df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
10040dfa:	4b1d      	ldr	r3, [pc, #116]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040dfc:	2200      	movs	r2, #0
10040dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
10040e00:	4b1b      	ldr	r3, [pc, #108]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e02:	220c      	movs	r2, #12
10040e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10040e06:	4b1a      	ldr	r3, [pc, #104]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e08:	2200      	movs	r2, #0
10040e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
10040e0c:	4b18      	ldr	r3, [pc, #96]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e0e:	2200      	movs	r2, #0
10040e10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10040e12:	4b17      	ldr	r3, [pc, #92]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e14:	2200      	movs	r2, #0
10040e16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10040e18:	4b15      	ldr	r3, [pc, #84]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e1a:	2200      	movs	r2, #0
10040e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10040e1e:	4b14      	ldr	r3, [pc, #80]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e20:	2200      	movs	r2, #0
10040e22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
10040e24:	4b12      	ldr	r3, [pc, #72]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e26:	0018      	movs	r0, r3
10040e28:	f007 fd0c 	bl	10048844 <HAL_UART_Init>
10040e2c:	1e03      	subs	r3, r0, #0
10040e2e:	d001      	beq.n	10040e34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
10040e30:	f000 f87e 	bl	10040f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10040e34:	4b0e      	ldr	r3, [pc, #56]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e36:	2100      	movs	r1, #0
10040e38:	0018      	movs	r0, r3
10040e3a:	f008 f9d3 	bl	100491e4 <HAL_UARTEx_SetTxFifoThreshold>
10040e3e:	1e03      	subs	r3, r0, #0
10040e40:	d001      	beq.n	10040e46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
10040e42:	f000 f875 	bl	10040f30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10040e46:	4b0a      	ldr	r3, [pc, #40]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e48:	2100      	movs	r1, #0
10040e4a:	0018      	movs	r0, r3
10040e4c:	f008 fa0a 	bl	10049264 <HAL_UARTEx_SetRxFifoThreshold>
10040e50:	1e03      	subs	r3, r0, #0
10040e52:	d001      	beq.n	10040e58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
10040e54:	f000 f86c 	bl	10040f30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
10040e58:	4b05      	ldr	r3, [pc, #20]	@ (10040e70 <MX_USART1_UART_Init+0x94>)
10040e5a:	0018      	movs	r0, r3
10040e5c:	f008 f988 	bl	10049170 <HAL_UARTEx_DisableFifoMode>
10040e60:	1e03      	subs	r3, r0, #0
10040e62:	d001      	beq.n	10040e68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
10040e64:	f000 f864 	bl	10040f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
10040e68:	46c0      	nop			@ (mov r8, r8)
10040e6a:	46bd      	mov	sp, r7
10040e6c:	bd80      	pop	{r7, pc}
10040e6e:	46c0      	nop			@ (mov r8, r8)
10040e70:	20000308 	.word	0x20000308
10040e74:	41004000 	.word	0x41004000

10040e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10040e78:	b580      	push	{r7, lr}
10040e7a:	b086      	sub	sp, #24
10040e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10040e7e:	1d3b      	adds	r3, r7, #4
10040e80:	0018      	movs	r0, r3
10040e82:	2314      	movs	r3, #20
10040e84:	001a      	movs	r2, r3
10040e86:	2100      	movs	r1, #0
10040e88:	f00d f882 	bl	1004df90 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
10040e8c:	2008      	movs	r0, #8
10040e8e:	f7ff fe17 	bl	10040ac0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
10040e92:	2004      	movs	r0, #4
10040e94:	f7ff fe14 	bl	10040ac0 <LL_AHB1_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
10040e98:	2390      	movs	r3, #144	@ 0x90
10040e9a:	05db      	lsls	r3, r3, #23
10040e9c:	2200      	movs	r2, #0
10040e9e:	2101      	movs	r1, #1
10040ea0:	0018      	movs	r0, r3
10040ea2:	f004 fc5c 	bl	1004575e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_EN_GPIO_Port, IMU_EN_Pin, GPIO_PIN_RESET);
10040ea6:	4b1b      	ldr	r3, [pc, #108]	@ (10040f14 <MX_GPIO_Init+0x9c>)
10040ea8:	2200      	movs	r2, #0
10040eaa:	2140      	movs	r1, #64	@ 0x40
10040eac:	0018      	movs	r0, r3
10040eae:	f004 fc56 	bl	1004575e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
10040eb2:	1d3b      	adds	r3, r7, #4
10040eb4:	2201      	movs	r2, #1
10040eb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10040eb8:	1d3b      	adds	r3, r7, #4
10040eba:	2201      	movs	r2, #1
10040ebc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10040ebe:	1d3b      	adds	r3, r7, #4
10040ec0:	2200      	movs	r2, #0
10040ec2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10040ec4:	1d3b      	adds	r3, r7, #4
10040ec6:	2200      	movs	r2, #0
10040ec8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
10040eca:	1d3a      	adds	r2, r7, #4
10040ecc:	2390      	movs	r3, #144	@ 0x90
10040ece:	05db      	lsls	r3, r3, #23
10040ed0:	0011      	movs	r1, r2
10040ed2:	0018      	movs	r0, r3
10040ed4:	f004 fa9a 	bl	1004540c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_EN_Pin */
  GPIO_InitStruct.Pin = IMU_EN_Pin;
10040ed8:	1d3b      	adds	r3, r7, #4
10040eda:	2240      	movs	r2, #64	@ 0x40
10040edc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10040ede:	1d3b      	adds	r3, r7, #4
10040ee0:	2201      	movs	r2, #1
10040ee2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10040ee4:	1d3b      	adds	r3, r7, #4
10040ee6:	2200      	movs	r2, #0
10040ee8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10040eea:	1d3b      	adds	r3, r7, #4
10040eec:	2200      	movs	r2, #0
10040eee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(IMU_EN_GPIO_Port, &GPIO_InitStruct);
10040ef0:	1d3b      	adds	r3, r7, #4
10040ef2:	4a08      	ldr	r2, [pc, #32]	@ (10040f14 <MX_GPIO_Init+0x9c>)
10040ef4:	0019      	movs	r1, r3
10040ef6:	0010      	movs	r0, r2
10040ef8:	f004 fa88 	bl	1004540c <HAL_GPIO_Init>

  /**/
  LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_0);
10040efc:	2001      	movs	r0, #1
10040efe:	f7ff fda5 	bl	10040a4c <LL_PWR_SetNoPullA>

  /*RT DEBUG GPIO_Init */
  RT_DEBUG_GPIO_Init();
10040f02:	f001 fe70 	bl	10042be6 <RT_DEBUG_GPIO_Init>

  /**/
  LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_6);
10040f06:	2040      	movs	r0, #64	@ 0x40
10040f08:	f7ff fdb8 	bl	10040a7c <LL_PWR_SetNoPullB>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10040f0c:	46c0      	nop			@ (mov r8, r8)
10040f0e:	46bd      	mov	sp, r7
10040f10:	b006      	add	sp, #24
10040f12:	bd80      	pop	{r7, pc}
10040f14:	48100000 	.word	0x48100000

10040f18 <function_TASK_LED>:

/* USER CODE BEGIN 4 */
/* task definition */
static void function_TASK_LED( void )
{
10040f18:	b580      	push	{r7, lr}
10040f1a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
10040f1c:	2390      	movs	r3, #144	@ 0x90
10040f1e:	05db      	lsls	r3, r3, #23
10040f20:	2200      	movs	r2, #0
10040f22:	2101      	movs	r1, #1
10040f24:	0018      	movs	r0, r3
10040f26:	f004 fc1a 	bl	1004575e <HAL_GPIO_WritePin>
}
10040f2a:	46c0      	nop			@ (mov r8, r8)
10040f2c:	46bd      	mov	sp, r7
10040f2e:	bd80      	pop	{r7, pc}

10040f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10040f30:	b580      	push	{r7, lr}
10040f32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10040f34:	b672      	cpsid	i
}
10040f36:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10040f38:	e7fe      	b.n	10040f38 <Error_Handler+0x8>
	...

10040f3c <LL_PWR_SetNoPullA>:
{
10040f3c:	b580      	push	{r7, lr}
10040f3e:	b082      	sub	sp, #8
10040f40:	af00      	add	r7, sp, #0
10040f42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10040f44:	4b08      	ldr	r3, [pc, #32]	@ (10040f68 <LL_PWR_SetNoPullA+0x2c>)
10040f46:	6a1a      	ldr	r2, [r3, #32]
10040f48:	687b      	ldr	r3, [r7, #4]
10040f4a:	43d9      	mvns	r1, r3
10040f4c:	4b06      	ldr	r3, [pc, #24]	@ (10040f68 <LL_PWR_SetNoPullA+0x2c>)
10040f4e:	400a      	ands	r2, r1
10040f50:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10040f52:	4b05      	ldr	r3, [pc, #20]	@ (10040f68 <LL_PWR_SetNoPullA+0x2c>)
10040f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10040f56:	687b      	ldr	r3, [r7, #4]
10040f58:	43d9      	mvns	r1, r3
10040f5a:	4b03      	ldr	r3, [pc, #12]	@ (10040f68 <LL_PWR_SetNoPullA+0x2c>)
10040f5c:	400a      	ands	r2, r1
10040f5e:	625a      	str	r2, [r3, #36]	@ 0x24
}
10040f60:	46c0      	nop			@ (mov r8, r8)
10040f62:	46bd      	mov	sp, r7
10040f64:	b002      	add	sp, #8
10040f66:	bd80      	pop	{r7, pc}
10040f68:	48500000 	.word	0x48500000

10040f6c <LL_PWR_SetNoPullB>:
{
10040f6c:	b580      	push	{r7, lr}
10040f6e:	b082      	sub	sp, #8
10040f70:	af00      	add	r7, sp, #0
10040f72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10040f74:	4b08      	ldr	r3, [pc, #32]	@ (10040f98 <LL_PWR_SetNoPullB+0x2c>)
10040f76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10040f78:	687b      	ldr	r3, [r7, #4]
10040f7a:	43d9      	mvns	r1, r3
10040f7c:	4b06      	ldr	r3, [pc, #24]	@ (10040f98 <LL_PWR_SetNoPullB+0x2c>)
10040f7e:	400a      	ands	r2, r1
10040f80:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10040f82:	4b05      	ldr	r3, [pc, #20]	@ (10040f98 <LL_PWR_SetNoPullB+0x2c>)
10040f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10040f86:	687b      	ldr	r3, [r7, #4]
10040f88:	43d9      	mvns	r1, r3
10040f8a:	4b03      	ldr	r3, [pc, #12]	@ (10040f98 <LL_PWR_SetNoPullB+0x2c>)
10040f8c:	400a      	ands	r2, r1
10040f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10040f90:	46c0      	nop			@ (mov r8, r8)
10040f92:	46bd      	mov	sp, r7
10040f94:	b002      	add	sp, #8
10040f96:	bd80      	pop	{r7, pc}
10040f98:	48500000 	.word	0x48500000

10040f9c <LL_AHB1_GRP1_EnableClock>:
{
10040f9c:	b580      	push	{r7, lr}
10040f9e:	b084      	sub	sp, #16
10040fa0:	af00      	add	r7, sp, #0
10040fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10040fa4:	4b07      	ldr	r3, [pc, #28]	@ (10040fc4 <LL_AHB1_GRP1_EnableClock+0x28>)
10040fa6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040fa8:	4b06      	ldr	r3, [pc, #24]	@ (10040fc4 <LL_AHB1_GRP1_EnableClock+0x28>)
10040faa:	687a      	ldr	r2, [r7, #4]
10040fac:	430a      	orrs	r2, r1
10040fae:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040fb0:	4b04      	ldr	r3, [pc, #16]	@ (10040fc4 <LL_AHB1_GRP1_EnableClock+0x28>)
10040fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040fb4:	687a      	ldr	r2, [r7, #4]
10040fb6:	4013      	ands	r3, r2
10040fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040fba:	68fb      	ldr	r3, [r7, #12]
}
10040fbc:	46c0      	nop			@ (mov r8, r8)
10040fbe:	46bd      	mov	sp, r7
10040fc0:	b004      	add	sp, #16
10040fc2:	bd80      	pop	{r7, pc}
10040fc4:	48400000 	.word	0x48400000

10040fc8 <LL_APB0_GRP1_EnableClock>:
{
10040fc8:	b580      	push	{r7, lr}
10040fca:	b084      	sub	sp, #16
10040fcc:	af00      	add	r7, sp, #0
10040fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10040fd0:	4b07      	ldr	r3, [pc, #28]	@ (10040ff0 <LL_APB0_GRP1_EnableClock+0x28>)
10040fd2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10040fd4:	4b06      	ldr	r3, [pc, #24]	@ (10040ff0 <LL_APB0_GRP1_EnableClock+0x28>)
10040fd6:	687a      	ldr	r2, [r7, #4]
10040fd8:	430a      	orrs	r2, r1
10040fda:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10040fdc:	4b04      	ldr	r3, [pc, #16]	@ (10040ff0 <LL_APB0_GRP1_EnableClock+0x28>)
10040fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10040fe0:	687a      	ldr	r2, [r7, #4]
10040fe2:	4013      	ands	r3, r2
10040fe4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040fe6:	68fb      	ldr	r3, [r7, #12]
}
10040fe8:	46c0      	nop			@ (mov r8, r8)
10040fea:	46bd      	mov	sp, r7
10040fec:	b004      	add	sp, #16
10040fee:	bd80      	pop	{r7, pc}
10040ff0:	48400000 	.word	0x48400000

10040ff4 <LL_APB1_GRP1_EnableClock>:
{
10040ff4:	b580      	push	{r7, lr}
10040ff6:	b084      	sub	sp, #16
10040ff8:	af00      	add	r7, sp, #0
10040ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10040ffc:	4b07      	ldr	r3, [pc, #28]	@ (1004101c <LL_APB1_GRP1_EnableClock+0x28>)
10040ffe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10041000:	4b06      	ldr	r3, [pc, #24]	@ (1004101c <LL_APB1_GRP1_EnableClock+0x28>)
10041002:	687a      	ldr	r2, [r7, #4]
10041004:	430a      	orrs	r2, r1
10041006:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10041008:	4b04      	ldr	r3, [pc, #16]	@ (1004101c <LL_APB1_GRP1_EnableClock+0x28>)
1004100a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004100c:	687a      	ldr	r2, [r7, #4]
1004100e:	4013      	ands	r3, r2
10041010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10041012:	68fb      	ldr	r3, [r7, #12]
}
10041014:	46c0      	nop			@ (mov r8, r8)
10041016:	46bd      	mov	sp, r7
10041018:	b004      	add	sp, #16
1004101a:	bd80      	pop	{r7, pc}
1004101c:	48400000 	.word	0x48400000

10041020 <LL_APB2_GRP1_EnableClock>:
{
10041020:	b580      	push	{r7, lr}
10041022:	b084      	sub	sp, #16
10041024:	af00      	add	r7, sp, #0
10041026:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10041028:	4b07      	ldr	r3, [pc, #28]	@ (10041048 <LL_APB2_GRP1_EnableClock+0x28>)
1004102a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004102c:	4b06      	ldr	r3, [pc, #24]	@ (10041048 <LL_APB2_GRP1_EnableClock+0x28>)
1004102e:	687a      	ldr	r2, [r7, #4]
10041030:	430a      	orrs	r2, r1
10041032:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10041034:	4b04      	ldr	r3, [pc, #16]	@ (10041048 <LL_APB2_GRP1_EnableClock+0x28>)
10041036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10041038:	687a      	ldr	r2, [r7, #4]
1004103a:	4013      	ands	r3, r2
1004103c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004103e:	68fb      	ldr	r3, [r7, #12]
}
10041040:	46c0      	nop			@ (mov r8, r8)
10041042:	46bd      	mov	sp, r7
10041044:	b004      	add	sp, #16
10041046:	bd80      	pop	{r7, pc}
10041048:	48400000 	.word	0x48400000

1004104c <LL_APB2_GRP1_IsEnabledClock>:
{
1004104c:	b580      	push	{r7, lr}
1004104e:	b082      	sub	sp, #8
10041050:	af00      	add	r7, sp, #0
10041052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10041054:	4b06      	ldr	r3, [pc, #24]	@ (10041070 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10041056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10041058:	687a      	ldr	r2, [r7, #4]
1004105a:	4013      	ands	r3, r2
1004105c:	687a      	ldr	r2, [r7, #4]
1004105e:	429a      	cmp	r2, r3
10041060:	d101      	bne.n	10041066 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10041062:	2301      	movs	r3, #1
10041064:	e000      	b.n	10041068 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10041066:	2300      	movs	r3, #0
}
10041068:	0018      	movs	r0, r3
1004106a:	46bd      	mov	sp, r7
1004106c:	b002      	add	sp, #8
1004106e:	bd80      	pop	{r7, pc}
10041070:	48400000 	.word	0x48400000

10041074 <LL_APB2_GRP1_ForceReset>:
{
10041074:	b580      	push	{r7, lr}
10041076:	b082      	sub	sp, #8
10041078:	af00      	add	r7, sp, #0
1004107a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004107c:	4b04      	ldr	r3, [pc, #16]	@ (10041090 <LL_APB2_GRP1_ForceReset+0x1c>)
1004107e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10041080:	4b03      	ldr	r3, [pc, #12]	@ (10041090 <LL_APB2_GRP1_ForceReset+0x1c>)
10041082:	687a      	ldr	r2, [r7, #4]
10041084:	430a      	orrs	r2, r1
10041086:	641a      	str	r2, [r3, #64]	@ 0x40
}
10041088:	46c0      	nop			@ (mov r8, r8)
1004108a:	46bd      	mov	sp, r7
1004108c:	b002      	add	sp, #8
1004108e:	bd80      	pop	{r7, pc}
10041090:	48400000 	.word	0x48400000

10041094 <LL_APB2_GRP1_ReleaseReset>:
{
10041094:	b580      	push	{r7, lr}
10041096:	b082      	sub	sp, #8
10041098:	af00      	add	r7, sp, #0
1004109a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004109c:	4b05      	ldr	r3, [pc, #20]	@ (100410b4 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004109e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100410a0:	687b      	ldr	r3, [r7, #4]
100410a2:	43d9      	mvns	r1, r3
100410a4:	4b03      	ldr	r3, [pc, #12]	@ (100410b4 <LL_APB2_GRP1_ReleaseReset+0x20>)
100410a6:	400a      	ands	r2, r1
100410a8:	641a      	str	r2, [r3, #64]	@ 0x40
}
100410aa:	46c0      	nop			@ (mov r8, r8)
100410ac:	46bd      	mov	sp, r7
100410ae:	b002      	add	sp, #8
100410b0:	bd80      	pop	{r7, pc}
100410b2:	46c0      	nop			@ (mov r8, r8)
100410b4:	48400000 	.word	0x48400000

100410b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100410b8:	b580      	push	{r7, lr}
100410ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* IOs configuration to have the lowest power consumption in DEEPSTOP */
  lowPowerIOSetup();
100410bc:	f000 f920 	bl	10041300 <lowPowerIOSetup>

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
100410c0:	2380      	movs	r3, #128	@ 0x80
100410c2:	005b      	lsls	r3, r3, #1
100410c4:	0018      	movs	r0, r3
100410c6:	f7ff ff7f 	bl	10040fc8 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100410ca:	46c0      	nop			@ (mov r8, r8)
100410cc:	46bd      	mov	sp, r7
100410ce:	bd80      	pop	{r7, pc}

100410d0 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
100410d0:	b580      	push	{r7, lr}
100410d2:	b082      	sub	sp, #8
100410d4:	af00      	add	r7, sp, #0
100410d6:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
100410d8:	687b      	ldr	r3, [r7, #4]
100410da:	681b      	ldr	r3, [r3, #0]
100410dc:	4a09      	ldr	r2, [pc, #36]	@ (10041104 <HAL_PKA_MspInit+0x34>)
100410de:	4293      	cmp	r3, r2
100410e0:	d10c      	bne.n	100410fc <HAL_PKA_MspInit+0x2c>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
100410e2:	2380      	movs	r3, #128	@ 0x80
100410e4:	025b      	lsls	r3, r3, #9
100410e6:	0018      	movs	r0, r3
100410e8:	f7ff ff58 	bl	10040f9c <LL_AHB1_GRP1_EnableClock>
    /* PKA interrupt Init */
    HAL_NVIC_SetPriority(PKA_IRQn, 1, 0);
100410ec:	2200      	movs	r2, #0
100410ee:	2101      	movs	r1, #1
100410f0:	200d      	movs	r0, #13
100410f2:	f003 ffff 	bl	100450f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PKA_IRQn);
100410f6:	200d      	movs	r0, #13
100410f8:	f004 f811 	bl	1004511e <HAL_NVIC_EnableIRQ>

  /* USER CODE END PKA_MspInit 1 */

  }

}
100410fc:	46c0      	nop			@ (mov r8, r8)
100410fe:	46bd      	mov	sp, r7
10041100:	b002      	add	sp, #8
10041102:	bd80      	pop	{r7, pc}
10041104:	48300000 	.word	0x48300000

10041108 <HAL_RADIO_MspInit>:
* This function configures the hardware resources used in this example
* @param hradio: RADIO handle pointer
* @retval None
*/
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
10041108:	b590      	push	{r4, r7, lr}
1004110a:	b089      	sub	sp, #36	@ 0x24
1004110c:	af00      	add	r7, sp, #0
1004110e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10041110:	2408      	movs	r4, #8
10041112:	193b      	adds	r3, r7, r4
10041114:	0018      	movs	r0, r3
10041116:	2318      	movs	r3, #24
10041118:	001a      	movs	r2, r3
1004111a:	2100      	movs	r1, #0
1004111c:	f00c ff38 	bl	1004df90 <memset>
  if(hradio->Instance==RADIO)
10041120:	687b      	ldr	r3, [r7, #4]
10041122:	681a      	ldr	r2, [r3, #0]
10041124:	23c0      	movs	r3, #192	@ 0xc0
10041126:	05db      	lsls	r3, r3, #23
10041128:	429a      	cmp	r2, r3
1004112a:	d12d      	bne.n	10041188 <HAL_RADIO_MspInit+0x80>

  /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
1004112c:	193b      	adds	r3, r7, r4
1004112e:	2201      	movs	r2, #1
10041130:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
10041132:	193b      	adds	r3, r7, r4
10041134:	2204      	movs	r2, #4
10041136:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10041138:	193b      	adds	r3, r7, r4
1004113a:	0018      	movs	r0, r3
1004113c:	f007 f9f2 	bl	10048524 <HAL_RCCEx_PeriphCLKConfig>
10041140:	1e03      	subs	r3, r0, #0
10041142:	d001      	beq.n	10041148 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10041144:	f7ff fef4 	bl	10040f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10041148:	2001      	movs	r0, #1
1004114a:	f7ff ff7f 	bl	1004104c <LL_APB2_GRP1_IsEnabledClock>
1004114e:	1e03      	subs	r3, r0, #0
10041150:	d108      	bne.n	10041164 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10041152:	2001      	movs	r0, #1
10041154:	f7ff ff8e 	bl	10041074 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10041158:	2001      	movs	r0, #1
1004115a:	f7ff ff9b 	bl	10041094 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
1004115e:	2001      	movs	r0, #1
10041160:	f7ff ff5e 	bl	10041020 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10041164:	f001 fd3f 	bl	10042be6 <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10041168:	2200      	movs	r2, #0
1004116a:	2100      	movs	r1, #0
1004116c:	2012      	movs	r0, #18
1004116e:	f003 ffc1 	bl	100450f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10041172:	2012      	movs	r0, #18
10041174:	f003 ffd3 	bl	1004511e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10041178:	2200      	movs	r2, #0
1004117a:	2100      	movs	r1, #0
1004117c:	2019      	movs	r0, #25
1004117e:	f003 ffb9 	bl	100450f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10041182:	2019      	movs	r0, #25
10041184:	f003 ffcb 	bl	1004511e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RADIO_MspInit 1 */

  }

}
10041188:	46c0      	nop			@ (mov r8, r8)
1004118a:	46bd      	mov	sp, r7
1004118c:	b009      	add	sp, #36	@ 0x24
1004118e:	bd90      	pop	{r4, r7, pc}

10041190 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
10041190:	b590      	push	{r4, r7, lr}
10041192:	b089      	sub	sp, #36	@ 0x24
10041194:	af00      	add	r7, sp, #0
10041196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10041198:	240c      	movs	r4, #12
1004119a:	193b      	adds	r3, r7, r4
1004119c:	0018      	movs	r0, r3
1004119e:	2314      	movs	r3, #20
100411a0:	001a      	movs	r2, r3
100411a2:	2100      	movs	r1, #0
100411a4:	f00c fef4 	bl	1004df90 <memset>
  if(hspi->Instance==SPI3)
100411a8:	687b      	ldr	r3, [r7, #4]
100411aa:	681b      	ldr	r3, [r3, #0]
100411ac:	4a23      	ldr	r2, [pc, #140]	@ (1004123c <HAL_SPI_MspInit+0xac>)
100411ae:	4293      	cmp	r3, r2
100411b0:	d13f      	bne.n	10041232 <HAL_SPI_MspInit+0xa2>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
100411b2:	2380      	movs	r3, #128	@ 0x80
100411b4:	01db      	lsls	r3, r3, #7
100411b6:	0018      	movs	r0, r3
100411b8:	f7ff ff1c 	bl	10040ff4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
100411bc:	2008      	movs	r0, #8
100411be:	f7ff feed 	bl	10040f9c <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
100411c2:	2004      	movs	r0, #4
100411c4:	f7ff feea 	bl	10040f9c <LL_AHB1_GRP1_EnableClock>
    PB3     ------> SPI3_SCK
    PA8     ------> SPI3_MISO
    PA9     ------> SPI3_NSS
    PA11     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
100411c8:	193b      	adds	r3, r7, r4
100411ca:	2208      	movs	r2, #8
100411cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100411ce:	193b      	adds	r3, r7, r4
100411d0:	2202      	movs	r2, #2
100411d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100411d4:	193b      	adds	r3, r7, r4
100411d6:	2200      	movs	r2, #0
100411d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100411da:	193b      	adds	r3, r7, r4
100411dc:	2200      	movs	r2, #0
100411de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI3;
100411e0:	193b      	adds	r3, r7, r4
100411e2:	2204      	movs	r2, #4
100411e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100411e6:	193b      	adds	r3, r7, r4
100411e8:	4a15      	ldr	r2, [pc, #84]	@ (10041240 <HAL_SPI_MspInit+0xb0>)
100411ea:	0019      	movs	r1, r3
100411ec:	0010      	movs	r0, r2
100411ee:	f004 f90d 	bl	1004540c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
100411f2:	0021      	movs	r1, r4
100411f4:	187b      	adds	r3, r7, r1
100411f6:	22b0      	movs	r2, #176	@ 0xb0
100411f8:	0112      	lsls	r2, r2, #4
100411fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100411fc:	187b      	adds	r3, r7, r1
100411fe:	2202      	movs	r2, #2
10041200:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10041202:	187b      	adds	r3, r7, r1
10041204:	2200      	movs	r2, #0
10041206:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10041208:	187b      	adds	r3, r7, r1
1004120a:	2200      	movs	r2, #0
1004120c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI3;
1004120e:	187b      	adds	r3, r7, r1
10041210:	2203      	movs	r2, #3
10041212:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10041214:	187a      	adds	r2, r7, r1
10041216:	2390      	movs	r3, #144	@ 0x90
10041218:	05db      	lsls	r3, r3, #23
1004121a:	0011      	movs	r1, r2
1004121c:	0018      	movs	r0, r3
1004121e:	f004 f8f5 	bl	1004540c <HAL_GPIO_Init>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_3);
10041222:	2008      	movs	r0, #8
10041224:	f7ff fea2 	bl	10040f6c <LL_PWR_SetNoPullB>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_8|LL_PWR_GPIO_BIT_9|LL_PWR_GPIO_BIT_11);
10041228:	23b0      	movs	r3, #176	@ 0xb0
1004122a:	011b      	lsls	r3, r3, #4
1004122c:	0018      	movs	r0, r3
1004122e:	f7ff fe85 	bl	10040f3c <LL_PWR_SetNoPullA>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
10041232:	46c0      	nop			@ (mov r8, r8)
10041234:	46bd      	mov	sp, r7
10041236:	b009      	add	sp, #36	@ 0x24
10041238:	bd90      	pop	{r4, r7, pc}
1004123a:	46c0      	nop			@ (mov r8, r8)
1004123c:	41007000 	.word	0x41007000
10041240:	48100000 	.word	0x48100000

10041244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10041244:	b590      	push	{r4, r7, lr}
10041246:	b089      	sub	sp, #36	@ 0x24
10041248:	af00      	add	r7, sp, #0
1004124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1004124c:	240c      	movs	r4, #12
1004124e:	193b      	adds	r3, r7, r4
10041250:	0018      	movs	r0, r3
10041252:	2314      	movs	r3, #20
10041254:	001a      	movs	r2, r3
10041256:	2100      	movs	r1, #0
10041258:	f00c fe9a 	bl	1004df90 <memset>
  if(huart->Instance==USART1)
1004125c:	687b      	ldr	r3, [r7, #4]
1004125e:	681b      	ldr	r3, [r3, #0]
10041260:	4a25      	ldr	r2, [pc, #148]	@ (100412f8 <HAL_UART_MspInit+0xb4>)
10041262:	4293      	cmp	r3, r2
10041264:	d144      	bne.n	100412f0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
10041266:	2380      	movs	r3, #128	@ 0x80
10041268:	00db      	lsls	r3, r3, #3
1004126a:	0018      	movs	r0, r3
1004126c:	f7ff fec2 	bl	10040ff4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10041270:	2008      	movs	r0, #8
10041272:	f7ff fe93 	bl	10040f9c <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
10041276:	2004      	movs	r0, #4
10041278:	f7ff fe90 	bl	10040f9c <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB0     ------> USART1_RX
    PA1     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BATT_EN_Pin;
1004127c:	193b      	adds	r3, r7, r4
1004127e:	2201      	movs	r2, #1
10041280:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10041282:	193b      	adds	r3, r7, r4
10041284:	2202      	movs	r2, #2
10041286:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10041288:	193b      	adds	r3, r7, r4
1004128a:	2200      	movs	r2, #0
1004128c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004128e:	193b      	adds	r3, r7, r4
10041290:	2200      	movs	r2, #0
10041292:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
10041294:	193b      	adds	r3, r7, r4
10041296:	2200      	movs	r2, #0
10041298:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BATT_EN_GPIO_Port, &GPIO_InitStruct);
1004129a:	193b      	adds	r3, r7, r4
1004129c:	4a17      	ldr	r2, [pc, #92]	@ (100412fc <HAL_UART_MspInit+0xb8>)
1004129e:	0019      	movs	r1, r3
100412a0:	0010      	movs	r0, r2
100412a2:	f004 f8b3 	bl	1004540c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
100412a6:	0021      	movs	r1, r4
100412a8:	187b      	adds	r3, r7, r1
100412aa:	2202      	movs	r2, #2
100412ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100412ae:	187b      	adds	r3, r7, r1
100412b0:	2202      	movs	r2, #2
100412b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100412b4:	187b      	adds	r3, r7, r1
100412b6:	2200      	movs	r2, #0
100412b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100412ba:	187b      	adds	r3, r7, r1
100412bc:	2200      	movs	r2, #0
100412be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART1;
100412c0:	187b      	adds	r3, r7, r1
100412c2:	2202      	movs	r2, #2
100412c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100412c6:	187a      	adds	r2, r7, r1
100412c8:	2390      	movs	r3, #144	@ 0x90
100412ca:	05db      	lsls	r3, r3, #23
100412cc:	0011      	movs	r1, r2
100412ce:	0018      	movs	r0, r3
100412d0:	f004 f89c 	bl	1004540c <HAL_GPIO_Init>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_0);
100412d4:	2001      	movs	r0, #1
100412d6:	f7ff fe49 	bl	10040f6c <LL_PWR_SetNoPullB>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_1);
100412da:	2002      	movs	r0, #2
100412dc:	f7ff fe2e 	bl	10040f3c <LL_PWR_SetNoPullA>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
100412e0:	2200      	movs	r2, #0
100412e2:	2101      	movs	r1, #1
100412e4:	2008      	movs	r0, #8
100412e6:	f003 ff05 	bl	100450f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
100412ea:	2008      	movs	r0, #8
100412ec:	f003 ff17 	bl	1004511e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
100412f0:	46c0      	nop			@ (mov r8, r8)
100412f2:	46bd      	mov	sp, r7
100412f4:	b009      	add	sp, #36	@ 0x24
100412f6:	bd90      	pop	{r4, r7, pc}
100412f8:	41004000 	.word	0x41004000
100412fc:	48100000 	.word	0x48100000

10041300 <lowPowerIOSetup>:
  * @brief  Configures the IOs pull resistors to have the optimized power consumption.
  * @param  None
  * @retval None
  */
static void lowPowerIOSetup(void)
{
10041300:	b580      	push	{r7, lr}
10041302:	af00      	add	r7, sp, #0
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_A, 
10041304:	210f      	movs	r1, #15
10041306:	2000      	movs	r0, #0
10041308:	f004 fb22 	bl	10045950 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_0|
                       PWR_GPIO_BIT_1|
                       PWR_GPIO_BIT_2|                         
                       PWR_GPIO_BIT_3);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_A, 
1004130c:	23f0      	movs	r3, #240	@ 0xf0
1004130e:	011b      	lsls	r3, r3, #4
10041310:	0019      	movs	r1, r3
10041312:	2000      	movs	r0, #0
10041314:	f004 fb56 	bl	100459c4 <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_8|
                             PWR_GPIO_BIT_9|
                             PWR_GPIO_BIT_10|
                             PWR_GPIO_BIT_11);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, 
10041318:	4b06      	ldr	r3, [pc, #24]	@ (10041334 <lowPowerIOSetup+0x34>)
1004131a:	0019      	movs	r1, r3
1004131c:	2001      	movs	r0, #1
1004131e:	f004 fb51 	bl	100459c4 <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_6|
                             PWR_GPIO_BIT_7|
                             PWR_GPIO_BIT_12|
                             PWR_GPIO_BIT_13);
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_B, 
10041322:	4b05      	ldr	r3, [pc, #20]	@ (10041338 <lowPowerIOSetup+0x38>)
10041324:	0019      	movs	r1, r3
10041326:	2001      	movs	r0, #1
10041328:	f004 fb12 	bl	10045950 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_2|
                       PWR_GPIO_BIT_4|
                       PWR_GPIO_BIT_5|  
                       PWR_GPIO_BIT_14|
                       PWR_GPIO_BIT_15);
}
1004132c:	46c0      	nop			@ (mov r8, r8)
1004132e:	46bd      	mov	sp, r7
10041330:	bd80      	pop	{r7, pc}
10041332:	46c0      	nop			@ (mov r8, r8)
10041334:	000030c9 	.word	0x000030c9
10041338:	0000c036 	.word	0x0000c036

1004133c <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
1004133c:	b580      	push	{r7, lr}
1004133e:	b082      	sub	sp, #8
10041340:	af00      	add	r7, sp, #0
10041342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
10041344:	687b      	ldr	r3, [r7, #4]
10041346:	69db      	ldr	r3, [r3, #28]
10041348:	2220      	movs	r2, #32
1004134a:	4013      	ands	r3, r2
1004134c:	2b20      	cmp	r3, #32
1004134e:	d101      	bne.n	10041354 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
10041350:	2301      	movs	r3, #1
10041352:	e000      	b.n	10041356 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
10041354:	2300      	movs	r3, #0
}
10041356:	0018      	movs	r0, r3
10041358:	46bd      	mov	sp, r7
1004135a:	b002      	add	sp, #8
1004135c:	bd80      	pop	{r7, pc}

1004135e <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
1004135e:	b580      	push	{r7, lr}
10041360:	b082      	sub	sp, #8
10041362:	af00      	add	r7, sp, #0
10041364:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
10041366:	687b      	ldr	r3, [r7, #4]
10041368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004136a:	b2db      	uxtb	r3, r3
}
1004136c:	0018      	movs	r0, r3
1004136e:	46bd      	mov	sp, r7
10041370:	b002      	add	sp, #8
10041372:	bd80      	pop	{r7, pc}

10041374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10041374:	b580      	push	{r7, lr}
10041376:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10041378:	46c0      	nop			@ (mov r8, r8)
1004137a:	46bd      	mov	sp, r7
1004137c:	bd80      	pop	{r7, pc}

1004137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1004137e:	b580      	push	{r7, lr}
10041380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10041382:	e7fe      	b.n	10041382 <HardFault_Handler+0x4>

10041384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10041384:	b580      	push	{r7, lr}
10041386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10041388:	46c0      	nop			@ (mov r8, r8)
1004138a:	46bd      	mov	sp, r7
1004138c:	bd80      	pop	{r7, pc}

1004138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1004138e:	b580      	push	{r7, lr}
10041390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10041392:	46c0      	nop			@ (mov r8, r8)
10041394:	46bd      	mov	sp, r7
10041396:	bd80      	pop	{r7, pc}

10041398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10041398:	b580      	push	{r7, lr}
1004139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
1004139c:	f003 fdd8 	bl	10044f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100413a0:	46c0      	nop			@ (mov r8, r8)
100413a2:	46bd      	mov	sp, r7
100413a4:	bd80      	pop	{r7, pc}
	...

100413a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
100413a8:	b580      	push	{r7, lr}
100413aa:	b082      	sub	sp, #8
100413ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

    uint8_t read_data; 
  
  /* If the RX FIFO is Not Empty */
  if(LL_USART_IsActiveFlag_RXNE(USART1) == 1) {
100413ae:	4b0c      	ldr	r3, [pc, #48]	@ (100413e0 <USART1_IRQHandler+0x38>)
100413b0:	0018      	movs	r0, r3
100413b2:	f7ff ffc3 	bl	1004133c <LL_USART_IsActiveFlag_RXNE_RXFNE>
100413b6:	0003      	movs	r3, r0
100413b8:	2b01      	cmp	r3, #1
100413ba:	d10c      	bne.n	100413d6 <USART1_IRQHandler+0x2e>
    /* Read a byte from the RX FIFO */
    read_data = LL_USART_ReceiveData8(USART1);
100413bc:	4b08      	ldr	r3, [pc, #32]	@ (100413e0 <USART1_IRQHandler+0x38>)
100413be:	0018      	movs	r0, r3
100413c0:	f7ff ffcd 	bl	1004135e <LL_USART_ReceiveData8>
100413c4:	0003      	movs	r3, r0
100413c6:	001a      	movs	r2, r3
100413c8:	1dfb      	adds	r3, r7, #7
100413ca:	701a      	strb	r2, [r3, #0]
    
    /* Send the data received to the user RX callback */
    UartRxCpltCallback(&read_data, 1);
100413cc:	1dfb      	adds	r3, r7, #7
100413ce:	2101      	movs	r1, #1
100413d0:	0018      	movs	r0, r3
100413d2:	f7ff fae9 	bl	100409a8 <UartRxCpltCallback>
  
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
100413d6:	46c0      	nop			@ (mov r8, r8)
100413d8:	46bd      	mov	sp, r7
100413da:	b002      	add	sp, #8
100413dc:	bd80      	pop	{r7, pc}
100413de:	46c0      	nop			@ (mov r8, r8)
100413e0:	41004000 	.word	0x41004000

100413e4 <PKA_IRQHandler>:

/**
  * @brief This function handles PKA global interrupt.
  */
void PKA_IRQHandler(void)
{
100413e4:	b580      	push	{r7, lr}
100413e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PKA_IRQn 0 */

  /* USER CODE END PKA_IRQn 0 */
  HAL_PKA_IRQHandler(&hpka);
100413e8:	4b03      	ldr	r3, [pc, #12]	@ (100413f8 <PKA_IRQHandler+0x14>)
100413ea:	0018      	movs	r0, r3
100413ec:	f004 fa30 	bl	10045850 <HAL_PKA_IRQHandler>
  /* USER CODE BEGIN PKA_IRQn 1 */

  /* USER CODE END PKA_IRQn 1 */
}
100413f0:	46c0      	nop			@ (mov r8, r8)
100413f2:	46bd      	mov	sp, r7
100413f4:	bd80      	pop	{r7, pc}
100413f6:	46c0      	nop			@ (mov r8, r8)
100413f8:	20000298 	.word	0x20000298

100413fc <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
100413fc:	b580      	push	{r7, lr}
100413fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10041400:	f006 fbba 	bl	10047b78 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10041404:	46c0      	nop			@ (mov r8, r8)
10041406:	46bd      	mov	sp, r7
10041408:	bd80      	pop	{r7, pc}

1004140a <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
1004140a:	b580      	push	{r7, lr}
1004140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */
  
  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
1004140e:	f006 fbbc 	bl	10047b8a <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
10041412:	46c0      	nop			@ (mov r8, r8)
10041414:	46bd      	mov	sp, r7
10041416:	bd80      	pop	{r7, pc}

10041418 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10041418:	b580      	push	{r7, lr}
1004141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */
  
  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
1004141c:	f004 fffa 	bl	10046414 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */
  
  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
10041420:	46c0      	nop			@ (mov r8, r8)
10041422:	46bd      	mov	sp, r7
10041424:	bd80      	pop	{r7, pc}

10041426 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10041426:	b580      	push	{r7, lr}
10041428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
1004142a:	f005 f814 	bl	10046456 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
1004142e:	46c0      	nop			@ (mov r8, r8)
10041430:	46bd      	mov	sp, r7
10041432:	bd80      	pop	{r7, pc}

10041434 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10041434:	b580      	push	{r7, lr}
10041436:	b086      	sub	sp, #24
10041438:	af00      	add	r7, sp, #0
1004143a:	60f8      	str	r0, [r7, #12]
1004143c:	60b9      	str	r1, [r7, #8]
1004143e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10041440:	2300      	movs	r3, #0
10041442:	617b      	str	r3, [r7, #20]
10041444:	e00a      	b.n	1004145c <_read+0x28>
  {
    *ptr++ = __io_getchar();
10041446:	e000      	b.n	1004144a <_read+0x16>
10041448:	bf00      	nop
1004144a:	0001      	movs	r1, r0
1004144c:	68bb      	ldr	r3, [r7, #8]
1004144e:	1c5a      	adds	r2, r3, #1
10041450:	60ba      	str	r2, [r7, #8]
10041452:	b2ca      	uxtb	r2, r1
10041454:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10041456:	697b      	ldr	r3, [r7, #20]
10041458:	3301      	adds	r3, #1
1004145a:	617b      	str	r3, [r7, #20]
1004145c:	697a      	ldr	r2, [r7, #20]
1004145e:	687b      	ldr	r3, [r7, #4]
10041460:	429a      	cmp	r2, r3
10041462:	dbf0      	blt.n	10041446 <_read+0x12>
  }

  return len;
10041464:	687b      	ldr	r3, [r7, #4]
}
10041466:	0018      	movs	r0, r3
10041468:	46bd      	mov	sp, r7
1004146a:	b006      	add	sp, #24
1004146c:	bd80      	pop	{r7, pc}

1004146e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
1004146e:	b580      	push	{r7, lr}
10041470:	b086      	sub	sp, #24
10041472:	af00      	add	r7, sp, #0
10041474:	60f8      	str	r0, [r7, #12]
10041476:	60b9      	str	r1, [r7, #8]
10041478:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004147a:	2300      	movs	r3, #0
1004147c:	617b      	str	r3, [r7, #20]
1004147e:	e009      	b.n	10041494 <_write+0x26>
  {
    __io_putchar(*ptr++);
10041480:	68bb      	ldr	r3, [r7, #8]
10041482:	1c5a      	adds	r2, r3, #1
10041484:	60ba      	str	r2, [r7, #8]
10041486:	781b      	ldrb	r3, [r3, #0]
10041488:	0018      	movs	r0, r3
1004148a:	f003 fad9 	bl	10044a40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004148e:	697b      	ldr	r3, [r7, #20]
10041490:	3301      	adds	r3, #1
10041492:	617b      	str	r3, [r7, #20]
10041494:	697a      	ldr	r2, [r7, #20]
10041496:	687b      	ldr	r3, [r7, #4]
10041498:	429a      	cmp	r2, r3
1004149a:	dbf1      	blt.n	10041480 <_write+0x12>
  }
  return len;
1004149c:	687b      	ldr	r3, [r7, #4]
}
1004149e:	0018      	movs	r0, r3
100414a0:	46bd      	mov	sp, r7
100414a2:	b006      	add	sp, #24
100414a4:	bd80      	pop	{r7, pc}

100414a6 <_close>:

int _close(int file)
{
100414a6:	b580      	push	{r7, lr}
100414a8:	b082      	sub	sp, #8
100414aa:	af00      	add	r7, sp, #0
100414ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
100414ae:	2301      	movs	r3, #1
100414b0:	425b      	negs	r3, r3
}
100414b2:	0018      	movs	r0, r3
100414b4:	46bd      	mov	sp, r7
100414b6:	b002      	add	sp, #8
100414b8:	bd80      	pop	{r7, pc}

100414ba <_fstat>:


int _fstat(int file, struct stat *st)
{
100414ba:	b580      	push	{r7, lr}
100414bc:	b082      	sub	sp, #8
100414be:	af00      	add	r7, sp, #0
100414c0:	6078      	str	r0, [r7, #4]
100414c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100414c4:	683b      	ldr	r3, [r7, #0]
100414c6:	2280      	movs	r2, #128	@ 0x80
100414c8:	0192      	lsls	r2, r2, #6
100414ca:	605a      	str	r2, [r3, #4]
  return 0;
100414cc:	2300      	movs	r3, #0
}
100414ce:	0018      	movs	r0, r3
100414d0:	46bd      	mov	sp, r7
100414d2:	b002      	add	sp, #8
100414d4:	bd80      	pop	{r7, pc}

100414d6 <_isatty>:

int _isatty(int file)
{
100414d6:	b580      	push	{r7, lr}
100414d8:	b082      	sub	sp, #8
100414da:	af00      	add	r7, sp, #0
100414dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
100414de:	2301      	movs	r3, #1
}
100414e0:	0018      	movs	r0, r3
100414e2:	46bd      	mov	sp, r7
100414e4:	b002      	add	sp, #8
100414e6:	bd80      	pop	{r7, pc}

100414e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
100414e8:	b580      	push	{r7, lr}
100414ea:	b084      	sub	sp, #16
100414ec:	af00      	add	r7, sp, #0
100414ee:	60f8      	str	r0, [r7, #12]
100414f0:	60b9      	str	r1, [r7, #8]
100414f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
100414f4:	2300      	movs	r3, #0
}
100414f6:	0018      	movs	r0, r3
100414f8:	46bd      	mov	sp, r7
100414fa:	b004      	add	sp, #16
100414fc:	bd80      	pop	{r7, pc}
	...

10041500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10041500:	b580      	push	{r7, lr}
10041502:	b086      	sub	sp, #24
10041504:	af00      	add	r7, sp, #0
10041506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10041508:	4a14      	ldr	r2, [pc, #80]	@ (1004155c <_sbrk+0x5c>)
1004150a:	4b15      	ldr	r3, [pc, #84]	@ (10041560 <_sbrk+0x60>)
1004150c:	1ad3      	subs	r3, r2, r3
1004150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10041510:	697b      	ldr	r3, [r7, #20]
10041512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10041514:	4b13      	ldr	r3, [pc, #76]	@ (10041564 <_sbrk+0x64>)
10041516:	681b      	ldr	r3, [r3, #0]
10041518:	2b00      	cmp	r3, #0
1004151a:	d102      	bne.n	10041522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
1004151c:	4b11      	ldr	r3, [pc, #68]	@ (10041564 <_sbrk+0x64>)
1004151e:	4a12      	ldr	r2, [pc, #72]	@ (10041568 <_sbrk+0x68>)
10041520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10041522:	4b10      	ldr	r3, [pc, #64]	@ (10041564 <_sbrk+0x64>)
10041524:	681a      	ldr	r2, [r3, #0]
10041526:	687b      	ldr	r3, [r7, #4]
10041528:	18d3      	adds	r3, r2, r3
1004152a:	693a      	ldr	r2, [r7, #16]
1004152c:	429a      	cmp	r2, r3
1004152e:	d207      	bcs.n	10041540 <_sbrk+0x40>
  {
    errno = ENOMEM;
10041530:	f00c fd84 	bl	1004e03c <__errno>
10041534:	0003      	movs	r3, r0
10041536:	220c      	movs	r2, #12
10041538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
1004153a:	2301      	movs	r3, #1
1004153c:	425b      	negs	r3, r3
1004153e:	e009      	b.n	10041554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10041540:	4b08      	ldr	r3, [pc, #32]	@ (10041564 <_sbrk+0x64>)
10041542:	681b      	ldr	r3, [r3, #0]
10041544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10041546:	4b07      	ldr	r3, [pc, #28]	@ (10041564 <_sbrk+0x64>)
10041548:	681a      	ldr	r2, [r3, #0]
1004154a:	687b      	ldr	r3, [r7, #4]
1004154c:	18d2      	adds	r2, r2, r3
1004154e:	4b05      	ldr	r3, [pc, #20]	@ (10041564 <_sbrk+0x64>)
10041550:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
10041552:	68fb      	ldr	r3, [r7, #12]
}
10041554:	0018      	movs	r0, r3
10041556:	46bd      	mov	sp, r7
10041558:	b006      	add	sp, #24
1004155a:	bd80      	pop	{r7, pc}
1004155c:	20010000 	.word	0x20010000
10041560:	00000c00 	.word	0x00000c00
10041564:	2000039c 	.word	0x2000039c
10041568:	200020c4 	.word	0x200020c4

1004156c <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
1004156c:	b580      	push	{r7, lr}
1004156e:	af00      	add	r7, sp, #0
  BLENVM_Init();
10041570:	f000 fa3c 	bl	100419ec <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
10041574:	f003 f856 	bl	10044624 <PKAMGR_Init>
10041578:	0003      	movs	r3, r0
1004157a:	3301      	adds	r3, #1
1004157c:	d101      	bne.n	10041582 <ModulesInit+0x16>
  {
    Error_Handler();
1004157e:	f7ff fcd7 	bl	10040f30 <Error_Handler>
  }
}
10041582:	46c0      	nop			@ (mov r8, r8)
10041584:	46bd      	mov	sp, r7
10041586:	bd80      	pop	{r7, pc}

10041588 <BLE_Init>:

void BLE_Init(void)
{
10041588:	b5f0      	push	{r4, r5, r6, r7, lr}
1004158a:	b095      	sub	sp, #84	@ 0x54
1004158c:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
1004158e:	233f      	movs	r3, #63	@ 0x3f
10041590:	18fb      	adds	r3, r7, r3
10041592:	2200      	movs	r2, #0
10041594:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint8_t bd_address[6] = {0};
10041596:	2334      	movs	r3, #52	@ 0x34
10041598:	18fb      	adds	r3, r7, r3
1004159a:	2200      	movs	r2, #0
1004159c:	601a      	str	r2, [r3, #0]
1004159e:	2200      	movs	r2, #0
100415a0:	809a      	strh	r2, [r3, #4]
  uint8_t bd_address_len= 6;
100415a2:	233e      	movs	r3, #62	@ 0x3e
100415a4:	18fb      	adds	r3, r7, r3
100415a6:	2206      	movs	r2, #6
100415a8:	701a      	strb	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
100415aa:	003a      	movs	r2, r7
100415ac:	4b61      	ldr	r3, [pc, #388]	@ (10041734 <BLE_Init+0x1ac>)
100415ae:	0010      	movs	r0, r2
100415b0:	0019      	movs	r1, r3
100415b2:	2334      	movs	r3, #52	@ 0x34
100415b4:	001a      	movs	r2, r3
100415b6:	f00c fd4a 	bl	1004e04e <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
100415ba:	253d      	movs	r5, #61	@ 0x3d
100415bc:	197c      	adds	r4, r7, r5
100415be:	003b      	movs	r3, r7
100415c0:	0018      	movs	r0, r3
100415c2:	f008 fba9 	bl	10049d18 <BLE_STACK_Init>
100415c6:	0003      	movs	r3, r0
100415c8:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
100415ca:	197b      	adds	r3, r7, r5
100415cc:	781b      	ldrb	r3, [r3, #0]
100415ce:	2b00      	cmp	r3, #0
100415d0:	d008      	beq.n	100415e4 <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
100415d2:	197b      	adds	r3, r7, r5
100415d4:	781a      	ldrb	r2, [r3, #0]
100415d6:	4b58      	ldr	r3, [pc, #352]	@ (10041738 <BLE_Init+0x1b0>)
100415d8:	0011      	movs	r1, r2
100415da:	0018      	movs	r0, r3
100415dc:	f00c fab8 	bl	1004db50 <iprintf>
    Error_Handler();
100415e0:	f7ff fca6 	bl	10040f30 <Error_Handler>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_PUBLIC)

  bd_address[0] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000000000FF));
100415e4:	2134      	movs	r1, #52	@ 0x34
100415e6:	187b      	adds	r3, r7, r1
100415e8:	2266      	movs	r2, #102	@ 0x66
100415ea:	701a      	strb	r2, [r3, #0]
  bd_address[1] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00000000FF00) >> 8);
100415ec:	187b      	adds	r3, r7, r1
100415ee:	2277      	movs	r2, #119	@ 0x77
100415f0:	705a      	strb	r2, [r3, #1]
  bd_address[2] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x000000FF0000) >> 16);
100415f2:	187b      	adds	r3, r7, r1
100415f4:	2288      	movs	r2, #136	@ 0x88
100415f6:	709a      	strb	r2, [r3, #2]
  bd_address[3] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000FF000000) >> 24);
100415f8:	187b      	adds	r3, r7, r1
100415fa:	22e1      	movs	r2, #225	@ 0xe1
100415fc:	70da      	strb	r2, [r3, #3]
  bd_address[4] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00FF00000000) >> 32);
100415fe:	187b      	adds	r3, r7, r1
10041600:	2280      	movs	r2, #128	@ 0x80
10041602:	711a      	strb	r2, [r3, #4]
  bd_address[5] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0xFF0000000000) >> 40);
10041604:	187b      	adds	r3, r7, r1
10041606:	2202      	movs	r2, #2
10041608:	715a      	strb	r2, [r3, #5]
  (void)bd_address_len;

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bd_address);
1004160a:	253d      	movs	r5, #61	@ 0x3d
1004160c:	197c      	adds	r4, r7, r5
1004160e:	187b      	adds	r3, r7, r1
10041610:	001a      	movs	r2, r3
10041612:	2106      	movs	r1, #6
10041614:	2000      	movs	r0, #0
10041616:	f008 fa0d 	bl	10049a34 <aci_hal_write_config_data>
1004161a:	0003      	movs	r3, r0
1004161c:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004161e:	197b      	adds	r3, r7, r5
10041620:	781b      	ldrb	r3, [r3, #0]
10041622:	2b00      	cmp	r3, #0
10041624:	d007      	beq.n	10041636 <BLE_Init+0xae>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%02X\n", ret);
10041626:	197b      	adds	r3, r7, r5
10041628:	781a      	ldrb	r2, [r3, #0]
1004162a:	4b44      	ldr	r3, [pc, #272]	@ (1004173c <BLE_Init+0x1b4>)
1004162c:	0011      	movs	r1, r2
1004162e:	0018      	movs	r0, r3
10041630:	f00c fa8e 	bl	1004db50 <iprintf>
10041634:	e003      	b.n	1004163e <BLE_Init+0xb6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
10041636:	4b42      	ldr	r3, [pc, #264]	@ (10041740 <BLE_Init+0x1b8>)
10041638:	0018      	movs	r0, r3
1004163a:	f00c faef 	bl	1004dc1c <puts>
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
1004163e:	253d      	movs	r5, #61	@ 0x3d
10041640:	197c      	adds	r4, r7, r5
10041642:	211f      	movs	r1, #31
10041644:	2000      	movs	r0, #0
10041646:	f008 f9f9 	bl	10049a3c <aci_hal_set_tx_power_level>
1004164a:	0003      	movs	r3, r0
1004164c:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004164e:	002a      	movs	r2, r5
10041650:	18bb      	adds	r3, r7, r2
10041652:	781b      	ldrb	r3, [r3, #0]
10041654:	2b00      	cmp	r3, #0
10041656:	d007      	beq.n	10041668 <BLE_Init+0xe0>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%02X\n", ret);
10041658:	18bb      	adds	r3, r7, r2
1004165a:	781a      	ldrb	r2, [r3, #0]
1004165c:	4b39      	ldr	r3, [pc, #228]	@ (10041744 <BLE_Init+0x1bc>)
1004165e:	0011      	movs	r1, r2
10041660:	0018      	movs	r0, r3
10041662:	f00c fa75 	bl	1004db50 <iprintf>
10041666:	e003      	b.n	10041670 <BLE_Init+0xe8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
10041668:	4b37      	ldr	r3, [pc, #220]	@ (10041748 <BLE_Init+0x1c0>)
1004166a:	0018      	movs	r0, r3
1004166c:	f00c fad6 	bl	1004dc1c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
10041670:	253d      	movs	r5, #61	@ 0x3d
10041672:	197c      	adds	r4, r7, r5
10041674:	233a      	movs	r3, #58	@ 0x3a
10041676:	18fb      	adds	r3, r7, r3
10041678:	0019      	movs	r1, r3
1004167a:	2001      	movs	r0, #1
1004167c:	f003 f80d 	bl	1004469a <aci_gatt_srv_profile_init>
10041680:	0003      	movs	r3, r0
10041682:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10041684:	197b      	adds	r3, r7, r5
10041686:	781b      	ldrb	r3, [r3, #0]
10041688:	2b00      	cmp	r3, #0
1004168a:	d007      	beq.n	1004169c <BLE_Init+0x114>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_profile_init command, result: 0x%02X\n", ret);
1004168c:	197b      	adds	r3, r7, r5
1004168e:	781a      	ldrb	r2, [r3, #0]
10041690:	4b2e      	ldr	r3, [pc, #184]	@ (1004174c <BLE_Init+0x1c4>)
10041692:	0011      	movs	r1, r2
10041694:	0018      	movs	r0, r3
10041696:	f00c fa5b 	bl	1004db50 <iprintf>
1004169a:	e003      	b.n	100416a4 <BLE_Init+0x11c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_profile_init command\n");
1004169c:	4b2c      	ldr	r3, [pc, #176]	@ (10041750 <BLE_Init+0x1c8>)
1004169e:	0018      	movs	r0, r3
100416a0:	f00c fabc 	bl	1004dc1c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
100416a4:	213c      	movs	r1, #60	@ 0x3c
100416a6:	187b      	adds	r3, r7, r1
100416a8:	2200      	movs	r2, #0
100416aa:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
100416ac:	187b      	adds	r3, r7, r1
100416ae:	187a      	adds	r2, r7, r1
100416b0:	7812      	ldrb	r2, [r2, #0]
100416b2:	2101      	movs	r1, #1
100416b4:	430a      	orrs	r2, r1
100416b6:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
100416b8:	253d      	movs	r5, #61	@ 0x3d
100416ba:	197c      	adds	r4, r7, r5
100416bc:	233f      	movs	r3, #63	@ 0x3f
100416be:	18fb      	adds	r3, r7, r3
100416c0:	781b      	ldrb	r3, [r3, #0]
100416c2:	2100      	movs	r1, #0
100416c4:	0018      	movs	r0, r3
100416c6:	f008 f873 	bl	100497b0 <aci_gap_init>
100416ca:	0003      	movs	r3, r0
100416cc:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100416ce:	197b      	adds	r3, r7, r5
100416d0:	781b      	ldrb	r3, [r3, #0]
100416d2:	2b00      	cmp	r3, #0
100416d4:	d007      	beq.n	100416e6 <BLE_Init+0x15e>
  {
    APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%02X\n", ret);
100416d6:	197b      	adds	r3, r7, r5
100416d8:	781a      	ldrb	r2, [r3, #0]
100416da:	4b1e      	ldr	r3, [pc, #120]	@ (10041754 <BLE_Init+0x1cc>)
100416dc:	0011      	movs	r1, r2
100416de:	0018      	movs	r0, r3
100416e0:	f00c fa36 	bl	1004db50 <iprintf>
100416e4:	e003      	b.n	100416ee <BLE_Init+0x166>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
100416e6:	4b1c      	ldr	r3, [pc, #112]	@ (10041758 <BLE_Init+0x1d0>)
100416e8:	0018      	movs	r0, r3
100416ea:	f00c fa97 	bl	1004dc1c <puts>
#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_STATIC_RANDOM_ADDR)
  ret = aci_hal_read_config_data(CONFIG_DATA_STORED_STATIC_RANDOM_ADDRESS,
                                 &bd_address_len, bd_address);
  APP_DBG_MSG("  Static Random Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#elif (CFG_BD_ADDRESS_TYPE == HCI_ADDR_PUBLIC)
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
100416ee:	2034      	movs	r0, #52	@ 0x34
100416f0:	183b      	adds	r3, r7, r0
100416f2:	795b      	ldrb	r3, [r3, #5]
100416f4:	001c      	movs	r4, r3
100416f6:	183b      	adds	r3, r7, r0
100416f8:	791b      	ldrb	r3, [r3, #4]
100416fa:	001d      	movs	r5, r3
100416fc:	183b      	adds	r3, r7, r0
100416fe:	78db      	ldrb	r3, [r3, #3]
10041700:	001e      	movs	r6, r3
10041702:	183b      	adds	r3, r7, r0
10041704:	789b      	ldrb	r3, [r3, #2]
10041706:	001a      	movs	r2, r3
10041708:	183b      	adds	r3, r7, r0
1004170a:	785b      	ldrb	r3, [r3, #1]
1004170c:	0019      	movs	r1, r3
1004170e:	183b      	adds	r3, r7, r0
10041710:	781b      	ldrb	r3, [r3, #0]
10041712:	4812      	ldr	r0, [pc, #72]	@ (1004175c <BLE_Init+0x1d4>)
10041714:	9302      	str	r3, [sp, #8]
10041716:	9101      	str	r1, [sp, #4]
10041718:	9200      	str	r2, [sp, #0]
1004171a:	0033      	movs	r3, r6
1004171c:	002a      	movs	r2, r5
1004171e:	0021      	movs	r1, r4
10041720:	f00c fa16 	bl	1004db50 <iprintf>
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  APP_DBG_MSG("BLE stack initialized\r\n");
10041724:	4b0e      	ldr	r3, [pc, #56]	@ (10041760 <BLE_Init+0x1d8>)
10041726:	0018      	movs	r0, r3
10041728:	f00c fa78 	bl	1004dc1c <puts>
}
1004172c:	46c0      	nop			@ (mov r8, r8)
1004172e:	46bd      	mov	sp, r7
10041730:	b011      	add	sp, #68	@ 0x44
10041732:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041734:	1004ed1c 	.word	0x1004ed1c
10041738:	1004eac8 	.word	0x1004eac8
1004173c:	1004eaec 	.word	0x1004eaec
10041740:	1004eb48 	.word	0x1004eb48
10041744:	1004eb94 	.word	0x1004eb94
10041748:	1004ebd4 	.word	0x1004ebd4
1004174c:	1004ec04 	.word	0x1004ec04
10041750:	1004ec44 	.word	0x1004ec44
10041754:	1004ec74 	.word	0x1004ec74
10041758:	1004eca8 	.word	0x1004eca8
1004175c:	1004ecc8 	.word	0x1004ecc8
10041760:	1004ed04 	.word	0x1004ed04

10041764 <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
10041764:	b580      	push	{r7, lr}
10041766:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
10041768:	2101      	movs	r1, #1
1004176a:	2001      	movs	r0, #1
1004176c:	f007 ffa8 	bl	100496c0 <UTIL_SEQ_SetTask>
}
10041770:	46c0      	nop			@ (mov r8, r8)
10041772:	46bd      	mov	sp, r7
10041774:	bd80      	pop	{r7, pc}

10041776 <BLEStack_Process>:
static void BLEStack_Process(void)
{
10041776:	b580      	push	{r7, lr}
10041778:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
1004177a:	2001      	movs	r0, #1
1004177c:	f001 fa1f 	bl	10042bbe <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
10041780:	f008 f9e6 	bl	10049b50 <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
10041784:	2001      	movs	r0, #1
10041786:	f001 fa24 	bl	10042bd2 <APP_DEBUG_SIGNAL_RESET>
}
1004178a:	46c0      	nop			@ (mov r8, r8)
1004178c:	46bd      	mov	sp, r7
1004178e:	bd80      	pop	{r7, pc}

10041790 <VTimer_Process>:

void VTimer_Process(void)
{
10041790:	b580      	push	{r7, lr}
10041792:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
10041794:	f005 f8b4 	bl	10046900 <HAL_RADIO_TIMER_Tick>
}
10041798:	46c0      	nop			@ (mov r8, r8)
1004179a:	46bd      	mov	sp, r7
1004179c:	bd80      	pop	{r7, pc}

1004179e <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
1004179e:	b580      	push	{r7, lr}
100417a0:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
100417a2:	2100      	movs	r1, #0
100417a4:	2002      	movs	r0, #2
100417a6:	f007 ff8b 	bl	100496c0 <UTIL_SEQ_SetTask>
}
100417aa:	46c0      	nop			@ (mov r8, r8)
100417ac:	46bd      	mov	sp, r7
100417ae:	bd80      	pop	{r7, pc}

100417b0 <NVM_Process>:
void NVM_Process(void)
{
100417b0:	b580      	push	{r7, lr}
100417b2:	af00      	add	r7, sp, #0
  NVMDB_Tick();
100417b4:	f002 febc 	bl	10044530 <NVMDB_Tick>
}
100417b8:	46c0      	nop			@ (mov r8, r8)
100417ba:	46bd      	mov	sp, r7
100417bc:	bd80      	pop	{r7, pc}

100417be <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
100417be:	b580      	push	{r7, lr}
100417c0:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
100417c2:	2101      	movs	r1, #1
100417c4:	2004      	movs	r0, #4
100417c6:	f007 ff7b 	bl	100496c0 <UTIL_SEQ_SetTask>
}
100417ca:	46c0      	nop			@ (mov r8, r8)
100417cc:	46bd      	mov	sp, r7
100417ce:	bd80      	pop	{r7, pc}

100417d0 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
100417d0:	b580      	push	{r7, lr}
100417d2:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
100417d4:	f7ff ffe3 	bl	1004179e <VTimer_Process_Schedule>
}
100417d8:	46c0      	nop			@ (mov r8, r8)
100417da:	46bd      	mov	sp, r7
100417dc:	bd80      	pop	{r7, pc}

100417de <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
100417de:	b580      	push	{r7, lr}
100417e0:	b082      	sub	sp, #8
100417e2:	af00      	add	r7, sp, #0
100417e4:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
100417e6:	687b      	ldr	r3, [r7, #4]
100417e8:	0018      	movs	r0, r3
100417ea:	f00a fcd1 	bl	1004c190 <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
100417ee:	f7ff ffd6 	bl	1004179e <VTimer_Process_Schedule>
  NVM_Process_Schedule();
100417f2:	f7ff ffe4 	bl	100417be <NVM_Process_Schedule>
}
100417f6:	46c0      	nop			@ (mov r8, r8)
100417f8:	46bd      	mov	sp, r7
100417fa:	b002      	add	sp, #8
100417fc:	bd80      	pop	{r7, pc}

100417fe <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
100417fe:	b580      	push	{r7, lr}
10041800:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
10041802:	f7ff ffaf 	bl	10041764 <BLEStack_Process_Schedule>
}
10041806:	46c0      	nop			@ (mov r8, r8)
10041808:	46bd      	mov	sp, r7
1004180a:	bd80      	pop	{r7, pc}

1004180c <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
1004180c:	b580      	push	{r7, lr}
1004180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
10041810:	4b0d      	ldr	r3, [pc, #52]	@ (10041848 <APP_BLE_Init+0x3c>)
10041812:	001a      	movs	r2, r3
10041814:	2100      	movs	r1, #0
10041816:	2001      	movs	r0, #1
10041818:	f007 ff2e 	bl	10049678 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
1004181c:	4b0b      	ldr	r3, [pc, #44]	@ (1004184c <APP_BLE_Init+0x40>)
1004181e:	001a      	movs	r2, r3
10041820:	2100      	movs	r1, #0
10041822:	2002      	movs	r0, #2
10041824:	f007 ff28 	bl	10049678 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10041828:	4b09      	ldr	r3, [pc, #36]	@ (10041850 <APP_BLE_Init+0x44>)
1004182a:	001a      	movs	r2, r3
1004182c:	2100      	movs	r1, #0
1004182e:	2004      	movs	r0, #4
10041830:	f007 ff22 	bl	10049678 <UTIL_SEQ_RegTask>
  ModulesInit();
10041834:	f7ff fe9a 	bl	1004156c <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10041838:	f7ff fea6 	bl	10041588 <BLE_Init>
/* USER CODE BEGIN APP_BLE_Init_2 */


  /* Make the device discoverable  */

  PlantSensor_Process();
1004183c:	f000 f8ce 	bl	100419dc <PlantSensor_Process>
    IBeacon_Process();
  }
  */
  
/* USER CODE END APP_BLE_Init_2 */
  return;
10041840:	46c0      	nop			@ (mov r8, r8)
}
10041842:	46bd      	mov	sp, r7
10041844:	bd80      	pop	{r7, pc}
10041846:	46c0      	nop			@ (mov r8, r8)
10041848:	10041777 	.word	0x10041777
1004184c:	10041791 	.word	0x10041791
10041850:	100417b1 	.word	0x100417b1

10041854 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
10041854:	b580      	push	{r7, lr}
10041856:	b082      	sub	sp, #8
10041858:	af00      	add	r7, sp, #0
1004185a:	6078      	str	r0, [r7, #4]

}
1004185c:	46c0      	nop			@ (mov r8, r8)
1004185e:	46bd      	mov	sp, r7
10041860:	b002      	add	sp, #8
10041862:	bd80      	pop	{r7, pc}

10041864 <PlantSensor_Init>:
/* Private macros ------------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
tBleStatus PlantSensor_Init(void)
{
10041864:	b5b0      	push	{r4, r5, r7, lr}
10041866:	b090      	sub	sp, #64	@ 0x40
10041868:	af0c      	add	r7, sp, #48	@ 0x30
  tBleStatus ret = BLE_STATUS_SUCCESS;
1004186a:	230d      	movs	r3, #13
1004186c:	18fb      	adds	r3, r7, r3
1004186e:	2200      	movs	r2, #0
10041870:	701a      	strb	r2, [r3, #0]
  uint16_t AdvertisingInterval = (ADVERTISING_INTERVAL_IN_MS * ADVERTISING_INTERVAL_INCREMENT / 10);
10041872:	230a      	movs	r3, #10
10041874:	18fb      	adds	r3, r7, r3
10041876:	22c8      	movs	r2, #200	@ 0xc8
10041878:	00d2      	lsls	r2, r2, #3
1004187a:	801a      	strh	r2, [r3, #0]
  Advertising_Set_Parameters_t Advertising_Set_Parameters;


  for (uint8_t i = 0 ; i< 10; i++)
1004187c:	230f      	movs	r3, #15
1004187e:	18fb      	adds	r3, r7, r3
10041880:	2200      	movs	r2, #0
10041882:	701a      	strb	r2, [r3, #0]
10041884:	e00e      	b.n	100418a4 <PlantSensor_Init+0x40>
      sensor_service_data[i+NAMESPACE_OFFSET] = NamespaceID[i];
10041886:	200f      	movs	r0, #15
10041888:	183b      	adds	r3, r7, r0
1004188a:	781a      	ldrb	r2, [r3, #0]
1004188c:	183b      	adds	r3, r7, r0
1004188e:	781b      	ldrb	r3, [r3, #0]
10041890:	330d      	adds	r3, #13
10041892:	494c      	ldr	r1, [pc, #304]	@ (100419c4 <PlantSensor_Init+0x160>)
10041894:	5c89      	ldrb	r1, [r1, r2]
10041896:	4a4c      	ldr	r2, [pc, #304]	@ (100419c8 <PlantSensor_Init+0x164>)
10041898:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0 ; i< 10; i++)
1004189a:	183b      	adds	r3, r7, r0
1004189c:	781a      	ldrb	r2, [r3, #0]
1004189e:	183b      	adds	r3, r7, r0
100418a0:	3201      	adds	r2, #1
100418a2:	701a      	strb	r2, [r3, #0]
100418a4:	230f      	movs	r3, #15
100418a6:	18fb      	adds	r3, r7, r3
100418a8:	781b      	ldrb	r3, [r3, #0]
100418aa:	2b09      	cmp	r3, #9
100418ac:	d9eb      	bls.n	10041886 <PlantSensor_Init+0x22>
  for (uint8_t i = 0 ; i< 6; i++)
100418ae:	230e      	movs	r3, #14
100418b0:	18fb      	adds	r3, r7, r3
100418b2:	2200      	movs	r2, #0
100418b4:	701a      	strb	r2, [r3, #0]
100418b6:	e00e      	b.n	100418d6 <PlantSensor_Init+0x72>
      sensor_service_data[i+BEACONID_OFFSET] = BeaconID[i];
100418b8:	200e      	movs	r0, #14
100418ba:	183b      	adds	r3, r7, r0
100418bc:	781a      	ldrb	r2, [r3, #0]
100418be:	183b      	adds	r3, r7, r0
100418c0:	781b      	ldrb	r3, [r3, #0]
100418c2:	3317      	adds	r3, #23
100418c4:	4941      	ldr	r1, [pc, #260]	@ (100419cc <PlantSensor_Init+0x168>)
100418c6:	5c89      	ldrb	r1, [r1, r2]
100418c8:	4a3f      	ldr	r2, [pc, #252]	@ (100419c8 <PlantSensor_Init+0x164>)
100418ca:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0 ; i< 6; i++)
100418cc:	183b      	adds	r3, r7, r0
100418ce:	781a      	ldrb	r2, [r3, #0]
100418d0:	183b      	adds	r3, r7, r0
100418d2:	3201      	adds	r2, #1
100418d4:	701a      	strb	r2, [r3, #0]
100418d6:	230e      	movs	r3, #14
100418d8:	18fb      	adds	r3, r7, r3
100418da:	781b      	ldrb	r3, [r3, #0]
100418dc:	2b05      	cmp	r3, #5
100418de:	d9eb      	bls.n	100418b8 <PlantSensor_Init+0x54>

  /* We need to send a ADV_NONCONN_IND packet, which is non-connectable and non-scannable */
  /* Then AUX_ADV_IND packet with upto 254 bytes of advertising data */

  /* Set advertising configuration for legacy advertising */  
  ret = aci_gap_set_advertising_configuration(ADV_UID_HANDLE,
100418e0:	210a      	movs	r1, #10
100418e2:	187b      	adds	r3, r7, r1
100418e4:	881a      	ldrh	r2, [r3, #0]
100418e6:	187b      	adds	r3, r7, r1
100418e8:	881b      	ldrh	r3, [r3, #0]
100418ea:	250d      	movs	r5, #13
100418ec:	197c      	adds	r4, r7, r5
100418ee:	2100      	movs	r1, #0
100418f0:	910a      	str	r1, [sp, #40]	@ 0x28
100418f2:	2100      	movs	r1, #0
100418f4:	9109      	str	r1, [sp, #36]	@ 0x24
100418f6:	2103      	movs	r1, #3
100418f8:	9108      	str	r1, [sp, #32]
100418fa:	2100      	movs	r1, #0
100418fc:	9107      	str	r1, [sp, #28]
100418fe:	2103      	movs	r1, #3
10041900:	9106      	str	r1, [sp, #24]
10041902:	2100      	movs	r1, #0
10041904:	9105      	str	r1, [sp, #20]
10041906:	2100      	movs	r1, #0
10041908:	9104      	str	r1, [sp, #16]
1004190a:	2100      	movs	r1, #0
1004190c:	9103      	str	r1, [sp, #12]
1004190e:	2100      	movs	r1, #0
10041910:	9102      	str	r1, [sp, #8]
10041912:	2107      	movs	r1, #7
10041914:	9101      	str	r1, [sp, #4]
10041916:	9300      	str	r3, [sp, #0]
10041918:	0013      	movs	r3, r2
1004191a:	2210      	movs	r2, #16
1004191c:	2102      	movs	r1, #2
1004191e:	2000      	movs	r0, #0
10041920:	f007 ff6a 	bl	100497f8 <aci_gap_set_advertising_configuration>
10041924:	0003      	movs	r3, r0
10041926:	7023      	strb	r3, [r4, #0]
											  HCI_PHY_LE_CODED_S8, /* Primary advertising PHY */
                                              0, /* 0 skips */
											  HCI_PHY_LE_CODED_S8, /* Secondary advertising PHY. Not used with legacy advertising. */
                                              0, /* SID */
                                              0 /* No scan request notifications */);
  if (ret != BLE_STATUS_SUCCESS)
10041928:	197b      	adds	r3, r7, r5
1004192a:	781b      	ldrb	r3, [r3, #0]
1004192c:	2b00      	cmp	r3, #0
1004192e:	d009      	beq.n	10041944 <PlantSensor_Init+0xe0>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_configuration() 0x%02x\r\n", ret);
10041930:	197b      	adds	r3, r7, r5
10041932:	781a      	ldrb	r2, [r3, #0]
10041934:	4b26      	ldr	r3, [pc, #152]	@ (100419d0 <PlantSensor_Init+0x16c>)
10041936:	0011      	movs	r1, r2
10041938:	0018      	movs	r0, r3
1004193a:	f00c f909 	bl	1004db50 <iprintf>
    return ret;
1004193e:	197b      	adds	r3, r7, r5
10041940:	781b      	ldrb	r3, [r3, #0]
10041942:	e03b      	b.n	100419bc <PlantSensor_Init+0x158>
  }

  ret = aci_gap_set_advertising_data(ADV_UID_HANDLE, ADV_COMPLETE_DATA, sizeof(sensor_service_data), sensor_service_data);
10041944:	250d      	movs	r5, #13
10041946:	197c      	adds	r4, r7, r5
10041948:	4b1f      	ldr	r3, [pc, #124]	@ (100419c8 <PlantSensor_Init+0x164>)
1004194a:	221f      	movs	r2, #31
1004194c:	2103      	movs	r1, #3
1004194e:	2000      	movs	r0, #0
10041950:	f007 ff87 	bl	10049862 <aci_gap_set_advertising_data>
10041954:	0003      	movs	r3, r0
10041956:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10041958:	197b      	adds	r3, r7, r5
1004195a:	781b      	ldrb	r3, [r3, #0]
1004195c:	2b00      	cmp	r3, #0
1004195e:	d009      	beq.n	10041974 <PlantSensor_Init+0x110>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_data() 0x%02x\r\n", ret);
10041960:	197b      	adds	r3, r7, r5
10041962:	781a      	ldrb	r2, [r3, #0]
10041964:	4b1b      	ldr	r3, [pc, #108]	@ (100419d4 <PlantSensor_Init+0x170>)
10041966:	0011      	movs	r1, r2
10041968:	0018      	movs	r0, r3
1004196a:	f00c f8f1 	bl	1004db50 <iprintf>
    return ret; 
1004196e:	197b      	adds	r3, r7, r5
10041970:	781b      	ldrb	r3, [r3, #0]
10041972:	e023      	b.n	100419bc <PlantSensor_Init+0x158>
  }

  Advertising_Set_Parameters.Advertising_Handle = ADV_UID_HANDLE;
10041974:	1d3b      	adds	r3, r7, #4
10041976:	2200      	movs	r2, #0
10041978:	701a      	strb	r2, [r3, #0]
  Advertising_Set_Parameters.Duration = 0;
1004197a:	1d3b      	adds	r3, r7, #4
1004197c:	2200      	movs	r2, #0
1004197e:	805a      	strh	r2, [r3, #2]
  Advertising_Set_Parameters.Max_Extended_Advertising_Events = 0;
10041980:	1d3b      	adds	r3, r7, #4
10041982:	2200      	movs	r2, #0
10041984:	711a      	strb	r2, [r3, #4]
  
  /* Enable advertising */
  ret = aci_gap_set_advertising_enable(1, 1, &Advertising_Set_Parameters);
10041986:	250d      	movs	r5, #13
10041988:	197c      	adds	r4, r7, r5
1004198a:	1d3b      	adds	r3, r7, #4
1004198c:	001a      	movs	r2, r3
1004198e:	2101      	movs	r1, #1
10041990:	2001      	movs	r0, #1
10041992:	f007 ff6a 	bl	1004986a <aci_gap_set_advertising_enable>
10041996:	0003      	movs	r3, r0
10041998:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004199a:	197b      	adds	r3, r7, r5
1004199c:	781b      	ldrb	r3, [r3, #0]
1004199e:	2b00      	cmp	r3, #0
100419a0:	d009      	beq.n	100419b6 <PlantSensor_Init+0x152>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_enable() 0x%02x\r\n", ret);
100419a2:	197b      	adds	r3, r7, r5
100419a4:	781a      	ldrb	r2, [r3, #0]
100419a6:	4b0c      	ldr	r3, [pc, #48]	@ (100419d8 <PlantSensor_Init+0x174>)
100419a8:	0011      	movs	r1, r2
100419aa:	0018      	movs	r0, r3
100419ac:	f00c f8d0 	bl	1004db50 <iprintf>
    return ret; 
100419b0:	197b      	adds	r3, r7, r5
100419b2:	781b      	ldrb	r3, [r3, #0]
100419b4:	e002      	b.n	100419bc <PlantSensor_Init+0x158>
  }

  return ret;
100419b6:	230d      	movs	r3, #13
100419b8:	18fb      	adds	r3, r7, r3
100419ba:	781b      	ldrb	r3, [r3, #0]
}
100419bc:	0018      	movs	r0, r3
100419be:	46bd      	mov	sp, r7
100419c0:	b004      	add	sp, #16
100419c2:	bdb0      	pop	{r4, r5, r7, pc}
100419c4:	2000085c 	.word	0x2000085c
100419c8:	20000870 	.word	0x20000870
100419cc:	20000868 	.word	0x20000868
100419d0:	1004ed50 	.word	0x1004ed50
100419d4:	1004ed8c 	.word	0x1004ed8c
100419d8:	1004edc0 	.word	0x1004edc0

100419dc <PlantSensor_Process>:
  
void PlantSensor_Process(void)
{
100419dc:	b580      	push	{r7, lr}
100419de:	af00      	add	r7, sp, #0
	PlantSensor_Init();
100419e0:	f7ff ff40 	bl	10041864 <PlantSensor_Init>
}
100419e4:	46c0      	nop			@ (mov r8, r8)
100419e6:	46bd      	mov	sp, r7
100419e8:	bd80      	pop	{r7, pc}
	...

100419ec <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
100419ec:	b580      	push	{r7, lr}
100419ee:	af00      	add	r7, sp, #0
  NVMDB_Init();
100419f0:	f002 fb0a 	bl	10044008 <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
100419f4:	4b07      	ldr	r3, [pc, #28]	@ (10041a14 <BLENVM_Init+0x28>)
100419f6:	0019      	movs	r1, r3
100419f8:	2000      	movs	r0, #0
100419fa:	f002 fc63 	bl	100442c4 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
100419fe:	4b06      	ldr	r3, [pc, #24]	@ (10041a18 <BLENVM_Init+0x2c>)
10041a00:	0019      	movs	r1, r3
10041a02:	2001      	movs	r0, #1
10041a04:	f002 fc5e 	bl	100442c4 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
10041a08:	4b04      	ldr	r3, [pc, #16]	@ (10041a1c <BLENVM_Init+0x30>)
10041a0a:	4a02      	ldr	r2, [pc, #8]	@ (10041a14 <BLENVM_Init+0x28>)
10041a0c:	601a      	str	r2, [r3, #0]
}
10041a0e:	46c0      	nop			@ (mov r8, r8)
10041a10:	46bd      	mov	sp, r7
10041a12:	bd80      	pop	{r7, pc}
10041a14:	200003a0 	.word	0x200003a0
10041a18:	200003b0 	.word	0x200003b0
10041a1c:	200003c0 	.word	0x200003c0

10041a20 <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
10041a20:	b5f0      	push	{r4, r5, r6, r7, lr}
10041a22:	b089      	sub	sp, #36	@ 0x24
10041a24:	af02      	add	r7, sp, #8
10041a26:	60b9      	str	r1, [r7, #8]
10041a28:	0011      	movs	r1, r2
10041a2a:	607b      	str	r3, [r7, #4]
10041a2c:	240f      	movs	r4, #15
10041a2e:	193b      	adds	r3, r7, r4
10041a30:	1c02      	adds	r2, r0, #0
10041a32:	701a      	strb	r2, [r3, #0]
10041a34:	230c      	movs	r3, #12
10041a36:	18fb      	adds	r3, r7, r3
10041a38:	1c0a      	adds	r2, r1, #0
10041a3a:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10041a3c:	193b      	adds	r3, r7, r4
10041a3e:	781b      	ldrb	r3, [r3, #0]
10041a40:	2b02      	cmp	r3, #2
10041a42:	d103      	bne.n	10041a4c <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
10041a44:	4b1a      	ldr	r3, [pc, #104]	@ (10041ab0 <BLEPLAT_NvmAdd+0x90>)
10041a46:	4a1b      	ldr	r2, [pc, #108]	@ (10041ab4 <BLEPLAT_NvmAdd+0x94>)
10041a48:	601a      	str	r2, [r3, #0]
10041a4a:	e002      	b.n	10041a52 <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10041a4c:	4b18      	ldr	r3, [pc, #96]	@ (10041ab0 <BLEPLAT_NvmAdd+0x90>)
10041a4e:	4a1a      	ldr	r2, [pc, #104]	@ (10041ab8 <BLEPLAT_NvmAdd+0x98>)
10041a50:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
10041a52:	4b17      	ldr	r3, [pc, #92]	@ (10041ab0 <BLEPLAT_NvmAdd+0x90>)
10041a54:	6818      	ldr	r0, [r3, #0]
10041a56:	2617      	movs	r6, #23
10041a58:	19bc      	adds	r4, r7, r6
10041a5a:	68bd      	ldr	r5, [r7, #8]
10041a5c:	230c      	movs	r3, #12
10041a5e:	18fb      	adds	r3, r7, r3
10041a60:	881b      	ldrh	r3, [r3, #0]
10041a62:	469c      	mov	ip, r3
10041a64:	230f      	movs	r3, #15
10041a66:	18fb      	adds	r3, r7, r3
10041a68:	7819      	ldrb	r1, [r3, #0]
10041a6a:	687b      	ldr	r3, [r7, #4]
10041a6c:	9301      	str	r3, [sp, #4]
10041a6e:	2328      	movs	r3, #40	@ 0x28
10041a70:	2208      	movs	r2, #8
10041a72:	189b      	adds	r3, r3, r2
10041a74:	19db      	adds	r3, r3, r7
10041a76:	881b      	ldrh	r3, [r3, #0]
10041a78:	9300      	str	r3, [sp, #0]
10041a7a:	002b      	movs	r3, r5
10041a7c:	4662      	mov	r2, ip
10041a7e:	f002 fcc3 	bl	10044408 <NVMDB_AppendRecord>
10041a82:	0003      	movs	r3, r0
10041a84:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
10041a86:	19bb      	adds	r3, r7, r6
10041a88:	781b      	ldrb	r3, [r3, #0]
10041a8a:	2b00      	cmp	r3, #0
10041a8c:	d101      	bne.n	10041a92 <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
10041a8e:	2300      	movs	r3, #0
10041a90:	e009      	b.n	10041aa6 <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
10041a92:	2317      	movs	r3, #23
10041a94:	18fb      	adds	r3, r7, r3
10041a96:	781b      	ldrb	r3, [r3, #0]
10041a98:	2b02      	cmp	r3, #2
10041a9a:	d102      	bne.n	10041aa2 <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
10041a9c:	2301      	movs	r3, #1
10041a9e:	425b      	negs	r3, r3
10041aa0:	e001      	b.n	10041aa6 <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
10041aa2:	2302      	movs	r3, #2
10041aa4:	425b      	negs	r3, r3
}
10041aa6:	0018      	movs	r0, r3
10041aa8:	46bd      	mov	sp, r7
10041aaa:	b007      	add	sp, #28
10041aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041aae:	46c0      	nop			@ (mov r8, r8)
10041ab0:	200003c0 	.word	0x200003c0
10041ab4:	200003b0 	.word	0x200003b0
10041ab8:	200003a0 	.word	0x200003a0

10041abc <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
10041abc:	b5b0      	push	{r4, r5, r7, lr}
10041abe:	b086      	sub	sp, #24
10041ac0:	af02      	add	r7, sp, #8
10041ac2:	0004      	movs	r4, r0
10041ac4:	0008      	movs	r0, r1
10041ac6:	0011      	movs	r1, r2
10041ac8:	603b      	str	r3, [r7, #0]
10041aca:	1dfb      	adds	r3, r7, #7
10041acc:	1c22      	adds	r2, r4, #0
10041ace:	701a      	strb	r2, [r3, #0]
10041ad0:	1dbb      	adds	r3, r7, #6
10041ad2:	1c02      	adds	r2, r0, #0
10041ad4:	701a      	strb	r2, [r3, #0]
10041ad6:	1d3b      	adds	r3, r7, #4
10041ad8:	1c0a      	adds	r2, r1, #0
10041ada:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10041adc:	1dbb      	adds	r3, r7, #6
10041ade:	781b      	ldrb	r3, [r3, #0]
10041ae0:	2b02      	cmp	r3, #2
10041ae2:	d107      	bne.n	10041af4 <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
10041ae4:	4b2e      	ldr	r3, [pc, #184]	@ (10041ba0 <BLEPLAT_NvmGet+0xe4>)
10041ae6:	4a2f      	ldr	r2, [pc, #188]	@ (10041ba4 <BLEPLAT_NvmGet+0xe8>)
10041ae8:	601a      	str	r2, [r3, #0]
    db_id = 1;
10041aea:	230e      	movs	r3, #14
10041aec:	18fb      	adds	r3, r7, r3
10041aee:	2201      	movs	r2, #1
10041af0:	701a      	strb	r2, [r3, #0]
10041af2:	e006      	b.n	10041b02 <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10041af4:	4b2a      	ldr	r3, [pc, #168]	@ (10041ba0 <BLEPLAT_NvmGet+0xe4>)
10041af6:	4a2c      	ldr	r2, [pc, #176]	@ (10041ba8 <BLEPLAT_NvmGet+0xec>)
10041af8:	601a      	str	r2, [r3, #0]
    db_id = 0;
10041afa:	230e      	movs	r3, #14
10041afc:	18fb      	adds	r3, r7, r3
10041afe:	2200      	movs	r2, #0
10041b00:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
10041b02:	1dfb      	adds	r3, r7, #7
10041b04:	781b      	ldrb	r3, [r3, #0]
10041b06:	2b02      	cmp	r3, #2
10041b08:	d112      	bne.n	10041b30 <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
10041b0a:	4b25      	ldr	r3, [pc, #148]	@ (10041ba0 <BLEPLAT_NvmGet+0xe4>)
10041b0c:	6818      	ldr	r0, [r3, #0]
10041b0e:	230f      	movs	r3, #15
10041b10:	18fc      	adds	r4, r7, r3
10041b12:	2320      	movs	r3, #32
10041b14:	18fb      	adds	r3, r7, r3
10041b16:	881d      	ldrh	r5, [r3, #0]
10041b18:	683a      	ldr	r2, [r7, #0]
10041b1a:	1d3b      	adds	r3, r7, #4
10041b1c:	8819      	ldrh	r1, [r3, #0]
10041b1e:	230c      	movs	r3, #12
10041b20:	18fb      	adds	r3, r7, r3
10041b22:	9300      	str	r3, [sp, #0]
10041b24:	002b      	movs	r3, r5
10041b26:	f002 fc3b 	bl	100443a0 <NVMDB_ReadCurrentRecord>
10041b2a:	0003      	movs	r3, r0
10041b2c:	7023      	strb	r3, [r4, #0]
10041b2e:	e021      	b.n	10041b74 <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10041b30:	1dfb      	adds	r3, r7, #7
10041b32:	781b      	ldrb	r3, [r3, #0]
10041b34:	2b00      	cmp	r3, #0
10041b36:	d108      	bne.n	10041b4a <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10041b38:	4b19      	ldr	r3, [pc, #100]	@ (10041ba0 <BLEPLAT_NvmGet+0xe4>)
10041b3a:	681a      	ldr	r2, [r3, #0]
10041b3c:	230e      	movs	r3, #14
10041b3e:	18fb      	adds	r3, r7, r3
10041b40:	781b      	ldrb	r3, [r3, #0]
10041b42:	0011      	movs	r1, r2
10041b44:	0018      	movs	r0, r3
10041b46:	f002 fbbd 	bl	100442c4 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
10041b4a:	4b15      	ldr	r3, [pc, #84]	@ (10041ba0 <BLEPLAT_NvmGet+0xe4>)
10041b4c:	6818      	ldr	r0, [r3, #0]
10041b4e:	230f      	movs	r3, #15
10041b50:	18fc      	adds	r4, r7, r3
10041b52:	683d      	ldr	r5, [r7, #0]
10041b54:	1d3b      	adds	r3, r7, #4
10041b56:	881a      	ldrh	r2, [r3, #0]
10041b58:	1dbb      	adds	r3, r7, #6
10041b5a:	7819      	ldrb	r1, [r3, #0]
10041b5c:	230c      	movs	r3, #12
10041b5e:	18fb      	adds	r3, r7, r3
10041b60:	9301      	str	r3, [sp, #4]
10041b62:	2320      	movs	r3, #32
10041b64:	18fb      	adds	r3, r7, r3
10041b66:	881b      	ldrh	r3, [r3, #0]
10041b68:	9300      	str	r3, [sp, #0]
10041b6a:	002b      	movs	r3, r5
10041b6c:	f002 fbde 	bl	1004432c <NVMDB_ReadNextRecord>
10041b70:	0003      	movs	r3, r0
10041b72:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
10041b74:	230f      	movs	r3, #15
10041b76:	18fb      	adds	r3, r7, r3
10041b78:	781b      	ldrb	r3, [r3, #0]
10041b7a:	2b00      	cmp	r3, #0
10041b7c:	d101      	bne.n	10041b82 <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
10041b7e:	2300      	movs	r3, #0
10041b80:	e009      	b.n	10041b96 <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
10041b82:	230f      	movs	r3, #15
10041b84:	18fb      	adds	r3, r7, r3
10041b86:	781b      	ldrb	r3, [r3, #0]
10041b88:	2b04      	cmp	r3, #4
10041b8a:	d102      	bne.n	10041b92 <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
10041b8c:	2303      	movs	r3, #3
10041b8e:	425b      	negs	r3, r3
10041b90:	e001      	b.n	10041b96 <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
10041b92:	2302      	movs	r3, #2
10041b94:	425b      	negs	r3, r3
}
10041b96:	0018      	movs	r0, r3
10041b98:	46bd      	mov	sp, r7
10041b9a:	b004      	add	sp, #16
10041b9c:	bdb0      	pop	{r4, r5, r7, pc}
10041b9e:	46c0      	nop			@ (mov r8, r8)
10041ba0:	200003c0 	.word	0x200003c0
10041ba4:	200003b0 	.word	0x200003b0
10041ba8:	200003a0 	.word	0x200003a0

10041bac <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
10041bac:	b580      	push	{r7, lr}
10041bae:	b084      	sub	sp, #16
10041bb0:	af00      	add	r7, sp, #0
10041bb2:	60f8      	str	r0, [r7, #12]
10041bb4:	60b9      	str	r1, [r7, #8]
10041bb6:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10041bb8:	687a      	ldr	r2, [r7, #4]
10041bba:	68b9      	ldr	r1, [r7, #8]
10041bbc:	68fb      	ldr	r3, [r7, #12]
10041bbe:	0018      	movs	r0, r3
10041bc0:	f7fe faa0 	bl	10040104 <Osal_MemCpy>
}
10041bc4:	46c0      	nop			@ (mov r8, r8)
10041bc6:	46bd      	mov	sp, r7
10041bc8:	b004      	add	sp, #16
10041bca:	bd80      	pop	{r7, pc}

10041bcc <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
10041bcc:	b580      	push	{r7, lr}
10041bce:	b084      	sub	sp, #16
10041bd0:	af00      	add	r7, sp, #0
10041bd2:	60f8      	str	r0, [r7, #12]
10041bd4:	60b9      	str	r1, [r7, #8]
10041bd6:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10041bd8:	687a      	ldr	r2, [r7, #4]
10041bda:	68b9      	ldr	r1, [r7, #8]
10041bdc:	68fb      	ldr	r3, [r7, #12]
10041bde:	0018      	movs	r0, r3
10041be0:	f00c f9d6 	bl	1004df90 <memset>
}
10041be4:	46c0      	nop			@ (mov r8, r8)
10041be6:	46bd      	mov	sp, r7
10041be8:	b004      	add	sp, #16
10041bea:	bd80      	pop	{r7, pc}

10041bec <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
10041bec:	b590      	push	{r4, r7, lr}
10041bee:	b089      	sub	sp, #36	@ 0x24
10041bf0:	af00      	add	r7, sp, #0
10041bf2:	60f8      	str	r0, [r7, #12]
10041bf4:	60b9      	str	r1, [r7, #8]
10041bf6:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
10041bf8:	2410      	movs	r4, #16
10041bfa:	193b      	adds	r3, r7, r4
10041bfc:	0018      	movs	r0, r3
10041bfe:	f002 fe4b 	bl	10044898 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
10041c02:	0021      	movs	r1, r4
10041c04:	187b      	adds	r3, r7, r1
10041c06:	781a      	ldrb	r2, [r3, #0]
10041c08:	68fb      	ldr	r3, [r7, #12]
10041c0a:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
10041c0c:	187b      	adds	r3, r7, r1
10041c0e:	785a      	ldrb	r2, [r3, #1]
10041c10:	68bb      	ldr	r3, [r7, #8]
10041c12:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
10041c14:	187b      	adds	r3, r7, r1
10041c16:	789a      	ldrb	r2, [r3, #2]
10041c18:	687b      	ldr	r3, [r7, #4]
10041c1a:	701a      	strb	r2, [r3, #0]
}
10041c1c:	46c0      	nop			@ (mov r8, r8)
10041c1e:	46bd      	mov	sp, r7
10041c20:	b009      	add	sp, #36	@ 0x24
10041c22:	bd90      	pop	{r4, r7, pc}

10041c24 <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
10041c24:	b580      	push	{r7, lr}
10041c26:	b084      	sub	sp, #16
10041c28:	af00      	add	r7, sp, #0
10041c2a:	60f8      	str	r0, [r7, #12]
10041c2c:	60b9      	str	r1, [r7, #8]
10041c2e:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
10041c30:	687a      	ldr	r2, [r7, #4]
10041c32:	68b9      	ldr	r1, [r7, #8]
10041c34:	68fb      	ldr	r3, [r7, #12]
10041c36:	0018      	movs	r0, r3
10041c38:	f001 f83a 	bl	10042cb0 <HW_AES_Encrypt>
}
10041c3c:	46c0      	nop			@ (mov r8, r8)
10041c3e:	46bd      	mov	sp, r7
10041c40:	b004      	add	sp, #16
10041c42:	bd80      	pop	{r7, pc}

10041c44 <BLEPLAT_RngGetRandom16>:
{
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
}

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
10041c44:	b580      	push	{r7, lr}
10041c46:	b082      	sub	sp, #8
10041c48:	af00      	add	r7, sp, #0
10041c4a:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
10041c4c:	687b      	ldr	r3, [r7, #4]
10041c4e:	0018      	movs	r0, r3
10041c50:	f001 fade 	bl	10043210 <HW_RNG_GetRandom16>
}
10041c54:	46c0      	nop			@ (mov r8, r8)
10041c56:	46bd      	mov	sp, r7
10041c58:	b002      	add	sp, #8
10041c5a:	bd80      	pop	{r7, pc}

10041c5c <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
10041c5c:	b580      	push	{r7, lr}
10041c5e:	b082      	sub	sp, #8
10041c60:	af00      	add	r7, sp, #0
10041c62:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
10041c64:	687b      	ldr	r3, [r7, #4]
10041c66:	0018      	movs	r0, r3
10041c68:	f001 faec 	bl	10043244 <HW_RNG_GetRandom32>
}
10041c6c:	46c0      	nop			@ (mov r8, r8)
10041c6e:	46bd      	mov	sp, r7
10041c70:	b002      	add	sp, #8
10041c72:	bd80      	pop	{r7, pc}

10041c74 <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
10041c74:	b580      	push	{r7, lr}
10041c76:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
10041c78:	f002 fd76 	bl	10044768 <RADIO_GetMaxPALevel>
10041c7c:	0003      	movs	r3, r0
}
10041c7e:	0018      	movs	r0, r3
10041c80:	46bd      	mov	sp, r7
10041c82:	bd80      	pop	{r7, pc}

10041c84 <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
10041c84:	b580      	push	{r7, lr}
10041c86:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
10041c88:	f002 fd74 	bl	10044774 <RADIO_GetDefaultPALevel>
10041c8c:	0003      	movs	r3, r0
}
10041c8e:	0018      	movs	r0, r3
10041c90:	46bd      	mov	sp, r7
10041c92:	bd80      	pop	{r7, pc}

10041c94 <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
10041c94:	b580      	push	{r7, lr}
10041c96:	b082      	sub	sp, #8
10041c98:	af00      	add	r7, sp, #0
10041c9a:	0002      	movs	r2, r0
10041c9c:	1dfb      	adds	r3, r7, #7
10041c9e:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
10041ca0:	1dfb      	adds	r3, r7, #7
10041ca2:	781b      	ldrb	r3, [r3, #0]
10041ca4:	0018      	movs	r0, r3
10041ca6:	f002 fd6b 	bl	10044780 <RADIO_SetHighPower>
}
10041caa:	46c0      	nop			@ (mov r8, r8)
10041cac:	46bd      	mov	sp, r7
10041cae:	b002      	add	sp, #8
10041cb0:	bd80      	pop	{r7, pc}

10041cb2 <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
10041cb2:	b580      	push	{r7, lr}
10041cb4:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
10041cb6:	f005 f89d 	bl	10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10041cba:	0002      	movs	r2, r0
10041cbc:	000b      	movs	r3, r1

}
10041cbe:	0010      	movs	r0, r2
10041cc0:	0019      	movs	r1, r3
10041cc2:	46bd      	mov	sp, r7
10041cc4:	bd80      	pop	{r7, pc}

10041cc6 <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
10041cc6:	b580      	push	{r7, lr}
10041cc8:	b084      	sub	sp, #16
10041cca:	af00      	add	r7, sp, #0
10041ccc:	60f8      	str	r0, [r7, #12]
10041cce:	603a      	str	r2, [r7, #0]
10041cd0:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
10041cd2:	683a      	ldr	r2, [r7, #0]
10041cd4:	687b      	ldr	r3, [r7, #4]
10041cd6:	68f9      	ldr	r1, [r7, #12]
10041cd8:	0008      	movs	r0, r1
10041cda:	f005 f89d 	bl	10046e18 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
10041cde:	0003      	movs	r3, r0
}
10041ce0:	0018      	movs	r0, r3
10041ce2:	46bd      	mov	sp, r7
10041ce4:	b004      	add	sp, #16
10041ce6:	bd80      	pop	{r7, pc}

10041ce8 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10041ce8:	b580      	push	{r7, lr}
10041cea:	b082      	sub	sp, #8
10041cec:	af00      	add	r7, sp, #0
10041cee:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
10041cf0:	687b      	ldr	r3, [r7, #4]
10041cf2:	0018      	movs	r0, r3
10041cf4:	f005 f8aa 	bl	10046e4c <HAL_RADIO_TIMER_StopVirtualTimer>
}
10041cf8:	46c0      	nop			@ (mov r8, r8)
10041cfa:	46bd      	mov	sp, r7
10041cfc:	b002      	add	sp, #8
10041cfe:	bd80      	pop	{r7, pc}

10041d00 <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
10041d00:	b580      	push	{r7, lr}
10041d02:	b082      	sub	sp, #8
10041d04:	af00      	add	r7, sp, #0
10041d06:	6078      	str	r0, [r7, #4]
10041d08:	0008      	movs	r0, r1
10041d0a:	0011      	movs	r1, r2
10041d0c:	1cfb      	adds	r3, r7, #3
10041d0e:	1c02      	adds	r2, r0, #0
10041d10:	701a      	strb	r2, [r3, #0]
10041d12:	1cbb      	adds	r3, r7, #2
10041d14:	1c0a      	adds	r2, r1, #0
10041d16:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10041d18:	1cbb      	adds	r3, r7, #2
10041d1a:	781a      	ldrb	r2, [r3, #0]
10041d1c:	1cfb      	adds	r3, r7, #3
10041d1e:	7819      	ldrb	r1, [r3, #0]
10041d20:	687b      	ldr	r3, [r7, #4]
10041d22:	0018      	movs	r0, r3
10041d24:	f004 ff50 	bl	10046bc8 <HAL_RADIO_TIMER_SetRadioTimerValue>
10041d28:	0003      	movs	r3, r0
10041d2a:	b2db      	uxtb	r3, r3
}
10041d2c:	0018      	movs	r0, r3
10041d2e:	46bd      	mov	sp, r7
10041d30:	b002      	add	sp, #8
10041d32:	bd80      	pop	{r7, pc}

10041d34 <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
10041d34:	b580      	push	{r7, lr}
10041d36:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
10041d38:	f004 ff96 	bl	10046c68 <HAL_RADIO_TIMER_ClearRadioTimerValue>
10041d3c:	0003      	movs	r3, r0
10041d3e:	b2db      	uxtb	r3, r3
}
10041d40:	0018      	movs	r0, r3
10041d42:	46bd      	mov	sp, r7
10041d44:	bd80      	pop	{r7, pc}

10041d46 <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
10041d46:	b580      	push	{r7, lr}
10041d48:	b082      	sub	sp, #8
10041d4a:	af00      	add	r7, sp, #0
10041d4c:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
10041d4e:	687b      	ldr	r3, [r7, #4]
10041d50:	0018      	movs	r0, r3
10041d52:	f004 ff25 	bl	10046ba0 <HAL_RADIO_TIMER_GetAnchorPoint>
10041d56:	0002      	movs	r2, r0
10041d58:	000b      	movs	r3, r1
}
10041d5a:	0010      	movs	r0, r2
10041d5c:	0019      	movs	r1, r3
10041d5e:	46bd      	mov	sp, r7
10041d60:	b002      	add	sp, #8
10041d62:	bd80      	pop	{r7, pc}

10041d64 <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
10041d64:	b580      	push	{r7, lr}
10041d66:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
10041d68:	f004 fff2 	bl	10046d50 <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
10041d6c:	46c0      	nop			@ (mov r8, r8)
10041d6e:	46bd      	mov	sp, r7
10041d70:	bd80      	pop	{r7, pc}
	...

10041d74 <LL_RADIO_SetCurrentConnectionMachineNumber>:
  * @rmtoll WORD1          CURSTMACHNUM       LL_RADIO_SetCurrentConnectionMachineNumber
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCurrentConnectionMachineNumber(uint32_t value)
{
10041d74:	b580      	push	{r7, lr}
10041d76:	b082      	sub	sp, #8
10041d78:	af00      	add	r7, sp, #0
10041d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
10041d7c:	4b07      	ldr	r3, [pc, #28]	@ (10041d9c <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10041d7e:	685b      	ldr	r3, [r3, #4]
10041d80:	227f      	movs	r2, #127	@ 0x7f
10041d82:	4393      	bics	r3, r2
10041d84:	0019      	movs	r1, r3
10041d86:	687b      	ldr	r3, [r7, #4]
10041d88:	227f      	movs	r2, #127	@ 0x7f
10041d8a:	401a      	ands	r2, r3
10041d8c:	4b03      	ldr	r3, [pc, #12]	@ (10041d9c <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10041d8e:	430a      	orrs	r2, r1
10041d90:	605a      	str	r2, [r3, #4]
}
10041d92:	46c0      	nop			@ (mov r8, r8)
10041d94:	46bd      	mov	sp, r7
10041d96:	b002      	add	sp, #8
10041d98:	bd80      	pop	{r7, pc}
10041d9a:	46c0      	nop			@ (mov r8, r8)
10041d9c:	200000c0 	.word	0x200000c0

10041da0 <LL_RADIO_GlobalEnableBlue>:
  * @brief  RADIO Enable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalEnableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalEnableBlue(void)
{
10041da0:	b580      	push	{r7, lr}
10041da2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10041da4:	4b04      	ldr	r3, [pc, #16]	@ (10041db8 <LL_RADIO_GlobalEnableBlue+0x18>)
10041da6:	685a      	ldr	r2, [r3, #4]
10041da8:	4b03      	ldr	r3, [pc, #12]	@ (10041db8 <LL_RADIO_GlobalEnableBlue+0x18>)
10041daa:	2180      	movs	r1, #128	@ 0x80
10041dac:	430a      	orrs	r2, r1
10041dae:	605a      	str	r2, [r3, #4]
}
10041db0:	46c0      	nop			@ (mov r8, r8)
10041db2:	46bd      	mov	sp, r7
10041db4:	bd80      	pop	{r7, pc}
10041db6:	46c0      	nop			@ (mov r8, r8)
10041db8:	200000c0 	.word	0x200000c0

10041dbc <LL_RADIO_GlobalDisableBlue>:
  * @brief  RADIO Disable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalDisableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalDisableBlue(void)
{
10041dbc:	b580      	push	{r7, lr}
10041dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10041dc0:	4b04      	ldr	r3, [pc, #16]	@ (10041dd4 <LL_RADIO_GlobalDisableBlue+0x18>)
10041dc2:	685a      	ldr	r2, [r3, #4]
10041dc4:	4b03      	ldr	r3, [pc, #12]	@ (10041dd4 <LL_RADIO_GlobalDisableBlue+0x18>)
10041dc6:	2180      	movs	r1, #128	@ 0x80
10041dc8:	438a      	bics	r2, r1
10041dca:	605a      	str	r2, [r3, #4]
}
10041dcc:	46c0      	nop			@ (mov r8, r8)
10041dce:	46bd      	mov	sp, r7
10041dd0:	bd80      	pop	{r7, pc}
10041dd2:	46c0      	nop			@ (mov r8, r8)
10041dd4:	200000c0 	.word	0x200000c0

10041dd8 <LL_RADIO_SetReceiveWindowTimeout>:
  * @rmtoll WORD4          RCVTIMEOUT       LL_RADIO_SetReceiveWindowTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceiveWindowTimeout(uint32_t value)
{
10041dd8:	b580      	push	{r7, lr}
10041dda:	b082      	sub	sp, #8
10041ddc:	af00      	add	r7, sp, #0
10041dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
10041de0:	4b07      	ldr	r3, [pc, #28]	@ (10041e00 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10041de2:	691b      	ldr	r3, [r3, #16]
10041de4:	4a07      	ldr	r2, [pc, #28]	@ (10041e04 <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
10041de6:	4013      	ands	r3, r2
10041de8:	0019      	movs	r1, r3
10041dea:	687b      	ldr	r3, [r7, #4]
10041dec:	021b      	lsls	r3, r3, #8
10041dee:	4a06      	ldr	r2, [pc, #24]	@ (10041e08 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
10041df0:	401a      	ands	r2, r3
10041df2:	4b03      	ldr	r3, [pc, #12]	@ (10041e00 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10041df4:	430a      	orrs	r2, r1
10041df6:	611a      	str	r2, [r3, #16]
}
10041df8:	46c0      	nop			@ (mov r8, r8)
10041dfa:	46bd      	mov	sp, r7
10041dfc:	b002      	add	sp, #8
10041dfe:	bd80      	pop	{r7, pc}
10041e00:	200000c0 	.word	0x200000c0
10041e04:	f00000ff 	.word	0xf00000ff
10041e08:	0fffff00 	.word	0x0fffff00

10041e0c <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
10041e0c:	b580      	push	{r7, lr}
10041e0e:	b082      	sub	sp, #8
10041e10:	af00      	add	r7, sp, #0
10041e12:	0002      	movs	r2, r0
10041e14:	1dfb      	adds	r3, r7, #7
10041e16:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10041e18:	1dfb      	adds	r3, r7, #7
10041e1a:	781b      	ldrb	r3, [r3, #0]
10041e1c:	225c      	movs	r2, #92	@ 0x5c
10041e1e:	4353      	muls	r3, r2
10041e20:	4a08      	ldr	r2, [pc, #32]	@ (10041e44 <LL_RADIO_RadioCommandList_Enable+0x38>)
10041e22:	4694      	mov	ip, r2
10041e24:	4463      	add	r3, ip
10041e26:	681a      	ldr	r2, [r3, #0]
10041e28:	1dfb      	adds	r3, r7, #7
10041e2a:	781b      	ldrb	r3, [r3, #0]
10041e2c:	215c      	movs	r1, #92	@ 0x5c
10041e2e:	434b      	muls	r3, r1
10041e30:	4904      	ldr	r1, [pc, #16]	@ (10041e44 <LL_RADIO_RadioCommandList_Enable+0x38>)
10041e32:	468c      	mov	ip, r1
10041e34:	4463      	add	r3, ip
10041e36:	2140      	movs	r1, #64	@ 0x40
10041e38:	430a      	orrs	r2, r1
10041e3a:	601a      	str	r2, [r3, #0]
}
10041e3c:	46c0      	nop			@ (mov r8, r8)
10041e3e:	46bd      	mov	sp, r7
10041e40:	b002      	add	sp, #8
10041e42:	bd80      	pop	{r7, pc}
10041e44:	200000dc 	.word	0x200000dc

10041e48 <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
10041e48:	b580      	push	{r7, lr}
10041e4a:	b082      	sub	sp, #8
10041e4c:	af00      	add	r7, sp, #0
10041e4e:	0002      	movs	r2, r0
10041e50:	1dfb      	adds	r3, r7, #7
10041e52:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10041e54:	1dfb      	adds	r3, r7, #7
10041e56:	781b      	ldrb	r3, [r3, #0]
10041e58:	225c      	movs	r2, #92	@ 0x5c
10041e5a:	4353      	muls	r3, r2
10041e5c:	4a08      	ldr	r2, [pc, #32]	@ (10041e80 <LL_RADIO_RadioCommandList_Disable+0x38>)
10041e5e:	4694      	mov	ip, r2
10041e60:	4463      	add	r3, ip
10041e62:	681a      	ldr	r2, [r3, #0]
10041e64:	1dfb      	adds	r3, r7, #7
10041e66:	781b      	ldrb	r3, [r3, #0]
10041e68:	215c      	movs	r1, #92	@ 0x5c
10041e6a:	434b      	muls	r3, r1
10041e6c:	4904      	ldr	r1, [pc, #16]	@ (10041e80 <LL_RADIO_RadioCommandList_Disable+0x38>)
10041e6e:	468c      	mov	ip, r1
10041e70:	4463      	add	r3, ip
10041e72:	2140      	movs	r1, #64	@ 0x40
10041e74:	438a      	bics	r2, r1
10041e76:	601a      	str	r2, [r3, #0]
}
10041e78:	46c0      	nop			@ (mov r8, r8)
10041e7a:	46bd      	mov	sp, r7
10041e7c:	b002      	add	sp, #8
10041e7e:	bd80      	pop	{r7, pc}
10041e80:	200000dc 	.word	0x200000dc

10041e84 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10041e84:	b580      	push	{r7, lr}
10041e86:	b082      	sub	sp, #8
10041e88:	af00      	add	r7, sp, #0
10041e8a:	0002      	movs	r2, r0
10041e8c:	1dfb      	adds	r3, r7, #7
10041e8e:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10041e90:	1dfb      	adds	r3, r7, #7
10041e92:	781b      	ldrb	r3, [r3, #0]
10041e94:	225c      	movs	r2, #92	@ 0x5c
10041e96:	4353      	muls	r3, r2
10041e98:	4a08      	ldr	r2, [pc, #32]	@ (10041ebc <LL_RADIO_TxMode_Enable+0x38>)
10041e9a:	4694      	mov	ip, r2
10041e9c:	4463      	add	r3, ip
10041e9e:	681a      	ldr	r2, [r3, #0]
10041ea0:	1dfb      	adds	r3, r7, #7
10041ea2:	781b      	ldrb	r3, [r3, #0]
10041ea4:	215c      	movs	r1, #92	@ 0x5c
10041ea6:	434b      	muls	r3, r1
10041ea8:	4904      	ldr	r1, [pc, #16]	@ (10041ebc <LL_RADIO_TxMode_Enable+0x38>)
10041eaa:	468c      	mov	ip, r1
10041eac:	4463      	add	r3, ip
10041eae:	2180      	movs	r1, #128	@ 0x80
10041eb0:	430a      	orrs	r2, r1
10041eb2:	601a      	str	r2, [r3, #0]
}
10041eb4:	46c0      	nop			@ (mov r8, r8)
10041eb6:	46bd      	mov	sp, r7
10041eb8:	b002      	add	sp, #8
10041eba:	bd80      	pop	{r7, pc}
10041ebc:	200000dc 	.word	0x200000dc

10041ec0 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10041ec0:	b580      	push	{r7, lr}
10041ec2:	b082      	sub	sp, #8
10041ec4:	af00      	add	r7, sp, #0
10041ec6:	0002      	movs	r2, r0
10041ec8:	1dfb      	adds	r3, r7, #7
10041eca:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10041ecc:	1dfb      	adds	r3, r7, #7
10041ece:	781b      	ldrb	r3, [r3, #0]
10041ed0:	225c      	movs	r2, #92	@ 0x5c
10041ed2:	4353      	muls	r3, r2
10041ed4:	4a08      	ldr	r2, [pc, #32]	@ (10041ef8 <LL_RADIO_TxMode_Disable+0x38>)
10041ed6:	4694      	mov	ip, r2
10041ed8:	4463      	add	r3, ip
10041eda:	681a      	ldr	r2, [r3, #0]
10041edc:	1dfb      	adds	r3, r7, #7
10041ede:	781b      	ldrb	r3, [r3, #0]
10041ee0:	215c      	movs	r1, #92	@ 0x5c
10041ee2:	434b      	muls	r3, r1
10041ee4:	4904      	ldr	r1, [pc, #16]	@ (10041ef8 <LL_RADIO_TxMode_Disable+0x38>)
10041ee6:	468c      	mov	ip, r1
10041ee8:	4463      	add	r3, ip
10041eea:	2180      	movs	r1, #128	@ 0x80
10041eec:	438a      	bics	r2, r1
10041eee:	601a      	str	r2, [r3, #0]
}
10041ef0:	46c0      	nop			@ (mov r8, r8)
10041ef2:	46bd      	mov	sp, r7
10041ef4:	b002      	add	sp, #8
10041ef6:	bd80      	pop	{r7, pc}
10041ef8:	200000dc 	.word	0x200000dc

10041efc <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
10041efc:	b580      	push	{r7, lr}
10041efe:	b082      	sub	sp, #8
10041f00:	af00      	add	r7, sp, #0
10041f02:	0002      	movs	r2, r0
10041f04:	6039      	str	r1, [r7, #0]
10041f06:	1dfb      	adds	r3, r7, #7
10041f08:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10041f0a:	1dfb      	adds	r3, r7, #7
10041f0c:	781b      	ldrb	r3, [r3, #0]
10041f0e:	225c      	movs	r2, #92	@ 0x5c
10041f10:	4353      	muls	r3, r2
10041f12:	4a0c      	ldr	r2, [pc, #48]	@ (10041f44 <LL_RADIO_SetRemapChannel+0x48>)
10041f14:	4694      	mov	ip, r2
10041f16:	4463      	add	r3, ip
10041f18:	681b      	ldr	r3, [r3, #0]
10041f1a:	4a0b      	ldr	r2, [pc, #44]	@ (10041f48 <LL_RADIO_SetRemapChannel+0x4c>)
10041f1c:	4013      	ands	r3, r2
10041f1e:	0019      	movs	r1, r3
10041f20:	683b      	ldr	r3, [r7, #0]
10041f22:	021a      	lsls	r2, r3, #8
10041f24:	23fc      	movs	r3, #252	@ 0xfc
10041f26:	019b      	lsls	r3, r3, #6
10041f28:	401a      	ands	r2, r3
10041f2a:	1dfb      	adds	r3, r7, #7
10041f2c:	781b      	ldrb	r3, [r3, #0]
10041f2e:	205c      	movs	r0, #92	@ 0x5c
10041f30:	4343      	muls	r3, r0
10041f32:	4804      	ldr	r0, [pc, #16]	@ (10041f44 <LL_RADIO_SetRemapChannel+0x48>)
10041f34:	4684      	mov	ip, r0
10041f36:	4463      	add	r3, ip
10041f38:	430a      	orrs	r2, r1
10041f3a:	601a      	str	r2, [r3, #0]
}
10041f3c:	46c0      	nop			@ (mov r8, r8)
10041f3e:	46bd      	mov	sp, r7
10041f40:	b002      	add	sp, #8
10041f42:	bd80      	pop	{r7, pc}
10041f44:	200000dc 	.word	0x200000dc
10041f48:	ffffc0ff 	.word	0xffffc0ff

10041f4c <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10041f4c:	b580      	push	{r7, lr}
10041f4e:	b082      	sub	sp, #8
10041f50:	af00      	add	r7, sp, #0
10041f52:	0002      	movs	r2, r0
10041f54:	6039      	str	r1, [r7, #0]
10041f56:	1dfb      	adds	r3, r7, #7
10041f58:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10041f5a:	1dfb      	adds	r3, r7, #7
10041f5c:	781b      	ldrb	r3, [r3, #0]
10041f5e:	225c      	movs	r2, #92	@ 0x5c
10041f60:	4353      	muls	r3, r2
10041f62:	4a0c      	ldr	r2, [pc, #48]	@ (10041f94 <LL_RADIO_SetTransmissionPhy+0x48>)
10041f64:	4694      	mov	ip, r2
10041f66:	4463      	add	r3, ip
10041f68:	681b      	ldr	r3, [r3, #0]
10041f6a:	4a0b      	ldr	r2, [pc, #44]	@ (10041f98 <LL_RADIO_SetTransmissionPhy+0x4c>)
10041f6c:	4013      	ands	r3, r2
10041f6e:	0019      	movs	r1, r3
10041f70:	683b      	ldr	r3, [r7, #0]
10041f72:	061a      	lsls	r2, r3, #24
10041f74:	23e0      	movs	r3, #224	@ 0xe0
10041f76:	04db      	lsls	r3, r3, #19
10041f78:	401a      	ands	r2, r3
10041f7a:	1dfb      	adds	r3, r7, #7
10041f7c:	781b      	ldrb	r3, [r3, #0]
10041f7e:	205c      	movs	r0, #92	@ 0x5c
10041f80:	4343      	muls	r3, r0
10041f82:	4804      	ldr	r0, [pc, #16]	@ (10041f94 <LL_RADIO_SetTransmissionPhy+0x48>)
10041f84:	4684      	mov	ip, r0
10041f86:	4463      	add	r3, ip
10041f88:	430a      	orrs	r2, r1
10041f8a:	601a      	str	r2, [r3, #0]
}
10041f8c:	46c0      	nop			@ (mov r8, r8)
10041f8e:	46bd      	mov	sp, r7
10041f90:	b002      	add	sp, #8
10041f92:	bd80      	pop	{r7, pc}
10041f94:	200000dc 	.word	0x200000dc
10041f98:	f8ffffff 	.word	0xf8ffffff

10041f9c <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
10041f9c:	b580      	push	{r7, lr}
10041f9e:	b082      	sub	sp, #8
10041fa0:	af00      	add	r7, sp, #0
10041fa2:	0002      	movs	r2, r0
10041fa4:	6039      	str	r1, [r7, #0]
10041fa6:	1dfb      	adds	r3, r7, #7
10041fa8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
10041faa:	1dfb      	adds	r3, r7, #7
10041fac:	781b      	ldrb	r3, [r3, #0]
10041fae:	225c      	movs	r2, #92	@ 0x5c
10041fb0:	4353      	muls	r3, r2
10041fb2:	4a0c      	ldr	r2, [pc, #48]	@ (10041fe4 <LL_RADIO_SetReceptionPhy+0x48>)
10041fb4:	4694      	mov	ip, r2
10041fb6:	4463      	add	r3, ip
10041fb8:	681b      	ldr	r3, [r3, #0]
10041fba:	4a0b      	ldr	r2, [pc, #44]	@ (10041fe8 <LL_RADIO_SetReceptionPhy+0x4c>)
10041fbc:	4013      	ands	r3, r2
10041fbe:	0019      	movs	r1, r3
10041fc0:	683b      	ldr	r3, [r7, #0]
10041fc2:	071a      	lsls	r2, r3, #28
10041fc4:	23e0      	movs	r3, #224	@ 0xe0
10041fc6:	05db      	lsls	r3, r3, #23
10041fc8:	401a      	ands	r2, r3
10041fca:	1dfb      	adds	r3, r7, #7
10041fcc:	781b      	ldrb	r3, [r3, #0]
10041fce:	205c      	movs	r0, #92	@ 0x5c
10041fd0:	4343      	muls	r3, r0
10041fd2:	4804      	ldr	r0, [pc, #16]	@ (10041fe4 <LL_RADIO_SetReceptionPhy+0x48>)
10041fd4:	4684      	mov	ip, r0
10041fd6:	4463      	add	r3, ip
10041fd8:	430a      	orrs	r2, r1
10041fda:	601a      	str	r2, [r3, #0]
}
10041fdc:	46c0      	nop			@ (mov r8, r8)
10041fde:	46bd      	mov	sp, r7
10041fe0:	b002      	add	sp, #8
10041fe2:	bd80      	pop	{r7, pc}
10041fe4:	200000dc 	.word	0x200000dc
10041fe8:	8fffffff 	.word	0x8fffffff

10041fec <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10041fec:	b580      	push	{r7, lr}
10041fee:	b082      	sub	sp, #8
10041ff0:	af00      	add	r7, sp, #0
10041ff2:	0002      	movs	r2, r0
10041ff4:	6039      	str	r1, [r7, #0]
10041ff6:	1dfb      	adds	r3, r7, #7
10041ff8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10041ffa:	1dfb      	adds	r3, r7, #7
10041ffc:	781b      	ldrb	r3, [r3, #0]
10041ffe:	225c      	movs	r2, #92	@ 0x5c
10042000:	4353      	muls	r3, r2
10042002:	4a08      	ldr	r2, [pc, #32]	@ (10042024 <LL_RADIO_SetTxPoint+0x38>)
10042004:	4694      	mov	ip, r2
10042006:	4463      	add	r3, ip
10042008:	685b      	ldr	r3, [r3, #4]
1004200a:	1dfb      	adds	r3, r7, #7
1004200c:	781b      	ldrb	r3, [r3, #0]
1004200e:	225c      	movs	r2, #92	@ 0x5c
10042010:	4353      	muls	r3, r2
10042012:	4a04      	ldr	r2, [pc, #16]	@ (10042024 <LL_RADIO_SetTxPoint+0x38>)
10042014:	4694      	mov	ip, r2
10042016:	4463      	add	r3, ip
10042018:	683a      	ldr	r2, [r7, #0]
1004201a:	605a      	str	r2, [r3, #4]
}
1004201c:	46c0      	nop			@ (mov r8, r8)
1004201e:	46bd      	mov	sp, r7
10042020:	b002      	add	sp, #8
10042022:	bd80      	pop	{r7, pc}
10042024:	200000dc 	.word	0x200000dc

10042028 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
10042028:	b580      	push	{r7, lr}
1004202a:	b082      	sub	sp, #8
1004202c:	af00      	add	r7, sp, #0
1004202e:	0002      	movs	r2, r0
10042030:	6039      	str	r1, [r7, #0]
10042032:	1dfb      	adds	r3, r7, #7
10042034:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
10042036:	1dfb      	adds	r3, r7, #7
10042038:	781b      	ldrb	r3, [r3, #0]
1004203a:	225c      	movs	r2, #92	@ 0x5c
1004203c:	4353      	muls	r3, r2
1004203e:	4a08      	ldr	r2, [pc, #32]	@ (10042060 <LL_RADIO_SetRcvPoint+0x38>)
10042040:	4694      	mov	ip, r2
10042042:	4463      	add	r3, ip
10042044:	689b      	ldr	r3, [r3, #8]
10042046:	1dfb      	adds	r3, r7, #7
10042048:	781b      	ldrb	r3, [r3, #0]
1004204a:	225c      	movs	r2, #92	@ 0x5c
1004204c:	4353      	muls	r3, r2
1004204e:	4a04      	ldr	r2, [pc, #16]	@ (10042060 <LL_RADIO_SetRcvPoint+0x38>)
10042050:	4694      	mov	ip, r2
10042052:	4463      	add	r3, ip
10042054:	683a      	ldr	r2, [r7, #0]
10042056:	609a      	str	r2, [r3, #8]
}
10042058:	46c0      	nop			@ (mov r8, r8)
1004205a:	46bd      	mov	sp, r7
1004205c:	b002      	add	sp, #8
1004205e:	bd80      	pop	{r7, pc}
10042060:	200000dc 	.word	0x200000dc

10042064 <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
10042064:	b580      	push	{r7, lr}
10042066:	b082      	sub	sp, #8
10042068:	af00      	add	r7, sp, #0
1004206a:	0002      	movs	r2, r0
1004206c:	6039      	str	r1, [r7, #0]
1004206e:	1dfb      	adds	r3, r7, #7
10042070:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
10042072:	1dfb      	adds	r3, r7, #7
10042074:	781b      	ldrb	r3, [r3, #0]
10042076:	225c      	movs	r2, #92	@ 0x5c
10042078:	4353      	muls	r3, r2
1004207a:	4a08      	ldr	r2, [pc, #32]	@ (1004209c <LL_RADIO_SetAccessAddress+0x38>)
1004207c:	4694      	mov	ip, r2
1004207e:	4463      	add	r3, ip
10042080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10042082:	1dfb      	adds	r3, r7, #7
10042084:	781b      	ldrb	r3, [r3, #0]
10042086:	225c      	movs	r2, #92	@ 0x5c
10042088:	4353      	muls	r3, r2
1004208a:	4a04      	ldr	r2, [pc, #16]	@ (1004209c <LL_RADIO_SetAccessAddress+0x38>)
1004208c:	4694      	mov	ip, r2
1004208e:	4463      	add	r3, ip
10042090:	683a      	ldr	r2, [r7, #0]
10042092:	625a      	str	r2, [r3, #36]	@ 0x24
}
10042094:	46c0      	nop			@ (mov r8, r8)
10042096:	46bd      	mov	sp, r7
10042098:	b002      	add	sp, #8
1004209a:	bd80      	pop	{r7, pc}
1004209c:	200000dc 	.word	0x200000dc

100420a0 <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
100420a0:	b580      	push	{r7, lr}
100420a2:	b082      	sub	sp, #8
100420a4:	af00      	add	r7, sp, #0
100420a6:	0002      	movs	r2, r0
100420a8:	6039      	str	r1, [r7, #0]
100420aa:	1dfb      	adds	r3, r7, #7
100420ac:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
100420ae:	1dfb      	adds	r3, r7, #7
100420b0:	781b      	ldrb	r3, [r3, #0]
100420b2:	225c      	movs	r2, #92	@ 0x5c
100420b4:	4353      	muls	r3, r2
100420b6:	4a0b      	ldr	r2, [pc, #44]	@ (100420e4 <LL_RADIO_SetCRCInitializationValue+0x44>)
100420b8:	4694      	mov	ip, r2
100420ba:	4463      	add	r3, ip
100420bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100420be:	0e1b      	lsrs	r3, r3, #24
100420c0:	0619      	lsls	r1, r3, #24
100420c2:	683b      	ldr	r3, [r7, #0]
100420c4:	021b      	lsls	r3, r3, #8
100420c6:	0a1a      	lsrs	r2, r3, #8
100420c8:	1dfb      	adds	r3, r7, #7
100420ca:	781b      	ldrb	r3, [r3, #0]
100420cc:	205c      	movs	r0, #92	@ 0x5c
100420ce:	4343      	muls	r3, r0
100420d0:	4804      	ldr	r0, [pc, #16]	@ (100420e4 <LL_RADIO_SetCRCInitializationValue+0x44>)
100420d2:	4684      	mov	ip, r0
100420d4:	4463      	add	r3, ip
100420d6:	430a      	orrs	r2, r1
100420d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
100420da:	46c0      	nop			@ (mov r8, r8)
100420dc:	46bd      	mov	sp, r7
100420de:	b002      	add	sp, #8
100420e0:	bd80      	pop	{r7, pc}
100420e2:	46c0      	nop			@ (mov r8, r8)
100420e4:	200000dc 	.word	0x200000dc

100420e8 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
100420e8:	b580      	push	{r7, lr}
100420ea:	b082      	sub	sp, #8
100420ec:	af00      	add	r7, sp, #0
100420ee:	0002      	movs	r2, r0
100420f0:	6039      	str	r1, [r7, #0]
100420f2:	1dfb      	adds	r3, r7, #7
100420f4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
100420f6:	1dfb      	adds	r3, r7, #7
100420f8:	781b      	ldrb	r3, [r3, #0]
100420fa:	225c      	movs	r2, #92	@ 0x5c
100420fc:	4353      	muls	r3, r2
100420fe:	4a0a      	ldr	r2, [pc, #40]	@ (10042128 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10042100:	4694      	mov	ip, r2
10042102:	4463      	add	r3, ip
10042104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10042106:	021b      	lsls	r3, r3, #8
10042108:	0a19      	lsrs	r1, r3, #8
1004210a:	683b      	ldr	r3, [r7, #0]
1004210c:	061a      	lsls	r2, r3, #24
1004210e:	1dfb      	adds	r3, r7, #7
10042110:	781b      	ldrb	r3, [r3, #0]
10042112:	205c      	movs	r0, #92	@ 0x5c
10042114:	4343      	muls	r3, r0
10042116:	4804      	ldr	r0, [pc, #16]	@ (10042128 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10042118:	4684      	mov	ip, r0
1004211a:	4463      	add	r3, ip
1004211c:	430a      	orrs	r2, r1
1004211e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10042120:	46c0      	nop			@ (mov r8, r8)
10042122:	46bd      	mov	sp, r7
10042124:	b002      	add	sp, #8
10042126:	bd80      	pop	{r7, pc}
10042128:	200000dc 	.word	0x200000dc

1004212c <LL_RADIO_TxHp_Enable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Enable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Enable(uint8_t stateMachineNo)
{
1004212c:	b580      	push	{r7, lr}
1004212e:	b082      	sub	sp, #8
10042130:	af00      	add	r7, sp, #0
10042132:	0002      	movs	r2, r0
10042134:	1dfb      	adds	r3, r7, #7
10042136:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10042138:	1dfb      	adds	r3, r7, #7
1004213a:	781b      	ldrb	r3, [r3, #0]
1004213c:	225c      	movs	r2, #92	@ 0x5c
1004213e:	4353      	muls	r3, r2
10042140:	4a08      	ldr	r2, [pc, #32]	@ (10042164 <LL_RADIO_TxHp_Enable+0x38>)
10042142:	4694      	mov	ip, r2
10042144:	4463      	add	r3, ip
10042146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10042148:	1dfb      	adds	r3, r7, #7
1004214a:	781b      	ldrb	r3, [r3, #0]
1004214c:	215c      	movs	r1, #92	@ 0x5c
1004214e:	434b      	muls	r3, r1
10042150:	4904      	ldr	r1, [pc, #16]	@ (10042164 <LL_RADIO_TxHp_Enable+0x38>)
10042152:	468c      	mov	ip, r1
10042154:	4463      	add	r3, ip
10042156:	2180      	movs	r1, #128	@ 0x80
10042158:	430a      	orrs	r2, r1
1004215a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004215c:	46c0      	nop			@ (mov r8, r8)
1004215e:	46bd      	mov	sp, r7
10042160:	b002      	add	sp, #8
10042162:	bd80      	pop	{r7, pc}
10042164:	200000dc 	.word	0x200000dc

10042168 <LL_RADIO_TxHp_Disable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Disable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Disable(uint8_t stateMachineNo)
{
10042168:	b580      	push	{r7, lr}
1004216a:	b082      	sub	sp, #8
1004216c:	af00      	add	r7, sp, #0
1004216e:	0002      	movs	r2, r0
10042170:	1dfb      	adds	r3, r7, #7
10042172:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10042174:	1dfb      	adds	r3, r7, #7
10042176:	781b      	ldrb	r3, [r3, #0]
10042178:	225c      	movs	r2, #92	@ 0x5c
1004217a:	4353      	muls	r3, r2
1004217c:	4a08      	ldr	r2, [pc, #32]	@ (100421a0 <LL_RADIO_TxHp_Disable+0x38>)
1004217e:	4694      	mov	ip, r2
10042180:	4463      	add	r3, ip
10042182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10042184:	1dfb      	adds	r3, r7, #7
10042186:	781b      	ldrb	r3, [r3, #0]
10042188:	215c      	movs	r1, #92	@ 0x5c
1004218a:	434b      	muls	r3, r1
1004218c:	4904      	ldr	r1, [pc, #16]	@ (100421a0 <LL_RADIO_TxHp_Disable+0x38>)
1004218e:	468c      	mov	ip, r1
10042190:	4463      	add	r3, ip
10042192:	2180      	movs	r1, #128	@ 0x80
10042194:	438a      	bics	r2, r1
10042196:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10042198:	46c0      	nop			@ (mov r8, r8)
1004219a:	46bd      	mov	sp, r7
1004219c:	b002      	add	sp, #8
1004219e:	bd80      	pop	{r7, pc}
100421a0:	200000dc 	.word	0x200000dc

100421a4 <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
100421a4:	b580      	push	{r7, lr}
100421a6:	b082      	sub	sp, #8
100421a8:	af00      	add	r7, sp, #0
100421aa:	0002      	movs	r2, r0
100421ac:	6039      	str	r1, [r7, #0]
100421ae:	1dfb      	adds	r3, r7, #7
100421b0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
100421b2:	1dfb      	adds	r3, r7, #7
100421b4:	781b      	ldrb	r3, [r3, #0]
100421b6:	225c      	movs	r2, #92	@ 0x5c
100421b8:	4353      	muls	r3, r2
100421ba:	4a0b      	ldr	r2, [pc, #44]	@ (100421e8 <LL_RADIO_SetPAPower+0x44>)
100421bc:	4694      	mov	ip, r2
100421be:	4463      	add	r3, ip
100421c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100421c2:	221f      	movs	r2, #31
100421c4:	4393      	bics	r3, r2
100421c6:	0019      	movs	r1, r3
100421c8:	683b      	ldr	r3, [r7, #0]
100421ca:	221f      	movs	r2, #31
100421cc:	401a      	ands	r2, r3
100421ce:	1dfb      	adds	r3, r7, #7
100421d0:	781b      	ldrb	r3, [r3, #0]
100421d2:	205c      	movs	r0, #92	@ 0x5c
100421d4:	4343      	muls	r3, r0
100421d6:	4804      	ldr	r0, [pc, #16]	@ (100421e8 <LL_RADIO_SetPAPower+0x44>)
100421d8:	4684      	mov	ip, r0
100421da:	4463      	add	r3, ip
100421dc:	430a      	orrs	r2, r1
100421de:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100421e0:	46c0      	nop			@ (mov r8, r8)
100421e2:	46bd      	mov	sp, r7
100421e4:	b002      	add	sp, #8
100421e6:	bd80      	pop	{r7, pc}
100421e8:	200000dc 	.word	0x200000dc

100421ec <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
100421ec:	b580      	push	{r7, lr}
100421ee:	b082      	sub	sp, #8
100421f0:	af00      	add	r7, sp, #0
100421f2:	0002      	movs	r2, r0
100421f4:	6039      	str	r1, [r7, #0]
100421f6:	1dfb      	adds	r3, r7, #7
100421f8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
100421fa:	1dfb      	adds	r3, r7, #7
100421fc:	781b      	ldrb	r3, [r3, #0]
100421fe:	225c      	movs	r2, #92	@ 0x5c
10042200:	4353      	muls	r3, r2
10042202:	4a0c      	ldr	r2, [pc, #48]	@ (10042234 <LL_RADIO_SetHopIncrement+0x48>)
10042204:	4694      	mov	ip, r2
10042206:	4463      	add	r3, ip
10042208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004220a:	4a0b      	ldr	r2, [pc, #44]	@ (10042238 <LL_RADIO_SetHopIncrement+0x4c>)
1004220c:	4013      	ands	r3, r2
1004220e:	0019      	movs	r1, r3
10042210:	683b      	ldr	r3, [r7, #0]
10042212:	021a      	lsls	r2, r3, #8
10042214:	23fc      	movs	r3, #252	@ 0xfc
10042216:	019b      	lsls	r3, r3, #6
10042218:	401a      	ands	r2, r3
1004221a:	1dfb      	adds	r3, r7, #7
1004221c:	781b      	ldrb	r3, [r3, #0]
1004221e:	205c      	movs	r0, #92	@ 0x5c
10042220:	4343      	muls	r3, r0
10042222:	4804      	ldr	r0, [pc, #16]	@ (10042234 <LL_RADIO_SetHopIncrement+0x48>)
10042224:	4684      	mov	ip, r0
10042226:	4463      	add	r3, ip
10042228:	430a      	orrs	r2, r1
1004222a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004222c:	46c0      	nop			@ (mov r8, r8)
1004222e:	46bd      	mov	sp, r7
10042230:	b002      	add	sp, #8
10042232:	bd80      	pop	{r7, pc}
10042234:	200000dc 	.word	0x200000dc
10042238:	ffffc0ff 	.word	0xffffc0ff

1004223c <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
1004223c:	b580      	push	{r7, lr}
1004223e:	b082      	sub	sp, #8
10042240:	af00      	add	r7, sp, #0
10042242:	6078      	str	r0, [r7, #4]
10042244:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
10042246:	687b      	ldr	r3, [r7, #4]
10042248:	681b      	ldr	r3, [r3, #0]
1004224a:	687b      	ldr	r3, [r7, #4]
1004224c:	683a      	ldr	r2, [r7, #0]
1004224e:	601a      	str	r2, [r3, #0]
}
10042250:	46c0      	nop			@ (mov r8, r8)
10042252:	46bd      	mov	sp, r7
10042254:	b002      	add	sp, #8
10042256:	bd80      	pop	{r7, pc}

10042258 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10042258:	b580      	push	{r7, lr}
1004225a:	b082      	sub	sp, #8
1004225c:	af00      	add	r7, sp, #0
1004225e:	6078      	str	r0, [r7, #4]
10042260:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
10042262:	687b      	ldr	r3, [r7, #4]
10042264:	685b      	ldr	r3, [r3, #4]
10042266:	2201      	movs	r2, #1
10042268:	4393      	bics	r3, r2
1004226a:	001a      	movs	r2, r3
1004226c:	683b      	ldr	r3, [r7, #0]
1004226e:	2101      	movs	r1, #1
10042270:	400b      	ands	r3, r1
10042272:	431a      	orrs	r2, r3
10042274:	687b      	ldr	r3, [r7, #4]
10042276:	605a      	str	r2, [r3, #4]
}
10042278:	46c0      	nop			@ (mov r8, r8)
1004227a:	46bd      	mov	sp, r7
1004227c:	b002      	add	sp, #8
1004227e:	bd80      	pop	{r7, pc}

10042280 <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10042280:	b580      	push	{r7, lr}
10042282:	b082      	sub	sp, #8
10042284:	af00      	add	r7, sp, #0
10042286:	6078      	str	r0, [r7, #4]
10042288:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
1004228a:	687b      	ldr	r3, [r7, #4]
1004228c:	685b      	ldr	r3, [r3, #4]
1004228e:	2204      	movs	r2, #4
10042290:	4393      	bics	r3, r2
10042292:	001a      	movs	r2, r3
10042294:	683b      	ldr	r3, [r7, #0]
10042296:	009b      	lsls	r3, r3, #2
10042298:	2104      	movs	r1, #4
1004229a:	400b      	ands	r3, r1
1004229c:	431a      	orrs	r2, r3
1004229e:	687b      	ldr	r3, [r7, #4]
100422a0:	605a      	str	r2, [r3, #4]
}
100422a2:	46c0      	nop			@ (mov r8, r8)
100422a4:	46bd      	mov	sp, r7
100422a6:	b002      	add	sp, #8
100422a8:	bd80      	pop	{r7, pc}

100422aa <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
100422aa:	b580      	push	{r7, lr}
100422ac:	b082      	sub	sp, #8
100422ae:	af00      	add	r7, sp, #0
100422b0:	6078      	str	r0, [r7, #4]
100422b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
100422b4:	687b      	ldr	r3, [r7, #4]
100422b6:	685b      	ldr	r3, [r3, #4]
100422b8:	2220      	movs	r2, #32
100422ba:	4393      	bics	r3, r2
100422bc:	001a      	movs	r2, r3
100422be:	683b      	ldr	r3, [r7, #0]
100422c0:	015b      	lsls	r3, r3, #5
100422c2:	2120      	movs	r1, #32
100422c4:	400b      	ands	r3, r1
100422c6:	431a      	orrs	r2, r3
100422c8:	687b      	ldr	r3, [r7, #4]
100422ca:	605a      	str	r2, [r3, #4]
}
100422cc:	46c0      	nop			@ (mov r8, r8)
100422ce:	46bd      	mov	sp, r7
100422d0:	b002      	add	sp, #8
100422d2:	bd80      	pop	{r7, pc}

100422d4 <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
100422d4:	b580      	push	{r7, lr}
100422d6:	b082      	sub	sp, #8
100422d8:	af00      	add	r7, sp, #0
100422da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100422dc:	687b      	ldr	r3, [r7, #4]
100422de:	685b      	ldr	r3, [r3, #4]
100422e0:	2280      	movs	r2, #128	@ 0x80
100422e2:	4393      	bics	r3, r2
100422e4:	001a      	movs	r2, r3
100422e6:	687b      	ldr	r3, [r7, #4]
100422e8:	605a      	str	r2, [r3, #4]
}
100422ea:	46c0      	nop			@ (mov r8, r8)
100422ec:	46bd      	mov	sp, r7
100422ee:	b002      	add	sp, #8
100422f0:	bd80      	pop	{r7, pc}
	...

100422f4 <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
100422f4:	b580      	push	{r7, lr}
100422f6:	b082      	sub	sp, #8
100422f8:	af00      	add	r7, sp, #0
100422fa:	6078      	str	r0, [r7, #4]
100422fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
100422fe:	687b      	ldr	r3, [r7, #4]
10042300:	685b      	ldr	r3, [r3, #4]
10042302:	4a07      	ldr	r2, [pc, #28]	@ (10042320 <LL_RADIO_SetNextTxMode+0x2c>)
10042304:	401a      	ands	r2, r3
10042306:	683b      	ldr	r3, [r7, #0]
10042308:	0219      	lsls	r1, r3, #8
1004230a:	2380      	movs	r3, #128	@ 0x80
1004230c:	005b      	lsls	r3, r3, #1
1004230e:	400b      	ands	r3, r1
10042310:	431a      	orrs	r2, r3
10042312:	687b      	ldr	r3, [r7, #4]
10042314:	605a      	str	r2, [r3, #4]
}
10042316:	46c0      	nop			@ (mov r8, r8)
10042318:	46bd      	mov	sp, r7
1004231a:	b002      	add	sp, #8
1004231c:	bd80      	pop	{r7, pc}
1004231e:	46c0      	nop			@ (mov r8, r8)
10042320:	fffffeff 	.word	0xfffffeff

10042324 <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10042324:	b580      	push	{r7, lr}
10042326:	b082      	sub	sp, #8
10042328:	af00      	add	r7, sp, #0
1004232a:	6078      	str	r0, [r7, #4]
1004232c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
1004232e:	687b      	ldr	r3, [r7, #4]
10042330:	685b      	ldr	r3, [r3, #4]
10042332:	4a07      	ldr	r2, [pc, #28]	@ (10042350 <LL_RADIO_SetAllTableDataReady+0x2c>)
10042334:	401a      	ands	r2, r3
10042336:	683b      	ldr	r3, [r7, #0]
10042338:	0259      	lsls	r1, r3, #9
1004233a:	2380      	movs	r3, #128	@ 0x80
1004233c:	009b      	lsls	r3, r3, #2
1004233e:	400b      	ands	r3, r1
10042340:	431a      	orrs	r2, r3
10042342:	687b      	ldr	r3, [r7, #4]
10042344:	605a      	str	r2, [r3, #4]
}
10042346:	46c0      	nop			@ (mov r8, r8)
10042348:	46bd      	mov	sp, r7
1004234a:	b002      	add	sp, #8
1004234c:	bd80      	pop	{r7, pc}
1004234e:	46c0      	nop			@ (mov r8, r8)
10042350:	fffffdff 	.word	0xfffffdff

10042354 <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10042354:	b580      	push	{r7, lr}
10042356:	b082      	sub	sp, #8
10042358:	af00      	add	r7, sp, #0
1004235a:	6078      	str	r0, [r7, #4]
1004235c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
1004235e:	687b      	ldr	r3, [r7, #4]
10042360:	685b      	ldr	r3, [r3, #4]
10042362:	4a07      	ldr	r2, [pc, #28]	@ (10042380 <LL_RADIO_SetTransmissionDataReady+0x2c>)
10042364:	401a      	ands	r2, r3
10042366:	683b      	ldr	r3, [r7, #0]
10042368:	0299      	lsls	r1, r3, #10
1004236a:	2380      	movs	r3, #128	@ 0x80
1004236c:	00db      	lsls	r3, r3, #3
1004236e:	400b      	ands	r3, r1
10042370:	431a      	orrs	r2, r3
10042372:	687b      	ldr	r3, [r7, #4]
10042374:	605a      	str	r2, [r3, #4]
}
10042376:	46c0      	nop			@ (mov r8, r8)
10042378:	46bd      	mov	sp, r7
1004237a:	b002      	add	sp, #8
1004237c:	bd80      	pop	{r7, pc}
1004237e:	46c0      	nop			@ (mov r8, r8)
10042380:	fffffbff 	.word	0xfffffbff

10042384 <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10042384:	b580      	push	{r7, lr}
10042386:	b082      	sub	sp, #8
10042388:	af00      	add	r7, sp, #0
1004238a:	6078      	str	r0, [r7, #4]
1004238c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
1004238e:	687b      	ldr	r3, [r7, #4]
10042390:	689b      	ldr	r3, [r3, #8]
10042392:	687b      	ldr	r3, [r7, #4]
10042394:	683a      	ldr	r2, [r7, #0]
10042396:	609a      	str	r2, [r3, #8]
}
10042398:	46c0      	nop			@ (mov r8, r8)
1004239a:	46bd      	mov	sp, r7
1004239c:	b002      	add	sp, #8
1004239e:	bd80      	pop	{r7, pc}

100423a0 <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
100423a0:	b580      	push	{r7, lr}
100423a2:	b082      	sub	sp, #8
100423a4:	af00      	add	r7, sp, #0
100423a6:	6078      	str	r0, [r7, #4]
100423a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
100423aa:	687b      	ldr	r3, [r7, #4]
100423ac:	68db      	ldr	r3, [r3, #12]
100423ae:	0d1b      	lsrs	r3, r3, #20
100423b0:	051a      	lsls	r2, r3, #20
100423b2:	683b      	ldr	r3, [r7, #0]
100423b4:	031b      	lsls	r3, r3, #12
100423b6:	0b1b      	lsrs	r3, r3, #12
100423b8:	431a      	orrs	r2, r3
100423ba:	687b      	ldr	r3, [r7, #4]
100423bc:	60da      	str	r2, [r3, #12]
}
100423be:	46c0      	nop			@ (mov r8, r8)
100423c0:	46bd      	mov	sp, r7
100423c2:	b002      	add	sp, #8
100423c4:	bd80      	pop	{r7, pc}

100423c6 <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
100423c6:	b580      	push	{r7, lr}
100423c8:	b082      	sub	sp, #8
100423ca:	af00      	add	r7, sp, #0
100423cc:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
100423ce:	687b      	ldr	r3, [r7, #4]
100423d0:	68db      	ldr	r3, [r3, #12]
100423d2:	2280      	movs	r2, #128	@ 0x80
100423d4:	0352      	lsls	r2, r2, #13
100423d6:	431a      	orrs	r2, r3
100423d8:	687b      	ldr	r3, [r7, #4]
100423da:	60da      	str	r2, [r3, #12]
}
100423dc:	46c0      	nop			@ (mov r8, r8)
100423de:	46bd      	mov	sp, r7
100423e0:	b002      	add	sp, #8
100423e2:	bd80      	pop	{r7, pc}

100423e4 <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
100423e4:	b580      	push	{r7, lr}
100423e6:	b082      	sub	sp, #8
100423e8:	af00      	add	r7, sp, #0
100423ea:	6078      	str	r0, [r7, #4]
100423ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
100423ee:	687b      	ldr	r3, [r7, #4]
100423f0:	68db      	ldr	r3, [r3, #12]
100423f2:	4a07      	ldr	r2, [pc, #28]	@ (10042410 <LL_RADIO_SetTrigRcv+0x2c>)
100423f4:	401a      	ands	r2, r3
100423f6:	683b      	ldr	r3, [r7, #0]
100423f8:	0599      	lsls	r1, r3, #22
100423fa:	2380      	movs	r3, #128	@ 0x80
100423fc:	03db      	lsls	r3, r3, #15
100423fe:	400b      	ands	r3, r1
10042400:	431a      	orrs	r2, r3
10042402:	687b      	ldr	r3, [r7, #4]
10042404:	60da      	str	r2, [r3, #12]
}
10042406:	46c0      	nop			@ (mov r8, r8)
10042408:	46bd      	mov	sp, r7
1004240a:	b002      	add	sp, #8
1004240c:	bd80      	pop	{r7, pc}
1004240e:	46c0      	nop			@ (mov r8, r8)
10042410:	ffbfffff 	.word	0xffbfffff

10042414 <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
10042414:	b580      	push	{r7, lr}
10042416:	b082      	sub	sp, #8
10042418:	af00      	add	r7, sp, #0
1004241a:	6078      	str	r0, [r7, #4]
1004241c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
1004241e:	687b      	ldr	r3, [r7, #4]
10042420:	68db      	ldr	r3, [r3, #12]
10042422:	4a07      	ldr	r2, [pc, #28]	@ (10042440 <LL_RADIO_SetTrigDone+0x2c>)
10042424:	401a      	ands	r2, r3
10042426:	683b      	ldr	r3, [r7, #0]
10042428:	05d9      	lsls	r1, r3, #23
1004242a:	2380      	movs	r3, #128	@ 0x80
1004242c:	041b      	lsls	r3, r3, #16
1004242e:	400b      	ands	r3, r1
10042430:	431a      	orrs	r2, r3
10042432:	687b      	ldr	r3, [r7, #4]
10042434:	60da      	str	r2, [r3, #12]
}
10042436:	46c0      	nop			@ (mov r8, r8)
10042438:	46bd      	mov	sp, r7
1004243a:	b002      	add	sp, #8
1004243c:	bd80      	pop	{r7, pc}
1004243e:	46c0      	nop			@ (mov r8, r8)
10042440:	ff7fffff 	.word	0xff7fffff

10042444 <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
10042444:	b580      	push	{r7, lr}
10042446:	b082      	sub	sp, #8
10042448:	af00      	add	r7, sp, #0
1004244a:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
1004244c:	687b      	ldr	r3, [r7, #4]
1004244e:	68db      	ldr	r3, [r3, #12]
10042450:	2280      	movs	r2, #128	@ 0x80
10042452:	0492      	lsls	r2, r2, #18
10042454:	431a      	orrs	r2, r3
10042456:	687b      	ldr	r3, [r7, #4]
10042458:	60da      	str	r2, [r3, #12]
}
1004245a:	46c0      	nop			@ (mov r8, r8)
1004245c:	46bd      	mov	sp, r7
1004245e:	b002      	add	sp, #8
10042460:	bd80      	pop	{r7, pc}

10042462 <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
10042462:	b580      	push	{r7, lr}
10042464:	b082      	sub	sp, #8
10042466:	af00      	add	r7, sp, #0
10042468:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
1004246a:	687b      	ldr	r3, [r7, #4]
1004246c:	68db      	ldr	r3, [r3, #12]
1004246e:	2280      	movs	r2, #128	@ 0x80
10042470:	0612      	lsls	r2, r2, #24
10042472:	431a      	orrs	r2, r3
10042474:	687b      	ldr	r3, [r7, #4]
10042476:	60da      	str	r2, [r3, #12]
}
10042478:	46c0      	nop			@ (mov r8, r8)
1004247a:	46bd      	mov	sp, r7
1004247c:	b002      	add	sp, #8
1004247e:	bd80      	pop	{r7, pc}

10042480 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
10042480:	b580      	push	{r7, lr}
10042482:	b082      	sub	sp, #8
10042484:	af00      	add	r7, sp, #0
10042486:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
10042488:	23c0      	movs	r3, #192	@ 0xc0
1004248a:	05db      	lsls	r3, r3, #23
1004248c:	685b      	ldr	r3, [r3, #4]
1004248e:	4a07      	ldr	r2, [pc, #28]	@ (100424ac <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
10042490:	4013      	ands	r3, r2
10042492:	0019      	movs	r1, r3
10042494:	687b      	ldr	r3, [r7, #4]
10042496:	4a06      	ldr	r2, [pc, #24]	@ (100424b0 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
10042498:	401a      	ands	r2, r3
1004249a:	23c0      	movs	r3, #192	@ 0xc0
1004249c:	05db      	lsls	r3, r3, #23
1004249e:	430a      	orrs	r2, r1
100424a0:	605a      	str	r2, [r3, #4]
}
100424a2:	46c0      	nop			@ (mov r8, r8)
100424a4:	46bd      	mov	sp, r7
100424a6:	b002      	add	sp, #8
100424a8:	bd80      	pop	{r7, pc}
100424aa:	46c0      	nop			@ (mov r8, r8)
100424ac:	0002004f 	.word	0x0002004f
100424b0:	fffdffb0 	.word	0xfffdffb0

100424b4 <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
100424b4:	b580      	push	{r7, lr}
100424b6:	b082      	sub	sp, #8
100424b8:	af00      	add	r7, sp, #0
100424ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
100424bc:	23c0      	movs	r3, #192	@ 0xc0
100424be:	05db      	lsls	r3, r3, #23
100424c0:	699b      	ldr	r3, [r3, #24]
100424c2:	2208      	movs	r2, #8
100424c4:	4393      	bics	r3, r2
100424c6:	0019      	movs	r1, r3
100424c8:	687b      	ldr	r3, [r7, #4]
100424ca:	00db      	lsls	r3, r3, #3
100424cc:	2208      	movs	r2, #8
100424ce:	401a      	ands	r2, r3
100424d0:	23c0      	movs	r3, #192	@ 0xc0
100424d2:	05db      	lsls	r3, r3, #23
100424d4:	430a      	orrs	r2, r1
100424d6:	619a      	str	r2, [r3, #24]
}
100424d8:	46c0      	nop			@ (mov r8, r8)
100424da:	46bd      	mov	sp, r7
100424dc:	b002      	add	sp, #8
100424de:	bd80      	pop	{r7, pc}

100424e0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
100424e0:	b580      	push	{r7, lr}
100424e2:	b088      	sub	sp, #32
100424e4:	af00      	add	r7, sp, #0
100424e6:	6078      	str	r0, [r7, #4]
100424e8:	0008      	movs	r0, r1
100424ea:	0011      	movs	r1, r2
100424ec:	1cfb      	adds	r3, r7, #3
100424ee:	1c02      	adds	r2, r0, #0
100424f0:	701a      	strb	r2, [r3, #0]
100424f2:	1cbb      	adds	r3, r7, #2
100424f4:	1c0a      	adds	r2, r1, #0
100424f6:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
100424f8:	687b      	ldr	r3, [r7, #4]
100424fa:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
100424fc:	1cfb      	adds	r3, r7, #3
100424fe:	781b      	ldrb	r3, [r3, #0]
10042500:	2b01      	cmp	r3, #1
10042502:	d105      	bne.n	10042510 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 6;
10042504:	2306      	movs	r3, #6
10042506:	60bb      	str	r3, [r7, #8]
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
10042508:	68bb      	ldr	r3, [r7, #8]
1004250a:	3302      	adds	r3, #2
1004250c:	61fb      	str	r3, [r7, #28]
1004250e:	e015      	b.n	1004253c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
10042510:	1cfb      	adds	r3, r7, #3
10042512:	781b      	ldrb	r3, [r3, #0]
10042514:	2b00      	cmp	r3, #0
10042516:	d105      	bne.n	10042524 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 4;
10042518:	2304      	movs	r3, #4
1004251a:	60fb      	str	r3, [r7, #12]
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
1004251c:	68fb      	ldr	r3, [r7, #12]
1004251e:	3302      	adds	r3, #2
10042520:	61fb      	str	r3, [r7, #28]
10042522:	e00b      	b.n	1004253c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10042524:	1cfb      	adds	r3, r7, #3
10042526:	781b      	ldrb	r3, [r3, #0]
10042528:	2b02      	cmp	r3, #2
1004252a:	d105      	bne.n	10042538 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
#else
        const int32_t Adjust_Value = 2;
1004252c:	2302      	movs	r3, #2
1004252e:	613b      	str	r3, [r7, #16]
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
10042530:	693b      	ldr	r3, [r7, #16]
10042532:	3304      	adds	r3, #4
10042534:	61fb      	str	r3, [r7, #28]
10042536:	e001      	b.n	1004253c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
10042538:	2300      	movs	r3, #0
1004253a:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
1004253c:	1cfb      	adds	r3, r7, #3
1004253e:	781b      	ldrb	r3, [r3, #0]
10042540:	2b01      	cmp	r3, #1
10042542:	d003      	beq.n	1004254c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
10042544:	1cfb      	adds	r3, r7, #3
10042546:	781b      	ldrb	r3, [r3, #0]
10042548:	2b02      	cmp	r3, #2
1004254a:	d109      	bne.n	10042560 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
1004254c:	1cbb      	adds	r3, r7, #2
1004254e:	781b      	ldrb	r3, [r3, #0]
10042550:	2b01      	cmp	r3, #1
10042552:	d102      	bne.n	1004255a <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
10042554:	239b      	movs	r3, #155	@ 0x9b
10042556:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
10042558:	e013      	b.n	10042582 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
1004255a:	233d      	movs	r3, #61	@ 0x3d
1004255c:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
1004255e:	e010      	b.n	10042582 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
10042560:	1cfb      	adds	r3, r7, #3
10042562:	781b      	ldrb	r3, [r3, #0]
10042564:	2b00      	cmp	r3, #0
10042566:	d003      	beq.n	10042570 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
10042568:	1cfb      	adds	r3, r7, #3
1004256a:	781b      	ldrb	r3, [r3, #0]
1004256c:	2b03      	cmp	r3, #3
1004256e:	d108      	bne.n	10042582 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
10042570:	1cbb      	adds	r3, r7, #2
10042572:	781b      	ldrb	r3, [r3, #0]
10042574:	2b01      	cmp	r3, #1
10042576:	d102      	bne.n	1004257e <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
10042578:	2399      	movs	r3, #153	@ 0x99
1004257a:	61bb      	str	r3, [r7, #24]
1004257c:	e001      	b.n	10042582 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
1004257e:	233b      	movs	r3, #59	@ 0x3b
10042580:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
10042582:	69ba      	ldr	r2, [r7, #24]
10042584:	69fb      	ldr	r3, [r7, #28]
10042586:	18d3      	adds	r3, r2, r3
10042588:	697a      	ldr	r2, [r7, #20]
1004258a:	1ad3      	subs	r3, r2, r3
1004258c:	617b      	str	r3, [r7, #20]

    return Timeout;
1004258e:	697b      	ldr	r3, [r7, #20]
}
10042590:	0018      	movs	r0, r3
10042592:	46bd      	mov	sp, r7
10042594:	b008      	add	sp, #32
10042596:	bd80      	pop	{r7, pc}

10042598 <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
10042598:	b580      	push	{r7, lr}
1004259a:	b082      	sub	sp, #8
1004259c:	af00      	add	r7, sp, #0
1004259e:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
100425a0:	687b      	ldr	r3, [r7, #4]
100425a2:	0018      	movs	r0, r3
100425a4:	f7ff ff6c 	bl	10042480 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
100425a8:	46c0      	nop			@ (mov r8, r8)
100425aa:	46bd      	mov	sp, r7
100425ac:	b002      	add	sp, #8
100425ae:	bd80      	pop	{r7, pc}

100425b0 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
100425b0:	b580      	push	{r7, lr}
100425b2:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
100425b4:	2001      	movs	r0, #1
100425b6:	f7ff ff7d 	bl	100424b4 <LL_RADIO_BlueSetClearSemaphoreRequest>
}
100425ba:	46c0      	nop			@ (mov r8, r8)
100425bc:	46bd      	mov	sp, r7
100425be:	bd80      	pop	{r7, pc}

100425c0 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
100425c0:	b580      	push	{r7, lr}
100425c2:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
100425c4:	f7ff fbfa 	bl	10041dbc <LL_RADIO_GlobalDisableBlue>
}
100425c8:	46c0      	nop			@ (mov r8, r8)
100425ca:	46bd      	mov	sp, r7
100425cc:	bd80      	pop	{r7, pc}

100425ce <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
100425ce:	b580      	push	{r7, lr}
100425d0:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
100425d2:	f7ff fbe5 	bl	10041da0 <LL_RADIO_GlobalEnableBlue>
}
100425d6:	46c0      	nop			@ (mov r8, r8)
100425d8:	46bd      	mov	sp, r7
100425da:	bd80      	pop	{r7, pc}

100425dc <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
100425dc:	b580      	push	{r7, lr}
100425de:	b082      	sub	sp, #8
100425e0:	af00      	add	r7, sp, #0
100425e2:	0002      	movs	r2, r0
100425e4:	1dfb      	adds	r3, r7, #7
100425e6:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
100425e8:	1dfb      	adds	r3, r7, #7
100425ea:	781b      	ldrb	r3, [r3, #0]
100425ec:	0018      	movs	r0, r3
100425ee:	f7ff fbc1 	bl	10041d74 <LL_RADIO_SetCurrentConnectionMachineNumber>
}
100425f2:	46c0      	nop			@ (mov r8, r8)
100425f4:	46bd      	mov	sp, r7
100425f6:	b002      	add	sp, #8
100425f8:	bd80      	pop	{r7, pc}
	...

100425fc <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
100425fc:	b580      	push	{r7, lr}
100425fe:	b082      	sub	sp, #8
10042600:	af00      	add	r7, sp, #0
10042602:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10042604:	687b      	ldr	r3, [r7, #4]
10042606:	4a03      	ldr	r2, [pc, #12]	@ (10042614 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
10042608:	4013      	ands	r3, r2
}
1004260a:	0018      	movs	r0, r3
1004260c:	46bd      	mov	sp, r7
1004260e:	b002      	add	sp, #8
10042610:	bd80      	pop	{r7, pc}
10042612:	46c0      	nop			@ (mov r8, r8)
10042614:	00c9df30 	.word	0x00c9df30

10042618 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
10042618:	b580      	push	{r7, lr}
1004261a:	b082      	sub	sp, #8
1004261c:	af00      	add	r7, sp, #0
1004261e:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
10042620:	687a      	ldr	r2, [r7, #4]
10042622:	2380      	movs	r3, #128	@ 0x80
10042624:	03db      	lsls	r3, r3, #15
10042626:	4013      	ands	r3, r2
}
10042628:	0018      	movs	r0, r3
1004262a:	46bd      	mov	sp, r7
1004262c:	b002      	add	sp, #8
1004262e:	bd80      	pop	{r7, pc}

10042630 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
10042630:	b580      	push	{r7, lr}
10042632:	b082      	sub	sp, #8
10042634:	af00      	add	r7, sp, #0
10042636:	6078      	str	r0, [r7, #4]
    return 0;
10042638:	2300      	movs	r3, #0
}
1004263a:	0018      	movs	r0, r3
1004263c:	46bd      	mov	sp, r7
1004263e:	b002      	add	sp, #8
10042640:	bd80      	pop	{r7, pc}

10042642 <BLEPLAT_CNTR_IntGetIntStatusDone>:
}
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
10042642:	b580      	push	{r7, lr}
10042644:	b082      	sub	sp, #8
10042646:	af00      	add	r7, sp, #0
10042648:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
1004264a:	687a      	ldr	r2, [r7, #4]
1004264c:	2380      	movs	r3, #128	@ 0x80
1004264e:	049b      	lsls	r3, r3, #18
10042650:	4013      	ands	r3, r2
}
10042652:	0018      	movs	r0, r3
10042654:	46bd      	mov	sp, r7
10042656:	b002      	add	sp, #8
10042658:	bd80      	pop	{r7, pc}

1004265a <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
}
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
1004265a:	b580      	push	{r7, lr}
1004265c:	b082      	sub	sp, #8
1004265e:	af00      	add	r7, sp, #0
10042660:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
10042662:	687a      	ldr	r2, [r7, #4]
10042664:	2380      	movs	r3, #128	@ 0x80
10042666:	025b      	lsls	r3, r3, #9
10042668:	4013      	ands	r3, r2
}
1004266a:	0018      	movs	r0, r3
1004266c:	46bd      	mov	sp, r7
1004266e:	b002      	add	sp, #8
10042670:	bd80      	pop	{r7, pc}

10042672 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
10042672:	b580      	push	{r7, lr}
10042674:	b082      	sub	sp, #8
10042676:	af00      	add	r7, sp, #0
10042678:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
1004267a:	687a      	ldr	r2, [r7, #4]
1004267c:	2380      	movs	r3, #128	@ 0x80
1004267e:	039b      	lsls	r3, r3, #14
10042680:	4013      	ands	r3, r2
}
10042682:	0018      	movs	r0, r3
10042684:	46bd      	mov	sp, r7
10042686:	b002      	add	sp, #8
10042688:	bd80      	pop	{r7, pc}

1004268a <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
1004268a:	b580      	push	{r7, lr}
1004268c:	b082      	sub	sp, #8
1004268e:	af00      	add	r7, sp, #0
10042690:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
10042692:	687a      	ldr	r2, [r7, #4]
10042694:	2380      	movs	r3, #128	@ 0x80
10042696:	009b      	lsls	r3, r3, #2
10042698:	4013      	ands	r3, r2
}
1004269a:	0018      	movs	r0, r3
1004269c:	46bd      	mov	sp, r7
1004269e:	b002      	add	sp, #8
100426a0:	bd80      	pop	{r7, pc}

100426a2 <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
100426a2:	b580      	push	{r7, lr}
100426a4:	b082      	sub	sp, #8
100426a6:	af00      	add	r7, sp, #0
100426a8:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
100426aa:	687a      	ldr	r2, [r7, #4]
100426ac:	2380      	movs	r3, #128	@ 0x80
100426ae:	011b      	lsls	r3, r3, #4
100426b0:	4013      	ands	r3, r2
}
100426b2:	0018      	movs	r0, r3
100426b4:	46bd      	mov	sp, r7
100426b6:	b002      	add	sp, #8
100426b8:	bd80      	pop	{r7, pc}

100426ba <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
100426ba:	b580      	push	{r7, lr}
100426bc:	b082      	sub	sp, #8
100426be:	af00      	add	r7, sp, #0
100426c0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
100426c2:	687b      	ldr	r3, [r7, #4]
100426c4:	0fdb      	lsrs	r3, r3, #31
100426c6:	07db      	lsls	r3, r3, #31
}
100426c8:	0018      	movs	r0, r3
100426ca:	46bd      	mov	sp, r7
100426cc:	b002      	add	sp, #8
100426ce:	bd80      	pop	{r7, pc}

100426d0 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
100426d0:	b580      	push	{r7, lr}
100426d2:	b082      	sub	sp, #8
100426d4:	af00      	add	r7, sp, #0
100426d6:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
100426d8:	687b      	ldr	r3, [r7, #4]
100426da:	2240      	movs	r2, #64	@ 0x40
100426dc:	4013      	ands	r3, r2
}
100426de:	0018      	movs	r0, r3
100426e0:	46bd      	mov	sp, r7
100426e2:	b002      	add	sp, #8
100426e4:	bd80      	pop	{r7, pc}

100426e6 <BLEPLAT_CNTR_PacketClrIncChan>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100426e6:	b580      	push	{r7, lr}
100426e8:	b082      	sub	sp, #8
100426ea:	af00      	add	r7, sp, #0
100426ec:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
100426ee:	687b      	ldr	r3, [r7, #4]
100426f0:	0018      	movs	r0, r3
100426f2:	f7ff fdef 	bl	100422d4 <LL_RADIO_IncrementerChannel_Disable>
}
100426f6:	46c0      	nop			@ (mov r8, r8)
100426f8:	46bd      	mov	sp, r7
100426fa:	b002      	add	sp, #8
100426fc:	bd80      	pop	{r7, pc}

100426fe <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100426fe:	b580      	push	{r7, lr}
10042700:	b082      	sub	sp, #8
10042702:	af00      	add	r7, sp, #0
10042704:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10042706:	687b      	ldr	r3, [r7, #4]
10042708:	2100      	movs	r1, #0
1004270a:	0018      	movs	r0, r3
1004270c:	f7ff fda4 	bl	10042258 <LL_RADIO_SetCalibrationRequest>
}
10042710:	46c0      	nop			@ (mov r8, r8)
10042712:	46bd      	mov	sp, r7
10042714:	b002      	add	sp, #8
10042716:	bd80      	pop	{r7, pc}

10042718 <BLEPLAT_CNTR_PacketInitTo0>:
{
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
}

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042718:	b580      	push	{r7, lr}
1004271a:	b082      	sub	sp, #8
1004271c:	af00      	add	r7, sp, #0
1004271e:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10042720:	687b      	ldr	r3, [r7, #4]
10042722:	2210      	movs	r2, #16
10042724:	2100      	movs	r1, #0
10042726:	0018      	movs	r0, r3
10042728:	f00b fc32 	bl	1004df90 <memset>
}
1004272c:	46c0      	nop			@ (mov r8, r8)
1004272e:	46bd      	mov	sp, r7
10042730:	b002      	add	sp, #8
10042732:	bd80      	pop	{r7, pc}

10042734 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042734:	b580      	push	{r7, lr}
10042736:	b082      	sub	sp, #8
10042738:	af00      	add	r7, sp, #0
1004273a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004273c:	687b      	ldr	r3, [r7, #4]
1004273e:	2101      	movs	r1, #1
10042740:	0018      	movs	r0, r3
10042742:	f7ff fdb2 	bl	100422aa <LL_RADIO_SetAdvertise>
}
10042746:	46c0      	nop			@ (mov r8, r8)
10042748:	46bd      	mov	sp, r7
1004274a:	b002      	add	sp, #8
1004274c:	bd80      	pop	{r7, pc}

1004274e <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
1004274e:	b580      	push	{r7, lr}
10042750:	b082      	sub	sp, #8
10042752:	af00      	add	r7, sp, #0
10042754:	6078      	str	r0, [r7, #4]
10042756:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
10042758:	683a      	ldr	r2, [r7, #0]
1004275a:	687b      	ldr	r3, [r7, #4]
1004275c:	0011      	movs	r1, r2
1004275e:	0018      	movs	r0, r3
10042760:	f7ff fe10 	bl	10042384 <LL_RADIO_SetDataPointer>
}
10042764:	46c0      	nop			@ (mov r8, r8)
10042766:	46bd      	mov	sp, r7
10042768:	b002      	add	sp, #8
1004276a:	bd80      	pop	{r7, pc}

1004276c <BLEPLAT_CNTR_PacketSetIntDone>:
{
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
}

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004276c:	b580      	push	{r7, lr}
1004276e:	b082      	sub	sp, #8
10042770:	af00      	add	r7, sp, #0
10042772:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
10042774:	687b      	ldr	r3, [r7, #4]
10042776:	0018      	movs	r0, r3
10042778:	f7ff fe64 	bl	10042444 <LL_RADIO_IntDone_Enable>
}
1004277c:	46c0      	nop			@ (mov r8, r8)
1004277e:	46bd      	mov	sp, r7
10042780:	b002      	add	sp, #8
10042782:	bd80      	pop	{r7, pc}

10042784 <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042784:	b580      	push	{r7, lr}
10042786:	b082      	sub	sp, #8
10042788:	af00      	add	r7, sp, #0
1004278a:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
1004278c:	687b      	ldr	r3, [r7, #4]
1004278e:	0018      	movs	r0, r3
10042790:	f7ff fe67 	bl	10042462 <LL_RADIO_IntRcvOk_Enable>
}
10042794:	46c0      	nop			@ (mov r8, r8)
10042796:	46bd      	mov	sp, r7
10042798:	b002      	add	sp, #8
1004279a:	bd80      	pop	{r7, pc}

1004279c <BLEPLAT_CNTR_PacketSetKeepsemareq>:
{
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
}

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004279c:	b580      	push	{r7, lr}
1004279e:	b082      	sub	sp, #8
100427a0:	af00      	add	r7, sp, #0
100427a2:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100427a4:	687b      	ldr	r3, [r7, #4]
100427a6:	2101      	movs	r1, #1
100427a8:	0018      	movs	r0, r3
100427aa:	f7ff fd69 	bl	10042280 <LL_RADIO_SetKeepSemaRequest>
}
100427ae:	46c0      	nop			@ (mov r8, r8)
100427b0:	46bd      	mov	sp, r7
100427b2:	b002      	add	sp, #8
100427b4:	bd80      	pop	{r7, pc}

100427b6 <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
100427b6:	b580      	push	{r7, lr}
100427b8:	b082      	sub	sp, #8
100427ba:	af00      	add	r7, sp, #0
100427bc:	6078      	str	r0, [r7, #4]
100427be:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
100427c0:	683a      	ldr	r2, [r7, #0]
100427c2:	687b      	ldr	r3, [r7, #4]
100427c4:	0011      	movs	r1, r2
100427c6:	0018      	movs	r0, r3
100427c8:	f7ff fd38 	bl	1004223c <LL_RADIO_SetNextPointer>
}
100427cc:	46c0      	nop			@ (mov r8, r8)
100427ce:	46bd      	mov	sp, r7
100427d0:	b002      	add	sp, #8
100427d2:	bd80      	pop	{r7, pc}

100427d4 <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100427d4:	b580      	push	{r7, lr}
100427d6:	b082      	sub	sp, #8
100427d8:	af00      	add	r7, sp, #0
100427da:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
100427dc:	687b      	ldr	r3, [r7, #4]
100427de:	2100      	movs	r1, #0
100427e0:	0018      	movs	r0, r3
100427e2:	f7ff fd87 	bl	100422f4 <LL_RADIO_SetNextTxMode>
}
100427e6:	46c0      	nop			@ (mov r8, r8)
100427e8:	46bd      	mov	sp, r7
100427ea:	b002      	add	sp, #8
100427ec:	bd80      	pop	{r7, pc}

100427ee <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
100427ee:	b580      	push	{r7, lr}
100427f0:	b082      	sub	sp, #8
100427f2:	af00      	add	r7, sp, #0
100427f4:	6078      	str	r0, [r7, #4]
100427f6:	000a      	movs	r2, r1
100427f8:	1cfb      	adds	r3, r7, #3
100427fa:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
100427fc:	46c0      	nop			@ (mov r8, r8)
100427fe:	46bd      	mov	sp, r7
10042800:	b002      	add	sp, #8
10042802:	bd80      	pop	{r7, pc}

10042804 <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042804:	b580      	push	{r7, lr}
10042806:	b082      	sub	sp, #8
10042808:	af00      	add	r7, sp, #0
1004280a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004280c:	687b      	ldr	r3, [r7, #4]
1004280e:	2101      	movs	r1, #1
10042810:	0018      	movs	r0, r3
10042812:	f7ff fd6f 	bl	100422f4 <LL_RADIO_SetNextTxMode>
}
10042816:	46c0      	nop			@ (mov r8, r8)
10042818:	46bd      	mov	sp, r7
1004281a:	b002      	add	sp, #8
1004281c:	bd80      	pop	{r7, pc}

1004281e <BLEPLAT_CNTR_PacketSetPllTrig>:
{
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
}

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004281e:	b580      	push	{r7, lr}
10042820:	b082      	sub	sp, #8
10042822:	af00      	add	r7, sp, #0
10042824:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042826:	687b      	ldr	r3, [r7, #4]
10042828:	2101      	movs	r1, #1
1004282a:	0018      	movs	r0, r3
1004282c:	f7ff fd14 	bl	10042258 <LL_RADIO_SetCalibrationRequest>
}
10042830:	46c0      	nop			@ (mov r8, r8)
10042832:	46bd      	mov	sp, r7
10042834:	b002      	add	sp, #8
10042836:	bd80      	pop	{r7, pc}

10042838 <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042838:	b580      	push	{r7, lr}
1004283a:	b082      	sub	sp, #8
1004283c:	af00      	add	r7, sp, #0
1004283e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042840:	687b      	ldr	r3, [r7, #4]
10042842:	2101      	movs	r1, #1
10042844:	0018      	movs	r0, r3
10042846:	f7ff fd6d 	bl	10042324 <LL_RADIO_SetAllTableDataReady>
}
1004284a:	46c0      	nop			@ (mov r8, r8)
1004284c:	46bd      	mov	sp, r7
1004284e:	b002      	add	sp, #8
10042850:	bd80      	pop	{r7, pc}

10042852 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
10042852:	b580      	push	{r7, lr}
10042854:	b082      	sub	sp, #8
10042856:	af00      	add	r7, sp, #0
10042858:	6078      	str	r0, [r7, #4]
1004285a:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
1004285c:	683a      	ldr	r2, [r7, #0]
1004285e:	687b      	ldr	r3, [r7, #4]
10042860:	0011      	movs	r1, r2
10042862:	0018      	movs	r0, r3
10042864:	f7ff fd9c 	bl	100423a0 <LL_RADIO_SetTimer2Triggering>
}
10042868:	46c0      	nop			@ (mov r8, r8)
1004286a:	46bd      	mov	sp, r7
1004286c:	b002      	add	sp, #8
1004286e:	bd80      	pop	{r7, pc}

10042870 <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042870:	b580      	push	{r7, lr}
10042872:	b082      	sub	sp, #8
10042874:	af00      	add	r7, sp, #0
10042876:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
10042878:	687b      	ldr	r3, [r7, #4]
1004287a:	0018      	movs	r0, r3
1004287c:	f7ff fda3 	bl	100423c6 <LL_RADIO_Timer2_Enable>
}
10042880:	46c0      	nop			@ (mov r8, r8)
10042882:	46bd      	mov	sp, r7
10042884:	b002      	add	sp, #8
10042886:	bd80      	pop	{r7, pc}

10042888 <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042888:	b580      	push	{r7, lr}
1004288a:	b082      	sub	sp, #8
1004288c:	af00      	add	r7, sp, #0
1004288e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042890:	687b      	ldr	r3, [r7, #4]
10042892:	2101      	movs	r1, #1
10042894:	0018      	movs	r0, r3
10042896:	f7ff fdbd 	bl	10042414 <LL_RADIO_SetTrigDone>
}
1004289a:	46c0      	nop			@ (mov r8, r8)
1004289c:	46bd      	mov	sp, r7
1004289e:	b002      	add	sp, #8
100428a0:	bd80      	pop	{r7, pc}

100428a2 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100428a2:	b580      	push	{r7, lr}
100428a4:	b082      	sub	sp, #8
100428a6:	af00      	add	r7, sp, #0
100428a8:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100428aa:	687b      	ldr	r3, [r7, #4]
100428ac:	2101      	movs	r1, #1
100428ae:	0018      	movs	r0, r3
100428b0:	f7ff fd98 	bl	100423e4 <LL_RADIO_SetTrigRcv>
}
100428b4:	46c0      	nop			@ (mov r8, r8)
100428b6:	46bd      	mov	sp, r7
100428b8:	b002      	add	sp, #8
100428ba:	bd80      	pop	{r7, pc}

100428bc <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100428bc:	b580      	push	{r7, lr}
100428be:	b082      	sub	sp, #8
100428c0:	af00      	add	r7, sp, #0
100428c2:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100428c4:	687b      	ldr	r3, [r7, #4]
100428c6:	2101      	movs	r1, #1
100428c8:	0018      	movs	r0, r3
100428ca:	f7ff fd43 	bl	10042354 <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100428ce:	687b      	ldr	r3, [r7, #4]
100428d0:	2101      	movs	r1, #1
100428d2:	0018      	movs	r0, r3
100428d4:	f7ff fd26 	bl	10042324 <LL_RADIO_SetAllTableDataReady>
}
100428d8:	46c0      	nop			@ (mov r8, r8)
100428da:	46bd      	mov	sp, r7
100428dc:	b002      	add	sp, #8
100428de:	bd80      	pop	{r7, pc}

100428e0 <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
100428e0:	b580      	push	{r7, lr}
100428e2:	b082      	sub	sp, #8
100428e4:	af00      	add	r7, sp, #0
100428e6:	6078      	str	r0, [r7, #4]
100428e8:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
100428ea:	683b      	ldr	r3, [r7, #0]
100428ec:	031b      	lsls	r3, r3, #12
100428ee:	0b1b      	lsrs	r3, r3, #12
100428f0:	0018      	movs	r0, r3
100428f2:	f7ff fa71 	bl	10041dd8 <LL_RADIO_SetReceiveWindowTimeout>
}
100428f6:	46c0      	nop			@ (mov r8, r8)
100428f8:	46bd      	mov	sp, r7
100428fa:	b002      	add	sp, #8
100428fc:	bd80      	pop	{r7, pc}

100428fe <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
100428fe:	b580      	push	{r7, lr}
10042900:	b082      	sub	sp, #8
10042902:	af00      	add	r7, sp, #0
10042904:	0002      	movs	r2, r0
10042906:	6039      	str	r1, [r7, #0]
10042908:	1dfb      	adds	r3, r7, #7
1004290a:	701a      	strb	r2, [r3, #0]
    if(enable)
1004290c:	683b      	ldr	r3, [r7, #0]
1004290e:	2b00      	cmp	r3, #0
10042910:	d005      	beq.n	1004291e <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
10042912:	1dfb      	adds	r3, r7, #7
10042914:	781b      	ldrb	r3, [r3, #0]
10042916:	0018      	movs	r0, r3
10042918:	f7ff fa78 	bl	10041e0c <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
1004291c:	e004      	b.n	10042928 <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
1004291e:	1dfb      	adds	r3, r7, #7
10042920:	781b      	ldrb	r3, [r3, #0]
10042922:	0018      	movs	r0, r3
10042924:	f7ff fa90 	bl	10041e48 <LL_RADIO_RadioCommandList_Disable>
}
10042928:	46c0      	nop			@ (mov r8, r8)
1004292a:	46bd      	mov	sp, r7
1004292c:	b002      	add	sp, #8
1004292e:	bd80      	pop	{r7, pc}

10042930 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
10042930:	b580      	push	{r7, lr}
10042932:	b082      	sub	sp, #8
10042934:	af00      	add	r7, sp, #0
10042936:	0002      	movs	r2, r0
10042938:	1dfb      	adds	r3, r7, #7
1004293a:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
1004293c:	1dfb      	adds	r3, r7, #7
1004293e:	781b      	ldrb	r3, [r3, #0]
10042940:	225c      	movs	r2, #92	@ 0x5c
10042942:	4353      	muls	r3, r2
10042944:	4a08      	ldr	r2, [pc, #32]	@ (10042968 <BLEPLAT_CNTR_SmInitTo0+0x38>)
10042946:	4694      	mov	ip, r2
10042948:	4463      	add	r3, ip
1004294a:	225c      	movs	r2, #92	@ 0x5c
1004294c:	2100      	movs	r1, #0
1004294e:	0018      	movs	r0, r3
10042950:	f00b fb1e 	bl	1004df90 <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
10042954:	1dfb      	adds	r3, r7, #7
10042956:	781b      	ldrb	r3, [r3, #0]
10042958:	2101      	movs	r1, #1
1004295a:	0018      	movs	r0, r3
1004295c:	f7ff ffcf 	bl	100428fe <BLEPLAT_CNTR_SmEnRadioConfig>
}
10042960:	46c0      	nop			@ (mov r8, r8)
10042962:	46bd      	mov	sp, r7
10042964:	b002      	add	sp, #8
10042966:	bd80      	pop	{r7, pc}
10042968:	200000dc 	.word	0x200000dc

1004296c <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
1004296c:	b580      	push	{r7, lr}
1004296e:	b082      	sub	sp, #8
10042970:	af00      	add	r7, sp, #0
10042972:	0002      	movs	r2, r0
10042974:	6039      	str	r1, [r7, #0]
10042976:	1dfb      	adds	r3, r7, #7
10042978:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
1004297a:	683a      	ldr	r2, [r7, #0]
1004297c:	1dfb      	adds	r3, r7, #7
1004297e:	781b      	ldrb	r3, [r3, #0]
10042980:	0011      	movs	r1, r2
10042982:	0018      	movs	r0, r3
10042984:	f7ff fb6e 	bl	10042064 <LL_RADIO_SetAccessAddress>
}
10042988:	46c0      	nop			@ (mov r8, r8)
1004298a:	46bd      	mov	sp, r7
1004298c:	b002      	add	sp, #8
1004298e:	bd80      	pop	{r7, pc}

10042990 <BLEPLAT_CNTR_SmSetCrcInit>:
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
}

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
10042990:	b580      	push	{r7, lr}
10042992:	b082      	sub	sp, #8
10042994:	af00      	add	r7, sp, #0
10042996:	0002      	movs	r2, r0
10042998:	6039      	str	r1, [r7, #0]
1004299a:	1dfb      	adds	r3, r7, #7
1004299c:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
1004299e:	683a      	ldr	r2, [r7, #0]
100429a0:	1dfb      	adds	r3, r7, #7
100429a2:	781b      	ldrb	r3, [r3, #0]
100429a4:	0011      	movs	r1, r2
100429a6:	0018      	movs	r0, r3
100429a8:	f7ff fb7a 	bl	100420a0 <LL_RADIO_SetCRCInitializationValue>
}
100429ac:	46c0      	nop			@ (mov r8, r8)
100429ae:	46bd      	mov	sp, r7
100429b0:	b002      	add	sp, #8
100429b2:	bd80      	pop	{r7, pc}

100429b4 <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
100429b4:	b580      	push	{r7, lr}
100429b6:	b082      	sub	sp, #8
100429b8:	af00      	add	r7, sp, #0
100429ba:	0002      	movs	r2, r0
100429bc:	1dfb      	adds	r3, r7, #7
100429be:	701a      	strb	r2, [r3, #0]
100429c0:	1dbb      	adds	r3, r7, #6
100429c2:	1c0a      	adds	r2, r1, #0
100429c4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
100429c6:	1dbb      	adds	r3, r7, #6
100429c8:	781a      	ldrb	r2, [r3, #0]
100429ca:	1dfb      	adds	r3, r7, #7
100429cc:	781b      	ldrb	r3, [r3, #0]
100429ce:	0011      	movs	r1, r2
100429d0:	0018      	movs	r0, r3
100429d2:	f7ff fb89 	bl	100420e8 <LL_RADIO_SetMaximumReceiveLength>
}
100429d6:	46c0      	nop			@ (mov r8, r8)
100429d8:	46bd      	mov	sp, r7
100429da:	b002      	add	sp, #8
100429dc:	bd80      	pop	{r7, pc}

100429de <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
100429de:	b580      	push	{r7, lr}
100429e0:	b082      	sub	sp, #8
100429e2:	af00      	add	r7, sp, #0
100429e4:	0002      	movs	r2, r0
100429e6:	1dfb      	adds	r3, r7, #7
100429e8:	701a      	strb	r2, [r3, #0]
100429ea:	1dbb      	adds	r3, r7, #6
100429ec:	1c0a      	adds	r2, r1, #0
100429ee:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
100429f0:	1dbb      	adds	r3, r7, #6
100429f2:	781a      	ldrb	r2, [r3, #0]
100429f4:	1dfb      	adds	r3, r7, #7
100429f6:	781b      	ldrb	r3, [r3, #0]
100429f8:	0011      	movs	r1, r2
100429fa:	0018      	movs	r0, r3
100429fc:	f7ff fbf6 	bl	100421ec <LL_RADIO_SetHopIncrement>
}
10042a00:	46c0      	nop			@ (mov r8, r8)
10042a02:	46bd      	mov	sp, r7
10042a04:	b002      	add	sp, #8
10042a06:	bd80      	pop	{r7, pc}

10042a08 <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
10042a08:	b580      	push	{r7, lr}
10042a0a:	b082      	sub	sp, #8
10042a0c:	af00      	add	r7, sp, #0
10042a0e:	0002      	movs	r2, r0
10042a10:	1dfb      	adds	r3, r7, #7
10042a12:	701a      	strb	r2, [r3, #0]
10042a14:	1dbb      	adds	r3, r7, #6
10042a16:	1c0a      	adds	r2, r1, #0
10042a18:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
10042a1a:	1dbb      	adds	r3, r7, #6
10042a1c:	781a      	ldrb	r2, [r3, #0]
10042a1e:	1dfb      	adds	r3, r7, #7
10042a20:	781b      	ldrb	r3, [r3, #0]
10042a22:	0011      	movs	r1, r2
10042a24:	0018      	movs	r0, r3
10042a26:	f7ff fa69 	bl	10041efc <LL_RADIO_SetRemapChannel>
}
10042a2a:	46c0      	nop			@ (mov r8, r8)
10042a2c:	46bd      	mov	sp, r7
10042a2e:	b002      	add	sp, #8
10042a30:	bd80      	pop	{r7, pc}

10042a32 <BLEPLAT_CNTR_SmSetRxMode>:
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
}

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10042a32:	b580      	push	{r7, lr}
10042a34:	b082      	sub	sp, #8
10042a36:	af00      	add	r7, sp, #0
10042a38:	0002      	movs	r2, r0
10042a3a:	1dfb      	adds	r3, r7, #7
10042a3c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
10042a3e:	1dfb      	adds	r3, r7, #7
10042a40:	781b      	ldrb	r3, [r3, #0]
10042a42:	0018      	movs	r0, r3
10042a44:	f7ff fa3c 	bl	10041ec0 <LL_RADIO_TxMode_Disable>
}
10042a48:	46c0      	nop			@ (mov r8, r8)
10042a4a:	46bd      	mov	sp, r7
10042a4c:	b002      	add	sp, #8
10042a4e:	bd80      	pop	{r7, pc}

10042a50 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042a50:	b580      	push	{r7, lr}
10042a52:	b082      	sub	sp, #8
10042a54:	af00      	add	r7, sp, #0
10042a56:	0002      	movs	r2, r0
10042a58:	6039      	str	r1, [r7, #0]
10042a5a:	1dfb      	adds	r3, r7, #7
10042a5c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10042a5e:	683a      	ldr	r2, [r7, #0]
10042a60:	1dfb      	adds	r3, r7, #7
10042a62:	781b      	ldrb	r3, [r3, #0]
10042a64:	0011      	movs	r1, r2
10042a66:	0018      	movs	r0, r3
10042a68:	f7ff fade 	bl	10042028 <LL_RADIO_SetRcvPoint>
}
10042a6c:	46c0      	nop			@ (mov r8, r8)
10042a6e:	46bd      	mov	sp, r7
10042a70:	b002      	add	sp, #8
10042a72:	bd80      	pop	{r7, pc}

10042a74 <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
10042a74:	b580      	push	{r7, lr}
10042a76:	b082      	sub	sp, #8
10042a78:	af00      	add	r7, sp, #0
10042a7a:	0002      	movs	r2, r0
10042a7c:	1dfb      	adds	r3, r7, #7
10042a7e:	701a      	strb	r2, [r3, #0]
10042a80:	1dbb      	adds	r3, r7, #6
10042a82:	1c0a      	adds	r2, r1, #0
10042a84:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
10042a86:	1dbb      	adds	r3, r7, #6
10042a88:	781a      	ldrb	r2, [r3, #0]
10042a8a:	1dfb      	adds	r3, r7, #7
10042a8c:	781b      	ldrb	r3, [r3, #0]
10042a8e:	0011      	movs	r1, r2
10042a90:	0018      	movs	r0, r3
10042a92:	f7ff fa83 	bl	10041f9c <LL_RADIO_SetReceptionPhy>
}
10042a96:	46c0      	nop			@ (mov r8, r8)
10042a98:	46bd      	mov	sp, r7
10042a9a:	b002      	add	sp, #8
10042a9c:	bd80      	pop	{r7, pc}

10042a9e <BLEPLAT_CNTR_SmSetTxMode>:
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
}

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
10042a9e:	b580      	push	{r7, lr}
10042aa0:	b082      	sub	sp, #8
10042aa2:	af00      	add	r7, sp, #0
10042aa4:	0002      	movs	r2, r0
10042aa6:	1dfb      	adds	r3, r7, #7
10042aa8:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
10042aaa:	1dfb      	adds	r3, r7, #7
10042aac:	781b      	ldrb	r3, [r3, #0]
10042aae:	0018      	movs	r0, r3
10042ab0:	f7ff f9e8 	bl	10041e84 <LL_RADIO_TxMode_Enable>
}
10042ab4:	46c0      	nop			@ (mov r8, r8)
10042ab6:	46bd      	mov	sp, r7
10042ab8:	b002      	add	sp, #8
10042aba:	bd80      	pop	{r7, pc}

10042abc <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042abc:	b580      	push	{r7, lr}
10042abe:	b082      	sub	sp, #8
10042ac0:	af00      	add	r7, sp, #0
10042ac2:	0002      	movs	r2, r0
10042ac4:	6039      	str	r1, [r7, #0]
10042ac6:	1dfb      	adds	r3, r7, #7
10042ac8:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10042aca:	683a      	ldr	r2, [r7, #0]
10042acc:	1dfb      	adds	r3, r7, #7
10042ace:	781b      	ldrb	r3, [r3, #0]
10042ad0:	0011      	movs	r1, r2
10042ad2:	0018      	movs	r0, r3
10042ad4:	f7ff fa8a 	bl	10041fec <LL_RADIO_SetTxPoint>
}
10042ad8:	46c0      	nop			@ (mov r8, r8)
10042ada:	46bd      	mov	sp, r7
10042adc:	b002      	add	sp, #8
10042ade:	bd80      	pop	{r7, pc}

10042ae0 <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10042ae0:	b580      	push	{r7, lr}
10042ae2:	b082      	sub	sp, #8
10042ae4:	af00      	add	r7, sp, #0
10042ae6:	0002      	movs	r2, r0
10042ae8:	1dfb      	adds	r3, r7, #7
10042aea:	701a      	strb	r2, [r3, #0]
10042aec:	1dbb      	adds	r3, r7, #6
10042aee:	1c0a      	adds	r2, r1, #0
10042af0:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10042af2:	1dbb      	adds	r3, r7, #6
10042af4:	781a      	ldrb	r2, [r3, #0]
10042af6:	1dfb      	adds	r3, r7, #7
10042af8:	781b      	ldrb	r3, [r3, #0]
10042afa:	0011      	movs	r1, r2
10042afc:	0018      	movs	r0, r3
10042afe:	f7ff fa25 	bl	10041f4c <LL_RADIO_SetTransmissionPhy>
}
10042b02:	46c0      	nop			@ (mov r8, r8)
10042b04:	46bd      	mov	sp, r7
10042b06:	b002      	add	sp, #8
10042b08:	bd80      	pop	{r7, pc}

10042b0a <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
10042b0a:	b580      	push	{r7, lr}
10042b0c:	b082      	sub	sp, #8
10042b0e:	af00      	add	r7, sp, #0
10042b10:	0002      	movs	r2, r0
10042b12:	1dfb      	adds	r3, r7, #7
10042b14:	701a      	strb	r2, [r3, #0]
10042b16:	1dbb      	adds	r3, r7, #6
10042b18:	1c0a      	adds	r2, r1, #0
10042b1a:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  if(paLevel == HP_PA_LEVEL)
10042b1c:	1dbb      	adds	r3, r7, #6
10042b1e:	781b      	ldrb	r3, [r3, #0]
10042b20:	2b20      	cmp	r3, #32
10042b22:	d108      	bne.n	10042b36 <BLEPLAT_CNTR_SmSetTxPwr+0x2c>
  {
    LL_RADIO_TxHp_Enable(smNo);
10042b24:	1dfb      	adds	r3, r7, #7
10042b26:	781b      	ldrb	r3, [r3, #0]
10042b28:	0018      	movs	r0, r3
10042b2a:	f7ff faff 	bl	1004212c <LL_RADIO_TxHp_Enable>
    paLevel = MAX_PA_LEVEL;
10042b2e:	1dbb      	adds	r3, r7, #6
10042b30:	221f      	movs	r2, #31
10042b32:	701a      	strb	r2, [r3, #0]
10042b34:	e004      	b.n	10042b40 <BLEPLAT_CNTR_SmSetTxPwr+0x36>
  }
  else
  {
    LL_RADIO_TxHp_Disable(smNo);
10042b36:	1dfb      	adds	r3, r7, #7
10042b38:	781b      	ldrb	r3, [r3, #0]
10042b3a:	0018      	movs	r0, r3
10042b3c:	f7ff fb14 	bl	10042168 <LL_RADIO_TxHp_Disable>
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
10042b40:	1dbb      	adds	r3, r7, #6
10042b42:	781a      	ldrb	r2, [r3, #0]
10042b44:	1dfb      	adds	r3, r7, #7
10042b46:	781b      	ldrb	r3, [r3, #0]
10042b48:	0011      	movs	r1, r2
10042b4a:	0018      	movs	r0, r3
10042b4c:	f7ff fb2a 	bl	100421a4 <LL_RADIO_SetPAPower>
}
10042b50:	46c0      	nop			@ (mov r8, r8)
10042b52:	46bd      	mov	sp, r7
10042b54:	b002      	add	sp, #8
10042b56:	bd80      	pop	{r7, pc}

10042b58 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10042b58:	4810      	ldr	r0, [pc, #64]	@ (10042b9c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10042b5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10042b5c:	f002 f882 	bl	10044c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10042b60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10042b62:	e003      	b.n	10042b6c <LoopCopyDataInit>

10042b64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10042b64:	4b0e      	ldr	r3, [pc, #56]	@ (10042ba0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10042b66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10042b68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10042b6a:	3104      	adds	r1, #4

10042b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10042b6c:	480d      	ldr	r0, [pc, #52]	@ (10042ba4 <LoopForever+0xa>)
  ldr  r3, =_edata
10042b6e:	4b0e      	ldr	r3, [pc, #56]	@ (10042ba8 <LoopForever+0xe>)
  adds  r2, r0, r1
10042b70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10042b72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10042b74:	d3f6      	bcc.n	10042b64 <CopyDataInit>
  ldr  r2, =_sbss
10042b76:	4a0d      	ldr	r2, [pc, #52]	@ (10042bac <LoopForever+0x12>)
  b  LoopFillZerobss
10042b78:	e002      	b.n	10042b80 <LoopFillZerobss>

10042b7a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10042b7a:	2300      	movs	r3, #0
  str  r3, [r2]
10042b7c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10042b7e:	3204      	adds	r2, #4

10042b80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10042b80:	4b0b      	ldr	r3, [pc, #44]	@ (10042bb0 <LoopForever+0x16>)
  cmp  r2, r3
10042b82:	429a      	cmp	r2, r3
  bcc  FillZerobss
10042b84:	d3f9      	bcc.n	10042b7a <FillZerobss>
  ldr  r2, =_sbssblue
10042b86:	4a0b      	ldr	r2, [pc, #44]	@ (10042bb4 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10042b88:	e002      	b.n	10042b90 <LoopFillZeroBlueRam>

10042b8a <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10042b8a:	2300      	movs	r3, #0
  str  r3, [r2]
10042b8c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10042b8e:	3204      	adds	r2, #4

10042b90 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10042b90:	4b09      	ldr	r3, [pc, #36]	@ (10042bb8 <LoopForever+0x1e>)
  cmp  r2, r3
10042b92:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10042b94:	d3f9      	bcc.n	10042b8a <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10042b96:	f7fd fff5 	bl	10040b84 <main>

10042b9a <LoopForever>:

LoopForever:
    b LoopForever
10042b9a:	e7fe      	b.n	10042b9a <LoopForever>
   ldr   r0, =_estack
10042b9c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
10042ba0:	1004f008 	.word	0x1004f008
  ldr  r0, =_sdata
10042ba4:	2000085c 	.word	0x2000085c
  ldr  r3, =_edata
10042ba8:	2000090c 	.word	0x2000090c
  ldr  r2, =_sbss
10042bac:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10042bb0:	2000085c 	.word	0x2000085c
  ldr  r2, =_sbssblue
10042bb4:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10042bb8:	20000194 	.word	0x20000194

10042bbc <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10042bbc:	e7fe      	b.n	10042bbc <ADC_IRQHandler>

10042bbe <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
10042bbe:	b580      	push	{r7, lr}
10042bc0:	b082      	sub	sp, #8
10042bc2:	af00      	add	r7, sp, #0
10042bc4:	0002      	movs	r2, r0
10042bc6:	1dfb      	adds	r3, r7, #7
10042bc8:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10042bca:	46c0      	nop			@ (mov r8, r8)
10042bcc:	46bd      	mov	sp, r7
10042bce:	b002      	add	sp, #8
10042bd0:	bd80      	pop	{r7, pc}

10042bd2 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10042bd2:	b580      	push	{r7, lr}
10042bd4:	b082      	sub	sp, #8
10042bd6:	af00      	add	r7, sp, #0
10042bd8:	0002      	movs	r2, r0
10042bda:	1dfb      	adds	r3, r7, #7
10042bdc:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10042bde:	46c0      	nop			@ (mov r8, r8)
10042be0:	46bd      	mov	sp, r7
10042be2:	b002      	add	sp, #8
10042be4:	bd80      	pop	{r7, pc}

10042be6 <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10042be6:	b580      	push	{r7, lr}
10042be8:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10042bea:	46c0      	nop			@ (mov r8, r8)
10042bec:	46bd      	mov	sp, r7
10042bee:	bd80      	pop	{r7, pc}

10042bf0 <LL_APB2_GRP1_EnableClock>:
{
10042bf0:	b580      	push	{r7, lr}
10042bf2:	b084      	sub	sp, #16
10042bf4:	af00      	add	r7, sp, #0
10042bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10042bf8:	4b07      	ldr	r3, [pc, #28]	@ (10042c18 <LL_APB2_GRP1_EnableClock+0x28>)
10042bfa:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10042bfc:	4b06      	ldr	r3, [pc, #24]	@ (10042c18 <LL_APB2_GRP1_EnableClock+0x28>)
10042bfe:	687a      	ldr	r2, [r7, #4]
10042c00:	430a      	orrs	r2, r1
10042c02:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10042c04:	4b04      	ldr	r3, [pc, #16]	@ (10042c18 <LL_APB2_GRP1_EnableClock+0x28>)
10042c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042c08:	687a      	ldr	r2, [r7, #4]
10042c0a:	4013      	ands	r3, r2
10042c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042c0e:	68fb      	ldr	r3, [r7, #12]
}
10042c10:	46c0      	nop			@ (mov r8, r8)
10042c12:	46bd      	mov	sp, r7
10042c14:	b004      	add	sp, #16
10042c16:	bd80      	pop	{r7, pc}
10042c18:	48400000 	.word	0x48400000

10042c1c <LL_APB2_GRP1_IsEnabledClock>:
{
10042c1c:	b580      	push	{r7, lr}
10042c1e:	b082      	sub	sp, #8
10042c20:	af00      	add	r7, sp, #0
10042c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10042c24:	4b06      	ldr	r3, [pc, #24]	@ (10042c40 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10042c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042c28:	687a      	ldr	r2, [r7, #4]
10042c2a:	4013      	ands	r3, r2
10042c2c:	687a      	ldr	r2, [r7, #4]
10042c2e:	429a      	cmp	r2, r3
10042c30:	d101      	bne.n	10042c36 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10042c32:	2301      	movs	r3, #1
10042c34:	e000      	b.n	10042c38 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10042c36:	2300      	movs	r3, #0
}
10042c38:	0018      	movs	r0, r3
10042c3a:	46bd      	mov	sp, r7
10042c3c:	b002      	add	sp, #8
10042c3e:	bd80      	pop	{r7, pc}
10042c40:	48400000 	.word	0x48400000

10042c44 <LL_APB2_GRP1_ForceReset>:
{
10042c44:	b580      	push	{r7, lr}
10042c46:	b082      	sub	sp, #8
10042c48:	af00      	add	r7, sp, #0
10042c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10042c4c:	4b04      	ldr	r3, [pc, #16]	@ (10042c60 <LL_APB2_GRP1_ForceReset+0x1c>)
10042c4e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042c50:	4b03      	ldr	r3, [pc, #12]	@ (10042c60 <LL_APB2_GRP1_ForceReset+0x1c>)
10042c52:	687a      	ldr	r2, [r7, #4]
10042c54:	430a      	orrs	r2, r1
10042c56:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042c58:	46c0      	nop			@ (mov r8, r8)
10042c5a:	46bd      	mov	sp, r7
10042c5c:	b002      	add	sp, #8
10042c5e:	bd80      	pop	{r7, pc}
10042c60:	48400000 	.word	0x48400000

10042c64 <LL_APB2_GRP1_ReleaseReset>:
{
10042c64:	b580      	push	{r7, lr}
10042c66:	b082      	sub	sp, #8
10042c68:	af00      	add	r7, sp, #0
10042c6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10042c6c:	4b05      	ldr	r3, [pc, #20]	@ (10042c84 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042c70:	687b      	ldr	r3, [r7, #4]
10042c72:	43d9      	mvns	r1, r3
10042c74:	4b03      	ldr	r3, [pc, #12]	@ (10042c84 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042c76:	400a      	ands	r2, r1
10042c78:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042c7a:	46c0      	nop			@ (mov r8, r8)
10042c7c:	46bd      	mov	sp, r7
10042c7e:	b002      	add	sp, #8
10042c80:	bd80      	pop	{r7, pc}
10042c82:	46c0      	nop			@ (mov r8, r8)
10042c84:	48400000 	.word	0x48400000

10042c88 <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
10042c88:	b580      	push	{r7, lr}
10042c8a:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10042c8c:	2001      	movs	r0, #1
10042c8e:	f7ff ffc5 	bl	10042c1c <LL_APB2_GRP1_IsEnabledClock>
10042c92:	1e03      	subs	r3, r0, #0
10042c94:	d108      	bne.n	10042ca8 <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
10042c96:	2001      	movs	r0, #1
10042c98:	f7ff ffd4 	bl	10042c44 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
10042c9c:	2001      	movs	r0, #1
10042c9e:	f7ff ffe1 	bl	10042c64 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
10042ca2:	2001      	movs	r0, #1
10042ca4:	f7ff ffa4 	bl	10042bf0 <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
10042ca8:	2300      	movs	r3, #0
}
10042caa:	0018      	movs	r0, r3
10042cac:	46bd      	mov	sp, r7
10042cae:	bd80      	pop	{r7, pc}

10042cb0 <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
10042cb0:	b590      	push	{r4, r7, lr}
10042cb2:	b087      	sub	sp, #28
10042cb4:	af00      	add	r7, sp, #0
10042cb6:	60f8      	str	r0, [r7, #12]
10042cb8:	60b9      	str	r1, [r7, #8]
10042cba:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
10042cbc:	4b31      	ldr	r3, [pc, #196]	@ (10042d84 <HW_AES_Encrypt+0xd4>)
10042cbe:	781b      	ldrb	r3, [r3, #0]
10042cc0:	b2db      	uxtb	r3, r3
10042cc2:	3301      	adds	r3, #1
10042cc4:	b2da      	uxtb	r2, r3
10042cc6:	4b2f      	ldr	r3, [pc, #188]	@ (10042d84 <HW_AES_Encrypt+0xd4>)
10042cc8:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
10042cca:	2417      	movs	r4, #23
10042ccc:	193b      	adds	r3, r7, r4
10042cce:	4a2d      	ldr	r2, [pc, #180]	@ (10042d84 <HW_AES_Encrypt+0xd4>)
10042cd0:	7812      	ldrb	r2, [r2, #0]
10042cd2:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
10042cd4:	23c0      	movs	r3, #192	@ 0xc0
10042cd6:	05db      	lsls	r3, r3, #23
10042cd8:	68ba      	ldr	r2, [r7, #8]
10042cda:	6812      	ldr	r2, [r2, #0]
10042cdc:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
10042cde:	68bb      	ldr	r3, [r7, #8]
10042ce0:	1d1a      	adds	r2, r3, #4
10042ce2:	23c0      	movs	r3, #192	@ 0xc0
10042ce4:	05db      	lsls	r3, r3, #23
10042ce6:	6812      	ldr	r2, [r2, #0]
10042ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
10042cea:	68bb      	ldr	r3, [r7, #8]
10042cec:	3308      	adds	r3, #8
10042cee:	001a      	movs	r2, r3
10042cf0:	23c0      	movs	r3, #192	@ 0xc0
10042cf2:	05db      	lsls	r3, r3, #23
10042cf4:	6812      	ldr	r2, [r2, #0]
10042cf6:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
10042cf8:	68bb      	ldr	r3, [r7, #8]
10042cfa:	330c      	adds	r3, #12
10042cfc:	001a      	movs	r2, r3
10042cfe:	23c0      	movs	r3, #192	@ 0xc0
10042d00:	05db      	lsls	r3, r3, #23
10042d02:	6812      	ldr	r2, [r2, #0]
10042d04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
10042d06:	23c0      	movs	r3, #192	@ 0xc0
10042d08:	05db      	lsls	r3, r3, #23
10042d0a:	68fa      	ldr	r2, [r7, #12]
10042d0c:	6812      	ldr	r2, [r2, #0]
10042d0e:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
10042d10:	68fb      	ldr	r3, [r7, #12]
10042d12:	1d1a      	adds	r2, r3, #4
10042d14:	23c0      	movs	r3, #192	@ 0xc0
10042d16:	05db      	lsls	r3, r3, #23
10042d18:	6812      	ldr	r2, [r2, #0]
10042d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
10042d1c:	68fb      	ldr	r3, [r7, #12]
10042d1e:	3308      	adds	r3, #8
10042d20:	001a      	movs	r2, r3
10042d22:	23c0      	movs	r3, #192	@ 0xc0
10042d24:	05db      	lsls	r3, r3, #23
10042d26:	6812      	ldr	r2, [r2, #0]
10042d28:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
10042d2a:	68fb      	ldr	r3, [r7, #12]
10042d2c:	330c      	adds	r3, #12
10042d2e:	001a      	movs	r2, r3
10042d30:	23c0      	movs	r3, #192	@ 0xc0
10042d32:	05db      	lsls	r3, r3, #23
10042d34:	6812      	ldr	r2, [r2, #0]
10042d36:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
10042d38:	f000 f826 	bl	10042d88 <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
10042d3c:	23c0      	movs	r3, #192	@ 0xc0
10042d3e:	05db      	lsls	r3, r3, #23
10042d40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10042d42:	687b      	ldr	r3, [r7, #4]
10042d44:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
10042d46:	23c0      	movs	r3, #192	@ 0xc0
10042d48:	05da      	lsls	r2, r3, #23
10042d4a:	687b      	ldr	r3, [r7, #4]
10042d4c:	3304      	adds	r3, #4
10042d4e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
10042d50:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
10042d52:	23c0      	movs	r3, #192	@ 0xc0
10042d54:	05da      	lsls	r2, r3, #23
10042d56:	687b      	ldr	r3, [r7, #4]
10042d58:	3308      	adds	r3, #8
10042d5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10042d5c:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
10042d5e:	23c0      	movs	r3, #192	@ 0xc0
10042d60:	05da      	lsls	r2, r3, #23
10042d62:	687b      	ldr	r3, [r7, #4]
10042d64:	330c      	adds	r3, #12
10042d66:	6d52      	ldr	r2, [r2, #84]	@ 0x54
10042d68:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
10042d6a:	4b06      	ldr	r3, [pc, #24]	@ (10042d84 <HW_AES_Encrypt+0xd4>)
10042d6c:	781b      	ldrb	r3, [r3, #0]
10042d6e:	b2db      	uxtb	r3, r3
10042d70:	193a      	adds	r2, r7, r4
10042d72:	7812      	ldrb	r2, [r2, #0]
10042d74:	429a      	cmp	r2, r3
10042d76:	d1a8      	bne.n	10042cca <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
10042d78:	2300      	movs	r3, #0
}
10042d7a:	0018      	movs	r0, r3
10042d7c:	46bd      	mov	sp, r7
10042d7e:	b007      	add	sp, #28
10042d80:	bd90      	pop	{r4, r7, pc}
10042d82:	46c0      	nop			@ (mov r8, r8)
10042d84:	200003c4 	.word	0x200003c4

10042d88 <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
10042d88:	b580      	push	{r7, lr}
10042d8a:	b082      	sub	sp, #8
10042d8c:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
10042d8e:	1dfb      	adds	r3, r7, #7
10042d90:	2264      	movs	r2, #100	@ 0x64
10042d92:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
10042d94:	23c0      	movs	r3, #192	@ 0xc0
10042d96:	05db      	lsls	r3, r3, #23
10042d98:	0018      	movs	r0, r3
10042d9a:	f000 f81c 	bl	10042dd6 <LL_AES_StartManualEncription>
    do
    {
        i--;
10042d9e:	1dfb      	adds	r3, r7, #7
10042da0:	781b      	ldrb	r3, [r3, #0]
10042da2:	b2db      	uxtb	r3, r3
10042da4:	3b01      	subs	r3, #1
10042da6:	b2da      	uxtb	r2, r3
10042da8:	1dfb      	adds	r3, r7, #7
10042daa:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
10042dac:	23c0      	movs	r3, #192	@ 0xc0
10042dae:	05db      	lsls	r3, r3, #23
10042db0:	0018      	movs	r0, r3
10042db2:	f000 f81e 	bl	10042df2 <LL_AES_IsBusy>
10042db6:	1e03      	subs	r3, r0, #0
10042db8:	d005      	beq.n	10042dc6 <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
10042dba:	1dfb      	adds	r3, r7, #7
10042dbc:	781b      	ldrb	r3, [r3, #0]
10042dbe:	b2db      	uxtb	r3, r3
10042dc0:	2b00      	cmp	r3, #0
10042dc2:	d1ec      	bne.n	10042d9e <HW_AES_Start+0x16>
10042dc4:	e000      	b.n	10042dc8 <HW_AES_Start+0x40>
            break;
10042dc6:	46c0      	nop			@ (mov r8, r8)

    return i;
10042dc8:	1dfb      	adds	r3, r7, #7
10042dca:	781b      	ldrb	r3, [r3, #0]
10042dcc:	b2db      	uxtb	r3, r3
}
10042dce:	0018      	movs	r0, r3
10042dd0:	46bd      	mov	sp, r7
10042dd2:	b002      	add	sp, #8
10042dd4:	bd80      	pop	{r7, pc}

10042dd6 <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
10042dd6:	b580      	push	{r7, lr}
10042dd8:	b082      	sub	sp, #8
10042dda:	af00      	add	r7, sp, #0
10042ddc:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
10042dde:	687b      	ldr	r3, [r7, #4]
10042de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10042de2:	2201      	movs	r2, #1
10042de4:	431a      	orrs	r2, r3
10042de6:	687b      	ldr	r3, [r7, #4]
10042de8:	659a      	str	r2, [r3, #88]	@ 0x58
}
10042dea:	46c0      	nop			@ (mov r8, r8)
10042dec:	46bd      	mov	sp, r7
10042dee:	b002      	add	sp, #8
10042df0:	bd80      	pop	{r7, pc}

10042df2 <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
10042df2:	b580      	push	{r7, lr}
10042df4:	b082      	sub	sp, #8
10042df6:	af00      	add	r7, sp, #0
10042df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
10042dfa:	687b      	ldr	r3, [r7, #4]
10042dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10042dfe:	2201      	movs	r2, #1
10042e00:	4013      	ands	r3, r2
10042e02:	2b01      	cmp	r3, #1
10042e04:	d101      	bne.n	10042e0a <LL_AES_IsBusy+0x18>
10042e06:	2301      	movs	r3, #1
10042e08:	e000      	b.n	10042e0c <LL_AES_IsBusy+0x1a>
10042e0a:	2300      	movs	r3, #0
}
10042e0c:	0018      	movs	r0, r3
10042e0e:	46bd      	mov	sp, r7
10042e10:	b002      	add	sp, #8
10042e12:	bd80      	pop	{r7, pc}

10042e14 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
10042e14:	b580      	push	{r7, lr}
10042e16:	b082      	sub	sp, #8
10042e18:	af00      	add	r7, sp, #0
10042e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
10042e1c:	687b      	ldr	r3, [r7, #4]
10042e1e:	681b      	ldr	r3, [r3, #0]
10042e20:	2280      	movs	r2, #128	@ 0x80
10042e22:	0352      	lsls	r2, r2, #13
10042e24:	431a      	orrs	r2, r3
10042e26:	687b      	ldr	r3, [r7, #4]
10042e28:	601a      	str	r2, [r3, #0]
}
10042e2a:	46c0      	nop			@ (mov r8, r8)
10042e2c:	46bd      	mov	sp, r7
10042e2e:	b002      	add	sp, #8
10042e30:	bd80      	pop	{r7, pc}

10042e32 <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
10042e32:	b580      	push	{r7, lr}
10042e34:	b082      	sub	sp, #8
10042e36:	af00      	add	r7, sp, #0
10042e38:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
10042e3a:	687b      	ldr	r3, [r7, #4]
10042e3c:	681b      	ldr	r3, [r3, #0]
10042e3e:	2280      	movs	r2, #128	@ 0x80
10042e40:	0312      	lsls	r2, r2, #12
10042e42:	431a      	orrs	r2, r3
10042e44:	687b      	ldr	r3, [r7, #4]
10042e46:	601a      	str	r2, [r3, #0]
}
10042e48:	46c0      	nop			@ (mov r8, r8)
10042e4a:	46bd      	mov	sp, r7
10042e4c:	b002      	add	sp, #8
10042e4e:	bd80      	pop	{r7, pc}

10042e50 <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
10042e50:	b580      	push	{r7, lr}
10042e52:	b082      	sub	sp, #8
10042e54:	af00      	add	r7, sp, #0
10042e56:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
10042e58:	687b      	ldr	r3, [r7, #4]
10042e5a:	681b      	ldr	r3, [r3, #0]
10042e5c:	2280      	movs	r2, #128	@ 0x80
10042e5e:	0292      	lsls	r2, r2, #10
10042e60:	431a      	orrs	r2, r3
10042e62:	687b      	ldr	r3, [r7, #4]
10042e64:	601a      	str	r2, [r3, #0]
}
10042e66:	46c0      	nop			@ (mov r8, r8)
10042e68:	46bd      	mov	sp, r7
10042e6a:	b002      	add	sp, #8
10042e6c:	bd80      	pop	{r7, pc}
	...

10042e70 <HW_PKA_ReadResult>:

#endif

#if defined(STM32WB05) || defined(STM32WB09)
void HW_PKA_ReadResult( uint32_t index, int size, uint32_t* out )
{
10042e70:	b580      	push	{r7, lr}
10042e72:	b086      	sub	sp, #24
10042e74:	af00      	add	r7, sp, #0
10042e76:	60f8      	str	r0, [r7, #12]
10042e78:	60b9      	str	r1, [r7, #8]
10042e7a:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
10042e7c:	68fb      	ldr	r3, [r7, #12]
10042e7e:	009b      	lsls	r3, r3, #2
10042e80:	4a0b      	ldr	r2, [pc, #44]	@ (10042eb0 <HW_PKA_ReadResult+0x40>)
10042e82:	4694      	mov	ip, r2
10042e84:	4463      	add	r3, ip
10042e86:	617b      	str	r3, [r7, #20]
  /* Read from PKA RAM */
  for ( ; size > 0; size-- )
10042e88:	e00a      	b.n	10042ea0 <HW_PKA_ReadResult+0x30>
  {
    *out++ = *pka_ram++;
10042e8a:	697a      	ldr	r2, [r7, #20]
10042e8c:	1d13      	adds	r3, r2, #4
10042e8e:	617b      	str	r3, [r7, #20]
10042e90:	687b      	ldr	r3, [r7, #4]
10042e92:	1d19      	adds	r1, r3, #4
10042e94:	6079      	str	r1, [r7, #4]
10042e96:	6812      	ldr	r2, [r2, #0]
10042e98:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
10042e9a:	68bb      	ldr	r3, [r7, #8]
10042e9c:	3b01      	subs	r3, #1
10042e9e:	60bb      	str	r3, [r7, #8]
10042ea0:	68bb      	ldr	r3, [r7, #8]
10042ea2:	2b00      	cmp	r3, #0
10042ea4:	dcf1      	bgt.n	10042e8a <HW_PKA_ReadResult+0x1a>
  }
}
10042ea6:	46c0      	nop			@ (mov r8, r8)
10042ea8:	46c0      	nop			@ (mov r8, r8)
10042eaa:	46bd      	mov	sp, r7
10042eac:	b006      	add	sp, #24
10042eae:	bd80      	pop	{r7, pc}
10042eb0:	48300400 	.word	0x48300400

10042eb4 <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
10042eb4:	b580      	push	{r7, lr}
10042eb6:	af00      	add	r7, sp, #0
  PKAMGR_Init();
10042eb8:	f001 fbb4 	bl	10044624 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
10042ebc:	4b07      	ldr	r3, [pc, #28]	@ (10042edc <HW_PKA_Init+0x28>)
10042ebe:	0018      	movs	r0, r3
10042ec0:	f7ff ffa8 	bl	10042e14 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
10042ec4:	4b05      	ldr	r3, [pc, #20]	@ (10042edc <HW_PKA_Init+0x28>)
10042ec6:	0018      	movs	r0, r3
10042ec8:	f7ff ffb3 	bl	10042e32 <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
10042ecc:	4b03      	ldr	r3, [pc, #12]	@ (10042edc <HW_PKA_Init+0x28>)
10042ece:	0018      	movs	r0, r3
10042ed0:	f7ff ffbe 	bl	10042e50 <LL_PKA_EnableIT_PROCEND>
}
10042ed4:	46c0      	nop			@ (mov r8, r8)
10042ed6:	46bd      	mov	sp, r7
10042ed8:	bd80      	pop	{r7, pc}
10042eda:	46c0      	nop			@ (mov r8, r8)
10042edc:	48300000 	.word	0x48300000

10042ee0 <HW_PKA_ExitWithError>:
  * @param
  * @param
  *
  */
void HW_PKA_ExitWithError(uint32_t errorCode)
{
10042ee0:	b580      	push	{r7, lr}
10042ee2:	b084      	sub	sp, #16
10042ee4:	af00      	add	r7, sp, #0
10042ee6:	6078      	str	r0, [r7, #4]
  internalStateMachine_Operation = 0;
10042ee8:	4b14      	ldr	r3, [pc, #80]	@ (10042f3c <HW_PKA_ExitWithError+0x5c>)
10042eea:	2200      	movs	r2, #0
10042eec:	601a      	str	r2, [r3, #0]
  internalStateMachine_Step = 0;
10042eee:	4b14      	ldr	r3, [pc, #80]	@ (10042f40 <HW_PKA_ExitWithError+0x60>)
10042ef0:	2200      	movs	r2, #0
10042ef2:	601a      	str	r2, [r3, #0]
  PKAMGR_Unlock();
10042ef4:	f001 fba2 	bl	1004463c <PKAMGR_Unlock>
  ret[0]=errorCode;
10042ef8:	4b12      	ldr	r3, [pc, #72]	@ (10042f44 <HW_PKA_ExitWithError+0x64>)
10042efa:	687a      	ldr	r2, [r7, #4]
10042efc:	601a      	str	r2, [r3, #0]
  for(int i=0; i<8; i++)
10042efe:	2300      	movs	r3, #0
10042f00:	60fb      	str	r3, [r7, #12]
10042f02:	e00c      	b.n	10042f1e <HW_PKA_ExitWithError+0x3e>
  {
    ret[i+16] = bufferSecretKey[i];
10042f04:	68fb      	ldr	r3, [r7, #12]
10042f06:	3310      	adds	r3, #16
10042f08:	001a      	movs	r2, r3
10042f0a:	4b0f      	ldr	r3, [pc, #60]	@ (10042f48 <HW_PKA_ExitWithError+0x68>)
10042f0c:	68f9      	ldr	r1, [r7, #12]
10042f0e:	0089      	lsls	r1, r1, #2
10042f10:	58c9      	ldr	r1, [r1, r3]
10042f12:	4b0c      	ldr	r3, [pc, #48]	@ (10042f44 <HW_PKA_ExitWithError+0x64>)
10042f14:	0092      	lsls	r2, r2, #2
10042f16:	50d1      	str	r1, [r2, r3]
  for(int i=0; i<8; i++)
10042f18:	68fb      	ldr	r3, [r7, #12]
10042f1a:	3301      	adds	r3, #1
10042f1c:	60fb      	str	r3, [r7, #12]
10042f1e:	68fb      	ldr	r3, [r7, #12]
10042f20:	2b07      	cmp	r3, #7
10042f22:	ddef      	ble.n	10042f04 <HW_PKA_ExitWithError+0x24>
  }
  HW_PKA_funcCB_LP(PKAMGR_ERROR, ret);
10042f24:	4b09      	ldr	r3, [pc, #36]	@ (10042f4c <HW_PKA_ExitWithError+0x6c>)
10042f26:	681b      	ldr	r3, [r3, #0]
10042f28:	4906      	ldr	r1, [pc, #24]	@ (10042f44 <HW_PKA_ExitWithError+0x64>)
10042f2a:	2201      	movs	r2, #1
10042f2c:	4252      	negs	r2, r2
10042f2e:	0010      	movs	r0, r2
10042f30:	4798      	blx	r3
}
10042f32:	46c0      	nop			@ (mov r8, r8)
10042f34:	46bd      	mov	sp, r7
10042f36:	b004      	add	sp, #16
10042f38:	bd80      	pop	{r7, pc}
10042f3a:	46c0      	nop			@ (mov r8, r8)
10042f3c:	20000428 	.word	0x20000428
10042f40:	2000042c 	.word	0x2000042c
10042f44:	200003c8 	.word	0x200003c8
10042f48:	20000430 	.word	0x20000430
10042f4c:	20000450 	.word	0x20000450

10042f50 <HW_PKA_ProcEnd_StateMachine>:
  * @param
  * @param
  *
  */
void HW_PKA_ProcEnd_StateMachine(void)
{
10042f50:	b580      	push	{r7, lr}
10042f52:	b082      	sub	sp, #8
10042f54:	af00      	add	r7, sp, #0
  if(internalStateMachine_Operation == HW_PKA_OPERATION_P256)
10042f56:	4b2f      	ldr	r3, [pc, #188]	@ (10043014 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10042f58:	681b      	ldr	r3, [r3, #0]
10042f5a:	2b01      	cmp	r3, #1
10042f5c:	d155      	bne.n	1004300a <HW_PKA_ProcEnd_StateMachine+0xba>
  {
    switch(internalStateMachine_Step)
10042f5e:	4b2e      	ldr	r3, [pc, #184]	@ (10043018 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042f60:	681b      	ldr	r3, [r3, #0]
10042f62:	2b0e      	cmp	r3, #14
10042f64:	d84d      	bhi.n	10043002 <HW_PKA_ProcEnd_StateMachine+0xb2>
10042f66:	009a      	lsls	r2, r3, #2
10042f68:	4b2c      	ldr	r3, [pc, #176]	@ (1004301c <HW_PKA_ProcEnd_StateMachine+0xcc>)
10042f6a:	18d3      	adds	r3, r2, r3
10042f6c:	681b      	ldr	r3, [r3, #0]
10042f6e:	469f      	mov	pc, r3
    {
      case HW_PKA_STEP_0:
        internalStateMachine_Step = HW_PKA_STEP_1;
10042f70:	4b29      	ldr	r3, [pc, #164]	@ (10043018 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042f72:	2201      	movs	r2, #1
10042f74:	601a      	str	r2, [r3, #0]

      break;
10042f76:	e048      	b.n	1004300a <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_1:
        internalStateMachine_Step = HW_PKA_STEP_2;
10042f78:	4b27      	ldr	r3, [pc, #156]	@ (10043018 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042f7a:	2202      	movs	r2, #2
10042f7c:	601a      	str	r2, [r3, #0]
        break;
10042f7e:	e044      	b.n	1004300a <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_2:
          internalStateMachine_Step = HW_PKA_STEP_3;
10042f80:	4b25      	ldr	r3, [pc, #148]	@ (10043018 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042f82:	2203      	movs	r2, #3
10042f84:	601a      	str	r2, [r3, #0]
          break;
10042f86:	e040      	b.n	1004300a <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_3:
            /* Read the PKA scalar multiplication result which is the DH key */
            for(int i=0;i<8;i++)
10042f88:	2300      	movs	r3, #0
10042f8a:	607b      	str	r3, [r7, #4]
10042f8c:	e00a      	b.n	10042fa4 <HW_PKA_ProcEnd_StateMachine+0x54>
              ret[i] = bufferSecretKey[i];
10042f8e:	4b24      	ldr	r3, [pc, #144]	@ (10043020 <HW_PKA_ProcEnd_StateMachine+0xd0>)
10042f90:	687a      	ldr	r2, [r7, #4]
10042f92:	0092      	lsls	r2, r2, #2
10042f94:	58d1      	ldr	r1, [r2, r3]
10042f96:	4b23      	ldr	r3, [pc, #140]	@ (10043024 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042f98:	687a      	ldr	r2, [r7, #4]
10042f9a:	0092      	lsls	r2, r2, #2
10042f9c:	50d1      	str	r1, [r2, r3]
            for(int i=0;i<8;i++)
10042f9e:	687b      	ldr	r3, [r7, #4]
10042fa0:	3301      	adds	r3, #1
10042fa2:	607b      	str	r3, [r7, #4]
10042fa4:	687b      	ldr	r3, [r7, #4]
10042fa6:	2b07      	cmp	r3, #7
10042fa8:	ddf1      	ble.n	10042f8e <HW_PKA_ProcEnd_StateMachine+0x3e>
            HW_PKA_P256_ReadEccScalarMul( (uint32_t *)&ret[8], (uint32_t *)&ret[16] );
10042faa:	4a1f      	ldr	r2, [pc, #124]	@ (10043028 <HW_PKA_ProcEnd_StateMachine+0xd8>)
10042fac:	4b1f      	ldr	r3, [pc, #124]	@ (1004302c <HW_PKA_ProcEnd_StateMachine+0xdc>)
10042fae:	0011      	movs	r1, r2
10042fb0:	0018      	movs	r0, r3
10042fb2:	f000 f85a 	bl	1004306a <HW_PKA_P256_ReadEccScalarMul>
#ifdef STM32WB09
            internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
10042fb6:	4b18      	ldr	r3, [pc, #96]	@ (10043018 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042fb8:	220e      	movs	r2, #14
10042fba:	601a      	str	r2, [r3, #0]
            HW_PKA_ProcEnd_StateMachine();
10042fbc:	f7ff ffc8 	bl	10042f50 <HW_PKA_ProcEnd_StateMachine>
         {
           internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
           HW_PKA_ProcEnd_StateMachine();
         }
#endif /* STM32WB05 */
          break;
10042fc0:	e023      	b.n	1004300a <HW_PKA_ProcEnd_StateMachine+0xba>
       case HW_PKA_STEP_END_SUCCESS:
          internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
10042fc2:	4b14      	ldr	r3, [pc, #80]	@ (10043014 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10042fc4:	2200      	movs	r2, #0
10042fc6:	601a      	str	r2, [r3, #0]
          internalStateMachine_Step = HW_PKA_STEP_0;
10042fc8:	4b13      	ldr	r3, [pc, #76]	@ (10043018 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042fca:	2200      	movs	r2, #0
10042fcc:	601a      	str	r2, [r3, #0]
          PKAMGR_Unlock();
10042fce:	f001 fb35 	bl	1004463c <PKAMGR_Unlock>
          for(int i=0;i<8;i++)
10042fd2:	2300      	movs	r3, #0
10042fd4:	603b      	str	r3, [r7, #0]
10042fd6:	e00a      	b.n	10042fee <HW_PKA_ProcEnd_StateMachine+0x9e>
            ret[i] = bufferSecretKey[i];
10042fd8:	4b11      	ldr	r3, [pc, #68]	@ (10043020 <HW_PKA_ProcEnd_StateMachine+0xd0>)
10042fda:	683a      	ldr	r2, [r7, #0]
10042fdc:	0092      	lsls	r2, r2, #2
10042fde:	58d1      	ldr	r1, [r2, r3]
10042fe0:	4b10      	ldr	r3, [pc, #64]	@ (10043024 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042fe2:	683a      	ldr	r2, [r7, #0]
10042fe4:	0092      	lsls	r2, r2, #2
10042fe6:	50d1      	str	r1, [r2, r3]
          for(int i=0;i<8;i++)
10042fe8:	683b      	ldr	r3, [r7, #0]
10042fea:	3301      	adds	r3, #1
10042fec:	603b      	str	r3, [r7, #0]
10042fee:	683b      	ldr	r3, [r7, #0]
10042ff0:	2b07      	cmp	r3, #7
10042ff2:	ddf1      	ble.n	10042fd8 <HW_PKA_ProcEnd_StateMachine+0x88>
          HW_PKA_funcCB_LP(PKAMGR_SUCCESS, ret);
10042ff4:	4b0e      	ldr	r3, [pc, #56]	@ (10043030 <HW_PKA_ProcEnd_StateMachine+0xe0>)
10042ff6:	681b      	ldr	r3, [r3, #0]
10042ff8:	4a0a      	ldr	r2, [pc, #40]	@ (10043024 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042ffa:	0011      	movs	r1, r2
10042ffc:	2000      	movs	r0, #0
10042ffe:	4798      	blx	r3
          break;
10043000:	e003      	b.n	1004300a <HW_PKA_ProcEnd_StateMachine+0xba>
       default:
          HW_PKA_ExitWithError(0xA0);
10043002:	20a0      	movs	r0, #160	@ 0xa0
10043004:	f7ff ff6c 	bl	10042ee0 <HW_PKA_ExitWithError>
    }
  }
}
10043008:	e7ff      	b.n	1004300a <HW_PKA_ProcEnd_StateMachine+0xba>
1004300a:	46c0      	nop			@ (mov r8, r8)
1004300c:	46bd      	mov	sp, r7
1004300e:	b002      	add	sp, #8
10043010:	bd80      	pop	{r7, pc}
10043012:	46c0      	nop			@ (mov r8, r8)
10043014:	20000428 	.word	0x20000428
10043018:	2000042c 	.word	0x2000042c
1004301c:	1004ee18 	.word	0x1004ee18
10043020:	20000430 	.word	0x20000430
10043024:	200003c8 	.word	0x200003c8
10043028:	20000408 	.word	0x20000408
1004302c:	200003e8 	.word	0x200003e8
10043030:	20000450 	.word	0x20000450

10043034 <HAL_PKA_OperationCpltCallback>:
    HW_PKA_ProcEnd_StateMachine();
  }
}

void HAL_PKA_OperationCpltCallback(PKA_HandleTypeDef *hpka)
{
10043034:	b580      	push	{r7, lr}
10043036:	b082      	sub	sp, #8
10043038:	af00      	add	r7, sp, #0
1004303a:	6078      	str	r0, [r7, #4]
  HW_PKA_ProcEnd_StateMachine();
1004303c:	f7ff ff88 	bl	10042f50 <HW_PKA_ProcEnd_StateMachine>
  PKAMGR_IRQCallback();
10043040:	f001 fb26 	bl	10044690 <PKAMGR_IRQCallback>
}
10043044:	46c0      	nop			@ (mov r8, r8)
10043046:	46bd      	mov	sp, r7
10043048:	b002      	add	sp, #8
1004304a:	bd80      	pop	{r7, pc}

1004304c <HAL_PKA_ErrorCallback>:

void HAL_PKA_ErrorCallback(PKA_HandleTypeDef *hpka)
{
1004304c:	b580      	push	{r7, lr}
1004304e:	b082      	sub	sp, #8
10043050:	af00      	add	r7, sp, #0
10043052:	6078      	str	r0, [r7, #4]
  HW_PKA_ExitWithError(hpka->ErrorCode);
10043054:	687b      	ldr	r3, [r7, #4]
10043056:	689b      	ldr	r3, [r3, #8]
10043058:	0018      	movs	r0, r3
1004305a:	f7ff ff41 	bl	10042ee0 <HW_PKA_ExitWithError>
  PKAMGR_IRQCallback();
1004305e:	f001 fb17 	bl	10044690 <PKAMGR_IRQCallback>
}
10043062:	46c0      	nop			@ (mov r8, r8)
10043064:	46bd      	mov	sp, r7
10043066:	b002      	add	sp, #8
10043068:	bd80      	pop	{r7, pc}

1004306a <HW_PKA_P256_ReadEccScalarMul>:
  * @param
  * @param
  *
  */
void HW_PKA_P256_ReadEccScalarMul( uint32_t* pX, uint32_t* pY )
{
1004306a:	b580      	push	{r7, lr}
1004306c:	b082      	sub	sp, #8
1004306e:	af00      	add	r7, sp, #0
10043070:	6078      	str	r0, [r7, #4]
10043072:	6039      	str	r1, [r7, #0]
#ifdef STM32WB09
  /* Read the output point X */
  if( pX )
10043074:	687b      	ldr	r3, [r7, #4]
10043076:	2b00      	cmp	r3, #0
10043078:	d005      	beq.n	10043086 <HW_PKA_P256_ReadEccScalarMul+0x1c>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_X, 8, pX );
1004307a:	687b      	ldr	r3, [r7, #4]
1004307c:	001a      	movs	r2, r3
1004307e:	2108      	movs	r1, #8
10043080:	205e      	movs	r0, #94	@ 0x5e
10043082:	f7ff fef5 	bl	10042e70 <HW_PKA_ReadResult>
  }
  /* Read the output point Y as the second half of the result */
  if( pY )
10043086:	683b      	ldr	r3, [r7, #0]
10043088:	2b00      	cmp	r3, #0
1004308a:	d005      	beq.n	10043098 <HW_PKA_P256_ReadEccScalarMul+0x2e>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_Y, 8, pY );
1004308c:	683b      	ldr	r3, [r7, #0]
1004308e:	001a      	movs	r2, r3
10043090:	2108      	movs	r1, #8
10043092:	2074      	movs	r0, #116	@ 0x74
10043094:	f7ff feec 	bl	10042e70 <HW_PKA_ReadResult>
  if( pY )
  {
    HW_PKA_ReadResult( 108, 8, pY );
  }
#endif /* STM32WB05 */
}
10043098:	46c0      	nop			@ (mov r8, r8)
1004309a:	46bd      	mov	sp, r7
1004309c:	b002      	add	sp, #8
1004309e:	bd80      	pop	{r7, pc}

100430a0 <LL_AHB1_GRP1_EnableClock>:
{
100430a0:	b580      	push	{r7, lr}
100430a2:	b084      	sub	sp, #16
100430a4:	af00      	add	r7, sp, #0
100430a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100430a8:	4b07      	ldr	r3, [pc, #28]	@ (100430c8 <LL_AHB1_GRP1_EnableClock+0x28>)
100430aa:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100430ac:	4b06      	ldr	r3, [pc, #24]	@ (100430c8 <LL_AHB1_GRP1_EnableClock+0x28>)
100430ae:	687a      	ldr	r2, [r7, #4]
100430b0:	430a      	orrs	r2, r1
100430b2:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100430b4:	4b04      	ldr	r3, [pc, #16]	@ (100430c8 <LL_AHB1_GRP1_EnableClock+0x28>)
100430b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100430b8:	687a      	ldr	r2, [r7, #4]
100430ba:	4013      	ands	r3, r2
100430bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100430be:	68fb      	ldr	r3, [r7, #12]
}
100430c0:	46c0      	nop			@ (mov r8, r8)
100430c2:	46bd      	mov	sp, r7
100430c4:	b004      	add	sp, #16
100430c6:	bd80      	pop	{r7, pc}
100430c8:	48400000 	.word	0x48400000

100430cc <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
100430cc:	b580      	push	{r7, lr}
100430ce:	b082      	sub	sp, #8
100430d0:	af00      	add	r7, sp, #0
100430d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RNGx->CR, RNG_CR_DISABLE, LL_RNG_CR_DISABLE_0);
100430d4:	687b      	ldr	r3, [r7, #4]
100430d6:	681b      	ldr	r3, [r3, #0]
100430d8:	2201      	movs	r2, #1
100430da:	4393      	bics	r3, r2
100430dc:	001a      	movs	r2, r3
100430de:	687b      	ldr	r3, [r7, #4]
100430e0:	601a      	str	r2, [r3, #0]
}
100430e2:	46c0      	nop			@ (mov r8, r8)
100430e4:	46bd      	mov	sp, r7
100430e6:	b002      	add	sp, #8
100430e8:	bd80      	pop	{r7, pc}
	...

100430ec <LL_RNG_SetSamplingClockEnableDivider>:
  * @param  RNGx RNG Instance
  * @param  value parameter must be a number between 0 and 65535 (form 0x0 to 0xffff)
  * @retval None
  */
__STATIC_INLINE void LL_RNG_SetSamplingClockEnableDivider(RNG_TypeDef *RNGx, uint32_t value)
{
100430ec:	b580      	push	{r7, lr}
100430ee:	b082      	sub	sp, #8
100430f0:	af00      	add	r7, sp, #0
100430f2:	6078      	str	r0, [r7, #4]
100430f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RNGx->CR, RNG_CR_CLKDIV_15_0, value << RNG_CR_CLKDIV_15_0_Pos);
100430f6:	687b      	ldr	r3, [r7, #4]
100430f8:	681b      	ldr	r3, [r3, #0]
100430fa:	4a05      	ldr	r2, [pc, #20]	@ (10043110 <LL_RNG_SetSamplingClockEnableDivider+0x24>)
100430fc:	401a      	ands	r2, r3
100430fe:	683b      	ldr	r3, [r7, #0]
10043100:	021b      	lsls	r3, r3, #8
10043102:	431a      	orrs	r2, r3
10043104:	687b      	ldr	r3, [r7, #4]
10043106:	601a      	str	r2, [r3, #0]
}
10043108:	46c0      	nop			@ (mov r8, r8)
1004310a:	46bd      	mov	sp, r7
1004310c:	b002      	add	sp, #8
1004310e:	bd80      	pop	{r7, pc}
10043110:	ff0000ff 	.word	0xff0000ff

10043114 <LL_RNG_GetSamplingClockEnableDivider>:
    @note   dividing by a factor equal to CLKDIV[15:0] + 1, values being in the range of 0 to 65535
  * @rmtoll CR          CLKDIV_15_0       LL_RNG_GetSamplingClockEnableDivider
  * @retval can be one of the following values
  */
__STATIC_INLINE uint32_t LL_RNG_GetSamplingClockEnableDivider(RNG_TypeDef *RNGx)
{
10043114:	b580      	push	{r7, lr}
10043116:	b082      	sub	sp, #8
10043118:	af00      	add	r7, sp, #0
1004311a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->CR, RNG_CR_CLKDIV_15_0) >> RNG_CR_CLKDIV_15_0_Pos);
1004311c:	687b      	ldr	r3, [r7, #4]
1004311e:	681b      	ldr	r3, [r3, #0]
10043120:	0a1b      	lsrs	r3, r3, #8
10043122:	041b      	lsls	r3, r3, #16
10043124:	0c1b      	lsrs	r3, r3, #16
}
10043126:	0018      	movs	r0, r3
10043128:	46bd      	mov	sp, r7
1004312a:	b002      	add	sp, #8
1004312c:	bd80      	pop	{r7, pc}

1004312e <LL_RNG_IsActiveFlag_DISABLED>:
  * @rmtoll SR          DISABLED            LL_RNG_IsActiveFlag_DISABLED
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_DISABLED(RNG_TypeDef *RNGx)
{
1004312e:	b580      	push	{r7, lr}
10043130:	b082      	sub	sp, #8
10043132:	af00      	add	r7, sp, #0
10043134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_DISABLED) == (RNG_SR_DISABLED)) ? 1U : 0U);
10043136:	687b      	ldr	r3, [r7, #4]
10043138:	685b      	ldr	r3, [r3, #4]
1004313a:	2201      	movs	r2, #1
1004313c:	4013      	ands	r3, r2
1004313e:	2b01      	cmp	r3, #1
10043140:	d101      	bne.n	10043146 <LL_RNG_IsActiveFlag_DISABLED+0x18>
10043142:	2301      	movs	r3, #1
10043144:	e000      	b.n	10043148 <LL_RNG_IsActiveFlag_DISABLED+0x1a>
10043146:	2300      	movs	r3, #0
}
10043148:	0018      	movs	r0, r3
1004314a:	46bd      	mov	sp, r7
1004314c:	b002      	add	sp, #8
1004314e:	bd80      	pop	{r7, pc}

10043150 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>:
  * @rmtoll SR          REVEAL_CLK_ERR            LL_RNG_IsActiveFlag_REVEAL_CLK_ERR
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG_TypeDef *RNGx)
{
10043150:	b580      	push	{r7, lr}
10043152:	b082      	sub	sp, #8
10043154:	af00      	add	r7, sp, #0
10043156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_REVEAL_CLK_ERR) == (RNG_SR_REVEAL_CLK_ERR)) ? 1U : 0U);
10043158:	687b      	ldr	r3, [r7, #4]
1004315a:	685b      	ldr	r3, [r3, #4]
1004315c:	2204      	movs	r2, #4
1004315e:	4013      	ands	r3, r2
10043160:	2b04      	cmp	r3, #4
10043162:	d101      	bne.n	10043168 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x18>
10043164:	2301      	movs	r3, #1
10043166:	e000      	b.n	1004316a <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x1a>
10043168:	2300      	movs	r3, #0
}
1004316a:	0018      	movs	r0, r3
1004316c:	46bd      	mov	sp, r7
1004316e:	b002      	add	sp, #8
10043170:	bd80      	pop	{r7, pc}

10043172 <LL_RNG_IsActiveFlag_VAL_READY>:
  * @rmtoll SR          VAL_READY            LL_RNG_IsActiveFlag_VAL_READY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_VAL_READY(RNG_TypeDef *RNGx)
{
10043172:	b580      	push	{r7, lr}
10043174:	b082      	sub	sp, #8
10043176:	af00      	add	r7, sp, #0
10043178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_VAL_READY) == (RNG_SR_VAL_READY)) ? 1U : 0U);
1004317a:	687b      	ldr	r3, [r7, #4]
1004317c:	685b      	ldr	r3, [r3, #4]
1004317e:	2210      	movs	r2, #16
10043180:	4013      	ands	r3, r2
10043182:	2b10      	cmp	r3, #16
10043184:	d101      	bne.n	1004318a <LL_RNG_IsActiveFlag_VAL_READY+0x18>
10043186:	2301      	movs	r3, #1
10043188:	e000      	b.n	1004318c <LL_RNG_IsActiveFlag_VAL_READY+0x1a>
1004318a:	2300      	movs	r3, #0
}
1004318c:	0018      	movs	r0, r3
1004318e:	46bd      	mov	sp, r7
10043190:	b002      	add	sp, #8
10043192:	bd80      	pop	{r7, pc}

10043194 <LL_RNG_GetRndVal>:
  available in FIFO by ready VAL_READY flag before starting a read otherwise a null value will be returned
  * @rmtoll VAL          RND_VAL       LL_RNG_GetRndVal
  * @retval a 32-bit Random Value
  */
__STATIC_INLINE uint32_t LL_RNG_GetRndVal(RNG_TypeDef *RNGx)
{
10043194:	b580      	push	{r7, lr}
10043196:	b082      	sub	sp, #8
10043198:	af00      	add	r7, sp, #0
1004319a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->VAL, RNG_VAL_RND_VAL) >> RNG_VAL_RND_VAL_Pos);
1004319c:	687b      	ldr	r3, [r7, #4]
1004319e:	689b      	ldr	r3, [r3, #8]
}
100431a0:	0018      	movs	r0, r3
100431a2:	46bd      	mov	sp, r7
100431a4:	b002      	add	sp, #8
100431a6:	bd80      	pop	{r7, pc}

100431a8 <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
100431a8:	b580      	push	{r7, lr}
100431aa:	b082      	sub	sp, #8
100431ac:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
100431ae:	2380      	movs	r3, #128	@ 0x80
100431b0:	02db      	lsls	r3, r3, #11
100431b2:	0018      	movs	r0, r3
100431b4:	f7ff ff74 	bl	100430a0 <LL_AHB1_GRP1_EnableClock>

  uint32_t SamplingClockDivider = 0;
100431b8:	2300      	movs	r3, #0
100431ba:	607b      	str	r3, [r7, #4]

  /* Check that the divider value is equal to the one to configure. If not, it must redo the write and checking. */
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
100431bc:	e005      	b.n	100431ca <HW_RNG_Init+0x22>
  {
     /* While the new divider value is being resynchronized with the TRNG core clock domain, it is not possible to write another new value. */
     LL_RNG_SetSamplingClockEnableDivider(RNG, SamplingClockDivider);
100431be:	687b      	ldr	r3, [r7, #4]
100431c0:	4a12      	ldr	r2, [pc, #72]	@ (1004320c <HW_RNG_Init+0x64>)
100431c2:	0019      	movs	r1, r3
100431c4:	0010      	movs	r0, r2
100431c6:	f7ff ff91 	bl	100430ec <LL_RNG_SetSamplingClockEnableDivider>
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
100431ca:	4b10      	ldr	r3, [pc, #64]	@ (1004320c <HW_RNG_Init+0x64>)
100431cc:	0018      	movs	r0, r3
100431ce:	f7ff ffa1 	bl	10043114 <LL_RNG_GetSamplingClockEnableDivider>
100431d2:	0002      	movs	r2, r0
100431d4:	687b      	ldr	r3, [r7, #4]
100431d6:	4293      	cmp	r3, r2
100431d8:	d1f1      	bne.n	100431be <HW_RNG_Init+0x16>
  }

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
100431da:	4b0c      	ldr	r3, [pc, #48]	@ (1004320c <HW_RNG_Init+0x64>)
100431dc:	0018      	movs	r0, r3
100431de:	f7ff ff75 	bl	100430cc <LL_RNG_Enable>

  /* Wait for RNG enable operation */
  while (LL_RNG_IsActiveFlag_DISABLED(RNG));
100431e2:	46c0      	nop			@ (mov r8, r8)
100431e4:	4b09      	ldr	r3, [pc, #36]	@ (1004320c <HW_RNG_Init+0x64>)
100431e6:	0018      	movs	r0, r3
100431e8:	f7ff ffa1 	bl	1004312e <LL_RNG_IsActiveFlag_DISABLED>
100431ec:	1e03      	subs	r3, r0, #0
100431ee:	d1f9      	bne.n	100431e4 <HW_RNG_Init+0x3c>

  /* Check if internal clock error occurs */
  if (LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG))
100431f0:	4b06      	ldr	r3, [pc, #24]	@ (1004320c <HW_RNG_Init+0x64>)
100431f2:	0018      	movs	r0, r3
100431f4:	f7ff ffac 	bl	10043150 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>
100431f8:	1e03      	subs	r3, r0, #0
100431fa:	d001      	beq.n	10043200 <HW_RNG_Init+0x58>
  {
    return HW_RNG_ERROR;
100431fc:	2301      	movs	r3, #1
100431fe:	e000      	b.n	10043202 <HW_RNG_Init+0x5a>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
10043200:	2300      	movs	r3, #0
}
10043202:	0018      	movs	r0, r3
10043204:	46bd      	mov	sp, r7
10043206:	b002      	add	sp, #8
10043208:	bd80      	pop	{r7, pc}
1004320a:	46c0      	nop			@ (mov r8, r8)
1004320c:	48600000 	.word	0x48600000

10043210 <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
10043210:	b580      	push	{r7, lr}
10043212:	b082      	sub	sp, #8
10043214:	af00      	add	r7, sp, #0
10043216:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
10043218:	46c0      	nop			@ (mov r8, r8)
1004321a:	4b09      	ldr	r3, [pc, #36]	@ (10043240 <HW_RNG_GetRandom16+0x30>)
1004321c:	0018      	movs	r0, r3
1004321e:	f7ff ffa8 	bl	10043172 <LL_RNG_IsActiveFlag_VAL_READY>
10043222:	1e03      	subs	r3, r0, #0
10043224:	d0f9      	beq.n	1004321a <HW_RNG_GetRandom16+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
10043226:	4b06      	ldr	r3, [pc, #24]	@ (10043240 <HW_RNG_GetRandom16+0x30>)
10043228:	0018      	movs	r0, r3
1004322a:	f7ff ffb3 	bl	10043194 <LL_RNG_GetRndVal>
1004322e:	0003      	movs	r3, r0
10043230:	b29a      	uxth	r2, r3
10043232:	687b      	ldr	r3, [r7, #4]
10043234:	801a      	strh	r2, [r3, #0]

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
10043236:	2300      	movs	r3, #0
}
10043238:	0018      	movs	r0, r3
1004323a:	46bd      	mov	sp, r7
1004323c:	b002      	add	sp, #8
1004323e:	bd80      	pop	{r7, pc}
10043240:	48600000 	.word	0x48600000

10043244 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
10043244:	b580      	push	{r7, lr}
10043246:	b082      	sub	sp, #8
10043248:	af00      	add	r7, sp, #0
1004324a:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
1004324c:	46c0      	nop			@ (mov r8, r8)
1004324e:	4b09      	ldr	r3, [pc, #36]	@ (10043274 <HW_RNG_GetRandom32+0x30>)
10043250:	0018      	movs	r0, r3
10043252:	f7ff ff8e 	bl	10043172 <LL_RNG_IsActiveFlag_VAL_READY>
10043256:	1e03      	subs	r3, r0, #0
10043258:	d0f9      	beq.n	1004324e <HW_RNG_GetRandom32+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
1004325a:	4b06      	ldr	r3, [pc, #24]	@ (10043274 <HW_RNG_GetRandom32+0x30>)
1004325c:	0018      	movs	r0, r3
1004325e:	f7ff ff99 	bl	10043194 <LL_RNG_GetRndVal>
10043262:	0002      	movs	r2, r0
10043264:	687b      	ldr	r3, [r7, #4]
10043266:	601a      	str	r2, [r3, #0]
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
10043268:	2300      	movs	r3, #0
}
1004326a:	0018      	movs	r0, r3
1004326c:	46bd      	mov	sp, r7
1004326e:	b002      	add	sp, #8
10043270:	bd80      	pop	{r7, pc}
10043272:	46c0      	nop			@ (mov r8, r8)
10043274:	48600000 	.word	0x48600000

10043278 <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
10043278:	b580      	push	{r7, lr}
1004327a:	b084      	sub	sp, #16
1004327c:	af00      	add	r7, sp, #0
1004327e:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
10043280:	687b      	ldr	r3, [r7, #4]
10043282:	681b      	ldr	r3, [r3, #0]
10043284:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
10043286:	687b      	ldr	r3, [r7, #4]
10043288:	2200      	movs	r2, #0
1004328a:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
1004328c:	687b      	ldr	r3, [r7, #4]
1004328e:	2200      	movs	r2, #0
10043290:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
10043292:	687b      	ldr	r3, [r7, #4]
10043294:	2200      	movs	r2, #0
10043296:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
10043298:	687b      	ldr	r3, [r7, #4]
1004329a:	2200      	movs	r2, #0
1004329c:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
1004329e:	68fb      	ldr	r3, [r7, #12]
100432a0:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
100432a2:	68bb      	ldr	r3, [r7, #8]
100432a4:	781b      	ldrb	r3, [r3, #0]
100432a6:	2bff      	cmp	r3, #255	@ 0xff
100432a8:	d10c      	bne.n	100432c4 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
100432aa:	687b      	ldr	r3, [r7, #4]
100432ac:	685b      	ldr	r3, [r3, #4]
100432ae:	b29a      	uxth	r2, r3
100432b0:	68fb      	ldr	r3, [r7, #12]
100432b2:	b29b      	uxth	r3, r3
100432b4:	1ad3      	subs	r3, r2, r3
100432b6:	b29b      	uxth	r3, r3
100432b8:	3b04      	subs	r3, #4
100432ba:	b29a      	uxth	r2, r3
100432bc:	687b      	ldr	r3, [r7, #4]
100432be:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
100432c0:	2300      	movs	r3, #0
100432c2:	e028      	b.n	10043316 <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
100432c4:	68bb      	ldr	r3, [r7, #8]
100432c6:	781b      	ldrb	r3, [r3, #0]
100432c8:	2bfe      	cmp	r3, #254	@ 0xfe
100432ca:	d106      	bne.n	100432da <NVMDB_get_info+0x62>
    {
      info->valid_records++;
100432cc:	687b      	ldr	r3, [r7, #4]
100432ce:	891b      	ldrh	r3, [r3, #8]
100432d0:	3301      	adds	r3, #1
100432d2:	b29a      	uxth	r2, r3
100432d4:	687b      	ldr	r3, [r7, #4]
100432d6:	811a      	strh	r2, [r3, #8]
100432d8:	e00c      	b.n	100432f4 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
100432da:	68bb      	ldr	r3, [r7, #8]
100432dc:	781b      	ldrb	r3, [r3, #0]
100432de:	2b00      	cmp	r3, #0
100432e0:	d106      	bne.n	100432f0 <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
100432e2:	687b      	ldr	r3, [r7, #4]
100432e4:	895b      	ldrh	r3, [r3, #10]
100432e6:	3301      	adds	r3, #1
100432e8:	b29a      	uxth	r2, r3
100432ea:	687b      	ldr	r3, [r7, #4]
100432ec:	815a      	strh	r2, [r3, #10]
100432ee:	e001      	b.n	100432f4 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
100432f0:	2303      	movs	r3, #3
100432f2:	e010      	b.n	10043316 <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
100432f4:	68bb      	ldr	r3, [r7, #8]
100432f6:	885b      	ldrh	r3, [r3, #2]
100432f8:	3303      	adds	r3, #3
100432fa:	2203      	movs	r2, #3
100432fc:	4313      	orrs	r3, r2
100432fe:	001a      	movs	r2, r3
10043300:	68fb      	ldr	r3, [r7, #12]
10043302:	18d3      	adds	r3, r2, r3
10043304:	3301      	adds	r3, #1
10043306:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
10043308:	68fb      	ldr	r3, [r7, #12]
1004330a:	1d5a      	adds	r2, r3, #5
1004330c:	687b      	ldr	r3, [r7, #4]
1004330e:	685b      	ldr	r3, [r3, #4]
10043310:	429a      	cmp	r2, r3
10043312:	d3c4      	bcc.n	1004329e <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
10043314:	2300      	movs	r3, #0
    }
  }
}
10043316:	0018      	movs	r0, r3
10043318:	46bd      	mov	sp, r7
1004331a:	b004      	add	sp, #16
1004331c:	bd80      	pop	{r7, pc}

1004331e <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
1004331e:	b580      	push	{r7, lr}
10043320:	b086      	sub	sp, #24
10043322:	af00      	add	r7, sp, #0
10043324:	60f8      	str	r0, [r7, #12]
10043326:	607a      	str	r2, [r7, #4]
10043328:	603b      	str	r3, [r7, #0]
1004332a:	230b      	movs	r3, #11
1004332c:	18fb      	adds	r3, r7, r3
1004332e:	1c0a      	adds	r2, r1, #0
10043330:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
10043332:	2020      	movs	r0, #32
10043334:	183b      	adds	r3, r7, r0
10043336:	881b      	ldrh	r3, [r3, #0]
10043338:	2b00      	cmp	r3, #0
1004333a:	d00a      	beq.n	10043352 <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
1004333c:	2110      	movs	r1, #16
1004333e:	187a      	adds	r2, r7, r1
10043340:	183b      	adds	r3, r7, r0
10043342:	881b      	ldrh	r3, [r3, #0]
10043344:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
10043346:	187b      	adds	r3, r7, r1
10043348:	22fe      	movs	r2, #254	@ 0xfe
1004334a:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004334c:	187b      	adds	r3, r7, r1
1004334e:	617b      	str	r3, [r7, #20]
10043350:	e002      	b.n	10043358 <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10043352:	68fb      	ldr	r3, [r7, #12]
10043354:	685b      	ldr	r3, [r3, #4]
10043356:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10043358:	68fb      	ldr	r3, [r7, #12]
1004335a:	685a      	ldr	r2, [r3, #4]
1004335c:	68fb      	ldr	r3, [r7, #12]
1004335e:	689b      	ldr	r3, [r3, #8]
10043360:	429a      	cmp	r2, r3
10043362:	d203      	bcs.n	1004336c <NextRecordNoLock+0x4e>
10043364:	697b      	ldr	r3, [r7, #20]
10043366:	781b      	ldrb	r3, [r3, #0]
10043368:	2bff      	cmp	r3, #255	@ 0xff
1004336a:	d101      	bne.n	10043370 <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
1004336c:	2304      	movs	r3, #4
1004336e:	e04b      	b.n	10043408 <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
10043370:	68fb      	ldr	r3, [r7, #12]
10043372:	7b1b      	ldrb	r3, [r3, #12]
10043374:	2b00      	cmp	r3, #0
10043376:	d003      	beq.n	10043380 <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
10043378:	68fb      	ldr	r3, [r7, #12]
1004337a:	2200      	movs	r2, #0
1004337c:	731a      	strb	r2, [r3, #12]
1004337e:	e019      	b.n	100433b4 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10043380:	68fb      	ldr	r3, [r7, #12]
10043382:	685b      	ldr	r3, [r3, #4]
10043384:	697a      	ldr	r2, [r7, #20]
10043386:	8852      	ldrh	r2, [r2, #2]
10043388:	3203      	adds	r2, #3
1004338a:	2103      	movs	r1, #3
1004338c:	430a      	orrs	r2, r1
1004338e:	189b      	adds	r3, r3, r2
10043390:	1c5a      	adds	r2, r3, #1
10043392:	68fb      	ldr	r3, [r7, #12]
10043394:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
10043396:	68fb      	ldr	r3, [r7, #12]
10043398:	685b      	ldr	r3, [r3, #4]
1004339a:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004339c:	68fb      	ldr	r3, [r7, #12]
1004339e:	685a      	ldr	r2, [r3, #4]
100433a0:	68fb      	ldr	r3, [r7, #12]
100433a2:	689b      	ldr	r3, [r3, #8]
100433a4:	429a      	cmp	r2, r3
100433a6:	d203      	bcs.n	100433b0 <NextRecordNoLock+0x92>
100433a8:	697b      	ldr	r3, [r7, #20]
100433aa:	781b      	ldrb	r3, [r3, #0]
100433ac:	2bff      	cmp	r3, #255	@ 0xff
100433ae:	d101      	bne.n	100433b4 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
100433b0:	2304      	movs	r3, #4
100433b2:	e029      	b.n	10043408 <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
100433b4:	697b      	ldr	r3, [r7, #20]
100433b6:	781b      	ldrb	r3, [r3, #0]
100433b8:	2b00      	cmp	r3, #0
100433ba:	d023      	beq.n	10043404 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
100433bc:	697b      	ldr	r3, [r7, #20]
100433be:	781b      	ldrb	r3, [r3, #0]
100433c0:	2bfe      	cmp	r3, #254	@ 0xfe
100433c2:	d001      	beq.n	100433c8 <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
100433c4:	2303      	movs	r3, #3
100433c6:	e01f      	b.n	10043408 <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
100433c8:	220b      	movs	r2, #11
100433ca:	18bb      	adds	r3, r7, r2
100433cc:	781b      	ldrb	r3, [r3, #0]
100433ce:	2bff      	cmp	r3, #255	@ 0xff
100433d0:	d005      	beq.n	100433de <NextRecordNoLock+0xc0>
100433d2:	697b      	ldr	r3, [r7, #20]
100433d4:	785b      	ldrb	r3, [r3, #1]
100433d6:	18ba      	adds	r2, r7, r2
100433d8:	7812      	ldrb	r2, [r2, #0]
100433da:	429a      	cmp	r2, r3
100433dc:	d1c8      	bne.n	10043370 <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
100433de:	68fb      	ldr	r3, [r7, #12]
100433e0:	685b      	ldr	r3, [r3, #4]
100433e2:	3304      	adds	r3, #4
100433e4:	001a      	movs	r2, r3
100433e6:	687b      	ldr	r3, [r7, #4]
100433e8:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
100433ea:	697b      	ldr	r3, [r7, #20]
100433ec:	885a      	ldrh	r2, [r3, #2]
100433ee:	683b      	ldr	r3, [r7, #0]
100433f0:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
100433f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100433f4:	2b00      	cmp	r3, #0
100433f6:	d003      	beq.n	10043400 <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
100433f8:	697b      	ldr	r3, [r7, #20]
100433fa:	785a      	ldrb	r2, [r3, #1]
100433fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100433fe:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
10043400:	2300      	movs	r3, #0
10043402:	e001      	b.n	10043408 <NextRecordNoLock+0xea>
      continue;
10043404:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
10043406:	e7b3      	b.n	10043370 <NextRecordNoLock+0x52>
    }
  }
}
10043408:	0018      	movs	r0, r3
1004340a:	46bd      	mov	sp, r7
1004340c:	b006      	add	sp, #24
1004340e:	bd80      	pop	{r7, pc}

10043410 <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
10043410:	b5f0      	push	{r4, r5, r6, r7, lr}
10043412:	b08b      	sub	sp, #44	@ 0x2c
10043414:	af02      	add	r7, sp, #8
10043416:	60f8      	str	r0, [r7, #12]
10043418:	0008      	movs	r0, r1
1004341a:	0011      	movs	r1, r2
1004341c:	607b      	str	r3, [r7, #4]
1004341e:	230b      	movs	r3, #11
10043420:	18fb      	adds	r3, r7, r3
10043422:	1c02      	adds	r2, r0, #0
10043424:	701a      	strb	r2, [r3, #0]
10043426:	2208      	movs	r2, #8
10043428:	0010      	movs	r0, r2
1004342a:	18bb      	adds	r3, r7, r2
1004342c:	1c0a      	adds	r2, r1, #0
1004342e:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
10043430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10043432:	2200      	movs	r2, #0
10043434:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
10043436:	261f      	movs	r6, #31
10043438:	19bc      	adds	r4, r7, r6
1004343a:	2216      	movs	r2, #22
1004343c:	18bd      	adds	r5, r7, r2
1004343e:	2218      	movs	r2, #24
10043440:	18ba      	adds	r2, r7, r2
10043442:	230b      	movs	r3, #11
10043444:	18fb      	adds	r3, r7, r3
10043446:	7819      	ldrb	r1, [r3, #0]
10043448:	68fb      	ldr	r3, [r7, #12]
1004344a:	469c      	mov	ip, r3
1004344c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004344e:	9301      	str	r3, [sp, #4]
10043450:	2338      	movs	r3, #56	@ 0x38
10043452:	181b      	adds	r3, r3, r0
10043454:	19db      	adds	r3, r3, r7
10043456:	881b      	ldrh	r3, [r3, #0]
10043458:	9300      	str	r3, [sp, #0]
1004345a:	002b      	movs	r3, r5
1004345c:	4660      	mov	r0, ip
1004345e:	f7ff ff5e 	bl	1004331e <NextRecordNoLock>
10043462:	0003      	movs	r3, r0
10043464:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
10043466:	19bb      	adds	r3, r7, r6
10043468:	781b      	ldrb	r3, [r3, #0]
1004346a:	2b00      	cmp	r3, #0
1004346c:	d002      	beq.n	10043474 <ReadNextRecordNoLock+0x64>
  {
    return status;
1004346e:	19bb      	adds	r3, r7, r6
10043470:	781b      	ldrb	r3, [r3, #0]
10043472:	e027      	b.n	100434c4 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
10043474:	2316      	movs	r3, #22
10043476:	18fb      	adds	r3, r7, r3
10043478:	881b      	ldrh	r3, [r3, #0]
1004347a:	2208      	movs	r2, #8
1004347c:	18ba      	adds	r2, r7, r2
1004347e:	8812      	ldrh	r2, [r2, #0]
10043480:	429a      	cmp	r2, r3
10043482:	d301      	bcc.n	10043488 <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10043484:	2306      	movs	r3, #6
10043486:	e01d      	b.n	100434c4 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
10043488:	69ba      	ldr	r2, [r7, #24]
1004348a:	2408      	movs	r4, #8
1004348c:	193b      	adds	r3, r7, r4
1004348e:	881b      	ldrh	r3, [r3, #0]
10043490:	18d1      	adds	r1, r2, r3
10043492:	2330      	movs	r3, #48	@ 0x30
10043494:	2208      	movs	r2, #8
10043496:	189b      	adds	r3, r3, r2
10043498:	19db      	adds	r3, r3, r7
1004349a:	881a      	ldrh	r2, [r3, #0]
1004349c:	2316      	movs	r3, #22
1004349e:	18fb      	adds	r3, r7, r3
100434a0:	881b      	ldrh	r3, [r3, #0]
100434a2:	0018      	movs	r0, r3
100434a4:	193b      	adds	r3, r7, r4
100434a6:	881b      	ldrh	r3, [r3, #0]
100434a8:	1ac3      	subs	r3, r0, r3
100434aa:	429a      	cmp	r2, r3
100434ac:	dd00      	ble.n	100434b0 <ReadNextRecordNoLock+0xa0>
100434ae:	001a      	movs	r2, r3
100434b0:	687b      	ldr	r3, [r7, #4]
100434b2:	0018      	movs	r0, r3
100434b4:	f00a fdcb 	bl	1004e04e <memcpy>
  *size_p = data_len;
100434b8:	2316      	movs	r3, #22
100434ba:	18fb      	adds	r3, r7, r3
100434bc:	881a      	ldrh	r2, [r3, #0]
100434be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100434c0:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
100434c2:	2300      	movs	r3, #0
}
100434c4:	0018      	movs	r0, r3
100434c6:	46bd      	mov	sp, r7
100434c8:	b009      	add	sp, #36	@ 0x24
100434ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

100434cc <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
100434cc:	b590      	push	{r4, r7, lr}
100434ce:	b089      	sub	sp, #36	@ 0x24
100434d0:	af00      	add	r7, sp, #0
100434d2:	60f8      	str	r0, [r7, #12]
100434d4:	607a      	str	r2, [r7, #4]
100434d6:	200a      	movs	r0, #10
100434d8:	183b      	adds	r3, r7, r0
100434da:	1c0a      	adds	r2, r1, #0
100434dc:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
100434de:	687b      	ldr	r3, [r7, #4]
100434e0:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
100434e2:	0001      	movs	r1, r0
100434e4:	187b      	adds	r3, r7, r1
100434e6:	881b      	ldrh	r3, [r3, #0]
100434e8:	089b      	lsrs	r3, r3, #2
100434ea:	b29a      	uxth	r2, r3
100434ec:	2016      	movs	r0, #22
100434ee:	183b      	adds	r3, r7, r0
100434f0:	0092      	lsls	r2, r2, #2
100434f2:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
100434f4:	187b      	adds	r3, r7, r1
100434f6:	881b      	ldrh	r3, [r3, #0]
100434f8:	b2d9      	uxtb	r1, r3
100434fa:	183b      	adds	r3, r7, r0
100434fc:	881b      	ldrh	r3, [r3, #0]
100434fe:	b2da      	uxtb	r2, r3
10043500:	2315      	movs	r3, #21
10043502:	18fb      	adds	r3, r7, r3
10043504:	1a8a      	subs	r2, r1, r2
10043506:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
10043508:	2300      	movs	r3, #0
1004350a:	61fb      	str	r3, [r7, #28]
1004350c:	e013      	b.n	10043536 <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
1004350e:	69fb      	ldr	r3, [r7, #28]
10043510:	69ba      	ldr	r2, [r7, #24]
10043512:	18d1      	adds	r1, r2, r3
10043514:	2310      	movs	r3, #16
10043516:	18fb      	adds	r3, r7, r3
10043518:	2204      	movs	r2, #4
1004351a:	0018      	movs	r0, r3
1004351c:	f00a fd97 	bl	1004e04e <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
10043520:	69fa      	ldr	r2, [r7, #28]
10043522:	68fb      	ldr	r3, [r7, #12]
10043524:	18d3      	adds	r3, r2, r3
10043526:	693a      	ldr	r2, [r7, #16]
10043528:	0019      	movs	r1, r3
1004352a:	2000      	movs	r0, #0
1004352c:	f001 fe14 	bl	10045158 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
10043530:	69fb      	ldr	r3, [r7, #28]
10043532:	3304      	adds	r3, #4
10043534:	61fb      	str	r3, [r7, #28]
10043536:	2416      	movs	r4, #22
10043538:	193b      	adds	r3, r7, r4
1004353a:	881b      	ldrh	r3, [r3, #0]
1004353c:	69fa      	ldr	r2, [r7, #28]
1004353e:	429a      	cmp	r2, r3
10043540:	dbe5      	blt.n	1004350e <write_data+0x42>
  }
  word = 0xFFFFFFFF;
10043542:	2301      	movs	r3, #1
10043544:	425b      	negs	r3, r3
10043546:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
10043548:	193b      	adds	r3, r7, r4
1004354a:	881b      	ldrh	r3, [r3, #0]
1004354c:	69ba      	ldr	r2, [r7, #24]
1004354e:	18d1      	adds	r1, r2, r3
10043550:	2315      	movs	r3, #21
10043552:	18fb      	adds	r3, r7, r3
10043554:	781a      	ldrb	r2, [r3, #0]
10043556:	2310      	movs	r3, #16
10043558:	18fb      	adds	r3, r7, r3
1004355a:	0018      	movs	r0, r3
1004355c:	f00a fd77 	bl	1004e04e <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
10043560:	193b      	adds	r3, r7, r4
10043562:	881a      	ldrh	r2, [r3, #0]
10043564:	68fb      	ldr	r3, [r7, #12]
10043566:	18d3      	adds	r3, r2, r3
10043568:	693a      	ldr	r2, [r7, #16]
1004356a:	0019      	movs	r1, r3
1004356c:	2000      	movs	r0, #0
1004356e:	f001 fdf3 	bl	10045158 <HAL_FLASH_Program>
}
10043572:	46c0      	nop			@ (mov r8, r8)
10043574:	46bd      	mov	sp, r7
10043576:	b009      	add	sp, #36	@ 0x24
10043578:	bd90      	pop	{r4, r7, pc}

1004357a <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1004357a:	b5f0      	push	{r4, r5, r6, r7, lr}
1004357c:	b087      	sub	sp, #28
1004357e:	af00      	add	r7, sp, #0
10043580:	60f8      	str	r0, [r7, #12]
10043582:	0008      	movs	r0, r1
10043584:	0011      	movs	r1, r2
10043586:	607b      	str	r3, [r7, #4]
10043588:	250b      	movs	r5, #11
1004358a:	197b      	adds	r3, r7, r5
1004358c:	1c02      	adds	r2, r0, #0
1004358e:	701a      	strb	r2, [r3, #0]
10043590:	2408      	movs	r4, #8
10043592:	193b      	adds	r3, r7, r4
10043594:	1c0a      	adds	r2, r1, #0
10043596:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
10043598:	2310      	movs	r3, #16
1004359a:	18fb      	adds	r3, r7, r3
1004359c:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
1004359e:	193b      	adds	r3, r7, r4
100435a0:	881b      	ldrh	r3, [r3, #0]
100435a2:	3b01      	subs	r3, #1
100435a4:	b29b      	uxth	r3, r3
100435a6:	b21b      	sxth	r3, r3
100435a8:	2203      	movs	r2, #3
100435aa:	4313      	orrs	r3, r2
100435ac:	b21b      	sxth	r3, r3
100435ae:	b29a      	uxth	r2, r3
100435b0:	193b      	adds	r3, r7, r4
100435b2:	3201      	adds	r2, #1
100435b4:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
100435b6:	697b      	ldr	r3, [r7, #20]
100435b8:	22fe      	movs	r2, #254	@ 0xfe
100435ba:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
100435bc:	697b      	ldr	r3, [r7, #20]
100435be:	197a      	adds	r2, r7, r5
100435c0:	7812      	ldrb	r2, [r2, #0]
100435c2:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
100435c4:	193a      	adds	r2, r7, r4
100435c6:	2520      	movs	r5, #32
100435c8:	2608      	movs	r6, #8
100435ca:	19ab      	adds	r3, r5, r6
100435cc:	2108      	movs	r1, #8
100435ce:	468c      	mov	ip, r1
100435d0:	44bc      	add	ip, r7
100435d2:	4463      	add	r3, ip
100435d4:	8812      	ldrh	r2, [r2, #0]
100435d6:	881b      	ldrh	r3, [r3, #0]
100435d8:	18d3      	adds	r3, r2, r3
100435da:	b29a      	uxth	r2, r3
100435dc:	697b      	ldr	r3, [r7, #20]
100435de:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
100435e0:	693a      	ldr	r2, [r7, #16]
100435e2:	68fb      	ldr	r3, [r7, #12]
100435e4:	0019      	movs	r1, r3
100435e6:	2000      	movs	r0, #0
100435e8:	f001 fdb6 	bl	10045158 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
100435ec:	68fb      	ldr	r3, [r7, #12]
100435ee:	1d18      	adds	r0, r3, #4
100435f0:	687a      	ldr	r2, [r7, #4]
100435f2:	193b      	adds	r3, r7, r4
100435f4:	881b      	ldrh	r3, [r3, #0]
100435f6:	0019      	movs	r1, r3
100435f8:	f7ff ff68 	bl	100434cc <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
100435fc:	193b      	adds	r3, r7, r4
100435fe:	881a      	ldrh	r2, [r3, #0]
10043600:	68fb      	ldr	r3, [r7, #12]
10043602:	18d3      	adds	r3, r2, r3
10043604:	1d18      	adds	r0, r3, #4
10043606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10043608:	19ab      	adds	r3, r5, r6
1004360a:	2108      	movs	r1, #8
1004360c:	468c      	mov	ip, r1
1004360e:	44bc      	add	ip, r7
10043610:	4463      	add	r3, ip
10043612:	881b      	ldrh	r3, [r3, #0]
10043614:	0019      	movs	r1, r3
10043616:	f7ff ff59 	bl	100434cc <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004361a:	2300      	movs	r3, #0
}
1004361c:	0018      	movs	r0, r3
1004361e:	46bd      	mov	sp, r7
10043620:	b007      	add	sp, #28
10043622:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043624 <ReadCurrentRecordNoLock>:
    return -1;
  }
}

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
10043624:	b590      	push	{r4, r7, lr}
10043626:	b087      	sub	sp, #28
10043628:	af00      	add	r7, sp, #0
1004362a:	60f8      	str	r0, [r7, #12]
1004362c:	0008      	movs	r0, r1
1004362e:	607a      	str	r2, [r7, #4]
10043630:	0019      	movs	r1, r3
10043632:	230a      	movs	r3, #10
10043634:	18fb      	adds	r3, r7, r3
10043636:	1c02      	adds	r2, r0, #0
10043638:	801a      	strh	r2, [r3, #0]
1004363a:	2308      	movs	r3, #8
1004363c:	0018      	movs	r0, r3
1004363e:	18fb      	adds	r3, r7, r3
10043640:	1c0a      	adds	r2, r1, #0
10043642:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
10043644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10043646:	2200      	movs	r2, #0
10043648:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
1004364a:	2224      	movs	r2, #36	@ 0x24
1004364c:	1813      	adds	r3, r2, r0
1004364e:	19db      	adds	r3, r3, r7
10043650:	881b      	ldrh	r3, [r3, #0]
10043652:	2b00      	cmp	r3, #0
10043654:	d00b      	beq.n	1004366e <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
10043656:	2110      	movs	r1, #16
10043658:	187b      	adds	r3, r7, r1
1004365a:	1812      	adds	r2, r2, r0
1004365c:	19d2      	adds	r2, r2, r7
1004365e:	8812      	ldrh	r2, [r2, #0]
10043660:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
10043662:	187b      	adds	r3, r7, r1
10043664:	22fe      	movs	r2, #254	@ 0xfe
10043666:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
10043668:	187b      	adds	r3, r7, r1
1004366a:	617b      	str	r3, [r7, #20]
1004366c:	e002      	b.n	10043674 <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004366e:	68fb      	ldr	r3, [r7, #12]
10043670:	685b      	ldr	r3, [r3, #4]
10043672:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10043674:	68fb      	ldr	r3, [r7, #12]
10043676:	685a      	ldr	r2, [r3, #4]
10043678:	68fb      	ldr	r3, [r7, #12]
1004367a:	689b      	ldr	r3, [r3, #8]
1004367c:	429a      	cmp	r2, r3
1004367e:	d203      	bcs.n	10043688 <ReadCurrentRecordNoLock+0x64>
10043680:	697b      	ldr	r3, [r7, #20]
10043682:	781b      	ldrb	r3, [r3, #0]
10043684:	2bff      	cmp	r3, #255	@ 0xff
10043686:	d101      	bne.n	1004368c <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
10043688:	2304      	movs	r3, #4
1004368a:	e033      	b.n	100436f4 <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004368c:	68fb      	ldr	r3, [r7, #12]
1004368e:	7b1b      	ldrb	r3, [r3, #12]
10043690:	2b00      	cmp	r3, #0
10043692:	d103      	bne.n	1004369c <ReadCurrentRecordNoLock+0x78>
10043694:	697b      	ldr	r3, [r7, #20]
10043696:	781b      	ldrb	r3, [r3, #0]
10043698:	2bfe      	cmp	r3, #254	@ 0xfe
1004369a:	d001      	beq.n	100436a0 <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004369c:	2305      	movs	r3, #5
1004369e:	e029      	b.n	100436f4 <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
100436a0:	697b      	ldr	r3, [r7, #20]
100436a2:	885b      	ldrh	r3, [r3, #2]
100436a4:	220a      	movs	r2, #10
100436a6:	18ba      	adds	r2, r7, r2
100436a8:	8812      	ldrh	r2, [r2, #0]
100436aa:	429a      	cmp	r2, r3
100436ac:	d301      	bcc.n	100436b2 <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
100436ae:	2306      	movs	r3, #6
100436b0:	e020      	b.n	100436f4 <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
100436b2:	68fb      	ldr	r3, [r7, #12]
100436b4:	2200      	movs	r2, #0
100436b6:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
100436b8:	240a      	movs	r4, #10
100436ba:	193b      	adds	r3, r7, r4
100436bc:	881a      	ldrh	r2, [r3, #0]
100436be:	68fb      	ldr	r3, [r7, #12]
100436c0:	685b      	ldr	r3, [r3, #4]
100436c2:	18d3      	adds	r3, r2, r3
100436c4:	3304      	adds	r3, #4
100436c6:	0018      	movs	r0, r3
100436c8:	2308      	movs	r3, #8
100436ca:	18fb      	adds	r3, r7, r3
100436cc:	881a      	ldrh	r2, [r3, #0]
100436ce:	697b      	ldr	r3, [r7, #20]
100436d0:	885b      	ldrh	r3, [r3, #2]
100436d2:	0019      	movs	r1, r3
100436d4:	193b      	adds	r3, r7, r4
100436d6:	881b      	ldrh	r3, [r3, #0]
100436d8:	1acb      	subs	r3, r1, r3
100436da:	429a      	cmp	r2, r3
100436dc:	dd00      	ble.n	100436e0 <ReadCurrentRecordNoLock+0xbc>
100436de:	001a      	movs	r2, r3
100436e0:	687b      	ldr	r3, [r7, #4]
100436e2:	0001      	movs	r1, r0
100436e4:	0018      	movs	r0, r3
100436e6:	f00a fcb2 	bl	1004e04e <memcpy>
  *size_p = record_p->header.length;
100436ea:	697b      	ldr	r3, [r7, #20]
100436ec:	885a      	ldrh	r2, [r3, #2]
100436ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100436f0:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
100436f2:	2300      	movs	r3, #0
}
100436f4:	0018      	movs	r0, r3
100436f6:	46bd      	mov	sp, r7
100436f8:	b007      	add	sp, #28
100436fa:	bd90      	pop	{r4, r7, pc}

100436fc <ErasePage>:
    return NVMDB_STATUS_INVALID_RECORD;
  }
}

static void ErasePage(uint32_t address, uint8_t num_pages)
{
100436fc:	b580      	push	{r7, lr}
100436fe:	b088      	sub	sp, #32
10043700:	af00      	add	r7, sp, #0
10043702:	6078      	str	r0, [r7, #4]
10043704:	000a      	movs	r2, r1
10043706:	1cfb      	adds	r3, r7, #3
10043708:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004370a:	687b      	ldr	r3, [r7, #4]
1004370c:	4a0d      	ldr	r2, [pc, #52]	@ (10043744 <ErasePage+0x48>)
1004370e:	4694      	mov	ip, r2
10043710:	4463      	add	r3, ip
10043712:	0adb      	lsrs	r3, r3, #11
10043714:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
10043716:	2110      	movs	r1, #16
10043718:	187b      	adds	r3, r7, r1
1004371a:	2200      	movs	r2, #0
1004371c:	601a      	str	r2, [r3, #0]
1004371e:	69fa      	ldr	r2, [r7, #28]
10043720:	187b      	adds	r3, r7, r1
10043722:	605a      	str	r2, [r3, #4]
10043724:	1cfb      	adds	r3, r7, #3
10043726:	781a      	ldrb	r2, [r3, #0]
10043728:	187b      	adds	r3, r7, r1
1004372a:	609a      	str	r2, [r3, #8]
1004372c:	230c      	movs	r3, #12
1004372e:	18fa      	adds	r2, r7, r3
10043730:	187b      	adds	r3, r7, r1
10043732:	0011      	movs	r1, r2
10043734:	0018      	movs	r0, r3
10043736:	f001 fde9 	bl	1004530c <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
1004373a:	46c0      	nop			@ (mov r8, r8)
1004373c:	46bd      	mov	sp, r7
1004373e:	b008      	add	sp, #32
10043740:	bd80      	pop	{r7, pc}
10043742:	46c0      	nop			@ (mov r8, r8)
10043744:	effc0000 	.word	0xeffc0000

10043748 <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
10043748:	b580      	push	{r7, lr}
1004374a:	b086      	sub	sp, #24
1004374c:	af00      	add	r7, sp, #0
1004374e:	60f8      	str	r0, [r7, #12]
10043750:	60b9      	str	r1, [r7, #8]
10043752:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
10043754:	687b      	ldr	r3, [r7, #4]
10043756:	055b      	lsls	r3, r3, #21
10043758:	0d5b      	lsrs	r3, r3, #21
1004375a:	d107      	bne.n	1004376c <WriteBufferToFlash+0x24>
1004375c:	68fb      	ldr	r3, [r7, #12]
1004375e:	687a      	ldr	r2, [r7, #4]
10043760:	68b9      	ldr	r1, [r7, #8]
10043762:	0018      	movs	r0, r3
10043764:	f00a fc06 	bl	1004df74 <memcmp>
10043768:	1e03      	subs	r3, r0, #0
1004376a:	d026      	beq.n	100437ba <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
1004376c:	687b      	ldr	r3, [r7, #4]
1004376e:	3b01      	subs	r3, #1
10043770:	4a14      	ldr	r2, [pc, #80]	@ (100437c4 <WriteBufferToFlash+0x7c>)
10043772:	4313      	orrs	r3, r2
10043774:	3301      	adds	r3, #1
10043776:	0adb      	lsrs	r3, r3, #11
10043778:	b2da      	uxtb	r2, r3
1004377a:	68fb      	ldr	r3, [r7, #12]
1004377c:	0011      	movs	r1, r2
1004377e:	0018      	movs	r0, r3
10043780:	f7ff ffbc 	bl	100436fc <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
10043784:	2300      	movs	r3, #0
10043786:	617b      	str	r3, [r7, #20]
10043788:	e012      	b.n	100437b0 <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
1004378a:	697a      	ldr	r2, [r7, #20]
1004378c:	68fb      	ldr	r3, [r7, #12]
1004378e:	18d1      	adds	r1, r2, r3
10043790:	697b      	ldr	r3, [r7, #20]
10043792:	2b00      	cmp	r3, #0
10043794:	da00      	bge.n	10043798 <WriteBufferToFlash+0x50>
10043796:	3303      	adds	r3, #3
10043798:	109b      	asrs	r3, r3, #2
1004379a:	009b      	lsls	r3, r3, #2
1004379c:	68ba      	ldr	r2, [r7, #8]
1004379e:	18d3      	adds	r3, r2, r3
100437a0:	681b      	ldr	r3, [r3, #0]
100437a2:	001a      	movs	r2, r3
100437a4:	2000      	movs	r0, #0
100437a6:	f001 fcd7 	bl	10045158 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
100437aa:	697b      	ldr	r3, [r7, #20]
100437ac:	3304      	adds	r3, #4
100437ae:	617b      	str	r3, [r7, #20]
100437b0:	697b      	ldr	r3, [r7, #20]
100437b2:	687a      	ldr	r2, [r7, #4]
100437b4:	429a      	cmp	r2, r3
100437b6:	d8e8      	bhi.n	1004378a <WriteBufferToFlash+0x42>
100437b8:	e000      	b.n	100437bc <WriteBufferToFlash+0x74>
    return;
100437ba:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
100437bc:	46bd      	mov	sp, r7
100437be:	b006      	add	sp, #24
100437c0:	bd80      	pop	{r7, pc}
100437c2:	46c0      	nop			@ (mov r8, r8)
100437c4:	000007ff 	.word	0x000007ff

100437c8 <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
100437c8:	b580      	push	{r7, lr}
100437ca:	b082      	sub	sp, #8
100437cc:	af00      	add	r7, sp, #0
100437ce:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
100437d0:	687b      	ldr	r3, [r7, #4]
100437d2:	2201      	movs	r2, #1
100437d4:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
100437d6:	687b      	ldr	r3, [r7, #4]
100437d8:	2200      	movs	r2, #0
100437da:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
100437dc:	687b      	ldr	r3, [r7, #4]
100437de:	2200      	movs	r2, #0
100437e0:	809a      	strh	r2, [r3, #4]
}
100437e2:	46c0      	nop			@ (mov r8, r8)
100437e4:	46bd      	mov	sp, r7
100437e6:	b002      	add	sp, #8
100437e8:	bd80      	pop	{r7, pc}

100437ea <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
100437ea:	b5f0      	push	{r4, r5, r6, r7, lr}
100437ec:	b08d      	sub	sp, #52	@ 0x34
100437ee:	af04      	add	r7, sp, #16
100437f0:	60f8      	str	r0, [r7, #12]
100437f2:	60b9      	str	r1, [r7, #8]
100437f4:	603b      	str	r3, [r7, #0]
100437f6:	1dbb      	adds	r3, r7, #6
100437f8:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
100437fa:	231e      	movs	r3, #30
100437fc:	18fb      	adds	r3, r7, r3
100437fe:	2200      	movs	r2, #0
10043800:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
10043802:	1dbb      	adds	r3, r7, #6
10043804:	881a      	ldrh	r2, [r3, #0]
10043806:	68bb      	ldr	r3, [r7, #8]
10043808:	21ff      	movs	r1, #255	@ 0xff
1004380a:	0018      	movs	r0, r3
1004380c:	f00a fbc0 	bl	1004df90 <memset>

  header.valid_flag = VALID_RECORD;
10043810:	2310      	movs	r3, #16
10043812:	18fb      	adds	r3, r7, r3
10043814:	22fe      	movs	r2, #254	@ 0xfe
10043816:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10043818:	1dba      	adds	r2, r7, #6
1004381a:	251e      	movs	r5, #30
1004381c:	197b      	adds	r3, r7, r5
1004381e:	8812      	ldrh	r2, [r2, #0]
10043820:	881b      	ldrh	r3, [r3, #0]
10043822:	1ad3      	subs	r3, r2, r3
10043824:	b29a      	uxth	r2, r3
10043826:	231c      	movs	r3, #28
10043828:	18fb      	adds	r3, r7, r3
1004382a:	3a04      	subs	r2, #4
1004382c:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
1004382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043830:	781b      	ldrb	r3, [r3, #0]
10043832:	2b00      	cmp	r3, #0
10043834:	d04e      	beq.n	100438d4 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
10043836:	197b      	adds	r3, r7, r5
10043838:	881b      	ldrh	r3, [r3, #0]
1004383a:	3304      	adds	r3, #4
1004383c:	68ba      	ldr	r2, [r7, #8]
1004383e:	18d1      	adds	r1, r2, r3
10043840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043842:	889b      	ldrh	r3, [r3, #4]
10043844:	261b      	movs	r6, #27
10043846:	19bc      	adds	r4, r7, r6
10043848:	68f8      	ldr	r0, [r7, #12]
1004384a:	2210      	movs	r2, #16
1004384c:	18ba      	adds	r2, r7, r2
1004384e:	3201      	adds	r2, #1
10043850:	9203      	str	r2, [sp, #12]
10043852:	9302      	str	r3, [sp, #8]
10043854:	2216      	movs	r2, #22
10043856:	18bb      	adds	r3, r7, r2
10043858:	9301      	str	r3, [sp, #4]
1004385a:	231c      	movs	r3, #28
1004385c:	18fb      	adds	r3, r7, r3
1004385e:	881b      	ldrh	r3, [r3, #0]
10043860:	9300      	str	r3, [sp, #0]
10043862:	000b      	movs	r3, r1
10043864:	2200      	movs	r2, #0
10043866:	21ff      	movs	r1, #255	@ 0xff
10043868:	f7ff fdd2 	bl	10043410 <ReadNextRecordNoLock>
1004386c:	0003      	movs	r3, r0
1004386e:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
10043870:	2216      	movs	r2, #22
10043872:	18bb      	adds	r3, r7, r2
10043874:	881a      	ldrh	r2, [r3, #0]
10043876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043878:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
1004387a:	19bb      	adds	r3, r7, r6
1004387c:	781b      	ldrb	r3, [r3, #0]
1004387e:	2b00      	cmp	r3, #0
10043880:	d006      	beq.n	10043890 <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
10043882:	683b      	ldr	r3, [r7, #0]
10043884:	197a      	adds	r2, r7, r5
10043886:	8812      	ldrh	r2, [r2, #0]
10043888:	801a      	strh	r2, [r3, #0]
        return status;
1004388a:	19bb      	adds	r3, r7, r6
1004388c:	781b      	ldrb	r3, [r3, #0]
1004388e:	e0a1      	b.n	100439d4 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
10043890:	2316      	movs	r3, #22
10043892:	18fb      	adds	r3, r7, r3
10043894:	881a      	ldrh	r2, [r3, #0]
10043896:	2110      	movs	r1, #16
10043898:	187b      	adds	r3, r7, r1
1004389a:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
1004389c:	251e      	movs	r5, #30
1004389e:	197b      	adds	r3, r7, r5
100438a0:	881b      	ldrh	r3, [r3, #0]
100438a2:	68ba      	ldr	r2, [r7, #8]
100438a4:	18d3      	adds	r3, r2, r3
100438a6:	000c      	movs	r4, r1
100438a8:	1879      	adds	r1, r7, r1
100438aa:	2204      	movs	r2, #4
100438ac:	0018      	movs	r0, r3
100438ae:	f00a fbce 	bl	1004e04e <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
100438b2:	193b      	adds	r3, r7, r4
100438b4:	885b      	ldrh	r3, [r3, #2]
100438b6:	3303      	adds	r3, #3
100438b8:	b29b      	uxth	r3, r3
100438ba:	b21b      	sxth	r3, r3
100438bc:	2203      	movs	r2, #3
100438be:	4313      	orrs	r3, r2
100438c0:	b21b      	sxth	r3, r3
100438c2:	b29a      	uxth	r2, r3
100438c4:	197b      	adds	r3, r7, r5
100438c6:	881b      	ldrh	r3, [r3, #0]
100438c8:	18d3      	adds	r3, r2, r3
100438ca:	b29a      	uxth	r2, r3
100438cc:	197b      	adds	r3, r7, r5
100438ce:	3201      	adds	r2, #1
100438d0:	801a      	strh	r2, [r3, #0]
100438d2:	e031      	b.n	10043938 <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
100438d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100438d6:	8859      	ldrh	r1, [r3, #2]
100438d8:	231e      	movs	r3, #30
100438da:	18fb      	adds	r3, r7, r3
100438dc:	881b      	ldrh	r3, [r3, #0]
100438de:	68ba      	ldr	r2, [r7, #8]
100438e0:	18d5      	adds	r5, r2, r3
100438e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100438e4:	889b      	ldrh	r3, [r3, #4]
100438e6:	261b      	movs	r6, #27
100438e8:	19bc      	adds	r4, r7, r6
100438ea:	221c      	movs	r2, #28
100438ec:	18ba      	adds	r2, r7, r2
100438ee:	8812      	ldrh	r2, [r2, #0]
100438f0:	68f8      	ldr	r0, [r7, #12]
100438f2:	9301      	str	r3, [sp, #4]
100438f4:	2316      	movs	r3, #22
100438f6:	18fb      	adds	r3, r7, r3
100438f8:	9300      	str	r3, [sp, #0]
100438fa:	0013      	movs	r3, r2
100438fc:	002a      	movs	r2, r5
100438fe:	f7ff fe91 	bl	10043624 <ReadCurrentRecordNoLock>
10043902:	0003      	movs	r3, r0
10043904:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
10043906:	19bb      	adds	r3, r7, r6
10043908:	781b      	ldrb	r3, [r3, #0]
1004390a:	2b00      	cmp	r3, #0
1004390c:	d002      	beq.n	10043914 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
1004390e:	19bb      	adds	r3, r7, r6
10043910:	781b      	ldrb	r3, [r3, #0]
10043912:	e05f      	b.n	100439d4 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
10043914:	2316      	movs	r3, #22
10043916:	18fb      	adds	r3, r7, r3
10043918:	881a      	ldrh	r2, [r3, #0]
1004391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004391c:	885b      	ldrh	r3, [r3, #2]
1004391e:	1ad3      	subs	r3, r2, r3
10043920:	b29b      	uxth	r3, r3
10043922:	3b01      	subs	r3, #1
10043924:	b29b      	uxth	r3, r3
10043926:	b21b      	sxth	r3, r3
10043928:	2203      	movs	r2, #3
1004392a:	4313      	orrs	r3, r2
1004392c:	b21b      	sxth	r3, r3
1004392e:	b29a      	uxth	r2, r3
10043930:	231e      	movs	r3, #30
10043932:	18fb      	adds	r3, r7, r3
10043934:	3201      	adds	r2, #1
10043936:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
10043938:	2316      	movs	r3, #22
1004393a:	18fb      	adds	r3, r7, r3
1004393c:	881a      	ldrh	r2, [r3, #0]
1004393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043940:	885b      	ldrh	r3, [r3, #2]
10043942:	1ad3      	subs	r3, r2, r3
10043944:	b29b      	uxth	r3, r3
10043946:	3b01      	subs	r3, #1
10043948:	b29b      	uxth	r3, r3
1004394a:	b21b      	sxth	r3, r3
1004394c:	2203      	movs	r2, #3
1004394e:	4313      	orrs	r3, r2
10043950:	b21b      	sxth	r3, r3
10043952:	b29a      	uxth	r2, r3
10043954:	2118      	movs	r1, #24
10043956:	187b      	adds	r3, r7, r1
10043958:	3201      	adds	r2, #1
1004395a:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
1004395c:	187a      	adds	r2, r7, r1
1004395e:	211c      	movs	r1, #28
10043960:	187b      	adds	r3, r7, r1
10043962:	8812      	ldrh	r2, [r2, #0]
10043964:	881b      	ldrh	r3, [r3, #0]
10043966:	429a      	cmp	r2, r3
10043968:	d910      	bls.n	1004398c <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
1004396a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004396c:	2200      	movs	r2, #0
1004396e:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
10043970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043972:	885a      	ldrh	r2, [r3, #2]
10043974:	187b      	adds	r3, r7, r1
10043976:	881b      	ldrh	r3, [r3, #0]
10043978:	18d3      	adds	r3, r2, r3
1004397a:	b29a      	uxth	r2, r3
1004397c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004397e:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
10043980:	683b      	ldr	r3, [r7, #0]
10043982:	1dba      	adds	r2, r7, #6
10043984:	8812      	ldrh	r2, [r2, #0]
10043986:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
10043988:	2300      	movs	r3, #0
1004398a:	e023      	b.n	100439d4 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
1004398c:	2318      	movs	r3, #24
1004398e:	18fa      	adds	r2, r7, r3
10043990:	231c      	movs	r3, #28
10043992:	18fb      	adds	r3, r7, r3
10043994:	8812      	ldrh	r2, [r2, #0]
10043996:	881b      	ldrh	r3, [r3, #0]
10043998:	429a      	cmp	r2, r3
1004399a:	d10b      	bne.n	100439b4 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
1004399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004399e:	2201      	movs	r2, #1
100439a0:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
100439a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100439a4:	2200      	movs	r2, #0
100439a6:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
100439a8:	683b      	ldr	r3, [r7, #0]
100439aa:	1dba      	adds	r2, r7, #6
100439ac:	8812      	ldrh	r2, [r2, #0]
100439ae:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
100439b0:	2300      	movs	r3, #0
100439b2:	e00f      	b.n	100439d4 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
100439b4:	2318      	movs	r3, #24
100439b6:	18fa      	adds	r2, r7, r3
100439b8:	231c      	movs	r3, #28
100439ba:	18fb      	adds	r3, r7, r3
100439bc:	8812      	ldrh	r2, [r2, #0]
100439be:	881b      	ldrh	r3, [r3, #0]
100439c0:	429a      	cmp	r2, r3
100439c2:	d300      	bcc.n	100439c6 <LoadDBToRAM+0x1dc>
100439c4:	e728      	b.n	10043818 <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
100439c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100439c8:	2201      	movs	r2, #1
100439ca:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
100439cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100439ce:	2200      	movs	r2, #0
100439d0:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
100439d2:	e721      	b.n	10043818 <LoadDBToRAM+0x2e>
    }
  }
}
100439d4:	0018      	movs	r0, r3
100439d6:	46bd      	mov	sp, r7
100439d8:	b009      	add	sp, #36	@ 0x24
100439da:	bdf0      	pop	{r4, r5, r6, r7, pc}

100439dc <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
100439dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100439de:	4c60      	ldr	r4, [pc, #384]	@ (10043b60 <CleanLargeDB+0x184>)
100439e0:	44a5      	add	sp, r4
100439e2:	af02      	add	r7, sp, #8
100439e4:	0002      	movs	r2, r0
100439e6:	4b5f      	ldr	r3, [pc, #380]	@ (10043b64 <CleanLargeDB+0x188>)
100439e8:	2184      	movs	r1, #132	@ 0x84
100439ea:	0109      	lsls	r1, r1, #4
100439ec:	185b      	adds	r3, r3, r1
100439ee:	19db      	adds	r3, r3, r7
100439f0:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
100439f2:	4b5c      	ldr	r3, [pc, #368]	@ (10043b64 <CleanLargeDB+0x188>)
100439f4:	185b      	adds	r3, r3, r1
100439f6:	19db      	adds	r3, r3, r7
100439f8:	781a      	ldrb	r2, [r3, #0]
100439fa:	495b      	ldr	r1, [pc, #364]	@ (10043b68 <CleanLargeDB+0x18c>)
100439fc:	0013      	movs	r3, r2
100439fe:	009b      	lsls	r3, r3, #2
10043a00:	189b      	adds	r3, r3, r2
10043a02:	009b      	lsls	r3, r3, #2
10043a04:	18cb      	adds	r3, r1, r3
10043a06:	330a      	adds	r3, #10
10043a08:	881b      	ldrh	r3, [r3, #0]
10043a0a:	2b00      	cmp	r3, #0
10043a0c:	d101      	bne.n	10043a12 <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
10043a0e:	2300      	movs	r3, #0
10043a10:	e0a0      	b.n	10043b54 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
10043a12:	4b56      	ldr	r3, [pc, #344]	@ (10043b6c <CleanLargeDB+0x190>)
10043a14:	18fc      	adds	r4, r7, r3
10043a16:	4d56      	ldr	r5, [pc, #344]	@ (10043b70 <CleanLargeDB+0x194>)
10043a18:	197a      	adds	r2, r7, r5
10043a1a:	4b52      	ldr	r3, [pc, #328]	@ (10043b64 <CleanLargeDB+0x188>)
10043a1c:	2184      	movs	r1, #132	@ 0x84
10043a1e:	0109      	lsls	r1, r1, #4
10043a20:	185b      	adds	r3, r3, r1
10043a22:	19db      	adds	r3, r3, r7
10043a24:	781b      	ldrb	r3, [r3, #0]
10043a26:	0011      	movs	r1, r2
10043a28:	0018      	movs	r0, r3
10043a2a:	f000 fc4b 	bl	100442c4 <NVMDB_HandleInit>
10043a2e:	0003      	movs	r3, r0
10043a30:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
10043a32:	197b      	adds	r3, r7, r5
10043a34:	685b      	ldr	r3, [r3, #4]
10043a36:	4a4f      	ldr	r2, [pc, #316]	@ (10043b74 <CleanLargeDB+0x198>)
10043a38:	18ba      	adds	r2, r7, r2
10043a3a:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
10043a3c:	4b4e      	ldr	r3, [pc, #312]	@ (10043b78 <CleanLargeDB+0x19c>)
10043a3e:	18fb      	adds	r3, r7, r3
10043a40:	0018      	movs	r0, r3
10043a42:	f7ff fec1 	bl	100437c8 <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
10043a46:	4e49      	ldr	r6, [pc, #292]	@ (10043b6c <CleanLargeDB+0x190>)
10043a48:	19bc      	adds	r4, r7, r6
10043a4a:	4b4c      	ldr	r3, [pc, #304]	@ (10043b7c <CleanLargeDB+0x1a0>)
10043a4c:	18fd      	adds	r5, r7, r3
10043a4e:	2380      	movs	r3, #128	@ 0x80
10043a50:	011a      	lsls	r2, r3, #4
10043a52:	230c      	movs	r3, #12
10043a54:	18f9      	adds	r1, r7, r3
10043a56:	4b46      	ldr	r3, [pc, #280]	@ (10043b70 <CleanLargeDB+0x194>)
10043a58:	18f8      	adds	r0, r7, r3
10043a5a:	4b47      	ldr	r3, [pc, #284]	@ (10043b78 <CleanLargeDB+0x19c>)
10043a5c:	18fb      	adds	r3, r7, r3
10043a5e:	9300      	str	r3, [sp, #0]
10043a60:	002b      	movs	r3, r5
10043a62:	f7ff fec2 	bl	100437ea <LoadDBToRAM>
10043a66:	0003      	movs	r3, r0
10043a68:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
10043a6a:	19bb      	adds	r3, r7, r6
10043a6c:	781b      	ldrb	r3, [r3, #0]
10043a6e:	2b04      	cmp	r3, #4
10043a70:	d006      	beq.n	10043a80 <CleanLargeDB+0xa4>
10043a72:	19bb      	adds	r3, r7, r6
10043a74:	781b      	ldrb	r3, [r3, #0]
10043a76:	2b00      	cmp	r3, #0
10043a78:	d002      	beq.n	10043a80 <CleanLargeDB+0xa4>
    {
      return status;
10043a7a:	19bb      	adds	r3, r7, r6
10043a7c:	781b      	ldrb	r3, [r3, #0]
10043a7e:	e069      	b.n	10043b54 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
10043a80:	4b3e      	ldr	r3, [pc, #248]	@ (10043b7c <CleanLargeDB+0x1a0>)
10043a82:	18fb      	adds	r3, r7, r3
10043a84:	881a      	ldrh	r2, [r3, #0]
10043a86:	2380      	movs	r3, #128	@ 0x80
10043a88:	011b      	lsls	r3, r3, #4
10043a8a:	429a      	cmp	r2, r3
10043a8c:	d004      	beq.n	10043a98 <CleanLargeDB+0xbc>
10043a8e:	4b37      	ldr	r3, [pc, #220]	@ (10043b6c <CleanLargeDB+0x190>)
10043a90:	18fb      	adds	r3, r7, r3
10043a92:	781b      	ldrb	r3, [r3, #0]
10043a94:	2b00      	cmp	r3, #0
10043a96:	d0d6      	beq.n	10043a46 <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
10043a98:	4a38      	ldr	r2, [pc, #224]	@ (10043b7c <CleanLargeDB+0x1a0>)
10043a9a:	18bb      	adds	r3, r7, r2
10043a9c:	881b      	ldrh	r3, [r3, #0]
10043a9e:	2b00      	cmp	r3, #0
10043aa0:	d019      	beq.n	10043ad6 <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
10043aa2:	18bb      	adds	r3, r7, r2
10043aa4:	881b      	ldrh	r3, [r3, #0]
10043aa6:	001a      	movs	r2, r3
10043aa8:	230c      	movs	r3, #12
10043aaa:	18f9      	adds	r1, r7, r3
10043aac:	4c31      	ldr	r4, [pc, #196]	@ (10043b74 <CleanLargeDB+0x198>)
10043aae:	193b      	adds	r3, r7, r4
10043ab0:	681b      	ldr	r3, [r3, #0]
10043ab2:	0018      	movs	r0, r3
10043ab4:	f7ff fe48 	bl	10043748 <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
10043ab8:	0022      	movs	r2, r4
10043aba:	18bb      	adds	r3, r7, r2
10043abc:	681b      	ldr	r3, [r3, #0]
10043abe:	2180      	movs	r1, #128	@ 0x80
10043ac0:	0109      	lsls	r1, r1, #4
10043ac2:	468c      	mov	ip, r1
10043ac4:	4463      	add	r3, ip
10043ac6:	18ba      	adds	r2, r7, r2
10043ac8:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
10043aca:	4b28      	ldr	r3, [pc, #160]	@ (10043b6c <CleanLargeDB+0x190>)
10043acc:	18fb      	adds	r3, r7, r3
10043ace:	781b      	ldrb	r3, [r3, #0]
10043ad0:	2b00      	cmp	r3, #0
10043ad2:	d102      	bne.n	10043ada <CleanLargeDB+0xfe>
  {
10043ad4:	e7b7      	b.n	10043a46 <CleanLargeDB+0x6a>
        break;
10043ad6:	46c0      	nop			@ (mov r8, r8)
10043ad8:	e000      	b.n	10043adc <CleanLargeDB+0x100>
      {
        break;
10043ada:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
10043adc:	4b24      	ldr	r3, [pc, #144]	@ (10043b70 <CleanLargeDB+0x194>)
10043ade:	18fb      	adds	r3, r7, r3
10043ae0:	689b      	ldr	r3, [r3, #8]
10043ae2:	3b01      	subs	r3, #1
10043ae4:	4a26      	ldr	r2, [pc, #152]	@ (10043b80 <CleanLargeDB+0x1a4>)
10043ae6:	431a      	orrs	r2, r3
10043ae8:	4922      	ldr	r1, [pc, #136]	@ (10043b74 <CleanLargeDB+0x198>)
10043aea:	187b      	adds	r3, r7, r1
10043aec:	681b      	ldr	r3, [r3, #0]
10043aee:	1ad3      	subs	r3, r2, r3
10043af0:	3301      	adds	r3, #1
10043af2:	0ada      	lsrs	r2, r3, #11
10043af4:	4823      	ldr	r0, [pc, #140]	@ (10043b84 <CleanLargeDB+0x1a8>)
10043af6:	183b      	adds	r3, r7, r0
10043af8:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10043afa:	187b      	adds	r3, r7, r1
10043afc:	681b      	ldr	r3, [r3, #0]
10043afe:	4a22      	ldr	r2, [pc, #136]	@ (10043b88 <CleanLargeDB+0x1ac>)
10043b00:	4694      	mov	ip, r2
10043b02:	4463      	add	r3, ip
10043b04:	0ada      	lsrs	r2, r3, #11
10043b06:	4c21      	ldr	r4, [pc, #132]	@ (10043b8c <CleanLargeDB+0x1b0>)
10043b08:	193b      	adds	r3, r7, r4
10043b0a:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10043b0c:	2181      	movs	r1, #129	@ 0x81
10043b0e:	0109      	lsls	r1, r1, #4
10043b10:	187b      	adds	r3, r7, r1
10043b12:	2200      	movs	r2, #0
10043b14:	601a      	str	r2, [r3, #0]
10043b16:	193b      	adds	r3, r7, r4
10043b18:	781a      	ldrb	r2, [r3, #0]
10043b1a:	187b      	adds	r3, r7, r1
10043b1c:	605a      	str	r2, [r3, #4]
10043b1e:	183b      	adds	r3, r7, r0
10043b20:	781a      	ldrb	r2, [r3, #0]
10043b22:	187b      	adds	r3, r7, r1
10043b24:	609a      	str	r2, [r3, #8]
10043b26:	4b1a      	ldr	r3, [pc, #104]	@ (10043b90 <CleanLargeDB+0x1b4>)
10043b28:	18fa      	adds	r2, r7, r3
10043b2a:	187b      	adds	r3, r7, r1
10043b2c:	0011      	movs	r1, r2
10043b2e:	0018      	movs	r0, r3
10043b30:	f001 fbec 	bl	1004530c <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
10043b34:	4b0b      	ldr	r3, [pc, #44]	@ (10043b64 <CleanLargeDB+0x188>)
10043b36:	2284      	movs	r2, #132	@ 0x84
10043b38:	0112      	lsls	r2, r2, #4
10043b3a:	189b      	adds	r3, r3, r2
10043b3c:	19db      	adds	r3, r3, r7
10043b3e:	781a      	ldrb	r2, [r3, #0]
10043b40:	0013      	movs	r3, r2
10043b42:	009b      	lsls	r3, r3, #2
10043b44:	189b      	adds	r3, r3, r2
10043b46:	009b      	lsls	r3, r3, #2
10043b48:	4a07      	ldr	r2, [pc, #28]	@ (10043b68 <CleanLargeDB+0x18c>)
10043b4a:	189b      	adds	r3, r3, r2
10043b4c:	0018      	movs	r0, r3
10043b4e:	f7ff fb93 	bl	10043278 <NVMDB_get_info>
10043b52:	0003      	movs	r3, r0
}
10043b54:	0018      	movs	r0, r3
10043b56:	46bd      	mov	sp, r7
10043b58:	4b0e      	ldr	r3, [pc, #56]	@ (10043b94 <CleanLargeDB+0x1b8>)
10043b5a:	449d      	add	sp, r3
10043b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043b5e:	46c0      	nop			@ (mov r8, r8)
10043b60:	fffff7b4 	.word	0xfffff7b4
10043b64:	fffff7c7 	.word	0xfffff7c7
10043b68:	20000454 	.word	0x20000454
10043b6c:	0000083b 	.word	0x0000083b
10043b70:	00000824 	.word	0x00000824
10043b74:	0000083c 	.word	0x0000083c
10043b78:	0000081c 	.word	0x0000081c
10043b7c:	00000836 	.word	0x00000836
10043b80:	000007ff 	.word	0x000007ff
10043b84:	0000083a 	.word	0x0000083a
10043b88:	effc0000 	.word	0xeffc0000
10043b8c:	00000839 	.word	0x00000839
10043b90:	0000080c 	.word	0x0000080c
10043b94:	00000844 	.word	0x00000844

10043b98 <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
10043b98:	b5f0      	push	{r4, r5, r6, r7, lr}
10043b9a:	4c7a      	ldr	r4, [pc, #488]	@ (10043d84 <CleanPage+0x1ec>)
10043b9c:	44a5      	add	sp, r4
10043b9e:	af02      	add	r7, sp, #8
10043ba0:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
10043ba2:	4b79      	ldr	r3, [pc, #484]	@ (10043d88 <CleanPage+0x1f0>)
10043ba4:	18fb      	adds	r3, r7, r3
10043ba6:	2200      	movs	r2, #0
10043ba8:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
10043baa:	4b78      	ldr	r3, [pc, #480]	@ (10043d8c <CleanPage+0x1f4>)
10043bac:	18fb      	adds	r3, r7, r3
10043bae:	2200      	movs	r2, #0
10043bb0:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043bb2:	2300      	movs	r3, #0
10043bb4:	4a76      	ldr	r2, [pc, #472]	@ (10043d90 <CleanPage+0x1f8>)
10043bb6:	18ba      	adds	r2, r7, r2
10043bb8:	6013      	str	r3, [r2, #0]
10043bba:	e023      	b.n	10043c04 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10043bbc:	687b      	ldr	r3, [r7, #4]
10043bbe:	6899      	ldr	r1, [r3, #8]
10043bc0:	4b73      	ldr	r3, [pc, #460]	@ (10043d90 <CleanPage+0x1f8>)
10043bc2:	18fb      	adds	r3, r7, r3
10043bc4:	681a      	ldr	r2, [r3, #0]
10043bc6:	0013      	movs	r3, r2
10043bc8:	005b      	lsls	r3, r3, #1
10043bca:	189b      	adds	r3, r3, r2
10043bcc:	009b      	lsls	r3, r3, #2
10043bce:	18ca      	adds	r2, r1, r3
10043bd0:	4970      	ldr	r1, [pc, #448]	@ (10043d94 <CleanPage+0x1fc>)
10043bd2:	187b      	adds	r3, r7, r1
10043bd4:	7812      	ldrb	r2, [r2, #0]
10043bd6:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
10043bd8:	187b      	adds	r3, r7, r1
10043bda:	781a      	ldrb	r2, [r3, #0]
10043bdc:	496e      	ldr	r1, [pc, #440]	@ (10043d98 <CleanPage+0x200>)
10043bde:	0013      	movs	r3, r2
10043be0:	009b      	lsls	r3, r3, #2
10043be2:	189b      	adds	r3, r3, r2
10043be4:	009b      	lsls	r3, r3, #2
10043be6:	18cb      	adds	r3, r1, r3
10043be8:	330a      	adds	r3, #10
10043bea:	881b      	ldrh	r3, [r3, #0]
10043bec:	2b00      	cmp	r3, #0
10043bee:	d003      	beq.n	10043bf8 <CleanPage+0x60>
    {
      found = TRUE;
10043bf0:	4b66      	ldr	r3, [pc, #408]	@ (10043d8c <CleanPage+0x1f4>)
10043bf2:	18fb      	adds	r3, r7, r3
10043bf4:	2201      	movs	r2, #1
10043bf6:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043bf8:	4a65      	ldr	r2, [pc, #404]	@ (10043d90 <CleanPage+0x1f8>)
10043bfa:	18bb      	adds	r3, r7, r2
10043bfc:	681b      	ldr	r3, [r3, #0]
10043bfe:	3301      	adds	r3, #1
10043c00:	18ba      	adds	r2, r7, r2
10043c02:	6013      	str	r3, [r2, #0]
10043c04:	687b      	ldr	r3, [r7, #4]
10043c06:	791b      	ldrb	r3, [r3, #4]
10043c08:	001a      	movs	r2, r3
10043c0a:	4b61      	ldr	r3, [pc, #388]	@ (10043d90 <CleanPage+0x1f8>)
10043c0c:	18fb      	adds	r3, r7, r3
10043c0e:	681b      	ldr	r3, [r3, #0]
10043c10:	4293      	cmp	r3, r2
10043c12:	dbd3      	blt.n	10043bbc <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
10043c14:	4b5d      	ldr	r3, [pc, #372]	@ (10043d8c <CleanPage+0x1f4>)
10043c16:	18fb      	adds	r3, r7, r3
10043c18:	781b      	ldrb	r3, [r3, #0]
10043c1a:	2b00      	cmp	r3, #0
10043c1c:	d101      	bne.n	10043c22 <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
10043c1e:	2300      	movs	r3, #0
10043c20:	e0ab      	b.n	10043d7a <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
10043c22:	2380      	movs	r3, #128	@ 0x80
10043c24:	011a      	lsls	r2, r3, #4
10043c26:	2308      	movs	r3, #8
10043c28:	18fb      	adds	r3, r7, r3
10043c2a:	21ff      	movs	r1, #255	@ 0xff
10043c2c:	0018      	movs	r0, r3
10043c2e:	f00a f9af 	bl	1004df90 <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043c32:	2300      	movs	r3, #0
10043c34:	4a56      	ldr	r2, [pc, #344]	@ (10043d90 <CleanPage+0x1f8>)
10043c36:	18ba      	adds	r2, r7, r2
10043c38:	6013      	str	r3, [r2, #0]
10043c3a:	e051      	b.n	10043ce0 <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10043c3c:	687b      	ldr	r3, [r7, #4]
10043c3e:	6899      	ldr	r1, [r3, #8]
10043c40:	4853      	ldr	r0, [pc, #332]	@ (10043d90 <CleanPage+0x1f8>)
10043c42:	183b      	adds	r3, r7, r0
10043c44:	681a      	ldr	r2, [r3, #0]
10043c46:	0013      	movs	r3, r2
10043c48:	005b      	lsls	r3, r3, #1
10043c4a:	189b      	adds	r3, r3, r2
10043c4c:	009b      	lsls	r3, r3, #2
10043c4e:	18ca      	adds	r2, r1, r3
10043c50:	4d50      	ldr	r5, [pc, #320]	@ (10043d94 <CleanPage+0x1fc>)
10043c52:	197b      	adds	r3, r7, r5
10043c54:	7812      	ldrb	r2, [r2, #0]
10043c56:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
10043c58:	687b      	ldr	r3, [r7, #4]
10043c5a:	6899      	ldr	r1, [r3, #8]
10043c5c:	183b      	adds	r3, r7, r0
10043c5e:	681a      	ldr	r2, [r3, #0]
10043c60:	0013      	movs	r3, r2
10043c62:	005b      	lsls	r3, r3, #1
10043c64:	189b      	adds	r3, r3, r2
10043c66:	009b      	lsls	r3, r3, #2
10043c68:	18cb      	adds	r3, r1, r3
10043c6a:	685b      	ldr	r3, [r3, #4]
10043c6c:	2282      	movs	r2, #130	@ 0x82
10043c6e:	0112      	lsls	r2, r2, #4
10043c70:	18ba      	adds	r2, r7, r2
10043c72:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
10043c74:	4e49      	ldr	r6, [pc, #292]	@ (10043d9c <CleanPage+0x204>)
10043c76:	19bc      	adds	r4, r7, r6
10043c78:	2381      	movs	r3, #129	@ 0x81
10043c7a:	011b      	lsls	r3, r3, #4
10043c7c:	18fa      	adds	r2, r7, r3
10043c7e:	197b      	adds	r3, r7, r5
10043c80:	781b      	ldrb	r3, [r3, #0]
10043c82:	0011      	movs	r1, r2
10043c84:	0018      	movs	r0, r3
10043c86:	f000 fb1d 	bl	100442c4 <NVMDB_HandleInit>
10043c8a:	0003      	movs	r3, r0
10043c8c:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
10043c8e:	19bb      	adds	r3, r7, r6
10043c90:	781b      	ldrb	r3, [r3, #0]
10043c92:	2b00      	cmp	r3, #0
10043c94:	d001      	beq.n	10043c9a <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
10043c96:	2300      	movs	r3, #0
10043c98:	e06f      	b.n	10043d7a <CleanPage+0x1e2>
    }

    InitReadState(&state);
10043c9a:	4d41      	ldr	r5, [pc, #260]	@ (10043da0 <CleanPage+0x208>)
10043c9c:	197b      	adds	r3, r7, r5
10043c9e:	0018      	movs	r0, r3
10043ca0:	f7ff fd92 	bl	100437c8 <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
10043ca4:	2308      	movs	r3, #8
10043ca6:	18fa      	adds	r2, r7, r3
10043ca8:	2082      	movs	r0, #130	@ 0x82
10043caa:	0100      	lsls	r0, r0, #4
10043cac:	183b      	adds	r3, r7, r0
10043cae:	681b      	ldr	r3, [r3, #0]
10043cb0:	18d1      	adds	r1, r2, r3
10043cb2:	183b      	adds	r3, r7, r0
10043cb4:	681b      	ldr	r3, [r3, #0]
10043cb6:	b29b      	uxth	r3, r3
10043cb8:	2280      	movs	r2, #128	@ 0x80
10043cba:	0112      	lsls	r2, r2, #4
10043cbc:	1ad3      	subs	r3, r2, r3
10043cbe:	b29a      	uxth	r2, r3
10043cc0:	4b38      	ldr	r3, [pc, #224]	@ (10043da4 <CleanPage+0x20c>)
10043cc2:	18fc      	adds	r4, r7, r3
10043cc4:	2381      	movs	r3, #129	@ 0x81
10043cc6:	011b      	lsls	r3, r3, #4
10043cc8:	18f8      	adds	r0, r7, r3
10043cca:	197b      	adds	r3, r7, r5
10043ccc:	9300      	str	r3, [sp, #0]
10043cce:	0023      	movs	r3, r4
10043cd0:	f7ff fd8b 	bl	100437ea <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043cd4:	4a2e      	ldr	r2, [pc, #184]	@ (10043d90 <CleanPage+0x1f8>)
10043cd6:	18bb      	adds	r3, r7, r2
10043cd8:	681b      	ldr	r3, [r3, #0]
10043cda:	3301      	adds	r3, #1
10043cdc:	18ba      	adds	r2, r7, r2
10043cde:	6013      	str	r3, [r2, #0]
10043ce0:	687b      	ldr	r3, [r7, #4]
10043ce2:	791b      	ldrb	r3, [r3, #4]
10043ce4:	001a      	movs	r2, r3
10043ce6:	4c2a      	ldr	r4, [pc, #168]	@ (10043d90 <CleanPage+0x1f8>)
10043ce8:	193b      	adds	r3, r7, r4
10043cea:	681b      	ldr	r3, [r3, #0]
10043cec:	4293      	cmp	r3, r2
10043cee:	dba5      	blt.n	10043c3c <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
10043cf0:	687b      	ldr	r3, [r7, #4]
10043cf2:	681b      	ldr	r3, [r3, #0]
10043cf4:	2280      	movs	r2, #128	@ 0x80
10043cf6:	0112      	lsls	r2, r2, #4
10043cf8:	2108      	movs	r1, #8
10043cfa:	1879      	adds	r1, r7, r1
10043cfc:	0018      	movs	r0, r3
10043cfe:	f7ff fd23 	bl	10043748 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043d02:	2300      	movs	r3, #0
10043d04:	193a      	adds	r2, r7, r4
10043d06:	6013      	str	r3, [r2, #0]
10043d08:	e02c      	b.n	10043d64 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10043d0a:	687b      	ldr	r3, [r7, #4]
10043d0c:	6899      	ldr	r1, [r3, #8]
10043d0e:	4b20      	ldr	r3, [pc, #128]	@ (10043d90 <CleanPage+0x1f8>)
10043d10:	18fb      	adds	r3, r7, r3
10043d12:	681a      	ldr	r2, [r3, #0]
10043d14:	0013      	movs	r3, r2
10043d16:	005b      	lsls	r3, r3, #1
10043d18:	189b      	adds	r3, r3, r2
10043d1a:	009b      	lsls	r3, r3, #2
10043d1c:	18ca      	adds	r2, r1, r3
10043d1e:	491d      	ldr	r1, [pc, #116]	@ (10043d94 <CleanPage+0x1fc>)
10043d20:	187b      	adds	r3, r7, r1
10043d22:	7812      	ldrb	r2, [r2, #0]
10043d24:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
10043d26:	187b      	adds	r3, r7, r1
10043d28:	781a      	ldrb	r2, [r3, #0]
10043d2a:	0013      	movs	r3, r2
10043d2c:	009b      	lsls	r3, r3, #2
10043d2e:	189b      	adds	r3, r3, r2
10043d30:	009b      	lsls	r3, r3, #2
10043d32:	4a19      	ldr	r2, [pc, #100]	@ (10043d98 <CleanPage+0x200>)
10043d34:	189b      	adds	r3, r3, r2
10043d36:	4d19      	ldr	r5, [pc, #100]	@ (10043d9c <CleanPage+0x204>)
10043d38:	197c      	adds	r4, r7, r5
10043d3a:	0018      	movs	r0, r3
10043d3c:	f7ff fa9c 	bl	10043278 <NVMDB_get_info>
10043d40:	0003      	movs	r3, r0
10043d42:	7023      	strb	r3, [r4, #0]
    if(status)
10043d44:	002a      	movs	r2, r5
10043d46:	18bb      	adds	r3, r7, r2
10043d48:	781b      	ldrb	r3, [r3, #0]
10043d4a:	2b00      	cmp	r3, #0
10043d4c:	d004      	beq.n	10043d58 <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
10043d4e:	4b0e      	ldr	r3, [pc, #56]	@ (10043d88 <CleanPage+0x1f0>)
10043d50:	18fb      	adds	r3, r7, r3
10043d52:	18ba      	adds	r2, r7, r2
10043d54:	7812      	ldrb	r2, [r2, #0]
10043d56:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043d58:	4a0d      	ldr	r2, [pc, #52]	@ (10043d90 <CleanPage+0x1f8>)
10043d5a:	18bb      	adds	r3, r7, r2
10043d5c:	681b      	ldr	r3, [r3, #0]
10043d5e:	3301      	adds	r3, #1
10043d60:	18ba      	adds	r2, r7, r2
10043d62:	6013      	str	r3, [r2, #0]
10043d64:	687b      	ldr	r3, [r7, #4]
10043d66:	791b      	ldrb	r3, [r3, #4]
10043d68:	001a      	movs	r2, r3
10043d6a:	4b09      	ldr	r3, [pc, #36]	@ (10043d90 <CleanPage+0x1f8>)
10043d6c:	18fb      	adds	r3, r7, r3
10043d6e:	681b      	ldr	r3, [r3, #0]
10043d70:	4293      	cmp	r3, r2
10043d72:	dbca      	blt.n	10043d0a <CleanPage+0x172>
    }
  }

  return ret;
10043d74:	4b04      	ldr	r3, [pc, #16]	@ (10043d88 <CleanPage+0x1f0>)
10043d76:	18fb      	adds	r3, r7, r3
10043d78:	781b      	ldrb	r3, [r3, #0]
}
10043d7a:	0018      	movs	r0, r3
10043d7c:	46bd      	mov	sp, r7
10043d7e:	4b0a      	ldr	r3, [pc, #40]	@ (10043da8 <CleanPage+0x210>)
10043d80:	449d      	add	sp, r3
10043d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043d84:	fffff7c4 	.word	0xfffff7c4
10043d88:	0000082f 	.word	0x0000082f
10043d8c:	00000827 	.word	0x00000827
10043d90:	00000828 	.word	0x00000828
10043d94:	00000826 	.word	0x00000826
10043d98:	20000454 	.word	0x20000454
10043d9c:	00000825 	.word	0x00000825
10043da0:	00000808 	.word	0x00000808
10043da4:	0000080e 	.word	0x0000080e
10043da8:	00000834 	.word	0x00000834

10043dac <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
10043dac:	b590      	push	{r4, r7, lr}
10043dae:	b087      	sub	sp, #28
10043db0:	af00      	add	r7, sp, #0
10043db2:	0002      	movs	r2, r0
10043db4:	6039      	str	r1, [r7, #0]
10043db6:	1dfb      	adds	r3, r7, #7
10043db8:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
10043dba:	2300      	movs	r3, #0
10043dbc:	617b      	str	r3, [r7, #20]
10043dbe:	e016      	b.n	10043dee <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
10043dc0:	240b      	movs	r4, #11
10043dc2:	1939      	adds	r1, r7, r4
10043dc4:	482e      	ldr	r0, [pc, #184]	@ (10043e80 <GetDBType+0xd4>)
10043dc6:	697a      	ldr	r2, [r7, #20]
10043dc8:	0013      	movs	r3, r2
10043dca:	005b      	lsls	r3, r3, #1
10043dcc:	189b      	adds	r3, r3, r2
10043dce:	009b      	lsls	r3, r3, #2
10043dd0:	18c3      	adds	r3, r0, r3
10043dd2:	3306      	adds	r3, #6
10043dd4:	781b      	ldrb	r3, [r3, #0]
10043dd6:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
10043dd8:	193a      	adds	r2, r7, r4
10043dda:	1dfb      	adds	r3, r7, #7
10043ddc:	7812      	ldrb	r2, [r2, #0]
10043dde:	781b      	ldrb	r3, [r3, #0]
10043de0:	429a      	cmp	r2, r3
10043de2:	d101      	bne.n	10043de8 <GetDBType+0x3c>
    {
      return LARGE_DB;
10043de4:	2302      	movs	r3, #2
10043de6:	e046      	b.n	10043e76 <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10043de8:	697b      	ldr	r3, [r7, #20]
10043dea:	3301      	adds	r3, #1
10043dec:	617b      	str	r3, [r7, #20]
10043dee:	697b      	ldr	r3, [r7, #20]
10043df0:	2b01      	cmp	r3, #1
10043df2:	dde5      	ble.n	10043dc0 <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10043df4:	2300      	movs	r3, #0
10043df6:	613b      	str	r3, [r7, #16]
10043df8:	e039      	b.n	10043e6e <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10043dfa:	2300      	movs	r3, #0
10043dfc:	60fb      	str	r3, [r7, #12]
10043dfe:	e026      	b.n	10043e4e <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10043e00:	4920      	ldr	r1, [pc, #128]	@ (10043e84 <GetDBType+0xd8>)
10043e02:	693a      	ldr	r2, [r7, #16]
10043e04:	0013      	movs	r3, r2
10043e06:	005b      	lsls	r3, r3, #1
10043e08:	189b      	adds	r3, r3, r2
10043e0a:	009b      	lsls	r3, r3, #2
10043e0c:	18cb      	adds	r3, r1, r3
10043e0e:	3308      	adds	r3, #8
10043e10:	6819      	ldr	r1, [r3, #0]
10043e12:	68fa      	ldr	r2, [r7, #12]
10043e14:	0013      	movs	r3, r2
10043e16:	005b      	lsls	r3, r3, #1
10043e18:	189b      	adds	r3, r3, r2
10043e1a:	009b      	lsls	r3, r3, #2
10043e1c:	18ca      	adds	r2, r1, r3
10043e1e:	210b      	movs	r1, #11
10043e20:	187b      	adds	r3, r7, r1
10043e22:	7812      	ldrb	r2, [r2, #0]
10043e24:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
10043e26:	187a      	adds	r2, r7, r1
10043e28:	1dfb      	adds	r3, r7, #7
10043e2a:	7812      	ldrb	r2, [r2, #0]
10043e2c:	781b      	ldrb	r3, [r3, #0]
10043e2e:	429a      	cmp	r2, r3
10043e30:	d10a      	bne.n	10043e48 <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
10043e32:	693a      	ldr	r2, [r7, #16]
10043e34:	0013      	movs	r3, r2
10043e36:	005b      	lsls	r3, r3, #1
10043e38:	189b      	adds	r3, r3, r2
10043e3a:	009b      	lsls	r3, r3, #2
10043e3c:	4a11      	ldr	r2, [pc, #68]	@ (10043e84 <GetDBType+0xd8>)
10043e3e:	189a      	adds	r2, r3, r2
10043e40:	683b      	ldr	r3, [r7, #0]
10043e42:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
10043e44:	2301      	movs	r3, #1
10043e46:	e016      	b.n	10043e76 <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10043e48:	68fb      	ldr	r3, [r7, #12]
10043e4a:	3301      	adds	r3, #1
10043e4c:	60fb      	str	r3, [r7, #12]
10043e4e:	490d      	ldr	r1, [pc, #52]	@ (10043e84 <GetDBType+0xd8>)
10043e50:	693a      	ldr	r2, [r7, #16]
10043e52:	0013      	movs	r3, r2
10043e54:	005b      	lsls	r3, r3, #1
10043e56:	189b      	adds	r3, r3, r2
10043e58:	009b      	lsls	r3, r3, #2
10043e5a:	18cb      	adds	r3, r1, r3
10043e5c:	3304      	adds	r3, #4
10043e5e:	781b      	ldrb	r3, [r3, #0]
10043e60:	001a      	movs	r2, r3
10043e62:	68fb      	ldr	r3, [r7, #12]
10043e64:	4293      	cmp	r3, r2
10043e66:	dbcb      	blt.n	10043e00 <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10043e68:	693b      	ldr	r3, [r7, #16]
10043e6a:	3301      	adds	r3, #1
10043e6c:	613b      	str	r3, [r7, #16]
10043e6e:	693b      	ldr	r3, [r7, #16]
10043e70:	2b00      	cmp	r3, #0
10043e72:	dbc2      	blt.n	10043dfa <GetDBType+0x4e>
      }
    }
  }

  return 0;
10043e74:	2300      	movs	r3, #0
}
10043e76:	0018      	movs	r0, r3
10043e78:	46bd      	mov	sp, r7
10043e7a:	b007      	add	sp, #28
10043e7c:	bd90      	pop	{r4, r7, pc}
10043e7e:	46c0      	nop			@ (mov r8, r8)
10043e80:	1004ee54 	.word	0x1004ee54
10043e84:	20000480 	.word	0x20000480

10043e88 <NVMDB_AppendRecordNoCache>:

  return NVMDB_STATUS_OK;
}

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
10043e88:	b5f0      	push	{r4, r5, r6, r7, lr}
10043e8a:	b089      	sub	sp, #36	@ 0x24
10043e8c:	af02      	add	r7, sp, #8
10043e8e:	60f8      	str	r0, [r7, #12]
10043e90:	0008      	movs	r0, r1
10043e92:	0011      	movs	r1, r2
10043e94:	607b      	str	r3, [r7, #4]
10043e96:	230b      	movs	r3, #11
10043e98:	18fb      	adds	r3, r7, r3
10043e9a:	1c02      	adds	r2, r0, #0
10043e9c:	701a      	strb	r2, [r3, #0]
10043e9e:	2008      	movs	r0, #8
10043ea0:	183b      	adds	r3, r7, r0
10043ea2:	1c0a      	adds	r2, r1, #0
10043ea4:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
10043ea6:	0001      	movs	r1, r0
10043ea8:	187b      	adds	r3, r7, r1
10043eaa:	881b      	ldrh	r3, [r3, #0]
10043eac:	3b01      	subs	r3, #1
10043eae:	b29b      	uxth	r3, r3
10043eb0:	b21b      	sxth	r3, r3
10043eb2:	2203      	movs	r2, #3
10043eb4:	4313      	orrs	r3, r2
10043eb6:	b21b      	sxth	r3, r3
10043eb8:	b29a      	uxth	r2, r3
10043eba:	187b      	adds	r3, r7, r1
10043ebc:	3201      	adds	r2, #1
10043ebe:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10043ec0:	68fb      	ldr	r3, [r7, #12]
10043ec2:	685b      	ldr	r3, [r3, #4]
10043ec4:	1d5a      	adds	r2, r3, #5
10043ec6:	68fb      	ldr	r3, [r7, #12]
10043ec8:	689b      	ldr	r3, [r3, #8]
10043eca:	429a      	cmp	r2, r3
10043ecc:	d310      	bcc.n	10043ef0 <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
10043ece:	68fb      	ldr	r3, [r7, #12]
10043ed0:	781b      	ldrb	r3, [r3, #0]
10043ed2:	0019      	movs	r1, r3
10043ed4:	4a4a      	ldr	r2, [pc, #296]	@ (10044000 <NVMDB_AppendRecordNoCache+0x178>)
10043ed6:	000b      	movs	r3, r1
10043ed8:	009b      	lsls	r3, r3, #2
10043eda:	185b      	adds	r3, r3, r1
10043edc:	009b      	lsls	r3, r3, #2
10043ede:	18d3      	adds	r3, r2, r3
10043ee0:	330a      	adds	r3, #10
10043ee2:	881b      	ldrh	r3, [r3, #0]
10043ee4:	2b00      	cmp	r3, #0
10043ee6:	d001      	beq.n	10043eec <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
10043ee8:	230b      	movs	r3, #11
10043eea:	e084      	b.n	10043ff6 <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
10043eec:	2302      	movs	r3, #2
10043eee:	e082      	b.n	10043ff6 <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10043ef0:	68fb      	ldr	r3, [r7, #12]
10043ef2:	685b      	ldr	r3, [r3, #4]
10043ef4:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
10043ef6:	697b      	ldr	r3, [r7, #20]
10043ef8:	781b      	ldrb	r3, [r3, #0]
10043efa:	2bff      	cmp	r3, #255	@ 0xff
10043efc:	d11c      	bne.n	10043f38 <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
10043efe:	68fb      	ldr	r3, [r7, #12]
10043f00:	689a      	ldr	r2, [r3, #8]
10043f02:	68fb      	ldr	r3, [r7, #12]
10043f04:	685b      	ldr	r3, [r3, #4]
10043f06:	1ad3      	subs	r3, r2, r3
10043f08:	2280      	movs	r2, #128	@ 0x80
10043f0a:	0252      	lsls	r2, r2, #9
10043f0c:	4293      	cmp	r3, r2
10043f0e:	d300      	bcc.n	10043f12 <NVMDB_AppendRecordNoCache+0x8a>
10043f10:	4b3c      	ldr	r3, [pc, #240]	@ (10044004 <NVMDB_AppendRecordNoCache+0x17c>)
10043f12:	2112      	movs	r1, #18
10043f14:	187a      	adds	r2, r7, r1
10043f16:	8013      	strh	r3, [r2, #0]
      break;
10043f18:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
10043f1a:	2308      	movs	r3, #8
10043f1c:	0018      	movs	r0, r3
10043f1e:	18fb      	adds	r3, r7, r3
10043f20:	881a      	ldrh	r2, [r3, #0]
10043f22:	2328      	movs	r3, #40	@ 0x28
10043f24:	181b      	adds	r3, r3, r0
10043f26:	19db      	adds	r3, r3, r7
10043f28:	881b      	ldrh	r3, [r3, #0]
10043f2a:	18d3      	adds	r3, r2, r3
10043f2c:	1cda      	adds	r2, r3, #3
10043f2e:	187b      	adds	r3, r7, r1
10043f30:	881b      	ldrh	r3, [r3, #0]
10043f32:	429a      	cmp	r2, r3
10043f34:	db27      	blt.n	10043f86 <NVMDB_AppendRecordNoCache+0xfe>
10043f36:	e015      	b.n	10043f64 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
10043f38:	697b      	ldr	r3, [r7, #20]
10043f3a:	781b      	ldrb	r3, [r3, #0]
10043f3c:	2bfe      	cmp	r3, #254	@ 0xfe
10043f3e:	d005      	beq.n	10043f4c <NVMDB_AppendRecordNoCache+0xc4>
10043f40:	697b      	ldr	r3, [r7, #20]
10043f42:	781b      	ldrb	r3, [r3, #0]
10043f44:	2b00      	cmp	r3, #0
10043f46:	d001      	beq.n	10043f4c <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
10043f48:	2303      	movs	r3, #3
10043f4a:	e054      	b.n	10043ff6 <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10043f4c:	68fb      	ldr	r3, [r7, #12]
10043f4e:	685b      	ldr	r3, [r3, #4]
10043f50:	697a      	ldr	r2, [r7, #20]
10043f52:	8852      	ldrh	r2, [r2, #2]
10043f54:	3203      	adds	r2, #3
10043f56:	2103      	movs	r1, #3
10043f58:	430a      	orrs	r2, r1
10043f5a:	189b      	adds	r3, r3, r2
10043f5c:	1c5a      	adds	r2, r3, #1
10043f5e:	68fb      	ldr	r3, [r7, #12]
10043f60:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10043f62:	e7ad      	b.n	10043ec0 <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
10043f64:	68fb      	ldr	r3, [r7, #12]
10043f66:	781b      	ldrb	r3, [r3, #0]
10043f68:	0019      	movs	r1, r3
10043f6a:	4a25      	ldr	r2, [pc, #148]	@ (10044000 <NVMDB_AppendRecordNoCache+0x178>)
10043f6c:	000b      	movs	r3, r1
10043f6e:	009b      	lsls	r3, r3, #2
10043f70:	185b      	adds	r3, r3, r1
10043f72:	009b      	lsls	r3, r3, #2
10043f74:	18d3      	adds	r3, r2, r3
10043f76:	330a      	adds	r3, #10
10043f78:	881b      	ldrh	r3, [r3, #0]
10043f7a:	2b00      	cmp	r3, #0
10043f7c:	d001      	beq.n	10043f82 <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
10043f7e:	230b      	movs	r3, #11
10043f80:	e039      	b.n	10043ff6 <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
10043f82:	2302      	movs	r3, #2
10043f84:	e037      	b.n	10043ff6 <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
10043f86:	68fb      	ldr	r3, [r7, #12]
10043f88:	6858      	ldr	r0, [r3, #4]
10043f8a:	2611      	movs	r6, #17
10043f8c:	19bc      	adds	r4, r7, r6
10043f8e:	687d      	ldr	r5, [r7, #4]
10043f90:	2308      	movs	r3, #8
10043f92:	001a      	movs	r2, r3
10043f94:	18fb      	adds	r3, r7, r3
10043f96:	881b      	ldrh	r3, [r3, #0]
10043f98:	469c      	mov	ip, r3
10043f9a:	230b      	movs	r3, #11
10043f9c:	18fb      	adds	r3, r7, r3
10043f9e:	7819      	ldrb	r1, [r3, #0]
10043fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10043fa2:	9301      	str	r3, [sp, #4]
10043fa4:	2328      	movs	r3, #40	@ 0x28
10043fa6:	189b      	adds	r3, r3, r2
10043fa8:	19db      	adds	r3, r3, r7
10043faa:	881b      	ldrh	r3, [r3, #0]
10043fac:	9300      	str	r3, [sp, #0]
10043fae:	002b      	movs	r3, r5
10043fb0:	4662      	mov	r2, ip
10043fb2:	f7ff fae2 	bl	1004357a <WriteRecord>
10043fb6:	0003      	movs	r3, r0
10043fb8:	7023      	strb	r3, [r4, #0]
  if(status)
10043fba:	19bb      	adds	r3, r7, r6
10043fbc:	781b      	ldrb	r3, [r3, #0]
10043fbe:	2b00      	cmp	r3, #0
10043fc0:	d002      	beq.n	10043fc8 <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
10043fc2:	19bb      	adds	r3, r7, r6
10043fc4:	781b      	ldrb	r3, [r3, #0]
10043fc6:	e016      	b.n	10043ff6 <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
10043fc8:	68fb      	ldr	r3, [r7, #12]
10043fca:	781b      	ldrb	r3, [r3, #0]
10043fcc:	001a      	movs	r2, r3
10043fce:	490c      	ldr	r1, [pc, #48]	@ (10044000 <NVMDB_AppendRecordNoCache+0x178>)
10043fd0:	0013      	movs	r3, r2
10043fd2:	009b      	lsls	r3, r3, #2
10043fd4:	189b      	adds	r3, r3, r2
10043fd6:	009b      	lsls	r3, r3, #2
10043fd8:	18cb      	adds	r3, r1, r3
10043fda:	3308      	adds	r3, #8
10043fdc:	881b      	ldrh	r3, [r3, #0]
10043fde:	3301      	adds	r3, #1
10043fe0:	b298      	uxth	r0, r3
10043fe2:	4907      	ldr	r1, [pc, #28]	@ (10044000 <NVMDB_AppendRecordNoCache+0x178>)
10043fe4:	0013      	movs	r3, r2
10043fe6:	009b      	lsls	r3, r3, #2
10043fe8:	189b      	adds	r3, r3, r2
10043fea:	009b      	lsls	r3, r3, #2
10043fec:	18cb      	adds	r3, r1, r3
10043fee:	3308      	adds	r3, #8
10043ff0:	1c02      	adds	r2, r0, #0
10043ff2:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10043ff4:	2300      	movs	r3, #0
}
10043ff6:	0018      	movs	r0, r3
10043ff8:	46bd      	mov	sp, r7
10043ffa:	b007      	add	sp, #28
10043ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043ffe:	46c0      	nop			@ (mov r8, r8)
10044000:	20000454 	.word	0x20000454
10044004:	0000ffff 	.word	0x0000ffff

10044008 <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
10044008:	b5b0      	push	{r4, r5, r7, lr}
1004400a:	b088      	sub	sp, #32
1004400c:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004400e:	2300      	movs	r3, #0
10044010:	61fb      	str	r3, [r7, #28]
10044012:	e0cd      	b.n	100441b0 <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
10044014:	49a8      	ldr	r1, [pc, #672]	@ (100442b8 <NVMDB_Init+0x2b0>)
10044016:	69fa      	ldr	r2, [r7, #28]
10044018:	0013      	movs	r3, r2
1004401a:	005b      	lsls	r3, r3, #1
1004401c:	189b      	adds	r3, r3, r2
1004401e:	009b      	lsls	r3, r3, #2
10044020:	585b      	ldr	r3, [r3, r1]
10044022:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10044024:	2300      	movs	r3, #0
10044026:	61bb      	str	r3, [r7, #24]
10044028:	e0b1      	b.n	1004418e <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1004402a:	49a3      	ldr	r1, [pc, #652]	@ (100442b8 <NVMDB_Init+0x2b0>)
1004402c:	69fa      	ldr	r2, [r7, #28]
1004402e:	0013      	movs	r3, r2
10044030:	005b      	lsls	r3, r3, #1
10044032:	189b      	adds	r3, r3, r2
10044034:	009b      	lsls	r3, r3, #2
10044036:	18cb      	adds	r3, r1, r3
10044038:	3308      	adds	r3, #8
1004403a:	6819      	ldr	r1, [r3, #0]
1004403c:	69ba      	ldr	r2, [r7, #24]
1004403e:	0013      	movs	r3, r2
10044040:	005b      	lsls	r3, r3, #1
10044042:	189b      	adds	r3, r3, r2
10044044:	009b      	lsls	r3, r3, #2
10044046:	18ca      	adds	r2, r1, r3
10044048:	2013      	movs	r0, #19
1004404a:	183b      	adds	r3, r7, r0
1004404c:	7812      	ldrb	r2, [r2, #0]
1004404e:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
10044050:	4999      	ldr	r1, [pc, #612]	@ (100442b8 <NVMDB_Init+0x2b0>)
10044052:	69fa      	ldr	r2, [r7, #28]
10044054:	0013      	movs	r3, r2
10044056:	005b      	lsls	r3, r3, #1
10044058:	189b      	adds	r3, r3, r2
1004405a:	009b      	lsls	r3, r3, #2
1004405c:	18cb      	adds	r3, r1, r3
1004405e:	3308      	adds	r3, #8
10044060:	6819      	ldr	r1, [r3, #0]
10044062:	69ba      	ldr	r2, [r7, #24]
10044064:	0013      	movs	r3, r2
10044066:	005b      	lsls	r3, r3, #1
10044068:	189b      	adds	r3, r3, r2
1004406a:	009b      	lsls	r3, r3, #2
1004406c:	18cb      	adds	r3, r1, r3
1004406e:	685b      	ldr	r3, [r3, #4]
10044070:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
10044072:	4991      	ldr	r1, [pc, #580]	@ (100442b8 <NVMDB_Init+0x2b0>)
10044074:	69fa      	ldr	r2, [r7, #28]
10044076:	0013      	movs	r3, r2
10044078:	005b      	lsls	r3, r3, #1
1004407a:	189b      	adds	r3, r3, r2
1004407c:	009b      	lsls	r3, r3, #2
1004407e:	18cb      	adds	r3, r1, r3
10044080:	3308      	adds	r3, #8
10044082:	6819      	ldr	r1, [r3, #0]
10044084:	69ba      	ldr	r2, [r7, #24]
10044086:	0013      	movs	r3, r2
10044088:	005b      	lsls	r3, r3, #1
1004408a:	189b      	adds	r3, r3, r2
1004408c:	009b      	lsls	r3, r3, #2
1004408e:	18ca      	adds	r2, r1, r3
10044090:	1dbb      	adds	r3, r7, #6
10044092:	8912      	ldrh	r2, [r2, #8]
10044094:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
10044096:	183b      	adds	r3, r7, r0
10044098:	781a      	ldrb	r2, [r3, #0]
1004409a:	4988      	ldr	r1, [pc, #544]	@ (100442bc <NVMDB_Init+0x2b4>)
1004409c:	0013      	movs	r3, r2
1004409e:	009b      	lsls	r3, r3, #2
100440a0:	189b      	adds	r3, r3, r2
100440a2:	009b      	lsls	r3, r3, #2
100440a4:	585b      	ldr	r3, [r3, r1]
100440a6:	2b00      	cmp	r3, #0
100440a8:	d103      	bne.n	100440b2 <NVMDB_Init+0xaa>
100440aa:	183b      	adds	r3, r7, r0
100440ac:	781b      	ldrb	r3, [r3, #0]
100440ae:	2b01      	cmp	r3, #1
100440b0:	d901      	bls.n	100440b6 <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
100440b2:	2301      	movs	r3, #1
100440b4:	e0fc      	b.n	100442b0 <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
100440b6:	2413      	movs	r4, #19
100440b8:	193b      	adds	r3, r7, r4
100440ba:	781a      	ldrb	r2, [r3, #0]
100440bc:	68f9      	ldr	r1, [r7, #12]
100440be:	68bb      	ldr	r3, [r7, #8]
100440c0:	18c8      	adds	r0, r1, r3
100440c2:	497e      	ldr	r1, [pc, #504]	@ (100442bc <NVMDB_Init+0x2b4>)
100440c4:	0013      	movs	r3, r2
100440c6:	009b      	lsls	r3, r3, #2
100440c8:	189b      	adds	r3, r3, r2
100440ca:	009b      	lsls	r3, r3, #2
100440cc:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
100440ce:	497a      	ldr	r1, [pc, #488]	@ (100442b8 <NVMDB_Init+0x2b0>)
100440d0:	69fa      	ldr	r2, [r7, #28]
100440d2:	0013      	movs	r3, r2
100440d4:	005b      	lsls	r3, r3, #1
100440d6:	189b      	adds	r3, r3, r2
100440d8:	009b      	lsls	r3, r3, #2
100440da:	18cb      	adds	r3, r1, r3
100440dc:	3304      	adds	r3, #4
100440de:	781b      	ldrb	r3, [r3, #0]
100440e0:	3b01      	subs	r3, #1
100440e2:	69ba      	ldr	r2, [r7, #24]
100440e4:	429a      	cmp	r2, r3
100440e6:	d10e      	bne.n	10044106 <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
100440e8:	193b      	adds	r3, r7, r4
100440ea:	781a      	ldrb	r2, [r3, #0]
100440ec:	68fb      	ldr	r3, [r7, #12]
100440ee:	2180      	movs	r1, #128	@ 0x80
100440f0:	0109      	lsls	r1, r1, #4
100440f2:	1859      	adds	r1, r3, r1
100440f4:	4871      	ldr	r0, [pc, #452]	@ (100442bc <NVMDB_Init+0x2b4>)
100440f6:	0013      	movs	r3, r2
100440f8:	009b      	lsls	r3, r3, #2
100440fa:	189b      	adds	r3, r3, r2
100440fc:	009b      	lsls	r3, r3, #2
100440fe:	18c3      	adds	r3, r0, r3
10044100:	3304      	adds	r3, #4
10044102:	6019      	str	r1, [r3, #0]
10044104:	e01d      	b.n	10044142 <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
10044106:	496c      	ldr	r1, [pc, #432]	@ (100442b8 <NVMDB_Init+0x2b0>)
10044108:	69fa      	ldr	r2, [r7, #28]
1004410a:	0013      	movs	r3, r2
1004410c:	005b      	lsls	r3, r3, #1
1004410e:	189b      	adds	r3, r3, r2
10044110:	009b      	lsls	r3, r3, #2
10044112:	18cb      	adds	r3, r1, r3
10044114:	3308      	adds	r3, #8
10044116:	6819      	ldr	r1, [r3, #0]
10044118:	69bb      	ldr	r3, [r7, #24]
1004411a:	1c5a      	adds	r2, r3, #1
1004411c:	0013      	movs	r3, r2
1004411e:	005b      	lsls	r3, r3, #1
10044120:	189b      	adds	r3, r3, r2
10044122:	009b      	lsls	r3, r3, #2
10044124:	18cb      	adds	r3, r1, r3
10044126:	6859      	ldr	r1, [r3, #4]
10044128:	2313      	movs	r3, #19
1004412a:	18fb      	adds	r3, r7, r3
1004412c:	781a      	ldrb	r2, [r3, #0]
1004412e:	68fb      	ldr	r3, [r7, #12]
10044130:	18c9      	adds	r1, r1, r3
10044132:	4862      	ldr	r0, [pc, #392]	@ (100442bc <NVMDB_Init+0x2b4>)
10044134:	0013      	movs	r3, r2
10044136:	009b      	lsls	r3, r3, #2
10044138:	189b      	adds	r3, r3, r2
1004413a:	009b      	lsls	r3, r3, #2
1004413c:	18c3      	adds	r3, r0, r3
1004413e:	3304      	adds	r3, #4
10044140:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
10044142:	2013      	movs	r0, #19
10044144:	183b      	adds	r3, r7, r0
10044146:	781a      	ldrb	r2, [r3, #0]
10044148:	495c      	ldr	r1, [pc, #368]	@ (100442bc <NVMDB_Init+0x2b4>)
1004414a:	0013      	movs	r3, r2
1004414c:	009b      	lsls	r3, r3, #2
1004414e:	189b      	adds	r3, r3, r2
10044150:	009b      	lsls	r3, r3, #2
10044152:	18cb      	adds	r3, r1, r3
10044154:	3310      	adds	r3, #16
10044156:	1dba      	adds	r2, r7, #6
10044158:	8812      	ldrh	r2, [r2, #0]
1004415a:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
1004415c:	183b      	adds	r3, r7, r0
1004415e:	781a      	ldrb	r2, [r3, #0]
10044160:	0013      	movs	r3, r2
10044162:	009b      	lsls	r3, r3, #2
10044164:	189b      	adds	r3, r3, r2
10044166:	009b      	lsls	r3, r3, #2
10044168:	4a54      	ldr	r2, [pc, #336]	@ (100442bc <NVMDB_Init+0x2b4>)
1004416a:	189b      	adds	r3, r3, r2
1004416c:	2512      	movs	r5, #18
1004416e:	197c      	adds	r4, r7, r5
10044170:	0018      	movs	r0, r3
10044172:	f7ff f881 	bl	10043278 <NVMDB_get_info>
10044176:	0003      	movs	r3, r0
10044178:	7023      	strb	r3, [r4, #0]
      if(status)
1004417a:	197b      	adds	r3, r7, r5
1004417c:	781b      	ldrb	r3, [r3, #0]
1004417e:	2b00      	cmp	r3, #0
10044180:	d002      	beq.n	10044188 <NVMDB_Init+0x180>
      {
        return status;
10044182:	197b      	adds	r3, r7, r5
10044184:	781b      	ldrb	r3, [r3, #0]
10044186:	e093      	b.n	100442b0 <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10044188:	69bb      	ldr	r3, [r7, #24]
1004418a:	3301      	adds	r3, #1
1004418c:	61bb      	str	r3, [r7, #24]
1004418e:	494a      	ldr	r1, [pc, #296]	@ (100442b8 <NVMDB_Init+0x2b0>)
10044190:	69fa      	ldr	r2, [r7, #28]
10044192:	0013      	movs	r3, r2
10044194:	005b      	lsls	r3, r3, #1
10044196:	189b      	adds	r3, r3, r2
10044198:	009b      	lsls	r3, r3, #2
1004419a:	18cb      	adds	r3, r1, r3
1004419c:	3304      	adds	r3, #4
1004419e:	781b      	ldrb	r3, [r3, #0]
100441a0:	001a      	movs	r2, r3
100441a2:	69bb      	ldr	r3, [r7, #24]
100441a4:	4293      	cmp	r3, r2
100441a6:	da00      	bge.n	100441aa <NVMDB_Init+0x1a2>
100441a8:	e73f      	b.n	1004402a <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
100441aa:	69fb      	ldr	r3, [r7, #28]
100441ac:	3301      	adds	r3, #1
100441ae:	61fb      	str	r3, [r7, #28]
100441b0:	69fb      	ldr	r3, [r7, #28]
100441b2:	2b00      	cmp	r3, #0
100441b4:	da00      	bge.n	100441b8 <NVMDB_Init+0x1b0>
100441b6:	e72d      	b.n	10044014 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
100441b8:	2300      	movs	r3, #0
100441ba:	617b      	str	r3, [r7, #20]
100441bc:	e074      	b.n	100442a8 <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
100441be:	2413      	movs	r4, #19
100441c0:	1939      	adds	r1, r7, r4
100441c2:	483f      	ldr	r0, [pc, #252]	@ (100442c0 <NVMDB_Init+0x2b8>)
100441c4:	697a      	ldr	r2, [r7, #20]
100441c6:	0013      	movs	r3, r2
100441c8:	005b      	lsls	r3, r3, #1
100441ca:	189b      	adds	r3, r3, r2
100441cc:	009b      	lsls	r3, r3, #2
100441ce:	18c3      	adds	r3, r0, r3
100441d0:	3306      	adds	r3, #6
100441d2:	781b      	ldrb	r3, [r3, #0]
100441d4:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
100441d6:	193b      	adds	r3, r7, r4
100441d8:	781a      	ldrb	r2, [r3, #0]
100441da:	4938      	ldr	r1, [pc, #224]	@ (100442bc <NVMDB_Init+0x2b4>)
100441dc:	0013      	movs	r3, r2
100441de:	009b      	lsls	r3, r3, #2
100441e0:	189b      	adds	r3, r3, r2
100441e2:	009b      	lsls	r3, r3, #2
100441e4:	585b      	ldr	r3, [r3, r1]
100441e6:	2b00      	cmp	r3, #0
100441e8:	d103      	bne.n	100441f2 <NVMDB_Init+0x1ea>
100441ea:	193b      	adds	r3, r7, r4
100441ec:	781b      	ldrb	r3, [r3, #0]
100441ee:	2b01      	cmp	r3, #1
100441f0:	d901      	bls.n	100441f6 <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
100441f2:	2301      	movs	r3, #1
100441f4:	e05c      	b.n	100442b0 <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
100441f6:	2413      	movs	r4, #19
100441f8:	193b      	adds	r3, r7, r4
100441fa:	781a      	ldrb	r2, [r3, #0]
100441fc:	4830      	ldr	r0, [pc, #192]	@ (100442c0 <NVMDB_Init+0x2b8>)
100441fe:	6979      	ldr	r1, [r7, #20]
10044200:	000b      	movs	r3, r1
10044202:	005b      	lsls	r3, r3, #1
10044204:	185b      	adds	r3, r3, r1
10044206:	009b      	lsls	r3, r3, #2
10044208:	5818      	ldr	r0, [r3, r0]
1004420a:	492c      	ldr	r1, [pc, #176]	@ (100442bc <NVMDB_Init+0x2b4>)
1004420c:	0013      	movs	r3, r2
1004420e:	009b      	lsls	r3, r3, #2
10044210:	189b      	adds	r3, r3, r2
10044212:	009b      	lsls	r3, r3, #2
10044214:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
10044216:	492a      	ldr	r1, [pc, #168]	@ (100442c0 <NVMDB_Init+0x2b8>)
10044218:	697a      	ldr	r2, [r7, #20]
1004421a:	0013      	movs	r3, r2
1004421c:	005b      	lsls	r3, r3, #1
1004421e:	189b      	adds	r3, r3, r2
10044220:	009b      	lsls	r3, r3, #2
10044222:	5859      	ldr	r1, [r3, r1]
10044224:	4826      	ldr	r0, [pc, #152]	@ (100442c0 <NVMDB_Init+0x2b8>)
10044226:	697a      	ldr	r2, [r7, #20]
10044228:	0013      	movs	r3, r2
1004422a:	005b      	lsls	r3, r3, #1
1004422c:	189b      	adds	r3, r3, r2
1004422e:	009b      	lsls	r3, r3, #2
10044230:	18c3      	adds	r3, r0, r3
10044232:	3304      	adds	r3, #4
10044234:	881b      	ldrh	r3, [r3, #0]
10044236:	0018      	movs	r0, r3
10044238:	193b      	adds	r3, r7, r4
1004423a:	781a      	ldrb	r2, [r3, #0]
1004423c:	1809      	adds	r1, r1, r0
1004423e:	481f      	ldr	r0, [pc, #124]	@ (100442bc <NVMDB_Init+0x2b4>)
10044240:	0013      	movs	r3, r2
10044242:	009b      	lsls	r3, r3, #2
10044244:	189b      	adds	r3, r3, r2
10044246:	009b      	lsls	r3, r3, #2
10044248:	18c3      	adds	r3, r0, r3
1004424a:	3304      	adds	r3, #4
1004424c:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
1004424e:	193b      	adds	r3, r7, r4
10044250:	781a      	ldrb	r2, [r3, #0]
10044252:	481b      	ldr	r0, [pc, #108]	@ (100442c0 <NVMDB_Init+0x2b8>)
10044254:	6979      	ldr	r1, [r7, #20]
10044256:	000b      	movs	r3, r1
10044258:	005b      	lsls	r3, r3, #1
1004425a:	185b      	adds	r3, r3, r1
1004425c:	009b      	lsls	r3, r3, #2
1004425e:	18c3      	adds	r3, r0, r3
10044260:	3308      	adds	r3, #8
10044262:	8818      	ldrh	r0, [r3, #0]
10044264:	4915      	ldr	r1, [pc, #84]	@ (100442bc <NVMDB_Init+0x2b4>)
10044266:	0013      	movs	r3, r2
10044268:	009b      	lsls	r3, r3, #2
1004426a:	189b      	adds	r3, r3, r2
1004426c:	009b      	lsls	r3, r3, #2
1004426e:	18cb      	adds	r3, r1, r3
10044270:	3310      	adds	r3, #16
10044272:	1c02      	adds	r2, r0, #0
10044274:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
10044276:	193b      	adds	r3, r7, r4
10044278:	781a      	ldrb	r2, [r3, #0]
1004427a:	0013      	movs	r3, r2
1004427c:	009b      	lsls	r3, r3, #2
1004427e:	189b      	adds	r3, r3, r2
10044280:	009b      	lsls	r3, r3, #2
10044282:	4a0e      	ldr	r2, [pc, #56]	@ (100442bc <NVMDB_Init+0x2b4>)
10044284:	189b      	adds	r3, r3, r2
10044286:	2512      	movs	r5, #18
10044288:	197c      	adds	r4, r7, r5
1004428a:	0018      	movs	r0, r3
1004428c:	f7fe fff4 	bl	10043278 <NVMDB_get_info>
10044290:	0003      	movs	r3, r0
10044292:	7023      	strb	r3, [r4, #0]
    if(status)
10044294:	197b      	adds	r3, r7, r5
10044296:	781b      	ldrb	r3, [r3, #0]
10044298:	2b00      	cmp	r3, #0
1004429a:	d002      	beq.n	100442a2 <NVMDB_Init+0x29a>
    {
      return status;
1004429c:	197b      	adds	r3, r7, r5
1004429e:	781b      	ldrb	r3, [r3, #0]
100442a0:	e006      	b.n	100442b0 <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
100442a2:	697b      	ldr	r3, [r7, #20]
100442a4:	3301      	adds	r3, #1
100442a6:	617b      	str	r3, [r7, #20]
100442a8:	697b      	ldr	r3, [r7, #20]
100442aa:	2b01      	cmp	r3, #1
100442ac:	dd87      	ble.n	100441be <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
100442ae:	2300      	movs	r3, #0
}
100442b0:	0018      	movs	r0, r3
100442b2:	46bd      	mov	sp, r7
100442b4:	b008      	add	sp, #32
100442b6:	bdb0      	pop	{r4, r5, r7, pc}
100442b8:	20000480 	.word	0x20000480
100442bc:	20000454 	.word	0x20000454
100442c0:	1004ee54 	.word	0x1004ee54

100442c4 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
100442c4:	b580      	push	{r7, lr}
100442c6:	b082      	sub	sp, #8
100442c8:	af00      	add	r7, sp, #0
100442ca:	0002      	movs	r2, r0
100442cc:	6039      	str	r1, [r7, #0]
100442ce:	1dfb      	adds	r3, r7, #7
100442d0:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
100442d2:	1dfb      	adds	r3, r7, #7
100442d4:	781b      	ldrb	r3, [r3, #0]
100442d6:	2b01      	cmp	r3, #1
100442d8:	d901      	bls.n	100442de <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
100442da:	2301      	movs	r3, #1
100442dc:	e020      	b.n	10044320 <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
100442de:	1dfb      	adds	r3, r7, #7
100442e0:	781a      	ldrb	r2, [r3, #0]
100442e2:	4911      	ldr	r1, [pc, #68]	@ (10044328 <NVMDB_HandleInit+0x64>)
100442e4:	0013      	movs	r3, r2
100442e6:	009b      	lsls	r3, r3, #2
100442e8:	189b      	adds	r3, r3, r2
100442ea:	009b      	lsls	r3, r3, #2
100442ec:	585a      	ldr	r2, [r3, r1]
100442ee:	683b      	ldr	r3, [r7, #0]
100442f0:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
100442f2:	1dfb      	adds	r3, r7, #7
100442f4:	781a      	ldrb	r2, [r3, #0]
100442f6:	490c      	ldr	r1, [pc, #48]	@ (10044328 <NVMDB_HandleInit+0x64>)
100442f8:	0013      	movs	r3, r2
100442fa:	009b      	lsls	r3, r3, #2
100442fc:	189b      	adds	r3, r3, r2
100442fe:	009b      	lsls	r3, r3, #2
10044300:	18cb      	adds	r3, r1, r3
10044302:	3304      	adds	r3, #4
10044304:	681a      	ldr	r2, [r3, #0]
10044306:	683b      	ldr	r3, [r7, #0]
10044308:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
1004430a:	683b      	ldr	r3, [r7, #0]
1004430c:	2201      	movs	r2, #1
1004430e:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
10044310:	683b      	ldr	r3, [r7, #0]
10044312:	1dfa      	adds	r2, r7, #7
10044314:	7812      	ldrb	r2, [r2, #0]
10044316:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
10044318:	683b      	ldr	r3, [r7, #0]
1004431a:	2200      	movs	r2, #0
1004431c:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
1004431e:	2300      	movs	r3, #0
}
10044320:	0018      	movs	r0, r3
10044322:	46bd      	mov	sp, r7
10044324:	b002      	add	sp, #8
10044326:	bd80      	pop	{r7, pc}
10044328:	20000454 	.word	0x20000454

1004432c <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004432c:	b590      	push	{r4, r7, lr}
1004432e:	b089      	sub	sp, #36	@ 0x24
10044330:	af04      	add	r7, sp, #16
10044332:	60f8      	str	r0, [r7, #12]
10044334:	0008      	movs	r0, r1
10044336:	0011      	movs	r1, r2
10044338:	607b      	str	r3, [r7, #4]
1004433a:	230b      	movs	r3, #11
1004433c:	18fb      	adds	r3, r7, r3
1004433e:	1c02      	adds	r2, r0, #0
10044340:	701a      	strb	r2, [r3, #0]
10044342:	2308      	movs	r3, #8
10044344:	18fb      	adds	r3, r7, r3
10044346:	1c0a      	adds	r2, r1, #0
10044348:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004434a:	68fb      	ldr	r3, [r7, #12]
1004434c:	781b      	ldrb	r3, [r3, #0]
1004434e:	0019      	movs	r1, r3
10044350:	4a12      	ldr	r2, [pc, #72]	@ (1004439c <NVMDB_ReadNextRecord+0x70>)
10044352:	000b      	movs	r3, r1
10044354:	009b      	lsls	r3, r3, #2
10044356:	185b      	adds	r3, r3, r1
10044358:	009b      	lsls	r3, r3, #2
1004435a:	18d3      	adds	r3, r2, r3
1004435c:	330e      	adds	r3, #14
1004435e:	781b      	ldrb	r3, [r3, #0]
10044360:	2b00      	cmp	r3, #0
10044362:	d001      	beq.n	10044368 <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10044364:	230a      	movs	r3, #10
10044366:	e015      	b.n	10044394 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
10044368:	687c      	ldr	r4, [r7, #4]
1004436a:	2308      	movs	r3, #8
1004436c:	18fb      	adds	r3, r7, r3
1004436e:	881a      	ldrh	r2, [r3, #0]
10044370:	230b      	movs	r3, #11
10044372:	18fb      	adds	r3, r7, r3
10044374:	7819      	ldrb	r1, [r3, #0]
10044376:	68f8      	ldr	r0, [r7, #12]
10044378:	2300      	movs	r3, #0
1004437a:	9303      	str	r3, [sp, #12]
1004437c:	2300      	movs	r3, #0
1004437e:	9302      	str	r3, [sp, #8]
10044380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10044382:	9301      	str	r3, [sp, #4]
10044384:	2320      	movs	r3, #32
10044386:	18fb      	adds	r3, r7, r3
10044388:	881b      	ldrh	r3, [r3, #0]
1004438a:	9300      	str	r3, [sp, #0]
1004438c:	0023      	movs	r3, r4
1004438e:	f7ff f83f 	bl	10043410 <ReadNextRecordNoLock>
10044392:	0003      	movs	r3, r0
}
10044394:	0018      	movs	r0, r3
10044396:	46bd      	mov	sp, r7
10044398:	b005      	add	sp, #20
1004439a:	bd90      	pop	{r4, r7, pc}
1004439c:	20000454 	.word	0x20000454

100443a0 <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
100443a0:	b590      	push	{r4, r7, lr}
100443a2:	b087      	sub	sp, #28
100443a4:	af02      	add	r7, sp, #8
100443a6:	60f8      	str	r0, [r7, #12]
100443a8:	0008      	movs	r0, r1
100443aa:	607a      	str	r2, [r7, #4]
100443ac:	0019      	movs	r1, r3
100443ae:	230a      	movs	r3, #10
100443b0:	18fb      	adds	r3, r7, r3
100443b2:	1c02      	adds	r2, r0, #0
100443b4:	801a      	strh	r2, [r3, #0]
100443b6:	2308      	movs	r3, #8
100443b8:	18fb      	adds	r3, r7, r3
100443ba:	1c0a      	adds	r2, r1, #0
100443bc:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
100443be:	68fb      	ldr	r3, [r7, #12]
100443c0:	781b      	ldrb	r3, [r3, #0]
100443c2:	0019      	movs	r1, r3
100443c4:	4a0f      	ldr	r2, [pc, #60]	@ (10044404 <NVMDB_ReadCurrentRecord+0x64>)
100443c6:	000b      	movs	r3, r1
100443c8:	009b      	lsls	r3, r3, #2
100443ca:	185b      	adds	r3, r3, r1
100443cc:	009b      	lsls	r3, r3, #2
100443ce:	18d3      	adds	r3, r2, r3
100443d0:	330e      	adds	r3, #14
100443d2:	781b      	ldrb	r3, [r3, #0]
100443d4:	2b00      	cmp	r3, #0
100443d6:	d001      	beq.n	100443dc <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
100443d8:	230a      	movs	r3, #10
100443da:	e00f      	b.n	100443fc <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
100443dc:	2308      	movs	r3, #8
100443de:	18fb      	adds	r3, r7, r3
100443e0:	881c      	ldrh	r4, [r3, #0]
100443e2:	687a      	ldr	r2, [r7, #4]
100443e4:	230a      	movs	r3, #10
100443e6:	18fb      	adds	r3, r7, r3
100443e8:	8819      	ldrh	r1, [r3, #0]
100443ea:	68f8      	ldr	r0, [r7, #12]
100443ec:	2300      	movs	r3, #0
100443ee:	9301      	str	r3, [sp, #4]
100443f0:	6a3b      	ldr	r3, [r7, #32]
100443f2:	9300      	str	r3, [sp, #0]
100443f4:	0023      	movs	r3, r4
100443f6:	f7ff f915 	bl	10043624 <ReadCurrentRecordNoLock>
100443fa:	0003      	movs	r3, r0
}
100443fc:	0018      	movs	r0, r3
100443fe:	46bd      	mov	sp, r7
10044400:	b005      	add	sp, #20
10044402:	bd90      	pop	{r4, r7, pc}
10044404:	20000454 	.word	0x20000454

10044408 <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
10044408:	b5f0      	push	{r4, r5, r6, r7, lr}
1004440a:	46c6      	mov	lr, r8
1004440c:	b500      	push	{lr}
1004440e:	b088      	sub	sp, #32
10044410:	af02      	add	r7, sp, #8
10044412:	60f8      	str	r0, [r7, #12]
10044414:	0008      	movs	r0, r1
10044416:	0011      	movs	r1, r2
10044418:	607b      	str	r3, [r7, #4]
1004441a:	230b      	movs	r3, #11
1004441c:	001c      	movs	r4, r3
1004441e:	18fb      	adds	r3, r7, r3
10044420:	1c02      	adds	r2, r0, #0
10044422:	701a      	strb	r2, [r3, #0]
10044424:	2008      	movs	r0, #8
10044426:	183b      	adds	r3, r7, r0
10044428:	1c0a      	adds	r2, r1, #0
1004442a:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
1004442c:	2617      	movs	r6, #23
1004442e:	46b0      	mov	r8, r6
10044430:	44b8      	add	r8, r7
10044432:	687d      	ldr	r5, [r7, #4]
10044434:	183b      	adds	r3, r7, r0
10044436:	881a      	ldrh	r2, [r3, #0]
10044438:	0023      	movs	r3, r4
1004443a:	18fb      	adds	r3, r7, r3
1004443c:	7819      	ldrb	r1, [r3, #0]
1004443e:	68f8      	ldr	r0, [r7, #12]
10044440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044442:	9301      	str	r3, [sp, #4]
10044444:	2328      	movs	r3, #40	@ 0x28
10044446:	2408      	movs	r4, #8
10044448:	191b      	adds	r3, r3, r4
1004444a:	19db      	adds	r3, r3, r7
1004444c:	881b      	ldrh	r3, [r3, #0]
1004444e:	9300      	str	r3, [sp, #0]
10044450:	002b      	movs	r3, r5
10044452:	f7ff fd19 	bl	10043e88 <NVMDB_AppendRecordNoCache>
10044456:	0003      	movs	r3, r0
10044458:	4642      	mov	r2, r8
1004445a:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
1004445c:	19bb      	adds	r3, r7, r6
1004445e:	781b      	ldrb	r3, [r3, #0]
10044460:	2b00      	cmp	r3, #0
10044462:	d002      	beq.n	1004446a <NVMDB_AppendRecord+0x62>
  {
    return status;
10044464:	19bb      	adds	r3, r7, r6
10044466:	781b      	ldrb	r3, [r3, #0]
10044468:	e02c      	b.n	100444c4 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
1004446a:	68fb      	ldr	r3, [r7, #12]
1004446c:	781b      	ldrb	r3, [r3, #0]
1004446e:	0019      	movs	r1, r3
10044470:	4a17      	ldr	r2, [pc, #92]	@ (100444d0 <NVMDB_AppendRecord+0xc8>)
10044472:	000b      	movs	r3, r1
10044474:	009b      	lsls	r3, r3, #2
10044476:	185b      	adds	r3, r3, r1
10044478:	009b      	lsls	r3, r3, #2
1004447a:	18d3      	adds	r3, r2, r3
1004447c:	330c      	adds	r3, #12
1004447e:	881a      	ldrh	r2, [r3, #0]
10044480:	2308      	movs	r3, #8
10044482:	0018      	movs	r0, r3
10044484:	18f9      	adds	r1, r7, r3
10044486:	2328      	movs	r3, #40	@ 0x28
10044488:	181b      	adds	r3, r3, r0
1004448a:	19db      	adds	r3, r3, r7
1004448c:	8809      	ldrh	r1, [r1, #0]
1004448e:	881b      	ldrh	r3, [r3, #0]
10044490:	18cb      	adds	r3, r1, r3
10044492:	b29b      	uxth	r3, r3
10044494:	3b01      	subs	r3, #1
10044496:	b29b      	uxth	r3, r3
10044498:	b21b      	sxth	r3, r3
1004449a:	2103      	movs	r1, #3
1004449c:	430b      	orrs	r3, r1
1004449e:	b21b      	sxth	r3, r3
100444a0:	b29b      	uxth	r3, r3
100444a2:	1ad3      	subs	r3, r2, r3
100444a4:	b29b      	uxth	r3, r3
100444a6:	68fa      	ldr	r2, [r7, #12]
100444a8:	7812      	ldrb	r2, [r2, #0]
100444aa:	0011      	movs	r1, r2
100444ac:	3b05      	subs	r3, #5
100444ae:	b298      	uxth	r0, r3
100444b0:	4a07      	ldr	r2, [pc, #28]	@ (100444d0 <NVMDB_AppendRecord+0xc8>)
100444b2:	000b      	movs	r3, r1
100444b4:	009b      	lsls	r3, r3, #2
100444b6:	185b      	adds	r3, r3, r1
100444b8:	009b      	lsls	r3, r3, #2
100444ba:	18d3      	adds	r3, r2, r3
100444bc:	330c      	adds	r3, #12
100444be:	1c02      	adds	r2, r0, #0
100444c0:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
100444c2:	2300      	movs	r3, #0
}
100444c4:	0018      	movs	r0, r3
100444c6:	46bd      	mov	sp, r7
100444c8:	b006      	add	sp, #24
100444ca:	bc80      	pop	{r7}
100444cc:	46b8      	mov	r8, r7
100444ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100444d0:	20000454 	.word	0x20000454

100444d4 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
100444d4:	b5b0      	push	{r4, r5, r7, lr}
100444d6:	b084      	sub	sp, #16
100444d8:	af00      	add	r7, sp, #0
100444da:	0002      	movs	r2, r0
100444dc:	1dfb      	adds	r3, r7, #7
100444de:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
100444e0:	250f      	movs	r5, #15
100444e2:	197c      	adds	r4, r7, r5
100444e4:	2308      	movs	r3, #8
100444e6:	18fa      	adds	r2, r7, r3
100444e8:	1dfb      	adds	r3, r7, #7
100444ea:	781b      	ldrb	r3, [r3, #0]
100444ec:	0011      	movs	r1, r2
100444ee:	0018      	movs	r0, r3
100444f0:	f7ff fc5c 	bl	10043dac <GetDBType>
100444f4:	0003      	movs	r3, r0
100444f6:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
100444f8:	197b      	adds	r3, r7, r5
100444fa:	781b      	ldrb	r3, [r3, #0]
100444fc:	2b02      	cmp	r3, #2
100444fe:	d106      	bne.n	1004450e <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
10044500:	1dfb      	adds	r3, r7, #7
10044502:	781b      	ldrb	r3, [r3, #0]
10044504:	0018      	movs	r0, r3
10044506:	f7ff fa69 	bl	100439dc <CleanLargeDB>
1004450a:	0003      	movs	r3, r0
1004450c:	e00b      	b.n	10044526 <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
1004450e:	230f      	movs	r3, #15
10044510:	18fb      	adds	r3, r7, r3
10044512:	781b      	ldrb	r3, [r3, #0]
10044514:	2b01      	cmp	r3, #1
10044516:	d105      	bne.n	10044524 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
10044518:	68bb      	ldr	r3, [r7, #8]
1004451a:	0018      	movs	r0, r3
1004451c:	f7ff fb3c 	bl	10043b98 <CleanPage>
10044520:	0003      	movs	r3, r0
10044522:	e000      	b.n	10044526 <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
10044524:	2301      	movs	r3, #1
}
10044526:	0018      	movs	r0, r3
10044528:	46bd      	mov	sp, r7
1004452a:	b004      	add	sp, #16
1004452c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10044530 <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
10044530:	b590      	push	{r4, r7, lr}
10044532:	b083      	sub	sp, #12
10044534:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
10044536:	1dfc      	adds	r4, r7, #7
10044538:	f000 f816 	bl	10044568 <NVMDB_CleanCheck>
1004453c:	0003      	movs	r3, r0
1004453e:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
10044540:	1dfb      	adds	r3, r7, #7
10044542:	781b      	ldrb	r3, [r3, #0]
10044544:	2b7f      	cmp	r3, #127	@ 0x7f
10044546:	d808      	bhi.n	1004455a <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
10044548:	1dfb      	adds	r3, r7, #7
1004454a:	781b      	ldrb	r3, [r3, #0]
1004454c:	0018      	movs	r0, r3
1004454e:	f7ff ffc1 	bl	100444d4 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
10044552:	4b04      	ldr	r3, [pc, #16]	@ (10044564 <NVMDB_Tick+0x34>)
10044554:	0018      	movs	r0, r3
10044556:	f009 fb61 	bl	1004dc1c <puts>
  }
#endif

  return NVMDB_STATUS_OK;
1004455a:	2300      	movs	r3, #0
}
1004455c:	0018      	movs	r0, r3
1004455e:	46bd      	mov	sp, r7
10044560:	b003      	add	sp, #12
10044562:	bd90      	pop	{r4, r7, pc}
10044564:	1004edf4 	.word	0x1004edf4

10044568 <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
10044568:	b580      	push	{r7, lr}
1004456a:	b082      	sub	sp, #8
1004456c:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
1004456e:	4b2b      	ldr	r3, [pc, #172]	@ (1004461c <NVMDB_CleanCheck+0xb4>)
10044570:	2200      	movs	r2, #0
10044572:	569a      	ldrsb	r2, [r3, r2]
10044574:	1dfb      	adds	r3, r7, #7
10044576:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
10044578:	1dfb      	adds	r3, r7, #7
1004457a:	781a      	ldrb	r2, [r3, #0]
1004457c:	4928      	ldr	r1, [pc, #160]	@ (10044620 <NVMDB_CleanCheck+0xb8>)
1004457e:	0013      	movs	r3, r2
10044580:	009b      	lsls	r3, r3, #2
10044582:	189b      	adds	r3, r3, r2
10044584:	009b      	lsls	r3, r3, #2
10044586:	18cb      	adds	r3, r1, r3
10044588:	330a      	adds	r3, #10
1004458a:	881b      	ldrh	r3, [r3, #0]
1004458c:	2b00      	cmp	r3, #0
1004458e:	d028      	beq.n	100445e2 <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
10044590:	1dfb      	adds	r3, r7, #7
10044592:	781a      	ldrb	r2, [r3, #0]
10044594:	4922      	ldr	r1, [pc, #136]	@ (10044620 <NVMDB_CleanCheck+0xb8>)
10044596:	0013      	movs	r3, r2
10044598:	009b      	lsls	r3, r3, #2
1004459a:	189b      	adds	r3, r3, r2
1004459c:	009b      	lsls	r3, r3, #2
1004459e:	18cb      	adds	r3, r1, r3
100445a0:	330c      	adds	r3, #12
100445a2:	8819      	ldrh	r1, [r3, #0]
100445a4:	1dfb      	adds	r3, r7, #7
100445a6:	781a      	ldrb	r2, [r3, #0]
100445a8:	481d      	ldr	r0, [pc, #116]	@ (10044620 <NVMDB_CleanCheck+0xb8>)
100445aa:	0013      	movs	r3, r2
100445ac:	009b      	lsls	r3, r3, #2
100445ae:	189b      	adds	r3, r3, r2
100445b0:	009b      	lsls	r3, r3, #2
100445b2:	18c3      	adds	r3, r0, r3
100445b4:	3310      	adds	r3, #16
100445b6:	881b      	ldrh	r3, [r3, #0]
100445b8:	4299      	cmp	r1, r3
100445ba:	d212      	bcs.n	100445e2 <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
100445bc:	1dfb      	adds	r3, r7, #7
100445be:	781b      	ldrb	r3, [r3, #0]
100445c0:	3301      	adds	r3, #1
100445c2:	b2db      	uxtb	r3, r3
100445c4:	b25a      	sxtb	r2, r3
100445c6:	4b15      	ldr	r3, [pc, #84]	@ (1004461c <NVMDB_CleanCheck+0xb4>)
100445c8:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
100445ca:	4b14      	ldr	r3, [pc, #80]	@ (1004461c <NVMDB_CleanCheck+0xb4>)
100445cc:	781b      	ldrb	r3, [r3, #0]
100445ce:	b25b      	sxtb	r3, r3
100445d0:	2b02      	cmp	r3, #2
100445d2:	d102      	bne.n	100445da <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
100445d4:	4b11      	ldr	r3, [pc, #68]	@ (1004461c <NVMDB_CleanCheck+0xb4>)
100445d6:	2200      	movs	r2, #0
100445d8:	701a      	strb	r2, [r3, #0]
        }
        return i;
100445da:	1dfb      	adds	r3, r7, #7
100445dc:	781b      	ldrb	r3, [r3, #0]
100445de:	b25b      	sxtb	r3, r3
100445e0:	e017      	b.n	10044612 <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
100445e2:	1dfb      	adds	r3, r7, #7
100445e4:	781a      	ldrb	r2, [r3, #0]
100445e6:	1dfb      	adds	r3, r7, #7
100445e8:	3201      	adds	r2, #1
100445ea:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
100445ec:	1dfb      	adds	r3, r7, #7
100445ee:	781b      	ldrb	r3, [r3, #0]
100445f0:	2b02      	cmp	r3, #2
100445f2:	d102      	bne.n	100445fa <NVMDB_CleanCheck+0x92>
    {
      i = 0;
100445f4:	1dfb      	adds	r3, r7, #7
100445f6:	2200      	movs	r2, #0
100445f8:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
100445fa:	1dfb      	adds	r3, r7, #7
100445fc:	781b      	ldrb	r3, [r3, #0]
100445fe:	4a07      	ldr	r2, [pc, #28]	@ (1004461c <NVMDB_CleanCheck+0xb4>)
10044600:	7812      	ldrb	r2, [r2, #0]
10044602:	b252      	sxtb	r2, r2
10044604:	4293      	cmp	r3, r2
10044606:	d1b7      	bne.n	10044578 <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
10044608:	4b04      	ldr	r3, [pc, #16]	@ (1004461c <NVMDB_CleanCheck+0xb4>)
1004460a:	2200      	movs	r2, #0
1004460c:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
1004460e:	2301      	movs	r3, #1
10044610:	425b      	negs	r3, r3
}
10044612:	0018      	movs	r0, r3
10044614:	46bd      	mov	sp, r7
10044616:	b002      	add	sp, #8
10044618:	bd80      	pop	{r7, pc}
1004461a:	46c0      	nop			@ (mov r8, r8)
1004461c:	2000047c 	.word	0x2000047c
10044620:	20000454 	.word	0x20000454

10044624 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
10044624:	b580      	push	{r7, lr}
10044626:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
10044628:	4b03      	ldr	r3, [pc, #12]	@ (10044638 <PKAMGR_Init+0x14>)
1004462a:	2201      	movs	r2, #1
1004462c:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
1004462e:	2300      	movs	r3, #0
}
10044630:	0018      	movs	r0, r3
10044632:	46bd      	mov	sp, r7
10044634:	bd80      	pop	{r7, pc}
10044636:	46c0      	nop			@ (mov r8, r8)
10044638:	20000890 	.word	0x20000890

1004463c <PKAMGR_Unlock>:

  return return_value;
}

PKAMGR_ResultStatus PKAMGR_Unlock()
{
1004463c:	b580      	push	{r7, lr}
1004463e:	b084      	sub	sp, #16
10044640:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_SUCCESS;
10044642:	210f      	movs	r1, #15
10044644:	187b      	adds	r3, r7, r1
10044646:	2200      	movs	r2, #0
10044648:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004464a:	f3ef 8310 	mrs	r3, PRIMASK
1004464e:	607b      	str	r3, [r7, #4]
  return(result);
10044650:	687b      	ldr	r3, [r7, #4]

  /* Only one consumer (Application layer or Stack) can use the PKA at the time */
  ATOMIC_SECTION_BEGIN();
10044652:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
10044654:	b672      	cpsid	i
}
10044656:	46c0      	nop			@ (mov r8, r8)
  if(internalState != PKAMGR_STATE_BUSY)
10044658:	4b0c      	ldr	r3, [pc, #48]	@ (1004468c <PKAMGR_Unlock+0x50>)
1004465a:	681b      	ldr	r3, [r3, #0]
1004465c:	2b03      	cmp	r3, #3
1004465e:	d003      	beq.n	10044668 <PKAMGR_Unlock+0x2c>
  {
    return_value = PKAMGR_ERR_BUSY;
10044660:	187b      	adds	r3, r7, r1
10044662:	22fe      	movs	r2, #254	@ 0xfe
10044664:	701a      	strb	r2, [r3, #0]
10044666:	e002      	b.n	1004466e <PKAMGR_Unlock+0x32>
  }
  else
  {
    /* Unlock mechanism to access concurrently at the PKA resource */
    internalState = PKAMGR_STATE_IDLE;
10044668:	4b08      	ldr	r3, [pc, #32]	@ (1004468c <PKAMGR_Unlock+0x50>)
1004466a:	2201      	movs	r2, #1
1004466c:	601a      	str	r2, [r3, #0]
1004466e:	68bb      	ldr	r3, [r7, #8]
10044670:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044672:	683b      	ldr	r3, [r7, #0]
10044674:	f383 8810 	msr	PRIMASK, r3
}
10044678:	46c0      	nop			@ (mov r8, r8)
  }
  ATOMIC_SECTION_END();

  return return_value;
1004467a:	230f      	movs	r3, #15
1004467c:	18fb      	adds	r3, r7, r3
1004467e:	781b      	ldrb	r3, [r3, #0]
10044680:	b25b      	sxtb	r3, r3
}
10044682:	0018      	movs	r0, r3
10044684:	46bd      	mov	sp, r7
10044686:	b004      	add	sp, #16
10044688:	bd80      	pop	{r7, pc}
1004468a:	46c0      	nop			@ (mov r8, r8)
1004468c:	20000890 	.word	0x20000890

10044690 <PKAMGR_IRQCallback>:
{
  return HW_PKA_StartP256DHkeyGeneration(privateKey, (uint32_t *)&PKAStartPoint[0], funcCB);
}

__weak void PKAMGR_IRQCallback(void)
{
10044690:	b580      	push	{r7, lr}
10044692:	af00      	add	r7, sp, #0
}
10044694:	46c0      	nop			@ (mov r8, r8)
10044696:	46bd      	mov	sp, r7
10044698:	bd80      	pop	{r7, pc}

1004469a <aci_gatt_srv_profile_init>:

#else /* (CFG_BLE_CONNECTION_ENABLED == 0) */

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
1004469a:	b580      	push	{r7, lr}
1004469c:	b082      	sub	sp, #8
1004469e:	af00      	add	r7, sp, #0
100446a0:	0002      	movs	r2, r0
100446a2:	6039      	str	r1, [r7, #0]
100446a4:	1dfb      	adds	r3, r7, #7
100446a6:	701a      	strb	r2, [r3, #0]
  return BLE_ERROR_UNSUPPORTED_FEATURE;
100446a8:	2311      	movs	r3, #17
}
100446aa:	0018      	movs	r0, r3
100446ac:	46bd      	mov	sp, r7
100446ae:	b002      	add	sp, #8
100446b0:	bd80      	pop	{r7, pc}
	...

100446b4 <LL_PWR_IsSMPSReady>:
{
100446b4:	b580      	push	{r7, lr}
100446b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
100446b8:	4b05      	ldr	r3, [pc, #20]	@ (100446d0 <LL_PWR_IsSMPSReady+0x1c>)
100446ba:	695b      	ldr	r3, [r3, #20]
100446bc:	2204      	movs	r2, #4
100446be:	4013      	ands	r3, r2
100446c0:	2b04      	cmp	r3, #4
100446c2:	d101      	bne.n	100446c8 <LL_PWR_IsSMPSReady+0x14>
100446c4:	2301      	movs	r3, #1
100446c6:	e000      	b.n	100446ca <LL_PWR_IsSMPSReady+0x16>
100446c8:	2300      	movs	r3, #0
}
100446ca:	0018      	movs	r0, r3
100446cc:	46bd      	mov	sp, r7
100446ce:	bd80      	pop	{r7, pc}
100446d0:	48500000 	.word	0x48500000

100446d4 <LL_PWR_GetSMPSMode>:
{
100446d4:	b580      	push	{r7, lr}
100446d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
100446d8:	4b03      	ldr	r3, [pc, #12]	@ (100446e8 <LL_PWR_GetSMPSMode+0x14>)
100446da:	69da      	ldr	r2, [r3, #28]
100446dc:	2380      	movs	r3, #128	@ 0x80
100446de:	00db      	lsls	r3, r3, #3
100446e0:	4013      	ands	r3, r2
}
100446e2:	0018      	movs	r0, r3
100446e4:	46bd      	mov	sp, r7
100446e6:	bd80      	pop	{r7, pc}
100446e8:	48500000 	.word	0x48500000

100446ec <LL_PWR_SetSMPSPrechargeMode>:
{
100446ec:	b580      	push	{r7, lr}
100446ee:	b082      	sub	sp, #8
100446f0:	af00      	add	r7, sp, #0
100446f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
100446f4:	4b06      	ldr	r3, [pc, #24]	@ (10044710 <LL_PWR_SetSMPSPrechargeMode+0x24>)
100446f6:	69db      	ldr	r3, [r3, #28]
100446f8:	4a06      	ldr	r2, [pc, #24]	@ (10044714 <LL_PWR_SetSMPSPrechargeMode+0x28>)
100446fa:	4013      	ands	r3, r2
100446fc:	0019      	movs	r1, r3
100446fe:	4b04      	ldr	r3, [pc, #16]	@ (10044710 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10044700:	687a      	ldr	r2, [r7, #4]
10044702:	430a      	orrs	r2, r1
10044704:	61da      	str	r2, [r3, #28]
}
10044706:	46c0      	nop			@ (mov r8, r8)
10044708:	46bd      	mov	sp, r7
1004470a:	b002      	add	sp, #8
1004470c:	bd80      	pop	{r7, pc}
1004470e:	46c0      	nop			@ (mov r8, r8)
10044710:	48500000 	.word	0x48500000
10044714:	fffffdff 	.word	0xfffffdff

10044718 <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
10044718:	b580      	push	{r7, lr}
1004471a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
1004471c:	4b07      	ldr	r3, [pc, #28]	@ (1004473c <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
1004471e:	69da      	ldr	r2, [r3, #28]
10044720:	2380      	movs	r3, #128	@ 0x80
10044722:	009b      	lsls	r3, r3, #2
10044724:	401a      	ands	r2, r3
10044726:	2380      	movs	r3, #128	@ 0x80
10044728:	009b      	lsls	r3, r3, #2
1004472a:	429a      	cmp	r2, r3
1004472c:	d101      	bne.n	10044732 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
1004472e:	2301      	movs	r3, #1
10044730:	e000      	b.n	10044734 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
10044732:	2300      	movs	r3, #0
}
10044734:	0018      	movs	r0, r3
10044736:	46bd      	mov	sp, r7
10044738:	bd80      	pop	{r7, pc}
1004473a:	46c0      	nop			@ (mov r8, r8)
1004473c:	48500000 	.word	0x48500000

10044740 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
10044740:	b580      	push	{r7, lr}
10044742:	b082      	sub	sp, #8
10044744:	af00      	add	r7, sp, #0
10044746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
10044748:	4b06      	ldr	r3, [pc, #24]	@ (10044764 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004474a:	69db      	ldr	r3, [r3, #28]
1004474c:	220f      	movs	r2, #15
1004474e:	4393      	bics	r3, r2
10044750:	0019      	movs	r1, r3
10044752:	4b04      	ldr	r3, [pc, #16]	@ (10044764 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
10044754:	687a      	ldr	r2, [r7, #4]
10044756:	430a      	orrs	r2, r1
10044758:	61da      	str	r2, [r3, #28]
}
1004475a:	46c0      	nop			@ (mov r8, r8)
1004475c:	46bd      	mov	sp, r7
1004475e:	b002      	add	sp, #8
10044760:	bd80      	pop	{r7, pc}
10044762:	46c0      	nop			@ (mov r8, r8)
10044764:	48500000 	.word	0x48500000

10044768 <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
10044768:	b580      	push	{r7, lr}
1004476a:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
1004476c:	2320      	movs	r3, #32
}
1004476e:	0018      	movs	r0, r3
10044770:	46bd      	mov	sp, r7
10044772:	bd80      	pop	{r7, pc}

10044774 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
10044774:	b580      	push	{r7, lr}
10044776:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
10044778:	231f      	movs	r3, #31
}
1004477a:	0018      	movs	r0, r3
1004477c:	46bd      	mov	sp, r7
1004477e:	bd80      	pop	{r7, pc}

10044780 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
10044780:	b580      	push	{r7, lr}
10044782:	b082      	sub	sp, #8
10044784:	af00      	add	r7, sp, #0
10044786:	0002      	movs	r2, r0
10044788:	1dfb      	adds	r3, r7, #7
1004478a:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
1004478c:	1dfb      	adds	r3, r7, #7
1004478e:	781b      	ldrb	r3, [r3, #0]
10044790:	2b00      	cmp	r3, #0
10044792:	d007      	beq.n	100447a4 <RADIO_SetHighPower+0x24>
  {
    if(high_power == FALSE)
10044794:	4b1d      	ldr	r3, [pc, #116]	@ (1004480c <RADIO_SetHighPower+0x8c>)
10044796:	781b      	ldrb	r3, [r3, #0]
10044798:	2b00      	cmp	r3, #0
1004479a:	d10a      	bne.n	100447b2 <RADIO_SetHighPower+0x32>
    {
      high_power = TRUE;
1004479c:	4b1b      	ldr	r3, [pc, #108]	@ (1004480c <RADIO_SetHighPower+0x8c>)
1004479e:	2201      	movs	r2, #1
100447a0:	701a      	strb	r2, [r3, #0]
100447a2:	e006      	b.n	100447b2 <RADIO_SetHighPower+0x32>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
100447a4:	4b19      	ldr	r3, [pc, #100]	@ (1004480c <RADIO_SetHighPower+0x8c>)
100447a6:	781b      	ldrb	r3, [r3, #0]
100447a8:	2b01      	cmp	r3, #1
100447aa:	d102      	bne.n	100447b2 <RADIO_SetHighPower+0x32>
    {
      high_power = FALSE;
100447ac:	4b17      	ldr	r3, [pc, #92]	@ (1004480c <RADIO_SetHighPower+0x8c>)
100447ae:	2200      	movs	r2, #0
100447b0:	701a      	strb	r2, [r3, #0]
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
100447b2:	f7ff ffb1 	bl	10044718 <LL_PWR_IsEnabledSMPSPrechargeMode>
100447b6:	1e03      	subs	r3, r0, #0
100447b8:	d124      	bne.n	10044804 <RADIO_SetHighPower+0x84>
100447ba:	f7ff ff8b 	bl	100446d4 <LL_PWR_GetSMPSMode>
100447be:	0002      	movs	r2, r0
100447c0:	2380      	movs	r3, #128	@ 0x80
100447c2:	00db      	lsls	r3, r3, #3
100447c4:	429a      	cmp	r2, r3
100447c6:	d01d      	beq.n	10044804 <RADIO_SetHighPower+0x84>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
100447c8:	2380      	movs	r3, #128	@ 0x80
100447ca:	009b      	lsls	r3, r3, #2
100447cc:	0018      	movs	r0, r3
100447ce:	f7ff ff8d 	bl	100446ec <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
100447d2:	46c0      	nop			@ (mov r8, r8)
100447d4:	f7ff ff6e 	bl	100446b4 <LL_PWR_IsSMPSReady>
100447d8:	1e03      	subs	r3, r0, #0
100447da:	d1fb      	bne.n	100447d4 <RADIO_SetHighPower+0x54>
  /* Change level */
  if(state != DISABLE)
100447dc:	1dfb      	adds	r3, r7, #7
100447de:	781b      	ldrb	r3, [r3, #0]
100447e0:	2b00      	cmp	r3, #0
100447e2:	d003      	beq.n	100447ec <RADIO_SetHighPower+0x6c>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
100447e4:	200e      	movs	r0, #14
100447e6:	f7ff ffab 	bl	10044740 <LL_PWR_SMPS_SetOutputVoltageLevel>
100447ea:	e002      	b.n	100447f2 <RADIO_SetHighPower+0x72>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
100447ec:	2004      	movs	r0, #4
100447ee:	f7ff ffa7 	bl	10044740 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
100447f2:	2000      	movs	r0, #0
100447f4:	f7ff ff7a 	bl	100446ec <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
100447f8:	46c0      	nop			@ (mov r8, r8)
100447fa:	f7ff ff5b 	bl	100446b4 <LL_PWR_IsSMPSReady>
100447fe:	1e03      	subs	r3, r0, #0
10044800:	d0fb      	beq.n	100447fa <RADIO_SetHighPower+0x7a>
10044802:	e000      	b.n	10044806 <RADIO_SetHighPower+0x86>
    return;
10044804:	46c0      	nop			@ (mov r8, r8)
}
10044806:	46bd      	mov	sp, r7
10044808:	b002      	add	sp, #8
1004480a:	bd80      	pop	{r7, pc}
1004480c:	20000484 	.word	0x20000484

10044810 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
10044810:	b580      	push	{r7, lr}
10044812:	af00      	add	r7, sp, #0
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
  }
#endif
}
10044814:	46c0      	nop			@ (mov r8, r8)
10044816:	46bd      	mov	sp, r7
10044818:	bd80      	pop	{r7, pc}

1004481a <LL_SYSCFG_GetDeviceRevision>:
  * @brief  Get the device cut revision (metal fix) information.
  * @rmtoll DIE_ID REVISION   LL_SYSCFG_GetDeviceRevision
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceRevision(void)
{
1004481a:	b580      	push	{r7, lr}
1004481c:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
1004481e:	2380      	movs	r3, #128	@ 0x80
10044820:	05db      	lsls	r3, r3, #23
10044822:	681b      	ldr	r3, [r3, #0]
10044824:	220f      	movs	r2, #15
10044826:	4013      	ands	r3, r2
}
10044828:	0018      	movs	r0, r3
1004482a:	46bd      	mov	sp, r7
1004482c:	bd80      	pop	{r7, pc}

1004482e <LL_SYSCFG_GetDeviceVersion>:
  * @brief  Get the device cut version information.
  * @rmtoll DIE_ID VERSION   LL_SYSCFG_GetDeviceVersion
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceVersion(void)
{
1004482e:	b580      	push	{r7, lr}
10044830:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
10044832:	2380      	movs	r3, #128	@ 0x80
10044834:	05db      	lsls	r3, r3, #23
10044836:	681b      	ldr	r3, [r3, #0]
10044838:	091b      	lsrs	r3, r3, #4
1004483a:	220f      	movs	r2, #15
1004483c:	4013      	ands	r3, r2
}
1004483e:	0018      	movs	r0, r3
10044840:	46bd      	mov	sp, r7
10044842:	bd80      	pop	{r7, pc}

10044844 <LL_SYSCFG_GetDeviceJTAG_ID>:
  * @brief  Get the JTAG_ID device information.
  * @rmtoll JTAG_ID    LL_SYSCFG_GetDeviceJTAG_ID
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceJTAG_ID(void)
{
10044844:	b580      	push	{r7, lr}
10044846:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
10044848:	2380      	movs	r3, #128	@ 0x80
1004484a:	05db      	lsls	r3, r3, #23
1004484c:	685b      	ldr	r3, [r3, #4]
}
1004484e:	0018      	movs	r0, r3
10044850:	46bd      	mov	sp, r7
10044852:	bd80      	pop	{r7, pc}

10044854 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
10044854:	b580      	push	{r7, lr}
10044856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
10044858:	4b03      	ldr	r3, [pc, #12]	@ (10044868 <LL_GetFlashSize+0x14>)
1004485a:	681b      	ldr	r3, [r3, #0]
1004485c:	041b      	lsls	r3, r3, #16
1004485e:	0c1b      	lsrs	r3, r3, #16
}
10044860:	0018      	movs	r0, r3
10044862:	46bd      	mov	sp, r7
10044864:	bd80      	pop	{r7, pc}
10044866:	46c0      	nop			@ (mov r8, r8)
10044868:	40001014 	.word	0x40001014

1004486c <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
1004486c:	b580      	push	{r7, lr}
1004486e:	b082      	sub	sp, #8
10044870:	af00      	add	r7, sp, #0
    __IOM uint32_t tmpreg;
#if defined(FLASH_FLASH_SIZE_RAM_SIZE)
    tmpreg = (READ_REG(*((uint32_t *)RAMSIZE_BASE_ADDRESS)) & FLASH_FLASH_SIZE_RAM_SIZE) >> FLASH_FLASH_SIZE_RAM_SIZE_Pos;
10044872:	4b08      	ldr	r3, [pc, #32]	@ (10044894 <LL_GetRAMSize+0x28>)
10044874:	681b      	ldr	r3, [r3, #0]
10044876:	0c5b      	lsrs	r3, r3, #17
10044878:	2203      	movs	r2, #3
1004487a:	4013      	ands	r3, r2
1004487c:	607b      	str	r3, [r7, #4]

    if (tmpreg == 0) {
1004487e:	687b      	ldr	r3, [r7, #4]
10044880:	2b00      	cmp	r3, #0
10044882:	d101      	bne.n	10044888 <LL_GetRAMSize+0x1c>
      tmpreg = LL_UTILS_RAMSIZE_32K;
10044884:	2301      	movs	r3, #1
10044886:	607b      	str	r3, [r7, #4]
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
#endif
    
    return tmpreg;
10044888:	687b      	ldr	r3, [r7, #4]
  }
1004488a:	0018      	movs	r0, r3
1004488c:	46bd      	mov	sp, r7
1004488e:	b002      	add	sp, #8
10044890:	bd80      	pop	{r7, pc}
10044892:	46c0      	nop			@ (mov r8, r8)
10044894:	40001014 	.word	0x40001014

10044898 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
10044898:	b580      	push	{r7, lr}
1004489a:	b084      	sub	sp, #16
1004489c:	af00      	add	r7, sp, #0
1004489e:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
100448a0:	687b      	ldr	r3, [r7, #4]
100448a2:	22ff      	movs	r2, #255	@ 0xff
100448a4:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
100448a6:	f7ff ffcd 	bl	10044844 <LL_SYSCFG_GetDeviceJTAG_ID>
100448aa:	0003      	movs	r3, r0
100448ac:	60fb      	str	r3, [r7, #12]

#if defined(STM32WB09)
  if(jtag_id == JTAG_ID_CODE_STM32WB09XX)
100448ae:	68fb      	ldr	r3, [r7, #12]
100448b0:	4a18      	ldr	r2, [pc, #96]	@ (10044914 <GetPartInfo+0x7c>)
100448b2:	4293      	cmp	r3, r2
100448b4:	d102      	bne.n	100448bc <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB09XX;
100448b6:	687b      	ldr	r3, [r7, #4]
100448b8:	2206      	movs	r2, #6
100448ba:	701a      	strb	r2, [r3, #0]
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
100448bc:	f7ff ffb7 	bl	1004482e <LL_SYSCFG_GetDeviceVersion>
100448c0:	0003      	movs	r3, r0
100448c2:	b2da      	uxtb	r2, r3
100448c4:	687b      	ldr	r3, [r7, #4]
100448c6:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
100448c8:	f7ff ffa7 	bl	1004481a <LL_SYSCFG_GetDeviceRevision>
100448cc:	0003      	movs	r3, r0
100448ce:	b2da      	uxtb	r2, r3
100448d0:	687b      	ldr	r3, [r7, #4]
100448d2:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
100448d4:	f7ff ffb6 	bl	10044844 <LL_SYSCFG_GetDeviceJTAG_ID>
100448d8:	0002      	movs	r2, r0
100448da:	687b      	ldr	r3, [r7, #4]
100448dc:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
100448de:	f7ff ffb9 	bl	10044854 <LL_GetFlashSize>
100448e2:	0003      	movs	r3, r0
100448e4:	3301      	adds	r3, #1
100448e6:	009a      	lsls	r2, r3, #2
100448e8:	687b      	ldr	r3, [r7, #4]
100448ea:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
100448ec:	f7ff ffbe 	bl	1004486c <LL_GetRAMSize>
100448f0:	1e03      	subs	r3, r0, #0
100448f2:	d007      	beq.n	10044904 <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
100448f4:	f7ff ffba 	bl	1004486c <LL_GetRAMSize>
100448f8:	0003      	movs	r3, r0
100448fa:	3301      	adds	r3, #1
100448fc:	039a      	lsls	r2, r3, #14
100448fe:	687b      	ldr	r3, [r7, #4]
10044900:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
10044902:	e003      	b.n	1004490c <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
10044904:	687b      	ldr	r3, [r7, #4]
10044906:	22c0      	movs	r2, #192	@ 0xc0
10044908:	01d2      	lsls	r2, r2, #7
1004490a:	60da      	str	r2, [r3, #12]
}
1004490c:	46c0      	nop			@ (mov r8, r8)
1004490e:	46bd      	mov	sp, r7
10044910:	b004      	add	sp, #16
10044912:	bd80      	pop	{r7, pc}
10044914:	02032041 	.word	0x02032041

10044918 <LL_PWR_IsEnabledPUPDCfg>:
{
10044918:	b580      	push	{r7, lr}
1004491a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
1004491c:	4b05      	ldr	r3, [pc, #20]	@ (10044934 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
1004491e:	681b      	ldr	r3, [r3, #0]
10044920:	2210      	movs	r2, #16
10044922:	4013      	ands	r3, r2
10044924:	2b10      	cmp	r3, #16
10044926:	d101      	bne.n	1004492c <LL_PWR_IsEnabledPUPDCfg+0x14>
10044928:	2301      	movs	r3, #1
1004492a:	e000      	b.n	1004492e <LL_PWR_IsEnabledPUPDCfg+0x16>
1004492c:	2300      	movs	r3, #0
}
1004492e:	0018      	movs	r0, r3
10044930:	46bd      	mov	sp, r7
10044932:	bd80      	pop	{r7, pc}
10044934:	48500000 	.word	0x48500000

10044938 <LL_PWR_EnableGPIOPullUp>:
{
10044938:	b580      	push	{r7, lr}
1004493a:	b082      	sub	sp, #8
1004493c:	af00      	add	r7, sp, #0
1004493e:	6078      	str	r0, [r7, #4]
10044940:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
10044942:	687b      	ldr	r3, [r7, #4]
10044944:	3304      	adds	r3, #4
10044946:	681a      	ldr	r2, [r3, #0]
10044948:	683b      	ldr	r3, [r7, #0]
1004494a:	43d9      	mvns	r1, r3
1004494c:	687b      	ldr	r3, [r7, #4]
1004494e:	3304      	adds	r3, #4
10044950:	400a      	ands	r2, r1
10044952:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10044954:	687b      	ldr	r3, [r7, #4]
10044956:	6819      	ldr	r1, [r3, #0]
10044958:	687b      	ldr	r3, [r7, #4]
1004495a:	683a      	ldr	r2, [r7, #0]
1004495c:	430a      	orrs	r2, r1
1004495e:	601a      	str	r2, [r3, #0]
}
10044960:	46c0      	nop			@ (mov r8, r8)
10044962:	46bd      	mov	sp, r7
10044964:	b002      	add	sp, #8
10044966:	bd80      	pop	{r7, pc}

10044968 <LL_AHB1_GRP1_EnableClock>:
{
10044968:	b580      	push	{r7, lr}
1004496a:	b084      	sub	sp, #16
1004496c:	af00      	add	r7, sp, #0
1004496e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10044970:	4b07      	ldr	r3, [pc, #28]	@ (10044990 <LL_AHB1_GRP1_EnableClock+0x28>)
10044972:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10044974:	4b06      	ldr	r3, [pc, #24]	@ (10044990 <LL_AHB1_GRP1_EnableClock+0x28>)
10044976:	687a      	ldr	r2, [r7, #4]
10044978:	430a      	orrs	r2, r1
1004497a:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004497c:	4b04      	ldr	r3, [pc, #16]	@ (10044990 <LL_AHB1_GRP1_EnableClock+0x28>)
1004497e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10044980:	687a      	ldr	r2, [r7, #4]
10044982:	4013      	ands	r3, r2
10044984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10044986:	68fb      	ldr	r3, [r7, #12]
}
10044988:	46c0      	nop			@ (mov r8, r8)
1004498a:	46bd      	mov	sp, r7
1004498c:	b004      	add	sp, #16
1004498e:	bd80      	pop	{r7, pc}
10044990:	48400000 	.word	0x48400000

10044994 <LL_APB1_GRP1_EnableClock>:
{
10044994:	b580      	push	{r7, lr}
10044996:	b084      	sub	sp, #16
10044998:	af00      	add	r7, sp, #0
1004499a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
1004499c:	4b07      	ldr	r3, [pc, #28]	@ (100449bc <LL_APB1_GRP1_EnableClock+0x28>)
1004499e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
100449a0:	4b06      	ldr	r3, [pc, #24]	@ (100449bc <LL_APB1_GRP1_EnableClock+0x28>)
100449a2:	687a      	ldr	r2, [r7, #4]
100449a4:	430a      	orrs	r2, r1
100449a6:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
100449a8:	4b04      	ldr	r3, [pc, #16]	@ (100449bc <LL_APB1_GRP1_EnableClock+0x28>)
100449aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
100449ac:	687a      	ldr	r2, [r7, #4]
100449ae:	4013      	ands	r3, r2
100449b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100449b2:	68fb      	ldr	r3, [r7, #12]
}
100449b4:	46c0      	nop			@ (mov r8, r8)
100449b6:	46bd      	mov	sp, r7
100449b8:	b004      	add	sp, #16
100449ba:	bd80      	pop	{r7, pc}
100449bc:	48400000 	.word	0x48400000

100449c0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
100449c0:	b580      	push	{r7, lr}
100449c2:	b084      	sub	sp, #16
100449c4:	af00      	add	r7, sp, #0
100449c6:	0002      	movs	r2, r0
100449c8:	6039      	str	r1, [r7, #0]
100449ca:	1dfb      	adds	r3, r7, #7
100449cc:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
100449ce:	2300      	movs	r3, #0
100449d0:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
100449d2:	683b      	ldr	r3, [r7, #0]
100449d4:	2b00      	cmp	r3, #0
100449d6:	d103      	bne.n	100449e0 <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
100449d8:	2302      	movs	r3, #2
100449da:	425b      	negs	r3, r3
100449dc:	60fb      	str	r3, [r7, #12]
100449de:	e026      	b.n	10044a2e <BSP_COM_Init+0x6e>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
100449e0:	1dfb      	adds	r3, r7, #7
100449e2:	7819      	ldrb	r1, [r3, #0]
100449e4:	1dfb      	adds	r3, r7, #7
100449e6:	781a      	ldrb	r2, [r3, #0]
100449e8:	4b13      	ldr	r3, [pc, #76]	@ (10044a38 <BSP_COM_Init+0x78>)
100449ea:	0089      	lsls	r1, r1, #2
100449ec:	58c9      	ldr	r1, [r1, r3]
100449ee:	4b13      	ldr	r3, [pc, #76]	@ (10044a3c <BSP_COM_Init+0x7c>)
100449f0:	2094      	movs	r0, #148	@ 0x94
100449f2:	4342      	muls	r2, r0
100449f4:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
100449f6:	1dfb      	adds	r3, r7, #7
100449f8:	781b      	ldrb	r3, [r3, #0]
100449fa:	2294      	movs	r2, #148	@ 0x94
100449fc:	435a      	muls	r2, r3
100449fe:	4b0f      	ldr	r3, [pc, #60]	@ (10044a3c <BSP_COM_Init+0x7c>)
10044a00:	18d3      	adds	r3, r2, r3
10044a02:	0018      	movs	r0, r3
10044a04:	f000 f868 	bl	10044ad8 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
10044a08:	68fb      	ldr	r3, [r7, #12]
10044a0a:	2b00      	cmp	r3, #0
10044a0c:	d10f      	bne.n	10044a2e <BSP_COM_Init+0x6e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
10044a0e:	1dfb      	adds	r3, r7, #7
10044a10:	781b      	ldrb	r3, [r3, #0]
10044a12:	2294      	movs	r2, #148	@ 0x94
10044a14:	435a      	muls	r2, r3
10044a16:	4b09      	ldr	r3, [pc, #36]	@ (10044a3c <BSP_COM_Init+0x7c>)
10044a18:	18d3      	adds	r3, r2, r3
10044a1a:	683a      	ldr	r2, [r7, #0]
10044a1c:	0011      	movs	r1, r2
10044a1e:	0018      	movs	r0, r3
10044a20:	f000 f828 	bl	10044a74 <MX_USART1_Init>
10044a24:	1e03      	subs	r3, r0, #0
10044a26:	d002      	beq.n	10044a2e <BSP_COM_Init+0x6e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
10044a28:	2304      	movs	r3, #4
10044a2a:	425b      	negs	r3, r3
10044a2c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
10044a2e:	68fb      	ldr	r3, [r7, #12]
}
10044a30:	0018      	movs	r0, r3
10044a32:	46bd      	mov	sp, r7
10044a34:	b004      	add	sp, #16
10044a36:	bd80      	pop	{r7, pc}
10044a38:	20000894 	.word	0x20000894
10044a3c:	20000488 	.word	0x20000488

10044a40 <__io_putchar>:
  return 1;
}

#elif defined(__GNUC__)
int __io_putchar(int ch)
{
10044a40:	b580      	push	{r7, lr}
10044a42:	b082      	sub	sp, #8
10044a44:	af00      	add	r7, sp, #0
10044a46:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
10044a48:	4b08      	ldr	r3, [pc, #32]	@ (10044a6c <__io_putchar+0x2c>)
10044a4a:	781b      	ldrb	r3, [r3, #0]
10044a4c:	001a      	movs	r2, r3
10044a4e:	2394      	movs	r3, #148	@ 0x94
10044a50:	435a      	muls	r2, r3
10044a52:	4b07      	ldr	r3, [pc, #28]	@ (10044a70 <__io_putchar+0x30>)
10044a54:	18d0      	adds	r0, r2, r3
10044a56:	23fa      	movs	r3, #250	@ 0xfa
10044a58:	009b      	lsls	r3, r3, #2
10044a5a:	1d39      	adds	r1, r7, #4
10044a5c:	2201      	movs	r2, #1
10044a5e:	f003 ff47 	bl	100488f0 <HAL_UART_Transmit>
  return ch;
10044a62:	687b      	ldr	r3, [r7, #4]
}
10044a64:	0018      	movs	r0, r3
10044a66:	46bd      	mov	sp, r7
10044a68:	b002      	add	sp, #8
10044a6a:	bd80      	pop	{r7, pc}
10044a6c:	2000051c 	.word	0x2000051c
10044a70:	20000488 	.word	0x20000488

10044a74 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
10044a74:	b580      	push	{r7, lr}
10044a76:	b082      	sub	sp, #8
10044a78:	af00      	add	r7, sp, #0
10044a7a:	6078      	str	r0, [r7, #4]
10044a7c:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
10044a7e:	683b      	ldr	r3, [r7, #0]
10044a80:	681a      	ldr	r2, [r3, #0]
10044a82:	687b      	ldr	r3, [r7, #4]
10044a84:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
10044a86:	683b      	ldr	r3, [r7, #0]
10044a88:	685a      	ldr	r2, [r3, #4]
10044a8a:	687b      	ldr	r3, [r7, #4]
10044a8c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
10044a8e:	683b      	ldr	r3, [r7, #0]
10044a90:	891b      	ldrh	r3, [r3, #8]
10044a92:	001a      	movs	r2, r3
10044a94:	687b      	ldr	r3, [r7, #4]
10044a96:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
10044a98:	683b      	ldr	r3, [r7, #0]
10044a9a:	895b      	ldrh	r3, [r3, #10]
10044a9c:	001a      	movs	r2, r3
10044a9e:	687b      	ldr	r3, [r7, #4]
10044aa0:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
10044aa2:	687b      	ldr	r3, [r7, #4]
10044aa4:	220c      	movs	r2, #12
10044aa6:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
10044aa8:	683b      	ldr	r3, [r7, #0]
10044aaa:	899b      	ldrh	r3, [r3, #12]
10044aac:	001a      	movs	r2, r3
10044aae:	687b      	ldr	r3, [r7, #4]
10044ab0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
10044ab2:	687b      	ldr	r3, [r7, #4]
10044ab4:	2280      	movs	r2, #128	@ 0x80
10044ab6:	0212      	lsls	r2, r2, #8
10044ab8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10044aba:	687b      	ldr	r3, [r7, #4]
10044abc:	2200      	movs	r2, #0
10044abe:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
10044ac0:	687b      	ldr	r3, [r7, #4]
10044ac2:	2200      	movs	r2, #0
10044ac4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
10044ac6:	687b      	ldr	r3, [r7, #4]
10044ac8:	0018      	movs	r0, r3
10044aca:	f003 febb 	bl	10048844 <HAL_UART_Init>
10044ace:	0003      	movs	r3, r0
}
10044ad0:	0018      	movs	r0, r3
10044ad2:	46bd      	mov	sp, r7
10044ad4:	b002      	add	sp, #8
10044ad6:	bd80      	pop	{r7, pc}

10044ad8 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
10044ad8:	b590      	push	{r4, r7, lr}
10044ada:	b089      	sub	sp, #36	@ 0x24
10044adc:	af00      	add	r7, sp, #0
10044ade:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
10044ae0:	2004      	movs	r0, #4
10044ae2:	f7ff ff41 	bl	10044968 <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
10044ae6:	2008      	movs	r0, #8
10044ae8:	f7ff ff3e 	bl	10044968 <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
10044aec:	2380      	movs	r3, #128	@ 0x80
10044aee:	00db      	lsls	r3, r3, #3
10044af0:	0018      	movs	r0, r3
10044af2:	f7ff ff4f 	bl	10044994 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
10044af6:	240c      	movs	r4, #12
10044af8:	193b      	adds	r3, r7, r4
10044afa:	2202      	movs	r2, #2
10044afc:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
10044afe:	193b      	adds	r3, r7, r4
10044b00:	2202      	movs	r2, #2
10044b02:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
10044b04:	193b      	adds	r3, r7, r4
10044b06:	2202      	movs	r2, #2
10044b08:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
10044b0a:	193b      	adds	r3, r7, r4
10044b0c:	2201      	movs	r2, #1
10044b0e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
10044b10:	193b      	adds	r3, r7, r4
10044b12:	2202      	movs	r2, #2
10044b14:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
10044b16:	193a      	adds	r2, r7, r4
10044b18:	2390      	movs	r3, #144	@ 0x90
10044b1a:	05db      	lsls	r3, r3, #23
10044b1c:	0011      	movs	r1, r2
10044b1e:	0018      	movs	r0, r3
10044b20:	f000 fc74 	bl	1004540c <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10044b24:	f7ff fef8 	bl	10044918 <LL_PWR_IsEnabledPUPDCfg>
10044b28:	1e03      	subs	r3, r0, #0
10044b2a:	d006      	beq.n	10044b3a <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10044b2c:	193b      	adds	r3, r7, r4
10044b2e:	681b      	ldr	r3, [r3, #0]
10044b30:	4a0a      	ldr	r2, [pc, #40]	@ (10044b5c <UART_MspInit+0x84>)
10044b32:	0019      	movs	r1, r3
10044b34:	0010      	movs	r0, r2
10044b36:	f7ff feff 	bl	10044938 <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
10044b3a:	210c      	movs	r1, #12
10044b3c:	187b      	adds	r3, r7, r1
10044b3e:	2201      	movs	r2, #1
10044b40:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
10044b42:	187b      	adds	r3, r7, r1
10044b44:	2200      	movs	r2, #0
10044b46:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
10044b48:	187b      	adds	r3, r7, r1
10044b4a:	4a05      	ldr	r2, [pc, #20]	@ (10044b60 <UART_MspInit+0x88>)
10044b4c:	0019      	movs	r1, r3
10044b4e:	0010      	movs	r0, r2
10044b50:	f000 fc5c 	bl	1004540c <HAL_GPIO_Init>
}
10044b54:	46c0      	nop			@ (mov r8, r8)
10044b56:	46bd      	mov	sp, r7
10044b58:	b009      	add	sp, #36	@ 0x24
10044b5a:	bd90      	pop	{r4, r7, pc}
10044b5c:	48500020 	.word	0x48500020
10044b60:	48100000 	.word	0x48100000

10044b64 <__NVIC_SetPriority>:
{
10044b64:	b590      	push	{r4, r7, lr}
10044b66:	b083      	sub	sp, #12
10044b68:	af00      	add	r7, sp, #0
10044b6a:	0002      	movs	r2, r0
10044b6c:	6039      	str	r1, [r7, #0]
10044b6e:	1dfb      	adds	r3, r7, #7
10044b70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044b72:	1dfb      	adds	r3, r7, #7
10044b74:	781b      	ldrb	r3, [r3, #0]
10044b76:	2b7f      	cmp	r3, #127	@ 0x7f
10044b78:	d828      	bhi.n	10044bcc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044b7a:	4a2f      	ldr	r2, [pc, #188]	@ (10044c38 <__NVIC_SetPriority+0xd4>)
10044b7c:	1dfb      	adds	r3, r7, #7
10044b7e:	781b      	ldrb	r3, [r3, #0]
10044b80:	b25b      	sxtb	r3, r3
10044b82:	089b      	lsrs	r3, r3, #2
10044b84:	33c0      	adds	r3, #192	@ 0xc0
10044b86:	009b      	lsls	r3, r3, #2
10044b88:	589b      	ldr	r3, [r3, r2]
10044b8a:	1dfa      	adds	r2, r7, #7
10044b8c:	7812      	ldrb	r2, [r2, #0]
10044b8e:	0011      	movs	r1, r2
10044b90:	2203      	movs	r2, #3
10044b92:	400a      	ands	r2, r1
10044b94:	00d2      	lsls	r2, r2, #3
10044b96:	21ff      	movs	r1, #255	@ 0xff
10044b98:	4091      	lsls	r1, r2
10044b9a:	000a      	movs	r2, r1
10044b9c:	43d2      	mvns	r2, r2
10044b9e:	401a      	ands	r2, r3
10044ba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044ba2:	683b      	ldr	r3, [r7, #0]
10044ba4:	019b      	lsls	r3, r3, #6
10044ba6:	22ff      	movs	r2, #255	@ 0xff
10044ba8:	401a      	ands	r2, r3
10044baa:	1dfb      	adds	r3, r7, #7
10044bac:	781b      	ldrb	r3, [r3, #0]
10044bae:	0018      	movs	r0, r3
10044bb0:	2303      	movs	r3, #3
10044bb2:	4003      	ands	r3, r0
10044bb4:	00db      	lsls	r3, r3, #3
10044bb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044bb8:	481f      	ldr	r0, [pc, #124]	@ (10044c38 <__NVIC_SetPriority+0xd4>)
10044bba:	1dfb      	adds	r3, r7, #7
10044bbc:	781b      	ldrb	r3, [r3, #0]
10044bbe:	b25b      	sxtb	r3, r3
10044bc0:	089b      	lsrs	r3, r3, #2
10044bc2:	430a      	orrs	r2, r1
10044bc4:	33c0      	adds	r3, #192	@ 0xc0
10044bc6:	009b      	lsls	r3, r3, #2
10044bc8:	501a      	str	r2, [r3, r0]
}
10044bca:	e031      	b.n	10044c30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044bcc:	4a1b      	ldr	r2, [pc, #108]	@ (10044c3c <__NVIC_SetPriority+0xd8>)
10044bce:	1dfb      	adds	r3, r7, #7
10044bd0:	781b      	ldrb	r3, [r3, #0]
10044bd2:	0019      	movs	r1, r3
10044bd4:	230f      	movs	r3, #15
10044bd6:	400b      	ands	r3, r1
10044bd8:	3b08      	subs	r3, #8
10044bda:	089b      	lsrs	r3, r3, #2
10044bdc:	3306      	adds	r3, #6
10044bde:	009b      	lsls	r3, r3, #2
10044be0:	18d3      	adds	r3, r2, r3
10044be2:	3304      	adds	r3, #4
10044be4:	681b      	ldr	r3, [r3, #0]
10044be6:	1dfa      	adds	r2, r7, #7
10044be8:	7812      	ldrb	r2, [r2, #0]
10044bea:	0011      	movs	r1, r2
10044bec:	2203      	movs	r2, #3
10044bee:	400a      	ands	r2, r1
10044bf0:	00d2      	lsls	r2, r2, #3
10044bf2:	21ff      	movs	r1, #255	@ 0xff
10044bf4:	4091      	lsls	r1, r2
10044bf6:	000a      	movs	r2, r1
10044bf8:	43d2      	mvns	r2, r2
10044bfa:	401a      	ands	r2, r3
10044bfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044bfe:	683b      	ldr	r3, [r7, #0]
10044c00:	019b      	lsls	r3, r3, #6
10044c02:	22ff      	movs	r2, #255	@ 0xff
10044c04:	401a      	ands	r2, r3
10044c06:	1dfb      	adds	r3, r7, #7
10044c08:	781b      	ldrb	r3, [r3, #0]
10044c0a:	0018      	movs	r0, r3
10044c0c:	2303      	movs	r3, #3
10044c0e:	4003      	ands	r3, r0
10044c10:	00db      	lsls	r3, r3, #3
10044c12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044c14:	4809      	ldr	r0, [pc, #36]	@ (10044c3c <__NVIC_SetPriority+0xd8>)
10044c16:	1dfb      	adds	r3, r7, #7
10044c18:	781b      	ldrb	r3, [r3, #0]
10044c1a:	001c      	movs	r4, r3
10044c1c:	230f      	movs	r3, #15
10044c1e:	4023      	ands	r3, r4
10044c20:	3b08      	subs	r3, #8
10044c22:	089b      	lsrs	r3, r3, #2
10044c24:	430a      	orrs	r2, r1
10044c26:	3306      	adds	r3, #6
10044c28:	009b      	lsls	r3, r3, #2
10044c2a:	18c3      	adds	r3, r0, r3
10044c2c:	3304      	adds	r3, #4
10044c2e:	601a      	str	r2, [r3, #0]
}
10044c30:	46c0      	nop			@ (mov r8, r8)
10044c32:	46bd      	mov	sp, r7
10044c34:	b003      	add	sp, #12
10044c36:	bd90      	pop	{r4, r7, pc}
10044c38:	e000e100 	.word	0xe000e100
10044c3c:	e000ed00 	.word	0xe000ed00

10044c40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10044c40:	b580      	push	{r7, lr}
10044c42:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10044c44:	f3bf 8f4f 	dsb	sy
}
10044c48:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10044c4a:	4b04      	ldr	r3, [pc, #16]	@ (10044c5c <__NVIC_SystemReset+0x1c>)
10044c4c:	4a04      	ldr	r2, [pc, #16]	@ (10044c60 <__NVIC_SystemReset+0x20>)
10044c4e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10044c50:	f3bf 8f4f 	dsb	sy
}
10044c54:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
10044c56:	46c0      	nop			@ (mov r8, r8)
10044c58:	e7fd      	b.n	10044c56 <__NVIC_SystemReset+0x16>
10044c5a:	46c0      	nop			@ (mov r8, r8)
10044c5c:	e000ed00 	.word	0xe000ed00
10044c60:	05fa0004 	.word	0x05fa0004

10044c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
10044c64:	b590      	push	{r4, r7, lr}
10044c66:	b087      	sub	sp, #28
10044c68:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10044c6a:	4a64      	ldr	r2, [pc, #400]	@ (10044dfc <SystemInit+0x198>)
10044c6c:	2394      	movs	r3, #148	@ 0x94
10044c6e:	58d3      	ldr	r3, [r2, r3]
10044c70:	2b00      	cmp	r3, #0
10044c72:	d10e      	bne.n	10044c92 <SystemInit+0x2e>
10044c74:	4b62      	ldr	r3, [pc, #392]	@ (10044e00 <SystemInit+0x19c>)
10044c76:	691b      	ldr	r3, [r3, #16]
10044c78:	2b00      	cmp	r3, #0
10044c7a:	d103      	bne.n	10044c84 <SystemInit+0x20>
10044c7c:	4b60      	ldr	r3, [pc, #384]	@ (10044e00 <SystemInit+0x19c>)
10044c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10044c80:	2b00      	cmp	r3, #0
10044c82:	d006      	beq.n	10044c92 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
10044c84:	4b5f      	ldr	r3, [pc, #380]	@ (10044e04 <SystemInit+0x1a0>)
10044c86:	2201      	movs	r2, #1
10044c88:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10044c8a:	f7fb faad 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10044c8e:	f7ff ffd7 	bl	10044c40 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10044c92:	4b5d      	ldr	r3, [pc, #372]	@ (10044e08 <SystemInit+0x1a4>)
10044c94:	4a5d      	ldr	r2, [pc, #372]	@ (10044e0c <SystemInit+0x1a8>)
10044c96:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10044c98:	4b5b      	ldr	r3, [pc, #364]	@ (10044e08 <SystemInit+0x1a4>)
10044c9a:	689a      	ldr	r2, [r3, #8]
10044c9c:	4b59      	ldr	r3, [pc, #356]	@ (10044e04 <SystemInit+0x1a0>)
10044c9e:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10044ca0:	4b57      	ldr	r3, [pc, #348]	@ (10044e00 <SystemInit+0x19c>)
10044ca2:	685a      	ldr	r2, [r3, #4]
10044ca4:	4b56      	ldr	r3, [pc, #344]	@ (10044e00 <SystemInit+0x19c>)
10044ca6:	2120      	movs	r1, #32
10044ca8:	430a      	orrs	r2, r1
10044caa:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
10044cac:	4b54      	ldr	r3, [pc, #336]	@ (10044e00 <SystemInit+0x19c>)
10044cae:	685a      	ldr	r2, [r3, #4]
10044cb0:	4b53      	ldr	r3, [pc, #332]	@ (10044e00 <SystemInit+0x19c>)
10044cb2:	2140      	movs	r1, #64	@ 0x40
10044cb4:	430a      	orrs	r2, r1
10044cb6:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
10044cb8:	4b51      	ldr	r3, [pc, #324]	@ (10044e00 <SystemInit+0x19c>)
10044cba:	685a      	ldr	r2, [r3, #4]
10044cbc:	4b50      	ldr	r3, [pc, #320]	@ (10044e00 <SystemInit+0x19c>)
10044cbe:	2180      	movs	r1, #128	@ 0x80
10044cc0:	430a      	orrs	r2, r1
10044cc2:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10044cc4:	4b4e      	ldr	r3, [pc, #312]	@ (10044e00 <SystemInit+0x19c>)
10044cc6:	685a      	ldr	r2, [r3, #4]
10044cc8:	4b4d      	ldr	r3, [pc, #308]	@ (10044e00 <SystemInit+0x19c>)
10044cca:	4951      	ldr	r1, [pc, #324]	@ (10044e10 <SystemInit+0x1ac>)
10044ccc:	400a      	ands	r2, r1
10044cce:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10044cd0:	46c0      	nop			@ (mov r8, r8)
10044cd2:	4b4b      	ldr	r3, [pc, #300]	@ (10044e00 <SystemInit+0x19c>)
10044cd4:	695b      	ldr	r3, [r3, #20]
10044cd6:	2204      	movs	r2, #4
10044cd8:	4013      	ands	r3, r2
10044cda:	2b04      	cmp	r3, #4
10044cdc:	d1f9      	bne.n	10044cd2 <SystemInit+0x6e>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10044cde:	4b48      	ldr	r3, [pc, #288]	@ (10044e00 <SystemInit+0x19c>)
10044ce0:	69db      	ldr	r3, [r3, #28]
10044ce2:	2230      	movs	r2, #48	@ 0x30
10044ce4:	4393      	bics	r3, r2
10044ce6:	001a      	movs	r2, r3
10044ce8:	4b45      	ldr	r3, [pc, #276]	@ (10044e00 <SystemInit+0x19c>)
10044cea:	2120      	movs	r1, #32
10044cec:	430a      	orrs	r2, r1
10044cee:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10044cf0:	4b43      	ldr	r3, [pc, #268]	@ (10044e00 <SystemInit+0x19c>)
10044cf2:	69da      	ldr	r2, [r3, #28]
10044cf4:	4b42      	ldr	r3, [pc, #264]	@ (10044e00 <SystemInit+0x19c>)
10044cf6:	4947      	ldr	r1, [pc, #284]	@ (10044e14 <SystemInit+0x1b0>)
10044cf8:	400a      	ands	r2, r1
10044cfa:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10044cfc:	4b40      	ldr	r3, [pc, #256]	@ (10044e00 <SystemInit+0x19c>)
10044cfe:	69da      	ldr	r2, [r3, #28]
10044d00:	4b3f      	ldr	r3, [pc, #252]	@ (10044e00 <SystemInit+0x19c>)
10044d02:	2180      	movs	r1, #128	@ 0x80
10044d04:	0049      	lsls	r1, r1, #1
10044d06:	430a      	orrs	r2, r1
10044d08:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10044d0a:	4b43      	ldr	r3, [pc, #268]	@ (10044e18 <SystemInit+0x1b4>)
10044d0c:	681b      	ldr	r3, [r3, #0]
10044d0e:	4a43      	ldr	r2, [pc, #268]	@ (10044e1c <SystemInit+0x1b8>)
10044d10:	4293      	cmp	r3, r2
10044d12:	d055      	beq.n	10044dc0 <SystemInit+0x15c>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10044d14:	231f      	movs	r3, #31
10044d16:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10044d18:	2308      	movs	r3, #8
10044d1a:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10044d1c:	230a      	movs	r3, #10
10044d1e:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10044d20:	2303      	movs	r3, #3
10044d22:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10044d24:	4b35      	ldr	r3, [pc, #212]	@ (10044dfc <SystemInit+0x198>)
10044d26:	68db      	ldr	r3, [r3, #12]
10044d28:	221e      	movs	r2, #30
10044d2a:	4393      	bics	r3, r2
10044d2c:	0019      	movs	r1, r3
10044d2e:	68fb      	ldr	r3, [r7, #12]
10044d30:	005a      	lsls	r2, r3, #1
10044d32:	4b32      	ldr	r3, [pc, #200]	@ (10044dfc <SystemInit+0x198>)
10044d34:	430a      	orrs	r2, r1
10044d36:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10044d38:	4b30      	ldr	r3, [pc, #192]	@ (10044dfc <SystemInit+0x198>)
10044d3a:	68da      	ldr	r2, [r3, #12]
10044d3c:	4b2f      	ldr	r3, [pc, #188]	@ (10044dfc <SystemInit+0x198>)
10044d3e:	2101      	movs	r1, #1
10044d40:	430a      	orrs	r2, r1
10044d42:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10044d44:	4b2d      	ldr	r3, [pc, #180]	@ (10044dfc <SystemInit+0x198>)
10044d46:	68db      	ldr	r3, [r3, #12]
10044d48:	4a35      	ldr	r2, [pc, #212]	@ (10044e20 <SystemInit+0x1bc>)
10044d4a:	4013      	ands	r3, r2
10044d4c:	0019      	movs	r1, r3
10044d4e:	693b      	ldr	r3, [r7, #16]
10044d50:	061a      	lsls	r2, r3, #24
10044d52:	4b2a      	ldr	r3, [pc, #168]	@ (10044dfc <SystemInit+0x198>)
10044d54:	430a      	orrs	r2, r1
10044d56:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10044d58:	4b28      	ldr	r3, [pc, #160]	@ (10044dfc <SystemInit+0x198>)
10044d5a:	68da      	ldr	r2, [r3, #12]
10044d5c:	4b27      	ldr	r3, [pc, #156]	@ (10044dfc <SystemInit+0x198>)
10044d5e:	2180      	movs	r1, #128	@ 0x80
10044d60:	0409      	lsls	r1, r1, #16
10044d62:	430a      	orrs	r2, r1
10044d64:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10044d66:	4a26      	ldr	r2, [pc, #152]	@ (10044e00 <SystemInit+0x19c>)
10044d68:	2394      	movs	r3, #148	@ 0x94
10044d6a:	58d3      	ldr	r3, [r2, r3]
10044d6c:	4a2d      	ldr	r2, [pc, #180]	@ (10044e24 <SystemInit+0x1c0>)
10044d6e:	401a      	ands	r2, r3
10044d70:	68bb      	ldr	r3, [r7, #8]
10044d72:	0199      	lsls	r1, r3, #6
10044d74:	23f0      	movs	r3, #240	@ 0xf0
10044d76:	009b      	lsls	r3, r3, #2
10044d78:	400b      	ands	r3, r1
10044d7a:	4921      	ldr	r1, [pc, #132]	@ (10044e00 <SystemInit+0x19c>)
10044d7c:	4313      	orrs	r3, r2
10044d7e:	2294      	movs	r2, #148	@ 0x94
10044d80:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10044d82:	4a1f      	ldr	r2, [pc, #124]	@ (10044e00 <SystemInit+0x19c>)
10044d84:	2394      	movs	r3, #148	@ 0x94
10044d86:	58d3      	ldr	r3, [r2, r3]
10044d88:	491d      	ldr	r1, [pc, #116]	@ (10044e00 <SystemInit+0x19c>)
10044d8a:	2220      	movs	r2, #32
10044d8c:	4313      	orrs	r3, r2
10044d8e:	2294      	movs	r2, #148	@ 0x94
10044d90:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10044d92:	4a1b      	ldr	r2, [pc, #108]	@ (10044e00 <SystemInit+0x19c>)
10044d94:	2394      	movs	r3, #148	@ 0x94
10044d96:	58d3      	ldr	r3, [r2, r3]
10044d98:	4a23      	ldr	r2, [pc, #140]	@ (10044e28 <SystemInit+0x1c4>)
10044d9a:	401a      	ands	r2, r3
10044d9c:	687b      	ldr	r3, [r7, #4]
10044d9e:	02d9      	lsls	r1, r3, #11
10044da0:	23e0      	movs	r3, #224	@ 0xe0
10044da2:	019b      	lsls	r3, r3, #6
10044da4:	400b      	ands	r3, r1
10044da6:	4916      	ldr	r1, [pc, #88]	@ (10044e00 <SystemInit+0x19c>)
10044da8:	4313      	orrs	r3, r2
10044daa:	2294      	movs	r2, #148	@ 0x94
10044dac:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10044dae:	4a14      	ldr	r2, [pc, #80]	@ (10044e00 <SystemInit+0x19c>)
10044db0:	2394      	movs	r3, #148	@ 0x94
10044db2:	58d3      	ldr	r3, [r2, r3]
10044db4:	4912      	ldr	r1, [pc, #72]	@ (10044e00 <SystemInit+0x19c>)
10044db6:	2280      	movs	r2, #128	@ 0x80
10044db8:	00d2      	lsls	r2, r2, #3
10044dba:	4313      	orrs	r3, r2
10044dbc:	2294      	movs	r2, #148	@ 0x94
10044dbe:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10044dc0:	2317      	movs	r3, #23
10044dc2:	18fb      	adds	r3, r7, r3
10044dc4:	2200      	movs	r2, #0
10044dc6:	701a      	strb	r2, [r3, #0]
10044dc8:	e00d      	b.n	10044de6 <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10044dca:	2417      	movs	r4, #23
10044dcc:	193b      	adds	r3, r7, r4
10044dce:	781b      	ldrb	r3, [r3, #0]
10044dd0:	b25b      	sxtb	r3, r3
10044dd2:	2103      	movs	r1, #3
10044dd4:	0018      	movs	r0, r3
10044dd6:	f7ff fec5 	bl	10044b64 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10044dda:	0021      	movs	r1, r4
10044ddc:	187b      	adds	r3, r7, r1
10044dde:	781a      	ldrb	r2, [r3, #0]
10044de0:	187b      	adds	r3, r7, r1
10044de2:	3201      	adds	r2, #1
10044de4:	701a      	strb	r2, [r3, #0]
10044de6:	2317      	movs	r3, #23
10044de8:	18fb      	adds	r3, r7, r3
10044dea:	781b      	ldrb	r3, [r3, #0]
10044dec:	2b1f      	cmp	r3, #31
10044dee:	d9ec      	bls.n	10044dca <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
10044df0:	b662      	cpsie	i
}
10044df2:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10044df4:	46c0      	nop			@ (mov r8, r8)
10044df6:	46bd      	mov	sp, r7
10044df8:	b007      	add	sp, #28
10044dfa:	bd90      	pop	{r4, r7, pc}
10044dfc:	48400000 	.word	0x48400000
10044e00:	48500000 	.word	0x48500000
10044e04:	20000004 	.word	0x20000004
10044e08:	e000ed00 	.word	0xe000ed00
10044e0c:	10040000 	.word	0x10040000
10044e10:	fffffeff 	.word	0xfffffeff
10044e14:	fffffbff 	.word	0xfffffbff
10044e18:	10001ef8 	.word	0x10001ef8
10044e1c:	fcbceccc 	.word	0xfcbceccc
10044e20:	c0ffffff 	.word	0xc0ffffff
10044e24:	fffffc3f 	.word	0xfffffc3f
10044e28:	ffffc7ff 	.word	0xffffc7ff

10044e2c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10044e2c:	b580      	push	{r7, lr}
10044e2e:	b082      	sub	sp, #8
10044e30:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10044e32:	4b13      	ldr	r3, [pc, #76]	@ (10044e80 <SystemCoreClockUpdate+0x54>)
10044e34:	689b      	ldr	r3, [r3, #8]
10044e36:	085b      	lsrs	r3, r3, #1
10044e38:	b2da      	uxtb	r2, r3
10044e3a:	1dfb      	adds	r3, r7, #7
10044e3c:	2101      	movs	r1, #1
10044e3e:	400a      	ands	r2, r1
10044e40:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10044e42:	4b0f      	ldr	r3, [pc, #60]	@ (10044e80 <SystemCoreClockUpdate+0x54>)
10044e44:	689b      	ldr	r3, [r3, #8]
10044e46:	0a1b      	lsrs	r3, r3, #8
10044e48:	b2da      	uxtb	r2, r3
10044e4a:	1dbb      	adds	r3, r7, #6
10044e4c:	2107      	movs	r1, #7
10044e4e:	400a      	ands	r2, r1
10044e50:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10044e52:	1dfb      	adds	r3, r7, #7
10044e54:	781b      	ldrb	r3, [r3, #0]
10044e56:	2b00      	cmp	r3, #0
10044e58:	d007      	beq.n	10044e6a <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10044e5a:	1dbb      	adds	r3, r7, #6
10044e5c:	781b      	ldrb	r3, [r3, #0]
10044e5e:	3b01      	subs	r3, #1
10044e60:	4a08      	ldr	r2, [pc, #32]	@ (10044e84 <SystemCoreClockUpdate+0x58>)
10044e62:	40da      	lsrs	r2, r3
10044e64:	4b08      	ldr	r3, [pc, #32]	@ (10044e88 <SystemCoreClockUpdate+0x5c>)
10044e66:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10044e68:	e005      	b.n	10044e76 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10044e6a:	1dbb      	adds	r3, r7, #6
10044e6c:	781b      	ldrb	r3, [r3, #0]
10044e6e:	4a07      	ldr	r2, [pc, #28]	@ (10044e8c <SystemCoreClockUpdate+0x60>)
10044e70:	40da      	lsrs	r2, r3
10044e72:	4b05      	ldr	r3, [pc, #20]	@ (10044e88 <SystemCoreClockUpdate+0x5c>)
10044e74:	601a      	str	r2, [r3, #0]
}
10044e76:	46c0      	nop			@ (mov r8, r8)
10044e78:	46bd      	mov	sp, r7
10044e7a:	b002      	add	sp, #8
10044e7c:	bd80      	pop	{r7, pc}
10044e7e:	46c0      	nop			@ (mov r8, r8)
10044e80:	48400000 	.word	0x48400000
10044e84:	01e84800 	.word	0x01e84800
10044e88:	20000898 	.word	0x20000898
10044e8c:	03d09000 	.word	0x03d09000

10044e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10044e90:	b580      	push	{r7, lr}
10044e92:	b082      	sub	sp, #8
10044e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10044e96:	1dfb      	adds	r3, r7, #7
10044e98:	2200      	movs	r2, #0
10044e9a:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10044e9c:	2003      	movs	r0, #3
10044e9e:	f000 f80f 	bl	10044ec0 <HAL_InitTick>
10044ea2:	1e03      	subs	r3, r0, #0
10044ea4:	d003      	beq.n	10044eae <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10044ea6:	1dfb      	adds	r3, r7, #7
10044ea8:	2201      	movs	r2, #1
10044eaa:	701a      	strb	r2, [r3, #0]
10044eac:	e001      	b.n	10044eb2 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10044eae:	f7fc f903 	bl	100410b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
10044eb2:	1dfb      	adds	r3, r7, #7
10044eb4:	781b      	ldrb	r3, [r3, #0]
}
10044eb6:	0018      	movs	r0, r3
10044eb8:	46bd      	mov	sp, r7
10044eba:	b002      	add	sp, #8
10044ebc:	bd80      	pop	{r7, pc}
	...

10044ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10044ec0:	b590      	push	{r4, r7, lr}
10044ec2:	b085      	sub	sp, #20
10044ec4:	af00      	add	r7, sp, #0
10044ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10044ec8:	230f      	movs	r3, #15
10044eca:	18fb      	adds	r3, r7, r3
10044ecc:	2200      	movs	r2, #0
10044ece:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10044ed0:	4b1d      	ldr	r3, [pc, #116]	@ (10044f48 <HAL_InitTick+0x88>)
10044ed2:	781b      	ldrb	r3, [r3, #0]
10044ed4:	2b00      	cmp	r3, #0
10044ed6:	d02c      	beq.n	10044f32 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10044ed8:	f003 fa3a 	bl	10048350 <HAL_RCC_GetSysClockFreq>
10044edc:	0004      	movs	r4, r0
10044ede:	4b1a      	ldr	r3, [pc, #104]	@ (10044f48 <HAL_InitTick+0x88>)
10044ee0:	781b      	ldrb	r3, [r3, #0]
10044ee2:	0019      	movs	r1, r3
10044ee4:	23fa      	movs	r3, #250	@ 0xfa
10044ee6:	0098      	lsls	r0, r3, #2
10044ee8:	f7fb f9a2 	bl	10040230 <__udivsi3>
10044eec:	0003      	movs	r3, r0
10044eee:	0019      	movs	r1, r3
10044ef0:	0020      	movs	r0, r4
10044ef2:	f7fb f99d 	bl	10040230 <__udivsi3>
10044ef6:	0003      	movs	r3, r0
10044ef8:	0018      	movs	r0, r3
10044efa:	f000 f920 	bl	1004513e <HAL_SYSTICK_Config>
10044efe:	1e03      	subs	r3, r0, #0
10044f00:	d112      	bne.n	10044f28 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10044f02:	687b      	ldr	r3, [r7, #4]
10044f04:	2b03      	cmp	r3, #3
10044f06:	d80a      	bhi.n	10044f1e <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10044f08:	6879      	ldr	r1, [r7, #4]
10044f0a:	2301      	movs	r3, #1
10044f0c:	425b      	negs	r3, r3
10044f0e:	2200      	movs	r2, #0
10044f10:	0018      	movs	r0, r3
10044f12:	f000 f8ef 	bl	100450f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10044f16:	4b0d      	ldr	r3, [pc, #52]	@ (10044f4c <HAL_InitTick+0x8c>)
10044f18:	687a      	ldr	r2, [r7, #4]
10044f1a:	601a      	str	r2, [r3, #0]
10044f1c:	e00d      	b.n	10044f3a <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10044f1e:	230f      	movs	r3, #15
10044f20:	18fb      	adds	r3, r7, r3
10044f22:	2201      	movs	r2, #1
10044f24:	701a      	strb	r2, [r3, #0]
10044f26:	e008      	b.n	10044f3a <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10044f28:	230f      	movs	r3, #15
10044f2a:	18fb      	adds	r3, r7, r3
10044f2c:	2201      	movs	r2, #1
10044f2e:	701a      	strb	r2, [r3, #0]
10044f30:	e003      	b.n	10044f3a <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10044f32:	230f      	movs	r3, #15
10044f34:	18fb      	adds	r3, r7, r3
10044f36:	2201      	movs	r2, #1
10044f38:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10044f3a:	230f      	movs	r3, #15
10044f3c:	18fb      	adds	r3, r7, r3
10044f3e:	781b      	ldrb	r3, [r3, #0]
}
10044f40:	0018      	movs	r0, r3
10044f42:	46bd      	mov	sp, r7
10044f44:	b005      	add	sp, #20
10044f46:	bd90      	pop	{r4, r7, pc}
10044f48:	200008a0 	.word	0x200008a0
10044f4c:	2000089c 	.word	0x2000089c

10044f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10044f50:	b580      	push	{r7, lr}
10044f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10044f54:	4b05      	ldr	r3, [pc, #20]	@ (10044f6c <HAL_IncTick+0x1c>)
10044f56:	781b      	ldrb	r3, [r3, #0]
10044f58:	001a      	movs	r2, r3
10044f5a:	4b05      	ldr	r3, [pc, #20]	@ (10044f70 <HAL_IncTick+0x20>)
10044f5c:	681b      	ldr	r3, [r3, #0]
10044f5e:	18d2      	adds	r2, r2, r3
10044f60:	4b03      	ldr	r3, [pc, #12]	@ (10044f70 <HAL_IncTick+0x20>)
10044f62:	601a      	str	r2, [r3, #0]
}
10044f64:	46c0      	nop			@ (mov r8, r8)
10044f66:	46bd      	mov	sp, r7
10044f68:	bd80      	pop	{r7, pc}
10044f6a:	46c0      	nop			@ (mov r8, r8)
10044f6c:	200008a0 	.word	0x200008a0
10044f70:	20000520 	.word	0x20000520

10044f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10044f74:	b580      	push	{r7, lr}
10044f76:	af00      	add	r7, sp, #0
  return uwTick;
10044f78:	4b02      	ldr	r3, [pc, #8]	@ (10044f84 <HAL_GetTick+0x10>)
10044f7a:	681b      	ldr	r3, [r3, #0]
}
10044f7c:	0018      	movs	r0, r3
10044f7e:	46bd      	mov	sp, r7
10044f80:	bd80      	pop	{r7, pc}
10044f82:	46c0      	nop			@ (mov r8, r8)
10044f84:	20000520 	.word	0x20000520

10044f88 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10044f88:	b580      	push	{r7, lr}
10044f8a:	af00      	add	r7, sp, #0
  return uwTickPrio;
10044f8c:	4b02      	ldr	r3, [pc, #8]	@ (10044f98 <HAL_GetTickPrio+0x10>)
10044f8e:	681b      	ldr	r3, [r3, #0]
}
10044f90:	0018      	movs	r0, r3
10044f92:	46bd      	mov	sp, r7
10044f94:	bd80      	pop	{r7, pc}
10044f96:	46c0      	nop			@ (mov r8, r8)
10044f98:	2000089c 	.word	0x2000089c

10044f9c <__NVIC_EnableIRQ>:
{
10044f9c:	b580      	push	{r7, lr}
10044f9e:	b082      	sub	sp, #8
10044fa0:	af00      	add	r7, sp, #0
10044fa2:	0002      	movs	r2, r0
10044fa4:	1dfb      	adds	r3, r7, #7
10044fa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044fa8:	1dfb      	adds	r3, r7, #7
10044faa:	781b      	ldrb	r3, [r3, #0]
10044fac:	2b7f      	cmp	r3, #127	@ 0x7f
10044fae:	d809      	bhi.n	10044fc4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10044fb0:	1dfb      	adds	r3, r7, #7
10044fb2:	781b      	ldrb	r3, [r3, #0]
10044fb4:	001a      	movs	r2, r3
10044fb6:	231f      	movs	r3, #31
10044fb8:	401a      	ands	r2, r3
10044fba:	4b04      	ldr	r3, [pc, #16]	@ (10044fcc <__NVIC_EnableIRQ+0x30>)
10044fbc:	2101      	movs	r1, #1
10044fbe:	4091      	lsls	r1, r2
10044fc0:	000a      	movs	r2, r1
10044fc2:	601a      	str	r2, [r3, #0]
}
10044fc4:	46c0      	nop			@ (mov r8, r8)
10044fc6:	46bd      	mov	sp, r7
10044fc8:	b002      	add	sp, #8
10044fca:	bd80      	pop	{r7, pc}
10044fcc:	e000e100 	.word	0xe000e100

10044fd0 <__NVIC_SetPriority>:
{
10044fd0:	b590      	push	{r4, r7, lr}
10044fd2:	b083      	sub	sp, #12
10044fd4:	af00      	add	r7, sp, #0
10044fd6:	0002      	movs	r2, r0
10044fd8:	6039      	str	r1, [r7, #0]
10044fda:	1dfb      	adds	r3, r7, #7
10044fdc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044fde:	1dfb      	adds	r3, r7, #7
10044fe0:	781b      	ldrb	r3, [r3, #0]
10044fe2:	2b7f      	cmp	r3, #127	@ 0x7f
10044fe4:	d828      	bhi.n	10045038 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044fe6:	4a2f      	ldr	r2, [pc, #188]	@ (100450a4 <__NVIC_SetPriority+0xd4>)
10044fe8:	1dfb      	adds	r3, r7, #7
10044fea:	781b      	ldrb	r3, [r3, #0]
10044fec:	b25b      	sxtb	r3, r3
10044fee:	089b      	lsrs	r3, r3, #2
10044ff0:	33c0      	adds	r3, #192	@ 0xc0
10044ff2:	009b      	lsls	r3, r3, #2
10044ff4:	589b      	ldr	r3, [r3, r2]
10044ff6:	1dfa      	adds	r2, r7, #7
10044ff8:	7812      	ldrb	r2, [r2, #0]
10044ffa:	0011      	movs	r1, r2
10044ffc:	2203      	movs	r2, #3
10044ffe:	400a      	ands	r2, r1
10045000:	00d2      	lsls	r2, r2, #3
10045002:	21ff      	movs	r1, #255	@ 0xff
10045004:	4091      	lsls	r1, r2
10045006:	000a      	movs	r2, r1
10045008:	43d2      	mvns	r2, r2
1004500a:	401a      	ands	r2, r3
1004500c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004500e:	683b      	ldr	r3, [r7, #0]
10045010:	019b      	lsls	r3, r3, #6
10045012:	22ff      	movs	r2, #255	@ 0xff
10045014:	401a      	ands	r2, r3
10045016:	1dfb      	adds	r3, r7, #7
10045018:	781b      	ldrb	r3, [r3, #0]
1004501a:	0018      	movs	r0, r3
1004501c:	2303      	movs	r3, #3
1004501e:	4003      	ands	r3, r0
10045020:	00db      	lsls	r3, r3, #3
10045022:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045024:	481f      	ldr	r0, [pc, #124]	@ (100450a4 <__NVIC_SetPriority+0xd4>)
10045026:	1dfb      	adds	r3, r7, #7
10045028:	781b      	ldrb	r3, [r3, #0]
1004502a:	b25b      	sxtb	r3, r3
1004502c:	089b      	lsrs	r3, r3, #2
1004502e:	430a      	orrs	r2, r1
10045030:	33c0      	adds	r3, #192	@ 0xc0
10045032:	009b      	lsls	r3, r3, #2
10045034:	501a      	str	r2, [r3, r0]
}
10045036:	e031      	b.n	1004509c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045038:	4a1b      	ldr	r2, [pc, #108]	@ (100450a8 <__NVIC_SetPriority+0xd8>)
1004503a:	1dfb      	adds	r3, r7, #7
1004503c:	781b      	ldrb	r3, [r3, #0]
1004503e:	0019      	movs	r1, r3
10045040:	230f      	movs	r3, #15
10045042:	400b      	ands	r3, r1
10045044:	3b08      	subs	r3, #8
10045046:	089b      	lsrs	r3, r3, #2
10045048:	3306      	adds	r3, #6
1004504a:	009b      	lsls	r3, r3, #2
1004504c:	18d3      	adds	r3, r2, r3
1004504e:	3304      	adds	r3, #4
10045050:	681b      	ldr	r3, [r3, #0]
10045052:	1dfa      	adds	r2, r7, #7
10045054:	7812      	ldrb	r2, [r2, #0]
10045056:	0011      	movs	r1, r2
10045058:	2203      	movs	r2, #3
1004505a:	400a      	ands	r2, r1
1004505c:	00d2      	lsls	r2, r2, #3
1004505e:	21ff      	movs	r1, #255	@ 0xff
10045060:	4091      	lsls	r1, r2
10045062:	000a      	movs	r2, r1
10045064:	43d2      	mvns	r2, r2
10045066:	401a      	ands	r2, r3
10045068:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004506a:	683b      	ldr	r3, [r7, #0]
1004506c:	019b      	lsls	r3, r3, #6
1004506e:	22ff      	movs	r2, #255	@ 0xff
10045070:	401a      	ands	r2, r3
10045072:	1dfb      	adds	r3, r7, #7
10045074:	781b      	ldrb	r3, [r3, #0]
10045076:	0018      	movs	r0, r3
10045078:	2303      	movs	r3, #3
1004507a:	4003      	ands	r3, r0
1004507c:	00db      	lsls	r3, r3, #3
1004507e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045080:	4809      	ldr	r0, [pc, #36]	@ (100450a8 <__NVIC_SetPriority+0xd8>)
10045082:	1dfb      	adds	r3, r7, #7
10045084:	781b      	ldrb	r3, [r3, #0]
10045086:	001c      	movs	r4, r3
10045088:	230f      	movs	r3, #15
1004508a:	4023      	ands	r3, r4
1004508c:	3b08      	subs	r3, #8
1004508e:	089b      	lsrs	r3, r3, #2
10045090:	430a      	orrs	r2, r1
10045092:	3306      	adds	r3, #6
10045094:	009b      	lsls	r3, r3, #2
10045096:	18c3      	adds	r3, r0, r3
10045098:	3304      	adds	r3, #4
1004509a:	601a      	str	r2, [r3, #0]
}
1004509c:	46c0      	nop			@ (mov r8, r8)
1004509e:	46bd      	mov	sp, r7
100450a0:	b003      	add	sp, #12
100450a2:	bd90      	pop	{r4, r7, pc}
100450a4:	e000e100 	.word	0xe000e100
100450a8:	e000ed00 	.word	0xe000ed00

100450ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100450ac:	b580      	push	{r7, lr}
100450ae:	b082      	sub	sp, #8
100450b0:	af00      	add	r7, sp, #0
100450b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100450b4:	687b      	ldr	r3, [r7, #4]
100450b6:	1e5a      	subs	r2, r3, #1
100450b8:	2380      	movs	r3, #128	@ 0x80
100450ba:	045b      	lsls	r3, r3, #17
100450bc:	429a      	cmp	r2, r3
100450be:	d301      	bcc.n	100450c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
100450c0:	2301      	movs	r3, #1
100450c2:	e010      	b.n	100450e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100450c4:	4b0a      	ldr	r3, [pc, #40]	@ (100450f0 <SysTick_Config+0x44>)
100450c6:	687a      	ldr	r2, [r7, #4]
100450c8:	3a01      	subs	r2, #1
100450ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100450cc:	2301      	movs	r3, #1
100450ce:	425b      	negs	r3, r3
100450d0:	2103      	movs	r1, #3
100450d2:	0018      	movs	r0, r3
100450d4:	f7ff ff7c 	bl	10044fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100450d8:	4b05      	ldr	r3, [pc, #20]	@ (100450f0 <SysTick_Config+0x44>)
100450da:	2200      	movs	r2, #0
100450dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100450de:	4b04      	ldr	r3, [pc, #16]	@ (100450f0 <SysTick_Config+0x44>)
100450e0:	2207      	movs	r2, #7
100450e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100450e4:	2300      	movs	r3, #0
}
100450e6:	0018      	movs	r0, r3
100450e8:	46bd      	mov	sp, r7
100450ea:	b002      	add	sp, #8
100450ec:	bd80      	pop	{r7, pc}
100450ee:	46c0      	nop			@ (mov r8, r8)
100450f0:	e000e010 	.word	0xe000e010

100450f4 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100450f4:	b580      	push	{r7, lr}
100450f6:	b084      	sub	sp, #16
100450f8:	af00      	add	r7, sp, #0
100450fa:	60b9      	str	r1, [r7, #8]
100450fc:	607a      	str	r2, [r7, #4]
100450fe:	210f      	movs	r1, #15
10045100:	187b      	adds	r3, r7, r1
10045102:	1c02      	adds	r2, r0, #0
10045104:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10045106:	68ba      	ldr	r2, [r7, #8]
10045108:	187b      	adds	r3, r7, r1
1004510a:	781b      	ldrb	r3, [r3, #0]
1004510c:	b25b      	sxtb	r3, r3
1004510e:	0011      	movs	r1, r2
10045110:	0018      	movs	r0, r3
10045112:	f7ff ff5d 	bl	10044fd0 <__NVIC_SetPriority>
}
10045116:	46c0      	nop			@ (mov r8, r8)
10045118:	46bd      	mov	sp, r7
1004511a:	b004      	add	sp, #16
1004511c:	bd80      	pop	{r7, pc}

1004511e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1004511e:	b580      	push	{r7, lr}
10045120:	b082      	sub	sp, #8
10045122:	af00      	add	r7, sp, #0
10045124:	0002      	movs	r2, r0
10045126:	1dfb      	adds	r3, r7, #7
10045128:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1004512a:	1dfb      	adds	r3, r7, #7
1004512c:	781b      	ldrb	r3, [r3, #0]
1004512e:	b25b      	sxtb	r3, r3
10045130:	0018      	movs	r0, r3
10045132:	f7ff ff33 	bl	10044f9c <__NVIC_EnableIRQ>
}
10045136:	46c0      	nop			@ (mov r8, r8)
10045138:	46bd      	mov	sp, r7
1004513a:	b002      	add	sp, #8
1004513c:	bd80      	pop	{r7, pc}

1004513e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1004513e:	b580      	push	{r7, lr}
10045140:	b082      	sub	sp, #8
10045142:	af00      	add	r7, sp, #0
10045144:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10045146:	687b      	ldr	r3, [r7, #4]
10045148:	0018      	movs	r0, r3
1004514a:	f7ff ffaf 	bl	100450ac <SysTick_Config>
1004514e:	0003      	movs	r3, r0
}
10045150:	0018      	movs	r0, r3
10045152:	46bd      	mov	sp, r7
10045154:	b002      	add	sp, #8
10045156:	bd80      	pop	{r7, pc}

10045158 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
10045158:	b5b0      	push	{r4, r5, r7, lr}
1004515a:	b086      	sub	sp, #24
1004515c:	af00      	add	r7, sp, #0
1004515e:	60f8      	str	r0, [r7, #12]
10045160:	60b9      	str	r1, [r7, #8]
10045162:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10045164:	4b1d      	ldr	r3, [pc, #116]	@ (100451dc <HAL_FLASH_Program+0x84>)
10045166:	781b      	ldrb	r3, [r3, #0]
10045168:	2b01      	cmp	r3, #1
1004516a:	d101      	bne.n	10045170 <HAL_FLASH_Program+0x18>
1004516c:	2302      	movs	r3, #2
1004516e:	e031      	b.n	100451d4 <HAL_FLASH_Program+0x7c>
10045170:	4b1a      	ldr	r3, [pc, #104]	@ (100451dc <HAL_FLASH_Program+0x84>)
10045172:	2201      	movs	r2, #1
10045174:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10045176:	4b19      	ldr	r3, [pc, #100]	@ (100451dc <HAL_FLASH_Program+0x84>)
10045178:	2200      	movs	r2, #0
1004517a:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004517c:	2517      	movs	r5, #23
1004517e:	197c      	adds	r4, r7, r5
10045180:	23fa      	movs	r3, #250	@ 0xfa
10045182:	009b      	lsls	r3, r3, #2
10045184:	0018      	movs	r0, r3
10045186:	f000 f82b 	bl	100451e0 <FLASH_WaitForLastOperation>
1004518a:	0003      	movs	r3, r0
1004518c:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
1004518e:	197b      	adds	r3, r7, r5
10045190:	781b      	ldrb	r3, [r3, #0]
10045192:	2b00      	cmp	r3, #0
10045194:	d118      	bne.n	100451c8 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
10045196:	68fb      	ldr	r3, [r7, #12]
10045198:	2b00      	cmp	r3, #0
1004519a:	d106      	bne.n	100451aa <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
1004519c:	687a      	ldr	r2, [r7, #4]
1004519e:	68bb      	ldr	r3, [r7, #8]
100451a0:	0011      	movs	r1, r2
100451a2:	0018      	movs	r0, r3
100451a4:	f000 f856 	bl	10045254 <FLASH_Program_Word>
100451a8:	e005      	b.n	100451b6 <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
100451aa:	687a      	ldr	r2, [r7, #4]
100451ac:	68bb      	ldr	r3, [r7, #8]
100451ae:	0011      	movs	r1, r2
100451b0:	0018      	movs	r0, r3
100451b2:	f000 f871 	bl	10045298 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
100451b6:	2317      	movs	r3, #23
100451b8:	18fc      	adds	r4, r7, r3
100451ba:	23fa      	movs	r3, #250	@ 0xfa
100451bc:	009b      	lsls	r3, r3, #2
100451be:	0018      	movs	r0, r3
100451c0:	f000 f80e 	bl	100451e0 <FLASH_WaitForLastOperation>
100451c4:	0003      	movs	r3, r0
100451c6:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
100451c8:	4b04      	ldr	r3, [pc, #16]	@ (100451dc <HAL_FLASH_Program+0x84>)
100451ca:	2200      	movs	r2, #0
100451cc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
100451ce:	2317      	movs	r3, #23
100451d0:	18fb      	adds	r3, r7, r3
100451d2:	781b      	ldrb	r3, [r3, #0]
}
100451d4:	0018      	movs	r0, r3
100451d6:	46bd      	mov	sp, r7
100451d8:	b006      	add	sp, #24
100451da:	bdb0      	pop	{r4, r5, r7, pc}
100451dc:	20000524 	.word	0x20000524

100451e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
100451e0:	b580      	push	{r7, lr}
100451e2:	b084      	sub	sp, #16
100451e4:	af00      	add	r7, sp, #0
100451e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100451e8:	f7ff fec4 	bl	10044f74 <HAL_GetTick>
100451ec:	0003      	movs	r3, r0
100451ee:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
100451f0:	e00c      	b.n	1004520c <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
100451f2:	687b      	ldr	r3, [r7, #4]
100451f4:	3301      	adds	r3, #1
100451f6:	d009      	beq.n	1004520c <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
100451f8:	f7ff febc 	bl	10044f74 <HAL_GetTick>
100451fc:	0002      	movs	r2, r0
100451fe:	68fb      	ldr	r3, [r7, #12]
10045200:	1ad3      	subs	r3, r2, r3
10045202:	687a      	ldr	r2, [r7, #4]
10045204:	429a      	cmp	r2, r3
10045206:	d801      	bhi.n	1004520c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
10045208:	2303      	movs	r3, #3
1004520a:	e01b      	b.n	10045244 <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
1004520c:	4b0f      	ldr	r3, [pc, #60]	@ (1004524c <FLASH_WaitForLastOperation+0x6c>)
1004520e:	691b      	ldr	r3, [r3, #16]
10045210:	2201      	movs	r2, #1
10045212:	4013      	ands	r3, r2
10045214:	2b01      	cmp	r3, #1
10045216:	d1ec      	bne.n	100451f2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
10045218:	4b0c      	ldr	r3, [pc, #48]	@ (1004524c <FLASH_WaitForLastOperation+0x6c>)
1004521a:	691b      	ldr	r3, [r3, #16]
1004521c:	220c      	movs	r2, #12
1004521e:	4013      	ands	r3, r2
10045220:	2b0c      	cmp	r3, #12
10045222:	d10e      	bne.n	10045242 <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
10045224:	4b09      	ldr	r3, [pc, #36]	@ (1004524c <FLASH_WaitForLastOperation+0x6c>)
10045226:	689a      	ldr	r2, [r3, #8]
10045228:	4b09      	ldr	r3, [pc, #36]	@ (10045250 <FLASH_WaitForLastOperation+0x70>)
1004522a:	685b      	ldr	r3, [r3, #4]
1004522c:	431a      	orrs	r2, r3
1004522e:	4b08      	ldr	r3, [pc, #32]	@ (10045250 <FLASH_WaitForLastOperation+0x70>)
10045230:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
10045232:	4b06      	ldr	r3, [pc, #24]	@ (1004524c <FLASH_WaitForLastOperation+0x6c>)
10045234:	691a      	ldr	r2, [r3, #16]
10045236:	4b05      	ldr	r3, [pc, #20]	@ (1004524c <FLASH_WaitForLastOperation+0x6c>)
10045238:	210c      	movs	r1, #12
1004523a:	430a      	orrs	r2, r1
1004523c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
1004523e:	2301      	movs	r3, #1
10045240:	e000      	b.n	10045244 <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
10045242:	2300      	movs	r3, #0
}
10045244:	0018      	movs	r0, r3
10045246:	46bd      	mov	sp, r7
10045248:	b004      	add	sp, #16
1004524a:	bd80      	pop	{r7, pc}
1004524c:	40001000 	.word	0x40001000
10045250:	20000524 	.word	0x20000524

10045254 <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
10045254:	b580      	push	{r7, lr}
10045256:	b082      	sub	sp, #8
10045258:	af00      	add	r7, sp, #0
1004525a:	6078      	str	r0, [r7, #4]
1004525c:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004525e:	4b0c      	ldr	r3, [pc, #48]	@ (10045290 <FLASH_Program_Word+0x3c>)
10045260:	691a      	ldr	r2, [r3, #16]
10045262:	4b0b      	ldr	r3, [pc, #44]	@ (10045290 <FLASH_Program_Word+0x3c>)
10045264:	210f      	movs	r1, #15
10045266:	430a      	orrs	r2, r1
10045268:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
1004526a:	687b      	ldr	r3, [r7, #4]
1004526c:	4a09      	ldr	r2, [pc, #36]	@ (10045294 <FLASH_Program_Word+0x40>)
1004526e:	4694      	mov	ip, r2
10045270:	4463      	add	r3, ip
10045272:	089a      	lsrs	r2, r3, #2
10045274:	4b06      	ldr	r3, [pc, #24]	@ (10045290 <FLASH_Program_Word+0x3c>)
10045276:	03d2      	lsls	r2, r2, #15
10045278:	0bd2      	lsrs	r2, r2, #15
1004527a:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
1004527c:	4b04      	ldr	r3, [pc, #16]	@ (10045290 <FLASH_Program_Word+0x3c>)
1004527e:	683a      	ldr	r2, [r7, #0]
10045280:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
10045282:	4b03      	ldr	r3, [pc, #12]	@ (10045290 <FLASH_Program_Word+0x3c>)
10045284:	2233      	movs	r2, #51	@ 0x33
10045286:	601a      	str	r2, [r3, #0]
}
10045288:	46c0      	nop			@ (mov r8, r8)
1004528a:	46bd      	mov	sp, r7
1004528c:	b002      	add	sp, #8
1004528e:	bd80      	pop	{r7, pc}
10045290:	40001000 	.word	0x40001000
10045294:	effc0000 	.word	0xeffc0000

10045298 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
10045298:	b580      	push	{r7, lr}
1004529a:	b084      	sub	sp, #16
1004529c:	af00      	add	r7, sp, #0
1004529e:	6078      	str	r0, [r7, #4]
100452a0:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
100452a2:	683b      	ldr	r3, [r7, #0]
100452a4:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
100452a6:	4b17      	ldr	r3, [pc, #92]	@ (10045304 <FLASH_Program_Burst+0x6c>)
100452a8:	691a      	ldr	r2, [r3, #16]
100452aa:	4b16      	ldr	r3, [pc, #88]	@ (10045304 <FLASH_Program_Burst+0x6c>)
100452ac:	210f      	movs	r1, #15
100452ae:	430a      	orrs	r2, r1
100452b0:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
100452b2:	687b      	ldr	r3, [r7, #4]
100452b4:	4a14      	ldr	r2, [pc, #80]	@ (10045308 <FLASH_Program_Burst+0x70>)
100452b6:	4694      	mov	ip, r2
100452b8:	4463      	add	r3, ip
100452ba:	089a      	lsrs	r2, r3, #2
100452bc:	4b11      	ldr	r3, [pc, #68]	@ (10045304 <FLASH_Program_Burst+0x6c>)
100452be:	03d2      	lsls	r2, r2, #15
100452c0:	0bd2      	lsrs	r2, r2, #15
100452c2:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
100452c4:	4a0f      	ldr	r2, [pc, #60]	@ (10045304 <FLASH_Program_Burst+0x6c>)
100452c6:	68fb      	ldr	r3, [r7, #12]
100452c8:	681b      	ldr	r3, [r3, #0]
100452ca:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
100452cc:	68fb      	ldr	r3, [r7, #12]
100452ce:	3304      	adds	r3, #4
100452d0:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
100452d2:	4a0c      	ldr	r2, [pc, #48]	@ (10045304 <FLASH_Program_Burst+0x6c>)
100452d4:	68fb      	ldr	r3, [r7, #12]
100452d6:	681b      	ldr	r3, [r3, #0]
100452d8:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
100452da:	68fb      	ldr	r3, [r7, #12]
100452dc:	3304      	adds	r3, #4
100452de:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
100452e0:	4a08      	ldr	r2, [pc, #32]	@ (10045304 <FLASH_Program_Burst+0x6c>)
100452e2:	68fb      	ldr	r3, [r7, #12]
100452e4:	681b      	ldr	r3, [r3, #0]
100452e6:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
100452e8:	68fb      	ldr	r3, [r7, #12]
100452ea:	3304      	adds	r3, #4
100452ec:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
100452ee:	4a05      	ldr	r2, [pc, #20]	@ (10045304 <FLASH_Program_Burst+0x6c>)
100452f0:	68fb      	ldr	r3, [r7, #12]
100452f2:	681b      	ldr	r3, [r3, #0]
100452f4:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
100452f6:	4b03      	ldr	r3, [pc, #12]	@ (10045304 <FLASH_Program_Burst+0x6c>)
100452f8:	22cc      	movs	r2, #204	@ 0xcc
100452fa:	601a      	str	r2, [r3, #0]
}
100452fc:	46c0      	nop			@ (mov r8, r8)
100452fe:	46bd      	mov	sp, r7
10045300:	b004      	add	sp, #16
10045302:	bd80      	pop	{r7, pc}
10045304:	40001000 	.word	0x40001000
10045308:	effc0000 	.word	0xeffc0000

1004530c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
1004530c:	b5b0      	push	{r4, r5, r7, lr}
1004530e:	b084      	sub	sp, #16
10045310:	af00      	add	r7, sp, #0
10045312:	6078      	str	r0, [r7, #4]
10045314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10045316:	4b27      	ldr	r3, [pc, #156]	@ (100453b4 <HAL_FLASHEx_Erase+0xa8>)
10045318:	781b      	ldrb	r3, [r3, #0]
1004531a:	2b01      	cmp	r3, #1
1004531c:	d101      	bne.n	10045322 <HAL_FLASHEx_Erase+0x16>
1004531e:	2302      	movs	r3, #2
10045320:	e043      	b.n	100453aa <HAL_FLASHEx_Erase+0x9e>
10045322:	4b24      	ldr	r3, [pc, #144]	@ (100453b4 <HAL_FLASHEx_Erase+0xa8>)
10045324:	2201      	movs	r2, #1
10045326:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10045328:	4b22      	ldr	r3, [pc, #136]	@ (100453b4 <HAL_FLASHEx_Erase+0xa8>)
1004532a:	2200      	movs	r2, #0
1004532c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
1004532e:	687b      	ldr	r3, [r7, #4]
10045330:	681b      	ldr	r3, [r3, #0]
10045332:	2bff      	cmp	r3, #255	@ 0xff
10045334:	d10b      	bne.n	1004534e <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
10045336:	f000 f83f 	bl	100453b8 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004533a:	230f      	movs	r3, #15
1004533c:	18fc      	adds	r4, r7, r3
1004533e:	23fa      	movs	r3, #250	@ 0xfa
10045340:	009b      	lsls	r3, r3, #2
10045342:	0018      	movs	r0, r3
10045344:	f7ff ff4c 	bl	100451e0 <FLASH_WaitForLastOperation>
10045348:	0003      	movs	r3, r0
1004534a:	7023      	strb	r3, [r4, #0]
1004534c:	e027      	b.n	1004539e <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
1004534e:	683b      	ldr	r3, [r7, #0]
10045350:	2201      	movs	r2, #1
10045352:	4252      	negs	r2, r2
10045354:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10045356:	687b      	ldr	r3, [r7, #4]
10045358:	685b      	ldr	r3, [r3, #4]
1004535a:	60bb      	str	r3, [r7, #8]
1004535c:	e017      	b.n	1004538e <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
1004535e:	68bb      	ldr	r3, [r7, #8]
10045360:	0018      	movs	r0, r3
10045362:	f000 f839 	bl	100453d8 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10045366:	250f      	movs	r5, #15
10045368:	197c      	adds	r4, r7, r5
1004536a:	23fa      	movs	r3, #250	@ 0xfa
1004536c:	009b      	lsls	r3, r3, #2
1004536e:	0018      	movs	r0, r3
10045370:	f7ff ff36 	bl	100451e0 <FLASH_WaitForLastOperation>
10045374:	0003      	movs	r3, r0
10045376:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
10045378:	197b      	adds	r3, r7, r5
1004537a:	781b      	ldrb	r3, [r3, #0]
1004537c:	2b00      	cmp	r3, #0
1004537e:	d003      	beq.n	10045388 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
10045380:	683b      	ldr	r3, [r7, #0]
10045382:	68ba      	ldr	r2, [r7, #8]
10045384:	601a      	str	r2, [r3, #0]
        break;
10045386:	e00a      	b.n	1004539e <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10045388:	68bb      	ldr	r3, [r7, #8]
1004538a:	3301      	adds	r3, #1
1004538c:	60bb      	str	r3, [r7, #8]
1004538e:	687b      	ldr	r3, [r7, #4]
10045390:	685a      	ldr	r2, [r3, #4]
10045392:	687b      	ldr	r3, [r7, #4]
10045394:	689b      	ldr	r3, [r3, #8]
10045396:	18d3      	adds	r3, r2, r3
10045398:	68ba      	ldr	r2, [r7, #8]
1004539a:	429a      	cmp	r2, r3
1004539c:	d3df      	bcc.n	1004535e <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
1004539e:	4b05      	ldr	r3, [pc, #20]	@ (100453b4 <HAL_FLASHEx_Erase+0xa8>)
100453a0:	2200      	movs	r2, #0
100453a2:	701a      	strb	r2, [r3, #0]

  return status;
100453a4:	230f      	movs	r3, #15
100453a6:	18fb      	adds	r3, r7, r3
100453a8:	781b      	ldrb	r3, [r3, #0]
}
100453aa:	0018      	movs	r0, r3
100453ac:	46bd      	mov	sp, r7
100453ae:	b004      	add	sp, #16
100453b0:	bdb0      	pop	{r4, r5, r7, pc}
100453b2:	46c0      	nop			@ (mov r8, r8)
100453b4:	20000524 	.word	0x20000524

100453b8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
100453b8:	b580      	push	{r7, lr}
100453ba:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
100453bc:	4b05      	ldr	r3, [pc, #20]	@ (100453d4 <FLASH_MassErase+0x1c>)
100453be:	691a      	ldr	r2, [r3, #16]
100453c0:	4b04      	ldr	r3, [pc, #16]	@ (100453d4 <FLASH_MassErase+0x1c>)
100453c2:	210f      	movs	r1, #15
100453c4:	430a      	orrs	r2, r1
100453c6:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
100453c8:	4b02      	ldr	r3, [pc, #8]	@ (100453d4 <FLASH_MassErase+0x1c>)
100453ca:	2222      	movs	r2, #34	@ 0x22
100453cc:	601a      	str	r2, [r3, #0]
}
100453ce:	46c0      	nop			@ (mov r8, r8)
100453d0:	46bd      	mov	sp, r7
100453d2:	bd80      	pop	{r7, pc}
100453d4:	40001000 	.word	0x40001000

100453d8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
100453d8:	b580      	push	{r7, lr}
100453da:	b082      	sub	sp, #8
100453dc:	af00      	add	r7, sp, #0
100453de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
100453e0:	4b09      	ldr	r3, [pc, #36]	@ (10045408 <FLASH_PageErase+0x30>)
100453e2:	691a      	ldr	r2, [r3, #16]
100453e4:	4b08      	ldr	r3, [pc, #32]	@ (10045408 <FLASH_PageErase+0x30>)
100453e6:	210f      	movs	r1, #15
100453e8:	430a      	orrs	r2, r1
100453ea:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
100453ec:	687b      	ldr	r3, [r7, #4]
100453ee:	02db      	lsls	r3, r3, #11
100453f0:	089a      	lsrs	r2, r3, #2
100453f2:	4b05      	ldr	r3, [pc, #20]	@ (10045408 <FLASH_PageErase+0x30>)
100453f4:	03d2      	lsls	r2, r2, #15
100453f6:	0bd2      	lsrs	r2, r2, #15
100453f8:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
100453fa:	4b03      	ldr	r3, [pc, #12]	@ (10045408 <FLASH_PageErase+0x30>)
100453fc:	2211      	movs	r2, #17
100453fe:	601a      	str	r2, [r3, #0]
}
10045400:	46c0      	nop			@ (mov r8, r8)
10045402:	46bd      	mov	sp, r7
10045404:	b002      	add	sp, #8
10045406:	bd80      	pop	{r7, pc}
10045408:	40001000 	.word	0x40001000

1004540c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
1004540c:	b580      	push	{r7, lr}
1004540e:	b086      	sub	sp, #24
10045410:	af00      	add	r7, sp, #0
10045412:	6078      	str	r0, [r7, #4]
10045414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10045416:	2300      	movs	r3, #0
10045418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004541a:	e194      	b.n	10045746 <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
1004541c:	683b      	ldr	r3, [r7, #0]
1004541e:	681b      	ldr	r3, [r3, #0]
10045420:	2101      	movs	r1, #1
10045422:	697a      	ldr	r2, [r7, #20]
10045424:	4091      	lsls	r1, r2
10045426:	000a      	movs	r2, r1
10045428:	4013      	ands	r3, r2
1004542a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
1004542c:	68fb      	ldr	r3, [r7, #12]
1004542e:	2b00      	cmp	r3, #0
10045430:	d100      	bne.n	10045434 <HAL_GPIO_Init+0x28>
10045432:	e185      	b.n	10045740 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10045434:	683b      	ldr	r3, [r7, #0]
10045436:	685b      	ldr	r3, [r3, #4]
10045438:	2203      	movs	r2, #3
1004543a:	4013      	ands	r3, r2
1004543c:	2b01      	cmp	r3, #1
1004543e:	d005      	beq.n	1004544c <HAL_GPIO_Init+0x40>
10045440:	683b      	ldr	r3, [r7, #0]
10045442:	685b      	ldr	r3, [r3, #4]
10045444:	2203      	movs	r2, #3
10045446:	4013      	ands	r3, r2
10045448:	2b02      	cmp	r3, #2
1004544a:	d130      	bne.n	100454ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1004544c:	687b      	ldr	r3, [r7, #4]
1004544e:	689b      	ldr	r3, [r3, #8]
10045450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10045452:	697b      	ldr	r3, [r7, #20]
10045454:	005b      	lsls	r3, r3, #1
10045456:	2203      	movs	r2, #3
10045458:	409a      	lsls	r2, r3
1004545a:	0013      	movs	r3, r2
1004545c:	43da      	mvns	r2, r3
1004545e:	693b      	ldr	r3, [r7, #16]
10045460:	4013      	ands	r3, r2
10045462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10045464:	683b      	ldr	r3, [r7, #0]
10045466:	68da      	ldr	r2, [r3, #12]
10045468:	697b      	ldr	r3, [r7, #20]
1004546a:	005b      	lsls	r3, r3, #1
1004546c:	409a      	lsls	r2, r3
1004546e:	0013      	movs	r3, r2
10045470:	693a      	ldr	r2, [r7, #16]
10045472:	4313      	orrs	r3, r2
10045474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10045476:	687b      	ldr	r3, [r7, #4]
10045478:	693a      	ldr	r2, [r7, #16]
1004547a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1004547c:	687b      	ldr	r3, [r7, #4]
1004547e:	685b      	ldr	r3, [r3, #4]
10045480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10045482:	2201      	movs	r2, #1
10045484:	697b      	ldr	r3, [r7, #20]
10045486:	409a      	lsls	r2, r3
10045488:	0013      	movs	r3, r2
1004548a:	43da      	mvns	r2, r3
1004548c:	693b      	ldr	r3, [r7, #16]
1004548e:	4013      	ands	r3, r2
10045490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10045492:	683b      	ldr	r3, [r7, #0]
10045494:	685b      	ldr	r3, [r3, #4]
10045496:	091b      	lsrs	r3, r3, #4
10045498:	2201      	movs	r2, #1
1004549a:	401a      	ands	r2, r3
1004549c:	697b      	ldr	r3, [r7, #20]
1004549e:	409a      	lsls	r2, r3
100454a0:	0013      	movs	r3, r2
100454a2:	693a      	ldr	r2, [r7, #16]
100454a4:	4313      	orrs	r3, r2
100454a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
100454a8:	687b      	ldr	r3, [r7, #4]
100454aa:	693a      	ldr	r2, [r7, #16]
100454ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
100454ae:	683b      	ldr	r3, [r7, #0]
100454b0:	685b      	ldr	r3, [r3, #4]
100454b2:	2203      	movs	r2, #3
100454b4:	4013      	ands	r3, r2
100454b6:	2b03      	cmp	r3, #3
100454b8:	d017      	beq.n	100454ea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
100454ba:	687b      	ldr	r3, [r7, #4]
100454bc:	68db      	ldr	r3, [r3, #12]
100454be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
100454c0:	697b      	ldr	r3, [r7, #20]
100454c2:	005b      	lsls	r3, r3, #1
100454c4:	2203      	movs	r2, #3
100454c6:	409a      	lsls	r2, r3
100454c8:	0013      	movs	r3, r2
100454ca:	43da      	mvns	r2, r3
100454cc:	693b      	ldr	r3, [r7, #16]
100454ce:	4013      	ands	r3, r2
100454d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
100454d2:	683b      	ldr	r3, [r7, #0]
100454d4:	689a      	ldr	r2, [r3, #8]
100454d6:	697b      	ldr	r3, [r7, #20]
100454d8:	005b      	lsls	r3, r3, #1
100454da:	409a      	lsls	r2, r3
100454dc:	0013      	movs	r3, r2
100454de:	693a      	ldr	r2, [r7, #16]
100454e0:	4313      	orrs	r3, r2
100454e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
100454e4:	687b      	ldr	r3, [r7, #4]
100454e6:	693a      	ldr	r2, [r7, #16]
100454e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
100454ea:	683b      	ldr	r3, [r7, #0]
100454ec:	685b      	ldr	r3, [r3, #4]
100454ee:	2203      	movs	r2, #3
100454f0:	4013      	ands	r3, r2
100454f2:	2b02      	cmp	r3, #2
100454f4:	d123      	bne.n	1004553e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100454f6:	697b      	ldr	r3, [r7, #20]
100454f8:	08da      	lsrs	r2, r3, #3
100454fa:	687b      	ldr	r3, [r7, #4]
100454fc:	3208      	adds	r2, #8
100454fe:	0092      	lsls	r2, r2, #2
10045500:	58d3      	ldr	r3, [r2, r3]
10045502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10045504:	697b      	ldr	r3, [r7, #20]
10045506:	2207      	movs	r2, #7
10045508:	4013      	ands	r3, r2
1004550a:	009b      	lsls	r3, r3, #2
1004550c:	220f      	movs	r2, #15
1004550e:	409a      	lsls	r2, r3
10045510:	0013      	movs	r3, r2
10045512:	43da      	mvns	r2, r3
10045514:	693b      	ldr	r3, [r7, #16]
10045516:	4013      	ands	r3, r2
10045518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
1004551a:	683b      	ldr	r3, [r7, #0]
1004551c:	691a      	ldr	r2, [r3, #16]
1004551e:	697b      	ldr	r3, [r7, #20]
10045520:	2107      	movs	r1, #7
10045522:	400b      	ands	r3, r1
10045524:	009b      	lsls	r3, r3, #2
10045526:	409a      	lsls	r2, r3
10045528:	0013      	movs	r3, r2
1004552a:	693a      	ldr	r2, [r7, #16]
1004552c:	4313      	orrs	r3, r2
1004552e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10045530:	697b      	ldr	r3, [r7, #20]
10045532:	08da      	lsrs	r2, r3, #3
10045534:	687b      	ldr	r3, [r7, #4]
10045536:	3208      	adds	r2, #8
10045538:	0092      	lsls	r2, r2, #2
1004553a:	6939      	ldr	r1, [r7, #16]
1004553c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1004553e:	687b      	ldr	r3, [r7, #4]
10045540:	681b      	ldr	r3, [r3, #0]
10045542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10045544:	697b      	ldr	r3, [r7, #20]
10045546:	005b      	lsls	r3, r3, #1
10045548:	2203      	movs	r2, #3
1004554a:	409a      	lsls	r2, r3
1004554c:	0013      	movs	r3, r2
1004554e:	43da      	mvns	r2, r3
10045550:	693b      	ldr	r3, [r7, #16]
10045552:	4013      	ands	r3, r2
10045554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10045556:	683b      	ldr	r3, [r7, #0]
10045558:	685b      	ldr	r3, [r3, #4]
1004555a:	2203      	movs	r2, #3
1004555c:	401a      	ands	r2, r3
1004555e:	697b      	ldr	r3, [r7, #20]
10045560:	005b      	lsls	r3, r3, #1
10045562:	409a      	lsls	r2, r3
10045564:	0013      	movs	r3, r2
10045566:	693a      	ldr	r2, [r7, #16]
10045568:	4313      	orrs	r3, r2
1004556a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
1004556c:	687b      	ldr	r3, [r7, #4]
1004556e:	693a      	ldr	r2, [r7, #16]
10045570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10045572:	683b      	ldr	r3, [r7, #0]
10045574:	685a      	ldr	r2, [r3, #4]
10045576:	23c0      	movs	r3, #192	@ 0xc0
10045578:	029b      	lsls	r3, r3, #10
1004557a:	4013      	ands	r3, r2
1004557c:	d100      	bne.n	10045580 <HAL_GPIO_Init+0x174>
1004557e:	e0df      	b.n	10045740 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10045580:	683b      	ldr	r3, [r7, #0]
10045582:	685a      	ldr	r2, [r3, #4]
10045584:	2380      	movs	r3, #128	@ 0x80
10045586:	02db      	lsls	r3, r3, #11
10045588:	4013      	ands	r3, r2
1004558a:	d031      	beq.n	100455f0 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
1004558c:	2380      	movs	r3, #128	@ 0x80
1004558e:	05db      	lsls	r3, r3, #23
10045590:	68db      	ldr	r3, [r3, #12]
10045592:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10045594:	687a      	ldr	r2, [r7, #4]
10045596:	2390      	movs	r3, #144	@ 0x90
10045598:	05db      	lsls	r3, r3, #23
1004559a:	429a      	cmp	r2, r3
1004559c:	d111      	bne.n	100455c2 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
1004559e:	2201      	movs	r2, #1
100455a0:	697b      	ldr	r3, [r7, #20]
100455a2:	409a      	lsls	r2, r3
100455a4:	0013      	movs	r3, r2
100455a6:	43db      	mvns	r3, r3
100455a8:	001a      	movs	r2, r3
100455aa:	693b      	ldr	r3, [r7, #16]
100455ac:	4013      	ands	r3, r2
100455ae:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100455b0:	2201      	movs	r2, #1
100455b2:	697b      	ldr	r3, [r7, #20]
100455b4:	409a      	lsls	r2, r3
100455b6:	0013      	movs	r3, r2
100455b8:	001a      	movs	r2, r3
100455ba:	693b      	ldr	r3, [r7, #16]
100455bc:	4313      	orrs	r3, r2
100455be:	613b      	str	r3, [r7, #16]
100455c0:	e012      	b.n	100455e8 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100455c2:	2201      	movs	r2, #1
100455c4:	697b      	ldr	r3, [r7, #20]
100455c6:	409a      	lsls	r2, r3
100455c8:	0013      	movs	r3, r2
100455ca:	041b      	lsls	r3, r3, #16
100455cc:	43db      	mvns	r3, r3
100455ce:	001a      	movs	r2, r3
100455d0:	693b      	ldr	r3, [r7, #16]
100455d2:	4013      	ands	r3, r2
100455d4:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100455d6:	2201      	movs	r2, #1
100455d8:	697b      	ldr	r3, [r7, #20]
100455da:	409a      	lsls	r2, r3
100455dc:	0013      	movs	r3, r2
100455de:	041b      	lsls	r3, r3, #16
100455e0:	001a      	movs	r2, r3
100455e2:	693b      	ldr	r3, [r7, #16]
100455e4:	4313      	orrs	r3, r2
100455e6:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
100455e8:	2380      	movs	r3, #128	@ 0x80
100455ea:	05db      	lsls	r3, r3, #23
100455ec:	693a      	ldr	r2, [r7, #16]
100455ee:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
100455f0:	683b      	ldr	r3, [r7, #0]
100455f2:	685a      	ldr	r2, [r3, #4]
100455f4:	2380      	movs	r3, #128	@ 0x80
100455f6:	035b      	lsls	r3, r3, #13
100455f8:	4013      	ands	r3, r2
100455fa:	d031      	beq.n	10045660 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
100455fc:	2380      	movs	r3, #128	@ 0x80
100455fe:	05db      	lsls	r3, r3, #23
10045600:	691b      	ldr	r3, [r3, #16]
10045602:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10045604:	687a      	ldr	r2, [r7, #4]
10045606:	2390      	movs	r3, #144	@ 0x90
10045608:	05db      	lsls	r3, r3, #23
1004560a:	429a      	cmp	r2, r3
1004560c:	d111      	bne.n	10045632 <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
1004560e:	2201      	movs	r2, #1
10045610:	697b      	ldr	r3, [r7, #20]
10045612:	409a      	lsls	r2, r3
10045614:	0013      	movs	r3, r2
10045616:	43db      	mvns	r3, r3
10045618:	001a      	movs	r2, r3
1004561a:	693b      	ldr	r3, [r7, #16]
1004561c:	4013      	ands	r3, r2
1004561e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10045620:	2201      	movs	r2, #1
10045622:	697b      	ldr	r3, [r7, #20]
10045624:	409a      	lsls	r2, r3
10045626:	0013      	movs	r3, r2
10045628:	001a      	movs	r2, r3
1004562a:	693b      	ldr	r3, [r7, #16]
1004562c:	4313      	orrs	r3, r2
1004562e:	613b      	str	r3, [r7, #16]
10045630:	e012      	b.n	10045658 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10045632:	2201      	movs	r2, #1
10045634:	697b      	ldr	r3, [r7, #20]
10045636:	409a      	lsls	r2, r3
10045638:	0013      	movs	r3, r2
1004563a:	041b      	lsls	r3, r3, #16
1004563c:	43db      	mvns	r3, r3
1004563e:	001a      	movs	r2, r3
10045640:	693b      	ldr	r3, [r7, #16]
10045642:	4013      	ands	r3, r2
10045644:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10045646:	2201      	movs	r2, #1
10045648:	697b      	ldr	r3, [r7, #20]
1004564a:	409a      	lsls	r2, r3
1004564c:	0013      	movs	r3, r2
1004564e:	041b      	lsls	r3, r3, #16
10045650:	001a      	movs	r2, r3
10045652:	693b      	ldr	r3, [r7, #16]
10045654:	4313      	orrs	r3, r2
10045656:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10045658:	2380      	movs	r3, #128	@ 0x80
1004565a:	05db      	lsls	r3, r3, #23
1004565c:	693a      	ldr	r2, [r7, #16]
1004565e:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10045660:	683b      	ldr	r3, [r7, #0]
10045662:	685a      	ldr	r2, [r3, #4]
10045664:	2380      	movs	r3, #128	@ 0x80
10045666:	03db      	lsls	r3, r3, #15
10045668:	4013      	ands	r3, r2
1004566a:	d031      	beq.n	100456d0 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
1004566c:	2380      	movs	r3, #128	@ 0x80
1004566e:	05db      	lsls	r3, r3, #23
10045670:	695b      	ldr	r3, [r3, #20]
10045672:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10045674:	687a      	ldr	r2, [r7, #4]
10045676:	2390      	movs	r3, #144	@ 0x90
10045678:	05db      	lsls	r3, r3, #23
1004567a:	429a      	cmp	r2, r3
1004567c:	d111      	bne.n	100456a2 <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
1004567e:	2201      	movs	r2, #1
10045680:	697b      	ldr	r3, [r7, #20]
10045682:	409a      	lsls	r2, r3
10045684:	0013      	movs	r3, r2
10045686:	43db      	mvns	r3, r3
10045688:	001a      	movs	r2, r3
1004568a:	693b      	ldr	r3, [r7, #16]
1004568c:	4013      	ands	r3, r2
1004568e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10045690:	2201      	movs	r2, #1
10045692:	697b      	ldr	r3, [r7, #20]
10045694:	409a      	lsls	r2, r3
10045696:	0013      	movs	r3, r2
10045698:	001a      	movs	r2, r3
1004569a:	693b      	ldr	r3, [r7, #16]
1004569c:	4313      	orrs	r3, r2
1004569e:	613b      	str	r3, [r7, #16]
100456a0:	e012      	b.n	100456c8 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100456a2:	2201      	movs	r2, #1
100456a4:	697b      	ldr	r3, [r7, #20]
100456a6:	409a      	lsls	r2, r3
100456a8:	0013      	movs	r3, r2
100456aa:	041b      	lsls	r3, r3, #16
100456ac:	43db      	mvns	r3, r3
100456ae:	001a      	movs	r2, r3
100456b0:	693b      	ldr	r3, [r7, #16]
100456b2:	4013      	ands	r3, r2
100456b4:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100456b6:	2201      	movs	r2, #1
100456b8:	697b      	ldr	r3, [r7, #20]
100456ba:	409a      	lsls	r2, r3
100456bc:	0013      	movs	r3, r2
100456be:	041b      	lsls	r3, r3, #16
100456c0:	001a      	movs	r2, r3
100456c2:	693b      	ldr	r3, [r7, #16]
100456c4:	4313      	orrs	r3, r2
100456c6:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
100456c8:	2380      	movs	r3, #128	@ 0x80
100456ca:	05db      	lsls	r3, r3, #23
100456cc:	693a      	ldr	r2, [r7, #16]
100456ce:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
100456d0:	683b      	ldr	r3, [r7, #0]
100456d2:	685a      	ldr	r2, [r3, #4]
100456d4:	2380      	movs	r3, #128	@ 0x80
100456d6:	025b      	lsls	r3, r3, #9
100456d8:	4013      	ands	r3, r2
100456da:	d031      	beq.n	10045740 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
100456dc:	2380      	movs	r3, #128	@ 0x80
100456de:	05db      	lsls	r3, r3, #23
100456e0:	699b      	ldr	r3, [r3, #24]
100456e2:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100456e4:	687a      	ldr	r2, [r7, #4]
100456e6:	2390      	movs	r3, #144	@ 0x90
100456e8:	05db      	lsls	r3, r3, #23
100456ea:	429a      	cmp	r2, r3
100456ec:	d111      	bne.n	10045712 <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
100456ee:	2201      	movs	r2, #1
100456f0:	697b      	ldr	r3, [r7, #20]
100456f2:	409a      	lsls	r2, r3
100456f4:	0013      	movs	r3, r2
100456f6:	43db      	mvns	r3, r3
100456f8:	001a      	movs	r2, r3
100456fa:	693b      	ldr	r3, [r7, #16]
100456fc:	4013      	ands	r3, r2
100456fe:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10045700:	2201      	movs	r2, #1
10045702:	697b      	ldr	r3, [r7, #20]
10045704:	409a      	lsls	r2, r3
10045706:	0013      	movs	r3, r2
10045708:	001a      	movs	r2, r3
1004570a:	693b      	ldr	r3, [r7, #16]
1004570c:	4313      	orrs	r3, r2
1004570e:	613b      	str	r3, [r7, #16]
10045710:	e012      	b.n	10045738 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10045712:	2201      	movs	r2, #1
10045714:	697b      	ldr	r3, [r7, #20]
10045716:	409a      	lsls	r2, r3
10045718:	0013      	movs	r3, r2
1004571a:	041b      	lsls	r3, r3, #16
1004571c:	43db      	mvns	r3, r3
1004571e:	001a      	movs	r2, r3
10045720:	693b      	ldr	r3, [r7, #16]
10045722:	4013      	ands	r3, r2
10045724:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10045726:	2201      	movs	r2, #1
10045728:	697b      	ldr	r3, [r7, #20]
1004572a:	409a      	lsls	r2, r3
1004572c:	0013      	movs	r3, r2
1004572e:	041b      	lsls	r3, r3, #16
10045730:	001a      	movs	r2, r3
10045732:	693b      	ldr	r3, [r7, #16]
10045734:	4313      	orrs	r3, r2
10045736:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10045738:	2380      	movs	r3, #128	@ 0x80
1004573a:	05db      	lsls	r3, r3, #23
1004573c:	693a      	ldr	r2, [r7, #16]
1004573e:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10045740:	697b      	ldr	r3, [r7, #20]
10045742:	3301      	adds	r3, #1
10045744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10045746:	683b      	ldr	r3, [r7, #0]
10045748:	681a      	ldr	r2, [r3, #0]
1004574a:	697b      	ldr	r3, [r7, #20]
1004574c:	40da      	lsrs	r2, r3
1004574e:	1e13      	subs	r3, r2, #0
10045750:	d000      	beq.n	10045754 <HAL_GPIO_Init+0x348>
10045752:	e663      	b.n	1004541c <HAL_GPIO_Init+0x10>
  }
}
10045754:	46c0      	nop			@ (mov r8, r8)
10045756:	46c0      	nop			@ (mov r8, r8)
10045758:	46bd      	mov	sp, r7
1004575a:	b006      	add	sp, #24
1004575c:	bd80      	pop	{r7, pc}

1004575e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
1004575e:	b580      	push	{r7, lr}
10045760:	b082      	sub	sp, #8
10045762:	af00      	add	r7, sp, #0
10045764:	6078      	str	r0, [r7, #4]
10045766:	0008      	movs	r0, r1
10045768:	0011      	movs	r1, r2
1004576a:	1cbb      	adds	r3, r7, #2
1004576c:	1c02      	adds	r2, r0, #0
1004576e:	801a      	strh	r2, [r3, #0]
10045770:	1c7b      	adds	r3, r7, #1
10045772:	1c0a      	adds	r2, r1, #0
10045774:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10045776:	1c7b      	adds	r3, r7, #1
10045778:	781b      	ldrb	r3, [r3, #0]
1004577a:	2b00      	cmp	r3, #0
1004577c:	d004      	beq.n	10045788 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
1004577e:	1cbb      	adds	r3, r7, #2
10045780:	881a      	ldrh	r2, [r3, #0]
10045782:	687b      	ldr	r3, [r7, #4]
10045784:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10045786:	e003      	b.n	10045790 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10045788:	1cbb      	adds	r3, r7, #2
1004578a:	881a      	ldrh	r2, [r3, #0]
1004578c:	687b      	ldr	r3, [r7, #4]
1004578e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10045790:	46c0      	nop			@ (mov r8, r8)
10045792:	46bd      	mov	sp, r7
10045794:	b002      	add	sp, #8
10045796:	bd80      	pop	{r7, pc}

10045798 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
10045798:	b580      	push	{r7, lr}
1004579a:	b084      	sub	sp, #16
1004579c:	af00      	add	r7, sp, #0
1004579e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
100457a0:	230f      	movs	r3, #15
100457a2:	18fb      	adds	r3, r7, r3
100457a4:	2200      	movs	r2, #0
100457a6:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
100457a8:	687b      	ldr	r3, [r7, #4]
100457aa:	2b00      	cmp	r3, #0
100457ac:	d045      	beq.n	1004583a <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
100457ae:	687b      	ldr	r3, [r7, #4]
100457b0:	791b      	ldrb	r3, [r3, #4]
100457b2:	b2db      	uxtb	r3, r3
100457b4:	2b00      	cmp	r3, #0
100457b6:	d103      	bne.n	100457c0 <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
100457b8:	687b      	ldr	r3, [r7, #4]
100457ba:	0018      	movs	r0, r3
100457bc:	f7fb fc88 	bl	100410d0 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
100457c0:	f7ff fbd8 	bl	10044f74 <HAL_GetTick>
100457c4:	0003      	movs	r3, r0
100457c6:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
100457c8:	687b      	ldr	r3, [r7, #4]
100457ca:	2202      	movs	r2, #2
100457cc:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
100457ce:	e011      	b.n	100457f4 <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
100457d0:	687b      	ldr	r3, [r7, #4]
100457d2:	681b      	ldr	r3, [r3, #0]
100457d4:	2201      	movs	r2, #1
100457d6:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
100457d8:	f7ff fbcc 	bl	10044f74 <HAL_GetTick>
100457dc:	0002      	movs	r2, r0
100457de:	68bb      	ldr	r3, [r7, #8]
100457e0:	1ad2      	subs	r2, r2, r3
100457e2:	23fa      	movs	r3, #250	@ 0xfa
100457e4:	009b      	lsls	r3, r3, #2
100457e6:	429a      	cmp	r2, r3
100457e8:	d904      	bls.n	100457f4 <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
100457ea:	230f      	movs	r3, #15
100457ec:	18fb      	adds	r3, r7, r3
100457ee:	2203      	movs	r2, #3
100457f0:	701a      	strb	r2, [r3, #0]
        break;
100457f2:	e006      	b.n	10045802 <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
100457f4:	687b      	ldr	r3, [r7, #4]
100457f6:	681b      	ldr	r3, [r3, #0]
100457f8:	681b      	ldr	r3, [r3, #0]
100457fa:	2201      	movs	r2, #1
100457fc:	4013      	ands	r3, r2
100457fe:	2b01      	cmp	r3, #1
10045800:	d1e6      	bne.n	100457d0 <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
10045802:	230f      	movs	r3, #15
10045804:	18fb      	adds	r3, r7, r3
10045806:	781b      	ldrb	r3, [r3, #0]
10045808:	2b00      	cmp	r3, #0
1004580a:	d10f      	bne.n	1004582c <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
1004580c:	687b      	ldr	r3, [r7, #4]
1004580e:	681b      	ldr	r3, [r3, #0]
10045810:	689a      	ldr	r2, [r3, #8]
10045812:	687b      	ldr	r3, [r7, #4]
10045814:	681b      	ldr	r3, [r3, #0]
10045816:	21d0      	movs	r1, #208	@ 0xd0
10045818:	0349      	lsls	r1, r1, #13
1004581a:	430a      	orrs	r2, r1
1004581c:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
1004581e:	687b      	ldr	r3, [r7, #4]
10045820:	2200      	movs	r2, #0
10045822:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
10045824:	687b      	ldr	r3, [r7, #4]
10045826:	2201      	movs	r2, #1
10045828:	711a      	strb	r2, [r3, #4]
1004582a:	e00a      	b.n	10045842 <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
1004582c:	687b      	ldr	r3, [r7, #4]
1004582e:	2204      	movs	r2, #4
10045830:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
10045832:	687b      	ldr	r3, [r7, #4]
10045834:	2203      	movs	r2, #3
10045836:	711a      	strb	r2, [r3, #4]
10045838:	e003      	b.n	10045842 <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
1004583a:	230f      	movs	r3, #15
1004583c:	18fb      	adds	r3, r7, r3
1004583e:	2201      	movs	r2, #1
10045840:	701a      	strb	r2, [r3, #0]
  }

  return err;
10045842:	230f      	movs	r3, #15
10045844:	18fb      	adds	r3, r7, r3
10045846:	781b      	ldrb	r3, [r3, #0]
}
10045848:	0018      	movs	r0, r3
1004584a:	46bd      	mov	sp, r7
1004584c:	b004      	add	sp, #16
1004584e:	bd80      	pop	{r7, pc}

10045850 <HAL_PKA_IRQHandler>:
  * @brief  This function handles PKA event interrupt request.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_IRQHandler(PKA_HandleTypeDef *hpka)
{
10045850:	b580      	push	{r7, lr}
10045852:	b086      	sub	sp, #24
10045854:	af00      	add	r7, sp, #0
10045856:	6078      	str	r0, [r7, #4]
#if defined (STM32WB06) || defined(STM32WB07)
  uint32_t itsource = READ_REG(hpka->Instance->IEN);
  uint32_t flag  =    READ_REG(hpka->Instance->ISR);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t mode = PKA_GetMode(hpka);
10045858:	687b      	ldr	r3, [r7, #4]
1004585a:	0018      	movs	r0, r3
1004585c:	f000 f86a 	bl	10045934 <PKA_GetMode>
10045860:	0003      	movs	r3, r0
10045862:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hpka->Instance->CR);
10045864:	687b      	ldr	r3, [r7, #4]
10045866:	681b      	ldr	r3, [r3, #0]
10045868:	681b      	ldr	r3, [r3, #0]
1004586a:	613b      	str	r3, [r7, #16]
  uint32_t flag  =   READ_REG(hpka->Instance->SR);
1004586c:	687b      	ldr	r3, [r7, #4]
1004586e:	681b      	ldr	r3, [r3, #0]
10045870:	685b      	ldr	r3, [r3, #4]
10045872:	60fb      	str	r3, [r7, #12]
#endif /* STM32WB05 || STM32WB09 */

  /* Address error interrupt occurred */
  if (((itsource & PKA_IT_ADDRERR) == PKA_IT_ADDRERR) && ((flag & PKA_FLAG_ADDRERR) == PKA_FLAG_ADDRERR))
10045874:	693a      	ldr	r2, [r7, #16]
10045876:	2380      	movs	r3, #128	@ 0x80
10045878:	035b      	lsls	r3, r3, #13
1004587a:	4013      	ands	r3, r2
1004587c:	d00f      	beq.n	1004589e <HAL_PKA_IRQHandler+0x4e>
1004587e:	68fa      	ldr	r2, [r7, #12]
10045880:	2380      	movs	r3, #128	@ 0x80
10045882:	035b      	lsls	r3, r3, #13
10045884:	4013      	ands	r3, r2
10045886:	d00a      	beq.n	1004589e <HAL_PKA_IRQHandler+0x4e>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_ADDRERR;
10045888:	687b      	ldr	r3, [r7, #4]
1004588a:	689b      	ldr	r3, [r3, #8]
1004588c:	2201      	movs	r2, #1
1004588e:	431a      	orrs	r2, r3
10045890:	687b      	ldr	r3, [r7, #4]
10045892:	609a      	str	r2, [r3, #8]

    /* Clear ADDRERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_ADDRERR);
10045894:	687b      	ldr	r3, [r7, #4]
10045896:	681b      	ldr	r3, [r3, #0]
10045898:	2280      	movs	r2, #128	@ 0x80
1004589a:	0352      	lsls	r2, r2, #13
1004589c:	609a      	str	r2, [r3, #8]
  }

  /* RAM access error interrupt occurred */
  if (((itsource & PKA_IT_RAMERR) == PKA_IT_RAMERR) && ((flag & PKA_FLAG_RAMERR) == PKA_FLAG_RAMERR))
1004589e:	693a      	ldr	r2, [r7, #16]
100458a0:	2380      	movs	r3, #128	@ 0x80
100458a2:	031b      	lsls	r3, r3, #12
100458a4:	4013      	ands	r3, r2
100458a6:	d00f      	beq.n	100458c8 <HAL_PKA_IRQHandler+0x78>
100458a8:	68fa      	ldr	r2, [r7, #12]
100458aa:	2380      	movs	r3, #128	@ 0x80
100458ac:	031b      	lsls	r3, r3, #12
100458ae:	4013      	ands	r3, r2
100458b0:	d00a      	beq.n	100458c8 <HAL_PKA_IRQHandler+0x78>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_RAMERR;
100458b2:	687b      	ldr	r3, [r7, #4]
100458b4:	689b      	ldr	r3, [r3, #8]
100458b6:	2202      	movs	r2, #2
100458b8:	431a      	orrs	r2, r3
100458ba:	687b      	ldr	r3, [r7, #4]
100458bc:	609a      	str	r2, [r3, #8]

    /* Clear RAMERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_RAMERR);
100458be:	687b      	ldr	r3, [r7, #4]
100458c0:	681b      	ldr	r3, [r3, #0]
100458c2:	2280      	movs	r2, #128	@ 0x80
100458c4:	0312      	lsls	r2, r2, #12
100458c6:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB05 */
#if defined (STM32WB09)
  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
100458c8:	697b      	ldr	r3, [r7, #20]
100458ca:	2b24      	cmp	r3, #36	@ 0x24
100458cc:	d10d      	bne.n	100458ea <HAL_PKA_IRQHandler+0x9a>
  {
    /* If error output result is different from 0xD60D, ecdsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != 0xD60DUL)
100458ce:	687b      	ldr	r3, [r7, #4]
100458d0:	681a      	ldr	r2, [r3, #0]
100458d2:	23f8      	movs	r3, #248	@ 0xf8
100458d4:	011b      	lsls	r3, r3, #4
100458d6:	58d3      	ldr	r3, [r2, r3]
100458d8:	4a15      	ldr	r2, [pc, #84]	@ (10045930 <HAL_PKA_IRQHandler+0xe0>)
100458da:	4293      	cmp	r3, r2
100458dc:	d005      	beq.n	100458ea <HAL_PKA_IRQHandler+0x9a>
    {
      hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
100458de:	687b      	ldr	r3, [r7, #4]
100458e0:	689b      	ldr	r3, [r3, #8]
100458e2:	2208      	movs	r2, #8
100458e4:	431a      	orrs	r2, r3
100458e6:	687b      	ldr	r3, [r7, #4]
100458e8:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB09 */

  /* Trigger the error callback if an error is present */
  if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
100458ea:	687b      	ldr	r3, [r7, #4]
100458ec:	689b      	ldr	r3, [r3, #8]
100458ee:	2b00      	cmp	r3, #0
100458f0:	d003      	beq.n	100458fa <HAL_PKA_IRQHandler+0xaa>
  {
#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->ErrorCallback(hpka);
#else
    HAL_PKA_ErrorCallback(hpka);
100458f2:	687b      	ldr	r3, [r7, #4]
100458f4:	0018      	movs	r0, r3
100458f6:	f7fd fba9 	bl	1004304c <HAL_PKA_ErrorCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }

  /* End Of Operation interrupt occurred */
  if (((itsource & PKA_IT_PROCEND) == PKA_IT_PROCEND) && ((flag & PKA_FLAG_PROCEND) == PKA_FLAG_PROCEND))
100458fa:	693a      	ldr	r2, [r7, #16]
100458fc:	2380      	movs	r3, #128	@ 0x80
100458fe:	029b      	lsls	r3, r3, #10
10045900:	4013      	ands	r3, r2
10045902:	d010      	beq.n	10045926 <HAL_PKA_IRQHandler+0xd6>
10045904:	68fa      	ldr	r2, [r7, #12]
10045906:	2380      	movs	r3, #128	@ 0x80
10045908:	029b      	lsls	r3, r3, #10
1004590a:	4013      	ands	r3, r2
1004590c:	d00b      	beq.n	10045926 <HAL_PKA_IRQHandler+0xd6>
  {
    /* Clear PROCEND flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_PROCEND);
1004590e:	687b      	ldr	r3, [r7, #4]
10045910:	681b      	ldr	r3, [r3, #0]
10045912:	2280      	movs	r2, #128	@ 0x80
10045914:	0292      	lsls	r2, r2, #10
10045916:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
10045918:	687b      	ldr	r3, [r7, #4]
1004591a:	2201      	movs	r2, #1
1004591c:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->OperationCpltCallback(hpka);
#else
    HAL_PKA_OperationCpltCallback(hpka);
1004591e:	687b      	ldr	r3, [r7, #4]
10045920:	0018      	movs	r0, r3
10045922:	f7fd fb87 	bl	10043034 <HAL_PKA_OperationCpltCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }
}
10045926:	46c0      	nop			@ (mov r8, r8)
10045928:	46bd      	mov	sp, r7
1004592a:	b006      	add	sp, #24
1004592c:	bd80      	pop	{r7, pc}
1004592e:	46c0      	nop			@ (mov r8, r8)
10045930:	0000d60d 	.word	0x0000d60d

10045934 <PKA_GetMode>:
  * @brief  Get PKA operating mode.
  * @param  hpka PKA handle
  * @retval Return the current mode
  */
uint32_t PKA_GetMode(const PKA_HandleTypeDef *hpka)
{
10045934:	b580      	push	{r7, lr}
10045936:	b082      	sub	sp, #8
10045938:	af00      	add	r7, sp, #0
1004593a:	6078      	str	r0, [r7, #4]
  /* return the shifted PKA_CR_MODE value */
  return (uint32_t)(READ_BIT(hpka->Instance->CR, PKA_CR_MODE) >> PKA_CR_MODE_Pos);
1004593c:	687b      	ldr	r3, [r7, #4]
1004593e:	681b      	ldr	r3, [r3, #0]
10045940:	681b      	ldr	r3, [r3, #0]
10045942:	0a1b      	lsrs	r3, r3, #8
10045944:	223f      	movs	r2, #63	@ 0x3f
10045946:	4013      	ands	r3, r2
}
10045948:	0018      	movs	r0, r3
1004594a:	46bd      	mov	sp, r7
1004594c:	b002      	add	sp, #8
1004594e:	bd80      	pop	{r7, pc}

10045950 <HAL_PWREx_EnableGPIOPullUp>:
  *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 or the logical OR
  *         of several of them to setseveral bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10045950:	b580      	push	{r7, lr}
10045952:	b084      	sub	sp, #16
10045954:	af00      	add	r7, sp, #0
10045956:	6078      	str	r0, [r7, #4]
10045958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004595a:	230f      	movs	r3, #15
1004595c:	18fb      	adds	r3, r7, r3
1004595e:	2200      	movs	r2, #0
10045960:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
10045962:	687b      	ldr	r3, [r7, #4]
10045964:	2b00      	cmp	r3, #0
10045966:	d003      	beq.n	10045970 <HAL_PWREx_EnableGPIOPullUp+0x20>
10045968:	687b      	ldr	r3, [r7, #4]
1004596a:	2b01      	cmp	r3, #1
1004596c:	d00e      	beq.n	1004598c <HAL_PWREx_EnableGPIOPullUp+0x3c>
1004596e:	e01b      	b.n	100459a8 <HAL_PWREx_EnableGPIOPullUp+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PUCRA, GPIONumber);
10045970:	4b13      	ldr	r3, [pc, #76]	@ (100459c0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10045972:	6a19      	ldr	r1, [r3, #32]
10045974:	4b12      	ldr	r3, [pc, #72]	@ (100459c0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10045976:	683a      	ldr	r2, [r7, #0]
10045978:	430a      	orrs	r2, r1
1004597a:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004597c:	4b10      	ldr	r3, [pc, #64]	@ (100459c0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004597e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045980:	683b      	ldr	r3, [r7, #0]
10045982:	43d9      	mvns	r1, r3
10045984:	4b0e      	ldr	r3, [pc, #56]	@ (100459c0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10045986:	400a      	ands	r2, r1
10045988:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
1004598a:	e012      	b.n	100459b2 <HAL_PWREx_EnableGPIOPullUp+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PUCRB, GPIONumber);
1004598c:	4b0c      	ldr	r3, [pc, #48]	@ (100459c0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004598e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10045990:	4b0b      	ldr	r3, [pc, #44]	@ (100459c0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10045992:	683a      	ldr	r2, [r7, #0]
10045994:	430a      	orrs	r2, r1
10045996:	629a      	str	r2, [r3, #40]	@ 0x28
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
10045998:	4b09      	ldr	r3, [pc, #36]	@ (100459c0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004599a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004599c:	683b      	ldr	r3, [r7, #0]
1004599e:	43d9      	mvns	r1, r3
100459a0:	4b07      	ldr	r3, [pc, #28]	@ (100459c0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
100459a2:	400a      	ands	r2, r1
100459a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
100459a6:	e004      	b.n	100459b2 <HAL_PWREx_EnableGPIOPullUp+0x62>
    default:
      status = HAL_ERROR;
100459a8:	230f      	movs	r3, #15
100459aa:	18fb      	adds	r3, r7, r3
100459ac:	2201      	movs	r2, #1
100459ae:	701a      	strb	r2, [r3, #0]
      break;
100459b0:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
100459b2:	230f      	movs	r3, #15
100459b4:	18fb      	adds	r3, r7, r3
100459b6:	781b      	ldrb	r3, [r3, #0]
}
100459b8:	0018      	movs	r0, r3
100459ba:	46bd      	mov	sp, r7
100459bc:	b004      	add	sp, #16
100459be:	bd80      	pop	{r7, pc}
100459c0:	48500000 	.word	0x48500000

100459c4 <HAL_PWREx_EnableGPIOPullDown>:
  *         or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
100459c4:	b580      	push	{r7, lr}
100459c6:	b084      	sub	sp, #16
100459c8:	af00      	add	r7, sp, #0
100459ca:	6078      	str	r0, [r7, #4]
100459cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
100459ce:	230f      	movs	r3, #15
100459d0:	18fb      	adds	r3, r7, r3
100459d2:	2200      	movs	r2, #0
100459d4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
100459d6:	687b      	ldr	r3, [r7, #4]
100459d8:	2b00      	cmp	r3, #0
100459da:	d003      	beq.n	100459e4 <HAL_PWREx_EnableGPIOPullDown+0x20>
100459dc:	687b      	ldr	r3, [r7, #4]
100459de:	2b01      	cmp	r3, #1
100459e0:	d00e      	beq.n	10045a00 <HAL_PWREx_EnableGPIOPullDown+0x3c>
100459e2:	e01b      	b.n	10045a1c <HAL_PWREx_EnableGPIOPullDown+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PDCRA, GPIONumber);
100459e4:	4b13      	ldr	r3, [pc, #76]	@ (10045a34 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100459e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
100459e8:	4b12      	ldr	r3, [pc, #72]	@ (10045a34 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100459ea:	683a      	ldr	r2, [r7, #0]
100459ec:	430a      	orrs	r2, r1
100459ee:	625a      	str	r2, [r3, #36]	@ 0x24
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
100459f0:	4b10      	ldr	r3, [pc, #64]	@ (10045a34 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100459f2:	6a1a      	ldr	r2, [r3, #32]
100459f4:	683b      	ldr	r3, [r7, #0]
100459f6:	43d9      	mvns	r1, r3
100459f8:	4b0e      	ldr	r3, [pc, #56]	@ (10045a34 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100459fa:	400a      	ands	r2, r1
100459fc:	621a      	str	r2, [r3, #32]
      break;
100459fe:	e012      	b.n	10045a26 <HAL_PWREx_EnableGPIOPullDown+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PDCRB, GPIONumber);
10045a00:	4b0c      	ldr	r3, [pc, #48]	@ (10045a34 <HAL_PWREx_EnableGPIOPullDown+0x70>)
10045a02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10045a04:	4b0b      	ldr	r3, [pc, #44]	@ (10045a34 <HAL_PWREx_EnableGPIOPullDown+0x70>)
10045a06:	683a      	ldr	r2, [r7, #0]
10045a08:	430a      	orrs	r2, r1
10045a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
10045a0c:	4b09      	ldr	r3, [pc, #36]	@ (10045a34 <HAL_PWREx_EnableGPIOPullDown+0x70>)
10045a0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10045a10:	683b      	ldr	r3, [r7, #0]
10045a12:	43d9      	mvns	r1, r3
10045a14:	4b07      	ldr	r3, [pc, #28]	@ (10045a34 <HAL_PWREx_EnableGPIOPullDown+0x70>)
10045a16:	400a      	ands	r2, r1
10045a18:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
10045a1a:	e004      	b.n	10045a26 <HAL_PWREx_EnableGPIOPullDown+0x62>
    default:
      status = HAL_ERROR;
10045a1c:	230f      	movs	r3, #15
10045a1e:	18fb      	adds	r3, r7, r3
10045a20:	2201      	movs	r2, #1
10045a22:	701a      	strb	r2, [r3, #0]
      break;
10045a24:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
10045a26:	230f      	movs	r3, #15
10045a28:	18fb      	adds	r3, r7, r3
10045a2a:	781b      	ldrb	r3, [r3, #0]
}
10045a2c:	0018      	movs	r0, r3
10045a2e:	46bd      	mov	sp, r7
10045a30:	b004      	add	sp, #16
10045a32:	bd80      	pop	{r7, pc}
10045a34:	48500000 	.word	0x48500000

10045a38 <LL_RADIO_SetRadioConfigurationAddressPointer>:
{
10045a38:	b580      	push	{r7, lr}
10045a3a:	b082      	sub	sp, #8
10045a3c:	af00      	add	r7, sp, #0
10045a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10045a40:	4b04      	ldr	r3, [pc, #16]	@ (10045a54 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10045a42:	681b      	ldr	r3, [r3, #0]
10045a44:	4b03      	ldr	r3, [pc, #12]	@ (10045a54 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10045a46:	687a      	ldr	r2, [r7, #4]
10045a48:	601a      	str	r2, [r3, #0]
}
10045a4a:	46c0      	nop			@ (mov r8, r8)
10045a4c:	46bd      	mov	sp, r7
10045a4e:	b002      	add	sp, #8
10045a50:	bd80      	pop	{r7, pc}
10045a52:	46c0      	nop			@ (mov r8, r8)
10045a54:	200000c0 	.word	0x200000c0

10045a58 <LL_RADIO_SetWakeupInitDelay>:
{
10045a58:	b580      	push	{r7, lr}
10045a5a:	b082      	sub	sp, #8
10045a5c:	af00      	add	r7, sp, #0
10045a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10045a60:	4b07      	ldr	r3, [pc, #28]	@ (10045a80 <LL_RADIO_SetWakeupInitDelay+0x28>)
10045a62:	685b      	ldr	r3, [r3, #4]
10045a64:	4a07      	ldr	r2, [pc, #28]	@ (10045a84 <LL_RADIO_SetWakeupInitDelay+0x2c>)
10045a66:	4013      	ands	r3, r2
10045a68:	0019      	movs	r1, r3
10045a6a:	687b      	ldr	r3, [r7, #4]
10045a6c:	021b      	lsls	r3, r3, #8
10045a6e:	041b      	lsls	r3, r3, #16
10045a70:	0c1a      	lsrs	r2, r3, #16
10045a72:	4b03      	ldr	r3, [pc, #12]	@ (10045a80 <LL_RADIO_SetWakeupInitDelay+0x28>)
10045a74:	430a      	orrs	r2, r1
10045a76:	605a      	str	r2, [r3, #4]
}
10045a78:	46c0      	nop			@ (mov r8, r8)
10045a7a:	46bd      	mov	sp, r7
10045a7c:	b002      	add	sp, #8
10045a7e:	bd80      	pop	{r7, pc}
10045a80:	200000c0 	.word	0x200000c0
10045a84:	ffff00ff 	.word	0xffff00ff

10045a88 <LL_RADIO_SetTimer12InitDelayCal>:
{
10045a88:	b580      	push	{r7, lr}
10045a8a:	b082      	sub	sp, #8
10045a8c:	af00      	add	r7, sp, #0
10045a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
10045a90:	4b08      	ldr	r3, [pc, #32]	@ (10045ab4 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10045a92:	685b      	ldr	r3, [r3, #4]
10045a94:	4a08      	ldr	r2, [pc, #32]	@ (10045ab8 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10045a96:	4013      	ands	r3, r2
10045a98:	0019      	movs	r1, r3
10045a9a:	687b      	ldr	r3, [r7, #4]
10045a9c:	041a      	lsls	r2, r3, #16
10045a9e:	23ff      	movs	r3, #255	@ 0xff
10045aa0:	041b      	lsls	r3, r3, #16
10045aa2:	401a      	ands	r2, r3
10045aa4:	4b03      	ldr	r3, [pc, #12]	@ (10045ab4 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10045aa6:	430a      	orrs	r2, r1
10045aa8:	605a      	str	r2, [r3, #4]
}
10045aaa:	46c0      	nop			@ (mov r8, r8)
10045aac:	46bd      	mov	sp, r7
10045aae:	b002      	add	sp, #8
10045ab0:	bd80      	pop	{r7, pc}
10045ab2:	46c0      	nop			@ (mov r8, r8)
10045ab4:	200000c0 	.word	0x200000c0
10045ab8:	ff00ffff 	.word	0xff00ffff

10045abc <LL_RADIO_SetTimer12InitDelayNoCal>:
{
10045abc:	b580      	push	{r7, lr}
10045abe:	b082      	sub	sp, #8
10045ac0:	af00      	add	r7, sp, #0
10045ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
10045ac4:	4b06      	ldr	r3, [pc, #24]	@ (10045ae0 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10045ac6:	685b      	ldr	r3, [r3, #4]
10045ac8:	021b      	lsls	r3, r3, #8
10045aca:	0a19      	lsrs	r1, r3, #8
10045acc:	687b      	ldr	r3, [r7, #4]
10045ace:	061a      	lsls	r2, r3, #24
10045ad0:	4b03      	ldr	r3, [pc, #12]	@ (10045ae0 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10045ad2:	430a      	orrs	r2, r1
10045ad4:	605a      	str	r2, [r3, #4]
}
10045ad6:	46c0      	nop			@ (mov r8, r8)
10045ad8:	46bd      	mov	sp, r7
10045ada:	b002      	add	sp, #8
10045adc:	bd80      	pop	{r7, pc}
10045ade:	46c0      	nop			@ (mov r8, r8)
10045ae0:	200000c0 	.word	0x200000c0

10045ae4 <LL_RADIO_SetTransmitCalDelayChk>:
{
10045ae4:	b580      	push	{r7, lr}
10045ae6:	b082      	sub	sp, #8
10045ae8:	af00      	add	r7, sp, #0
10045aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
10045aec:	4b07      	ldr	r3, [pc, #28]	@ (10045b0c <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10045aee:	689b      	ldr	r3, [r3, #8]
10045af0:	22ff      	movs	r2, #255	@ 0xff
10045af2:	4393      	bics	r3, r2
10045af4:	0019      	movs	r1, r3
10045af6:	687b      	ldr	r3, [r7, #4]
10045af8:	22ff      	movs	r2, #255	@ 0xff
10045afa:	401a      	ands	r2, r3
10045afc:	4b03      	ldr	r3, [pc, #12]	@ (10045b0c <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10045afe:	430a      	orrs	r2, r1
10045b00:	609a      	str	r2, [r3, #8]
}
10045b02:	46c0      	nop			@ (mov r8, r8)
10045b04:	46bd      	mov	sp, r7
10045b06:	b002      	add	sp, #8
10045b08:	bd80      	pop	{r7, pc}
10045b0a:	46c0      	nop			@ (mov r8, r8)
10045b0c:	200000c0 	.word	0x200000c0

10045b10 <LL_RADIO_SetTransmitNoCalDelayChk>:
{
10045b10:	b580      	push	{r7, lr}
10045b12:	b082      	sub	sp, #8
10045b14:	af00      	add	r7, sp, #0
10045b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
10045b18:	4b07      	ldr	r3, [pc, #28]	@ (10045b38 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10045b1a:	689b      	ldr	r3, [r3, #8]
10045b1c:	4a07      	ldr	r2, [pc, #28]	@ (10045b3c <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
10045b1e:	4013      	ands	r3, r2
10045b20:	0019      	movs	r1, r3
10045b22:	687b      	ldr	r3, [r7, #4]
10045b24:	021b      	lsls	r3, r3, #8
10045b26:	041b      	lsls	r3, r3, #16
10045b28:	0c1a      	lsrs	r2, r3, #16
10045b2a:	4b03      	ldr	r3, [pc, #12]	@ (10045b38 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10045b2c:	430a      	orrs	r2, r1
10045b2e:	609a      	str	r2, [r3, #8]
}
10045b30:	46c0      	nop			@ (mov r8, r8)
10045b32:	46bd      	mov	sp, r7
10045b34:	b002      	add	sp, #8
10045b36:	bd80      	pop	{r7, pc}
10045b38:	200000c0 	.word	0x200000c0
10045b3c:	ffff00ff 	.word	0xffff00ff

10045b40 <LL_RADIO_SetReceivedCalDelayChk>:
{
10045b40:	b580      	push	{r7, lr}
10045b42:	b082      	sub	sp, #8
10045b44:	af00      	add	r7, sp, #0
10045b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10045b48:	4b08      	ldr	r3, [pc, #32]	@ (10045b6c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10045b4a:	689b      	ldr	r3, [r3, #8]
10045b4c:	4a08      	ldr	r2, [pc, #32]	@ (10045b70 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10045b4e:	4013      	ands	r3, r2
10045b50:	0019      	movs	r1, r3
10045b52:	687b      	ldr	r3, [r7, #4]
10045b54:	041a      	lsls	r2, r3, #16
10045b56:	23ff      	movs	r3, #255	@ 0xff
10045b58:	041b      	lsls	r3, r3, #16
10045b5a:	401a      	ands	r2, r3
10045b5c:	4b03      	ldr	r3, [pc, #12]	@ (10045b6c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10045b5e:	430a      	orrs	r2, r1
10045b60:	609a      	str	r2, [r3, #8]
}
10045b62:	46c0      	nop			@ (mov r8, r8)
10045b64:	46bd      	mov	sp, r7
10045b66:	b002      	add	sp, #8
10045b68:	bd80      	pop	{r7, pc}
10045b6a:	46c0      	nop			@ (mov r8, r8)
10045b6c:	200000c0 	.word	0x200000c0
10045b70:	ff00ffff 	.word	0xff00ffff

10045b74 <LL_RADIO_SetReceivedNoCalDelayChk>:
{
10045b74:	b580      	push	{r7, lr}
10045b76:	b082      	sub	sp, #8
10045b78:	af00      	add	r7, sp, #0
10045b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
10045b7c:	4b06      	ldr	r3, [pc, #24]	@ (10045b98 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10045b7e:	689b      	ldr	r3, [r3, #8]
10045b80:	021b      	lsls	r3, r3, #8
10045b82:	0a19      	lsrs	r1, r3, #8
10045b84:	687b      	ldr	r3, [r7, #4]
10045b86:	061a      	lsls	r2, r3, #24
10045b88:	4b03      	ldr	r3, [pc, #12]	@ (10045b98 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10045b8a:	430a      	orrs	r2, r1
10045b8c:	609a      	str	r2, [r3, #8]
}
10045b8e:	46c0      	nop			@ (mov r8, r8)
10045b90:	46bd      	mov	sp, r7
10045b92:	b002      	add	sp, #8
10045b94:	bd80      	pop	{r7, pc}
10045b96:	46c0      	nop			@ (mov r8, r8)
10045b98:	200000c0 	.word	0x200000c0

10045b9c <LL_RADIO_SetConfigurationEndDuration>:
{
10045b9c:	b580      	push	{r7, lr}
10045b9e:	b082      	sub	sp, #8
10045ba0:	af00      	add	r7, sp, #0
10045ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
10045ba4:	4b07      	ldr	r3, [pc, #28]	@ (10045bc4 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10045ba6:	68db      	ldr	r3, [r3, #12]
10045ba8:	22ff      	movs	r2, #255	@ 0xff
10045baa:	4393      	bics	r3, r2
10045bac:	0019      	movs	r1, r3
10045bae:	687b      	ldr	r3, [r7, #4]
10045bb0:	22ff      	movs	r2, #255	@ 0xff
10045bb2:	401a      	ands	r2, r3
10045bb4:	4b03      	ldr	r3, [pc, #12]	@ (10045bc4 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10045bb6:	430a      	orrs	r2, r1
10045bb8:	60da      	str	r2, [r3, #12]
}
10045bba:	46c0      	nop			@ (mov r8, r8)
10045bbc:	46bd      	mov	sp, r7
10045bbe:	b002      	add	sp, #8
10045bc0:	bd80      	pop	{r7, pc}
10045bc2:	46c0      	nop			@ (mov r8, r8)
10045bc4:	200000c0 	.word	0x200000c0

10045bc8 <LL_RADIO_SetTxDataReadyCheck>:
{
10045bc8:	b580      	push	{r7, lr}
10045bca:	b082      	sub	sp, #8
10045bcc:	af00      	add	r7, sp, #0
10045bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
10045bd0:	4b07      	ldr	r3, [pc, #28]	@ (10045bf0 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10045bd2:	68db      	ldr	r3, [r3, #12]
10045bd4:	4a07      	ldr	r2, [pc, #28]	@ (10045bf4 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
10045bd6:	4013      	ands	r3, r2
10045bd8:	0019      	movs	r1, r3
10045bda:	687b      	ldr	r3, [r7, #4]
10045bdc:	021b      	lsls	r3, r3, #8
10045bde:	041b      	lsls	r3, r3, #16
10045be0:	0c1a      	lsrs	r2, r3, #16
10045be2:	4b03      	ldr	r3, [pc, #12]	@ (10045bf0 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10045be4:	430a      	orrs	r2, r1
10045be6:	60da      	str	r2, [r3, #12]
}
10045be8:	46c0      	nop			@ (mov r8, r8)
10045bea:	46bd      	mov	sp, r7
10045bec:	b002      	add	sp, #8
10045bee:	bd80      	pop	{r7, pc}
10045bf0:	200000c0 	.word	0x200000c0
10045bf4:	ffff00ff 	.word	0xffff00ff

10045bf8 <LL_RADIO_SetTxDelayStart>:
{
10045bf8:	b580      	push	{r7, lr}
10045bfa:	b082      	sub	sp, #8
10045bfc:	af00      	add	r7, sp, #0
10045bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
10045c00:	4b08      	ldr	r3, [pc, #32]	@ (10045c24 <LL_RADIO_SetTxDelayStart+0x2c>)
10045c02:	68db      	ldr	r3, [r3, #12]
10045c04:	4a08      	ldr	r2, [pc, #32]	@ (10045c28 <LL_RADIO_SetTxDelayStart+0x30>)
10045c06:	4013      	ands	r3, r2
10045c08:	0019      	movs	r1, r3
10045c0a:	687b      	ldr	r3, [r7, #4]
10045c0c:	041a      	lsls	r2, r3, #16
10045c0e:	23ff      	movs	r3, #255	@ 0xff
10045c10:	041b      	lsls	r3, r3, #16
10045c12:	401a      	ands	r2, r3
10045c14:	4b03      	ldr	r3, [pc, #12]	@ (10045c24 <LL_RADIO_SetTxDelayStart+0x2c>)
10045c16:	430a      	orrs	r2, r1
10045c18:	60da      	str	r2, [r3, #12]
}
10045c1a:	46c0      	nop			@ (mov r8, r8)
10045c1c:	46bd      	mov	sp, r7
10045c1e:	b002      	add	sp, #8
10045c20:	bd80      	pop	{r7, pc}
10045c22:	46c0      	nop			@ (mov r8, r8)
10045c24:	200000c0 	.word	0x200000c0
10045c28:	ff00ffff 	.word	0xff00ffff

10045c2c <LL_RADIO_SetTxDelayEnd>:
{
10045c2c:	b580      	push	{r7, lr}
10045c2e:	b082      	sub	sp, #8
10045c30:	af00      	add	r7, sp, #0
10045c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
10045c34:	4b08      	ldr	r3, [pc, #32]	@ (10045c58 <LL_RADIO_SetTxDelayEnd+0x2c>)
10045c36:	68db      	ldr	r3, [r3, #12]
10045c38:	4a08      	ldr	r2, [pc, #32]	@ (10045c5c <LL_RADIO_SetTxDelayEnd+0x30>)
10045c3a:	4013      	ands	r3, r2
10045c3c:	0019      	movs	r1, r3
10045c3e:	687b      	ldr	r3, [r7, #4]
10045c40:	061a      	lsls	r2, r3, #24
10045c42:	23fc      	movs	r3, #252	@ 0xfc
10045c44:	059b      	lsls	r3, r3, #22
10045c46:	401a      	ands	r2, r3
10045c48:	4b03      	ldr	r3, [pc, #12]	@ (10045c58 <LL_RADIO_SetTxDelayEnd+0x2c>)
10045c4a:	430a      	orrs	r2, r1
10045c4c:	60da      	str	r2, [r3, #12]
}
10045c4e:	46c0      	nop			@ (mov r8, r8)
10045c50:	46bd      	mov	sp, r7
10045c52:	b002      	add	sp, #8
10045c54:	bd80      	pop	{r7, pc}
10045c56:	46c0      	nop			@ (mov r8, r8)
10045c58:	200000c0 	.word	0x200000c0
10045c5c:	c0ffffff 	.word	0xc0ffffff

10045c60 <LL_RADIO_SetTransmissionReadyTimeout>:
{
10045c60:	b580      	push	{r7, lr}
10045c62:	b082      	sub	sp, #8
10045c64:	af00      	add	r7, sp, #0
10045c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
10045c68:	4b07      	ldr	r3, [pc, #28]	@ (10045c88 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10045c6a:	691b      	ldr	r3, [r3, #16]
10045c6c:	22ff      	movs	r2, #255	@ 0xff
10045c6e:	4393      	bics	r3, r2
10045c70:	0019      	movs	r1, r3
10045c72:	687b      	ldr	r3, [r7, #4]
10045c74:	22ff      	movs	r2, #255	@ 0xff
10045c76:	401a      	ands	r2, r3
10045c78:	4b03      	ldr	r3, [pc, #12]	@ (10045c88 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10045c7a:	430a      	orrs	r2, r1
10045c7c:	611a      	str	r2, [r3, #16]
}
10045c7e:	46c0      	nop			@ (mov r8, r8)
10045c80:	46bd      	mov	sp, r7
10045c82:	b002      	add	sp, #8
10045c84:	bd80      	pop	{r7, pc}
10045c86:	46c0      	nop			@ (mov r8, r8)
10045c88:	200000c0 	.word	0x200000c0

10045c8c <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
{
10045c8c:	b580      	push	{r7, lr}
10045c8e:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
10045c90:	4b04      	ldr	r3, [pc, #16]	@ (10045ca4 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10045c92:	695a      	ldr	r2, [r3, #20]
10045c94:	4b03      	ldr	r3, [pc, #12]	@ (10045ca4 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10045c96:	2104      	movs	r1, #4
10045c98:	430a      	orrs	r2, r1
10045c9a:	615a      	str	r2, [r3, #20]
}
10045c9c:	46c0      	nop			@ (mov r8, r8)
10045c9e:	46bd      	mov	sp, r7
10045ca0:	bd80      	pop	{r7, pc}
10045ca2:	46c0      	nop			@ (mov r8, r8)
10045ca4:	200000c0 	.word	0x200000c0

10045ca8 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
{
10045ca8:	b580      	push	{r7, lr}
10045caa:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
10045cac:	4b04      	ldr	r3, [pc, #16]	@ (10045cc0 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10045cae:	695a      	ldr	r2, [r3, #20]
10045cb0:	4b03      	ldr	r3, [pc, #12]	@ (10045cc0 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10045cb2:	2180      	movs	r1, #128	@ 0x80
10045cb4:	0409      	lsls	r1, r1, #16
10045cb6:	430a      	orrs	r2, r1
10045cb8:	615a      	str	r2, [r3, #20]
}
10045cba:	46c0      	nop			@ (mov r8, r8)
10045cbc:	46bd      	mov	sp, r7
10045cbe:	bd80      	pop	{r7, pc}
10045cc0:	200000c0 	.word	0x200000c0

10045cc4 <LL_RADIO_TxRxSkipInterrupt_Enable>:
{
10045cc4:	b580      	push	{r7, lr}
10045cc6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
10045cc8:	4b04      	ldr	r3, [pc, #16]	@ (10045cdc <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10045cca:	695a      	ldr	r2, [r3, #20]
10045ccc:	4b03      	ldr	r3, [pc, #12]	@ (10045cdc <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10045cce:	2180      	movs	r1, #128	@ 0x80
10045cd0:	0589      	lsls	r1, r1, #22
10045cd2:	430a      	orrs	r2, r1
10045cd4:	615a      	str	r2, [r3, #20]
}
10045cd6:	46c0      	nop			@ (mov r8, r8)
10045cd8:	46bd      	mov	sp, r7
10045cda:	bd80      	pop	{r7, pc}
10045cdc:	200000c0 	.word	0x200000c0

10045ce0 <LL_RADIO_Active2ErrorInterrupt_Enable>:
{
10045ce0:	b580      	push	{r7, lr}
10045ce2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
10045ce4:	4b04      	ldr	r3, [pc, #16]	@ (10045cf8 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10045ce6:	695a      	ldr	r2, [r3, #20]
10045ce8:	4b03      	ldr	r3, [pc, #12]	@ (10045cf8 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10045cea:	2180      	movs	r1, #128	@ 0x80
10045cec:	05c9      	lsls	r1, r1, #23
10045cee:	430a      	orrs	r2, r1
10045cf0:	615a      	str	r2, [r3, #20]
}
10045cf2:	46c0      	nop			@ (mov r8, r8)
10045cf4:	46bd      	mov	sp, r7
10045cf6:	bd80      	pop	{r7, pc}
10045cf8:	200000c0 	.word	0x200000c0

10045cfc <LL_RADIO_SetDefaultAntennaID>:
{
10045cfc:	b580      	push	{r7, lr}
10045cfe:	b082      	sub	sp, #8
10045d00:	af00      	add	r7, sp, #0
10045d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
10045d04:	4b07      	ldr	r3, [pc, #28]	@ (10045d24 <LL_RADIO_SetDefaultAntennaID+0x28>)
10045d06:	699b      	ldr	r3, [r3, #24]
10045d08:	227f      	movs	r2, #127	@ 0x7f
10045d0a:	4393      	bics	r3, r2
10045d0c:	0019      	movs	r1, r3
10045d0e:	687b      	ldr	r3, [r7, #4]
10045d10:	227f      	movs	r2, #127	@ 0x7f
10045d12:	401a      	ands	r2, r3
10045d14:	4b03      	ldr	r3, [pc, #12]	@ (10045d24 <LL_RADIO_SetDefaultAntennaID+0x28>)
10045d16:	430a      	orrs	r2, r1
10045d18:	619a      	str	r2, [r3, #24]
}
10045d1a:	46c0      	nop			@ (mov r8, r8)
10045d1c:	46bd      	mov	sp, r7
10045d1e:	b002      	add	sp, #8
10045d20:	bd80      	pop	{r7, pc}
10045d22:	46c0      	nop			@ (mov r8, r8)
10045d24:	200000c0 	.word	0x200000c0

10045d28 <LL_RADIO_TIMER_DisableTimer1>:
{
10045d28:	b580      	push	{r7, lr}
10045d2a:	b082      	sub	sp, #8
10045d2c:	af00      	add	r7, sp, #0
10045d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10045d30:	687b      	ldr	r3, [r7, #4]
10045d32:	68db      	ldr	r3, [r3, #12]
10045d34:	2203      	movs	r2, #3
10045d36:	4393      	bics	r3, r2
10045d38:	001a      	movs	r2, r3
10045d3a:	687b      	ldr	r3, [r7, #4]
10045d3c:	60da      	str	r2, [r3, #12]
}
10045d3e:	46c0      	nop			@ (mov r8, r8)
10045d40:	46bd      	mov	sp, r7
10045d42:	b002      	add	sp, #8
10045d44:	bd80      	pop	{r7, pc}

10045d46 <LL_RADIO_TIMER_DisableTimer2>:
{
10045d46:	b580      	push	{r7, lr}
10045d48:	b082      	sub	sp, #8
10045d4a:	af00      	add	r7, sp, #0
10045d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10045d4e:	687b      	ldr	r3, [r7, #4]
10045d50:	68db      	ldr	r3, [r3, #12]
10045d52:	2203      	movs	r2, #3
10045d54:	4393      	bics	r3, r2
10045d56:	001a      	movs	r2, r3
10045d58:	687b      	ldr	r3, [r7, #4]
10045d5a:	60da      	str	r2, [r3, #12]
}
10045d5c:	46c0      	nop			@ (mov r8, r8)
10045d5e:	46bd      	mov	sp, r7
10045d60:	b002      	add	sp, #8
10045d62:	bd80      	pop	{r7, pc}

10045d64 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10045d64:	b580      	push	{r7, lr}
10045d66:	b082      	sub	sp, #8
10045d68:	af00      	add	r7, sp, #0
10045d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10045d6c:	687b      	ldr	r3, [r7, #4]
10045d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045d70:	4a03      	ldr	r2, [pc, #12]	@ (10045d80 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10045d72:	401a      	ands	r2, r3
10045d74:	687b      	ldr	r3, [r7, #4]
10045d76:	629a      	str	r2, [r3, #40]	@ 0x28
}
10045d78:	46c0      	nop			@ (mov r8, r8)
10045d7a:	46bd      	mov	sp, r7
10045d7c:	b002      	add	sp, #8
10045d7e:	bd80      	pop	{r7, pc}
10045d80:	bfffffff 	.word	0xbfffffff

10045d84 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
10045d84:	b590      	push	{r4, r7, lr}
10045d86:	b08d      	sub	sp, #52	@ 0x34
10045d88:	af00      	add	r7, sp, #0
10045d8a:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
10045d8c:	4b14      	ldr	r3, [pc, #80]	@ (10045de0 <HAL_RADIO_Init+0x5c>)
10045d8e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
10045d90:	4b14      	ldr	r3, [pc, #80]	@ (10045de4 <HAL_RADIO_Init+0x60>)
10045d92:	681b      	ldr	r3, [r3, #0]
10045d94:	4a14      	ldr	r2, [pc, #80]	@ (10045de8 <HAL_RADIO_Init+0x64>)
10045d96:	4293      	cmp	r3, r2
10045d98:	d12a      	bne.n	10045df0 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
10045d9a:	4b14      	ldr	r3, [pc, #80]	@ (10045dec <HAL_RADIO_Init+0x68>)
10045d9c:	681b      	ldr	r3, [r3, #0]
10045d9e:	0a1b      	lsrs	r3, r3, #8
10045da0:	220f      	movs	r2, #15
10045da2:	4013      	ands	r3, r2
10045da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
10045da6:	4b11      	ldr	r3, [pc, #68]	@ (10045dec <HAL_RADIO_Init+0x68>)
10045da8:	681b      	ldr	r3, [r3, #0]
10045daa:	0b1b      	lsrs	r3, r3, #12
10045dac:	220f      	movs	r2, #15
10045dae:	4013      	ands	r3, r2
10045db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
10045db2:	4b0e      	ldr	r3, [pc, #56]	@ (10045dec <HAL_RADIO_Init+0x68>)
10045db4:	681b      	ldr	r3, [r3, #0]
10045db6:	0c1b      	lsrs	r3, r3, #16
10045db8:	220f      	movs	r2, #15
10045dba:	4013      	ands	r3, r2
10045dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
10045dbe:	4b0b      	ldr	r3, [pc, #44]	@ (10045dec <HAL_RADIO_Init+0x68>)
10045dc0:	681b      	ldr	r3, [r3, #0]
10045dc2:	0d1b      	lsrs	r3, r3, #20
10045dc4:	2207      	movs	r2, #7
10045dc6:	4013      	ands	r3, r2
10045dc8:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
10045dca:	4b08      	ldr	r3, [pc, #32]	@ (10045dec <HAL_RADIO_Init+0x68>)
10045dcc:	681b      	ldr	r3, [r3, #0]
10045dce:	0e1b      	lsrs	r3, r3, #24
10045dd0:	2207      	movs	r2, #7
10045dd2:	4013      	ands	r3, r2
10045dd4:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10045dd6:	231b      	movs	r3, #27
10045dd8:	18fb      	adds	r3, r7, r3
10045dda:	2201      	movs	r2, #1
10045ddc:	701a      	strb	r2, [r3, #0]
10045dde:	e018      	b.n	10045e12 <HAL_RADIO_Init+0x8e>
10045de0:	2000054c 	.word	0x2000054c
10045de4:	10001ef8 	.word	0x10001ef8
10045de8:	fcbceccc 	.word	0xfcbceccc
10045dec:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
10045df0:	2308      	movs	r3, #8
10045df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
10045df4:	2307      	movs	r3, #7
10045df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
10045df8:	2308      	movs	r3, #8
10045dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
10045dfc:	211b      	movs	r1, #27
10045dfe:	187b      	adds	r3, r7, r1
10045e00:	2200      	movs	r2, #0
10045e02:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
10045e04:	2303      	movs	r3, #3
10045e06:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
10045e08:	2303      	movs	r3, #3
10045e0a:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10045e0c:	187b      	adds	r3, r7, r1
10045e0e:	2201      	movs	r2, #1
10045e10:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
10045e12:	4bfc      	ldr	r3, [pc, #1008]	@ (10046204 <HAL_RADIO_Init+0x480>)
10045e14:	2200      	movs	r2, #0
10045e16:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
10045e18:	687b      	ldr	r3, [r7, #4]
10045e1a:	2b00      	cmp	r3, #0
10045e1c:	d003      	beq.n	10045e26 <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
10045e1e:	687b      	ldr	r3, [r7, #4]
10045e20:	0018      	movs	r0, r3
10045e22:	f7fb f971 	bl	10041108 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10045e26:	23c0      	movs	r3, #192	@ 0xc0
10045e28:	05db      	lsls	r3, r3, #23
10045e2a:	0018      	movs	r0, r3
10045e2c:	f7ff ff7c 	bl	10045d28 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10045e30:	23c0      	movs	r3, #192	@ 0xc0
10045e32:	05db      	lsls	r3, r3, #23
10045e34:	0018      	movs	r0, r3
10045e36:	f7ff ff86 	bl	10045d46 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10045e3a:	4bf3      	ldr	r3, [pc, #972]	@ (10046208 <HAL_RADIO_Init+0x484>)
10045e3c:	0018      	movs	r0, r3
10045e3e:	f7ff ff91 	bl	10045d64 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
10045e42:	4af2      	ldr	r2, [pc, #968]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045e44:	239e      	movs	r3, #158	@ 0x9e
10045e46:	009b      	lsls	r3, r3, #2
10045e48:	58d3      	ldr	r3, [r2, r3]
10045e4a:	220f      	movs	r2, #15
10045e4c:	4393      	bics	r3, r2
10045e4e:	001a      	movs	r2, r3
10045e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045e52:	210f      	movs	r1, #15
10045e54:	400b      	ands	r3, r1
10045e56:	49ed      	ldr	r1, [pc, #948]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045e58:	431a      	orrs	r2, r3
10045e5a:	239e      	movs	r3, #158	@ 0x9e
10045e5c:	009b      	lsls	r3, r3, #2
10045e5e:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
10045e60:	4aea      	ldr	r2, [pc, #936]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045e62:	239d      	movs	r3, #157	@ 0x9d
10045e64:	009b      	lsls	r3, r3, #2
10045e66:	58d3      	ldr	r3, [r2, r3]
10045e68:	22f0      	movs	r2, #240	@ 0xf0
10045e6a:	4393      	bics	r3, r2
10045e6c:	001a      	movs	r2, r3
10045e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10045e70:	011b      	lsls	r3, r3, #4
10045e72:	21ff      	movs	r1, #255	@ 0xff
10045e74:	400b      	ands	r3, r1
10045e76:	49e5      	ldr	r1, [pc, #916]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045e78:	431a      	orrs	r2, r3
10045e7a:	239d      	movs	r3, #157	@ 0x9d
10045e7c:	009b      	lsls	r3, r3, #2
10045e7e:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
10045e80:	4ae2      	ldr	r2, [pc, #904]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045e82:	239d      	movs	r3, #157	@ 0x9d
10045e84:	009b      	lsls	r3, r3, #2
10045e86:	58d3      	ldr	r3, [r2, r3]
10045e88:	220f      	movs	r2, #15
10045e8a:	4393      	bics	r3, r2
10045e8c:	001a      	movs	r2, r3
10045e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10045e90:	210f      	movs	r1, #15
10045e92:	400b      	ands	r3, r1
10045e94:	49dd      	ldr	r1, [pc, #884]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045e96:	431a      	orrs	r2, r3
10045e98:	239d      	movs	r3, #157	@ 0x9d
10045e9a:	009b      	lsls	r3, r3, #2
10045e9c:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
10045e9e:	231b      	movs	r3, #27
10045ea0:	18fb      	adds	r3, r7, r3
10045ea2:	781b      	ldrb	r3, [r3, #0]
10045ea4:	2b00      	cmp	r3, #0
10045ea6:	d01e      	beq.n	10045ee6 <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
10045ea8:	4ad8      	ldr	r2, [pc, #864]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045eaa:	2392      	movs	r3, #146	@ 0x92
10045eac:	009b      	lsls	r3, r3, #2
10045eae:	58d3      	ldr	r3, [r2, r3]
10045eb0:	2207      	movs	r2, #7
10045eb2:	4393      	bics	r3, r2
10045eb4:	001a      	movs	r2, r3
10045eb6:	6a3b      	ldr	r3, [r7, #32]
10045eb8:	2107      	movs	r1, #7
10045eba:	400b      	ands	r3, r1
10045ebc:	49d3      	ldr	r1, [pc, #844]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045ebe:	431a      	orrs	r2, r3
10045ec0:	2392      	movs	r3, #146	@ 0x92
10045ec2:	009b      	lsls	r3, r3, #2
10045ec4:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
10045ec6:	4ad1      	ldr	r2, [pc, #836]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045ec8:	2392      	movs	r3, #146	@ 0x92
10045eca:	009b      	lsls	r3, r3, #2
10045ecc:	58d3      	ldr	r3, [r2, r3]
10045ece:	2238      	movs	r2, #56	@ 0x38
10045ed0:	4393      	bics	r3, r2
10045ed2:	001a      	movs	r2, r3
10045ed4:	69fb      	ldr	r3, [r7, #28]
10045ed6:	00db      	lsls	r3, r3, #3
10045ed8:	2138      	movs	r1, #56	@ 0x38
10045eda:	400b      	ands	r3, r1
10045edc:	49cb      	ldr	r1, [pc, #812]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045ede:	431a      	orrs	r2, r3
10045ee0:	2392      	movs	r3, #146	@ 0x92
10045ee2:	009b      	lsls	r3, r3, #2
10045ee4:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
10045ee6:	4ac9      	ldr	r2, [pc, #804]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045ee8:	23a4      	movs	r3, #164	@ 0xa4
10045eea:	005b      	lsls	r3, r3, #1
10045eec:	58d3      	ldr	r3, [r2, r3]
10045eee:	22ff      	movs	r2, #255	@ 0xff
10045ef0:	4393      	bics	r3, r2
10045ef2:	49c6      	ldr	r1, [pc, #792]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045ef4:	2255      	movs	r2, #85	@ 0x55
10045ef6:	431a      	orrs	r2, r3
10045ef8:	23a4      	movs	r3, #164	@ 0xa4
10045efa:	005b      	lsls	r3, r3, #1
10045efc:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
10045efe:	4ac3      	ldr	r2, [pc, #780]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f00:	23aa      	movs	r3, #170	@ 0xaa
10045f02:	005b      	lsls	r3, r3, #1
10045f04:	58d3      	ldr	r3, [r2, r3]
10045f06:	22ff      	movs	r2, #255	@ 0xff
10045f08:	4393      	bics	r3, r2
10045f0a:	49c0      	ldr	r1, [pc, #768]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f0c:	2266      	movs	r2, #102	@ 0x66
10045f0e:	431a      	orrs	r2, r3
10045f10:	23aa      	movs	r3, #170	@ 0xaa
10045f12:	005b      	lsls	r3, r3, #1
10045f14:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
10045f16:	4abd      	ldr	r2, [pc, #756]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f18:	23b4      	movs	r3, #180	@ 0xb4
10045f1a:	005b      	lsls	r3, r3, #1
10045f1c:	58d3      	ldr	r3, [r2, r3]
10045f1e:	22ff      	movs	r2, #255	@ 0xff
10045f20:	4393      	bics	r3, r2
10045f22:	49ba      	ldr	r1, [pc, #744]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f24:	2255      	movs	r2, #85	@ 0x55
10045f26:	431a      	orrs	r2, r3
10045f28:	23b4      	movs	r3, #180	@ 0xb4
10045f2a:	005b      	lsls	r3, r3, #1
10045f2c:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
10045f2e:	4ab7      	ldr	r2, [pc, #732]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f30:	23c4      	movs	r3, #196	@ 0xc4
10045f32:	005b      	lsls	r3, r3, #1
10045f34:	58d3      	ldr	r3, [r2, r3]
10045f36:	22ff      	movs	r2, #255	@ 0xff
10045f38:	4393      	bics	r3, r2
10045f3a:	49b4      	ldr	r1, [pc, #720]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f3c:	221d      	movs	r2, #29
10045f3e:	431a      	orrs	r2, r3
10045f40:	23c4      	movs	r3, #196	@ 0xc4
10045f42:	005b      	lsls	r3, r3, #1
10045f44:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
10045f46:	4ab1      	ldr	r2, [pc, #708]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f48:	23c2      	movs	r3, #194	@ 0xc2
10045f4a:	005b      	lsls	r3, r3, #1
10045f4c:	58d3      	ldr	r3, [r2, r3]
10045f4e:	22ff      	movs	r2, #255	@ 0xff
10045f50:	4393      	bics	r3, r2
10045f52:	49ae      	ldr	r1, [pc, #696]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f54:	2259      	movs	r2, #89	@ 0x59
10045f56:	431a      	orrs	r2, r3
10045f58:	23c2      	movs	r3, #194	@ 0xc2
10045f5a:	005b      	lsls	r3, r3, #1
10045f5c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
10045f5e:	4aab      	ldr	r2, [pc, #684]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f60:	23c6      	movs	r3, #198	@ 0xc6
10045f62:	005b      	lsls	r3, r3, #1
10045f64:	58d3      	ldr	r3, [r2, r3]
10045f66:	22ff      	movs	r2, #255	@ 0xff
10045f68:	4393      	bics	r3, r2
10045f6a:	49a8      	ldr	r1, [pc, #672]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f6c:	2232      	movs	r2, #50	@ 0x32
10045f6e:	431a      	orrs	r2, r3
10045f70:	23c6      	movs	r3, #198	@ 0xc6
10045f72:	005b      	lsls	r3, r3, #1
10045f74:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
10045f76:	4aa5      	ldr	r2, [pc, #660]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f78:	23b6      	movs	r3, #182	@ 0xb6
10045f7a:	005b      	lsls	r3, r3, #1
10045f7c:	58d3      	ldr	r3, [r2, r3]
10045f7e:	49a3      	ldr	r1, [pc, #652]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f80:	2201      	movs	r2, #1
10045f82:	431a      	orrs	r2, r3
10045f84:	23b6      	movs	r3, #182	@ 0xb6
10045f86:	005b      	lsls	r3, r3, #1
10045f88:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
10045f8a:	4aa0      	ldr	r2, [pc, #640]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f8c:	23d0      	movs	r3, #208	@ 0xd0
10045f8e:	009b      	lsls	r3, r3, #2
10045f90:	58d3      	ldr	r3, [r2, r3]
10045f92:	227f      	movs	r2, #127	@ 0x7f
10045f94:	4393      	bics	r3, r2
10045f96:	499d      	ldr	r1, [pc, #628]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045f98:	221f      	movs	r2, #31
10045f9a:	431a      	orrs	r2, r3
10045f9c:	23d0      	movs	r3, #208	@ 0xd0
10045f9e:	009b      	lsls	r3, r3, #2
10045fa0:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
10045fa2:	4a9a      	ldr	r2, [pc, #616]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045fa4:	23d1      	movs	r3, #209	@ 0xd1
10045fa6:	009b      	lsls	r3, r3, #2
10045fa8:	58d3      	ldr	r3, [r2, r3]
10045faa:	223f      	movs	r2, #63	@ 0x3f
10045fac:	4393      	bics	r3, r2
10045fae:	4997      	ldr	r1, [pc, #604]	@ (1004620c <HAL_RADIO_Init+0x488>)
10045fb0:	2209      	movs	r2, #9
10045fb2:	431a      	orrs	r2, r3
10045fb4:	23d1      	movs	r3, #209	@ 0xd1
10045fb6:	009b      	lsls	r3, r3, #2
10045fb8:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
10045fba:	2040      	movs	r0, #64	@ 0x40
10045fbc:	f7ff fd4c 	bl	10045a58 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
10045fc0:	203f      	movs	r0, #63	@ 0x3f
10045fc2:	f7ff fd61 	bl	10045a88 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
10045fc6:	2009      	movs	r0, #9
10045fc8:	f7ff fd78 	bl	10045abc <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
10045fcc:	205a      	movs	r0, #90	@ 0x5a
10045fce:	f7ff fdb7 	bl	10045b40 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
10045fd2:	2032      	movs	r0, #50	@ 0x32
10045fd4:	f7ff fdce 	bl	10045b74 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
10045fd8:	205a      	movs	r0, #90	@ 0x5a
10045fda:	f7ff fd83 	bl	10045ae4 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
10045fde:	2032      	movs	r0, #50	@ 0x32
10045fe0:	f7ff fd96 	bl	10045b10 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
10045fe4:	2010      	movs	r0, #16
10045fe6:	f7ff fe07 	bl	10045bf8 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
10045fea:	2010      	movs	r0, #16
10045fec:	f7ff fe1e 	bl	10045c2c <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
10045ff0:	2004      	movs	r0, #4
10045ff2:	f7ff fe35 	bl	10045c60 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
10045ff6:	2014      	movs	r0, #20
10045ff8:	f7ff fdd0 	bl	10045b9c <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
10045ffc:	2005      	movs	r0, #5
10045ffe:	f7ff fde3 	bl	10045bc8 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
10046002:	f7ff fe43 	bl	10045c8c <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
10046006:	f7ff fe4f 	bl	10045ca8 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
1004600a:	f7ff fe5b 	bl	10045cc4 <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
1004600e:	2000      	movs	r0, #0
10046010:	f7ff fe74 	bl	10045cfc <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
10046014:	2013      	movs	r0, #19
10046016:	183b      	adds	r3, r7, r0
10046018:	2200      	movs	r2, #0
1004601a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004601c:	183b      	adds	r3, r7, r0
1004601e:	781b      	ldrb	r3, [r3, #0]
10046020:	183a      	adds	r2, r7, r0
10046022:	1c59      	adds	r1, r3, #1
10046024:	7011      	strb	r1, [r2, #0]
10046026:	001a      	movs	r2, r3
10046028:	697b      	ldr	r3, [r7, #20]
1004602a:	189b      	adds	r3, r3, r2
1004602c:	2201      	movs	r2, #1
1004602e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
10046030:	183b      	adds	r3, r7, r0
10046032:	781b      	ldrb	r3, [r3, #0]
10046034:	183a      	adds	r2, r7, r0
10046036:	1c59      	adds	r1, r3, #1
10046038:	7011      	strb	r1, [r2, #0]
1004603a:	001a      	movs	r2, r3
1004603c:	697b      	ldr	r3, [r7, #20]
1004603e:	189b      	adds	r3, r3, r2
10046040:	225e      	movs	r2, #94	@ 0x5e
10046042:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
10046044:	4a71      	ldr	r2, [pc, #452]	@ (1004620c <HAL_RADIO_Init+0x488>)
10046046:	239e      	movs	r3, #158	@ 0x9e
10046048:	009b      	lsls	r3, r3, #2
1004604a:	58d1      	ldr	r1, [r2, r3]
1004604c:	183b      	adds	r3, r7, r0
1004604e:	781b      	ldrb	r3, [r3, #0]
10046050:	0004      	movs	r4, r0
10046052:	183a      	adds	r2, r7, r0
10046054:	1c58      	adds	r0, r3, #1
10046056:	7010      	strb	r0, [r2, #0]
10046058:	001a      	movs	r2, r3
1004605a:	697b      	ldr	r3, [r7, #20]
1004605c:	189b      	adds	r3, r3, r2
1004605e:	b2ca      	uxtb	r2, r1
10046060:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10046062:	0020      	movs	r0, r4
10046064:	183b      	adds	r3, r7, r0
10046066:	781b      	ldrb	r3, [r3, #0]
10046068:	183a      	adds	r2, r7, r0
1004606a:	1c59      	adds	r1, r3, #1
1004606c:	7011      	strb	r1, [r2, #0]
1004606e:	001a      	movs	r2, r3
10046070:	697b      	ldr	r3, [r7, #20]
10046072:	189b      	adds	r3, r3, r2
10046074:	2201      	movs	r2, #1
10046076:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
10046078:	183b      	adds	r3, r7, r0
1004607a:	781b      	ldrb	r3, [r3, #0]
1004607c:	183a      	adds	r2, r7, r0
1004607e:	1c59      	adds	r1, r3, #1
10046080:	7011      	strb	r1, [r2, #0]
10046082:	001a      	movs	r2, r3
10046084:	697b      	ldr	r3, [r7, #20]
10046086:	189b      	adds	r3, r3, r2
10046088:	225d      	movs	r2, #93	@ 0x5d
1004608a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
1004608c:	4a5f      	ldr	r2, [pc, #380]	@ (1004620c <HAL_RADIO_Init+0x488>)
1004608e:	239d      	movs	r3, #157	@ 0x9d
10046090:	009b      	lsls	r3, r3, #2
10046092:	58d1      	ldr	r1, [r2, r3]
10046094:	183b      	adds	r3, r7, r0
10046096:	781b      	ldrb	r3, [r3, #0]
10046098:	0004      	movs	r4, r0
1004609a:	183a      	adds	r2, r7, r0
1004609c:	1c58      	adds	r0, r3, #1
1004609e:	7010      	strb	r0, [r2, #0]
100460a0:	001a      	movs	r2, r3
100460a2:	697b      	ldr	r3, [r7, #20]
100460a4:	189b      	adds	r3, r3, r2
100460a6:	b2ca      	uxtb	r2, r1
100460a8:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
100460aa:	0020      	movs	r0, r4
100460ac:	183b      	adds	r3, r7, r0
100460ae:	781b      	ldrb	r3, [r3, #0]
100460b0:	183a      	adds	r2, r7, r0
100460b2:	1c59      	adds	r1, r3, #1
100460b4:	7011      	strb	r1, [r2, #0]
100460b6:	001a      	movs	r2, r3
100460b8:	697b      	ldr	r3, [r7, #20]
100460ba:	189b      	adds	r3, r3, r2
100460bc:	2201      	movs	r2, #1
100460be:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
100460c0:	183b      	adds	r3, r7, r0
100460c2:	781b      	ldrb	r3, [r3, #0]
100460c4:	183a      	adds	r2, r7, r0
100460c6:	1c59      	adds	r1, r3, #1
100460c8:	7011      	strb	r1, [r2, #0]
100460ca:	001a      	movs	r2, r3
100460cc:	697b      	ldr	r3, [r7, #20]
100460ce:	189b      	adds	r3, r3, r2
100460d0:	2252      	movs	r2, #82	@ 0x52
100460d2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
100460d4:	4a4d      	ldr	r2, [pc, #308]	@ (1004620c <HAL_RADIO_Init+0x488>)
100460d6:	2392      	movs	r3, #146	@ 0x92
100460d8:	009b      	lsls	r3, r3, #2
100460da:	58d1      	ldr	r1, [r2, r3]
100460dc:	183b      	adds	r3, r7, r0
100460de:	781b      	ldrb	r3, [r3, #0]
100460e0:	0004      	movs	r4, r0
100460e2:	183a      	adds	r2, r7, r0
100460e4:	1c58      	adds	r0, r3, #1
100460e6:	7010      	strb	r0, [r2, #0]
100460e8:	001a      	movs	r2, r3
100460ea:	697b      	ldr	r3, [r7, #20]
100460ec:	189b      	adds	r3, r3, r2
100460ee:	b2ca      	uxtb	r2, r1
100460f0:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
100460f2:	0020      	movs	r0, r4
100460f4:	183b      	adds	r3, r7, r0
100460f6:	781b      	ldrb	r3, [r3, #0]
100460f8:	183a      	adds	r2, r7, r0
100460fa:	1c59      	adds	r1, r3, #1
100460fc:	7011      	strb	r1, [r2, #0]
100460fe:	001a      	movs	r2, r3
10046100:	697b      	ldr	r3, [r7, #20]
10046102:	189b      	adds	r3, r3, r2
10046104:	2201      	movs	r2, #1
10046106:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
10046108:	183b      	adds	r3, r7, r0
1004610a:	781b      	ldrb	r3, [r3, #0]
1004610c:	183a      	adds	r2, r7, r0
1004610e:	1c59      	adds	r1, r3, #1
10046110:	7011      	strb	r1, [r2, #0]
10046112:	001a      	movs	r2, r3
10046114:	697b      	ldr	r3, [r7, #20]
10046116:	189b      	adds	r3, r3, r2
10046118:	2212      	movs	r2, #18
1004611a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
1004611c:	4a3b      	ldr	r2, [pc, #236]	@ (1004620c <HAL_RADIO_Init+0x488>)
1004611e:	23a4      	movs	r3, #164	@ 0xa4
10046120:	005b      	lsls	r3, r3, #1
10046122:	58d1      	ldr	r1, [r2, r3]
10046124:	183b      	adds	r3, r7, r0
10046126:	781b      	ldrb	r3, [r3, #0]
10046128:	0004      	movs	r4, r0
1004612a:	183a      	adds	r2, r7, r0
1004612c:	1c58      	adds	r0, r3, #1
1004612e:	7010      	strb	r0, [r2, #0]
10046130:	001a      	movs	r2, r3
10046132:	697b      	ldr	r3, [r7, #20]
10046134:	189b      	adds	r3, r3, r2
10046136:	b2ca      	uxtb	r2, r1
10046138:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004613a:	0020      	movs	r0, r4
1004613c:	183b      	adds	r3, r7, r0
1004613e:	781b      	ldrb	r3, [r3, #0]
10046140:	183a      	adds	r2, r7, r0
10046142:	1c59      	adds	r1, r3, #1
10046144:	7011      	strb	r1, [r2, #0]
10046146:	001a      	movs	r2, r3
10046148:	697b      	ldr	r3, [r7, #20]
1004614a:	189b      	adds	r3, r3, r2
1004614c:	2201      	movs	r2, #1
1004614e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
10046150:	183b      	adds	r3, r7, r0
10046152:	781b      	ldrb	r3, [r3, #0]
10046154:	183a      	adds	r2, r7, r0
10046156:	1c59      	adds	r1, r3, #1
10046158:	7011      	strb	r1, [r2, #0]
1004615a:	001a      	movs	r2, r3
1004615c:	697b      	ldr	r3, [r7, #20]
1004615e:	189b      	adds	r3, r3, r2
10046160:	2215      	movs	r2, #21
10046162:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
10046164:	4a29      	ldr	r2, [pc, #164]	@ (1004620c <HAL_RADIO_Init+0x488>)
10046166:	23aa      	movs	r3, #170	@ 0xaa
10046168:	005b      	lsls	r3, r3, #1
1004616a:	58d1      	ldr	r1, [r2, r3]
1004616c:	183b      	adds	r3, r7, r0
1004616e:	781b      	ldrb	r3, [r3, #0]
10046170:	0004      	movs	r4, r0
10046172:	183a      	adds	r2, r7, r0
10046174:	1c58      	adds	r0, r3, #1
10046176:	7010      	strb	r0, [r2, #0]
10046178:	001a      	movs	r2, r3
1004617a:	697b      	ldr	r3, [r7, #20]
1004617c:	189b      	adds	r3, r3, r2
1004617e:	b2ca      	uxtb	r2, r1
10046180:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10046182:	0020      	movs	r0, r4
10046184:	183b      	adds	r3, r7, r0
10046186:	781b      	ldrb	r3, [r3, #0]
10046188:	183a      	adds	r2, r7, r0
1004618a:	1c59      	adds	r1, r3, #1
1004618c:	7011      	strb	r1, [r2, #0]
1004618e:	001a      	movs	r2, r3
10046190:	697b      	ldr	r3, [r7, #20]
10046192:	189b      	adds	r3, r3, r2
10046194:	2201      	movs	r2, #1
10046196:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
10046198:	183b      	adds	r3, r7, r0
1004619a:	781b      	ldrb	r3, [r3, #0]
1004619c:	183a      	adds	r2, r7, r0
1004619e:	1c59      	adds	r1, r3, #1
100461a0:	7011      	strb	r1, [r2, #0]
100461a2:	001a      	movs	r2, r3
100461a4:	697b      	ldr	r3, [r7, #20]
100461a6:	189b      	adds	r3, r3, r2
100461a8:	221a      	movs	r2, #26
100461aa:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
100461ac:	4a17      	ldr	r2, [pc, #92]	@ (1004620c <HAL_RADIO_Init+0x488>)
100461ae:	23b4      	movs	r3, #180	@ 0xb4
100461b0:	005b      	lsls	r3, r3, #1
100461b2:	58d1      	ldr	r1, [r2, r3]
100461b4:	183b      	adds	r3, r7, r0
100461b6:	781b      	ldrb	r3, [r3, #0]
100461b8:	0004      	movs	r4, r0
100461ba:	183a      	adds	r2, r7, r0
100461bc:	1c58      	adds	r0, r3, #1
100461be:	7010      	strb	r0, [r2, #0]
100461c0:	001a      	movs	r2, r3
100461c2:	697b      	ldr	r3, [r7, #20]
100461c4:	189b      	adds	r3, r3, r2
100461c6:	b2ca      	uxtb	r2, r1
100461c8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100461ca:	0020      	movs	r0, r4
100461cc:	183b      	adds	r3, r7, r0
100461ce:	781b      	ldrb	r3, [r3, #0]
100461d0:	183a      	adds	r2, r7, r0
100461d2:	1c59      	adds	r1, r3, #1
100461d4:	7011      	strb	r1, [r2, #0]
100461d6:	001a      	movs	r2, r3
100461d8:	697b      	ldr	r3, [r7, #20]
100461da:	189b      	adds	r3, r3, r2
100461dc:	2201      	movs	r2, #1
100461de:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
100461e0:	183b      	adds	r3, r7, r0
100461e2:	781b      	ldrb	r3, [r3, #0]
100461e4:	183a      	adds	r2, r7, r0
100461e6:	1c59      	adds	r1, r3, #1
100461e8:	7011      	strb	r1, [r2, #0]
100461ea:	001a      	movs	r2, r3
100461ec:	697b      	ldr	r3, [r7, #20]
100461ee:	189b      	adds	r3, r3, r2
100461f0:	2222      	movs	r2, #34	@ 0x22
100461f2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
100461f4:	4a05      	ldr	r2, [pc, #20]	@ (1004620c <HAL_RADIO_Init+0x488>)
100461f6:	23c4      	movs	r3, #196	@ 0xc4
100461f8:	005b      	lsls	r3, r3, #1
100461fa:	58d1      	ldr	r1, [r2, r3]
100461fc:	183b      	adds	r3, r7, r0
100461fe:	781b      	ldrb	r3, [r3, #0]
10046200:	0004      	movs	r4, r0
10046202:	e005      	b.n	10046210 <HAL_RADIO_Init+0x48c>
10046204:	200000c0 	.word	0x200000c0
10046208:	60001800 	.word	0x60001800
1004620c:	60001400 	.word	0x60001400
10046210:	183a      	adds	r2, r7, r0
10046212:	1c58      	adds	r0, r3, #1
10046214:	7010      	strb	r0, [r2, #0]
10046216:	001a      	movs	r2, r3
10046218:	697b      	ldr	r3, [r7, #20]
1004621a:	189b      	adds	r3, r3, r2
1004621c:	b2ca      	uxtb	r2, r1
1004621e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10046220:	0020      	movs	r0, r4
10046222:	183b      	adds	r3, r7, r0
10046224:	781b      	ldrb	r3, [r3, #0]
10046226:	183a      	adds	r2, r7, r0
10046228:	1c59      	adds	r1, r3, #1
1004622a:	7011      	strb	r1, [r2, #0]
1004622c:	001a      	movs	r2, r3
1004622e:	697b      	ldr	r3, [r7, #20]
10046230:	189b      	adds	r3, r3, r2
10046232:	2201      	movs	r2, #1
10046234:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
10046236:	183b      	adds	r3, r7, r0
10046238:	781b      	ldrb	r3, [r3, #0]
1004623a:	183a      	adds	r2, r7, r0
1004623c:	1c59      	adds	r1, r3, #1
1004623e:	7011      	strb	r1, [r2, #0]
10046240:	001a      	movs	r2, r3
10046242:	697b      	ldr	r3, [r7, #20]
10046244:	189b      	adds	r3, r3, r2
10046246:	2221      	movs	r2, #33	@ 0x21
10046248:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004624a:	4a6d      	ldr	r2, [pc, #436]	@ (10046400 <HAL_RADIO_Init+0x67c>)
1004624c:	23c2      	movs	r3, #194	@ 0xc2
1004624e:	005b      	lsls	r3, r3, #1
10046250:	58d1      	ldr	r1, [r2, r3]
10046252:	183b      	adds	r3, r7, r0
10046254:	781b      	ldrb	r3, [r3, #0]
10046256:	0004      	movs	r4, r0
10046258:	183a      	adds	r2, r7, r0
1004625a:	1c58      	adds	r0, r3, #1
1004625c:	7010      	strb	r0, [r2, #0]
1004625e:	001a      	movs	r2, r3
10046260:	697b      	ldr	r3, [r7, #20]
10046262:	189b      	adds	r3, r3, r2
10046264:	b2ca      	uxtb	r2, r1
10046266:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10046268:	0020      	movs	r0, r4
1004626a:	183b      	adds	r3, r7, r0
1004626c:	781b      	ldrb	r3, [r3, #0]
1004626e:	183a      	adds	r2, r7, r0
10046270:	1c59      	adds	r1, r3, #1
10046272:	7011      	strb	r1, [r2, #0]
10046274:	001a      	movs	r2, r3
10046276:	697b      	ldr	r3, [r7, #20]
10046278:	189b      	adds	r3, r3, r2
1004627a:	2201      	movs	r2, #1
1004627c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
1004627e:	183b      	adds	r3, r7, r0
10046280:	781b      	ldrb	r3, [r3, #0]
10046282:	183a      	adds	r2, r7, r0
10046284:	1c59      	adds	r1, r3, #1
10046286:	7011      	strb	r1, [r2, #0]
10046288:	001a      	movs	r2, r3
1004628a:	697b      	ldr	r3, [r7, #20]
1004628c:	189b      	adds	r3, r3, r2
1004628e:	2223      	movs	r2, #35	@ 0x23
10046290:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
10046292:	4a5b      	ldr	r2, [pc, #364]	@ (10046400 <HAL_RADIO_Init+0x67c>)
10046294:	23c6      	movs	r3, #198	@ 0xc6
10046296:	005b      	lsls	r3, r3, #1
10046298:	58d1      	ldr	r1, [r2, r3]
1004629a:	183b      	adds	r3, r7, r0
1004629c:	781b      	ldrb	r3, [r3, #0]
1004629e:	0004      	movs	r4, r0
100462a0:	183a      	adds	r2, r7, r0
100462a2:	1c58      	adds	r0, r3, #1
100462a4:	7010      	strb	r0, [r2, #0]
100462a6:	001a      	movs	r2, r3
100462a8:	697b      	ldr	r3, [r7, #20]
100462aa:	189b      	adds	r3, r3, r2
100462ac:	b2ca      	uxtb	r2, r1
100462ae:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100462b0:	0020      	movs	r0, r4
100462b2:	183b      	adds	r3, r7, r0
100462b4:	781b      	ldrb	r3, [r3, #0]
100462b6:	183a      	adds	r2, r7, r0
100462b8:	1c59      	adds	r1, r3, #1
100462ba:	7011      	strb	r1, [r2, #0]
100462bc:	001a      	movs	r2, r3
100462be:	697b      	ldr	r3, [r7, #20]
100462c0:	189b      	adds	r3, r3, r2
100462c2:	2201      	movs	r2, #1
100462c4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
100462c6:	183b      	adds	r3, r7, r0
100462c8:	781b      	ldrb	r3, [r3, #0]
100462ca:	183a      	adds	r2, r7, r0
100462cc:	1c59      	adds	r1, r3, #1
100462ce:	7011      	strb	r1, [r2, #0]
100462d0:	001a      	movs	r2, r3
100462d2:	697b      	ldr	r3, [r7, #20]
100462d4:	189b      	adds	r3, r3, r2
100462d6:	221b      	movs	r2, #27
100462d8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
100462da:	4a49      	ldr	r2, [pc, #292]	@ (10046400 <HAL_RADIO_Init+0x67c>)
100462dc:	23b6      	movs	r3, #182	@ 0xb6
100462de:	005b      	lsls	r3, r3, #1
100462e0:	58d1      	ldr	r1, [r2, r3]
100462e2:	183b      	adds	r3, r7, r0
100462e4:	781b      	ldrb	r3, [r3, #0]
100462e6:	0004      	movs	r4, r0
100462e8:	183a      	adds	r2, r7, r0
100462ea:	1c58      	adds	r0, r3, #1
100462ec:	7010      	strb	r0, [r2, #0]
100462ee:	001a      	movs	r2, r3
100462f0:	697b      	ldr	r3, [r7, #20]
100462f2:	189b      	adds	r3, r3, r2
100462f4:	b2ca      	uxtb	r2, r1
100462f6:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
100462f8:	0020      	movs	r0, r4
100462fa:	183b      	adds	r3, r7, r0
100462fc:	781b      	ldrb	r3, [r3, #0]
100462fe:	183a      	adds	r2, r7, r0
10046300:	1c59      	adds	r1, r3, #1
10046302:	7011      	strb	r1, [r2, #0]
10046304:	001a      	movs	r2, r3
10046306:	697b      	ldr	r3, [r7, #20]
10046308:	189b      	adds	r3, r3, r2
1004630a:	2201      	movs	r2, #1
1004630c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
1004630e:	183b      	adds	r3, r7, r0
10046310:	781b      	ldrb	r3, [r3, #0]
10046312:	183a      	adds	r2, r7, r0
10046314:	1c59      	adds	r1, r3, #1
10046316:	7011      	strb	r1, [r2, #0]
10046318:	001a      	movs	r2, r3
1004631a:	697b      	ldr	r3, [r7, #20]
1004631c:	189b      	adds	r3, r3, r2
1004631e:	2290      	movs	r2, #144	@ 0x90
10046320:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
10046322:	4a37      	ldr	r2, [pc, #220]	@ (10046400 <HAL_RADIO_Init+0x67c>)
10046324:	23d0      	movs	r3, #208	@ 0xd0
10046326:	009b      	lsls	r3, r3, #2
10046328:	58d1      	ldr	r1, [r2, r3]
1004632a:	183b      	adds	r3, r7, r0
1004632c:	781b      	ldrb	r3, [r3, #0]
1004632e:	0004      	movs	r4, r0
10046330:	183a      	adds	r2, r7, r0
10046332:	1c58      	adds	r0, r3, #1
10046334:	7010      	strb	r0, [r2, #0]
10046336:	001a      	movs	r2, r3
10046338:	697b      	ldr	r3, [r7, #20]
1004633a:	189b      	adds	r3, r3, r2
1004633c:	b2ca      	uxtb	r2, r1
1004633e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10046340:	0020      	movs	r0, r4
10046342:	183b      	adds	r3, r7, r0
10046344:	781b      	ldrb	r3, [r3, #0]
10046346:	183a      	adds	r2, r7, r0
10046348:	1c59      	adds	r1, r3, #1
1004634a:	7011      	strb	r1, [r2, #0]
1004634c:	001a      	movs	r2, r3
1004634e:	697b      	ldr	r3, [r7, #20]
10046350:	189b      	adds	r3, r3, r2
10046352:	2201      	movs	r2, #1
10046354:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
10046356:	183b      	adds	r3, r7, r0
10046358:	781b      	ldrb	r3, [r3, #0]
1004635a:	183a      	adds	r2, r7, r0
1004635c:	1c59      	adds	r1, r3, #1
1004635e:	7011      	strb	r1, [r2, #0]
10046360:	001a      	movs	r2, r3
10046362:	697b      	ldr	r3, [r7, #20]
10046364:	189b      	adds	r3, r3, r2
10046366:	2291      	movs	r2, #145	@ 0x91
10046368:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
1004636a:	4a25      	ldr	r2, [pc, #148]	@ (10046400 <HAL_RADIO_Init+0x67c>)
1004636c:	23d1      	movs	r3, #209	@ 0xd1
1004636e:	009b      	lsls	r3, r3, #2
10046370:	58d1      	ldr	r1, [r2, r3]
10046372:	183b      	adds	r3, r7, r0
10046374:	781b      	ldrb	r3, [r3, #0]
10046376:	0004      	movs	r4, r0
10046378:	183a      	adds	r2, r7, r0
1004637a:	1c58      	adds	r0, r3, #1
1004637c:	7010      	strb	r0, [r2, #0]
1004637e:	001a      	movs	r2, r3
10046380:	697b      	ldr	r3, [r7, #20]
10046382:	189b      	adds	r3, r3, r2
10046384:	b2ca      	uxtb	r2, r1
10046386:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
10046388:	193b      	adds	r3, r7, r4
1004638a:	781b      	ldrb	r3, [r3, #0]
1004638c:	193a      	adds	r2, r7, r4
1004638e:	1c59      	adds	r1, r3, #1
10046390:	7011      	strb	r1, [r2, #0]
10046392:	001a      	movs	r2, r3
10046394:	697b      	ldr	r3, [r7, #20]
10046396:	189b      	adds	r3, r3, r2
10046398:	2200      	movs	r2, #0
1004639a:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
1004639c:	4a19      	ldr	r2, [pc, #100]	@ (10046404 <HAL_RADIO_Init+0x680>)
1004639e:	4b1a      	ldr	r3, [pc, #104]	@ (10046408 <HAL_RADIO_Init+0x684>)
100463a0:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
100463a2:	4a18      	ldr	r2, [pc, #96]	@ (10046404 <HAL_RADIO_Init+0x680>)
100463a4:	4b18      	ldr	r3, [pc, #96]	@ (10046408 <HAL_RADIO_Init+0x684>)
100463a6:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
100463a8:	4a18      	ldr	r2, [pc, #96]	@ (1004640c <HAL_RADIO_Init+0x688>)
100463aa:	4b17      	ldr	r3, [pc, #92]	@ (10046408 <HAL_RADIO_Init+0x684>)
100463ac:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
100463ae:	4b16      	ldr	r3, [pc, #88]	@ (10046408 <HAL_RADIO_Init+0x684>)
100463b0:	2200      	movs	r2, #0
100463b2:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
100463b4:	4b14      	ldr	r3, [pc, #80]	@ (10046408 <HAL_RADIO_Init+0x684>)
100463b6:	681b      	ldr	r3, [r3, #0]
100463b8:	0018      	movs	r0, r3
100463ba:	f7ff fb3d 	bl	10045a38 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
100463be:	4b10      	ldr	r3, [pc, #64]	@ (10046400 <HAL_RADIO_Init+0x67c>)
100463c0:	2201      	movs	r2, #1
100463c2:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
100463c4:	f7ff fc8c 	bl	10045ce0 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
100463c8:	23c0      	movs	r3, #192	@ 0xc0
100463ca:	05db      	lsls	r3, r3, #23
100463cc:	685b      	ldr	r3, [r3, #4]
100463ce:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
100463d0:	23c0      	movs	r3, #192	@ 0xc0
100463d2:	05db      	lsls	r3, r3, #23
100463d4:	68fa      	ldr	r2, [r7, #12]
100463d6:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
100463d8:	4b0d      	ldr	r3, [pc, #52]	@ (10046410 <HAL_RADIO_Init+0x68c>)
100463da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100463dc:	4b0c      	ldr	r3, [pc, #48]	@ (10046410 <HAL_RADIO_Init+0x68c>)
100463de:	2101      	movs	r1, #1
100463e0:	430a      	orrs	r2, r1
100463e2:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
100463e4:	4b0a      	ldr	r3, [pc, #40]	@ (10046410 <HAL_RADIO_Init+0x68c>)
100463e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100463e8:	4b09      	ldr	r3, [pc, #36]	@ (10046410 <HAL_RADIO_Init+0x68c>)
100463ea:	2101      	movs	r1, #1
100463ec:	430a      	orrs	r2, r1
100463ee:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
100463f0:	23c0      	movs	r3, #192	@ 0xc0
100463f2:	05db      	lsls	r3, r3, #23
100463f4:	685b      	ldr	r3, [r3, #4]
100463f6:	60fb      	str	r3, [r7, #12]

  return;
100463f8:	46c0      	nop			@ (mov r8, r8)
}
100463fa:	46bd      	mov	sp, r7
100463fc:	b00d      	add	sp, #52	@ 0x34
100463fe:	bd90      	pop	{r4, r7, pc}
10046400:	60001400 	.word	0x60001400
10046404:	2000054c 	.word	0x2000054c
10046408:	2000053c 	.word	0x2000053c
1004640c:	20000548 	.word	0x20000548
10046410:	60001800 	.word	0x60001800

10046414 <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
10046414:	b580      	push	{r7, lr}
10046416:	b082      	sub	sp, #8
10046418:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
1004641a:	23c0      	movs	r3, #192	@ 0xc0
1004641c:	05db      	lsls	r3, r3, #23
1004641e:	69db      	ldr	r3, [r3, #28]
10046420:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
10046422:	23c0      	movs	r3, #192	@ 0xc0
10046424:	05db      	lsls	r3, r3, #23
10046426:	685b      	ldr	r3, [r3, #4]
10046428:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
1004642a:	23c0      	movs	r3, #192	@ 0xc0
1004642c:	05db      	lsls	r3, r3, #23
1004642e:	683a      	ldr	r2, [r7, #0]
10046430:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10046432:	f000 fcbd 	bl	10046db0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10046436:	687a      	ldr	r2, [r7, #4]
10046438:	683b      	ldr	r3, [r7, #0]
1004643a:	4313      	orrs	r3, r2
1004643c:	0018      	movs	r0, r3
1004643e:	f7fb f9ce 	bl	100417de <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
10046442:	f000 fcaf 	bl	10046da4 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10046446:	23c0      	movs	r3, #192	@ 0xc0
10046448:	05db      	lsls	r3, r3, #23
1004644a:	685b      	ldr	r3, [r3, #4]
1004644c:	603b      	str	r3, [r7, #0]
}
1004644e:	46c0      	nop			@ (mov r8, r8)
10046450:	46bd      	mov	sp, r7
10046452:	b002      	add	sp, #8
10046454:	bd80      	pop	{r7, pc}

10046456 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
10046456:	b580      	push	{r7, lr}
10046458:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004645a:	f7fe f9d9 	bl	10044810 <HAL_RADIO_TxRxSeqCallback>
}
1004645e:	46c0      	nop			@ (mov r8, r8)
10046460:	46bd      	mov	sp, r7
10046462:	bd80      	pop	{r7, pc}

10046464 <__NVIC_EnableIRQ>:
{
10046464:	b580      	push	{r7, lr}
10046466:	b082      	sub	sp, #8
10046468:	af00      	add	r7, sp, #0
1004646a:	0002      	movs	r2, r0
1004646c:	1dfb      	adds	r3, r7, #7
1004646e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10046470:	1dfb      	adds	r3, r7, #7
10046472:	781b      	ldrb	r3, [r3, #0]
10046474:	2b7f      	cmp	r3, #127	@ 0x7f
10046476:	d809      	bhi.n	1004648c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10046478:	1dfb      	adds	r3, r7, #7
1004647a:	781b      	ldrb	r3, [r3, #0]
1004647c:	001a      	movs	r2, r3
1004647e:	231f      	movs	r3, #31
10046480:	401a      	ands	r2, r3
10046482:	4b04      	ldr	r3, [pc, #16]	@ (10046494 <__NVIC_EnableIRQ+0x30>)
10046484:	2101      	movs	r1, #1
10046486:	4091      	lsls	r1, r2
10046488:	000a      	movs	r2, r1
1004648a:	601a      	str	r2, [r3, #0]
}
1004648c:	46c0      	nop			@ (mov r8, r8)
1004648e:	46bd      	mov	sp, r7
10046490:	b002      	add	sp, #8
10046492:	bd80      	pop	{r7, pc}
10046494:	e000e100 	.word	0xe000e100

10046498 <LL_RADIO_TIMER_EnableTimer1>:
{
10046498:	b580      	push	{r7, lr}
1004649a:	b082      	sub	sp, #8
1004649c:	af00      	add	r7, sp, #0
1004649e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
100464a0:	687b      	ldr	r3, [r7, #4]
100464a2:	68db      	ldr	r3, [r3, #12]
100464a4:	2203      	movs	r2, #3
100464a6:	4393      	bics	r3, r2
100464a8:	2202      	movs	r2, #2
100464aa:	431a      	orrs	r2, r3
100464ac:	687b      	ldr	r3, [r7, #4]
100464ae:	60da      	str	r2, [r3, #12]
}
100464b0:	46c0      	nop			@ (mov r8, r8)
100464b2:	46bd      	mov	sp, r7
100464b4:	b002      	add	sp, #8
100464b6:	bd80      	pop	{r7, pc}

100464b8 <LL_RADIO_TIMER_DisableTimer1>:
{
100464b8:	b580      	push	{r7, lr}
100464ba:	b082      	sub	sp, #8
100464bc:	af00      	add	r7, sp, #0
100464be:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100464c0:	687b      	ldr	r3, [r7, #4]
100464c2:	68db      	ldr	r3, [r3, #12]
100464c4:	2203      	movs	r2, #3
100464c6:	4393      	bics	r3, r2
100464c8:	001a      	movs	r2, r3
100464ca:	687b      	ldr	r3, [r7, #4]
100464cc:	60da      	str	r2, [r3, #12]
}
100464ce:	46c0      	nop			@ (mov r8, r8)
100464d0:	46bd      	mov	sp, r7
100464d2:	b002      	add	sp, #8
100464d4:	bd80      	pop	{r7, pc}

100464d6 <LL_RADIO_TIMER_DisableTimer2>:
{
100464d6:	b580      	push	{r7, lr}
100464d8:	b082      	sub	sp, #8
100464da:	af00      	add	r7, sp, #0
100464dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100464de:	687b      	ldr	r3, [r7, #4]
100464e0:	68db      	ldr	r3, [r3, #12]
100464e2:	2203      	movs	r2, #3
100464e4:	4393      	bics	r3, r2
100464e6:	001a      	movs	r2, r3
100464e8:	687b      	ldr	r3, [r7, #4]
100464ea:	60da      	str	r2, [r3, #12]
}
100464ec:	46c0      	nop			@ (mov r8, r8)
100464ee:	46bd      	mov	sp, r7
100464f0:	b002      	add	sp, #8
100464f2:	bd80      	pop	{r7, pc}

100464f4 <LL_RADIO_TIMER_SetTimeout>:
{
100464f4:	b580      	push	{r7, lr}
100464f6:	b082      	sub	sp, #8
100464f8:	af00      	add	r7, sp, #0
100464fa:	6078      	str	r0, [r7, #4]
100464fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
100464fe:	687b      	ldr	r3, [r7, #4]
10046500:	683a      	ldr	r2, [r7, #0]
10046502:	611a      	str	r2, [r3, #16]
}
10046504:	46c0      	nop			@ (mov r8, r8)
10046506:	46bd      	mov	sp, r7
10046508:	b002      	add	sp, #8
1004650a:	bd80      	pop	{r7, pc}

1004650c <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
1004650c:	b580      	push	{r7, lr}
1004650e:	b082      	sub	sp, #8
10046510:	af00      	add	r7, sp, #0
10046512:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10046514:	687b      	ldr	r3, [r7, #4]
10046516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046518:	2280      	movs	r2, #128	@ 0x80
1004651a:	05d2      	lsls	r2, r2, #23
1004651c:	431a      	orrs	r2, r3
1004651e:	687b      	ldr	r3, [r7, #4]
10046520:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046522:	46c0      	nop			@ (mov r8, r8)
10046524:	46bd      	mov	sp, r7
10046526:	b002      	add	sp, #8
10046528:	bd80      	pop	{r7, pc}
	...

1004652c <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004652c:	b580      	push	{r7, lr}
1004652e:	b082      	sub	sp, #8
10046530:	af00      	add	r7, sp, #0
10046532:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10046534:	687b      	ldr	r3, [r7, #4]
10046536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046538:	4a03      	ldr	r2, [pc, #12]	@ (10046548 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004653a:	401a      	ands	r2, r3
1004653c:	687b      	ldr	r3, [r7, #4]
1004653e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046540:	46c0      	nop			@ (mov r8, r8)
10046542:	46bd      	mov	sp, r7
10046544:	b002      	add	sp, #8
10046546:	bd80      	pop	{r7, pc}
10046548:	bfffffff 	.word	0xbfffffff

1004654c <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
1004654c:	b580      	push	{r7, lr}
1004654e:	b082      	sub	sp, #8
10046550:	af00      	add	r7, sp, #0
10046552:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10046554:	687b      	ldr	r3, [r7, #4]
10046556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046558:	2280      	movs	r2, #128	@ 0x80
1004655a:	05d2      	lsls	r2, r2, #23
1004655c:	431a      	orrs	r2, r3
1004655e:	687b      	ldr	r3, [r7, #4]
10046560:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046562:	46c0      	nop			@ (mov r8, r8)
10046564:	46bd      	mov	sp, r7
10046566:	b002      	add	sp, #8
10046568:	bd80      	pop	{r7, pc}
	...

1004656c <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
1004656c:	b580      	push	{r7, lr}
1004656e:	b082      	sub	sp, #8
10046570:	af00      	add	r7, sp, #0
10046572:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
10046574:	687b      	ldr	r3, [r7, #4]
10046576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046578:	4a03      	ldr	r2, [pc, #12]	@ (10046588 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
1004657a:	401a      	ands	r2, r3
1004657c:	687b      	ldr	r3, [r7, #4]
1004657e:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046580:	46c0      	nop			@ (mov r8, r8)
10046582:	46bd      	mov	sp, r7
10046584:	b002      	add	sp, #8
10046586:	bd80      	pop	{r7, pc}
10046588:	bfffffff 	.word	0xbfffffff

1004658c <LL_RADIO_TIMER_SetWakeupOffset>:
{
1004658c:	b580      	push	{r7, lr}
1004658e:	b082      	sub	sp, #8
10046590:	af00      	add	r7, sp, #0
10046592:	6078      	str	r0, [r7, #4]
10046594:	000a      	movs	r2, r1
10046596:	1cfb      	adds	r3, r7, #3
10046598:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
1004659a:	1cfb      	adds	r3, r7, #3
1004659c:	781a      	ldrb	r2, [r3, #0]
1004659e:	687b      	ldr	r3, [r7, #4]
100465a0:	609a      	str	r2, [r3, #8]
}
100465a2:	46c0      	nop			@ (mov r8, r8)
100465a4:	46bd      	mov	sp, r7
100465a6:	b002      	add	sp, #8
100465a8:	bd80      	pop	{r7, pc}

100465aa <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
100465aa:	b580      	push	{r7, lr}
100465ac:	b082      	sub	sp, #8
100465ae:	af00      	add	r7, sp, #0
100465b0:	6078      	str	r0, [r7, #4]
100465b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
100465b4:	687b      	ldr	r3, [r7, #4]
100465b6:	683a      	ldr	r2, [r7, #0]
100465b8:	625a      	str	r2, [r3, #36]	@ 0x24
}
100465ba:	46c0      	nop			@ (mov r8, r8)
100465bc:	46bd      	mov	sp, r7
100465be:	b002      	add	sp, #8
100465c0:	bd80      	pop	{r7, pc}

100465c2 <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
100465c2:	b580      	push	{r7, lr}
100465c4:	b082      	sub	sp, #8
100465c6:	af00      	add	r7, sp, #0
100465c8:	6078      	str	r0, [r7, #4]
100465ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
100465cc:	687b      	ldr	r3, [r7, #4]
100465ce:	683a      	ldr	r2, [r7, #0]
100465d0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100465d2:	46c0      	nop			@ (mov r8, r8)
100465d4:	46bd      	mov	sp, r7
100465d6:	b002      	add	sp, #8
100465d8:	bd80      	pop	{r7, pc}

100465da <LL_RADIO_TIMER_GetAbsoluteTime>:
{
100465da:	b580      	push	{r7, lr}
100465dc:	b082      	sub	sp, #8
100465de:	af00      	add	r7, sp, #0
100465e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
100465e2:	687b      	ldr	r3, [r7, #4]
100465e4:	691b      	ldr	r3, [r3, #16]
}
100465e6:	0018      	movs	r0, r3
100465e8:	46bd      	mov	sp, r7
100465ea:	b002      	add	sp, #8
100465ec:	bd80      	pop	{r7, pc}

100465ee <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
100465ee:	b580      	push	{r7, lr}
100465f0:	b082      	sub	sp, #8
100465f2:	af00      	add	r7, sp, #0
100465f4:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
100465f6:	687b      	ldr	r3, [r7, #4]
100465f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100465fa:	2280      	movs	r2, #128	@ 0x80
100465fc:	0592      	lsls	r2, r2, #22
100465fe:	431a      	orrs	r2, r3
10046600:	687b      	ldr	r3, [r7, #4]
10046602:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046604:	46c0      	nop			@ (mov r8, r8)
10046606:	46bd      	mov	sp, r7
10046608:	b002      	add	sp, #8
1004660a:	bd80      	pop	{r7, pc}

1004660c <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
1004660c:	b580      	push	{r7, lr}
1004660e:	b082      	sub	sp, #8
10046610:	af00      	add	r7, sp, #0
10046612:	6078      	str	r0, [r7, #4]
10046614:	000a      	movs	r2, r1
10046616:	1cfb      	adds	r3, r7, #3
10046618:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
1004661a:	46c0      	nop			@ (mov r8, r8)
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
#endif
}
1004661c:	46bd      	mov	sp, r7
1004661e:	b002      	add	sp, #8
10046620:	bd80      	pop	{r7, pc}

10046622 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
10046622:	b580      	push	{r7, lr}
10046624:	b082      	sub	sp, #8
10046626:	af00      	add	r7, sp, #0
10046628:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
1004662a:	687b      	ldr	r3, [r7, #4]
1004662c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004662e:	2201      	movs	r2, #1
10046630:	431a      	orrs	r2, r3
10046632:	687b      	ldr	r3, [r7, #4]
10046634:	649a      	str	r2, [r3, #72]	@ 0x48
}
10046636:	46c0      	nop			@ (mov r8, r8)
10046638:	46bd      	mov	sp, r7
1004663a:	b002      	add	sp, #8
1004663c:	bd80      	pop	{r7, pc}

1004663e <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004663e:	b580      	push	{r7, lr}
10046640:	b082      	sub	sp, #8
10046642:	af00      	add	r7, sp, #0
10046644:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
10046646:	687b      	ldr	r3, [r7, #4]
10046648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004664a:	2201      	movs	r2, #1
1004664c:	431a      	orrs	r2, r3
1004664e:	687b      	ldr	r3, [r7, #4]
10046650:	64da      	str	r2, [r3, #76]	@ 0x4c
}
10046652:	46c0      	nop			@ (mov r8, r8)
10046654:	46bd      	mov	sp, r7
10046656:	b002      	add	sp, #8
10046658:	bd80      	pop	{r7, pc}

1004665a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004665a:	b580      	push	{r7, lr}
1004665c:	b082      	sub	sp, #8
1004665e:	af00      	add	r7, sp, #0
10046660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
10046662:	687b      	ldr	r3, [r7, #4]
10046664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10046666:	2201      	movs	r2, #1
10046668:	4013      	ands	r3, r2
1004666a:	2b01      	cmp	r3, #1
1004666c:	d101      	bne.n	10046672 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
1004666e:	2301      	movs	r3, #1
10046670:	e000      	b.n	10046674 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
10046672:	2300      	movs	r3, #0
}
10046674:	0018      	movs	r0, r3
10046676:	46bd      	mov	sp, r7
10046678:	b002      	add	sp, #8
1004667a:	bd80      	pop	{r7, pc}

1004667c <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
1004667c:	b580      	push	{r7, lr}
1004667e:	b082      	sub	sp, #8
10046680:	af00      	add	r7, sp, #0
10046682:	6078      	str	r0, [r7, #4]
10046684:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
10046686:	687b      	ldr	r3, [r7, #4]
10046688:	683a      	ldr	r2, [r7, #0]
1004668a:	605a      	str	r2, [r3, #4]
}
1004668c:	46c0      	nop			@ (mov r8, r8)
1004668e:	46bd      	mov	sp, r7
10046690:	b002      	add	sp, #8
10046692:	bd80      	pop	{r7, pc}

10046694 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046694:	b580      	push	{r7, lr}
10046696:	b082      	sub	sp, #8
10046698:	af00      	add	r7, sp, #0
1004669a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
1004669c:	687b      	ldr	r3, [r7, #4]
1004669e:	2200      	movs	r2, #0
100466a0:	609a      	str	r2, [r3, #8]
}
100466a2:	46c0      	nop			@ (mov r8, r8)
100466a4:	46bd      	mov	sp, r7
100466a6:	b002      	add	sp, #8
100466a8:	bd80      	pop	{r7, pc}

100466aa <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100466aa:	b580      	push	{r7, lr}
100466ac:	b082      	sub	sp, #8
100466ae:	af00      	add	r7, sp, #0
100466b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
100466b2:	687b      	ldr	r3, [r7, #4]
100466b4:	689b      	ldr	r3, [r3, #8]
}
100466b6:	0018      	movs	r0, r3
100466b8:	46bd      	mov	sp, r7
100466ba:	b002      	add	sp, #8
100466bc:	bd80      	pop	{r7, pc}

100466be <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100466be:	b580      	push	{r7, lr}
100466c0:	b082      	sub	sp, #8
100466c2:	af00      	add	r7, sp, #0
100466c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
100466c6:	687b      	ldr	r3, [r7, #4]
100466c8:	68db      	ldr	r3, [r3, #12]
}
100466ca:	0018      	movs	r0, r3
100466cc:	46bd      	mov	sp, r7
100466ce:	b002      	add	sp, #8
100466d0:	bd80      	pop	{r7, pc}

100466d2 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100466d2:	b580      	push	{r7, lr}
100466d4:	b082      	sub	sp, #8
100466d6:	af00      	add	r7, sp, #0
100466d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
100466da:	687b      	ldr	r3, [r7, #4]
100466dc:	691b      	ldr	r3, [r3, #16]
100466de:	2201      	movs	r2, #1
100466e0:	431a      	orrs	r2, r3
100466e2:	687b      	ldr	r3, [r7, #4]
100466e4:	611a      	str	r2, [r3, #16]
}
100466e6:	46c0      	nop			@ (mov r8, r8)
100466e8:	46bd      	mov	sp, r7
100466ea:	b002      	add	sp, #8
100466ec:	bd80      	pop	{r7, pc}

100466ee <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100466ee:	b580      	push	{r7, lr}
100466f0:	b082      	sub	sp, #8
100466f2:	af00      	add	r7, sp, #0
100466f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
100466f6:	687b      	ldr	r3, [r7, #4]
100466f8:	691b      	ldr	r3, [r3, #16]
100466fa:	2201      	movs	r2, #1
100466fc:	4013      	ands	r3, r2
100466fe:	2b01      	cmp	r3, #1
10046700:	d101      	bne.n	10046706 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
10046702:	2301      	movs	r3, #1
10046704:	e000      	b.n	10046708 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
10046706:	2300      	movs	r3, #0
}
10046708:	0018      	movs	r0, r3
1004670a:	46bd      	mov	sp, r7
1004670c:	b002      	add	sp, #8
1004670e:	bd80      	pop	{r7, pc}

10046710 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
10046710:	b5f0      	push	{r4, r5, r6, r7, lr}
10046712:	b083      	sub	sp, #12
10046714:	af00      	add	r7, sp, #0
10046716:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046718:	4b70      	ldr	r3, [pc, #448]	@ (100468dc <HAL_RADIO_TIMER_Init+0x1cc>)
1004671a:	0018      	movs	r0, r3
1004671c:	f7ff ff8f 	bl	1004663e <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
10046720:	4b6e      	ldr	r3, [pc, #440]	@ (100468dc <HAL_RADIO_TIMER_Init+0x1cc>)
10046722:	0018      	movs	r0, r3
10046724:	f7ff ff7d 	bl	10046622 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
10046728:	2017      	movs	r0, #23
1004672a:	f7ff fe9b 	bl	10046464 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004672e:	2014      	movs	r0, #20
10046730:	f7ff fe98 	bl	10046464 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
10046734:	687b      	ldr	r3, [r7, #4]
10046736:	685b      	ldr	r3, [r3, #4]
10046738:	1e5a      	subs	r2, r3, #1
1004673a:	4193      	sbcs	r3, r2
1004673c:	b2db      	uxtb	r3, r3
1004673e:	001a      	movs	r2, r3
10046740:	4b67      	ldr	r3, [pc, #412]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046742:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
10046744:	4b66      	ldr	r3, [pc, #408]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046746:	781b      	ldrb	r3, [r3, #0]
10046748:	2b00      	cmp	r3, #0
1004674a:	d103      	bne.n	10046754 <HAL_RADIO_TIMER_Init+0x44>
1004674c:	687b      	ldr	r3, [r7, #4]
1004674e:	789b      	ldrb	r3, [r3, #2]
10046750:	2b00      	cmp	r3, #0
10046752:	d002      	beq.n	1004675a <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
10046754:	f000 fc04 	bl	10046f60 <_calibrationProcedure>
10046758:	e010      	b.n	1004677c <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
1004675a:	4b61      	ldr	r3, [pc, #388]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
1004675c:	22c8      	movs	r2, #200	@ 0xc8
1004675e:	0352      	lsls	r2, r2, #13
10046760:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
10046762:	4b5f      	ldr	r3, [pc, #380]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046764:	22c8      	movs	r2, #200	@ 0xc8
10046766:	0352      	lsls	r2, r2, #13
10046768:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
1004676a:	4b5d      	ldr	r3, [pc, #372]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
1004676c:	4a5d      	ldr	r2, [pc, #372]	@ (100468e4 <HAL_RADIO_TIMER_Init+0x1d4>)
1004676e:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
10046770:	4b5b      	ldr	r3, [pc, #364]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046772:	4a5d      	ldr	r2, [pc, #372]	@ (100468e8 <HAL_RADIO_TIMER_Init+0x1d8>)
10046774:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
10046776:	4b5a      	ldr	r3, [pc, #360]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046778:	4a5c      	ldr	r2, [pc, #368]	@ (100468ec <HAL_RADIO_TIMER_Init+0x1dc>)
1004677a:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
1004677c:	687b      	ldr	r3, [r7, #4]
1004677e:	685b      	ldr	r3, [r3, #4]
10046780:	2b00      	cmp	r3, #0
10046782:	d108      	bne.n	10046796 <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
10046784:	23a0      	movs	r3, #160	@ 0xa0
10046786:	05db      	lsls	r3, r3, #23
10046788:	0018      	movs	r0, r3
1004678a:	f000 fb1d 	bl	10046dc8 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004678e:	0002      	movs	r2, r0
10046790:	4b53      	ldr	r3, [pc, #332]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046792:	605a      	str	r2, [r3, #4]
10046794:	e01d      	b.n	100467d2 <HAL_RADIO_TIMER_Init+0xc2>
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
10046796:	687b      	ldr	r3, [r7, #4]
10046798:	685b      	ldr	r3, [r3, #4]
1004679a:	031b      	lsls	r3, r3, #12
1004679c:	210a      	movs	r1, #10
1004679e:	0018      	movs	r0, r3
100467a0:	f7f9 fd46 	bl	10040230 <__udivsi3>
100467a4:	0003      	movs	r3, r0
100467a6:	001a      	movs	r2, r3
100467a8:	4b4d      	ldr	r3, [pc, #308]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467aa:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100467ac:	4b4c      	ldr	r3, [pc, #304]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467ae:	685e      	ldr	r6, [r3, #4]
100467b0:	4b4f      	ldr	r3, [pc, #316]	@ (100468f0 <HAL_RADIO_TIMER_Init+0x1e0>)
100467b2:	0018      	movs	r0, r3
100467b4:	f000 fb08 	bl	10046dc8 <HAL_RADIO_TIMER_MachineTimeToSysTime>
100467b8:	0003      	movs	r3, r0
100467ba:	429e      	cmp	r6, r3
100467bc:	d202      	bcs.n	100467c4 <HAL_RADIO_TIMER_Init+0xb4>
100467be:	4b48      	ldr	r3, [pc, #288]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467c0:	685a      	ldr	r2, [r3, #4]
100467c2:	e004      	b.n	100467ce <HAL_RADIO_TIMER_Init+0xbe>
100467c4:	4b4a      	ldr	r3, [pc, #296]	@ (100468f0 <HAL_RADIO_TIMER_Init+0x1e0>)
100467c6:	0018      	movs	r0, r3
100467c8:	f000 fafe 	bl	10046dc8 <HAL_RADIO_TIMER_MachineTimeToSysTime>
100467cc:	0002      	movs	r2, r0
100467ce:	4b44      	ldr	r3, [pc, #272]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467d0:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
100467d2:	4b43      	ldr	r3, [pc, #268]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467d4:	2200      	movs	r2, #0
100467d6:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
100467d8:	687b      	ldr	r3, [r7, #4]
100467da:	881b      	ldrh	r3, [r3, #0]
100467dc:	001a      	movs	r2, r3
100467de:	4b40      	ldr	r3, [pc, #256]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467e0:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
100467e2:	4b3f      	ldr	r3, [pc, #252]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
100467e6:	b29a      	uxth	r2, r3
100467e8:	4b3d      	ldr	r3, [pc, #244]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467ea:	699b      	ldr	r3, [r3, #24]
100467ec:	0019      	movs	r1, r3
100467ee:	0010      	movs	r0, r2
100467f0:	f000 fd2a 	bl	10047248 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
100467f4:	4b3a      	ldr	r3, [pc, #232]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467f6:	2284      	movs	r2, #132	@ 0x84
100467f8:	2100      	movs	r1, #0
100467fa:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
100467fc:	4938      	ldr	r1, [pc, #224]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100467fe:	2200      	movs	r2, #0
10046800:	2300      	movs	r3, #0
10046802:	670a      	str	r2, [r1, #112]	@ 0x70
10046804:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10046806:	4b35      	ldr	r3, [pc, #212]	@ (100468dc <HAL_RADIO_TIMER_Init+0x1cc>)
10046808:	0018      	movs	r0, r3
1004680a:	f7ff fee6 	bl	100465da <LL_RADIO_TIMER_GetAbsoluteTime>
1004680e:	0002      	movs	r2, r0
10046810:	4b33      	ldr	r3, [pc, #204]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046812:	2180      	movs	r1, #128	@ 0x80
10046814:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
10046816:	4932      	ldr	r1, [pc, #200]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046818:	2200      	movs	r2, #0
1004681a:	2300      	movs	r3, #0
1004681c:	678a      	str	r2, [r1, #120]	@ 0x78
1004681e:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
10046820:	492f      	ldr	r1, [pc, #188]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046822:	2200      	movs	r2, #0
10046824:	2300      	movs	r3, #0
10046826:	628a      	str	r2, [r1, #40]	@ 0x28
10046828:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004682a:	4b2d      	ldr	r3, [pc, #180]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
1004682c:	2234      	movs	r2, #52	@ 0x34
1004682e:	2100      	movs	r1, #0
10046830:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10046832:	4b2b      	ldr	r3, [pc, #172]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046834:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10046836:	4b2a      	ldr	r3, [pc, #168]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046838:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004683a:	0019      	movs	r1, r3
1004683c:	4b2d      	ldr	r3, [pc, #180]	@ (100468f4 <HAL_RADIO_TIMER_Init+0x1e4>)
1004683e:	001a      	movs	r2, r3
10046840:	f7f9 fc3e 	bl	100400c0 <blue_unit_conversion>
10046844:	0002      	movs	r2, r0
10046846:	4b26      	ldr	r3, [pc, #152]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046848:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
1004684a:	4b25      	ldr	r3, [pc, #148]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
1004684c:	7819      	ldrb	r1, [r3, #0]
1004684e:	4b24      	ldr	r3, [pc, #144]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046850:	2294      	movs	r2, #148	@ 0x94
10046852:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
10046854:	4b22      	ldr	r3, [pc, #136]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046856:	228c      	movs	r2, #140	@ 0x8c
10046858:	2100      	movs	r1, #0
1004685a:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
1004685c:	4b20      	ldr	r3, [pc, #128]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
1004685e:	2290      	movs	r2, #144	@ 0x90
10046860:	2101      	movs	r1, #1
10046862:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
10046864:	4b1e      	ldr	r3, [pc, #120]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046866:	2293      	movs	r2, #147	@ 0x93
10046868:	2100      	movs	r1, #0
1004686a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
1004686c:	4b1c      	ldr	r3, [pc, #112]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
1004686e:	2291      	movs	r2, #145	@ 0x91
10046870:	2100      	movs	r1, #0
10046872:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
10046874:	4b1a      	ldr	r3, [pc, #104]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046876:	2292      	movs	r2, #146	@ 0x92
10046878:	2100      	movs	r1, #0
1004687a:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004687c:	4b18      	ldr	r3, [pc, #96]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
1004687e:	2261      	movs	r2, #97	@ 0x61
10046880:	2100      	movs	r1, #0
10046882:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
10046884:	4b16      	ldr	r3, [pc, #88]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046886:	2262      	movs	r2, #98	@ 0x62
10046888:	2100      	movs	r1, #0
1004688a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004688c:	4b14      	ldr	r3, [pc, #80]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
1004688e:	2263      	movs	r2, #99	@ 0x63
10046890:	2100      	movs	r1, #0
10046892:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
10046894:	4912      	ldr	r1, [pc, #72]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
10046896:	2200      	movs	r2, #0
10046898:	2300      	movs	r3, #0
1004689a:	658a      	str	r2, [r1, #88]	@ 0x58
1004689c:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
1004689e:	4b10      	ldr	r3, [pc, #64]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100468a0:	4a15      	ldr	r2, [pc, #84]	@ (100468f8 <HAL_RADIO_TIMER_Init+0x1e8>)
100468a2:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
100468a4:	4b0e      	ldr	r3, [pc, #56]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100468a6:	2200      	movs	r2, #0
100468a8:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
100468aa:	f000 faa3 	bl	10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>
100468ae:	0002      	movs	r2, r0
100468b0:	000b      	movs	r3, r1
100468b2:	490b      	ldr	r1, [pc, #44]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100468b4:	6849      	ldr	r1, [r1, #4]
100468b6:	000c      	movs	r4, r1
100468b8:	2100      	movs	r1, #0
100468ba:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
100468bc:	1912      	adds	r2, r2, r4
100468be:	416b      	adcs	r3, r5
100468c0:	490e      	ldr	r1, [pc, #56]	@ (100468fc <HAL_RADIO_TIMER_Init+0x1ec>)
100468c2:	0008      	movs	r0, r1
100468c4:	f000 fd02 	bl	100472cc <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
100468c8:	4b05      	ldr	r3, [pc, #20]	@ (100468e0 <HAL_RADIO_TIMER_Init+0x1d0>)
100468ca:	2101      	movs	r1, #1
100468cc:	0018      	movs	r0, r3
100468ce:	f000 fbf7 	bl	100470c0 <_configureTxRxDelay>
}
100468d2:	46c0      	nop			@ (mov r8, r8)
100468d4:	46bd      	mov	sp, r7
100468d6:	b003      	add	sp, #12
100468d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100468da:	46c0      	nop			@ (mov r8, r8)
100468dc:	60001800 	.word	0x60001800
100468e0:	20000578 	.word	0x20000578
100468e4:	0028f5c2 	.word	0x0028f5c2
100468e8:	00005b8d 	.word	0x00005b8d
100468ec:	0165ebec 	.word	0x0165ebec
100468f0:	ffffefff 	.word	0xffffefff
100468f4:	00000326 	.word	0x00000326
100468f8:	100472a5 	.word	0x100472a5
100468fc:	200005b8 	.word	0x200005b8

10046900 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
10046900:	b5b0      	push	{r4, r5, r7, lr}
10046902:	b090      	sub	sp, #64	@ 0x40
10046904:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
10046906:	230f      	movs	r3, #15
10046908:	18fb      	adds	r3, r7, r3
1004690a:	2200      	movs	r2, #0
1004690c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004690e:	f3ef 8310 	mrs	r3, PRIMASK
10046912:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10046914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
10046916:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
10046918:	b672      	cpsid	i
}
1004691a:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
1004691c:	4b9c      	ldr	r3, [pc, #624]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
1004691e:	2261      	movs	r2, #97	@ 0x61
10046920:	5c9b      	ldrb	r3, [r3, r2]
10046922:	2b00      	cmp	r3, #0
10046924:	d00f      	beq.n	10046946 <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
10046926:	4b9a      	ldr	r3, [pc, #616]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046928:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004692a:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
1004692c:	f000 fa62 	bl	10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046930:	0002      	movs	r2, r0
10046932:	000b      	movs	r3, r1
10046934:	42ab      	cmp	r3, r5
10046936:	d802      	bhi.n	1004693e <HAL_RADIO_TIMER_Tick+0x3e>
10046938:	d105      	bne.n	10046946 <HAL_RADIO_TIMER_Tick+0x46>
1004693a:	42a2      	cmp	r2, r4
1004693c:	d903      	bls.n	10046946 <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
1004693e:	4b94      	ldr	r3, [pc, #592]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046940:	2261      	movs	r2, #97	@ 0x61
10046942:	2100      	movs	r1, #0
10046944:	5499      	strb	r1, [r3, r2]
10046946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10046948:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004694a:	6a3b      	ldr	r3, [r7, #32]
1004694c:	f383 8810 	msr	PRIMASK, r3
}
10046950:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
10046952:	e06e      	b.n	10046a32 <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
10046954:	4b8e      	ldr	r3, [pc, #568]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046956:	2291      	movs	r2, #145	@ 0x91
10046958:	5c99      	ldrb	r1, [r3, r2]
1004695a:	4b8d      	ldr	r3, [pc, #564]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
1004695c:	2292      	movs	r2, #146	@ 0x92
1004695e:	5c9a      	ldrb	r2, [r3, r2]
10046960:	232b      	movs	r3, #43	@ 0x2b
10046962:	2008      	movs	r0, #8
10046964:	181b      	adds	r3, r3, r0
10046966:	19db      	adds	r3, r3, r7
10046968:	1a8a      	subs	r2, r1, r2
1004696a:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
1004696c:	4b88      	ldr	r3, [pc, #544]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
1004696e:	228c      	movs	r2, #140	@ 0x8c
10046970:	589b      	ldr	r3, [r3, r2]
10046972:	183a      	adds	r2, r7, r0
10046974:	0011      	movs	r1, r2
10046976:	0018      	movs	r0, r3
10046978:	f000 fe7e 	bl	10047678 <_check_callbacks>
1004697c:	0002      	movs	r2, r0
1004697e:	4b84      	ldr	r3, [pc, #528]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046980:	218c      	movs	r1, #140	@ 0x8c
10046982:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
10046984:	68bb      	ldr	r3, [r7, #8]
10046986:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
10046988:	e010      	b.n	100469ac <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
1004698a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004698c:	691b      	ldr	r3, [r3, #16]
1004698e:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
10046990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10046992:	2200      	movs	r2, #0
10046994:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
10046996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10046998:	689b      	ldr	r3, [r3, #8]
1004699a:	2b00      	cmp	r3, #0
1004699c:	d004      	beq.n	100469a8 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
1004699e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100469a0:	689b      	ldr	r3, [r3, #8]
100469a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100469a4:	0010      	movs	r0, r2
100469a6:	4798      	blx	r3
      }
      curr = next;
100469a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100469aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
100469ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100469ae:	2b00      	cmp	r3, #0
100469b0:	d1eb      	bne.n	1004698a <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
100469b2:	4b77      	ldr	r3, [pc, #476]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
100469b4:	228c      	movs	r2, #140	@ 0x8c
100469b6:	589b      	ldr	r3, [r3, r2]
100469b8:	240f      	movs	r4, #15
100469ba:	193a      	adds	r2, r7, r4
100469bc:	0011      	movs	r1, r2
100469be:	0018      	movs	r0, r3
100469c0:	f000 fd4a 	bl	10047458 <_update_user_timeout>
100469c4:	0002      	movs	r2, r0
100469c6:	4b72      	ldr	r3, [pc, #456]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
100469c8:	218c      	movs	r1, #140	@ 0x8c
100469ca:	505a      	str	r2, [r3, r1]
    if (expired == 1)
100469cc:	193b      	adds	r3, r7, r4
100469ce:	781b      	ldrb	r3, [r3, #0]
100469d0:	2b01      	cmp	r3, #1
100469d2:	d121      	bne.n	10046a18 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100469d4:	f3ef 8310 	mrs	r3, PRIMASK
100469d8:	61fb      	str	r3, [r7, #28]
  return(result);
100469da:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
100469dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
100469de:	b672      	cpsid	i
}
100469e0:	46c0      	nop			@ (mov r8, r8)
100469e2:	4b6b      	ldr	r3, [pc, #428]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
100469e4:	2291      	movs	r2, #145	@ 0x91
100469e6:	5c9b      	ldrb	r3, [r3, r2]
100469e8:	3301      	adds	r3, #1
100469ea:	4a69      	ldr	r2, [pc, #420]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
100469ec:	2192      	movs	r1, #146	@ 0x92
100469ee:	5c52      	ldrb	r2, [r2, r1]
100469f0:	4293      	cmp	r3, r2
100469f2:	d103      	bne.n	100469fc <HAL_RADIO_TIMER_Tick+0xfc>
100469f4:	4b66      	ldr	r3, [pc, #408]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
100469f6:	2291      	movs	r2, #145	@ 0x91
100469f8:	5c9b      	ldrb	r3, [r3, r2]
100469fa:	e004      	b.n	10046a06 <HAL_RADIO_TIMER_Tick+0x106>
100469fc:	4b64      	ldr	r3, [pc, #400]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
100469fe:	2291      	movs	r2, #145	@ 0x91
10046a00:	5c9b      	ldrb	r3, [r3, r2]
10046a02:	3301      	adds	r3, #1
10046a04:	b2db      	uxtb	r3, r3
10046a06:	4a62      	ldr	r2, [pc, #392]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a08:	2191      	movs	r1, #145	@ 0x91
10046a0a:	5453      	strb	r3, [r2, r1]
10046a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046a0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046a10:	69bb      	ldr	r3, [r7, #24]
10046a12:	f383 8810 	msr	PRIMASK, r3
}
10046a16:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
10046a18:	4b5d      	ldr	r3, [pc, #372]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a1a:	2292      	movs	r2, #146	@ 0x92
10046a1c:	5c9a      	ldrb	r2, [r3, r2]
10046a1e:	232b      	movs	r3, #43	@ 0x2b
10046a20:	2108      	movs	r1, #8
10046a22:	185b      	adds	r3, r3, r1
10046a24:	19db      	adds	r3, r3, r7
10046a26:	781b      	ldrb	r3, [r3, #0]
10046a28:	18d3      	adds	r3, r2, r3
10046a2a:	b2d9      	uxtb	r1, r3
10046a2c:	4b58      	ldr	r3, [pc, #352]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a2e:	2292      	movs	r2, #146	@ 0x92
10046a30:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
10046a32:	4b57      	ldr	r3, [pc, #348]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a34:	2291      	movs	r2, #145	@ 0x91
10046a36:	5c9a      	ldrb	r2, [r3, r2]
10046a38:	4b55      	ldr	r3, [pc, #340]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a3a:	2192      	movs	r1, #146	@ 0x92
10046a3c:	5c5b      	ldrb	r3, [r3, r1]
10046a3e:	429a      	cmp	r2, r3
10046a40:	d30a      	bcc.n	10046a58 <HAL_RADIO_TIMER_Tick+0x158>
10046a42:	4b53      	ldr	r3, [pc, #332]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a44:	2291      	movs	r2, #145	@ 0x91
10046a46:	5c9a      	ldrb	r2, [r3, r2]
10046a48:	4b51      	ldr	r3, [pc, #324]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a4a:	2192      	movs	r1, #146	@ 0x92
10046a4c:	5c5b      	ldrb	r3, [r3, r1]
10046a4e:	1ad3      	subs	r3, r2, r3
10046a50:	1e5a      	subs	r2, r3, #1
10046a52:	4193      	sbcs	r3, r2
10046a54:	b2db      	uxtb	r3, r3
10046a56:	e00c      	b.n	10046a72 <HAL_RADIO_TIMER_Tick+0x172>
10046a58:	4b4d      	ldr	r3, [pc, #308]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a5a:	2291      	movs	r2, #145	@ 0x91
10046a5c:	5c9b      	ldrb	r3, [r3, r2]
10046a5e:	0019      	movs	r1, r3
10046a60:	4b4b      	ldr	r3, [pc, #300]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a62:	2292      	movs	r2, #146	@ 0x92
10046a64:	5c9b      	ldrb	r3, [r3, r2]
10046a66:	1acb      	subs	r3, r1, r3
10046a68:	3301      	adds	r3, #1
10046a6a:	33ff      	adds	r3, #255	@ 0xff
10046a6c:	1e5a      	subs	r2, r3, #1
10046a6e:	4193      	sbcs	r3, r2
10046a70:	b2db      	uxtb	r3, r3
10046a72:	2b00      	cmp	r3, #0
10046a74:	d000      	beq.n	10046a78 <HAL_RADIO_TIMER_Tick+0x178>
10046a76:	e76d      	b.n	10046954 <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
10046a78:	4b45      	ldr	r3, [pc, #276]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a7a:	7a1b      	ldrb	r3, [r3, #8]
10046a7c:	2b00      	cmp	r3, #0
10046a7e:	d06a      	beq.n	10046b56 <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
10046a80:	4b44      	ldr	r3, [pc, #272]	@ (10046b94 <HAL_RADIO_TIMER_Tick+0x294>)
10046a82:	0018      	movs	r0, r3
10046a84:	f7ff fe33 	bl	100466ee <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046a88:	1e03      	subs	r3, r0, #0
10046a8a:	d100      	bne.n	10046a8e <HAL_RADIO_TIMER_Tick+0x18e>
10046a8c:	e07b      	b.n	10046b86 <HAL_RADIO_TIMER_Tick+0x286>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
10046a8e:	4b40      	ldr	r3, [pc, #256]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a90:	2200      	movs	r2, #0
10046a92:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
10046a94:	4b3e      	ldr	r3, [pc, #248]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046a96:	2294      	movs	r2, #148	@ 0x94
10046a98:	5c9b      	ldrb	r3, [r3, r2]
10046a9a:	2b00      	cmp	r3, #0
10046a9c:	d109      	bne.n	10046ab2 <HAL_RADIO_TIMER_Tick+0x1b2>
10046a9e:	4b3c      	ldr	r3, [pc, #240]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046aa0:	2293      	movs	r2, #147	@ 0x93
10046aa2:	5c9b      	ldrb	r3, [r3, r2]
10046aa4:	2b00      	cmp	r3, #0
10046aa6:	d004      	beq.n	10046ab2 <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
10046aa8:	4b39      	ldr	r3, [pc, #228]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046aaa:	2293      	movs	r2, #147	@ 0x93
10046aac:	2100      	movs	r1, #0
10046aae:	5499      	strb	r1, [r3, r2]
10046ab0:	e034      	b.n	10046b1c <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
10046ab2:	f000 fe2b 	bl	1004770c <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10046ab6:	4b36      	ldr	r3, [pc, #216]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046ab8:	228c      	movs	r2, #140	@ 0x8c
10046aba:	589b      	ldr	r3, [r3, r2]
10046abc:	240f      	movs	r4, #15
10046abe:	193a      	adds	r2, r7, r4
10046ac0:	0011      	movs	r1, r2
10046ac2:	0018      	movs	r0, r3
10046ac4:	f000 fcc8 	bl	10047458 <_update_user_timeout>
10046ac8:	0002      	movs	r2, r0
10046aca:	4b31      	ldr	r3, [pc, #196]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046acc:	218c      	movs	r1, #140	@ 0x8c
10046ace:	505a      	str	r2, [r3, r1]
        if (expired == 1)
10046ad0:	193b      	adds	r3, r7, r4
10046ad2:	781b      	ldrb	r3, [r3, #0]
10046ad4:	2b01      	cmp	r3, #1
10046ad6:	d121      	bne.n	10046b1c <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046ad8:	f3ef 8310 	mrs	r3, PRIMASK
10046adc:	617b      	str	r3, [r7, #20]
  return(result);
10046ade:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
10046ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
10046ae2:	b672      	cpsid	i
}
10046ae4:	46c0      	nop			@ (mov r8, r8)
10046ae6:	4b2a      	ldr	r3, [pc, #168]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046ae8:	2291      	movs	r2, #145	@ 0x91
10046aea:	5c9b      	ldrb	r3, [r3, r2]
10046aec:	3301      	adds	r3, #1
10046aee:	4a28      	ldr	r2, [pc, #160]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046af0:	2192      	movs	r1, #146	@ 0x92
10046af2:	5c52      	ldrb	r2, [r2, r1]
10046af4:	4293      	cmp	r3, r2
10046af6:	d103      	bne.n	10046b00 <HAL_RADIO_TIMER_Tick+0x200>
10046af8:	4b25      	ldr	r3, [pc, #148]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046afa:	2291      	movs	r2, #145	@ 0x91
10046afc:	5c9b      	ldrb	r3, [r3, r2]
10046afe:	e004      	b.n	10046b0a <HAL_RADIO_TIMER_Tick+0x20a>
10046b00:	4b23      	ldr	r3, [pc, #140]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046b02:	2291      	movs	r2, #145	@ 0x91
10046b04:	5c9b      	ldrb	r3, [r3, r2]
10046b06:	3301      	adds	r3, #1
10046b08:	b2db      	uxtb	r3, r3
10046b0a:	4a21      	ldr	r2, [pc, #132]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046b0c:	2191      	movs	r1, #145	@ 0x91
10046b0e:	5453      	strb	r3, [r2, r1]
10046b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046b14:	693b      	ldr	r3, [r7, #16]
10046b16:	f383 8810 	msr	PRIMASK, r3
}
10046b1a:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
10046b1c:	230f      	movs	r3, #15
10046b1e:	18fa      	adds	r2, r7, r3
10046b20:	4b1d      	ldr	r3, [pc, #116]	@ (10046b98 <HAL_RADIO_TIMER_Tick+0x298>)
10046b22:	0011      	movs	r1, r2
10046b24:	0018      	movs	r0, r3
10046b26:	f000 fe85 	bl	10047834 <_check_radio_activity>
#endif

      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10046b2a:	4b1c      	ldr	r3, [pc, #112]	@ (10046b9c <HAL_RADIO_TIMER_Tick+0x29c>)
10046b2c:	0018      	movs	r0, r3
10046b2e:	f000 f98d 	bl	10046e4c <HAL_RADIO_TIMER_StopVirtualTimer>
      /* Schedule next calibration event */
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10046b32:	f000 f95f 	bl	10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046b36:	0002      	movs	r2, r0
10046b38:	000b      	movs	r3, r1
10046b3a:	4915      	ldr	r1, [pc, #84]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046b3c:	6849      	ldr	r1, [r1, #4]
10046b3e:	6039      	str	r1, [r7, #0]
10046b40:	2100      	movs	r1, #0
10046b42:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10046b44:	6838      	ldr	r0, [r7, #0]
10046b46:	6879      	ldr	r1, [r7, #4]
10046b48:	1812      	adds	r2, r2, r0
10046b4a:	414b      	adcs	r3, r1
10046b4c:	4913      	ldr	r1, [pc, #76]	@ (10046b9c <HAL_RADIO_TIMER_Tick+0x29c>)
10046b4e:	0008      	movs	r0, r1
10046b50:	f000 fbbc 	bl	100472cc <_start_timer>
      {
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
10046b54:	e017      	b.n	10046b86 <HAL_RADIO_TIMER_Tick+0x286>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10046b56:	4b0e      	ldr	r3, [pc, #56]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046b58:	781b      	ldrb	r3, [r3, #0]
10046b5a:	2b00      	cmp	r3, #0
10046b5c:	d013      	beq.n	10046b86 <HAL_RADIO_TIMER_Tick+0x286>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
10046b5e:	f000 f949 	bl	10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046b62:	4b0b      	ldr	r3, [pc, #44]	@ (10046b90 <HAL_RADIO_TIMER_Tick+0x290>)
10046b64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046b68:	24fa      	movs	r4, #250	@ 0xfa
10046b6a:	0364      	lsls	r4, r4, #13
10046b6c:	2500      	movs	r5, #0
10046b6e:	1912      	adds	r2, r2, r4
10046b70:	416b      	adcs	r3, r5
10046b72:	4299      	cmp	r1, r3
10046b74:	d803      	bhi.n	10046b7e <HAL_RADIO_TIMER_Tick+0x27e>
10046b76:	d106      	bne.n	10046b86 <HAL_RADIO_TIMER_Tick+0x286>
10046b78:	4290      	cmp	r0, r2
10046b7a:	d800      	bhi.n	10046b7e <HAL_RADIO_TIMER_Tick+0x27e>
}
10046b7c:	e003      	b.n	10046b86 <HAL_RADIO_TIMER_Tick+0x286>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10046b7e:	4b07      	ldr	r3, [pc, #28]	@ (10046b9c <HAL_RADIO_TIMER_Tick+0x29c>)
10046b80:	0018      	movs	r0, r3
10046b82:	f000 fb8f 	bl	100472a4 <_calibration_callback>
}
10046b86:	46c0      	nop			@ (mov r8, r8)
10046b88:	46bd      	mov	sp, r7
10046b8a:	b010      	add	sp, #64	@ 0x40
10046b8c:	bdb0      	pop	{r4, r5, r7, pc}
10046b8e:	46c0      	nop			@ (mov r8, r8)
10046b90:	20000578 	.word	0x20000578
10046b94:	60001000 	.word	0x60001000
10046b98:	200005d0 	.word	0x200005d0
10046b9c:	200005b8 	.word	0x200005b8

10046ba0 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10046ba0:	b580      	push	{r7, lr}
10046ba2:	b082      	sub	sp, #8
10046ba4:	af00      	add	r7, sp, #0
10046ba6:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10046ba8:	23c0      	movs	r3, #192	@ 0xc0
10046baa:	05db      	lsls	r3, r3, #23
10046bac:	695b      	ldr	r3, [r3, #20]
10046bae:	687a      	ldr	r2, [r7, #4]
10046bb0:	0011      	movs	r1, r2
10046bb2:	0018      	movs	r0, r3
10046bb4:	f000 ffb0 	bl	10047b18 <TIMER_GetPastSysTime>
10046bb8:	0002      	movs	r2, r0
10046bba:	000b      	movs	r3, r1
}
10046bbc:	0010      	movs	r0, r2
10046bbe:	0019      	movs	r1, r3
10046bc0:	46bd      	mov	sp, r7
10046bc2:	b002      	add	sp, #8
10046bc4:	bd80      	pop	{r7, pc}
	...

10046bc8 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10046bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
10046bca:	b085      	sub	sp, #20
10046bcc:	af00      	add	r7, sp, #0
10046bce:	6078      	str	r0, [r7, #4]
10046bd0:	0008      	movs	r0, r1
10046bd2:	0011      	movs	r1, r2
10046bd4:	1cfb      	adds	r3, r7, #3
10046bd6:	1c02      	adds	r2, r0, #0
10046bd8:	701a      	strb	r2, [r3, #0]
10046bda:	1cbb      	adds	r3, r7, #2
10046bdc:	1c0a      	adds	r2, r1, #0
10046bde:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10046be0:	260f      	movs	r6, #15
10046be2:	19bb      	adds	r3, r7, r6
10046be4:	2200      	movs	r2, #0
10046be6:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10046be8:	1cfb      	adds	r3, r7, #3
10046bea:	781b      	ldrb	r3, [r3, #0]
10046bec:	1e5a      	subs	r2, r3, #1
10046bee:	4193      	sbcs	r3, r2
10046bf0:	b2d9      	uxtb	r1, r3
10046bf2:	4b1b      	ldr	r3, [pc, #108]	@ (10046c60 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046bf4:	2264      	movs	r2, #100	@ 0x64
10046bf6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10046bf8:	1cbb      	adds	r3, r7, #2
10046bfa:	781b      	ldrb	r3, [r3, #0]
10046bfc:	1e5a      	subs	r2, r3, #1
10046bfe:	4193      	sbcs	r3, r2
10046c00:	b2d9      	uxtb	r1, r3
10046c02:	4b17      	ldr	r3, [pc, #92]	@ (10046c60 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046c04:	2260      	movs	r2, #96	@ 0x60
10046c06:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10046c08:	4b15      	ldr	r3, [pc, #84]	@ (10046c60 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046c0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046c0e:	4914      	ldr	r1, [pc, #80]	@ (10046c60 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046c10:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10046c12:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10046c14:	6879      	ldr	r1, [r7, #4]
10046c16:	1a09      	subs	r1, r1, r0
10046c18:	000c      	movs	r4, r1
10046c1a:	2100      	movs	r1, #0
10046c1c:	000d      	movs	r5, r1
10046c1e:	1912      	adds	r2, r2, r4
10046c20:	416b      	adcs	r3, r5
10046c22:	490f      	ldr	r1, [pc, #60]	@ (10046c60 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046c24:	658a      	str	r2, [r1, #88]	@ 0x58
10046c26:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046c28:	4b0d      	ldr	r3, [pc, #52]	@ (10046c60 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046c2a:	2261      	movs	r2, #97	@ 0x61
10046c2c:	2100      	movs	r1, #0
10046c2e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046c30:	4b0b      	ldr	r3, [pc, #44]	@ (10046c60 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046c32:	2263      	movs	r2, #99	@ 0x63
10046c34:	2100      	movs	r1, #0
10046c36:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10046c38:	4b09      	ldr	r3, [pc, #36]	@ (10046c60 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046c3a:	2262      	movs	r2, #98	@ 0x62
10046c3c:	2101      	movs	r1, #1
10046c3e:	5499      	strb	r1, [r3, r2]
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046c40:	19ba      	adds	r2, r7, r6
10046c42:	4b08      	ldr	r3, [pc, #32]	@ (10046c64 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
10046c44:	0011      	movs	r1, r2
10046c46:	0018      	movs	r0, r3
10046c48:	f000 fdf4 	bl	10047834 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
10046c4c:	2001      	movs	r0, #1
10046c4e:	f000 fcbb 	bl	100475c8 <_virtualTimeBaseEnable>

  return retVal;
10046c52:	19bb      	adds	r3, r7, r6
10046c54:	781b      	ldrb	r3, [r3, #0]
}
10046c56:	0018      	movs	r0, r3
10046c58:	46bd      	mov	sp, r7
10046c5a:	b005      	add	sp, #20
10046c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046c5e:	46c0      	nop			@ (mov r8, r8)
10046c60:	20000578 	.word	0x20000578
10046c64:	200005d0 	.word	0x200005d0

10046c68 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
10046c68:	b5b0      	push	{r4, r5, r7, lr}
10046c6a:	b088      	sub	sp, #32
10046c6c:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10046c6e:	23c0      	movs	r3, #192	@ 0xc0
10046c70:	05db      	lsls	r3, r3, #23
10046c72:	0018      	movs	r0, r3
10046c74:	f7ff fc20 	bl	100464b8 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10046c78:	23c0      	movs	r3, #192	@ 0xc0
10046c7a:	05db      	lsls	r3, r3, #23
10046c7c:	0018      	movs	r0, r3
10046c7e:	f7ff fc2a 	bl	100464d6 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10046c82:	4b31      	ldr	r3, [pc, #196]	@ (10046d48 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
10046c84:	0018      	movs	r0, r3
10046c86:	f7ff fc51 	bl	1004652c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046c8a:	4b30      	ldr	r3, [pc, #192]	@ (10046d4c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10046c8c:	2261      	movs	r2, #97	@ 0x61
10046c8e:	2100      	movs	r1, #0
10046c90:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
10046c92:	4b2e      	ldr	r3, [pc, #184]	@ (10046d4c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10046c94:	2262      	movs	r2, #98	@ 0x62
10046c96:	2100      	movs	r1, #0
10046c98:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046c9a:	4b2c      	ldr	r3, [pc, #176]	@ (10046d4c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10046c9c:	2263      	movs	r2, #99	@ 0x63
10046c9e:	2100      	movs	r1, #0
10046ca0:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046ca2:	f3ef 8310 	mrs	r3, PRIMASK
10046ca6:	60bb      	str	r3, [r7, #8]
  return(result);
10046ca8:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
10046caa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10046cac:	b672      	cpsid	i
}
10046cae:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
10046cb0:	4b26      	ldr	r3, [pc, #152]	@ (10046d4c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10046cb2:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
10046cb4:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
10046cb6:	f000 f89d 	bl	10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10046cba:	0002      	movs	r2, r0
10046cbc:	000b      	movs	r3, r1
10046cbe:	1aa4      	subs	r4, r4, r2
10046cc0:	419d      	sbcs	r5, r3
10046cc2:	0022      	movs	r2, r4
10046cc4:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
10046cc6:	4921      	ldr	r1, [pc, #132]	@ (10046d4c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10046cc8:	2084      	movs	r0, #132	@ 0x84
10046cca:	5c09      	ldrb	r1, [r1, r0]
10046ccc:	6039      	str	r1, [r7, #0]
10046cce:	2100      	movs	r1, #0
10046cd0:	6079      	str	r1, [r7, #4]
10046cd2:	6838      	ldr	r0, [r7, #0]
10046cd4:	6879      	ldr	r1, [r7, #4]
10046cd6:	1a12      	subs	r2, r2, r0
10046cd8:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
10046cda:	613a      	str	r2, [r7, #16]
10046cdc:	617b      	str	r3, [r7, #20]
10046cde:	69bb      	ldr	r3, [r7, #24]
10046ce0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046ce2:	68fb      	ldr	r3, [r7, #12]
10046ce4:	f383 8810 	msr	PRIMASK, r3
}
10046ce8:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
10046cea:	697b      	ldr	r3, [r7, #20]
10046cec:	2b00      	cmp	r3, #0
10046cee:	dc0c      	bgt.n	10046d0a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
10046cf0:	697b      	ldr	r3, [r7, #20]
10046cf2:	2b00      	cmp	r3, #0
10046cf4:	d102      	bne.n	10046cfc <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
10046cf6:	693b      	ldr	r3, [r7, #16]
10046cf8:	2b00      	cmp	r3, #0
10046cfa:	d106      	bne.n	10046d0a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
10046cfc:	2317      	movs	r3, #23
10046cfe:	2208      	movs	r2, #8
10046d00:	189b      	adds	r3, r3, r2
10046d02:	19db      	adds	r3, r3, r7
10046d04:	2201      	movs	r2, #1
10046d06:	701a      	strb	r2, [r3, #0]
10046d08:	e015      	b.n	10046d36 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
10046d0a:	697b      	ldr	r3, [r7, #20]
10046d0c:	2b00      	cmp	r3, #0
10046d0e:	dc0c      	bgt.n	10046d2a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
10046d10:	697b      	ldr	r3, [r7, #20]
10046d12:	2b00      	cmp	r3, #0
10046d14:	d102      	bne.n	10046d1c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
10046d16:	693b      	ldr	r3, [r7, #16]
10046d18:	2b0e      	cmp	r3, #14
10046d1a:	d806      	bhi.n	10046d2a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
10046d1c:	2317      	movs	r3, #23
10046d1e:	2208      	movs	r2, #8
10046d20:	189b      	adds	r3, r3, r2
10046d22:	19db      	adds	r3, r3, r7
10046d24:	2202      	movs	r2, #2
10046d26:	701a      	strb	r2, [r3, #0]
10046d28:	e005      	b.n	10046d36 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
10046d2a:	2317      	movs	r3, #23
10046d2c:	2208      	movs	r2, #8
10046d2e:	189b      	adds	r3, r3, r2
10046d30:	19db      	adds	r3, r3, r7
10046d32:	2200      	movs	r2, #0
10046d34:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
10046d36:	2317      	movs	r3, #23
10046d38:	2208      	movs	r2, #8
10046d3a:	189b      	adds	r3, r3, r2
10046d3c:	19db      	adds	r3, r3, r7
10046d3e:	781b      	ldrb	r3, [r3, #0]
}
10046d40:	0018      	movs	r0, r3
10046d42:	46bd      	mov	sp, r7
10046d44:	b008      	add	sp, #32
10046d46:	bdb0      	pop	{r4, r5, r7, pc}
10046d48:	60001800 	.word	0x60001800
10046d4c:	20000578 	.word	0x20000578

10046d50 <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
10046d50:	b580      	push	{r7, lr}
10046d52:	b084      	sub	sp, #16
10046d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046d56:	f3ef 8310 	mrs	r3, PRIMASK
10046d5a:	603b      	str	r3, [r7, #0]
  return(result);
10046d5c:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
10046d5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10046d60:	b672      	cpsid	i
}
10046d62:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10046d64:	4b0e      	ldr	r3, [pc, #56]	@ (10046da0 <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
10046d66:	0018      	movs	r0, r3
10046d68:	f7ff fc37 	bl	100465da <LL_RADIO_TIMER_GetAbsoluteTime>
10046d6c:	0003      	movs	r3, r0
10046d6e:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
10046d70:	68bb      	ldr	r3, [r7, #8]
10046d72:	1c9a      	adds	r2, r3, #2
10046d74:	23c0      	movs	r3, #192	@ 0xc0
10046d76:	05db      	lsls	r3, r3, #23
10046d78:	0011      	movs	r1, r2
10046d7a:	0018      	movs	r0, r3
10046d7c:	f7ff fbba 	bl	100464f4 <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
10046d80:	23c0      	movs	r3, #192	@ 0xc0
10046d82:	05db      	lsls	r3, r3, #23
10046d84:	0018      	movs	r0, r3
10046d86:	f7ff fb87 	bl	10046498 <LL_RADIO_TIMER_EnableTimer1>
10046d8a:	68fb      	ldr	r3, [r7, #12]
10046d8c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046d8e:	687b      	ldr	r3, [r7, #4]
10046d90:	f383 8810 	msr	PRIMASK, r3
}
10046d94:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10046d96:	46c0      	nop			@ (mov r8, r8)
10046d98:	46bd      	mov	sp, r7
10046d9a:	b004      	add	sp, #16
10046d9c:	bd80      	pop	{r7, pc}
10046d9e:	46c0      	nop			@ (mov r8, r8)
10046da0:	60001800 	.word	0x60001800

10046da4 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10046da4:	b580      	push	{r7, lr}
10046da6:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
10046da8:	46c0      	nop			@ (mov r8, r8)
10046daa:	46bd      	mov	sp, r7
10046dac:	bd80      	pop	{r7, pc}
	...

10046db0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10046db0:	b580      	push	{r7, lr}
10046db2:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046db4:	4b03      	ldr	r3, [pc, #12]	@ (10046dc4 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10046db6:	2263      	movs	r2, #99	@ 0x63
10046db8:	2100      	movs	r1, #0
10046dba:	5499      	strb	r1, [r3, r2]
}
10046dbc:	46c0      	nop			@ (mov r8, r8)
10046dbe:	46bd      	mov	sp, r7
10046dc0:	bd80      	pop	{r7, pc}
10046dc2:	46c0      	nop			@ (mov r8, r8)
10046dc4:	20000578 	.word	0x20000578

10046dc8 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
10046dc8:	b580      	push	{r7, lr}
10046dca:	b082      	sub	sp, #8
10046dcc:	af00      	add	r7, sp, #0
10046dce:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10046dd0:	4b06      	ldr	r3, [pc, #24]	@ (10046dec <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
10046dd2:	69db      	ldr	r3, [r3, #28]
10046dd4:	0019      	movs	r1, r3
10046dd6:	4a06      	ldr	r2, [pc, #24]	@ (10046df0 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
10046dd8:	687b      	ldr	r3, [r7, #4]
10046dda:	0018      	movs	r0, r3
10046ddc:	f7f9 f970 	bl	100400c0 <blue_unit_conversion>
10046de0:	0003      	movs	r3, r0
}
10046de2:	0018      	movs	r0, r3
10046de4:	46bd      	mov	sp, r7
10046de6:	b002      	add	sp, #8
10046de8:	bd80      	pop	{r7, pc}
10046dea:	46c0      	nop			@ (mov r8, r8)
10046dec:	20000578 	.word	0x20000578
10046df0:	00000635 	.word	0x00000635

10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10046df4:	b580      	push	{r7, lr}
10046df6:	b082      	sub	sp, #8
10046df8:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10046dfa:	1d3a      	adds	r2, r7, #4
10046dfc:	4b05      	ldr	r3, [pc, #20]	@ (10046e14 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10046dfe:	0011      	movs	r1, r2
10046e00:	0018      	movs	r0, r3
10046e02:	f000 fac1 	bl	10047388 <_get_system_time_and_machine>
10046e06:	0002      	movs	r2, r0
10046e08:	000b      	movs	r3, r1
}
10046e0a:	0010      	movs	r0, r2
10046e0c:	0019      	movs	r1, r3
10046e0e:	46bd      	mov	sp, r7
10046e10:	b002      	add	sp, #8
10046e12:	bd80      	pop	{r7, pc}
10046e14:	20000578 	.word	0x20000578

10046e18 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
10046e18:	b590      	push	{r4, r7, lr}
10046e1a:	b087      	sub	sp, #28
10046e1c:	af00      	add	r7, sp, #0
10046e1e:	60f8      	str	r0, [r7, #12]
10046e20:	603a      	str	r2, [r7, #0]
10046e22:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
10046e24:	683a      	ldr	r2, [r7, #0]
10046e26:	687b      	ldr	r3, [r7, #4]
10046e28:	68f9      	ldr	r1, [r7, #12]
10046e2a:	0008      	movs	r0, r1
10046e2c:	f000 fa4e 	bl	100472cc <_start_timer>
10046e30:	0002      	movs	r2, r0
10046e32:	2417      	movs	r4, #23
10046e34:	193b      	adds	r3, r7, r4
10046e36:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
10046e38:	2001      	movs	r0, #1
10046e3a:	f000 fbc5 	bl	100475c8 <_virtualTimeBaseEnable>

  return retVal;
10046e3e:	193b      	adds	r3, r7, r4
10046e40:	781b      	ldrb	r3, [r3, #0]
}
10046e42:	0018      	movs	r0, r3
10046e44:	46bd      	mov	sp, r7
10046e46:	b007      	add	sp, #28
10046e48:	bd90      	pop	{r4, r7, pc}
	...

10046e4c <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10046e4c:	b590      	push	{r4, r7, lr}
10046e4e:	b089      	sub	sp, #36	@ 0x24
10046e50:	af00      	add	r7, sp, #0
10046e52:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10046e54:	4b28      	ldr	r3, [pc, #160]	@ (10046ef8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046e56:	228c      	movs	r2, #140	@ 0x8c
10046e58:	589b      	ldr	r3, [r3, r2]
10046e5a:	687a      	ldr	r2, [r7, #4]
10046e5c:	0011      	movs	r1, r2
10046e5e:	0018      	movs	r0, r3
10046e60:	f000 fbde 	bl	10047620 <_remove_timer_in_queue>
10046e64:	0003      	movs	r3, r0
10046e66:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10046e68:	210f      	movs	r1, #15
10046e6a:	187b      	adds	r3, r7, r1
10046e6c:	2200      	movs	r2, #0
10046e6e:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10046e70:	687b      	ldr	r3, [r7, #4]
10046e72:	2200      	movs	r2, #0
10046e74:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10046e76:	4b20      	ldr	r3, [pc, #128]	@ (10046ef8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046e78:	228c      	movs	r2, #140	@ 0x8c
10046e7a:	589b      	ldr	r3, [r3, r2]
10046e7c:	69fa      	ldr	r2, [r7, #28]
10046e7e:	429a      	cmp	r2, r3
10046e80:	d031      	beq.n	10046ee6 <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10046e82:	000c      	movs	r4, r1
10046e84:	187a      	adds	r2, r7, r1
10046e86:	69fb      	ldr	r3, [r7, #28]
10046e88:	0011      	movs	r1, r2
10046e8a:	0018      	movs	r0, r3
10046e8c:	f000 fae4 	bl	10047458 <_update_user_timeout>
10046e90:	0002      	movs	r2, r0
10046e92:	4b19      	ldr	r3, [pc, #100]	@ (10046ef8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046e94:	218c      	movs	r1, #140	@ 0x8c
10046e96:	505a      	str	r2, [r3, r1]
    if (expired)
10046e98:	193b      	adds	r3, r7, r4
10046e9a:	781b      	ldrb	r3, [r3, #0]
10046e9c:	2b00      	cmp	r3, #0
10046e9e:	d026      	beq.n	10046eee <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046ea0:	f3ef 8310 	mrs	r3, PRIMASK
10046ea4:	617b      	str	r3, [r7, #20]
  return(result);
10046ea6:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10046ea8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10046eaa:	b672      	cpsid	i
}
10046eac:	46c0      	nop			@ (mov r8, r8)
10046eae:	4b12      	ldr	r3, [pc, #72]	@ (10046ef8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046eb0:	2291      	movs	r2, #145	@ 0x91
10046eb2:	5c9b      	ldrb	r3, [r3, r2]
10046eb4:	3301      	adds	r3, #1
10046eb6:	4a10      	ldr	r2, [pc, #64]	@ (10046ef8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046eb8:	2192      	movs	r1, #146	@ 0x92
10046eba:	5c52      	ldrb	r2, [r2, r1]
10046ebc:	4293      	cmp	r3, r2
10046ebe:	d103      	bne.n	10046ec8 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
10046ec0:	4b0d      	ldr	r3, [pc, #52]	@ (10046ef8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046ec2:	2291      	movs	r2, #145	@ 0x91
10046ec4:	5c9b      	ldrb	r3, [r3, r2]
10046ec6:	e004      	b.n	10046ed2 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10046ec8:	4b0b      	ldr	r3, [pc, #44]	@ (10046ef8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046eca:	2291      	movs	r2, #145	@ 0x91
10046ecc:	5c9b      	ldrb	r3, [r3, r2]
10046ece:	3301      	adds	r3, #1
10046ed0:	b2db      	uxtb	r3, r3
10046ed2:	4a09      	ldr	r2, [pc, #36]	@ (10046ef8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046ed4:	2191      	movs	r1, #145	@ 0x91
10046ed6:	5453      	strb	r3, [r2, r1]
10046ed8:	69bb      	ldr	r3, [r7, #24]
10046eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046edc:	693b      	ldr	r3, [r7, #16]
10046ede:	f383 8810 	msr	PRIMASK, r3
}
10046ee2:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
10046ee4:	e003      	b.n	10046eee <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
10046ee6:	4b04      	ldr	r3, [pc, #16]	@ (10046ef8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046ee8:	218c      	movs	r1, #140	@ 0x8c
10046eea:	69fa      	ldr	r2, [r7, #28]
10046eec:	505a      	str	r2, [r3, r1]
}
10046eee:	46c0      	nop			@ (mov r8, r8)
10046ef0:	46bd      	mov	sp, r7
10046ef2:	b009      	add	sp, #36	@ 0x24
10046ef4:	bd90      	pop	{r4, r7, pc}
10046ef6:	46c0      	nop			@ (mov r8, r8)
10046ef8:	20000578 	.word	0x20000578

10046efc <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10046efc:	b580      	push	{r7, lr}
10046efe:	b082      	sub	sp, #8
10046f00:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
10046f02:	2300      	movs	r3, #0
10046f04:	607b      	str	r3, [r7, #4]
  UNUSED(status);
10046f06:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10046f08:	4b13      	ldr	r3, [pc, #76]	@ (10046f58 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10046f0a:	0018      	movs	r0, r3
10046f0c:	f7ff fb2e 	bl	1004656c <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10046f10:	4b12      	ldr	r3, [pc, #72]	@ (10046f5c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046f12:	2291      	movs	r2, #145	@ 0x91
10046f14:	5c9b      	ldrb	r3, [r3, r2]
10046f16:	3301      	adds	r3, #1
10046f18:	4a10      	ldr	r2, [pc, #64]	@ (10046f5c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046f1a:	2192      	movs	r1, #146	@ 0x92
10046f1c:	5c52      	ldrb	r2, [r2, r1]
10046f1e:	4293      	cmp	r3, r2
10046f20:	d103      	bne.n	10046f2a <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
10046f22:	4b0e      	ldr	r3, [pc, #56]	@ (10046f5c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046f24:	2291      	movs	r2, #145	@ 0x91
10046f26:	5c9b      	ldrb	r3, [r3, r2]
10046f28:	e004      	b.n	10046f34 <HAL_RADIO_TIMER_TimeoutCallback+0x38>
10046f2a:	4b0c      	ldr	r3, [pc, #48]	@ (10046f5c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046f2c:	2291      	movs	r2, #145	@ 0x91
10046f2e:	5c9b      	ldrb	r3, [r3, r2]
10046f30:	3301      	adds	r3, #1
10046f32:	b2db      	uxtb	r3, r3
10046f34:	4a09      	ldr	r2, [pc, #36]	@ (10046f5c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046f36:	2191      	movs	r1, #145	@ 0x91
10046f38:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046f3a:	4b07      	ldr	r3, [pc, #28]	@ (10046f58 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10046f3c:	0018      	movs	r0, r3
10046f3e:	f7ff fb7e 	bl	1004663e <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
10046f42:	4b05      	ldr	r3, [pc, #20]	@ (10046f58 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10046f44:	0018      	movs	r0, r3
10046f46:	f7ff fb88 	bl	1004665a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
10046f4a:	0003      	movs	r3, r0
10046f4c:	607b      	str	r3, [r7, #4]
}
10046f4e:	46c0      	nop			@ (mov r8, r8)
10046f50:	46bd      	mov	sp, r7
10046f52:	b002      	add	sp, #8
10046f54:	bd80      	pop	{r7, pc}
10046f56:	46c0      	nop			@ (mov r8, r8)
10046f58:	60001800 	.word	0x60001800
10046f5c:	20000578 	.word	0x20000578

10046f60 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
10046f60:	b580      	push	{r7, lr}
10046f62:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10046f64:	46c0      	nop			@ (mov r8, r8)
10046f66:	4b0b      	ldr	r3, [pc, #44]	@ (10046f94 <_calibrationProcedure+0x34>)
10046f68:	0018      	movs	r0, r3
10046f6a:	f7ff fbc0 	bl	100466ee <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046f6e:	1e03      	subs	r3, r0, #0
10046f70:	d0f9      	beq.n	10046f66 <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
10046f72:	4b08      	ldr	r3, [pc, #32]	@ (10046f94 <_calibrationProcedure+0x34>)
10046f74:	2117      	movs	r1, #23
10046f76:	0018      	movs	r0, r3
10046f78:	f7ff fb80 	bl	1004667c <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
10046f7c:	4b06      	ldr	r3, [pc, #24]	@ (10046f98 <_calibrationProcedure+0x38>)
10046f7e:	0018      	movs	r0, r3
10046f80:	f000 f81e 	bl	10046fc0 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
10046f84:	4b05      	ldr	r3, [pc, #20]	@ (10046f9c <_calibrationProcedure+0x3c>)
10046f86:	69da      	ldr	r2, [r3, #28]
10046f88:	4b04      	ldr	r3, [pc, #16]	@ (10046f9c <_calibrationProcedure+0x3c>)
10046f8a:	621a      	str	r2, [r3, #32]

}
10046f8c:	46c0      	nop			@ (mov r8, r8)
10046f8e:	46bd      	mov	sp, r7
10046f90:	bd80      	pop	{r7, pc}
10046f92:	46c0      	nop			@ (mov r8, r8)
10046f94:	60001000 	.word	0x60001000
10046f98:	20000588 	.word	0x20000588
10046f9c:	20000578 	.word	0x20000578

10046fa0 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
10046fa0:	b580      	push	{r7, lr}
10046fa2:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10046fa4:	4b05      	ldr	r3, [pc, #20]	@ (10046fbc <_timer_start_calibration+0x1c>)
10046fa6:	0018      	movs	r0, r3
10046fa8:	f7ff fb93 	bl	100466d2 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10046fac:	4b03      	ldr	r3, [pc, #12]	@ (10046fbc <_timer_start_calibration+0x1c>)
10046fae:	0018      	movs	r0, r3
10046fb0:	f7ff fb70 	bl	10046694 <LL_RADIO_TIMER_StartLSICalibration>
}
10046fb4:	46c0      	nop			@ (mov r8, r8)
10046fb6:	46bd      	mov	sp, r7
10046fb8:	bd80      	pop	{r7, pc}
10046fba:	46c0      	nop			@ (mov r8, r8)
10046fbc:	60001000 	.word	0x60001000

10046fc0 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
10046fc0:	b580      	push	{r7, lr}
10046fc2:	b082      	sub	sp, #8
10046fc4:	af00      	add	r7, sp, #0
10046fc6:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
10046fc8:	f7ff ffea 	bl	10046fa0 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10046fcc:	46c0      	nop			@ (mov r8, r8)
10046fce:	4b07      	ldr	r3, [pc, #28]	@ (10046fec <_timer_calibrate+0x2c>)
10046fd0:	0018      	movs	r0, r3
10046fd2:	f7ff fb8c 	bl	100466ee <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046fd6:	1e03      	subs	r3, r0, #0
10046fd8:	d0f9      	beq.n	10046fce <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
10046fda:	687b      	ldr	r3, [r7, #4]
10046fdc:	0018      	movs	r0, r3
10046fde:	f000 f807 	bl	10046ff0 <_get_calibration_data>
}
10046fe2:	46c0      	nop			@ (mov r8, r8)
10046fe4:	46bd      	mov	sp, r7
10046fe6:	b002      	add	sp, #8
10046fe8:	bd80      	pop	{r7, pc}
10046fea:	46c0      	nop			@ (mov r8, r8)
10046fec:	60001000 	.word	0x60001000

10046ff0 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
10046ff0:	b580      	push	{r7, lr}
10046ff2:	b08a      	sub	sp, #40	@ 0x28
10046ff4:	af00      	add	r7, sp, #0
10046ff6:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10046ff8:	4b2e      	ldr	r3, [pc, #184]	@ (100470b4 <_get_calibration_data+0xc4>)
10046ffa:	0018      	movs	r0, r3
10046ffc:	f7ff fb55 	bl	100466aa <LL_RADIO_TIMER_GetLSIPeriod>
10047000:	0003      	movs	r3, r0
10047002:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10047004:	e005      	b.n	10047012 <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10047006:	4b2b      	ldr	r3, [pc, #172]	@ (100470b4 <_get_calibration_data+0xc4>)
10047008:	0018      	movs	r0, r3
1004700a:	f7ff fb4e 	bl	100466aa <LL_RADIO_TIMER_GetLSIPeriod>
1004700e:	0003      	movs	r3, r0
10047010:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10047012:	4b28      	ldr	r3, [pc, #160]	@ (100470b4 <_get_calibration_data+0xc4>)
10047014:	0018      	movs	r0, r3
10047016:	f7ff fb48 	bl	100466aa <LL_RADIO_TIMER_GetLSIPeriod>
1004701a:	0002      	movs	r2, r0
1004701c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004701e:	429a      	cmp	r2, r3
10047020:	d1f1      	bne.n	10047006 <_get_calibration_data+0x16>
10047022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047024:	2b00      	cmp	r3, #0
10047026:	d0ee      	beq.n	10047006 <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
10047028:	4b23      	ldr	r3, [pc, #140]	@ (100470b8 <_get_calibration_data+0xc8>)
1004702a:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
1004702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004702e:	121b      	asrs	r3, r3, #8
10047030:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
10047032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047034:	22ff      	movs	r2, #255	@ 0xff
10047036:	4013      	ands	r3, r2
10047038:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004703a:	69fb      	ldr	r3, [r7, #28]
1004703c:	69ba      	ldr	r2, [r7, #24]
1004703e:	435a      	muls	r2, r3
10047040:	697b      	ldr	r3, [r7, #20]
10047042:	69f9      	ldr	r1, [r7, #28]
10047044:	434b      	muls	r3, r1
10047046:	121b      	asrs	r3, r3, #8
10047048:	18d3      	adds	r3, r2, r3
1004704a:	3310      	adds	r3, #16
1004704c:	115a      	asrs	r2, r3, #5
1004704e:	687b      	ldr	r3, [r7, #4]
10047050:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
10047052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10047054:	687b      	ldr	r3, [r7, #4]
10047056:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
10047058:	4b18      	ldr	r3, [pc, #96]	@ (100470bc <_get_calibration_data+0xcc>)
1004705a:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004705c:	4b15      	ldr	r3, [pc, #84]	@ (100470b4 <_get_calibration_data+0xc4>)
1004705e:	0018      	movs	r0, r3
10047060:	f7ff fb2d 	bl	100466be <LL_RADIO_TIMER_GetLSIFrequency>
10047064:	0003      	movs	r3, r0
10047066:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10047068:	e005      	b.n	10047076 <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004706a:	4b12      	ldr	r3, [pc, #72]	@ (100470b4 <_get_calibration_data+0xc4>)
1004706c:	0018      	movs	r0, r3
1004706e:	f7ff fb26 	bl	100466be <LL_RADIO_TIMER_GetLSIFrequency>
10047072:	0003      	movs	r3, r0
10047074:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10047076:	4b0f      	ldr	r3, [pc, #60]	@ (100470b4 <_get_calibration_data+0xc4>)
10047078:	0018      	movs	r0, r3
1004707a:	f7ff fb20 	bl	100466be <LL_RADIO_TIMER_GetLSIFrequency>
1004707e:	0002      	movs	r2, r0
10047080:	6a3b      	ldr	r3, [r7, #32]
10047082:	429a      	cmp	r2, r3
10047084:	d1f1      	bne.n	1004706a <_get_calibration_data+0x7a>
10047086:	6a3b      	ldr	r3, [r7, #32]
10047088:	2b00      	cmp	r3, #0
1004708a:	d0ee      	beq.n	1004706a <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
1004708c:	6a3b      	ldr	r3, [r7, #32]
1004708e:	119b      	asrs	r3, r3, #6
10047090:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
10047092:	68fb      	ldr	r3, [r7, #12]
10047094:	693a      	ldr	r2, [r7, #16]
10047096:	4353      	muls	r3, r2
10047098:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
1004709a:	68bb      	ldr	r3, [r7, #8]
1004709c:	3380      	adds	r3, #128	@ 0x80
1004709e:	121a      	asrs	r2, r3, #8
100470a0:	687b      	ldr	r3, [r7, #4]
100470a2:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
100470a4:	6a3a      	ldr	r2, [r7, #32]
100470a6:	687b      	ldr	r3, [r7, #4]
100470a8:	605a      	str	r2, [r3, #4]
}
100470aa:	46c0      	nop			@ (mov r8, r8)
100470ac:	46bd      	mov	sp, r7
100470ae:	b00a      	add	sp, #40	@ 0x28
100470b0:	bd80      	pop	{r7, pc}
100470b2:	46c0      	nop			@ (mov r8, r8)
100470b4:	60001000 	.word	0x60001000
100470b8:	0008bcf6 	.word	0x0008bcf6
100470bc:	00000753 	.word	0x00000753

100470c0 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
100470c0:	b590      	push	{r4, r7, lr}
100470c2:	b085      	sub	sp, #20
100470c4:	af00      	add	r7, sp, #0
100470c6:	6078      	str	r0, [r7, #4]
100470c8:	000a      	movs	r2, r1
100470ca:	1cfb      	adds	r3, r7, #3
100470cc:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
100470ce:	4b38      	ldr	r3, [pc, #224]	@ (100471b0 <_configureTxRxDelay+0xf0>)
100470d0:	7b9b      	ldrb	r3, [r3, #14]
100470d2:	b2db      	uxtb	r3, r3
100470d4:	2b00      	cmp	r3, #0
100470d6:	da00      	bge.n	100470da <_configureTxRxDelay+0x1a>
100470d8:	3307      	adds	r3, #7
100470da:	10db      	asrs	r3, r3, #3
100470dc:	b2da      	uxtb	r2, r3
100470de:	240f      	movs	r4, #15
100470e0:	193b      	adds	r3, r7, r4
100470e2:	3201      	adds	r2, #1
100470e4:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
100470e6:	687b      	ldr	r3, [r7, #4]
100470e8:	699b      	ldr	r3, [r3, #24]
100470ea:	0019      	movs	r1, r3
100470ec:	4b31      	ldr	r3, [pc, #196]	@ (100471b4 <_configureTxRxDelay+0xf4>)
100470ee:	001a      	movs	r2, r3
100470f0:	201b      	movs	r0, #27
100470f2:	f7f8 ffe5 	bl	100400c0 <blue_unit_conversion>
100470f6:	0002      	movs	r2, r0
100470f8:	4b2d      	ldr	r3, [pc, #180]	@ (100471b0 <_configureTxRxDelay+0xf0>)
100470fa:	b2d2      	uxtb	r2, r2
100470fc:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
100470fe:	4b2c      	ldr	r3, [pc, #176]	@ (100471b0 <_configureTxRxDelay+0xf0>)
10047100:	799b      	ldrb	r3, [r3, #6]
10047102:	b2db      	uxtb	r3, r3
10047104:	0018      	movs	r0, r3
10047106:	f000 f86d 	bl	100471e4 <_us_to_machinetime>
1004710a:	0003      	movs	r3, r0
1004710c:	b2d9      	uxtb	r1, r3
1004710e:	687b      	ldr	r3, [r7, #4]
10047110:	223d      	movs	r2, #61	@ 0x3d
10047112:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
10047114:	4b26      	ldr	r3, [pc, #152]	@ (100471b0 <_configureTxRxDelay+0xf0>)
10047116:	7a1b      	ldrb	r3, [r3, #8]
10047118:	b2db      	uxtb	r3, r3
1004711a:	001a      	movs	r2, r3
1004711c:	193b      	adds	r3, r7, r4
1004711e:	781b      	ldrb	r3, [r3, #0]
10047120:	18d3      	adds	r3, r2, r3
10047122:	0018      	movs	r0, r3
10047124:	f000 f85e 	bl	100471e4 <_us_to_machinetime>
10047128:	0003      	movs	r3, r0
1004712a:	b2d9      	uxtb	r1, r3
1004712c:	687b      	ldr	r3, [r7, #4]
1004712e:	2238      	movs	r2, #56	@ 0x38
10047130:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
10047132:	4b1f      	ldr	r3, [pc, #124]	@ (100471b0 <_configureTxRxDelay+0xf0>)
10047134:	7a5b      	ldrb	r3, [r3, #9]
10047136:	b2db      	uxtb	r3, r3
10047138:	001a      	movs	r2, r3
1004713a:	193b      	adds	r3, r7, r4
1004713c:	781b      	ldrb	r3, [r3, #0]
1004713e:	18d3      	adds	r3, r2, r3
10047140:	0018      	movs	r0, r3
10047142:	f000 f84f 	bl	100471e4 <_us_to_machinetime>
10047146:	0003      	movs	r3, r0
10047148:	b2d9      	uxtb	r1, r3
1004714a:	687b      	ldr	r3, [r7, #4]
1004714c:	2239      	movs	r2, #57	@ 0x39
1004714e:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
10047150:	4b17      	ldr	r3, [pc, #92]	@ (100471b0 <_configureTxRxDelay+0xf0>)
10047152:	7a9b      	ldrb	r3, [r3, #10]
10047154:	b2db      	uxtb	r3, r3
10047156:	0018      	movs	r0, r3
10047158:	f000 f844 	bl	100471e4 <_us_to_machinetime>
1004715c:	0003      	movs	r3, r0
1004715e:	b2d9      	uxtb	r1, r3
10047160:	687b      	ldr	r3, [r7, #4]
10047162:	223a      	movs	r2, #58	@ 0x3a
10047164:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
10047166:	4b12      	ldr	r3, [pc, #72]	@ (100471b0 <_configureTxRxDelay+0xf0>)
10047168:	7adb      	ldrb	r3, [r3, #11]
1004716a:	b2db      	uxtb	r3, r3
1004716c:	0018      	movs	r0, r3
1004716e:	f000 f839 	bl	100471e4 <_us_to_machinetime>
10047172:	0003      	movs	r3, r0
10047174:	b2d9      	uxtb	r1, r3
10047176:	687b      	ldr	r3, [r7, #4]
10047178:	223b      	movs	r2, #59	@ 0x3b
1004717a:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004717c:	1cfb      	adds	r3, r7, #3
1004717e:	781b      	ldrb	r3, [r3, #0]
10047180:	2b00      	cmp	r3, #0
10047182:	d010      	beq.n	100471a6 <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
10047184:	4b0a      	ldr	r3, [pc, #40]	@ (100471b0 <_configureTxRxDelay+0xf0>)
10047186:	7a1b      	ldrb	r3, [r3, #8]
10047188:	b2db      	uxtb	r3, r3
1004718a:	001a      	movs	r2, r3
1004718c:	193b      	adds	r3, r7, r4
1004718e:	781b      	ldrb	r3, [r3, #0]
10047190:	18d3      	adds	r3, r2, r3
10047192:	0018      	movs	r0, r3
10047194:	f000 f810 	bl	100471b8 <_us_to_systime>
10047198:	0003      	movs	r3, r0
1004719a:	b2db      	uxtb	r3, r3
1004719c:	331b      	adds	r3, #27
1004719e:	b2d9      	uxtb	r1, r3
100471a0:	687b      	ldr	r3, [r7, #4]
100471a2:	223c      	movs	r2, #60	@ 0x3c
100471a4:	5499      	strb	r1, [r3, r2]
  }

}
100471a6:	46c0      	nop			@ (mov r8, r8)
100471a8:	46bd      	mov	sp, r7
100471aa:	b005      	add	sp, #20
100471ac:	bd90      	pop	{r4, r7, pc}
100471ae:	46c0      	nop			@ (mov r8, r8)
100471b0:	200000c0 	.word	0x200000c0
100471b4:	00000326 	.word	0x00000326

100471b8 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
100471b8:	b580      	push	{r7, lr}
100471ba:	b084      	sub	sp, #16
100471bc:	af00      	add	r7, sp, #0
100471be:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
100471c0:	687b      	ldr	r3, [r7, #4]
100471c2:	2268      	movs	r2, #104	@ 0x68
100471c4:	4353      	muls	r3, r2
100471c6:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
100471c8:	687b      	ldr	r3, [r7, #4]
100471ca:	22db      	movs	r2, #219	@ 0xdb
100471cc:	4353      	muls	r3, r2
100471ce:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
100471d0:	68fb      	ldr	r3, [r7, #12]
100471d2:	0a1a      	lsrs	r2, r3, #8
100471d4:	68bb      	ldr	r3, [r7, #8]
100471d6:	0c1b      	lsrs	r3, r3, #16
100471d8:	18d3      	adds	r3, r2, r3
}
100471da:	0018      	movs	r0, r3
100471dc:	46bd      	mov	sp, r7
100471de:	b004      	add	sp, #16
100471e0:	bd80      	pop	{r7, pc}
	...

100471e4 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
100471e4:	b5b0      	push	{r4, r5, r7, lr}
100471e6:	b088      	sub	sp, #32
100471e8:	af00      	add	r7, sp, #0
100471ea:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
100471ec:	4915      	ldr	r1, [pc, #84]	@ (10047244 <_us_to_machinetime+0x60>)
100471ee:	6949      	ldr	r1, [r1, #20]
100471f0:	6039      	str	r1, [r7, #0]
100471f2:	2100      	movs	r1, #0
100471f4:	6079      	str	r1, [r7, #4]
100471f6:	68f9      	ldr	r1, [r7, #12]
100471f8:	000a      	movs	r2, r1
100471fa:	2100      	movs	r1, #0
100471fc:	000b      	movs	r3, r1
100471fe:	6838      	ldr	r0, [r7, #0]
10047200:	6879      	ldr	r1, [r7, #4]
10047202:	f7f9 f9d5 	bl	100405b0 <__aeabi_lmul>
10047206:	0002      	movs	r2, r0
10047208:	000b      	movs	r3, r1
1004720a:	0010      	movs	r0, r2
1004720c:	0019      	movs	r1, r3
1004720e:	0002      	movs	r2, r0
10047210:	000b      	movs	r3, r1
10047212:	1892      	adds	r2, r2, r2
10047214:	415b      	adcs	r3, r3
10047216:	1812      	adds	r2, r2, r0
10047218:	414b      	adcs	r3, r1
1004721a:	61ba      	str	r2, [r7, #24]
1004721c:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004721e:	69ba      	ldr	r2, [r7, #24]
10047220:	69fb      	ldr	r3, [r7, #28]
10047222:	2080      	movs	r0, #128	@ 0x80
10047224:	04c0      	lsls	r0, r0, #19
10047226:	2100      	movs	r1, #0
10047228:	1812      	adds	r2, r2, r0
1004722a:	414b      	adcs	r3, r1
1004722c:	0159      	lsls	r1, r3, #5
1004722e:	0ed4      	lsrs	r4, r2, #27
10047230:	430c      	orrs	r4, r1
10047232:	0edd      	lsrs	r5, r3, #27
10047234:	0023      	movs	r3, r4
10047236:	617b      	str	r3, [r7, #20]

  return time_mt;
10047238:	697b      	ldr	r3, [r7, #20]
}
1004723a:	0018      	movs	r0, r3
1004723c:	46bd      	mov	sp, r7
1004723e:	b008      	add	sp, #32
10047240:	bdb0      	pop	{r4, r5, r7, pc}
10047242:	46c0      	nop			@ (mov r8, r8)
10047244:	20000578 	.word	0x20000578

10047248 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
10047248:	b580      	push	{r7, lr}
1004724a:	b084      	sub	sp, #16
1004724c:	af00      	add	r7, sp, #0
1004724e:	0002      	movs	r2, r0
10047250:	6039      	str	r1, [r7, #0]
10047252:	1dbb      	adds	r3, r7, #6
10047254:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
10047256:	1dbb      	adds	r3, r7, #6
10047258:	881b      	ldrh	r3, [r3, #0]
1004725a:	6839      	ldr	r1, [r7, #0]
1004725c:	4a0e      	ldr	r2, [pc, #56]	@ (10047298 <_update_xtal_startup_time+0x50>)
1004725e:	0018      	movs	r0, r3
10047260:	f7f8 ff2e 	bl	100400c0 <blue_unit_conversion>
10047264:	0003      	movs	r3, r0
10047266:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
10047268:	68fa      	ldr	r2, [r7, #12]
1004726a:	2380      	movs	r3, #128	@ 0x80
1004726c:	015b      	lsls	r3, r3, #5
1004726e:	429a      	cmp	r2, r3
10047270:	db01      	blt.n	10047276 <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
10047272:	4b0a      	ldr	r3, [pc, #40]	@ (1004729c <_update_xtal_startup_time+0x54>)
10047274:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
10047276:	68fb      	ldr	r3, [r7, #12]
10047278:	2b0f      	cmp	r3, #15
1004727a:	dc01      	bgt.n	10047280 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004727c:	2310      	movs	r3, #16
1004727e:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
10047280:	68fb      	ldr	r3, [r7, #12]
10047282:	111b      	asrs	r3, r3, #4
10047284:	b2db      	uxtb	r3, r3
10047286:	4a06      	ldr	r2, [pc, #24]	@ (100472a0 <_update_xtal_startup_time+0x58>)
10047288:	0019      	movs	r1, r3
1004728a:	0010      	movs	r0, r2
1004728c:	f7ff f97e 	bl	1004658c <LL_RADIO_TIMER_SetWakeupOffset>
}
10047290:	46c0      	nop			@ (mov r8, r8)
10047292:	46bd      	mov	sp, r7
10047294:	b004      	add	sp, #16
10047296:	bd80      	pop	{r7, pc}
10047298:	00000326 	.word	0x00000326
1004729c:	00000fff 	.word	0x00000fff
100472a0:	60001800 	.word	0x60001800

100472a4 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
100472a4:	b580      	push	{r7, lr}
100472a6:	b082      	sub	sp, #8
100472a8:	af00      	add	r7, sp, #0
100472aa:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
100472ac:	4b06      	ldr	r3, [pc, #24]	@ (100472c8 <_calibration_callback+0x24>)
100472ae:	781b      	ldrb	r3, [r3, #0]
100472b0:	2b00      	cmp	r3, #0
100472b2:	d001      	beq.n	100472b8 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
100472b4:	f7ff fe74 	bl	10046fa0 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
100472b8:	4b03      	ldr	r3, [pc, #12]	@ (100472c8 <_calibration_callback+0x24>)
100472ba:	2201      	movs	r2, #1
100472bc:	721a      	strb	r2, [r3, #8]
}
100472be:	46c0      	nop			@ (mov r8, r8)
100472c0:	46bd      	mov	sp, r7
100472c2:	b002      	add	sp, #8
100472c4:	bd80      	pop	{r7, pc}
100472c6:	46c0      	nop			@ (mov r8, r8)
100472c8:	20000578 	.word	0x20000578

100472cc <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
100472cc:	b590      	push	{r4, r7, lr}
100472ce:	b089      	sub	sp, #36	@ 0x24
100472d0:	af00      	add	r7, sp, #0
100472d2:	60f8      	str	r0, [r7, #12]
100472d4:	603a      	str	r2, [r7, #0]
100472d6:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
100472d8:	2313      	movs	r3, #19
100472da:	18fb      	adds	r3, r7, r3
100472dc:	2200      	movs	r2, #0
100472de:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
100472e0:	68fb      	ldr	r3, [r7, #12]
100472e2:	7b1b      	ldrb	r3, [r3, #12]
100472e4:	2b00      	cmp	r3, #0
100472e6:	d001      	beq.n	100472ec <_start_timer+0x20>
  {
    return 1;
100472e8:	2301      	movs	r3, #1
100472ea:	e047      	b.n	1004737c <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
100472ec:	68f9      	ldr	r1, [r7, #12]
100472ee:	683a      	ldr	r2, [r7, #0]
100472f0:	687b      	ldr	r3, [r7, #4]
100472f2:	600a      	str	r2, [r1, #0]
100472f4:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
100472f6:	68fb      	ldr	r3, [r7, #12]
100472f8:	2201      	movs	r2, #1
100472fa:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
100472fc:	4b21      	ldr	r3, [pc, #132]	@ (10047384 <_start_timer+0xb8>)
100472fe:	228c      	movs	r2, #140	@ 0x8c
10047300:	589b      	ldr	r3, [r3, r2]
10047302:	68fa      	ldr	r2, [r7, #12]
10047304:	0011      	movs	r1, r2
10047306:	0018      	movs	r0, r3
10047308:	f000 f92e 	bl	10047568 <_insert_timer_in_queue>
1004730c:	0002      	movs	r2, r0
1004730e:	68fb      	ldr	r3, [r7, #12]
10047310:	4293      	cmp	r3, r2
10047312:	d130      	bne.n	10047376 <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
10047314:	2413      	movs	r4, #19
10047316:	193a      	adds	r2, r7, r4
10047318:	68fb      	ldr	r3, [r7, #12]
1004731a:	0011      	movs	r1, r2
1004731c:	0018      	movs	r0, r3
1004731e:	f000 f89b 	bl	10047458 <_update_user_timeout>
10047322:	0002      	movs	r2, r0
10047324:	4b17      	ldr	r3, [pc, #92]	@ (10047384 <_start_timer+0xb8>)
10047326:	218c      	movs	r1, #140	@ 0x8c
10047328:	505a      	str	r2, [r3, r1]
    if (expired)
1004732a:	193b      	adds	r3, r7, r4
1004732c:	781b      	ldrb	r3, [r3, #0]
1004732e:	2b00      	cmp	r3, #0
10047330:	d021      	beq.n	10047376 <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047332:	f3ef 8310 	mrs	r3, PRIMASK
10047336:	61bb      	str	r3, [r7, #24]
  return(result);
10047338:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004733a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004733c:	b672      	cpsid	i
}
1004733e:	46c0      	nop			@ (mov r8, r8)
10047340:	4b10      	ldr	r3, [pc, #64]	@ (10047384 <_start_timer+0xb8>)
10047342:	2291      	movs	r2, #145	@ 0x91
10047344:	5c9b      	ldrb	r3, [r3, r2]
10047346:	3301      	adds	r3, #1
10047348:	4a0e      	ldr	r2, [pc, #56]	@ (10047384 <_start_timer+0xb8>)
1004734a:	2192      	movs	r1, #146	@ 0x92
1004734c:	5c52      	ldrb	r2, [r2, r1]
1004734e:	4293      	cmp	r3, r2
10047350:	d103      	bne.n	1004735a <_start_timer+0x8e>
10047352:	4b0c      	ldr	r3, [pc, #48]	@ (10047384 <_start_timer+0xb8>)
10047354:	2291      	movs	r2, #145	@ 0x91
10047356:	5c9b      	ldrb	r3, [r3, r2]
10047358:	e004      	b.n	10047364 <_start_timer+0x98>
1004735a:	4b0a      	ldr	r3, [pc, #40]	@ (10047384 <_start_timer+0xb8>)
1004735c:	2291      	movs	r2, #145	@ 0x91
1004735e:	5c9b      	ldrb	r3, [r3, r2]
10047360:	3301      	adds	r3, #1
10047362:	b2db      	uxtb	r3, r3
10047364:	4a07      	ldr	r2, [pc, #28]	@ (10047384 <_start_timer+0xb8>)
10047366:	2191      	movs	r1, #145	@ 0x91
10047368:	5453      	strb	r3, [r2, r1]
1004736a:	69fb      	ldr	r3, [r7, #28]
1004736c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004736e:	697b      	ldr	r3, [r7, #20]
10047370:	f383 8810 	msr	PRIMASK, r3
}
10047374:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return expired;
10047376:	2313      	movs	r3, #19
10047378:	18fb      	adds	r3, r7, r3
1004737a:	781b      	ldrb	r3, [r3, #0]
}
1004737c:	0018      	movs	r0, r3
1004737e:	46bd      	mov	sp, r7
10047380:	b009      	add	sp, #36	@ 0x24
10047382:	bd90      	pop	{r4, r7, pc}
10047384:	20000578 	.word	0x20000578

10047388 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
10047388:	b5b0      	push	{r4, r5, r7, lr}
1004738a:	b08a      	sub	sp, #40	@ 0x28
1004738c:	af00      	add	r7, sp, #0
1004738e:	60f8      	str	r0, [r7, #12]
10047390:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047392:	f3ef 8310 	mrs	r3, PRIMASK
10047396:	617b      	str	r3, [r7, #20]
  return(result);
10047398:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004739a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004739c:	b672      	cpsid	i
}
1004739e:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
100473a0:	68fb      	ldr	r3, [r7, #12]
100473a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100473a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100473a6:	623a      	str	r2, [r7, #32]
100473a8:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100473aa:	4b29      	ldr	r3, [pc, #164]	@ (10047450 <_get_system_time_and_machine+0xc8>)
100473ac:	0018      	movs	r0, r3
100473ae:	f7ff f914 	bl	100465da <LL_RADIO_TIMER_GetAbsoluteTime>
100473b2:	0002      	movs	r2, r0
100473b4:	68bb      	ldr	r3, [r7, #8]
100473b6:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
100473b8:	68bb      	ldr	r3, [r7, #8]
100473ba:	681a      	ldr	r2, [r3, #0]
100473bc:	68fb      	ldr	r3, [r7, #12]
100473be:	2180      	movs	r1, #128	@ 0x80
100473c0:	585b      	ldr	r3, [r3, r1]
100473c2:	1ad3      	subs	r3, r2, r3
100473c4:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
100473c6:	68fb      	ldr	r3, [r7, #12]
100473c8:	69db      	ldr	r3, [r3, #28]
100473ca:	0019      	movs	r1, r3
100473cc:	4a21      	ldr	r2, [pc, #132]	@ (10047454 <_get_system_time_and_machine+0xcc>)
100473ce:	69bb      	ldr	r3, [r7, #24]
100473d0:	0018      	movs	r0, r3
100473d2:	f7f8 fe75 	bl	100400c0 <blue_unit_conversion>
100473d6:	0003      	movs	r3, r0
100473d8:	603b      	str	r3, [r7, #0]
100473da:	2300      	movs	r3, #0
100473dc:	607b      	str	r3, [r7, #4]
100473de:	6a3a      	ldr	r2, [r7, #32]
100473e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100473e2:	6838      	ldr	r0, [r7, #0]
100473e4:	6879      	ldr	r1, [r7, #4]
100473e6:	1812      	adds	r2, r2, r0
100473e8:	414b      	adcs	r3, r1
100473ea:	623a      	str	r2, [r7, #32]
100473ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
100473ee:	68fb      	ldr	r3, [r7, #12]
100473f0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
100473f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100473f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100473f6:	4299      	cmp	r1, r3
100473f8:	d305      	bcc.n	10047406 <_get_system_time_and_machine+0x7e>
100473fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100473fc:	4299      	cmp	r1, r3
100473fe:	d115      	bne.n	1004742c <_get_system_time_and_machine+0xa4>
10047400:	6a39      	ldr	r1, [r7, #32]
10047402:	4291      	cmp	r1, r2
10047404:	d212      	bcs.n	1004742c <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
10047406:	68fb      	ldr	r3, [r7, #12]
10047408:	69db      	ldr	r3, [r3, #28]
1004740a:	0019      	movs	r1, r3
1004740c:	4a11      	ldr	r2, [pc, #68]	@ (10047454 <_get_system_time_and_machine+0xcc>)
1004740e:	2301      	movs	r3, #1
10047410:	425b      	negs	r3, r3
10047412:	0018      	movs	r0, r3
10047414:	f7f8 fe54 	bl	100400c0 <blue_unit_conversion>
10047418:	0003      	movs	r3, r0
1004741a:	001c      	movs	r4, r3
1004741c:	2300      	movs	r3, #0
1004741e:	001d      	movs	r5, r3
10047420:	6a3a      	ldr	r2, [r7, #32]
10047422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047424:	1912      	adds	r2, r2, r4
10047426:	416b      	adcs	r3, r5
10047428:	623a      	str	r2, [r7, #32]
1004742a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004742c:	68f9      	ldr	r1, [r7, #12]
1004742e:	6a3a      	ldr	r2, [r7, #32]
10047430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047432:	678a      	str	r2, [r1, #120]	@ 0x78
10047434:	67cb      	str	r3, [r1, #124]	@ 0x7c
10047436:	69fb      	ldr	r3, [r7, #28]
10047438:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004743a:	693b      	ldr	r3, [r7, #16]
1004743c:	f383 8810 	msr	PRIMASK, r3
}
10047440:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
10047442:	6a3a      	ldr	r2, [r7, #32]
10047444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10047446:	0010      	movs	r0, r2
10047448:	0019      	movs	r1, r3
1004744a:	46bd      	mov	sp, r7
1004744c:	b00a      	add	sp, #40	@ 0x28
1004744e:	bdb0      	pop	{r4, r5, r7, pc}
10047450:	60001800 	.word	0x60001800
10047454:	00000635 	.word	0x00000635

10047458 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10047458:	b5b0      	push	{r4, r5, r7, lr}
1004745a:	b08a      	sub	sp, #40	@ 0x28
1004745c:	af00      	add	r7, sp, #0
1004745e:	6078      	str	r0, [r7, #4]
10047460:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
10047462:	687b      	ldr	r3, [r7, #4]
10047464:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
10047466:	687b      	ldr	r3, [r7, #4]
10047468:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004746a:	683b      	ldr	r3, [r7, #0]
1004746c:	2200      	movs	r2, #0
1004746e:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
10047470:	e033      	b.n	100474da <_update_user_timeout+0x82>
  {
    if (curr->active)
10047472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047474:	7b1b      	ldrb	r3, [r3, #12]
10047476:	2b00      	cmp	r3, #0
10047478:	d02c      	beq.n	100474d4 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004747a:	f3ef 8310 	mrs	r3, PRIMASK
1004747e:	60fb      	str	r3, [r7, #12]
  return(result);
10047480:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
10047482:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047484:	b672      	cpsid	i
}
10047486:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10047488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004748a:	681c      	ldr	r4, [r3, #0]
1004748c:	685d      	ldr	r5, [r3, #4]
1004748e:	f7ff fcb1 	bl	10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10047492:	0002      	movs	r2, r0
10047494:	000b      	movs	r3, r1
10047496:	1aa4      	subs	r4, r4, r2
10047498:	419d      	sbcs	r5, r3
1004749a:	0022      	movs	r2, r4
1004749c:	002b      	movs	r3, r5
1004749e:	613a      	str	r2, [r7, #16]
100474a0:	617b      	str	r3, [r7, #20]
      if (delay > 0)
100474a2:	697b      	ldr	r3, [r7, #20]
100474a4:	2b00      	cmp	r3, #0
100474a6:	dc05      	bgt.n	100474b4 <_update_user_timeout+0x5c>
100474a8:	697b      	ldr	r3, [r7, #20]
100474aa:	2b00      	cmp	r3, #0
100474ac:	d108      	bne.n	100474c0 <_update_user_timeout+0x68>
100474ae:	693b      	ldr	r3, [r7, #16]
100474b0:	2b00      	cmp	r3, #0
100474b2:	d005      	beq.n	100474c0 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
100474b4:	693b      	ldr	r3, [r7, #16]
100474b6:	2101      	movs	r1, #1
100474b8:	0018      	movs	r0, r3
100474ba:	f000 f81d 	bl	100474f8 <VTIMER_SetWakeupTime>
100474be:	e002      	b.n	100474c6 <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
100474c0:	683b      	ldr	r3, [r7, #0]
100474c2:	2201      	movs	r2, #1
100474c4:	701a      	strb	r2, [r3, #0]
100474c6:	69fb      	ldr	r3, [r7, #28]
100474c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100474ca:	68bb      	ldr	r3, [r7, #8]
100474cc:	f383 8810 	msr	PRIMASK, r3
}
100474d0:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
100474d2:	e005      	b.n	100474e0 <_update_user_timeout+0x88>
    }
    curr = curr->next;
100474d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100474d6:	691b      	ldr	r3, [r3, #16]
100474d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
100474da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100474dc:	2b00      	cmp	r3, #0
100474de:	d1c8      	bne.n	10047472 <_update_user_timeout+0x1a>
  }
  if (*expired)
100474e0:	683b      	ldr	r3, [r7, #0]
100474e2:	781b      	ldrb	r3, [r3, #0]
100474e4:	2b00      	cmp	r3, #0
100474e6:	d001      	beq.n	100474ec <_update_user_timeout+0x94>
  {
    return rootOrig;
100474e8:	6a3b      	ldr	r3, [r7, #32]
100474ea:	e000      	b.n	100474ee <_update_user_timeout+0x96>
  }

  return curr;
100474ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
100474ee:	0018      	movs	r0, r3
100474f0:	46bd      	mov	sp, r7
100474f2:	b00a      	add	sp, #40	@ 0x28
100474f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

100474f8 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
100474f8:	b580      	push	{r7, lr}
100474fa:	b084      	sub	sp, #16
100474fc:	af00      	add	r7, sp, #0
100474fe:	6078      	str	r0, [r7, #4]
10047500:	000a      	movs	r2, r1
10047502:	1cfb      	adds	r3, r7, #3
10047504:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
10047506:	4b15      	ldr	r3, [pc, #84]	@ (1004755c <VTIMER_SetWakeupTime+0x64>)
10047508:	699b      	ldr	r3, [r3, #24]
1004750a:	0019      	movs	r1, r3
1004750c:	4a14      	ldr	r2, [pc, #80]	@ (10047560 <VTIMER_SetWakeupTime+0x68>)
1004750e:	687b      	ldr	r3, [r7, #4]
10047510:	0018      	movs	r0, r3
10047512:	f7f8 fdd5 	bl	100400c0 <blue_unit_conversion>
10047516:	0003      	movs	r3, r0
10047518:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004751a:	687b      	ldr	r3, [r7, #4]
1004751c:	2b20      	cmp	r3, #32
1004751e:	d200      	bcs.n	10047522 <VTIMER_SetWakeupTime+0x2a>
10047520:	2320      	movs	r3, #32
10047522:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047524:	4b0f      	ldr	r3, [pc, #60]	@ (10047564 <VTIMER_SetWakeupTime+0x6c>)
10047526:	0018      	movs	r0, r3
10047528:	f7ff f857 	bl	100465da <LL_RADIO_TIMER_GetAbsoluteTime>
1004752c:	0003      	movs	r3, r0
1004752e:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10047530:	687a      	ldr	r2, [r7, #4]
10047532:	68fb      	ldr	r3, [r7, #12]
10047534:	18d3      	adds	r3, r2, r3
10047536:	3308      	adds	r3, #8
10047538:	4a0a      	ldr	r2, [pc, #40]	@ (10047564 <VTIMER_SetWakeupTime+0x6c>)
1004753a:	0019      	movs	r1, r3
1004753c:	0010      	movs	r0, r2
1004753e:	f7ff f840 	bl	100465c2 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047542:	4b08      	ldr	r3, [pc, #32]	@ (10047564 <VTIMER_SetWakeupTime+0x6c>)
10047544:	0018      	movs	r0, r3
10047546:	f7ff f852 	bl	100465ee <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004754a:	4b06      	ldr	r3, [pc, #24]	@ (10047564 <VTIMER_SetWakeupTime+0x6c>)
1004754c:	0018      	movs	r0, r3
1004754e:	f7fe fffd 	bl	1004654c <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
10047552:	68fb      	ldr	r3, [r7, #12]
}
10047554:	0018      	movs	r0, r3
10047556:	46bd      	mov	sp, r7
10047558:	b004      	add	sp, #16
1004755a:	bd80      	pop	{r7, pc}
1004755c:	20000578 	.word	0x20000578
10047560:	00000326 	.word	0x00000326
10047564:	60001800 	.word	0x60001800

10047568 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10047568:	b580      	push	{r7, lr}
1004756a:	b086      	sub	sp, #24
1004756c:	af00      	add	r7, sp, #0
1004756e:	6078      	str	r0, [r7, #4]
10047570:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
10047572:	687b      	ldr	r3, [r7, #4]
10047574:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
10047576:	2300      	movs	r3, #0
10047578:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004757a:	687b      	ldr	r3, [r7, #4]
1004757c:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004757e:	e004      	b.n	1004758a <_insert_timer_in_queue+0x22>
  {
    prev = current;
10047580:	697b      	ldr	r3, [r7, #20]
10047582:	613b      	str	r3, [r7, #16]
    current = current->next;
10047584:	697b      	ldr	r3, [r7, #20]
10047586:	691b      	ldr	r3, [r3, #16]
10047588:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004758a:	697b      	ldr	r3, [r7, #20]
1004758c:	2b00      	cmp	r3, #0
1004758e:	d00a      	beq.n	100475a6 <_insert_timer_in_queue+0x3e>
10047590:	697b      	ldr	r3, [r7, #20]
10047592:	681a      	ldr	r2, [r3, #0]
10047594:	685b      	ldr	r3, [r3, #4]
10047596:	6839      	ldr	r1, [r7, #0]
10047598:	6808      	ldr	r0, [r1, #0]
1004759a:	6849      	ldr	r1, [r1, #4]
1004759c:	4299      	cmp	r1, r3
1004759e:	d8ef      	bhi.n	10047580 <_insert_timer_in_queue+0x18>
100475a0:	d101      	bne.n	100475a6 <_insert_timer_in_queue+0x3e>
100475a2:	4290      	cmp	r0, r2
100475a4:	d8ec      	bhi.n	10047580 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
100475a6:	683b      	ldr	r3, [r7, #0]
100475a8:	697a      	ldr	r2, [r7, #20]
100475aa:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
100475ac:	693b      	ldr	r3, [r7, #16]
100475ae:	2b00      	cmp	r3, #0
100475b0:	d102      	bne.n	100475b8 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
100475b2:	683b      	ldr	r3, [r7, #0]
100475b4:	60fb      	str	r3, [r7, #12]
100475b6:	e002      	b.n	100475be <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
100475b8:	693b      	ldr	r3, [r7, #16]
100475ba:	683a      	ldr	r2, [r7, #0]
100475bc:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
100475be:	68fb      	ldr	r3, [r7, #12]
}
100475c0:	0018      	movs	r0, r3
100475c2:	46bd      	mov	sp, r7
100475c4:	b006      	add	sp, #24
100475c6:	bd80      	pop	{r7, pc}

100475c8 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
100475c8:	b580      	push	{r7, lr}
100475ca:	b082      	sub	sp, #8
100475cc:	af00      	add	r7, sp, #0
100475ce:	0002      	movs	r2, r0
100475d0:	1dfb      	adds	r3, r7, #7
100475d2:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
100475d4:	1dfb      	adds	r3, r7, #7
100475d6:	781b      	ldrb	r3, [r3, #0]
100475d8:	2b00      	cmp	r3, #0
100475da:	d010      	beq.n	100475fe <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
100475dc:	4b0e      	ldr	r3, [pc, #56]	@ (10047618 <_virtualTimeBaseEnable+0x50>)
100475de:	2290      	movs	r2, #144	@ 0x90
100475e0:	5c9b      	ldrb	r3, [r3, r2]
100475e2:	2201      	movs	r2, #1
100475e4:	4053      	eors	r3, r2
100475e6:	b2db      	uxtb	r3, r3
100475e8:	2b00      	cmp	r3, #0
100475ea:	d010      	beq.n	1004760e <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
100475ec:	4b0b      	ldr	r3, [pc, #44]	@ (1004761c <_virtualTimeBaseEnable+0x54>)
100475ee:	0018      	movs	r0, r3
100475f0:	f7ff fe58 	bl	100472a4 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
100475f4:	4b08      	ldr	r3, [pc, #32]	@ (10047618 <_virtualTimeBaseEnable+0x50>)
100475f6:	2290      	movs	r2, #144	@ 0x90
100475f8:	2101      	movs	r1, #1
100475fa:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
100475fc:	e007      	b.n	1004760e <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
100475fe:	4b07      	ldr	r3, [pc, #28]	@ (1004761c <_virtualTimeBaseEnable+0x54>)
10047600:	0018      	movs	r0, r3
10047602:	f7ff fc23 	bl	10046e4c <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
10047606:	4b04      	ldr	r3, [pc, #16]	@ (10047618 <_virtualTimeBaseEnable+0x50>)
10047608:	2290      	movs	r2, #144	@ 0x90
1004760a:	2100      	movs	r1, #0
1004760c:	5499      	strb	r1, [r3, r2]
}
1004760e:	46c0      	nop			@ (mov r8, r8)
10047610:	46bd      	mov	sp, r7
10047612:	b002      	add	sp, #8
10047614:	bd80      	pop	{r7, pc}
10047616:	46c0      	nop			@ (mov r8, r8)
10047618:	20000578 	.word	0x20000578
1004761c:	200005b8 	.word	0x200005b8

10047620 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10047620:	b580      	push	{r7, lr}
10047622:	b086      	sub	sp, #24
10047624:	af00      	add	r7, sp, #0
10047626:	6078      	str	r0, [r7, #4]
10047628:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004762a:	687b      	ldr	r3, [r7, #4]
1004762c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004762e:	2300      	movs	r3, #0
10047630:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
10047632:	687b      	ldr	r3, [r7, #4]
10047634:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
10047636:	e004      	b.n	10047642 <_remove_timer_in_queue+0x22>
  {
    prev = current;
10047638:	697b      	ldr	r3, [r7, #20]
1004763a:	613b      	str	r3, [r7, #16]
    current = current->next;
1004763c:	697b      	ldr	r3, [r7, #20]
1004763e:	691b      	ldr	r3, [r3, #16]
10047640:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
10047642:	697b      	ldr	r3, [r7, #20]
10047644:	2b00      	cmp	r3, #0
10047646:	d003      	beq.n	10047650 <_remove_timer_in_queue+0x30>
10047648:	697a      	ldr	r2, [r7, #20]
1004764a:	683b      	ldr	r3, [r7, #0]
1004764c:	429a      	cmp	r2, r3
1004764e:	d1f3      	bne.n	10047638 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
10047650:	697b      	ldr	r3, [r7, #20]
10047652:	2b00      	cmp	r3, #0
10047654:	d00b      	beq.n	1004766e <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
10047656:	697a      	ldr	r2, [r7, #20]
10047658:	687b      	ldr	r3, [r7, #4]
1004765a:	429a      	cmp	r2, r3
1004765c:	d103      	bne.n	10047666 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004765e:	697b      	ldr	r3, [r7, #20]
10047660:	691b      	ldr	r3, [r3, #16]
10047662:	60fb      	str	r3, [r7, #12]
10047664:	e003      	b.n	1004766e <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
10047666:	697b      	ldr	r3, [r7, #20]
10047668:	691a      	ldr	r2, [r3, #16]
1004766a:	693b      	ldr	r3, [r7, #16]
1004766c:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004766e:	68fb      	ldr	r3, [r7, #12]
}
10047670:	0018      	movs	r0, r3
10047672:	46bd      	mov	sp, r7
10047674:	b006      	add	sp, #24
10047676:	bd80      	pop	{r7, pc}

10047678 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
10047678:	b5b0      	push	{r4, r5, r7, lr}
1004767a:	b088      	sub	sp, #32
1004767c:	af00      	add	r7, sp, #0
1004767e:	6078      	str	r0, [r7, #4]
10047680:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
10047682:	687b      	ldr	r3, [r7, #4]
10047684:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
10047686:	2300      	movs	r3, #0
10047688:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004768a:	687b      	ldr	r3, [r7, #4]
1004768c:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004768e:	683b      	ldr	r3, [r7, #0]
10047690:	687a      	ldr	r2, [r7, #4]
10047692:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
10047694:	2300      	movs	r3, #0
10047696:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
10047698:	e021      	b.n	100476de <_check_callbacks+0x66>
  {

    if (curr->active)
1004769a:	69fb      	ldr	r3, [r7, #28]
1004769c:	7b1b      	ldrb	r3, [r3, #12]
1004769e:	2b00      	cmp	r3, #0
100476a0:	d015      	beq.n	100476ce <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
100476a2:	69fb      	ldr	r3, [r7, #28]
100476a4:	681c      	ldr	r4, [r3, #0]
100476a6:	685d      	ldr	r5, [r3, #4]
100476a8:	f7ff fba4 	bl	10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>
100476ac:	0002      	movs	r2, r0
100476ae:	000b      	movs	r3, r1
100476b0:	1aa4      	subs	r4, r4, r2
100476b2:	419d      	sbcs	r5, r3
100476b4:	0022      	movs	r2, r4
100476b6:	002b      	movs	r3, r5
100476b8:	60ba      	str	r2, [r7, #8]
100476ba:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
100476bc:	68fb      	ldr	r3, [r7, #12]
100476be:	2b00      	cmp	r3, #0
100476c0:	dc11      	bgt.n	100476e6 <_check_callbacks+0x6e>
100476c2:	68fb      	ldr	r3, [r7, #12]
100476c4:	2b00      	cmp	r3, #0
100476c6:	d102      	bne.n	100476ce <_check_callbacks+0x56>
100476c8:	68bb      	ldr	r3, [r7, #8]
100476ca:	2b05      	cmp	r3, #5
100476cc:	d80b      	bhi.n	100476e6 <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
100476ce:	69fb      	ldr	r3, [r7, #28]
100476d0:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
100476d2:	69fb      	ldr	r3, [r7, #28]
100476d4:	691b      	ldr	r3, [r3, #16]
100476d6:	61fb      	str	r3, [r7, #28]
    expiredCount++;
100476d8:	693b      	ldr	r3, [r7, #16]
100476da:	3301      	adds	r3, #1
100476dc:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
100476de:	69fb      	ldr	r3, [r7, #28]
100476e0:	2b00      	cmp	r3, #0
100476e2:	d1da      	bne.n	1004769a <_check_callbacks+0x22>
100476e4:	e000      	b.n	100476e8 <_check_callbacks+0x70>
        break;
100476e6:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
100476e8:	693b      	ldr	r3, [r7, #16]
100476ea:	2b00      	cmp	r3, #0
100476ec:	d005      	beq.n	100476fa <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
100476ee:	69bb      	ldr	r3, [r7, #24]
100476f0:	2200      	movs	r2, #0
100476f2:	611a      	str	r2, [r3, #16]
    returnValue = curr;
100476f4:	69fb      	ldr	r3, [r7, #28]
100476f6:	617b      	str	r3, [r7, #20]
100476f8:	e002      	b.n	10047700 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
100476fa:	683b      	ldr	r3, [r7, #0]
100476fc:	2200      	movs	r2, #0
100476fe:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
10047700:	697b      	ldr	r3, [r7, #20]
}
10047702:	0018      	movs	r0, r3
10047704:	46bd      	mov	sp, r7
10047706:	b008      	add	sp, #32
10047708:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004770c <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
1004770c:	b580      	push	{r7, lr}
1004770e:	b084      	sub	sp, #16
10047710:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10047712:	4b17      	ldr	r3, [pc, #92]	@ (10047770 <_updateCalibrationData+0x64>)
10047714:	781b      	ldrb	r3, [r3, #0]
10047716:	2b00      	cmp	r3, #0
10047718:	d015      	beq.n	10047746 <_updateCalibrationData+0x3a>
  {
    _get_calibration_data(&RADIO_TIMER_Context.calibrationData);
1004771a:	4b16      	ldr	r3, [pc, #88]	@ (10047774 <_updateCalibrationData+0x68>)
1004771c:	0018      	movs	r0, r3
1004771e:	f7ff fc67 	bl	10046ff0 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
10047722:	4b13      	ldr	r3, [pc, #76]	@ (10047770 <_updateCalibrationData+0x64>)
10047724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
10047726:	b29a      	uxth	r2, r3
10047728:	4b11      	ldr	r3, [pc, #68]	@ (10047770 <_updateCalibrationData+0x64>)
1004772a:	699b      	ldr	r3, [r3, #24]
1004772c:	0019      	movs	r1, r3
1004772e:	0010      	movs	r0, r2
10047730:	f7ff fd8a 	bl	10047248 <_update_xtal_startup_time>
    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
10047734:	4b0e      	ldr	r3, [pc, #56]	@ (10047770 <_updateCalibrationData+0x64>)
10047736:	2100      	movs	r1, #0
10047738:	0018      	movs	r0, r3
1004773a:	f7ff fcc1 	bl	100470c0 <_configureTxRxDelay>
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004773e:	4b0c      	ldr	r3, [pc, #48]	@ (10047770 <_updateCalibrationData+0x64>)
10047740:	2234      	movs	r2, #52	@ 0x34
10047742:	2101      	movs	r1, #1
10047744:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047746:	f3ef 8310 	mrs	r3, PRIMASK
1004774a:	607b      	str	r3, [r7, #4]
  return(result);
1004774c:	687b      	ldr	r3, [r7, #4]
  }
  ATOMIC_SECTION_BEGIN();
1004774e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10047750:	b672      	cpsid	i
}
10047752:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
10047754:	4b06      	ldr	r3, [pc, #24]	@ (10047770 <_updateCalibrationData+0x64>)
10047756:	0018      	movs	r0, r3
10047758:	f000 f80e 	bl	10047778 <_update_system_time>
1004775c:	68fb      	ldr	r3, [r7, #12]
1004775e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047760:	68bb      	ldr	r3, [r7, #8]
10047762:	f383 8810 	msr	PRIMASK, r3
}
10047766:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10047768:	46c0      	nop			@ (mov r8, r8)
1004776a:	46bd      	mov	sp, r7
1004776c:	b004      	add	sp, #16
1004776e:	bd80      	pop	{r7, pc}
10047770:	20000578 	.word	0x20000578
10047774:	20000588 	.word	0x20000588

10047778 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
10047778:	b5b0      	push	{r4, r5, r7, lr}
1004777a:	b088      	sub	sp, #32
1004777c:	af00      	add	r7, sp, #0
1004777e:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047780:	4b2a      	ldr	r3, [pc, #168]	@ (1004782c <_update_system_time+0xb4>)
10047782:	0018      	movs	r0, r3
10047784:	f7fe ff29 	bl	100465da <LL_RADIO_TIMER_GetAbsoluteTime>
10047788:	0003      	movs	r3, r0
1004778a:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
1004778c:	697b      	ldr	r3, [r7, #20]
1004778e:	6a1b      	ldr	r3, [r3, #32]
10047790:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
10047792:	697b      	ldr	r3, [r7, #20]
10047794:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
10047796:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
10047798:	697b      	ldr	r3, [r7, #20]
1004779a:	2280      	movs	r2, #128	@ 0x80
1004779c:	589b      	ldr	r3, [r3, r2]
1004779e:	69fa      	ldr	r2, [r7, #28]
100477a0:	1ad3      	subs	r3, r2, r3
100477a2:	4a23      	ldr	r2, [pc, #140]	@ (10047830 <_update_system_time+0xb8>)
100477a4:	69b9      	ldr	r1, [r7, #24]
100477a6:	0018      	movs	r0, r3
100477a8:	f7f8 fc8a 	bl	100400c0 <blue_unit_conversion>
100477ac:	0003      	movs	r3, r0
100477ae:	60bb      	str	r3, [r7, #8]
100477b0:	2300      	movs	r3, #0
100477b2:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
100477b4:	68ba      	ldr	r2, [r7, #8]
100477b6:	68fb      	ldr	r3, [r7, #12]
100477b8:	1912      	adds	r2, r2, r4
100477ba:	416b      	adcs	r3, r5
100477bc:	6979      	ldr	r1, [r7, #20]
100477be:	670a      	str	r2, [r1, #112]	@ 0x70
100477c0:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
100477c2:	697b      	ldr	r3, [r7, #20]
100477c4:	781b      	ldrb	r3, [r3, #0]
100477c6:	2b00      	cmp	r3, #0
100477c8:	d11d      	bne.n	10047806 <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
100477ca:	697b      	ldr	r3, [r7, #20]
100477cc:	2280      	movs	r2, #128	@ 0x80
100477ce:	589b      	ldr	r3, [r3, r2]
100477d0:	69fa      	ldr	r2, [r7, #28]
100477d2:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
100477d4:	697b      	ldr	r3, [r7, #20]
100477d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
100477d8:	429a      	cmp	r2, r3
100477da:	d214      	bcs.n	10047806 <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
100477dc:	4a14      	ldr	r2, [pc, #80]	@ (10047830 <_update_system_time+0xb8>)
100477de:	69b9      	ldr	r1, [r7, #24]
100477e0:	2301      	movs	r3, #1
100477e2:	425b      	negs	r3, r3
100477e4:	0018      	movs	r0, r3
100477e6:	f7f8 fc6b 	bl	100400c0 <blue_unit_conversion>
100477ea:	0001      	movs	r1, r0
100477ec:	697b      	ldr	r3, [r7, #20]
100477ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100477f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100477f2:	6039      	str	r1, [r7, #0]
100477f4:	2100      	movs	r1, #0
100477f6:	6079      	str	r1, [r7, #4]
100477f8:	6838      	ldr	r0, [r7, #0]
100477fa:	6879      	ldr	r1, [r7, #4]
100477fc:	1812      	adds	r2, r2, r0
100477fe:	414b      	adcs	r3, r1
10047800:	6979      	ldr	r1, [r7, #20]
10047802:	670a      	str	r2, [r1, #112]	@ 0x70
10047804:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
10047806:	697b      	ldr	r3, [r7, #20]
10047808:	2180      	movs	r1, #128	@ 0x80
1004780a:	69fa      	ldr	r2, [r7, #28]
1004780c:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
1004780e:	697b      	ldr	r3, [r7, #20]
10047810:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10047812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047814:	6979      	ldr	r1, [r7, #20]
10047816:	628a      	str	r2, [r1, #40]	@ 0x28
10047818:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
1004781a:	697b      	ldr	r3, [r7, #20]
1004781c:	69da      	ldr	r2, [r3, #28]
1004781e:	697b      	ldr	r3, [r7, #20]
10047820:	621a      	str	r2, [r3, #32]
}
10047822:	46c0      	nop			@ (mov r8, r8)
10047824:	46bd      	mov	sp, r7
10047826:	b008      	add	sp, #32
10047828:	bdb0      	pop	{r4, r5, r7, pc}
1004782a:	46c0      	nop			@ (mov r8, r8)
1004782c:	60001800 	.word	0x60001800
10047830:	00000635 	.word	0x00000635

10047834 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
10047834:	b5b0      	push	{r4, r5, r7, lr}
10047836:	b08a      	sub	sp, #40	@ 0x28
10047838:	af00      	add	r7, sp, #0
1004783a:	6078      	str	r0, [r7, #4]
1004783c:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
1004783e:	683b      	ldr	r3, [r7, #0]
10047840:	2200      	movs	r2, #0
10047842:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
10047844:	687b      	ldr	r3, [r7, #4]
10047846:	7a9b      	ldrb	r3, [r3, #10]
10047848:	2b00      	cmp	r3, #0
1004784a:	d100      	bne.n	1004784e <_check_radio_activity+0x1a>
1004784c:	e070      	b.n	10047930 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004784e:	4b3a      	ldr	r3, [pc, #232]	@ (10047938 <_check_radio_activity+0x104>)
10047850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
10047854:	4938      	ldr	r1, [pc, #224]	@ (10047938 <_check_radio_activity+0x104>)
10047856:	6849      	ldr	r1, [r1, #4]
10047858:	000c      	movs	r4, r1
1004785a:	2100      	movs	r1, #0
1004785c:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004785e:	1912      	adds	r2, r2, r4
10047860:	416b      	adcs	r3, r5
10047862:	623a      	str	r2, [r7, #32]
10047864:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047866:	f3ef 8310 	mrs	r3, PRIMASK
1004786a:	60fb      	str	r3, [r7, #12]
  return(result);
1004786c:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
1004786e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047870:	b672      	cpsid	i
}
10047872:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
10047874:	f7ff fabe 	bl	10046df4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10047878:	0002      	movs	r2, r0
1004787a:	000b      	movs	r3, r1
1004787c:	613a      	str	r2, [r7, #16]
1004787e:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10047880:	687b      	ldr	r3, [r7, #4]
10047882:	681a      	ldr	r2, [r3, #0]
10047884:	685b      	ldr	r3, [r3, #4]
10047886:	6a38      	ldr	r0, [r7, #32]
10047888:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004788a:	24c8      	movs	r4, #200	@ 0xc8
1004788c:	02a4      	lsls	r4, r4, #10
1004788e:	2500      	movs	r5, #0
10047890:	1900      	adds	r0, r0, r4
10047892:	4169      	adcs	r1, r5
10047894:	4299      	cmp	r1, r3
10047896:	d812      	bhi.n	100478be <_check_radio_activity+0x8a>
10047898:	d101      	bne.n	1004789e <_check_radio_activity+0x6a>
1004789a:	4290      	cmp	r0, r2
1004789c:	d80f      	bhi.n	100478be <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
1004789e:	6a3a      	ldr	r2, [r7, #32]
100478a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100478a2:	20b9      	movs	r0, #185	@ 0xb9
100478a4:	0040      	lsls	r0, r0, #1
100478a6:	2100      	movs	r1, #0
100478a8:	1812      	adds	r2, r2, r0
100478aa:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
100478ac:	6979      	ldr	r1, [r7, #20]
100478ae:	4299      	cmp	r1, r3
100478b0:	d805      	bhi.n	100478be <_check_radio_activity+0x8a>
100478b2:	6979      	ldr	r1, [r7, #20]
100478b4:	4299      	cmp	r1, r3
100478b6:	d135      	bne.n	10047924 <_check_radio_activity+0xf0>
100478b8:	6939      	ldr	r1, [r7, #16]
100478ba:	4291      	cmp	r1, r2
100478bc:	d932      	bls.n	10047924 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
100478be:	687b      	ldr	r3, [r7, #4]
100478c0:	681a      	ldr	r2, [r3, #0]
100478c2:	685b      	ldr	r3, [r3, #4]
100478c4:	204c      	movs	r0, #76	@ 0x4c
100478c6:	4240      	negs	r0, r0
100478c8:	17c1      	asrs	r1, r0, #31
100478ca:	1880      	adds	r0, r0, r2
100478cc:	4159      	adcs	r1, r3
100478ce:	693a      	ldr	r2, [r7, #16]
100478d0:	697b      	ldr	r3, [r7, #20]
100478d2:	240a      	movs	r4, #10
100478d4:	2500      	movs	r5, #0
100478d6:	1912      	adds	r2, r2, r4
100478d8:	416b      	adcs	r3, r5
100478da:	4299      	cmp	r1, r3
100478dc:	d802      	bhi.n	100478e4 <_check_radio_activity+0xb0>
100478de:	d11a      	bne.n	10047916 <_check_radio_activity+0xe2>
100478e0:	4290      	cmp	r0, r2
100478e2:	d918      	bls.n	10047916 <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
100478e4:	687b      	ldr	r3, [r7, #4]
100478e6:	681a      	ldr	r2, [r3, #0]
100478e8:	685b      	ldr	r3, [r3, #4]
100478ea:	0010      	movs	r0, r2
100478ec:	687b      	ldr	r3, [r7, #4]
100478ee:	7b19      	ldrb	r1, [r3, #12]
100478f0:	687b      	ldr	r3, [r7, #4]
100478f2:	7a1b      	ldrb	r3, [r3, #8]
100478f4:	001a      	movs	r2, r3
100478f6:	f000 f821 	bl	1004793c <TIMER_SetRadioTimerValue>
100478fa:	0003      	movs	r3, r0
100478fc:	001a      	movs	r2, r3
100478fe:	683b      	ldr	r3, [r7, #0]
10047900:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
10047902:	687b      	ldr	r3, [r7, #4]
10047904:	2200      	movs	r2, #0
10047906:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10047908:	687b      	ldr	r3, [r7, #4]
1004790a:	2201      	movs	r2, #1
1004790c:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004790e:	687b      	ldr	r3, [r7, #4]
10047910:	2201      	movs	r2, #1
10047912:	72da      	strb	r2, [r3, #11]
10047914:	e006      	b.n	10047924 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
10047916:	4b08      	ldr	r3, [pc, #32]	@ (10047938 <_check_radio_activity+0x104>)
10047918:	2262      	movs	r2, #98	@ 0x62
1004791a:	2100      	movs	r1, #0
1004791c:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004791e:	683b      	ldr	r3, [r7, #0]
10047920:	2201      	movs	r2, #1
10047922:	701a      	strb	r2, [r3, #0]
10047924:	69fb      	ldr	r3, [r7, #28]
10047926:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047928:	68bb      	ldr	r3, [r7, #8]
1004792a:	f383 8810 	msr	PRIMASK, r3
}
1004792e:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
10047930:	46c0      	nop			@ (mov r8, r8)
10047932:	46bd      	mov	sp, r7
10047934:	b00a      	add	sp, #40	@ 0x28
10047936:	bdb0      	pop	{r4, r5, r7, pc}
10047938:	20000578 	.word	0x20000578

1004793c <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
1004793c:	b580      	push	{r7, lr}
1004793e:	b08a      	sub	sp, #40	@ 0x28
10047940:	af00      	add	r7, sp, #0
10047942:	6078      	str	r0, [r7, #4]
10047944:	0008      	movs	r0, r1
10047946:	0011      	movs	r1, r2
10047948:	1cfb      	adds	r3, r7, #3
1004794a:	1c02      	adds	r2, r0, #0
1004794c:	701a      	strb	r2, [r3, #0]
1004794e:	1cbb      	adds	r3, r7, #2
10047950:	1c0a      	adds	r2, r1, #0
10047952:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
10047954:	1cfb      	adds	r3, r7, #3
10047956:	781b      	ldrb	r3, [r3, #0]
10047958:	2b00      	cmp	r3, #0
1004795a:	d015      	beq.n	10047988 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
1004795c:	1cbb      	adds	r3, r7, #2
1004795e:	781b      	ldrb	r3, [r3, #0]
10047960:	2b00      	cmp	r3, #0
10047962:	d008      	beq.n	10047976 <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
10047964:	4b67      	ldr	r3, [pc, #412]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
10047966:	2238      	movs	r2, #56	@ 0x38
10047968:	5c9b      	ldrb	r3, [r3, r2]
1004796a:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004796c:	4b65      	ldr	r3, [pc, #404]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
1004796e:	223c      	movs	r2, #60	@ 0x3c
10047970:	5c9b      	ldrb	r3, [r3, r2]
10047972:	61fb      	str	r3, [r7, #28]
10047974:	e01d      	b.n	100479b2 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
10047976:	4b63      	ldr	r3, [pc, #396]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
10047978:	2239      	movs	r2, #57	@ 0x39
1004797a:	5c9b      	ldrb	r3, [r3, r2]
1004797c:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004797e:	4b61      	ldr	r3, [pc, #388]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
10047980:	223c      	movs	r2, #60	@ 0x3c
10047982:	5c9b      	ldrb	r3, [r3, r2]
10047984:	61fb      	str	r3, [r7, #28]
10047986:	e014      	b.n	100479b2 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
10047988:	1cbb      	adds	r3, r7, #2
1004798a:	781b      	ldrb	r3, [r3, #0]
1004798c:	2b00      	cmp	r3, #0
1004798e:	d008      	beq.n	100479a2 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
10047990:	4b5c      	ldr	r3, [pc, #368]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
10047992:	223a      	movs	r2, #58	@ 0x3a
10047994:	5c9b      	ldrb	r3, [r3, r2]
10047996:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047998:	4b5a      	ldr	r3, [pc, #360]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
1004799a:	223c      	movs	r2, #60	@ 0x3c
1004799c:	5c9b      	ldrb	r3, [r3, r2]
1004799e:	61fb      	str	r3, [r7, #28]
100479a0:	e007      	b.n	100479b2 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
100479a2:	4b58      	ldr	r3, [pc, #352]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
100479a4:	223b      	movs	r2, #59	@ 0x3b
100479a6:	5c9b      	ldrb	r3, [r3, r2]
100479a8:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100479aa:	4b56      	ldr	r3, [pc, #344]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
100479ac:	223c      	movs	r2, #60	@ 0x3c
100479ae:	5c9b      	ldrb	r3, [r3, r2]
100479b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
100479b2:	230c      	movs	r3, #12
100479b4:	18fa      	adds	r2, r7, r3
100479b6:	4b53      	ldr	r3, [pc, #332]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
100479b8:	0011      	movs	r1, r2
100479ba:	0018      	movs	r0, r3
100479bc:	f7ff fce4 	bl	10047388 <_get_system_time_and_machine>
100479c0:	0002      	movs	r2, r0
100479c2:	000b      	movs	r3, r1
100479c4:	687b      	ldr	r3, [r7, #4]
100479c6:	1a9b      	subs	r3, r3, r2
100479c8:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
100479ca:	4b4e      	ldr	r3, [pc, #312]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
100479cc:	699b      	ldr	r3, [r3, #24]
100479ce:	0019      	movs	r1, r3
100479d0:	4a4d      	ldr	r2, [pc, #308]	@ (10047b08 <TIMER_SetRadioTimerValue+0x1cc>)
100479d2:	697b      	ldr	r3, [r7, #20]
100479d4:	0018      	movs	r0, r3
100479d6:	f7f8 fb73 	bl	100400c0 <blue_unit_conversion>
100479da:	0003      	movs	r3, r0
100479dc:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
100479de:	4b49      	ldr	r3, [pc, #292]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
100479e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
100479e2:	69fb      	ldr	r3, [r7, #28]
100479e4:	18d3      	adds	r3, r2, r3
100479e6:	33c8      	adds	r3, #200	@ 0xc8
100479e8:	697a      	ldr	r2, [r7, #20]
100479ea:	429a      	cmp	r2, r3
100479ec:	d92f      	bls.n	10047a4e <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
100479ee:	4b47      	ldr	r3, [pc, #284]	@ (10047b0c <TIMER_SetRadioTimerValue+0x1d0>)
100479f0:	795b      	ldrb	r3, [r3, #5]
100479f2:	b2db      	uxtb	r3, r3
100479f4:	001a      	movs	r2, r3
100479f6:	693b      	ldr	r3, [r7, #16]
100479f8:	1a9a      	subs	r2, r3, r2
100479fa:	6a3b      	ldr	r3, [r7, #32]
100479fc:	1ad3      	subs	r3, r2, r3
100479fe:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10047a00:	68fa      	ldr	r2, [r7, #12]
10047a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047a04:	18d3      	adds	r3, r2, r3
10047a06:	4a42      	ldr	r2, [pc, #264]	@ (10047b10 <TIMER_SetRadioTimerValue+0x1d4>)
10047a08:	0019      	movs	r1, r3
10047a0a:	0010      	movs	r0, r2
10047a0c:	f7fe fdcd 	bl	100465aa <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047a10:	4b3f      	ldr	r3, [pc, #252]	@ (10047b10 <TIMER_SetRadioTimerValue+0x1d4>)
10047a12:	2100      	movs	r1, #0
10047a14:	0018      	movs	r0, r3
10047a16:	f7fe fdf9 	bl	1004660c <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047a1a:	23c0      	movs	r3, #192	@ 0xc0
10047a1c:	05db      	lsls	r3, r3, #23
10047a1e:	0018      	movs	r0, r3
10047a20:	f7fe fd4a 	bl	100464b8 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047a24:	23c0      	movs	r3, #192	@ 0xc0
10047a26:	05db      	lsls	r3, r3, #23
10047a28:	0018      	movs	r0, r3
10047a2a:	f7fe fd54 	bl	100464d6 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10047a2e:	4b38      	ldr	r3, [pc, #224]	@ (10047b10 <TIMER_SetRadioTimerValue+0x1d4>)
10047a30:	0018      	movs	r0, r3
10047a32:	f7fe fd6b 	bl	1004650c <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10047a36:	4b36      	ldr	r3, [pc, #216]	@ (10047b10 <TIMER_SetRadioTimerValue+0x1d4>)
10047a38:	0018      	movs	r0, r3
10047a3a:	f7fe fdd8 	bl	100465ee <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10047a3e:	4b33      	ldr	r3, [pc, #204]	@ (10047b0c <TIMER_SetRadioTimerValue+0x1d0>)
10047a40:	795b      	ldrb	r3, [r3, #5]
10047a42:	b2db      	uxtb	r3, r3
10047a44:	001a      	movs	r2, r3
10047a46:	6a3b      	ldr	r3, [r7, #32]
10047a48:	189b      	adds	r3, r3, r2
10047a4a:	623b      	str	r3, [r7, #32]
10047a4c:	e021      	b.n	10047a92 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10047a4e:	4b2d      	ldr	r3, [pc, #180]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
10047a50:	223d      	movs	r2, #61	@ 0x3d
10047a52:	5c9b      	ldrb	r3, [r3, r2]
10047a54:	001a      	movs	r2, r3
10047a56:	693b      	ldr	r3, [r7, #16]
10047a58:	1a9a      	subs	r2, r3, r2
10047a5a:	6a3b      	ldr	r3, [r7, #32]
10047a5c:	1ad3      	subs	r3, r2, r3
10047a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10047a60:	68fa      	ldr	r2, [r7, #12]
10047a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10047a64:	18d2      	adds	r2, r2, r3
10047a66:	23c0      	movs	r3, #192	@ 0xc0
10047a68:	05db      	lsls	r3, r3, #23
10047a6a:	0011      	movs	r1, r2
10047a6c:	0018      	movs	r0, r3
10047a6e:	f7fe fd41 	bl	100464f4 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047a72:	4b27      	ldr	r3, [pc, #156]	@ (10047b10 <TIMER_SetRadioTimerValue+0x1d4>)
10047a74:	0018      	movs	r0, r3
10047a76:	f7fe fd59 	bl	1004652c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
10047a7a:	23c0      	movs	r3, #192	@ 0xc0
10047a7c:	05db      	lsls	r3, r3, #23
10047a7e:	0018      	movs	r0, r3
10047a80:	f7fe fd0a 	bl	10046498 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
10047a84:	4b1f      	ldr	r3, [pc, #124]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
10047a86:	223d      	movs	r2, #61	@ 0x3d
10047a88:	5c9b      	ldrb	r3, [r3, r2]
10047a8a:	001a      	movs	r2, r3
10047a8c:	6a3b      	ldr	r3, [r7, #32]
10047a8e:	189b      	adds	r3, r3, r2
10047a90:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
10047a92:	68fa      	ldr	r2, [r7, #12]
10047a94:	693b      	ldr	r3, [r7, #16]
10047a96:	18d2      	adds	r2, r2, r3
10047a98:	4b1a      	ldr	r3, [pc, #104]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
10047a9a:	2188      	movs	r1, #136	@ 0x88
10047a9c:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
10047a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10047aa0:	6a3b      	ldr	r3, [r7, #32]
10047aa2:	18d2      	adds	r2, r2, r3
10047aa4:	6a3b      	ldr	r3, [r7, #32]
10047aa6:	3305      	adds	r3, #5
10047aa8:	429a      	cmp	r2, r3
10047aaa:	d212      	bcs.n	10047ad2 <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047aac:	23c0      	movs	r3, #192	@ 0xc0
10047aae:	05db      	lsls	r3, r3, #23
10047ab0:	0018      	movs	r0, r3
10047ab2:	f7fe fd01 	bl	100464b8 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10047ab6:	23c0      	movs	r3, #192	@ 0xc0
10047ab8:	05db      	lsls	r3, r3, #23
10047aba:	0018      	movs	r0, r3
10047abc:	f7fe fd0b 	bl	100464d6 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047ac0:	4b13      	ldr	r3, [pc, #76]	@ (10047b10 <TIMER_SetRadioTimerValue+0x1d4>)
10047ac2:	0018      	movs	r0, r3
10047ac4:	f7fe fd32 	bl	1004652c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
10047ac8:	231b      	movs	r3, #27
10047aca:	18fb      	adds	r3, r7, r3
10047acc:	2201      	movs	r2, #1
10047ace:	701a      	strb	r2, [r3, #0]
10047ad0:	e010      	b.n	10047af4 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047ad2:	4b0c      	ldr	r3, [pc, #48]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
10047ad4:	69db      	ldr	r3, [r3, #28]
10047ad6:	0019      	movs	r1, r3
10047ad8:	4a0e      	ldr	r2, [pc, #56]	@ (10047b14 <TIMER_SetRadioTimerValue+0x1d8>)
10047ada:	6a3b      	ldr	r3, [r7, #32]
10047adc:	0018      	movs	r0, r3
10047ade:	f7f8 faef 	bl	100400c0 <blue_unit_conversion>
10047ae2:	0003      	movs	r3, r0
10047ae4:	b2d9      	uxtb	r1, r3
10047ae6:	4b07      	ldr	r3, [pc, #28]	@ (10047b04 <TIMER_SetRadioTimerValue+0x1c8>)
10047ae8:	2284      	movs	r2, #132	@ 0x84
10047aea:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
10047aec:	231b      	movs	r3, #27
10047aee:	18fb      	adds	r3, r7, r3
10047af0:	2200      	movs	r2, #0
10047af2:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
10047af4:	231b      	movs	r3, #27
10047af6:	18fb      	adds	r3, r7, r3
10047af8:	781b      	ldrb	r3, [r3, #0]
}
10047afa:	0018      	movs	r0, r3
10047afc:	46bd      	mov	sp, r7
10047afe:	b00a      	add	sp, #40	@ 0x28
10047b00:	bd80      	pop	{r7, pc}
10047b02:	46c0      	nop			@ (mov r8, r8)
10047b04:	20000578 	.word	0x20000578
10047b08:	00000326 	.word	0x00000326
10047b0c:	200000c0 	.word	0x200000c0
10047b10:	60001800 	.word	0x60001800
10047b14:	00000635 	.word	0x00000635

10047b18 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10047b18:	b5b0      	push	{r4, r5, r7, lr}
10047b1a:	b084      	sub	sp, #16
10047b1c:	af00      	add	r7, sp, #0
10047b1e:	6078      	str	r0, [r7, #4]
10047b20:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10047b22:	2308      	movs	r3, #8
10047b24:	18fa      	adds	r2, r7, r3
10047b26:	4b12      	ldr	r3, [pc, #72]	@ (10047b70 <TIMER_GetPastSysTime+0x58>)
10047b28:	0011      	movs	r1, r2
10047b2a:	0018      	movs	r0, r3
10047b2c:	f7ff fc2c 	bl	10047388 <_get_system_time_and_machine>
10047b30:	0002      	movs	r2, r0
10047b32:	000b      	movs	r3, r1
10047b34:	6839      	ldr	r1, [r7, #0]
10047b36:	600a      	str	r2, [r1, #0]
10047b38:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047b3a:	68ba      	ldr	r2, [r7, #8]
10047b3c:	687b      	ldr	r3, [r7, #4]
10047b3e:	1ad0      	subs	r0, r2, r3
10047b40:	4b0b      	ldr	r3, [pc, #44]	@ (10047b70 <TIMER_GetPastSysTime+0x58>)
10047b42:	69db      	ldr	r3, [r3, #28]
10047b44:	0019      	movs	r1, r3
10047b46:	4b0b      	ldr	r3, [pc, #44]	@ (10047b74 <TIMER_GetPastSysTime+0x5c>)
10047b48:	001a      	movs	r2, r3
10047b4a:	f7f8 fab9 	bl	100400c0 <blue_unit_conversion>
10047b4e:	0003      	movs	r3, r0
10047b50:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
10047b52:	683b      	ldr	r3, [r7, #0]
10047b54:	681a      	ldr	r2, [r3, #0]
10047b56:	685b      	ldr	r3, [r3, #4]
10047b58:	68f9      	ldr	r1, [r7, #12]
10047b5a:	000c      	movs	r4, r1
10047b5c:	2100      	movs	r1, #0
10047b5e:	000d      	movs	r5, r1
10047b60:	1b12      	subs	r2, r2, r4
10047b62:	41ab      	sbcs	r3, r5
}
10047b64:	0010      	movs	r0, r2
10047b66:	0019      	movs	r1, r3
10047b68:	46bd      	mov	sp, r7
10047b6a:	b004      	add	sp, #16
10047b6c:	bdb0      	pop	{r4, r5, r7, pc}
10047b6e:	46c0      	nop			@ (mov r8, r8)
10047b70:	20000578 	.word	0x20000578
10047b74:	00000635 	.word	0x00000635

10047b78 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10047b78:	b580      	push	{r7, lr}
10047b7a:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
10047b7c:	f7ff f9be 	bl	10046efc <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
10047b80:	f7f9 fe26 	bl	100417d0 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
10047b84:	46c0      	nop			@ (mov r8, r8)
10047b86:	46bd      	mov	sp, r7
10047b88:	bd80      	pop	{r7, pc}

10047b8a <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
10047b8a:	b580      	push	{r7, lr}
10047b8c:	b082      	sub	sp, #8
10047b8e:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
10047b90:	2300      	movs	r3, #0
10047b92:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
10047b94:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
10047b96:	23c0      	movs	r3, #192	@ 0xc0
10047b98:	05db      	lsls	r3, r3, #23
10047b9a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
10047b9c:	23c0      	movs	r3, #192	@ 0xc0
10047b9e:	05db      	lsls	r3, r3, #23
10047ba0:	2101      	movs	r1, #1
10047ba2:	430a      	orrs	r2, r1
10047ba4:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10047ba6:	23c0      	movs	r3, #192	@ 0xc0
10047ba8:	05db      	lsls	r3, r3, #23
10047baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10047bac:	607b      	str	r3, [r7, #4]
}
10047bae:	46c0      	nop			@ (mov r8, r8)
10047bb0:	46bd      	mov	sp, r7
10047bb2:	b002      	add	sp, #8
10047bb4:	bd80      	pop	{r7, pc}
	...

10047bb8 <LL_PWR_SetNoPullB>:
{
10047bb8:	b580      	push	{r7, lr}
10047bba:	b082      	sub	sp, #8
10047bbc:	af00      	add	r7, sp, #0
10047bbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10047bc0:	4b08      	ldr	r3, [pc, #32]	@ (10047be4 <LL_PWR_SetNoPullB+0x2c>)
10047bc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047bc4:	687b      	ldr	r3, [r7, #4]
10047bc6:	43d9      	mvns	r1, r3
10047bc8:	4b06      	ldr	r3, [pc, #24]	@ (10047be4 <LL_PWR_SetNoPullB+0x2c>)
10047bca:	400a      	ands	r2, r1
10047bcc:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10047bce:	4b05      	ldr	r3, [pc, #20]	@ (10047be4 <LL_PWR_SetNoPullB+0x2c>)
10047bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10047bd2:	687b      	ldr	r3, [r7, #4]
10047bd4:	43d9      	mvns	r1, r3
10047bd6:	4b03      	ldr	r3, [pc, #12]	@ (10047be4 <LL_PWR_SetNoPullB+0x2c>)
10047bd8:	400a      	ands	r2, r1
10047bda:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10047bdc:	46c0      	nop			@ (mov r8, r8)
10047bde:	46bd      	mov	sp, r7
10047be0:	b002      	add	sp, #8
10047be2:	bd80      	pop	{r7, pc}
10047be4:	48500000 	.word	0x48500000

10047be8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
10047be8:	b580      	push	{r7, lr}
10047bea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
10047bec:	4b04      	ldr	r3, [pc, #16]	@ (10047c00 <LL_RCC_HSE_Enable+0x18>)
10047bee:	681a      	ldr	r2, [r3, #0]
10047bf0:	4b03      	ldr	r3, [pc, #12]	@ (10047c00 <LL_RCC_HSE_Enable+0x18>)
10047bf2:	2180      	movs	r1, #128	@ 0x80
10047bf4:	0249      	lsls	r1, r1, #9
10047bf6:	430a      	orrs	r2, r1
10047bf8:	601a      	str	r2, [r3, #0]
}
10047bfa:	46c0      	nop			@ (mov r8, r8)
10047bfc:	46bd      	mov	sp, r7
10047bfe:	bd80      	pop	{r7, pc}
10047c00:	48400000 	.word	0x48400000

10047c04 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
10047c04:	b580      	push	{r7, lr}
10047c06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10047c08:	4b04      	ldr	r3, [pc, #16]	@ (10047c1c <LL_RCC_HSE_Disable+0x18>)
10047c0a:	681a      	ldr	r2, [r3, #0]
10047c0c:	4b03      	ldr	r3, [pc, #12]	@ (10047c1c <LL_RCC_HSE_Disable+0x18>)
10047c0e:	4904      	ldr	r1, [pc, #16]	@ (10047c20 <LL_RCC_HSE_Disable+0x1c>)
10047c10:	400a      	ands	r2, r1
10047c12:	601a      	str	r2, [r3, #0]
}
10047c14:	46c0      	nop			@ (mov r8, r8)
10047c16:	46bd      	mov	sp, r7
10047c18:	bd80      	pop	{r7, pc}
10047c1a:	46c0      	nop			@ (mov r8, r8)
10047c1c:	48400000 	.word	0x48400000
10047c20:	fffeffff 	.word	0xfffeffff

10047c24 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10047c24:	b580      	push	{r7, lr}
10047c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10047c28:	4b07      	ldr	r3, [pc, #28]	@ (10047c48 <LL_RCC_HSE_IsReady+0x24>)
10047c2a:	681a      	ldr	r2, [r3, #0]
10047c2c:	2380      	movs	r3, #128	@ 0x80
10047c2e:	029b      	lsls	r3, r3, #10
10047c30:	401a      	ands	r2, r3
10047c32:	2380      	movs	r3, #128	@ 0x80
10047c34:	029b      	lsls	r3, r3, #10
10047c36:	429a      	cmp	r2, r3
10047c38:	d101      	bne.n	10047c3e <LL_RCC_HSE_IsReady+0x1a>
10047c3a:	2301      	movs	r3, #1
10047c3c:	e000      	b.n	10047c40 <LL_RCC_HSE_IsReady+0x1c>
10047c3e:	2300      	movs	r3, #0
}
10047c40:	0018      	movs	r0, r3
10047c42:	46bd      	mov	sp, r7
10047c44:	bd80      	pop	{r7, pc}
10047c46:	46c0      	nop			@ (mov r8, r8)
10047c48:	48400000 	.word	0x48400000

10047c4c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
10047c4c:	b580      	push	{r7, lr}
10047c4e:	b082      	sub	sp, #8
10047c50:	af00      	add	r7, sp, #0
10047c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
10047c54:	4a0b      	ldr	r2, [pc, #44]	@ (10047c84 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047c56:	2398      	movs	r3, #152	@ 0x98
10047c58:	58d3      	ldr	r3, [r2, r3]
10047c5a:	4a0b      	ldr	r2, [pc, #44]	@ (10047c88 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
10047c5c:	401a      	ands	r2, r3
10047c5e:	687b      	ldr	r3, [r7, #4]
10047c60:	021b      	lsls	r3, r3, #8
10047c62:	4908      	ldr	r1, [pc, #32]	@ (10047c84 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047c64:	4313      	orrs	r3, r2
10047c66:	2298      	movs	r2, #152	@ 0x98
10047c68:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
10047c6a:	4a06      	ldr	r2, [pc, #24]	@ (10047c84 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047c6c:	2398      	movs	r3, #152	@ 0x98
10047c6e:	58d3      	ldr	r3, [r2, r3]
10047c70:	4904      	ldr	r1, [pc, #16]	@ (10047c84 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047c72:	2280      	movs	r2, #128	@ 0x80
10047c74:	4313      	orrs	r3, r2
10047c76:	2298      	movs	r2, #152	@ 0x98
10047c78:	508b      	str	r3, [r1, r2]
}
10047c7a:	46c0      	nop			@ (mov r8, r8)
10047c7c:	46bd      	mov	sp, r7
10047c7e:	b002      	add	sp, #8
10047c80:	bd80      	pop	{r7, pc}
10047c82:	46c0      	nop			@ (mov r8, r8)
10047c84:	48400000 	.word	0x48400000
10047c88:	ffffc0ff 	.word	0xffffc0ff

10047c8c <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
10047c8c:	b580      	push	{r7, lr}
10047c8e:	b082      	sub	sp, #8
10047c90:	af00      	add	r7, sp, #0
10047c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
10047c94:	4a07      	ldr	r2, [pc, #28]	@ (10047cb4 <LL_RCC_HSE_SetCurrentControl+0x28>)
10047c96:	2398      	movs	r3, #152	@ 0x98
10047c98:	58d3      	ldr	r3, [r2, r3]
10047c9a:	2270      	movs	r2, #112	@ 0x70
10047c9c:	4393      	bics	r3, r2
10047c9e:	001a      	movs	r2, r3
10047ca0:	4904      	ldr	r1, [pc, #16]	@ (10047cb4 <LL_RCC_HSE_SetCurrentControl+0x28>)
10047ca2:	687b      	ldr	r3, [r7, #4]
10047ca4:	4313      	orrs	r3, r2
10047ca6:	2298      	movs	r2, #152	@ 0x98
10047ca8:	508b      	str	r3, [r1, r2]
}
10047caa:	46c0      	nop			@ (mov r8, r8)
10047cac:	46bd      	mov	sp, r7
10047cae:	b002      	add	sp, #8
10047cb0:	bd80      	pop	{r7, pc}
10047cb2:	46c0      	nop			@ (mov r8, r8)
10047cb4:	48400000 	.word	0x48400000

10047cb8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
10047cb8:	b580      	push	{r7, lr}
10047cba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047cbc:	4b07      	ldr	r3, [pc, #28]	@ (10047cdc <LL_RCC_HSI_Enable+0x24>)
10047cbe:	689a      	ldr	r2, [r3, #8]
10047cc0:	4b06      	ldr	r3, [pc, #24]	@ (10047cdc <LL_RCC_HSI_Enable+0x24>)
10047cc2:	2104      	movs	r1, #4
10047cc4:	438a      	bics	r2, r1
10047cc6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047cc8:	4b04      	ldr	r3, [pc, #16]	@ (10047cdc <LL_RCC_HSI_Enable+0x24>)
10047cca:	689a      	ldr	r2, [r3, #8]
10047ccc:	4b03      	ldr	r3, [pc, #12]	@ (10047cdc <LL_RCC_HSI_Enable+0x24>)
10047cce:	2102      	movs	r1, #2
10047cd0:	438a      	bics	r2, r1
10047cd2:	609a      	str	r2, [r3, #8]
}
10047cd4:	46c0      	nop			@ (mov r8, r8)
10047cd6:	46bd      	mov	sp, r7
10047cd8:	bd80      	pop	{r7, pc}
10047cda:	46c0      	nop			@ (mov r8, r8)
10047cdc:	48400000 	.word	0x48400000

10047ce0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
10047ce0:	b580      	push	{r7, lr}
10047ce2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047ce4:	4b07      	ldr	r3, [pc, #28]	@ (10047d04 <LL_RCC_HSI_Disable+0x24>)
10047ce6:	689a      	ldr	r2, [r3, #8]
10047ce8:	4b06      	ldr	r3, [pc, #24]	@ (10047d04 <LL_RCC_HSI_Disable+0x24>)
10047cea:	2102      	movs	r1, #2
10047cec:	430a      	orrs	r2, r1
10047cee:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047cf0:	4b04      	ldr	r3, [pc, #16]	@ (10047d04 <LL_RCC_HSI_Disable+0x24>)
10047cf2:	689a      	ldr	r2, [r3, #8]
10047cf4:	4b03      	ldr	r3, [pc, #12]	@ (10047d04 <LL_RCC_HSI_Disable+0x24>)
10047cf6:	2104      	movs	r1, #4
10047cf8:	430a      	orrs	r2, r1
10047cfa:	609a      	str	r2, [r3, #8]
}
10047cfc:	46c0      	nop			@ (mov r8, r8)
10047cfe:	46bd      	mov	sp, r7
10047d00:	bd80      	pop	{r7, pc}
10047d02:	46c0      	nop			@ (mov r8, r8)
10047d04:	48400000 	.word	0x48400000

10047d08 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10047d08:	b580      	push	{r7, lr}
10047d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10047d0c:	4b07      	ldr	r3, [pc, #28]	@ (10047d2c <LL_RCC_HSI_IsReady+0x24>)
10047d0e:	681a      	ldr	r2, [r3, #0]
10047d10:	2380      	movs	r3, #128	@ 0x80
10047d12:	00db      	lsls	r3, r3, #3
10047d14:	401a      	ands	r2, r3
10047d16:	2380      	movs	r3, #128	@ 0x80
10047d18:	00db      	lsls	r3, r3, #3
10047d1a:	429a      	cmp	r2, r3
10047d1c:	d101      	bne.n	10047d22 <LL_RCC_HSI_IsReady+0x1a>
10047d1e:	2301      	movs	r3, #1
10047d20:	e000      	b.n	10047d24 <LL_RCC_HSI_IsReady+0x1c>
10047d22:	2300      	movs	r3, #0
}
10047d24:	0018      	movs	r0, r3
10047d26:	46bd      	mov	sp, r7
10047d28:	bd80      	pop	{r7, pc}
10047d2a:	46c0      	nop			@ (mov r8, r8)
10047d2c:	48400000 	.word	0x48400000

10047d30 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10047d30:	b580      	push	{r7, lr}
10047d32:	b082      	sub	sp, #8
10047d34:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10047d36:	46c0      	nop			@ (mov r8, r8)
10047d38:	4b0f      	ldr	r3, [pc, #60]	@ (10047d78 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047d3a:	681a      	ldr	r2, [r3, #0]
10047d3c:	2380      	movs	r3, #128	@ 0x80
10047d3e:	029b      	lsls	r3, r3, #10
10047d40:	4013      	ands	r3, r2
10047d42:	d0f9      	beq.n	10047d38 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047d44:	4b0c      	ldr	r3, [pc, #48]	@ (10047d78 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047d46:	689a      	ldr	r2, [r3, #8]
10047d48:	4b0b      	ldr	r3, [pc, #44]	@ (10047d78 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047d4a:	2102      	movs	r1, #2
10047d4c:	430a      	orrs	r2, r1
10047d4e:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10047d50:	2300      	movs	r3, #0
10047d52:	607b      	str	r3, [r7, #4]
10047d54:	e003      	b.n	10047d5e <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
10047d56:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10047d58:	687b      	ldr	r3, [r7, #4]
10047d5a:	3301      	adds	r3, #1
10047d5c:	607b      	str	r3, [r7, #4]
10047d5e:	687b      	ldr	r3, [r7, #4]
10047d60:	2b05      	cmp	r3, #5
10047d62:	ddf8      	ble.n	10047d56 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047d64:	4b04      	ldr	r3, [pc, #16]	@ (10047d78 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047d66:	689a      	ldr	r2, [r3, #8]
10047d68:	4b03      	ldr	r3, [pc, #12]	@ (10047d78 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047d6a:	2104      	movs	r1, #4
10047d6c:	430a      	orrs	r2, r1
10047d6e:	609a      	str	r2, [r3, #8]
}
10047d70:	46c0      	nop			@ (mov r8, r8)
10047d72:	46bd      	mov	sp, r7
10047d74:	b002      	add	sp, #8
10047d76:	bd80      	pop	{r7, pc}
10047d78:	48400000 	.word	0x48400000

10047d7c <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
10047d7c:	b580      	push	{r7, lr}
10047d7e:	b082      	sub	sp, #8
10047d80:	af00      	add	r7, sp, #0
10047d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10047d84:	4b06      	ldr	r3, [pc, #24]	@ (10047da0 <LL_RCC_LSCO_SetSource+0x24>)
10047d86:	689b      	ldr	r3, [r3, #8]
10047d88:	4a06      	ldr	r2, [pc, #24]	@ (10047da4 <LL_RCC_LSCO_SetSource+0x28>)
10047d8a:	4013      	ands	r3, r2
10047d8c:	0019      	movs	r1, r3
10047d8e:	4b04      	ldr	r3, [pc, #16]	@ (10047da0 <LL_RCC_LSCO_SetSource+0x24>)
10047d90:	687a      	ldr	r2, [r7, #4]
10047d92:	430a      	orrs	r2, r1
10047d94:	609a      	str	r2, [r3, #8]
}
10047d96:	46c0      	nop			@ (mov r8, r8)
10047d98:	46bd      	mov	sp, r7
10047d9a:	b002      	add	sp, #8
10047d9c:	bd80      	pop	{r7, pc}
10047d9e:	46c0      	nop			@ (mov r8, r8)
10047da0:	48400000 	.word	0x48400000
10047da4:	fffe7fff 	.word	0xfffe7fff

10047da8 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10047da8:	b580      	push	{r7, lr}
10047daa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10047dac:	4b04      	ldr	r3, [pc, #16]	@ (10047dc0 <LL_RCC_LSE_Enable+0x18>)
10047dae:	681a      	ldr	r2, [r3, #0]
10047db0:	4b03      	ldr	r3, [pc, #12]	@ (10047dc0 <LL_RCC_LSE_Enable+0x18>)
10047db2:	2110      	movs	r1, #16
10047db4:	430a      	orrs	r2, r1
10047db6:	601a      	str	r2, [r3, #0]
}
10047db8:	46c0      	nop			@ (mov r8, r8)
10047dba:	46bd      	mov	sp, r7
10047dbc:	bd80      	pop	{r7, pc}
10047dbe:	46c0      	nop			@ (mov r8, r8)
10047dc0:	48400000 	.word	0x48400000

10047dc4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
10047dc4:	b580      	push	{r7, lr}
10047dc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10047dc8:	4b04      	ldr	r3, [pc, #16]	@ (10047ddc <LL_RCC_LSE_Disable+0x18>)
10047dca:	681a      	ldr	r2, [r3, #0]
10047dcc:	4b03      	ldr	r3, [pc, #12]	@ (10047ddc <LL_RCC_LSE_Disable+0x18>)
10047dce:	2110      	movs	r1, #16
10047dd0:	438a      	bics	r2, r1
10047dd2:	601a      	str	r2, [r3, #0]
}
10047dd4:	46c0      	nop			@ (mov r8, r8)
10047dd6:	46bd      	mov	sp, r7
10047dd8:	bd80      	pop	{r7, pc}
10047dda:	46c0      	nop			@ (mov r8, r8)
10047ddc:	48400000 	.word	0x48400000

10047de0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10047de0:	b580      	push	{r7, lr}
10047de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10047de4:	4b05      	ldr	r3, [pc, #20]	@ (10047dfc <LL_RCC_LSE_IsReady+0x1c>)
10047de6:	681b      	ldr	r3, [r3, #0]
10047de8:	2220      	movs	r2, #32
10047dea:	4013      	ands	r3, r2
10047dec:	2b20      	cmp	r3, #32
10047dee:	d101      	bne.n	10047df4 <LL_RCC_LSE_IsReady+0x14>
10047df0:	2301      	movs	r3, #1
10047df2:	e000      	b.n	10047df6 <LL_RCC_LSE_IsReady+0x16>
10047df4:	2300      	movs	r3, #0
}
10047df6:	0018      	movs	r0, r3
10047df8:	46bd      	mov	sp, r7
10047dfa:	bd80      	pop	{r7, pc}
10047dfc:	48400000 	.word	0x48400000

10047e00 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
10047e00:	b580      	push	{r7, lr}
10047e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
10047e04:	4b04      	ldr	r3, [pc, #16]	@ (10047e18 <LL_RCC_LSE_EnableBypass+0x18>)
10047e06:	681a      	ldr	r2, [r3, #0]
10047e08:	4b03      	ldr	r3, [pc, #12]	@ (10047e18 <LL_RCC_LSE_EnableBypass+0x18>)
10047e0a:	2140      	movs	r1, #64	@ 0x40
10047e0c:	430a      	orrs	r2, r1
10047e0e:	601a      	str	r2, [r3, #0]
}
10047e10:	46c0      	nop			@ (mov r8, r8)
10047e12:	46bd      	mov	sp, r7
10047e14:	bd80      	pop	{r7, pc}
10047e16:	46c0      	nop			@ (mov r8, r8)
10047e18:	48400000 	.word	0x48400000

10047e1c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
10047e1c:	b580      	push	{r7, lr}
10047e1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
10047e20:	4b04      	ldr	r3, [pc, #16]	@ (10047e34 <LL_RCC_LSE_DisableBypass+0x18>)
10047e22:	681a      	ldr	r2, [r3, #0]
10047e24:	4b03      	ldr	r3, [pc, #12]	@ (10047e34 <LL_RCC_LSE_DisableBypass+0x18>)
10047e26:	2140      	movs	r1, #64	@ 0x40
10047e28:	438a      	bics	r2, r1
10047e2a:	601a      	str	r2, [r3, #0]
}
10047e2c:	46c0      	nop			@ (mov r8, r8)
10047e2e:	46bd      	mov	sp, r7
10047e30:	bd80      	pop	{r7, pc}
10047e32:	46c0      	nop			@ (mov r8, r8)
10047e34:	48400000 	.word	0x48400000

10047e38 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
10047e38:	b580      	push	{r7, lr}
10047e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10047e3c:	4b05      	ldr	r3, [pc, #20]	@ (10047e54 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
10047e3e:	681b      	ldr	r3, [r3, #0]
10047e40:	2240      	movs	r2, #64	@ 0x40
10047e42:	4013      	ands	r3, r2
10047e44:	2b40      	cmp	r3, #64	@ 0x40
10047e46:	d101      	bne.n	10047e4c <LL_RCC_LSE_IsBypassEnabled+0x14>
10047e48:	2301      	movs	r3, #1
10047e4a:	e000      	b.n	10047e4e <LL_RCC_LSE_IsBypassEnabled+0x16>
10047e4c:	2300      	movs	r3, #0
}
10047e4e:	0018      	movs	r0, r3
10047e50:	46bd      	mov	sp, r7
10047e52:	bd80      	pop	{r7, pc}
10047e54:	48400000 	.word	0x48400000

10047e58 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
10047e58:	b580      	push	{r7, lr}
10047e5a:	b082      	sub	sp, #8
10047e5c:	af00      	add	r7, sp, #0
10047e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
10047e60:	4b06      	ldr	r3, [pc, #24]	@ (10047e7c <LL_RCC_LSE_SetDriveCapability+0x24>)
10047e62:	68db      	ldr	r3, [r3, #12]
10047e64:	2260      	movs	r2, #96	@ 0x60
10047e66:	4393      	bics	r3, r2
10047e68:	0019      	movs	r1, r3
10047e6a:	4b04      	ldr	r3, [pc, #16]	@ (10047e7c <LL_RCC_LSE_SetDriveCapability+0x24>)
10047e6c:	687a      	ldr	r2, [r7, #4]
10047e6e:	430a      	orrs	r2, r1
10047e70:	60da      	str	r2, [r3, #12]
}
10047e72:	46c0      	nop			@ (mov r8, r8)
10047e74:	46bd      	mov	sp, r7
10047e76:	b002      	add	sp, #8
10047e78:	bd80      	pop	{r7, pc}
10047e7a:	46c0      	nop			@ (mov r8, r8)
10047e7c:	48400000 	.word	0x48400000

10047e80 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
10047e80:	b580      	push	{r7, lr}
10047e82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10047e84:	4b04      	ldr	r3, [pc, #16]	@ (10047e98 <LL_RCC_LSI_Enable+0x18>)
10047e86:	681a      	ldr	r2, [r3, #0]
10047e88:	4b03      	ldr	r3, [pc, #12]	@ (10047e98 <LL_RCC_LSI_Enable+0x18>)
10047e8a:	2104      	movs	r1, #4
10047e8c:	430a      	orrs	r2, r1
10047e8e:	601a      	str	r2, [r3, #0]
}
10047e90:	46c0      	nop			@ (mov r8, r8)
10047e92:	46bd      	mov	sp, r7
10047e94:	bd80      	pop	{r7, pc}
10047e96:	46c0      	nop			@ (mov r8, r8)
10047e98:	48400000 	.word	0x48400000

10047e9c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
10047e9c:	b580      	push	{r7, lr}
10047e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
10047ea0:	4b04      	ldr	r3, [pc, #16]	@ (10047eb4 <LL_RCC_LSI_Disable+0x18>)
10047ea2:	681a      	ldr	r2, [r3, #0]
10047ea4:	4b03      	ldr	r3, [pc, #12]	@ (10047eb4 <LL_RCC_LSI_Disable+0x18>)
10047ea6:	2104      	movs	r1, #4
10047ea8:	438a      	bics	r2, r1
10047eaa:	601a      	str	r2, [r3, #0]
}
10047eac:	46c0      	nop			@ (mov r8, r8)
10047eae:	46bd      	mov	sp, r7
10047eb0:	bd80      	pop	{r7, pc}
10047eb2:	46c0      	nop			@ (mov r8, r8)
10047eb4:	48400000 	.word	0x48400000

10047eb8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
10047eb8:	b580      	push	{r7, lr}
10047eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10047ebc:	4b05      	ldr	r3, [pc, #20]	@ (10047ed4 <LL_RCC_LSI_IsReady+0x1c>)
10047ebe:	681b      	ldr	r3, [r3, #0]
10047ec0:	2208      	movs	r2, #8
10047ec2:	4013      	ands	r3, r2
10047ec4:	2b08      	cmp	r3, #8
10047ec6:	d101      	bne.n	10047ecc <LL_RCC_LSI_IsReady+0x14>
10047ec8:	2301      	movs	r3, #1
10047eca:	e000      	b.n	10047ece <LL_RCC_LSI_IsReady+0x16>
10047ecc:	2300      	movs	r3, #0
}
10047ece:	0018      	movs	r0, r3
10047ed0:	46bd      	mov	sp, r7
10047ed2:	bd80      	pop	{r7, pc}
10047ed4:	48400000 	.word	0x48400000

10047ed8 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
10047ed8:	b580      	push	{r7, lr}
10047eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10047edc:	4b04      	ldr	r3, [pc, #16]	@ (10047ef0 <LL_RCC_RC64MPLL_Enable+0x18>)
10047ede:	681a      	ldr	r2, [r3, #0]
10047ee0:	4b03      	ldr	r3, [pc, #12]	@ (10047ef0 <LL_RCC_RC64MPLL_Enable+0x18>)
10047ee2:	2180      	movs	r1, #128	@ 0x80
10047ee4:	0189      	lsls	r1, r1, #6
10047ee6:	430a      	orrs	r2, r1
10047ee8:	601a      	str	r2, [r3, #0]
}
10047eea:	46c0      	nop			@ (mov r8, r8)
10047eec:	46bd      	mov	sp, r7
10047eee:	bd80      	pop	{r7, pc}
10047ef0:	48400000 	.word	0x48400000

10047ef4 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
10047ef4:	b580      	push	{r7, lr}
10047ef6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10047ef8:	4b04      	ldr	r3, [pc, #16]	@ (10047f0c <LL_RCC_RC64MPLL_Disable+0x18>)
10047efa:	681a      	ldr	r2, [r3, #0]
10047efc:	4b03      	ldr	r3, [pc, #12]	@ (10047f0c <LL_RCC_RC64MPLL_Disable+0x18>)
10047efe:	4904      	ldr	r1, [pc, #16]	@ (10047f10 <LL_RCC_RC64MPLL_Disable+0x1c>)
10047f00:	400a      	ands	r2, r1
10047f02:	601a      	str	r2, [r3, #0]
}
10047f04:	46c0      	nop			@ (mov r8, r8)
10047f06:	46bd      	mov	sp, r7
10047f08:	bd80      	pop	{r7, pc}
10047f0a:	46c0      	nop			@ (mov r8, r8)
10047f0c:	48400000 	.word	0x48400000
10047f10:	ffffdfff 	.word	0xffffdfff

10047f14 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
10047f14:	b580      	push	{r7, lr}
10047f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10047f18:	4b07      	ldr	r3, [pc, #28]	@ (10047f38 <LL_RCC_RC64MPLL_IsReady+0x24>)
10047f1a:	681a      	ldr	r2, [r3, #0]
10047f1c:	2380      	movs	r3, #128	@ 0x80
10047f1e:	01db      	lsls	r3, r3, #7
10047f20:	401a      	ands	r2, r3
10047f22:	2380      	movs	r3, #128	@ 0x80
10047f24:	01db      	lsls	r3, r3, #7
10047f26:	429a      	cmp	r2, r3
10047f28:	d101      	bne.n	10047f2e <LL_RCC_RC64MPLL_IsReady+0x1a>
10047f2a:	2301      	movs	r3, #1
10047f2c:	e000      	b.n	10047f30 <LL_RCC_RC64MPLL_IsReady+0x1c>
10047f2e:	2300      	movs	r3, #0
}
10047f30:	0018      	movs	r0, r3
10047f32:	46bd      	mov	sp, r7
10047f34:	bd80      	pop	{r7, pc}
10047f36:	46c0      	nop			@ (mov r8, r8)
10047f38:	48400000 	.word	0x48400000

10047f3c <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10047f3c:	b580      	push	{r7, lr}
10047f3e:	b082      	sub	sp, #8
10047f40:	af00      	add	r7, sp, #0
10047f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10047f44:	4b06      	ldr	r3, [pc, #24]	@ (10047f60 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10047f46:	689b      	ldr	r3, [r3, #8]
10047f48:	22e0      	movs	r2, #224	@ 0xe0
10047f4a:	4393      	bics	r3, r2
10047f4c:	0019      	movs	r1, r3
10047f4e:	4b04      	ldr	r3, [pc, #16]	@ (10047f60 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10047f50:	687a      	ldr	r2, [r7, #4]
10047f52:	430a      	orrs	r2, r1
10047f54:	609a      	str	r2, [r3, #8]
}
10047f56:	46c0      	nop			@ (mov r8, r8)
10047f58:	46bd      	mov	sp, r7
10047f5a:	b002      	add	sp, #8
10047f5c:	bd80      	pop	{r7, pc}
10047f5e:	46c0      	nop			@ (mov r8, r8)
10047f60:	48400000 	.word	0x48400000

10047f64 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10047f64:	b580      	push	{r7, lr}
10047f66:	b084      	sub	sp, #16
10047f68:	af00      	add	r7, sp, #0
10047f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10047f6c:	687b      	ldr	r3, [r7, #4]
10047f6e:	2b00      	cmp	r3, #0
10047f70:	d101      	bne.n	10047f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
10047f72:	2301      	movs	r3, #1
10047f74:	e13c      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10047f76:	687b      	ldr	r3, [r7, #4]
10047f78:	681b      	ldr	r3, [r3, #0]
10047f7a:	2210      	movs	r2, #16
10047f7c:	4013      	ands	r3, r2
10047f7e:	d033      	beq.n	10047fe8 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
10047f80:	687b      	ldr	r3, [r7, #4]
10047f82:	689b      	ldr	r3, [r3, #8]
10047f84:	2b00      	cmp	r3, #0
10047f86:	d102      	bne.n	10047f8e <HAL_RCC_OscConfig+0x2a>
10047f88:	f7ff fe96 	bl	10047cb8 <LL_RCC_HSI_Enable>
10047f8c:	e001      	b.n	10047f92 <HAL_RCC_OscConfig+0x2e>
10047f8e:	f7ff fea7 	bl	10047ce0 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
10047f92:	687b      	ldr	r3, [r7, #4]
10047f94:	689b      	ldr	r3, [r3, #8]
10047f96:	2b04      	cmp	r3, #4
10047f98:	d113      	bne.n	10047fc2 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047f9a:	f7fc ffeb 	bl	10044f74 <HAL_GetTick>
10047f9e:	0003      	movs	r3, r0
10047fa0:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
10047fa2:	e008      	b.n	10047fb6 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10047fa4:	f7fc ffe6 	bl	10044f74 <HAL_GetTick>
10047fa8:	0002      	movs	r2, r0
10047faa:	68fb      	ldr	r3, [r7, #12]
10047fac:	1ad3      	subs	r3, r2, r3
10047fae:	2b64      	cmp	r3, #100	@ 0x64
10047fb0:	d901      	bls.n	10047fb6 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
10047fb2:	2303      	movs	r3, #3
10047fb4:	e11c      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
10047fb6:	f7ff fea7 	bl	10047d08 <LL_RCC_HSI_IsReady>
10047fba:	0003      	movs	r3, r0
10047fbc:	2b01      	cmp	r3, #1
10047fbe:	d0f1      	beq.n	10047fa4 <HAL_RCC_OscConfig+0x40>
10047fc0:	e012      	b.n	10047fe8 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047fc2:	f7fc ffd7 	bl	10044f74 <HAL_GetTick>
10047fc6:	0003      	movs	r3, r0
10047fc8:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
10047fca:	e008      	b.n	10047fde <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10047fcc:	f7fc ffd2 	bl	10044f74 <HAL_GetTick>
10047fd0:	0002      	movs	r2, r0
10047fd2:	68fb      	ldr	r3, [r7, #12]
10047fd4:	1ad3      	subs	r3, r2, r3
10047fd6:	2b64      	cmp	r3, #100	@ 0x64
10047fd8:	d901      	bls.n	10047fde <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
10047fda:	2303      	movs	r3, #3
10047fdc:	e108      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
10047fde:	f7ff fe93 	bl	10047d08 <LL_RCC_HSI_IsReady>
10047fe2:	0003      	movs	r3, r0
10047fe4:	2b01      	cmp	r3, #1
10047fe6:	d1f1      	bne.n	10047fcc <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10047fe8:	687b      	ldr	r3, [r7, #4]
10047fea:	681b      	ldr	r3, [r3, #0]
10047fec:	2201      	movs	r2, #1
10047fee:	4013      	ands	r3, r2
10047ff0:	d039      	beq.n	10048066 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
10047ff2:	2020      	movs	r0, #32
10047ff4:	f7ff fe2a 	bl	10047c4c <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
10047ff8:	2030      	movs	r0, #48	@ 0x30
10047ffa:	f7ff fe47 	bl	10047c8c <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
10047ffe:	687b      	ldr	r3, [r7, #4]
10048000:	685a      	ldr	r2, [r3, #4]
10048002:	2380      	movs	r3, #128	@ 0x80
10048004:	025b      	lsls	r3, r3, #9
10048006:	429a      	cmp	r2, r3
10048008:	d102      	bne.n	10048010 <HAL_RCC_OscConfig+0xac>
1004800a:	f7ff fded 	bl	10047be8 <LL_RCC_HSE_Enable>
1004800e:	e001      	b.n	10048014 <HAL_RCC_OscConfig+0xb0>
10048010:	f7ff fdf8 	bl	10047c04 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
10048014:	687b      	ldr	r3, [r7, #4]
10048016:	685b      	ldr	r3, [r3, #4]
10048018:	2b00      	cmp	r3, #0
1004801a:	d012      	beq.n	10048042 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004801c:	f7fc ffaa 	bl	10044f74 <HAL_GetTick>
10048020:	0003      	movs	r3, r0
10048022:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
10048024:	e008      	b.n	10048038 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10048026:	f7fc ffa5 	bl	10044f74 <HAL_GetTick>
1004802a:	0002      	movs	r2, r0
1004802c:	68fb      	ldr	r3, [r7, #12]
1004802e:	1ad3      	subs	r3, r2, r3
10048030:	2b64      	cmp	r3, #100	@ 0x64
10048032:	d901      	bls.n	10048038 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
10048034:	2303      	movs	r3, #3
10048036:	e0db      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
10048038:	f7ff fdf4 	bl	10047c24 <LL_RCC_HSE_IsReady>
1004803c:	1e03      	subs	r3, r0, #0
1004803e:	d0f2      	beq.n	10048026 <HAL_RCC_OscConfig+0xc2>
10048040:	e011      	b.n	10048066 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048042:	f7fc ff97 	bl	10044f74 <HAL_GetTick>
10048046:	0003      	movs	r3, r0
10048048:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
1004804a:	e008      	b.n	1004805e <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004804c:	f7fc ff92 	bl	10044f74 <HAL_GetTick>
10048050:	0002      	movs	r2, r0
10048052:	68fb      	ldr	r3, [r7, #12]
10048054:	1ad3      	subs	r3, r2, r3
10048056:	2b64      	cmp	r3, #100	@ 0x64
10048058:	d901      	bls.n	1004805e <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
1004805a:	2303      	movs	r3, #3
1004805c:	e0c8      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
1004805e:	f7ff fde1 	bl	10047c24 <LL_RCC_HSE_IsReady>
10048062:	1e03      	subs	r3, r0, #0
10048064:	d1f2      	bne.n	1004804c <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10048066:	687b      	ldr	r3, [r7, #4]
10048068:	681b      	ldr	r3, [r3, #0]
1004806a:	2204      	movs	r2, #4
1004806c:	4013      	ands	r3, r2
1004806e:	d03a      	beq.n	100480e6 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
10048070:	687b      	ldr	r3, [r7, #4]
10048072:	691b      	ldr	r3, [r3, #16]
10048074:	2b00      	cmp	r3, #0
10048076:	d022      	beq.n	100480be <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
10048078:	f7ff ff10 	bl	10047e9c <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
1004807c:	46c0      	nop			@ (mov r8, r8)
1004807e:	f7ff ff1b 	bl	10047eb8 <LL_RCC_LSI_IsReady>
10048082:	1e03      	subs	r3, r0, #0
10048084:	d1fb      	bne.n	1004807e <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10048086:	f7ff fe9d 	bl	10047dc4 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004808a:	2380      	movs	r3, #128	@ 0x80
1004808c:	025b      	lsls	r3, r3, #9
1004808e:	0018      	movs	r0, r3
10048090:	f7ff fe74 	bl	10047d7c <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10048094:	f7ff fef4 	bl	10047e80 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048098:	f7fc ff6c 	bl	10044f74 <HAL_GetTick>
1004809c:	0003      	movs	r3, r0
1004809e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
100480a0:	e008      	b.n	100480b4 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100480a2:	f7fc ff67 	bl	10044f74 <HAL_GetTick>
100480a6:	0002      	movs	r2, r0
100480a8:	68fb      	ldr	r3, [r7, #12]
100480aa:	1ad3      	subs	r3, r2, r3
100480ac:	2b02      	cmp	r3, #2
100480ae:	d901      	bls.n	100480b4 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
100480b0:	2303      	movs	r3, #3
100480b2:	e09d      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
100480b4:	f7ff ff00 	bl	10047eb8 <LL_RCC_LSI_IsReady>
100480b8:	1e03      	subs	r3, r0, #0
100480ba:	d0f2      	beq.n	100480a2 <HAL_RCC_OscConfig+0x13e>
100480bc:	e013      	b.n	100480e6 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
100480be:	f7ff feed 	bl	10047e9c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100480c2:	f7fc ff57 	bl	10044f74 <HAL_GetTick>
100480c6:	0003      	movs	r3, r0
100480c8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
100480ca:	e008      	b.n	100480de <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100480cc:	f7fc ff52 	bl	10044f74 <HAL_GetTick>
100480d0:	0002      	movs	r2, r0
100480d2:	68fb      	ldr	r3, [r7, #12]
100480d4:	1ad3      	subs	r3, r2, r3
100480d6:	2b02      	cmp	r3, #2
100480d8:	d901      	bls.n	100480de <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
100480da:	2303      	movs	r3, #3
100480dc:	e088      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
100480de:	f7ff feeb 	bl	10047eb8 <LL_RCC_LSI_IsReady>
100480e2:	1e03      	subs	r3, r0, #0
100480e4:	d1f2      	bne.n	100480cc <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100480e6:	687b      	ldr	r3, [r7, #4]
100480e8:	681b      	ldr	r3, [r3, #0]
100480ea:	2202      	movs	r2, #2
100480ec:	4013      	ands	r3, r2
100480ee:	d047      	beq.n	10048180 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
100480f0:	f7ff fed4 	bl	10047e9c <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
100480f4:	f7ff fe66 	bl	10047dc4 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
100480f8:	46c0      	nop			@ (mov r8, r8)
100480fa:	f7ff fe71 	bl	10047de0 <LL_RCC_LSE_IsReady>
100480fe:	1e03      	subs	r3, r0, #0
10048100:	d1fb      	bne.n	100480fa <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
10048102:	23c0      	movs	r3, #192	@ 0xc0
10048104:	019b      	lsls	r3, r3, #6
10048106:	0018      	movs	r0, r3
10048108:	f7ff fd56 	bl	10047bb8 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
1004810c:	2380      	movs	r3, #128	@ 0x80
1004810e:	021b      	lsls	r3, r3, #8
10048110:	0018      	movs	r0, r3
10048112:	f7ff fe33 	bl	10047d7c <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
10048116:	2020      	movs	r0, #32
10048118:	f7ff fe9e 	bl	10047e58 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
1004811c:	687b      	ldr	r3, [r7, #4]
1004811e:	68db      	ldr	r3, [r3, #12]
10048120:	2b10      	cmp	r3, #16
10048122:	d102      	bne.n	1004812a <HAL_RCC_OscConfig+0x1c6>
10048124:	f7ff fe40 	bl	10047da8 <LL_RCC_LSE_Enable>
10048128:	e001      	b.n	1004812e <HAL_RCC_OscConfig+0x1ca>
1004812a:	f7ff fe4b 	bl	10047dc4 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
1004812e:	687b      	ldr	r3, [r7, #4]
10048130:	68db      	ldr	r3, [r3, #12]
10048132:	2b00      	cmp	r3, #0
10048134:	d012      	beq.n	1004815c <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10048136:	f7fc ff1d 	bl	10044f74 <HAL_GetTick>
1004813a:	0003      	movs	r3, r0
1004813c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004813e:	e008      	b.n	10048152 <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048140:	f7fc ff18 	bl	10044f74 <HAL_GetTick>
10048144:	0002      	movs	r2, r0
10048146:	68fb      	ldr	r3, [r7, #12]
10048148:	1ad3      	subs	r3, r2, r3
1004814a:	2b64      	cmp	r3, #100	@ 0x64
1004814c:	d901      	bls.n	10048152 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
1004814e:	2303      	movs	r3, #3
10048150:	e04e      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10048152:	f7ff fe45 	bl	10047de0 <LL_RCC_LSE_IsReady>
10048156:	1e03      	subs	r3, r0, #0
10048158:	d0f2      	beq.n	10048140 <HAL_RCC_OscConfig+0x1dc>
1004815a:	e011      	b.n	10048180 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004815c:	f7fc ff0a 	bl	10044f74 <HAL_GetTick>
10048160:	0003      	movs	r3, r0
10048162:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10048164:	e008      	b.n	10048178 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10048166:	f7fc ff05 	bl	10044f74 <HAL_GetTick>
1004816a:	0002      	movs	r2, r0
1004816c:	68fb      	ldr	r3, [r7, #12]
1004816e:	1ad3      	subs	r3, r2, r3
10048170:	2b64      	cmp	r3, #100	@ 0x64
10048172:	d901      	bls.n	10048178 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
10048174:	2303      	movs	r3, #3
10048176:	e03b      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10048178:	f7ff fe32 	bl	10047de0 <LL_RCC_LSE_IsReady>
1004817c:	1e03      	subs	r3, r0, #0
1004817e:	d1f2      	bne.n	10048166 <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
10048180:	687b      	ldr	r3, [r7, #4]
10048182:	681b      	ldr	r3, [r3, #0]
10048184:	2208      	movs	r2, #8
10048186:	4013      	ands	r3, r2
10048188:	d031      	beq.n	100481ee <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004818a:	687b      	ldr	r3, [r7, #4]
1004818c:	695b      	ldr	r3, [r3, #20]
1004818e:	2b40      	cmp	r3, #64	@ 0x40
10048190:	d102      	bne.n	10048198 <HAL_RCC_OscConfig+0x234>
10048192:	f7ff fe35 	bl	10047e00 <LL_RCC_LSE_EnableBypass>
10048196:	e001      	b.n	1004819c <HAL_RCC_OscConfig+0x238>
10048198:	f7ff fe40 	bl	10047e1c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
1004819c:	687b      	ldr	r3, [r7, #4]
1004819e:	695b      	ldr	r3, [r3, #20]
100481a0:	2b00      	cmp	r3, #0
100481a2:	d012      	beq.n	100481ca <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100481a4:	f7fc fee6 	bl	10044f74 <HAL_GetTick>
100481a8:	0003      	movs	r3, r0
100481aa:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
100481ac:	e008      	b.n	100481c0 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100481ae:	f7fc fee1 	bl	10044f74 <HAL_GetTick>
100481b2:	0002      	movs	r2, r0
100481b4:	68fb      	ldr	r3, [r7, #12]
100481b6:	1ad3      	subs	r3, r2, r3
100481b8:	2b64      	cmp	r3, #100	@ 0x64
100481ba:	d901      	bls.n	100481c0 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
100481bc:	2303      	movs	r3, #3
100481be:	e017      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
100481c0:	f7ff fe3a 	bl	10047e38 <LL_RCC_LSE_IsBypassEnabled>
100481c4:	1e03      	subs	r3, r0, #0
100481c6:	d0f2      	beq.n	100481ae <HAL_RCC_OscConfig+0x24a>
100481c8:	e011      	b.n	100481ee <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100481ca:	f7fc fed3 	bl	10044f74 <HAL_GetTick>
100481ce:	0003      	movs	r3, r0
100481d0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
100481d2:	e008      	b.n	100481e6 <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100481d4:	f7fc fece 	bl	10044f74 <HAL_GetTick>
100481d8:	0002      	movs	r2, r0
100481da:	68fb      	ldr	r3, [r7, #12]
100481dc:	1ad3      	subs	r3, r2, r3
100481de:	2b64      	cmp	r3, #100	@ 0x64
100481e0:	d901      	bls.n	100481e6 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
100481e2:	2303      	movs	r3, #3
100481e4:	e004      	b.n	100481f0 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
100481e6:	f7ff fe27 	bl	10047e38 <LL_RCC_LSE_IsBypassEnabled>
100481ea:	1e03      	subs	r3, r0, #0
100481ec:	d1f2      	bne.n	100481d4 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
100481ee:	2300      	movs	r3, #0
}
100481f0:	0018      	movs	r0, r3
100481f2:	46bd      	mov	sp, r7
100481f4:	b004      	add	sp, #16
100481f6:	bd80      	pop	{r7, pc}

100481f8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
100481f8:	b580      	push	{r7, lr}
100481fa:	b084      	sub	sp, #16
100481fc:	af00      	add	r7, sp, #0
100481fe:	6078      	str	r0, [r7, #4]
10048200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10048202:	687b      	ldr	r3, [r7, #4]
10048204:	2b00      	cmp	r3, #0
10048206:	d101      	bne.n	1004820c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10048208:	2301      	movs	r3, #1
1004820a:	e098      	b.n	1004833e <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004820c:	4b4e      	ldr	r3, [pc, #312]	@ (10048348 <HAL_RCC_ClockConfig+0x150>)
1004820e:	685b      	ldr	r3, [r3, #4]
10048210:	2230      	movs	r2, #48	@ 0x30
10048212:	4393      	bics	r3, r2
10048214:	0019      	movs	r1, r3
10048216:	4b4c      	ldr	r3, [pc, #304]	@ (10048348 <HAL_RCC_ClockConfig+0x150>)
10048218:	683a      	ldr	r2, [r7, #0]
1004821a:	430a      	orrs	r2, r1
1004821c:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
1004821e:	687b      	ldr	r3, [r7, #4]
10048220:	681b      	ldr	r3, [r3, #0]
10048222:	2b02      	cmp	r3, #2
10048224:	d10e      	bne.n	10048244 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10048226:	f7ff fd47 	bl	10047cb8 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004822a:	f7ff fd6d 	bl	10047d08 <LL_RCC_HSI_IsReady>
1004822e:	1e03      	subs	r3, r0, #0
10048230:	d101      	bne.n	10048236 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
10048232:	2301      	movs	r3, #1
10048234:	e083      	b.n	1004833e <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10048236:	f7ff fe5d 	bl	10047ef4 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004823a:	687b      	ldr	r3, [r7, #4]
1004823c:	685b      	ldr	r3, [r3, #4]
1004823e:	0018      	movs	r0, r3
10048240:	f7ff fe7c 	bl	10047f3c <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10048244:	687b      	ldr	r3, [r7, #4]
10048246:	681b      	ldr	r3, [r3, #0]
10048248:	2b00      	cmp	r3, #0
1004824a:	d124      	bne.n	10048296 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004824c:	f7ff fd5c 	bl	10047d08 <LL_RCC_HSI_IsReady>
10048250:	1e03      	subs	r3, r0, #0
10048252:	d101      	bne.n	10048258 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10048254:	2301      	movs	r3, #1
10048256:	e072      	b.n	1004833e <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10048258:	f7ff fce4 	bl	10047c24 <LL_RCC_HSE_IsReady>
1004825c:	1e03      	subs	r3, r0, #0
1004825e:	d101      	bne.n	10048264 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10048260:	2301      	movs	r3, #1
10048262:	e06c      	b.n	1004833e <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10048264:	f7ff fe38 	bl	10047ed8 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10048268:	f7fc fe84 	bl	10044f74 <HAL_GetTick>
1004826c:	0003      	movs	r3, r0
1004826e:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10048270:	e008      	b.n	10048284 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10048272:	f7fc fe7f 	bl	10044f74 <HAL_GetTick>
10048276:	0002      	movs	r2, r0
10048278:	68fb      	ldr	r3, [r7, #12]
1004827a:	1ad3      	subs	r3, r2, r3
1004827c:	2b02      	cmp	r3, #2
1004827e:	d901      	bls.n	10048284 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10048280:	2303      	movs	r3, #3
10048282:	e05c      	b.n	1004833e <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10048284:	f7ff fe46 	bl	10047f14 <LL_RCC_RC64MPLL_IsReady>
10048288:	1e03      	subs	r3, r0, #0
1004828a:	d0f2      	beq.n	10048272 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004828c:	687b      	ldr	r3, [r7, #4]
1004828e:	685b      	ldr	r3, [r3, #4]
10048290:	0018      	movs	r0, r3
10048292:	f7ff fe53 	bl	10047f3c <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10048296:	687b      	ldr	r3, [r7, #4]
10048298:	681b      	ldr	r3, [r3, #0]
1004829a:	2b01      	cmp	r3, #1
1004829c:	d117      	bne.n	100482ce <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004829e:	f7ff fd47 	bl	10047d30 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
100482a2:	f7ff fd31 	bl	10047d08 <LL_RCC_HSI_IsReady>
100482a6:	1e03      	subs	r3, r0, #0
100482a8:	d001      	beq.n	100482ae <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
100482aa:	2301      	movs	r3, #1
100482ac:	e047      	b.n	1004833e <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
100482ae:	f7ff fcb9 	bl	10047c24 <LL_RCC_HSE_IsReady>
100482b2:	1e03      	subs	r3, r0, #0
100482b4:	d101      	bne.n	100482ba <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
100482b6:	2301      	movs	r3, #1
100482b8:	e041      	b.n	1004833e <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100482ba:	4b24      	ldr	r3, [pc, #144]	@ (1004834c <HAL_RCC_ClockConfig+0x154>)
100482bc:	689b      	ldr	r3, [r3, #8]
100482be:	22e0      	movs	r2, #224	@ 0xe0
100482c0:	4393      	bics	r3, r2
100482c2:	0019      	movs	r1, r3
100482c4:	687b      	ldr	r3, [r7, #4]
100482c6:	685a      	ldr	r2, [r3, #4]
100482c8:	4b20      	ldr	r3, [pc, #128]	@ (1004834c <HAL_RCC_ClockConfig+0x154>)
100482ca:	430a      	orrs	r2, r1
100482cc:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
100482ce:	4b1e      	ldr	r3, [pc, #120]	@ (10048348 <HAL_RCC_ClockConfig+0x150>)
100482d0:	685b      	ldr	r3, [r3, #4]
100482d2:	2230      	movs	r2, #48	@ 0x30
100482d4:	4013      	ands	r3, r2
100482d6:	683a      	ldr	r2, [r7, #0]
100482d8:	429a      	cmp	r2, r3
100482da:	d01d      	beq.n	10048318 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
100482dc:	4b1a      	ldr	r3, [pc, #104]	@ (10048348 <HAL_RCC_ClockConfig+0x150>)
100482de:	685b      	ldr	r3, [r3, #4]
100482e0:	2230      	movs	r2, #48	@ 0x30
100482e2:	4393      	bics	r3, r2
100482e4:	0019      	movs	r1, r3
100482e6:	4b18      	ldr	r3, [pc, #96]	@ (10048348 <HAL_RCC_ClockConfig+0x150>)
100482e8:	683a      	ldr	r2, [r7, #0]
100482ea:	430a      	orrs	r2, r1
100482ec:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100482ee:	f7fc fe41 	bl	10044f74 <HAL_GetTick>
100482f2:	0003      	movs	r3, r0
100482f4:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100482f6:	e008      	b.n	1004830a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
100482f8:	f7fc fe3c 	bl	10044f74 <HAL_GetTick>
100482fc:	0002      	movs	r2, r0
100482fe:	68fb      	ldr	r3, [r7, #12]
10048300:	1ad3      	subs	r3, r2, r3
10048302:	2b02      	cmp	r3, #2
10048304:	d901      	bls.n	1004830a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
10048306:	2303      	movs	r3, #3
10048308:	e019      	b.n	1004833e <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004830a:	4b0f      	ldr	r3, [pc, #60]	@ (10048348 <HAL_RCC_ClockConfig+0x150>)
1004830c:	685b      	ldr	r3, [r3, #4]
1004830e:	2230      	movs	r2, #48	@ 0x30
10048310:	4013      	ands	r3, r2
10048312:	683a      	ldr	r2, [r7, #0]
10048314:	429a      	cmp	r2, r3
10048316:	d1ef      	bne.n	100482f8 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10048318:	2300      	movs	r3, #0
1004831a:	60bb      	str	r3, [r7, #8]
1004831c:	e003      	b.n	10048326 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
1004831e:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10048320:	68bb      	ldr	r3, [r7, #8]
10048322:	3301      	adds	r3, #1
10048324:	60bb      	str	r3, [r7, #8]
10048326:	68bb      	ldr	r3, [r7, #8]
10048328:	2b05      	cmp	r3, #5
1004832a:	ddf8      	ble.n	1004831e <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
1004832c:	f7fc fd7e 	bl	10044e2c <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
10048330:	f7fc fe2a 	bl	10044f88 <HAL_GetTickPrio>
10048334:	0003      	movs	r3, r0
10048336:	0018      	movs	r0, r3
10048338:	f7fc fdc2 	bl	10044ec0 <HAL_InitTick>
1004833c:	0003      	movs	r3, r0
}
1004833e:	0018      	movs	r0, r3
10048340:	46bd      	mov	sp, r7
10048342:	b004      	add	sp, #16
10048344:	bd80      	pop	{r7, pc}
10048346:	46c0      	nop			@ (mov r8, r8)
10048348:	40001000 	.word	0x40001000
1004834c:	48400000 	.word	0x48400000

10048350 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10048350:	b580      	push	{r7, lr}
10048352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10048354:	4b02      	ldr	r3, [pc, #8]	@ (10048360 <HAL_RCC_GetSysClockFreq+0x10>)
10048356:	681b      	ldr	r3, [r3, #0]
}
10048358:	0018      	movs	r0, r3
1004835a:	46bd      	mov	sp, r7
1004835c:	bd80      	pop	{r7, pc}
1004835e:	46c0      	nop			@ (mov r8, r8)
10048360:	20000898 	.word	0x20000898

10048364 <LL_RCC_HSE_IsReady>:
{
10048364:	b580      	push	{r7, lr}
10048366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10048368:	4b07      	ldr	r3, [pc, #28]	@ (10048388 <LL_RCC_HSE_IsReady+0x24>)
1004836a:	681a      	ldr	r2, [r3, #0]
1004836c:	2380      	movs	r3, #128	@ 0x80
1004836e:	029b      	lsls	r3, r3, #10
10048370:	401a      	ands	r2, r3
10048372:	2380      	movs	r3, #128	@ 0x80
10048374:	029b      	lsls	r3, r3, #10
10048376:	429a      	cmp	r2, r3
10048378:	d101      	bne.n	1004837e <LL_RCC_HSE_IsReady+0x1a>
1004837a:	2301      	movs	r3, #1
1004837c:	e000      	b.n	10048380 <LL_RCC_HSE_IsReady+0x1c>
1004837e:	2300      	movs	r3, #0
}
10048380:	0018      	movs	r0, r3
10048382:	46bd      	mov	sp, r7
10048384:	bd80      	pop	{r7, pc}
10048386:	46c0      	nop			@ (mov r8, r8)
10048388:	48400000 	.word	0x48400000

1004838c <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004838c:	b580      	push	{r7, lr}
1004838e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10048390:	4b05      	ldr	r3, [pc, #20]	@ (100483a8 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10048392:	689b      	ldr	r3, [r3, #8]
10048394:	2208      	movs	r2, #8
10048396:	4013      	ands	r3, r2
10048398:	2b08      	cmp	r3, #8
1004839a:	d101      	bne.n	100483a0 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
1004839c:	2301      	movs	r3, #1
1004839e:	e000      	b.n	100483a2 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
100483a0:	2300      	movs	r3, #0
}
100483a2:	0018      	movs	r0, r3
100483a4:	46bd      	mov	sp, r7
100483a6:	bd80      	pop	{r7, pc}
100483a8:	48400000 	.word	0x48400000

100483ac <LL_RCC_LSCO_SetSource>:
{
100483ac:	b580      	push	{r7, lr}
100483ae:	b082      	sub	sp, #8
100483b0:	af00      	add	r7, sp, #0
100483b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
100483b4:	4b06      	ldr	r3, [pc, #24]	@ (100483d0 <LL_RCC_LSCO_SetSource+0x24>)
100483b6:	689b      	ldr	r3, [r3, #8]
100483b8:	4a06      	ldr	r2, [pc, #24]	@ (100483d4 <LL_RCC_LSCO_SetSource+0x28>)
100483ba:	4013      	ands	r3, r2
100483bc:	0019      	movs	r1, r3
100483be:	4b04      	ldr	r3, [pc, #16]	@ (100483d0 <LL_RCC_LSCO_SetSource+0x24>)
100483c0:	687a      	ldr	r2, [r7, #4]
100483c2:	430a      	orrs	r2, r1
100483c4:	609a      	str	r2, [r3, #8]
}
100483c6:	46c0      	nop			@ (mov r8, r8)
100483c8:	46bd      	mov	sp, r7
100483ca:	b002      	add	sp, #8
100483cc:	bd80      	pop	{r7, pc}
100483ce:	46c0      	nop			@ (mov r8, r8)
100483d0:	48400000 	.word	0x48400000
100483d4:	fffe7fff 	.word	0xfffe7fff

100483d8 <LL_RCC_LSCO_GetSource>:
{
100483d8:	b580      	push	{r7, lr}
100483da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
100483dc:	4b03      	ldr	r3, [pc, #12]	@ (100483ec <LL_RCC_LSCO_GetSource+0x14>)
100483de:	689a      	ldr	r2, [r3, #8]
100483e0:	23c0      	movs	r3, #192	@ 0xc0
100483e2:	025b      	lsls	r3, r3, #9
100483e4:	4013      	ands	r3, r2
}
100483e6:	0018      	movs	r0, r3
100483e8:	46bd      	mov	sp, r7
100483ea:	bd80      	pop	{r7, pc}
100483ec:	48400000 	.word	0x48400000

100483f0 <LL_RCC_SetRFClock>:
{
100483f0:	b580      	push	{r7, lr}
100483f2:	b082      	sub	sp, #8
100483f4:	af00      	add	r7, sp, #0
100483f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
100483f8:	4b06      	ldr	r3, [pc, #24]	@ (10048414 <LL_RCC_SetRFClock+0x24>)
100483fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100483fc:	2204      	movs	r2, #4
100483fe:	4393      	bics	r3, r2
10048400:	0019      	movs	r1, r3
10048402:	4b04      	ldr	r3, [pc, #16]	@ (10048414 <LL_RCC_SetRFClock+0x24>)
10048404:	687a      	ldr	r2, [r7, #4]
10048406:	430a      	orrs	r2, r1
10048408:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004840a:	46c0      	nop			@ (mov r8, r8)
1004840c:	46bd      	mov	sp, r7
1004840e:	b002      	add	sp, #8
10048410:	bd80      	pop	{r7, pc}
10048412:	46c0      	nop			@ (mov r8, r8)
10048414:	48400000 	.word	0x48400000

10048418 <LL_RCC_GetRFClock>:
{
10048418:	b580      	push	{r7, lr}
1004841a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
1004841c:	4b03      	ldr	r3, [pc, #12]	@ (1004842c <LL_RCC_GetRFClock+0x14>)
1004841e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10048420:	2204      	movs	r2, #4
10048422:	4013      	ands	r3, r2
}
10048424:	0018      	movs	r0, r3
10048426:	46bd      	mov	sp, r7
10048428:	bd80      	pop	{r7, pc}
1004842a:	46c0      	nop			@ (mov r8, r8)
1004842c:	48400000 	.word	0x48400000

10048430 <LL_RCC_SetSMPSPrescaler>:
{
10048430:	b580      	push	{r7, lr}
10048432:	b082      	sub	sp, #8
10048434:	af00      	add	r7, sp, #0
10048436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10048438:	4b06      	ldr	r3, [pc, #24]	@ (10048454 <LL_RCC_SetSMPSPrescaler+0x24>)
1004843a:	689b      	ldr	r3, [r3, #8]
1004843c:	4a06      	ldr	r2, [pc, #24]	@ (10048458 <LL_RCC_SetSMPSPrescaler+0x28>)
1004843e:	4013      	ands	r3, r2
10048440:	0019      	movs	r1, r3
10048442:	4b04      	ldr	r3, [pc, #16]	@ (10048454 <LL_RCC_SetSMPSPrescaler+0x24>)
10048444:	687a      	ldr	r2, [r7, #4]
10048446:	430a      	orrs	r2, r1
10048448:	609a      	str	r2, [r3, #8]
}
1004844a:	46c0      	nop			@ (mov r8, r8)
1004844c:	46bd      	mov	sp, r7
1004844e:	b002      	add	sp, #8
10048450:	bd80      	pop	{r7, pc}
10048452:	46c0      	nop			@ (mov r8, r8)
10048454:	48400000 	.word	0x48400000
10048458:	ffffefff 	.word	0xffffefff

1004845c <LL_RCC_GetSMPSPrescaler>:
{
1004845c:	b580      	push	{r7, lr}
1004845e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
10048460:	4b03      	ldr	r3, [pc, #12]	@ (10048470 <LL_RCC_GetSMPSPrescaler+0x14>)
10048462:	689a      	ldr	r2, [r3, #8]
10048464:	2380      	movs	r3, #128	@ 0x80
10048466:	015b      	lsls	r3, r3, #5
10048468:	4013      	ands	r3, r2
}
1004846a:	0018      	movs	r0, r3
1004846c:	46bd      	mov	sp, r7
1004846e:	bd80      	pop	{r7, pc}
10048470:	48400000 	.word	0x48400000

10048474 <LL_RCC_SetLPUARTClockSource>:
{
10048474:	b580      	push	{r7, lr}
10048476:	b082      	sub	sp, #8
10048478:	af00      	add	r7, sp, #0
1004847a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
1004847c:	4b06      	ldr	r3, [pc, #24]	@ (10048498 <LL_RCC_SetLPUARTClockSource+0x24>)
1004847e:	689b      	ldr	r3, [r3, #8]
10048480:	4a06      	ldr	r2, [pc, #24]	@ (1004849c <LL_RCC_SetLPUARTClockSource+0x28>)
10048482:	4013      	ands	r3, r2
10048484:	0019      	movs	r1, r3
10048486:	4b04      	ldr	r3, [pc, #16]	@ (10048498 <LL_RCC_SetLPUARTClockSource+0x24>)
10048488:	687a      	ldr	r2, [r7, #4]
1004848a:	430a      	orrs	r2, r1
1004848c:	609a      	str	r2, [r3, #8]
}
1004848e:	46c0      	nop			@ (mov r8, r8)
10048490:	46bd      	mov	sp, r7
10048492:	b002      	add	sp, #8
10048494:	bd80      	pop	{r7, pc}
10048496:	46c0      	nop			@ (mov r8, r8)
10048498:	48400000 	.word	0x48400000
1004849c:	ffffdfff 	.word	0xffffdfff

100484a0 <LL_RCC_GetLPUARTClockSource>:
{
100484a0:	b580      	push	{r7, lr}
100484a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
100484a4:	4b03      	ldr	r3, [pc, #12]	@ (100484b4 <LL_RCC_GetLPUARTClockSource+0x14>)
100484a6:	689a      	ldr	r2, [r3, #8]
100484a8:	2380      	movs	r3, #128	@ 0x80
100484aa:	019b      	lsls	r3, r3, #6
100484ac:	4013      	ands	r3, r2
}
100484ae:	0018      	movs	r0, r3
100484b0:	46bd      	mov	sp, r7
100484b2:	bd80      	pop	{r7, pc}
100484b4:	48400000 	.word	0x48400000

100484b8 <LL_RCC_SetSPI3I2SClockSource>:
{
100484b8:	b580      	push	{r7, lr}
100484ba:	b082      	sub	sp, #8
100484bc:	af00      	add	r7, sp, #0
100484be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
100484c0:	4b06      	ldr	r3, [pc, #24]	@ (100484dc <LL_RCC_SetSPI3I2SClockSource+0x24>)
100484c2:	689b      	ldr	r3, [r3, #8]
100484c4:	4a06      	ldr	r2, [pc, #24]	@ (100484e0 <LL_RCC_SetSPI3I2SClockSource+0x28>)
100484c6:	4013      	ands	r3, r2
100484c8:	0019      	movs	r1, r3
100484ca:	4b04      	ldr	r3, [pc, #16]	@ (100484dc <LL_RCC_SetSPI3I2SClockSource+0x24>)
100484cc:	687a      	ldr	r2, [r7, #4]
100484ce:	430a      	orrs	r2, r1
100484d0:	609a      	str	r2, [r3, #8]
}
100484d2:	46c0      	nop			@ (mov r8, r8)
100484d4:	46bd      	mov	sp, r7
100484d6:	b002      	add	sp, #8
100484d8:	bd80      	pop	{r7, pc}
100484da:	46c0      	nop			@ (mov r8, r8)
100484dc:	48400000 	.word	0x48400000
100484e0:	ff3fffff 	.word	0xff3fffff

100484e4 <LL_RCC_GetSPI3I2SClockSource>:
{
100484e4:	b580      	push	{r7, lr}
100484e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
100484e8:	4b03      	ldr	r3, [pc, #12]	@ (100484f8 <LL_RCC_GetSPI3I2SClockSource+0x14>)
100484ea:	689a      	ldr	r2, [r3, #8]
100484ec:	23c0      	movs	r3, #192	@ 0xc0
100484ee:	041b      	lsls	r3, r3, #16
100484f0:	4013      	ands	r3, r2
}
100484f2:	0018      	movs	r0, r3
100484f4:	46bd      	mov	sp, r7
100484f6:	bd80      	pop	{r7, pc}
100484f8:	48400000 	.word	0x48400000

100484fc <LL_RCC_RC64MPLL_IsReady>:
{
100484fc:	b580      	push	{r7, lr}
100484fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10048500:	4b07      	ldr	r3, [pc, #28]	@ (10048520 <LL_RCC_RC64MPLL_IsReady+0x24>)
10048502:	681a      	ldr	r2, [r3, #0]
10048504:	2380      	movs	r3, #128	@ 0x80
10048506:	01db      	lsls	r3, r3, #7
10048508:	401a      	ands	r2, r3
1004850a:	2380      	movs	r3, #128	@ 0x80
1004850c:	01db      	lsls	r3, r3, #7
1004850e:	429a      	cmp	r2, r3
10048510:	d101      	bne.n	10048516 <LL_RCC_RC64MPLL_IsReady+0x1a>
10048512:	2301      	movs	r3, #1
10048514:	e000      	b.n	10048518 <LL_RCC_RC64MPLL_IsReady+0x1c>
10048516:	2300      	movs	r3, #0
}
10048518:	0018      	movs	r0, r3
1004851a:	46bd      	mov	sp, r7
1004851c:	bd80      	pop	{r7, pc}
1004851e:	46c0      	nop			@ (mov r8, r8)
10048520:	48400000 	.word	0x48400000

10048524 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
10048524:	b580      	push	{r7, lr}
10048526:	b082      	sub	sp, #8
10048528:	af00      	add	r7, sp, #0
1004852a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
1004852c:	687b      	ldr	r3, [r7, #4]
1004852e:	681b      	ldr	r3, [r3, #0]
10048530:	2201      	movs	r2, #1
10048532:	4013      	ands	r3, r2
10048534:	d004      	beq.n	10048540 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
10048536:	687b      	ldr	r3, [r7, #4]
10048538:	691b      	ldr	r3, [r3, #16]
1004853a:	0018      	movs	r0, r3
1004853c:	f7ff ff58 	bl	100483f0 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
10048540:	687b      	ldr	r3, [r7, #4]
10048542:	681b      	ldr	r3, [r3, #0]
10048544:	2202      	movs	r2, #2
10048546:	4013      	ands	r3, r2
10048548:	d004      	beq.n	10048554 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
1004854a:	687b      	ldr	r3, [r7, #4]
1004854c:	695b      	ldr	r3, [r3, #20]
1004854e:	0018      	movs	r0, r3
10048550:	f7ff ff6e 	bl	10048430 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
10048554:	687b      	ldr	r3, [r7, #4]
10048556:	681b      	ldr	r3, [r3, #0]
10048558:	2208      	movs	r2, #8
1004855a:	4013      	ands	r3, r2
1004855c:	d004      	beq.n	10048568 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004855e:	687b      	ldr	r3, [r7, #4]
10048560:	685b      	ldr	r3, [r3, #4]
10048562:	0018      	movs	r0, r3
10048564:	f7ff ffa8 	bl	100484b8 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
10048568:	687b      	ldr	r3, [r7, #4]
1004856a:	681b      	ldr	r3, [r3, #0]
1004856c:	2210      	movs	r2, #16
1004856e:	4013      	ands	r3, r2
10048570:	d004      	beq.n	1004857c <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
10048572:	687b      	ldr	r3, [r7, #4]
10048574:	68db      	ldr	r3, [r3, #12]
10048576:	0018      	movs	r0, r3
10048578:	f7ff ff7c 	bl	10048474 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
1004857c:	687b      	ldr	r3, [r7, #4]
1004857e:	689b      	ldr	r3, [r3, #8]
10048580:	2220      	movs	r2, #32
10048582:	4013      	ands	r3, r2
10048584:	d004      	beq.n	10048590 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
10048586:	687b      	ldr	r3, [r7, #4]
10048588:	689b      	ldr	r3, [r3, #8]
1004858a:	0018      	movs	r0, r3
1004858c:	f7ff ff0e 	bl	100483ac <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10048590:	2300      	movs	r3, #0
}
10048592:	0018      	movs	r0, r3
10048594:	46bd      	mov	sp, r7
10048596:	b002      	add	sp, #8
10048598:	bd80      	pop	{r7, pc}
	...

1004859c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
1004859c:	b580      	push	{r7, lr}
1004859e:	b084      	sub	sp, #16
100485a0:	af00      	add	r7, sp, #0
100485a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
100485a4:	2300      	movs	r3, #0
100485a6:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
100485a8:	687b      	ldr	r3, [r7, #4]
100485aa:	2b20      	cmp	r3, #32
100485ac:	d900      	bls.n	100485b0 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
100485ae:	e07b      	b.n	100486a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
100485b0:	687b      	ldr	r3, [r7, #4]
100485b2:	009a      	lsls	r2, r3, #2
100485b4:	4b40      	ldr	r3, [pc, #256]	@ (100486b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
100485b6:	18d3      	adds	r3, r2, r3
100485b8:	681b      	ldr	r3, [r3, #0]
100485ba:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
100485bc:	f7ff ff2c 	bl	10048418 <LL_RCC_GetRFClock>
100485c0:	1e03      	subs	r3, r0, #0
100485c2:	d002      	beq.n	100485ca <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
100485c4:	2b04      	cmp	r3, #4
100485c6:	d003      	beq.n	100485d0 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
100485c8:	e071      	b.n	100486ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
100485ca:	4b3c      	ldr	r3, [pc, #240]	@ (100486bc <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
100485cc:	60fb      	str	r3, [r7, #12]
          break;
100485ce:	e002      	b.n	100485d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
100485d0:	4b3b      	ldr	r3, [pc, #236]	@ (100486c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
100485d2:	60fb      	str	r3, [r7, #12]
          break;
100485d4:	46c0      	nop			@ (mov r8, r8)
      break;
100485d6:	e06a      	b.n	100486ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
100485d8:	f7ff ff40 	bl	1004845c <LL_RCC_GetSMPSPrescaler>
100485dc:	1e03      	subs	r3, r0, #0
100485de:	d004      	beq.n	100485ea <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
100485e0:	2280      	movs	r2, #128	@ 0x80
100485e2:	0152      	lsls	r2, r2, #5
100485e4:	4293      	cmp	r3, r2
100485e6:	d003      	beq.n	100485f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
100485e8:	e061      	b.n	100486ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
100485ea:	4b36      	ldr	r3, [pc, #216]	@ (100486c4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
100485ec:	60fb      	str	r3, [r7, #12]
          break;
100485ee:	e002      	b.n	100485f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
100485f0:	4b35      	ldr	r3, [pc, #212]	@ (100486c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
100485f2:	60fb      	str	r3, [r7, #12]
          break;
100485f4:	46c0      	nop			@ (mov r8, r8)
      break;
100485f6:	e05a      	b.n	100486ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
100485f8:	f7ff fec8 	bl	1004838c <LL_RCC_DIRECT_HSE_IsEnabled>
100485fc:	1e03      	subs	r3, r0, #0
100485fe:	d005      	beq.n	1004860c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
10048600:	f7ff feb0 	bl	10048364 <LL_RCC_HSE_IsReady>
10048604:	1e03      	subs	r3, r0, #0
10048606:	d107      	bne.n	10048618 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10048608:	2300      	movs	r3, #0
1004860a:	e051      	b.n	100486b0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
1004860c:	f7ff ff76 	bl	100484fc <LL_RCC_RC64MPLL_IsReady>
10048610:	1e03      	subs	r3, r0, #0
10048612:	d101      	bne.n	10048618 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10048614:	2300      	movs	r3, #0
10048616:	e04b      	b.n	100486b0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
10048618:	f7ff ff64 	bl	100484e4 <LL_RCC_GetSPI3I2SClockSource>
1004861c:	0003      	movs	r3, r0
1004861e:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
10048620:	68bb      	ldr	r3, [r7, #8]
10048622:	2b00      	cmp	r3, #0
10048624:	d101      	bne.n	1004862a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
10048626:	4b26      	ldr	r3, [pc, #152]	@ (100486c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10048628:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
1004862a:	68ba      	ldr	r2, [r7, #8]
1004862c:	2380      	movs	r3, #128	@ 0x80
1004862e:	03db      	lsls	r3, r3, #15
10048630:	429a      	cmp	r2, r3
10048632:	d101      	bne.n	10048638 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
10048634:	4b21      	ldr	r3, [pc, #132]	@ (100486bc <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10048636:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
10048638:	68ba      	ldr	r2, [r7, #8]
1004863a:	2380      	movs	r3, #128	@ 0x80
1004863c:	041b      	lsls	r3, r3, #16
1004863e:	429a      	cmp	r2, r3
10048640:	d134      	bne.n	100486ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
10048642:	4b22      	ldr	r3, [pc, #136]	@ (100486cc <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
10048644:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
10048646:	e031      	b.n	100486ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
10048648:	f7ff ff2a 	bl	100484a0 <LL_RCC_GetLPUARTClockSource>
1004864c:	0002      	movs	r2, r0
1004864e:	2380      	movs	r3, #128	@ 0x80
10048650:	019b      	lsls	r3, r3, #6
10048652:	429a      	cmp	r2, r3
10048654:	d103      	bne.n	1004865e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10048656:	2380      	movs	r3, #128	@ 0x80
10048658:	021b      	lsls	r3, r3, #8
1004865a:	60fb      	str	r3, [r7, #12]
          break;
1004865c:	e002      	b.n	10048664 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004865e:	4b18      	ldr	r3, [pc, #96]	@ (100486c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10048660:	60fb      	str	r3, [r7, #12]
          break;
10048662:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10048664:	e023      	b.n	100486ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
10048666:	f7ff feb7 	bl	100483d8 <LL_RCC_LSCO_GetSource>
1004866a:	0003      	movs	r3, r0
1004866c:	22c0      	movs	r2, #192	@ 0xc0
1004866e:	0252      	lsls	r2, r2, #9
10048670:	4293      	cmp	r3, r2
10048672:	d014      	beq.n	1004869e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
10048674:	22c0      	movs	r2, #192	@ 0xc0
10048676:	0252      	lsls	r2, r2, #9
10048678:	4293      	cmp	r3, r2
1004867a:	d813      	bhi.n	100486a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
1004867c:	2280      	movs	r2, #128	@ 0x80
1004867e:	0212      	lsls	r2, r2, #8
10048680:	4293      	cmp	r3, r2
10048682:	d004      	beq.n	1004868e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
10048684:	2280      	movs	r2, #128	@ 0x80
10048686:	0252      	lsls	r2, r2, #9
10048688:	4293      	cmp	r3, r2
1004868a:	d004      	beq.n	10048696 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
1004868c:	e00a      	b.n	100486a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
1004868e:	2380      	movs	r3, #128	@ 0x80
10048690:	021b      	lsls	r3, r3, #8
10048692:	60fb      	str	r3, [r7, #12]
          break;
10048694:	e007      	b.n	100486a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
10048696:	23fa      	movs	r3, #250	@ 0xfa
10048698:	01db      	lsls	r3, r3, #7
1004869a:	60fb      	str	r3, [r7, #12]
          break;
1004869c:	e003      	b.n	100486a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004869e:	4b0c      	ldr	r3, [pc, #48]	@ (100486d0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
100486a0:	60fb      	str	r3, [r7, #12]
          break;
100486a2:	e000      	b.n	100486a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
100486a4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
100486a6:	e002      	b.n	100486ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
100486a8:	46c0      	nop			@ (mov r8, r8)
100486aa:	e000      	b.n	100486ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
100486ac:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
100486ae:	68fb      	ldr	r3, [r7, #12]
}
100486b0:	0018      	movs	r0, r3
100486b2:	46bd      	mov	sp, r7
100486b4:	b004      	add	sp, #16
100486b6:	bd80      	pop	{r7, pc}
100486b8:	1004ee6c 	.word	0x1004ee6c
100486bc:	01e84800 	.word	0x01e84800
100486c0:	00f42400 	.word	0x00f42400
100486c4:	007a1200 	.word	0x007a1200
100486c8:	003d0900 	.word	0x003d0900
100486cc:	03d09000 	.word	0x03d09000
100486d0:	00007a12 	.word	0x00007a12

100486d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
100486d4:	b580      	push	{r7, lr}
100486d6:	b084      	sub	sp, #16
100486d8:	af00      	add	r7, sp, #0
100486da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
100486dc:	687b      	ldr	r3, [r7, #4]
100486de:	2b00      	cmp	r3, #0
100486e0:	d101      	bne.n	100486e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
100486e2:	2301      	movs	r3, #1
100486e4:	e0a8      	b.n	10048838 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
100486e6:	687b      	ldr	r3, [r7, #4]
100486e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100486ea:	2b00      	cmp	r3, #0
100486ec:	d109      	bne.n	10048702 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
100486ee:	687b      	ldr	r3, [r7, #4]
100486f0:	685a      	ldr	r2, [r3, #4]
100486f2:	2382      	movs	r3, #130	@ 0x82
100486f4:	005b      	lsls	r3, r3, #1
100486f6:	429a      	cmp	r2, r3
100486f8:	d009      	beq.n	1004870e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
100486fa:	687b      	ldr	r3, [r7, #4]
100486fc:	2200      	movs	r2, #0
100486fe:	61da      	str	r2, [r3, #28]
10048700:	e005      	b.n	1004870e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
10048702:	687b      	ldr	r3, [r7, #4]
10048704:	2200      	movs	r2, #0
10048706:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
10048708:	687b      	ldr	r3, [r7, #4]
1004870a:	2200      	movs	r2, #0
1004870c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
1004870e:	687b      	ldr	r3, [r7, #4]
10048710:	2200      	movs	r2, #0
10048712:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
10048714:	687b      	ldr	r3, [r7, #4]
10048716:	225d      	movs	r2, #93	@ 0x5d
10048718:	5c9b      	ldrb	r3, [r3, r2]
1004871a:	b2db      	uxtb	r3, r3
1004871c:	2b00      	cmp	r3, #0
1004871e:	d107      	bne.n	10048730 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
10048720:	687b      	ldr	r3, [r7, #4]
10048722:	225c      	movs	r2, #92	@ 0x5c
10048724:	2100      	movs	r1, #0
10048726:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
10048728:	687b      	ldr	r3, [r7, #4]
1004872a:	0018      	movs	r0, r3
1004872c:	f7f8 fd30 	bl	10041190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
10048730:	687b      	ldr	r3, [r7, #4]
10048732:	225d      	movs	r2, #93	@ 0x5d
10048734:	2102      	movs	r1, #2
10048736:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
10048738:	687b      	ldr	r3, [r7, #4]
1004873a:	681b      	ldr	r3, [r3, #0]
1004873c:	681a      	ldr	r2, [r3, #0]
1004873e:	687b      	ldr	r3, [r7, #4]
10048740:	681b      	ldr	r3, [r3, #0]
10048742:	2140      	movs	r1, #64	@ 0x40
10048744:	438a      	bics	r2, r1
10048746:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
10048748:	687b      	ldr	r3, [r7, #4]
1004874a:	68da      	ldr	r2, [r3, #12]
1004874c:	23e0      	movs	r3, #224	@ 0xe0
1004874e:	00db      	lsls	r3, r3, #3
10048750:	429a      	cmp	r2, r3
10048752:	d902      	bls.n	1004875a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
10048754:	2300      	movs	r3, #0
10048756:	60fb      	str	r3, [r7, #12]
10048758:	e002      	b.n	10048760 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
1004875a:	2380      	movs	r3, #128	@ 0x80
1004875c:	015b      	lsls	r3, r3, #5
1004875e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
10048760:	687b      	ldr	r3, [r7, #4]
10048762:	68da      	ldr	r2, [r3, #12]
10048764:	23f0      	movs	r3, #240	@ 0xf0
10048766:	011b      	lsls	r3, r3, #4
10048768:	429a      	cmp	r2, r3
1004876a:	d008      	beq.n	1004877e <HAL_SPI_Init+0xaa>
1004876c:	687b      	ldr	r3, [r7, #4]
1004876e:	68da      	ldr	r2, [r3, #12]
10048770:	23e0      	movs	r3, #224	@ 0xe0
10048772:	00db      	lsls	r3, r3, #3
10048774:	429a      	cmp	r2, r3
10048776:	d002      	beq.n	1004877e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
10048778:	687b      	ldr	r3, [r7, #4]
1004877a:	2200      	movs	r2, #0
1004877c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
1004877e:	687b      	ldr	r3, [r7, #4]
10048780:	685a      	ldr	r2, [r3, #4]
10048782:	2382      	movs	r3, #130	@ 0x82
10048784:	005b      	lsls	r3, r3, #1
10048786:	401a      	ands	r2, r3
10048788:	687b      	ldr	r3, [r7, #4]
1004878a:	6899      	ldr	r1, [r3, #8]
1004878c:	2384      	movs	r3, #132	@ 0x84
1004878e:	021b      	lsls	r3, r3, #8
10048790:	400b      	ands	r3, r1
10048792:	431a      	orrs	r2, r3
10048794:	687b      	ldr	r3, [r7, #4]
10048796:	691b      	ldr	r3, [r3, #16]
10048798:	2102      	movs	r1, #2
1004879a:	400b      	ands	r3, r1
1004879c:	431a      	orrs	r2, r3
1004879e:	687b      	ldr	r3, [r7, #4]
100487a0:	695b      	ldr	r3, [r3, #20]
100487a2:	2101      	movs	r1, #1
100487a4:	400b      	ands	r3, r1
100487a6:	431a      	orrs	r2, r3
100487a8:	687b      	ldr	r3, [r7, #4]
100487aa:	6999      	ldr	r1, [r3, #24]
100487ac:	2380      	movs	r3, #128	@ 0x80
100487ae:	009b      	lsls	r3, r3, #2
100487b0:	400b      	ands	r3, r1
100487b2:	431a      	orrs	r2, r3
100487b4:	687b      	ldr	r3, [r7, #4]
100487b6:	69db      	ldr	r3, [r3, #28]
100487b8:	2138      	movs	r1, #56	@ 0x38
100487ba:	400b      	ands	r3, r1
100487bc:	431a      	orrs	r2, r3
100487be:	687b      	ldr	r3, [r7, #4]
100487c0:	6a1b      	ldr	r3, [r3, #32]
100487c2:	2180      	movs	r1, #128	@ 0x80
100487c4:	400b      	ands	r3, r1
100487c6:	431a      	orrs	r2, r3
100487c8:	0011      	movs	r1, r2
100487ca:	687b      	ldr	r3, [r7, #4]
100487cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100487ce:	2380      	movs	r3, #128	@ 0x80
100487d0:	019b      	lsls	r3, r3, #6
100487d2:	401a      	ands	r2, r3
100487d4:	687b      	ldr	r3, [r7, #4]
100487d6:	681b      	ldr	r3, [r3, #0]
100487d8:	430a      	orrs	r2, r1
100487da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
100487dc:	687b      	ldr	r3, [r7, #4]
100487de:	699b      	ldr	r3, [r3, #24]
100487e0:	0c1b      	lsrs	r3, r3, #16
100487e2:	2204      	movs	r2, #4
100487e4:	401a      	ands	r2, r3
100487e6:	687b      	ldr	r3, [r7, #4]
100487e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100487ea:	2110      	movs	r1, #16
100487ec:	400b      	ands	r3, r1
100487ee:	431a      	orrs	r2, r3
100487f0:	687b      	ldr	r3, [r7, #4]
100487f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100487f4:	2108      	movs	r1, #8
100487f6:	400b      	ands	r3, r1
100487f8:	431a      	orrs	r2, r3
100487fa:	687b      	ldr	r3, [r7, #4]
100487fc:	68d9      	ldr	r1, [r3, #12]
100487fe:	23f0      	movs	r3, #240	@ 0xf0
10048800:	011b      	lsls	r3, r3, #4
10048802:	400b      	ands	r3, r1
10048804:	431a      	orrs	r2, r3
10048806:	0011      	movs	r1, r2
10048808:	68fa      	ldr	r2, [r7, #12]
1004880a:	2380      	movs	r3, #128	@ 0x80
1004880c:	015b      	lsls	r3, r3, #5
1004880e:	401a      	ands	r2, r3
10048810:	687b      	ldr	r3, [r7, #4]
10048812:	681b      	ldr	r3, [r3, #0]
10048814:	430a      	orrs	r2, r1
10048816:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
10048818:	687b      	ldr	r3, [r7, #4]
1004881a:	681b      	ldr	r3, [r3, #0]
1004881c:	69da      	ldr	r2, [r3, #28]
1004881e:	687b      	ldr	r3, [r7, #4]
10048820:	681b      	ldr	r3, [r3, #0]
10048822:	4907      	ldr	r1, [pc, #28]	@ (10048840 <HAL_SPI_Init+0x16c>)
10048824:	400a      	ands	r2, r1
10048826:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
10048828:	687b      	ldr	r3, [r7, #4]
1004882a:	2200      	movs	r2, #0
1004882c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
1004882e:	687b      	ldr	r3, [r7, #4]
10048830:	225d      	movs	r2, #93	@ 0x5d
10048832:	2101      	movs	r1, #1
10048834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048836:	2300      	movs	r3, #0
}
10048838:	0018      	movs	r0, r3
1004883a:	46bd      	mov	sp, r7
1004883c:	b004      	add	sp, #16
1004883e:	bd80      	pop	{r7, pc}
10048840:	fffff7ff 	.word	0xfffff7ff

10048844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10048844:	b580      	push	{r7, lr}
10048846:	b082      	sub	sp, #8
10048848:	af00      	add	r7, sp, #0
1004884a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
1004884c:	687b      	ldr	r3, [r7, #4]
1004884e:	2b00      	cmp	r3, #0
10048850:	d101      	bne.n	10048856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10048852:	2301      	movs	r3, #1
10048854:	e046      	b.n	100488e4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10048856:	687b      	ldr	r3, [r7, #4]
10048858:	2288      	movs	r2, #136	@ 0x88
1004885a:	589b      	ldr	r3, [r3, r2]
1004885c:	2b00      	cmp	r3, #0
1004885e:	d107      	bne.n	10048870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10048860:	687b      	ldr	r3, [r7, #4]
10048862:	2284      	movs	r2, #132	@ 0x84
10048864:	2100      	movs	r1, #0
10048866:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10048868:	687b      	ldr	r3, [r7, #4]
1004886a:	0018      	movs	r0, r3
1004886c:	f7f8 fcea 	bl	10041244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10048870:	687b      	ldr	r3, [r7, #4]
10048872:	2288      	movs	r2, #136	@ 0x88
10048874:	2124      	movs	r1, #36	@ 0x24
10048876:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10048878:	687b      	ldr	r3, [r7, #4]
1004887a:	681b      	ldr	r3, [r3, #0]
1004887c:	681a      	ldr	r2, [r3, #0]
1004887e:	687b      	ldr	r3, [r7, #4]
10048880:	681b      	ldr	r3, [r3, #0]
10048882:	2101      	movs	r1, #1
10048884:	438a      	bics	r2, r1
10048886:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10048888:	687b      	ldr	r3, [r7, #4]
1004888a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004888c:	2b00      	cmp	r3, #0
1004888e:	d003      	beq.n	10048898 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
10048890:	687b      	ldr	r3, [r7, #4]
10048892:	0018      	movs	r0, r3
10048894:	f000 fa38 	bl	10048d08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10048898:	687b      	ldr	r3, [r7, #4]
1004889a:	0018      	movs	r0, r3
1004889c:	f000 f8cc 	bl	10048a38 <UART_SetConfig>
100488a0:	0003      	movs	r3, r0
100488a2:	2b01      	cmp	r3, #1
100488a4:	d101      	bne.n	100488aa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
100488a6:	2301      	movs	r3, #1
100488a8:	e01c      	b.n	100488e4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
100488aa:	687b      	ldr	r3, [r7, #4]
100488ac:	681b      	ldr	r3, [r3, #0]
100488ae:	685a      	ldr	r2, [r3, #4]
100488b0:	687b      	ldr	r3, [r7, #4]
100488b2:	681b      	ldr	r3, [r3, #0]
100488b4:	490d      	ldr	r1, [pc, #52]	@ (100488ec <HAL_UART_Init+0xa8>)
100488b6:	400a      	ands	r2, r1
100488b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
100488ba:	687b      	ldr	r3, [r7, #4]
100488bc:	681b      	ldr	r3, [r3, #0]
100488be:	689a      	ldr	r2, [r3, #8]
100488c0:	687b      	ldr	r3, [r7, #4]
100488c2:	681b      	ldr	r3, [r3, #0]
100488c4:	212a      	movs	r1, #42	@ 0x2a
100488c6:	438a      	bics	r2, r1
100488c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
100488ca:	687b      	ldr	r3, [r7, #4]
100488cc:	681b      	ldr	r3, [r3, #0]
100488ce:	681a      	ldr	r2, [r3, #0]
100488d0:	687b      	ldr	r3, [r7, #4]
100488d2:	681b      	ldr	r3, [r3, #0]
100488d4:	2101      	movs	r1, #1
100488d6:	430a      	orrs	r2, r1
100488d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
100488da:	687b      	ldr	r3, [r7, #4]
100488dc:	0018      	movs	r0, r3
100488de:	f000 fac7 	bl	10048e70 <UART_CheckIdleState>
100488e2:	0003      	movs	r3, r0
}
100488e4:	0018      	movs	r0, r3
100488e6:	46bd      	mov	sp, r7
100488e8:	b002      	add	sp, #8
100488ea:	bd80      	pop	{r7, pc}
100488ec:	ffffb7ff 	.word	0xffffb7ff

100488f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
100488f0:	b580      	push	{r7, lr}
100488f2:	b08a      	sub	sp, #40	@ 0x28
100488f4:	af02      	add	r7, sp, #8
100488f6:	60f8      	str	r0, [r7, #12]
100488f8:	60b9      	str	r1, [r7, #8]
100488fa:	603b      	str	r3, [r7, #0]
100488fc:	1dbb      	adds	r3, r7, #6
100488fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10048900:	68fb      	ldr	r3, [r7, #12]
10048902:	2288      	movs	r2, #136	@ 0x88
10048904:	589b      	ldr	r3, [r3, r2]
10048906:	2b20      	cmp	r3, #32
10048908:	d000      	beq.n	1004890c <HAL_UART_Transmit+0x1c>
1004890a:	e090      	b.n	10048a2e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
1004890c:	68bb      	ldr	r3, [r7, #8]
1004890e:	2b00      	cmp	r3, #0
10048910:	d003      	beq.n	1004891a <HAL_UART_Transmit+0x2a>
10048912:	1dbb      	adds	r3, r7, #6
10048914:	881b      	ldrh	r3, [r3, #0]
10048916:	2b00      	cmp	r3, #0
10048918:	d101      	bne.n	1004891e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
1004891a:	2301      	movs	r3, #1
1004891c:	e088      	b.n	10048a30 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1004891e:	68fb      	ldr	r3, [r7, #12]
10048920:	689a      	ldr	r2, [r3, #8]
10048922:	2380      	movs	r3, #128	@ 0x80
10048924:	015b      	lsls	r3, r3, #5
10048926:	429a      	cmp	r2, r3
10048928:	d109      	bne.n	1004893e <HAL_UART_Transmit+0x4e>
1004892a:	68fb      	ldr	r3, [r7, #12]
1004892c:	691b      	ldr	r3, [r3, #16]
1004892e:	2b00      	cmp	r3, #0
10048930:	d105      	bne.n	1004893e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
10048932:	68bb      	ldr	r3, [r7, #8]
10048934:	2201      	movs	r2, #1
10048936:	4013      	ands	r3, r2
10048938:	d001      	beq.n	1004893e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
1004893a:	2301      	movs	r3, #1
1004893c:	e078      	b.n	10048a30 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
1004893e:	68fb      	ldr	r3, [r7, #12]
10048940:	2290      	movs	r2, #144	@ 0x90
10048942:	2100      	movs	r1, #0
10048944:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
10048946:	68fb      	ldr	r3, [r7, #12]
10048948:	2288      	movs	r2, #136	@ 0x88
1004894a:	2121      	movs	r1, #33	@ 0x21
1004894c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
1004894e:	f7fc fb11 	bl	10044f74 <HAL_GetTick>
10048952:	0003      	movs	r3, r0
10048954:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
10048956:	68fb      	ldr	r3, [r7, #12]
10048958:	1dba      	adds	r2, r7, #6
1004895a:	2154      	movs	r1, #84	@ 0x54
1004895c:	8812      	ldrh	r2, [r2, #0]
1004895e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
10048960:	68fb      	ldr	r3, [r7, #12]
10048962:	1dba      	adds	r2, r7, #6
10048964:	2156      	movs	r1, #86	@ 0x56
10048966:	8812      	ldrh	r2, [r2, #0]
10048968:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1004896a:	68fb      	ldr	r3, [r7, #12]
1004896c:	689a      	ldr	r2, [r3, #8]
1004896e:	2380      	movs	r3, #128	@ 0x80
10048970:	015b      	lsls	r3, r3, #5
10048972:	429a      	cmp	r2, r3
10048974:	d108      	bne.n	10048988 <HAL_UART_Transmit+0x98>
10048976:	68fb      	ldr	r3, [r7, #12]
10048978:	691b      	ldr	r3, [r3, #16]
1004897a:	2b00      	cmp	r3, #0
1004897c:	d104      	bne.n	10048988 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
1004897e:	2300      	movs	r3, #0
10048980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
10048982:	68bb      	ldr	r3, [r7, #8]
10048984:	61bb      	str	r3, [r7, #24]
10048986:	e003      	b.n	10048990 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
10048988:	68bb      	ldr	r3, [r7, #8]
1004898a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
1004898c:	2300      	movs	r3, #0
1004898e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
10048990:	e030      	b.n	100489f4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10048992:	697a      	ldr	r2, [r7, #20]
10048994:	68f8      	ldr	r0, [r7, #12]
10048996:	683b      	ldr	r3, [r7, #0]
10048998:	9300      	str	r3, [sp, #0]
1004899a:	0013      	movs	r3, r2
1004899c:	2200      	movs	r2, #0
1004899e:	2180      	movs	r1, #128	@ 0x80
100489a0:	f000 fb10 	bl	10048fc4 <UART_WaitOnFlagUntilTimeout>
100489a4:	1e03      	subs	r3, r0, #0
100489a6:	d005      	beq.n	100489b4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
100489a8:	68fb      	ldr	r3, [r7, #12]
100489aa:	2288      	movs	r2, #136	@ 0x88
100489ac:	2120      	movs	r1, #32
100489ae:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
100489b0:	2303      	movs	r3, #3
100489b2:	e03d      	b.n	10048a30 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
100489b4:	69fb      	ldr	r3, [r7, #28]
100489b6:	2b00      	cmp	r3, #0
100489b8:	d10b      	bne.n	100489d2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
100489ba:	69bb      	ldr	r3, [r7, #24]
100489bc:	881b      	ldrh	r3, [r3, #0]
100489be:	001a      	movs	r2, r3
100489c0:	68fb      	ldr	r3, [r7, #12]
100489c2:	681b      	ldr	r3, [r3, #0]
100489c4:	05d2      	lsls	r2, r2, #23
100489c6:	0dd2      	lsrs	r2, r2, #23
100489c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
100489ca:	69bb      	ldr	r3, [r7, #24]
100489cc:	3302      	adds	r3, #2
100489ce:	61bb      	str	r3, [r7, #24]
100489d0:	e007      	b.n	100489e2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
100489d2:	69fb      	ldr	r3, [r7, #28]
100489d4:	781a      	ldrb	r2, [r3, #0]
100489d6:	68fb      	ldr	r3, [r7, #12]
100489d8:	681b      	ldr	r3, [r3, #0]
100489da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
100489dc:	69fb      	ldr	r3, [r7, #28]
100489de:	3301      	adds	r3, #1
100489e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
100489e2:	68fb      	ldr	r3, [r7, #12]
100489e4:	2256      	movs	r2, #86	@ 0x56
100489e6:	5a9b      	ldrh	r3, [r3, r2]
100489e8:	b29b      	uxth	r3, r3
100489ea:	3b01      	subs	r3, #1
100489ec:	b299      	uxth	r1, r3
100489ee:	68fb      	ldr	r3, [r7, #12]
100489f0:	2256      	movs	r2, #86	@ 0x56
100489f2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
100489f4:	68fb      	ldr	r3, [r7, #12]
100489f6:	2256      	movs	r2, #86	@ 0x56
100489f8:	5a9b      	ldrh	r3, [r3, r2]
100489fa:	b29b      	uxth	r3, r3
100489fc:	2b00      	cmp	r3, #0
100489fe:	d1c8      	bne.n	10048992 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10048a00:	697a      	ldr	r2, [r7, #20]
10048a02:	68f8      	ldr	r0, [r7, #12]
10048a04:	683b      	ldr	r3, [r7, #0]
10048a06:	9300      	str	r3, [sp, #0]
10048a08:	0013      	movs	r3, r2
10048a0a:	2200      	movs	r2, #0
10048a0c:	2140      	movs	r1, #64	@ 0x40
10048a0e:	f000 fad9 	bl	10048fc4 <UART_WaitOnFlagUntilTimeout>
10048a12:	1e03      	subs	r3, r0, #0
10048a14:	d005      	beq.n	10048a22 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
10048a16:	68fb      	ldr	r3, [r7, #12]
10048a18:	2288      	movs	r2, #136	@ 0x88
10048a1a:	2120      	movs	r1, #32
10048a1c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
10048a1e:	2303      	movs	r3, #3
10048a20:	e006      	b.n	10048a30 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10048a22:	68fb      	ldr	r3, [r7, #12]
10048a24:	2288      	movs	r2, #136	@ 0x88
10048a26:	2120      	movs	r1, #32
10048a28:	5099      	str	r1, [r3, r2]

    return HAL_OK;
10048a2a:	2300      	movs	r3, #0
10048a2c:	e000      	b.n	10048a30 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
10048a2e:	2302      	movs	r3, #2
  }
}
10048a30:	0018      	movs	r0, r3
10048a32:	46bd      	mov	sp, r7
10048a34:	b008      	add	sp, #32
10048a36:	bd80      	pop	{r7, pc}

10048a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10048a38:	b5b0      	push	{r4, r5, r7, lr}
10048a3a:	b090      	sub	sp, #64	@ 0x40
10048a3c:	af00      	add	r7, sp, #0
10048a3e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10048a40:	231b      	movs	r3, #27
10048a42:	2220      	movs	r2, #32
10048a44:	189b      	adds	r3, r3, r2
10048a46:	19db      	adds	r3, r3, r7
10048a48:	2200      	movs	r2, #0
10048a4a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10048a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a4e:	689a      	ldr	r2, [r3, #8]
10048a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a52:	691b      	ldr	r3, [r3, #16]
10048a54:	431a      	orrs	r2, r3
10048a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a58:	695b      	ldr	r3, [r3, #20]
10048a5a:	431a      	orrs	r2, r3
10048a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a5e:	69db      	ldr	r3, [r3, #28]
10048a60:	4313      	orrs	r3, r2
10048a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10048a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a66:	681b      	ldr	r3, [r3, #0]
10048a68:	681b      	ldr	r3, [r3, #0]
10048a6a:	4aa1      	ldr	r2, [pc, #644]	@ (10048cf0 <UART_SetConfig+0x2b8>)
10048a6c:	4013      	ands	r3, r2
10048a6e:	0019      	movs	r1, r3
10048a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a72:	681a      	ldr	r2, [r3, #0]
10048a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048a76:	430b      	orrs	r3, r1
10048a78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10048a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a7c:	681b      	ldr	r3, [r3, #0]
10048a7e:	685b      	ldr	r3, [r3, #4]
10048a80:	4a9c      	ldr	r2, [pc, #624]	@ (10048cf4 <UART_SetConfig+0x2bc>)
10048a82:	4013      	ands	r3, r2
10048a84:	0018      	movs	r0, r3
10048a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a88:	68d9      	ldr	r1, [r3, #12]
10048a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a8c:	681a      	ldr	r2, [r3, #0]
10048a8e:	0003      	movs	r3, r0
10048a90:	430b      	orrs	r3, r1
10048a92:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10048a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a96:	699b      	ldr	r3, [r3, #24]
10048a98:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10048a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a9c:	681b      	ldr	r3, [r3, #0]
10048a9e:	4a96      	ldr	r2, [pc, #600]	@ (10048cf8 <UART_SetConfig+0x2c0>)
10048aa0:	4293      	cmp	r3, r2
10048aa2:	d004      	beq.n	10048aae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10048aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048aa6:	6a1b      	ldr	r3, [r3, #32]
10048aa8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10048aaa:	4313      	orrs	r3, r2
10048aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10048aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ab0:	681b      	ldr	r3, [r3, #0]
10048ab2:	689b      	ldr	r3, [r3, #8]
10048ab4:	4a91      	ldr	r2, [pc, #580]	@ (10048cfc <UART_SetConfig+0x2c4>)
10048ab6:	4013      	ands	r3, r2
10048ab8:	0019      	movs	r1, r3
10048aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048abc:	681a      	ldr	r2, [r3, #0]
10048abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048ac0:	430b      	orrs	r3, r1
10048ac2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10048ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ac6:	681b      	ldr	r3, [r3, #0]
10048ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048aca:	220f      	movs	r2, #15
10048acc:	4393      	bics	r3, r2
10048ace:	0018      	movs	r0, r3
10048ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ad2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10048ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ad6:	681a      	ldr	r2, [r3, #0]
10048ad8:	0003      	movs	r3, r0
10048ada:	430b      	orrs	r3, r1
10048adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10048ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ae0:	681b      	ldr	r3, [r3, #0]
10048ae2:	4a85      	ldr	r2, [pc, #532]	@ (10048cf8 <UART_SetConfig+0x2c0>)
10048ae4:	4293      	cmp	r3, r2
10048ae6:	d16d      	bne.n	10048bc4 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
10048ae8:	2010      	movs	r0, #16
10048aea:	f7ff fd57 	bl	1004859c <HAL_RCCEx_GetPeriphCLKFreq>
10048aee:	0003      	movs	r3, r0
10048af0:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10048af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048af4:	2b00      	cmp	r3, #0
10048af6:	d100      	bne.n	10048afa <UART_SetConfig+0xc2>
10048af8:	e0e3      	b.n	10048cc2 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10048afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048afe:	4b80      	ldr	r3, [pc, #512]	@ (10048d00 <UART_SetConfig+0x2c8>)
10048b00:	0052      	lsls	r2, r2, #1
10048b02:	5ad3      	ldrh	r3, [r2, r3]
10048b04:	0019      	movs	r1, r3
10048b06:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048b08:	f7f7 fb92 	bl	10040230 <__udivsi3>
10048b0c:	0003      	movs	r3, r0
10048b0e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b12:	685a      	ldr	r2, [r3, #4]
10048b14:	0013      	movs	r3, r2
10048b16:	005b      	lsls	r3, r3, #1
10048b18:	189b      	adds	r3, r3, r2
10048b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048b1c:	429a      	cmp	r2, r3
10048b1e:	d305      	bcc.n	10048b2c <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10048b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b22:	685b      	ldr	r3, [r3, #4]
10048b24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10048b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10048b28:	429a      	cmp	r2, r3
10048b2a:	d906      	bls.n	10048b3a <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
10048b2c:	231b      	movs	r3, #27
10048b2e:	2220      	movs	r2, #32
10048b30:	189b      	adds	r3, r3, r2
10048b32:	19db      	adds	r3, r3, r7
10048b34:	2201      	movs	r2, #1
10048b36:	701a      	strb	r2, [r3, #0]
10048b38:	e0c3      	b.n	10048cc2 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048b3c:	61bb      	str	r3, [r7, #24]
10048b3e:	2300      	movs	r3, #0
10048b40:	61fb      	str	r3, [r7, #28]
10048b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048b46:	4b6e      	ldr	r3, [pc, #440]	@ (10048d00 <UART_SetConfig+0x2c8>)
10048b48:	0052      	lsls	r2, r2, #1
10048b4a:	5ad3      	ldrh	r3, [r2, r3]
10048b4c:	613b      	str	r3, [r7, #16]
10048b4e:	2300      	movs	r3, #0
10048b50:	617b      	str	r3, [r7, #20]
10048b52:	693a      	ldr	r2, [r7, #16]
10048b54:	697b      	ldr	r3, [r7, #20]
10048b56:	69b8      	ldr	r0, [r7, #24]
10048b58:	69f9      	ldr	r1, [r7, #28]
10048b5a:	f7f7 fd09 	bl	10040570 <__aeabi_uldivmod>
10048b5e:	0002      	movs	r2, r0
10048b60:	000b      	movs	r3, r1
10048b62:	0e11      	lsrs	r1, r2, #24
10048b64:	021d      	lsls	r5, r3, #8
10048b66:	430d      	orrs	r5, r1
10048b68:	0214      	lsls	r4, r2, #8
10048b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b6c:	685b      	ldr	r3, [r3, #4]
10048b6e:	085b      	lsrs	r3, r3, #1
10048b70:	60bb      	str	r3, [r7, #8]
10048b72:	2300      	movs	r3, #0
10048b74:	60fb      	str	r3, [r7, #12]
10048b76:	68b8      	ldr	r0, [r7, #8]
10048b78:	68f9      	ldr	r1, [r7, #12]
10048b7a:	1900      	adds	r0, r0, r4
10048b7c:	4169      	adcs	r1, r5
10048b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b80:	685b      	ldr	r3, [r3, #4]
10048b82:	603b      	str	r3, [r7, #0]
10048b84:	2300      	movs	r3, #0
10048b86:	607b      	str	r3, [r7, #4]
10048b88:	683a      	ldr	r2, [r7, #0]
10048b8a:	687b      	ldr	r3, [r7, #4]
10048b8c:	f7f7 fcf0 	bl	10040570 <__aeabi_uldivmod>
10048b90:	0002      	movs	r2, r0
10048b92:	000b      	movs	r3, r1
10048b94:	0013      	movs	r3, r2
10048b96:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10048b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048b9a:	23c0      	movs	r3, #192	@ 0xc0
10048b9c:	009b      	lsls	r3, r3, #2
10048b9e:	429a      	cmp	r2, r3
10048ba0:	d309      	bcc.n	10048bb6 <UART_SetConfig+0x17e>
10048ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048ba4:	2380      	movs	r3, #128	@ 0x80
10048ba6:	035b      	lsls	r3, r3, #13
10048ba8:	429a      	cmp	r2, r3
10048baa:	d204      	bcs.n	10048bb6 <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
10048bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bae:	681b      	ldr	r3, [r3, #0]
10048bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048bb2:	60da      	str	r2, [r3, #12]
10048bb4:	e085      	b.n	10048cc2 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
10048bb6:	231b      	movs	r3, #27
10048bb8:	2220      	movs	r2, #32
10048bba:	189b      	adds	r3, r3, r2
10048bbc:	19db      	adds	r3, r3, r7
10048bbe:	2201      	movs	r2, #1
10048bc0:	701a      	strb	r2, [r3, #0]
10048bc2:	e07e      	b.n	10048cc2 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10048bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bc6:	69da      	ldr	r2, [r3, #28]
10048bc8:	2380      	movs	r3, #128	@ 0x80
10048bca:	021b      	lsls	r3, r3, #8
10048bcc:	429a      	cmp	r2, r3
10048bce:	d148      	bne.n	10048c62 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
10048bd0:	4b4c      	ldr	r3, [pc, #304]	@ (10048d04 <UART_SetConfig+0x2cc>)
10048bd2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10048bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048bd6:	2b00      	cmp	r3, #0
10048bd8:	d100      	bne.n	10048bdc <UART_SetConfig+0x1a4>
10048bda:	e072      	b.n	10048cc2 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048be0:	4b47      	ldr	r3, [pc, #284]	@ (10048d00 <UART_SetConfig+0x2c8>)
10048be2:	0052      	lsls	r2, r2, #1
10048be4:	5ad3      	ldrh	r3, [r2, r3]
10048be6:	0019      	movs	r1, r3
10048be8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048bea:	f7f7 fb21 	bl	10040230 <__udivsi3>
10048bee:	0003      	movs	r3, r0
10048bf0:	005a      	lsls	r2, r3, #1
10048bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bf4:	685b      	ldr	r3, [r3, #4]
10048bf6:	085b      	lsrs	r3, r3, #1
10048bf8:	18d2      	adds	r2, r2, r3
10048bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bfc:	685b      	ldr	r3, [r3, #4]
10048bfe:	0019      	movs	r1, r3
10048c00:	0010      	movs	r0, r2
10048c02:	f7f7 fb15 	bl	10040230 <__udivsi3>
10048c06:	0003      	movs	r3, r0
10048c08:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048c0c:	2b0f      	cmp	r3, #15
10048c0e:	d921      	bls.n	10048c54 <UART_SetConfig+0x21c>
10048c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048c12:	2380      	movs	r3, #128	@ 0x80
10048c14:	025b      	lsls	r3, r3, #9
10048c16:	429a      	cmp	r2, r3
10048c18:	d21c      	bcs.n	10048c54 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10048c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048c1c:	b29a      	uxth	r2, r3
10048c1e:	200e      	movs	r0, #14
10048c20:	2420      	movs	r4, #32
10048c22:	1903      	adds	r3, r0, r4
10048c24:	19db      	adds	r3, r3, r7
10048c26:	210f      	movs	r1, #15
10048c28:	438a      	bics	r2, r1
10048c2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10048c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048c2e:	085b      	lsrs	r3, r3, #1
10048c30:	b29b      	uxth	r3, r3
10048c32:	2207      	movs	r2, #7
10048c34:	4013      	ands	r3, r2
10048c36:	b299      	uxth	r1, r3
10048c38:	1903      	adds	r3, r0, r4
10048c3a:	19db      	adds	r3, r3, r7
10048c3c:	1902      	adds	r2, r0, r4
10048c3e:	19d2      	adds	r2, r2, r7
10048c40:	8812      	ldrh	r2, [r2, #0]
10048c42:	430a      	orrs	r2, r1
10048c44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10048c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c48:	681b      	ldr	r3, [r3, #0]
10048c4a:	1902      	adds	r2, r0, r4
10048c4c:	19d2      	adds	r2, r2, r7
10048c4e:	8812      	ldrh	r2, [r2, #0]
10048c50:	60da      	str	r2, [r3, #12]
10048c52:	e036      	b.n	10048cc2 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10048c54:	231b      	movs	r3, #27
10048c56:	2220      	movs	r2, #32
10048c58:	189b      	adds	r3, r3, r2
10048c5a:	19db      	adds	r3, r3, r7
10048c5c:	2201      	movs	r2, #1
10048c5e:	701a      	strb	r2, [r3, #0]
10048c60:	e02f      	b.n	10048cc2 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10048c62:	4b28      	ldr	r3, [pc, #160]	@ (10048d04 <UART_SetConfig+0x2cc>)
10048c64:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10048c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048c68:	2b00      	cmp	r3, #0
10048c6a:	d02a      	beq.n	10048cc2 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048c70:	4b23      	ldr	r3, [pc, #140]	@ (10048d00 <UART_SetConfig+0x2c8>)
10048c72:	0052      	lsls	r2, r2, #1
10048c74:	5ad3      	ldrh	r3, [r2, r3]
10048c76:	0019      	movs	r1, r3
10048c78:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048c7a:	f7f7 fad9 	bl	10040230 <__udivsi3>
10048c7e:	0003      	movs	r3, r0
10048c80:	001a      	movs	r2, r3
10048c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c84:	685b      	ldr	r3, [r3, #4]
10048c86:	085b      	lsrs	r3, r3, #1
10048c88:	18d2      	adds	r2, r2, r3
10048c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c8c:	685b      	ldr	r3, [r3, #4]
10048c8e:	0019      	movs	r1, r3
10048c90:	0010      	movs	r0, r2
10048c92:	f7f7 facd 	bl	10040230 <__udivsi3>
10048c96:	0003      	movs	r3, r0
10048c98:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048c9c:	2b0f      	cmp	r3, #15
10048c9e:	d90a      	bls.n	10048cb6 <UART_SetConfig+0x27e>
10048ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048ca2:	2380      	movs	r3, #128	@ 0x80
10048ca4:	025b      	lsls	r3, r3, #9
10048ca6:	429a      	cmp	r2, r3
10048ca8:	d205      	bcs.n	10048cb6 <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10048caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048cac:	b29a      	uxth	r2, r3
10048cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cb0:	681b      	ldr	r3, [r3, #0]
10048cb2:	60da      	str	r2, [r3, #12]
10048cb4:	e005      	b.n	10048cc2 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10048cb6:	231b      	movs	r3, #27
10048cb8:	2220      	movs	r2, #32
10048cba:	189b      	adds	r3, r3, r2
10048cbc:	19db      	adds	r3, r3, r7
10048cbe:	2201      	movs	r2, #1
10048cc0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10048cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cc4:	226a      	movs	r2, #106	@ 0x6a
10048cc6:	2101      	movs	r1, #1
10048cc8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10048cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048ccc:	2268      	movs	r2, #104	@ 0x68
10048cce:	2101      	movs	r1, #1
10048cd0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10048cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cd4:	2200      	movs	r2, #0
10048cd6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10048cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048cda:	2200      	movs	r2, #0
10048cdc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10048cde:	231b      	movs	r3, #27
10048ce0:	2220      	movs	r2, #32
10048ce2:	189b      	adds	r3, r3, r2
10048ce4:	19db      	adds	r3, r3, r7
10048ce6:	781b      	ldrb	r3, [r3, #0]
}
10048ce8:	0018      	movs	r0, r3
10048cea:	46bd      	mov	sp, r7
10048cec:	b010      	add	sp, #64	@ 0x40
10048cee:	bdb0      	pop	{r4, r5, r7, pc}
10048cf0:	cfff69f3 	.word	0xcfff69f3
10048cf4:	ffffcfff 	.word	0xffffcfff
10048cf8:	41005000 	.word	0x41005000
10048cfc:	11fff4ff 	.word	0x11fff4ff
10048d00:	1004eef0 	.word	0x1004eef0
10048d04:	00f42400 	.word	0x00f42400

10048d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10048d08:	b580      	push	{r7, lr}
10048d0a:	b082      	sub	sp, #8
10048d0c:	af00      	add	r7, sp, #0
10048d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10048d10:	687b      	ldr	r3, [r7, #4]
10048d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d14:	2208      	movs	r2, #8
10048d16:	4013      	ands	r3, r2
10048d18:	d00b      	beq.n	10048d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10048d1a:	687b      	ldr	r3, [r7, #4]
10048d1c:	681b      	ldr	r3, [r3, #0]
10048d1e:	685b      	ldr	r3, [r3, #4]
10048d20:	4a4a      	ldr	r2, [pc, #296]	@ (10048e4c <UART_AdvFeatureConfig+0x144>)
10048d22:	4013      	ands	r3, r2
10048d24:	0019      	movs	r1, r3
10048d26:	687b      	ldr	r3, [r7, #4]
10048d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10048d2a:	687b      	ldr	r3, [r7, #4]
10048d2c:	681b      	ldr	r3, [r3, #0]
10048d2e:	430a      	orrs	r2, r1
10048d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10048d32:	687b      	ldr	r3, [r7, #4]
10048d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d36:	2201      	movs	r2, #1
10048d38:	4013      	ands	r3, r2
10048d3a:	d00b      	beq.n	10048d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10048d3c:	687b      	ldr	r3, [r7, #4]
10048d3e:	681b      	ldr	r3, [r3, #0]
10048d40:	685b      	ldr	r3, [r3, #4]
10048d42:	4a43      	ldr	r2, [pc, #268]	@ (10048e50 <UART_AdvFeatureConfig+0x148>)
10048d44:	4013      	ands	r3, r2
10048d46:	0019      	movs	r1, r3
10048d48:	687b      	ldr	r3, [r7, #4]
10048d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048d4c:	687b      	ldr	r3, [r7, #4]
10048d4e:	681b      	ldr	r3, [r3, #0]
10048d50:	430a      	orrs	r2, r1
10048d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10048d54:	687b      	ldr	r3, [r7, #4]
10048d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d58:	2202      	movs	r2, #2
10048d5a:	4013      	ands	r3, r2
10048d5c:	d00b      	beq.n	10048d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10048d5e:	687b      	ldr	r3, [r7, #4]
10048d60:	681b      	ldr	r3, [r3, #0]
10048d62:	685b      	ldr	r3, [r3, #4]
10048d64:	4a3b      	ldr	r2, [pc, #236]	@ (10048e54 <UART_AdvFeatureConfig+0x14c>)
10048d66:	4013      	ands	r3, r2
10048d68:	0019      	movs	r1, r3
10048d6a:	687b      	ldr	r3, [r7, #4]
10048d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10048d6e:	687b      	ldr	r3, [r7, #4]
10048d70:	681b      	ldr	r3, [r3, #0]
10048d72:	430a      	orrs	r2, r1
10048d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10048d76:	687b      	ldr	r3, [r7, #4]
10048d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d7a:	2204      	movs	r2, #4
10048d7c:	4013      	ands	r3, r2
10048d7e:	d00b      	beq.n	10048d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10048d80:	687b      	ldr	r3, [r7, #4]
10048d82:	681b      	ldr	r3, [r3, #0]
10048d84:	685b      	ldr	r3, [r3, #4]
10048d86:	4a34      	ldr	r2, [pc, #208]	@ (10048e58 <UART_AdvFeatureConfig+0x150>)
10048d88:	4013      	ands	r3, r2
10048d8a:	0019      	movs	r1, r3
10048d8c:	687b      	ldr	r3, [r7, #4]
10048d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10048d90:	687b      	ldr	r3, [r7, #4]
10048d92:	681b      	ldr	r3, [r3, #0]
10048d94:	430a      	orrs	r2, r1
10048d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10048d98:	687b      	ldr	r3, [r7, #4]
10048d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048d9c:	2210      	movs	r2, #16
10048d9e:	4013      	ands	r3, r2
10048da0:	d00b      	beq.n	10048dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10048da2:	687b      	ldr	r3, [r7, #4]
10048da4:	681b      	ldr	r3, [r3, #0]
10048da6:	689b      	ldr	r3, [r3, #8]
10048da8:	4a2c      	ldr	r2, [pc, #176]	@ (10048e5c <UART_AdvFeatureConfig+0x154>)
10048daa:	4013      	ands	r3, r2
10048dac:	0019      	movs	r1, r3
10048dae:	687b      	ldr	r3, [r7, #4]
10048db0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10048db2:	687b      	ldr	r3, [r7, #4]
10048db4:	681b      	ldr	r3, [r3, #0]
10048db6:	430a      	orrs	r2, r1
10048db8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10048dba:	687b      	ldr	r3, [r7, #4]
10048dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048dbe:	2220      	movs	r2, #32
10048dc0:	4013      	ands	r3, r2
10048dc2:	d00b      	beq.n	10048ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10048dc4:	687b      	ldr	r3, [r7, #4]
10048dc6:	681b      	ldr	r3, [r3, #0]
10048dc8:	689b      	ldr	r3, [r3, #8]
10048dca:	4a25      	ldr	r2, [pc, #148]	@ (10048e60 <UART_AdvFeatureConfig+0x158>)
10048dcc:	4013      	ands	r3, r2
10048dce:	0019      	movs	r1, r3
10048dd0:	687b      	ldr	r3, [r7, #4]
10048dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10048dd4:	687b      	ldr	r3, [r7, #4]
10048dd6:	681b      	ldr	r3, [r3, #0]
10048dd8:	430a      	orrs	r2, r1
10048dda:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10048ddc:	687b      	ldr	r3, [r7, #4]
10048dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048de0:	2240      	movs	r2, #64	@ 0x40
10048de2:	4013      	ands	r3, r2
10048de4:	d01d      	beq.n	10048e22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10048de6:	687b      	ldr	r3, [r7, #4]
10048de8:	681b      	ldr	r3, [r3, #0]
10048dea:	685b      	ldr	r3, [r3, #4]
10048dec:	4a1d      	ldr	r2, [pc, #116]	@ (10048e64 <UART_AdvFeatureConfig+0x15c>)
10048dee:	4013      	ands	r3, r2
10048df0:	0019      	movs	r1, r3
10048df2:	687b      	ldr	r3, [r7, #4]
10048df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048df6:	687b      	ldr	r3, [r7, #4]
10048df8:	681b      	ldr	r3, [r3, #0]
10048dfa:	430a      	orrs	r2, r1
10048dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10048dfe:	687b      	ldr	r3, [r7, #4]
10048e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048e02:	2380      	movs	r3, #128	@ 0x80
10048e04:	035b      	lsls	r3, r3, #13
10048e06:	429a      	cmp	r2, r3
10048e08:	d10b      	bne.n	10048e22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10048e0a:	687b      	ldr	r3, [r7, #4]
10048e0c:	681b      	ldr	r3, [r3, #0]
10048e0e:	685b      	ldr	r3, [r3, #4]
10048e10:	4a15      	ldr	r2, [pc, #84]	@ (10048e68 <UART_AdvFeatureConfig+0x160>)
10048e12:	4013      	ands	r3, r2
10048e14:	0019      	movs	r1, r3
10048e16:	687b      	ldr	r3, [r7, #4]
10048e18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10048e1a:	687b      	ldr	r3, [r7, #4]
10048e1c:	681b      	ldr	r3, [r3, #0]
10048e1e:	430a      	orrs	r2, r1
10048e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10048e22:	687b      	ldr	r3, [r7, #4]
10048e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048e26:	2280      	movs	r2, #128	@ 0x80
10048e28:	4013      	ands	r3, r2
10048e2a:	d00b      	beq.n	10048e44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10048e2c:	687b      	ldr	r3, [r7, #4]
10048e2e:	681b      	ldr	r3, [r3, #0]
10048e30:	685b      	ldr	r3, [r3, #4]
10048e32:	4a0e      	ldr	r2, [pc, #56]	@ (10048e6c <UART_AdvFeatureConfig+0x164>)
10048e34:	4013      	ands	r3, r2
10048e36:	0019      	movs	r1, r3
10048e38:	687b      	ldr	r3, [r7, #4]
10048e3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10048e3c:	687b      	ldr	r3, [r7, #4]
10048e3e:	681b      	ldr	r3, [r3, #0]
10048e40:	430a      	orrs	r2, r1
10048e42:	605a      	str	r2, [r3, #4]
  }
}
10048e44:	46c0      	nop			@ (mov r8, r8)
10048e46:	46bd      	mov	sp, r7
10048e48:	b002      	add	sp, #8
10048e4a:	bd80      	pop	{r7, pc}
10048e4c:	ffff7fff 	.word	0xffff7fff
10048e50:	fffdffff 	.word	0xfffdffff
10048e54:	fffeffff 	.word	0xfffeffff
10048e58:	fffbffff 	.word	0xfffbffff
10048e5c:	ffffefff 	.word	0xffffefff
10048e60:	ffffdfff 	.word	0xffffdfff
10048e64:	ffefffff 	.word	0xffefffff
10048e68:	ff9fffff 	.word	0xff9fffff
10048e6c:	fff7ffff 	.word	0xfff7ffff

10048e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10048e70:	b580      	push	{r7, lr}
10048e72:	b092      	sub	sp, #72	@ 0x48
10048e74:	af02      	add	r7, sp, #8
10048e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10048e78:	687b      	ldr	r3, [r7, #4]
10048e7a:	2290      	movs	r2, #144	@ 0x90
10048e7c:	2100      	movs	r1, #0
10048e7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10048e80:	f7fc f878 	bl	10044f74 <HAL_GetTick>
10048e84:	0003      	movs	r3, r0
10048e86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10048e88:	687b      	ldr	r3, [r7, #4]
10048e8a:	681b      	ldr	r3, [r3, #0]
10048e8c:	681b      	ldr	r3, [r3, #0]
10048e8e:	2208      	movs	r2, #8
10048e90:	4013      	ands	r3, r2
10048e92:	2b08      	cmp	r3, #8
10048e94:	d12d      	bne.n	10048ef2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048e98:	2280      	movs	r2, #128	@ 0x80
10048e9a:	0391      	lsls	r1, r2, #14
10048e9c:	6878      	ldr	r0, [r7, #4]
10048e9e:	4a47      	ldr	r2, [pc, #284]	@ (10048fbc <UART_CheckIdleState+0x14c>)
10048ea0:	9200      	str	r2, [sp, #0]
10048ea2:	2200      	movs	r2, #0
10048ea4:	f000 f88e 	bl	10048fc4 <UART_WaitOnFlagUntilTimeout>
10048ea8:	1e03      	subs	r3, r0, #0
10048eaa:	d022      	beq.n	10048ef2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048eac:	f3ef 8310 	mrs	r3, PRIMASK
10048eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10048eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10048eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
10048eb6:	2301      	movs	r3, #1
10048eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10048ebc:	f383 8810 	msr	PRIMASK, r3
}
10048ec0:	46c0      	nop			@ (mov r8, r8)
10048ec2:	687b      	ldr	r3, [r7, #4]
10048ec4:	681b      	ldr	r3, [r3, #0]
10048ec6:	681a      	ldr	r2, [r3, #0]
10048ec8:	687b      	ldr	r3, [r7, #4]
10048eca:	681b      	ldr	r3, [r3, #0]
10048ecc:	2180      	movs	r1, #128	@ 0x80
10048ece:	438a      	bics	r2, r1
10048ed0:	601a      	str	r2, [r3, #0]
10048ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10048ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10048ed8:	f383 8810 	msr	PRIMASK, r3
}
10048edc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10048ede:	687b      	ldr	r3, [r7, #4]
10048ee0:	2288      	movs	r2, #136	@ 0x88
10048ee2:	2120      	movs	r1, #32
10048ee4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10048ee6:	687b      	ldr	r3, [r7, #4]
10048ee8:	2284      	movs	r2, #132	@ 0x84
10048eea:	2100      	movs	r1, #0
10048eec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10048eee:	2303      	movs	r3, #3
10048ef0:	e060      	b.n	10048fb4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10048ef2:	687b      	ldr	r3, [r7, #4]
10048ef4:	681b      	ldr	r3, [r3, #0]
10048ef6:	681b      	ldr	r3, [r3, #0]
10048ef8:	2204      	movs	r2, #4
10048efa:	4013      	ands	r3, r2
10048efc:	2b04      	cmp	r3, #4
10048efe:	d146      	bne.n	10048f8e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048f02:	2280      	movs	r2, #128	@ 0x80
10048f04:	03d1      	lsls	r1, r2, #15
10048f06:	6878      	ldr	r0, [r7, #4]
10048f08:	4a2c      	ldr	r2, [pc, #176]	@ (10048fbc <UART_CheckIdleState+0x14c>)
10048f0a:	9200      	str	r2, [sp, #0]
10048f0c:	2200      	movs	r2, #0
10048f0e:	f000 f859 	bl	10048fc4 <UART_WaitOnFlagUntilTimeout>
10048f12:	1e03      	subs	r3, r0, #0
10048f14:	d03b      	beq.n	10048f8e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048f16:	f3ef 8310 	mrs	r3, PRIMASK
10048f1a:	60fb      	str	r3, [r7, #12]
  return(result);
10048f1c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10048f1e:	637b      	str	r3, [r7, #52]	@ 0x34
10048f20:	2301      	movs	r3, #1
10048f22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048f24:	693b      	ldr	r3, [r7, #16]
10048f26:	f383 8810 	msr	PRIMASK, r3
}
10048f2a:	46c0      	nop			@ (mov r8, r8)
10048f2c:	687b      	ldr	r3, [r7, #4]
10048f2e:	681b      	ldr	r3, [r3, #0]
10048f30:	681a      	ldr	r2, [r3, #0]
10048f32:	687b      	ldr	r3, [r7, #4]
10048f34:	681b      	ldr	r3, [r3, #0]
10048f36:	4922      	ldr	r1, [pc, #136]	@ (10048fc0 <UART_CheckIdleState+0x150>)
10048f38:	400a      	ands	r2, r1
10048f3a:	601a      	str	r2, [r3, #0]
10048f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048f3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048f40:	697b      	ldr	r3, [r7, #20]
10048f42:	f383 8810 	msr	PRIMASK, r3
}
10048f46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048f48:	f3ef 8310 	mrs	r3, PRIMASK
10048f4c:	61bb      	str	r3, [r7, #24]
  return(result);
10048f4e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10048f50:	633b      	str	r3, [r7, #48]	@ 0x30
10048f52:	2301      	movs	r3, #1
10048f54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048f56:	69fb      	ldr	r3, [r7, #28]
10048f58:	f383 8810 	msr	PRIMASK, r3
}
10048f5c:	46c0      	nop			@ (mov r8, r8)
10048f5e:	687b      	ldr	r3, [r7, #4]
10048f60:	681b      	ldr	r3, [r3, #0]
10048f62:	689a      	ldr	r2, [r3, #8]
10048f64:	687b      	ldr	r3, [r7, #4]
10048f66:	681b      	ldr	r3, [r3, #0]
10048f68:	2101      	movs	r1, #1
10048f6a:	438a      	bics	r2, r1
10048f6c:	609a      	str	r2, [r3, #8]
10048f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048f70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048f72:	6a3b      	ldr	r3, [r7, #32]
10048f74:	f383 8810 	msr	PRIMASK, r3
}
10048f78:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
10048f7a:	687b      	ldr	r3, [r7, #4]
10048f7c:	228c      	movs	r2, #140	@ 0x8c
10048f7e:	2120      	movs	r1, #32
10048f80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10048f82:	687b      	ldr	r3, [r7, #4]
10048f84:	2284      	movs	r2, #132	@ 0x84
10048f86:	2100      	movs	r1, #0
10048f88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10048f8a:	2303      	movs	r3, #3
10048f8c:	e012      	b.n	10048fb4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10048f8e:	687b      	ldr	r3, [r7, #4]
10048f90:	2288      	movs	r2, #136	@ 0x88
10048f92:	2120      	movs	r1, #32
10048f94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
10048f96:	687b      	ldr	r3, [r7, #4]
10048f98:	228c      	movs	r2, #140	@ 0x8c
10048f9a:	2120      	movs	r1, #32
10048f9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10048f9e:	687b      	ldr	r3, [r7, #4]
10048fa0:	2200      	movs	r2, #0
10048fa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10048fa4:	687b      	ldr	r3, [r7, #4]
10048fa6:	2200      	movs	r2, #0
10048fa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
10048faa:	687b      	ldr	r3, [r7, #4]
10048fac:	2284      	movs	r2, #132	@ 0x84
10048fae:	2100      	movs	r1, #0
10048fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048fb2:	2300      	movs	r3, #0
}
10048fb4:	0018      	movs	r0, r3
10048fb6:	46bd      	mov	sp, r7
10048fb8:	b010      	add	sp, #64	@ 0x40
10048fba:	bd80      	pop	{r7, pc}
10048fbc:	01ffffff 	.word	0x01ffffff
10048fc0:	fffffedf 	.word	0xfffffedf

10048fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10048fc4:	b580      	push	{r7, lr}
10048fc6:	b084      	sub	sp, #16
10048fc8:	af00      	add	r7, sp, #0
10048fca:	60f8      	str	r0, [r7, #12]
10048fcc:	60b9      	str	r1, [r7, #8]
10048fce:	603b      	str	r3, [r7, #0]
10048fd0:	1dfb      	adds	r3, r7, #7
10048fd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10048fd4:	e051      	b.n	1004907a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10048fd6:	69bb      	ldr	r3, [r7, #24]
10048fd8:	3301      	adds	r3, #1
10048fda:	d04e      	beq.n	1004907a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10048fdc:	f7fb ffca 	bl	10044f74 <HAL_GetTick>
10048fe0:	0002      	movs	r2, r0
10048fe2:	683b      	ldr	r3, [r7, #0]
10048fe4:	1ad3      	subs	r3, r2, r3
10048fe6:	69ba      	ldr	r2, [r7, #24]
10048fe8:	429a      	cmp	r2, r3
10048fea:	d302      	bcc.n	10048ff2 <UART_WaitOnFlagUntilTimeout+0x2e>
10048fec:	69bb      	ldr	r3, [r7, #24]
10048fee:	2b00      	cmp	r3, #0
10048ff0:	d101      	bne.n	10048ff6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
10048ff2:	2303      	movs	r3, #3
10048ff4:	e051      	b.n	1004909a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
10048ff6:	68fb      	ldr	r3, [r7, #12]
10048ff8:	681b      	ldr	r3, [r3, #0]
10048ffa:	681b      	ldr	r3, [r3, #0]
10048ffc:	2204      	movs	r2, #4
10048ffe:	4013      	ands	r3, r2
10049000:	d03b      	beq.n	1004907a <UART_WaitOnFlagUntilTimeout+0xb6>
10049002:	68bb      	ldr	r3, [r7, #8]
10049004:	2b80      	cmp	r3, #128	@ 0x80
10049006:	d038      	beq.n	1004907a <UART_WaitOnFlagUntilTimeout+0xb6>
10049008:	68bb      	ldr	r3, [r7, #8]
1004900a:	2b40      	cmp	r3, #64	@ 0x40
1004900c:	d035      	beq.n	1004907a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004900e:	68fb      	ldr	r3, [r7, #12]
10049010:	681b      	ldr	r3, [r3, #0]
10049012:	69db      	ldr	r3, [r3, #28]
10049014:	2208      	movs	r2, #8
10049016:	4013      	ands	r3, r2
10049018:	2b08      	cmp	r3, #8
1004901a:	d111      	bne.n	10049040 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004901c:	68fb      	ldr	r3, [r7, #12]
1004901e:	681b      	ldr	r3, [r3, #0]
10049020:	2208      	movs	r2, #8
10049022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10049024:	68fb      	ldr	r3, [r7, #12]
10049026:	0018      	movs	r0, r3
10049028:	f000 f83c 	bl	100490a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004902c:	68fb      	ldr	r3, [r7, #12]
1004902e:	2290      	movs	r2, #144	@ 0x90
10049030:	2108      	movs	r1, #8
10049032:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10049034:	68fb      	ldr	r3, [r7, #12]
10049036:	2284      	movs	r2, #132	@ 0x84
10049038:	2100      	movs	r1, #0
1004903a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
1004903c:	2301      	movs	r3, #1
1004903e:	e02c      	b.n	1004909a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10049040:	68fb      	ldr	r3, [r7, #12]
10049042:	681b      	ldr	r3, [r3, #0]
10049044:	69da      	ldr	r2, [r3, #28]
10049046:	2380      	movs	r3, #128	@ 0x80
10049048:	011b      	lsls	r3, r3, #4
1004904a:	401a      	ands	r2, r3
1004904c:	2380      	movs	r3, #128	@ 0x80
1004904e:	011b      	lsls	r3, r3, #4
10049050:	429a      	cmp	r2, r3
10049052:	d112      	bne.n	1004907a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10049054:	68fb      	ldr	r3, [r7, #12]
10049056:	681b      	ldr	r3, [r3, #0]
10049058:	2280      	movs	r2, #128	@ 0x80
1004905a:	0112      	lsls	r2, r2, #4
1004905c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004905e:	68fb      	ldr	r3, [r7, #12]
10049060:	0018      	movs	r0, r3
10049062:	f000 f81f 	bl	100490a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
10049066:	68fb      	ldr	r3, [r7, #12]
10049068:	2290      	movs	r2, #144	@ 0x90
1004906a:	2120      	movs	r1, #32
1004906c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004906e:	68fb      	ldr	r3, [r7, #12]
10049070:	2284      	movs	r2, #132	@ 0x84
10049072:	2100      	movs	r1, #0
10049074:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
10049076:	2303      	movs	r3, #3
10049078:	e00f      	b.n	1004909a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004907a:	68fb      	ldr	r3, [r7, #12]
1004907c:	681b      	ldr	r3, [r3, #0]
1004907e:	69db      	ldr	r3, [r3, #28]
10049080:	68ba      	ldr	r2, [r7, #8]
10049082:	4013      	ands	r3, r2
10049084:	68ba      	ldr	r2, [r7, #8]
10049086:	1ad3      	subs	r3, r2, r3
10049088:	425a      	negs	r2, r3
1004908a:	4153      	adcs	r3, r2
1004908c:	b2db      	uxtb	r3, r3
1004908e:	001a      	movs	r2, r3
10049090:	1dfb      	adds	r3, r7, #7
10049092:	781b      	ldrb	r3, [r3, #0]
10049094:	429a      	cmp	r2, r3
10049096:	d09e      	beq.n	10048fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10049098:	2300      	movs	r3, #0
}
1004909a:	0018      	movs	r0, r3
1004909c:	46bd      	mov	sp, r7
1004909e:	b004      	add	sp, #16
100490a0:	bd80      	pop	{r7, pc}
	...

100490a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
100490a4:	b580      	push	{r7, lr}
100490a6:	b08e      	sub	sp, #56	@ 0x38
100490a8:	af00      	add	r7, sp, #0
100490aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100490ac:	f3ef 8310 	mrs	r3, PRIMASK
100490b0:	617b      	str	r3, [r7, #20]
  return(result);
100490b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
100490b4:	637b      	str	r3, [r7, #52]	@ 0x34
100490b6:	2301      	movs	r3, #1
100490b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490ba:	69bb      	ldr	r3, [r7, #24]
100490bc:	f383 8810 	msr	PRIMASK, r3
}
100490c0:	46c0      	nop			@ (mov r8, r8)
100490c2:	687b      	ldr	r3, [r7, #4]
100490c4:	681b      	ldr	r3, [r3, #0]
100490c6:	681a      	ldr	r2, [r3, #0]
100490c8:	687b      	ldr	r3, [r7, #4]
100490ca:	681b      	ldr	r3, [r3, #0]
100490cc:	4926      	ldr	r1, [pc, #152]	@ (10049168 <UART_EndRxTransfer+0xc4>)
100490ce:	400a      	ands	r2, r1
100490d0:	601a      	str	r2, [r3, #0]
100490d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100490d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490d6:	69fb      	ldr	r3, [r7, #28]
100490d8:	f383 8810 	msr	PRIMASK, r3
}
100490dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100490de:	f3ef 8310 	mrs	r3, PRIMASK
100490e2:	623b      	str	r3, [r7, #32]
  return(result);
100490e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
100490e6:	633b      	str	r3, [r7, #48]	@ 0x30
100490e8:	2301      	movs	r3, #1
100490ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100490ee:	f383 8810 	msr	PRIMASK, r3
}
100490f2:	46c0      	nop			@ (mov r8, r8)
100490f4:	687b      	ldr	r3, [r7, #4]
100490f6:	681b      	ldr	r3, [r3, #0]
100490f8:	689a      	ldr	r2, [r3, #8]
100490fa:	687b      	ldr	r3, [r7, #4]
100490fc:	681b      	ldr	r3, [r3, #0]
100490fe:	491b      	ldr	r1, [pc, #108]	@ (1004916c <UART_EndRxTransfer+0xc8>)
10049100:	400a      	ands	r2, r1
10049102:	609a      	str	r2, [r3, #8]
10049104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049106:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004910a:	f383 8810 	msr	PRIMASK, r3
}
1004910e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10049110:	687b      	ldr	r3, [r7, #4]
10049112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10049114:	2b01      	cmp	r3, #1
10049116:	d118      	bne.n	1004914a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049118:	f3ef 8310 	mrs	r3, PRIMASK
1004911c:	60bb      	str	r3, [r7, #8]
  return(result);
1004911e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10049120:	62fb      	str	r3, [r7, #44]	@ 0x2c
10049122:	2301      	movs	r3, #1
10049124:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049126:	68fb      	ldr	r3, [r7, #12]
10049128:	f383 8810 	msr	PRIMASK, r3
}
1004912c:	46c0      	nop			@ (mov r8, r8)
1004912e:	687b      	ldr	r3, [r7, #4]
10049130:	681b      	ldr	r3, [r3, #0]
10049132:	681a      	ldr	r2, [r3, #0]
10049134:	687b      	ldr	r3, [r7, #4]
10049136:	681b      	ldr	r3, [r3, #0]
10049138:	2110      	movs	r1, #16
1004913a:	438a      	bics	r2, r1
1004913c:	601a      	str	r2, [r3, #0]
1004913e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10049140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049142:	693b      	ldr	r3, [r7, #16]
10049144:	f383 8810 	msr	PRIMASK, r3
}
10049148:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004914a:	687b      	ldr	r3, [r7, #4]
1004914c:	228c      	movs	r2, #140	@ 0x8c
1004914e:	2120      	movs	r1, #32
10049150:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10049152:	687b      	ldr	r3, [r7, #4]
10049154:	2200      	movs	r2, #0
10049156:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
10049158:	687b      	ldr	r3, [r7, #4]
1004915a:	2200      	movs	r2, #0
1004915c:	675a      	str	r2, [r3, #116]	@ 0x74
}
1004915e:	46c0      	nop			@ (mov r8, r8)
10049160:	46bd      	mov	sp, r7
10049162:	b00e      	add	sp, #56	@ 0x38
10049164:	bd80      	pop	{r7, pc}
10049166:	46c0      	nop			@ (mov r8, r8)
10049168:	fffffedf 	.word	0xfffffedf
1004916c:	effffffe 	.word	0xeffffffe

10049170 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
10049170:	b580      	push	{r7, lr}
10049172:	b084      	sub	sp, #16
10049174:	af00      	add	r7, sp, #0
10049176:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
10049178:	687b      	ldr	r3, [r7, #4]
1004917a:	2284      	movs	r2, #132	@ 0x84
1004917c:	5c9b      	ldrb	r3, [r3, r2]
1004917e:	2b01      	cmp	r3, #1
10049180:	d101      	bne.n	10049186 <HAL_UARTEx_DisableFifoMode+0x16>
10049182:	2302      	movs	r3, #2
10049184:	e027      	b.n	100491d6 <HAL_UARTEx_DisableFifoMode+0x66>
10049186:	687b      	ldr	r3, [r7, #4]
10049188:	2284      	movs	r2, #132	@ 0x84
1004918a:	2101      	movs	r1, #1
1004918c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004918e:	687b      	ldr	r3, [r7, #4]
10049190:	2288      	movs	r2, #136	@ 0x88
10049192:	2124      	movs	r1, #36	@ 0x24
10049194:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10049196:	687b      	ldr	r3, [r7, #4]
10049198:	681b      	ldr	r3, [r3, #0]
1004919a:	681b      	ldr	r3, [r3, #0]
1004919c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004919e:	687b      	ldr	r3, [r7, #4]
100491a0:	681b      	ldr	r3, [r3, #0]
100491a2:	681a      	ldr	r2, [r3, #0]
100491a4:	687b      	ldr	r3, [r7, #4]
100491a6:	681b      	ldr	r3, [r3, #0]
100491a8:	2101      	movs	r1, #1
100491aa:	438a      	bics	r2, r1
100491ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
100491ae:	68fb      	ldr	r3, [r7, #12]
100491b0:	4a0b      	ldr	r2, [pc, #44]	@ (100491e0 <HAL_UARTEx_DisableFifoMode+0x70>)
100491b2:	4013      	ands	r3, r2
100491b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
100491b6:	687b      	ldr	r3, [r7, #4]
100491b8:	2200      	movs	r2, #0
100491ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100491bc:	687b      	ldr	r3, [r7, #4]
100491be:	681b      	ldr	r3, [r3, #0]
100491c0:	68fa      	ldr	r2, [r7, #12]
100491c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100491c4:	687b      	ldr	r3, [r7, #4]
100491c6:	2288      	movs	r2, #136	@ 0x88
100491c8:	2120      	movs	r1, #32
100491ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100491cc:	687b      	ldr	r3, [r7, #4]
100491ce:	2284      	movs	r2, #132	@ 0x84
100491d0:	2100      	movs	r1, #0
100491d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100491d4:	2300      	movs	r3, #0
}
100491d6:	0018      	movs	r0, r3
100491d8:	46bd      	mov	sp, r7
100491da:	b004      	add	sp, #16
100491dc:	bd80      	pop	{r7, pc}
100491de:	46c0      	nop			@ (mov r8, r8)
100491e0:	dfffffff 	.word	0xdfffffff

100491e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100491e4:	b580      	push	{r7, lr}
100491e6:	b084      	sub	sp, #16
100491e8:	af00      	add	r7, sp, #0
100491ea:	6078      	str	r0, [r7, #4]
100491ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100491ee:	687b      	ldr	r3, [r7, #4]
100491f0:	2284      	movs	r2, #132	@ 0x84
100491f2:	5c9b      	ldrb	r3, [r3, r2]
100491f4:	2b01      	cmp	r3, #1
100491f6:	d101      	bne.n	100491fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
100491f8:	2302      	movs	r3, #2
100491fa:	e02e      	b.n	1004925a <HAL_UARTEx_SetTxFifoThreshold+0x76>
100491fc:	687b      	ldr	r3, [r7, #4]
100491fe:	2284      	movs	r2, #132	@ 0x84
10049200:	2101      	movs	r1, #1
10049202:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10049204:	687b      	ldr	r3, [r7, #4]
10049206:	2288      	movs	r2, #136	@ 0x88
10049208:	2124      	movs	r1, #36	@ 0x24
1004920a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004920c:	687b      	ldr	r3, [r7, #4]
1004920e:	681b      	ldr	r3, [r3, #0]
10049210:	681b      	ldr	r3, [r3, #0]
10049212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049214:	687b      	ldr	r3, [r7, #4]
10049216:	681b      	ldr	r3, [r3, #0]
10049218:	681a      	ldr	r2, [r3, #0]
1004921a:	687b      	ldr	r3, [r7, #4]
1004921c:	681b      	ldr	r3, [r3, #0]
1004921e:	2101      	movs	r1, #1
10049220:	438a      	bics	r2, r1
10049222:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10049224:	687b      	ldr	r3, [r7, #4]
10049226:	681b      	ldr	r3, [r3, #0]
10049228:	689b      	ldr	r3, [r3, #8]
1004922a:	00db      	lsls	r3, r3, #3
1004922c:	08d9      	lsrs	r1, r3, #3
1004922e:	687b      	ldr	r3, [r7, #4]
10049230:	681b      	ldr	r3, [r3, #0]
10049232:	683a      	ldr	r2, [r7, #0]
10049234:	430a      	orrs	r2, r1
10049236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10049238:	687b      	ldr	r3, [r7, #4]
1004923a:	0018      	movs	r0, r3
1004923c:	f000 f854 	bl	100492e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10049240:	687b      	ldr	r3, [r7, #4]
10049242:	681b      	ldr	r3, [r3, #0]
10049244:	68fa      	ldr	r2, [r7, #12]
10049246:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10049248:	687b      	ldr	r3, [r7, #4]
1004924a:	2288      	movs	r2, #136	@ 0x88
1004924c:	2120      	movs	r1, #32
1004924e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10049250:	687b      	ldr	r3, [r7, #4]
10049252:	2284      	movs	r2, #132	@ 0x84
10049254:	2100      	movs	r1, #0
10049256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049258:	2300      	movs	r3, #0
}
1004925a:	0018      	movs	r0, r3
1004925c:	46bd      	mov	sp, r7
1004925e:	b004      	add	sp, #16
10049260:	bd80      	pop	{r7, pc}
	...

10049264 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10049264:	b580      	push	{r7, lr}
10049266:	b084      	sub	sp, #16
10049268:	af00      	add	r7, sp, #0
1004926a:	6078      	str	r0, [r7, #4]
1004926c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004926e:	687b      	ldr	r3, [r7, #4]
10049270:	2284      	movs	r2, #132	@ 0x84
10049272:	5c9b      	ldrb	r3, [r3, r2]
10049274:	2b01      	cmp	r3, #1
10049276:	d101      	bne.n	1004927c <HAL_UARTEx_SetRxFifoThreshold+0x18>
10049278:	2302      	movs	r3, #2
1004927a:	e02f      	b.n	100492dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004927c:	687b      	ldr	r3, [r7, #4]
1004927e:	2284      	movs	r2, #132	@ 0x84
10049280:	2101      	movs	r1, #1
10049282:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10049284:	687b      	ldr	r3, [r7, #4]
10049286:	2288      	movs	r2, #136	@ 0x88
10049288:	2124      	movs	r1, #36	@ 0x24
1004928a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004928c:	687b      	ldr	r3, [r7, #4]
1004928e:	681b      	ldr	r3, [r3, #0]
10049290:	681b      	ldr	r3, [r3, #0]
10049292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10049294:	687b      	ldr	r3, [r7, #4]
10049296:	681b      	ldr	r3, [r3, #0]
10049298:	681a      	ldr	r2, [r3, #0]
1004929a:	687b      	ldr	r3, [r7, #4]
1004929c:	681b      	ldr	r3, [r3, #0]
1004929e:	2101      	movs	r1, #1
100492a0:	438a      	bics	r2, r1
100492a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
100492a4:	687b      	ldr	r3, [r7, #4]
100492a6:	681b      	ldr	r3, [r3, #0]
100492a8:	689b      	ldr	r3, [r3, #8]
100492aa:	4a0e      	ldr	r2, [pc, #56]	@ (100492e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
100492ac:	4013      	ands	r3, r2
100492ae:	0019      	movs	r1, r3
100492b0:	687b      	ldr	r3, [r7, #4]
100492b2:	681b      	ldr	r3, [r3, #0]
100492b4:	683a      	ldr	r2, [r7, #0]
100492b6:	430a      	orrs	r2, r1
100492b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
100492ba:	687b      	ldr	r3, [r7, #4]
100492bc:	0018      	movs	r0, r3
100492be:	f000 f813 	bl	100492e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
100492c2:	687b      	ldr	r3, [r7, #4]
100492c4:	681b      	ldr	r3, [r3, #0]
100492c6:	68fa      	ldr	r2, [r7, #12]
100492c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
100492ca:	687b      	ldr	r3, [r7, #4]
100492cc:	2288      	movs	r2, #136	@ 0x88
100492ce:	2120      	movs	r1, #32
100492d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100492d2:	687b      	ldr	r3, [r7, #4]
100492d4:	2284      	movs	r2, #132	@ 0x84
100492d6:	2100      	movs	r1, #0
100492d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100492da:	2300      	movs	r3, #0
}
100492dc:	0018      	movs	r0, r3
100492de:	46bd      	mov	sp, r7
100492e0:	b004      	add	sp, #16
100492e2:	bd80      	pop	{r7, pc}
100492e4:	f1ffffff 	.word	0xf1ffffff

100492e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
100492e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100492ea:	b085      	sub	sp, #20
100492ec:	af00      	add	r7, sp, #0
100492ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
100492f0:	687b      	ldr	r3, [r7, #4]
100492f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100492f4:	2b00      	cmp	r3, #0
100492f6:	d108      	bne.n	1004930a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
100492f8:	687b      	ldr	r3, [r7, #4]
100492fa:	226a      	movs	r2, #106	@ 0x6a
100492fc:	2101      	movs	r1, #1
100492fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
10049300:	687b      	ldr	r3, [r7, #4]
10049302:	2268      	movs	r2, #104	@ 0x68
10049304:	2101      	movs	r1, #1
10049306:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
10049308:	e043      	b.n	10049392 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004930a:	260f      	movs	r6, #15
1004930c:	19bb      	adds	r3, r7, r6
1004930e:	2208      	movs	r2, #8
10049310:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
10049312:	200e      	movs	r0, #14
10049314:	183b      	adds	r3, r7, r0
10049316:	2208      	movs	r2, #8
10049318:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004931a:	687b      	ldr	r3, [r7, #4]
1004931c:	681b      	ldr	r3, [r3, #0]
1004931e:	689b      	ldr	r3, [r3, #8]
10049320:	0e5b      	lsrs	r3, r3, #25
10049322:	b2da      	uxtb	r2, r3
10049324:	240d      	movs	r4, #13
10049326:	193b      	adds	r3, r7, r4
10049328:	2107      	movs	r1, #7
1004932a:	400a      	ands	r2, r1
1004932c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004932e:	687b      	ldr	r3, [r7, #4]
10049330:	681b      	ldr	r3, [r3, #0]
10049332:	689b      	ldr	r3, [r3, #8]
10049334:	0f5b      	lsrs	r3, r3, #29
10049336:	b2da      	uxtb	r2, r3
10049338:	250c      	movs	r5, #12
1004933a:	197b      	adds	r3, r7, r5
1004933c:	2107      	movs	r1, #7
1004933e:	400a      	ands	r2, r1
10049340:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
10049342:	183b      	adds	r3, r7, r0
10049344:	781b      	ldrb	r3, [r3, #0]
10049346:	197a      	adds	r2, r7, r5
10049348:	7812      	ldrb	r2, [r2, #0]
1004934a:	4914      	ldr	r1, [pc, #80]	@ (1004939c <UARTEx_SetNbDataToProcess+0xb4>)
1004934c:	5c8a      	ldrb	r2, [r1, r2]
1004934e:	435a      	muls	r2, r3
10049350:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
10049352:	197b      	adds	r3, r7, r5
10049354:	781b      	ldrb	r3, [r3, #0]
10049356:	4a12      	ldr	r2, [pc, #72]	@ (100493a0 <UARTEx_SetNbDataToProcess+0xb8>)
10049358:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004935a:	0019      	movs	r1, r3
1004935c:	f7f6 fff2 	bl	10040344 <__divsi3>
10049360:	0003      	movs	r3, r0
10049362:	b299      	uxth	r1, r3
10049364:	687b      	ldr	r3, [r7, #4]
10049366:	226a      	movs	r2, #106	@ 0x6a
10049368:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004936a:	19bb      	adds	r3, r7, r6
1004936c:	781b      	ldrb	r3, [r3, #0]
1004936e:	193a      	adds	r2, r7, r4
10049370:	7812      	ldrb	r2, [r2, #0]
10049372:	490a      	ldr	r1, [pc, #40]	@ (1004939c <UARTEx_SetNbDataToProcess+0xb4>)
10049374:	5c8a      	ldrb	r2, [r1, r2]
10049376:	435a      	muls	r2, r3
10049378:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004937a:	193b      	adds	r3, r7, r4
1004937c:	781b      	ldrb	r3, [r3, #0]
1004937e:	4a08      	ldr	r2, [pc, #32]	@ (100493a0 <UARTEx_SetNbDataToProcess+0xb8>)
10049380:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10049382:	0019      	movs	r1, r3
10049384:	f7f6 ffde 	bl	10040344 <__divsi3>
10049388:	0003      	movs	r3, r0
1004938a:	b299      	uxth	r1, r3
1004938c:	687b      	ldr	r3, [r7, #4]
1004938e:	2268      	movs	r2, #104	@ 0x68
10049390:	5299      	strh	r1, [r3, r2]
}
10049392:	46c0      	nop			@ (mov r8, r8)
10049394:	46bd      	mov	sp, r7
10049396:	b005      	add	sp, #20
10049398:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004939a:	46c0      	nop			@ (mov r8, r8)
1004939c:	1004ef08 	.word	0x1004ef08
100493a0:	1004ef10 	.word	0x1004ef10

100493a4 <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
100493a4:	b580      	push	{r7, lr}
100493a6:	b088      	sub	sp, #32
100493a8:	af00      	add	r7, sp, #0
100493aa:	6078      	str	r0, [r7, #4]
100493ac:	000a      	movs	r2, r1
100493ae:	1cbb      	adds	r3, r7, #2
100493b0:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
100493b2:	231b      	movs	r3, #27
100493b4:	18fb      	adds	r3, r7, r3
100493b6:	2200      	movs	r2, #0
100493b8:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
100493ba:	687b      	ldr	r3, [r7, #4]
100493bc:	781b      	ldrb	r3, [r3, #0]
100493be:	2b04      	cmp	r3, #4
100493c0:	d003      	beq.n	100493ca <BLE_STACK_Event+0x26>
100493c2:	687b      	ldr	r3, [r7, #4]
100493c4:	781b      	ldrb	r3, [r3, #0]
100493c6:	2b82      	cmp	r3, #130	@ 0x82
100493c8:	d116      	bne.n	100493f8 <BLE_STACK_Event+0x54>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
100493ca:	687b      	ldr	r3, [r7, #4]
100493cc:	3301      	adds	r3, #1
100493ce:	617b      	str	r3, [r7, #20]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
100493d0:	687b      	ldr	r3, [r7, #4]
100493d2:	781b      	ldrb	r3, [r3, #0]
100493d4:	2b04      	cmp	r3, #4
100493d6:	d103      	bne.n	100493e0 <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
100493d8:	697b      	ldr	r3, [r7, #20]
100493da:	3302      	adds	r3, #2
100493dc:	61fb      	str	r3, [r7, #28]
100493de:	e005      	b.n	100493ec <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
100493e0:	687b      	ldr	r3, [r7, #4]
100493e2:	3301      	adds	r3, #1
100493e4:	613b      	str	r3, [r7, #16]
      data = event_pckt->data;
100493e6:	693b      	ldr	r3, [r7, #16]
100493e8:	3303      	adds	r3, #3
100493ea:	61fb      	str	r3, [r7, #28]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
100493ec:	697b      	ldr	r3, [r7, #20]
100493ee:	781b      	ldrb	r3, [r3, #0]
100493f0:	2bff      	cmp	r3, #255	@ 0xff
100493f2:	d101      	bne.n	100493f8 <BLE_STACK_Event+0x54>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
100493f4:	69fb      	ldr	r3, [r7, #28]
100493f6:	60fb      	str	r3, [r7, #12]
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
100493f8:	231b      	movs	r3, #27
100493fa:	18fb      	adds	r3, r7, r3
100493fc:	781b      	ldrb	r3, [r3, #0]
100493fe:	2b00      	cmp	r3, #0
10049400:	d103      	bne.n	1004940a <BLE_STACK_Event+0x66>
  {
    BLEEVT_App_Notification(hci_pckt);
10049402:	687b      	ldr	r3, [r7, #4]
10049404:	0018      	movs	r0, r3
10049406:	f7f8 fa25 	bl	10041854 <BLEEVT_App_Notification>
  }
}
1004940a:	46c0      	nop			@ (mov r8, r8)
1004940c:	46bd      	mov	sp, r7
1004940e:	b008      	add	sp, #32
10049410:	bd80      	pop	{r7, pc}

10049412 <data_length_extension_csr_ucfg>:
}
#endif /* (CONTROLLER_PRIVACY_ENABLED == 1) */

#if (CONTROLLER_DATA_LENGTH_EXTENSION_ENABLED == 1)
uint32_t data_length_extension_csr_ucfg(void)
{
10049412:	b580      	push	{r7, lr}
10049414:	af00      	add	r7, sp, #0
    return data_length_extension_csr();
10049416:	f001 fba4 	bl	1004ab62 <data_length_extension_csr>
1004941a:	0003      	movs	r3, r0
}
1004941c:	0018      	movs	r0, r3
1004941e:	46bd      	mov	sp, r7
10049420:	bd80      	pop	{r7, pc}

10049422 <phy_upd_csr_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint32_t phy_upd_csr_ucfg(void)
{
10049422:	b580      	push	{r7, lr}
10049424:	af00      	add	r7, sp, #0
    return phy_upd_csr();
10049426:	f001 fba0 	bl	1004ab6a <phy_upd_csr>
1004942a:	0003      	movs	r3, r0
}
1004942c:	0018      	movs	r0, r3
1004942e:	46bd      	mov	sp, r7
10049430:	bd80      	pop	{r7, pc}

10049432 <ll_write_supported_data_ucfg>:
#if (CONTROLLER_DATA_LENGTH_EXTENSION_ENABLED == 1)
tBleStatus ll_write_supported_data_ucfg(uint16_t Supported_Max_Tx_Octets,
                                        uint16_t Supported_Max_Tx_Time,
                                        uint16_t Supported_Max_Rx_Octets,
                                        uint16_t Supported_Max_Rx_Time)
{
10049432:	b5b0      	push	{r4, r5, r7, lr}
10049434:	b082      	sub	sp, #8
10049436:	af00      	add	r7, sp, #0
10049438:	0005      	movs	r5, r0
1004943a:	000c      	movs	r4, r1
1004943c:	0010      	movs	r0, r2
1004943e:	0019      	movs	r1, r3
10049440:	1dbb      	adds	r3, r7, #6
10049442:	1c2a      	adds	r2, r5, #0
10049444:	801a      	strh	r2, [r3, #0]
10049446:	1d3b      	adds	r3, r7, #4
10049448:	1c22      	adds	r2, r4, #0
1004944a:	801a      	strh	r2, [r3, #0]
1004944c:	1cbb      	adds	r3, r7, #2
1004944e:	1c02      	adds	r2, r0, #0
10049450:	801a      	strh	r2, [r3, #0]
10049452:	003b      	movs	r3, r7
10049454:	1c0a      	adds	r2, r1, #0
10049456:	801a      	strh	r2, [r3, #0]
    return ll_write_supported_data(Supported_Max_Tx_Octets,
10049458:	003b      	movs	r3, r7
1004945a:	881c      	ldrh	r4, [r3, #0]
1004945c:	1cbb      	adds	r3, r7, #2
1004945e:	881a      	ldrh	r2, [r3, #0]
10049460:	1d3b      	adds	r3, r7, #4
10049462:	8819      	ldrh	r1, [r3, #0]
10049464:	1dbb      	adds	r3, r7, #6
10049466:	8818      	ldrh	r0, [r3, #0]
10049468:	0023      	movs	r3, r4
1004946a:	f001 fdd9 	bl	1004b020 <ll_write_supported_data>
1004946e:	0003      	movs	r3, r0
                                   Supported_Max_Tx_Time,
                                   Supported_Max_Rx_Octets,
                                   Supported_Max_Rx_Time);
}
10049470:	0018      	movs	r0, r3
10049472:	46bd      	mov	sp, r7
10049474:	b002      	add	sp, #8
10049476:	bdb0      	pop	{r4, r5, r7, pc}

10049478 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
10049478:	b580      	push	{r7, lr}
1004947a:	b090      	sub	sp, #64	@ 0x40
1004947c:	af00      	add	r7, sp, #0
1004947e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
10049480:	4b75      	ldr	r3, [pc, #468]	@ (10049658 <UTIL_SEQ_Run+0x1e0>)
10049482:	681b      	ldr	r3, [r3, #0]
10049484:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
10049486:	4b74      	ldr	r3, [pc, #464]	@ (10049658 <UTIL_SEQ_Run+0x1e0>)
10049488:	681b      	ldr	r3, [r3, #0]
1004948a:	687a      	ldr	r2, [r7, #4]
1004948c:	401a      	ands	r2, r3
1004948e:	4b72      	ldr	r3, [pc, #456]	@ (10049658 <UTIL_SEQ_Run+0x1e0>)
10049490:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
10049492:	4b72      	ldr	r3, [pc, #456]	@ (1004965c <UTIL_SEQ_Run+0x1e4>)
10049494:	681b      	ldr	r3, [r3, #0]
10049496:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
10049498:	4b71      	ldr	r3, [pc, #452]	@ (10049660 <UTIL_SEQ_Run+0x1e8>)
1004949a:	681b      	ldr	r3, [r3, #0]
1004949c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
1004949e:	4b71      	ldr	r3, [pc, #452]	@ (10049664 <UTIL_SEQ_Run+0x1ec>)
100494a0:	681b      	ldr	r3, [r3, #0]
100494a2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
100494a4:	4b70      	ldr	r3, [pc, #448]	@ (10049668 <UTIL_SEQ_Run+0x1f0>)
100494a6:	681b      	ldr	r3, [r3, #0]
100494a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100494aa:	e090      	b.n	100495ce <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
100494ac:	2300      	movs	r3, #0
100494ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100494b0:	e002      	b.n	100494b8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
100494b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100494b4:	3301      	adds	r3, #1
100494b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100494b8:	4b6c      	ldr	r3, [pc, #432]	@ (1004966c <UTIL_SEQ_Run+0x1f4>)
100494ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100494bc:	00d2      	lsls	r2, r2, #3
100494be:	58d3      	ldr	r3, [r2, r3]
100494c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100494c2:	401a      	ands	r2, r3
100494c4:	4b64      	ldr	r3, [pc, #400]	@ (10049658 <UTIL_SEQ_Run+0x1e0>)
100494c6:	681b      	ldr	r3, [r3, #0]
100494c8:	4013      	ands	r3, r2
100494ca:	d0f2      	beq.n	100494b2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
100494cc:	4b67      	ldr	r3, [pc, #412]	@ (1004966c <UTIL_SEQ_Run+0x1f4>)
100494ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100494d0:	00d2      	lsls	r2, r2, #3
100494d2:	58d3      	ldr	r3, [r2, r3]
100494d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100494d6:	401a      	ands	r2, r3
100494d8:	4b5f      	ldr	r3, [pc, #380]	@ (10049658 <UTIL_SEQ_Run+0x1e0>)
100494da:	681b      	ldr	r3, [r3, #0]
100494dc:	4013      	ands	r3, r2
100494de:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
100494e0:	4a62      	ldr	r2, [pc, #392]	@ (1004966c <UTIL_SEQ_Run+0x1f4>)
100494e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100494e4:	00db      	lsls	r3, r3, #3
100494e6:	18d3      	adds	r3, r2, r3
100494e8:	3304      	adds	r3, #4
100494ea:	681b      	ldr	r3, [r3, #0]
100494ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100494ee:	4013      	ands	r3, r2
100494f0:	d107      	bne.n	10049502 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
100494f2:	4a5e      	ldr	r2, [pc, #376]	@ (1004966c <UTIL_SEQ_Run+0x1f4>)
100494f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100494f6:	00db      	lsls	r3, r3, #3
100494f8:	18d3      	adds	r3, r2, r3
100494fa:	3304      	adds	r3, #4
100494fc:	2201      	movs	r2, #1
100494fe:	4252      	negs	r2, r2
10049500:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
10049502:	4a5a      	ldr	r2, [pc, #360]	@ (1004966c <UTIL_SEQ_Run+0x1f4>)
10049504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049506:	00db      	lsls	r3, r3, #3
10049508:	18d3      	adds	r3, r2, r3
1004950a:	3304      	adds	r3, #4
1004950c:	681b      	ldr	r3, [r3, #0]
1004950e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10049510:	4013      	ands	r3, r2
10049512:	0018      	movs	r0, r3
10049514:	f000 f906 	bl	10049724 <SEQ_BitPosition>
10049518:	0003      	movs	r3, r0
1004951a:	001a      	movs	r2, r3
1004951c:	4b54      	ldr	r3, [pc, #336]	@ (10049670 <UTIL_SEQ_Run+0x1f8>)
1004951e:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
10049520:	4a52      	ldr	r2, [pc, #328]	@ (1004966c <UTIL_SEQ_Run+0x1f4>)
10049522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049524:	00db      	lsls	r3, r3, #3
10049526:	18d3      	adds	r3, r2, r3
10049528:	3304      	adds	r3, #4
1004952a:	681a      	ldr	r2, [r3, #0]
1004952c:	4b50      	ldr	r3, [pc, #320]	@ (10049670 <UTIL_SEQ_Run+0x1f8>)
1004952e:	681b      	ldr	r3, [r3, #0]
10049530:	2101      	movs	r1, #1
10049532:	4099      	lsls	r1, r3
10049534:	000b      	movs	r3, r1
10049536:	43db      	mvns	r3, r3
10049538:	401a      	ands	r2, r3
1004953a:	494c      	ldr	r1, [pc, #304]	@ (1004966c <UTIL_SEQ_Run+0x1f4>)
1004953c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004953e:	00db      	lsls	r3, r3, #3
10049540:	18cb      	adds	r3, r1, r3
10049542:	3304      	adds	r3, #4
10049544:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049546:	f3ef 8310 	mrs	r3, PRIMASK
1004954a:	61bb      	str	r3, [r7, #24]
  return(result);
1004954c:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1004954e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
10049550:	b672      	cpsid	i
}
10049552:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
10049554:	4b46      	ldr	r3, [pc, #280]	@ (10049670 <UTIL_SEQ_Run+0x1f8>)
10049556:	681b      	ldr	r3, [r3, #0]
10049558:	2201      	movs	r2, #1
1004955a:	409a      	lsls	r2, r3
1004955c:	0013      	movs	r3, r2
1004955e:	43da      	mvns	r2, r3
10049560:	4b3e      	ldr	r3, [pc, #248]	@ (1004965c <UTIL_SEQ_Run+0x1e4>)
10049562:	681b      	ldr	r3, [r3, #0]
10049564:	401a      	ands	r2, r3
10049566:	4b3d      	ldr	r3, [pc, #244]	@ (1004965c <UTIL_SEQ_Run+0x1e4>)
10049568:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1004956a:	2303      	movs	r3, #3
1004956c:	63fb      	str	r3, [r7, #60]	@ 0x3c
1004956e:	e013      	b.n	10049598 <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
10049570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049572:	1e5a      	subs	r2, r3, #1
10049574:	4b3d      	ldr	r3, [pc, #244]	@ (1004966c <UTIL_SEQ_Run+0x1f4>)
10049576:	00d2      	lsls	r2, r2, #3
10049578:	58d1      	ldr	r1, [r2, r3]
1004957a:	4b3d      	ldr	r3, [pc, #244]	@ (10049670 <UTIL_SEQ_Run+0x1f8>)
1004957c:	681b      	ldr	r3, [r3, #0]
1004957e:	2201      	movs	r2, #1
10049580:	409a      	lsls	r2, r3
10049582:	0013      	movs	r3, r2
10049584:	43db      	mvns	r3, r3
10049586:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10049588:	3a01      	subs	r2, #1
1004958a:	4019      	ands	r1, r3
1004958c:	4b37      	ldr	r3, [pc, #220]	@ (1004966c <UTIL_SEQ_Run+0x1f4>)
1004958e:	00d2      	lsls	r2, r2, #3
10049590:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
10049592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049594:	3b01      	subs	r3, #1
10049596:	63fb      	str	r3, [r7, #60]	@ 0x3c
10049598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004959a:	2b00      	cmp	r3, #0
1004959c:	d1e8      	bne.n	10049570 <UTIL_SEQ_Run+0xf8>
1004959e:	6a3b      	ldr	r3, [r7, #32]
100495a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100495a2:	697b      	ldr	r3, [r7, #20]
100495a4:	f383 8810 	msr	PRIMASK, r3
}
100495a8:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
100495aa:	4b31      	ldr	r3, [pc, #196]	@ (10049670 <UTIL_SEQ_Run+0x1f8>)
100495ac:	681a      	ldr	r2, [r3, #0]
100495ae:	4b31      	ldr	r3, [pc, #196]	@ (10049674 <UTIL_SEQ_Run+0x1fc>)
100495b0:	0092      	lsls	r2, r2, #2
100495b2:	58d3      	ldr	r3, [r2, r3]
100495b4:	4798      	blx	r3

    local_taskset = TaskSet;
100495b6:	4b29      	ldr	r3, [pc, #164]	@ (1004965c <UTIL_SEQ_Run+0x1e4>)
100495b8:	681b      	ldr	r3, [r3, #0]
100495ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
100495bc:	4b28      	ldr	r3, [pc, #160]	@ (10049660 <UTIL_SEQ_Run+0x1e8>)
100495be:	681b      	ldr	r3, [r3, #0]
100495c0:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
100495c2:	4b28      	ldr	r3, [pc, #160]	@ (10049664 <UTIL_SEQ_Run+0x1ec>)
100495c4:	681b      	ldr	r3, [r3, #0]
100495c6:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
100495c8:	4b27      	ldr	r3, [pc, #156]	@ (10049668 <UTIL_SEQ_Run+0x1f0>)
100495ca:	681b      	ldr	r3, [r3, #0]
100495cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100495ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100495d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100495d2:	401a      	ands	r2, r3
100495d4:	4b20      	ldr	r3, [pc, #128]	@ (10049658 <UTIL_SEQ_Run+0x1e0>)
100495d6:	681b      	ldr	r3, [r3, #0]
100495d8:	4013      	ands	r3, r2
100495da:	d004      	beq.n	100495e6 <UTIL_SEQ_Run+0x16e>
100495dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100495de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100495e0:	4013      	ands	r3, r2
100495e2:	d100      	bne.n	100495e6 <UTIL_SEQ_Run+0x16e>
100495e4:	e762      	b.n	100494ac <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
100495e6:	4b22      	ldr	r3, [pc, #136]	@ (10049670 <UTIL_SEQ_Run+0x1f8>)
100495e8:	2201      	movs	r2, #1
100495ea:	4252      	negs	r2, r2
100495ec:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
100495ee:	4b1e      	ldr	r3, [pc, #120]	@ (10049668 <UTIL_SEQ_Run+0x1f0>)
100495f0:	681b      	ldr	r3, [r3, #0]
100495f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100495f4:	4013      	ands	r3, r2
100495f6:	d127      	bne.n	10049648 <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
100495f8:	f7f7 fa1d 	bl	10040a36 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100495fc:	f3ef 8310 	mrs	r3, PRIMASK
10049600:	613b      	str	r3, [r7, #16]
  return(result);
10049602:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
10049604:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10049606:	b672      	cpsid	i
}
10049608:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
1004960a:	4b14      	ldr	r3, [pc, #80]	@ (1004965c <UTIL_SEQ_Run+0x1e4>)
1004960c:	681b      	ldr	r3, [r3, #0]
1004960e:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10049610:	4b13      	ldr	r3, [pc, #76]	@ (10049660 <UTIL_SEQ_Run+0x1e8>)
10049612:	681b      	ldr	r3, [r3, #0]
10049614:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
10049616:	4b13      	ldr	r3, [pc, #76]	@ (10049664 <UTIL_SEQ_Run+0x1ec>)
10049618:	681b      	ldr	r3, [r3, #0]
1004961a:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
1004961c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004961e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049620:	401a      	ands	r2, r3
10049622:	4b0d      	ldr	r3, [pc, #52]	@ (10049658 <UTIL_SEQ_Run+0x1e0>)
10049624:	681b      	ldr	r3, [r3, #0]
10049626:	4013      	ands	r3, r2
10049628:	d106      	bne.n	10049638 <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
1004962a:	4b0f      	ldr	r3, [pc, #60]	@ (10049668 <UTIL_SEQ_Run+0x1f0>)
1004962c:	681b      	ldr	r3, [r3, #0]
1004962e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10049630:	4013      	ands	r3, r2
10049632:	d101      	bne.n	10049638 <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
10049634:	f7f7 fa04 	bl	10040a40 <UTIL_SEQ_Idle>
10049638:	69fb      	ldr	r3, [r7, #28]
1004963a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004963c:	68fb      	ldr	r3, [r7, #12]
1004963e:	f383 8810 	msr	PRIMASK, r3
}
10049642:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
10049644:	f000 f868 	bl	10049718 <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
10049648:	4b03      	ldr	r3, [pc, #12]	@ (10049658 <UTIL_SEQ_Run+0x1e0>)
1004964a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004964c:	601a      	str	r2, [r3, #0]

  return;
1004964e:	46c0      	nop			@ (mov r8, r8)
}
10049650:	46bd      	mov	sp, r7
10049652:	b010      	add	sp, #64	@ 0x40
10049654:	bd80      	pop	{r7, pc}
10049656:	46c0      	nop			@ (mov r8, r8)
10049658:	200008a8 	.word	0x200008a8
1004965c:	20000610 	.word	0x20000610
10049660:	20000614 	.word	0x20000614
10049664:	200008a4 	.word	0x200008a4
10049668:	20000618 	.word	0x20000618
1004966c:	200006a0 	.word	0x200006a0
10049670:	2000061c 	.word	0x2000061c
10049674:	20000620 	.word	0x20000620

10049678 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
10049678:	b580      	push	{r7, lr}
1004967a:	b088      	sub	sp, #32
1004967c:	af00      	add	r7, sp, #0
1004967e:	60f8      	str	r0, [r7, #12]
10049680:	60b9      	str	r1, [r7, #8]
10049682:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049684:	f3ef 8310 	mrs	r3, PRIMASK
10049688:	617b      	str	r3, [r7, #20]
  return(result);
1004968a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
1004968c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004968e:	b672      	cpsid	i
}
10049690:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
10049692:	68fb      	ldr	r3, [r7, #12]
10049694:	0018      	movs	r0, r3
10049696:	f000 f845 	bl	10049724 <SEQ_BitPosition>
1004969a:	0003      	movs	r3, r0
1004969c:	001a      	movs	r2, r3
1004969e:	4b07      	ldr	r3, [pc, #28]	@ (100496bc <UTIL_SEQ_RegTask+0x44>)
100496a0:	0092      	lsls	r2, r2, #2
100496a2:	6879      	ldr	r1, [r7, #4]
100496a4:	50d1      	str	r1, [r2, r3]
100496a6:	69fb      	ldr	r3, [r7, #28]
100496a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100496aa:	69bb      	ldr	r3, [r7, #24]
100496ac:	f383 8810 	msr	PRIMASK, r3
}
100496b0:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
100496b2:	46c0      	nop			@ (mov r8, r8)
}
100496b4:	46bd      	mov	sp, r7
100496b6:	b008      	add	sp, #32
100496b8:	bd80      	pop	{r7, pc}
100496ba:	46c0      	nop			@ (mov r8, r8)
100496bc:	20000620 	.word	0x20000620

100496c0 <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
100496c0:	b580      	push	{r7, lr}
100496c2:	b086      	sub	sp, #24
100496c4:	af00      	add	r7, sp, #0
100496c6:	6078      	str	r0, [r7, #4]
100496c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100496ca:	f3ef 8310 	mrs	r3, PRIMASK
100496ce:	60fb      	str	r3, [r7, #12]
  return(result);
100496d0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100496d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
100496d4:	b672      	cpsid	i
}
100496d6:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
100496d8:	4b0d      	ldr	r3, [pc, #52]	@ (10049710 <UTIL_SEQ_SetTask+0x50>)
100496da:	681a      	ldr	r2, [r3, #0]
100496dc:	687b      	ldr	r3, [r7, #4]
100496de:	431a      	orrs	r2, r3
100496e0:	4b0b      	ldr	r3, [pc, #44]	@ (10049710 <UTIL_SEQ_SetTask+0x50>)
100496e2:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
100496e4:	4b0b      	ldr	r3, [pc, #44]	@ (10049714 <UTIL_SEQ_SetTask+0x54>)
100496e6:	683a      	ldr	r2, [r7, #0]
100496e8:	00d2      	lsls	r2, r2, #3
100496ea:	58d2      	ldr	r2, [r2, r3]
100496ec:	687b      	ldr	r3, [r7, #4]
100496ee:	431a      	orrs	r2, r3
100496f0:	0011      	movs	r1, r2
100496f2:	4b08      	ldr	r3, [pc, #32]	@ (10049714 <UTIL_SEQ_SetTask+0x54>)
100496f4:	683a      	ldr	r2, [r7, #0]
100496f6:	00d2      	lsls	r2, r2, #3
100496f8:	50d1      	str	r1, [r2, r3]
100496fa:	697b      	ldr	r3, [r7, #20]
100496fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100496fe:	693b      	ldr	r3, [r7, #16]
10049700:	f383 8810 	msr	PRIMASK, r3
}
10049704:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
10049706:	46c0      	nop			@ (mov r8, r8)
}
10049708:	46bd      	mov	sp, r7
1004970a:	b006      	add	sp, #24
1004970c:	bd80      	pop	{r7, pc}
1004970e:	46c0      	nop			@ (mov r8, r8)
10049710:	20000610 	.word	0x20000610
10049714:	200006a0 	.word	0x200006a0

10049718 <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
10049718:	b580      	push	{r7, lr}
1004971a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
1004971c:	46c0      	nop			@ (mov r8, r8)
}
1004971e:	46bd      	mov	sp, r7
10049720:	bd80      	pop	{r7, pc}
	...

10049724 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
10049724:	b580      	push	{r7, lr}
10049726:	b084      	sub	sp, #16
10049728:	af00      	add	r7, sp, #0
1004972a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
1004972c:	210f      	movs	r1, #15
1004972e:	187b      	adds	r3, r7, r1
10049730:	2200      	movs	r2, #0
10049732:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
10049734:	687b      	ldr	r3, [r7, #4]
10049736:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
10049738:	68ba      	ldr	r2, [r7, #8]
1004973a:	2380      	movs	r3, #128	@ 0x80
1004973c:	025b      	lsls	r3, r3, #9
1004973e:	429a      	cmp	r2, r3
10049740:	d205      	bcs.n	1004974e <SEQ_BitPosition+0x2a>
10049742:	187b      	adds	r3, r7, r1
10049744:	2210      	movs	r2, #16
10049746:	701a      	strb	r2, [r3, #0]
10049748:	68bb      	ldr	r3, [r7, #8]
1004974a:	041b      	lsls	r3, r3, #16
1004974c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
1004974e:	68ba      	ldr	r2, [r7, #8]
10049750:	2380      	movs	r3, #128	@ 0x80
10049752:	045b      	lsls	r3, r3, #17
10049754:	429a      	cmp	r2, r3
10049756:	d208      	bcs.n	1004976a <SEQ_BitPosition+0x46>
10049758:	220f      	movs	r2, #15
1004975a:	18bb      	adds	r3, r7, r2
1004975c:	18ba      	adds	r2, r7, r2
1004975e:	7812      	ldrb	r2, [r2, #0]
10049760:	3208      	adds	r2, #8
10049762:	701a      	strb	r2, [r3, #0]
10049764:	68bb      	ldr	r3, [r7, #8]
10049766:	021b      	lsls	r3, r3, #8
10049768:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
1004976a:	68ba      	ldr	r2, [r7, #8]
1004976c:	2380      	movs	r3, #128	@ 0x80
1004976e:	055b      	lsls	r3, r3, #21
10049770:	429a      	cmp	r2, r3
10049772:	d208      	bcs.n	10049786 <SEQ_BitPosition+0x62>
10049774:	220f      	movs	r2, #15
10049776:	18bb      	adds	r3, r7, r2
10049778:	18ba      	adds	r2, r7, r2
1004977a:	7812      	ldrb	r2, [r2, #0]
1004977c:	3204      	adds	r2, #4
1004977e:	701a      	strb	r2, [r3, #0]
10049780:	68bb      	ldr	r3, [r7, #8]
10049782:	011b      	lsls	r3, r3, #4
10049784:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
10049786:	68bb      	ldr	r3, [r7, #8]
10049788:	0f1b      	lsrs	r3, r3, #28
1004978a:	4a08      	ldr	r2, [pc, #32]	@ (100497ac <SEQ_BitPosition+0x88>)
1004978c:	5cd1      	ldrb	r1, [r2, r3]
1004978e:	200f      	movs	r0, #15
10049790:	183b      	adds	r3, r7, r0
10049792:	183a      	adds	r2, r7, r0
10049794:	7812      	ldrb	r2, [r2, #0]
10049796:	188a      	adds	r2, r1, r2
10049798:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
1004979a:	183b      	adds	r3, r7, r0
1004979c:	781b      	ldrb	r3, [r3, #0]
1004979e:	221f      	movs	r2, #31
100497a0:	1ad3      	subs	r3, r2, r3
100497a2:	b2db      	uxtb	r3, r3
}
100497a4:	0018      	movs	r0, r3
100497a6:	46bd      	mov	sp, r7
100497a8:	b004      	add	sp, #16
100497aa:	bd80      	pop	{r7, pc}
100497ac:	1004ef18 	.word	0x1004ef18

100497b0 <aci_gap_init>:
100497b0:	b580      	push	{r7, lr}
100497b2:	2802      	cmp	r0, #2
100497b4:	d901      	bls.n	100497ba <aci_gap_init+0xa>
100497b6:	2012      	movs	r0, #18
100497b8:	bd80      	pop	{r7, pc}
100497ba:	f000 fdf1 	bl	1004a3a0 <GAP_Init>
100497be:	bd80      	pop	{r7, pc}

100497c0 <GAP_set_advertising_configuration_ucfg_weak>:
100497c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100497c2:	461c      	mov	r4, r3
100497c4:	4608      	mov	r0, r1
100497c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
100497c8:	9103      	str	r1, [sp, #12]
100497ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
100497cc:	9102      	str	r1, [sp, #8]
100497ce:	9908      	ldr	r1, [sp, #32]
100497d0:	9101      	str	r1, [sp, #4]
100497d2:	9907      	ldr	r1, [sp, #28]
100497d4:	9100      	str	r1, [sp, #0]
100497d6:	9b06      	ldr	r3, [sp, #24]
100497d8:	4611      	mov	r1, r2
100497da:	4622      	mov	r2, r4
100497dc:	f000 ff04 	bl	1004a5e8 <GAP_set_legacy_advertising_configuration>
100497e0:	b004      	add	sp, #16
100497e2:	bd10      	pop	{r4, pc}

100497e4 <GAP_set_advertising_data_ucfg_weak>:
100497e4:	b580      	push	{r7, lr}
100497e6:	4619      	mov	r1, r3
100497e8:	4610      	mov	r0, r2
100497ea:	f001 f857 	bl	1004a89c <GAP_set_legacy_advertising_data>
100497ee:	bd80      	pop	{r7, pc}

100497f0 <GAP_set_advertising_enable_ucfg_weak>:
100497f0:	b580      	push	{r7, lr}
100497f2:	f000 ff4d 	bl	1004a690 <GAP_set_legacy_advertising_enable>
100497f6:	bd80      	pop	{r7, pc}

100497f8 <aci_gap_set_advertising_configuration>:
100497f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100497fa:	b093      	sub	sp, #76	@ 0x4c
100497fc:	461f      	mov	r7, r3
100497fe:	4615      	mov	r5, r2
10049800:	460e      	mov	r6, r1
10049802:	9012      	str	r0, [sp, #72]	@ 0x48
10049804:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
10049806:	4608      	mov	r0, r1
10049808:	4611      	mov	r1, r2
1004980a:	4622      	mov	r2, r4
1004980c:	f000 febe 	bl	1004a58c <GAP_check_discoverability_mode>
10049810:	2800      	cmp	r0, #0
10049812:	d124      	bne.n	1004985e <aci_gap_set_advertising_configuration+0x66>
10049814:	9822      	ldr	r0, [sp, #136]	@ 0x88
10049816:	900d      	str	r0, [sp, #52]	@ 0x34
10049818:	ab1f      	add	r3, sp, #124	@ 0x7c
1004981a:	cb0d      	ldmia	r3, {r0, r2, r3}
1004981c:	9011      	str	r0, [sp, #68]	@ 0x44
1004981e:	981e      	ldr	r0, [sp, #120]	@ 0x78
10049820:	900f      	str	r0, [sp, #60]	@ 0x3c
10049822:	981d      	ldr	r0, [sp, #116]	@ 0x74
10049824:	900e      	str	r0, [sp, #56]	@ 0x38
10049826:	981b      	ldr	r0, [sp, #108]	@ 0x6c
10049828:	900c      	str	r0, [sp, #48]	@ 0x30
1004982a:	991a      	ldr	r1, [sp, #104]	@ 0x68
1004982c:	9819      	ldr	r0, [sp, #100]	@ 0x64
1004982e:	9710      	str	r7, [sp, #64]	@ 0x40
10049830:	9f18      	ldr	r7, [sp, #96]	@ 0x60
10049832:	9208      	str	r2, [sp, #32]
10049834:	9309      	str	r3, [sp, #36]	@ 0x24
10049836:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10049838:	920a      	str	r2, [sp, #40]	@ 0x28
1004983a:	9700      	str	r7, [sp, #0]
1004983c:	9001      	str	r0, [sp, #4]
1004983e:	9102      	str	r1, [sp, #8]
10049840:	980c      	ldr	r0, [sp, #48]	@ 0x30
10049842:	9003      	str	r0, [sp, #12]
10049844:	9404      	str	r4, [sp, #16]
10049846:	980e      	ldr	r0, [sp, #56]	@ 0x38
10049848:	9005      	str	r0, [sp, #20]
1004984a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1004984c:	9006      	str	r0, [sp, #24]
1004984e:	9811      	ldr	r0, [sp, #68]	@ 0x44
10049850:	9007      	str	r0, [sp, #28]
10049852:	9812      	ldr	r0, [sp, #72]	@ 0x48
10049854:	4631      	mov	r1, r6
10049856:	462a      	mov	r2, r5
10049858:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004985a:	f7ff ffb1 	bl	100497c0 <GAP_set_advertising_configuration_ucfg_weak>
1004985e:	b013      	add	sp, #76	@ 0x4c
10049860:	bdf0      	pop	{r4, r5, r6, r7, pc}

10049862 <aci_gap_set_advertising_data>:
10049862:	b580      	push	{r7, lr}
10049864:	f7ff ffbe 	bl	100497e4 <GAP_set_advertising_data_ucfg_weak>
10049868:	bd80      	pop	{r7, pc}

1004986a <aci_gap_set_advertising_enable>:
1004986a:	b580      	push	{r7, lr}
1004986c:	f7ff ffc0 	bl	100497f0 <GAP_set_advertising_enable_ucfg_weak>
10049870:	bd80      	pop	{r7, pc}

10049872 <configBitmapSet>:
10049872:	2000      	movs	r0, #0
10049874:	4770      	bx	lr
	...

10049878 <HAL_Write_ConfigData>:
10049878:	b5f0      	push	{r4, r5, r6, r7, lr}
1004987a:	b087      	sub	sp, #28
1004987c:	4614      	mov	r4, r2
1004987e:	460d      	mov	r5, r1
10049880:	4606      	mov	r6, r0
10049882:	4869      	ldr	r0, [pc, #420]	@ (10049a28 <__arm_cp.4_0>)
10049884:	6800      	ldr	r0, [r0, #0]
10049886:	2e00      	cmp	r6, #0
10049888:	d101      	bne.n	1004988e <HAL_Write_ConfigData+0x16>
1004988a:	2d06      	cmp	r5, #6
1004988c:	d017      	beq.n	100498be <HAL_Write_ConfigData+0x46>
1004988e:	2e06      	cmp	r6, #6
10049890:	d101      	bne.n	10049896 <HAL_Write_ConfigData+0x1e>
10049892:	2d02      	cmp	r5, #2
10049894:	d013      	beq.n	100498be <HAL_Write_ConfigData+0x46>
10049896:	2e08      	cmp	r6, #8
10049898:	d101      	bne.n	1004989e <HAL_Write_ConfigData+0x26>
1004989a:	2d10      	cmp	r5, #16
1004989c:	d00f      	beq.n	100498be <HAL_Write_ConfigData+0x46>
1004989e:	2e18      	cmp	r6, #24
100498a0:	d101      	bne.n	100498a6 <HAL_Write_ConfigData+0x2e>
100498a2:	2d10      	cmp	r5, #16
100498a4:	d00b      	beq.n	100498be <HAL_Write_ConfigData+0x46>
100498a6:	2e28      	cmp	r6, #40	@ 0x28
100498a8:	d101      	bne.n	100498ae <HAL_Write_ConfigData+0x36>
100498aa:	2d02      	cmp	r5, #2
100498ac:	d007      	beq.n	100498be <HAL_Write_ConfigData+0x46>
100498ae:	2e2a      	cmp	r6, #42	@ 0x2a
100498b0:	d101      	bne.n	100498b6 <HAL_Write_ConfigData+0x3e>
100498b2:	2d02      	cmp	r5, #2
100498b4:	d003      	beq.n	100498be <HAL_Write_ConfigData+0x46>
100498b6:	2e2c      	cmp	r6, #44	@ 0x2c
100498b8:	d109      	bne.n	100498ce <HAL_Write_ConfigData+0x56>
100498ba:	2d01      	cmp	r5, #1
100498bc:	d107      	bne.n	100498ce <HAL_Write_ConfigData+0x56>
100498be:	1980      	adds	r0, r0, r6
100498c0:	4621      	mov	r1, r4
100498c2:	462a      	mov	r2, r5
100498c4:	f7f8 f972 	bl	10041bac <BLEPLAT_MemCpy>
100498c8:	2000      	movs	r0, #0
100498ca:	b007      	add	sp, #28
100498cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100498ce:	2e2e      	cmp	r6, #46	@ 0x2e
100498d0:	d107      	bne.n	100498e2 <HAL_Write_ConfigData+0x6a>
100498d2:	2d06      	cmp	r5, #6
100498d4:	d105      	bne.n	100498e2 <HAL_Write_ConfigData+0x6a>
100498d6:	7961      	ldrb	r1, [r4, #5]
100498d8:	0989      	lsrs	r1, r1, #6
100498da:	2903      	cmp	r1, #3
100498dc:	d2ef      	bcs.n	100498be <HAL_Write_ConfigData+0x46>
100498de:	2012      	movs	r0, #18
100498e0:	e7f3      	b.n	100498ca <HAL_Write_ConfigData+0x52>
100498e2:	2ed0      	cmp	r6, #208	@ 0xd0
100498e4:	d105      	bne.n	100498f2 <HAL_Write_ConfigData+0x7a>
100498e6:	2d01      	cmp	r5, #1
100498e8:	d103      	bne.n	100498f2 <HAL_Write_ConfigData+0x7a>
100498ea:	7820      	ldrb	r0, [r4, #0]
100498ec:	f003 fc33 	bl	1004d156 <smp_sap_scp_force_debug_key_usage_ucfg_weak>
100498f0:	e7eb      	b.n	100498ca <HAL_Write_ConfigData+0x52>
100498f2:	2ed2      	cmp	r6, #210	@ 0xd2
100498f4:	d105      	bne.n	10049902 <HAL_Write_ConfigData+0x8a>
100498f6:	2d01      	cmp	r5, #1
100498f8:	d103      	bne.n	10049902 <HAL_Write_ConfigData+0x8a>
100498fa:	7821      	ldrb	r1, [r4, #0]
100498fc:	2236      	movs	r2, #54	@ 0x36
100498fe:	5481      	strb	r1, [r0, r2]
10049900:	e7e2      	b.n	100498c8 <HAL_Write_ConfigData+0x50>
10049902:	2ed5      	cmp	r6, #213	@ 0xd5
10049904:	d10a      	bne.n	1004991c <HAL_Write_ConfigData+0xa4>
10049906:	2d04      	cmp	r5, #4
10049908:	d108      	bne.n	1004991c <HAL_Write_ConfigData+0xa4>
1004990a:	a802      	add	r0, sp, #8
1004990c:	2204      	movs	r2, #4
1004990e:	4621      	mov	r1, r4
10049910:	f7f8 f94c 	bl	10041bac <BLEPLAT_MemCpy>
10049914:	9802      	ldr	r0, [sp, #8]
10049916:	f003 fc19 	bl	1004d14c <smp_debug_trudy__set_config_ucfg_weak>
1004991a:	e7d6      	b.n	100498ca <HAL_Write_ConfigData+0x52>
1004991c:	f7ff fd79 	bl	10049412 <data_length_extension_csr_ucfg>
10049920:	2d08      	cmp	r5, #8
10049922:	d123      	bne.n	1004996c <HAL_Write_ConfigData+0xf4>
10049924:	2ed1      	cmp	r6, #209	@ 0xd1
10049926:	d121      	bne.n	1004996c <HAL_Write_ConfigData+0xf4>
10049928:	2801      	cmp	r0, #1
1004992a:	d11f      	bne.n	1004996c <HAL_Write_ConfigData+0xf4>
1004992c:	a802      	add	r0, sp, #8
1004992e:	9001      	str	r0, [sp, #4]
10049930:	2602      	movs	r6, #2
10049932:	4d3f      	ldr	r5, [pc, #252]	@ (10049a30 <__arm_cp.4_2>)
10049934:	4621      	mov	r1, r4
10049936:	4632      	mov	r2, r6
10049938:	47a8      	blx	r5
1004993a:	1ca1      	adds	r1, r4, #2
1004993c:	af06      	add	r7, sp, #24
1004993e:	4638      	mov	r0, r7
10049940:	4632      	mov	r2, r6
10049942:	47a8      	blx	r5
10049944:	1d21      	adds	r1, r4, #4
10049946:	ad05      	add	r5, sp, #20
10049948:	4628      	mov	r0, r5
1004994a:	4632      	mov	r2, r6
1004994c:	4b38      	ldr	r3, [pc, #224]	@ (10049a30 <__arm_cp.4_2>)
1004994e:	4798      	blx	r3
10049950:	1da1      	adds	r1, r4, #6
10049952:	ac04      	add	r4, sp, #16
10049954:	4620      	mov	r0, r4
10049956:	4632      	mov	r2, r6
10049958:	4b35      	ldr	r3, [pc, #212]	@ (10049a30 <__arm_cp.4_2>)
1004995a:	4798      	blx	r3
1004995c:	8823      	ldrh	r3, [r4, #0]
1004995e:	882a      	ldrh	r2, [r5, #0]
10049960:	8839      	ldrh	r1, [r7, #0]
10049962:	9801      	ldr	r0, [sp, #4]
10049964:	8800      	ldrh	r0, [r0, #0]
10049966:	f7ff fd64 	bl	10049432 <ll_write_supported_data_ucfg>
1004996a:	e7ae      	b.n	100498ca <HAL_Write_ConfigData+0x52>
1004996c:	2e30      	cmp	r6, #48	@ 0x30
1004996e:	d105      	bne.n	1004997c <HAL_Write_ConfigData+0x104>
10049970:	2d01      	cmp	r5, #1
10049972:	d103      	bne.n	1004997c <HAL_Write_ConfigData+0x104>
10049974:	7820      	ldrb	r0, [r4, #0]
10049976:	f001 fb03 	bl	1004af80 <llc_conn_multi_link_connection_ucfg_weak>
1004997a:	e7a6      	b.n	100498ca <HAL_Write_ConfigData+0x52>
1004997c:	2ed3      	cmp	r6, #211	@ 0xd3
1004997e:	d105      	bne.n	1004998c <HAL_Write_ConfigData+0x114>
10049980:	2d01      	cmp	r5, #1
10049982:	d103      	bne.n	1004998c <HAL_Write_ConfigData+0x114>
10049984:	7820      	ldrb	r0, [r4, #0]
10049986:	f002 fbf3 	bl	1004c170 <LL_force_chsel_1>
1004998a:	e79e      	b.n	100498ca <HAL_Write_ConfigData+0x52>
1004998c:	2eff      	cmp	r6, #255	@ 0xff
1004998e:	d10a      	bne.n	100499a6 <HAL_Write_ConfigData+0x12e>
10049990:	2d04      	cmp	r5, #4
10049992:	d108      	bne.n	100499a6 <HAL_Write_ConfigData+0x12e>
10049994:	a802      	add	r0, sp, #8
10049996:	2204      	movs	r2, #4
10049998:	4621      	mov	r1, r4
1004999a:	f7f8 f907 	bl	10041bac <BLEPLAT_MemCpy>
1004999e:	9802      	ldr	r0, [sp, #8]
100499a0:	f7ff ff67 	bl	10049872 <configBitmapSet>
100499a4:	e00c      	b.n	100499c0 <HAL_Write_ConfigData+0x148>
100499a6:	2efe      	cmp	r6, #254	@ 0xfe
100499a8:	d10d      	bne.n	100499c6 <HAL_Write_ConfigData+0x14e>
100499aa:	2d05      	cmp	r5, #5
100499ac:	d10b      	bne.n	100499c6 <HAL_Write_ConfigData+0x14e>
100499ae:	ad02      	add	r5, sp, #8
100499b0:	2205      	movs	r2, #5
100499b2:	4628      	mov	r0, r5
100499b4:	4621      	mov	r1, r4
100499b6:	f7f8 f8f9 	bl	10041bac <BLEPLAT_MemCpy>
100499ba:	4628      	mov	r0, r5
100499bc:	f000 f9e2 	bl	10049d84 <log_verbosity_set_ucfg_weak>
100499c0:	2800      	cmp	r0, #0
100499c2:	d181      	bne.n	100498c8 <HAL_Write_ConfigData+0x50>
100499c4:	e78b      	b.n	100498de <HAL_Write_ConfigData+0x66>
100499c6:	2e2f      	cmp	r6, #47	@ 0x2f
100499c8:	d105      	bne.n	100499d6 <HAL_Write_ConfigData+0x15e>
100499ca:	2d01      	cmp	r5, #1
100499cc:	d103      	bne.n	100499d6 <HAL_Write_ConfigData+0x15e>
100499ce:	7820      	ldrb	r0, [r4, #0]
100499d0:	f001 fb00 	bl	1004afd4 <llc_scan_set_scan_channel_bitmap>
100499d4:	e779      	b.n	100498ca <HAL_Write_ConfigData+0x52>
100499d6:	2e32      	cmp	r6, #50	@ 0x32
100499d8:	d112      	bne.n	10049a00 <HAL_Write_ConfigData+0x188>
100499da:	2d02      	cmp	r5, #2
100499dc:	d110      	bne.n	10049a00 <HAL_Write_ConfigData+0x188>
100499de:	ad02      	add	r5, sp, #8
100499e0:	2202      	movs	r2, #2
100499e2:	4628      	mov	r0, r5
100499e4:	4621      	mov	r1, r4
100499e6:	f7f8 f8e1 	bl	10041bac <BLEPLAT_MemCpy>
100499ea:	8828      	ldrh	r0, [r5, #0]
100499ec:	1e41      	subs	r1, r0, #1
100499ee:	08c9      	lsrs	r1, r1, #3
100499f0:	29e0      	cmp	r1, #224	@ 0xe0
100499f2:	d900      	bls.n	100499f6 <HAL_Write_ConfigData+0x17e>
100499f4:	e773      	b.n	100498de <HAL_Write_ConfigData+0x66>
100499f6:	490d      	ldr	r1, [pc, #52]	@ (10049a2c <__arm_cp.4_1>)
100499f8:	6809      	ldr	r1, [r1, #0]
100499fa:	225a      	movs	r2, #90	@ 0x5a
100499fc:	5288      	strh	r0, [r1, r2]
100499fe:	e763      	b.n	100498c8 <HAL_Write_ConfigData+0x50>
10049a00:	2012      	movs	r0, #18
10049a02:	2e33      	cmp	r6, #51	@ 0x33
10049a04:	d000      	beq.n	10049a08 <HAL_Write_ConfigData+0x190>
10049a06:	e760      	b.n	100498ca <HAL_Write_ConfigData+0x52>
10049a08:	2d01      	cmp	r5, #1
10049a0a:	d000      	beq.n	10049a0e <HAL_Write_ConfigData+0x196>
10049a0c:	e75d      	b.n	100498ca <HAL_Write_ConfigData+0x52>
10049a0e:	ad02      	add	r5, sp, #8
10049a10:	2201      	movs	r2, #1
10049a12:	4628      	mov	r0, r5
10049a14:	4621      	mov	r1, r4
10049a16:	f7f8 f8c9 	bl	10041bac <BLEPLAT_MemCpy>
10049a1a:	7828      	ldrb	r0, [r5, #0]
10049a1c:	f000 fdae 	bl	1004a57c <GAP_enable_rpa_change_at_timeout>
10049a20:	7828      	ldrb	r0, [r5, #0]
10049a22:	f001 facc 	bl	1004afbe <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>
10049a26:	e74f      	b.n	100498c8 <HAL_Write_ConfigData+0x50>

10049a28 <__arm_cp.4_0>:
10049a28:	200006b8 	.word	0x200006b8

10049a2c <__arm_cp.4_1>:
10049a2c:	200006c0 	.word	0x200006c0

10049a30 <__arm_cp.4_2>:
10049a30:	10041bad 	.word	0x10041bad

10049a34 <aci_hal_write_config_data>:
10049a34:	b580      	push	{r7, lr}
10049a36:	f7ff ff1f 	bl	10049878 <HAL_Write_ConfigData>
10049a3a:	bd80      	pop	{r7, pc}

10049a3c <aci_hal_set_tx_power_level>:
10049a3c:	b580      	push	{r7, lr}
10049a3e:	f000 f801 	bl	10049a44 <HAL_Set_TX_Power_Level>
10049a42:	bd80      	pop	{r7, pc}

10049a44 <HAL_Set_TX_Power_Level>:
10049a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10049a46:	460e      	mov	r6, r1
10049a48:	4605      	mov	r5, r0
10049a4a:	2412      	movs	r4, #18
10049a4c:	f7f8 f912 	bl	10041c74 <BLEPLAT_GetMaxPALevel>
10049a50:	42b0      	cmp	r0, r6
10049a52:	d317      	bcc.n	10049a84 <HAL_Set_TX_Power_Level+0x40>
10049a54:	2d01      	cmp	r5, #1
10049a56:	d815      	bhi.n	10049a84 <HAL_Set_TX_Power_Level+0x40>
10049a58:	480b      	ldr	r0, [pc, #44]	@ (10049a88 <__arm_cp.11_0>)
10049a5a:	6800      	ldr	r0, [r0, #0]
10049a5c:	7a81      	ldrb	r1, [r0, #10]
10049a5e:	9100      	str	r1, [sp, #0]
10049a60:	7285      	strb	r5, [r0, #10]
10049a62:	7a47      	ldrb	r7, [r0, #9]
10049a64:	7246      	strb	r6, [r0, #9]
10049a66:	4628      	mov	r0, r5
10049a68:	f7f8 f914 	bl	10041c94 <BLEPLAT_SetHighPower>
10049a6c:	2400      	movs	r4, #0
10049a6e:	42b7      	cmp	r7, r6
10049a70:	d102      	bne.n	10049a78 <HAL_Set_TX_Power_Level+0x34>
10049a72:	9800      	ldr	r0, [sp, #0]
10049a74:	42a8      	cmp	r0, r5
10049a76:	d005      	beq.n	10049a84 <HAL_Set_TX_Power_Level+0x40>
10049a78:	20ff      	movs	r0, #255	@ 0xff
10049a7a:	227f      	movs	r2, #127	@ 0x7f
10049a7c:	2101      	movs	r1, #1
10049a7e:	460b      	mov	r3, r1
10049a80:	f001 fb5d 	bl	1004b13e <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10049a84:	4620      	mov	r0, r4
10049a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10049a88 <__arm_cp.11_0>:
10049a88:	200006c8 	.word	0x200006c8

10049a8c <ble_HAL_Init>:
10049a8c:	b580      	push	{r7, lr}
10049a8e:	4804      	ldr	r0, [pc, #16]	@ (10049aa0 <__arm_cp.17_0>)
10049a90:	6800      	ldr	r0, [r0, #0]
10049a92:	3060      	adds	r0, #96	@ 0x60
10049a94:	2100      	movs	r1, #0
10049a96:	2204      	movs	r2, #4
10049a98:	f7f8 f898 	bl	10041bcc <BLEPLAT_MemSet>
10049a9c:	bd80      	pop	{r7, pc}
10049a9e:	46c0      	nop			@ (mov r8, r8)

10049aa0 <__arm_cp.17_0>:
10049aa0:	200006c8 	.word	0x200006c8

10049aa4 <hal_read_radio_activity_state>:
10049aa4:	b570      	push	{r4, r5, r6, lr}
10049aa6:	4603      	mov	r3, r0
10049aa8:	480a      	ldr	r0, [pc, #40]	@ (10049ad4 <__arm_cp.18_0>)
10049aaa:	6804      	ldr	r4, [r0, #0]
10049aac:	f3ef 8010 	mrs	r0, PRIMASK
10049ab0:	b672      	cpsid	i
10049ab2:	7d20      	ldrb	r0, [r4, #20]
10049ab4:	2500      	movs	r5, #0
10049ab6:	7525      	strb	r5, [r4, #20]
10049ab8:	7c25      	ldrb	r5, [r4, #16]
10049aba:	260f      	movs	r6, #15
10049abc:	402e      	ands	r6, r5
10049abe:	701e      	strb	r6, [r3, #0]
10049ac0:	7c23      	ldrb	r3, [r4, #16]
10049ac2:	091b      	lsrs	r3, r3, #4
10049ac4:	700b      	strb	r3, [r1, #0]
10049ac6:	68e1      	ldr	r1, [r4, #12]
10049ac8:	6011      	str	r1, [r2, #0]
10049aca:	1e41      	subs	r1, r0, #1
10049acc:	4188      	sbcs	r0, r1
10049ace:	b662      	cpsie	i
10049ad0:	bd70      	pop	{r4, r5, r6, pc}
10049ad2:	46c0      	nop			@ (mov r8, r8)

10049ad4 <__arm_cp.18_0>:
10049ad4:	200006c8 	.word	0x200006c8

10049ad8 <hal_radio_activity_state_init>:
10049ad8:	4803      	ldr	r0, [pc, #12]	@ (10049ae8 <__arm_cp.20_0>)
10049ada:	6800      	ldr	r0, [r0, #0]
10049adc:	2100      	movs	r1, #0
10049ade:	7501      	strb	r1, [r0, #20]
10049ae0:	8241      	strh	r1, [r0, #18]
10049ae2:	7401      	strb	r1, [r0, #16]
10049ae4:	4770      	bx	lr
10049ae6:	46c0      	nop			@ (mov r8, r8)

10049ae8 <__arm_cp.20_0>:
10049ae8:	200006c8 	.word	0x200006c8

10049aec <hal_radio_activity_state_cb_check>:
10049aec:	b510      	push	{r4, lr}
10049aee:	b086      	sub	sp, #24
10049af0:	4815      	ldr	r0, [pc, #84]	@ (10049b48 <__arm_cp.22_0>)
10049af2:	6804      	ldr	r4, [r0, #0]
10049af4:	a802      	add	r0, sp, #8
10049af6:	a901      	add	r1, sp, #4
10049af8:	466a      	mov	r2, sp
10049afa:	f7ff ffd3 	bl	10049aa4 <hal_read_radio_activity_state>
10049afe:	2800      	cmp	r0, #0
10049b00:	d01f      	beq.n	10049b42 <hal_radio_activity_state_cb_check+0x56>
10049b02:	a802      	add	r0, sp, #8
10049b04:	7801      	ldrb	r1, [r0, #0]
10049b06:	8a60      	ldrh	r0, [r4, #18]
10049b08:	40c8      	lsrs	r0, r1
10049b0a:	07c0      	lsls	r0, r0, #31
10049b0c:	d019      	beq.n	10049b42 <hal_radio_activity_state_cb_check+0x56>
10049b0e:	9a01      	ldr	r2, [sp, #4]
10049b10:	9b00      	ldr	r3, [sp, #0]
10049b12:	a803      	add	r0, sp, #12
10049b14:	2408      	movs	r4, #8
10049b16:	7084      	strb	r4, [r0, #2]
10049b18:	0e1c      	lsrs	r4, r3, #24
10049b1a:	72c4      	strb	r4, [r0, #11]
10049b1c:	0c1c      	lsrs	r4, r3, #16
10049b1e:	7284      	strb	r4, [r0, #10]
10049b20:	0a1c      	lsrs	r4, r3, #8
10049b22:	7244      	strb	r4, [r0, #9]
10049b24:	7203      	strb	r3, [r0, #8]
10049b26:	71c2      	strb	r2, [r0, #7]
10049b28:	7181      	strb	r1, [r0, #6]
10049b2a:	21ff      	movs	r1, #255	@ 0xff
10049b2c:	7041      	strb	r1, [r0, #1]
10049b2e:	2182      	movs	r1, #130	@ 0x82
10049b30:	7001      	strb	r1, [r0, #0]
10049b32:	2100      	movs	r1, #0
10049b34:	7141      	strb	r1, [r0, #5]
10049b36:	2204      	movs	r2, #4
10049b38:	7102      	strb	r2, [r0, #4]
10049b3a:	70c1      	strb	r1, [r0, #3]
10049b3c:	210c      	movs	r1, #12
10049b3e:	f7ff fc31 	bl	100493a4 <BLE_STACK_Event>
10049b42:	b006      	add	sp, #24
10049b44:	bd10      	pop	{r4, pc}
10049b46:	46c0      	nop			@ (mov r8, r8)

10049b48 <__arm_cp.22_0>:
10049b48:	200006c8 	.word	0x200006c8

10049b4c <ACL_pkt_init_ucfg_weak>:
10049b4c:	2000      	movs	r0, #0
10049b4e:	4770      	bx	lr

10049b50 <BLE_STACK_Tick>:
10049b50:	b580      	push	{r7, lr}
10049b52:	f003 fb25 	bl	1004d1a0 <tsk_scheduler>
10049b56:	bd80      	pop	{r7, pc}

10049b58 <BlueNRG_Stack_Initialize_Layers>:
10049b58:	b5f0      	push	{r4, r5, r6, r7, lr}
10049b5a:	b08f      	sub	sp, #60	@ 0x3c
10049b5c:	9309      	str	r3, [sp, #36]	@ 0x24
10049b5e:	920b      	str	r2, [sp, #44]	@ 0x2c
10049b60:	910a      	str	r1, [sp, #40]	@ 0x28
10049b62:	9008      	str	r0, [sp, #32]
10049b64:	f003 f830 	bl	1004cbc8 <csmem_init>
10049b68:	2401      	movs	r4, #1
10049b6a:	2138      	movs	r1, #56	@ 0x38
10049b6c:	4620      	mov	r0, r4
10049b6e:	f003 f843 	bl	1004cbf8 <csmem_mem_0_assign>
10049b72:	4933      	ldr	r1, [pc, #204]	@ (10049c40 <__arm_cp.1_0>)
10049b74:	7ac9      	ldrb	r1, [r1, #11]
10049b76:	2234      	movs	r2, #52	@ 0x34
10049b78:	5481      	strb	r1, [r0, r2]
10049b7a:	4e32      	ldr	r6, [pc, #200]	@ (10049c44 <__arm_cp.1_1>)
10049b7c:	6030      	str	r0, [r6, #0]
10049b7e:	2700      	movs	r7, #0
10049b80:	7007      	strb	r7, [r0, #0]
10049b82:	6830      	ldr	r0, [r6, #0]
10049b84:	7047      	strb	r7, [r0, #1]
10049b86:	6830      	ldr	r0, [r6, #0]
10049b88:	7087      	strb	r7, [r0, #2]
10049b8a:	6830      	ldr	r0, [r6, #0]
10049b8c:	21e1      	movs	r1, #225	@ 0xe1
10049b8e:	70c1      	strb	r1, [r0, #3]
10049b90:	2005      	movs	r0, #5
10049b92:	01c0      	lsls	r0, r0, #7
10049b94:	6831      	ldr	r1, [r6, #0]
10049b96:	8088      	strh	r0, [r1, #4]
10049b98:	2030      	movs	r0, #48	@ 0x30
10049b9a:	8508      	strh	r0, [r1, #40]	@ 0x28
10049b9c:	ad0e      	add	r5, sp, #56	@ 0x38
10049b9e:	a90d      	add	r1, sp, #52	@ 0x34
10049ba0:	aa0c      	add	r2, sp, #48	@ 0x30
10049ba2:	4628      	mov	r0, r5
10049ba4:	f7f8 f822 	bl	10041bec <BLEPLAT_GetPartInfo>
10049ba8:	980c      	ldr	r0, [sp, #48]	@ 0x30
10049baa:	0200      	lsls	r0, r0, #8
10049bac:	7829      	ldrb	r1, [r5, #0]
10049bae:	0109      	lsls	r1, r1, #4
10049bb0:	4301      	orrs	r1, r0
10049bb2:	980d      	ldr	r0, [sp, #52]	@ 0x34
10049bb4:	0300      	lsls	r0, r0, #12
10049bb6:	4308      	orrs	r0, r1
10049bb8:	1d00      	adds	r0, r0, #4
10049bba:	6831      	ldr	r1, [r6, #0]
10049bbc:	8548      	strh	r0, [r1, #42]	@ 0x2a
10049bbe:	2118      	movs	r1, #24
10049bc0:	4620      	mov	r0, r4
10049bc2:	f003 f819 	bl	1004cbf8 <csmem_mem_0_assign>
10049bc6:	4920      	ldr	r1, [pc, #128]	@ (10049c48 <__arm_cp.1_2>)
10049bc8:	6008      	str	r0, [r1, #0]
10049bca:	7507      	strb	r7, [r0, #20]
10049bcc:	f003 fade 	bl	1004d18c <tsk_init>
10049bd0:	981c      	ldr	r0, [sp, #112]	@ 0x70
10049bd2:	9006      	str	r0, [sp, #24]
10049bd4:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
10049bd6:	9405      	str	r4, [sp, #20]
10049bd8:	981a      	ldr	r0, [sp, #104]	@ 0x68
10049bda:	9004      	str	r0, [sp, #16]
10049bdc:	9819      	ldr	r0, [sp, #100]	@ 0x64
10049bde:	9003      	str	r0, [sp, #12]
10049be0:	9818      	ldr	r0, [sp, #96]	@ 0x60
10049be2:	9002      	str	r0, [sp, #8]
10049be4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10049be6:	9001      	str	r0, [sp, #4]
10049be8:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10049bea:	9500      	str	r5, [sp, #0]
10049bec:	9808      	ldr	r0, [sp, #32]
10049bee:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049bf0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10049bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10049bf4:	f002 fb78 	bl	1004c2e8 <LL_init_ucfg_weak>
10049bf8:	f002 ffe4 	bl	1004cbc4 <MBM_init_ucfg_weak>
10049bfc:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
10049bfe:	2c01      	cmp	r4, #1
10049c00:	d101      	bne.n	10049c06 <BlueNRG_Stack_Initialize_Layers+0xae>
10049c02:	f7ff ffa3 	bl	10049b4c <ACL_pkt_init_ucfg_weak>
10049c06:	f000 f989 	bl	10049f1c <Events_Process_init>
10049c0a:	2f01      	cmp	r7, #1
10049c0c:	d101      	bne.n	10049c12 <BlueNRG_Stack_Initialize_Layers+0xba>
10049c0e:	f000 f8bb 	bl	10049d88 <log_init_ucfg_weak>
10049c12:	6830      	ldr	r0, [r6, #0]
10049c14:	212c      	movs	r1, #44	@ 0x2c
10049c16:	5c40      	ldrb	r0, [r0, r1]
10049c18:	07c0      	lsls	r0, r0, #31
10049c1a:	d10e      	bne.n	10049c3a <BlueNRG_Stack_Initialize_Layers+0xe2>
10049c1c:	2c01      	cmp	r4, #1
10049c1e:	d106      	bne.n	10049c2e <BlueNRG_Stack_Initialize_Layers+0xd6>
10049c20:	9816      	ldr	r0, [sp, #88]	@ 0x58
10049c22:	f000 ffab 	bl	1004ab7c <L2C_init_ucfg_weak>
10049c26:	f003 fa93 	bl	1004d150 <smp_init_ucfg_weak>
10049c2a:	f000 fea6 	bl	1004a97a <GAT_att_cmn_init_ucfg_weak>
10049c2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10049c30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10049c32:	462a      	mov	r2, r5
10049c34:	4623      	mov	r3, r4
10049c36:	f000 fb17 	bl	1004a268 <GAP_init_context>
10049c3a:	b00f      	add	sp, #60	@ 0x3c
10049c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049c3e:	46c0      	nop			@ (mov r8, r8)

10049c40 <__arm_cp.1_0>:
10049c40:	200006d8 	.word	0x200006d8

10049c44 <__arm_cp.1_1>:
10049c44:	200006b8 	.word	0x200006b8

10049c48 <__arm_cp.1_2>:
10049c48:	2000070c 	.word	0x2000070c

10049c4c <_BlueNRG_Stack_Initialization>:
10049c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10049c4e:	b095      	sub	sp, #84	@ 0x54
10049c50:	2001      	movs	r0, #1
10049c52:	0481      	lsls	r1, r0, #18
10049c54:	9114      	str	r1, [sp, #80]	@ 0x50
10049c56:	482e      	ldr	r0, [pc, #184]	@ (10049d10 <__arm_cp.2_0>)
10049c58:	6001      	str	r1, [r0, #0]
10049c5a:	f3bf 8f4f 	dsb	sy
10049c5e:	f3bf 8f6f 	isb	sy
10049c62:	f7f8 fcad 	bl	100425c0 <BLEPLAT_CNTR_GlobDisableBlue>
10049c66:	f7f8 f865 	bl	10041d34 <BLEPLAT_ClearRadioTimerValue>
10049c6a:	2000      	movs	r0, #0
10049c6c:	9012      	str	r0, [sp, #72]	@ 0x48
10049c6e:	43c0      	mvns	r0, r0
10049c70:	f7f8 fc92 	bl	10042598 <BLEPLAT_CNTR_ClearInterrupt>
10049c74:	f7ff fbcd 	bl	10049412 <data_length_extension_csr_ucfg>
10049c78:	9013      	str	r0, [sp, #76]	@ 0x4c
10049c7a:	f7ff fbd2 	bl	10049422 <phy_upd_csr_ucfg>
10049c7e:	9011      	str	r0, [sp, #68]	@ 0x44
10049c80:	f002 fa82 	bl	1004c188 <ext_adv_scan_enabled_ucfg_weak>
10049c84:	9010      	str	r0, [sp, #64]	@ 0x40
10049c86:	f001 f995 	bl	1004afb4 <llc_priv_controller_privacy_csr_ucfg_weak>
10049c8a:	900f      	str	r0, [sp, #60]	@ 0x3c
10049c8c:	f003 fa61 	bl	1004d152 <secure_connections_csr_ucfg_weak>
10049c90:	f000 ff6d 	bl	1004ab6e <scan_csr_ucfg_weak>
10049c94:	900e      	str	r0, [sp, #56]	@ 0x38
10049c96:	f000 ff6e 	bl	1004ab76 <l2c_cos_csr_ucfg_weak>
10049c9a:	900d      	str	r0, [sp, #52]	@ 0x34
10049c9c:	f001 f982 	bl	1004afa4 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10049ca0:	900c      	str	r0, [sp, #48]	@ 0x30
10049ca2:	f001 f981 	bl	1004afa8 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10049ca6:	900b      	str	r0, [sp, #44]	@ 0x2c
10049ca8:	f000 ff57 	bl	1004ab5a <cte_csr_ucfg_weak>
10049cac:	4604      	mov	r4, r0
10049cae:	f000 ff5a 	bl	1004ab66 <pcl_csr_ucfg_weak>
10049cb2:	4605      	mov	r5, r0
10049cb4:	f000 ff5d 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
10049cb8:	4606      	mov	r6, r0
10049cba:	f000 fed5 	bl	1004aa68 <chc_csr_ucfg_weak>
10049cbe:	4607      	mov	r7, r0
10049cc0:	f000 f864 	bl	10049d8c <log_csr_ucfg_weak>
10049cc4:	b2c0      	uxtb	r0, r0
10049cc6:	b2f9      	uxtb	r1, r7
10049cc8:	9108      	str	r1, [sp, #32]
10049cca:	9009      	str	r0, [sp, #36]	@ 0x24
10049ccc:	b2f0      	uxtb	r0, r6
10049cce:	b2e9      	uxtb	r1, r5
10049cd0:	b2e2      	uxtb	r2, r4
10049cd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10049cd4:	b2db      	uxtb	r3, r3
10049cd6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10049cd8:	b2e4      	uxtb	r4, r4
10049cda:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10049cdc:	b2ed      	uxtb	r5, r5
10049cde:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10049ce0:	b2f6      	uxtb	r6, r6
10049ce2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
10049ce4:	9700      	str	r7, [sp, #0]
10049ce6:	9601      	str	r6, [sp, #4]
10049ce8:	9502      	str	r5, [sp, #8]
10049cea:	9403      	str	r4, [sp, #12]
10049cec:	9304      	str	r3, [sp, #16]
10049cee:	9205      	str	r2, [sp, #20]
10049cf0:	9106      	str	r1, [sp, #24]
10049cf2:	9007      	str	r0, [sp, #28]
10049cf4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10049cf6:	b2c0      	uxtb	r0, r0
10049cf8:	9911      	ldr	r1, [sp, #68]	@ 0x44
10049cfa:	b2c9      	uxtb	r1, r1
10049cfc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10049cfe:	b2d3      	uxtb	r3, r2
10049d00:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10049d02:	f7ff ff29 	bl	10049b58 <BlueNRG_Stack_Initialize_Layers>
10049d06:	4803      	ldr	r0, [pc, #12]	@ (10049d14 <__arm_cp.2_1>)
10049d08:	9914      	ldr	r1, [sp, #80]	@ 0x50
10049d0a:	6001      	str	r1, [r0, #0]
10049d0c:	b015      	add	sp, #84	@ 0x54
10049d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10049d10 <__arm_cp.2_0>:
10049d10:	e000e180 	.word	0xe000e180

10049d14 <__arm_cp.2_1>:
10049d14:	e000e100 	.word	0xe000e100

10049d18 <BLE_STACK_Init>:
10049d18:	b5b0      	push	{r4, r5, r7, lr}
10049d1a:	4605      	mov	r5, r0
10049d1c:	7ac0      	ldrb	r0, [r0, #11]
10049d1e:	2412      	movs	r4, #18
10049d20:	2880      	cmp	r0, #128	@ 0x80
10049d22:	d829      	bhi.n	10049d78 <BLE_STACK_Init+0x60>
10049d24:	8c29      	ldrh	r1, [r5, #32]
10049d26:	2917      	cmp	r1, #23
10049d28:	d326      	bcc.n	10049d78 <BLE_STACK_Init+0x60>
10049d2a:	4814      	ldr	r0, [pc, #80]	@ (10049d7c <__arm_cp.3_0>)
10049d2c:	1d82      	adds	r2, r0, #6
10049d2e:	4291      	cmp	r1, r2
10049d30:	d822      	bhi.n	10049d78 <BLE_STACK_Init+0x60>
10049d32:	8a29      	ldrh	r1, [r5, #16]
10049d34:	2917      	cmp	r1, #23
10049d36:	d31f      	bcc.n	10049d78 <BLE_STACK_Init+0x60>
10049d38:	4281      	cmp	r1, r0
10049d3a:	d81d      	bhi.n	10049d78 <BLE_STACK_Init+0x60>
10049d3c:	7ea8      	ldrb	r0, [r5, #26]
10049d3e:	2800      	cmp	r0, #0
10049d40:	d01a      	beq.n	10049d78 <BLE_STACK_Init+0x60>
10049d42:	f001 f931 	bl	1004afa8 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10049d46:	2800      	cmp	r0, #0
10049d48:	d008      	beq.n	10049d5c <BLE_STACK_Init+0x44>
10049d4a:	7ee8      	ldrb	r0, [r5, #27]
10049d4c:	2800      	cmp	r0, #0
10049d4e:	d013      	beq.n	10049d78 <BLE_STACK_Init+0x60>
10049d50:	2880      	cmp	r0, #128	@ 0x80
10049d52:	d811      	bhi.n	10049d78 <BLE_STACK_Init+0x60>
10049d54:	7f28      	ldrb	r0, [r5, #28]
10049d56:	1e40      	subs	r0, r0, #1
10049d58:	280e      	cmp	r0, #14
10049d5a:	d80d      	bhi.n	10049d78 <BLE_STACK_Init+0x60>
10049d5c:	4808      	ldr	r0, [pc, #32]	@ (10049d80 <__arm_cp.3_1>)
10049d5e:	2234      	movs	r2, #52	@ 0x34
10049d60:	4629      	mov	r1, r5
10049d62:	f7f7 ff23 	bl	10041bac <BLEPLAT_MemCpy>
10049d66:	f002 ff51 	bl	1004cc0c <BlueNRG_Stack_Initialize_RAM_check>
10049d6a:	2800      	cmp	r0, #0
10049d6c:	d403      	bmi.n	10049d76 <BLE_STACK_Init+0x5e>
10049d6e:	f7ff ff6d 	bl	10049c4c <_BlueNRG_Stack_Initialization>
10049d72:	2400      	movs	r4, #0
10049d74:	e000      	b.n	10049d78 <BLE_STACK_Init+0x60>
10049d76:	2487      	movs	r4, #135	@ 0x87
10049d78:	4620      	mov	r0, r4
10049d7a:	bdb0      	pop	{r4, r5, r7, pc}

10049d7c <__arm_cp.3_0>:
10049d7c:	000003fa 	.word	0x000003fa

10049d80 <__arm_cp.3_1>:
10049d80:	200006d8 	.word	0x200006d8

10049d84 <log_verbosity_set_ucfg_weak>:
10049d84:	2000      	movs	r0, #0
10049d86:	4770      	bx	lr

10049d88 <log_init_ucfg_weak>:
10049d88:	4770      	bx	lr

10049d8a <log_notify_us_flush_ucfg_weak>:
10049d8a:	4770      	bx	lr

10049d8c <log_csr_ucfg_weak>:
10049d8c:	2000      	movs	r0, #0
10049d8e:	4770      	bx	lr

10049d90 <aci_event_fifo_push_header>:
10049d90:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10049d92:	4615      	mov	r5, r2
10049d94:	460c      	mov	r4, r1
10049d96:	4606      	mov	r6, r0
10049d98:	0608      	lsls	r0, r1, #24
10049d9a:	d414      	bmi.n	10049dc6 <aci_event_fifo_push_header+0x36>
10049d9c:	aa02      	add	r2, sp, #8
10049d9e:	af01      	add	r7, sp, #4
10049da0:	4630      	mov	r0, r6
10049da2:	4619      	mov	r1, r3
10049da4:	463b      	mov	r3, r7
10049da6:	f000 f853 	bl	10049e50 <fifoBuf_getFreeHeader>
10049daa:	2800      	cmp	r0, #0
10049dac:	d021      	beq.n	10049df2 <aci_event_fifo_push_header+0x62>
10049dae:	0660      	lsls	r0, r4, #25
10049db0:	d438      	bmi.n	10049e24 <aci_event_fifo_push_header+0x94>
10049db2:	9802      	ldr	r0, [sp, #8]
10049db4:	7881      	ldrb	r1, [r0, #2]
10049db6:	22fc      	movs	r2, #252	@ 0xfc
10049db8:	400a      	ands	r2, r1
10049dba:	7082      	strb	r2, [r0, #2]
10049dbc:	9901      	ldr	r1, [sp, #4]
10049dbe:	8001      	strh	r1, [r0, #0]
10049dc0:	8071      	strh	r1, [r6, #2]
10049dc2:	2701      	movs	r7, #1
10049dc4:	e02f      	b.n	10049e26 <aci_event_fifo_push_header+0x96>
10049dc6:	f3ef 8010 	mrs	r0, PRIMASK
10049dca:	b672      	cpsid	i
10049dcc:	aa02      	add	r2, sp, #8
10049dce:	af01      	add	r7, sp, #4
10049dd0:	4630      	mov	r0, r6
10049dd2:	4619      	mov	r1, r3
10049dd4:	463b      	mov	r3, r7
10049dd6:	f000 f83b 	bl	10049e50 <fifoBuf_getFreeHeader>
10049dda:	2800      	cmp	r0, #0
10049ddc:	d00b      	beq.n	10049df6 <aci_event_fifo_push_header+0x66>
10049dde:	9902      	ldr	r1, [sp, #8]
10049de0:	788a      	ldrb	r2, [r1, #2]
10049de2:	23fc      	movs	r3, #252	@ 0xfc
10049de4:	4013      	ands	r3, r2
10049de6:	708b      	strb	r3, [r1, #2]
10049de8:	9a01      	ldr	r2, [sp, #4]
10049dea:	800a      	strh	r2, [r1, #0]
10049dec:	8072      	strh	r2, [r6, #2]
10049dee:	2701      	movs	r7, #1
10049df0:	e002      	b.n	10049df8 <aci_event_fifo_push_header+0x68>
10049df2:	2700      	movs	r7, #0
10049df4:	e003      	b.n	10049dfe <aci_event_fifo_push_header+0x6e>
10049df6:	2700      	movs	r7, #0
10049df8:	b662      	cpsie	i
10049dfa:	2800      	cmp	r0, #0
10049dfc:	d113      	bne.n	10049e26 <aci_event_fifo_push_header+0x96>
10049dfe:	f3ef 8010 	mrs	r0, PRIMASK
10049e02:	b672      	cpsid	i
10049e04:	06a0      	lsls	r0, r4, #26
10049e06:	d40a      	bmi.n	10049e1e <aci_event_fifo_push_header+0x8e>
10049e08:	4810      	ldr	r0, [pc, #64]	@ (10049e4c <__arm_cp.0_0>)
10049e0a:	6800      	ldr	r0, [r0, #0]
10049e0c:	6801      	ldr	r1, [r0, #0]
10049e0e:	2208      	movs	r2, #8
10049e10:	430a      	orrs	r2, r1
10049e12:	6002      	str	r2, [r0, #0]
10049e14:	2000      	movs	r0, #0
10049e16:	f003 f9f7 	bl	1004d208 <tsk_notify_idx>
10049e1a:	f7f7 fcf0 	bl	100417fe <BLE_STACK_ProcessRequest>
10049e1e:	b662      	cpsie	i
10049e20:	2600      	movs	r6, #0
10049e22:	e00a      	b.n	10049e3a <aci_event_fifo_push_header+0xaa>
10049e24:	2700      	movs	r7, #0
10049e26:	9e02      	ldr	r6, [sp, #8]
10049e28:	70f5      	strb	r5, [r6, #3]
10049e2a:	00a0      	lsls	r0, r4, #2
10049e2c:	2160      	movs	r1, #96	@ 0x60
10049e2e:	4001      	ands	r1, r0
10049e30:	78b0      	ldrb	r0, [r6, #2]
10049e32:	2203      	movs	r2, #3
10049e34:	4002      	ands	r2, r0
10049e36:	1850      	adds	r0, r2, r1
10049e38:	70b0      	strb	r0, [r6, #2]
10049e3a:	2f00      	cmp	r7, #0
10049e3c:	d004      	beq.n	10049e48 <aci_event_fifo_push_header+0xb8>
10049e3e:	2000      	movs	r0, #0
10049e40:	f003 f9e2 	bl	1004d208 <tsk_notify_idx>
10049e44:	f7f7 fcdb 	bl	100417fe <BLE_STACK_ProcessRequest>
10049e48:	4630      	mov	r0, r6
10049e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10049e4c <__arm_cp.0_0>:
10049e4c:	200006bc 	.word	0x200006bc

10049e50 <fifoBuf_getFreeHeader>:
10049e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10049e52:	9200      	str	r2, [sp, #0]
10049e54:	8845      	ldrh	r5, [r0, #2]
10049e56:	08ac      	lsrs	r4, r5, #2
10049e58:	801c      	strh	r4, [r3, #0]
10049e5a:	1c49      	adds	r1, r1, #1
10049e5c:	b28a      	uxth	r2, r1
10049e5e:	18a6      	adds	r6, r4, r2
10049e60:	8887      	ldrh	r7, [r0, #4]
10049e62:	42be      	cmp	r6, r7
10049e64:	d900      	bls.n	10049e68 <fifoBuf_getFreeHeader+0x18>
10049e66:	1b09      	subs	r1, r1, r4
10049e68:	190a      	adds	r2, r1, r4
10049e6a:	0092      	lsls	r2, r2, #2
10049e6c:	42be      	cmp	r6, r7
10049e6e:	d900      	bls.n	10049e72 <fifoBuf_getFreeHeader+0x22>
10049e70:	1c6d      	adds	r5, r5, #1
10049e72:	2603      	movs	r6, #3
10049e74:	4035      	ands	r5, r6
10049e76:	1952      	adds	r2, r2, r5
10049e78:	801a      	strh	r2, [r3, #0]
10049e7a:	00a3      	lsls	r3, r4, #2
10049e7c:	181b      	adds	r3, r3, r0
10049e7e:	3308      	adds	r3, #8
10049e80:	9c00      	ldr	r4, [sp, #0]
10049e82:	6023      	str	r3, [r4, #0]
10049e84:	b292      	uxth	r2, r2
10049e86:	8805      	ldrh	r5, [r0, #0]
10049e88:	1b52      	subs	r2, r2, r5
10049e8a:	4617      	mov	r7, r2
10049e8c:	4037      	ands	r7, r6
10049e8e:	8884      	ldrh	r4, [r0, #4]
10049e90:	4367      	muls	r7, r4
10049e92:	4035      	ands	r5, r6
10049e94:	1952      	adds	r2, r2, r5
10049e96:	0892      	lsrs	r2, r2, #2
10049e98:	19d2      	adds	r2, r2, r7
10049e9a:	b295      	uxth	r5, r2
10049e9c:	88c6      	ldrh	r6, [r0, #6]
10049e9e:	42b5      	cmp	r5, r6
10049ea0:	d900      	bls.n	10049ea4 <fifoBuf_getFreeHeader+0x54>
10049ea2:	80c2      	strh	r2, [r0, #6]
10049ea4:	42a5      	cmp	r5, r4
10049ea6:	d80a      	bhi.n	10049ebe <fifoBuf_getFreeHeader+0x6e>
10049ea8:	b209      	sxth	r1, r1
10049eaa:	2900      	cmp	r1, #0
10049eac:	d507      	bpl.n	10049ebe <fifoBuf_getFreeHeader+0x6e>
10049eae:	7899      	ldrb	r1, [r3, #2]
10049eb0:	22fc      	movs	r2, #252	@ 0xfc
10049eb2:	400a      	ands	r2, r1
10049eb4:	1c51      	adds	r1, r2, #1
10049eb6:	7099      	strb	r1, [r3, #2]
10049eb8:	3008      	adds	r0, #8
10049eba:	9900      	ldr	r1, [sp, #0]
10049ebc:	6008      	str	r0, [r1, #0]
10049ebe:	42a5      	cmp	r5, r4
10049ec0:	d901      	bls.n	10049ec6 <fifoBuf_getFreeHeader+0x76>
10049ec2:	2000      	movs	r0, #0
10049ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10049ec6:	2001      	movs	r0, #1
10049ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10049eca <aci_event_fifo_push>:
10049eca:	b580      	push	{r7, lr}
10049ecc:	0640      	lsls	r0, r0, #25
10049ece:	d405      	bmi.n	10049edc <aci_event_fifo_push+0x12>
10049ed0:	7888      	ldrb	r0, [r1, #2]
10049ed2:	22fc      	movs	r2, #252	@ 0xfc
10049ed4:	4002      	ands	r2, r0
10049ed6:	1c90      	adds	r0, r2, #2
10049ed8:	7088      	strb	r0, [r1, #2]
10049eda:	bd80      	pop	{r7, pc}
10049edc:	4608      	mov	r0, r1
10049ede:	f000 f801 	bl	10049ee4 <event_notify_cb>
10049ee2:	bd80      	pop	{r7, pc}

10049ee4 <event_notify_cb>:
10049ee4:	b580      	push	{r7, lr}
10049ee6:	1d01      	adds	r1, r0, #4
10049ee8:	78c2      	ldrb	r2, [r0, #3]
10049eea:	2a14      	cmp	r2, #20
10049eec:	d804      	bhi.n	10049ef8 <event_notify_cb+0x14>
10049eee:	6842      	ldr	r2, [r0, #4]
10049ef0:	7880      	ldrb	r0, [r0, #2]
10049ef2:	0880      	lsrs	r0, r0, #2
10049ef4:	4790      	blx	r2
10049ef6:	bd80      	pop	{r7, pc}
10049ef8:	2a3d      	cmp	r2, #61	@ 0x3d
10049efa:	d803      	bhi.n	10049f04 <event_notify_cb+0x20>
10049efc:	2000      	movs	r0, #0
10049efe:	f000 f8e9 	bl	1004a0d4 <hci_event_notify_cb>
10049f02:	bd80      	pop	{r7, pc}
10049f04:	2a3f      	cmp	r2, #63	@ 0x3f
10049f06:	d803      	bhi.n	10049f10 <event_notify_cb+0x2c>
10049f08:	2000      	movs	r0, #0
10049f0a:	f000 f8f5 	bl	1004a0f8 <hci_rx_data_notify_cb>
10049f0e:	bd80      	pop	{r7, pc}
10049f10:	2a60      	cmp	r2, #96	@ 0x60
10049f12:	d802      	bhi.n	10049f1a <event_notify_cb+0x36>
10049f14:	2000      	movs	r0, #0
10049f16:	f000 f8e4 	bl	1004a0e2 <hci_aci_event_notify_cb>
10049f1a:	bd80      	pop	{r7, pc}

10049f1c <Events_Process_init>:
10049f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10049f1e:	2001      	movs	r0, #1
10049f20:	211c      	movs	r1, #28
10049f22:	4a29      	ldr	r2, [pc, #164]	@ (10049fc8 <__arm_cp.7_0>)
10049f24:	4790      	blx	r2
10049f26:	4f29      	ldr	r7, [pc, #164]	@ (10049fcc <__arm_cp.7_1>)
10049f28:	6038      	str	r0, [r7, #0]
10049f2a:	4d29      	ldr	r5, [pc, #164]	@ (10049fd0 <__arm_cp.7_2>)
10049f2c:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
10049f2e:	1e40      	subs	r0, r0, #1
10049f30:	2603      	movs	r6, #3
10049f32:	4330      	orrs	r0, r6
10049f34:	1c40      	adds	r0, r0, #1
10049f36:	0880      	lsrs	r0, r0, #2
10049f38:	1cc0      	adds	r0, r0, #3
10049f3a:	2404      	movs	r4, #4
10049f3c:	4621      	mov	r1, r4
10049f3e:	4a22      	ldr	r2, [pc, #136]	@ (10049fc8 <__arm_cp.7_0>)
10049f40:	4790      	blx	r2
10049f42:	6839      	ldr	r1, [r7, #0]
10049f44:	6048      	str	r0, [r1, #4]
10049f46:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
10049f48:	1e40      	subs	r0, r0, #1
10049f4a:	4330      	orrs	r0, r6
10049f4c:	1c40      	adds	r0, r0, #1
10049f4e:	0880      	lsrs	r0, r0, #2
10049f50:	1cc0      	adds	r0, r0, #3
10049f52:	4621      	mov	r1, r4
10049f54:	4d1c      	ldr	r5, [pc, #112]	@ (10049fc8 <__arm_cp.7_0>)
10049f56:	47a8      	blx	r5
10049f58:	462a      	mov	r2, r5
10049f5a:	6839      	ldr	r1, [r7, #0]
10049f5c:	6088      	str	r0, [r1, #8]
10049f5e:	4d1c      	ldr	r5, [pc, #112]	@ (10049fd0 <__arm_cp.7_2>)
10049f60:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
10049f62:	1e40      	subs	r0, r0, #1
10049f64:	4330      	orrs	r0, r6
10049f66:	1c40      	adds	r0, r0, #1
10049f68:	0880      	lsrs	r0, r0, #2
10049f6a:	1cc0      	adds	r0, r0, #3
10049f6c:	4621      	mov	r1, r4
10049f6e:	4790      	blx	r2
10049f70:	6839      	ldr	r1, [r7, #0]
10049f72:	60c8      	str	r0, [r1, #12]
10049f74:	f7ff fdb0 	bl	10049ad8 <hal_radio_activity_state_init>
10049f78:	6838      	ldr	r0, [r7, #0]
10049f7a:	6842      	ldr	r2, [r0, #4]
10049f7c:	2100      	movs	r1, #0
10049f7e:	8011      	strh	r1, [r2, #0]
10049f80:	8051      	strh	r1, [r2, #2]
10049f82:	6883      	ldr	r3, [r0, #8]
10049f84:	8019      	strh	r1, [r3, #0]
10049f86:	80d1      	strh	r1, [r2, #6]
10049f88:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
10049f8a:	1e7f      	subs	r7, r7, #1
10049f8c:	4337      	orrs	r7, r6
10049f8e:	1c7f      	adds	r7, r7, #1
10049f90:	08bf      	lsrs	r7, r7, #2
10049f92:	8097      	strh	r7, [r2, #4]
10049f94:	8059      	strh	r1, [r3, #2]
10049f96:	80d9      	strh	r1, [r3, #6]
10049f98:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
10049f9a:	1e7f      	subs	r7, r7, #1
10049f9c:	4337      	orrs	r7, r6
10049f9e:	1c7f      	adds	r7, r7, #1
10049fa0:	08bf      	lsrs	r7, r7, #2
10049fa2:	809f      	strh	r7, [r3, #4]
10049fa4:	68c7      	ldr	r7, [r0, #12]
10049fa6:	8039      	strh	r1, [r7, #0]
10049fa8:	6102      	str	r2, [r0, #16]
10049faa:	6143      	str	r3, [r0, #20]
10049fac:	80f9      	strh	r1, [r7, #6]
10049fae:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
10049fb0:	1e52      	subs	r2, r2, #1
10049fb2:	4332      	orrs	r2, r6
10049fb4:	1c52      	adds	r2, r2, #1
10049fb6:	0892      	lsrs	r2, r2, #2
10049fb8:	80ba      	strh	r2, [r7, #4]
10049fba:	8079      	strh	r1, [r7, #2]
10049fbc:	6187      	str	r7, [r0, #24]
10049fbe:	4622      	mov	r2, r4
10049fc0:	f7f7 fe04 	bl	10041bcc <BLEPLAT_MemSet>
10049fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10049fc6:	46c0      	nop			@ (mov r8, r8)

10049fc8 <__arm_cp.7_0>:
10049fc8:	1004cbf9 	.word	0x1004cbf9

10049fcc <__arm_cp.7_1>:
10049fcc:	200006bc 	.word	0x200006bc

10049fd0 <__arm_cp.7_2>:
10049fd0:	200006d8 	.word	0x200006d8

10049fd4 <Events_Process_Q>:
10049fd4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10049fd6:	4d3d      	ldr	r5, [pc, #244]	@ (1004a0cc <__arm_cp.8_0>)
10049fd8:	6828      	ldr	r0, [r5, #0]
10049fda:	3010      	adds	r0, #16
10049fdc:	2100      	movs	r1, #0
10049fde:	2906      	cmp	r1, #6
10049fe0:	d005      	beq.n	10049fee <Events_Process_Q+0x1a>
10049fe2:	c804      	ldmia	r0!, {r2}
10049fe4:	8852      	ldrh	r2, [r2, #2]
10049fe6:	ab01      	add	r3, sp, #4
10049fe8:	525a      	strh	r2, [r3, r1]
10049fea:	1c89      	adds	r1, r1, #2
10049fec:	e7f7      	b.n	10049fde <Events_Process_Q+0xa>
10049fee:	f3ef 8010 	mrs	r0, PRIMASK
10049ff2:	b672      	cpsid	i
10049ff4:	6828      	ldr	r0, [r5, #0]
10049ff6:	6804      	ldr	r4, [r0, #0]
10049ff8:	2700      	movs	r7, #0
10049ffa:	6007      	str	r7, [r0, #0]
10049ffc:	b662      	cpsie	i
10049ffe:	07e0      	lsls	r0, r4, #31
1004a000:	d002      	beq.n	1004a008 <Events_Process_Q+0x34>
1004a002:	2000      	movs	r0, #0
1004a004:	f000 f89f 	bl	1004a146 <hci_hardware_error_event_cb>
1004a008:	07a0      	lsls	r0, r4, #30
1004a00a:	d502      	bpl.n	1004a012 <Events_Process_Q+0x3e>
1004a00c:	2001      	movs	r0, #1
1004a00e:	f000 f89a 	bl	1004a146 <hci_hardware_error_event_cb>
1004a012:	0760      	lsls	r0, r4, #29
1004a014:	d502      	bpl.n	1004a01c <Events_Process_Q+0x48>
1004a016:	2002      	movs	r0, #2
1004a018:	f000 f895 	bl	1004a146 <hci_hardware_error_event_cb>
1004a01c:	0720      	lsls	r0, r4, #28
1004a01e:	d502      	bpl.n	1004a026 <Events_Process_Q+0x52>
1004a020:	2003      	movs	r0, #3
1004a022:	f000 f890 	bl	1004a146 <hci_hardware_error_event_cb>
1004a026:	06e0      	lsls	r0, r4, #27
1004a028:	d54a      	bpl.n	1004a0c0 <Events_Process_Q+0xec>
1004a02a:	2004      	movs	r0, #4
1004a02c:	f000 f88b 	bl	1004a146 <hci_hardware_error_event_cb>
1004a030:	e046      	b.n	1004a0c0 <Events_Process_Q+0xec>
1004a032:	0078      	lsls	r0, r7, #1
1004a034:	a901      	add	r1, sp, #4
1004a036:	5a0e      	ldrh	r6, [r1, r0]
1004a038:	9700      	str	r7, [sp, #0]
1004a03a:	00bf      	lsls	r7, r7, #2
1004a03c:	6828      	ldr	r0, [r5, #0]
1004a03e:	19c0      	adds	r0, r0, r7
1004a040:	6900      	ldr	r0, [r0, #16]
1004a042:	8801      	ldrh	r1, [r0, #0]
1004a044:	8802      	ldrh	r2, [r0, #0]
1004a046:	42b2      	cmp	r2, r6
1004a048:	d02a      	beq.n	1004a0a0 <Events_Process_Q+0xcc>
1004a04a:	0889      	lsrs	r1, r1, #2
1004a04c:	1c89      	adds	r1, r1, #2
1004a04e:	0089      	lsls	r1, r1, #2
1004a050:	1844      	adds	r4, r0, r1
1004a052:	78a1      	ldrb	r1, [r4, #2]
1004a054:	2203      	movs	r2, #3
1004a056:	400a      	ands	r2, r1
1004a058:	2a01      	cmp	r2, #1
1004a05a:	d002      	beq.n	1004a062 <Events_Process_Q+0x8e>
1004a05c:	2a00      	cmp	r2, #0
1004a05e:	d103      	bne.n	1004a068 <Events_Process_Q+0x94>
1004a060:	e01e      	b.n	1004a0a0 <Events_Process_Q+0xcc>
1004a062:	7a81      	ldrb	r1, [r0, #10]
1004a064:	3008      	adds	r0, #8
1004a066:	4604      	mov	r4, r0
1004a068:	0648      	lsls	r0, r1, #25
1004a06a:	d403      	bmi.n	1004a074 <Events_Process_Q+0xa0>
1004a06c:	4620      	mov	r0, r4
1004a06e:	f7ff ff39 	bl	10049ee4 <event_notify_cb>
1004a072:	e00a      	b.n	1004a08a <Events_Process_Q+0xb6>
1004a074:	78e0      	ldrb	r0, [r4, #3]
1004a076:	2813      	cmp	r0, #19
1004a078:	d207      	bcs.n	1004a08a <Events_Process_Q+0xb6>
1004a07a:	0080      	lsls	r0, r0, #2
1004a07c:	4914      	ldr	r1, [pc, #80]	@ (1004a0d0 <__arm_cp.8_1>)
1004a07e:	580a      	ldr	r2, [r1, r0]
1004a080:	1d21      	adds	r1, r4, #4
1004a082:	4620      	mov	r0, r4
1004a084:	4790      	blx	r2
1004a086:	2800      	cmp	r0, #0
1004a088:	d105      	bne.n	1004a096 <Events_Process_Q+0xc2>
1004a08a:	6828      	ldr	r0, [r5, #0]
1004a08c:	19c0      	adds	r0, r0, r7
1004a08e:	6900      	ldr	r0, [r0, #16]
1004a090:	8821      	ldrh	r1, [r4, #0]
1004a092:	8001      	strh	r1, [r0, #0]
1004a094:	e7d5      	b.n	1004a042 <Events_Process_Q+0x6e>
1004a096:	2000      	movs	r0, #0
1004a098:	f003 f8b6 	bl	1004d208 <tsk_notify_idx>
1004a09c:	f7f7 fbaf 	bl	100417fe <BLE_STACK_ProcessRequest>
1004a0a0:	f3ef 8010 	mrs	r0, PRIMASK
1004a0a4:	b672      	cpsid	i
1004a0a6:	6828      	ldr	r0, [r5, #0]
1004a0a8:	19c0      	adds	r0, r0, r7
1004a0aa:	6900      	ldr	r0, [r0, #16]
1004a0ac:	8841      	ldrh	r1, [r0, #2]
1004a0ae:	8802      	ldrh	r2, [r0, #0]
1004a0b0:	4291      	cmp	r1, r2
1004a0b2:	d102      	bne.n	1004a0ba <Events_Process_Q+0xe6>
1004a0b4:	2100      	movs	r1, #0
1004a0b6:	8001      	strh	r1, [r0, #0]
1004a0b8:	8041      	strh	r1, [r0, #2]
1004a0ba:	b662      	cpsie	i
1004a0bc:	9f00      	ldr	r7, [sp, #0]
1004a0be:	1c7f      	adds	r7, r7, #1
1004a0c0:	2f03      	cmp	r7, #3
1004a0c2:	d1b6      	bne.n	1004a032 <Events_Process_Q+0x5e>
1004a0c4:	f7ff fd12 	bl	10049aec <hal_radio_activity_state_cb_check>
1004a0c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004a0ca:	46c0      	nop			@ (mov r8, r8)

1004a0cc <__arm_cp.8_0>:
1004a0cc:	200006bc 	.word	0x200006bc

1004a0d0 <__arm_cp.8_1>:
1004a0d0:	1004ef28 	.word	0x1004ef28

1004a0d4 <hci_event_notify_cb>:
1004a0d4:	b580      	push	{r7, lr}
1004a0d6:	4608      	mov	r0, r1
1004a0d8:	7889      	ldrb	r1, [r1, #2]
1004a0da:	1cc9      	adds	r1, r1, #3
1004a0dc:	f7ff f962 	bl	100493a4 <BLE_STACK_Event>
1004a0e0:	bd80      	pop	{r7, pc}

1004a0e2 <hci_aci_event_notify_cb>:
1004a0e2:	b580      	push	{r7, lr}
1004a0e4:	4608      	mov	r0, r1
1004a0e6:	7889      	ldrb	r1, [r1, #2]
1004a0e8:	78c2      	ldrb	r2, [r0, #3]
1004a0ea:	0212      	lsls	r2, r2, #8
1004a0ec:	1851      	adds	r1, r2, r1
1004a0ee:	1d09      	adds	r1, r1, #4
1004a0f0:	b289      	uxth	r1, r1
1004a0f2:	f7ff f957 	bl	100493a4 <BLE_STACK_Event>
1004a0f6:	bd80      	pop	{r7, pc}

1004a0f8 <hci_rx_data_notify_cb>:
1004a0f8:	b580      	push	{r7, lr}
1004a0fa:	4608      	mov	r0, r1
1004a0fc:	78c9      	ldrb	r1, [r1, #3]
1004a0fe:	7902      	ldrb	r2, [r0, #4]
1004a100:	0212      	lsls	r2, r2, #8
1004a102:	1851      	adds	r1, r2, r1
1004a104:	1d49      	adds	r1, r1, #5
1004a106:	b289      	uxth	r1, r1
1004a108:	f7ff f94c 	bl	100493a4 <BLE_STACK_Event>
1004a10c:	bd80      	pop	{r7, pc}

1004a10e <hci_disconnection_complete_event_int_cb_ucfg_weak>:
1004a10e:	2000      	movs	r0, #0
1004a110:	4770      	bx	lr

1004a112 <hci_encryption_change_event_int_cb_ucfg_weak>:
1004a112:	2000      	movs	r0, #0
1004a114:	4770      	bx	lr

1004a116 <hci_encryption_key_refresh_complete_event_int_cb_ucfg_weak>:
1004a116:	2000      	movs	r0, #0
1004a118:	4770      	bx	lr

1004a11a <hci_le_connection_complete_event_int_cb_ucfg_weak>:
1004a11a:	2000      	movs	r0, #0
1004a11c:	4770      	bx	lr

1004a11e <hci_le_enhanced_connection_complete_event_int_cb_ucfg_weak>:
1004a11e:	2000      	movs	r0, #0
1004a120:	4770      	bx	lr

1004a122 <hci_le_long_term_key_request_event_int_cb_ucfg_weak>:
1004a122:	2000      	movs	r0, #0
1004a124:	4770      	bx	lr

1004a126 <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg_weak>:
1004a126:	2000      	movs	r0, #0
1004a128:	4770      	bx	lr

1004a12a <hci_le_generate_dhkey_complete_event_int_cb_ucfg_weak>:
1004a12a:	2000      	movs	r0, #0
1004a12c:	4770      	bx	lr

1004a12e <hci_le_advertising_report_event_int_cb_ucfg_weak>:
1004a12e:	2000      	movs	r0, #0
1004a130:	4770      	bx	lr

1004a132 <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
1004a132:	2000      	movs	r0, #0
1004a134:	4770      	bx	lr

1004a136 <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
1004a136:	2000      	movs	r0, #0
1004a138:	4770      	bx	lr

1004a13a <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
1004a13a:	2000      	movs	r0, #0
1004a13c:	4770      	bx	lr

1004a13e <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
1004a13e:	2000      	movs	r0, #0
1004a140:	4770      	bx	lr

1004a142 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
1004a142:	2000      	movs	r0, #0
1004a144:	4770      	bx	lr

1004a146 <hci_hardware_error_event_cb>:
1004a146:	b5e0      	push	{r5, r6, r7, lr}
1004a148:	aa01      	add	r2, sp, #4
1004a14a:	70d0      	strb	r0, [r2, #3]
1004a14c:	2001      	movs	r0, #1
1004a14e:	7090      	strb	r0, [r2, #2]
1004a150:	2010      	movs	r0, #16
1004a152:	7050      	strb	r0, [r2, #1]
1004a154:	2104      	movs	r1, #4
1004a156:	7011      	strb	r1, [r2, #0]
1004a158:	4610      	mov	r0, r2
1004a15a:	f7ff f923 	bl	100493a4 <BLE_STACK_Event>
1004a15e:	bd8c      	pop	{r2, r3, r7, pc}

1004a160 <gap_timers_callback_wrapper>:
1004a160:	b580      	push	{r7, lr}
1004a162:	6940      	ldr	r0, [r0, #20]
1004a164:	4901      	ldr	r1, [pc, #4]	@ (1004a16c <__arm_cp.0_0>)
1004a166:	f003 f95c 	bl	1004d422 <cst_sharedCallback>
1004a16a:	bd80      	pop	{r7, pc}

1004a16c <__arm_cp.0_0>:
1004a16c:	1004a171 	.word	0x1004a171

1004a170 <gap_timers_callback>:
1004a170:	b580      	push	{r7, lr}
1004a172:	2802      	cmp	r0, #2
1004a174:	d007      	beq.n	1004a186 <gap_timers_callback+0x16>
1004a176:	2801      	cmp	r0, #1
1004a178:	d009      	beq.n	1004a18e <gap_timers_callback+0x1e>
1004a17a:	2800      	cmp	r0, #0
1004a17c:	d106      	bne.n	1004a18c <gap_timers_callback+0x1c>
1004a17e:	2000      	movs	r0, #0
1004a180:	f000 f97a 	bl	1004a478 <GAP_LimDiscTimeoutcb_ucfg_weak>
1004a184:	bd80      	pop	{r7, pc}
1004a186:	2000      	movs	r0, #0
1004a188:	f003 faff 	bl	1004d78a <GAP_DiscProcTimeoutcb_ucfg_weak>
1004a18c:	bd80      	pop	{r7, pc}
1004a18e:	2000      	movs	r0, #0
1004a190:	f000 f802 	bl	1004a198 <GAP_PrivateAddrTimercb>
1004a194:	bd80      	pop	{r7, pc}
	...

1004a198 <GAP_PrivateAddrTimercb>:
1004a198:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a19a:	b087      	sub	sp, #28
1004a19c:	4831      	ldr	r0, [pc, #196]	@ (1004a264 <__arm_cp.2_0>)
1004a19e:	6804      	ldr	r4, [r0, #0]
1004a1a0:	a906      	add	r1, sp, #24
1004a1a2:	9104      	str	r1, [sp, #16]
1004a1a4:	2000      	movs	r0, #0
1004a1a6:	9001      	str	r0, [sp, #4]
1004a1a8:	7008      	strb	r0, [r1, #0]
1004a1aa:	ae05      	add	r6, sp, #20
1004a1ac:	2001      	movs	r0, #1
1004a1ae:	7030      	strb	r0, [r6, #0]
1004a1b0:	f000 f952 	bl	1004a458 <GAP_reset_privacy_timer>
1004a1b4:	205d      	movs	r0, #93	@ 0x5d
1004a1b6:	9403      	str	r4, [sp, #12]
1004a1b8:	5c27      	ldrb	r7, [r4, r0]
1004a1ba:	1e78      	subs	r0, r7, #1
1004a1bc:	463d      	mov	r5, r7
1004a1be:	4185      	sbcs	r5, r0
1004a1c0:	2020      	movs	r0, #32
1004a1c2:	4038      	ands	r0, r7
1004a1c4:	4244      	negs	r4, r0
1004a1c6:	9002      	str	r0, [sp, #8]
1004a1c8:	4144      	adcs	r4, r0
1004a1ca:	9804      	ldr	r0, [sp, #16]
1004a1cc:	4631      	mov	r1, r6
1004a1ce:	f000 fb8f 	bl	1004a8f0 <GAP_check_adv_status>
1004a1d2:	2f00      	cmp	r7, #0
1004a1d4:	d101      	bne.n	1004a1da <GAP_PrivateAddrTimercb+0x42>
1004a1d6:	2801      	cmp	r0, #1
1004a1d8:	d13e      	bne.n	1004a258 <GAP_PrivateAddrTimercb+0xc0>
1004a1da:	402c      	ands	r4, r5
1004a1dc:	d138      	bne.n	1004a250 <GAP_PrivateAddrTimercb+0xb8>
1004a1de:	a805      	add	r0, sp, #20
1004a1e0:	7800      	ldrb	r0, [r0, #0]
1004a1e2:	2800      	cmp	r0, #0
1004a1e4:	d034      	beq.n	1004a250 <GAP_PrivateAddrTimercb+0xb8>
1004a1e6:	9c03      	ldr	r4, [sp, #12]
1004a1e8:	4620      	mov	r0, r4
1004a1ea:	305d      	adds	r0, #93	@ 0x5d
1004a1ec:	7bc0      	ldrb	r0, [r0, #15]
1004a1ee:	2800      	cmp	r0, #0
1004a1f0:	d034      	beq.n	1004a25c <GAP_PrivateAddrTimercb+0xc4>
1004a1f2:	3428      	adds	r4, #40	@ 0x28
1004a1f4:	9d02      	ldr	r5, [sp, #8]
1004a1f6:	2d00      	cmp	r5, #0
1004a1f8:	d003      	beq.n	1004a202 <GAP_PrivateAddrTimercb+0x6a>
1004a1fa:	7821      	ldrb	r1, [r4, #0]
1004a1fc:	2000      	movs	r0, #0
1004a1fe:	f003 fac1 	bl	1004d784 <GAP_enable_disable_scan_ucfg_weak>
1004a202:	a806      	add	r0, sp, #24
1004a204:	7800      	ldrb	r0, [r0, #0]
1004a206:	2801      	cmp	r0, #1
1004a208:	d102      	bne.n	1004a210 <GAP_PrivateAddrTimercb+0x78>
1004a20a:	2000      	movs	r0, #0
1004a20c:	f000 fb34 	bl	1004a878 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
1004a210:	f000 f996 	bl	1004a540 <GAP_generate_new_rpa>
1004a214:	2800      	cmp	r0, #0
1004a216:	d104      	bne.n	1004a222 <GAP_PrivateAddrTimercb+0x8a>
1004a218:	2000      	movs	r0, #0
1004a21a:	2101      	movs	r1, #1
1004a21c:	f000 f968 	bl	1004a4f0 <GAP_start_privacy_timer>
1004a220:	9001      	str	r0, [sp, #4]
1004a222:	2d00      	cmp	r5, #0
1004a224:	d00a      	beq.n	1004a23c <GAP_PrivateAddrTimercb+0xa4>
1004a226:	7821      	ldrb	r1, [r4, #0]
1004a228:	2001      	movs	r0, #1
1004a22a:	f003 faab 	bl	1004d784 <GAP_enable_disable_scan_ucfg_weak>
1004a22e:	2800      	cmp	r0, #0
1004a230:	d004      	beq.n	1004a23c <GAP_PrivateAddrTimercb+0xa4>
1004a232:	9801      	ldr	r0, [sp, #4]
1004a234:	2800      	cmp	r0, #0
1004a236:	d001      	beq.n	1004a23c <GAP_PrivateAddrTimercb+0xa4>
1004a238:	f000 f920 	bl	1004a47c <GAP_stop_privacy_timer>
1004a23c:	a806      	add	r0, sp, #24
1004a23e:	7800      	ldrb	r0, [r0, #0]
1004a240:	2801      	cmp	r0, #1
1004a242:	d109      	bne.n	1004a258 <GAP_PrivateAddrTimercb+0xc0>
1004a244:	2006      	movs	r0, #6
1004a246:	f002 ffdf 	bl	1004d208 <tsk_notify_idx>
1004a24a:	f7f7 fad8 	bl	100417fe <BLE_STACK_ProcessRequest>
1004a24e:	e003      	b.n	1004a258 <GAP_PrivateAddrTimercb+0xc0>
1004a250:	2001      	movs	r0, #1
1004a252:	4601      	mov	r1, r0
1004a254:	f000 f94c 	bl	1004a4f0 <GAP_start_privacy_timer>
1004a258:	b007      	add	sp, #28
1004a25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a25c:	2000      	movs	r0, #0
1004a25e:	2101      	movs	r1, #1
1004a260:	e7f8      	b.n	1004a254 <GAP_PrivateAddrTimercb+0xbc>
1004a262:	46c0      	nop			@ (mov r8, r8)

1004a264 <__arm_cp.2_0>:
1004a264:	200006c0 	.word	0x200006c0

1004a268 <GAP_init_context>:
1004a268:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004a26a:	461f      	mov	r7, r3
1004a26c:	9201      	str	r2, [sp, #4]
1004a26e:	9102      	str	r1, [sp, #8]
1004a270:	4605      	mov	r5, r0
1004a272:	2401      	movs	r4, #1
1004a274:	2178      	movs	r1, #120	@ 0x78
1004a276:	4620      	mov	r0, r4
1004a278:	f002 fcbe 	bl	1004cbf8 <csmem_mem_0_assign>
1004a27c:	21e1      	movs	r1, #225	@ 0xe1
1004a27e:	0089      	lsls	r1, r1, #2
1004a280:	225a      	movs	r2, #90	@ 0x5a
1004a282:	5281      	strh	r1, [r0, r2]
1004a284:	4e24      	ldr	r6, [pc, #144]	@ (1004a318 <__arm_cp.3_0>)
1004a286:	6030      	str	r0, [r6, #0]
1004a288:	2d01      	cmp	r5, #1
1004a28a:	d117      	bne.n	1004a2bc <GAP_init_context+0x54>
1004a28c:	2001      	movs	r0, #1
1004a28e:	2106      	movs	r1, #6
1004a290:	f002 fcb2 	bl	1004cbf8 <csmem_mem_0_assign>
1004a294:	4601      	mov	r1, r0
1004a296:	6830      	ldr	r0, [r6, #0]
1004a298:	6381      	str	r1, [r0, #56]	@ 0x38
1004a29a:	2f01      	cmp	r7, #1
1004a29c:	d10e      	bne.n	1004a2bc <GAP_init_context+0x54>
1004a29e:	2501      	movs	r5, #1
1004a2a0:	270e      	movs	r7, #14
1004a2a2:	4628      	mov	r0, r5
1004a2a4:	4639      	mov	r1, r7
1004a2a6:	f002 fca7 	bl	1004cbf8 <csmem_mem_0_assign>
1004a2aa:	6831      	ldr	r1, [r6, #0]
1004a2ac:	64c8      	str	r0, [r1, #76]	@ 0x4c
1004a2ae:	4628      	mov	r0, r5
1004a2b0:	4639      	mov	r1, r7
1004a2b2:	f002 fca1 	bl	1004cbf8 <csmem_mem_0_assign>
1004a2b6:	4601      	mov	r1, r0
1004a2b8:	6830      	ldr	r0, [r6, #0]
1004a2ba:	6501      	str	r1, [r0, #80]	@ 0x50
1004a2bc:	9902      	ldr	r1, [sp, #8]
1004a2be:	2901      	cmp	r1, #1
1004a2c0:	d10b      	bne.n	1004a2da <GAP_init_context+0x72>
1004a2c2:	9801      	ldr	r0, [sp, #4]
1004a2c4:	2801      	cmp	r0, #1
1004a2c6:	d105      	bne.n	1004a2d4 <GAP_init_context+0x6c>
1004a2c8:	201c      	movs	r0, #28
1004a2ca:	2101      	movs	r1, #1
1004a2cc:	f002 fc94 	bl	1004cbf8 <csmem_mem_0_assign>
1004a2d0:	6831      	ldr	r1, [r6, #0]
1004a2d2:	62c8      	str	r0, [r1, #44]	@ 0x2c
1004a2d4:	4811      	ldr	r0, [pc, #68]	@ (1004a31c <__arm_cp.3_1>)
1004a2d6:	7e84      	ldrb	r4, [r0, #26]
1004a2d8:	e001      	b.n	1004a2de <GAP_init_context+0x76>
1004a2da:	2100      	movs	r1, #0
1004a2dc:	62c1      	str	r1, [r0, #44]	@ 0x2c
1004a2de:	2114      	movs	r1, #20
1004a2e0:	4620      	mov	r0, r4
1004a2e2:	f002 fc89 	bl	1004cbf8 <csmem_mem_0_assign>
1004a2e6:	6831      	ldr	r1, [r6, #0]
1004a2e8:	6548      	str	r0, [r1, #84]	@ 0x54
1004a2ea:	4c0d      	ldr	r4, [pc, #52]	@ (1004a320 <__arm_cp.3_2>)
1004a2ec:	2104      	movs	r1, #4
1004a2ee:	2201      	movs	r2, #1
1004a2f0:	4620      	mov	r0, r4
1004a2f2:	f002 fc6f 	bl	1004cbd4 <csmem_mem_assign>
1004a2f6:	6831      	ldr	r1, [r6, #0]
1004a2f8:	6208      	str	r0, [r1, #32]
1004a2fa:	2503      	movs	r5, #3
1004a2fc:	2202      	movs	r2, #2
1004a2fe:	4620      	mov	r0, r4
1004a300:	4629      	mov	r1, r5
1004a302:	f002 fc67 	bl	1004cbd4 <csmem_mem_assign>
1004a306:	6831      	ldr	r1, [r6, #0]
1004a308:	6248      	str	r0, [r1, #36]	@ 0x24
1004a30a:	4a06      	ldr	r2, [pc, #24]	@ (1004a324 <__arm_cp.3_3>)
1004a30c:	2307      	movs	r3, #7
1004a30e:	4608      	mov	r0, r1
1004a310:	4629      	mov	r1, r5
1004a312:	f002 ffad 	bl	1004d270 <CST_init>
1004a316:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004a318 <__arm_cp.3_0>:
1004a318:	200006c0 	.word	0x200006c0

1004a31c <__arm_cp.3_1>:
1004a31c:	200006d8 	.word	0x200006d8

1004a320 <__arm_cp.3_2>:
1004a320:	200006d4 	.word	0x200006d4

1004a324 <__arm_cp.3_3>:
1004a324:	1004a161 	.word	0x1004a161

1004a328 <GAP_get_default_le_event_mask>:
1004a328:	b5b0      	push	{r4, r5, r7, lr}
1004a32a:	4604      	mov	r4, r0
1004a32c:	2100      	movs	r1, #0
1004a32e:	2508      	movs	r5, #8
1004a330:	462a      	mov	r2, r5
1004a332:	f7f7 fc4b 	bl	10041bcc <BLEPLAT_MemSet>
1004a336:	7820      	ldrb	r0, [r4, #0]
1004a338:	21df      	movs	r1, #223	@ 0xdf
1004a33a:	4301      	orrs	r1, r0
1004a33c:	7021      	strb	r1, [r4, #0]
1004a33e:	7860      	ldrb	r0, [r4, #1]
1004a340:	2109      	movs	r1, #9
1004a342:	4301      	orrs	r1, r0
1004a344:	7061      	strb	r1, [r4, #1]
1004a346:	78a1      	ldrb	r1, [r4, #2]
1004a348:	4329      	orrs	r1, r5
1004a34a:	70a1      	strb	r1, [r4, #2]
1004a34c:	4911      	ldr	r1, [pc, #68]	@ (1004a394 <__arm_cp.4_0>)
1004a34e:	6809      	ldr	r1, [r1, #0]
1004a350:	225c      	movs	r2, #92	@ 0x5c
1004a352:	5c89      	ldrb	r1, [r1, r2]
1004a354:	0689      	lsls	r1, r1, #26
1004a356:	d502      	bpl.n	1004a35e <GAP_get_default_le_event_mask+0x36>
1004a358:	210f      	movs	r1, #15
1004a35a:	4308      	orrs	r0, r1
1004a35c:	7060      	strb	r0, [r4, #1]
1004a35e:	f001 ff13 	bl	1004c188 <ext_adv_scan_enabled_ucfg_weak>
1004a362:	2801      	cmp	r0, #1
1004a364:	d107      	bne.n	1004a376 <GAP_get_default_le_event_mask+0x4e>
1004a366:	7860      	ldrb	r0, [r4, #1]
1004a368:	2112      	movs	r1, #18
1004a36a:	4301      	orrs	r1, r0
1004a36c:	7061      	strb	r1, [r4, #1]
1004a36e:	78a0      	ldrb	r0, [r4, #2]
1004a370:	2107      	movs	r1, #7
1004a372:	4301      	orrs	r1, r0
1004a374:	70a1      	strb	r1, [r4, #2]
1004a376:	f000 fe15 	bl	1004afa4 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004a37a:	b2c0      	uxtb	r0, r0
1004a37c:	2801      	cmp	r0, #1
1004a37e:	d107      	bne.n	1004a390 <GAP_get_default_le_event_mask+0x68>
1004a380:	7860      	ldrb	r0, [r4, #1]
1004a382:	21e0      	movs	r1, #224	@ 0xe0
1004a384:	4301      	orrs	r1, r0
1004a386:	7061      	strb	r1, [r4, #1]
1004a388:	78a0      	ldrb	r0, [r4, #2]
1004a38a:	2180      	movs	r1, #128	@ 0x80
1004a38c:	4301      	orrs	r1, r0
1004a38e:	70a1      	strb	r1, [r4, #2]
1004a390:	bdb0      	pop	{r4, r5, r7, pc}
1004a392:	46c0      	nop			@ (mov r8, r8)

1004a394 <__arm_cp.4_0>:
1004a394:	200006c0 	.word	0x200006c0

1004a398 <gap_extended_adv_scan_supported>:
1004a398:	b580      	push	{r7, lr}
1004a39a:	f001 fef5 	bl	1004c188 <ext_adv_scan_enabled_ucfg_weak>
1004a39e:	bd80      	pop	{r7, pc}

1004a3a0 <GAP_Init>:
1004a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a3a2:	b087      	sub	sp, #28
1004a3a4:	4606      	mov	r6, r0
1004a3a6:	a806      	add	r0, sp, #24
1004a3a8:	2700      	movs	r7, #0
1004a3aa:	7007      	strb	r7, [r0, #0]
1004a3ac:	2412      	movs	r4, #18
1004a3ae:	2901      	cmp	r1, #1
1004a3b0:	d901      	bls.n	1004a3b6 <GAP_Init+0x16>
1004a3b2:	4620      	mov	r0, r4
1004a3b4:	e04a      	b.n	1004a44c <GAP_Init+0xac>
1004a3b6:	460d      	mov	r5, r1
1004a3b8:	4825      	ldr	r0, [pc, #148]	@ (1004a450 <__arm_cp.7_0>)
1004a3ba:	6800      	ldr	r0, [r0, #0]
1004a3bc:	9002      	str	r0, [sp, #8]
1004a3be:	f003 f8ef 	bl	1004d5a0 <IDD_Initialize_Device_IDs>
1004a3c2:	2800      	cmp	r0, #0
1004a3c4:	d142      	bne.n	1004a44c <GAP_Init+0xac>
1004a3c6:	9902      	ldr	r1, [sp, #8]
1004a3c8:	315c      	adds	r1, #92	@ 0x5c
1004a3ca:	7808      	ldrb	r0, [r1, #0]
1004a3cc:	07c0      	lsls	r0, r0, #31
1004a3ce:	d111      	bne.n	1004a3f4 <GAP_Init+0x54>
1004a3d0:	78c8      	ldrb	r0, [r1, #3]
1004a3d2:	4328      	orrs	r0, r5
1004a3d4:	9101      	str	r1, [sp, #4]
1004a3d6:	70c8      	strb	r0, [r1, #3]
1004a3d8:	a805      	add	r0, sp, #20
1004a3da:	2107      	movs	r1, #7
1004a3dc:	7001      	strb	r1, [r0, #0]
1004a3de:	2e00      	cmp	r6, #0
1004a3e0:	d012      	beq.n	1004a408 <GAP_Init+0x68>
1004a3e2:	2e02      	cmp	r6, #2
1004a3e4:	d008      	beq.n	1004a3f8 <GAP_Init+0x58>
1004a3e6:	2e01      	cmp	r6, #1
1004a3e8:	4620      	mov	r0, r4
1004a3ea:	d12f      	bne.n	1004a44c <GAP_Init+0xac>
1004a3ec:	a806      	add	r0, sp, #24
1004a3ee:	2110      	movs	r1, #16
1004a3f0:	7001      	strb	r1, [r0, #0]
1004a3f2:	e009      	b.n	1004a408 <GAP_Init+0x68>
1004a3f4:	200c      	movs	r0, #12
1004a3f6:	e029      	b.n	1004a44c <GAP_Init+0xac>
1004a3f8:	a806      	add	r0, sp, #24
1004a3fa:	2120      	movs	r1, #32
1004a3fc:	7001      	strb	r1, [r0, #0]
1004a3fe:	a905      	add	r1, sp, #20
1004a400:	f000 f86e 	bl	1004a4e0 <GAP_enable_controller_privacy_ucfg_weak>
1004a404:	2800      	cmp	r0, #0
1004a406:	d121      	bne.n	1004a44c <GAP_Init+0xac>
1004a408:	4628      	mov	r0, r5
1004a40a:	f000 f86f 	bl	1004a4ec <GAP_init_advertising_sets_ucfg_weak>
1004a40e:	2800      	cmp	r0, #0
1004a410:	d11c      	bne.n	1004a44c <GAP_Init+0xac>
1004a412:	9802      	ldr	r0, [sp, #8]
1004a414:	3060      	adds	r0, #96	@ 0x60
1004a416:	f000 f865 	bl	1004a4e4 <GAP_set_controller_random_address_ucfg_weak>
1004a41a:	2800      	cmp	r0, #0
1004a41c:	d116      	bne.n	1004a44c <GAP_Init+0xac>
1004a41e:	9806      	ldr	r0, [sp, #24]
1004a420:	2101      	movs	r1, #1
1004a422:	9a01      	ldr	r2, [sp, #4]
1004a424:	7411      	strb	r1, [r2, #16]
1004a426:	4308      	orrs	r0, r1
1004a428:	7010      	strb	r0, [r2, #0]
1004a42a:	f000 f815 	bl	1004a458 <GAP_reset_privacy_timer>
1004a42e:	ac03      	add	r4, sp, #12
1004a430:	4620      	mov	r0, r4
1004a432:	f7ff ff79 	bl	1004a328 <GAP_get_default_le_event_mask>
1004a436:	4620      	mov	r0, r4
1004a438:	f000 fb66 	bl	1004ab08 <hci_le_set_event_mask>
1004a43c:	43f8      	mvns	r0, r7
1004a43e:	9003      	str	r0, [sp, #12]
1004a440:	4804      	ldr	r0, [pc, #16]	@ (1004a454 <__arm_cp.7_1>)
1004a442:	9004      	str	r0, [sp, #16]
1004a444:	4620      	mov	r0, r4
1004a446:	f000 fb4f 	bl	1004aae8 <hci_set_event_mask>
1004a44a:	4638      	mov	r0, r7
1004a44c:	b007      	add	sp, #28
1004a44e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004a450 <__arm_cp.7_0>:
1004a450:	200006c0 	.word	0x200006c0

1004a454 <__arm_cp.7_1>:
1004a454:	20009fff 	.word	0x20009fff

1004a458 <GAP_reset_privacy_timer>:
1004a458:	4806      	ldr	r0, [pc, #24]	@ (1004a474 <__arm_cp.8_0>)
1004a45a:	6800      	ldr	r0, [r0, #0]
1004a45c:	215c      	movs	r1, #92	@ 0x5c
1004a45e:	5c41      	ldrb	r1, [r0, r1]
1004a460:	0689      	lsls	r1, r1, #26
1004a462:	0f89      	lsrs	r1, r1, #30
1004a464:	d004      	beq.n	1004a470 <GAP_reset_privacy_timer+0x18>
1004a466:	305c      	adds	r0, #92	@ 0x5c
1004a468:	78c1      	ldrb	r1, [r0, #3]
1004a46a:	2202      	movs	r2, #2
1004a46c:	430a      	orrs	r2, r1
1004a46e:	70c2      	strb	r2, [r0, #3]
1004a470:	4770      	bx	lr
1004a472:	46c0      	nop			@ (mov r8, r8)

1004a474 <__arm_cp.8_0>:
1004a474:	200006c0 	.word	0x200006c0

1004a478 <GAP_LimDiscTimeoutcb_ucfg_weak>:
1004a478:	4770      	bx	lr
	...

1004a47c <GAP_stop_privacy_timer>:
1004a47c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1004a47e:	4c0d      	ldr	r4, [pc, #52]	@ (1004a4b4 <__arm_cp.19_0>)
1004a480:	6825      	ldr	r5, [r4, #0]
1004a482:	205c      	movs	r0, #92	@ 0x5c
1004a484:	5c28      	ldrb	r0, [r5, r0]
1004a486:	0680      	lsls	r0, r0, #26
1004a488:	0f80      	lsrs	r0, r0, #30
1004a48a:	d012      	beq.n	1004a4b2 <GAP_stop_privacy_timer+0x36>
1004a48c:	355c      	adds	r5, #92	@ 0x5c
1004a48e:	78e8      	ldrb	r0, [r5, #3]
1004a490:	2602      	movs	r6, #2
1004a492:	4030      	ands	r0, r6
1004a494:	d10d      	bne.n	1004a4b2 <GAP_stop_privacy_timer+0x36>
1004a496:	a801      	add	r0, sp, #4
1004a498:	4669      	mov	r1, sp
1004a49a:	f000 fa29 	bl	1004a8f0 <GAP_check_adv_status>
1004a49e:	7869      	ldrb	r1, [r5, #1]
1004a4a0:	4301      	orrs	r1, r0
1004a4a2:	d106      	bne.n	1004a4b2 <GAP_stop_privacy_timer+0x36>
1004a4a4:	78e8      	ldrb	r0, [r5, #3]
1004a4a6:	4330      	orrs	r0, r6
1004a4a8:	70e8      	strb	r0, [r5, #3]
1004a4aa:	6820      	ldr	r0, [r4, #0]
1004a4ac:	2101      	movs	r1, #1
1004a4ae:	f002 fef4 	bl	1004d29a <CST_stop>
1004a4b2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1004a4b4 <__arm_cp.19_0>:
1004a4b4:	200006c0 	.word	0x200006c0

1004a4b8 <GAP_get_own_address_type>:
1004a4b8:	4808      	ldr	r0, [pc, #32]	@ (1004a4dc <__arm_cp.29_0>)
1004a4ba:	6800      	ldr	r0, [r0, #0]
1004a4bc:	215c      	movs	r1, #92	@ 0x5c
1004a4be:	5c41      	ldrb	r1, [r0, r1]
1004a4c0:	06ca      	lsls	r2, r1, #27
1004a4c2:	d406      	bmi.n	1004a4d2 <GAP_get_own_address_type+0x1a>
1004a4c4:	0689      	lsls	r1, r1, #26
1004a4c6:	d406      	bmi.n	1004a4d6 <GAP_get_own_address_type+0x1e>
1004a4c8:	305c      	adds	r0, #92	@ 0x5c
1004a4ca:	78c1      	ldrb	r1, [r0, #3]
1004a4cc:	2001      	movs	r0, #1
1004a4ce:	4008      	ands	r0, r1
1004a4d0:	4770      	bx	lr
1004a4d2:	2001      	movs	r0, #1
1004a4d4:	4770      	bx	lr
1004a4d6:	2003      	movs	r0, #3
1004a4d8:	4770      	bx	lr
1004a4da:	46c0      	nop			@ (mov r8, r8)

1004a4dc <__arm_cp.29_0>:
1004a4dc:	200006c0 	.word	0x200006c0

1004a4e0 <GAP_enable_controller_privacy_ucfg_weak>:
1004a4e0:	2012      	movs	r0, #18
1004a4e2:	4770      	bx	lr

1004a4e4 <GAP_set_controller_random_address_ucfg_weak>:
1004a4e4:	b580      	push	{r7, lr}
1004a4e6:	f000 fafa 	bl	1004aade <hci_le_set_random_address>
1004a4ea:	bd80      	pop	{r7, pc}

1004a4ec <GAP_init_advertising_sets_ucfg_weak>:
1004a4ec:	2000      	movs	r0, #0
1004a4ee:	4770      	bx	lr

1004a4f0 <GAP_start_privacy_timer>:
1004a4f0:	b5b0      	push	{r4, r5, r7, lr}
1004a4f2:	4602      	mov	r2, r0
1004a4f4:	4810      	ldr	r0, [pc, #64]	@ (1004a538 <__arm_cp.47_0>)
1004a4f6:	6800      	ldr	r0, [r0, #0]
1004a4f8:	4605      	mov	r5, r0
1004a4fa:	355a      	adds	r5, #90	@ 0x5a
1004a4fc:	2900      	cmp	r1, #0
1004a4fe:	d108      	bne.n	1004a512 <GAP_start_privacy_timer+0x22>
1004a500:	78a9      	ldrb	r1, [r5, #2]
1004a502:	0689      	lsls	r1, r1, #26
1004a504:	2400      	movs	r4, #0
1004a506:	0f89      	lsrs	r1, r1, #30
1004a508:	d014      	beq.n	1004a534 <GAP_start_privacy_timer+0x44>
1004a50a:	7969      	ldrb	r1, [r5, #5]
1004a50c:	2302      	movs	r3, #2
1004a50e:	400b      	ands	r3, r1
1004a510:	d010      	beq.n	1004a534 <GAP_start_privacy_timer+0x44>
1004a512:	2a00      	cmp	r2, #0
1004a514:	d001      	beq.n	1004a51a <GAP_start_privacy_timer+0x2a>
1004a516:	4b09      	ldr	r3, [pc, #36]	@ (1004a53c <__arm_cp.47_1>)
1004a518:	e003      	b.n	1004a522 <GAP_start_privacy_timer+0x32>
1004a51a:	217d      	movs	r1, #125	@ 0x7d
1004a51c:	00c9      	lsls	r1, r1, #3
1004a51e:	882b      	ldrh	r3, [r5, #0]
1004a520:	434b      	muls	r3, r1
1004a522:	2401      	movs	r4, #1
1004a524:	4621      	mov	r1, r4
1004a526:	4622      	mov	r2, r4
1004a528:	f002 feed 	bl	1004d306 <CST_start>
1004a52c:	7968      	ldrb	r0, [r5, #5]
1004a52e:	21fd      	movs	r1, #253	@ 0xfd
1004a530:	4001      	ands	r1, r0
1004a532:	7169      	strb	r1, [r5, #5]
1004a534:	4620      	mov	r0, r4
1004a536:	bdb0      	pop	{r4, r5, r7, pc}

1004a538 <__arm_cp.47_0>:
1004a538:	200006c0 	.word	0x200006c0

1004a53c <__arm_cp.47_1>:
1004a53c:	00007530 	.word	0x00007530

1004a540 <GAP_generate_new_rpa>:
1004a540:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1004a542:	4d0d      	ldr	r5, [pc, #52]	@ (1004a578 <__arm_cp.48_0>)
1004a544:	6828      	ldr	r0, [r5, #0]
1004a546:	215f      	movs	r1, #95	@ 0x5f
1004a548:	5c40      	ldrb	r0, [r0, r1]
1004a54a:	0780      	lsls	r0, r0, #30
1004a54c:	d401      	bmi.n	1004a552 <GAP_generate_new_rpa+0x12>
1004a54e:	240c      	movs	r4, #12
1004a550:	e00f      	b.n	1004a572 <GAP_generate_new_rpa+0x32>
1004a552:	466c      	mov	r4, sp
1004a554:	4620      	mov	r0, r4
1004a556:	f002 fdb1 	bl	1004d0bc <smp_sap_crt_generate_rpa>
1004a55a:	4620      	mov	r0, r4
1004a55c:	f7ff ffc2 	bl	1004a4e4 <GAP_set_controller_random_address_ucfg_weak>
1004a560:	4604      	mov	r4, r0
1004a562:	2800      	cmp	r0, #0
1004a564:	d105      	bne.n	1004a572 <GAP_generate_new_rpa+0x32>
1004a566:	6828      	ldr	r0, [r5, #0]
1004a568:	3066      	adds	r0, #102	@ 0x66
1004a56a:	4669      	mov	r1, sp
1004a56c:	2206      	movs	r2, #6
1004a56e:	f7f7 fb1d 	bl	10041bac <BLEPLAT_MemCpy>
1004a572:	4620      	mov	r0, r4
1004a574:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1004a576:	46c0      	nop			@ (mov r8, r8)

1004a578 <__arm_cp.48_0>:
1004a578:	200006c0 	.word	0x200006c0

1004a57c <GAP_enable_rpa_change_at_timeout>:
1004a57c:	4902      	ldr	r1, [pc, #8]	@ (1004a588 <__arm_cp.53_0>)
1004a57e:	6809      	ldr	r1, [r1, #0]
1004a580:	226c      	movs	r2, #108	@ 0x6c
1004a582:	5488      	strb	r0, [r1, r2]
1004a584:	4770      	bx	lr
1004a586:	46c0      	nop			@ (mov r8, r8)

1004a588 <__arm_cp.53_0>:
1004a588:	200006c0 	.word	0x200006c0

1004a58c <GAP_check_discoverability_mode>:
1004a58c:	1e43      	subs	r3, r0, #1
1004a58e:	2b02      	cmp	r3, #2
1004a590:	d309      	bcc.n	1004a5a6 <GAP_check_discoverability_mode+0x1a>
1004a592:	2800      	cmp	r0, #0
1004a594:	d00c      	beq.n	1004a5b0 <GAP_check_discoverability_mode+0x24>
1004a596:	2803      	cmp	r0, #3
1004a598:	d109      	bne.n	1004a5ae <GAP_check_discoverability_mode+0x22>
1004a59a:	2001      	movs	r0, #1
1004a59c:	4001      	ands	r1, r0
1004a59e:	4249      	negs	r1, r1
1004a5a0:	2012      	movs	r0, #18
1004a5a2:	4008      	ands	r0, r1
1004a5a4:	4770      	bx	lr
1004a5a6:	2a00      	cmp	r2, #0
1004a5a8:	d101      	bne.n	1004a5ae <GAP_check_discoverability_mode+0x22>
1004a5aa:	4610      	mov	r0, r2
1004a5ac:	4770      	bx	lr
1004a5ae:	2012      	movs	r0, #18
1004a5b0:	4770      	bx	lr
	...

1004a5b4 <GAP_advEvtProp_to_advType>:
1004a5b4:	4601      	mov	r1, r0
1004a5b6:	3910      	subs	r1, #16
1004a5b8:	2905      	cmp	r1, #5
1004a5ba:	d80a      	bhi.n	1004a5d2 <GAP_advEvtProp_to_advType+0x1e>
1004a5bc:	2000      	movs	r0, #0
1004a5be:	46c0      	nop			@ (mov r8, r8)
1004a5c0:	4479      	add	r1, pc
1004a5c2:	7909      	ldrb	r1, [r1, #4]
1004a5c4:	0049      	lsls	r1, r1, #1
1004a5c6:	448f      	add	pc, r1
1004a5c8:	090a0802 	.word	0x090a0802
1004a5cc:	0c08      	.short	0x0c08
1004a5ce:	2003      	movs	r0, #3
1004a5d0:	4770      	bx	lr
1004a5d2:	281d      	cmp	r0, #29
1004a5d4:	d101      	bne.n	1004a5da <GAP_advEvtProp_to_advType+0x26>
1004a5d6:	2001      	movs	r0, #1
1004a5d8:	4770      	bx	lr
1004a5da:	2005      	movs	r0, #5
1004a5dc:	4770      	bx	lr
1004a5de:	2002      	movs	r0, #2
1004a5e0:	4770      	bx	lr
1004a5e2:	2004      	movs	r0, #4
1004a5e4:	4770      	bx	lr
	...

1004a5e8 <GAP_set_legacy_advertising_configuration>:
1004a5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a5ea:	b08d      	sub	sp, #52	@ 0x34
1004a5ec:	4615      	mov	r5, r2
1004a5ee:	460f      	mov	r7, r1
1004a5f0:	4601      	mov	r1, r0
1004a5f2:	06fa      	lsls	r2, r7, #27
1004a5f4:	2012      	movs	r0, #18
1004a5f6:	2a00      	cmp	r2, #0
1004a5f8:	d542      	bpl.n	1004a680 <GAP_set_legacy_advertising_configuration+0x98>
1004a5fa:	461c      	mov	r4, r3
1004a5fc:	2301      	movs	r3, #1
1004a5fe:	039a      	lsls	r2, r3, #14
1004a600:	4295      	cmp	r5, r2
1004a602:	d83d      	bhi.n	1004a680 <GAP_set_legacy_advertising_configuration+0x98>
1004a604:	4294      	cmp	r4, r2
1004a606:	d83b      	bhi.n	1004a680 <GAP_set_legacy_advertising_configuration+0x98>
1004a608:	930c      	str	r3, [sp, #48]	@ 0x30
1004a60a:	481e      	ldr	r0, [pc, #120]	@ (1004a684 <__arm_cp.2_0>)
1004a60c:	6806      	ldr	r6, [r0, #0]
1004a60e:	9815      	ldr	r0, [sp, #84]	@ 0x54
1004a610:	900b      	str	r0, [sp, #44]	@ 0x2c
1004a612:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004a614:	900a      	str	r0, [sp, #40]	@ 0x28
1004a616:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1004a618:	9008      	str	r0, [sp, #32]
1004a61a:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a61c:	9009      	str	r0, [sp, #36]	@ 0x24
1004a61e:	6d70      	ldr	r0, [r6, #84]	@ 0x54
1004a620:	2200      	movs	r2, #0
1004a622:	9205      	str	r2, [sp, #20]
1004a624:	7042      	strb	r2, [r0, #1]
1004a626:	7001      	strb	r1, [r0, #0]
1004a628:	f7ff ff46 	bl	1004a4b8 <GAP_get_own_address_type>
1004a62c:	9007      	str	r0, [sp, #28]
1004a62e:	4638      	mov	r0, r7
1004a630:	f7ff ffc0 	bl	1004a5b4 <GAP_advEvtProp_to_advType>
1004a634:	4602      	mov	r2, r0
1004a636:	9606      	str	r6, [sp, #24]
1004a638:	6d70      	ldr	r0, [r6, #84]	@ 0x54
1004a63a:	7841      	ldrb	r1, [r0, #1]
1004a63c:	2320      	movs	r3, #32
1004a63e:	430b      	orrs	r3, r1
1004a640:	7043      	strb	r3, [r0, #1]
1004a642:	2a04      	cmp	r2, #4
1004a644:	d808      	bhi.n	1004a658 <GAP_set_legacy_advertising_configuration+0x70>
1004a646:	2317      	movs	r3, #23
1004a648:	40d3      	lsrs	r3, r2
1004a64a:	07db      	lsls	r3, r3, #31
1004a64c:	d004      	beq.n	1004a658 <GAP_set_legacy_advertising_configuration+0x70>
1004a64e:	b253      	sxtb	r3, r2
1004a650:	a70d      	add	r7, pc, #52	@ (adr r7, 1004a688 <__arm_cp.2_0+0x4>)
1004a652:	5cfb      	ldrb	r3, [r7, r3]
1004a654:	4319      	orrs	r1, r3
1004a656:	7041      	strb	r1, [r0, #1]
1004a658:	9808      	ldr	r0, [sp, #32]
1004a65a:	9000      	str	r0, [sp, #0]
1004a65c:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a65e:	9001      	str	r0, [sp, #4]
1004a660:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004a662:	9002      	str	r0, [sp, #8]
1004a664:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004a666:	9003      	str	r0, [sp, #12]
1004a668:	b2a8      	uxth	r0, r5
1004a66a:	b2a1      	uxth	r1, r4
1004a66c:	9b07      	ldr	r3, [sp, #28]
1004a66e:	f000 f98a 	bl	1004a986 <hci_le_set_advertising_parameters>
1004a672:	2800      	cmp	r0, #0
1004a674:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004a676:	d103      	bne.n	1004a680 <GAP_set_legacy_advertising_configuration+0x98>
1004a678:	9806      	ldr	r0, [sp, #24]
1004a67a:	6d40      	ldr	r0, [r0, #84]	@ 0x54
1004a67c:	7481      	strb	r1, [r0, #18]
1004a67e:	9805      	ldr	r0, [sp, #20]
1004a680:	b00d      	add	sp, #52	@ 0x34
1004a682:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004a684 <__arm_cp.2_0>:
1004a684:	200006c0 	.word	0x200006c0
1004a688:	70287028 	.word	0x70287028
1004a68c:	00000030 	.word	0x00000030

1004a690 <GAP_set_legacy_advertising_enable>:
1004a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004a692:	4604      	mov	r4, r0
1004a694:	481a      	ldr	r0, [pc, #104]	@ (1004a700 <__arm_cp.4_0>)
1004a696:	6807      	ldr	r7, [r0, #0]
1004a698:	2c00      	cmp	r4, #0
1004a69a:	d00e      	beq.n	1004a6ba <GAP_set_legacy_advertising_enable+0x2a>
1004a69c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1004a69e:	7c80      	ldrb	r0, [r0, #18]
1004a6a0:	2801      	cmp	r0, #1
1004a6a2:	d124      	bne.n	1004a6ee <GAP_set_legacy_advertising_enable+0x5e>
1004a6a4:	2000      	movs	r0, #0
1004a6a6:	4601      	mov	r1, r0
1004a6a8:	f000 f82c 	bl	1004a704 <GAP_check_flags>
1004a6ac:	4605      	mov	r5, r0
1004a6ae:	2800      	cmp	r0, #0
1004a6b0:	d11e      	bne.n	1004a6f0 <GAP_set_legacy_advertising_enable+0x60>
1004a6b2:	f7ff ff45 	bl	1004a540 <GAP_generate_new_rpa>
1004a6b6:	4606      	mov	r6, r0
1004a6b8:	e000      	b.n	1004a6bc <GAP_set_legacy_advertising_enable+0x2c>
1004a6ba:	260c      	movs	r6, #12
1004a6bc:	4620      	mov	r0, r4
1004a6be:	f000 f9c2 	bl	1004aa46 <hci_le_set_advertising_enable>
1004a6c2:	4605      	mov	r5, r0
1004a6c4:	2800      	cmp	r0, #0
1004a6c6:	d113      	bne.n	1004a6f0 <GAP_set_legacy_advertising_enable+0x60>
1004a6c8:	2500      	movs	r5, #0
1004a6ca:	4620      	mov	r0, r4
1004a6cc:	4629      	mov	r1, r5
1004a6ce:	462a      	mov	r2, r5
1004a6d0:	f000 f872 	bl	1004a7b8 <GAP_set_discoverability_mode>
1004a6d4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1004a6d6:	2c00      	cmp	r4, #0
1004a6d8:	d00c      	beq.n	1004a6f4 <GAP_set_legacy_advertising_enable+0x64>
1004a6da:	2101      	movs	r1, #1
1004a6dc:	74c1      	strb	r1, [r0, #19]
1004a6de:	2e00      	cmp	r6, #0
1004a6e0:	d106      	bne.n	1004a6f0 <GAP_set_legacy_advertising_enable+0x60>
1004a6e2:	2500      	movs	r5, #0
1004a6e4:	4628      	mov	r0, r5
1004a6e6:	4629      	mov	r1, r5
1004a6e8:	f7ff ff02 	bl	1004a4f0 <GAP_start_privacy_timer>
1004a6ec:	e000      	b.n	1004a6f0 <GAP_set_legacy_advertising_enable+0x60>
1004a6ee:	25d3      	movs	r5, #211	@ 0xd3
1004a6f0:	4628      	mov	r0, r5
1004a6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004a6f4:	2500      	movs	r5, #0
1004a6f6:	74c5      	strb	r5, [r0, #19]
1004a6f8:	f7ff fec0 	bl	1004a47c <GAP_stop_privacy_timer>
1004a6fc:	e7f8      	b.n	1004a6f0 <GAP_set_legacy_advertising_enable+0x60>
1004a6fe:	46c0      	nop			@ (mov r8, r8)

1004a700 <__arm_cp.4_0>:
1004a700:	200006c0 	.word	0x200006c0

1004a704 <GAP_check_flags>:
1004a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004a706:	4a28      	ldr	r2, [pc, #160]	@ (1004a7a8 <__arm_cp.5_0>)
1004a708:	7e92      	ldrb	r2, [r2, #26]
1004a70a:	2512      	movs	r5, #18
1004a70c:	428a      	cmp	r2, r1
1004a70e:	d925      	bls.n	1004a75c <GAP_check_flags+0x58>
1004a710:	2800      	cmp	r0, #0
1004a712:	d100      	bne.n	1004a716 <GAP_check_flags+0x12>
1004a714:	4601      	mov	r1, r0
1004a716:	2214      	movs	r2, #20
1004a718:	434a      	muls	r2, r1
1004a71a:	4824      	ldr	r0, [pc, #144]	@ (1004a7ac <__arm_cp.5_1>)
1004a71c:	6800      	ldr	r0, [r0, #0]
1004a71e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
1004a720:	1899      	adds	r1, r3, r2
1004a722:	784c      	ldrb	r4, [r1, #1]
1004a724:	06a0      	lsls	r0, r4, #26
1004a726:	0fc6      	lsrs	r6, r0, #31
1004a728:	2000      	movs	r0, #0
1004a72a:	2e00      	cmp	r6, #0
1004a72c:	d002      	beq.n	1004a734 <GAP_check_flags+0x30>
1004a72e:	2710      	movs	r7, #16
1004a730:	4027      	ands	r7, r4
1004a732:	d114      	bne.n	1004a75e <GAP_check_flags+0x5a>
1004a734:	2e00      	cmp	r6, #0
1004a736:	d102      	bne.n	1004a73e <GAP_check_flags+0x3a>
1004a738:	2608      	movs	r6, #8
1004a73a:	4034      	ands	r4, r6
1004a73c:	d10f      	bne.n	1004a75e <GAP_check_flags+0x5a>
1004a73e:	5c9e      	ldrb	r6, [r3, r2]
1004a740:	684c      	ldr	r4, [r1, #4]
1004a742:	8908      	ldrh	r0, [r1, #8]
1004a744:	4621      	mov	r1, r4
1004a746:	f000 f8bb 	bl	1004a8c0 <GAP_search_flags_index>
1004a74a:	4919      	ldr	r1, [pc, #100]	@ (1004a7b0 <__arm_cp.5_2>)
1004a74c:	4288      	cmp	r0, r1
1004a74e:	d008      	beq.n	1004a762 <GAP_check_flags+0x5e>
1004a750:	1900      	adds	r0, r0, r4
1004a752:	7881      	ldrb	r1, [r0, #2]
1004a754:	0748      	lsls	r0, r1, #29
1004a756:	d40b      	bmi.n	1004a770 <GAP_check_flags+0x6c>
1004a758:	20d4      	movs	r0, #212	@ 0xd4
1004a75a:	e000      	b.n	1004a75e <GAP_check_flags+0x5a>
1004a75c:	4628      	mov	r0, r5
1004a75e:	b2c0      	uxtb	r0, r0
1004a760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004a762:	2e03      	cmp	r6, #3
1004a764:	4628      	mov	r0, r5
1004a766:	d8fa      	bhi.n	1004a75e <GAP_check_flags+0x5a>
1004a768:	00f1      	lsls	r1, r6, #3
1004a76a:	4812      	ldr	r0, [pc, #72]	@ (1004a7b4 <__arm_cp.5_3>)
1004a76c:	40c8      	lsrs	r0, r1
1004a76e:	e7f6      	b.n	1004a75e <GAP_check_flags+0x5a>
1004a770:	2e03      	cmp	r6, #3
1004a772:	4628      	mov	r0, r5
1004a774:	d8f3      	bhi.n	1004a75e <GAP_check_flags+0x5a>
1004a776:	46c0      	nop			@ (mov r8, r8)
1004a778:	447e      	add	r6, pc
1004a77a:	7936      	ldrb	r6, [r6, #4]
1004a77c:	0076      	lsls	r6, r6, #1
1004a77e:	44b7      	add	pc, r6
1004a780:	010d0601 	.word	0x010d0601
1004a784:	2003      	movs	r0, #3
1004a786:	4001      	ands	r1, r0
1004a788:	d105      	bne.n	1004a796 <GAP_check_flags+0x92>
1004a78a:	4608      	mov	r0, r1
1004a78c:	e7e7      	b.n	1004a75e <GAP_check_flags+0x5a>
1004a78e:	2003      	movs	r0, #3
1004a790:	4001      	ands	r1, r0
1004a792:	2901      	cmp	r1, #1
1004a794:	d006      	beq.n	1004a7a4 <GAP_check_flags+0xa0>
1004a796:	202b      	movs	r0, #43	@ 0x2b
1004a798:	43c0      	mvns	r0, r0
1004a79a:	e7e0      	b.n	1004a75e <GAP_check_flags+0x5a>
1004a79c:	2003      	movs	r0, #3
1004a79e:	4001      	ands	r1, r0
1004a7a0:	2902      	cmp	r1, #2
1004a7a2:	d1f8      	bne.n	1004a796 <GAP_check_flags+0x92>
1004a7a4:	2000      	movs	r0, #0
1004a7a6:	e7da      	b.n	1004a75e <GAP_check_flags+0x5a>

1004a7a8 <__arm_cp.5_0>:
1004a7a8:	200006d8 	.word	0x200006d8

1004a7ac <__arm_cp.5_1>:
1004a7ac:	200006c0 	.word	0x200006c0

1004a7b0 <__arm_cp.5_2>:
1004a7b0:	0000ffff 	.word	0x0000ffff

1004a7b4 <__arm_cp.5_3>:
1004a7b4:	00d4d400 	.word	0x00d4d400

1004a7b8 <GAP_set_discoverability_mode>:
1004a7b8:	b570      	push	{r4, r5, r6, lr}
1004a7ba:	4603      	mov	r3, r0
1004a7bc:	2900      	cmp	r1, #0
1004a7be:	d100      	bne.n	1004a7c2 <GAP_set_discoverability_mode+0xa>
1004a7c0:	460a      	mov	r2, r1
1004a7c2:	4829      	ldr	r0, [pc, #164]	@ (1004a868 <__arm_cp.6_0>)
1004a7c4:	6800      	ldr	r0, [r0, #0]
1004a7c6:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1004a7c8:	2b01      	cmp	r3, #1
1004a7ca:	d10c      	bne.n	1004a7e6 <GAP_set_discoverability_mode+0x2e>
1004a7cc:	2314      	movs	r3, #20
1004a7ce:	4353      	muls	r3, r2
1004a7d0:	5cca      	ldrb	r2, [r1, r3]
1004a7d2:	2a01      	cmp	r2, #1
1004a7d4:	d033      	beq.n	1004a83e <GAP_set_discoverability_mode+0x86>
1004a7d6:	2a02      	cmp	r2, #2
1004a7d8:	d13e      	bne.n	1004a858 <GAP_set_discoverability_mode+0xa0>
1004a7da:	18ca      	adds	r2, r1, r3
1004a7dc:	7894      	ldrb	r4, [r2, #2]
1004a7de:	2004      	movs	r0, #4
1004a7e0:	4320      	orrs	r0, r4
1004a7e2:	7090      	strb	r0, [r2, #2]
1004a7e4:	e03a      	b.n	1004a85c <GAP_set_discoverability_mode+0xa4>
1004a7e6:	2314      	movs	r3, #20
1004a7e8:	4353      	muls	r3, r2
1004a7ea:	18c9      	adds	r1, r1, r3
1004a7ec:	1c8e      	adds	r6, r1, #2
1004a7ee:	7889      	ldrb	r1, [r1, #2]
1004a7f0:	0789      	lsls	r1, r1, #30
1004a7f2:	d521      	bpl.n	1004a838 <GAP_set_discoverability_mode+0x80>
1004a7f4:	2400      	movs	r4, #0
1004a7f6:	4621      	mov	r1, r4
1004a7f8:	f002 fd4f 	bl	1004d29a <CST_stop>
1004a7fc:	481b      	ldr	r0, [pc, #108]	@ (1004a86c <__arm_cp.6_1>)
1004a7fe:	6800      	ldr	r0, [r0, #0]
1004a800:	214e      	movs	r1, #78	@ 0x4e
1004a802:	5c40      	ldrb	r0, [r0, r1]
1004a804:	07c0      	lsls	r0, r0, #31
1004a806:	d017      	beq.n	1004a838 <GAP_set_discoverability_mode+0x80>
1004a808:	4819      	ldr	r0, [pc, #100]	@ (1004a870 <__arm_cp.6_2>)
1004a80a:	6800      	ldr	r0, [r0, #0]
1004a80c:	6980      	ldr	r0, [r0, #24]
1004a80e:	2244      	movs	r2, #68	@ 0x44
1004a810:	2502      	movs	r5, #2
1004a812:	4629      	mov	r1, r5
1004a814:	462b      	mov	r3, r5
1004a816:	f7ff fabb 	bl	10049d90 <aci_event_fifo_push_header>
1004a81a:	2800      	cmp	r0, #0
1004a81c:	d00c      	beq.n	1004a838 <GAP_set_discoverability_mode+0x80>
1004a81e:	4601      	mov	r1, r0
1004a820:	7185      	strb	r5, [r0, #6]
1004a822:	71c4      	strb	r4, [r0, #7]
1004a824:	7204      	strb	r4, [r0, #8]
1004a826:	20ff      	movs	r0, #255	@ 0xff
1004a828:	7148      	strb	r0, [r1, #5]
1004a82a:	2082      	movs	r0, #130	@ 0x82
1004a82c:	7108      	strb	r0, [r1, #4]
1004a82e:	2004      	movs	r0, #4
1004a830:	7248      	strb	r0, [r1, #9]
1004a832:	4628      	mov	r0, r5
1004a834:	f7ff fb49 	bl	10049eca <aci_event_fifo_push>
1004a838:	2000      	movs	r0, #0
1004a83a:	7030      	strb	r0, [r6, #0]
1004a83c:	bd70      	pop	{r4, r5, r6, pc}
1004a83e:	18c9      	adds	r1, r1, r3
1004a840:	784a      	ldrb	r2, [r1, #1]
1004a842:	788b      	ldrb	r3, [r1, #2]
1004a844:	4313      	orrs	r3, r2
1004a846:	2202      	movs	r2, #2
1004a848:	431a      	orrs	r2, r3
1004a84a:	708a      	strb	r2, [r1, #2]
1004a84c:	2100      	movs	r1, #0
1004a84e:	2201      	movs	r2, #1
1004a850:	4b08      	ldr	r3, [pc, #32]	@ (1004a874 <__arm_cp.6_3>)
1004a852:	f002 fd58 	bl	1004d306 <CST_start>
1004a856:	bd70      	pop	{r4, r5, r6, pc}
1004a858:	18c8      	adds	r0, r1, r3
1004a85a:	7880      	ldrb	r0, [r0, #2]
1004a85c:	18c9      	adds	r1, r1, r3
1004a85e:	784a      	ldrb	r2, [r1, #1]
1004a860:	4302      	orrs	r2, r0
1004a862:	708a      	strb	r2, [r1, #2]
1004a864:	bd70      	pop	{r4, r5, r6, pc}
1004a866:	46c0      	nop			@ (mov r8, r8)

1004a868 <__arm_cp.6_0>:
1004a868:	200006c0 	.word	0x200006c0

1004a86c <__arm_cp.6_1>:
1004a86c:	200006c8 	.word	0x200006c8

1004a870 <__arm_cp.6_2>:
1004a870:	200006bc 	.word	0x200006bc

1004a874 <__arm_cp.6_3>:
1004a874:	0002bf20 	.word	0x0002bf20

1004a878 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
1004a878:	b580      	push	{r7, lr}
1004a87a:	f000 f801 	bl	1004a880 <GAP_suspend_resume_active_advertising_sets_legacy>
1004a87e:	bd80      	pop	{r7, pc}

1004a880 <GAP_suspend_resume_active_advertising_sets_legacy>:
1004a880:	b580      	push	{r7, lr}
1004a882:	4905      	ldr	r1, [pc, #20]	@ (1004a898 <__arm_cp.10_0>)
1004a884:	6809      	ldr	r1, [r1, #0]
1004a886:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1004a888:	7cc9      	ldrb	r1, [r1, #19]
1004a88a:	2901      	cmp	r1, #1
1004a88c:	d102      	bne.n	1004a894 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
1004a88e:	f000 f8da 	bl	1004aa46 <hci_le_set_advertising_enable>
1004a892:	bd80      	pop	{r7, pc}
1004a894:	2000      	movs	r0, #0
1004a896:	bd80      	pop	{r7, pc}

1004a898 <__arm_cp.10_0>:
1004a898:	200006c0 	.word	0x200006c0

1004a89c <GAP_set_legacy_advertising_data>:
1004a89c:	b5b0      	push	{r4, r5, r7, lr}
1004a89e:	460c      	mov	r4, r1
1004a8a0:	4605      	mov	r5, r0
1004a8a2:	b2c0      	uxtb	r0, r0
1004a8a4:	f001 f8d2 	bl	1004ba4c <ll_set_legacy_advertising_data_ptr>
1004a8a8:	2800      	cmp	r0, #0
1004a8aa:	d000      	beq.n	1004a8ae <GAP_set_legacy_advertising_data+0x12>
1004a8ac:	bdb0      	pop	{r4, r5, r7, pc}
1004a8ae:	4903      	ldr	r1, [pc, #12]	@ (1004a8bc <__arm_cp.11_0>)
1004a8b0:	6809      	ldr	r1, [r1, #0]
1004a8b2:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1004a8b4:	810d      	strh	r5, [r1, #8]
1004a8b6:	604c      	str	r4, [r1, #4]
1004a8b8:	bdb0      	pop	{r4, r5, r7, pc}
1004a8ba:	46c0      	nop			@ (mov r8, r8)

1004a8bc <__arm_cp.11_0>:
1004a8bc:	200006c0 	.word	0x200006c0

1004a8c0 <GAP_search_flags_index>:
1004a8c0:	b5b0      	push	{r4, r5, r7, lr}
1004a8c2:	4a0a      	ldr	r2, [pc, #40]	@ (1004a8ec <__arm_cp.15_0>)
1004a8c4:	2803      	cmp	r0, #3
1004a8c6:	d30f      	bcc.n	1004a8e8 <GAP_search_flags_index+0x28>
1004a8c8:	2300      	movs	r3, #0
1004a8ca:	b29d      	uxth	r5, r3
1004a8cc:	5d4c      	ldrb	r4, [r1, r5]
1004a8ce:	2c02      	cmp	r4, #2
1004a8d0:	d103      	bne.n	1004a8da <GAP_search_flags_index+0x1a>
1004a8d2:	186d      	adds	r5, r5, r1
1004a8d4:	786d      	ldrb	r5, [r5, #1]
1004a8d6:	2d01      	cmp	r5, #1
1004a8d8:	d005      	beq.n	1004a8e6 <GAP_search_flags_index+0x26>
1004a8da:	191b      	adds	r3, r3, r4
1004a8dc:	1c5b      	adds	r3, r3, #1
1004a8de:	b29c      	uxth	r4, r3
1004a8e0:	4284      	cmp	r4, r0
1004a8e2:	d3f2      	bcc.n	1004a8ca <GAP_search_flags_index+0xa>
1004a8e4:	e000      	b.n	1004a8e8 <GAP_search_flags_index+0x28>
1004a8e6:	461a      	mov	r2, r3
1004a8e8:	b290      	uxth	r0, r2
1004a8ea:	bdb0      	pop	{r4, r5, r7, pc}

1004a8ec <__arm_cp.15_0>:
1004a8ec:	0000ffff 	.word	0x0000ffff

1004a8f0 <GAP_check_adv_status>:
1004a8f0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004a8f2:	460c      	mov	r4, r1
1004a8f4:	4605      	mov	r5, r0
1004a8f6:	481c      	ldr	r0, [pc, #112]	@ (1004a968 <__arm_cp.16_0>)
1004a8f8:	6806      	ldr	r6, [r0, #0]
1004a8fa:	f7ff fd4d 	bl	1004a398 <gap_extended_adv_scan_supported>
1004a8fe:	491b      	ldr	r1, [pc, #108]	@ (1004a96c <__arm_cp.16_1>)
1004a900:	7e8a      	ldrb	r2, [r1, #26]
1004a902:	2100      	movs	r1, #0
1004a904:	9501      	str	r5, [sp, #4]
1004a906:	7029      	strb	r1, [r5, #0]
1004a908:	2301      	movs	r3, #1
1004a90a:	9402      	str	r4, [sp, #8]
1004a90c:	7023      	strb	r3, [r4, #0]
1004a90e:	2800      	cmp	r0, #0
1004a910:	d000      	beq.n	1004a914 <GAP_check_adv_status+0x24>
1004a912:	4613      	mov	r3, r2
1004a914:	b2d8      	uxtb	r0, r3
1004a916:	2714      	movs	r7, #20
1004a918:	4347      	muls	r7, r0
1004a91a:	4608      	mov	r0, r1
1004a91c:	460b      	mov	r3, r1
1004a91e:	460a      	mov	r2, r1
1004a920:	428f      	cmp	r7, r1
1004a922:	d011      	beq.n	1004a948 <GAP_check_adv_status+0x58>
1004a924:	6d74      	ldr	r4, [r6, #84]	@ 0x54
1004a926:	1864      	adds	r4, r4, r1
1004a928:	7ca5      	ldrb	r5, [r4, #18]
1004a92a:	2d01      	cmp	r5, #1
1004a92c:	d10a      	bne.n	1004a944 <GAP_check_adv_status+0x54>
1004a92e:	7ce5      	ldrb	r5, [r4, #19]
1004a930:	2d00      	cmp	r5, #0
1004a932:	d007      	beq.n	1004a944 <GAP_check_adv_status+0x54>
1004a934:	2d02      	cmp	r5, #2
1004a936:	d100      	bne.n	1004a93a <GAP_check_adv_status+0x4a>
1004a938:	2301      	movs	r3, #1
1004a93a:	78a4      	ldrb	r4, [r4, #2]
1004a93c:	2001      	movs	r0, #1
1004a93e:	07a4      	lsls	r4, r4, #30
1004a940:	d500      	bpl.n	1004a944 <GAP_check_adv_status+0x54>
1004a942:	4602      	mov	r2, r0
1004a944:	3114      	adds	r1, #20
1004a946:	e7eb      	b.n	1004a920 <GAP_check_adv_status+0x30>
1004a948:	2801      	cmp	r0, #1
1004a94a:	d102      	bne.n	1004a952 <GAP_check_adv_status+0x62>
1004a94c:	2101      	movs	r1, #1
1004a94e:	9c01      	ldr	r4, [sp, #4]
1004a950:	7021      	strb	r1, [r4, #0]
1004a952:	2b01      	cmp	r3, #1
1004a954:	d002      	beq.n	1004a95c <GAP_check_adv_status+0x6c>
1004a956:	b2d1      	uxtb	r1, r2
1004a958:	2901      	cmp	r1, #1
1004a95a:	d102      	bne.n	1004a962 <GAP_check_adv_status+0x72>
1004a95c:	2100      	movs	r1, #0
1004a95e:	9a02      	ldr	r2, [sp, #8]
1004a960:	7011      	strb	r1, [r2, #0]
1004a962:	b2c0      	uxtb	r0, r0
1004a964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004a966:	46c0      	nop			@ (mov r8, r8)

1004a968 <__arm_cp.16_0>:
1004a968:	200006c0 	.word	0x200006c0

1004a96c <__arm_cp.16_1>:
1004a96c:	200006d8 	.word	0x200006d8

1004a970 <GAP_ResumeAdvertising_ucfg_weak>:
1004a970:	b580      	push	{r7, lr}
1004a972:	2001      	movs	r0, #1
1004a974:	f7ff ff84 	bl	1004a880 <GAP_suspend_resume_active_advertising_sets_legacy>
1004a978:	bd80      	pop	{r7, pc}

1004a97a <GAT_att_cmn_init_ucfg_weak>:
1004a97a:	4770      	bx	lr

1004a97c <GAT_att_cmn_timer_expire_tsk_ucfg_weak>:
1004a97c:	4770      	bx	lr

1004a97e <GAT_att_cmn_tx_pool_evt_tsk_ucfg_weak>:
1004a97e:	4770      	bx	lr

1004a980 <GAT_att_srv_process_rx_pckt_tsk_ucfg_weak>:
1004a980:	4770      	bx	lr

1004a982 <GAT_srv_db_hash_tsk_ucfg_weak>:
1004a982:	4770      	bx	lr

1004a984 <GAT_srv_send_srv_change_tsk_ucfg_weak>:
1004a984:	4770      	bx	lr

1004a986 <hci_le_set_advertising_parameters>:
1004a986:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a988:	b089      	sub	sp, #36	@ 0x24
1004a98a:	461d      	mov	r5, r3
1004a98c:	4616      	mov	r6, r2
1004a98e:	460f      	mov	r7, r1
1004a990:	9004      	str	r0, [sp, #16]
1004a992:	2002      	movs	r0, #2
1004a994:	2401      	movs	r4, #1
1004a996:	4621      	mov	r1, r4
1004a998:	f000 f8c6 	bl	1004ab28 <hci_get_set_legacy_ext_flag>
1004a99c:	2800      	cmp	r0, #0
1004a99e:	d150      	bne.n	1004aa42 <hci_le_set_advertising_parameters+0xbc>
1004a9a0:	9703      	str	r7, [sp, #12]
1004a9a2:	2012      	movs	r0, #18
1004a9a4:	2e04      	cmp	r6, #4
1004a9a6:	d84c      	bhi.n	1004aa42 <hci_le_set_advertising_parameters+0xbc>
1004a9a8:	9002      	str	r0, [sp, #8]
1004a9aa:	f000 f8e2 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004a9ae:	2e01      	cmp	r6, #1
1004a9b0:	d803      	bhi.n	1004a9ba <hci_le_set_advertising_parameters+0x34>
1004a9b2:	2800      	cmp	r0, #0
1004a9b4:	d101      	bne.n	1004a9ba <hci_le_set_advertising_parameters+0x34>
1004a9b6:	2011      	movs	r0, #17
1004a9b8:	e043      	b.n	1004aa42 <hci_le_set_advertising_parameters+0xbc>
1004a9ba:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004a9bc:	9000      	str	r0, [sp, #0]
1004a9be:	9810      	ldr	r0, [sp, #64]	@ 0x40
1004a9c0:	9001      	str	r0, [sp, #4]
1004a9c2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1004a9c4:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004a9c6:	af05      	add	r7, sp, #20
1004a9c8:	7238      	strb	r0, [r7, #8]
1004a9ca:	71fd      	strb	r5, [r7, #7]
1004a9cc:	713e      	strb	r6, [r7, #4]
1004a9ce:	9803      	ldr	r0, [sp, #12]
1004a9d0:	8078      	strh	r0, [r7, #2]
1004a9d2:	9804      	ldr	r0, [sp, #16]
1004a9d4:	8038      	strh	r0, [r7, #0]
1004a9d6:	4638      	mov	r0, r7
1004a9d8:	3009      	adds	r0, #9
1004a9da:	2206      	movs	r2, #6
1004a9dc:	f7f7 f8e6 	bl	10041bac <BLEPLAT_MemCpy>
1004a9e0:	9900      	ldr	r1, [sp, #0]
1004a9e2:	71b9      	strb	r1, [r7, #6]
1004a9e4:	9801      	ldr	r0, [sp, #4]
1004a9e6:	7178      	strb	r0, [r7, #5]
1004a9e8:	7938      	ldrb	r0, [r7, #4]
1004a9ea:	2804      	cmp	r0, #4
1004a9ec:	d001      	beq.n	1004a9f2 <hci_le_set_advertising_parameters+0x6c>
1004a9ee:	2801      	cmp	r0, #1
1004a9f0:	d104      	bne.n	1004a9fc <hci_le_set_advertising_parameters+0x76>
1004a9f2:	a905      	add	r1, sp, #20
1004a9f4:	7a09      	ldrb	r1, [r1, #8]
1004a9f6:	2902      	cmp	r1, #2
1004a9f8:	d302      	bcc.n	1004aa00 <hci_le_set_advertising_parameters+0x7a>
1004a9fa:	e021      	b.n	1004aa40 <hci_le_set_advertising_parameters+0xba>
1004a9fc:	2903      	cmp	r1, #3
1004a9fe:	d81f      	bhi.n	1004aa40 <hci_le_set_advertising_parameters+0xba>
1004aa00:	2801      	cmp	r0, #1
1004aa02:	d10e      	bne.n	1004aa22 <hci_le_set_advertising_parameters+0x9c>
1004aa04:	f000 f8ab 	bl	1004ab5e <hci_le_check_own_address_type_max_value_ucfg_weak>
1004aa08:	a905      	add	r1, sp, #20
1004aa0a:	79c9      	ldrb	r1, [r1, #7]
1004aa0c:	4281      	cmp	r1, r0
1004aa0e:	d817      	bhi.n	1004aa40 <hci_le_set_advertising_parameters+0xba>
1004aa10:	a805      	add	r0, sp, #20
1004aa12:	7940      	ldrb	r0, [r0, #5]
1004aa14:	0740      	lsls	r0, r0, #29
1004aa16:	9802      	ldr	r0, [sp, #8]
1004aa18:	d013      	beq.n	1004aa42 <hci_le_set_advertising_parameters+0xbc>
1004aa1a:	a805      	add	r0, sp, #20
1004aa1c:	f000 fcf4 	bl	1004b408 <LL_LE_Set_Advertising_Parameters>
1004aa20:	e00f      	b.n	1004aa42 <hci_le_set_advertising_parameters+0xbc>
1004aa22:	a805      	add	r0, sp, #20
1004aa24:	8800      	ldrh	r0, [r0, #0]
1004aa26:	2820      	cmp	r0, #32
1004aa28:	d30a      	bcc.n	1004aa40 <hci_le_set_advertising_parameters+0xba>
1004aa2a:	03a1      	lsls	r1, r4, #14
1004aa2c:	4288      	cmp	r0, r1
1004aa2e:	d807      	bhi.n	1004aa40 <hci_le_set_advertising_parameters+0xba>
1004aa30:	aa05      	add	r2, sp, #20
1004aa32:	8852      	ldrh	r2, [r2, #2]
1004aa34:	2a20      	cmp	r2, #32
1004aa36:	d303      	bcc.n	1004aa40 <hci_le_set_advertising_parameters+0xba>
1004aa38:	428a      	cmp	r2, r1
1004aa3a:	d801      	bhi.n	1004aa40 <hci_le_set_advertising_parameters+0xba>
1004aa3c:	4290      	cmp	r0, r2
1004aa3e:	d9e1      	bls.n	1004aa04 <hci_le_set_advertising_parameters+0x7e>
1004aa40:	9802      	ldr	r0, [sp, #8]
1004aa42:	b009      	add	sp, #36	@ 0x24
1004aa44:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004aa46 <hci_le_set_advertising_enable>:
1004aa46:	b510      	push	{r4, lr}
1004aa48:	4604      	mov	r4, r0
1004aa4a:	2002      	movs	r0, #2
1004aa4c:	2101      	movs	r1, #1
1004aa4e:	f000 f86b 	bl	1004ab28 <hci_get_set_legacy_ext_flag>
1004aa52:	2800      	cmp	r0, #0
1004aa54:	d000      	beq.n	1004aa58 <hci_le_set_advertising_enable+0x12>
1004aa56:	bd10      	pop	{r4, pc}
1004aa58:	2c01      	cmp	r4, #1
1004aa5a:	d803      	bhi.n	1004aa64 <hci_le_set_advertising_enable+0x1e>
1004aa5c:	4620      	mov	r0, r4
1004aa5e:	f000 fd57 	bl	1004b510 <LL_LE_Set_Advertise_Enable>
1004aa62:	bd10      	pop	{r4, pc}
1004aa64:	2012      	movs	r0, #18
1004aa66:	bd10      	pop	{r4, pc}

1004aa68 <chc_csr_ucfg_weak>:
1004aa68:	2000      	movs	r0, #0
1004aa6a:	4770      	bx	lr

1004aa6c <HCI_Init>:
1004aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004aa6e:	4917      	ldr	r1, [pc, #92]	@ (1004aacc <__arm_cp.0_0>)
1004aa70:	6808      	ldr	r0, [r1, #0]
1004aa72:	460d      	mov	r5, r1
1004aa74:	2124      	movs	r1, #36	@ 0x24
1004aa76:	2400      	movs	r4, #0
1004aa78:	5444      	strb	r4, [r0, r1]
1004aa7a:	3025      	adds	r0, #37	@ 0x25
1004aa7c:	2211      	movs	r2, #17
1004aa7e:	4f14      	ldr	r7, [pc, #80]	@ (1004aad0 <__arm_cp.0_1>)
1004aa80:	4621      	mov	r1, r4
1004aa82:	47b8      	blx	r7
1004aa84:	6828      	ldr	r0, [r5, #0]
1004aa86:	3036      	adds	r0, #54	@ 0x36
1004aa88:	26ff      	movs	r6, #255	@ 0xff
1004aa8a:	2205      	movs	r2, #5
1004aa8c:	4631      	mov	r1, r6
1004aa8e:	47b8      	blx	r7
1004aa90:	6829      	ldr	r1, [r5, #0]
1004aa92:	203b      	movs	r0, #59	@ 0x3b
1004aa94:	231f      	movs	r3, #31
1004aa96:	540b      	strb	r3, [r1, r0]
1004aa98:	2201      	movs	r2, #1
1004aa9a:	0355      	lsls	r5, r2, #13
1004aa9c:	4608      	mov	r0, r1
1004aa9e:	303b      	adds	r0, #59	@ 0x3b
1004aaa0:	5285      	strh	r5, [r0, r2]
1004aaa2:	72c3      	strb	r3, [r0, #11]
1004aaa4:	3147      	adds	r1, #71	@ 0x47
1004aaa6:	2207      	movs	r2, #7
1004aaa8:	4608      	mov	r0, r1
1004aaaa:	4621      	mov	r1, r4
1004aaac:	47b8      	blx	r7
1004aaae:	4d07      	ldr	r5, [pc, #28]	@ (1004aacc <__arm_cp.0_0>)
1004aab0:	6828      	ldr	r0, [r5, #0]
1004aab2:	304e      	adds	r0, #78	@ 0x4e
1004aab4:	2208      	movs	r2, #8
1004aab6:	4631      	mov	r1, r6
1004aab8:	47b8      	blx	r7
1004aaba:	4806      	ldr	r0, [pc, #24]	@ (1004aad4 <__arm_cp.0_2>)
1004aabc:	6800      	ldr	r0, [r0, #0]
1004aabe:	2135      	movs	r1, #53	@ 0x35
1004aac0:	5444      	strb	r4, [r0, r1]
1004aac2:	6828      	ldr	r0, [r5, #0]
1004aac4:	4904      	ldr	r1, [pc, #16]	@ (1004aad8 <__arm_cp.0_3>)
1004aac6:	6201      	str	r1, [r0, #32]
1004aac8:	65c4      	str	r4, [r0, #92]	@ 0x5c
1004aaca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004aacc <__arm_cp.0_0>:
1004aacc:	200006c8 	.word	0x200006c8

1004aad0 <__arm_cp.0_1>:
1004aad0:	10041bcd 	.word	0x10041bcd

1004aad4 <__arm_cp.0_2>:
1004aad4:	200006b8 	.word	0x200006b8

1004aad8 <__arm_cp.0_3>:
1004aad8:	fffffdbe 	.word	0xfffffdbe

1004aadc <Controller_Process_Q_ucfg_weak>:
1004aadc:	4770      	bx	lr

1004aade <hci_le_set_random_address>:
1004aade:	b580      	push	{r7, lr}
1004aae0:	f000 ff26 	bl	1004b930 <LL_Set_Advertising_Set_Random_Address>
1004aae4:	bd80      	pop	{r7, pc}
	...

1004aae8 <hci_set_event_mask>:
1004aae8:	b510      	push	{r4, lr}
1004aaea:	2136      	movs	r1, #54	@ 0x36
1004aaec:	4a05      	ldr	r2, [pc, #20]	@ (1004ab04 <__arm_cp.14_0>)
1004aaee:	293e      	cmp	r1, #62	@ 0x3e
1004aaf0:	d006      	beq.n	1004ab00 <hci_set_event_mask+0x18>
1004aaf2:	1843      	adds	r3, r0, r1
1004aaf4:	3b36      	subs	r3, #54	@ 0x36
1004aaf6:	781b      	ldrb	r3, [r3, #0]
1004aaf8:	6814      	ldr	r4, [r2, #0]
1004aafa:	5463      	strb	r3, [r4, r1]
1004aafc:	1c49      	adds	r1, r1, #1
1004aafe:	e7f6      	b.n	1004aaee <hci_set_event_mask+0x6>
1004ab00:	2000      	movs	r0, #0
1004ab02:	bd10      	pop	{r4, pc}

1004ab04 <__arm_cp.14_0>:
1004ab04:	200006c8 	.word	0x200006c8

1004ab08 <hci_le_set_event_mask>:
1004ab08:	b510      	push	{r4, lr}
1004ab0a:	2146      	movs	r1, #70	@ 0x46
1004ab0c:	4a05      	ldr	r2, [pc, #20]	@ (1004ab24 <__arm_cp.16_0>)
1004ab0e:	294e      	cmp	r1, #78	@ 0x4e
1004ab10:	d006      	beq.n	1004ab20 <hci_le_set_event_mask+0x18>
1004ab12:	1843      	adds	r3, r0, r1
1004ab14:	3b46      	subs	r3, #70	@ 0x46
1004ab16:	781b      	ldrb	r3, [r3, #0]
1004ab18:	6814      	ldr	r4, [r2, #0]
1004ab1a:	5463      	strb	r3, [r4, r1]
1004ab1c:	1c49      	adds	r1, r1, #1
1004ab1e:	e7f6      	b.n	1004ab0e <hci_le_set_event_mask+0x6>
1004ab20:	2000      	movs	r0, #0
1004ab22:	bd10      	pop	{r4, pc}

1004ab24 <__arm_cp.16_0>:
1004ab24:	200006c8 	.word	0x200006c8

1004ab28 <hci_get_set_legacy_ext_flag>:
1004ab28:	4a05      	ldr	r2, [pc, #20]	@ (1004ab40 <__arm_cp.18_0>)
1004ab2a:	6812      	ldr	r2, [r2, #0]
1004ab2c:	2335      	movs	r3, #53	@ 0x35
1004ab2e:	5cd3      	ldrb	r3, [r2, r3]
1004ab30:	4203      	tst	r3, r0
1004ab32:	d001      	beq.n	1004ab38 <hci_get_set_legacy_ext_flag+0x10>
1004ab34:	200c      	movs	r0, #12
1004ab36:	4770      	bx	lr
1004ab38:	3235      	adds	r2, #53	@ 0x35
1004ab3a:	7011      	strb	r1, [r2, #0]
1004ab3c:	2000      	movs	r0, #0
1004ab3e:	4770      	bx	lr

1004ab40 <__arm_cp.18_0>:
1004ab40:	200006b8 	.word	0x200006b8

1004ab44 <hci_check_legacy_ext_flag>:
1004ab44:	4903      	ldr	r1, [pc, #12]	@ (1004ab54 <__arm_cp.25_0>)
1004ab46:	6809      	ldr	r1, [r1, #0]
1004ab48:	2235      	movs	r2, #53	@ 0x35
1004ab4a:	5c89      	ldrb	r1, [r1, r2]
1004ab4c:	4008      	ands	r0, r1
1004ab4e:	1e41      	subs	r1, r0, #1
1004ab50:	4188      	sbcs	r0, r1
1004ab52:	4770      	bx	lr

1004ab54 <__arm_cp.25_0>:
1004ab54:	200006b8 	.word	0x200006b8

1004ab58 <LLC_offline_control_procedures_processing_ucfg_weak>:
1004ab58:	4770      	bx	lr

1004ab5a <cte_csr_ucfg_weak>:
1004ab5a:	2000      	movs	r0, #0
1004ab5c:	4770      	bx	lr

1004ab5e <hci_le_check_own_address_type_max_value_ucfg_weak>:
1004ab5e:	2001      	movs	r0, #1
1004ab60:	4770      	bx	lr

1004ab62 <data_length_extension_csr>:
1004ab62:	2001      	movs	r0, #1
1004ab64:	4770      	bx	lr

1004ab66 <pcl_csr_ucfg_weak>:
1004ab66:	2000      	movs	r0, #0
1004ab68:	4770      	bx	lr

1004ab6a <phy_upd_csr>:
1004ab6a:	2001      	movs	r0, #1
1004ab6c:	4770      	bx	lr

1004ab6e <scan_csr_ucfg_weak>:
1004ab6e:	2000      	movs	r0, #0
1004ab70:	4770      	bx	lr

1004ab72 <conn_supp_csr_ucfg_weak>:
1004ab72:	2000      	movs	r0, #0
1004ab74:	4770      	bx	lr

1004ab76 <l2c_cos_csr_ucfg_weak>:
1004ab76:	2000      	movs	r0, #0
1004ab78:	4770      	bx	lr

1004ab7a <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
1004ab7a:	4770      	bx	lr

1004ab7c <L2C_init_ucfg_weak>:
1004ab7c:	2000      	movs	r0, #0
1004ab7e:	4770      	bx	lr

1004ab80 <llc_conn_get_cntxt_p>:
1004ab80:	4803      	ldr	r0, [pc, #12]	@ (1004ab90 <__arm_cp.0_0>)
1004ab82:	6800      	ldr	r0, [r0, #0]
1004ab84:	219c      	movs	r1, #156	@ 0x9c
1004ab86:	5840      	ldr	r0, [r0, r1]
1004ab88:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004ab8a:	6800      	ldr	r0, [r0, #0]
1004ab8c:	4770      	bx	lr
1004ab8e:	46c0      	nop			@ (mov r8, r8)

1004ab90 <__arm_cp.0_0>:
1004ab90:	200006c8 	.word	0x200006c8

1004ab94 <llc_conn_get_cntxt_per_p>:
1004ab94:	214d      	movs	r1, #77	@ 0x4d
1004ab96:	0089      	lsls	r1, r1, #2
1004ab98:	4341      	muls	r1, r0
1004ab9a:	4804      	ldr	r0, [pc, #16]	@ (1004abac <__arm_cp.1_0>)
1004ab9c:	6800      	ldr	r0, [r0, #0]
1004ab9e:	229c      	movs	r2, #156	@ 0x9c
1004aba0:	5880      	ldr	r0, [r0, r2]
1004aba2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004aba4:	6840      	ldr	r0, [r0, #4]
1004aba6:	1840      	adds	r0, r0, r1
1004aba8:	4770      	bx	lr
1004abaa:	46c0      	nop			@ (mov r8, r8)

1004abac <__arm_cp.1_0>:
1004abac:	200006c8 	.word	0x200006c8

1004abb0 <llc_conn_mem_allocate>:
1004abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004abb2:	b085      	sub	sp, #20
1004abb4:	2b01      	cmp	r3, #1
1004abb6:	d000      	beq.n	1004abba <llc_conn_mem_allocate+0xa>
1004abb8:	e082      	b.n	1004acc0 <llc_conn_mem_allocate+0x110>
1004abba:	ab02      	add	r3, sp, #8
1004abbc:	c307      	stmia	r3!, {r0, r1, r2}
1004abbe:	4841      	ldr	r0, [pc, #260]	@ (1004acc4 <__arm_cp.10_0>)
1004abc0:	7fc1      	ldrb	r1, [r0, #31]
1004abc2:	9101      	str	r1, [sp, #4]
1004abc4:	7ac4      	ldrb	r4, [r0, #11]
1004abc6:	9400      	str	r4, [sp, #0]
1004abc8:	2601      	movs	r6, #1
1004abca:	2124      	movs	r1, #36	@ 0x24
1004abcc:	4a3e      	ldr	r2, [pc, #248]	@ (1004acc8 <__arm_cp.10_1>)
1004abce:	4630      	mov	r0, r6
1004abd0:	4790      	blx	r2
1004abd2:	493e      	ldr	r1, [pc, #248]	@ (1004accc <__arm_cp.10_2>)
1004abd4:	6809      	ldr	r1, [r1, #0]
1004abd6:	279c      	movs	r7, #156	@ 0x9c
1004abd8:	59c9      	ldr	r1, [r1, r7]
1004abda:	63c8      	str	r0, [r1, #60]	@ 0x3c
1004abdc:	2538      	movs	r5, #56	@ 0x38
1004abde:	4630      	mov	r0, r6
1004abe0:	4629      	mov	r1, r5
1004abe2:	4a39      	ldr	r2, [pc, #228]	@ (1004acc8 <__arm_cp.10_1>)
1004abe4:	4790      	blx	r2
1004abe6:	4939      	ldr	r1, [pc, #228]	@ (1004accc <__arm_cp.10_2>)
1004abe8:	6809      	ldr	r1, [r1, #0]
1004abea:	59c9      	ldr	r1, [r1, r7]
1004abec:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004abee:	6008      	str	r0, [r1, #0]
1004abf0:	204d      	movs	r0, #77	@ 0x4d
1004abf2:	0081      	lsls	r1, r0, #2
1004abf4:	4620      	mov	r0, r4
1004abf6:	4c34      	ldr	r4, [pc, #208]	@ (1004acc8 <__arm_cp.10_1>)
1004abf8:	47a0      	blx	r4
1004abfa:	4934      	ldr	r1, [pc, #208]	@ (1004accc <__arm_cp.10_2>)
1004abfc:	6809      	ldr	r1, [r1, #0]
1004abfe:	59c9      	ldr	r1, [r1, r7]
1004ac00:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004ac02:	6048      	str	r0, [r1, #4]
1004ac04:	9801      	ldr	r0, [sp, #4]
1004ac06:	4086      	lsls	r6, r0
1004ac08:	b2f0      	uxtb	r0, r6
1004ac0a:	2108      	movs	r1, #8
1004ac0c:	47a0      	blx	r4
1004ac0e:	492f      	ldr	r1, [pc, #188]	@ (1004accc <__arm_cp.10_2>)
1004ac10:	6809      	ldr	r1, [r1, #0]
1004ac12:	59c9      	ldr	r1, [r1, r7]
1004ac14:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004ac16:	6809      	ldr	r1, [r1, #0]
1004ac18:	2228      	movs	r2, #40	@ 0x28
1004ac1a:	2300      	movs	r3, #0
1004ac1c:	548b      	strb	r3, [r1, r2]
1004ac1e:	6248      	str	r0, [r1, #36]	@ 0x24
1004ac20:	3128      	adds	r1, #40	@ 0x28
1004ac22:	704e      	strb	r6, [r1, #1]
1004ac24:	9c00      	ldr	r4, [sp, #0]
1004ac26:	2013      	movs	r0, #19
1004ac28:	2104      	movs	r1, #4
1004ac2a:	4e27      	ldr	r6, [pc, #156]	@ (1004acc8 <__arm_cp.10_1>)
1004ac2c:	47b0      	blx	r6
1004ac2e:	4927      	ldr	r1, [pc, #156]	@ (1004accc <__arm_cp.10_2>)
1004ac30:	6809      	ldr	r1, [r1, #0]
1004ac32:	59c9      	ldr	r1, [r1, r7]
1004ac34:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004ac36:	6108      	str	r0, [r1, #16]
1004ac38:	4620      	mov	r0, r4
1004ac3a:	4629      	mov	r1, r5
1004ac3c:	47b0      	blx	r6
1004ac3e:	4633      	mov	r3, r6
1004ac40:	4a22      	ldr	r2, [pc, #136]	@ (1004accc <__arm_cp.10_2>)
1004ac42:	6811      	ldr	r1, [r2, #0]
1004ac44:	59c9      	ldr	r1, [r1, r7]
1004ac46:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004ac48:	6088      	str	r0, [r1, #8]
1004ac4a:	4626      	mov	r6, r4
1004ac4c:	4620      	mov	r0, r4
1004ac4e:	4629      	mov	r1, r5
1004ac50:	4615      	mov	r5, r2
1004ac52:	4798      	blx	r3
1004ac54:	6829      	ldr	r1, [r5, #0]
1004ac56:	59c9      	ldr	r1, [r1, r7]
1004ac58:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004ac5a:	60c8      	str	r0, [r1, #12]
1004ac5c:	9802      	ldr	r0, [sp, #8]
1004ac5e:	2801      	cmp	r0, #1
1004ac60:	d107      	bne.n	1004ac72 <llc_conn_mem_allocate+0xc2>
1004ac62:	210e      	movs	r1, #14
1004ac64:	4630      	mov	r0, r6
1004ac66:	f001 ffc7 	bl	1004cbf8 <csmem_mem_0_assign>
1004ac6a:	6829      	ldr	r1, [r5, #0]
1004ac6c:	59c9      	ldr	r1, [r1, r7]
1004ac6e:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004ac70:	6148      	str	r0, [r1, #20]
1004ac72:	9803      	ldr	r0, [sp, #12]
1004ac74:	2801      	cmp	r0, #1
1004ac76:	d107      	bne.n	1004ac88 <llc_conn_mem_allocate+0xd8>
1004ac78:	2108      	movs	r1, #8
1004ac7a:	4630      	mov	r0, r6
1004ac7c:	f001 ffbc 	bl	1004cbf8 <csmem_mem_0_assign>
1004ac80:	6829      	ldr	r1, [r5, #0]
1004ac82:	59c9      	ldr	r1, [r1, r7]
1004ac84:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004ac86:	6188      	str	r0, [r1, #24]
1004ac88:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1004ac8a:	9804      	ldr	r0, [sp, #16]
1004ac8c:	2801      	cmp	r0, #1
1004ac8e:	d10d      	bne.n	1004acac <llc_conn_mem_allocate+0xfc>
1004ac90:	2120      	movs	r1, #32
1004ac92:	4630      	mov	r0, r6
1004ac94:	f001 ffb0 	bl	1004cbf8 <csmem_mem_0_assign>
1004ac98:	6829      	ldr	r1, [r5, #0]
1004ac9a:	59c9      	ldr	r1, [r1, r7]
1004ac9c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004ac9e:	61c8      	str	r0, [r1, #28]
1004aca0:	2001      	movs	r0, #1
1004aca2:	2111      	movs	r1, #17
1004aca4:	f001 ffa8 	bl	1004cbf8 <csmem_mem_0_assign>
1004aca8:	6829      	ldr	r1, [r5, #0]
1004acaa:	6648      	str	r0, [r1, #100]	@ 0x64
1004acac:	2c01      	cmp	r4, #1
1004acae:	d107      	bne.n	1004acc0 <llc_conn_mem_allocate+0x110>
1004acb0:	211c      	movs	r1, #28
1004acb2:	4630      	mov	r0, r6
1004acb4:	f001 ffa0 	bl	1004cbf8 <csmem_mem_0_assign>
1004acb8:	6829      	ldr	r1, [r5, #0]
1004acba:	59c9      	ldr	r1, [r1, r7]
1004acbc:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004acbe:	6208      	str	r0, [r1, #32]
1004acc0:	b005      	add	sp, #20
1004acc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004acc4 <__arm_cp.10_0>:
1004acc4:	200006d8 	.word	0x200006d8

1004acc8 <__arm_cp.10_1>:
1004acc8:	1004cbf9 	.word	0x1004cbf9

1004accc <__arm_cp.10_2>:
1004accc:	200006c8 	.word	0x200006c8

1004acd0 <llc_conn_list_search_address>:
1004acd0:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1004acd2:	460c      	mov	r4, r1
1004acd4:	4605      	mov	r5, r0
1004acd6:	f7ff ff53 	bl	1004ab80 <llc_conn_get_cntxt_p>
1004acda:	2136      	movs	r1, #54	@ 0x36
1004acdc:	5c40      	ldrb	r0, [r0, r1]
1004acde:	2800      	cmp	r0, #0
1004ace0:	d001      	beq.n	1004ace6 <llc_conn_list_search_address+0x16>
1004ace2:	2000      	movs	r0, #0
1004ace4:	e011      	b.n	1004ad0a <llc_conn_list_search_address+0x3a>
1004ace6:	480a      	ldr	r0, [pc, #40]	@ (1004ad10 <__arm_cp.26_0>)
1004ace8:	6800      	ldr	r0, [r0, #0]
1004acea:	219c      	movs	r1, #156	@ 0x9c
1004acec:	5840      	ldr	r0, [r0, r1]
1004acee:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004acf0:	6801      	ldr	r1, [r0, #0]
1004acf2:	6a48      	ldr	r0, [r1, #36]	@ 0x24
1004acf4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
1004acf6:	aa03      	add	r2, sp, #12
1004acf8:	2300      	movs	r3, #0
1004acfa:	9300      	str	r3, [sp, #0]
1004acfc:	9201      	str	r2, [sp, #4]
1004acfe:	22fe      	movs	r2, #254	@ 0xfe
1004ad00:	4395      	bics	r5, r2
1004ad02:	462a      	mov	r2, r5
1004ad04:	4623      	mov	r3, r4
1004ad06:	f002 fbdb 	bl	1004d4c0 <addr8_list_search>
1004ad0a:	b004      	add	sp, #16
1004ad0c:	bdb0      	pop	{r4, r5, r7, pc}
1004ad0e:	46c0      	nop			@ (mov r8, r8)

1004ad10 <__arm_cp.26_0>:
1004ad10:	200006c8 	.word	0x200006c8

1004ad14 <llc_conn_push_connection_complete_event>:
1004ad14:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ad16:	b08d      	sub	sp, #52	@ 0x34
1004ad18:	4604      	mov	r4, r0
1004ad1a:	4895      	ldr	r0, [pc, #596]	@ (1004af70 <__arm_cp.28_0>)
1004ad1c:	6800      	ldr	r0, [r0, #0]
1004ad1e:	212c      	movs	r1, #44	@ 0x2c
1004ad20:	5c40      	ldrb	r0, [r0, r1]
1004ad22:	07c0      	lsls	r0, r0, #31
1004ad24:	0ec5      	lsrs	r5, r0, #27
1004ad26:	206f      	movs	r0, #111	@ 0x6f
1004ad28:	43c6      	mvns	r6, r0
1004ad2a:	406e      	eors	r6, r5
1004ad2c:	f000 f93c 	bl	1004afa8 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004ad30:	4990      	ldr	r1, [pc, #576]	@ (1004af74 <__arm_cp.28_1>)
1004ad32:	6809      	ldr	r1, [r1, #0]
1004ad34:	223d      	movs	r2, #61	@ 0x3d
1004ad36:	5c8b      	ldrb	r3, [r1, r2]
1004ad38:	2220      	movs	r2, #32
1004ad3a:	4013      	ands	r3, r2
1004ad3c:	313d      	adds	r1, #61	@ 0x3d
1004ad3e:	2800      	cmp	r0, #0
1004ad40:	d066      	beq.n	1004ae10 <llc_conn_push_connection_complete_event+0xfc>
1004ad42:	2b00      	cmp	r3, #0
1004ad44:	d100      	bne.n	1004ad48 <llc_conn_push_connection_complete_event+0x34>
1004ad46:	e110      	b.n	1004af6a <llc_conn_push_connection_complete_event+0x256>
1004ad48:	7b88      	ldrb	r0, [r1, #14]
1004ad4a:	07c0      	lsls	r0, r0, #31
1004ad4c:	d063      	beq.n	1004ae16 <llc_conn_push_connection_complete_event+0x102>
1004ad4e:	2d00      	cmp	r5, #0
1004ad50:	d100      	bne.n	1004ad54 <llc_conn_push_connection_complete_event+0x40>
1004ad52:	2212      	movs	r2, #18
1004ad54:	8aa0      	ldrh	r0, [r4, #20]
1004ad56:	900c      	str	r0, [sp, #48]	@ 0x30
1004ad58:	7da7      	ldrb	r7, [r4, #22]
1004ad5a:	7de0      	ldrb	r0, [r4, #23]
1004ad5c:	9008      	str	r0, [sp, #32]
1004ad5e:	8a60      	ldrh	r0, [r4, #18]
1004ad60:	900b      	str	r0, [sp, #44]	@ 0x2c
1004ad62:	8a20      	ldrh	r0, [r4, #16]
1004ad64:	9009      	str	r0, [sp, #36]	@ 0x24
1004ad66:	89a0      	ldrh	r0, [r4, #12]
1004ad68:	900a      	str	r0, [sp, #40]	@ 0x28
1004ad6a:	6820      	ldr	r0, [r4, #0]
1004ad6c:	9005      	str	r0, [sp, #20]
1004ad6e:	6860      	ldr	r0, [r4, #4]
1004ad70:	9007      	str	r0, [sp, #28]
1004ad72:	68a0      	ldr	r0, [r4, #8]
1004ad74:	9006      	str	r0, [sp, #24]
1004ad76:	7e20      	ldrb	r0, [r4, #24]
1004ad78:	9003      	str	r0, [sp, #12]
1004ad7a:	7e60      	ldrb	r0, [r4, #25]
1004ad7c:	9004      	str	r0, [sp, #16]
1004ad7e:	89e5      	ldrh	r5, [r4, #14]
1004ad80:	7ea0      	ldrb	r0, [r4, #26]
1004ad82:	9002      	str	r0, [sp, #8]
1004ad84:	487c      	ldr	r0, [pc, #496]	@ (1004af78 <__arm_cp.28_2>)
1004ad86:	6800      	ldr	r0, [r0, #0]
1004ad88:	6900      	ldr	r0, [r0, #16]
1004ad8a:	b2f1      	uxtb	r1, r6
1004ad8c:	230a      	movs	r3, #10
1004ad8e:	f7fe ffff 	bl	10049d90 <aci_event_fifo_push_header>
1004ad92:	2800      	cmp	r0, #0
1004ad94:	d100      	bne.n	1004ad98 <llc_conn_push_connection_complete_event+0x84>
1004ad96:	e0e8      	b.n	1004af6a <llc_conn_push_connection_complete_event+0x256>
1004ad98:	4604      	mov	r4, r0
1004ad9a:	9701      	str	r7, [sp, #4]
1004ad9c:	4607      	mov	r7, r0
1004ad9e:	371f      	adds	r7, #31
1004ada0:	7245      	strb	r5, [r0, #9]
1004ada2:	9803      	ldr	r0, [sp, #12]
1004ada4:	7320      	strb	r0, [r4, #12]
1004ada6:	9804      	ldr	r0, [sp, #16]
1004ada8:	72e0      	strb	r0, [r4, #11]
1004adaa:	9802      	ldr	r0, [sp, #8]
1004adac:	7220      	strb	r0, [r4, #8]
1004adae:	0a28      	lsrs	r0, r5, #8
1004adb0:	72a0      	strb	r0, [r4, #10]
1004adb2:	4620      	mov	r0, r4
1004adb4:	300d      	adds	r0, #13
1004adb6:	2506      	movs	r5, #6
1004adb8:	9905      	ldr	r1, [sp, #20]
1004adba:	462a      	mov	r2, r5
1004adbc:	4b6f      	ldr	r3, [pc, #444]	@ (1004af7c <__arm_cp.28_3>)
1004adbe:	4798      	blx	r3
1004adc0:	4620      	mov	r0, r4
1004adc2:	3013      	adds	r0, #19
1004adc4:	9906      	ldr	r1, [sp, #24]
1004adc6:	462a      	mov	r2, r5
1004adc8:	4b6c      	ldr	r3, [pc, #432]	@ (1004af7c <__arm_cp.28_3>)
1004adca:	4798      	blx	r3
1004adcc:	4b6b      	ldr	r3, [pc, #428]	@ (1004af7c <__arm_cp.28_3>)
1004adce:	4620      	mov	r0, r4
1004add0:	3019      	adds	r0, #25
1004add2:	9907      	ldr	r1, [sp, #28]
1004add4:	462a      	mov	r2, r5
1004add6:	4798      	blx	r3
1004add8:	2021      	movs	r0, #33	@ 0x21
1004adda:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004addc:	5421      	strb	r1, [r4, r0]
1004adde:	2025      	movs	r0, #37	@ 0x25
1004ade0:	9a08      	ldr	r2, [sp, #32]
1004ade2:	5422      	strb	r2, [r4, r0]
1004ade4:	4620      	mov	r0, r4
1004ade6:	3021      	adds	r0, #33	@ 0x21
1004ade8:	0a09      	lsrs	r1, r1, #8
1004adea:	7041      	strb	r1, [r0, #1]
1004adec:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004adee:	0a08      	lsrs	r0, r1, #8
1004adf0:	7078      	strb	r0, [r7, #1]
1004adf2:	7039      	strb	r1, [r7, #0]
1004adf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004adf6:	0a08      	lsrs	r0, r1, #8
1004adf8:	7178      	strb	r0, [r7, #5]
1004adfa:	7139      	strb	r1, [r7, #4]
1004adfc:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004adfe:	0a08      	lsrs	r0, r1, #8
1004ae00:	7278      	strb	r0, [r7, #9]
1004ae02:	7239      	strb	r1, [r7, #8]
1004ae04:	9801      	ldr	r0, [sp, #4]
1004ae06:	71f8      	strb	r0, [r7, #7]
1004ae08:	1d20      	adds	r0, r4, #4
1004ae0a:	2129      	movs	r1, #41	@ 0x29
1004ae0c:	2222      	movs	r2, #34	@ 0x22
1004ae0e:	e0a2      	b.n	1004af56 <llc_conn_push_connection_complete_event+0x242>
1004ae10:	2b00      	cmp	r3, #0
1004ae12:	d100      	bne.n	1004ae16 <llc_conn_push_connection_complete_event+0x102>
1004ae14:	e0a9      	b.n	1004af6a <llc_conn_push_connection_complete_event+0x256>
1004ae16:	7a88      	ldrb	r0, [r1, #10]
1004ae18:	0780      	lsls	r0, r0, #30
1004ae1a:	d445      	bmi.n	1004aea8 <llc_conn_push_connection_complete_event+0x194>
1004ae1c:	7a48      	ldrb	r0, [r1, #9]
1004ae1e:	07c0      	lsls	r0, r0, #31
1004ae20:	d100      	bne.n	1004ae24 <llc_conn_push_connection_complete_event+0x110>
1004ae22:	e0a2      	b.n	1004af6a <llc_conn_push_connection_complete_event+0x256>
1004ae24:	2008      	movs	r0, #8
1004ae26:	4305      	orrs	r5, r0
1004ae28:	7de0      	ldrb	r0, [r4, #23]
1004ae2a:	900c      	str	r0, [sp, #48]	@ 0x30
1004ae2c:	8a60      	ldrh	r0, [r4, #18]
1004ae2e:	900b      	str	r0, [sp, #44]	@ 0x2c
1004ae30:	8a20      	ldrh	r0, [r4, #16]
1004ae32:	9009      	str	r0, [sp, #36]	@ 0x24
1004ae34:	89a0      	ldrh	r0, [r4, #12]
1004ae36:	900a      	str	r0, [sp, #40]	@ 0x28
1004ae38:	6820      	ldr	r0, [r4, #0]
1004ae3a:	9008      	str	r0, [sp, #32]
1004ae3c:	7e20      	ldrb	r0, [r4, #24]
1004ae3e:	9006      	str	r0, [sp, #24]
1004ae40:	7e60      	ldrb	r0, [r4, #25]
1004ae42:	9007      	str	r0, [sp, #28]
1004ae44:	89e7      	ldrh	r7, [r4, #14]
1004ae46:	7ea0      	ldrb	r0, [r4, #26]
1004ae48:	9005      	str	r0, [sp, #20]
1004ae4a:	484b      	ldr	r0, [pc, #300]	@ (1004af78 <__arm_cp.28_2>)
1004ae4c:	6800      	ldr	r0, [r0, #0]
1004ae4e:	6900      	ldr	r0, [r0, #16]
1004ae50:	b2f1      	uxtb	r1, r6
1004ae52:	2306      	movs	r3, #6
1004ae54:	462a      	mov	r2, r5
1004ae56:	f7fe ff9b 	bl	10049d90 <aci_event_fifo_push_header>
1004ae5a:	2800      	cmp	r0, #0
1004ae5c:	d100      	bne.n	1004ae60 <llc_conn_push_connection_complete_event+0x14c>
1004ae5e:	e084      	b.n	1004af6a <llc_conn_push_connection_complete_event+0x256>
1004ae60:	4604      	mov	r4, r0
1004ae62:	4605      	mov	r5, r0
1004ae64:	3513      	adds	r5, #19
1004ae66:	7247      	strb	r7, [r0, #9]
1004ae68:	9806      	ldr	r0, [sp, #24]
1004ae6a:	7320      	strb	r0, [r4, #12]
1004ae6c:	9807      	ldr	r0, [sp, #28]
1004ae6e:	72e0      	strb	r0, [r4, #11]
1004ae70:	9805      	ldr	r0, [sp, #20]
1004ae72:	7220      	strb	r0, [r4, #8]
1004ae74:	0a38      	lsrs	r0, r7, #8
1004ae76:	72a0      	strb	r0, [r4, #10]
1004ae78:	4620      	mov	r0, r4
1004ae7a:	300d      	adds	r0, #13
1004ae7c:	2206      	movs	r2, #6
1004ae7e:	9908      	ldr	r1, [sp, #32]
1004ae80:	f7f6 fe94 	bl	10041bac <BLEPLAT_MemCpy>
1004ae84:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004ae86:	0a08      	lsrs	r0, r1, #8
1004ae88:	75a0      	strb	r0, [r4, #22]
1004ae8a:	7561      	strb	r1, [r4, #21]
1004ae8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004ae8e:	0a08      	lsrs	r0, r1, #8
1004ae90:	7068      	strb	r0, [r5, #1]
1004ae92:	7029      	strb	r1, [r5, #0]
1004ae94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004ae96:	0a08      	lsrs	r0, r1, #8
1004ae98:	7168      	strb	r0, [r5, #5]
1004ae9a:	7129      	strb	r1, [r5, #4]
1004ae9c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004ae9e:	7660      	strb	r0, [r4, #25]
1004aea0:	1d20      	adds	r0, r4, #4
1004aea2:	2101      	movs	r1, #1
1004aea4:	2213      	movs	r2, #19
1004aea6:	e056      	b.n	1004af56 <llc_conn_push_connection_complete_event+0x242>
1004aea8:	2d00      	cmp	r5, #0
1004aeaa:	d001      	beq.n	1004aeb0 <llc_conn_push_connection_complete_event+0x19c>
1004aeac:	221c      	movs	r2, #28
1004aeae:	e000      	b.n	1004aeb2 <llc_conn_push_connection_complete_event+0x19e>
1004aeb0:	220d      	movs	r2, #13
1004aeb2:	7de0      	ldrb	r0, [r4, #23]
1004aeb4:	900a      	str	r0, [sp, #40]	@ 0x28
1004aeb6:	8a67      	ldrh	r7, [r4, #18]
1004aeb8:	8a20      	ldrh	r0, [r4, #16]
1004aeba:	900b      	str	r0, [sp, #44]	@ 0x2c
1004aebc:	89a0      	ldrh	r0, [r4, #12]
1004aebe:	900c      	str	r0, [sp, #48]	@ 0x30
1004aec0:	6820      	ldr	r0, [r4, #0]
1004aec2:	9007      	str	r0, [sp, #28]
1004aec4:	6860      	ldr	r0, [r4, #4]
1004aec6:	9009      	str	r0, [sp, #36]	@ 0x24
1004aec8:	68a0      	ldr	r0, [r4, #8]
1004aeca:	9008      	str	r0, [sp, #32]
1004aecc:	7e20      	ldrb	r0, [r4, #24]
1004aece:	9005      	str	r0, [sp, #20]
1004aed0:	7e60      	ldrb	r0, [r4, #25]
1004aed2:	9006      	str	r0, [sp, #24]
1004aed4:	89e5      	ldrh	r5, [r4, #14]
1004aed6:	7ea0      	ldrb	r0, [r4, #26]
1004aed8:	9004      	str	r0, [sp, #16]
1004aeda:	4827      	ldr	r0, [pc, #156]	@ (1004af78 <__arm_cp.28_2>)
1004aedc:	6800      	ldr	r0, [r0, #0]
1004aede:	6900      	ldr	r0, [r0, #16]
1004aee0:	b2f1      	uxtb	r1, r6
1004aee2:	2309      	movs	r3, #9
1004aee4:	f7fe ff54 	bl	10049d90 <aci_event_fifo_push_header>
1004aee8:	2800      	cmp	r0, #0
1004aeea:	d03e      	beq.n	1004af6a <llc_conn_push_connection_complete_event+0x256>
1004aeec:	4604      	mov	r4, r0
1004aeee:	9703      	str	r7, [sp, #12]
1004aef0:	4607      	mov	r7, r0
1004aef2:	371f      	adds	r7, #31
1004aef4:	7245      	strb	r5, [r0, #9]
1004aef6:	9805      	ldr	r0, [sp, #20]
1004aef8:	7320      	strb	r0, [r4, #12]
1004aefa:	9806      	ldr	r0, [sp, #24]
1004aefc:	72e0      	strb	r0, [r4, #11]
1004aefe:	9804      	ldr	r0, [sp, #16]
1004af00:	7220      	strb	r0, [r4, #8]
1004af02:	0a28      	lsrs	r0, r5, #8
1004af04:	72a0      	strb	r0, [r4, #10]
1004af06:	4620      	mov	r0, r4
1004af08:	300d      	adds	r0, #13
1004af0a:	2506      	movs	r5, #6
1004af0c:	9907      	ldr	r1, [sp, #28]
1004af0e:	462a      	mov	r2, r5
1004af10:	4b1a      	ldr	r3, [pc, #104]	@ (1004af7c <__arm_cp.28_3>)
1004af12:	4798      	blx	r3
1004af14:	4620      	mov	r0, r4
1004af16:	3013      	adds	r0, #19
1004af18:	9908      	ldr	r1, [sp, #32]
1004af1a:	462a      	mov	r2, r5
1004af1c:	4b17      	ldr	r3, [pc, #92]	@ (1004af7c <__arm_cp.28_3>)
1004af1e:	4798      	blx	r3
1004af20:	4b16      	ldr	r3, [pc, #88]	@ (1004af7c <__arm_cp.28_3>)
1004af22:	4620      	mov	r0, r4
1004af24:	3019      	adds	r0, #25
1004af26:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004af28:	462a      	mov	r2, r5
1004af2a:	4798      	blx	r3
1004af2c:	2021      	movs	r0, #33	@ 0x21
1004af2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004af30:	5422      	strb	r2, [r4, r0]
1004af32:	2025      	movs	r0, #37	@ 0x25
1004af34:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004af36:	5421      	strb	r1, [r4, r0]
1004af38:	1d20      	adds	r0, r4, #4
1004af3a:	4621      	mov	r1, r4
1004af3c:	3121      	adds	r1, #33	@ 0x21
1004af3e:	0a12      	lsrs	r2, r2, #8
1004af40:	704a      	strb	r2, [r1, #1]
1004af42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004af44:	0a11      	lsrs	r1, r2, #8
1004af46:	7079      	strb	r1, [r7, #1]
1004af48:	703a      	strb	r2, [r7, #0]
1004af4a:	9a03      	ldr	r2, [sp, #12]
1004af4c:	0a11      	lsrs	r1, r2, #8
1004af4e:	7179      	strb	r1, [r7, #5]
1004af50:	713a      	strb	r2, [r7, #4]
1004af52:	210a      	movs	r1, #10
1004af54:	221f      	movs	r2, #31
1004af56:	2304      	movs	r3, #4
1004af58:	7123      	strb	r3, [r4, #4]
1004af5a:	233e      	movs	r3, #62	@ 0x3e
1004af5c:	7043      	strb	r3, [r0, #1]
1004af5e:	71e1      	strb	r1, [r4, #7]
1004af60:	71a2      	strb	r2, [r4, #6]
1004af62:	b2f0      	uxtb	r0, r6
1004af64:	4621      	mov	r1, r4
1004af66:	f7fe ffb0 	bl	10049eca <aci_event_fifo_push>
1004af6a:	b00d      	add	sp, #52	@ 0x34
1004af6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004af6e:	46c0      	nop			@ (mov r8, r8)

1004af70 <__arm_cp.28_0>:
1004af70:	200006b8 	.word	0x200006b8

1004af74 <__arm_cp.28_1>:
1004af74:	200006c8 	.word	0x200006c8

1004af78 <__arm_cp.28_2>:
1004af78:	200006bc 	.word	0x200006bc

1004af7c <__arm_cp.28_3>:
1004af7c:	10041bad 	.word	0x10041bad

1004af80 <llc_conn_multi_link_connection_ucfg_weak>:
1004af80:	200c      	movs	r0, #12
1004af82:	4770      	bx	lr

1004af84 <llc_conn_release_conn_idx>:
1004af84:	b580      	push	{r7, lr}
1004af86:	f7ff fe05 	bl	1004ab94 <llc_conn_get_cntxt_per_p>
1004af8a:	212c      	movs	r1, #44	@ 0x2c
1004af8c:	2200      	movs	r2, #0
1004af8e:	5442      	strb	r2, [r0, r1]
1004af90:	bd80      	pop	{r7, pc}

1004af92 <llc_conn_peripheral_roll_back_params_tsk_ucfg_weak>:
1004af92:	4770      	bx	lr

1004af94 <llc_isoal_mem_alloc_ucfg_weak>:
1004af94:	4770      	bx	lr

1004af96 <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1004af96:	2000      	movs	r0, #0
1004af98:	4770      	bx	lr

1004af9a <iso_terminate_event_int_cb_ucfg_weak>:
1004af9a:	2000      	movs	r0, #0
1004af9c:	4770      	bx	lr

1004af9e <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1004af9e:	2000      	movs	r0, #0
1004afa0:	4770      	bx	lr

1004afa2 <llc_iso_cmn_mem_alloc_ucfg_weak>:
1004afa2:	4770      	bx	lr

1004afa4 <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1004afa4:	2000      	movs	r0, #0
1004afa6:	4770      	bx	lr

1004afa8 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1004afa8:	2000      	movs	r0, #0
1004afaa:	4770      	bx	lr

1004afac <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1004afac:	4770      	bx	lr

1004afae <llc_priv_init_ucfg_weak>:
1004afae:	4770      	bx	lr

1004afb0 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1004afb0:	4770      	bx	lr

1004afb2 <llc_priv_offline_rpa_resolution_ucfg_weak>:
1004afb2:	4770      	bx	lr

1004afb4 <llc_priv_controller_privacy_csr_ucfg_weak>:
1004afb4:	2000      	movs	r0, #0
1004afb6:	4770      	bx	lr

1004afb8 <llc_priv_start_privacy_timer_ucfg_weak>:
1004afb8:	4770      	bx	lr

1004afba <llc_priv_stop_privacy_timer_ucfg_weak>:
1004afba:	4770      	bx	lr

1004afbc <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1004afbc:	4770      	bx	lr

1004afbe <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>:
1004afbe:	4770      	bx	lr

1004afc0 <llc_scan_get_cntxt_p>:
1004afc0:	4802      	ldr	r0, [pc, #8]	@ (1004afcc <__arm_cp.0_0>)
1004afc2:	6800      	ldr	r0, [r0, #0]
1004afc4:	219c      	movs	r1, #156	@ 0x9c
1004afc6:	5840      	ldr	r0, [r0, r1]
1004afc8:	6840      	ldr	r0, [r0, #4]
1004afca:	4770      	bx	lr

1004afcc <__arm_cp.0_0>:
1004afcc:	200006c8 	.word	0x200006c8

1004afd0 <llc_scan_init_ucfg_weak>:
1004afd0:	4770      	bx	lr

1004afd2 <llc_scan_mem_allocate_ucfg_weak>:
1004afd2:	4770      	bx	lr

1004afd4 <llc_scan_set_scan_channel_bitmap>:
1004afd4:	b510      	push	{r4, lr}
1004afd6:	4604      	mov	r4, r0
1004afd8:	f7ff fdc9 	bl	1004ab6e <scan_csr_ucfg_weak>
1004afdc:	2801      	cmp	r0, #1
1004afde:	d108      	bne.n	1004aff2 <llc_scan_set_scan_channel_bitmap+0x1e>
1004afe0:	1e60      	subs	r0, r4, #1
1004afe2:	2806      	cmp	r0, #6
1004afe4:	d807      	bhi.n	1004aff6 <llc_scan_set_scan_channel_bitmap+0x22>
1004afe6:	f7ff ffeb 	bl	1004afc0 <llc_scan_get_cntxt_p>
1004afea:	21ef      	movs	r1, #239	@ 0xef
1004afec:	5444      	strb	r4, [r0, r1]
1004afee:	2000      	movs	r0, #0
1004aff0:	bd10      	pop	{r4, pc}
1004aff2:	2011      	movs	r0, #17
1004aff4:	bd10      	pop	{r4, pc}
1004aff6:	2012      	movs	r0, #18
1004aff8:	bd10      	pop	{r4, pc}

1004affa <llc_scan_stop_ucfg_weak>:
1004affa:	2000      	movs	r0, #0
1004affc:	4770      	bx	lr
	...

1004b000 <llc_convert_hci_phy_enum_to_hw_phy>:
1004b000:	1e80      	subs	r0, r0, #2
1004b002:	b2c0      	uxtb	r0, r0
1004b004:	2803      	cmp	r0, #3
1004b006:	d301      	bcc.n	1004b00c <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1004b008:	2000      	movs	r0, #0
1004b00a:	e002      	b.n	1004b012 <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1004b00c:	00c1      	lsls	r1, r0, #3
1004b00e:	4802      	ldr	r0, [pc, #8]	@ (1004b018 <__arm_cp.4_0>)
1004b010:	40c8      	lsrs	r0, r1
1004b012:	b2c0      	uxtb	r0, r0
1004b014:	4770      	bx	lr
1004b016:	46c0      	nop			@ (mov r8, r8)

1004b018 <__arm_cp.4_0>:
1004b018:	00060401 	.word	0x00060401

1004b01c <LL_cpf_cis_processing_ucfg_weak>:
1004b01c:	4770      	bx	lr
	...

1004b020 <ll_write_supported_data>:
1004b020:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b022:	b089      	sub	sp, #36	@ 0x24
1004b024:	9303      	str	r3, [sp, #12]
1004b026:	9202      	str	r2, [sp, #8]
1004b028:	9106      	str	r1, [sp, #24]
1004b02a:	9007      	str	r0, [sp, #28]
1004b02c:	f7ff fda8 	bl	1004ab80 <llc_conn_get_cntxt_p>
1004b030:	4604      	mov	r4, r0
1004b032:	f7fe f9ee 	bl	10049412 <data_length_extension_csr_ucfg>
1004b036:	9005      	str	r0, [sp, #20]
1004b038:	f7fe f9eb 	bl	10049412 <data_length_extension_csr_ucfg>
1004b03c:	4605      	mov	r5, r0
1004b03e:	20a9      	movs	r0, #169	@ 0xa9
1004b040:	0106      	lsls	r6, r0, #4
1004b042:	4f3b      	ldr	r7, [pc, #236]	@ (1004b130 <__arm_cp.12_0>)
1004b044:	f7fe f9ed 	bl	10049422 <phy_upd_csr_ucfg>
1004b048:	2d01      	cmp	r5, #1
1004b04a:	9708      	str	r7, [sp, #32]
1004b04c:	9600      	str	r6, [sp, #0]
1004b04e:	d104      	bne.n	1004b05a <ll_write_supported_data+0x3a>
1004b050:	2801      	cmp	r0, #1
1004b052:	463e      	mov	r6, r7
1004b054:	d00a      	beq.n	1004b06c <ll_write_supported_data+0x4c>
1004b056:	4e37      	ldr	r6, [pc, #220]	@ (1004b134 <__arm_cp.12_1>)
1004b058:	e003      	b.n	1004b062 <ll_write_supported_data+0x42>
1004b05a:	2801      	cmp	r0, #1
1004b05c:	d006      	beq.n	1004b06c <ll_write_supported_data+0x4c>
1004b05e:	2029      	movs	r0, #41	@ 0x29
1004b060:	00c6      	lsls	r6, r0, #3
1004b062:	f7ff fd7a 	bl	1004ab5a <cte_csr_ucfg_weak>
1004b066:	2801      	cmp	r0, #1
1004b068:	d100      	bne.n	1004b06c <ll_write_supported_data+0x4c>
1004b06a:	3608      	adds	r6, #8
1004b06c:	9604      	str	r6, [sp, #16]
1004b06e:	9d02      	ldr	r5, [sp, #8]
1004b070:	9f03      	ldr	r7, [sp, #12]
1004b072:	f7fe f9ce 	bl	10049412 <data_length_extension_csr_ucfg>
1004b076:	9001      	str	r0, [sp, #4]
1004b078:	f7fe f9cb 	bl	10049412 <data_length_extension_csr_ucfg>
1004b07c:	4606      	mov	r6, r0
1004b07e:	f7fe f9d0 	bl	10049422 <phy_upd_csr_ucfg>
1004b082:	2e01      	cmp	r6, #1
1004b084:	d107      	bne.n	1004b096 <ll_write_supported_data+0x76>
1004b086:	2801      	cmp	r0, #1
1004b088:	463e      	mov	r6, r7
1004b08a:	462f      	mov	r7, r5
1004b08c:	9d06      	ldr	r5, [sp, #24]
1004b08e:	9b07      	ldr	r3, [sp, #28]
1004b090:	d014      	beq.n	1004b0bc <ll_write_supported_data+0x9c>
1004b092:	4828      	ldr	r0, [pc, #160]	@ (1004b134 <__arm_cp.12_1>)
1004b094:	e009      	b.n	1004b0aa <ll_write_supported_data+0x8a>
1004b096:	2801      	cmp	r0, #1
1004b098:	9800      	ldr	r0, [sp, #0]
1004b09a:	9008      	str	r0, [sp, #32]
1004b09c:	463e      	mov	r6, r7
1004b09e:	462f      	mov	r7, r5
1004b0a0:	9d06      	ldr	r5, [sp, #24]
1004b0a2:	9b07      	ldr	r3, [sp, #28]
1004b0a4:	d00a      	beq.n	1004b0bc <ll_write_supported_data+0x9c>
1004b0a6:	2029      	movs	r0, #41	@ 0x29
1004b0a8:	00c0      	lsls	r0, r0, #3
1004b0aa:	9008      	str	r0, [sp, #32]
1004b0ac:	f7ff fd55 	bl	1004ab5a <cte_csr_ucfg_weak>
1004b0b0:	2801      	cmp	r0, #1
1004b0b2:	d102      	bne.n	1004b0ba <ll_write_supported_data+0x9a>
1004b0b4:	9808      	ldr	r0, [sp, #32]
1004b0b6:	3008      	adds	r0, #8
1004b0b8:	9008      	str	r0, [sp, #32]
1004b0ba:	9b07      	ldr	r3, [sp, #28]
1004b0bc:	f3ef 8010 	mrs	r0, PRIMASK
1004b0c0:	b672      	cpsid	i
1004b0c2:	8366      	strh	r6, [r4, #26]
1004b0c4:	8327      	strh	r7, [r4, #24]
1004b0c6:	82e5      	strh	r5, [r4, #22]
1004b0c8:	82a3      	strh	r3, [r4, #20]
1004b0ca:	22fb      	movs	r2, #251	@ 0xfb
1004b0cc:	201b      	movs	r0, #27
1004b0ce:	9901      	ldr	r1, [sp, #4]
1004b0d0:	2901      	cmp	r1, #1
1004b0d2:	4611      	mov	r1, r2
1004b0d4:	d000      	beq.n	1004b0d8 <ll_write_supported_data+0xb8>
1004b0d6:	4601      	mov	r1, r0
1004b0d8:	9c05      	ldr	r4, [sp, #20]
1004b0da:	2c01      	cmp	r4, #1
1004b0dc:	9c08      	ldr	r4, [sp, #32]
1004b0de:	d000      	beq.n	1004b0e2 <ll_write_supported_data+0xc2>
1004b0e0:	4602      	mov	r2, r0
1004b0e2:	2030      	movs	r0, #48	@ 0x30
1004b0e4:	429a      	cmp	r2, r3
1004b0e6:	4602      	mov	r2, r0
1004b0e8:	d300      	bcc.n	1004b0ec <ll_write_supported_data+0xcc>
1004b0ea:	2200      	movs	r2, #0
1004b0ec:	2b1b      	cmp	r3, #27
1004b0ee:	4603      	mov	r3, r0
1004b0f0:	d300      	bcc.n	1004b0f4 <ll_write_supported_data+0xd4>
1004b0f2:	4613      	mov	r3, r2
1004b0f4:	9a04      	ldr	r2, [sp, #16]
1004b0f6:	42aa      	cmp	r2, r5
1004b0f8:	4602      	mov	r2, r0
1004b0fa:	d300      	bcc.n	1004b0fe <ll_write_supported_data+0xde>
1004b0fc:	461a      	mov	r2, r3
1004b0fe:	08eb      	lsrs	r3, r5, #3
1004b100:	2b29      	cmp	r3, #41	@ 0x29
1004b102:	4603      	mov	r3, r0
1004b104:	d300      	bcc.n	1004b108 <ll_write_supported_data+0xe8>
1004b106:	4613      	mov	r3, r2
1004b108:	42b9      	cmp	r1, r7
1004b10a:	4601      	mov	r1, r0
1004b10c:	d300      	bcc.n	1004b110 <ll_write_supported_data+0xf0>
1004b10e:	4619      	mov	r1, r3
1004b110:	2f1b      	cmp	r7, #27
1004b112:	4602      	mov	r2, r0
1004b114:	d300      	bcc.n	1004b118 <ll_write_supported_data+0xf8>
1004b116:	460a      	mov	r2, r1
1004b118:	42b4      	cmp	r4, r6
1004b11a:	4601      	mov	r1, r0
1004b11c:	d300      	bcc.n	1004b120 <ll_write_supported_data+0x100>
1004b11e:	4611      	mov	r1, r2
1004b120:	08f2      	lsrs	r2, r6, #3
1004b122:	2a29      	cmp	r2, #41	@ 0x29
1004b124:	d300      	bcc.n	1004b128 <ll_write_supported_data+0x108>
1004b126:	4608      	mov	r0, r1
1004b128:	b662      	cpsie	i
1004b12a:	b009      	add	sp, #36	@ 0x24
1004b12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b12e:	46c0      	nop			@ (mov r8, r8)

1004b130 <__arm_cp.12_0>:
1004b130:	00004290 	.word	0x00004290

1004b134 <__arm_cp.12_1>:
1004b134:	00000848 	.word	0x00000848

1004b138 <LLC_authenticated_payload_timeout_processing_ucfg_weak>:
1004b138:	4770      	bx	lr

1004b13a <llc_past_mem_allocate_ucfg_weak>:
1004b13a:	4770      	bx	lr

1004b13c <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1004b13c:	4770      	bx	lr

1004b13e <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1004b13e:	4770      	bx	lr

1004b140 <llc_cte_get_ctxt>:
1004b140:	4802      	ldr	r0, [pc, #8]	@ (1004b14c <__arm_cp.2_0>)
1004b142:	6800      	ldr	r0, [r0, #0]
1004b144:	219c      	movs	r1, #156	@ 0x9c
1004b146:	5840      	ldr	r0, [r0, r1]
1004b148:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1004b14a:	4770      	bx	lr

1004b14c <__arm_cp.2_0>:
1004b14c:	200006c8 	.word	0x200006c8

1004b150 <llc_cte_init_ucfg_weak>:
1004b150:	4770      	bx	lr

1004b152 <llc_cte_mem_allocate_ucfg_weak>:
1004b152:	4770      	bx	lr

1004b154 <llc_cte_timer_error_ucfg_weak>:
1004b154:	4770      	bx	lr

1004b156 <llc_cte_timer_stop_ucfg_weak>:
1004b156:	2000      	movs	r0, #0
1004b158:	4770      	bx	lr
	...

1004b15c <LL_dtm_init>:
1004b15c:	b5b0      	push	{r4, r5, r7, lr}
1004b15e:	480e      	ldr	r0, [pc, #56]	@ (1004b198 <__arm_cp.0_0>)
1004b160:	6800      	ldr	r0, [r0, #0]
1004b162:	21ac      	movs	r1, #172	@ 0xac
1004b164:	5844      	ldr	r4, [r0, r1]
1004b166:	20ff      	movs	r0, #255	@ 0xff
1004b168:	77a0      	strb	r0, [r4, #30]
1004b16a:	2500      	movs	r5, #0
1004b16c:	77e5      	strb	r5, [r4, #31]
1004b16e:	f7ff fcf4 	bl	1004ab5a <cte_csr_ucfg_weak>
1004b172:	2801      	cmp	r0, #1
1004b174:	d10f      	bne.n	1004b196 <LL_dtm_init+0x3a>
1004b176:	f7ff ffe3 	bl	1004b140 <llc_cte_get_ctxt>
1004b17a:	2224      	movs	r2, #36	@ 0x24
1004b17c:	4907      	ldr	r1, [pc, #28]	@ (1004b19c <__arm_cp.0_1>)
1004b17e:	5c8a      	ldrb	r2, [r1, r2]
1004b180:	2a00      	cmp	r2, #0
1004b182:	462a      	mov	r2, r5
1004b184:	d000      	beq.n	1004b188 <LL_dtm_init+0x2c>
1004b186:	6802      	ldr	r2, [r0, #0]
1004b188:	62a2      	str	r2, [r4, #40]	@ 0x28
1004b18a:	2223      	movs	r2, #35	@ 0x23
1004b18c:	5c89      	ldrb	r1, [r1, r2]
1004b18e:	2900      	cmp	r1, #0
1004b190:	d000      	beq.n	1004b194 <LL_dtm_init+0x38>
1004b192:	6845      	ldr	r5, [r0, #4]
1004b194:	62e5      	str	r5, [r4, #44]	@ 0x2c
1004b196:	bdb0      	pop	{r4, r5, r7, pc}

1004b198 <__arm_cp.0_0>:
1004b198:	200006c8 	.word	0x200006c8

1004b19c <__arm_cp.0_1>:
1004b19c:	200006d8 	.word	0x200006d8

1004b1a0 <LL_eadv_switchbackupdata_data_struc>:
1004b1a0:	b510      	push	{r4, lr}
1004b1a2:	7c01      	ldrb	r1, [r0, #16]
1004b1a4:	2902      	cmp	r1, #2
1004b1a6:	d109      	bne.n	1004b1bc <LL_eadv_switchbackupdata_data_struc+0x1c>
1004b1a8:	2401      	movs	r4, #1
1004b1aa:	7404      	strb	r4, [r0, #16]
1004b1ac:	6801      	ldr	r1, [r0, #0]
1004b1ae:	6882      	ldr	r2, [r0, #8]
1004b1b0:	68c3      	ldr	r3, [r0, #12]
1004b1b2:	c00c      	stmia	r0!, {r2, r3}
1004b1b4:	20a1      	movs	r0, #161	@ 0xa1
1004b1b6:	f002 faab 	bl	1004d710 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1004b1ba:	e000      	b.n	1004b1be <LL_eadv_switchbackupdata_data_struc+0x1e>
1004b1bc:	2400      	movs	r4, #0
1004b1be:	4620      	mov	r0, r4
1004b1c0:	bd10      	pop	{r4, pc}

1004b1c2 <LL_eadv_Blue_Tx>:
1004b1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b1c4:	461e      	mov	r6, r3
1004b1c6:	4617      	mov	r7, r2
1004b1c8:	460d      	mov	r5, r1
1004b1ca:	4604      	mov	r4, r0
1004b1cc:	f7f7 faa4 	bl	10042718 <BLEPLAT_CNTR_PacketInitTo0>
1004b1d0:	4620      	mov	r0, r4
1004b1d2:	f7f7 faaf 	bl	10042734 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1004b1d6:	4620      	mov	r0, r4
1004b1d8:	f7f7 fae0 	bl	1004279c <BLEPLAT_CNTR_PacketSetKeepsemareq>
1004b1dc:	4620      	mov	r0, r4
1004b1de:	4621      	mov	r1, r4
1004b1e0:	f7f7 fae9 	bl	100427b6 <BLEPLAT_CNTR_PacketSetNextPtr>
1004b1e4:	4620      	mov	r0, r4
1004b1e6:	4639      	mov	r1, r7
1004b1e8:	f7f7 fab1 	bl	1004274e <BLEPLAT_CNTR_PacketSetDataPtr>
1004b1ec:	4620      	mov	r0, r4
1004b1ee:	4631      	mov	r1, r6
1004b1f0:	f7f7 fb2f 	bl	10042852 <BLEPLAT_CNTR_PacketSetTimeout>
1004b1f4:	9f06      	ldr	r7, [sp, #24]
1004b1f6:	2e00      	cmp	r6, #0
1004b1f8:	d002      	beq.n	1004b200 <LL_eadv_Blue_Tx+0x3e>
1004b1fa:	4620      	mov	r0, r4
1004b1fc:	f7f7 fb38 	bl	10042870 <BLEPLAT_CNTR_PacketSetTimer2Active>
1004b200:	4620      	mov	r0, r4
1004b202:	f7f7 fa70 	bl	100426e6 <BLEPLAT_CNTR_PacketClrIncChan>
1004b206:	4620      	mov	r0, r4
1004b208:	f7f7 fab0 	bl	1004276c <BLEPLAT_CNTR_PacketSetIntDone>
1004b20c:	4620      	mov	r0, r4
1004b20e:	f7f7 fb55 	bl	100428bc <BLEPLAT_CNTR_PacketSetTxReady>
1004b212:	4620      	mov	r0, r4
1004b214:	2f81      	cmp	r7, #129	@ 0x81
1004b216:	d109      	bne.n	1004b22c <LL_eadv_Blue_Tx+0x6a>
1004b218:	4629      	mov	r1, r5
1004b21a:	f7f7 fae8 	bl	100427ee <BLEPLAT_CNTR_PacketSetNextSlot>
1004b21e:	4620      	mov	r0, r4
1004b220:	f7f7 fafd 	bl	1004281e <BLEPLAT_CNTR_PacketSetPllTrig>
1004b224:	4620      	mov	r0, r4
1004b226:	f7f7 fb2f 	bl	10042888 <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1004b22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b22c:	f7f7 fb39 	bl	100428a2 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1004b230:	4620      	mov	r0, r4
1004b232:	f7f7 facf 	bl	100427d4 <BLEPLAT_CNTR_PacketSetNextRxMode>
1004b236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004b238 <LL_eadv_Blue_Rx>:
1004b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b23a:	461e      	mov	r6, r3
1004b23c:	4617      	mov	r7, r2
1004b23e:	460d      	mov	r5, r1
1004b240:	4604      	mov	r4, r0
1004b242:	f7f7 fa69 	bl	10042718 <BLEPLAT_CNTR_PacketInitTo0>
1004b246:	4620      	mov	r0, r4
1004b248:	f7f7 fa74 	bl	10042734 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1004b24c:	4620      	mov	r0, r4
1004b24e:	f7f7 faa5 	bl	1004279c <BLEPLAT_CNTR_PacketSetKeepsemareq>
1004b252:	4620      	mov	r0, r4
1004b254:	4621      	mov	r1, r4
1004b256:	f7f7 faae 	bl	100427b6 <BLEPLAT_CNTR_PacketSetNextPtr>
1004b25a:	4620      	mov	r0, r4
1004b25c:	4639      	mov	r1, r7
1004b25e:	f7f7 fa76 	bl	1004274e <BLEPLAT_CNTR_PacketSetDataPtr>
1004b262:	4620      	mov	r0, r4
1004b264:	4631      	mov	r1, r6
1004b266:	f7f7 faf4 	bl	10042852 <BLEPLAT_CNTR_PacketSetTimeout>
1004b26a:	9f07      	ldr	r7, [sp, #28]
1004b26c:	2e00      	cmp	r6, #0
1004b26e:	d002      	beq.n	1004b276 <LL_eadv_Blue_Rx+0x3e>
1004b270:	4620      	mov	r0, r4
1004b272:	f7f7 fafd 	bl	10042870 <BLEPLAT_CNTR_PacketSetTimer2Active>
1004b276:	4620      	mov	r0, r4
1004b278:	f7f7 fac4 	bl	10042804 <BLEPLAT_CNTR_PacketSetNextTxMode>
1004b27c:	4620      	mov	r0, r4
1004b27e:	f7f7 fa32 	bl	100426e6 <BLEPLAT_CNTR_PacketClrIncChan>
1004b282:	4620      	mov	r0, r4
1004b284:	f7f7 fa72 	bl	1004276c <BLEPLAT_CNTR_PacketSetIntDone>
1004b288:	4620      	mov	r0, r4
1004b28a:	f7f7 fb0a 	bl	100428a2 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1004b28e:	4620      	mov	r0, r4
1004b290:	f7f7 fa78 	bl	10042784 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1004b294:	4620      	mov	r0, r4
1004b296:	f7f7 facf 	bl	10042838 <BLEPLAT_CNTR_PacketSetRxReady>
1004b29a:	2f81      	cmp	r7, #129	@ 0x81
1004b29c:	d107      	bne.n	1004b2ae <LL_eadv_Blue_Rx+0x76>
1004b29e:	4620      	mov	r0, r4
1004b2a0:	4629      	mov	r1, r5
1004b2a2:	f7f7 faa4 	bl	100427ee <BLEPLAT_CNTR_PacketSetNextSlot>
1004b2a6:	4620      	mov	r0, r4
1004b2a8:	f7f7 fa29 	bl	100426fe <BLEPLAT_CNTR_PacketClrPllTrig>
1004b2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b2ae:	4620      	mov	r0, r4
1004b2b0:	f7f7 fab5 	bl	1004281e <BLEPLAT_CNTR_PacketSetPllTrig>
1004b2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1004b2b8 <LL_eadv_BLUE_SM>:
1004b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b2ba:	461d      	mov	r5, r3
1004b2bc:	4616      	mov	r6, r2
1004b2be:	460f      	mov	r7, r1
1004b2c0:	4604      	mov	r4, r0
1004b2c2:	f7f7 fb35 	bl	10042930 <BLEPLAT_CNTR_SmInitTo0>
1004b2c6:	4911      	ldr	r1, [pc, #68]	@ (1004b30c <__arm_cp.10_0>)
1004b2c8:	4620      	mov	r0, r4
1004b2ca:	f7f7 fb4f 	bl	1004296c <BLEPLAT_CNTR_SmSetAccessAddr>
1004b2ce:	4910      	ldr	r1, [pc, #64]	@ (1004b310 <__arm_cp.10_1>)
1004b2d0:	4620      	mov	r0, r4
1004b2d2:	f7f7 fb5d 	bl	10042990 <BLEPLAT_CNTR_SmSetCrcInit>
1004b2d6:	4620      	mov	r0, r4
1004b2d8:	4639      	mov	r1, r7
1004b2da:	f7f7 fc16 	bl	10042b0a <BLEPLAT_CNTR_SmSetTxPwr>
1004b2de:	4620      	mov	r0, r4
1004b2e0:	4631      	mov	r1, r6
1004b2e2:	f7f7 fbeb 	bl	10042abc <BLEPLAT_CNTR_SmSetTxPacketPtr>
1004b2e6:	4620      	mov	r0, r4
1004b2e8:	4629      	mov	r1, r5
1004b2ea:	f7f7 fbb1 	bl	10042a50 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1004b2ee:	9806      	ldr	r0, [sp, #24]
1004b2f0:	2881      	cmp	r0, #129	@ 0x81
1004b2f2:	d103      	bne.n	1004b2fc <LL_eadv_BLUE_SM+0x44>
1004b2f4:	4620      	mov	r0, r4
1004b2f6:	f7f7 fbd2 	bl	10042a9e <BLEPLAT_CNTR_SmSetTxMode>
1004b2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b2fc:	4620      	mov	r0, r4
1004b2fe:	f7f7 fb98 	bl	10042a32 <BLEPLAT_CNTR_SmSetRxMode>
1004b302:	2101      	movs	r1, #1
1004b304:	4620      	mov	r0, r4
1004b306:	f7f7 fb6a 	bl	100429de <BLEPLAT_CNTR_SmSetHopIncr>
1004b30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004b30c <__arm_cp.10_0>:
1004b30c:	8e89bed6 	.word	0x8e89bed6

1004b310 <__arm_cp.10_1>:
1004b310:	00555555 	.word	0x00555555

1004b314 <llc_get_advertising_set_index>:
1004b314:	b570      	push	{r4, r5, r6, lr}
1004b316:	4604      	mov	r4, r0
1004b318:	f001 f976 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004b31c:	214d      	movs	r1, #77	@ 0x4d
1004b31e:	5c41      	ldrb	r1, [r0, r1]
1004b320:	4d09      	ldr	r5, [pc, #36]	@ (1004b348 <__arm_cp.12_0>)
1004b322:	2200      	movs	r2, #0
1004b324:	23be      	movs	r3, #190	@ 0xbe
1004b326:	4291      	cmp	r1, r2
1004b328:	d00b      	beq.n	1004b342 <llc_get_advertising_set_index+0x2e>
1004b32a:	6806      	ldr	r6, [r0, #0]
1004b32c:	5af6      	ldrh	r6, [r6, r3]
1004b32e:	42a6      	cmp	r6, r4
1004b330:	4616      	mov	r6, r2
1004b332:	d000      	beq.n	1004b336 <llc_get_advertising_set_index+0x22>
1004b334:	462e      	mov	r6, r5
1004b336:	2501      	movs	r5, #1
1004b338:	022d      	lsls	r5, r5, #8
1004b33a:	195b      	adds	r3, r3, r5
1004b33c:	1c52      	adds	r2, r2, #1
1004b33e:	4635      	mov	r5, r6
1004b340:	e7f1      	b.n	1004b326 <llc_get_advertising_set_index+0x12>
1004b342:	b2a8      	uxth	r0, r5
1004b344:	bd70      	pop	{r4, r5, r6, pc}
1004b346:	46c0      	nop			@ (mov r8, r8)

1004b348 <__arm_cp.12_0>:
1004b348:	0000ffff 	.word	0x0000ffff

1004b34c <llc_eadv_generate_new_rpa_for_one_adv_set>:
1004b34c:	b5b0      	push	{r4, r5, r7, lr}
1004b34e:	4604      	mov	r4, r0
1004b350:	20d6      	movs	r0, #214	@ 0xd6
1004b352:	5c20      	ldrb	r0, [r4, r0]
1004b354:	0780      	lsls	r0, r0, #30
1004b356:	d401      	bmi.n	1004b35c <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1004b358:	2000      	movs	r0, #0
1004b35a:	bdb0      	pop	{r4, r5, r7, pc}
1004b35c:	4625      	mov	r5, r4
1004b35e:	3584      	adds	r5, #132	@ 0x84
1004b360:	4628      	mov	r0, r5
1004b362:	f7ff fe2b 	bl	1004afbc <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1004b366:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1004b368:	4628      	mov	r0, r5
1004b36a:	f7ff fe21 	bl	1004afb0 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1004b36e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1004b370:	3008      	adds	r0, #8
1004b372:	2100      	movs	r1, #0
1004b374:	f7ff fe1a 	bl	1004afac <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1004b378:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1004b37a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1004b37c:	6761      	str	r1, [r4, #116]	@ 0x74
1004b37e:	67a0      	str	r0, [r4, #120]	@ 0x78
1004b380:	2001      	movs	r0, #1
1004b382:	bdb0      	pop	{r4, r5, r7, pc}

1004b384 <EADV_init>:
1004b384:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b386:	b085      	sub	sp, #20
1004b388:	9204      	str	r2, [sp, #16]
1004b38a:	460e      	mov	r6, r1
1004b38c:	4605      	mov	r5, r0
1004b38e:	244d      	movs	r4, #77	@ 0x4d
1004b390:	f001 f93a 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004b394:	5505      	strb	r5, [r0, r4]
1004b396:	6006      	str	r6, [r0, #0]
1004b398:	9003      	str	r0, [sp, #12]
1004b39a:	304d      	adds	r0, #77	@ 0x4d
1004b39c:	2101      	movs	r1, #1
1004b39e:	9002      	str	r0, [sp, #8]
1004b3a0:	7041      	strb	r1, [r0, #1]
1004b3a2:	9101      	str	r1, [sp, #4]
1004b3a4:	04cb      	lsls	r3, r1, #19
1004b3a6:	2600      	movs	r6, #0
1004b3a8:	277c      	movs	r7, #124	@ 0x7c
1004b3aa:	9a04      	ldr	r2, [sp, #16]
1004b3ac:	b2e8      	uxtb	r0, r5
1004b3ae:	4286      	cmp	r6, r0
1004b3b0:	d226      	bcs.n	1004b400 <EADV_init+0x7c>
1004b3b2:	9803      	ldr	r0, [sp, #12]
1004b3b4:	6800      	ldr	r0, [r0, #0]
1004b3b6:	51c3      	str	r3, [r0, r7]
1004b3b8:	19c5      	adds	r5, r0, r7
1004b3ba:	2054      	movs	r0, #84	@ 0x54
1004b3bc:	4911      	ldr	r1, [pc, #68]	@ (1004b404 <__arm_cp.19_0>)
1004b3be:	5229      	strh	r1, [r5, r0]
1004b3c0:	2452      	movs	r4, #82	@ 0x52
1004b3c2:	2000      	movs	r0, #0
1004b3c4:	5328      	strh	r0, [r5, r4]
1004b3c6:	2442      	movs	r4, #66	@ 0x42
1004b3c8:	5329      	strh	r1, [r5, r4]
1004b3ca:	245e      	movs	r4, #94	@ 0x5e
1004b3cc:	5528      	strb	r0, [r5, r4]
1004b3ce:	245c      	movs	r4, #92	@ 0x5c
1004b3d0:	21ff      	movs	r1, #255	@ 0xff
1004b3d2:	5529      	strb	r1, [r5, r4]
1004b3d4:	215a      	movs	r1, #90	@ 0x5a
1004b3d6:	5468      	strb	r0, [r5, r1]
1004b3d8:	2146      	movs	r1, #70	@ 0x46
1004b3da:	2407      	movs	r4, #7
1004b3dc:	526c      	strh	r4, [r5, r1]
1004b3de:	6128      	str	r0, [r5, #16]
1004b3e0:	6168      	str	r0, [r5, #20]
1004b3e2:	606b      	str	r3, [r5, #4]
1004b3e4:	9904      	ldr	r1, [sp, #16]
1004b3e6:	2900      	cmp	r1, #0
1004b3e8:	d002      	beq.n	1004b3f0 <EADV_init+0x6c>
1004b3ea:	6550      	str	r0, [r2, #84]	@ 0x54
1004b3ec:	3d2c      	subs	r5, #44	@ 0x2c
1004b3ee:	602a      	str	r2, [r5, #0]
1004b3f0:	9801      	ldr	r0, [sp, #4]
1004b3f2:	0200      	lsls	r0, r0, #8
1004b3f4:	183f      	adds	r7, r7, r0
1004b3f6:	325c      	adds	r2, #92	@ 0x5c
1004b3f8:	9802      	ldr	r0, [sp, #8]
1004b3fa:	7805      	ldrb	r5, [r0, #0]
1004b3fc:	1c76      	adds	r6, r6, #1
1004b3fe:	e7d5      	b.n	1004b3ac <EADV_init+0x28>
1004b400:	b005      	add	sp, #20
1004b402:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004b404 <__arm_cp.19_0>:
1004b404:	0000ffff 	.word	0x0000ffff

1004b408 <LL_LE_Set_Advertising_Parameters>:
1004b408:	b570      	push	{r4, r5, r6, lr}
1004b40a:	4604      	mov	r4, r0
1004b40c:	f001 f8fc 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004b410:	4605      	mov	r5, r0
1004b412:	4e30      	ldr	r6, [pc, #192]	@ (1004b4d4 <__arm_cp.20_0>)
1004b414:	4630      	mov	r0, r6
1004b416:	f7ff ff7d 	bl	1004b314 <llc_get_advertising_set_index>
1004b41a:	492f      	ldr	r1, [pc, #188]	@ (1004b4d8 <__arm_cp.20_1>)
1004b41c:	4288      	cmp	r0, r1
1004b41e:	d112      	bne.n	1004b446 <LL_LE_Set_Advertising_Parameters+0x3e>
1004b420:	f000 f860 	bl	1004b4e4 <LL_Context_ReturnFree>
1004b424:	28ff      	cmp	r0, #255	@ 0xff
1004b426:	d034      	beq.n	1004b492 <LL_LE_Set_Advertising_Parameters+0x8a>
1004b428:	0200      	lsls	r0, r0, #8
1004b42a:	6829      	ldr	r1, [r5, #0]
1004b42c:	1808      	adds	r0, r1, r0
1004b42e:	21be      	movs	r1, #190	@ 0xbe
1004b430:	5246      	strh	r6, [r0, r1]
1004b432:	214c      	movs	r1, #76	@ 0x4c
1004b434:	2200      	movs	r2, #0
1004b436:	5442      	strb	r2, [r0, r1]
1004b438:	2138      	movs	r1, #56	@ 0x38
1004b43a:	5442      	strb	r2, [r0, r1]
1004b43c:	63c2      	str	r2, [r0, #60]	@ 0x3c
1004b43e:	6402      	str	r2, [r0, #64]	@ 0x40
1004b440:	6282      	str	r2, [r0, #40]	@ 0x28
1004b442:	62c2      	str	r2, [r0, #44]	@ 0x2c
1004b444:	e008      	b.n	1004b458 <LL_LE_Set_Advertising_Parameters+0x50>
1004b446:	0200      	lsls	r0, r0, #8
1004b448:	6829      	ldr	r1, [r5, #0]
1004b44a:	1808      	adds	r0, r1, r0
1004b44c:	21ce      	movs	r1, #206	@ 0xce
1004b44e:	5c41      	ldrb	r1, [r0, r1]
1004b450:	2901      	cmp	r1, #1
1004b452:	d101      	bne.n	1004b458 <LL_LE_Set_Advertising_Parameters+0x50>
1004b454:	250c      	movs	r5, #12
1004b456:	e03a      	b.n	1004b4ce <LL_LE_Set_Advertising_Parameters+0xc6>
1004b458:	7961      	ldrb	r1, [r4, #5]
1004b45a:	22c2      	movs	r2, #194	@ 0xc2
1004b45c:	5481      	strb	r1, [r0, r2]
1004b45e:	4606      	mov	r6, r0
1004b460:	36c2      	adds	r6, #194	@ 0xc2
1004b462:	2500      	movs	r5, #0
1004b464:	72f5      	strb	r5, [r6, #11]
1004b466:	2101      	movs	r1, #1
1004b468:	70f1      	strb	r1, [r6, #3]
1004b46a:	79a1      	ldrb	r1, [r4, #6]
1004b46c:	7071      	strb	r1, [r6, #1]
1004b46e:	8821      	ldrh	r1, [r4, #0]
1004b470:	0209      	lsls	r1, r1, #8
1004b472:	67c1      	str	r1, [r0, #124]	@ 0x7c
1004b474:	4601      	mov	r1, r0
1004b476:	3184      	adds	r1, #132	@ 0x84
1004b478:	7922      	ldrb	r2, [r4, #4]
1004b47a:	2a04      	cmp	r2, #4
1004b47c:	d815      	bhi.n	1004b4aa <LL_LE_Set_Advertising_Parameters+0xa2>
1004b47e:	46c0      	nop			@ (mov r8, r8)
1004b480:	447a      	add	r2, pc
1004b482:	7912      	ldrb	r2, [r2, #4]
1004b484:	0052      	lsls	r2, r2, #1
1004b486:	4497      	add	pc, r2
1004b488:	0c0a0602 	.word	0x0c0a0602
1004b48c:	000e      	.short	0x000e
1004b48e:	20f3      	movs	r0, #243	@ 0xf3
1004b490:	e00a      	b.n	1004b4a8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004b492:	2507      	movs	r5, #7
1004b494:	e01b      	b.n	1004b4ce <LL_LE_Set_Advertising_Parameters+0xc6>
1004b496:	4a11      	ldr	r2, [pc, #68]	@ (1004b4dc <__arm_cp.20_2>)
1004b498:	67c2      	str	r2, [r0, #124]	@ 0x7c
1004b49a:	20fd      	movs	r0, #253	@ 0xfd
1004b49c:	e004      	b.n	1004b4a8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004b49e:	20f2      	movs	r0, #242	@ 0xf2
1004b4a0:	e002      	b.n	1004b4a8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004b4a2:	20f0      	movs	r0, #240	@ 0xf0
1004b4a4:	e000      	b.n	1004b4a8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004b4a6:	20f5      	movs	r0, #245	@ 0xf5
1004b4a8:	8688      	strh	r0, [r1, #52]	@ 0x34
1004b4aa:	7a20      	ldrb	r0, [r4, #8]
1004b4ac:	79e2      	ldrb	r2, [r4, #7]
1004b4ae:	600d      	str	r5, [r1, #0]
1004b4b0:	604d      	str	r5, [r1, #4]
1004b4b2:	7532      	strb	r2, [r6, #20]
1004b4b4:	7570      	strb	r0, [r6, #21]
1004b4b6:	7a20      	ldrb	r0, [r4, #8]
1004b4b8:	7008      	strb	r0, [r1, #0]
1004b4ba:	1c48      	adds	r0, r1, #1
1004b4bc:	3409      	adds	r4, #9
1004b4be:	2206      	movs	r2, #6
1004b4c0:	4621      	mov	r1, r4
1004b4c2:	f7f6 fb73 	bl	10041bac <BLEPLAT_MemCpy>
1004b4c6:	4806      	ldr	r0, [pc, #24]	@ (1004b4e0 <__arm_cp.20_3>)
1004b4c8:	6800      	ldr	r0, [r0, #0]
1004b4ca:	7a40      	ldrb	r0, [r0, #9]
1004b4cc:	70b0      	strb	r0, [r6, #2]
1004b4ce:	4628      	mov	r0, r5
1004b4d0:	bd70      	pop	{r4, r5, r6, pc}
1004b4d2:	46c0      	nop			@ (mov r8, r8)

1004b4d4 <__arm_cp.20_0>:
1004b4d4:	0000fffc 	.word	0x0000fffc

1004b4d8 <__arm_cp.20_1>:
1004b4d8:	0000ffff 	.word	0x0000ffff

1004b4dc <__arm_cp.20_2>:
1004b4dc:	000005dc 	.word	0x000005dc

1004b4e0 <__arm_cp.20_3>:
1004b4e0:	200006c8 	.word	0x200006c8

1004b4e4 <LL_Context_ReturnFree>:
1004b4e4:	b510      	push	{r4, lr}
1004b4e6:	f001 f88f 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004b4ea:	214d      	movs	r1, #77	@ 0x4d
1004b4ec:	5c42      	ldrb	r2, [r0, r1]
1004b4ee:	2100      	movs	r1, #0
1004b4f0:	23be      	movs	r3, #190	@ 0xbe
1004b4f2:	428a      	cmp	r2, r1
1004b4f4:	d008      	beq.n	1004b508 <LL_Context_ReturnFree+0x24>
1004b4f6:	6804      	ldr	r4, [r0, #0]
1004b4f8:	5ae4      	ldrh	r4, [r4, r3]
1004b4fa:	0b24      	lsrs	r4, r4, #12
1004b4fc:	d105      	bne.n	1004b50a <LL_Context_ReturnFree+0x26>
1004b4fe:	2401      	movs	r4, #1
1004b500:	0224      	lsls	r4, r4, #8
1004b502:	191b      	adds	r3, r3, r4
1004b504:	1c49      	adds	r1, r1, #1
1004b506:	e7f4      	b.n	1004b4f2 <LL_Context_ReturnFree+0xe>
1004b508:	21ff      	movs	r1, #255	@ 0xff
1004b50a:	b2c8      	uxtb	r0, r1
1004b50c:	bd10      	pop	{r4, pc}
	...

1004b510 <LL_LE_Set_Advertise_Enable>:
1004b510:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1004b512:	4604      	mov	r4, r0
1004b514:	f000 f816 	bl	1004b544 <LL_LE_Set_Advertising_Parameters_Default>
1004b518:	2300      	movs	r3, #0
1004b51a:	9300      	str	r3, [sp, #0]
1004b51c:	2101      	movs	r1, #1
1004b51e:	4d07      	ldr	r5, [pc, #28]	@ (1004b53c <__arm_cp.22_0>)
1004b520:	4620      	mov	r0, r4
1004b522:	462a      	mov	r2, r5
1004b524:	f000 f82c 	bl	1004b580 <LL_Set_Extented_Advertising_Enable>
1004b528:	4604      	mov	r4, r0
1004b52a:	4805      	ldr	r0, [pc, #20]	@ (1004b540 <__arm_cp.22_1>)
1004b52c:	6801      	ldr	r1, [r0, #0]
1004b52e:	3156      	adds	r1, #86	@ 0x56
1004b530:	4628      	mov	r0, r5
1004b532:	f000 f98f 	bl	1004b854 <LL_Set_Extented_Advertising_Set_Random_Address>
1004b536:	4620      	mov	r0, r4
1004b538:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1004b53a:	46c0      	nop			@ (mov r8, r8)

1004b53c <__arm_cp.22_0>:
1004b53c:	0000fffc 	.word	0x0000fffc

1004b540 <__arm_cp.22_1>:
1004b540:	200006c8 	.word	0x200006c8

1004b544 <LL_LE_Set_Advertising_Parameters_Default>:
1004b544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004b546:	480c      	ldr	r0, [pc, #48]	@ (1004b578 <__arm_cp.23_0>)
1004b548:	f7ff fee4 	bl	1004b314 <llc_get_advertising_set_index>
1004b54c:	490b      	ldr	r1, [pc, #44]	@ (1004b57c <__arm_cp.23_1>)
1004b54e:	4288      	cmp	r0, r1
1004b550:	d110      	bne.n	1004b574 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1004b552:	466c      	mov	r4, sp
1004b554:	2100      	movs	r1, #0
1004b556:	7221      	strb	r1, [r4, #8]
1004b558:	2001      	movs	r0, #1
1004b55a:	02c0      	lsls	r0, r0, #11
1004b55c:	8020      	strh	r0, [r4, #0]
1004b55e:	2007      	movs	r0, #7
1004b560:	0200      	lsls	r0, r0, #8
1004b562:	9001      	str	r0, [sp, #4]
1004b564:	4620      	mov	r0, r4
1004b566:	3009      	adds	r0, #9
1004b568:	2206      	movs	r2, #6
1004b56a:	f7f6 fb2f 	bl	10041bcc <BLEPLAT_MemSet>
1004b56e:	4620      	mov	r0, r4
1004b570:	f7ff ff4a 	bl	1004b408 <LL_LE_Set_Advertising_Parameters>
1004b574:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1004b576:	46c0      	nop			@ (mov r8, r8)

1004b578 <__arm_cp.23_0>:
1004b578:	0000fffc 	.word	0x0000fffc

1004b57c <__arm_cp.23_1>:
1004b57c:	0000ffff 	.word	0x0000ffff

1004b580 <LL_Set_Extented_Advertising_Enable>:
1004b580:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b582:	b08f      	sub	sp, #60	@ 0x3c
1004b584:	930e      	str	r3, [sp, #56]	@ 0x38
1004b586:	4617      	mov	r7, r2
1004b588:	460d      	mov	r5, r1
1004b58a:	4606      	mov	r6, r0
1004b58c:	4305      	orrs	r5, r0
1004b58e:	f001 f83b 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004b592:	4604      	mov	r4, r0
1004b594:	2d00      	cmp	r5, #0
1004b596:	d007      	beq.n	1004b5a8 <LL_Set_Extented_Advertising_Enable+0x28>
1004b598:	4638      	mov	r0, r7
1004b59a:	f7ff febb 	bl	1004b314 <llc_get_advertising_set_index>
1004b59e:	49a7      	ldr	r1, [pc, #668]	@ (1004b83c <__arm_cp.24_1>)
1004b5a0:	4288      	cmp	r0, r1
1004b5a2:	d118      	bne.n	1004b5d6 <LL_Set_Extented_Advertising_Enable+0x56>
1004b5a4:	2042      	movs	r0, #66	@ 0x42
1004b5a6:	e04a      	b.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b5a8:	4625      	mov	r5, r4
1004b5aa:	354d      	adds	r5, #77	@ 0x4d
1004b5ac:	2600      	movs	r6, #0
1004b5ae:	4637      	mov	r7, r6
1004b5b0:	960e      	str	r6, [sp, #56]	@ 0x38
1004b5b2:	7828      	ldrb	r0, [r5, #0]
1004b5b4:	4286      	cmp	r6, r0
1004b5b6:	d20c      	bcs.n	1004b5d2 <LL_Set_Extented_Advertising_Enable+0x52>
1004b5b8:	6820      	ldr	r0, [r4, #0]
1004b5ba:	19c0      	adds	r0, r0, r7
1004b5bc:	21ce      	movs	r1, #206	@ 0xce
1004b5be:	5c41      	ldrb	r1, [r0, r1]
1004b5c0:	2901      	cmp	r1, #1
1004b5c2:	d101      	bne.n	1004b5c8 <LL_Set_Extented_Advertising_Enable+0x48>
1004b5c4:	f000 f992 	bl	1004b8ec <EADV_stop>
1004b5c8:	2001      	movs	r0, #1
1004b5ca:	0200      	lsls	r0, r0, #8
1004b5cc:	183f      	adds	r7, r7, r0
1004b5ce:	1c76      	adds	r6, r6, #1
1004b5d0:	e7ef      	b.n	1004b5b2 <LL_Set_Extented_Advertising_Enable+0x32>
1004b5d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004b5d4:	e033      	b.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b5d6:	0201      	lsls	r1, r0, #8
1004b5d8:	6822      	ldr	r2, [r4, #0]
1004b5da:	1854      	adds	r4, r2, r1
1004b5dc:	21ce      	movs	r1, #206	@ 0xce
1004b5de:	5c61      	ldrb	r1, [r4, r1]
1004b5e0:	2e01      	cmp	r6, #1
1004b5e2:	d124      	bne.n	1004b62e <LL_Set_Extented_Advertising_Enable+0xae>
1004b5e4:	0200      	lsls	r0, r0, #8
1004b5e6:	1815      	adds	r5, r2, r0
1004b5e8:	20d6      	movs	r0, #214	@ 0xd6
1004b5ea:	5c28      	ldrb	r0, [r5, r0]
1004b5ec:	2701      	movs	r7, #1
1004b5ee:	4038      	ands	r0, r7
1004b5f0:	2900      	cmp	r1, #0
1004b5f2:	d026      	beq.n	1004b642 <LL_Set_Extented_Advertising_Enable+0xc2>
1004b5f4:	2800      	cmp	r0, #0
1004b5f6:	d00a      	beq.n	1004b60e <LL_Set_Extented_Advertising_Enable+0x8e>
1004b5f8:	208c      	movs	r0, #140	@ 0x8c
1004b5fa:	5828      	ldr	r0, [r5, r0]
1004b5fc:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1004b5fe:	462a      	mov	r2, r5
1004b600:	328c      	adds	r2, #140	@ 0x8c
1004b602:	6852      	ldr	r2, [r2, #4]
1004b604:	c105      	stmia	r1!, {r0, r2}
1004b606:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1004b608:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1004b60a:	6769      	str	r1, [r5, #116]	@ 0x74
1004b60c:	67a8      	str	r0, [r5, #120]	@ 0x78
1004b60e:	2094      	movs	r0, #148	@ 0x94
1004b610:	5828      	ldr	r0, [r5, r0]
1004b612:	2600      	movs	r6, #0
1004b614:	2800      	cmp	r0, #0
1004b616:	d008      	beq.n	1004b62a <LL_Set_Extented_Advertising_Enable+0xaa>
1004b618:	3594      	adds	r5, #148	@ 0x94
1004b61a:	207d      	movs	r0, #125	@ 0x7d
1004b61c:	0144      	lsls	r4, r0, #5
1004b61e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004b620:	4344      	muls	r4, r0
1004b622:	f7f6 fb46 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004b626:	1820      	adds	r0, r4, r0
1004b628:	6028      	str	r0, [r5, #0]
1004b62a:	4630      	mov	r0, r6
1004b62c:	e007      	b.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b62e:	2000      	movs	r0, #0
1004b630:	2901      	cmp	r1, #1
1004b632:	d104      	bne.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b634:	4605      	mov	r5, r0
1004b636:	4620      	mov	r0, r4
1004b638:	f000 f958 	bl	1004b8ec <EADV_stop>
1004b63c:	4628      	mov	r0, r5
1004b63e:	b00f      	add	sp, #60	@ 0x3c
1004b640:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b642:	2800      	cmp	r0, #0
1004b644:	d007      	beq.n	1004b656 <LL_Set_Extented_Advertising_Enable+0xd6>
1004b646:	208c      	movs	r0, #140	@ 0x8c
1004b648:	5828      	ldr	r0, [r5, r0]
1004b64a:	2800      	cmp	r0, #0
1004b64c:	d103      	bne.n	1004b656 <LL_Set_Extented_Advertising_Enable+0xd6>
1004b64e:	2090      	movs	r0, #144	@ 0x90
1004b650:	5828      	ldr	r0, [r5, r0]
1004b652:	2800      	cmp	r0, #0
1004b654:	d006      	beq.n	1004b664 <LL_Set_Extented_Advertising_Enable+0xe4>
1004b656:	20b8      	movs	r0, #184	@ 0xb8
1004b658:	5a28      	ldrh	r0, [r5, r0]
1004b65a:	07c1      	lsls	r1, r0, #31
1004b65c:	d004      	beq.n	1004b668 <LL_Set_Extented_Advertising_Enable+0xe8>
1004b65e:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1004b660:	29f5      	cmp	r1, #245	@ 0xf5
1004b662:	d901      	bls.n	1004b668 <LL_Set_Extented_Advertising_Enable+0xe8>
1004b664:	2012      	movs	r0, #18
1004b666:	e7ea      	b.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b668:	2312      	movs	r3, #18
1004b66a:	4601      	mov	r1, r0
1004b66c:	461a      	mov	r2, r3
1004b66e:	4019      	ands	r1, r3
1004b670:	2902      	cmp	r1, #2
1004b672:	d103      	bne.n	1004b67c <LL_Set_Extented_Advertising_Enable+0xfc>
1004b674:	2142      	movs	r1, #66	@ 0x42
1004b676:	5a69      	ldrh	r1, [r5, r1]
1004b678:	2900      	cmp	r1, #0
1004b67a:	d040      	beq.n	1004b6fe <LL_Set_Extented_Advertising_Enable+0x17e>
1004b67c:	0700      	lsls	r0, r0, #28
1004b67e:	d50f      	bpl.n	1004b6a0 <LL_Set_Extented_Advertising_Enable+0x120>
1004b680:	486d      	ldr	r0, [pc, #436]	@ (1004b838 <__arm_cp.24_0>)
1004b682:	21be      	movs	r1, #190	@ 0xbe
1004b684:	5a69      	ldrh	r1, [r5, r1]
1004b686:	4281      	cmp	r1, r0
1004b688:	d001      	beq.n	1004b68e <LL_Set_Extented_Advertising_Enable+0x10e>
1004b68a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004b68c:	e000      	b.n	1004b690 <LL_Set_Extented_Advertising_Enable+0x110>
1004b68e:	2080      	movs	r0, #128	@ 0x80
1004b690:	2880      	cmp	r0, #128	@ 0x80
1004b692:	d901      	bls.n	1004b698 <LL_Set_Extented_Advertising_Enable+0x118>
1004b694:	4610      	mov	r0, r2
1004b696:	e7d2      	b.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b698:	900e      	str	r0, [sp, #56]	@ 0x38
1004b69a:	2800      	cmp	r0, #0
1004b69c:	4610      	mov	r0, r2
1004b69e:	d0ce      	beq.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b6a0:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004b6a2:	21ba      	movs	r1, #186	@ 0xba
1004b6a4:	5268      	strh	r0, [r5, r1]
1004b6a6:	267d      	movs	r6, #125	@ 0x7d
1004b6a8:	0171      	lsls	r1, r6, #5
1004b6aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004b6ac:	4351      	muls	r1, r2
1004b6ae:	2294      	movs	r2, #148	@ 0x94
1004b6b0:	50a9      	str	r1, [r5, r2]
1004b6b2:	2800      	cmp	r0, #0
1004b6b4:	d001      	beq.n	1004b6ba <LL_Set_Extented_Advertising_Enable+0x13a>
1004b6b6:	21cf      	movs	r1, #207	@ 0xcf
1004b6b8:	546f      	strb	r7, [r5, r1]
1004b6ba:	21bc      	movs	r1, #188	@ 0xbc
1004b6bc:	5268      	strh	r0, [r5, r1]
1004b6be:	4620      	mov	r0, r4
1004b6c0:	f000 fd34 	bl	1004c12c <EADV_start_request_radio_tasks_ucfg_weak>
1004b6c4:	2800      	cmp	r0, #0
1004b6c6:	d1ba      	bne.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b6c8:	4629      	mov	r1, r5
1004b6ca:	31d6      	adds	r1, #214	@ 0xd6
1004b6cc:	4628      	mov	r0, r5
1004b6ce:	3064      	adds	r0, #100	@ 0x64
1004b6d0:	462a      	mov	r2, r5
1004b6d2:	3254      	adds	r2, #84	@ 0x54
1004b6d4:	676a      	str	r2, [r5, #116]	@ 0x74
1004b6d6:	67a8      	str	r0, [r5, #120]	@ 0x78
1004b6d8:	462b      	mov	r3, r5
1004b6da:	3378      	adds	r3, #120	@ 0x78
1004b6dc:	7809      	ldrb	r1, [r1, #0]
1004b6de:	07c9      	lsls	r1, r1, #31
1004b6e0:	930d      	str	r3, [sp, #52]	@ 0x34
1004b6e2:	d10e      	bne.n	1004b702 <LL_Set_Extented_Advertising_Enable+0x182>
1004b6e4:	2100      	movs	r1, #0
1004b6e6:	6001      	str	r1, [r0, #0]
1004b6e8:	66a9      	str	r1, [r5, #104]	@ 0x68
1004b6ea:	4855      	ldr	r0, [pc, #340]	@ (1004b840 <__arm_cp.24_2>)
1004b6ec:	6801      	ldr	r1, [r0, #0]
1004b6ee:	4620      	mov	r0, r4
1004b6f0:	3065      	adds	r0, #101	@ 0x65
1004b6f2:	2206      	movs	r2, #6
1004b6f4:	f7f6 fa5a 	bl	10041bac <BLEPLAT_MemCpy>
1004b6f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004b6fa:	6800      	ldr	r0, [r0, #0]
1004b6fc:	e008      	b.n	1004b710 <LL_Set_Extented_Advertising_Enable+0x190>
1004b6fe:	200c      	movs	r0, #12
1004b700:	e79d      	b.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b702:	218c      	movs	r1, #140	@ 0x8c
1004b704:	5869      	ldr	r1, [r5, r1]
1004b706:	462a      	mov	r2, r5
1004b708:	328c      	adds	r2, #140	@ 0x8c
1004b70a:	6852      	ldr	r2, [r2, #4]
1004b70c:	c006      	stmia	r0!, {r1, r2}
1004b70e:	3808      	subs	r0, #8
1004b710:	4629      	mov	r1, r5
1004b712:	3194      	adds	r1, #148	@ 0x94
1004b714:	910e      	str	r1, [sp, #56]	@ 0x38
1004b716:	2184      	movs	r1, #132	@ 0x84
1004b718:	5869      	ldr	r1, [r5, r1]
1004b71a:	462a      	mov	r2, r5
1004b71c:	3284      	adds	r2, #132	@ 0x84
1004b71e:	6852      	ldr	r2, [r2, #4]
1004b720:	6081      	str	r1, [r0, #8]
1004b722:	60c2      	str	r2, [r0, #12]
1004b724:	4620      	mov	r0, r4
1004b726:	f7ff fe11 	bl	1004b34c <llc_eadv_generate_new_rpa_for_one_adv_set>
1004b72a:	2800      	cmp	r0, #0
1004b72c:	960c      	str	r6, [sp, #48]	@ 0x30
1004b72e:	d002      	beq.n	1004b736 <LL_Set_Extented_Advertising_Enable+0x1b6>
1004b730:	f7ff fc42 	bl	1004afb8 <llc_priv_start_privacy_timer_ucfg_weak>
1004b734:	e006      	b.n	1004b744 <LL_Set_Extented_Advertising_Enable+0x1c4>
1004b736:	4628      	mov	r0, r5
1004b738:	3074      	adds	r0, #116	@ 0x74
1004b73a:	6801      	ldr	r1, [r0, #0]
1004b73c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004b73e:	681a      	ldr	r2, [r3, #0]
1004b740:	6002      	str	r2, [r0, #0]
1004b742:	6019      	str	r1, [r3, #0]
1004b744:	990e      	ldr	r1, [sp, #56]	@ 0x38
1004b746:	4626      	mov	r6, r4
1004b748:	36ce      	adds	r6, #206	@ 0xce
1004b74a:	4628      	mov	r0, r5
1004b74c:	30b8      	adds	r0, #184	@ 0xb8
1004b74e:	900d      	str	r0, [sp, #52]	@ 0x34
1004b750:	6808      	ldr	r0, [r1, #0]
1004b752:	2800      	cmp	r0, #0
1004b754:	d005      	beq.n	1004b762 <LL_Set_Extented_Advertising_Enable+0x1e2>
1004b756:	f7f6 faac 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004b75a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004b75c:	6811      	ldr	r1, [r2, #0]
1004b75e:	1808      	adds	r0, r1, r0
1004b760:	6010      	str	r0, [r2, #0]
1004b762:	7037      	strb	r7, [r6, #0]
1004b764:	20c4      	movs	r0, #196	@ 0xc4
1004b766:	5c29      	ldrb	r1, [r5, r0]
1004b768:	27d0      	movs	r7, #208	@ 0xd0
1004b76a:	5de8      	ldrb	r0, [r5, r7]
1004b76c:	2281      	movs	r2, #129	@ 0x81
1004b76e:	920e      	str	r2, [sp, #56]	@ 0x38
1004b770:	9200      	str	r2, [sp, #0]
1004b772:	462e      	mov	r6, r5
1004b774:	3614      	adds	r6, #20
1004b776:	4622      	mov	r2, r4
1004b778:	4633      	mov	r3, r6
1004b77a:	f7ff fd9d 	bl	1004b2b8 <LL_eadv_BLUE_SM>
1004b77e:	5de8      	ldrb	r0, [r5, r7]
1004b780:	2125      	movs	r1, #37	@ 0x25
1004b782:	f7f7 f917 	bl	100429b4 <BLEPLAT_CNTR_SmSetDataLength>
1004b786:	462f      	mov	r7, r5
1004b788:	37d0      	adds	r7, #208	@ 0xd0
1004b78a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004b78c:	8800      	ldrh	r0, [r0, #0]
1004b78e:	06c0      	lsls	r0, r0, #27
1004b790:	d403      	bmi.n	1004b79a <LL_Set_Extented_Advertising_Enable+0x21a>
1004b792:	4620      	mov	r0, r4
1004b794:	f000 fcf7 	bl	1004c186 <LL_eadv_start_extended_ucfg_weak>
1004b798:	e042      	b.n	1004b820 <LL_Set_Extented_Advertising_Enable+0x2a0>
1004b79a:	f7f6 fa8a 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004b79e:	219c      	movs	r1, #156	@ 0x9c
1004b7a0:	910b      	str	r1, [sp, #44]	@ 0x2c
1004b7a2:	5068      	str	r0, [r5, r1]
1004b7a4:	f000 ff20 	bl	1004c5e8 <LL_get_tx_common_buffer_p>
1004b7a8:	9009      	str	r0, [sp, #36]	@ 0x24
1004b7aa:	f000 ff25 	bl	1004c5f8 <LL_get_rx_common_buffer_p>
1004b7ae:	900a      	str	r0, [sp, #40]	@ 0x28
1004b7b0:	7838      	ldrb	r0, [r7, #0]
1004b7b2:	9008      	str	r0, [sp, #32]
1004b7b4:	2094      	movs	r0, #148	@ 0x94
1004b7b6:	2100      	movs	r1, #0
1004b7b8:	910d      	str	r1, [sp, #52]	@ 0x34
1004b7ba:	460a      	mov	r2, r1
1004b7bc:	f7f6 fe90 	bl	100424e0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1004b7c0:	4603      	mov	r3, r0
1004b7c2:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004b7c4:	9000      	str	r0, [sp, #0]
1004b7c6:	4620      	mov	r0, r4
1004b7c8:	9908      	ldr	r1, [sp, #32]
1004b7ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004b7cc:	f7ff fcf9 	bl	1004b1c2 <LL_eadv_Blue_Tx>
1004b7d0:	7838      	ldrb	r0, [r7, #0]
1004b7d2:	9009      	str	r0, [sp, #36]	@ 0x24
1004b7d4:	2096      	movs	r0, #150	@ 0x96
1004b7d6:	2101      	movs	r1, #1
1004b7d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004b7da:	f7f6 fe81 	bl	100424e0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1004b7de:	4603      	mov	r3, r0
1004b7e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004b7e2:	9000      	str	r0, [sp, #0]
1004b7e4:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004b7e6:	9001      	str	r0, [sp, #4]
1004b7e8:	4630      	mov	r0, r6
1004b7ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004b7ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004b7ee:	f7ff fd23 	bl	1004b238 <LL_eadv_Blue_Rx>
1004b7f2:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1004b7f4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004b7f6:	582a      	ldr	r2, [r5, r0]
1004b7f8:	7838      	ldrb	r0, [r7, #0]
1004b7fa:	4b12      	ldr	r3, [pc, #72]	@ (1004b844 <__arm_cp.24_3>)
1004b7fc:	9307      	str	r3, [sp, #28]
1004b7fe:	4b12      	ldr	r3, [pc, #72]	@ (1004b848 <__arm_cp.24_4>)
1004b800:	9306      	str	r3, [sp, #24]
1004b802:	4b12      	ldr	r3, [pc, #72]	@ (1004b84c <__arm_cp.24_5>)
1004b804:	9305      	str	r3, [sp, #20]
1004b806:	4b12      	ldr	r3, [pc, #72]	@ (1004b850 <__arm_cp.24_6>)
1004b808:	9304      	str	r3, [sp, #16]
1004b80a:	2314      	movs	r3, #20
1004b80c:	9303      	str	r3, [sp, #12]
1004b80e:	231f      	movs	r3, #31
1004b810:	ae00      	add	r6, sp, #0
1004b812:	c60e      	stmia	r6!, {r1, r2, r3}
1004b814:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004b816:	00cb      	lsls	r3, r1, #3
1004b818:	4621      	mov	r1, r4
1004b81a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004b81c:	f000 ff3a 	bl	1004c694 <LL_sched_enable_taskslot>
1004b820:	249c      	movs	r4, #156	@ 0x9c
1004b822:	5929      	ldr	r1, [r5, r4]
1004b824:	7838      	ldrb	r0, [r7, #0]
1004b826:	f000 ff1b 	bl	1004c660 <LL_sched_set_anchor>
1004b82a:	5928      	ldr	r0, [r5, r4]
1004b82c:	7839      	ldrb	r1, [r7, #0]
1004b82e:	f001 f989 	bl	1004cb44 <LL_sched_check_and_call_sched>
1004b832:	2000      	movs	r0, #0
1004b834:	e703      	b.n	1004b63e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b836:	46c0      	nop			@ (mov r8, r8)

1004b838 <__arm_cp.24_0>:
1004b838:	0000fffc 	.word	0x0000fffc

1004b83c <__arm_cp.24_1>:
1004b83c:	0000ffff 	.word	0x0000ffff

1004b840 <__arm_cp.24_2>:
1004b840:	200006b8 	.word	0x200006b8

1004b844 <__arm_cp.24_3>:
1004b844:	1004ba99 	.word	0x1004ba99

1004b848 <__arm_cp.24_4>:
1004b848:	1004be91 	.word	0x1004be91

1004b84c <__arm_cp.24_5>:
1004b84c:	1004bd6d 	.word	0x1004bd6d

1004b850 <__arm_cp.24_6>:
1004b850:	1004baa1 	.word	0x1004baa1

1004b854 <LL_Set_Extented_Advertising_Set_Random_Address>:
1004b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b856:	460c      	mov	r4, r1
1004b858:	4606      	mov	r6, r0
1004b85a:	f000 fed5 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004b85e:	4607      	mov	r7, r0
1004b860:	4630      	mov	r0, r6
1004b862:	f7ff fd57 	bl	1004b314 <llc_get_advertising_set_index>
1004b866:	4605      	mov	r5, r0
1004b868:	4816      	ldr	r0, [pc, #88]	@ (1004b8c4 <__arm_cp.25_0>)
1004b86a:	4285      	cmp	r5, r0
1004b86c:	d027      	beq.n	1004b8be <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1004b86e:	0228      	lsls	r0, r5, #8
1004b870:	683f      	ldr	r7, [r7, #0]
1004b872:	1838      	adds	r0, r7, r0
1004b874:	21be      	movs	r1, #190	@ 0xbe
1004b876:	5246      	strh	r6, [r0, r1]
1004b878:	21b8      	movs	r1, #184	@ 0xb8
1004b87a:	5c40      	ldrb	r0, [r0, r1]
1004b87c:	07c0      	lsls	r0, r0, #31
1004b87e:	d007      	beq.n	1004b890 <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1004b880:	0228      	lsls	r0, r5, #8
1004b882:	1838      	adds	r0, r7, r0
1004b884:	21ce      	movs	r1, #206	@ 0xce
1004b886:	5c40      	ldrb	r0, [r0, r1]
1004b888:	2801      	cmp	r0, #1
1004b88a:	d101      	bne.n	1004b890 <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1004b88c:	250c      	movs	r5, #12
1004b88e:	e017      	b.n	1004b8c0 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1004b890:	480d      	ldr	r0, [pc, #52]	@ (1004b8c8 <__arm_cp.25_1>)
1004b892:	6800      	ldr	r0, [r0, #0]
1004b894:	3056      	adds	r0, #86	@ 0x56
1004b896:	2606      	movs	r6, #6
1004b898:	4621      	mov	r1, r4
1004b89a:	4632      	mov	r2, r6
1004b89c:	f7f6 f986 	bl	10041bac <BLEPLAT_MemCpy>
1004b8a0:	0228      	lsls	r0, r5, #8
1004b8a2:	1838      	adds	r0, r7, r0
1004b8a4:	218c      	movs	r1, #140	@ 0x8c
1004b8a6:	2201      	movs	r2, #1
1004b8a8:	5042      	str	r2, [r0, r1]
1004b8aa:	4601      	mov	r1, r0
1004b8ac:	318c      	adds	r1, #140	@ 0x8c
1004b8ae:	2500      	movs	r5, #0
1004b8b0:	604d      	str	r5, [r1, #4]
1004b8b2:	308d      	adds	r0, #141	@ 0x8d
1004b8b4:	4621      	mov	r1, r4
1004b8b6:	4632      	mov	r2, r6
1004b8b8:	f7f6 f978 	bl	10041bac <BLEPLAT_MemCpy>
1004b8bc:	e000      	b.n	1004b8c0 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1004b8be:	2512      	movs	r5, #18
1004b8c0:	4628      	mov	r0, r5
1004b8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004b8c4 <__arm_cp.25_0>:
1004b8c4:	0000ffff 	.word	0x0000ffff

1004b8c8 <__arm_cp.25_1>:
1004b8c8:	200006c8 	.word	0x200006c8

1004b8cc <LL_eadv_update_did>:
1004b8cc:	b510      	push	{r4, lr}
1004b8ce:	4604      	mov	r4, r0
1004b8d0:	2000      	movs	r0, #0
1004b8d2:	f001 fe40 	bl	1004d556 <Hal_Get_Random_Number>
1004b8d6:	4904      	ldr	r1, [pc, #16]	@ (1004b8e8 <__arm_cp.27_0>)
1004b8d8:	4001      	ands	r1, r0
1004b8da:	8820      	ldrh	r0, [r4, #0]
1004b8dc:	1a40      	subs	r0, r0, r1
1004b8de:	4242      	negs	r2, r0
1004b8e0:	4142      	adcs	r2, r0
1004b8e2:	404a      	eors	r2, r1
1004b8e4:	8022      	strh	r2, [r4, #0]
1004b8e6:	bd10      	pop	{r4, pc}

1004b8e8 <__arm_cp.27_0>:
1004b8e8:	00000fff 	.word	0x00000fff

1004b8ec <EADV_stop>:
1004b8ec:	b5b0      	push	{r4, r5, r7, lr}
1004b8ee:	4604      	mov	r4, r0
1004b8f0:	f3ef 8010 	mrs	r0, PRIMASK
1004b8f4:	b672      	cpsid	i
1004b8f6:	4625      	mov	r5, r4
1004b8f8:	35ce      	adds	r5, #206	@ 0xce
1004b8fa:	78a8      	ldrb	r0, [r5, #2]
1004b8fc:	f000 feb8 	bl	1004c670 <LL_sched_set_cancel_request>
1004b900:	20d1      	movs	r0, #209	@ 0xd1
1004b902:	5c20      	ldrb	r0, [r4, r0]
1004b904:	f000 feb4 	bl	1004c670 <LL_sched_set_cancel_request>
1004b908:	b662      	cpsie	i
1004b90a:	78a8      	ldrb	r0, [r5, #2]
1004b90c:	f001 f92a 	bl	1004cb64 <LL_sched_check_and_wait_sched>
1004b910:	20ce      	movs	r0, #206	@ 0xce
1004b912:	2100      	movs	r1, #0
1004b914:	5221      	strh	r1, [r4, r0]
1004b916:	7aa8      	ldrb	r0, [r5, #10]
1004b918:	28ff      	cmp	r0, #255	@ 0xff
1004b91a:	d001      	beq.n	1004b920 <EADV_stop+0x34>
1004b91c:	f7ff fb32 	bl	1004af84 <llc_conn_release_conn_idx>
1004b920:	20ff      	movs	r0, #255	@ 0xff
1004b922:	72a8      	strb	r0, [r5, #10]
1004b924:	7a28      	ldrb	r0, [r5, #8]
1004b926:	0780      	lsls	r0, r0, #30
1004b928:	d501      	bpl.n	1004b92e <EADV_stop+0x42>
1004b92a:	f7ff fb46 	bl	1004afba <llc_priv_stop_privacy_timer_ucfg_weak>
1004b92e:	bdb0      	pop	{r4, r5, r7, pc}

1004b930 <LL_Set_Advertising_Set_Random_Address>:
1004b930:	b510      	push	{r4, lr}
1004b932:	4604      	mov	r4, r0
1004b934:	f7ff f91b 	bl	1004ab6e <scan_csr_ucfg_weak>
1004b938:	2801      	cmp	r0, #1
1004b93a:	d105      	bne.n	1004b948 <LL_Set_Advertising_Set_Random_Address+0x18>
1004b93c:	f7ff fb40 	bl	1004afc0 <llc_scan_get_cntxt_p>
1004b940:	21eb      	movs	r1, #235	@ 0xeb
1004b942:	5c40      	ldrb	r0, [r0, r1]
1004b944:	07c0      	lsls	r0, r0, #31
1004b946:	d106      	bne.n	1004b956 <LL_Set_Advertising_Set_Random_Address+0x26>
1004b948:	f7ff fdfc 	bl	1004b544 <LL_LE_Set_Advertising_Parameters_Default>
1004b94c:	4803      	ldr	r0, [pc, #12]	@ (1004b95c <__arm_cp.29_0>)
1004b94e:	4621      	mov	r1, r4
1004b950:	f7ff ff80 	bl	1004b854 <LL_Set_Extented_Advertising_Set_Random_Address>
1004b954:	bd10      	pop	{r4, pc}
1004b956:	200c      	movs	r0, #12
1004b958:	bd10      	pop	{r4, pc}
1004b95a:	46c0      	nop			@ (mov r8, r8)

1004b95c <__arm_cp.29_0>:
1004b95c:	0000fffc 	.word	0x0000fffc

1004b960 <ll_set_advertising_data_ptr>:
1004b960:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004b962:	9301      	str	r3, [sp, #4]
1004b964:	4614      	mov	r4, r2
1004b966:	9102      	str	r1, [sp, #8]
1004b968:	4605      	mov	r5, r0
1004b96a:	f000 fe4d 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004b96e:	4607      	mov	r7, r0
1004b970:	4834      	ldr	r0, [pc, #208]	@ (1004ba44 <__arm_cp.33_0>)
1004b972:	4285      	cmp	r5, r0
1004b974:	d101      	bne.n	1004b97a <ll_set_advertising_data_ptr+0x1a>
1004b976:	201f      	movs	r0, #31
1004b978:	e007      	b.n	1004b98a <ll_set_advertising_data_ptr+0x2a>
1004b97a:	2001      	movs	r0, #1
1004b97c:	2102      	movs	r1, #2
1004b97e:	f7ff f8d3 	bl	1004ab28 <hci_get_set_legacy_ext_flag>
1004b982:	4606      	mov	r6, r0
1004b984:	2800      	cmp	r0, #0
1004b986:	d111      	bne.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004b988:	482f      	ldr	r0, [pc, #188]	@ (1004ba48 <__arm_cp.33_1>)
1004b98a:	2612      	movs	r6, #18
1004b98c:	42a0      	cmp	r0, r4
1004b98e:	d30d      	bcc.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004b990:	9600      	str	r6, [sp, #0]
1004b992:	4628      	mov	r0, r5
1004b994:	f7ff fcbe 	bl	1004b314 <llc_get_advertising_set_index>
1004b998:	0200      	lsls	r0, r0, #8
1004b99a:	6839      	ldr	r1, [r7, #0]
1004b99c:	180f      	adds	r7, r1, r0
1004b99e:	4620      	mov	r0, r4
1004b9a0:	4639      	mov	r1, r7
1004b9a2:	f000 fbee 	bl	1004c182 <llc_eadv_max_supported_data_check_ucfg_weak>
1004b9a6:	4606      	mov	r6, r0
1004b9a8:	2800      	cmp	r0, #0
1004b9aa:	d001      	beq.n	1004b9b0 <ll_set_advertising_data_ptr+0x50>
1004b9ac:	4630      	mov	r0, r6
1004b9ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b9b0:	20ce      	movs	r0, #206	@ 0xce
1004b9b2:	5c39      	ldrb	r1, [r7, r0]
1004b9b4:	2038      	movs	r0, #56	@ 0x38
1004b9b6:	5c38      	ldrb	r0, [r7, r0]
1004b9b8:	9a02      	ldr	r2, [sp, #8]
1004b9ba:	2a04      	cmp	r2, #4
1004b9bc:	d111      	bne.n	1004b9e2 <ll_set_advertising_data_ptr+0x82>
1004b9be:	2900      	cmp	r1, #0
1004b9c0:	d03d      	beq.n	1004ba3e <ll_set_advertising_data_ptr+0xde>
1004b9c2:	2800      	cmp	r0, #0
1004b9c4:	9e00      	ldr	r6, [sp, #0]
1004b9c6:	d0f1      	beq.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004b9c8:	481e      	ldr	r0, [pc, #120]	@ (1004ba44 <__arm_cp.33_0>)
1004b9ca:	4285      	cmp	r5, r0
1004b9cc:	d1ee      	bne.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004b9ce:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
1004b9d0:	2800      	cmp	r0, #0
1004b9d2:	d0eb      	beq.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004b9d4:	20b8      	movs	r0, #184	@ 0xb8
1004b9d6:	5a38      	ldrh	r0, [r7, r0]
1004b9d8:	2110      	movs	r1, #16
1004b9da:	4001      	ands	r1, r0
1004b9dc:	4321      	orrs	r1, r4
1004b9de:	d1e5      	bne.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004b9e0:	e00d      	b.n	1004b9fe <ll_set_advertising_data_ptr+0x9e>
1004b9e2:	463d      	mov	r5, r7
1004b9e4:	3538      	adds	r5, #56	@ 0x38
1004b9e6:	2900      	cmp	r1, #0
1004b9e8:	d016      	beq.n	1004ba18 <ll_set_advertising_data_ptr+0xb8>
1004b9ea:	2a03      	cmp	r2, #3
1004b9ec:	d107      	bne.n	1004b9fe <ll_set_advertising_data_ptr+0x9e>
1004b9ee:	2002      	movs	r0, #2
1004b9f0:	7028      	strb	r0, [r5, #0]
1004b9f2:	86fc      	strh	r4, [r7, #54]	@ 0x36
1004b9f4:	2000      	movs	r0, #0
1004b9f6:	86b8      	strh	r0, [r7, #52]	@ 0x34
1004b9f8:	9801      	ldr	r0, [sp, #4]
1004b9fa:	6338      	str	r0, [r7, #48]	@ 0x30
1004b9fc:	e003      	b.n	1004ba06 <ll_set_advertising_data_ptr+0xa6>
1004b9fe:	4638      	mov	r0, r7
1004ba00:	30b6      	adds	r0, #182	@ 0xb6
1004ba02:	f7ff ff63 	bl	1004b8cc <LL_eadv_update_did>
1004ba06:	20da      	movs	r0, #218	@ 0xda
1004ba08:	5c38      	ldrb	r0, [r7, r0]
1004ba0a:	2600      	movs	r6, #0
1004ba0c:	07c0      	lsls	r0, r0, #31
1004ba0e:	d0cd      	beq.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004ba10:	4638      	mov	r0, r7
1004ba12:	f7ff fc9b 	bl	1004b34c <llc_eadv_generate_new_rpa_for_one_adv_set>
1004ba16:	e7c9      	b.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004ba18:	9702      	str	r7, [sp, #8]
1004ba1a:	463e      	mov	r6, r7
1004ba1c:	3628      	adds	r6, #40	@ 0x28
1004ba1e:	2800      	cmp	r0, #0
1004ba20:	9f01      	ldr	r7, [sp, #4]
1004ba22:	d004      	beq.n	1004ba2e <ll_set_advertising_data_ptr+0xce>
1004ba24:	6831      	ldr	r1, [r6, #0]
1004ba26:	20a1      	movs	r0, #161	@ 0xa1
1004ba28:	463a      	mov	r2, r7
1004ba2a:	f001 fe71 	bl	1004d710 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1004ba2e:	6037      	str	r7, [r6, #0]
1004ba30:	2001      	movs	r0, #1
1004ba32:	7028      	strb	r0, [r5, #0]
1004ba34:	9802      	ldr	r0, [sp, #8]
1004ba36:	85c4      	strh	r4, [r0, #46]	@ 0x2e
1004ba38:	2600      	movs	r6, #0
1004ba3a:	8586      	strh	r6, [r0, #44]	@ 0x2c
1004ba3c:	e7b6      	b.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004ba3e:	9e00      	ldr	r6, [sp, #0]
1004ba40:	e7b4      	b.n	1004b9ac <ll_set_advertising_data_ptr+0x4c>
1004ba42:	46c0      	nop			@ (mov r8, r8)

1004ba44 <__arm_cp.33_0>:
1004ba44:	0000fffc 	.word	0x0000fffc

1004ba48 <__arm_cp.33_1>:
1004ba48:	00000672 	.word	0x00000672

1004ba4c <ll_set_legacy_advertising_data_ptr>:
1004ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ba4e:	460c      	mov	r4, r1
1004ba50:	4605      	mov	r5, r0
1004ba52:	f000 fdd9 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004ba56:	4607      	mov	r7, r0
1004ba58:	f7ff fd74 	bl	1004b544 <LL_LE_Set_Advertising_Parameters_Default>
1004ba5c:	4e0c      	ldr	r6, [pc, #48]	@ (1004ba90 <__arm_cp.36_0>)
1004ba5e:	4630      	mov	r0, r6
1004ba60:	f7ff fc58 	bl	1004b314 <llc_get_advertising_set_index>
1004ba64:	490b      	ldr	r1, [pc, #44]	@ (1004ba94 <__arm_cp.36_1>)
1004ba66:	4288      	cmp	r0, r1
1004ba68:	d108      	bne.n	1004ba7c <ll_set_legacy_advertising_data_ptr+0x30>
1004ba6a:	f7ff fd3b 	bl	1004b4e4 <LL_Context_ReturnFree>
1004ba6e:	28ff      	cmp	r0, #255	@ 0xff
1004ba70:	d00b      	beq.n	1004ba8a <ll_set_legacy_advertising_data_ptr+0x3e>
1004ba72:	0200      	lsls	r0, r0, #8
1004ba74:	6839      	ldr	r1, [r7, #0]
1004ba76:	1808      	adds	r0, r1, r0
1004ba78:	21be      	movs	r1, #190	@ 0xbe
1004ba7a:	5246      	strh	r6, [r0, r1]
1004ba7c:	2103      	movs	r1, #3
1004ba7e:	4630      	mov	r0, r6
1004ba80:	462a      	mov	r2, r5
1004ba82:	4623      	mov	r3, r4
1004ba84:	f7ff ff6c 	bl	1004b960 <ll_set_advertising_data_ptr>
1004ba88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004ba8a:	2001      	movs	r0, #1
1004ba8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004ba8e:	46c0      	nop			@ (mov r8, r8)

1004ba90 <__arm_cp.36_0>:
1004ba90:	0000fffc 	.word	0x0000fffc

1004ba94 <__arm_cp.36_1>:
1004ba94:	0000ffff 	.word	0x0000ffff

1004ba98 <ADV_cancelslot>:
1004ba98:	21d0      	movs	r1, #208	@ 0xd0
1004ba9a:	22ff      	movs	r2, #255	@ 0xff
1004ba9c:	5442      	strb	r2, [r0, r1]
1004ba9e:	4770      	bx	lr

1004baa0 <ADV_skiproutine>:
1004baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004baa2:	b08d      	sub	sp, #52	@ 0x34
1004baa4:	4607      	mov	r7, r0
1004baa6:	20d0      	movs	r0, #208	@ 0xd0
1004baa8:	5c38      	ldrb	r0, [r7, r0]
1004baaa:	232c      	movs	r3, #44	@ 0x2c
1004baac:	4358      	muls	r0, r3
1004baae:	4a5f      	ldr	r2, [pc, #380]	@ (1004bc2c <__arm_cp.40_0>)
1004bab0:	6812      	ldr	r2, [r2, #0]
1004bab2:	1810      	adds	r0, r2, r0
1004bab4:	7d80      	ldrb	r0, [r0, #22]
1004bab6:	463c      	mov	r4, r7
1004bab8:	3494      	adds	r4, #148	@ 0x94
1004baba:	463a      	mov	r2, r7
1004babc:	32b4      	adds	r2, #180	@ 0xb4
1004babe:	9203      	str	r2, [sp, #12]
1004bac0:	463a      	mov	r2, r7
1004bac2:	32d6      	adds	r2, #214	@ 0xd6
1004bac4:	9202      	str	r2, [sp, #8]
1004bac6:	2814      	cmp	r0, #20
1004bac8:	9301      	str	r3, [sp, #4]
1004baca:	d10a      	bne.n	1004bae2 <ADV_skiproutine+0x42>
1004bacc:	f7f6 f8f1 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004bad0:	4605      	mov	r5, r0
1004bad2:	f000 fda5 	bl	1004c620 <LL_sched_engine_return_actual_scheduler_margin>
1004bad6:	9b03      	ldr	r3, [sp, #12]
1004bad8:	1828      	adds	r0, r5, r0
1004bada:	3032      	adds	r0, #50	@ 0x32
1004badc:	60a0      	str	r0, [r4, #8]
1004bade:	2501      	movs	r5, #1
1004bae0:	e01b      	b.n	1004bb1a <ADV_skiproutine+0x7a>
1004bae2:	68a2      	ldr	r2, [r4, #8]
1004bae4:	1856      	adds	r6, r2, r1
1004bae6:	2500      	movs	r5, #0
1004bae8:	4630      	mov	r0, r6
1004baea:	4611      	mov	r1, r2
1004baec:	f000 fd94 	bl	1004c618 <LL_sched_time_t1_ge_t2>
1004baf0:	2800      	cmp	r0, #0
1004baf2:	d005      	beq.n	1004bb00 <ADV_skiproutine+0x60>
1004baf4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1004baf6:	68a1      	ldr	r1, [r4, #8]
1004baf8:	180a      	adds	r2, r1, r0
1004bafa:	60a2      	str	r2, [r4, #8]
1004bafc:	1c6d      	adds	r5, r5, #1
1004bafe:	e7f3      	b.n	1004bae8 <ADV_skiproutine+0x48>
1004bb00:	9b03      	ldr	r3, [sp, #12]
1004bb02:	8898      	ldrh	r0, [r3, #4]
1004bb04:	0700      	lsls	r0, r0, #28
1004bb06:	d408      	bmi.n	1004bb1a <ADV_skiproutine+0x7a>
1004bb08:	2001      	movs	r0, #1
1004bb0a:	f001 fd2b 	bl	1004d564 <Hal_Get_Random_Number32>
1004bb0e:	9b03      	ldr	r3, [sp, #12]
1004bb10:	4947      	ldr	r1, [pc, #284]	@ (1004bc30 <__arm_cp.40_1>)
1004bb12:	4001      	ands	r1, r0
1004bb14:	68a0      	ldr	r0, [r4, #8]
1004bb16:	1840      	adds	r0, r0, r1
1004bb18:	60a0      	str	r0, [r4, #8]
1004bb1a:	8898      	ldrh	r0, [r3, #4]
1004bb1c:	2103      	movs	r1, #3
1004bb1e:	4001      	ands	r1, r0
1004bb20:	1e48      	subs	r0, r1, #1
1004bb22:	4181      	sbcs	r1, r0
1004bb24:	0048      	lsls	r0, r1, #1
1004bb26:	8018      	strh	r0, [r3, #0]
1004bb28:	7b98      	ldrb	r0, [r3, #14]
1004bb2a:	2201      	movs	r2, #1
1004bb2c:	4601      	mov	r1, r0
1004bb2e:	9200      	str	r2, [sp, #0]
1004bb30:	4011      	ands	r1, r2
1004bb32:	0782      	lsls	r2, r0, #30
1004bb34:	0fd2      	lsrs	r2, r2, #31
1004bb36:	1889      	adds	r1, r1, r2
1004bb38:	0740      	lsls	r0, r0, #29
1004bb3a:	0fc0      	lsrs	r0, r0, #31
1004bb3c:	1808      	adds	r0, r1, r0
1004bb3e:	1e40      	subs	r0, r0, #1
1004bb40:	7798      	strb	r0, [r3, #30]
1004bb42:	4638      	mov	r0, r7
1004bb44:	f000 f87a 	bl	1004bc3c <UTIL_u8GetNextAdvChannel>
1004bb48:	4601      	mov	r1, r0
1004bb4a:	9803      	ldr	r0, [sp, #12]
1004bb4c:	7f00      	ldrb	r0, [r0, #28]
1004bb4e:	f7f6 ff5b 	bl	10042a08 <BLEPLAT_CNTR_SmSetRemapChan>
1004bb52:	9803      	ldr	r0, [sp, #12]
1004bb54:	7f00      	ldrb	r0, [r0, #28]
1004bb56:	f7f6 ffa2 	bl	10042a9e <BLEPLAT_CNTR_SmSetTxMode>
1004bb5a:	2600      	movs	r6, #0
1004bb5c:	9802      	ldr	r0, [sp, #8]
1004bb5e:	7146      	strb	r6, [r0, #5]
1004bb60:	4638      	mov	r0, r7
1004bb62:	3028      	adds	r0, #40	@ 0x28
1004bb64:	f7ff fb1c 	bl	1004b1a0 <LL_eadv_switchbackupdata_data_struc>
1004bb68:	4638      	mov	r0, r7
1004bb6a:	303c      	adds	r0, #60	@ 0x3c
1004bb6c:	f7ff fb18 	bl	1004b1a0 <LL_eadv_switchbackupdata_data_struc>
1004bb70:	9b03      	ldr	r3, [sp, #12]
1004bb72:	68a1      	ldr	r1, [r4, #8]
1004bb74:	6820      	ldr	r0, [r4, #0]
1004bb76:	88da      	ldrh	r2, [r3, #6]
1004bb78:	2a00      	cmp	r2, #0
1004bb7a:	d102      	bne.n	1004bb82 <ADV_skiproutine+0xe2>
1004bb7c:	7eda      	ldrb	r2, [r3, #27]
1004bb7e:	2a01      	cmp	r2, #1
1004bb80:	d003      	beq.n	1004bb8a <ADV_skiproutine+0xea>
1004bb82:	4288      	cmp	r0, r1
1004bb84:	da4a      	bge.n	1004bc1c <ADV_skiproutine+0x17c>
1004bb86:	2800      	cmp	r0, #0
1004bb88:	d048      	beq.n	1004bc1c <ADV_skiproutine+0x17c>
1004bb8a:	7e98      	ldrb	r0, [r3, #26]
1004bb8c:	2800      	cmp	r0, #0
1004bb8e:	d045      	beq.n	1004bc1c <ADV_skiproutine+0x17c>
1004bb90:	8898      	ldrh	r0, [r3, #4]
1004bb92:	0700      	lsls	r0, r0, #28
1004bb94:	d51e      	bpl.n	1004bbd4 <ADV_skiproutine+0x134>
1004bb96:	a90b      	add	r1, sp, #44	@ 0x2c
1004bb98:	808e      	strh	r6, [r1, #4]
1004bb9a:	960b      	str	r6, [sp, #44]	@ 0x2c
1004bb9c:	a804      	add	r0, sp, #16
1004bb9e:	9a00      	ldr	r2, [sp, #0]
1004bba0:	7642      	strb	r2, [r0, #25]
1004bba2:	223c      	movs	r2, #60	@ 0x3c
1004bba4:	7682      	strb	r2, [r0, #26]
1004bba6:	22ff      	movs	r2, #255	@ 0xff
1004bba8:	7582      	strb	r2, [r0, #22]
1004bbaa:	81c6      	strh	r6, [r0, #14]
1004bbac:	4a21      	ldr	r2, [pc, #132]	@ (1004bc34 <__arm_cp.40_2>)
1004bbae:	8282      	strh	r2, [r0, #20]
1004bbb0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1004bbb2:	7a13      	ldrb	r3, [r2, #8]
1004bbb4:	7603      	strb	r3, [r0, #24]
1004bbb6:	8186      	strh	r6, [r0, #12]
1004bbb8:	75c6      	strb	r6, [r0, #23]
1004bbba:	9105      	str	r1, [sp, #20]
1004bbbc:	3209      	adds	r2, #9
1004bbbe:	9204      	str	r2, [sp, #16]
1004bbc0:	9608      	str	r6, [sp, #32]
1004bbc2:	9106      	str	r1, [sp, #24]
1004bbc4:	f7ff f8a6 	bl	1004ad14 <llc_conn_push_connection_complete_event>
1004bbc8:	9802      	ldr	r0, [sp, #8]
1004bbca:	7800      	ldrb	r0, [r0, #0]
1004bbcc:	0780      	lsls	r0, r0, #30
1004bbce:	d501      	bpl.n	1004bbd4 <ADV_skiproutine+0x134>
1004bbd0:	f7ff f9f3 	bl	1004afba <llc_priv_stop_privacy_timer_ucfg_weak>
1004bbd4:	2002      	movs	r0, #2
1004bbd6:	f7fe ffb5 	bl	1004ab44 <hci_check_legacy_ext_flag>
1004bbda:	2801      	cmp	r0, #1
1004bbdc:	d119      	bne.n	1004bc12 <ADV_skiproutine+0x172>
1004bbde:	9b03      	ldr	r3, [sp, #12]
1004bbe0:	88da      	ldrh	r2, [r3, #6]
1004bbe2:	2a00      	cmp	r2, #0
1004bbe4:	d001      	beq.n	1004bbea <ADV_skiproutine+0x14a>
1004bbe6:	203c      	movs	r0, #60	@ 0x3c
1004bbe8:	e000      	b.n	1004bbec <ADV_skiproutine+0x14c>
1004bbea:	2043      	movs	r0, #67	@ 0x43
1004bbec:	9000      	str	r0, [sp, #0]
1004bbee:	4812      	ldr	r0, [pc, #72]	@ (1004bc38 <__arm_cp.40_3>)
1004bbf0:	6800      	ldr	r0, [r0, #0]
1004bbf2:	9901      	ldr	r1, [sp, #4]
1004bbf4:	5c40      	ldrb	r0, [r0, r1]
1004bbf6:	0100      	lsls	r0, r0, #4
1004bbf8:	43c0      	mvns	r0, r0
1004bbfa:	4619      	mov	r1, r3
1004bbfc:	23a1      	movs	r3, #161	@ 0xa1
1004bbfe:	4303      	orrs	r3, r0
1004bc00:	20b1      	movs	r0, #177	@ 0xb1
1004bc02:	4018      	ands	r0, r3
1004bc04:	7a0b      	ldrb	r3, [r1, #8]
1004bc06:	1a9a      	subs	r2, r3, r2
1004bc08:	b2d3      	uxtb	r3, r2
1004bc0a:	7a8a      	ldrb	r2, [r1, #10]
1004bc0c:	9900      	ldr	r1, [sp, #0]
1004bc0e:	f000 f85d 	bl	1004bccc <hci_le_advertising_set_terminated_event_push>
1004bc12:	4638      	mov	r0, r7
1004bc14:	f000 f894 	bl	1004bd40 <EADV_stop_isr>
1004bc18:	68a1      	ldr	r1, [r4, #8]
1004bc1a:	9b03      	ldr	r3, [sp, #12]
1004bc1c:	7f18      	ldrb	r0, [r3, #28]
1004bc1e:	f000 fd1f 	bl	1004c660 <LL_sched_set_anchor>
1004bc22:	9802      	ldr	r0, [sp, #8]
1004bc24:	7146      	strb	r6, [r0, #5]
1004bc26:	4628      	mov	r0, r5
1004bc28:	b00d      	add	sp, #52	@ 0x34
1004bc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004bc2c <__arm_cp.40_0>:
1004bc2c:	200006d0 	.word	0x200006d0

1004bc30 <__arm_cp.40_1>:
1004bc30:	00000fff 	.word	0x00000fff

1004bc34 <__arm_cp.40_2>:
1004bc34:	0000ffff 	.word	0x0000ffff

1004bc38 <__arm_cp.40_3>:
1004bc38:	200006b8 	.word	0x200006b8

1004bc3c <UTIL_u8GetNextAdvChannel>:
1004bc3c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004bc3e:	4604      	mov	r4, r0
1004bc40:	20c2      	movs	r0, #194	@ 0xc2
1004bc42:	5c27      	ldrb	r7, [r4, r0]
1004bc44:	2501      	movs	r5, #1
1004bc46:	403d      	ands	r5, r7
1004bc48:	07ba      	lsls	r2, r7, #30
1004bc4a:	0fd0      	lsrs	r0, r2, #31
1004bc4c:	1828      	adds	r0, r5, r0
1004bc4e:	0779      	lsls	r1, r7, #29
1004bc50:	0fc9      	lsrs	r1, r1, #31
1004bc52:	1840      	adds	r0, r0, r1
1004bc54:	1e40      	subs	r0, r0, #1
1004bc56:	b2c0      	uxtb	r0, r0
1004bc58:	34c2      	adds	r4, #194	@ 0xc2
1004bc5a:	7c26      	ldrb	r6, [r4, #16]
1004bc5c:	42b0      	cmp	r0, r6
1004bc5e:	d10f      	bne.n	1004bc80 <UTIL_u8GetNextAdvChannel+0x44>
1004bc60:	9201      	str	r2, [sp, #4]
1004bc62:	2001      	movs	r0, #1
1004bc64:	9002      	str	r0, [sp, #8]
1004bc66:	f001 fc76 	bl	1004d556 <Hal_Get_Random_Number>
1004bc6a:	2e01      	cmp	r6, #1
1004bc6c:	d00a      	beq.n	1004bc84 <UTIL_u8GetNextAdvChannel+0x48>
1004bc6e:	2e02      	cmp	r6, #2
1004bc70:	d10e      	bne.n	1004bc90 <UTIL_u8GetNextAdvChannel+0x54>
1004bc72:	b2c0      	uxtb	r0, r0
1004bc74:	2106      	movs	r1, #6
1004bc76:	f7f4 fb61 	bl	1004033c <__aeabi_uidivmod>
1004bc7a:	a012      	add	r0, pc, #72	@ (adr r0, 1004bcc4 <UTIL_u8GetNextAdvChannel+0x88>)
1004bc7c:	5c40      	ldrb	r0, [r0, r1]
1004bc7e:	e012      	b.n	1004bca6 <UTIL_u8GetNextAdvChannel+0x6a>
1004bc80:	7c60      	ldrb	r0, [r4, #17]
1004bc82:	e011      	b.n	1004bca8 <UTIL_u8GetNextAdvChannel+0x6c>
1004bc84:	9902      	ldr	r1, [sp, #8]
1004bc86:	4008      	ands	r0, r1
1004bc88:	2d00      	cmp	r5, #0
1004bc8a:	d104      	bne.n	1004bc96 <UTIL_u8GetNextAdvChannel+0x5a>
1004bc8c:	a10c      	add	r1, pc, #48	@ (adr r1, 1004bcc0 <UTIL_u8GetNextAdvChannel+0x84>)
1004bc8e:	e008      	b.n	1004bca2 <UTIL_u8GetNextAdvChannel+0x66>
1004bc90:	08b8      	lsrs	r0, r7, #2
1004bc92:	1a38      	subs	r0, r7, r0
1004bc94:	e007      	b.n	1004bca6 <UTIL_u8GetNextAdvChannel+0x6a>
1004bc96:	9901      	ldr	r1, [sp, #4]
1004bc98:	2900      	cmp	r1, #0
1004bc9a:	d401      	bmi.n	1004bca0 <UTIL_u8GetNextAdvChannel+0x64>
1004bc9c:	a107      	add	r1, pc, #28	@ (adr r1, 1004bcbc <UTIL_u8GetNextAdvChannel+0x80>)
1004bc9e:	e000      	b.n	1004bca2 <UTIL_u8GetNextAdvChannel+0x66>
1004bca0:	a105      	add	r1, pc, #20	@ (adr r1, 1004bcb8 <UTIL_u8GetNextAdvChannel+0x7c>)
1004bca2:	1808      	adds	r0, r1, r0
1004bca4:	7800      	ldrb	r0, [r0, #0]
1004bca6:	7460      	strb	r0, [r4, #17]
1004bca8:	0071      	lsls	r1, r6, #1
1004bcaa:	b2c2      	uxtb	r2, r0
1004bcac:	40ca      	lsrs	r2, r1
1004bcae:	2003      	movs	r0, #3
1004bcb0:	4010      	ands	r0, r2
1004bcb2:	3024      	adds	r0, #36	@ 0x24
1004bcb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004bcb6:	46c0      	nop			@ (mov r8, r8)
1004bcb8:	00000906 	.word	0x00000906
1004bcbc:	00000d07 	.word	0x00000d07
1004bcc0:	00000e0b 	.word	0x00000e0b
1004bcc4:	2d271e1b 	.word	0x2d271e1b
1004bcc8:	00003936 	.word	0x00003936

1004bccc <hci_le_advertising_set_terminated_event_push>:
1004bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004bcce:	461f      	mov	r7, r3
1004bcd0:	4616      	mov	r6, r2
1004bcd2:	460d      	mov	r5, r1
1004bcd4:	4604      	mov	r4, r0
1004bcd6:	06c0      	lsls	r0, r0, #27
1004bcd8:	d40b      	bmi.n	1004bcf2 <hci_le_advertising_set_terminated_event_push+0x26>
1004bcda:	4817      	ldr	r0, [pc, #92]	@ (1004bd38 <__arm_cp.42_0>)
1004bcdc:	6800      	ldr	r0, [r0, #0]
1004bcde:	213d      	movs	r1, #61	@ 0x3d
1004bce0:	5c41      	ldrb	r1, [r0, r1]
1004bce2:	0689      	lsls	r1, r1, #26
1004bce4:	d527      	bpl.n	1004bd36 <hci_le_advertising_set_terminated_event_push+0x6a>
1004bce6:	303d      	adds	r0, #61	@ 0x3d
1004bce8:	7ac0      	ldrb	r0, [r0, #11]
1004bcea:	0780      	lsls	r0, r0, #30
1004bcec:	d523      	bpl.n	1004bd36 <hci_le_advertising_set_terminated_event_push+0x6a>
1004bcee:	221f      	movs	r2, #31
1004bcf0:	e002      	b.n	1004bcf8 <hci_le_advertising_set_terminated_event_push+0x2c>
1004bcf2:	20bf      	movs	r0, #191	@ 0xbf
1004bcf4:	4004      	ands	r4, r0
1004bcf6:	2211      	movs	r2, #17
1004bcf8:	4810      	ldr	r0, [pc, #64]	@ (1004bd3c <__arm_cp.42_1>)
1004bcfa:	6800      	ldr	r0, [r0, #0]
1004bcfc:	0761      	lsls	r1, r4, #29
1004bcfe:	0ec9      	lsrs	r1, r1, #27
1004bd00:	1840      	adds	r0, r0, r1
1004bd02:	6900      	ldr	r0, [r0, #16]
1004bd04:	2303      	movs	r3, #3
1004bd06:	4621      	mov	r1, r4
1004bd08:	f7fe f842 	bl	10049d90 <aci_event_fifo_push_header>
1004bd0c:	2800      	cmp	r0, #0
1004bd0e:	d012      	beq.n	1004bd36 <hci_le_advertising_set_terminated_event_push+0x6a>
1004bd10:	4601      	mov	r1, r0
1004bd12:	200f      	movs	r0, #15
1004bd14:	72c8      	strb	r0, [r1, #11]
1004bd16:	20ff      	movs	r0, #255	@ 0xff
1004bd18:	7288      	strb	r0, [r1, #10]
1004bd1a:	730f      	strb	r7, [r1, #12]
1004bd1c:	724e      	strb	r6, [r1, #9]
1004bd1e:	720d      	strb	r5, [r1, #8]
1004bd20:	2012      	movs	r0, #18
1004bd22:	71c8      	strb	r0, [r1, #7]
1004bd24:	2006      	movs	r0, #6
1004bd26:	7188      	strb	r0, [r1, #6]
1004bd28:	203e      	movs	r0, #62	@ 0x3e
1004bd2a:	7148      	strb	r0, [r1, #5]
1004bd2c:	2004      	movs	r0, #4
1004bd2e:	7108      	strb	r0, [r1, #4]
1004bd30:	4620      	mov	r0, r4
1004bd32:	f7fe f8ca 	bl	10049eca <aci_event_fifo_push>
1004bd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004bd38 <__arm_cp.42_0>:
1004bd38:	200006c8 	.word	0x200006c8

1004bd3c <__arm_cp.42_1>:
1004bd3c:	200006bc 	.word	0x200006bc

1004bd40 <EADV_stop_isr>:
1004bd40:	b5b0      	push	{r4, r5, r7, lr}
1004bd42:	4604      	mov	r4, r0
1004bd44:	20d1      	movs	r0, #209	@ 0xd1
1004bd46:	5c20      	ldrb	r0, [r4, r0]
1004bd48:	f000 fc92 	bl	1004c670 <LL_sched_set_cancel_request>
1004bd4c:	4625      	mov	r5, r4
1004bd4e:	35ce      	adds	r5, #206	@ 0xce
1004bd50:	78a8      	ldrb	r0, [r5, #2]
1004bd52:	f000 fc8d 	bl	1004c670 <LL_sched_set_cancel_request>
1004bd56:	20ce      	movs	r0, #206	@ 0xce
1004bd58:	2100      	movs	r1, #0
1004bd5a:	5221      	strh	r1, [r4, r0]
1004bd5c:	7aa8      	ldrb	r0, [r5, #10]
1004bd5e:	28ff      	cmp	r0, #255	@ 0xff
1004bd60:	d001      	beq.n	1004bd66 <EADV_stop_isr+0x26>
1004bd62:	f7ff f90f 	bl	1004af84 <llc_conn_release_conn_idx>
1004bd66:	20ff      	movs	r0, #255	@ 0xff
1004bd68:	72a8      	strb	r0, [r5, #10]
1004bd6a:	bdb0      	pop	{r4, r5, r7, pc}

1004bd6c <ADV_createslot>:
1004bd6c:	b570      	push	{r4, r5, r6, lr}
1004bd6e:	4604      	mov	r4, r0
1004bd70:	20c5      	movs	r0, #197	@ 0xc5
1004bd72:	5c20      	ldrb	r0, [r4, r0]
1004bd74:	f7ff f944 	bl	1004b000 <llc_convert_hci_phy_enum_to_hw_phy>
1004bd78:	4605      	mov	r5, r0
1004bd7a:	4626      	mov	r6, r4
1004bd7c:	36c5      	adds	r6, #197	@ 0xc5
1004bd7e:	7af0      	ldrb	r0, [r6, #11]
1004bd80:	4629      	mov	r1, r5
1004bd82:	f7f6 fead 	bl	10042ae0 <BLEPLAT_CNTR_SmSetTxPhy>
1004bd86:	7af0      	ldrb	r0, [r6, #11]
1004bd88:	4629      	mov	r1, r5
1004bd8a:	f7f6 fe73 	bl	10042a74 <BLEPLAT_CNTR_SmSetRxPhy>
1004bd8e:	f7f6 fc1e 	bl	100425ce <BLEPLAT_CNTR_GlobEnableBlue>
1004bd92:	f000 fc29 	bl	1004c5e8 <LL_get_tx_common_buffer_p>
1004bd96:	4602      	mov	r2, r0
1004bd98:	7db0      	ldrb	r0, [r6, #22]
1004bd9a:	4621      	mov	r1, r4
1004bd9c:	f000 f801 	bl	1004bda2 <EADV_vPrepareAdvOrRspLegacyPacket>
1004bda0:	bd70      	pop	{r4, r5, r6, pc}

1004bda2 <EADV_vPrepareAdvOrRspLegacyPacket>:
1004bda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004bda4:	4614      	mov	r4, r2
1004bda6:	460d      	mov	r5, r1
1004bda8:	4606      	mov	r6, r0
1004bdaa:	460f      	mov	r7, r1
1004bdac:	37b8      	adds	r7, #184	@ 0xb8
1004bdae:	2004      	movs	r0, #4
1004bdb0:	2e00      	cmp	r6, #0
1004bdb2:	4601      	mov	r1, r0
1004bdb4:	d10d      	bne.n	1004bdd2 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004bdb6:	8839      	ldrh	r1, [r7, #0]
1004bdb8:	074a      	lsls	r2, r1, #29
1004bdba:	d407      	bmi.n	1004bdcc <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1004bdbc:	2203      	movs	r2, #3
1004bdbe:	4011      	ands	r1, r2
1004bdc0:	424a      	negs	r2, r1
1004bdc2:	414a      	adcs	r2, r1
1004bdc4:	2902      	cmp	r1, #2
1004bdc6:	d003      	beq.n	1004bdd0 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1004bdc8:	0051      	lsls	r1, r2, #1
1004bdca:	e002      	b.n	1004bdd2 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004bdcc:	2101      	movs	r1, #1
1004bdce:	e000      	b.n	1004bdd2 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004bdd0:	2106      	movs	r1, #6
1004bdd2:	7021      	strb	r1, [r4, #0]
1004bdd4:	2e00      	cmp	r6, #0
1004bdd6:	d107      	bne.n	1004bde8 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1004bdd8:	8839      	ldrh	r1, [r7, #0]
1004bdda:	4001      	ands	r1, r0
1004bddc:	d104      	bne.n	1004bde8 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1004bdde:	202e      	movs	r0, #46	@ 0x2e
1004bde0:	5c28      	ldrb	r0, [r5, r0]
1004bde2:	1d80      	adds	r0, r0, #6
1004bde4:	7060      	strb	r0, [r4, #1]
1004bde6:	e00f      	b.n	1004be08 <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1004bde8:	2e00      	cmp	r6, #0
1004bdea:	d004      	beq.n	1004bdf6 <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1004bdec:	4628      	mov	r0, r5
1004bdee:	3042      	adds	r0, #66	@ 0x42
1004bdf0:	7800      	ldrb	r0, [r0, #0]
1004bdf2:	1d80      	adds	r0, r0, #6
1004bdf4:	e000      	b.n	1004bdf8 <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1004bdf6:	200c      	movs	r0, #12
1004bdf8:	7060      	strb	r0, [r4, #1]
1004bdfa:	4620      	mov	r0, r4
1004bdfc:	3008      	adds	r0, #8
1004bdfe:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004be00:	3109      	adds	r1, #9
1004be02:	2206      	movs	r2, #6
1004be04:	f7f5 fed2 	bl	10041bac <BLEPLAT_MemCpy>
1004be08:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004be0a:	1ca0      	adds	r0, r4, #2
1004be0c:	1c49      	adds	r1, r1, #1
1004be0e:	2206      	movs	r2, #6
1004be10:	f7f5 fecc 	bl	10041bac <BLEPLAT_MemCpy>
1004be14:	7820      	ldrb	r0, [r4, #0]
1004be16:	212f      	movs	r1, #47	@ 0x2f
1004be18:	4001      	ands	r1, r0
1004be1a:	7021      	strb	r1, [r4, #0]
1004be1c:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1004be1e:	7800      	ldrb	r0, [r0, #0]
1004be20:	07c0      	lsls	r0, r0, #31
1004be22:	0e40      	lsrs	r0, r0, #25
1004be24:	1840      	adds	r0, r0, r1
1004be26:	7020      	strb	r0, [r4, #0]
1004be28:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004be2a:	7a09      	ldrb	r1, [r1, #8]
1004be2c:	01c9      	lsls	r1, r1, #7
1004be2e:	1808      	adds	r0, r1, r0
1004be30:	7020      	strb	r0, [r4, #0]
1004be32:	f000 f997 	bl	1004c164 <llc_get_channel_sel_algo2_enabled>
1004be36:	7821      	ldrb	r1, [r4, #0]
1004be38:	0140      	lsls	r0, r0, #5
1004be3a:	4308      	orrs	r0, r1
1004be3c:	7020      	strb	r0, [r4, #0]
1004be3e:	4271      	negs	r1, r6
1004be40:	4171      	adcs	r1, r6
1004be42:	8838      	ldrh	r0, [r7, #0]
1004be44:	2204      	movs	r2, #4
1004be46:	4002      	ands	r2, r0
1004be48:	0890      	lsrs	r0, r2, #2
1004be4a:	4008      	ands	r0, r1
1004be4c:	d101      	bne.n	1004be52 <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1004be4e:	2708      	movs	r7, #8
1004be50:	e000      	b.n	1004be54 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1004be52:	270e      	movs	r7, #14
1004be54:	2800      	cmp	r0, #0
1004be56:	d001      	beq.n	1004be5c <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1004be58:	200c      	movs	r0, #12
1004be5a:	e011      	b.n	1004be80 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1004be5c:	2e00      	cmp	r6, #0
1004be5e:	d001      	beq.n	1004be64 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1004be60:	203c      	movs	r0, #60	@ 0x3c
1004be62:	e000      	b.n	1004be66 <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1004be64:	2028      	movs	r0, #40	@ 0x28
1004be66:	5829      	ldr	r1, [r5, r0]
1004be68:	2e00      	cmp	r6, #0
1004be6a:	d001      	beq.n	1004be70 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1004be6c:	2042      	movs	r0, #66	@ 0x42
1004be6e:	e000      	b.n	1004be72 <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1004be70:	202e      	movs	r0, #46	@ 0x2e
1004be72:	5a2d      	ldrh	r5, [r5, r0]
1004be74:	19e0      	adds	r0, r4, r7
1004be76:	462a      	mov	r2, r5
1004be78:	f7f5 fe98 	bl	10041bac <BLEPLAT_MemCpy>
1004be7c:	1978      	adds	r0, r7, r5
1004be7e:	1e80      	subs	r0, r0, #2
1004be80:	7060      	strb	r0, [r4, #1]
1004be82:	2000      	movs	r0, #0
1004be84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004be86 <ADV_ISR_connect_request_received_ucfg_weak>:
1004be86:	21b4      	movs	r1, #180	@ 0xb4
1004be88:	2200      	movs	r2, #0
1004be8a:	5242      	strh	r2, [r0, r1]
1004be8c:	4770      	bx	lr
	...

1004be90 <ADV_ISR>:
1004be90:	b5f0      	push	{r4, r5, r6, r7, lr}
1004be92:	b08d      	sub	sp, #52	@ 0x34
1004be94:	4605      	mov	r5, r0
1004be96:	f000 fbaf 	bl	1004c5f8 <LL_get_rx_common_buffer_p>
1004be9a:	9005      	str	r0, [sp, #20]
1004be9c:	4c85      	ldr	r4, [pc, #532]	@ (1004c0b4 <__arm_cp.48_0>)
1004be9e:	6820      	ldr	r0, [r4, #0]
1004bea0:	f7f6 fc0b 	bl	100426ba <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1004bea4:	4606      	mov	r6, r0
1004bea6:	6820      	ldr	r0, [r4, #0]
1004bea8:	f7f6 fc12 	bl	100426d0 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1004beac:	4607      	mov	r7, r0
1004beae:	20d0      	movs	r0, #208	@ 0xd0
1004beb0:	5c28      	ldrb	r0, [r5, r0]
1004beb2:	212c      	movs	r1, #44	@ 0x2c
1004beb4:	4341      	muls	r1, r0
1004beb6:	4a80      	ldr	r2, [pc, #512]	@ (1004c0b8 <__arm_cp.48_1>)
1004beb8:	6812      	ldr	r2, [r2, #0]
1004beba:	1851      	adds	r1, r2, r1
1004bebc:	7d89      	ldrb	r1, [r1, #22]
1004bebe:	2914      	cmp	r1, #20
1004bec0:	d103      	bne.n	1004beca <ADV_ISR+0x3a>
1004bec2:	210a      	movs	r1, #10
1004bec4:	2203      	movs	r2, #3
1004bec6:	f000 fe01 	bl	1004cacc <LL_sched_set_priority>
1004beca:	462c      	mov	r4, r5
1004becc:	34b4      	adds	r4, #180	@ 0xb4
1004bece:	4628      	mov	r0, r5
1004bed0:	30db      	adds	r0, #219	@ 0xdb
1004bed2:	9004      	str	r0, [sp, #16]
1004bed4:	2e00      	cmp	r6, #0
1004bed6:	d038      	beq.n	1004bf4a <ADV_ISR+0xba>
1004bed8:	9506      	str	r5, [sp, #24]
1004beda:	2700      	movs	r7, #0
1004bedc:	970c      	str	r7, [sp, #48]	@ 0x30
1004bede:	970b      	str	r7, [sp, #44]	@ 0x2c
1004bee0:	9d05      	ldr	r5, [sp, #20]
1004bee2:	7828      	ldrb	r0, [r5, #0]
1004bee4:	09c0      	lsrs	r0, r0, #7
1004bee6:	a90b      	add	r1, sp, #44	@ 0x2c
1004bee8:	7008      	strb	r0, [r1, #0]
1004beea:	4874      	ldr	r0, [pc, #464]	@ (1004c0bc <__arm_cp.48_2>)
1004beec:	6800      	ldr	r0, [r0, #0]
1004beee:	22d8      	movs	r2, #216	@ 0xd8
1004bef0:	5c80      	ldrb	r0, [r0, r2]
1004bef2:	9003      	str	r0, [sp, #12]
1004bef4:	1c48      	adds	r0, r1, #1
1004bef6:	4629      	mov	r1, r5
1004bef8:	3108      	adds	r1, #8
1004befa:	2606      	movs	r6, #6
1004befc:	4632      	mov	r2, r6
1004befe:	f7f5 fe55 	bl	10041bac <BLEPLAT_MemCpy>
1004bf02:	970a      	str	r7, [sp, #40]	@ 0x28
1004bf04:	9709      	str	r7, [sp, #36]	@ 0x24
1004bf06:	7828      	ldrb	r0, [r5, #0]
1004bf08:	0640      	lsls	r0, r0, #25
1004bf0a:	0fc0      	lsrs	r0, r0, #31
1004bf0c:	a909      	add	r1, sp, #36	@ 0x24
1004bf0e:	7008      	strb	r0, [r1, #0]
1004bf10:	1c48      	adds	r0, r1, #1
1004bf12:	1ca9      	adds	r1, r5, #2
1004bf14:	4632      	mov	r2, r6
1004bf16:	f7f5 fe49 	bl	10041bac <BLEPLAT_MemCpy>
1004bf1a:	7828      	ldrb	r0, [r5, #0]
1004bf1c:	260f      	movs	r6, #15
1004bf1e:	4006      	ands	r6, r0
1004bf20:	2e05      	cmp	r6, #5
1004bf22:	d101      	bne.n	1004bf28 <ADV_ISR+0x98>
1004bf24:	f7f5 ff06 	bl	10041d34 <BLEPLAT_ClearRadioTimerValue>
1004bf28:	7be3      	ldrb	r3, [r4, #15]
1004bf2a:	7922      	ldrb	r2, [r4, #4]
1004bf2c:	9702      	str	r7, [sp, #8]
1004bf2e:	ad07      	add	r5, sp, #28
1004bf30:	9501      	str	r5, [sp, #4]
1004bf32:	9806      	ldr	r0, [sp, #24]
1004bf34:	3084      	adds	r0, #132	@ 0x84
1004bf36:	9000      	str	r0, [sp, #0]
1004bf38:	a809      	add	r0, sp, #36	@ 0x24
1004bf3a:	4631      	mov	r1, r6
1004bf3c:	f001 fc88 	bl	1004d850 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1004bf40:	0841      	lsrs	r1, r0, #1
1004bf42:	297e      	cmp	r1, #126	@ 0x7e
1004bf44:	d807      	bhi.n	1004bf56 <ADV_ISR+0xc6>
1004bf46:	4601      	mov	r1, r0
1004bf48:	e006      	b.n	1004bf58 <ADV_ISR+0xc8>
1004bf4a:	2601      	movs	r6, #1
1004bf4c:	2f00      	cmp	r7, #0
1004bf4e:	d14f      	bne.n	1004bff0 <ADV_ISR+0x160>
1004bf50:	2700      	movs	r7, #0
1004bf52:	8027      	strh	r7, [r4, #0]
1004bf54:	e051      	b.n	1004bffa <ADV_ISR+0x16a>
1004bf56:	2101      	movs	r1, #1
1004bf58:	7029      	strb	r1, [r5, #0]
1004bf5a:	9d06      	ldr	r5, [sp, #24]
1004bf5c:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004bf5e:	680a      	ldr	r2, [r1, #0]
1004bf60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004bf62:	429a      	cmp	r2, r3
1004bf64:	d12d      	bne.n	1004bfc2 <ADV_ISR+0x132>
1004bf66:	6849      	ldr	r1, [r1, #4]
1004bf68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004bf6a:	4291      	cmp	r1, r2
1004bf6c:	d129      	bne.n	1004bfc2 <ADV_ISR+0x132>
1004bf6e:	4607      	mov	r7, r0
1004bf70:	3fff      	subs	r7, #255	@ 0xff
1004bf72:	1e79      	subs	r1, r7, #1
1004bf74:	418f      	sbcs	r7, r1
1004bf76:	2e03      	cmp	r6, #3
1004bf78:	d123      	bne.n	1004bfc2 <ADV_ISR+0x132>
1004bf7a:	28ff      	cmp	r0, #255	@ 0xff
1004bf7c:	d021      	beq.n	1004bfc2 <ADV_ISR+0x132>
1004bf7e:	88a0      	ldrh	r0, [r4, #4]
1004bf80:	2701      	movs	r7, #1
1004bf82:	0780      	lsls	r0, r0, #30
1004bf84:	d51d      	bpl.n	1004bfc2 <ADV_ISR+0x132>
1004bf86:	9803      	ldr	r0, [sp, #12]
1004bf88:	2801      	cmp	r0, #1
1004bf8a:	d11a      	bne.n	1004bfc2 <ADV_ISR+0x132>
1004bf8c:	4628      	mov	r0, r5
1004bf8e:	f7f6 fbb6 	bl	100426fe <BLEPLAT_CNTR_PacketClrPllTrig>
1004bf92:	7e60      	ldrb	r0, [r4, #25]
1004bf94:	2801      	cmp	r0, #1
1004bf96:	d109      	bne.n	1004bfac <ADV_ISR+0x11c>
1004bf98:	8960      	ldrh	r0, [r4, #10]
1004bf9a:	4949      	ldr	r1, [pc, #292]	@ (1004c0c0 <__arm_cp.48_3>)
1004bf9c:	4288      	cmp	r0, r1
1004bf9e:	d005      	beq.n	1004bfac <ADV_ISR+0x11c>
1004bfa0:	aa07      	add	r2, sp, #28
1004bfa2:	7811      	ldrb	r1, [r2, #0]
1004bfa4:	b2c0      	uxtb	r0, r0
1004bfa6:	1c52      	adds	r2, r2, #1
1004bfa8:	f000 f88e 	bl	1004c0c8 <hci_le_scan_request_received_event_push>
1004bfac:	7f20      	ldrb	r0, [r4, #28]
1004bfae:	f7f6 fd76 	bl	10042a9e <BLEPLAT_CNTR_SmSetTxMode>
1004bfb2:	2001      	movs	r0, #1
1004bfb4:	9904      	ldr	r1, [sp, #16]
1004bfb6:	7008      	strb	r0, [r1, #0]
1004bfb8:	4628      	mov	r0, r5
1004bfba:	f7ff fed7 	bl	1004bd6c <ADV_createslot>
1004bfbe:	2600      	movs	r6, #0
1004bfc0:	e01b      	b.n	1004bffa <ADV_ISR+0x16a>
1004bfc2:	88a0      	ldrh	r0, [r4, #4]
1004bfc4:	07c0      	lsls	r0, r0, #31
1004bfc6:	d015      	beq.n	1004bff4 <ADV_ISR+0x164>
1004bfc8:	2e05      	cmp	r6, #5
1004bfca:	d113      	bne.n	1004bff4 <ADV_ISR+0x164>
1004bfcc:	9908      	ldr	r1, [sp, #32]
1004bfce:	9807      	ldr	r0, [sp, #28]
1004bfd0:	f7fe fe7e 	bl	1004acd0 <llc_conn_list_search_address>
1004bfd4:	4241      	negs	r1, r0
1004bfd6:	4141      	adcs	r1, r0
1004bfd8:	4039      	ands	r1, r7
1004bfda:	2901      	cmp	r1, #1
1004bfdc:	d10a      	bne.n	1004bff4 <ADV_ISR+0x164>
1004bfde:	9803      	ldr	r0, [sp, #12]
1004bfe0:	2801      	cmp	r0, #1
1004bfe2:	d107      	bne.n	1004bff4 <ADV_ISR+0x164>
1004bfe4:	aa07      	add	r2, sp, #28
1004bfe6:	4628      	mov	r0, r5
1004bfe8:	9905      	ldr	r1, [sp, #20]
1004bfea:	f7ff ff4c 	bl	1004be86 <ADV_ISR_connect_request_received_ucfg_weak>
1004bfee:	2601      	movs	r6, #1
1004bff0:	2700      	movs	r7, #0
1004bff2:	e002      	b.n	1004bffa <ADV_ISR+0x16a>
1004bff4:	2700      	movs	r7, #0
1004bff6:	8027      	strh	r7, [r4, #0]
1004bff8:	2601      	movs	r6, #1
1004bffa:	8821      	ldrh	r1, [r4, #0]
1004bffc:	7fa0      	ldrb	r0, [r4, #30]
1004bffe:	2800      	cmp	r0, #0
1004c000:	d022      	beq.n	1004c048 <ADV_ISR+0x1b8>
1004c002:	2900      	cmp	r1, #0
1004c004:	d122      	bne.n	1004c04c <ADV_ISR+0x1bc>
1004c006:	1e40      	subs	r0, r0, #1
1004c008:	77a0      	strb	r0, [r4, #30]
1004c00a:	88a0      	ldrh	r0, [r4, #4]
1004c00c:	2103      	movs	r1, #3
1004c00e:	4001      	ands	r1, r0
1004c010:	1e48      	subs	r0, r1, #1
1004c012:	4181      	sbcs	r1, r0
1004c014:	0048      	lsls	r0, r1, #1
1004c016:	8020      	strh	r0, [r4, #0]
1004c018:	4628      	mov	r0, r5
1004c01a:	f7ff fe0f 	bl	1004bc3c <UTIL_u8GetNextAdvChannel>
1004c01e:	4601      	mov	r1, r0
1004c020:	7f20      	ldrb	r0, [r4, #28]
1004c022:	f7f6 fcf1 	bl	10042a08 <BLEPLAT_CNTR_SmSetRemapChan>
1004c026:	7f20      	ldrb	r0, [r4, #28]
1004c028:	f7f6 fd39 	bl	10042a9e <BLEPLAT_CNTR_SmSetTxMode>
1004c02c:	4628      	mov	r0, r5
1004c02e:	f7f6 fbf6 	bl	1004281e <BLEPLAT_CNTR_PacketSetPllTrig>
1004c032:	f7f5 fe7f 	bl	10041d34 <BLEPLAT_ClearRadioTimerValue>
1004c036:	2000      	movs	r0, #0
1004c038:	9904      	ldr	r1, [sp, #16]
1004c03a:	7008      	strb	r0, [r1, #0]
1004c03c:	4628      	mov	r0, r5
1004c03e:	f7ff fe95 	bl	1004bd6c <ADV_createslot>
1004c042:	f7f5 fe8f 	bl	10041d64 <BLEPLAT_SetRadioCloseTimeout>
1004c046:	e02a      	b.n	1004c09e <ADV_ISR+0x20e>
1004c048:	2900      	cmp	r1, #0
1004c04a:	d019      	beq.n	1004c080 <ADV_ISR+0x1f0>
1004c04c:	4819      	ldr	r0, [pc, #100]	@ (1004c0b4 <__arm_cp.48_0>)
1004c04e:	6800      	ldr	r0, [r0, #0]
1004c050:	f7f6 fb3e 	bl	100426d0 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1004c054:	2800      	cmp	r0, #0
1004c056:	d022      	beq.n	1004c09e <ADV_ISR+0x20e>
1004c058:	4628      	mov	r0, r5
1004c05a:	f7f6 fbe0 	bl	1004281e <BLEPLAT_CNTR_PacketSetPllTrig>
1004c05e:	7c60      	ldrb	r0, [r4, #17]
1004c060:	2801      	cmp	r0, #1
1004c062:	d001      	beq.n	1004c068 <ADV_ISR+0x1d8>
1004c064:	4917      	ldr	r1, [pc, #92]	@ (1004c0c4 <__arm_cp.48_4>)
1004c066:	e000      	b.n	1004c06a <ADV_ISR+0x1da>
1004c068:	2146      	movs	r1, #70	@ 0x46
1004c06a:	3514      	adds	r5, #20
1004c06c:	4628      	mov	r0, r5
1004c06e:	f7f6 fc37 	bl	100428e0 <BLEPLAT_CNTR_SetRcvLen>
1004c072:	8820      	ldrh	r0, [r4, #0]
1004c074:	1e40      	subs	r0, r0, #1
1004c076:	8020      	strh	r0, [r4, #0]
1004c078:	f7f6 faa9 	bl	100425ce <BLEPLAT_CNTR_GlobEnableBlue>
1004c07c:	2600      	movs	r6, #0
1004c07e:	e00e      	b.n	1004c09e <ADV_ISR+0x20e>
1004c080:	f7f5 fe58 	bl	10041d34 <BLEPLAT_ClearRadioTimerValue>
1004c084:	4628      	mov	r0, r5
1004c086:	f7f6 fbca 	bl	1004281e <BLEPLAT_CNTR_PacketSetPllTrig>
1004c08a:	88e0      	ldrh	r0, [r4, #6]
1004c08c:	1e40      	subs	r0, r0, #1
1004c08e:	80e0      	strh	r0, [r4, #6]
1004c090:	2100      	movs	r1, #0
1004c092:	4628      	mov	r0, r5
1004c094:	f7ff fd04 	bl	1004baa0 <ADV_skiproutine>
1004c098:	7f20      	ldrb	r0, [r4, #28]
1004c09a:	f000 fb51 	bl	1004c740 <LL_sched_engine>
1004c09e:	2f00      	cmp	r7, #0
1004c0a0:	d002      	beq.n	1004c0a8 <ADV_ISR+0x218>
1004c0a2:	8820      	ldrh	r0, [r4, #0]
1004c0a4:	1e40      	subs	r0, r0, #1
1004c0a6:	8020      	strh	r0, [r4, #0]
1004c0a8:	f7fd fe6f 	bl	10049d8a <log_notify_us_flush_ucfg_weak>
1004c0ac:	4630      	mov	r0, r6
1004c0ae:	b00d      	add	sp, #52	@ 0x34
1004c0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c0b2:	46c0      	nop			@ (mov r8, r8)

1004c0b4 <__arm_cp.48_0>:
1004c0b4:	200006c4 	.word	0x200006c4

1004c0b8 <__arm_cp.48_1>:
1004c0b8:	200006d0 	.word	0x200006d0

1004c0bc <__arm_cp.48_2>:
1004c0bc:	200006c8 	.word	0x200006c8

1004c0c0 <__arm_cp.48_3>:
1004c0c0:	0000fffc 	.word	0x0000fffc

1004c0c4 <__arm_cp.48_4>:
1004c0c4:	000002ee 	.word	0x000002ee

1004c0c8 <hci_le_scan_request_received_event_push>:
1004c0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c0ca:	460e      	mov	r6, r1
1004c0cc:	4605      	mov	r5, r0
1004c0ce:	4815      	ldr	r0, [pc, #84]	@ (1004c124 <__arm_cp.49_0>)
1004c0d0:	6800      	ldr	r0, [r0, #0]
1004c0d2:	213d      	movs	r1, #61	@ 0x3d
1004c0d4:	5c41      	ldrb	r1, [r0, r1]
1004c0d6:	0689      	lsls	r1, r1, #26
1004c0d8:	d522      	bpl.n	1004c120 <hci_le_scan_request_received_event_push+0x58>
1004c0da:	303d      	adds	r0, #61	@ 0x3d
1004c0dc:	7ac0      	ldrb	r0, [r0, #11]
1004c0de:	0740      	lsls	r0, r0, #29
1004c0e0:	d51e      	bpl.n	1004c120 <hci_le_scan_request_received_event_push+0x58>
1004c0e2:	4614      	mov	r4, r2
1004c0e4:	4810      	ldr	r0, [pc, #64]	@ (1004c128 <__arm_cp.49_1>)
1004c0e6:	6800      	ldr	r0, [r0, #0]
1004c0e8:	6940      	ldr	r0, [r0, #20]
1004c0ea:	21a1      	movs	r1, #161	@ 0xa1
1004c0ec:	222b      	movs	r2, #43	@ 0x2b
1004c0ee:	2303      	movs	r3, #3
1004c0f0:	f7fd fe4e 	bl	10049d90 <aci_event_fifo_push_header>
1004c0f4:	2800      	cmp	r0, #0
1004c0f6:	d013      	beq.n	1004c120 <hci_le_scan_request_received_event_push+0x58>
1004c0f8:	4607      	mov	r7, r0
1004c0fa:	7246      	strb	r6, [r0, #9]
1004c0fc:	7205      	strb	r5, [r0, #8]
1004c0fe:	300a      	adds	r0, #10
1004c100:	2206      	movs	r2, #6
1004c102:	4621      	mov	r1, r4
1004c104:	f7f5 fd52 	bl	10041bac <BLEPLAT_MemCpy>
1004c108:	2013      	movs	r0, #19
1004c10a:	71f8      	strb	r0, [r7, #7]
1004c10c:	2009      	movs	r0, #9
1004c10e:	71b8      	strb	r0, [r7, #6]
1004c110:	203e      	movs	r0, #62	@ 0x3e
1004c112:	7178      	strb	r0, [r7, #5]
1004c114:	2004      	movs	r0, #4
1004c116:	7138      	strb	r0, [r7, #4]
1004c118:	20a1      	movs	r0, #161	@ 0xa1
1004c11a:	4639      	mov	r1, r7
1004c11c:	f7fd fed5 	bl	10049eca <aci_event_fifo_push>
1004c120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c122:	46c0      	nop			@ (mov r8, r8)

1004c124 <__arm_cp.49_0>:
1004c124:	200006c8 	.word	0x200006c8

1004c128 <__arm_cp.49_1>:
1004c128:	200006bc 	.word	0x200006bc

1004c12c <EADV_start_request_radio_tasks_ucfg_weak>:
1004c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c12e:	4604      	mov	r4, r0
1004c130:	20d8      	movs	r0, #216	@ 0xd8
1004c132:	21ff      	movs	r1, #255	@ 0xff
1004c134:	5421      	strb	r1, [r4, r0]
1004c136:	20b8      	movs	r0, #184	@ 0xb8
1004c138:	5a27      	ldrh	r7, [r4, r0]
1004c13a:	34b8      	adds	r4, #184	@ 0xb8
1004c13c:	f000 fcd4 	bl	1004cae8 <LL_sched_reserve_taskslot>
1004c140:	7620      	strb	r0, [r4, #24]
1004c142:	2607      	movs	r6, #7
1004c144:	28ff      	cmp	r0, #255	@ 0xff
1004c146:	d00a      	beq.n	1004c15e <EADV_start_request_radio_tasks_ucfg_weak+0x32>
1004c148:	2500      	movs	r5, #0
1004c14a:	06f8      	lsls	r0, r7, #27
1004c14c:	d408      	bmi.n	1004c160 <EADV_start_request_radio_tasks_ucfg_weak+0x34>
1004c14e:	f000 fccb 	bl	1004cae8 <LL_sched_reserve_taskslot>
1004c152:	7660      	strb	r0, [r4, #25]
1004c154:	28ff      	cmp	r0, #255	@ 0xff
1004c156:	d103      	bne.n	1004c160 <EADV_start_request_radio_tasks_ucfg_weak+0x34>
1004c158:	7e20      	ldrb	r0, [r4, #24]
1004c15a:	f000 fce7 	bl	1004cb2c <LL_sched_release_taskslot>
1004c15e:	4635      	mov	r5, r6
1004c160:	4628      	mov	r0, r5
1004c162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004c164 <llc_get_channel_sel_algo2_enabled>:
1004c164:	b580      	push	{r7, lr}
1004c166:	f000 fa4f 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004c16a:	214e      	movs	r1, #78	@ 0x4e
1004c16c:	5c40      	ldrb	r0, [r0, r1]
1004c16e:	bd80      	pop	{r7, pc}

1004c170 <LL_force_chsel_1>:
1004c170:	b510      	push	{r4, lr}
1004c172:	4244      	negs	r4, r0
1004c174:	4144      	adcs	r4, r0
1004c176:	f000 fa47 	bl	1004c608 <llc_get_linkms_cntxt_p>
1004c17a:	214e      	movs	r1, #78	@ 0x4e
1004c17c:	5444      	strb	r4, [r0, r1]
1004c17e:	2000      	movs	r0, #0
1004c180:	bd10      	pop	{r4, pc}

1004c182 <llc_eadv_max_supported_data_check_ucfg_weak>:
1004c182:	2000      	movs	r0, #0
1004c184:	4770      	bx	lr

1004c186 <LL_eadv_start_extended_ucfg_weak>:
1004c186:	4770      	bx	lr

1004c188 <ext_adv_scan_enabled_ucfg_weak>:
1004c188:	2000      	movs	r0, #0
1004c18a:	4770      	bx	lr

1004c18c <BLE_STACK_EndOfRadioActivityCb>:
1004c18c:	4770      	bx	lr
	...

1004c190 <BLE_STACK_RadioHandler>:
1004c190:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c192:	b083      	sub	sp, #12
1004c194:	4604      	mov	r4, r0
1004c196:	484c      	ldr	r0, [pc, #304]	@ (1004c2c8 <__arm_cp.1_0>)
1004c198:	6004      	str	r4, [r0, #0]
1004c19a:	4620      	mov	r0, r4
1004c19c:	f7f6 fa69 	bl	10042672 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1004c1a0:	4605      	mov	r5, r0
1004c1a2:	4620      	mov	r0, r4
1004c1a4:	f7f6 fa4d 	bl	10042642 <BLEPLAT_CNTR_IntGetIntStatusDone>
1004c1a8:	4606      	mov	r6, r0
1004c1aa:	4668      	mov	r0, sp
1004c1ac:	f7f5 fdcb 	bl	10041d46 <BLEPLAT_GetAnchorPoint>
1004c1b0:	9900      	ldr	r1, [sp, #0]
1004c1b2:	1a09      	subs	r1, r1, r0
1004c1b4:	0b4b      	lsrs	r3, r1, #13
1004c1b6:	4945      	ldr	r1, [pc, #276]	@ (1004c2cc <__arm_cp.1_1>)
1004c1b8:	680a      	ldr	r2, [r1, #0]
1004c1ba:	4611      	mov	r1, r2
1004c1bc:	31d8      	adds	r1, #216	@ 0xd8
1004c1be:	2b00      	cmp	r3, #0
1004c1c0:	d102      	bne.n	1004c1c8 <BLE_STACK_RadioHandler+0x38>
1004c1c2:	6010      	str	r0, [r2, #0]
1004c1c4:	2001      	movs	r0, #1
1004c1c6:	e000      	b.n	1004c1ca <BLE_STACK_RadioHandler+0x3a>
1004c1c8:	2000      	movs	r0, #0
1004c1ca:	7008      	strb	r0, [r1, #0]
1004c1cc:	4840      	ldr	r0, [pc, #256]	@ (1004c2d0 <__arm_cp.1_2>)
1004c1ce:	6800      	ldr	r0, [r0, #0]
1004c1d0:	7b44      	ldrb	r4, [r0, #13]
1004c1d2:	2100      	movs	r1, #0
1004c1d4:	2cff      	cmp	r4, #255	@ 0xff
1004c1d6:	d00a      	beq.n	1004c1ee <BLE_STACK_RadioHandler+0x5e>
1004c1d8:	202c      	movs	r0, #44	@ 0x2c
1004c1da:	4360      	muls	r0, r4
1004c1dc:	4a3d      	ldr	r2, [pc, #244]	@ (1004c2d4 <__arm_cp.1_3>)
1004c1de:	6812      	ldr	r2, [r2, #0]
1004c1e0:	1810      	adds	r0, r2, r0
1004c1e2:	7c82      	ldrb	r2, [r0, #18]
1004c1e4:	2a00      	cmp	r2, #0
1004c1e6:	d002      	beq.n	1004c1ee <BLE_STACK_RadioHandler+0x5e>
1004c1e8:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1004c1ea:	68c0      	ldr	r0, [r0, #12]
1004c1ec:	e7ff      	b.n	1004c1ee <BLE_STACK_RadioHandler+0x5e>
1004c1ee:	2701      	movs	r7, #1
1004c1f0:	2e00      	cmp	r6, #0
1004c1f2:	d003      	beq.n	1004c1fc <BLE_STACK_RadioHandler+0x6c>
1004c1f4:	2d00      	cmp	r5, #0
1004c1f6:	d101      	bne.n	1004c1fc <BLE_STACK_RadioHandler+0x6c>
1004c1f8:	2900      	cmp	r1, #0
1004c1fa:	e011      	b.n	1004c220 <BLE_STACK_RadioHandler+0x90>
1004c1fc:	2d00      	cmp	r5, #0
1004c1fe:	d015      	beq.n	1004c22c <BLE_STACK_RadioHandler+0x9c>
1004c200:	4a35      	ldr	r2, [pc, #212]	@ (1004c2d8 <__arm_cp.1_4>)
1004c202:	1a8b      	subs	r3, r1, r2
1004c204:	425a      	negs	r2, r3
1004c206:	415a      	adcs	r2, r3
1004c208:	4b34      	ldr	r3, [pc, #208]	@ (1004c2dc <__arm_cp.1_5>)
1004c20a:	1acd      	subs	r5, r1, r3
1004c20c:	426b      	negs	r3, r5
1004c20e:	416b      	adcs	r3, r5
1004c210:	4d33      	ldr	r5, [pc, #204]	@ (1004c2e0 <__arm_cp.1_6>)
1004c212:	1b4e      	subs	r6, r1, r5
1004c214:	4275      	negs	r5, r6
1004c216:	4175      	adcs	r5, r6
1004c218:	2900      	cmp	r1, #0
1004c21a:	d007      	beq.n	1004c22c <BLE_STACK_RadioHandler+0x9c>
1004c21c:	4313      	orrs	r3, r2
1004c21e:	431d      	orrs	r5, r3
1004c220:	4e2a      	ldr	r6, [pc, #168]	@ (1004c2cc <__arm_cp.1_1>)
1004c222:	4d29      	ldr	r5, [pc, #164]	@ (1004c2c8 <__arm_cp.1_0>)
1004c224:	d004      	beq.n	1004c230 <BLE_STACK_RadioHandler+0xa0>
1004c226:	4788      	blx	r1
1004c228:	2700      	movs	r7, #0
1004c22a:	e001      	b.n	1004c230 <BLE_STACK_RadioHandler+0xa0>
1004c22c:	4e27      	ldr	r6, [pc, #156]	@ (1004c2cc <__arm_cp.1_1>)
1004c22e:	4d26      	ldr	r5, [pc, #152]	@ (1004c2c8 <__arm_cp.1_0>)
1004c230:	6828      	ldr	r0, [r5, #0]
1004c232:	f7f6 fa12 	bl	1004265a <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1004c236:	2800      	cmp	r0, #0
1004c238:	d001      	beq.n	1004c23e <BLE_STACK_RadioHandler+0xae>
1004c23a:	2504      	movs	r5, #4
1004c23c:	e020      	b.n	1004c280 <BLE_STACK_RadioHandler+0xf0>
1004c23e:	6828      	ldr	r0, [r5, #0]
1004c240:	f7f6 f9ea 	bl	10042618 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1004c244:	2800      	cmp	r0, #0
1004c246:	d001      	beq.n	1004c24c <BLE_STACK_RadioHandler+0xbc>
1004c248:	2501      	movs	r5, #1
1004c24a:	e019      	b.n	1004c280 <BLE_STACK_RadioHandler+0xf0>
1004c24c:	6828      	ldr	r0, [r5, #0]
1004c24e:	f7f6 f9ef 	bl	10042630 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1004c252:	2800      	cmp	r0, #0
1004c254:	d001      	beq.n	1004c25a <BLE_STACK_RadioHandler+0xca>
1004c256:	2502      	movs	r5, #2
1004c258:	e012      	b.n	1004c280 <BLE_STACK_RadioHandler+0xf0>
1004c25a:	6828      	ldr	r0, [r5, #0]
1004c25c:	f7f6 fa15 	bl	1004268a <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1004c260:	4629      	mov	r1, r5
1004c262:	2505      	movs	r5, #5
1004c264:	2800      	cmp	r0, #0
1004c266:	d10b      	bne.n	1004c280 <BLE_STACK_RadioHandler+0xf0>
1004c268:	6808      	ldr	r0, [r1, #0]
1004c26a:	f7f6 fa1a 	bl	100426a2 <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1004c26e:	2800      	cmp	r0, #0
1004c270:	d106      	bne.n	1004c280 <BLE_STACK_RadioHandler+0xf0>
1004c272:	4815      	ldr	r0, [pc, #84]	@ (1004c2c8 <__arm_cp.1_0>)
1004c274:	6800      	ldr	r0, [r0, #0]
1004c276:	f7f6 f9c1 	bl	100425fc <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1004c27a:	2800      	cmp	r0, #0
1004c27c:	d020      	beq.n	1004c2c0 <BLE_STACK_RadioHandler+0x130>
1004c27e:	2500      	movs	r5, #0
1004c280:	2001      	movs	r0, #1
1004c282:	40a8      	lsls	r0, r5
1004c284:	4917      	ldr	r1, [pc, #92]	@ (1004c2e4 <__arm_cp.1_7>)
1004c286:	6809      	ldr	r1, [r1, #0]
1004c288:	680a      	ldr	r2, [r1, #0]
1004c28a:	4302      	orrs	r2, r0
1004c28c:	600a      	str	r2, [r1, #0]
1004c28e:	2000      	movs	r0, #0
1004c290:	f000 ffba 	bl	1004d208 <tsk_notify_idx>
1004c294:	f7f5 fab3 	bl	100417fe <BLE_STACK_ProcessRequest>
1004c298:	f7f5 fd4c 	bl	10041d34 <BLEPLAT_ClearRadioTimerValue>
1004c29c:	4620      	mov	r0, r4
1004c29e:	f000 fa4f 	bl	1004c740 <LL_sched_engine>
1004c2a2:	6834      	ldr	r4, [r6, #0]
1004c2a4:	7d60      	ldrb	r0, [r4, #21]
1004c2a6:	2801      	cmp	r0, #1
1004c2a8:	d108      	bne.n	1004c2bc <BLE_STACK_RadioHandler+0x12c>
1004c2aa:	7c21      	ldrb	r1, [r4, #16]
1004c2ac:	200f      	movs	r0, #15
1004c2ae:	4008      	ands	r0, r1
1004c2b0:	68e2      	ldr	r2, [r4, #12]
1004c2b2:	0909      	lsrs	r1, r1, #4
1004c2b4:	f7ff ff6a 	bl	1004c18c <BLE_STACK_EndOfRadioActivityCb>
1004c2b8:	2000      	movs	r0, #0
1004c2ba:	7560      	strb	r0, [r4, #21]
1004c2bc:	b003      	add	sp, #12
1004c2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c2c0:	2f00      	cmp	r7, #0
1004c2c2:	d1e9      	bne.n	1004c298 <BLE_STACK_RadioHandler+0x108>
1004c2c4:	e7ed      	b.n	1004c2a2 <BLE_STACK_RadioHandler+0x112>
1004c2c6:	46c0      	nop			@ (mov r8, r8)

1004c2c8 <__arm_cp.1_0>:
1004c2c8:	200006c4 	.word	0x200006c4

1004c2cc <__arm_cp.1_1>:
1004c2cc:	200006c8 	.word	0x200006c8

1004c2d0 <__arm_cp.1_2>:
1004c2d0:	200006cc 	.word	0x200006cc

1004c2d4 <__arm_cp.1_3>:
1004c2d4:	200006d0 	.word	0x200006d0

1004c2d8 <__arm_cp.1_4>:
1004c2d8:	1004d9b9 	.word	0x1004d9b9

1004c2dc <__arm_cp.1_5>:
1004c2dc:	1004d965 	.word	0x1004d965

1004c2e0 <__arm_cp.1_6>:
1004c2e0:	1004d9bd 	.word	0x1004d9bd

1004c2e4 <__arm_cp.1_7>:
1004c2e4:	200006bc 	.word	0x200006bc

1004c2e8 <LL_init_ucfg_weak>:
1004c2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c2ea:	b091      	sub	sp, #68	@ 0x44
1004c2ec:	9306      	str	r3, [sp, #24]
1004c2ee:	4614      	mov	r4, r2
1004c2f0:	910d      	str	r1, [sp, #52]	@ 0x34
1004c2f2:	900b      	str	r0, [sp, #44]	@ 0x2c
1004c2f4:	48b8      	ldr	r0, [pc, #736]	@ (1004c5d8 <__arm_cp.6_0>)
1004c2f6:	7ac1      	ldrb	r1, [r0, #11]
1004c2f8:	910c      	str	r1, [sp, #48]	@ 0x30
1004c2fa:	7f01      	ldrb	r1, [r0, #28]
1004c2fc:	9109      	str	r1, [sp, #36]	@ 0x24
1004c2fe:	7ec1      	ldrb	r1, [r0, #27]
1004c300:	910a      	str	r1, [sp, #40]	@ 0x28
1004c302:	7e81      	ldrb	r1, [r0, #26]
1004c304:	9108      	str	r1, [sp, #32]
1004c306:	7fc7      	ldrb	r7, [r0, #31]
1004c308:	2501      	movs	r5, #1
1004c30a:	21e8      	movs	r1, #232	@ 0xe8
1004c30c:	4628      	mov	r0, r5
1004c30e:	f000 fc73 	bl	1004cbf8 <csmem_mem_0_assign>
1004c312:	4eb2      	ldr	r6, [pc, #712]	@ (1004c5dc <__arm_cp.6_1>)
1004c314:	6030      	str	r0, [r6, #0]
1004c316:	2158      	movs	r1, #88	@ 0x58
1004c318:	4628      	mov	r0, r5
1004c31a:	f000 fc6d 	bl	1004cbf8 <csmem_mem_0_assign>
1004c31e:	6831      	ldr	r1, [r6, #0]
1004c320:	229c      	movs	r2, #156	@ 0x9c
1004c322:	9207      	str	r2, [sp, #28]
1004c324:	5088      	str	r0, [r1, r2]
1004c326:	4638      	mov	r0, r7
1004c328:	f001 faba 	bl	1004d8a0 <llc_wl_mem_allocate>
1004c32c:	2107      	movs	r1, #7
1004c32e:	4039      	ands	r1, r7
1004c330:	9806      	ldr	r0, [sp, #24]
1004c332:	f001 fac7 	bl	1004d8c4 <llc_priv_mem_allocate>
1004c336:	981c      	ldr	r0, [sp, #112]	@ 0x70
1004c338:	9000      	str	r0, [sp, #0]
1004c33a:	ab19      	add	r3, sp, #100	@ 0x64
1004c33c:	cb0e      	ldmia	r3, {r1, r2, r3}
1004c33e:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c340:	9106      	str	r1, [sp, #24]
1004c342:	930d      	str	r3, [sp, #52]	@ 0x34
1004c344:	f7fe fc34 	bl	1004abb0 <llc_conn_mem_allocate>
1004c348:	2c01      	cmp	r4, #1
1004c34a:	d000      	beq.n	1004c34e <LL_init_ucfg_weak+0x66>
1004c34c:	9508      	str	r5, [sp, #32]
1004c34e:	2000      	movs	r0, #0
1004c350:	2c01      	cmp	r4, #1
1004c352:	d000      	beq.n	1004c356 <LL_init_ucfg_weak+0x6e>
1004c354:	900a      	str	r0, [sp, #40]	@ 0x28
1004c356:	2c01      	cmp	r4, #1
1004c358:	4fa0      	ldr	r7, [pc, #640]	@ (1004c5dc <__arm_cp.6_1>)
1004c35a:	d000      	beq.n	1004c35e <LL_init_ucfg_weak+0x76>
1004c35c:	9009      	str	r0, [sp, #36]	@ 0x24
1004c35e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
1004c360:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c362:	2801      	cmp	r0, #1
1004c364:	9205      	str	r2, [sp, #20]
1004c366:	d118      	bne.n	1004c39a <LL_init_ucfg_weak+0xb2>
1004c368:	2029      	movs	r0, #41	@ 0x29
1004c36a:	499b      	ldr	r1, [pc, #620]	@ (1004c5d8 <__arm_cp.6_0>)
1004c36c:	5c08      	ldrb	r0, [r1, r0]
1004c36e:	1e41      	subs	r1, r0, #1
1004c370:	4188      	sbcs	r0, r1
1004c372:	4310      	orrs	r0, r2
1004c374:	d001      	beq.n	1004c37a <LL_init_ucfg_weak+0x92>
1004c376:	2530      	movs	r5, #48	@ 0x30
1004c378:	e000      	b.n	1004c37c <LL_init_ucfg_weak+0x94>
1004c37a:	2520      	movs	r5, #32
1004c37c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1004c37e:	4630      	mov	r0, r6
1004c380:	4629      	mov	r1, r5
1004c382:	f000 fc39 	bl	1004cbf8 <csmem_mem_0_assign>
1004c386:	6839      	ldr	r1, [r7, #0]
1004c388:	2294      	movs	r2, #148	@ 0x94
1004c38a:	5088      	str	r0, [r1, r2]
1004c38c:	4630      	mov	r0, r6
1004c38e:	4629      	mov	r1, r5
1004c390:	f000 fc32 	bl	1004cbf8 <csmem_mem_0_assign>
1004c394:	6839      	ldr	r1, [r7, #0]
1004c396:	2298      	movs	r2, #152	@ 0x98
1004c398:	5088      	str	r0, [r1, r2]
1004c39a:	262c      	movs	r6, #44	@ 0x2c
1004c39c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004c39e:	4631      	mov	r1, r6
1004c3a0:	f000 fc2a 	bl	1004cbf8 <csmem_mem_0_assign>
1004c3a4:	6839      	ldr	r1, [r7, #0]
1004c3a6:	22a4      	movs	r2, #164	@ 0xa4
1004c3a8:	5088      	str	r0, [r1, r2]
1004c3aa:	2041      	movs	r0, #65	@ 0x41
1004c3ac:	0082      	lsls	r2, r0, #2
1004c3ae:	2c01      	cmp	r4, #1
1004c3b0:	9402      	str	r4, [sp, #8]
1004c3b2:	d10a      	bne.n	1004c3ca <LL_init_ucfg_weak+0xe2>
1004c3b4:	4611      	mov	r1, r2
1004c3b6:	3120      	adds	r1, #32
1004c3b8:	2001      	movs	r0, #1
1004c3ba:	4614      	mov	r4, r2
1004c3bc:	f000 fc1c 	bl	1004cbf8 <csmem_mem_0_assign>
1004c3c0:	6839      	ldr	r1, [r7, #0]
1004c3c2:	228c      	movs	r2, #140	@ 0x8c
1004c3c4:	5088      	str	r0, [r1, r2]
1004c3c6:	4621      	mov	r1, r4
1004c3c8:	e038      	b.n	1004c43c <LL_init_ucfg_weak+0x154>
1004c3ca:	2125      	movs	r1, #37	@ 0x25
1004c3cc:	4882      	ldr	r0, [pc, #520]	@ (1004c5d8 <__arm_cp.6_0>)
1004c3ce:	910c      	str	r1, [sp, #48]	@ 0x30
1004c3d0:	5c41      	ldrb	r1, [r0, r1]
1004c3d2:	4610      	mov	r0, r2
1004c3d4:	3020      	adds	r0, #32
1004c3d6:	2900      	cmp	r1, #0
1004c3d8:	9201      	str	r2, [sp, #4]
1004c3da:	d001      	beq.n	1004c3e0 <LL_init_ucfg_weak+0xf8>
1004c3dc:	4601      	mov	r1, r0
1004c3de:	e000      	b.n	1004c3e2 <LL_init_ucfg_weak+0xfa>
1004c3e0:	2144      	movs	r1, #68	@ 0x44
1004c3e2:	2726      	movs	r7, #38	@ 0x26
1004c3e4:	4a7c      	ldr	r2, [pc, #496]	@ (1004c5d8 <__arm_cp.6_0>)
1004c3e6:	5dd2      	ldrb	r2, [r2, r7]
1004c3e8:	2a00      	cmp	r2, #0
1004c3ea:	d000      	beq.n	1004c3ee <LL_init_ucfg_weak+0x106>
1004c3ec:	4601      	mov	r1, r0
1004c3ee:	2529      	movs	r5, #41	@ 0x29
1004c3f0:	4a79      	ldr	r2, [pc, #484]	@ (1004c5d8 <__arm_cp.6_0>)
1004c3f2:	5d52      	ldrb	r2, [r2, r5]
1004c3f4:	2a00      	cmp	r2, #0
1004c3f6:	d000      	beq.n	1004c3fa <LL_init_ucfg_weak+0x112>
1004c3f8:	4601      	mov	r1, r0
1004c3fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004c3fc:	2a01      	cmp	r2, #1
1004c3fe:	d100      	bne.n	1004c402 <LL_init_ucfg_weak+0x11a>
1004c400:	4601      	mov	r1, r0
1004c402:	2001      	movs	r0, #1
1004c404:	f000 fbf8 	bl	1004cbf8 <csmem_mem_0_assign>
1004c408:	4974      	ldr	r1, [pc, #464]	@ (1004c5dc <__arm_cp.6_1>)
1004c40a:	6809      	ldr	r1, [r1, #0]
1004c40c:	228c      	movs	r2, #140	@ 0x8c
1004c40e:	5088      	str	r0, [r1, r2]
1004c410:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c412:	2801      	cmp	r0, #1
1004c414:	9c01      	ldr	r4, [sp, #4]
1004c416:	4621      	mov	r1, r4
1004c418:	d010      	beq.n	1004c43c <LL_init_ucfg_weak+0x154>
1004c41a:	486f      	ldr	r0, [pc, #444]	@ (1004c5d8 <__arm_cp.6_0>)
1004c41c:	5d40      	ldrb	r0, [r0, r5]
1004c41e:	2800      	cmp	r0, #0
1004c420:	4621      	mov	r1, r4
1004c422:	d10b      	bne.n	1004c43c <LL_init_ucfg_weak+0x154>
1004c424:	486c      	ldr	r0, [pc, #432]	@ (1004c5d8 <__arm_cp.6_0>)
1004c426:	5dc0      	ldrb	r0, [r0, r7]
1004c428:	2800      	cmp	r0, #0
1004c42a:	4621      	mov	r1, r4
1004c42c:	d106      	bne.n	1004c43c <LL_init_ucfg_weak+0x154>
1004c42e:	486a      	ldr	r0, [pc, #424]	@ (1004c5d8 <__arm_cp.6_0>)
1004c430:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004c432:	5c40      	ldrb	r0, [r0, r1]
1004c434:	2800      	cmp	r0, #0
1004c436:	d000      	beq.n	1004c43a <LL_init_ucfg_weak+0x152>
1004c438:	4626      	mov	r6, r4
1004c43a:	4631      	mov	r1, r6
1004c43c:	9818      	ldr	r0, [sp, #96]	@ 0x60
1004c43e:	900b      	str	r0, [sp, #44]	@ 0x2c
1004c440:	9816      	ldr	r0, [sp, #88]	@ 0x58
1004c442:	9003      	str	r0, [sp, #12]
1004c444:	2601      	movs	r6, #1
1004c446:	4d66      	ldr	r5, [pc, #408]	@ (1004c5e0 <__arm_cp.6_2>)
1004c448:	4630      	mov	r0, r6
1004c44a:	47a8      	blx	r5
1004c44c:	4f63      	ldr	r7, [pc, #396]	@ (1004c5dc <__arm_cp.6_1>)
1004c44e:	6839      	ldr	r1, [r7, #0]
1004c450:	2290      	movs	r2, #144	@ 0x90
1004c452:	5088      	str	r0, [r1, r2]
1004c454:	2110      	movs	r1, #16
1004c456:	4630      	mov	r0, r6
1004c458:	47a8      	blx	r5
1004c45a:	6839      	ldr	r1, [r7, #0]
1004c45c:	22a0      	movs	r2, #160	@ 0xa0
1004c45e:	9204      	str	r2, [sp, #16]
1004c460:	5088      	str	r0, [r1, r2]
1004c462:	2104      	movs	r1, #4
1004c464:	4630      	mov	r0, r6
1004c466:	47a8      	blx	r5
1004c468:	6839      	ldr	r1, [r7, #0]
1004c46a:	22a8      	movs	r2, #168	@ 0xa8
1004c46c:	5088      	str	r0, [r1, r2]
1004c46e:	2134      	movs	r1, #52	@ 0x34
1004c470:	960c      	str	r6, [sp, #48]	@ 0x30
1004c472:	4630      	mov	r0, r6
1004c474:	47a8      	blx	r5
1004c476:	6839      	ldr	r1, [r7, #0]
1004c478:	22ac      	movs	r2, #172	@ 0xac
1004c47a:	5088      	str	r0, [r1, r2]
1004c47c:	9808      	ldr	r0, [sp, #32]
1004c47e:	b2c7      	uxtb	r7, r0
1004c480:	1f21      	subs	r1, r4, #4
1004c482:	4638      	mov	r0, r7
1004c484:	47a8      	blx	r5
1004c486:	4605      	mov	r5, r0
1004c488:	9c02      	ldr	r4, [sp, #8]
1004c48a:	2c01      	cmp	r4, #1
1004c48c:	d105      	bne.n	1004c49a <LL_init_ucfg_weak+0x1b2>
1004c48e:	215c      	movs	r1, #92	@ 0x5c
1004c490:	4638      	mov	r0, r7
1004c492:	f000 fbb1 	bl	1004cbf8 <csmem_mem_0_assign>
1004c496:	4602      	mov	r2, r0
1004c498:	e000      	b.n	1004c49c <LL_init_ucfg_weak+0x1b4>
1004c49a:	2200      	movs	r2, #0
1004c49c:	4638      	mov	r0, r7
1004c49e:	4629      	mov	r1, r5
1004c4a0:	f7fe ff70 	bl	1004b384 <EADV_init>
1004c4a4:	ab10      	add	r3, sp, #64	@ 0x40
1004c4a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004c4a8:	70d8      	strb	r0, [r3, #3]
1004c4aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004c4ac:	7098      	strb	r0, [r3, #2]
1004c4ae:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1004c4b0:	705e      	strb	r6, [r3, #1]
1004c4b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c4b4:	7018      	strb	r0, [r3, #0]
1004c4b6:	4620      	mov	r0, r4
1004c4b8:	9d05      	ldr	r5, [sp, #20]
1004c4ba:	4629      	mov	r1, r5
1004c4bc:	463a      	mov	r2, r7
1004c4be:	f001 f9ff 	bl	1004d8c0 <llc_padv_mem_allocate_ucfg_weak>
1004c4c2:	9f03      	ldr	r7, [sp, #12]
1004c4c4:	4638      	mov	r0, r7
1004c4c6:	4621      	mov	r1, r4
1004c4c8:	f7fe fd83 	bl	1004afd2 <llc_scan_mem_allocate_ucfg_weak>
1004c4cc:	4638      	mov	r0, r7
1004c4ce:	4621      	mov	r1, r4
1004c4d0:	462a      	mov	r2, r5
1004c4d2:	f001 fa58 	bl	1004d986 <llc_pscan_mem_allocate_ucfg_weak>
1004c4d6:	4638      	mov	r0, r7
1004c4d8:	4621      	mov	r1, r4
1004c4da:	462a      	mov	r2, r5
1004c4dc:	4633      	mov	r3, r6
1004c4de:	f7fe fe2c 	bl	1004b13a <llc_past_mem_allocate_ucfg_weak>
1004c4e2:	9600      	str	r6, [sp, #0]
1004c4e4:	463e      	mov	r6, r7
1004c4e6:	4638      	mov	r0, r7
1004c4e8:	4621      	mov	r1, r4
1004c4ea:	462a      	mov	r2, r5
1004c4ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004c4ee:	f001 fa4b 	bl	1004d988 <llc_pscan_wr_mem_allocate_ucfg_weak>
1004c4f2:	f7fe fd56 	bl	1004afa2 <llc_iso_cmn_mem_alloc_ucfg_weak>
1004c4f6:	2c01      	cmp	r4, #1
1004c4f8:	d107      	bne.n	1004c50a <LL_init_ucfg_weak+0x222>
1004c4fa:	2d01      	cmp	r5, #1
1004c4fc:	d105      	bne.n	1004c50a <LL_init_ucfg_weak+0x222>
1004c4fe:	f001 f974 	bl	1004d7ea <llc_big_brc_mem_alloc_ucfg_weak>
1004c502:	2e01      	cmp	r6, #1
1004c504:	d101      	bne.n	1004c50a <LL_init_ucfg_weak+0x222>
1004c506:	f001 f971 	bl	1004d7ec <llc_big_sync_mem_alloc_ucfg_weak>
1004c50a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c50c:	2801      	cmp	r0, #1
1004c50e:	4f33      	ldr	r7, [pc, #204]	@ (1004c5dc <__arm_cp.6_1>)
1004c510:	d101      	bne.n	1004c516 <LL_init_ucfg_weak+0x22e>
1004c512:	f001 f96c 	bl	1004d7ee <llc_cig_cmn_mem_alloc_ucfg_weak>
1004c516:	f7fe fd3d 	bl	1004af94 <llc_isoal_mem_alloc_ucfg_weak>
1004c51a:	9806      	ldr	r0, [sp, #24]
1004c51c:	4631      	mov	r1, r6
1004c51e:	4622      	mov	r2, r4
1004c520:	462b      	mov	r3, r5
1004c522:	f7fe fe16 	bl	1004b152 <llc_cte_mem_allocate_ucfg_weak>
1004c526:	4e2c      	ldr	r6, [pc, #176]	@ (1004c5d8 <__arm_cp.6_0>)
1004c528:	7af0      	ldrb	r0, [r6, #11]
1004c52a:	1c41      	adds	r1, r0, #1
1004c52c:	4d2d      	ldr	r5, [pc, #180]	@ (1004c5e4 <__arm_cp.6_3>)
1004c52e:	4628      	mov	r0, r5
1004c530:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004c532:	f000 fb4f 	bl	1004cbd4 <csmem_mem_assign>
1004c536:	6839      	ldr	r1, [r7, #0]
1004c538:	22d0      	movs	r2, #208	@ 0xd0
1004c53a:	5088      	str	r0, [r1, r2]
1004c53c:	7af1      	ldrb	r1, [r6, #11]
1004c53e:	2202      	movs	r2, #2
1004c540:	4628      	mov	r0, r5
1004c542:	f000 fb47 	bl	1004cbd4 <csmem_mem_assign>
1004c546:	6839      	ldr	r1, [r7, #0]
1004c548:	460a      	mov	r2, r1
1004c54a:	32a0      	adds	r2, #160	@ 0xa0
1004c54c:	6350      	str	r0, [r2, #52]	@ 0x34
1004c54e:	9804      	ldr	r0, [sp, #16]
1004c550:	5808      	ldr	r0, [r1, r0]
1004c552:	6078      	str	r0, [r7, #4]
1004c554:	6850      	ldr	r0, [r2, #4]
1004c556:	60b8      	str	r0, [r7, #8]
1004c558:	4620      	mov	r0, r4
1004c55a:	f7fe fd39 	bl	1004afd0 <llc_scan_init_ucfg_weak>
1004c55e:	f001 fa11 	bl	1004d984 <llc_pscan_init_ucfg_weak>
1004c562:	f000 f863 	bl	1004c62c <LL_sched_init>
1004c566:	f7fe fdf9 	bl	1004b15c <LL_dtm_init>
1004c56a:	f001 f9aa 	bl	1004d8c2 <llc_padv_init_ucfg_weak>
1004c56e:	f7fe fdef 	bl	1004b150 <llc_cte_init_ucfg_weak>
1004c572:	f7fe fa7b 	bl	1004aa6c <HCI_Init>
1004c576:	f7f5 fb85 	bl	10041c84 <BLEPLAT_GetDefaultPALevel>
1004c57a:	6839      	ldr	r1, [r7, #0]
1004c57c:	2400      	movs	r4, #0
1004c57e:	728c      	strb	r4, [r1, #10]
1004c580:	7248      	strb	r0, [r1, #9]
1004c582:	4620      	mov	r0, r4
1004c584:	f7f5 fb86 	bl	10041c94 <BLEPLAT_SetHighPower>
1004c588:	f7fd fa80 	bl	10049a8c <ble_HAL_Init>
1004c58c:	6838      	ldr	r0, [r7, #0]
1004c58e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1004c590:	f7fe fdd4 	bl	1004b13c <LLC_pcl_hal_cntxt_init_ucfg_weak>
1004c594:	6838      	ldr	r0, [r7, #0]
1004c596:	9d07      	ldr	r5, [sp, #28]
1004c598:	5940      	ldr	r0, [r0, r5]
1004c59a:	300c      	adds	r0, #12
1004c59c:	f000 ffd4 	bl	1004d548 <addr8_list_clear>
1004c5a0:	463e      	mov	r6, r7
1004c5a2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
1004c5a4:	4638      	mov	r0, r7
1004c5a6:	f7fe fd02 	bl	1004afae <llc_priv_init_ucfg_weak>
1004c5aa:	6830      	ldr	r0, [r6, #0]
1004c5ac:	5941      	ldr	r1, [r0, r5]
1004c5ae:	2240      	movs	r2, #64	@ 0x40
1004c5b0:	548c      	strb	r4, [r1, r2]
1004c5b2:	4a09      	ldr	r2, [pc, #36]	@ (1004c5d8 <__arm_cp.6_0>)
1004c5b4:	8b12      	ldrh	r2, [r2, #24]
1004c5b6:	8302      	strh	r2, [r0, #24]
1004c5b8:	201f      	movs	r0, #31
1004c5ba:	900f      	str	r0, [sp, #60]	@ 0x3c
1004c5bc:	43e0      	mvns	r0, r4
1004c5be:	900e      	str	r0, [sp, #56]	@ 0x38
1004c5c0:	3148      	adds	r1, #72	@ 0x48
1004c5c2:	a80e      	add	r0, sp, #56	@ 0x38
1004c5c4:	2205      	movs	r2, #5
1004c5c6:	f000 ff6d 	bl	1004d4a4 <char_copy>
1004c5ca:	6830      	ldr	r0, [r6, #0]
1004c5cc:	5940      	ldr	r0, [r0, r5]
1004c5ce:	02f9      	lsls	r1, r7, #11
1004c5d0:	2254      	movs	r2, #84	@ 0x54
1004c5d2:	5281      	strh	r1, [r0, r2]
1004c5d4:	b011      	add	sp, #68	@ 0x44
1004c5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004c5d8 <__arm_cp.6_0>:
1004c5d8:	200006d8 	.word	0x200006d8

1004c5dc <__arm_cp.6_1>:
1004c5dc:	200006c8 	.word	0x200006c8

1004c5e0 <__arm_cp.6_2>:
1004c5e0:	1004cbf9 	.word	0x1004cbf9

1004c5e4 <__arm_cp.6_3>:
1004c5e4:	200006d4 	.word	0x200006d4

1004c5e8 <LL_get_tx_common_buffer_p>:
1004c5e8:	4802      	ldr	r0, [pc, #8]	@ (1004c5f4 <__arm_cp.11_0>)
1004c5ea:	6800      	ldr	r0, [r0, #0]
1004c5ec:	218c      	movs	r1, #140	@ 0x8c
1004c5ee:	5840      	ldr	r0, [r0, r1]
1004c5f0:	4770      	bx	lr
1004c5f2:	46c0      	nop			@ (mov r8, r8)

1004c5f4 <__arm_cp.11_0>:
1004c5f4:	200006c8 	.word	0x200006c8

1004c5f8 <LL_get_rx_common_buffer_p>:
1004c5f8:	4802      	ldr	r0, [pc, #8]	@ (1004c604 <__arm_cp.12_0>)
1004c5fa:	6800      	ldr	r0, [r0, #0]
1004c5fc:	2190      	movs	r1, #144	@ 0x90
1004c5fe:	5840      	ldr	r0, [r0, r1]
1004c600:	4770      	bx	lr
1004c602:	46c0      	nop			@ (mov r8, r8)

1004c604 <__arm_cp.12_0>:
1004c604:	200006c8 	.word	0x200006c8

1004c608 <llc_get_linkms_cntxt_p>:
1004c608:	4802      	ldr	r0, [pc, #8]	@ (1004c614 <__arm_cp.15_0>)
1004c60a:	6800      	ldr	r0, [r0, #0]
1004c60c:	219c      	movs	r1, #156	@ 0x9c
1004c60e:	5840      	ldr	r0, [r0, r1]
1004c610:	4770      	bx	lr
1004c612:	46c0      	nop			@ (mov r8, r8)

1004c614 <__arm_cp.15_0>:
1004c614:	200006c8 	.word	0x200006c8

1004c618 <LL_sched_time_t1_ge_t2>:
1004c618:	43c0      	mvns	r0, r0
1004c61a:	1840      	adds	r0, r0, r1
1004c61c:	0fc0      	lsrs	r0, r0, #31
1004c61e:	4770      	bx	lr

1004c620 <LL_sched_engine_return_actual_scheduler_margin>:
1004c620:	4801      	ldr	r0, [pc, #4]	@ (1004c628 <__arm_cp.2_0>)
1004c622:	6800      	ldr	r0, [r0, #0]
1004c624:	6880      	ldr	r0, [r0, #8]
1004c626:	4770      	bx	lr

1004c628 <__arm_cp.2_0>:
1004c628:	200006cc 	.word	0x200006cc

1004c62c <LL_sched_init>:
1004c62c:	4809      	ldr	r0, [pc, #36]	@ (1004c654 <__arm_cp.4_0>)
1004c62e:	7ac0      	ldrb	r0, [r0, #11]
1004c630:	4909      	ldr	r1, [pc, #36]	@ (1004c658 <__arm_cp.4_1>)
1004c632:	6809      	ldr	r1, [r1, #0]
1004c634:	3112      	adds	r1, #18
1004c636:	2800      	cmp	r0, #0
1004c638:	d004      	beq.n	1004c644 <LL_sched_init+0x18>
1004c63a:	2200      	movs	r2, #0
1004c63c:	800a      	strh	r2, [r1, #0]
1004c63e:	312c      	adds	r1, #44	@ 0x2c
1004c640:	1e40      	subs	r0, r0, #1
1004c642:	e7f8      	b.n	1004c636 <LL_sched_init+0xa>
1004c644:	4805      	ldr	r0, [pc, #20]	@ (1004c65c <__arm_cp.4_2>)
1004c646:	6800      	ldr	r0, [r0, #0]
1004c648:	2100      	movs	r1, #0
1004c64a:	73c1      	strb	r1, [r0, #15]
1004c64c:	21ff      	movs	r1, #255	@ 0xff
1004c64e:	0209      	lsls	r1, r1, #8
1004c650:	8181      	strh	r1, [r0, #12]
1004c652:	4770      	bx	lr

1004c654 <__arm_cp.4_0>:
1004c654:	200006d8 	.word	0x200006d8

1004c658 <__arm_cp.4_1>:
1004c658:	200006d0 	.word	0x200006d0

1004c65c <__arm_cp.4_2>:
1004c65c:	200006cc 	.word	0x200006cc

1004c660 <LL_sched_set_anchor>:
1004c660:	222c      	movs	r2, #44	@ 0x2c
1004c662:	4342      	muls	r2, r0
1004c664:	4801      	ldr	r0, [pc, #4]	@ (1004c66c <__arm_cp.5_0>)
1004c666:	6800      	ldr	r0, [r0, #0]
1004c668:	5081      	str	r1, [r0, r2]
1004c66a:	4770      	bx	lr

1004c66c <__arm_cp.5_0>:
1004c66c:	200006d0 	.word	0x200006d0

1004c670 <LL_sched_set_cancel_request>:
1004c670:	28ff      	cmp	r0, #255	@ 0xff
1004c672:	d00b      	beq.n	1004c68c <LL_sched_set_cancel_request+0x1c>
1004c674:	212c      	movs	r1, #44	@ 0x2c
1004c676:	4341      	muls	r1, r0
1004c678:	4805      	ldr	r0, [pc, #20]	@ (1004c690 <__arm_cp.9_0>)
1004c67a:	6800      	ldr	r0, [r0, #0]
1004c67c:	1840      	adds	r0, r0, r1
1004c67e:	7c81      	ldrb	r1, [r0, #18]
1004c680:	2908      	cmp	r1, #8
1004c682:	d001      	beq.n	1004c688 <LL_sched_set_cancel_request+0x18>
1004c684:	2110      	movs	r1, #16
1004c686:	e000      	b.n	1004c68a <LL_sched_set_cancel_request+0x1a>
1004c688:	2120      	movs	r1, #32
1004c68a:	7481      	strb	r1, [r0, #18]
1004c68c:	4770      	bx	lr
1004c68e:	46c0      	nop			@ (mov r8, r8)

1004c690 <__arm_cp.9_0>:
1004c690:	200006d0 	.word	0x200006d0

1004c694 <LL_sched_enable_taskslot>:
1004c694:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c696:	b088      	sub	sp, #32
1004c698:	9307      	str	r3, [sp, #28]
1004c69a:	272c      	movs	r7, #44	@ 0x2c
1004c69c:	4347      	muls	r7, r0
1004c69e:	481a      	ldr	r0, [pc, #104]	@ (1004c708 <__arm_cp.10_0>)
1004c6a0:	6806      	ldr	r6, [r0, #0]
1004c6a2:	19f0      	adds	r0, r6, r7
1004c6a4:	7c84      	ldrb	r4, [r0, #18]
1004c6a6:	2c01      	cmp	r4, #1
1004c6a8:	d12b      	bne.n	1004c702 <LL_sched_enable_taskslot+0x6e>
1004c6aa:	4603      	mov	r3, r0
1004c6ac:	3312      	adds	r3, #18
1004c6ae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1004c6b0:	9506      	str	r5, [sp, #24]
1004c6b2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1004c6b4:	9505      	str	r5, [sp, #20]
1004c6b6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1004c6b8:	9503      	str	r5, [sp, #12]
1004c6ba:	9d11      	ldr	r5, [sp, #68]	@ 0x44
1004c6bc:	9502      	str	r5, [sp, #8]
1004c6be:	9104      	str	r1, [sp, #16]
1004c6c0:	9910      	ldr	r1, [sp, #64]	@ 0x40
1004c6c2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004c6c4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1004c6c6:	9400      	str	r4, [sp, #0]
1004c6c8:	9201      	str	r2, [sp, #4]
1004c6ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004c6cc:	9c07      	ldr	r4, [sp, #28]
1004c6ce:	6044      	str	r4, [r0, #4]
1004c6d0:	6082      	str	r2, [r0, #8]
1004c6d2:	9a00      	ldr	r2, [sp, #0]
1004c6d4:	51f2      	str	r2, [r6, r7]
1004c6d6:	221f      	movs	r2, #31
1004c6d8:	4015      	ands	r5, r2
1004c6da:	7545      	strb	r5, [r0, #21]
1004c6dc:	4011      	ands	r1, r2
1004c6de:	7581      	strb	r1, [r0, #22]
1004c6e0:	2101      	movs	r1, #1
1004c6e2:	7501      	strb	r1, [r0, #20]
1004c6e4:	9a01      	ldr	r2, [sp, #4]
1004c6e6:	74c2      	strb	r2, [r0, #19]
1004c6e8:	8201      	strh	r1, [r0, #16]
1004c6ea:	9902      	ldr	r1, [sp, #8]
1004c6ec:	61c1      	str	r1, [r0, #28]
1004c6ee:	9903      	ldr	r1, [sp, #12]
1004c6f0:	6201      	str	r1, [r0, #32]
1004c6f2:	9905      	ldr	r1, [sp, #20]
1004c6f4:	6241      	str	r1, [r0, #36]	@ 0x24
1004c6f6:	9906      	ldr	r1, [sp, #24]
1004c6f8:	6281      	str	r1, [r0, #40]	@ 0x28
1004c6fa:	9904      	ldr	r1, [sp, #16]
1004c6fc:	60c1      	str	r1, [r0, #12]
1004c6fe:	2002      	movs	r0, #2
1004c700:	7018      	strb	r0, [r3, #0]
1004c702:	b008      	add	sp, #32
1004c704:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c706:	46c0      	nop			@ (mov r8, r8)

1004c708 <__arm_cp.10_0>:
1004c708:	200006d0 	.word	0x200006d0

1004c70c <LL_sched_is_scheduler_call_pending>:
1004c70c:	b580      	push	{r7, lr}
1004c70e:	490a      	ldr	r1, [pc, #40]	@ (1004c738 <__arm_cp.11_0>)
1004c710:	6809      	ldr	r1, [r1, #0]
1004c712:	7b0a      	ldrb	r2, [r1, #12]
1004c714:	2a01      	cmp	r2, #1
1004c716:	d106      	bne.n	1004c726 <LL_sched_is_scheduler_call_pending+0x1a>
1004c718:	7bca      	ldrb	r2, [r1, #15]
1004c71a:	2a03      	cmp	r2, #3
1004c71c:	d105      	bne.n	1004c72a <LL_sched_is_scheduler_call_pending+0x1e>
1004c71e:	2000      	movs	r0, #0
1004c720:	f7fe fc6b 	bl	1004affa <llc_scan_stop_ucfg_weak>
1004c724:	bd80      	pop	{r7, pc}
1004c726:	2000      	movs	r0, #0
1004c728:	bd80      	pop	{r7, pc}
1004c72a:	6809      	ldr	r1, [r1, #0]
1004c72c:	1a08      	subs	r0, r1, r0
1004c72e:	4903      	ldr	r1, [pc, #12]	@ (1004c73c <__arm_cp.11_1>)
1004c730:	1840      	adds	r0, r0, r1
1004c732:	0fc0      	lsrs	r0, r0, #31
1004c734:	bd80      	pop	{r7, pc}
1004c736:	46c0      	nop			@ (mov r8, r8)

1004c738 <__arm_cp.11_0>:
1004c738:	200006cc 	.word	0x200006cc

1004c73c <__arm_cp.11_1>:
1004c73c:	fffffe0b 	.word	0xfffffe0b

1004c740 <LL_sched_engine>:
1004c740:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c742:	b0b3      	sub	sp, #204	@ 0xcc
1004c744:	4607      	mov	r7, r0
1004c746:	48dc      	ldr	r0, [pc, #880]	@ (1004cab8 <__arm_cp.13_0>)
1004c748:	6800      	ldr	r0, [r0, #0]
1004c74a:	900b      	str	r0, [sp, #44]	@ 0x2c
1004c74c:	2001      	movs	r0, #1
1004c74e:	9001      	str	r0, [sp, #4]
1004c750:	9009      	str	r0, [sp, #36]	@ 0x24
1004c752:	2100      	movs	r1, #0
1004c754:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c756:	7381      	strb	r1, [r0, #14]
1004c758:	48d8      	ldr	r0, [pc, #864]	@ (1004cabc <__arm_cp.13_1>)
1004c75a:	6803      	ldr	r3, [r0, #0]
1004c75c:	910a      	str	r1, [sp, #40]	@ 0x28
1004c75e:	7219      	strb	r1, [r3, #8]
1004c760:	20ff      	movs	r0, #255	@ 0xff
1004c762:	9008      	str	r0, [sp, #32]
1004c764:	3002      	adds	r0, #2
1004c766:	8298      	strh	r0, [r3, #20]
1004c768:	7c18      	ldrb	r0, [r3, #16]
1004c76a:	21f0      	movs	r1, #240	@ 0xf0
1004c76c:	4001      	ands	r1, r0
1004c76e:	090a      	lsrs	r2, r1, #4
1004c770:	1888      	adds	r0, r1, r2
1004c772:	7418      	strb	r0, [r3, #16]
1004c774:	8a59      	ldrh	r1, [r3, #18]
1004c776:	40d1      	lsrs	r1, r2
1004c778:	07c9      	lsls	r1, r1, #31
1004c77a:	49d1      	ldr	r1, [pc, #836]	@ (1004cac0 <__arm_cp.13_2>)
1004c77c:	6809      	ldr	r1, [r1, #0]
1004c77e:	9107      	str	r1, [sp, #28]
1004c780:	9305      	str	r3, [sp, #20]
1004c782:	d006      	beq.n	1004c792 <LL_sched_engine+0x52>
1004c784:	2000      	movs	r0, #0
1004c786:	f000 fd3f 	bl	1004d208 <tsk_notify_idx>
1004c78a:	f7f5 f838 	bl	100417fe <BLE_STACK_ProcessRequest>
1004c78e:	9b05      	ldr	r3, [sp, #20]
1004c790:	7c18      	ldrb	r0, [r3, #16]
1004c792:	210f      	movs	r1, #15
1004c794:	9102      	str	r1, [sp, #8]
1004c796:	4008      	ands	r0, r1
1004c798:	7418      	strb	r0, [r3, #16]
1004c79a:	2196      	movs	r1, #150	@ 0x96
1004c79c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004c79e:	4341      	muls	r1, r0
1004c7a0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c7a2:	9112      	str	r1, [sp, #72]	@ 0x48
1004c7a4:	6081      	str	r1, [r0, #8]
1004c7a6:	2001      	movs	r0, #1
1004c7a8:	9004      	str	r0, [sp, #16]
1004c7aa:	43c0      	mvns	r0, r0
1004c7ac:	b279      	sxtb	r1, r7
1004c7ae:	4281      	cmp	r1, r0
1004c7b0:	dc10      	bgt.n	1004c7d4 <LL_sched_engine+0x94>
1004c7b2:	207f      	movs	r0, #127	@ 0x7f
1004c7b4:	4007      	ands	r7, r0
1004c7b6:	252c      	movs	r5, #44	@ 0x2c
1004c7b8:	437d      	muls	r5, r7
1004c7ba:	9c07      	ldr	r4, [sp, #28]
1004c7bc:	1960      	adds	r0, r4, r5
1004c7be:	900a      	str	r0, [sp, #40]	@ 0x28
1004c7c0:	5966      	ldr	r6, [r4, r5]
1004c7c2:	f7f5 fa76 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004c7c6:	1a30      	subs	r0, r6, r0
1004c7c8:	49be      	ldr	r1, [pc, #760]	@ (1004cac4 <__arm_cp.13_3>)
1004c7ca:	1840      	adds	r0, r0, r1
1004c7cc:	d500      	bpl.n	1004c7d0 <LL_sched_engine+0x90>
1004c7ce:	e0ef      	b.n	1004c9b0 <LL_sched_engine+0x270>
1004c7d0:	4638      	mov	r0, r7
1004c7d2:	e004      	b.n	1004c7de <LL_sched_engine+0x9e>
1004c7d4:	b2f8      	uxtb	r0, r7
1004c7d6:	28ff      	cmp	r0, #255	@ 0xff
1004c7d8:	d00e      	beq.n	1004c7f8 <LL_sched_engine+0xb8>
1004c7da:	2100      	movs	r1, #0
1004c7dc:	910a      	str	r1, [sp, #40]	@ 0x28
1004c7de:	212c      	movs	r1, #44	@ 0x2c
1004c7e0:	4341      	muls	r1, r0
1004c7e2:	9807      	ldr	r0, [sp, #28]
1004c7e4:	1840      	adds	r0, r0, r1
1004c7e6:	2101      	movs	r1, #1
1004c7e8:	7501      	strb	r1, [r0, #20]
1004c7ea:	7c81      	ldrb	r1, [r0, #18]
1004c7ec:	2908      	cmp	r1, #8
1004c7ee:	d102      	bne.n	1004c7f6 <LL_sched_engine+0xb6>
1004c7f0:	3012      	adds	r0, #18
1004c7f2:	2104      	movs	r1, #4
1004c7f4:	7001      	strb	r1, [r0, #0]
1004c7f6:	9708      	str	r7, [sp, #32]
1004c7f8:	f7f5 fa5b 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004c7fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
1004c7fe:	180c      	adds	r4, r1, r0
1004c800:	48af      	ldr	r0, [pc, #700]	@ (1004cac0 <__arm_cp.13_2>)
1004c802:	6807      	ldr	r7, [r0, #0]
1004c804:	3728      	adds	r7, #40	@ 0x28
1004c806:	2500      	movs	r5, #0
1004c808:	4628      	mov	r0, r5
1004c80a:	49af      	ldr	r1, [pc, #700]	@ (1004cac8 <__arm_cp.13_4>)
1004c80c:	7aca      	ldrb	r2, [r1, #11]
1004c80e:	4295      	cmp	r5, r2
1004c810:	d23a      	bcs.n	1004c888 <LL_sched_engine+0x148>
1004c812:	463e      	mov	r6, r7
1004c814:	3e16      	subs	r6, #22
1004c816:	7831      	ldrb	r1, [r6, #0]
1004c818:	070a      	lsls	r2, r1, #28
1004c81a:	0f52      	lsrs	r2, r2, #29
1004c81c:	d01e      	beq.n	1004c85c <LL_sched_engine+0x11c>
1004c81e:	2104      	movs	r1, #4
1004c820:	7031      	strb	r1, [r6, #0]
1004c822:	4639      	mov	r1, r7
1004c824:	3928      	subs	r1, #40	@ 0x28
1004c826:	6809      	ldr	r1, [r1, #0]
1004c828:	43ca      	mvns	r2, r1
1004c82a:	18a2      	adds	r2, r4, r2
1004c82c:	d429      	bmi.n	1004c882 <LL_sched_engine+0x142>
1004c82e:	1a61      	subs	r1, r4, r1
1004c830:	4638      	mov	r0, r7
1004c832:	381c      	subs	r0, #28
1004c834:	6800      	ldr	r0, [r0, #0]
1004c836:	463a      	mov	r2, r7
1004c838:	3a0c      	subs	r2, #12
1004c83a:	6812      	ldr	r2, [r2, #0]
1004c83c:	4790      	blx	r2
1004c83e:	4639      	mov	r1, r7
1004c840:	3918      	subs	r1, #24
1004c842:	880a      	ldrh	r2, [r1, #0]
1004c844:	1812      	adds	r2, r2, r0
1004c846:	800a      	strh	r2, [r1, #0]
1004c848:	4639      	mov	r1, r7
1004c84a:	3914      	subs	r1, #20
1004c84c:	780a      	ldrb	r2, [r1, #0]
1004c84e:	1880      	adds	r0, r0, r2
1004c850:	287f      	cmp	r0, #127	@ 0x7f
1004c852:	d300      	bcc.n	1004c856 <LL_sched_engine+0x116>
1004c854:	207f      	movs	r0, #127	@ 0x7f
1004c856:	7008      	strb	r0, [r1, #0]
1004c858:	7831      	ldrb	r1, [r6, #0]
1004c85a:	2001      	movs	r0, #1
1004c85c:	0689      	lsls	r1, r1, #26
1004c85e:	0f89      	lsrs	r1, r1, #30
1004c860:	d00f      	beq.n	1004c882 <LL_sched_engine+0x142>
1004c862:	6839      	ldr	r1, [r7, #0]
1004c864:	2900      	cmp	r1, #0
1004c866:	d006      	beq.n	1004c876 <LL_sched_engine+0x136>
1004c868:	4638      	mov	r0, r7
1004c86a:	381c      	subs	r0, #28
1004c86c:	6800      	ldr	r0, [r0, #0]
1004c86e:	4788      	blx	r1
1004c870:	7830      	ldrb	r0, [r6, #0]
1004c872:	2801      	cmp	r0, #1
1004c874:	d004      	beq.n	1004c880 <LL_sched_engine+0x140>
1004c876:	2000      	movs	r0, #0
1004c878:	7030      	strb	r0, [r6, #0]
1004c87a:	4639      	mov	r1, r7
1004c87c:	3915      	subs	r1, #21
1004c87e:	7008      	strb	r0, [r1, #0]
1004c880:	2001      	movs	r0, #1
1004c882:	372c      	adds	r7, #44	@ 0x2c
1004c884:	1c6d      	adds	r5, r5, #1
1004c886:	e7c0      	b.n	1004c80a <LL_sched_engine+0xca>
1004c888:	2800      	cmp	r0, #0
1004c88a:	d1b5      	bne.n	1004c7f8 <LL_sched_engine+0xb8>
1004c88c:	488c      	ldr	r0, [pc, #560]	@ (1004cac0 <__arm_cp.13_2>)
1004c88e:	6800      	ldr	r0, [r0, #0]
1004c890:	4603      	mov	r3, r0
1004c892:	3312      	adds	r3, #18
1004c894:	2400      	movs	r4, #0
1004c896:	4621      	mov	r1, r4
1004c898:	42a2      	cmp	r2, r4
1004c89a:	d009      	beq.n	1004c8b0 <LL_sched_engine+0x170>
1004c89c:	781d      	ldrb	r5, [r3, #0]
1004c89e:	2d04      	cmp	r5, #4
1004c8a0:	d103      	bne.n	1004c8aa <LL_sched_engine+0x16a>
1004c8a2:	b2cd      	uxtb	r5, r1
1004c8a4:	ae13      	add	r6, sp, #76	@ 0x4c
1004c8a6:	5574      	strb	r4, [r6, r5]
1004c8a8:	1c49      	adds	r1, r1, #1
1004c8aa:	332c      	adds	r3, #44	@ 0x2c
1004c8ac:	1c64      	adds	r4, r4, #1
1004c8ae:	e7f3      	b.n	1004c898 <LL_sched_engine+0x158>
1004c8b0:	060a      	lsls	r2, r1, #24
1004c8b2:	d074      	beq.n	1004c99e <LL_sched_engine+0x25e>
1004c8b4:	b2ca      	uxtb	r2, r1
1004c8b6:	920e      	str	r2, [sp, #56]	@ 0x38
1004c8b8:	2200      	movs	r2, #0
1004c8ba:	9206      	str	r2, [sp, #24]
1004c8bc:	460c      	mov	r4, r1
1004c8be:	9203      	str	r2, [sp, #12]
1004c8c0:	4616      	mov	r6, r2
1004c8c2:	910d      	str	r1, [sp, #52]	@ 0x34
1004c8c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c8c6:	4296      	cmp	r6, r2
1004c8c8:	d06e      	beq.n	1004c9a8 <LL_sched_engine+0x268>
1004c8ca:	9612      	str	r6, [sp, #72]	@ 0x48
1004c8cc:	9410      	str	r4, [sp, #64]	@ 0x40
1004c8ce:	b2e3      	uxtb	r3, r4
1004c8d0:	2700      	movs	r7, #0
1004c8d2:	462c      	mov	r4, r5
1004c8d4:	463e      	mov	r6, r7
1004c8d6:	42bb      	cmp	r3, r7
1004c8d8:	d00d      	beq.n	1004c8f6 <LL_sched_engine+0x1b6>
1004c8da:	aa13      	add	r2, sp, #76	@ 0x4c
1004c8dc:	5dd2      	ldrb	r2, [r2, r7]
1004c8de:	252c      	movs	r5, #44	@ 0x2c
1004c8e0:	4355      	muls	r5, r2
1004c8e2:	5945      	ldr	r5, [r0, r5]
1004c8e4:	2f00      	cmp	r7, #0
1004c8e6:	d002      	beq.n	1004c8ee <LL_sched_engine+0x1ae>
1004c8e8:	43f2      	mvns	r2, r6
1004c8ea:	18aa      	adds	r2, r5, r2
1004c8ec:	d501      	bpl.n	1004c8f2 <LL_sched_engine+0x1b2>
1004c8ee:	463c      	mov	r4, r7
1004c8f0:	462e      	mov	r6, r5
1004c8f2:	1c7f      	adds	r7, r7, #1
1004c8f4:	e7ef      	b.n	1004c8d6 <LL_sched_engine+0x196>
1004c8f6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1004c8f8:	1b4a      	subs	r2, r1, r5
1004c8fa:	b2d2      	uxtb	r2, r2
1004c8fc:	1e51      	subs	r1, r2, #1
1004c8fe:	aa13      	add	r2, sp, #76	@ 0x4c
1004c900:	5c53      	ldrb	r3, [r2, r1]
1004c902:	b2e4      	uxtb	r4, r4
1004c904:	5d17      	ldrb	r7, [r2, r4]
1004c906:	5457      	strb	r7, [r2, r1]
1004c908:	5513      	strb	r3, [r2, r4]
1004c90a:	910f      	str	r1, [sp, #60]	@ 0x3c
1004c90c:	b2cb      	uxtb	r3, r1
1004c90e:	5cd3      	ldrb	r3, [r2, r3]
1004c910:	2d00      	cmp	r5, #0
1004c912:	d02e      	beq.n	1004c972 <LL_sched_engine+0x232>
1004c914:	461d      	mov	r5, r3
1004c916:	9911      	ldr	r1, [sp, #68]	@ 0x44
1004c918:	b2ca      	uxtb	r2, r1
1004c91a:	ac13      	add	r4, sp, #76	@ 0x4c
1004c91c:	5ca4      	ldrb	r4, [r4, r2]
1004c91e:	272c      	movs	r7, #44	@ 0x2c
1004c920:	437c      	muls	r4, r7
1004c922:	5902      	ldr	r2, [r0, r4]
1004c924:	1b91      	subs	r1, r2, r6
1004c926:	1904      	adds	r4, r0, r4
1004c928:	6863      	ldr	r3, [r4, #4]
1004c92a:	18c9      	adds	r1, r1, r3
1004c92c:	3195      	adds	r1, #149	@ 0x95
1004c92e:	d44a      	bmi.n	1004c9c6 <LL_sched_engine+0x286>
1004c930:	43d1      	mvns	r1, r2
1004c932:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004c934:	1851      	adds	r1, r2, r1
1004c936:	d449      	bmi.n	1004c9cc <LL_sched_engine+0x28c>
1004c938:	436f      	muls	r7, r5
1004c93a:	19c1      	adds	r1, r0, r7
1004c93c:	7d8a      	ldrb	r2, [r1, #22]
1004c93e:	7d0b      	ldrb	r3, [r1, #20]
1004c940:	4093      	lsls	r3, r2
1004c942:	7d49      	ldrb	r1, [r1, #21]
1004c944:	2601      	movs	r6, #1
1004c946:	4632      	mov	r2, r6
1004c948:	408a      	lsls	r2, r1
1004c94a:	429a      	cmp	r2, r3
1004c94c:	d800      	bhi.n	1004c950 <LL_sched_engine+0x210>
1004c94e:	4613      	mov	r3, r2
1004c950:	7da1      	ldrb	r1, [r4, #22]
1004c952:	7d27      	ldrb	r7, [r4, #20]
1004c954:	408f      	lsls	r7, r1
1004c956:	7d61      	ldrb	r1, [r4, #21]
1004c958:	408e      	lsls	r6, r1
1004c95a:	42be      	cmp	r6, r7
1004c95c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004c95e:	d800      	bhi.n	1004c962 <LL_sched_engine+0x222>
1004c960:	4637      	mov	r7, r6
1004c962:	429f      	cmp	r7, r3
1004c964:	462b      	mov	r3, r5
1004c966:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004c968:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1004c96a:	d300      	bcc.n	1004c96e <LL_sched_engine+0x22e>
1004c96c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004c96e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1004c970:	e011      	b.n	1004c996 <LL_sched_engine+0x256>
1004c972:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004c974:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c976:	2a01      	cmp	r2, #1
1004c978:	d101      	bne.n	1004c97e <LL_sched_engine+0x23e>
1004c97a:	2202      	movs	r2, #2
1004c97c:	9206      	str	r2, [sp, #24]
1004c97e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1004c980:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1004c982:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004c984:	222c      	movs	r2, #44	@ 0x2c
1004c986:	435a      	muls	r2, r3
1004c988:	5883      	ldr	r3, [r0, r2]
1004c98a:	1882      	adds	r2, r0, r2
1004c98c:	6852      	ldr	r2, [r2, #4]
1004c98e:	189a      	adds	r2, r3, r2
1004c990:	3296      	adds	r2, #150	@ 0x96
1004c992:	920c      	str	r2, [sp, #48]	@ 0x30
1004c994:	462b      	mov	r3, r5
1004c996:	1e64      	subs	r4, r4, #1
1004c998:	1c76      	adds	r6, r6, #1
1004c99a:	9311      	str	r3, [sp, #68]	@ 0x44
1004c99c:	e792      	b.n	1004c8c4 <LL_sched_engine+0x184>
1004c99e:	2000      	movs	r0, #0
1004c9a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004c9a2:	6048      	str	r0, [r1, #4]
1004c9a4:	7388      	strb	r0, [r1, #14]
1004c9a6:	e02d      	b.n	1004ca04 <LL_sched_engine+0x2c4>
1004c9a8:	9a03      	ldr	r2, [sp, #12]
1004c9aa:	4616      	mov	r6, r2
1004c9ac:	9b06      	ldr	r3, [sp, #24]
1004c9ae:	e013      	b.n	1004c9d8 <LL_sched_engine+0x298>
1004c9b0:	1960      	adds	r0, r4, r5
1004c9b2:	7c80      	ldrb	r0, [r0, #18]
1004c9b4:	2810      	cmp	r0, #16
1004c9b6:	d100      	bne.n	1004c9ba <LL_sched_engine+0x27a>
1004c9b8:	e70a      	b.n	1004c7d0 <LL_sched_engine+0x90>
1004c9ba:	2820      	cmp	r0, #32
1004c9bc:	d100      	bne.n	1004c9c0 <LL_sched_engine+0x280>
1004c9be:	e707      	b.n	1004c7d0 <LL_sched_engine+0x90>
1004c9c0:	2400      	movs	r4, #0
1004c9c2:	463d      	mov	r5, r7
1004c9c4:	e021      	b.n	1004ca0a <LL_sched_engine+0x2ca>
1004c9c6:	3e96      	subs	r6, #150	@ 0x96
1004c9c8:	9b04      	ldr	r3, [sp, #16]
1004c9ca:	e004      	b.n	1004c9d6 <LL_sched_engine+0x296>
1004c9cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c9ce:	1e40      	subs	r0, r0, #1
1004c9d0:	9011      	str	r0, [sp, #68]	@ 0x44
1004c9d2:	2600      	movs	r6, #0
1004c9d4:	4633      	mov	r3, r6
1004c9d6:	9a03      	ldr	r2, [sp, #12]
1004c9d8:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004c9da:	b2c0      	uxtb	r0, r0
1004c9dc:	a913      	add	r1, sp, #76	@ 0x4c
1004c9de:	5c0d      	ldrb	r5, [r1, r0]
1004c9e0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c9e2:	6042      	str	r2, [r0, #4]
1004c9e4:	7383      	strb	r3, [r0, #14]
1004c9e6:	2dff      	cmp	r5, #255	@ 0xff
1004c9e8:	d00c      	beq.n	1004ca04 <LL_sched_engine+0x2c4>
1004c9ea:	202c      	movs	r0, #44	@ 0x2c
1004c9ec:	4368      	muls	r0, r5
1004c9ee:	9907      	ldr	r1, [sp, #28]
1004c9f0:	1809      	adds	r1, r1, r0
1004c9f2:	b2d8      	uxtb	r0, r3
1004c9f4:	2801      	cmp	r0, #1
1004c9f6:	910a      	str	r1, [sp, #40]	@ 0x28
1004c9f8:	d105      	bne.n	1004ca06 <LL_sched_engine+0x2c6>
1004c9fa:	6808      	ldr	r0, [r1, #0]
1004c9fc:	1a30      	subs	r0, r6, r0
1004c9fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004ca00:	6048      	str	r0, [r1, #4]
1004ca02:	e000      	b.n	1004ca06 <LL_sched_engine+0x2c6>
1004ca04:	25ff      	movs	r5, #255	@ 0xff
1004ca06:	9c01      	ldr	r4, [sp, #4]
1004ca08:	9f08      	ldr	r7, [sp, #32]
1004ca0a:	f7f5 fdd1 	bl	100425b0 <BLEPLAT_CNTR_ClearSemareq>
1004ca0e:	482a      	ldr	r0, [pc, #168]	@ (1004cab8 <__arm_cp.13_0>)
1004ca10:	6800      	ldr	r0, [r0, #0]
1004ca12:	2dff      	cmp	r5, #255	@ 0xff
1004ca14:	d02f      	beq.n	1004ca76 <LL_sched_engine+0x336>
1004ca16:	9711      	str	r7, [sp, #68]	@ 0x44
1004ca18:	9412      	str	r4, [sp, #72]	@ 0x48
1004ca1a:	4604      	mov	r4, r0
1004ca1c:	2008      	movs	r0, #8
1004ca1e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1004ca20:	74b8      	strb	r0, [r7, #18]
1004ca22:	f7fe fb98 	bl	1004b156 <llc_cte_timer_stop_ucfg_weak>
1004ca26:	7365      	strb	r5, [r4, #13]
1004ca28:	6a3a      	ldr	r2, [r7, #32]
1004ca2a:	68f8      	ldr	r0, [r7, #12]
1004ca2c:	6879      	ldr	r1, [r7, #4]
1004ca2e:	4790      	blx	r2
1004ca30:	683e      	ldr	r6, [r7, #0]
1004ca32:	940b      	str	r4, [sp, #44]	@ 0x2c
1004ca34:	6026      	str	r6, [r4, #0]
1004ca36:	4628      	mov	r0, r5
1004ca38:	f7f5 fdd0 	bl	100425dc <BLEPLAT_CNTR_GlobWriteSlot>
1004ca3c:	f7f5 fdc7 	bl	100425ce <BLEPLAT_CNTR_GlobEnableBlue>
1004ca40:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004ca42:	2800      	cmp	r0, #0
1004ca44:	d023      	beq.n	1004ca8e <LL_sched_engine+0x34e>
1004ca46:	7cf8      	ldrb	r0, [r7, #19]
1004ca48:	09c1      	lsrs	r1, r0, #7
1004ca4a:	2201      	movs	r2, #1
1004ca4c:	4630      	mov	r0, r6
1004ca4e:	f7f5 f957 	bl	10041d00 <BLEPLAT_SetRadioTimerValue>
1004ca52:	2800      	cmp	r0, #0
1004ca54:	d01d      	beq.n	1004ca92 <LL_sched_engine+0x352>
1004ca56:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004ca58:	0040      	lsls	r0, r0, #1
1004ca5a:	9009      	str	r0, [sp, #36]	@ 0x24
1004ca5c:	2810      	cmp	r0, #16
1004ca5e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
1004ca60:	d200      	bcs.n	1004ca64 <LL_sched_engine+0x324>
1004ca62:	e676      	b.n	1004c752 <LL_sched_engine+0x12>
1004ca64:	f7fe fb76 	bl	1004b154 <llc_cte_timer_error_ucfg_weak>
1004ca68:	20a1      	movs	r0, #161	@ 0xa1
1004ca6a:	2106      	movs	r1, #6
1004ca6c:	2200      	movs	r2, #0
1004ca6e:	4613      	mov	r3, r2
1004ca70:	f000 fe14 	bl	1004d69c <aci_hal_fw_error_event_push_noinline>
1004ca74:	e009      	b.n	1004ca8a <LL_sched_engine+0x34a>
1004ca76:	4604      	mov	r4, r0
1004ca78:	f7f5 f95c 	bl	10041d34 <BLEPLAT_ClearRadioTimerValue>
1004ca7c:	f7f5 fda0 	bl	100425c0 <BLEPLAT_CNTR_GlobDisableBlue>
1004ca80:	2000      	movs	r0, #0
1004ca82:	73e0      	strb	r0, [r4, #15]
1004ca84:	20ff      	movs	r0, #255	@ 0xff
1004ca86:	0200      	lsls	r0, r0, #8
1004ca88:	81a0      	strh	r0, [r4, #12]
1004ca8a:	9904      	ldr	r1, [sp, #16]
1004ca8c:	e00f      	b.n	1004caae <LL_sched_engine+0x36e>
1004ca8e:	f7f5 f969 	bl	10041d64 <BLEPLAT_SetRadioCloseTimeout>
1004ca92:	9b04      	ldr	r3, [sp, #16]
1004ca94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004ca96:	730b      	strb	r3, [r1, #12]
1004ca98:	7cf8      	ldrb	r0, [r7, #19]
1004ca9a:	73c8      	strb	r0, [r1, #15]
1004ca9c:	9a05      	ldr	r2, [sp, #20]
1004ca9e:	60d6      	str	r6, [r2, #12]
1004caa0:	7c11      	ldrb	r1, [r2, #16]
1004caa2:	9c02      	ldr	r4, [sp, #8]
1004caa4:	4021      	ands	r1, r4
1004caa6:	0100      	lsls	r0, r0, #4
1004caa8:	1808      	adds	r0, r1, r0
1004caaa:	4619      	mov	r1, r3
1004caac:	7410      	strb	r0, [r2, #16]
1004caae:	4803      	ldr	r0, [pc, #12]	@ (1004cabc <__arm_cp.13_1>)
1004cab0:	6800      	ldr	r0, [r0, #0]
1004cab2:	7201      	strb	r1, [r0, #8]
1004cab4:	b033      	add	sp, #204	@ 0xcc
1004cab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004cab8 <__arm_cp.13_0>:
1004cab8:	200006cc 	.word	0x200006cc

1004cabc <__arm_cp.13_1>:
1004cabc:	200006c8 	.word	0x200006c8

1004cac0 <__arm_cp.13_2>:
1004cac0:	200006d0 	.word	0x200006d0

1004cac4 <__arm_cp.13_3>:
1004cac4:	fffffed4 	.word	0xfffffed4

1004cac8 <__arm_cp.13_4>:
1004cac8:	200006d8 	.word	0x200006d8

1004cacc <LL_sched_set_priority>:
1004cacc:	b510      	push	{r4, lr}
1004cace:	231f      	movs	r3, #31
1004cad0:	401a      	ands	r2, r3
1004cad2:	242c      	movs	r4, #44	@ 0x2c
1004cad4:	4344      	muls	r4, r0
1004cad6:	4803      	ldr	r0, [pc, #12]	@ (1004cae4 <__arm_cp.14_0>)
1004cad8:	6800      	ldr	r0, [r0, #0]
1004cada:	1900      	adds	r0, r0, r4
1004cadc:	7582      	strb	r2, [r0, #22]
1004cade:	4019      	ands	r1, r3
1004cae0:	7541      	strb	r1, [r0, #21]
1004cae2:	bd10      	pop	{r4, pc}

1004cae4 <__arm_cp.14_0>:
1004cae4:	200006d0 	.word	0x200006d0

1004cae8 <LL_sched_reserve_taskslot>:
1004cae8:	b510      	push	{r4, lr}
1004caea:	480e      	ldr	r0, [pc, #56]	@ (1004cb24 <__arm_cp.22_0>)
1004caec:	6801      	ldr	r1, [r0, #0]
1004caee:	3128      	adds	r1, #40	@ 0x28
1004caf0:	2000      	movs	r0, #0
1004caf2:	4a0d      	ldr	r2, [pc, #52]	@ (1004cb28 <__arm_cp.22_1>)
1004caf4:	7ad3      	ldrb	r3, [r2, #11]
1004caf6:	4298      	cmp	r0, r3
1004caf8:	d20b      	bcs.n	1004cb12 <LL_sched_reserve_taskslot+0x2a>
1004cafa:	f3ef 8310 	mrs	r3, PRIMASK
1004cafe:	b672      	cpsid	i
1004cb00:	460b      	mov	r3, r1
1004cb02:	3b16      	subs	r3, #22
1004cb04:	781c      	ldrb	r4, [r3, #0]
1004cb06:	2c00      	cmp	r4, #0
1004cb08:	d005      	beq.n	1004cb16 <LL_sched_reserve_taskslot+0x2e>
1004cb0a:	b662      	cpsie	i
1004cb0c:	312c      	adds	r1, #44	@ 0x2c
1004cb0e:	1c40      	adds	r0, r0, #1
1004cb10:	e7f0      	b.n	1004caf4 <LL_sched_reserve_taskslot+0xc>
1004cb12:	20ff      	movs	r0, #255	@ 0xff
1004cb14:	e004      	b.n	1004cb20 <LL_sched_reserve_taskslot+0x38>
1004cb16:	2200      	movs	r2, #0
1004cb18:	600a      	str	r2, [r1, #0]
1004cb1a:	2101      	movs	r1, #1
1004cb1c:	7019      	strb	r1, [r3, #0]
1004cb1e:	b662      	cpsie	i
1004cb20:	b2c0      	uxtb	r0, r0
1004cb22:	bd10      	pop	{r4, pc}

1004cb24 <__arm_cp.22_0>:
1004cb24:	200006d0 	.word	0x200006d0

1004cb28 <__arm_cp.22_1>:
1004cb28:	200006d8 	.word	0x200006d8

1004cb2c <LL_sched_release_taskslot>:
1004cb2c:	28ff      	cmp	r0, #255	@ 0xff
1004cb2e:	d006      	beq.n	1004cb3e <LL_sched_release_taskslot+0x12>
1004cb30:	212c      	movs	r1, #44	@ 0x2c
1004cb32:	4341      	muls	r1, r0
1004cb34:	4802      	ldr	r0, [pc, #8]	@ (1004cb40 <__arm_cp.23_0>)
1004cb36:	6800      	ldr	r0, [r0, #0]
1004cb38:	1840      	adds	r0, r0, r1
1004cb3a:	2100      	movs	r1, #0
1004cb3c:	8241      	strh	r1, [r0, #18]
1004cb3e:	4770      	bx	lr

1004cb40 <__arm_cp.23_0>:
1004cb40:	200006d0 	.word	0x200006d0

1004cb44 <LL_sched_check_and_call_sched>:
1004cb44:	b510      	push	{r4, lr}
1004cb46:	460c      	mov	r4, r1
1004cb48:	f3ef 8110 	mrs	r1, PRIMASK
1004cb4c:	b672      	cpsid	i
1004cb4e:	f7ff fddd 	bl	1004c70c <LL_sched_is_scheduler_call_pending>
1004cb52:	b662      	cpsie	i
1004cb54:	2800      	cmp	r0, #0
1004cb56:	d000      	beq.n	1004cb5a <LL_sched_check_and_call_sched+0x16>
1004cb58:	bd10      	pop	{r4, pc}
1004cb5a:	4620      	mov	r0, r4
1004cb5c:	f7ff fdf0 	bl	1004c740 <LL_sched_engine>
1004cb60:	bd10      	pop	{r4, pc}
	...

1004cb64 <LL_sched_check_and_wait_sched>:
1004cb64:	b5b0      	push	{r4, r5, r7, lr}
1004cb66:	4604      	mov	r4, r0
1004cb68:	4813      	ldr	r0, [pc, #76]	@ (1004cbb8 <__arm_cp.25_0>)
1004cb6a:	7ac0      	ldrb	r0, [r0, #11]
1004cb6c:	42a0      	cmp	r0, r4
1004cb6e:	d922      	bls.n	1004cbb6 <LL_sched_check_and_wait_sched+0x52>
1004cb70:	f3ef 8010 	mrs	r0, PRIMASK
1004cb74:	b672      	cpsid	i
1004cb76:	25ff      	movs	r5, #255	@ 0xff
1004cb78:	35ec      	adds	r5, #236	@ 0xec
1004cb7a:	f7f5 f89a 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004cb7e:	1940      	adds	r0, r0, r5
1004cb80:	f7ff fdc4 	bl	1004c70c <LL_sched_is_scheduler_call_pending>
1004cb84:	4a0d      	ldr	r2, [pc, #52]	@ (1004cbbc <__arm_cp.25_1>)
1004cb86:	6813      	ldr	r3, [r2, #0]
1004cb88:	2100      	movs	r1, #0
1004cb8a:	7219      	strb	r1, [r3, #8]
1004cb8c:	b662      	cpsie	i
1004cb8e:	2801      	cmp	r0, #1
1004cb90:	d10c      	bne.n	1004cbac <LL_sched_check_and_wait_sched+0x48>
1004cb92:	6810      	ldr	r0, [r2, #0]
1004cb94:	6041      	str	r1, [r0, #4]
1004cb96:	4a0a      	ldr	r2, [pc, #40]	@ (1004cbc0 <__arm_cp.25_2>)
1004cb98:	6843      	ldr	r3, [r0, #4]
1004cb9a:	4293      	cmp	r3, r2
1004cb9c:	d80b      	bhi.n	1004cbb6 <LL_sched_check_and_wait_sched+0x52>
1004cb9e:	7a03      	ldrb	r3, [r0, #8]
1004cba0:	2b00      	cmp	r3, #0
1004cba2:	d107      	bne.n	1004cbb4 <LL_sched_check_and_wait_sched+0x50>
1004cba4:	6843      	ldr	r3, [r0, #4]
1004cba6:	1c5b      	adds	r3, r3, #1
1004cba8:	6043      	str	r3, [r0, #4]
1004cbaa:	e7f5      	b.n	1004cb98 <LL_sched_check_and_wait_sched+0x34>
1004cbac:	4620      	mov	r0, r4
1004cbae:	f7ff fdc7 	bl	1004c740 <LL_sched_engine>
1004cbb2:	bdb0      	pop	{r4, r5, r7, pc}
1004cbb4:	7201      	strb	r1, [r0, #8]
1004cbb6:	bdb0      	pop	{r4, r5, r7, pc}

1004cbb8 <__arm_cp.25_0>:
1004cbb8:	200006d8 	.word	0x200006d8

1004cbbc <__arm_cp.25_1>:
1004cbbc:	200006c8 	.word	0x200006c8

1004cbc0 <__arm_cp.25_2>:
1004cbc0:	0004e1ff 	.word	0x0004e1ff

1004cbc4 <MBM_init_ucfg_weak>:
1004cbc4:	2000      	movs	r0, #0
1004cbc6:	4770      	bx	lr

1004cbc8 <csmem_init>:
1004cbc8:	4801      	ldr	r0, [pc, #4]	@ (1004cbd0 <__arm_cp.0_0>)
1004cbca:	6841      	ldr	r1, [r0, #4]
1004cbcc:	6001      	str	r1, [r0, #0]
1004cbce:	4770      	bx	lr

1004cbd0 <__arm_cp.0_0>:
1004cbd0:	200006d4 	.word	0x200006d4

1004cbd4 <csmem_mem_assign>:
1004cbd4:	b570      	push	{r4, r5, r6, lr}
1004cbd6:	4614      	mov	r4, r2
1004cbd8:	4605      	mov	r5, r0
1004cbda:	434c      	muls	r4, r1
1004cbdc:	6800      	ldr	r0, [r0, #0]
1004cbde:	1e40      	subs	r0, r0, #1
1004cbe0:	2103      	movs	r1, #3
1004cbe2:	4301      	orrs	r1, r0
1004cbe4:	1c4e      	adds	r6, r1, #1
1004cbe6:	2100      	movs	r1, #0
1004cbe8:	4630      	mov	r0, r6
1004cbea:	4622      	mov	r2, r4
1004cbec:	f7f4 ffee 	bl	10041bcc <BLEPLAT_MemSet>
1004cbf0:	1930      	adds	r0, r6, r4
1004cbf2:	6028      	str	r0, [r5, #0]
1004cbf4:	4630      	mov	r0, r6
1004cbf6:	bd70      	pop	{r4, r5, r6, pc}

1004cbf8 <csmem_mem_0_assign>:
1004cbf8:	b580      	push	{r7, lr}
1004cbfa:	460a      	mov	r2, r1
1004cbfc:	4601      	mov	r1, r0
1004cbfe:	4802      	ldr	r0, [pc, #8]	@ (1004cc08 <__arm_cp.3_0>)
1004cc00:	f7ff ffe8 	bl	1004cbd4 <csmem_mem_assign>
1004cc04:	bd80      	pop	{r7, pc}
1004cc06:	46c0      	nop			@ (mov r8, r8)

1004cc08 <__arm_cp.3_0>:
1004cc08:	200006d4 	.word	0x200006d4

1004cc0c <BlueNRG_Stack_Initialize_RAM_check>:
1004cc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004cc0e:	b097      	sub	sp, #92	@ 0x5c
1004cc10:	4ce5      	ldr	r4, [pc, #916]	@ (1004cfa8 <__arm_cp.0_4>)
1004cc12:	2067      	movs	r0, #103	@ 0x67
1004cc14:	43c5      	mvns	r5, r0
1004cc16:	f7fd ffac 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cc1a:	4ee4      	ldr	r6, [pc, #912]	@ (1004cfac <__arm_cp.0_5>)
1004cc1c:	2801      	cmp	r0, #1
1004cc1e:	d002      	beq.n	1004cc26 <BlueNRG_Stack_Initialize_RAM_check+0x1a>
1004cc20:	7af0      	ldrb	r0, [r6, #11]
1004cc22:	2800      	cmp	r0, #0
1004cc24:	d010      	beq.n	1004cc48 <BlueNRG_Stack_Initialize_RAM_check+0x3c>
1004cc26:	4627      	mov	r7, r4
1004cc28:	462c      	mov	r4, r5
1004cc2a:	3438      	adds	r4, #56	@ 0x38
1004cc2c:	f7fd ffa1 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cc30:	7af1      	ldrb	r1, [r6, #11]
1004cc32:	4361      	muls	r1, r4
1004cc34:	4378      	muls	r0, r7
1004cc36:	1838      	adds	r0, r7, r0
1004cc38:	1844      	adds	r4, r0, r1
1004cc3a:	f7fd ff9a 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cc3e:	7af1      	ldrb	r1, [r6, #11]
1004cc40:	4341      	muls	r1, r0
1004cc42:	48db      	ldr	r0, [pc, #876]	@ (1004cfb0 <__arm_cp.0_6>)
1004cc44:	4348      	muls	r0, r1
1004cc46:	1824      	adds	r4, r4, r0
1004cc48:	3416      	adds	r4, #22
1004cc4a:	f7fd ff92 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cc4e:	2801      	cmp	r0, #1
1004cc50:	d10e      	bne.n	1004cc70 <BlueNRG_Stack_Initialize_RAM_check+0x64>
1004cc52:	4628      	mov	r0, r5
1004cc54:	3060      	adds	r0, #96	@ 0x60
1004cc56:	8931      	ldrh	r1, [r6, #8]
1004cc58:	4341      	muls	r1, r0
1004cc5a:	4628      	mov	r0, r5
1004cc5c:	3044      	adds	r0, #68	@ 0x44
1004cc5e:	7ab2      	ldrb	r2, [r6, #10]
1004cc60:	4342      	muls	r2, r0
1004cc62:	1850      	adds	r0, r2, r1
1004cc64:	4629      	mov	r1, r5
1004cc66:	3148      	adds	r1, #72	@ 0x48
1004cc68:	7b32      	ldrb	r2, [r6, #12]
1004cc6a:	434a      	muls	r2, r1
1004cc6c:	1880      	adds	r0, r0, r2
1004cc6e:	e000      	b.n	1004cc72 <BlueNRG_Stack_Initialize_RAM_check+0x66>
1004cc70:	2000      	movs	r0, #0
1004cc72:	9003      	str	r0, [sp, #12]
1004cc74:	89f0      	ldrh	r0, [r6, #14]
1004cc76:	900a      	str	r0, [sp, #40]	@ 0x28
1004cc78:	f7fc fbcb 	bl	10049412 <data_length_extension_csr_ucfg>
1004cc7c:	2801      	cmp	r0, #1
1004cc7e:	d001      	beq.n	1004cc84 <BlueNRG_Stack_Initialize_RAM_check+0x78>
1004cc80:	f7ff fa82 	bl	1004c188 <ext_adv_scan_enabled_ucfg_weak>
1004cc84:	f7fc fbcd 	bl	10049422 <phy_upd_csr_ucfg>
1004cc88:	2801      	cmp	r0, #1
1004cc8a:	9411      	str	r4, [sp, #68]	@ 0x44
1004cc8c:	d109      	bne.n	1004cca2 <BlueNRG_Stack_Initialize_RAM_check+0x96>
1004cc8e:	462c      	mov	r4, r5
1004cc90:	3438      	adds	r4, #56	@ 0x38
1004cc92:	f7fd ff6e 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cc96:	4360      	muls	r0, r4
1004cc98:	7af1      	ldrb	r1, [r6, #11]
1004cc9a:	4341      	muls	r1, r0
1004cc9c:	3908      	subs	r1, #8
1004cc9e:	9109      	str	r1, [sp, #36]	@ 0x24
1004cca0:	e001      	b.n	1004cca6 <BlueNRG_Stack_Initialize_RAM_check+0x9a>
1004cca2:	2000      	movs	r0, #0
1004cca4:	9009      	str	r0, [sp, #36]	@ 0x24
1004cca6:	48f2      	ldr	r0, [pc, #968]	@ (1004d070 <__arm_cp.0_3>)
1004cca8:	304c      	adds	r0, #76	@ 0x4c
1004ccaa:	9013      	str	r0, [sp, #76]	@ 0x4c
1004ccac:	f7ff fa6c 	bl	1004c188 <ext_adv_scan_enabled_ucfg_weak>
1004ccb0:	2801      	cmp	r0, #1
1004ccb2:	d015      	beq.n	1004cce0 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004ccb4:	f7fc fbad 	bl	10049412 <data_length_extension_csr_ucfg>
1004ccb8:	2801      	cmp	r0, #1
1004ccba:	d011      	beq.n	1004cce0 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004ccbc:	2029      	movs	r0, #41	@ 0x29
1004ccbe:	5c30      	ldrb	r0, [r6, r0]
1004ccc0:	2800      	cmp	r0, #0
1004ccc2:	d10d      	bne.n	1004cce0 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004ccc4:	2025      	movs	r0, #37	@ 0x25
1004ccc6:	5c30      	ldrb	r0, [r6, r0]
1004ccc8:	2800      	cmp	r0, #0
1004ccca:	d109      	bne.n	1004cce0 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004cccc:	2026      	movs	r0, #38	@ 0x26
1004ccce:	5c30      	ldrb	r0, [r6, r0]
1004ccd0:	2800      	cmp	r0, #0
1004ccd2:	d002      	beq.n	1004ccda <BlueNRG_Stack_Initialize_RAM_check+0xce>
1004ccd4:	48e6      	ldr	r0, [pc, #920]	@ (1004d070 <__arm_cp.0_3>)
1004ccd6:	304c      	adds	r0, #76	@ 0x4c
1004ccd8:	e001      	b.n	1004ccde <BlueNRG_Stack_Initialize_RAM_check+0xd2>
1004ccda:	4628      	mov	r0, r5
1004ccdc:	3024      	adds	r0, #36	@ 0x24
1004ccde:	9013      	str	r0, [sp, #76]	@ 0x4c
1004cce0:	48e3      	ldr	r0, [pc, #908]	@ (1004d070 <__arm_cp.0_3>)
1004cce2:	306c      	adds	r0, #108	@ 0x6c
1004cce4:	9012      	str	r0, [sp, #72]	@ 0x48
1004cce6:	f7ff fa4f 	bl	1004c188 <ext_adv_scan_enabled_ucfg_weak>
1004ccea:	2801      	cmp	r0, #1
1004ccec:	d015      	beq.n	1004cd1a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004ccee:	f7fc fb90 	bl	10049412 <data_length_extension_csr_ucfg>
1004ccf2:	2801      	cmp	r0, #1
1004ccf4:	d011      	beq.n	1004cd1a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004ccf6:	2029      	movs	r0, #41	@ 0x29
1004ccf8:	5c30      	ldrb	r0, [r6, r0]
1004ccfa:	2800      	cmp	r0, #0
1004ccfc:	d10d      	bne.n	1004cd1a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004ccfe:	2025      	movs	r0, #37	@ 0x25
1004cd00:	5c30      	ldrb	r0, [r6, r0]
1004cd02:	2800      	cmp	r0, #0
1004cd04:	d109      	bne.n	1004cd1a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004cd06:	2026      	movs	r0, #38	@ 0x26
1004cd08:	5c30      	ldrb	r0, [r6, r0]
1004cd0a:	2800      	cmp	r0, #0
1004cd0c:	d002      	beq.n	1004cd14 <BlueNRG_Stack_Initialize_RAM_check+0x108>
1004cd0e:	48d8      	ldr	r0, [pc, #864]	@ (1004d070 <__arm_cp.0_3>)
1004cd10:	306c      	adds	r0, #108	@ 0x6c
1004cd12:	e001      	b.n	1004cd18 <BlueNRG_Stack_Initialize_RAM_check+0x10c>
1004cd14:	4628      	mov	r0, r5
1004cd16:	303c      	adds	r0, #60	@ 0x3c
1004cd18:	9012      	str	r0, [sp, #72]	@ 0x48
1004cd1a:	f7ff fa35 	bl	1004c188 <ext_adv_scan_enabled_ucfg_weak>
1004cd1e:	9010      	str	r0, [sp, #64]	@ 0x40
1004cd20:	7eb0      	ldrb	r0, [r6, #26]
1004cd22:	9000      	str	r0, [sp, #0]
1004cd24:	7ff0      	ldrb	r0, [r6, #31]
1004cd26:	900f      	str	r0, [sp, #60]	@ 0x3c
1004cd28:	f7fd ff23 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cd2c:	9007      	str	r0, [sp, #28]
1004cd2e:	7ff0      	ldrb	r0, [r6, #31]
1004cd30:	9001      	str	r0, [sp, #4]
1004cd32:	f7fe f93f 	bl	1004afb4 <llc_priv_controller_privacy_csr_ucfg_weak>
1004cd36:	9008      	str	r0, [sp, #32]
1004cd38:	7ff0      	ldrb	r0, [r6, #31]
1004cd3a:	9002      	str	r0, [sp, #8]
1004cd3c:	f000 fa09 	bl	1004d152 <secure_connections_csr_ucfg_weak>
1004cd40:	2700      	movs	r7, #0
1004cd42:	f7fd ff14 	bl	1004ab6e <scan_csr_ucfg_weak>
1004cd46:	2801      	cmp	r0, #1
1004cd48:	4638      	mov	r0, r7
1004cd4a:	9515      	str	r5, [sp, #84]	@ 0x54
1004cd4c:	9716      	str	r7, [sp, #88]	@ 0x58
1004cd4e:	d14f      	bne.n	1004cdf0 <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
1004cd50:	7f70      	ldrb	r0, [r6, #29]
1004cd52:	280a      	cmp	r0, #10
1004cd54:	d300      	bcc.n	1004cd58 <BlueNRG_Stack_Initialize_RAM_check+0x14c>
1004cd56:	200a      	movs	r0, #10
1004cd58:	462c      	mov	r4, r5
1004cd5a:	3438      	adds	r4, #56	@ 0x38
1004cd5c:	4344      	muls	r4, r0
1004cd5e:	3cc0      	subs	r4, #192	@ 0xc0
1004cd60:	2500      	movs	r5, #0
1004cd62:	f7fe f91f 	bl	1004afa4 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004cd66:	2801      	cmp	r0, #1
1004cd68:	462f      	mov	r7, r5
1004cd6a:	d120      	bne.n	1004cdae <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
1004cd6c:	f7fd ff01 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cd70:	2801      	cmp	r0, #1
1004cd72:	950e      	str	r5, [sp, #56]	@ 0x38
1004cd74:	d003      	beq.n	1004cd7e <BlueNRG_Stack_Initialize_RAM_check+0x172>
1004cd76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004cd78:	4618      	mov	r0, r3
1004cd7a:	3054      	adds	r0, #84	@ 0x54
1004cd7c:	e002      	b.n	1004cd84 <BlueNRG_Stack_Initialize_RAM_check+0x178>
1004cd7e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004cd80:	4618      	mov	r0, r3
1004cd82:	3048      	adds	r0, #72	@ 0x48
1004cd84:	49ba      	ldr	r1, [pc, #744]	@ (1004d070 <__arm_cp.0_3>)
1004cd86:	31e0      	adds	r1, #224	@ 0xe0
1004cd88:	7fb2      	ldrb	r2, [r6, #30]
1004cd8a:	434a      	muls	r2, r1
1004cd8c:	1810      	adds	r0, r2, r0
1004cd8e:	4619      	mov	r1, r3
1004cd90:	3160      	adds	r1, #96	@ 0x60
1004cd92:	7ff2      	ldrb	r2, [r6, #31]
1004cd94:	4091      	lsls	r1, r2
1004cd96:	461d      	mov	r5, r3
1004cd98:	1847      	adds	r7, r0, r1
1004cd9a:	f7fd feea 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cd9e:	2801      	cmp	r0, #1
1004cda0:	d104      	bne.n	1004cdac <BlueNRG_Stack_Initialize_RAM_check+0x1a0>
1004cda2:	4628      	mov	r0, r5
1004cda4:	3050      	adds	r0, #80	@ 0x50
1004cda6:	7af1      	ldrb	r1, [r6, #11]
1004cda8:	4341      	muls	r1, r0
1004cdaa:	187f      	adds	r7, r7, r1
1004cdac:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1004cdae:	19e0      	adds	r0, r4, r7
1004cdb0:	9014      	str	r0, [sp, #80]	@ 0x50
1004cdb2:	f7fe f8f9 	bl	1004afa8 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004cdb6:	4607      	mov	r7, r0
1004cdb8:	f7fe f8f4 	bl	1004afa4 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004cdbc:	4604      	mov	r4, r0
1004cdbe:	403c      	ands	r4, r7
1004cdc0:	f7fd fed7 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cdc4:	4020      	ands	r0, r4
1004cdc6:	2801      	cmp	r0, #1
1004cdc8:	d108      	bne.n	1004cddc <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
1004cdca:	7ef0      	ldrb	r0, [r6, #27]
1004cdcc:	1e40      	subs	r0, r0, #1
1004cdce:	2103      	movs	r1, #3
1004cdd0:	4301      	orrs	r1, r0
1004cdd2:	7fb0      	ldrb	r0, [r6, #30]
1004cdd4:	22b0      	movs	r2, #176	@ 0xb0
1004cdd6:	4342      	muls	r2, r0
1004cdd8:	43d0      	mvns	r0, r2
1004cdda:	1a45      	subs	r5, r0, r1
1004cddc:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004cdde:	1944      	adds	r4, r0, r5
1004cde0:	f7ff f9d2 	bl	1004c188 <ext_adv_scan_enabled_ucfg_weak>
1004cde4:	4360      	muls	r0, r4
1004cde6:	49a2      	ldr	r1, [pc, #648]	@ (1004d070 <__arm_cp.0_3>)
1004cde8:	1808      	adds	r0, r1, r0
1004cdea:	302c      	adds	r0, #44	@ 0x2c
1004cdec:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004cdee:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004cdf0:	9006      	str	r0, [sp, #24]
1004cdf2:	f7fd febe 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cdf6:	2801      	cmp	r0, #1
1004cdf8:	4639      	mov	r1, r7
1004cdfa:	d109      	bne.n	1004ce10 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1004cdfc:	f7fd febb 	bl	1004ab76 <l2c_cos_csr_ucfg_weak>
1004ce00:	2801      	cmp	r0, #1
1004ce02:	4639      	mov	r1, r7
1004ce04:	d104      	bne.n	1004ce10 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1004ce06:	2022      	movs	r0, #34	@ 0x22
1004ce08:	5c30      	ldrb	r0, [r6, r0]
1004ce0a:	4629      	mov	r1, r5
1004ce0c:	3114      	adds	r1, #20
1004ce0e:	4341      	muls	r1, r0
1004ce10:	9105      	str	r1, [sp, #20]
1004ce12:	f7fe f8c7 	bl	1004afa4 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004ce16:	2801      	cmp	r0, #1
1004ce18:	4638      	mov	r0, r7
1004ce1a:	d121      	bne.n	1004ce60 <BlueNRG_Stack_Initialize_RAM_check+0x254>
1004ce1c:	4894      	ldr	r0, [pc, #592]	@ (1004d070 <__arm_cp.0_3>)
1004ce1e:	30d4      	adds	r0, #212	@ 0xd4
1004ce20:	7eb1      	ldrb	r1, [r6, #26]
1004ce22:	4341      	muls	r1, r0
1004ce24:	4628      	mov	r0, r5
1004ce26:	3048      	adds	r0, #72	@ 0x48
1004ce28:	7af2      	ldrb	r2, [r6, #11]
1004ce2a:	4342      	muls	r2, r0
1004ce2c:	1854      	adds	r4, r2, r1
1004ce2e:	2700      	movs	r7, #0
1004ce30:	f7fe f8ba 	bl	1004afa8 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004ce34:	2801      	cmp	r0, #1
1004ce36:	d110      	bne.n	1004ce5a <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1004ce38:	f7fd fe9b 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004ce3c:	2801      	cmp	r0, #1
1004ce3e:	d10c      	bne.n	1004ce5a <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1004ce40:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1004ce42:	4610      	mov	r0, r2
1004ce44:	3058      	adds	r0, #88	@ 0x58
1004ce46:	7f31      	ldrb	r1, [r6, #28]
1004ce48:	4341      	muls	r1, r0
1004ce4a:	4610      	mov	r0, r2
1004ce4c:	3060      	adds	r0, #96	@ 0x60
1004ce4e:	7ef2      	ldrb	r2, [r6, #27]
1004ce50:	4342      	muls	r2, r0
1004ce52:	1850      	adds	r0, r2, r1
1004ce54:	3884      	subs	r0, #132	@ 0x84
1004ce56:	7eb7      	ldrb	r7, [r6, #26]
1004ce58:	4347      	muls	r7, r0
1004ce5a:	19e0      	adds	r0, r4, r7
1004ce5c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004ce5e:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004ce60:	900e      	str	r0, [sp, #56]	@ 0x38
1004ce62:	f7fd fe7a 	bl	1004ab5a <cte_csr_ucfg_weak>
1004ce66:	2801      	cmp	r0, #1
1004ce68:	4638      	mov	r0, r7
1004ce6a:	d133      	bne.n	1004ced4 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
1004ce6c:	f7fd fe81 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004ce70:	2801      	cmp	r0, #1
1004ce72:	d002      	beq.n	1004ce7a <BlueNRG_Stack_Initialize_RAM_check+0x26e>
1004ce74:	462f      	mov	r7, r5
1004ce76:	375c      	adds	r7, #92	@ 0x5c
1004ce78:	e004      	b.n	1004ce84 <BlueNRG_Stack_Initialize_RAM_check+0x278>
1004ce7a:	4628      	mov	r0, r5
1004ce7c:	3060      	adds	r0, #96	@ 0x60
1004ce7e:	7af7      	ldrb	r7, [r6, #11]
1004ce80:	4347      	muls	r7, r0
1004ce82:	3f0c      	subs	r7, #12
1004ce84:	2523      	movs	r5, #35	@ 0x23
1004ce86:	5d70      	ldrb	r0, [r6, r5]
1004ce88:	2400      	movs	r4, #0
1004ce8a:	2800      	cmp	r0, #0
1004ce8c:	4620      	mov	r0, r4
1004ce8e:	d005      	beq.n	1004ce9c <BlueNRG_Stack_Initialize_RAM_check+0x290>
1004ce90:	f7fd fe6f 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004ce94:	5d70      	ldrb	r0, [r6, r5]
1004ce96:	4240      	negs	r0, r0
1004ce98:	2103      	movs	r1, #3
1004ce9a:	4388      	bics	r0, r1
1004ce9c:	19c0      	adds	r0, r0, r7
1004ce9e:	2724      	movs	r7, #36	@ 0x24
1004cea0:	5df1      	ldrb	r1, [r6, r7]
1004cea2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1004cea4:	3264      	adds	r2, #100	@ 0x64
1004cea6:	434a      	muls	r2, r1
1004cea8:	1885      	adds	r5, r0, r2
1004ceaa:	f7fd fe60 	bl	1004ab6e <scan_csr_ucfg_weak>
1004ceae:	2801      	cmp	r0, #1
1004ceb0:	d10d      	bne.n	1004cece <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004ceb2:	f7ff f969 	bl	1004c188 <ext_adv_scan_enabled_ucfg_weak>
1004ceb6:	2801      	cmp	r0, #1
1004ceb8:	d109      	bne.n	1004cece <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004ceba:	f7fe f873 	bl	1004afa4 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004cebe:	2801      	cmp	r0, #1
1004cec0:	d105      	bne.n	1004cece <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004cec2:	5df4      	ldrb	r4, [r6, r7]
1004cec4:	2c00      	cmp	r4, #0
1004cec6:	9815      	ldr	r0, [sp, #84]	@ 0x54
1004cec8:	d001      	beq.n	1004cece <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004ceca:	4604      	mov	r4, r0
1004cecc:	3450      	adds	r4, #80	@ 0x50
1004cece:	1928      	adds	r0, r5, r4
1004ced0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004ced2:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004ced4:	900d      	str	r0, [sp, #52]	@ 0x34
1004ced6:	f7fd fe4c 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004ceda:	2801      	cmp	r0, #1
1004cedc:	4639      	mov	r1, r7
1004cede:	d109      	bne.n	1004cef4 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1004cee0:	f7fd fe41 	bl	1004ab66 <pcl_csr_ucfg_weak>
1004cee4:	2801      	cmp	r0, #1
1004cee6:	4639      	mov	r1, r7
1004cee8:	d104      	bne.n	1004cef4 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1004ceea:	4628      	mov	r0, r5
1004ceec:	3048      	adds	r0, #72	@ 0x48
1004ceee:	7af1      	ldrb	r1, [r6, #11]
1004cef0:	4341      	muls	r1, r0
1004cef2:	3914      	subs	r1, #20
1004cef4:	910c      	str	r1, [sp, #48]	@ 0x30
1004cef6:	f7fd fe3c 	bl	1004ab72 <conn_supp_csr_ucfg_weak>
1004cefa:	2801      	cmp	r0, #1
1004cefc:	463a      	mov	r2, r7
1004cefe:	d108      	bne.n	1004cf12 <BlueNRG_Stack_Initialize_RAM_check+0x306>
1004cf00:	f7fd fdb2 	bl	1004aa68 <chc_csr_ucfg_weak>
1004cf04:	2801      	cmp	r0, #1
1004cf06:	463a      	mov	r2, r7
1004cf08:	d103      	bne.n	1004cf12 <BlueNRG_Stack_Initialize_RAM_check+0x306>
1004cf0a:	4628      	mov	r0, r5
1004cf0c:	304c      	adds	r0, #76	@ 0x4c
1004cf0e:	7af2      	ldrb	r2, [r6, #11]
1004cf10:	4342      	muls	r2, r0
1004cf12:	2026      	movs	r0, #38	@ 0x26
1004cf14:	5c31      	ldrb	r1, [r6, r0]
1004cf16:	2025      	movs	r0, #37	@ 0x25
1004cf18:	5c34      	ldrb	r4, [r6, r0]
1004cf1a:	1863      	adds	r3, r4, r1
1004cf1c:	2029      	movs	r0, #41	@ 0x29
1004cf1e:	5c30      	ldrb	r0, [r6, r0]
1004cf20:	9304      	str	r3, [sp, #16]
1004cf22:	2b00      	cmp	r3, #0
1004cf24:	9014      	str	r0, [sp, #80]	@ 0x50
1004cf26:	d010      	beq.n	1004cf4a <BlueNRG_Stack_Initialize_RAM_check+0x33e>
1004cf28:	2028      	movs	r0, #40	@ 0x28
1004cf2a:	5c33      	ldrb	r3, [r6, r0]
1004cf2c:	4628      	mov	r0, r5
1004cf2e:	3060      	adds	r0, #96	@ 0x60
1004cf30:	4358      	muls	r0, r3
1004cf32:	38f8      	subs	r0, #248	@ 0xf8
1004cf34:	4348      	muls	r0, r1
1004cf36:	2327      	movs	r3, #39	@ 0x27
1004cf38:	5cf3      	ldrb	r3, [r6, r3]
1004cf3a:	3554      	adds	r5, #84	@ 0x54
1004cf3c:	435d      	muls	r5, r3
1004cf3e:	4b4c      	ldr	r3, [pc, #304]	@ (1004d070 <__arm_cp.0_3>)
1004cf40:	195b      	adds	r3, r3, r5
1004cf42:	3348      	adds	r3, #72	@ 0x48
1004cf44:	4363      	muls	r3, r4
1004cf46:	181f      	adds	r7, r3, r0
1004cf48:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004cf4a:	2800      	cmp	r0, #0
1004cf4c:	9716      	str	r7, [sp, #88]	@ 0x58
1004cf4e:	920b      	str	r2, [sp, #44]	@ 0x2c
1004cf50:	d00d      	beq.n	1004cf6e <BlueNRG_Stack_Initialize_RAM_check+0x362>
1004cf52:	4602      	mov	r2, r0
1004cf54:	202a      	movs	r0, #42	@ 0x2a
1004cf56:	5c30      	ldrb	r0, [r6, r0]
1004cf58:	4d45      	ldr	r5, [pc, #276]	@ (1004d070 <__arm_cp.0_3>)
1004cf5a:	462b      	mov	r3, r5
1004cf5c:	33b0      	adds	r3, #176	@ 0xb0
1004cf5e:	4343      	muls	r3, r0
1004cf60:	4637      	mov	r7, r6
1004cf62:	462e      	mov	r6, r5
1004cf64:	36c8      	adds	r6, #200	@ 0xc8
1004cf66:	4356      	muls	r6, r2
1004cf68:	18f3      	adds	r3, r6, r3
1004cf6a:	3b48      	subs	r3, #72	@ 0x48
1004cf6c:	e003      	b.n	1004cf76 <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1004cf6e:	202a      	movs	r0, #42	@ 0x2a
1004cf70:	5c30      	ldrb	r0, [r6, r0]
1004cf72:	2300      	movs	r3, #0
1004cf74:	4637      	mov	r7, r6
1004cf76:	2628      	movs	r6, #40	@ 0x28
1004cf78:	5dbe      	ldrb	r6, [r7, r6]
1004cf7a:	4371      	muls	r1, r6
1004cf7c:	1809      	adds	r1, r1, r0
1004cf7e:	2627      	movs	r6, #39	@ 0x27
1004cf80:	463d      	mov	r5, r7
1004cf82:	5dbe      	ldrb	r6, [r7, r6]
1004cf84:	4374      	muls	r4, r6
1004cf86:	1824      	adds	r4, r4, r0
1004cf88:	1860      	adds	r0, r4, r1
1004cf8a:	d013      	beq.n	1004cfb4 <__arm_cp.0_6+0x4>
1004cf8c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1004cf8e:	463e      	mov	r6, r7
1004cf90:	364c      	adds	r6, #76	@ 0x4c
1004cf92:	4366      	muls	r6, r4
1004cf94:	463c      	mov	r4, r7
1004cf96:	3434      	adds	r4, #52	@ 0x34
1004cf98:	434c      	muls	r4, r1
1004cf9a:	19a1      	adds	r1, r4, r6
1004cf9c:	463c      	mov	r4, r7
1004cf9e:	345c      	adds	r4, #92	@ 0x5c
1004cfa0:	4344      	muls	r4, r0
1004cfa2:	190c      	adds	r4, r1, r4
1004cfa4:	3c14      	subs	r4, #20
1004cfa6:	e007      	b.n	1004cfb8 <__arm_cp.0_6+0x8>

1004cfa8 <__arm_cp.0_4>:
1004cfa8:	fffffc18 	.word	0xfffffc18

1004cfac <__arm_cp.0_5>:
1004cfac:	200006d8 	.word	0x200006d8

1004cfb0 <__arm_cp.0_6>:
1004cfb0:	fffffd70 	.word	0xfffffd70
1004cfb4:	2400      	movs	r4, #0
1004cfb6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1004cfb8:	9903      	ldr	r1, [sp, #12]
1004cfba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1004cfbc:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004cfbe:	1808      	adds	r0, r1, r0
1004cfc0:	4639      	mov	r1, r7
1004cfc2:	3144      	adds	r1, #68	@ 0x44
1004cfc4:	4371      	muls	r1, r6
1004cfc6:	1840      	adds	r0, r0, r1
1004cfc8:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004cfca:	1840      	adds	r0, r0, r1
1004cfcc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004cfce:	1840      	adds	r0, r0, r1
1004cfd0:	9912      	ldr	r1, [sp, #72]	@ 0x48
1004cfd2:	1841      	adds	r1, r0, r1
1004cfd4:	4638      	mov	r0, r7
1004cfd6:	3060      	adds	r0, #96	@ 0x60
1004cfd8:	4606      	mov	r6, r0
1004cfda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1004cfdc:	4096      	lsls	r6, r2
1004cfde:	1989      	adds	r1, r1, r6
1004cfe0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1004cfe2:	2a01      	cmp	r2, #1
1004cfe4:	d106      	bne.n	1004cff4 <__arm_cp.0_6+0x44>
1004cfe6:	4e22      	ldr	r6, [pc, #136]	@ (1004d070 <__arm_cp.0_3>)
1004cfe8:	9a00      	ldr	r2, [sp, #0]
1004cfea:	4356      	muls	r6, r2
1004cfec:	1871      	adds	r1, r6, r1
1004cfee:	2645      	movs	r6, #69	@ 0x45
1004cff0:	00b6      	lsls	r6, r6, #2
1004cff2:	1989      	adds	r1, r1, r6
1004cff4:	462e      	mov	r6, r5
1004cff6:	9d07      	ldr	r5, [sp, #28]
1004cff8:	9a05      	ldr	r2, [sp, #20]
1004cffa:	2d01      	cmp	r5, #1
1004cffc:	d102      	bne.n	1004d004 <__arm_cp.0_6+0x54>
1004cffe:	9d01      	ldr	r5, [sp, #4]
1004d000:	40a8      	lsls	r0, r5
1004d002:	1809      	adds	r1, r1, r0
1004d004:	9808      	ldr	r0, [sp, #32]
1004d006:	2801      	cmp	r0, #1
1004d008:	d105      	bne.n	1004d016 <__arm_cp.0_6+0x66>
1004d00a:	4638      	mov	r0, r7
1004d00c:	3018      	adds	r0, #24
1004d00e:	9d02      	ldr	r5, [sp, #8]
1004d010:	40a8      	lsls	r0, r5
1004d012:	1841      	adds	r1, r0, r1
1004d014:	3970      	subs	r1, #112	@ 0x70
1004d016:	9806      	ldr	r0, [sp, #24]
1004d018:	9d04      	ldr	r5, [sp, #16]
1004d01a:	1808      	adds	r0, r1, r0
1004d01c:	1880      	adds	r0, r0, r2
1004d01e:	990e      	ldr	r1, [sp, #56]	@ 0x38
1004d020:	1840      	adds	r0, r0, r1
1004d022:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004d024:	1840      	adds	r0, r0, r1
1004d026:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004d028:	1840      	adds	r0, r0, r1
1004d02a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004d02c:	1840      	adds	r0, r0, r1
1004d02e:	9914      	ldr	r1, [sp, #80]	@ 0x50
1004d030:	42cd      	cmn	r5, r1
1004d032:	d001      	beq.n	1004d038 <__arm_cp.0_6+0x88>
1004d034:	1838      	adds	r0, r7, r0
1004d036:	3058      	adds	r0, #88	@ 0x58
1004d038:	9916      	ldr	r1, [sp, #88]	@ 0x58
1004d03a:	1840      	adds	r0, r0, r1
1004d03c:	18c0      	adds	r0, r0, r3
1004d03e:	1904      	adds	r4, r0, r4
1004d040:	f7fc fea4 	bl	10049d8c <log_csr_ucfg_weak>
1004d044:	2801      	cmp	r0, #1
1004d046:	d100      	bne.n	1004d04a <__arm_cp.0_6+0x9a>
1004d048:	19e4      	adds	r4, r4, r7
1004d04a:	6870      	ldr	r0, [r6, #4]
1004d04c:	1820      	adds	r0, r4, r0
1004d04e:	2103      	movs	r1, #3
1004d050:	43c9      	mvns	r1, r1
1004d052:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
1004d054:	1cd2      	adds	r2, r2, #3
1004d056:	400a      	ands	r2, r1
1004d058:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1004d05a:	1cdb      	adds	r3, r3, #3
1004d05c:	400b      	ands	r3, r1
1004d05e:	189a      	adds	r2, r3, r2
1004d060:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1004d062:	1cdb      	adds	r3, r3, #3
1004d064:	400b      	ands	r3, r1
1004d066:	18d1      	adds	r1, r2, r3
1004d068:	1a40      	subs	r0, r0, r1
1004d06a:	b017      	add	sp, #92	@ 0x5c
1004d06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d06e:	46c0      	nop			@ (mov r8, r8)

1004d070 <__arm_cp.0_3>:
1004d070:	fffffe90 	.word	0xfffffe90

1004d074 <smp_crt_diversify>:
1004d074:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1004d076:	780d      	ldrb	r5, [r1, #0]
1004d078:	466c      	mov	r4, sp
1004d07a:	7025      	strb	r5, [r4, #0]
1004d07c:	7849      	ldrb	r1, [r1, #1]
1004d07e:	7061      	strb	r1, [r4, #1]
1004d080:	7811      	ldrb	r1, [r2, #0]
1004d082:	70a1      	strb	r1, [r4, #2]
1004d084:	7851      	ldrb	r1, [r2, #1]
1004d086:	70e1      	strb	r1, [r4, #3]
1004d088:	2100      	movs	r1, #0
1004d08a:	9103      	str	r1, [sp, #12]
1004d08c:	9102      	str	r1, [sp, #8]
1004d08e:	9101      	str	r1, [sp, #4]
1004d090:	4621      	mov	r1, r4
1004d092:	461a      	mov	r2, r3
1004d094:	f000 fb84 	bl	1004d7a0 <hci_le_encrypt>
1004d098:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

1004d09c <smp_sap_crt_generate_local_irk>:
1004d09c:	b5e0      	push	{r5, r6, r7, lr}
1004d09e:	4603      	mov	r3, r0
1004d0a0:	a901      	add	r1, sp, #4
1004d0a2:	2001      	movs	r0, #1
1004d0a4:	8008      	strh	r0, [r1, #0]
1004d0a6:	466a      	mov	r2, sp
1004d0a8:	2000      	movs	r0, #0
1004d0aa:	8010      	strh	r0, [r2, #0]
1004d0ac:	4802      	ldr	r0, [pc, #8]	@ (1004d0b8 <__arm_cp.2_0>)
1004d0ae:	6800      	ldr	r0, [r0, #0]
1004d0b0:	3018      	adds	r0, #24
1004d0b2:	f7ff ffdf 	bl	1004d074 <smp_crt_diversify>
1004d0b6:	bd8c      	pop	{r2, r3, r7, pc}

1004d0b8 <__arm_cp.2_0>:
1004d0b8:	200006b8 	.word	0x200006b8

1004d0bc <smp_sap_crt_generate_rpa>:
1004d0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d0be:	b087      	sub	sp, #28
1004d0c0:	9000      	str	r0, [sp, #0]
1004d0c2:	ae03      	add	r6, sp, #12
1004d0c4:	4630      	mov	r0, r6
1004d0c6:	f7ff ffe9 	bl	1004d09c <smp_sap_crt_generate_local_irk>
1004d0ca:	2700      	movs	r7, #0
1004d0cc:	4638      	mov	r0, r7
1004d0ce:	f000 fa42 	bl	1004d556 <Hal_Get_Random_Number>
1004d0d2:	0a01      	lsrs	r1, r0, #8
1004d0d4:	ad02      	add	r5, sp, #8
1004d0d6:	7069      	strb	r1, [r5, #1]
1004d0d8:	243f      	movs	r4, #63	@ 0x3f
1004d0da:	4004      	ands	r4, r0
1004d0dc:	3440      	adds	r4, #64	@ 0x40
1004d0de:	4638      	mov	r0, r7
1004d0e0:	f000 fa39 	bl	1004d556 <Hal_Get_Random_Number>
1004d0e4:	70ac      	strb	r4, [r5, #2]
1004d0e6:	7028      	strb	r0, [r5, #0]
1004d0e8:	af01      	add	r7, sp, #4
1004d0ea:	4630      	mov	r0, r6
1004d0ec:	4629      	mov	r1, r5
1004d0ee:	463a      	mov	r2, r7
1004d0f0:	f000 f80e 	bl	1004d110 <smp_crt_calculate_hash>
1004d0f4:	2603      	movs	r6, #3
1004d0f6:	9c00      	ldr	r4, [sp, #0]
1004d0f8:	4620      	mov	r0, r4
1004d0fa:	4639      	mov	r1, r7
1004d0fc:	4632      	mov	r2, r6
1004d0fe:	f7f4 fd55 	bl	10041bac <BLEPLAT_MemCpy>
1004d102:	1ce0      	adds	r0, r4, #3
1004d104:	4629      	mov	r1, r5
1004d106:	4632      	mov	r2, r6
1004d108:	f7f4 fd50 	bl	10041bac <BLEPLAT_MemCpy>
1004d10c:	b007      	add	sp, #28
1004d10e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004d110 <smp_crt_calculate_hash>:
1004d110:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d112:	b089      	sub	sp, #36	@ 0x24
1004d114:	9200      	str	r2, [sp, #0]
1004d116:	460f      	mov	r7, r1
1004d118:	4605      	mov	r5, r0
1004d11a:	ae05      	add	r6, sp, #20
1004d11c:	2100      	movs	r1, #0
1004d11e:	2210      	movs	r2, #16
1004d120:	4630      	mov	r0, r6
1004d122:	f7f4 fd53 	bl	10041bcc <BLEPLAT_MemSet>
1004d126:	2403      	movs	r4, #3
1004d128:	4630      	mov	r0, r6
1004d12a:	4639      	mov	r1, r7
1004d12c:	4622      	mov	r2, r4
1004d12e:	f7f4 fd3d 	bl	10041bac <BLEPLAT_MemCpy>
1004d132:	af01      	add	r7, sp, #4
1004d134:	4628      	mov	r0, r5
1004d136:	4631      	mov	r1, r6
1004d138:	463a      	mov	r2, r7
1004d13a:	f000 fb31 	bl	1004d7a0 <hci_le_encrypt>
1004d13e:	9800      	ldr	r0, [sp, #0]
1004d140:	4639      	mov	r1, r7
1004d142:	4622      	mov	r2, r4
1004d144:	f7f4 fd32 	bl	10041bac <BLEPLAT_MemCpy>
1004d148:	b009      	add	sp, #36	@ 0x24
1004d14a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004d14c <smp_debug_trudy__set_config_ucfg_weak>:
1004d14c:	200c      	movs	r0, #12
1004d14e:	4770      	bx	lr

1004d150 <smp_init_ucfg_weak>:
1004d150:	4770      	bx	lr

1004d152 <secure_connections_csr_ucfg_weak>:
1004d152:	2000      	movs	r0, #0
1004d154:	4770      	bx	lr

1004d156 <smp_sap_scp_force_debug_key_usage_ucfg_weak>:
1004d156:	200c      	movs	r0, #12
1004d158:	4770      	bx	lr

1004d15a <nvm_dev_id_data_get_record>:
1004d15a:	b5e0      	push	{r5, r6, r7, lr}
1004d15c:	4603      	mov	r3, r0
1004d15e:	2026      	movs	r0, #38	@ 0x26
1004d160:	9000      	str	r0, [sp, #0]
1004d162:	2102      	movs	r1, #2
1004d164:	2000      	movs	r0, #0
1004d166:	4602      	mov	r2, r0
1004d168:	f7f4 fca8 	bl	10041abc <BLEPLAT_NvmGet>
1004d16c:	2800      	cmp	r0, #0
1004d16e:	d000      	beq.n	1004d172 <nvm_dev_id_data_get_record+0x18>
1004d170:	2081      	movs	r0, #129	@ 0x81
1004d172:	bd8c      	pop	{r2, r3, r7, pc}

1004d174 <nvm_dev_id_data_add_record>:
1004d174:	b5e0      	push	{r5, r6, r7, lr}
1004d176:	4601      	mov	r1, r0
1004d178:	2300      	movs	r3, #0
1004d17a:	9300      	str	r3, [sp, #0]
1004d17c:	2002      	movs	r0, #2
1004d17e:	2226      	movs	r2, #38	@ 0x26
1004d180:	f7f4 fc4e 	bl	10041a20 <BLEPLAT_NvmAdd>
1004d184:	2800      	cmp	r0, #0
1004d186:	d000      	beq.n	1004d18a <nvm_dev_id_data_add_record+0x16>
1004d188:	2081      	movs	r0, #129	@ 0x81
1004d18a:	bd8c      	pop	{r2, r3, r7, pc}

1004d18c <tsk_init>:
1004d18c:	4803      	ldr	r0, [pc, #12]	@ (1004d19c <__arm_cp.0_0>)
1004d18e:	6800      	ldr	r0, [r0, #0]
1004d190:	2100      	movs	r1, #0
1004d192:	6081      	str	r1, [r0, #8]
1004d194:	60c1      	str	r1, [r0, #12]
1004d196:	6101      	str	r1, [r0, #16]
1004d198:	6001      	str	r1, [r0, #0]
1004d19a:	4770      	bx	lr

1004d19c <__arm_cp.0_0>:
1004d19c:	2000070c 	.word	0x2000070c

1004d1a0 <tsk_scheduler>:
1004d1a0:	b570      	push	{r4, r5, r6, lr}
1004d1a2:	4d17      	ldr	r5, [pc, #92]	@ (1004d200 <__arm_cp.1_0>)
1004d1a4:	6828      	ldr	r0, [r5, #0]
1004d1a6:	f3ef 8110 	mrs	r1, PRIMASK
1004d1aa:	b672      	cpsid	i
1004d1ac:	6801      	ldr	r1, [r0, #0]
1004d1ae:	2600      	movs	r6, #0
1004d1b0:	6006      	str	r6, [r0, #0]
1004d1b2:	6842      	ldr	r2, [r0, #4]
1004d1b4:	430a      	orrs	r2, r1
1004d1b6:	6042      	str	r2, [r0, #4]
1004d1b8:	b662      	cpsie	i
1004d1ba:	682c      	ldr	r4, [r5, #0]
1004d1bc:	3410      	adds	r4, #16
1004d1be:	6820      	ldr	r0, [r4, #0]
1004d1c0:	2800      	cmp	r0, #0
1004d1c2:	d00f      	beq.n	1004d1e4 <tsk_scheduler+0x44>
1004d1c4:	4620      	mov	r0, r4
1004d1c6:	f000 f831 	bl	1004d22c <lsbit>
1004d1ca:	0080      	lsls	r0, r0, #2
1004d1cc:	6829      	ldr	r1, [r5, #0]
1004d1ce:	1808      	adds	r0, r1, r0
1004d1d0:	f3ef 8210 	mrs	r2, PRIMASK
1004d1d4:	b672      	cpsid	i
1004d1d6:	6882      	ldr	r2, [r0, #8]
1004d1d8:	6086      	str	r6, [r0, #8]
1004d1da:	6848      	ldr	r0, [r1, #4]
1004d1dc:	4310      	orrs	r0, r2
1004d1de:	6048      	str	r0, [r1, #4]
1004d1e0:	b662      	cpsie	i
1004d1e2:	e7ec      	b.n	1004d1be <tsk_scheduler+0x1e>
1004d1e4:	6828      	ldr	r0, [r5, #0]
1004d1e6:	1d04      	adds	r4, r0, #4
1004d1e8:	4d06      	ldr	r5, [pc, #24]	@ (1004d204 <__arm_cp.1_1>)
1004d1ea:	6820      	ldr	r0, [r4, #0]
1004d1ec:	2800      	cmp	r0, #0
1004d1ee:	d006      	beq.n	1004d1fe <tsk_scheduler+0x5e>
1004d1f0:	4620      	mov	r0, r4
1004d1f2:	f000 f81b 	bl	1004d22c <lsbit>
1004d1f6:	0081      	lsls	r1, r0, #2
1004d1f8:	5869      	ldr	r1, [r5, r1]
1004d1fa:	4788      	blx	r1
1004d1fc:	e7f5      	b.n	1004d1ea <tsk_scheduler+0x4a>
1004d1fe:	bd70      	pop	{r4, r5, r6, pc}

1004d200 <__arm_cp.1_0>:
1004d200:	2000070c 	.word	0x2000070c

1004d204 <__arm_cp.1_1>:
1004d204:	1004ef74 	.word	0x1004ef74

1004d208 <tsk_notify_idx>:
1004d208:	211f      	movs	r1, #31
1004d20a:	4001      	ands	r1, r0
1004d20c:	2201      	movs	r2, #1
1004d20e:	408a      	lsls	r2, r1
1004d210:	f3ef 8110 	mrs	r1, PRIMASK
1004d214:	b672      	cpsid	i
1004d216:	4904      	ldr	r1, [pc, #16]	@ (1004d228 <__arm_cp.3_0>)
1004d218:	6809      	ldr	r1, [r1, #0]
1004d21a:	0940      	lsrs	r0, r0, #5
1004d21c:	0080      	lsls	r0, r0, #2
1004d21e:	580b      	ldr	r3, [r1, r0]
1004d220:	4313      	orrs	r3, r2
1004d222:	500b      	str	r3, [r1, r0]
1004d224:	b662      	cpsie	i
1004d226:	4770      	bx	lr

1004d228 <__arm_cp.3_0>:
1004d228:	2000070c 	.word	0x2000070c

1004d22c <lsbit>:
1004d22c:	f3ef 8110 	mrs	r1, PRIMASK
1004d230:	b672      	cpsid	i
1004d232:	6801      	ldr	r1, [r0, #0]
1004d234:	424a      	negs	r2, r1
1004d236:	400a      	ands	r2, r1
1004d238:	4051      	eors	r1, r2
1004d23a:	6001      	str	r1, [r0, #0]
1004d23c:	4803      	ldr	r0, [pc, #12]	@ (1004d24c <__arm_cp.7_0>)
1004d23e:	4350      	muls	r0, r2
1004d240:	0ec0      	lsrs	r0, r0, #27
1004d242:	a103      	add	r1, pc, #12	@ (adr r1, 1004d250 <__arm_cp.7_0+0x4>)
1004d244:	5c08      	ldrb	r0, [r1, r0]
1004d246:	b662      	cpsie	i
1004d248:	4770      	bx	lr
1004d24a:	46c0      	nop			@ (mov r8, r8)

1004d24c <__arm_cp.7_0>:
1004d24c:	04653adf 	.word	0x04653adf
1004d250:	06020100 	.word	0x06020100
1004d254:	10070b03 	.word	0x10070b03
1004d258:	150c0e04 	.word	0x150c0e04
1004d25c:	1a111708 	.word	0x1a111708
1004d260:	0f0a051f 	.word	0x0f0a051f
1004d264:	1916140d 	.word	0x1916140d
1004d268:	1813091e 	.word	0x1813091e
1004d26c:	1b1c121d 	.word	0x1b1c121d

1004d270 <CST_init>:
1004d270:	b510      	push	{r4, lr}
1004d272:	2412      	movs	r4, #18
1004d274:	2800      	cmp	r0, #0
1004d276:	d00e      	beq.n	1004d296 <CST_init+0x26>
1004d278:	2a00      	cmp	r2, #0
1004d27a:	d00c      	beq.n	1004d296 <CST_init+0x26>
1004d27c:	2b0b      	cmp	r3, #11
1004d27e:	d80a      	bhi.n	1004d296 <CST_init+0x26>
1004d280:	7041      	strb	r1, [r0, #1]
1004d282:	7003      	strb	r3, [r0, #0]
1004d284:	6a03      	ldr	r3, [r0, #32]
1004d286:	5459      	strb	r1, [r3, r1]
1004d288:	1e49      	subs	r1, r1, #1
1004d28a:	1c4b      	adds	r3, r1, #1
1004d28c:	d3fa      	bcc.n	1004d284 <CST_init+0x14>
1004d28e:	6102      	str	r2, [r0, #16]
1004d290:	2400      	movs	r4, #0
1004d292:	7504      	strb	r4, [r0, #20]
1004d294:	61c0      	str	r0, [r0, #28]
1004d296:	4620      	mov	r0, r4
1004d298:	bd10      	pop	{r4, pc}

1004d29a <CST_stop>:
1004d29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d29c:	4605      	mov	r5, r0
1004d29e:	2012      	movs	r0, #18
1004d2a0:	2d00      	cmp	r5, #0
1004d2a2:	d01b      	beq.n	1004d2dc <CST_stop+0x42>
1004d2a4:	460c      	mov	r4, r1
1004d2a6:	786a      	ldrb	r2, [r5, #1]
1004d2a8:	428a      	cmp	r2, r1
1004d2aa:	d917      	bls.n	1004d2dc <CST_stop+0x42>
1004d2ac:	6a2b      	ldr	r3, [r5, #32]
1004d2ae:	5d19      	ldrb	r1, [r3, r4]
1004d2b0:	42a1      	cmp	r1, r4
1004d2b2:	d101      	bne.n	1004d2b8 <CST_stop+0x1e>
1004d2b4:	2000      	movs	r0, #0
1004d2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d2b8:	4617      	mov	r7, r2
1004d2ba:	463e      	mov	r6, r7
1004d2bc:	5ddf      	ldrb	r7, [r3, r7]
1004d2be:	4297      	cmp	r7, r2
1004d2c0:	d001      	beq.n	1004d2c6 <CST_stop+0x2c>
1004d2c2:	42a7      	cmp	r7, r4
1004d2c4:	d1f9      	bne.n	1004d2ba <CST_stop+0x20>
1004d2c6:	2000      	movs	r0, #0
1004d2c8:	4297      	cmp	r7, r2
1004d2ca:	d005      	beq.n	1004d2d8 <CST_stop+0x3e>
1004d2cc:	5599      	strb	r1, [r3, r6]
1004d2ce:	4296      	cmp	r6, r2
1004d2d0:	d102      	bne.n	1004d2d8 <CST_stop+0x3e>
1004d2d2:	4628      	mov	r0, r5
1004d2d4:	f000 f803 	bl	1004d2de <Timer_TryStartFirstActive>
1004d2d8:	6a29      	ldr	r1, [r5, #32]
1004d2da:	550c      	strb	r4, [r1, r4]
1004d2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004d2de <Timer_TryStartFirstActive>:
1004d2de:	b510      	push	{r4, lr}
1004d2e0:	7842      	ldrb	r2, [r0, #1]
1004d2e2:	428a      	cmp	r2, r1
1004d2e4:	d107      	bne.n	1004d2f6 <Timer_TryStartFirstActive+0x18>
1004d2e6:	7d01      	ldrb	r1, [r0, #20]
1004d2e8:	2400      	movs	r4, #0
1004d2ea:	2900      	cmp	r1, #0
1004d2ec:	d009      	beq.n	1004d302 <Timer_TryStartFirstActive+0x24>
1004d2ee:	3008      	adds	r0, #8
1004d2f0:	f7f4 fcfa 	bl	10041ce8 <BLEPLAT_StopTimer>
1004d2f4:	e005      	b.n	1004d302 <Timer_TryStartFirstActive+0x24>
1004d2f6:	0049      	lsls	r1, r1, #1
1004d2f8:	6a42      	ldr	r2, [r0, #36]	@ 0x24
1004d2fa:	5e51      	ldrsh	r1, [r2, r1]
1004d2fc:	f000 f86a 	bl	1004d3d4 <Timer_StartFirstActive_sysT>
1004d300:	4604      	mov	r4, r0
1004d302:	4620      	mov	r0, r4
1004d304:	bd10      	pop	{r4, pc}

1004d306 <CST_start>:
1004d306:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d308:	b085      	sub	sp, #20
1004d30a:	2612      	movs	r6, #18
1004d30c:	2800      	cmp	r0, #0
1004d30e:	d05e      	beq.n	1004d3ce <CST_start+0xc8>
1004d310:	461f      	mov	r7, r3
1004d312:	460d      	mov	r5, r1
1004d314:	4604      	mov	r4, r0
1004d316:	7843      	ldrb	r3, [r0, #1]
1004d318:	428b      	cmp	r3, r1
1004d31a:	d958      	bls.n	1004d3ce <CST_start+0xc8>
1004d31c:	7820      	ldrb	r0, [r4, #0]
1004d31e:	2105      	movs	r1, #5
1004d320:	0309      	lsls	r1, r1, #12
1004d322:	4081      	lsls	r1, r0
1004d324:	428f      	cmp	r7, r1
1004d326:	d852      	bhi.n	1004d3ce <CST_start+0xc8>
1004d328:	9204      	str	r2, [sp, #16]
1004d32a:	9302      	str	r3, [sp, #8]
1004d32c:	f7f4 fcc1 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004d330:	4602      	mov	r2, r0
1004d332:	7823      	ldrb	r3, [r4, #0]
1004d334:	6a20      	ldr	r0, [r4, #32]
1004d336:	5d40      	ldrb	r0, [r0, r5]
1004d338:	42a8      	cmp	r0, r5
1004d33a:	d00c      	beq.n	1004d356 <CST_start+0x50>
1004d33c:	9804      	ldr	r0, [sp, #16]
1004d33e:	2800      	cmp	r0, #0
1004d340:	d045      	beq.n	1004d3ce <CST_start+0xc8>
1004d342:	4620      	mov	r0, r4
1004d344:	9103      	str	r1, [sp, #12]
1004d346:	4629      	mov	r1, r5
1004d348:	9304      	str	r3, [sp, #16]
1004d34a:	4616      	mov	r6, r2
1004d34c:	f7ff ffa5 	bl	1004d29a <CST_stop>
1004d350:	9903      	ldr	r1, [sp, #12]
1004d352:	4632      	mov	r2, r6
1004d354:	9b04      	ldr	r3, [sp, #16]
1004d356:	2033      	movs	r0, #51	@ 0x33
1004d358:	4378      	muls	r0, r7
1004d35a:	460e      	mov	r6, r1
1004d35c:	0a01      	lsrs	r1, r0, #8
1004d35e:	1808      	adds	r0, r1, r0
1004d360:	0c01      	lsrs	r1, r0, #16
1004d362:	1808      	adds	r0, r1, r0
1004d364:	0771      	lsls	r1, r6, #29
1004d366:	08d2      	lsrs	r2, r2, #3
1004d368:	1851      	adds	r1, r2, r1
1004d36a:	1842      	adds	r2, r0, r1
1004d36c:	1d58      	adds	r0, r3, #5
1004d36e:	b2c0      	uxtb	r0, r0
1004d370:	40c2      	lsrs	r2, r0
1004d372:	9501      	str	r5, [sp, #4]
1004d374:	0068      	lsls	r0, r5, #1
1004d376:	6a61      	ldr	r1, [r4, #36]	@ 0x24
1004d378:	9204      	str	r2, [sp, #16]
1004d37a:	520a      	strh	r2, [r1, r0]
1004d37c:	f7f4 fc99 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004d380:	08c0      	lsrs	r0, r0, #3
1004d382:	9003      	str	r0, [sp, #12]
1004d384:	7862      	ldrb	r2, [r4, #1]
1004d386:	6a20      	ldr	r0, [r4, #32]
1004d388:	4617      	mov	r7, r2
1004d38a:	463b      	mov	r3, r7
1004d38c:	5dc7      	ldrb	r7, [r0, r7]
1004d38e:	4297      	cmp	r7, r2
1004d390:	d00d      	beq.n	1004d3ae <CST_start+0xa8>
1004d392:	007d      	lsls	r5, r7, #1
1004d394:	6a66      	ldr	r6, [r4, #36]	@ 0x24
1004d396:	5b75      	ldrh	r5, [r6, r5]
1004d398:	7826      	ldrb	r6, [r4, #0]
1004d39a:	1d76      	adds	r6, r6, #5
1004d39c:	9903      	ldr	r1, [sp, #12]
1004d39e:	40f1      	lsrs	r1, r6
1004d3a0:	1a6d      	subs	r5, r5, r1
1004d3a2:	b22d      	sxth	r5, r5
1004d3a4:	9e04      	ldr	r6, [sp, #16]
1004d3a6:	1a71      	subs	r1, r6, r1
1004d3a8:	b209      	sxth	r1, r1
1004d3aa:	428d      	cmp	r5, r1
1004d3ac:	dded      	ble.n	1004d38a <CST_start+0x84>
1004d3ae:	5cc1      	ldrb	r1, [r0, r3]
1004d3b0:	9a01      	ldr	r2, [sp, #4]
1004d3b2:	5481      	strb	r1, [r0, r2]
1004d3b4:	6a20      	ldr	r0, [r4, #32]
1004d3b6:	54c2      	strb	r2, [r0, r3]
1004d3b8:	9802      	ldr	r0, [sp, #8]
1004d3ba:	4283      	cmp	r3, r0
1004d3bc:	d106      	bne.n	1004d3cc <CST_start+0xc6>
1004d3be:	9804      	ldr	r0, [sp, #16]
1004d3c0:	b201      	sxth	r1, r0
1004d3c2:	4620      	mov	r0, r4
1004d3c4:	f000 f806 	bl	1004d3d4 <Timer_StartFirstActive_sysT>
1004d3c8:	4606      	mov	r6, r0
1004d3ca:	e000      	b.n	1004d3ce <CST_start+0xc8>
1004d3cc:	2600      	movs	r6, #0
1004d3ce:	4630      	mov	r0, r6
1004d3d0:	b005      	add	sp, #20
1004d3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004d3d4 <Timer_StartFirstActive_sysT>:
1004d3d4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004d3d6:	9101      	str	r1, [sp, #4]
1004d3d8:	4604      	mov	r4, r0
1004d3da:	4607      	mov	r7, r0
1004d3dc:	3708      	adds	r7, #8
1004d3de:	f7f4 fc68 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004d3e2:	9002      	str	r0, [sp, #8]
1004d3e4:	460d      	mov	r5, r1
1004d3e6:	7826      	ldrb	r6, [r4, #0]
1004d3e8:	7d20      	ldrb	r0, [r4, #20]
1004d3ea:	2800      	cmp	r0, #0
1004d3ec:	d004      	beq.n	1004d3f8 <Timer_StartFirstActive_sysT+0x24>
1004d3ee:	4638      	mov	r0, r7
1004d3f0:	f7f4 fc7a 	bl	10041ce8 <BLEPLAT_StopTimer>
1004d3f4:	7822      	ldrb	r2, [r4, #0]
1004d3f6:	e000      	b.n	1004d3fa <Timer_StartFirstActive_sysT+0x26>
1004d3f8:	4632      	mov	r2, r6
1004d3fa:	1d70      	adds	r0, r6, #5
1004d3fc:	9c02      	ldr	r4, [sp, #8]
1004d3fe:	08e1      	lsrs	r1, r4, #3
1004d400:	40c1      	lsrs	r1, r0
1004d402:	9801      	ldr	r0, [sp, #4]
1004d404:	1a40      	subs	r0, r0, r1
1004d406:	b200      	sxth	r0, r0
1004d408:	1e40      	subs	r0, r0, #1
1004d40a:	17c1      	asrs	r1, r0, #31
1004d40c:	3208      	adds	r2, #8
1004d40e:	f7f3 f885 	bl	1004051c <__aeabi_llsl>
1004d412:	1902      	adds	r2, r0, r4
1004d414:	414d      	adcs	r5, r1
1004d416:	4638      	mov	r0, r7
1004d418:	462b      	mov	r3, r5
1004d41a:	f7f4 fc54 	bl	10041cc6 <BLEPLAT_StartTimer>
1004d41e:	b2c0      	uxtb	r0, r0
1004d420:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004d422 <cst_sharedCallback>:
1004d422:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004d424:	9102      	str	r1, [sp, #8]
1004d426:	4605      	mov	r5, r0
1004d428:	7847      	ldrb	r7, [r0, #1]
1004d42a:	6a00      	ldr	r0, [r0, #32]
1004d42c:	5dc4      	ldrb	r4, [r0, r7]
1004d42e:	f7f4 fc40 	bl	10041cb2 <BLEPLAT_GetCurrentSysTime>
1004d432:	08c0      	lsrs	r0, r0, #3
1004d434:	9001      	str	r0, [sp, #4]
1004d436:	4620      	mov	r0, r4
1004d438:	b2c2      	uxtb	r2, r0
1004d43a:	42ba      	cmp	r2, r7
1004d43c:	d00d      	beq.n	1004d45a <cst_sharedCallback+0x38>
1004d43e:	0053      	lsls	r3, r2, #1
1004d440:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
1004d442:	5af3      	ldrh	r3, [r6, r3]
1004d444:	782e      	ldrb	r6, [r5, #0]
1004d446:	1d76      	adds	r6, r6, #5
1004d448:	9901      	ldr	r1, [sp, #4]
1004d44a:	40f1      	lsrs	r1, r6
1004d44c:	1a59      	subs	r1, r3, r1
1004d44e:	b209      	sxth	r1, r1
1004d450:	2901      	cmp	r1, #1
1004d452:	dc03      	bgt.n	1004d45c <cst_sharedCallback+0x3a>
1004d454:	6a28      	ldr	r0, [r5, #32]
1004d456:	5c80      	ldrb	r0, [r0, r2]
1004d458:	e7ee      	b.n	1004d438 <cst_sharedCallback+0x16>
1004d45a:	4638      	mov	r0, r7
1004d45c:	6a29      	ldr	r1, [r5, #32]
1004d45e:	55c8      	strb	r0, [r1, r7]
1004d460:	b2c6      	uxtb	r6, r0
1004d462:	4628      	mov	r0, r5
1004d464:	4631      	mov	r1, r6
1004d466:	f7ff ff3a 	bl	1004d2de <Timer_TryStartFirstActive>
1004d46a:	b2e0      	uxtb	r0, r4
1004d46c:	42b0      	cmp	r0, r6
1004d46e:	d006      	beq.n	1004d47e <cst_sharedCallback+0x5c>
1004d470:	6a29      	ldr	r1, [r5, #32]
1004d472:	5c0f      	ldrb	r7, [r1, r0]
1004d474:	540c      	strb	r4, [r1, r0]
1004d476:	9902      	ldr	r1, [sp, #8]
1004d478:	4788      	blx	r1
1004d47a:	463c      	mov	r4, r7
1004d47c:	e7f5      	b.n	1004d46a <cst_sharedCallback+0x48>
1004d47e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004d480 <is_Buffer_All_Set_To>:
1004d480:	b570      	push	{r4, r5, r6, lr}
1004d482:	4603      	mov	r3, r0
1004d484:	2001      	movs	r0, #1
1004d486:	2900      	cmp	r1, #0
1004d488:	d009      	beq.n	1004d49e <is_Buffer_All_Set_To+0x1e>
1004d48a:	2400      	movs	r4, #0
1004d48c:	4626      	mov	r6, r4
1004d48e:	4625      	mov	r5, r4
1004d490:	5d96      	ldrb	r6, [r2, r6]
1004d492:	429e      	cmp	r6, r3
1004d494:	d104      	bne.n	1004d4a0 <is_Buffer_All_Set_To+0x20>
1004d496:	1c6d      	adds	r5, r5, #1
1004d498:	b2ee      	uxtb	r6, r5
1004d49a:	428e      	cmp	r6, r1
1004d49c:	d3f8      	bcc.n	1004d490 <is_Buffer_All_Set_To+0x10>
1004d49e:	bd70      	pop	{r4, r5, r6, pc}
1004d4a0:	4620      	mov	r0, r4
1004d4a2:	bd70      	pop	{r4, r5, r6, pc}

1004d4a4 <char_copy>:
1004d4a4:	2a00      	cmp	r2, #0
1004d4a6:	d005      	beq.n	1004d4b4 <char_copy+0x10>
1004d4a8:	7803      	ldrb	r3, [r0, #0]
1004d4aa:	700b      	strb	r3, [r1, #0]
1004d4ac:	1e52      	subs	r2, r2, #1
1004d4ae:	1c49      	adds	r1, r1, #1
1004d4b0:	1c40      	adds	r0, r0, #1
1004d4b2:	e7f7      	b.n	1004d4a4 <char_copy>
1004d4b4:	4770      	bx	lr

1004d4b6 <hci_acl_data_tx_cmpl_event_int_cb_ucfg_weak>:
1004d4b6:	2000      	movs	r0, #0
1004d4b8:	4770      	bx	lr

1004d4ba <hci_acl_data_ind_event_int_cb_ucfg_weak>:
1004d4ba:	2000      	movs	r0, #0
1004d4bc:	4770      	bx	lr
	...

1004d4c0 <addr8_list_search>:
1004d4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d4c2:	b083      	sub	sp, #12
1004d4c4:	9202      	str	r2, [sp, #8]
1004d4c6:	9d08      	ldr	r5, [sp, #32]
1004d4c8:	2d00      	cmp	r5, #0
1004d4ca:	d101      	bne.n	1004d4d0 <addr8_list_search+0x10>
1004d4cc:	462e      	mov	r6, r5
1004d4ce:	e002      	b.n	1004d4d6 <addr8_list_search+0x16>
1004d4d0:	24ff      	movs	r4, #255	@ 0xff
1004d4d2:	0626      	lsls	r6, r4, #24
1004d4d4:	401e      	ands	r6, r3
1004d4d6:	060c      	lsls	r4, r1, #24
1004d4d8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1004d4da:	d02a      	beq.n	1004d532 <addr8_list_search+0x72>
1004d4dc:	9501      	str	r5, [sp, #4]
1004d4de:	9400      	str	r4, [sp, #0]
1004d4e0:	4a18      	ldr	r2, [pc, #96]	@ (1004d544 <__arm_cp.0_0>)
1004d4e2:	4013      	ands	r3, r2
1004d4e4:	431e      	orrs	r6, r3
1004d4e6:	1e4a      	subs	r2, r1, #1
1004d4e8:	b2c9      	uxtb	r1, r1
1004d4ea:	0849      	lsrs	r1, r1, #1
1004d4ec:	2400      	movs	r4, #0
1004d4ee:	b2cd      	uxtb	r5, r1
1004d4f0:	00ed      	lsls	r5, r5, #3
1004d4f2:	1947      	adds	r7, r0, r5
1004d4f4:	687f      	ldr	r7, [r7, #4]
1004d4f6:	9b01      	ldr	r3, [sp, #4]
1004d4f8:	2b00      	cmp	r3, #0
1004d4fa:	d101      	bne.n	1004d500 <addr8_list_search+0x40>
1004d4fc:	4b11      	ldr	r3, [pc, #68]	@ (1004d544 <__arm_cp.0_0>)
1004d4fe:	401f      	ands	r7, r3
1004d500:	5945      	ldr	r5, [r0, r5]
1004d502:	9b02      	ldr	r3, [sp, #8]
1004d504:	42ab      	cmp	r3, r5
1004d506:	d101      	bne.n	1004d50c <addr8_list_search+0x4c>
1004d508:	42be      	cmp	r6, r7
1004d50a:	d015      	beq.n	1004d538 <addr8_list_search+0x78>
1004d50c:	42be      	cmp	r6, r7
1004d50e:	d803      	bhi.n	1004d518 <addr8_list_search+0x58>
1004d510:	d104      	bne.n	1004d51c <addr8_list_search+0x5c>
1004d512:	9b02      	ldr	r3, [sp, #8]
1004d514:	42ab      	cmp	r3, r5
1004d516:	d901      	bls.n	1004d51c <addr8_list_search+0x5c>
1004d518:	1c4c      	adds	r4, r1, #1
1004d51a:	e000      	b.n	1004d51e <addr8_list_search+0x5e>
1004d51c:	1e4a      	subs	r2, r1, #1
1004d51e:	1b11      	subs	r1, r2, r4
1004d520:	b2c9      	uxtb	r1, r1
1004d522:	1c4d      	adds	r5, r1, #1
1004d524:	b2ef      	uxtb	r7, r5
1004d526:	0879      	lsrs	r1, r7, #1
1004d528:	1909      	adds	r1, r1, r4
1004d52a:	42af      	cmp	r7, r5
1004d52c:	d0df      	beq.n	1004d4ee <addr8_list_search+0x2e>
1004d52e:	2000      	movs	r0, #0
1004d530:	e003      	b.n	1004d53a <addr8_list_search+0x7a>
1004d532:	2100      	movs	r1, #0
1004d534:	4608      	mov	r0, r1
1004d536:	e001      	b.n	1004d53c <addr8_list_search+0x7c>
1004d538:	2001      	movs	r0, #1
1004d53a:	9c00      	ldr	r4, [sp, #0]
1004d53c:	7021      	strb	r1, [r4, #0]
1004d53e:	b003      	add	sp, #12
1004d540:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d542:	46c0      	nop			@ (mov r8, r8)

1004d544 <__arm_cp.0_0>:
1004d544:	00ffffff 	.word	0x00ffffff

1004d548 <addr8_list_clear>:
1004d548:	2100      	movs	r1, #0
1004d54a:	7101      	strb	r1, [r0, #4]
1004d54c:	4770      	bx	lr

1004d54e <BLEPLAT_aes128_encrypt>:
1004d54e:	b580      	push	{r7, lr}
1004d550:	f7f4 fb68 	bl	10041c24 <BLEPLAT_AesEcbEncrypt>
1004d554:	bd80      	pop	{r7, pc}

1004d556 <Hal_Get_Random_Number>:
1004d556:	b51c      	push	{r2, r3, r4, lr}
1004d558:	ac01      	add	r4, sp, #4
1004d55a:	4620      	mov	r0, r4
1004d55c:	f7f4 fb72 	bl	10041c44 <BLEPLAT_RngGetRandom16>
1004d560:	8820      	ldrh	r0, [r4, #0]
1004d562:	bd1c      	pop	{r2, r3, r4, pc}

1004d564 <Hal_Get_Random_Number32>:
1004d564:	b5e0      	push	{r5, r6, r7, lr}
1004d566:	a801      	add	r0, sp, #4
1004d568:	f7f4 fb78 	bl	10041c5c <BLEPLAT_RngGetRandom32>
1004d56c:	9801      	ldr	r0, [sp, #4]
1004d56e:	bd8c      	pop	{r2, r3, r7, pc}

1004d570 <HAL_Generate_Random_Bytes_To>:
1004d570:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1004d572:	460c      	mov	r4, r1
1004d574:	4605      	mov	r5, r0
1004d576:	2000      	movs	r0, #0
1004d578:	b2c6      	uxtb	r6, r0
1004d57a:	42a6      	cmp	r6, r4
1004d57c:	d20e      	bcs.n	1004d59c <HAL_Generate_Random_Bytes_To+0x2c>
1004d57e:	2000      	movs	r0, #0
1004d580:	f7ff ffe9 	bl	1004d556 <Hal_Get_Random_Number>
1004d584:	55a8      	strb	r0, [r5, r6]
1004d586:	a901      	add	r1, sp, #4
1004d588:	7008      	strb	r0, [r1, #0]
1004d58a:	0a00      	lsrs	r0, r0, #8
1004d58c:	4669      	mov	r1, sp
1004d58e:	7008      	strb	r0, [r1, #0]
1004d590:	1c71      	adds	r1, r6, #1
1004d592:	42a1      	cmp	r1, r4
1004d594:	d200      	bcs.n	1004d598 <HAL_Generate_Random_Bytes_To+0x28>
1004d596:	5468      	strb	r0, [r5, r1]
1004d598:	1cb0      	adds	r0, r6, #2
1004d59a:	e7ed      	b.n	1004d578 <HAL_Generate_Random_Bytes_To+0x8>
1004d59c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

1004d5a0 <IDD_Initialize_Device_IDs>:
1004d5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d5a2:	b095      	sub	sp, #84	@ 0x54
1004d5a4:	4839      	ldr	r0, [pc, #228]	@ (1004d68c <__arm_cp.0_0>)
1004d5a6:	6800      	ldr	r0, [r0, #0]
1004d5a8:	9000      	str	r0, [sp, #0]
1004d5aa:	a80b      	add	r0, sp, #44	@ 0x2c
1004d5ac:	f7ff fdd5 	bl	1004d15a <nvm_dev_id_data_get_record>
1004d5b0:	2800      	cmp	r0, #0
1004d5b2:	d031      	beq.n	1004d618 <IDD_Initialize_Device_IDs+0x78>
1004d5b4:	af01      	add	r7, sp, #4
1004d5b6:	2406      	movs	r4, #6
1004d5b8:	2500      	movs	r5, #0
1004d5ba:	4b35      	ldr	r3, [pc, #212]	@ (1004d690 <__arm_cp.0_1>)
1004d5bc:	4638      	mov	r0, r7
1004d5be:	4621      	mov	r1, r4
1004d5c0:	462a      	mov	r2, r5
1004d5c2:	4798      	blx	r3
1004d5c4:	7978      	ldrb	r0, [r7, #5]
1004d5c6:	21c0      	movs	r1, #192	@ 0xc0
1004d5c8:	4301      	orrs	r1, r0
1004d5ca:	7179      	strb	r1, [r7, #5]
1004d5cc:	ae0b      	add	r6, sp, #44	@ 0x2c
1004d5ce:	4630      	mov	r0, r6
1004d5d0:	3020      	adds	r0, #32
1004d5d2:	4b30      	ldr	r3, [pc, #192]	@ (1004d694 <__arm_cp.0_2>)
1004d5d4:	4639      	mov	r1, r7
1004d5d6:	4622      	mov	r2, r4
1004d5d8:	4798      	blx	r3
1004d5da:	ac07      	add	r4, sp, #28
1004d5dc:	2710      	movs	r7, #16
1004d5de:	4620      	mov	r0, r4
1004d5e0:	4639      	mov	r1, r7
1004d5e2:	462a      	mov	r2, r5
1004d5e4:	4b2a      	ldr	r3, [pc, #168]	@ (1004d690 <__arm_cp.0_1>)
1004d5e6:	4798      	blx	r3
1004d5e8:	4630      	mov	r0, r6
1004d5ea:	4621      	mov	r1, r4
1004d5ec:	463a      	mov	r2, r7
1004d5ee:	4b29      	ldr	r3, [pc, #164]	@ (1004d694 <__arm_cp.0_2>)
1004d5f0:	4798      	blx	r3
1004d5f2:	ac03      	add	r4, sp, #12
1004d5f4:	4620      	mov	r0, r4
1004d5f6:	4639      	mov	r1, r7
1004d5f8:	462a      	mov	r2, r5
1004d5fa:	4b25      	ldr	r3, [pc, #148]	@ (1004d690 <__arm_cp.0_1>)
1004d5fc:	4798      	blx	r3
1004d5fe:	4630      	mov	r0, r6
1004d600:	3010      	adds	r0, #16
1004d602:	4621      	mov	r1, r4
1004d604:	463a      	mov	r2, r7
1004d606:	4b23      	ldr	r3, [pc, #140]	@ (1004d694 <__arm_cp.0_2>)
1004d608:	4798      	blx	r3
1004d60a:	4630      	mov	r0, r6
1004d60c:	f7ff fdb2 	bl	1004d174 <nvm_dev_id_data_add_record>
1004d610:	2800      	cmp	r0, #0
1004d612:	d103      	bne.n	1004d61c <IDD_Initialize_Device_IDs+0x7c>
1004d614:	4605      	mov	r5, r0
1004d616:	e003      	b.n	1004d620 <IDD_Initialize_Device_IDs+0x80>
1004d618:	2500      	movs	r5, #0
1004d61a:	e001      	b.n	1004d620 <IDD_Initialize_Device_IDs+0x80>
1004d61c:	200e      	movs	r0, #14
1004d61e:	43c5      	mvns	r5, r0
1004d620:	4c1d      	ldr	r4, [pc, #116]	@ (1004d698 <__arm_cp.0_3>)
1004d622:	6822      	ldr	r2, [r4, #0]
1004d624:	322e      	adds	r2, #46	@ 0x2e
1004d626:	2600      	movs	r6, #0
1004d628:	2706      	movs	r7, #6
1004d62a:	4630      	mov	r0, r6
1004d62c:	4639      	mov	r1, r7
1004d62e:	f7ff ff27 	bl	1004d480 <is_Buffer_All_Set_To>
1004d632:	a90b      	add	r1, sp, #44	@ 0x2c
1004d634:	2800      	cmp	r0, #0
1004d636:	d001      	beq.n	1004d63c <IDD_Initialize_Device_IDs+0x9c>
1004d638:	3120      	adds	r1, #32
1004d63a:	e001      	b.n	1004d640 <IDD_Initialize_Device_IDs+0xa0>
1004d63c:	6821      	ldr	r1, [r4, #0]
1004d63e:	312e      	adds	r1, #46	@ 0x2e
1004d640:	9800      	ldr	r0, [sp, #0]
1004d642:	3060      	adds	r0, #96	@ 0x60
1004d644:	463a      	mov	r2, r7
1004d646:	f7f4 fab1 	bl	10041bac <BLEPLAT_MemCpy>
1004d64a:	6822      	ldr	r2, [r4, #0]
1004d64c:	3208      	adds	r2, #8
1004d64e:	2110      	movs	r1, #16
1004d650:	4630      	mov	r0, r6
1004d652:	f7ff ff15 	bl	1004d480 <is_Buffer_All_Set_To>
1004d656:	2800      	cmp	r0, #0
1004d658:	d005      	beq.n	1004d666 <IDD_Initialize_Device_IDs+0xc6>
1004d65a:	6820      	ldr	r0, [r4, #0]
1004d65c:	3008      	adds	r0, #8
1004d65e:	a90b      	add	r1, sp, #44	@ 0x2c
1004d660:	2210      	movs	r2, #16
1004d662:	f7f4 faa3 	bl	10041bac <BLEPLAT_MemCpy>
1004d666:	6822      	ldr	r2, [r4, #0]
1004d668:	3218      	adds	r2, #24
1004d66a:	2000      	movs	r0, #0
1004d66c:	2110      	movs	r1, #16
1004d66e:	f7ff ff07 	bl	1004d480 <is_Buffer_All_Set_To>
1004d672:	2800      	cmp	r0, #0
1004d674:	d006      	beq.n	1004d684 <IDD_Initialize_Device_IDs+0xe4>
1004d676:	a90b      	add	r1, sp, #44	@ 0x2c
1004d678:	3110      	adds	r1, #16
1004d67a:	6820      	ldr	r0, [r4, #0]
1004d67c:	3018      	adds	r0, #24
1004d67e:	2210      	movs	r2, #16
1004d680:	f7f4 fa94 	bl	10041bac <BLEPLAT_MemCpy>
1004d684:	b2e8      	uxtb	r0, r5
1004d686:	b015      	add	sp, #84	@ 0x54
1004d688:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d68a:	46c0      	nop			@ (mov r8, r8)

1004d68c <__arm_cp.0_0>:
1004d68c:	200006c0 	.word	0x200006c0

1004d690 <__arm_cp.0_1>:
1004d690:	1004d571 	.word	0x1004d571

1004d694 <__arm_cp.0_2>:
1004d694:	10041bad 	.word	0x10041bad

1004d698 <__arm_cp.0_3>:
1004d698:	200006b8 	.word	0x200006b8

1004d69c <aci_hal_fw_error_event_push_noinline>:
1004d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d69e:	4604      	mov	r4, r0
1004d6a0:	06c0      	lsls	r0, r0, #27
1004d6a2:	d42d      	bmi.n	1004d700 <aci_hal_fw_error_event_push_noinline+0x64>
1004d6a4:	4615      	mov	r5, r2
1004d6a6:	460f      	mov	r7, r1
1004d6a8:	9300      	str	r3, [sp, #0]
1004d6aa:	4818      	ldr	r0, [pc, #96]	@ (1004d70c <__arm_cp.0_0>)
1004d6ac:	6800      	ldr	r0, [r0, #0]
1004d6ae:	0761      	lsls	r1, r4, #29
1004d6b0:	0ec9      	lsrs	r1, r1, #27
1004d6b2:	1840      	adds	r0, r0, r1
1004d6b4:	6900      	ldr	r0, [r0, #16]
1004d6b6:	1e51      	subs	r1, r2, #1
1004d6b8:	2203      	movs	r2, #3
1004d6ba:	430a      	orrs	r2, r1
1004d6bc:	3209      	adds	r2, #9
1004d6be:	0891      	lsrs	r1, r2, #2
1004d6c0:	b28b      	uxth	r3, r1
1004d6c2:	2240      	movs	r2, #64	@ 0x40
1004d6c4:	4621      	mov	r1, r4
1004d6c6:	f7fc fb63 	bl	10049d90 <aci_event_fifo_push_header>
1004d6ca:	2800      	cmp	r0, #0
1004d6cc:	d01a      	beq.n	1004d704 <aci_hal_fw_error_event_push_noinline+0x68>
1004d6ce:	4606      	mov	r6, r0
1004d6d0:	72c5      	strb	r5, [r0, #11]
1004d6d2:	7287      	strb	r7, [r0, #10]
1004d6d4:	300c      	adds	r0, #12
1004d6d6:	9900      	ldr	r1, [sp, #0]
1004d6d8:	462a      	mov	r2, r5
1004d6da:	f7f4 fa67 	bl	10041bac <BLEPLAT_MemCpy>
1004d6de:	2700      	movs	r7, #0
1004d6e0:	7277      	strb	r7, [r6, #9]
1004d6e2:	2006      	movs	r0, #6
1004d6e4:	7230      	strb	r0, [r6, #8]
1004d6e6:	1d28      	adds	r0, r5, #4
1004d6e8:	0a01      	lsrs	r1, r0, #8
1004d6ea:	71f1      	strb	r1, [r6, #7]
1004d6ec:	71b0      	strb	r0, [r6, #6]
1004d6ee:	20ff      	movs	r0, #255	@ 0xff
1004d6f0:	7170      	strb	r0, [r6, #5]
1004d6f2:	2082      	movs	r0, #130	@ 0x82
1004d6f4:	7130      	strb	r0, [r6, #4]
1004d6f6:	4620      	mov	r0, r4
1004d6f8:	4631      	mov	r1, r6
1004d6fa:	f7fc fbe6 	bl	10049eca <aci_event_fifo_push>
1004d6fe:	e002      	b.n	1004d706 <aci_hal_fw_error_event_push_noinline+0x6a>
1004d700:	2786      	movs	r7, #134	@ 0x86
1004d702:	e000      	b.n	1004d706 <aci_hal_fw_error_event_push_noinline+0x6a>
1004d704:	2707      	movs	r7, #7
1004d706:	4638      	mov	r0, r7
1004d708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d70a:	46c0      	nop			@ (mov r8, r8)

1004d70c <__arm_cp.0_0>:
1004d70c:	200006bc 	.word	0x200006bc

1004d710 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
1004d710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d712:	4604      	mov	r4, r0
1004d714:	06c0      	lsls	r0, r0, #27
1004d716:	d42d      	bmi.n	1004d774 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
1004d718:	4616      	mov	r6, r2
1004d71a:	460d      	mov	r5, r1
1004d71c:	4818      	ldr	r0, [pc, #96]	@ (1004d780 <__arm_cp.1_0>)
1004d71e:	6800      	ldr	r0, [r0, #0]
1004d720:	0761      	lsls	r1, r4, #29
1004d722:	0ec9      	lsrs	r1, r1, #27
1004d724:	1840      	adds	r0, r0, r1
1004d726:	6900      	ldr	r0, [r0, #16]
1004d728:	2241      	movs	r2, #65	@ 0x41
1004d72a:	2304      	movs	r3, #4
1004d72c:	4621      	mov	r1, r4
1004d72e:	f7fc fb2f 	bl	10049d90 <aci_event_fifo_push_header>
1004d732:	2800      	cmp	r0, #0
1004d734:	d020      	beq.n	1004d778 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
1004d736:	4601      	mov	r1, r0
1004d738:	300a      	adds	r0, #10
1004d73a:	7106      	strb	r6, [r0, #4]
1004d73c:	7005      	strb	r5, [r0, #0]
1004d73e:	2700      	movs	r7, #0
1004d740:	724f      	strb	r7, [r1, #9]
1004d742:	2210      	movs	r2, #16
1004d744:	720a      	strb	r2, [r1, #8]
1004d746:	71cf      	strb	r7, [r1, #7]
1004d748:	220a      	movs	r2, #10
1004d74a:	718a      	strb	r2, [r1, #6]
1004d74c:	22ff      	movs	r2, #255	@ 0xff
1004d74e:	714a      	strb	r2, [r1, #5]
1004d750:	2282      	movs	r2, #130	@ 0x82
1004d752:	710a      	strb	r2, [r1, #4]
1004d754:	0e32      	lsrs	r2, r6, #24
1004d756:	71c2      	strb	r2, [r0, #7]
1004d758:	0c32      	lsrs	r2, r6, #16
1004d75a:	7182      	strb	r2, [r0, #6]
1004d75c:	0a32      	lsrs	r2, r6, #8
1004d75e:	7142      	strb	r2, [r0, #5]
1004d760:	0e2a      	lsrs	r2, r5, #24
1004d762:	70c2      	strb	r2, [r0, #3]
1004d764:	0c2a      	lsrs	r2, r5, #16
1004d766:	7082      	strb	r2, [r0, #2]
1004d768:	0a2a      	lsrs	r2, r5, #8
1004d76a:	7042      	strb	r2, [r0, #1]
1004d76c:	4620      	mov	r0, r4
1004d76e:	f7fc fbac 	bl	10049eca <aci_event_fifo_push>
1004d772:	e002      	b.n	1004d77a <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1004d774:	2786      	movs	r7, #134	@ 0x86
1004d776:	e000      	b.n	1004d77a <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1004d778:	2707      	movs	r7, #7
1004d77a:	4638      	mov	r0, r7
1004d77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d77e:	46c0      	nop			@ (mov r8, r8)

1004d780 <__arm_cp.1_0>:
1004d780:	200006bc 	.word	0x200006bc

1004d784 <GAP_enable_disable_scan_ucfg_weak>:
1004d784:	2000      	movs	r0, #0
1004d786:	4770      	bx	lr

1004d788 <GAP_name_disc_proc_connected_check_ucfg_weak>:
1004d788:	4770      	bx	lr

1004d78a <GAP_DiscProcTimeoutcb_ucfg_weak>:
1004d78a:	4770      	bx	lr

1004d78c <GAT_clt_proc_exec_tsk>:
1004d78c:	b580      	push	{r7, lr}
1004d78e:	4802      	ldr	r0, [pc, #8]	@ (1004d798 <__arm_cp.3_0>)
1004d790:	6800      	ldr	r0, [r0, #0]
1004d792:	4780      	blx	r0
1004d794:	bd80      	pop	{r7, pc}
1004d796:	46c0      	nop			@ (mov r8, r8)

1004d798 <__arm_cp.3_0>:
1004d798:	200008ac 	.word	0x200008ac

1004d79c <GAT_clt_exec_empty>:
1004d79c:	4770      	bx	lr
	...

1004d7a0 <hci_le_encrypt>:
1004d7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d7a2:	b08f      	sub	sp, #60	@ 0x3c
1004d7a4:	9202      	str	r2, [sp, #8]
1004d7a6:	4607      	mov	r7, r0
1004d7a8:	a807      	add	r0, sp, #28
1004d7aa:	9001      	str	r0, [sp, #4]
1004d7ac:	2510      	movs	r5, #16
1004d7ae:	4e0c      	ldr	r6, [pc, #48]	@ (1004d7e0 <__arm_cp.0_0>)
1004d7b0:	462a      	mov	r2, r5
1004d7b2:	47b0      	blx	r6
1004d7b4:	ac0b      	add	r4, sp, #44	@ 0x2c
1004d7b6:	4620      	mov	r0, r4
1004d7b8:	4639      	mov	r1, r7
1004d7ba:	462a      	mov	r2, r5
1004d7bc:	47b0      	blx	r6
1004d7be:	af03      	add	r7, sp, #12
1004d7c0:	2600      	movs	r6, #0
1004d7c2:	9801      	ldr	r0, [sp, #4]
1004d7c4:	4621      	mov	r1, r4
1004d7c6:	463a      	mov	r2, r7
1004d7c8:	4633      	mov	r3, r6
1004d7ca:	f7ff fec0 	bl	1004d54e <BLEPLAT_aes128_encrypt>
1004d7ce:	9802      	ldr	r0, [sp, #8]
1004d7d0:	4639      	mov	r1, r7
1004d7d2:	462a      	mov	r2, r5
1004d7d4:	4b02      	ldr	r3, [pc, #8]	@ (1004d7e0 <__arm_cp.0_0>)
1004d7d6:	4798      	blx	r3
1004d7d8:	4630      	mov	r0, r6
1004d7da:	b00f      	add	sp, #60	@ 0x3c
1004d7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d7de:	46c0      	nop			@ (mov r8, r8)

1004d7e0 <__arm_cp.0_0>:
1004d7e0:	10041bad 	.word	0x10041bad

1004d7e4 <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
1004d7e4:	4770      	bx	lr

1004d7e6 <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
1004d7e6:	4770      	bx	lr

1004d7e8 <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
1004d7e8:	4770      	bx	lr

1004d7ea <llc_big_brc_mem_alloc_ucfg_weak>:
1004d7ea:	4770      	bx	lr

1004d7ec <llc_big_sync_mem_alloc_ucfg_weak>:
1004d7ec:	4770      	bx	lr

1004d7ee <llc_cig_cmn_mem_alloc_ucfg_weak>:
1004d7ee:	4770      	bx	lr

1004d7f0 <llc_check_sreq_or_creq_tx_addr_res_off>:
1004d7f0:	b570      	push	{r4, r5, r6, lr}
1004d7f2:	b084      	sub	sp, #16
1004d7f4:	4615      	mov	r5, r2
1004d7f6:	460a      	mov	r2, r1
1004d7f8:	4604      	mov	r4, r0
1004d7fa:	2b00      	cmp	r3, #0
1004d7fc:	d007      	beq.n	1004d80e <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
1004d7fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004d800:	4282      	cmp	r2, r0
1004d802:	d11f      	bne.n	1004d844 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
1004d804:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d806:	4068      	eors	r0, r5
1004d808:	0200      	lsls	r0, r0, #8
1004d80a:	d11b      	bne.n	1004d844 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
1004d80c:	e01b      	b.n	1004d846 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004d80e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004d810:	9908      	ldr	r1, [sp, #32]
1004d812:	2900      	cmp	r1, #0
1004d814:	d002      	beq.n	1004d81c <llc_check_sreq_or_creq_tx_addr_res_off+0x2c>
1004d816:	2301      	movs	r3, #1
1004d818:	4003      	ands	r3, r0
1004d81a:	d104      	bne.n	1004d826 <llc_check_sreq_or_creq_tx_addr_res_off+0x36>
1004d81c:	2900      	cmp	r1, #0
1004d81e:	d112      	bne.n	1004d846 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004d820:	2102      	movs	r1, #2
1004d822:	4008      	ands	r0, r1
1004d824:	d00f      	beq.n	1004d846 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004d826:	4809      	ldr	r0, [pc, #36]	@ (1004d84c <__arm_cp.1_0>)
1004d828:	6800      	ldr	r0, [r0, #0]
1004d82a:	219c      	movs	r1, #156	@ 0x9c
1004d82c:	5841      	ldr	r1, [r0, r1]
1004d82e:	68c8      	ldr	r0, [r1, #12]
1004d830:	6909      	ldr	r1, [r1, #16]
1004d832:	ab03      	add	r3, sp, #12
1004d834:	2600      	movs	r6, #0
1004d836:	9600      	str	r6, [sp, #0]
1004d838:	9301      	str	r3, [sp, #4]
1004d83a:	462b      	mov	r3, r5
1004d83c:	f7ff fe40 	bl	1004d4c0 <addr8_list_search>
1004d840:	2800      	cmp	r0, #0
1004d842:	d100      	bne.n	1004d846 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004d844:	24ff      	movs	r4, #255	@ 0xff
1004d846:	4620      	mov	r0, r4
1004d848:	b004      	add	sp, #16
1004d84a:	bd70      	pop	{r4, r5, r6, pc}

1004d84c <__arm_cp.1_0>:
1004d84c:	200006c8 	.word	0x200006c8

1004d850 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
1004d850:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d852:	b087      	sub	sp, #28
1004d854:	1ecd      	subs	r5, r1, #3
1004d856:	21ff      	movs	r1, #255	@ 0xff
1004d858:	24fd      	movs	r4, #253	@ 0xfd
1004d85a:	4225      	tst	r5, r4
1004d85c:	d11c      	bne.n	1004d898 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1004d85e:	2a00      	cmp	r2, #0
1004d860:	d01a      	beq.n	1004d898 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1004d862:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1004d864:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004d866:	680c      	ldr	r4, [r1, #0]
1004d868:	9405      	str	r4, [sp, #20]
1004d86a:	9306      	str	r3, [sp, #24]
1004d86c:	684b      	ldr	r3, [r1, #4]
1004d86e:	c882      	ldmia	r0!, {r1, r7}
1004d870:	20ff      	movs	r0, #255	@ 0xff
1004d872:	0600      	lsls	r0, r0, #24
1004d874:	463c      	mov	r4, r7
1004d876:	4384      	bics	r4, r0
1004d878:	c612      	stmia	r6!, {r1, r4}
1004d87a:	9303      	str	r3, [sp, #12]
1004d87c:	9805      	ldr	r0, [sp, #20]
1004d87e:	9002      	str	r0, [sp, #8]
1004d880:	9806      	ldr	r0, [sp, #24]
1004d882:	9001      	str	r0, [sp, #4]
1004d884:	4268      	negs	r0, r5
1004d886:	4168      	adcs	r0, r5
1004d888:	9000      	str	r0, [sp, #0]
1004d88a:	b2c8      	uxtb	r0, r1
1004d88c:	0752      	lsls	r2, r2, #29
1004d88e:	0fd3      	lsrs	r3, r2, #31
1004d890:	463a      	mov	r2, r7
1004d892:	f7ff ffad 	bl	1004d7f0 <llc_check_sreq_or_creq_tx_addr_res_off>
1004d896:	4601      	mov	r1, r0
1004d898:	4608      	mov	r0, r1
1004d89a:	b007      	add	sp, #28
1004d89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1004d8a0 <llc_wl_mem_allocate>:
1004d8a0:	b510      	push	{r4, lr}
1004d8a2:	2401      	movs	r4, #1
1004d8a4:	4084      	lsls	r4, r0
1004d8a6:	2108      	movs	r1, #8
1004d8a8:	4620      	mov	r0, r4
1004d8aa:	f7ff f9a5 	bl	1004cbf8 <csmem_mem_0_assign>
1004d8ae:	4903      	ldr	r1, [pc, #12]	@ (1004d8bc <__arm_cp.0_0>)
1004d8b0:	6809      	ldr	r1, [r1, #0]
1004d8b2:	229c      	movs	r2, #156	@ 0x9c
1004d8b4:	5889      	ldr	r1, [r1, r2]
1004d8b6:	744c      	strb	r4, [r1, #17]
1004d8b8:	60c8      	str	r0, [r1, #12]
1004d8ba:	bd10      	pop	{r4, pc}

1004d8bc <__arm_cp.0_0>:
1004d8bc:	200006c8 	.word	0x200006c8

1004d8c0 <llc_padv_mem_allocate_ucfg_weak>:
1004d8c0:	4770      	bx	lr

1004d8c2 <llc_padv_init_ucfg_weak>:
1004d8c2:	4770      	bx	lr

1004d8c4 <llc_priv_mem_allocate>:
1004d8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d8c6:	2800      	cmp	r0, #0
1004d8c8:	d046      	beq.n	1004d958 <llc_priv_mem_allocate+0x94>
1004d8ca:	460e      	mov	r6, r1
1004d8cc:	2501      	movs	r5, #1
1004d8ce:	2168      	movs	r1, #104	@ 0x68
1004d8d0:	4628      	mov	r0, r5
1004d8d2:	f7ff f991 	bl	1004cbf8 <csmem_mem_0_assign>
1004d8d6:	4f21      	ldr	r7, [pc, #132]	@ (1004d95c <__arm_cp.0_0>)
1004d8d8:	6839      	ldr	r1, [r7, #0]
1004d8da:	249c      	movs	r4, #156	@ 0x9c
1004d8dc:	5909      	ldr	r1, [r1, r4]
1004d8de:	6088      	str	r0, [r1, #8]
1004d8e0:	40b5      	lsls	r5, r6
1004d8e2:	b2ee      	uxtb	r6, r5
1004d8e4:	2108      	movs	r1, #8
1004d8e6:	4630      	mov	r0, r6
1004d8e8:	f7ff f986 	bl	1004cbf8 <csmem_mem_0_assign>
1004d8ec:	6839      	ldr	r1, [r7, #0]
1004d8ee:	5909      	ldr	r1, [r1, r4]
1004d8f0:	6889      	ldr	r1, [r1, #8]
1004d8f2:	724d      	strb	r5, [r1, #9]
1004d8f4:	6048      	str	r0, [r1, #4]
1004d8f6:	9600      	str	r6, [sp, #0]
1004d8f8:	0075      	lsls	r5, r6, #1
1004d8fa:	2611      	movs	r6, #17
1004d8fc:	2e21      	cmp	r6, #33	@ 0x21
1004d8fe:	d00f      	beq.n	1004d920 <llc_priv_mem_allocate+0x5c>
1004d900:	2108      	movs	r1, #8
1004d902:	4628      	mov	r0, r5
1004d904:	f7ff f978 	bl	1004cbf8 <csmem_mem_0_assign>
1004d908:	6839      	ldr	r1, [r7, #0]
1004d90a:	5909      	ldr	r1, [r1, r4]
1004d90c:	6889      	ldr	r1, [r1, #8]
1004d90e:	1989      	adds	r1, r1, r6
1004d910:	1f49      	subs	r1, r1, #5
1004d912:	6008      	str	r0, [r1, #0]
1004d914:	6838      	ldr	r0, [r7, #0]
1004d916:	5900      	ldr	r0, [r0, r4]
1004d918:	6880      	ldr	r0, [r0, #8]
1004d91a:	5585      	strb	r5, [r0, r6]
1004d91c:	3608      	adds	r6, #8
1004d91e:	e7ed      	b.n	1004d8fc <llc_priv_mem_allocate+0x38>
1004d920:	2128      	movs	r1, #40	@ 0x28
1004d922:	9800      	ldr	r0, [sp, #0]
1004d924:	f7ff f968 	bl	1004cbf8 <csmem_mem_0_assign>
1004d928:	6839      	ldr	r1, [r7, #0]
1004d92a:	5909      	ldr	r1, [r1, r4]
1004d92c:	6889      	ldr	r1, [r1, #8]
1004d92e:	6008      	str	r0, [r1, #0]
1004d930:	480b      	ldr	r0, [pc, #44]	@ (1004d960 <__arm_cp.0_1>)
1004d932:	2502      	movs	r5, #2
1004d934:	2601      	movs	r6, #1
1004d936:	4629      	mov	r1, r5
1004d938:	4632      	mov	r2, r6
1004d93a:	f7ff f94b 	bl	1004cbd4 <csmem_mem_assign>
1004d93e:	6839      	ldr	r1, [r7, #0]
1004d940:	5909      	ldr	r1, [r1, r4]
1004d942:	6889      	ldr	r1, [r1, #8]
1004d944:	6488      	str	r0, [r1, #72]	@ 0x48
1004d946:	4806      	ldr	r0, [pc, #24]	@ (1004d960 <__arm_cp.0_1>)
1004d948:	4631      	mov	r1, r6
1004d94a:	462a      	mov	r2, r5
1004d94c:	f7ff f942 	bl	1004cbd4 <csmem_mem_assign>
1004d950:	6839      	ldr	r1, [r7, #0]
1004d952:	5909      	ldr	r1, [r1, r4]
1004d954:	6889      	ldr	r1, [r1, #8]
1004d956:	64c8      	str	r0, [r1, #76]	@ 0x4c
1004d958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d95a:	46c0      	nop			@ (mov r8, r8)

1004d95c <__arm_cp.0_0>:
1004d95c:	200006c8 	.word	0x200006c8

1004d960 <__arm_cp.0_1>:
1004d960:	200006d4 	.word	0x200006d4

1004d964 <llc_pscan_isr_ucfg_weak>:
1004d964:	2000      	movs	r0, #0
1004d966:	4770      	bx	lr

1004d968 <llc_pscan_get_cntxt_per_p>:
1004d968:	2190      	movs	r1, #144	@ 0x90
1004d96a:	4341      	muls	r1, r0
1004d96c:	4804      	ldr	r0, [pc, #16]	@ (1004d980 <__arm_cp.1_0>)
1004d96e:	6800      	ldr	r0, [r0, #0]
1004d970:	229c      	movs	r2, #156	@ 0x9c
1004d972:	5880      	ldr	r0, [r0, r2]
1004d974:	6840      	ldr	r0, [r0, #4]
1004d976:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1004d978:	6800      	ldr	r0, [r0, #0]
1004d97a:	6800      	ldr	r0, [r0, #0]
1004d97c:	1840      	adds	r0, r0, r1
1004d97e:	4770      	bx	lr

1004d980 <__arm_cp.1_0>:
1004d980:	200006c8 	.word	0x200006c8

1004d984 <llc_pscan_init_ucfg_weak>:
1004d984:	4770      	bx	lr

1004d986 <llc_pscan_mem_allocate_ucfg_weak>:
1004d986:	4770      	bx	lr

1004d988 <llc_pscan_wr_mem_allocate_ucfg_weak>:
1004d988:	b510      	push	{r4, lr}
1004d98a:	2801      	cmp	r0, #1
1004d98c:	d110      	bne.n	1004d9b0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004d98e:	2901      	cmp	r1, #1
1004d990:	d10e      	bne.n	1004d9b0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004d992:	2a01      	cmp	r2, #1
1004d994:	d10c      	bne.n	1004d9b0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004d996:	2400      	movs	r4, #0
1004d998:	4620      	mov	r0, r4
1004d99a:	f7ff ffe5 	bl	1004d968 <llc_pscan_get_cntxt_per_p>
1004d99e:	3014      	adds	r0, #20
1004d9a0:	4904      	ldr	r1, [pc, #16]	@ (1004d9b4 <__arm_cp.5_0>)
1004d9a2:	7f89      	ldrb	r1, [r1, #30]
1004d9a4:	2900      	cmp	r1, #0
1004d9a6:	d003      	beq.n	1004d9b0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004d9a8:	6004      	str	r4, [r0, #0]
1004d9aa:	3090      	adds	r0, #144	@ 0x90
1004d9ac:	1e49      	subs	r1, r1, #1
1004d9ae:	e7f9      	b.n	1004d9a4 <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1004d9b0:	bd10      	pop	{r4, pc}
1004d9b2:	46c0      	nop			@ (mov r8, r8)

1004d9b4 <__arm_cp.5_0>:
1004d9b4:	200006d8 	.word	0x200006d8

1004d9b8 <llc_scan_isr_uncoded_ucfg_weak>:
1004d9b8:	2000      	movs	r0, #0
1004d9ba:	4770      	bx	lr

1004d9bc <llc_scan_isr_coded_ucfg_weak>:
1004d9bc:	2000      	movs	r0, #0
1004d9be:	4770      	bx	lr

1004d9c0 <smp_fsm_process_actions_wrt_state_tsk_ucfg_weak>:
1004d9c0:	4770      	bx	lr

1004d9c2 <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
1004d9c2:	4770      	bx	lr

1004d9c4 <smp_rxp_process_rxed_packets_tsk_ucfg_weak>:
1004d9c4:	4770      	bx	lr
	...

1004d9c8 <std>:
1004d9c8:	2300      	movs	r3, #0
1004d9ca:	b510      	push	{r4, lr}
1004d9cc:	0004      	movs	r4, r0
1004d9ce:	6003      	str	r3, [r0, #0]
1004d9d0:	6043      	str	r3, [r0, #4]
1004d9d2:	6083      	str	r3, [r0, #8]
1004d9d4:	8181      	strh	r1, [r0, #12]
1004d9d6:	6643      	str	r3, [r0, #100]	@ 0x64
1004d9d8:	81c2      	strh	r2, [r0, #14]
1004d9da:	6103      	str	r3, [r0, #16]
1004d9dc:	6143      	str	r3, [r0, #20]
1004d9de:	6183      	str	r3, [r0, #24]
1004d9e0:	0019      	movs	r1, r3
1004d9e2:	2208      	movs	r2, #8
1004d9e4:	305c      	adds	r0, #92	@ 0x5c
1004d9e6:	f000 fad3 	bl	1004df90 <memset>
1004d9ea:	4b0b      	ldr	r3, [pc, #44]	@ (1004da18 <std+0x50>)
1004d9ec:	6224      	str	r4, [r4, #32]
1004d9ee:	6263      	str	r3, [r4, #36]	@ 0x24
1004d9f0:	4b0a      	ldr	r3, [pc, #40]	@ (1004da1c <std+0x54>)
1004d9f2:	62a3      	str	r3, [r4, #40]	@ 0x28
1004d9f4:	4b0a      	ldr	r3, [pc, #40]	@ (1004da20 <std+0x58>)
1004d9f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
1004d9f8:	4b0a      	ldr	r3, [pc, #40]	@ (1004da24 <std+0x5c>)
1004d9fa:	6323      	str	r3, [r4, #48]	@ 0x30
1004d9fc:	4b0a      	ldr	r3, [pc, #40]	@ (1004da28 <std+0x60>)
1004d9fe:	429c      	cmp	r4, r3
1004da00:	d005      	beq.n	1004da0e <std+0x46>
1004da02:	4b0a      	ldr	r3, [pc, #40]	@ (1004da2c <std+0x64>)
1004da04:	429c      	cmp	r4, r3
1004da06:	d002      	beq.n	1004da0e <std+0x46>
1004da08:	4b09      	ldr	r3, [pc, #36]	@ (1004da30 <std+0x68>)
1004da0a:	429c      	cmp	r4, r3
1004da0c:	d103      	bne.n	1004da16 <std+0x4e>
1004da0e:	0020      	movs	r0, r4
1004da10:	3058      	adds	r0, #88	@ 0x58
1004da12:	f000 fb19 	bl	1004e048 <__retarget_lock_init_recursive>
1004da16:	bd10      	pop	{r4, pc}
1004da18:	1004dd9d 	.word	0x1004dd9d
1004da1c:	1004ddc5 	.word	0x1004ddc5
1004da20:	1004ddfd 	.word	0x1004ddfd
1004da24:	1004de29 	.word	0x1004de29
1004da28:	20000710 	.word	0x20000710
1004da2c:	20000778 	.word	0x20000778
1004da30:	200007e0 	.word	0x200007e0

1004da34 <stdio_exit_handler>:
1004da34:	b510      	push	{r4, lr}
1004da36:	4a03      	ldr	r2, [pc, #12]	@ (1004da44 <stdio_exit_handler+0x10>)
1004da38:	4903      	ldr	r1, [pc, #12]	@ (1004da48 <stdio_exit_handler+0x14>)
1004da3a:	4804      	ldr	r0, [pc, #16]	@ (1004da4c <stdio_exit_handler+0x18>)
1004da3c:	f000 f86c 	bl	1004db18 <_fwalk_sglue>
1004da40:	bd10      	pop	{r4, pc}
1004da42:	46c0      	nop			@ (mov r8, r8)
1004da44:	200008b0 	.word	0x200008b0
1004da48:	1004e8fd 	.word	0x1004e8fd
1004da4c:	200008c0 	.word	0x200008c0

1004da50 <cleanup_stdio>:
1004da50:	6841      	ldr	r1, [r0, #4]
1004da52:	4b0b      	ldr	r3, [pc, #44]	@ (1004da80 <cleanup_stdio+0x30>)
1004da54:	b510      	push	{r4, lr}
1004da56:	0004      	movs	r4, r0
1004da58:	4299      	cmp	r1, r3
1004da5a:	d001      	beq.n	1004da60 <cleanup_stdio+0x10>
1004da5c:	f000 ff4e 	bl	1004e8fc <_fflush_r>
1004da60:	68a1      	ldr	r1, [r4, #8]
1004da62:	4b08      	ldr	r3, [pc, #32]	@ (1004da84 <cleanup_stdio+0x34>)
1004da64:	4299      	cmp	r1, r3
1004da66:	d002      	beq.n	1004da6e <cleanup_stdio+0x1e>
1004da68:	0020      	movs	r0, r4
1004da6a:	f000 ff47 	bl	1004e8fc <_fflush_r>
1004da6e:	68e1      	ldr	r1, [r4, #12]
1004da70:	4b05      	ldr	r3, [pc, #20]	@ (1004da88 <cleanup_stdio+0x38>)
1004da72:	4299      	cmp	r1, r3
1004da74:	d002      	beq.n	1004da7c <cleanup_stdio+0x2c>
1004da76:	0020      	movs	r0, r4
1004da78:	f000 ff40 	bl	1004e8fc <_fflush_r>
1004da7c:	bd10      	pop	{r4, pc}
1004da7e:	46c0      	nop			@ (mov r8, r8)
1004da80:	20000710 	.word	0x20000710
1004da84:	20000778 	.word	0x20000778
1004da88:	200007e0 	.word	0x200007e0

1004da8c <global_stdio_init.part.0>:
1004da8c:	b510      	push	{r4, lr}
1004da8e:	4b09      	ldr	r3, [pc, #36]	@ (1004dab4 <global_stdio_init.part.0+0x28>)
1004da90:	4a09      	ldr	r2, [pc, #36]	@ (1004dab8 <global_stdio_init.part.0+0x2c>)
1004da92:	2104      	movs	r1, #4
1004da94:	601a      	str	r2, [r3, #0]
1004da96:	4809      	ldr	r0, [pc, #36]	@ (1004dabc <global_stdio_init.part.0+0x30>)
1004da98:	2200      	movs	r2, #0
1004da9a:	f7ff ff95 	bl	1004d9c8 <std>
1004da9e:	2201      	movs	r2, #1
1004daa0:	2109      	movs	r1, #9
1004daa2:	4807      	ldr	r0, [pc, #28]	@ (1004dac0 <global_stdio_init.part.0+0x34>)
1004daa4:	f7ff ff90 	bl	1004d9c8 <std>
1004daa8:	2202      	movs	r2, #2
1004daaa:	2112      	movs	r1, #18
1004daac:	4805      	ldr	r0, [pc, #20]	@ (1004dac4 <global_stdio_init.part.0+0x38>)
1004daae:	f7ff ff8b 	bl	1004d9c8 <std>
1004dab2:	bd10      	pop	{r4, pc}
1004dab4:	20000848 	.word	0x20000848
1004dab8:	1004da35 	.word	0x1004da35
1004dabc:	20000710 	.word	0x20000710
1004dac0:	20000778 	.word	0x20000778
1004dac4:	200007e0 	.word	0x200007e0

1004dac8 <__sfp_lock_acquire>:
1004dac8:	b510      	push	{r4, lr}
1004daca:	4802      	ldr	r0, [pc, #8]	@ (1004dad4 <__sfp_lock_acquire+0xc>)
1004dacc:	f000 fabd 	bl	1004e04a <__retarget_lock_acquire_recursive>
1004dad0:	bd10      	pop	{r4, pc}
1004dad2:	46c0      	nop			@ (mov r8, r8)
1004dad4:	20000851 	.word	0x20000851

1004dad8 <__sfp_lock_release>:
1004dad8:	b510      	push	{r4, lr}
1004dada:	4802      	ldr	r0, [pc, #8]	@ (1004dae4 <__sfp_lock_release+0xc>)
1004dadc:	f000 fab6 	bl	1004e04c <__retarget_lock_release_recursive>
1004dae0:	bd10      	pop	{r4, pc}
1004dae2:	46c0      	nop			@ (mov r8, r8)
1004dae4:	20000851 	.word	0x20000851

1004dae8 <__sinit>:
1004dae8:	b510      	push	{r4, lr}
1004daea:	0004      	movs	r4, r0
1004daec:	f7ff ffec 	bl	1004dac8 <__sfp_lock_acquire>
1004daf0:	6a23      	ldr	r3, [r4, #32]
1004daf2:	2b00      	cmp	r3, #0
1004daf4:	d002      	beq.n	1004dafc <__sinit+0x14>
1004daf6:	f7ff ffef 	bl	1004dad8 <__sfp_lock_release>
1004dafa:	bd10      	pop	{r4, pc}
1004dafc:	4b04      	ldr	r3, [pc, #16]	@ (1004db10 <__sinit+0x28>)
1004dafe:	6223      	str	r3, [r4, #32]
1004db00:	4b04      	ldr	r3, [pc, #16]	@ (1004db14 <__sinit+0x2c>)
1004db02:	681b      	ldr	r3, [r3, #0]
1004db04:	2b00      	cmp	r3, #0
1004db06:	d1f6      	bne.n	1004daf6 <__sinit+0xe>
1004db08:	f7ff ffc0 	bl	1004da8c <global_stdio_init.part.0>
1004db0c:	e7f3      	b.n	1004daf6 <__sinit+0xe>
1004db0e:	46c0      	nop			@ (mov r8, r8)
1004db10:	1004da51 	.word	0x1004da51
1004db14:	20000848 	.word	0x20000848

1004db18 <_fwalk_sglue>:
1004db18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004db1a:	0014      	movs	r4, r2
1004db1c:	2600      	movs	r6, #0
1004db1e:	9000      	str	r0, [sp, #0]
1004db20:	9101      	str	r1, [sp, #4]
1004db22:	68a5      	ldr	r5, [r4, #8]
1004db24:	6867      	ldr	r7, [r4, #4]
1004db26:	3f01      	subs	r7, #1
1004db28:	d504      	bpl.n	1004db34 <_fwalk_sglue+0x1c>
1004db2a:	6824      	ldr	r4, [r4, #0]
1004db2c:	2c00      	cmp	r4, #0
1004db2e:	d1f8      	bne.n	1004db22 <_fwalk_sglue+0xa>
1004db30:	0030      	movs	r0, r6
1004db32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004db34:	89ab      	ldrh	r3, [r5, #12]
1004db36:	2b01      	cmp	r3, #1
1004db38:	d908      	bls.n	1004db4c <_fwalk_sglue+0x34>
1004db3a:	220e      	movs	r2, #14
1004db3c:	5eab      	ldrsh	r3, [r5, r2]
1004db3e:	3301      	adds	r3, #1
1004db40:	d004      	beq.n	1004db4c <_fwalk_sglue+0x34>
1004db42:	0029      	movs	r1, r5
1004db44:	9800      	ldr	r0, [sp, #0]
1004db46:	9b01      	ldr	r3, [sp, #4]
1004db48:	4798      	blx	r3
1004db4a:	4306      	orrs	r6, r0
1004db4c:	3568      	adds	r5, #104	@ 0x68
1004db4e:	e7ea      	b.n	1004db26 <_fwalk_sglue+0xe>

1004db50 <iprintf>:
1004db50:	b40f      	push	{r0, r1, r2, r3}
1004db52:	b507      	push	{r0, r1, r2, lr}
1004db54:	4905      	ldr	r1, [pc, #20]	@ (1004db6c <iprintf+0x1c>)
1004db56:	ab04      	add	r3, sp, #16
1004db58:	6808      	ldr	r0, [r1, #0]
1004db5a:	cb04      	ldmia	r3!, {r2}
1004db5c:	6881      	ldr	r1, [r0, #8]
1004db5e:	9301      	str	r3, [sp, #4]
1004db60:	f000 fbac 	bl	1004e2bc <_vfiprintf_r>
1004db64:	b003      	add	sp, #12
1004db66:	bc08      	pop	{r3}
1004db68:	b004      	add	sp, #16
1004db6a:	4718      	bx	r3
1004db6c:	200008bc 	.word	0x200008bc

1004db70 <_puts_r>:
1004db70:	6a03      	ldr	r3, [r0, #32]
1004db72:	b570      	push	{r4, r5, r6, lr}
1004db74:	0005      	movs	r5, r0
1004db76:	000e      	movs	r6, r1
1004db78:	6884      	ldr	r4, [r0, #8]
1004db7a:	2b00      	cmp	r3, #0
1004db7c:	d101      	bne.n	1004db82 <_puts_r+0x12>
1004db7e:	f7ff ffb3 	bl	1004dae8 <__sinit>
1004db82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004db84:	07db      	lsls	r3, r3, #31
1004db86:	d405      	bmi.n	1004db94 <_puts_r+0x24>
1004db88:	89a3      	ldrh	r3, [r4, #12]
1004db8a:	059b      	lsls	r3, r3, #22
1004db8c:	d402      	bmi.n	1004db94 <_puts_r+0x24>
1004db8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004db90:	f000 fa5b 	bl	1004e04a <__retarget_lock_acquire_recursive>
1004db94:	89a3      	ldrh	r3, [r4, #12]
1004db96:	071b      	lsls	r3, r3, #28
1004db98:	d502      	bpl.n	1004dba0 <_puts_r+0x30>
1004db9a:	6923      	ldr	r3, [r4, #16]
1004db9c:	2b00      	cmp	r3, #0
1004db9e:	d11f      	bne.n	1004dbe0 <_puts_r+0x70>
1004dba0:	0021      	movs	r1, r4
1004dba2:	0028      	movs	r0, r5
1004dba4:	f000 f988 	bl	1004deb8 <__swsetup_r>
1004dba8:	2800      	cmp	r0, #0
1004dbaa:	d019      	beq.n	1004dbe0 <_puts_r+0x70>
1004dbac:	2501      	movs	r5, #1
1004dbae:	426d      	negs	r5, r5
1004dbb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004dbb2:	07db      	lsls	r3, r3, #31
1004dbb4:	d405      	bmi.n	1004dbc2 <_puts_r+0x52>
1004dbb6:	89a3      	ldrh	r3, [r4, #12]
1004dbb8:	059b      	lsls	r3, r3, #22
1004dbba:	d402      	bmi.n	1004dbc2 <_puts_r+0x52>
1004dbbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004dbbe:	f000 fa45 	bl	1004e04c <__retarget_lock_release_recursive>
1004dbc2:	0028      	movs	r0, r5
1004dbc4:	bd70      	pop	{r4, r5, r6, pc}
1004dbc6:	3601      	adds	r6, #1
1004dbc8:	60a3      	str	r3, [r4, #8]
1004dbca:	2b00      	cmp	r3, #0
1004dbcc:	da04      	bge.n	1004dbd8 <_puts_r+0x68>
1004dbce:	69a2      	ldr	r2, [r4, #24]
1004dbd0:	429a      	cmp	r2, r3
1004dbd2:	dc16      	bgt.n	1004dc02 <_puts_r+0x92>
1004dbd4:	290a      	cmp	r1, #10
1004dbd6:	d014      	beq.n	1004dc02 <_puts_r+0x92>
1004dbd8:	6823      	ldr	r3, [r4, #0]
1004dbda:	1c5a      	adds	r2, r3, #1
1004dbdc:	6022      	str	r2, [r4, #0]
1004dbde:	7019      	strb	r1, [r3, #0]
1004dbe0:	68a3      	ldr	r3, [r4, #8]
1004dbe2:	7831      	ldrb	r1, [r6, #0]
1004dbe4:	3b01      	subs	r3, #1
1004dbe6:	2900      	cmp	r1, #0
1004dbe8:	d1ed      	bne.n	1004dbc6 <_puts_r+0x56>
1004dbea:	60a3      	str	r3, [r4, #8]
1004dbec:	2b00      	cmp	r3, #0
1004dbee:	da0f      	bge.n	1004dc10 <_puts_r+0xa0>
1004dbf0:	0022      	movs	r2, r4
1004dbf2:	0028      	movs	r0, r5
1004dbf4:	310a      	adds	r1, #10
1004dbf6:	f000 f91d 	bl	1004de34 <__swbuf_r>
1004dbfa:	3001      	adds	r0, #1
1004dbfc:	d0d6      	beq.n	1004dbac <_puts_r+0x3c>
1004dbfe:	250a      	movs	r5, #10
1004dc00:	e7d6      	b.n	1004dbb0 <_puts_r+0x40>
1004dc02:	0022      	movs	r2, r4
1004dc04:	0028      	movs	r0, r5
1004dc06:	f000 f915 	bl	1004de34 <__swbuf_r>
1004dc0a:	3001      	adds	r0, #1
1004dc0c:	d1e8      	bne.n	1004dbe0 <_puts_r+0x70>
1004dc0e:	e7cd      	b.n	1004dbac <_puts_r+0x3c>
1004dc10:	6823      	ldr	r3, [r4, #0]
1004dc12:	1c5a      	adds	r2, r3, #1
1004dc14:	6022      	str	r2, [r4, #0]
1004dc16:	220a      	movs	r2, #10
1004dc18:	701a      	strb	r2, [r3, #0]
1004dc1a:	e7f0      	b.n	1004dbfe <_puts_r+0x8e>

1004dc1c <puts>:
1004dc1c:	b510      	push	{r4, lr}
1004dc1e:	4b03      	ldr	r3, [pc, #12]	@ (1004dc2c <puts+0x10>)
1004dc20:	0001      	movs	r1, r0
1004dc22:	6818      	ldr	r0, [r3, #0]
1004dc24:	f7ff ffa4 	bl	1004db70 <_puts_r>
1004dc28:	bd10      	pop	{r4, pc}
1004dc2a:	46c0      	nop			@ (mov r8, r8)
1004dc2c:	200008bc 	.word	0x200008bc

1004dc30 <setvbuf>:
1004dc30:	b5f0      	push	{r4, r5, r6, r7, lr}
1004dc32:	001d      	movs	r5, r3
1004dc34:	4b57      	ldr	r3, [pc, #348]	@ (1004dd94 <setvbuf+0x164>)
1004dc36:	b085      	sub	sp, #20
1004dc38:	681e      	ldr	r6, [r3, #0]
1004dc3a:	0004      	movs	r4, r0
1004dc3c:	000f      	movs	r7, r1
1004dc3e:	9200      	str	r2, [sp, #0]
1004dc40:	2e00      	cmp	r6, #0
1004dc42:	d005      	beq.n	1004dc50 <setvbuf+0x20>
1004dc44:	6a33      	ldr	r3, [r6, #32]
1004dc46:	2b00      	cmp	r3, #0
1004dc48:	d102      	bne.n	1004dc50 <setvbuf+0x20>
1004dc4a:	0030      	movs	r0, r6
1004dc4c:	f7ff ff4c 	bl	1004dae8 <__sinit>
1004dc50:	9b00      	ldr	r3, [sp, #0]
1004dc52:	2b02      	cmp	r3, #2
1004dc54:	d005      	beq.n	1004dc62 <setvbuf+0x32>
1004dc56:	2b01      	cmp	r3, #1
1004dc58:	d900      	bls.n	1004dc5c <setvbuf+0x2c>
1004dc5a:	e097      	b.n	1004dd8c <setvbuf+0x15c>
1004dc5c:	2d00      	cmp	r5, #0
1004dc5e:	da00      	bge.n	1004dc62 <setvbuf+0x32>
1004dc60:	e094      	b.n	1004dd8c <setvbuf+0x15c>
1004dc62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004dc64:	07db      	lsls	r3, r3, #31
1004dc66:	d405      	bmi.n	1004dc74 <setvbuf+0x44>
1004dc68:	89a3      	ldrh	r3, [r4, #12]
1004dc6a:	059b      	lsls	r3, r3, #22
1004dc6c:	d402      	bmi.n	1004dc74 <setvbuf+0x44>
1004dc6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004dc70:	f000 f9eb 	bl	1004e04a <__retarget_lock_acquire_recursive>
1004dc74:	0021      	movs	r1, r4
1004dc76:	0030      	movs	r0, r6
1004dc78:	f000 fe40 	bl	1004e8fc <_fflush_r>
1004dc7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004dc7e:	2900      	cmp	r1, #0
1004dc80:	d008      	beq.n	1004dc94 <setvbuf+0x64>
1004dc82:	0023      	movs	r3, r4
1004dc84:	3344      	adds	r3, #68	@ 0x44
1004dc86:	4299      	cmp	r1, r3
1004dc88:	d002      	beq.n	1004dc90 <setvbuf+0x60>
1004dc8a:	0030      	movs	r0, r6
1004dc8c:	f000 f9e8 	bl	1004e060 <_free_r>
1004dc90:	2300      	movs	r3, #0
1004dc92:	6363      	str	r3, [r4, #52]	@ 0x34
1004dc94:	2300      	movs	r3, #0
1004dc96:	61a3      	str	r3, [r4, #24]
1004dc98:	6063      	str	r3, [r4, #4]
1004dc9a:	89a3      	ldrh	r3, [r4, #12]
1004dc9c:	061b      	lsls	r3, r3, #24
1004dc9e:	d503      	bpl.n	1004dca8 <setvbuf+0x78>
1004dca0:	0030      	movs	r0, r6
1004dca2:	6921      	ldr	r1, [r4, #16]
1004dca4:	f000 f9dc 	bl	1004e060 <_free_r>
1004dca8:	89a3      	ldrh	r3, [r4, #12]
1004dcaa:	4a3b      	ldr	r2, [pc, #236]	@ (1004dd98 <setvbuf+0x168>)
1004dcac:	4013      	ands	r3, r2
1004dcae:	81a3      	strh	r3, [r4, #12]
1004dcb0:	9b00      	ldr	r3, [sp, #0]
1004dcb2:	2b02      	cmp	r3, #2
1004dcb4:	d060      	beq.n	1004dd78 <setvbuf+0x148>
1004dcb6:	ab03      	add	r3, sp, #12
1004dcb8:	0021      	movs	r1, r4
1004dcba:	0030      	movs	r0, r6
1004dcbc:	aa02      	add	r2, sp, #8
1004dcbe:	f000 fe49 	bl	1004e954 <__swhatbuf_r>
1004dcc2:	89a3      	ldrh	r3, [r4, #12]
1004dcc4:	4303      	orrs	r3, r0
1004dcc6:	81a3      	strh	r3, [r4, #12]
1004dcc8:	2d00      	cmp	r5, #0
1004dcca:	d124      	bne.n	1004dd16 <setvbuf+0xe6>
1004dccc:	9d02      	ldr	r5, [sp, #8]
1004dcce:	0028      	movs	r0, r5
1004dcd0:	f000 fa10 	bl	1004e0f4 <malloc>
1004dcd4:	9501      	str	r5, [sp, #4]
1004dcd6:	1e07      	subs	r7, r0, #0
1004dcd8:	d148      	bne.n	1004dd6c <setvbuf+0x13c>
1004dcda:	9b02      	ldr	r3, [sp, #8]
1004dcdc:	9301      	str	r3, [sp, #4]
1004dcde:	42ab      	cmp	r3, r5
1004dce0:	d13f      	bne.n	1004dd62 <setvbuf+0x132>
1004dce2:	2501      	movs	r5, #1
1004dce4:	426d      	negs	r5, r5
1004dce6:	220c      	movs	r2, #12
1004dce8:	5ea3      	ldrsh	r3, [r4, r2]
1004dcea:	2202      	movs	r2, #2
1004dcec:	431a      	orrs	r2, r3
1004dcee:	81a2      	strh	r2, [r4, #12]
1004dcf0:	2200      	movs	r2, #0
1004dcf2:	60a2      	str	r2, [r4, #8]
1004dcf4:	0022      	movs	r2, r4
1004dcf6:	3247      	adds	r2, #71	@ 0x47
1004dcf8:	6022      	str	r2, [r4, #0]
1004dcfa:	6122      	str	r2, [r4, #16]
1004dcfc:	2201      	movs	r2, #1
1004dcfe:	6e61      	ldr	r1, [r4, #100]	@ 0x64
1004dd00:	6162      	str	r2, [r4, #20]
1004dd02:	4211      	tst	r1, r2
1004dd04:	d104      	bne.n	1004dd10 <setvbuf+0xe0>
1004dd06:	059b      	lsls	r3, r3, #22
1004dd08:	d402      	bmi.n	1004dd10 <setvbuf+0xe0>
1004dd0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004dd0c:	f000 f99e 	bl	1004e04c <__retarget_lock_release_recursive>
1004dd10:	0028      	movs	r0, r5
1004dd12:	b005      	add	sp, #20
1004dd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004dd16:	2f00      	cmp	r7, #0
1004dd18:	d0d9      	beq.n	1004dcce <setvbuf+0x9e>
1004dd1a:	6a33      	ldr	r3, [r6, #32]
1004dd1c:	2b00      	cmp	r3, #0
1004dd1e:	d102      	bne.n	1004dd26 <setvbuf+0xf6>
1004dd20:	0030      	movs	r0, r6
1004dd22:	f7ff fee1 	bl	1004dae8 <__sinit>
1004dd26:	9b00      	ldr	r3, [sp, #0]
1004dd28:	2b01      	cmp	r3, #1
1004dd2a:	d103      	bne.n	1004dd34 <setvbuf+0x104>
1004dd2c:	89a3      	ldrh	r3, [r4, #12]
1004dd2e:	9a00      	ldr	r2, [sp, #0]
1004dd30:	431a      	orrs	r2, r3
1004dd32:	81a2      	strh	r2, [r4, #12]
1004dd34:	220c      	movs	r2, #12
1004dd36:	5ea3      	ldrsh	r3, [r4, r2]
1004dd38:	2208      	movs	r2, #8
1004dd3a:	0019      	movs	r1, r3
1004dd3c:	6027      	str	r7, [r4, #0]
1004dd3e:	6127      	str	r7, [r4, #16]
1004dd40:	6165      	str	r5, [r4, #20]
1004dd42:	4011      	ands	r1, r2
1004dd44:	4213      	tst	r3, r2
1004dd46:	d01b      	beq.n	1004dd80 <setvbuf+0x150>
1004dd48:	07da      	lsls	r2, r3, #31
1004dd4a:	d517      	bpl.n	1004dd7c <setvbuf+0x14c>
1004dd4c:	2200      	movs	r2, #0
1004dd4e:	426d      	negs	r5, r5
1004dd50:	60a2      	str	r2, [r4, #8]
1004dd52:	61a5      	str	r5, [r4, #24]
1004dd54:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004dd56:	07d2      	lsls	r2, r2, #31
1004dd58:	d401      	bmi.n	1004dd5e <setvbuf+0x12e>
1004dd5a:	059b      	lsls	r3, r3, #22
1004dd5c:	d512      	bpl.n	1004dd84 <setvbuf+0x154>
1004dd5e:	2500      	movs	r5, #0
1004dd60:	e7d6      	b.n	1004dd10 <setvbuf+0xe0>
1004dd62:	9801      	ldr	r0, [sp, #4]
1004dd64:	f000 f9c6 	bl	1004e0f4 <malloc>
1004dd68:	1e07      	subs	r7, r0, #0
1004dd6a:	d0ba      	beq.n	1004dce2 <setvbuf+0xb2>
1004dd6c:	2380      	movs	r3, #128	@ 0x80
1004dd6e:	89a2      	ldrh	r2, [r4, #12]
1004dd70:	9d01      	ldr	r5, [sp, #4]
1004dd72:	4313      	orrs	r3, r2
1004dd74:	81a3      	strh	r3, [r4, #12]
1004dd76:	e7d0      	b.n	1004dd1a <setvbuf+0xea>
1004dd78:	2500      	movs	r5, #0
1004dd7a:	e7b4      	b.n	1004dce6 <setvbuf+0xb6>
1004dd7c:	60a5      	str	r5, [r4, #8]
1004dd7e:	e7e9      	b.n	1004dd54 <setvbuf+0x124>
1004dd80:	60a1      	str	r1, [r4, #8]
1004dd82:	e7e7      	b.n	1004dd54 <setvbuf+0x124>
1004dd84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004dd86:	f000 f961 	bl	1004e04c <__retarget_lock_release_recursive>
1004dd8a:	e7e8      	b.n	1004dd5e <setvbuf+0x12e>
1004dd8c:	2501      	movs	r5, #1
1004dd8e:	426d      	negs	r5, r5
1004dd90:	e7be      	b.n	1004dd10 <setvbuf+0xe0>
1004dd92:	46c0      	nop			@ (mov r8, r8)
1004dd94:	200008bc 	.word	0x200008bc
1004dd98:	fffff35c 	.word	0xfffff35c

1004dd9c <__sread>:
1004dd9c:	b570      	push	{r4, r5, r6, lr}
1004dd9e:	000c      	movs	r4, r1
1004dda0:	250e      	movs	r5, #14
1004dda2:	5f49      	ldrsh	r1, [r1, r5]
1004dda4:	f000 f922 	bl	1004dfec <_read_r>
1004dda8:	2800      	cmp	r0, #0
1004ddaa:	db03      	blt.n	1004ddb4 <__sread+0x18>
1004ddac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
1004ddae:	181b      	adds	r3, r3, r0
1004ddb0:	6563      	str	r3, [r4, #84]	@ 0x54
1004ddb2:	bd70      	pop	{r4, r5, r6, pc}
1004ddb4:	89a3      	ldrh	r3, [r4, #12]
1004ddb6:	4a02      	ldr	r2, [pc, #8]	@ (1004ddc0 <__sread+0x24>)
1004ddb8:	4013      	ands	r3, r2
1004ddba:	81a3      	strh	r3, [r4, #12]
1004ddbc:	e7f9      	b.n	1004ddb2 <__sread+0x16>
1004ddbe:	46c0      	nop			@ (mov r8, r8)
1004ddc0:	ffffefff 	.word	0xffffefff

1004ddc4 <__swrite>:
1004ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ddc6:	001f      	movs	r7, r3
1004ddc8:	898b      	ldrh	r3, [r1, #12]
1004ddca:	0005      	movs	r5, r0
1004ddcc:	000c      	movs	r4, r1
1004ddce:	0016      	movs	r6, r2
1004ddd0:	05db      	lsls	r3, r3, #23
1004ddd2:	d505      	bpl.n	1004dde0 <__swrite+0x1c>
1004ddd4:	230e      	movs	r3, #14
1004ddd6:	5ec9      	ldrsh	r1, [r1, r3]
1004ddd8:	2200      	movs	r2, #0
1004ddda:	2302      	movs	r3, #2
1004dddc:	f000 f8f2 	bl	1004dfc4 <_lseek_r>
1004dde0:	89a3      	ldrh	r3, [r4, #12]
1004dde2:	4a05      	ldr	r2, [pc, #20]	@ (1004ddf8 <__swrite+0x34>)
1004dde4:	0028      	movs	r0, r5
1004dde6:	4013      	ands	r3, r2
1004dde8:	81a3      	strh	r3, [r4, #12]
1004ddea:	0032      	movs	r2, r6
1004ddec:	230e      	movs	r3, #14
1004ddee:	5ee1      	ldrsh	r1, [r4, r3]
1004ddf0:	003b      	movs	r3, r7
1004ddf2:	f000 f90f 	bl	1004e014 <_write_r>
1004ddf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004ddf8:	ffffefff 	.word	0xffffefff

1004ddfc <__sseek>:
1004ddfc:	b570      	push	{r4, r5, r6, lr}
1004ddfe:	000c      	movs	r4, r1
1004de00:	250e      	movs	r5, #14
1004de02:	5f49      	ldrsh	r1, [r1, r5]
1004de04:	f000 f8de 	bl	1004dfc4 <_lseek_r>
1004de08:	89a3      	ldrh	r3, [r4, #12]
1004de0a:	1c42      	adds	r2, r0, #1
1004de0c:	d103      	bne.n	1004de16 <__sseek+0x1a>
1004de0e:	4a05      	ldr	r2, [pc, #20]	@ (1004de24 <__sseek+0x28>)
1004de10:	4013      	ands	r3, r2
1004de12:	81a3      	strh	r3, [r4, #12]
1004de14:	bd70      	pop	{r4, r5, r6, pc}
1004de16:	2280      	movs	r2, #128	@ 0x80
1004de18:	0152      	lsls	r2, r2, #5
1004de1a:	4313      	orrs	r3, r2
1004de1c:	81a3      	strh	r3, [r4, #12]
1004de1e:	6560      	str	r0, [r4, #84]	@ 0x54
1004de20:	e7f8      	b.n	1004de14 <__sseek+0x18>
1004de22:	46c0      	nop			@ (mov r8, r8)
1004de24:	ffffefff 	.word	0xffffefff

1004de28 <__sclose>:
1004de28:	b510      	push	{r4, lr}
1004de2a:	230e      	movs	r3, #14
1004de2c:	5ec9      	ldrsh	r1, [r1, r3]
1004de2e:	f000 f8b7 	bl	1004dfa0 <_close_r>
1004de32:	bd10      	pop	{r4, pc}

1004de34 <__swbuf_r>:
1004de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004de36:	0006      	movs	r6, r0
1004de38:	000d      	movs	r5, r1
1004de3a:	0014      	movs	r4, r2
1004de3c:	2800      	cmp	r0, #0
1004de3e:	d004      	beq.n	1004de4a <__swbuf_r+0x16>
1004de40:	6a03      	ldr	r3, [r0, #32]
1004de42:	2b00      	cmp	r3, #0
1004de44:	d101      	bne.n	1004de4a <__swbuf_r+0x16>
1004de46:	f7ff fe4f 	bl	1004dae8 <__sinit>
1004de4a:	69a3      	ldr	r3, [r4, #24]
1004de4c:	60a3      	str	r3, [r4, #8]
1004de4e:	89a3      	ldrh	r3, [r4, #12]
1004de50:	071b      	lsls	r3, r3, #28
1004de52:	d502      	bpl.n	1004de5a <__swbuf_r+0x26>
1004de54:	6923      	ldr	r3, [r4, #16]
1004de56:	2b00      	cmp	r3, #0
1004de58:	d109      	bne.n	1004de6e <__swbuf_r+0x3a>
1004de5a:	0021      	movs	r1, r4
1004de5c:	0030      	movs	r0, r6
1004de5e:	f000 f82b 	bl	1004deb8 <__swsetup_r>
1004de62:	2800      	cmp	r0, #0
1004de64:	d003      	beq.n	1004de6e <__swbuf_r+0x3a>
1004de66:	2501      	movs	r5, #1
1004de68:	426d      	negs	r5, r5
1004de6a:	0028      	movs	r0, r5
1004de6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004de6e:	6923      	ldr	r3, [r4, #16]
1004de70:	6820      	ldr	r0, [r4, #0]
1004de72:	b2ef      	uxtb	r7, r5
1004de74:	1ac0      	subs	r0, r0, r3
1004de76:	6963      	ldr	r3, [r4, #20]
1004de78:	b2ed      	uxtb	r5, r5
1004de7a:	4283      	cmp	r3, r0
1004de7c:	dc05      	bgt.n	1004de8a <__swbuf_r+0x56>
1004de7e:	0021      	movs	r1, r4
1004de80:	0030      	movs	r0, r6
1004de82:	f000 fd3b 	bl	1004e8fc <_fflush_r>
1004de86:	2800      	cmp	r0, #0
1004de88:	d1ed      	bne.n	1004de66 <__swbuf_r+0x32>
1004de8a:	68a3      	ldr	r3, [r4, #8]
1004de8c:	3001      	adds	r0, #1
1004de8e:	3b01      	subs	r3, #1
1004de90:	60a3      	str	r3, [r4, #8]
1004de92:	6823      	ldr	r3, [r4, #0]
1004de94:	1c5a      	adds	r2, r3, #1
1004de96:	6022      	str	r2, [r4, #0]
1004de98:	701f      	strb	r7, [r3, #0]
1004de9a:	6963      	ldr	r3, [r4, #20]
1004de9c:	4283      	cmp	r3, r0
1004de9e:	d004      	beq.n	1004deaa <__swbuf_r+0x76>
1004dea0:	89a3      	ldrh	r3, [r4, #12]
1004dea2:	07db      	lsls	r3, r3, #31
1004dea4:	d5e1      	bpl.n	1004de6a <__swbuf_r+0x36>
1004dea6:	2d0a      	cmp	r5, #10
1004dea8:	d1df      	bne.n	1004de6a <__swbuf_r+0x36>
1004deaa:	0021      	movs	r1, r4
1004deac:	0030      	movs	r0, r6
1004deae:	f000 fd25 	bl	1004e8fc <_fflush_r>
1004deb2:	2800      	cmp	r0, #0
1004deb4:	d0d9      	beq.n	1004de6a <__swbuf_r+0x36>
1004deb6:	e7d6      	b.n	1004de66 <__swbuf_r+0x32>

1004deb8 <__swsetup_r>:
1004deb8:	4b2d      	ldr	r3, [pc, #180]	@ (1004df70 <__swsetup_r+0xb8>)
1004deba:	b570      	push	{r4, r5, r6, lr}
1004debc:	0005      	movs	r5, r0
1004debe:	6818      	ldr	r0, [r3, #0]
1004dec0:	000c      	movs	r4, r1
1004dec2:	2800      	cmp	r0, #0
1004dec4:	d004      	beq.n	1004ded0 <__swsetup_r+0x18>
1004dec6:	6a03      	ldr	r3, [r0, #32]
1004dec8:	2b00      	cmp	r3, #0
1004deca:	d101      	bne.n	1004ded0 <__swsetup_r+0x18>
1004decc:	f7ff fe0c 	bl	1004dae8 <__sinit>
1004ded0:	230c      	movs	r3, #12
1004ded2:	5ee2      	ldrsh	r2, [r4, r3]
1004ded4:	0713      	lsls	r3, r2, #28
1004ded6:	d423      	bmi.n	1004df20 <__swsetup_r+0x68>
1004ded8:	06d3      	lsls	r3, r2, #27
1004deda:	d407      	bmi.n	1004deec <__swsetup_r+0x34>
1004dedc:	2309      	movs	r3, #9
1004dede:	602b      	str	r3, [r5, #0]
1004dee0:	2340      	movs	r3, #64	@ 0x40
1004dee2:	2001      	movs	r0, #1
1004dee4:	4313      	orrs	r3, r2
1004dee6:	81a3      	strh	r3, [r4, #12]
1004dee8:	4240      	negs	r0, r0
1004deea:	e03a      	b.n	1004df62 <__swsetup_r+0xaa>
1004deec:	0752      	lsls	r2, r2, #29
1004deee:	d513      	bpl.n	1004df18 <__swsetup_r+0x60>
1004def0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004def2:	2900      	cmp	r1, #0
1004def4:	d008      	beq.n	1004df08 <__swsetup_r+0x50>
1004def6:	0023      	movs	r3, r4
1004def8:	3344      	adds	r3, #68	@ 0x44
1004defa:	4299      	cmp	r1, r3
1004defc:	d002      	beq.n	1004df04 <__swsetup_r+0x4c>
1004defe:	0028      	movs	r0, r5
1004df00:	f000 f8ae 	bl	1004e060 <_free_r>
1004df04:	2300      	movs	r3, #0
1004df06:	6363      	str	r3, [r4, #52]	@ 0x34
1004df08:	2224      	movs	r2, #36	@ 0x24
1004df0a:	89a3      	ldrh	r3, [r4, #12]
1004df0c:	4393      	bics	r3, r2
1004df0e:	81a3      	strh	r3, [r4, #12]
1004df10:	2300      	movs	r3, #0
1004df12:	6063      	str	r3, [r4, #4]
1004df14:	6923      	ldr	r3, [r4, #16]
1004df16:	6023      	str	r3, [r4, #0]
1004df18:	2308      	movs	r3, #8
1004df1a:	89a2      	ldrh	r2, [r4, #12]
1004df1c:	4313      	orrs	r3, r2
1004df1e:	81a3      	strh	r3, [r4, #12]
1004df20:	6923      	ldr	r3, [r4, #16]
1004df22:	2b00      	cmp	r3, #0
1004df24:	d10b      	bne.n	1004df3e <__swsetup_r+0x86>
1004df26:	21a0      	movs	r1, #160	@ 0xa0
1004df28:	2280      	movs	r2, #128	@ 0x80
1004df2a:	89a3      	ldrh	r3, [r4, #12]
1004df2c:	0089      	lsls	r1, r1, #2
1004df2e:	0092      	lsls	r2, r2, #2
1004df30:	400b      	ands	r3, r1
1004df32:	4293      	cmp	r3, r2
1004df34:	d003      	beq.n	1004df3e <__swsetup_r+0x86>
1004df36:	0021      	movs	r1, r4
1004df38:	0028      	movs	r0, r5
1004df3a:	f000 fd35 	bl	1004e9a8 <__smakebuf_r>
1004df3e:	230c      	movs	r3, #12
1004df40:	5ee2      	ldrsh	r2, [r4, r3]
1004df42:	2101      	movs	r1, #1
1004df44:	0013      	movs	r3, r2
1004df46:	400b      	ands	r3, r1
1004df48:	420a      	tst	r2, r1
1004df4a:	d00b      	beq.n	1004df64 <__swsetup_r+0xac>
1004df4c:	2300      	movs	r3, #0
1004df4e:	60a3      	str	r3, [r4, #8]
1004df50:	6963      	ldr	r3, [r4, #20]
1004df52:	425b      	negs	r3, r3
1004df54:	61a3      	str	r3, [r4, #24]
1004df56:	2000      	movs	r0, #0
1004df58:	6923      	ldr	r3, [r4, #16]
1004df5a:	4283      	cmp	r3, r0
1004df5c:	d101      	bne.n	1004df62 <__swsetup_r+0xaa>
1004df5e:	0613      	lsls	r3, r2, #24
1004df60:	d4be      	bmi.n	1004dee0 <__swsetup_r+0x28>
1004df62:	bd70      	pop	{r4, r5, r6, pc}
1004df64:	0791      	lsls	r1, r2, #30
1004df66:	d400      	bmi.n	1004df6a <__swsetup_r+0xb2>
1004df68:	6963      	ldr	r3, [r4, #20]
1004df6a:	60a3      	str	r3, [r4, #8]
1004df6c:	e7f3      	b.n	1004df56 <__swsetup_r+0x9e>
1004df6e:	46c0      	nop			@ (mov r8, r8)
1004df70:	200008bc 	.word	0x200008bc

1004df74 <memcmp>:
1004df74:	b530      	push	{r4, r5, lr}
1004df76:	2400      	movs	r4, #0
1004df78:	3901      	subs	r1, #1
1004df7a:	42a2      	cmp	r2, r4
1004df7c:	d101      	bne.n	1004df82 <memcmp+0xe>
1004df7e:	2000      	movs	r0, #0
1004df80:	e005      	b.n	1004df8e <memcmp+0x1a>
1004df82:	5d03      	ldrb	r3, [r0, r4]
1004df84:	3401      	adds	r4, #1
1004df86:	5d0d      	ldrb	r5, [r1, r4]
1004df88:	42ab      	cmp	r3, r5
1004df8a:	d0f6      	beq.n	1004df7a <memcmp+0x6>
1004df8c:	1b58      	subs	r0, r3, r5
1004df8e:	bd30      	pop	{r4, r5, pc}

1004df90 <memset>:
1004df90:	0003      	movs	r3, r0
1004df92:	1882      	adds	r2, r0, r2
1004df94:	4293      	cmp	r3, r2
1004df96:	d100      	bne.n	1004df9a <memset+0xa>
1004df98:	4770      	bx	lr
1004df9a:	7019      	strb	r1, [r3, #0]
1004df9c:	3301      	adds	r3, #1
1004df9e:	e7f9      	b.n	1004df94 <memset+0x4>

1004dfa0 <_close_r>:
1004dfa0:	2300      	movs	r3, #0
1004dfa2:	b570      	push	{r4, r5, r6, lr}
1004dfa4:	4d06      	ldr	r5, [pc, #24]	@ (1004dfc0 <_close_r+0x20>)
1004dfa6:	0004      	movs	r4, r0
1004dfa8:	0008      	movs	r0, r1
1004dfaa:	602b      	str	r3, [r5, #0]
1004dfac:	f7f3 fa7b 	bl	100414a6 <_close>
1004dfb0:	1c43      	adds	r3, r0, #1
1004dfb2:	d103      	bne.n	1004dfbc <_close_r+0x1c>
1004dfb4:	682b      	ldr	r3, [r5, #0]
1004dfb6:	2b00      	cmp	r3, #0
1004dfb8:	d000      	beq.n	1004dfbc <_close_r+0x1c>
1004dfba:	6023      	str	r3, [r4, #0]
1004dfbc:	bd70      	pop	{r4, r5, r6, pc}
1004dfbe:	46c0      	nop			@ (mov r8, r8)
1004dfc0:	2000084c 	.word	0x2000084c

1004dfc4 <_lseek_r>:
1004dfc4:	b570      	push	{r4, r5, r6, lr}
1004dfc6:	0004      	movs	r4, r0
1004dfc8:	0008      	movs	r0, r1
1004dfca:	0011      	movs	r1, r2
1004dfcc:	001a      	movs	r2, r3
1004dfce:	2300      	movs	r3, #0
1004dfd0:	4d05      	ldr	r5, [pc, #20]	@ (1004dfe8 <_lseek_r+0x24>)
1004dfd2:	602b      	str	r3, [r5, #0]
1004dfd4:	f7f3 fa88 	bl	100414e8 <_lseek>
1004dfd8:	1c43      	adds	r3, r0, #1
1004dfda:	d103      	bne.n	1004dfe4 <_lseek_r+0x20>
1004dfdc:	682b      	ldr	r3, [r5, #0]
1004dfde:	2b00      	cmp	r3, #0
1004dfe0:	d000      	beq.n	1004dfe4 <_lseek_r+0x20>
1004dfe2:	6023      	str	r3, [r4, #0]
1004dfe4:	bd70      	pop	{r4, r5, r6, pc}
1004dfe6:	46c0      	nop			@ (mov r8, r8)
1004dfe8:	2000084c 	.word	0x2000084c

1004dfec <_read_r>:
1004dfec:	b570      	push	{r4, r5, r6, lr}
1004dfee:	0004      	movs	r4, r0
1004dff0:	0008      	movs	r0, r1
1004dff2:	0011      	movs	r1, r2
1004dff4:	001a      	movs	r2, r3
1004dff6:	2300      	movs	r3, #0
1004dff8:	4d05      	ldr	r5, [pc, #20]	@ (1004e010 <_read_r+0x24>)
1004dffa:	602b      	str	r3, [r5, #0]
1004dffc:	f7f3 fa1a 	bl	10041434 <_read>
1004e000:	1c43      	adds	r3, r0, #1
1004e002:	d103      	bne.n	1004e00c <_read_r+0x20>
1004e004:	682b      	ldr	r3, [r5, #0]
1004e006:	2b00      	cmp	r3, #0
1004e008:	d000      	beq.n	1004e00c <_read_r+0x20>
1004e00a:	6023      	str	r3, [r4, #0]
1004e00c:	bd70      	pop	{r4, r5, r6, pc}
1004e00e:	46c0      	nop			@ (mov r8, r8)
1004e010:	2000084c 	.word	0x2000084c

1004e014 <_write_r>:
1004e014:	b570      	push	{r4, r5, r6, lr}
1004e016:	0004      	movs	r4, r0
1004e018:	0008      	movs	r0, r1
1004e01a:	0011      	movs	r1, r2
1004e01c:	001a      	movs	r2, r3
1004e01e:	2300      	movs	r3, #0
1004e020:	4d05      	ldr	r5, [pc, #20]	@ (1004e038 <_write_r+0x24>)
1004e022:	602b      	str	r3, [r5, #0]
1004e024:	f7f3 fa23 	bl	1004146e <_write>
1004e028:	1c43      	adds	r3, r0, #1
1004e02a:	d103      	bne.n	1004e034 <_write_r+0x20>
1004e02c:	682b      	ldr	r3, [r5, #0]
1004e02e:	2b00      	cmp	r3, #0
1004e030:	d000      	beq.n	1004e034 <_write_r+0x20>
1004e032:	6023      	str	r3, [r4, #0]
1004e034:	bd70      	pop	{r4, r5, r6, pc}
1004e036:	46c0      	nop			@ (mov r8, r8)
1004e038:	2000084c 	.word	0x2000084c

1004e03c <__errno>:
1004e03c:	4b01      	ldr	r3, [pc, #4]	@ (1004e044 <__errno+0x8>)
1004e03e:	6818      	ldr	r0, [r3, #0]
1004e040:	4770      	bx	lr
1004e042:	46c0      	nop			@ (mov r8, r8)
1004e044:	200008bc 	.word	0x200008bc

1004e048 <__retarget_lock_init_recursive>:
1004e048:	4770      	bx	lr

1004e04a <__retarget_lock_acquire_recursive>:
1004e04a:	4770      	bx	lr

1004e04c <__retarget_lock_release_recursive>:
1004e04c:	4770      	bx	lr

1004e04e <memcpy>:
1004e04e:	2300      	movs	r3, #0
1004e050:	b510      	push	{r4, lr}
1004e052:	429a      	cmp	r2, r3
1004e054:	d100      	bne.n	1004e058 <memcpy+0xa>
1004e056:	bd10      	pop	{r4, pc}
1004e058:	5ccc      	ldrb	r4, [r1, r3]
1004e05a:	54c4      	strb	r4, [r0, r3]
1004e05c:	3301      	adds	r3, #1
1004e05e:	e7f8      	b.n	1004e052 <memcpy+0x4>

1004e060 <_free_r>:
1004e060:	b570      	push	{r4, r5, r6, lr}
1004e062:	0005      	movs	r5, r0
1004e064:	1e0c      	subs	r4, r1, #0
1004e066:	d010      	beq.n	1004e08a <_free_r+0x2a>
1004e068:	3c04      	subs	r4, #4
1004e06a:	6823      	ldr	r3, [r4, #0]
1004e06c:	2b00      	cmp	r3, #0
1004e06e:	da00      	bge.n	1004e072 <_free_r+0x12>
1004e070:	18e4      	adds	r4, r4, r3
1004e072:	0028      	movs	r0, r5
1004e074:	f000 f8ea 	bl	1004e24c <__malloc_lock>
1004e078:	4a1d      	ldr	r2, [pc, #116]	@ (1004e0f0 <_free_r+0x90>)
1004e07a:	6813      	ldr	r3, [r2, #0]
1004e07c:	2b00      	cmp	r3, #0
1004e07e:	d105      	bne.n	1004e08c <_free_r+0x2c>
1004e080:	6063      	str	r3, [r4, #4]
1004e082:	6014      	str	r4, [r2, #0]
1004e084:	0028      	movs	r0, r5
1004e086:	f000 f8e9 	bl	1004e25c <__malloc_unlock>
1004e08a:	bd70      	pop	{r4, r5, r6, pc}
1004e08c:	42a3      	cmp	r3, r4
1004e08e:	d908      	bls.n	1004e0a2 <_free_r+0x42>
1004e090:	6820      	ldr	r0, [r4, #0]
1004e092:	1821      	adds	r1, r4, r0
1004e094:	428b      	cmp	r3, r1
1004e096:	d1f3      	bne.n	1004e080 <_free_r+0x20>
1004e098:	6819      	ldr	r1, [r3, #0]
1004e09a:	685b      	ldr	r3, [r3, #4]
1004e09c:	1809      	adds	r1, r1, r0
1004e09e:	6021      	str	r1, [r4, #0]
1004e0a0:	e7ee      	b.n	1004e080 <_free_r+0x20>
1004e0a2:	001a      	movs	r2, r3
1004e0a4:	685b      	ldr	r3, [r3, #4]
1004e0a6:	2b00      	cmp	r3, #0
1004e0a8:	d001      	beq.n	1004e0ae <_free_r+0x4e>
1004e0aa:	42a3      	cmp	r3, r4
1004e0ac:	d9f9      	bls.n	1004e0a2 <_free_r+0x42>
1004e0ae:	6811      	ldr	r1, [r2, #0]
1004e0b0:	1850      	adds	r0, r2, r1
1004e0b2:	42a0      	cmp	r0, r4
1004e0b4:	d10b      	bne.n	1004e0ce <_free_r+0x6e>
1004e0b6:	6820      	ldr	r0, [r4, #0]
1004e0b8:	1809      	adds	r1, r1, r0
1004e0ba:	1850      	adds	r0, r2, r1
1004e0bc:	6011      	str	r1, [r2, #0]
1004e0be:	4283      	cmp	r3, r0
1004e0c0:	d1e0      	bne.n	1004e084 <_free_r+0x24>
1004e0c2:	6818      	ldr	r0, [r3, #0]
1004e0c4:	685b      	ldr	r3, [r3, #4]
1004e0c6:	1841      	adds	r1, r0, r1
1004e0c8:	6011      	str	r1, [r2, #0]
1004e0ca:	6053      	str	r3, [r2, #4]
1004e0cc:	e7da      	b.n	1004e084 <_free_r+0x24>
1004e0ce:	42a0      	cmp	r0, r4
1004e0d0:	d902      	bls.n	1004e0d8 <_free_r+0x78>
1004e0d2:	230c      	movs	r3, #12
1004e0d4:	602b      	str	r3, [r5, #0]
1004e0d6:	e7d5      	b.n	1004e084 <_free_r+0x24>
1004e0d8:	6820      	ldr	r0, [r4, #0]
1004e0da:	1821      	adds	r1, r4, r0
1004e0dc:	428b      	cmp	r3, r1
1004e0de:	d103      	bne.n	1004e0e8 <_free_r+0x88>
1004e0e0:	6819      	ldr	r1, [r3, #0]
1004e0e2:	685b      	ldr	r3, [r3, #4]
1004e0e4:	1809      	adds	r1, r1, r0
1004e0e6:	6021      	str	r1, [r4, #0]
1004e0e8:	6063      	str	r3, [r4, #4]
1004e0ea:	6054      	str	r4, [r2, #4]
1004e0ec:	e7ca      	b.n	1004e084 <_free_r+0x24>
1004e0ee:	46c0      	nop			@ (mov r8, r8)
1004e0f0:	20000858 	.word	0x20000858

1004e0f4 <malloc>:
1004e0f4:	b510      	push	{r4, lr}
1004e0f6:	4b03      	ldr	r3, [pc, #12]	@ (1004e104 <malloc+0x10>)
1004e0f8:	0001      	movs	r1, r0
1004e0fa:	6818      	ldr	r0, [r3, #0]
1004e0fc:	f000 f826 	bl	1004e14c <_malloc_r>
1004e100:	bd10      	pop	{r4, pc}
1004e102:	46c0      	nop			@ (mov r8, r8)
1004e104:	200008bc 	.word	0x200008bc

1004e108 <sbrk_aligned>:
1004e108:	b570      	push	{r4, r5, r6, lr}
1004e10a:	4e0f      	ldr	r6, [pc, #60]	@ (1004e148 <sbrk_aligned+0x40>)
1004e10c:	000d      	movs	r5, r1
1004e10e:	6831      	ldr	r1, [r6, #0]
1004e110:	0004      	movs	r4, r0
1004e112:	2900      	cmp	r1, #0
1004e114:	d102      	bne.n	1004e11c <sbrk_aligned+0x14>
1004e116:	f000 fcad 	bl	1004ea74 <_sbrk_r>
1004e11a:	6030      	str	r0, [r6, #0]
1004e11c:	0029      	movs	r1, r5
1004e11e:	0020      	movs	r0, r4
1004e120:	f000 fca8 	bl	1004ea74 <_sbrk_r>
1004e124:	1c43      	adds	r3, r0, #1
1004e126:	d103      	bne.n	1004e130 <sbrk_aligned+0x28>
1004e128:	2501      	movs	r5, #1
1004e12a:	426d      	negs	r5, r5
1004e12c:	0028      	movs	r0, r5
1004e12e:	bd70      	pop	{r4, r5, r6, pc}
1004e130:	2303      	movs	r3, #3
1004e132:	1cc5      	adds	r5, r0, #3
1004e134:	439d      	bics	r5, r3
1004e136:	42a8      	cmp	r0, r5
1004e138:	d0f8      	beq.n	1004e12c <sbrk_aligned+0x24>
1004e13a:	1a29      	subs	r1, r5, r0
1004e13c:	0020      	movs	r0, r4
1004e13e:	f000 fc99 	bl	1004ea74 <_sbrk_r>
1004e142:	3001      	adds	r0, #1
1004e144:	d1f2      	bne.n	1004e12c <sbrk_aligned+0x24>
1004e146:	e7ef      	b.n	1004e128 <sbrk_aligned+0x20>
1004e148:	20000854 	.word	0x20000854

1004e14c <_malloc_r>:
1004e14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004e14e:	2203      	movs	r2, #3
1004e150:	1ccb      	adds	r3, r1, #3
1004e152:	4393      	bics	r3, r2
1004e154:	3308      	adds	r3, #8
1004e156:	0005      	movs	r5, r0
1004e158:	001f      	movs	r7, r3
1004e15a:	2b0c      	cmp	r3, #12
1004e15c:	d234      	bcs.n	1004e1c8 <_malloc_r+0x7c>
1004e15e:	270c      	movs	r7, #12
1004e160:	42b9      	cmp	r1, r7
1004e162:	d833      	bhi.n	1004e1cc <_malloc_r+0x80>
1004e164:	0028      	movs	r0, r5
1004e166:	f000 f871 	bl	1004e24c <__malloc_lock>
1004e16a:	4e37      	ldr	r6, [pc, #220]	@ (1004e248 <_malloc_r+0xfc>)
1004e16c:	6833      	ldr	r3, [r6, #0]
1004e16e:	001c      	movs	r4, r3
1004e170:	2c00      	cmp	r4, #0
1004e172:	d12f      	bne.n	1004e1d4 <_malloc_r+0x88>
1004e174:	0039      	movs	r1, r7
1004e176:	0028      	movs	r0, r5
1004e178:	f7ff ffc6 	bl	1004e108 <sbrk_aligned>
1004e17c:	0004      	movs	r4, r0
1004e17e:	1c43      	adds	r3, r0, #1
1004e180:	d15f      	bne.n	1004e242 <_malloc_r+0xf6>
1004e182:	6834      	ldr	r4, [r6, #0]
1004e184:	9400      	str	r4, [sp, #0]
1004e186:	9b00      	ldr	r3, [sp, #0]
1004e188:	2b00      	cmp	r3, #0
1004e18a:	d14a      	bne.n	1004e222 <_malloc_r+0xd6>
1004e18c:	2c00      	cmp	r4, #0
1004e18e:	d052      	beq.n	1004e236 <_malloc_r+0xea>
1004e190:	6823      	ldr	r3, [r4, #0]
1004e192:	0028      	movs	r0, r5
1004e194:	18e3      	adds	r3, r4, r3
1004e196:	9900      	ldr	r1, [sp, #0]
1004e198:	9301      	str	r3, [sp, #4]
1004e19a:	f000 fc6b 	bl	1004ea74 <_sbrk_r>
1004e19e:	9b01      	ldr	r3, [sp, #4]
1004e1a0:	4283      	cmp	r3, r0
1004e1a2:	d148      	bne.n	1004e236 <_malloc_r+0xea>
1004e1a4:	6823      	ldr	r3, [r4, #0]
1004e1a6:	0028      	movs	r0, r5
1004e1a8:	1aff      	subs	r7, r7, r3
1004e1aa:	0039      	movs	r1, r7
1004e1ac:	f7ff ffac 	bl	1004e108 <sbrk_aligned>
1004e1b0:	3001      	adds	r0, #1
1004e1b2:	d040      	beq.n	1004e236 <_malloc_r+0xea>
1004e1b4:	6823      	ldr	r3, [r4, #0]
1004e1b6:	19db      	adds	r3, r3, r7
1004e1b8:	6023      	str	r3, [r4, #0]
1004e1ba:	6833      	ldr	r3, [r6, #0]
1004e1bc:	685a      	ldr	r2, [r3, #4]
1004e1be:	2a00      	cmp	r2, #0
1004e1c0:	d133      	bne.n	1004e22a <_malloc_r+0xde>
1004e1c2:	9b00      	ldr	r3, [sp, #0]
1004e1c4:	6033      	str	r3, [r6, #0]
1004e1c6:	e019      	b.n	1004e1fc <_malloc_r+0xb0>
1004e1c8:	2b00      	cmp	r3, #0
1004e1ca:	dac9      	bge.n	1004e160 <_malloc_r+0x14>
1004e1cc:	230c      	movs	r3, #12
1004e1ce:	602b      	str	r3, [r5, #0]
1004e1d0:	2000      	movs	r0, #0
1004e1d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004e1d4:	6821      	ldr	r1, [r4, #0]
1004e1d6:	1bc9      	subs	r1, r1, r7
1004e1d8:	d420      	bmi.n	1004e21c <_malloc_r+0xd0>
1004e1da:	290b      	cmp	r1, #11
1004e1dc:	d90a      	bls.n	1004e1f4 <_malloc_r+0xa8>
1004e1de:	19e2      	adds	r2, r4, r7
1004e1e0:	6027      	str	r7, [r4, #0]
1004e1e2:	42a3      	cmp	r3, r4
1004e1e4:	d104      	bne.n	1004e1f0 <_malloc_r+0xa4>
1004e1e6:	6032      	str	r2, [r6, #0]
1004e1e8:	6863      	ldr	r3, [r4, #4]
1004e1ea:	6011      	str	r1, [r2, #0]
1004e1ec:	6053      	str	r3, [r2, #4]
1004e1ee:	e005      	b.n	1004e1fc <_malloc_r+0xb0>
1004e1f0:	605a      	str	r2, [r3, #4]
1004e1f2:	e7f9      	b.n	1004e1e8 <_malloc_r+0x9c>
1004e1f4:	6862      	ldr	r2, [r4, #4]
1004e1f6:	42a3      	cmp	r3, r4
1004e1f8:	d10e      	bne.n	1004e218 <_malloc_r+0xcc>
1004e1fa:	6032      	str	r2, [r6, #0]
1004e1fc:	0028      	movs	r0, r5
1004e1fe:	f000 f82d 	bl	1004e25c <__malloc_unlock>
1004e202:	0020      	movs	r0, r4
1004e204:	2207      	movs	r2, #7
1004e206:	300b      	adds	r0, #11
1004e208:	1d23      	adds	r3, r4, #4
1004e20a:	4390      	bics	r0, r2
1004e20c:	1ac2      	subs	r2, r0, r3
1004e20e:	4298      	cmp	r0, r3
1004e210:	d0df      	beq.n	1004e1d2 <_malloc_r+0x86>
1004e212:	1a1b      	subs	r3, r3, r0
1004e214:	50a3      	str	r3, [r4, r2]
1004e216:	e7dc      	b.n	1004e1d2 <_malloc_r+0x86>
1004e218:	605a      	str	r2, [r3, #4]
1004e21a:	e7ef      	b.n	1004e1fc <_malloc_r+0xb0>
1004e21c:	0023      	movs	r3, r4
1004e21e:	6864      	ldr	r4, [r4, #4]
1004e220:	e7a6      	b.n	1004e170 <_malloc_r+0x24>
1004e222:	9c00      	ldr	r4, [sp, #0]
1004e224:	6863      	ldr	r3, [r4, #4]
1004e226:	9300      	str	r3, [sp, #0]
1004e228:	e7ad      	b.n	1004e186 <_malloc_r+0x3a>
1004e22a:	001a      	movs	r2, r3
1004e22c:	685b      	ldr	r3, [r3, #4]
1004e22e:	42a3      	cmp	r3, r4
1004e230:	d1fb      	bne.n	1004e22a <_malloc_r+0xde>
1004e232:	2300      	movs	r3, #0
1004e234:	e7da      	b.n	1004e1ec <_malloc_r+0xa0>
1004e236:	230c      	movs	r3, #12
1004e238:	0028      	movs	r0, r5
1004e23a:	602b      	str	r3, [r5, #0]
1004e23c:	f000 f80e 	bl	1004e25c <__malloc_unlock>
1004e240:	e7c6      	b.n	1004e1d0 <_malloc_r+0x84>
1004e242:	6007      	str	r7, [r0, #0]
1004e244:	e7da      	b.n	1004e1fc <_malloc_r+0xb0>
1004e246:	46c0      	nop			@ (mov r8, r8)
1004e248:	20000858 	.word	0x20000858

1004e24c <__malloc_lock>:
1004e24c:	b510      	push	{r4, lr}
1004e24e:	4802      	ldr	r0, [pc, #8]	@ (1004e258 <__malloc_lock+0xc>)
1004e250:	f7ff fefb 	bl	1004e04a <__retarget_lock_acquire_recursive>
1004e254:	bd10      	pop	{r4, pc}
1004e256:	46c0      	nop			@ (mov r8, r8)
1004e258:	20000850 	.word	0x20000850

1004e25c <__malloc_unlock>:
1004e25c:	b510      	push	{r4, lr}
1004e25e:	4802      	ldr	r0, [pc, #8]	@ (1004e268 <__malloc_unlock+0xc>)
1004e260:	f7ff fef4 	bl	1004e04c <__retarget_lock_release_recursive>
1004e264:	bd10      	pop	{r4, pc}
1004e266:	46c0      	nop			@ (mov r8, r8)
1004e268:	20000850 	.word	0x20000850

1004e26c <__sfputc_r>:
1004e26c:	6893      	ldr	r3, [r2, #8]
1004e26e:	b510      	push	{r4, lr}
1004e270:	3b01      	subs	r3, #1
1004e272:	6093      	str	r3, [r2, #8]
1004e274:	2b00      	cmp	r3, #0
1004e276:	da04      	bge.n	1004e282 <__sfputc_r+0x16>
1004e278:	6994      	ldr	r4, [r2, #24]
1004e27a:	42a3      	cmp	r3, r4
1004e27c:	db07      	blt.n	1004e28e <__sfputc_r+0x22>
1004e27e:	290a      	cmp	r1, #10
1004e280:	d005      	beq.n	1004e28e <__sfputc_r+0x22>
1004e282:	6813      	ldr	r3, [r2, #0]
1004e284:	1c58      	adds	r0, r3, #1
1004e286:	6010      	str	r0, [r2, #0]
1004e288:	7019      	strb	r1, [r3, #0]
1004e28a:	0008      	movs	r0, r1
1004e28c:	bd10      	pop	{r4, pc}
1004e28e:	f7ff fdd1 	bl	1004de34 <__swbuf_r>
1004e292:	0001      	movs	r1, r0
1004e294:	e7f9      	b.n	1004e28a <__sfputc_r+0x1e>

1004e296 <__sfputs_r>:
1004e296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e298:	0006      	movs	r6, r0
1004e29a:	000f      	movs	r7, r1
1004e29c:	0014      	movs	r4, r2
1004e29e:	18d5      	adds	r5, r2, r3
1004e2a0:	42ac      	cmp	r4, r5
1004e2a2:	d101      	bne.n	1004e2a8 <__sfputs_r+0x12>
1004e2a4:	2000      	movs	r0, #0
1004e2a6:	e007      	b.n	1004e2b8 <__sfputs_r+0x22>
1004e2a8:	7821      	ldrb	r1, [r4, #0]
1004e2aa:	003a      	movs	r2, r7
1004e2ac:	0030      	movs	r0, r6
1004e2ae:	f7ff ffdd 	bl	1004e26c <__sfputc_r>
1004e2b2:	3401      	adds	r4, #1
1004e2b4:	1c43      	adds	r3, r0, #1
1004e2b6:	d1f3      	bne.n	1004e2a0 <__sfputs_r+0xa>
1004e2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1004e2bc <_vfiprintf_r>:
1004e2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e2be:	b0a1      	sub	sp, #132	@ 0x84
1004e2c0:	000f      	movs	r7, r1
1004e2c2:	0015      	movs	r5, r2
1004e2c4:	001e      	movs	r6, r3
1004e2c6:	9003      	str	r0, [sp, #12]
1004e2c8:	2800      	cmp	r0, #0
1004e2ca:	d004      	beq.n	1004e2d6 <_vfiprintf_r+0x1a>
1004e2cc:	6a03      	ldr	r3, [r0, #32]
1004e2ce:	2b00      	cmp	r3, #0
1004e2d0:	d101      	bne.n	1004e2d6 <_vfiprintf_r+0x1a>
1004e2d2:	f7ff fc09 	bl	1004dae8 <__sinit>
1004e2d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004e2d8:	07db      	lsls	r3, r3, #31
1004e2da:	d405      	bmi.n	1004e2e8 <_vfiprintf_r+0x2c>
1004e2dc:	89bb      	ldrh	r3, [r7, #12]
1004e2de:	059b      	lsls	r3, r3, #22
1004e2e0:	d402      	bmi.n	1004e2e8 <_vfiprintf_r+0x2c>
1004e2e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004e2e4:	f7ff feb1 	bl	1004e04a <__retarget_lock_acquire_recursive>
1004e2e8:	89bb      	ldrh	r3, [r7, #12]
1004e2ea:	071b      	lsls	r3, r3, #28
1004e2ec:	d502      	bpl.n	1004e2f4 <_vfiprintf_r+0x38>
1004e2ee:	693b      	ldr	r3, [r7, #16]
1004e2f0:	2b00      	cmp	r3, #0
1004e2f2:	d113      	bne.n	1004e31c <_vfiprintf_r+0x60>
1004e2f4:	0039      	movs	r1, r7
1004e2f6:	9803      	ldr	r0, [sp, #12]
1004e2f8:	f7ff fdde 	bl	1004deb8 <__swsetup_r>
1004e2fc:	2800      	cmp	r0, #0
1004e2fe:	d00d      	beq.n	1004e31c <_vfiprintf_r+0x60>
1004e300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004e302:	07db      	lsls	r3, r3, #31
1004e304:	d503      	bpl.n	1004e30e <_vfiprintf_r+0x52>
1004e306:	2001      	movs	r0, #1
1004e308:	4240      	negs	r0, r0
1004e30a:	b021      	add	sp, #132	@ 0x84
1004e30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e30e:	89bb      	ldrh	r3, [r7, #12]
1004e310:	059b      	lsls	r3, r3, #22
1004e312:	d4f8      	bmi.n	1004e306 <_vfiprintf_r+0x4a>
1004e314:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004e316:	f7ff fe99 	bl	1004e04c <__retarget_lock_release_recursive>
1004e31a:	e7f4      	b.n	1004e306 <_vfiprintf_r+0x4a>
1004e31c:	2300      	movs	r3, #0
1004e31e:	ac08      	add	r4, sp, #32
1004e320:	6163      	str	r3, [r4, #20]
1004e322:	3320      	adds	r3, #32
1004e324:	7663      	strb	r3, [r4, #25]
1004e326:	3310      	adds	r3, #16
1004e328:	76a3      	strb	r3, [r4, #26]
1004e32a:	9607      	str	r6, [sp, #28]
1004e32c:	002e      	movs	r6, r5
1004e32e:	7833      	ldrb	r3, [r6, #0]
1004e330:	2b00      	cmp	r3, #0
1004e332:	d001      	beq.n	1004e338 <_vfiprintf_r+0x7c>
1004e334:	2b25      	cmp	r3, #37	@ 0x25
1004e336:	d148      	bne.n	1004e3ca <_vfiprintf_r+0x10e>
1004e338:	1b73      	subs	r3, r6, r5
1004e33a:	9305      	str	r3, [sp, #20]
1004e33c:	42ae      	cmp	r6, r5
1004e33e:	d00b      	beq.n	1004e358 <_vfiprintf_r+0x9c>
1004e340:	002a      	movs	r2, r5
1004e342:	0039      	movs	r1, r7
1004e344:	9803      	ldr	r0, [sp, #12]
1004e346:	f7ff ffa6 	bl	1004e296 <__sfputs_r>
1004e34a:	3001      	adds	r0, #1
1004e34c:	d100      	bne.n	1004e350 <_vfiprintf_r+0x94>
1004e34e:	e0ae      	b.n	1004e4ae <_vfiprintf_r+0x1f2>
1004e350:	6963      	ldr	r3, [r4, #20]
1004e352:	9a05      	ldr	r2, [sp, #20]
1004e354:	189b      	adds	r3, r3, r2
1004e356:	6163      	str	r3, [r4, #20]
1004e358:	7833      	ldrb	r3, [r6, #0]
1004e35a:	2b00      	cmp	r3, #0
1004e35c:	d100      	bne.n	1004e360 <_vfiprintf_r+0xa4>
1004e35e:	e0a6      	b.n	1004e4ae <_vfiprintf_r+0x1f2>
1004e360:	2201      	movs	r2, #1
1004e362:	2300      	movs	r3, #0
1004e364:	4252      	negs	r2, r2
1004e366:	6062      	str	r2, [r4, #4]
1004e368:	a904      	add	r1, sp, #16
1004e36a:	3254      	adds	r2, #84	@ 0x54
1004e36c:	1852      	adds	r2, r2, r1
1004e36e:	1c75      	adds	r5, r6, #1
1004e370:	6023      	str	r3, [r4, #0]
1004e372:	60e3      	str	r3, [r4, #12]
1004e374:	60a3      	str	r3, [r4, #8]
1004e376:	7013      	strb	r3, [r2, #0]
1004e378:	65a3      	str	r3, [r4, #88]	@ 0x58
1004e37a:	4b59      	ldr	r3, [pc, #356]	@ (1004e4e0 <_vfiprintf_r+0x224>)
1004e37c:	2205      	movs	r2, #5
1004e37e:	0018      	movs	r0, r3
1004e380:	7829      	ldrb	r1, [r5, #0]
1004e382:	9305      	str	r3, [sp, #20]
1004e384:	f000 fb88 	bl	1004ea98 <memchr>
1004e388:	1c6e      	adds	r6, r5, #1
1004e38a:	2800      	cmp	r0, #0
1004e38c:	d11f      	bne.n	1004e3ce <_vfiprintf_r+0x112>
1004e38e:	6822      	ldr	r2, [r4, #0]
1004e390:	06d3      	lsls	r3, r2, #27
1004e392:	d504      	bpl.n	1004e39e <_vfiprintf_r+0xe2>
1004e394:	2353      	movs	r3, #83	@ 0x53
1004e396:	a904      	add	r1, sp, #16
1004e398:	185b      	adds	r3, r3, r1
1004e39a:	2120      	movs	r1, #32
1004e39c:	7019      	strb	r1, [r3, #0]
1004e39e:	0713      	lsls	r3, r2, #28
1004e3a0:	d504      	bpl.n	1004e3ac <_vfiprintf_r+0xf0>
1004e3a2:	2353      	movs	r3, #83	@ 0x53
1004e3a4:	a904      	add	r1, sp, #16
1004e3a6:	185b      	adds	r3, r3, r1
1004e3a8:	212b      	movs	r1, #43	@ 0x2b
1004e3aa:	7019      	strb	r1, [r3, #0]
1004e3ac:	782b      	ldrb	r3, [r5, #0]
1004e3ae:	2b2a      	cmp	r3, #42	@ 0x2a
1004e3b0:	d016      	beq.n	1004e3e0 <_vfiprintf_r+0x124>
1004e3b2:	002e      	movs	r6, r5
1004e3b4:	2100      	movs	r1, #0
1004e3b6:	200a      	movs	r0, #10
1004e3b8:	68e3      	ldr	r3, [r4, #12]
1004e3ba:	7832      	ldrb	r2, [r6, #0]
1004e3bc:	1c75      	adds	r5, r6, #1
1004e3be:	3a30      	subs	r2, #48	@ 0x30
1004e3c0:	2a09      	cmp	r2, #9
1004e3c2:	d950      	bls.n	1004e466 <_vfiprintf_r+0x1aa>
1004e3c4:	2900      	cmp	r1, #0
1004e3c6:	d111      	bne.n	1004e3ec <_vfiprintf_r+0x130>
1004e3c8:	e017      	b.n	1004e3fa <_vfiprintf_r+0x13e>
1004e3ca:	3601      	adds	r6, #1
1004e3cc:	e7af      	b.n	1004e32e <_vfiprintf_r+0x72>
1004e3ce:	9b05      	ldr	r3, [sp, #20]
1004e3d0:	6822      	ldr	r2, [r4, #0]
1004e3d2:	1ac0      	subs	r0, r0, r3
1004e3d4:	2301      	movs	r3, #1
1004e3d6:	4083      	lsls	r3, r0
1004e3d8:	4313      	orrs	r3, r2
1004e3da:	0035      	movs	r5, r6
1004e3dc:	6023      	str	r3, [r4, #0]
1004e3de:	e7cc      	b.n	1004e37a <_vfiprintf_r+0xbe>
1004e3e0:	9b07      	ldr	r3, [sp, #28]
1004e3e2:	1d19      	adds	r1, r3, #4
1004e3e4:	681b      	ldr	r3, [r3, #0]
1004e3e6:	9107      	str	r1, [sp, #28]
1004e3e8:	2b00      	cmp	r3, #0
1004e3ea:	db01      	blt.n	1004e3f0 <_vfiprintf_r+0x134>
1004e3ec:	930b      	str	r3, [sp, #44]	@ 0x2c
1004e3ee:	e004      	b.n	1004e3fa <_vfiprintf_r+0x13e>
1004e3f0:	425b      	negs	r3, r3
1004e3f2:	60e3      	str	r3, [r4, #12]
1004e3f4:	2302      	movs	r3, #2
1004e3f6:	4313      	orrs	r3, r2
1004e3f8:	6023      	str	r3, [r4, #0]
1004e3fa:	7833      	ldrb	r3, [r6, #0]
1004e3fc:	2b2e      	cmp	r3, #46	@ 0x2e
1004e3fe:	d10c      	bne.n	1004e41a <_vfiprintf_r+0x15e>
1004e400:	7873      	ldrb	r3, [r6, #1]
1004e402:	2b2a      	cmp	r3, #42	@ 0x2a
1004e404:	d134      	bne.n	1004e470 <_vfiprintf_r+0x1b4>
1004e406:	9b07      	ldr	r3, [sp, #28]
1004e408:	3602      	adds	r6, #2
1004e40a:	1d1a      	adds	r2, r3, #4
1004e40c:	681b      	ldr	r3, [r3, #0]
1004e40e:	9207      	str	r2, [sp, #28]
1004e410:	2b00      	cmp	r3, #0
1004e412:	da01      	bge.n	1004e418 <_vfiprintf_r+0x15c>
1004e414:	2301      	movs	r3, #1
1004e416:	425b      	negs	r3, r3
1004e418:	9309      	str	r3, [sp, #36]	@ 0x24
1004e41a:	4d32      	ldr	r5, [pc, #200]	@ (1004e4e4 <_vfiprintf_r+0x228>)
1004e41c:	2203      	movs	r2, #3
1004e41e:	0028      	movs	r0, r5
1004e420:	7831      	ldrb	r1, [r6, #0]
1004e422:	f000 fb39 	bl	1004ea98 <memchr>
1004e426:	2800      	cmp	r0, #0
1004e428:	d006      	beq.n	1004e438 <_vfiprintf_r+0x17c>
1004e42a:	2340      	movs	r3, #64	@ 0x40
1004e42c:	1b40      	subs	r0, r0, r5
1004e42e:	4083      	lsls	r3, r0
1004e430:	6822      	ldr	r2, [r4, #0]
1004e432:	3601      	adds	r6, #1
1004e434:	4313      	orrs	r3, r2
1004e436:	6023      	str	r3, [r4, #0]
1004e438:	7831      	ldrb	r1, [r6, #0]
1004e43a:	2206      	movs	r2, #6
1004e43c:	482a      	ldr	r0, [pc, #168]	@ (1004e4e8 <_vfiprintf_r+0x22c>)
1004e43e:	1c75      	adds	r5, r6, #1
1004e440:	7621      	strb	r1, [r4, #24]
1004e442:	f000 fb29 	bl	1004ea98 <memchr>
1004e446:	2800      	cmp	r0, #0
1004e448:	d040      	beq.n	1004e4cc <_vfiprintf_r+0x210>
1004e44a:	4b28      	ldr	r3, [pc, #160]	@ (1004e4ec <_vfiprintf_r+0x230>)
1004e44c:	2b00      	cmp	r3, #0
1004e44e:	d122      	bne.n	1004e496 <_vfiprintf_r+0x1da>
1004e450:	2207      	movs	r2, #7
1004e452:	9b07      	ldr	r3, [sp, #28]
1004e454:	3307      	adds	r3, #7
1004e456:	4393      	bics	r3, r2
1004e458:	3308      	adds	r3, #8
1004e45a:	9307      	str	r3, [sp, #28]
1004e45c:	6963      	ldr	r3, [r4, #20]
1004e45e:	9a04      	ldr	r2, [sp, #16]
1004e460:	189b      	adds	r3, r3, r2
1004e462:	6163      	str	r3, [r4, #20]
1004e464:	e762      	b.n	1004e32c <_vfiprintf_r+0x70>
1004e466:	4343      	muls	r3, r0
1004e468:	002e      	movs	r6, r5
1004e46a:	2101      	movs	r1, #1
1004e46c:	189b      	adds	r3, r3, r2
1004e46e:	e7a4      	b.n	1004e3ba <_vfiprintf_r+0xfe>
1004e470:	2300      	movs	r3, #0
1004e472:	200a      	movs	r0, #10
1004e474:	0019      	movs	r1, r3
1004e476:	3601      	adds	r6, #1
1004e478:	6063      	str	r3, [r4, #4]
1004e47a:	7832      	ldrb	r2, [r6, #0]
1004e47c:	1c75      	adds	r5, r6, #1
1004e47e:	3a30      	subs	r2, #48	@ 0x30
1004e480:	2a09      	cmp	r2, #9
1004e482:	d903      	bls.n	1004e48c <_vfiprintf_r+0x1d0>
1004e484:	2b00      	cmp	r3, #0
1004e486:	d0c8      	beq.n	1004e41a <_vfiprintf_r+0x15e>
1004e488:	9109      	str	r1, [sp, #36]	@ 0x24
1004e48a:	e7c6      	b.n	1004e41a <_vfiprintf_r+0x15e>
1004e48c:	4341      	muls	r1, r0
1004e48e:	002e      	movs	r6, r5
1004e490:	2301      	movs	r3, #1
1004e492:	1889      	adds	r1, r1, r2
1004e494:	e7f1      	b.n	1004e47a <_vfiprintf_r+0x1be>
1004e496:	aa07      	add	r2, sp, #28
1004e498:	9200      	str	r2, [sp, #0]
1004e49a:	0021      	movs	r1, r4
1004e49c:	003a      	movs	r2, r7
1004e49e:	4b14      	ldr	r3, [pc, #80]	@ (1004e4f0 <_vfiprintf_r+0x234>)
1004e4a0:	9803      	ldr	r0, [sp, #12]
1004e4a2:	e000      	b.n	1004e4a6 <_vfiprintf_r+0x1ea>
1004e4a4:	bf00      	nop
1004e4a6:	9004      	str	r0, [sp, #16]
1004e4a8:	9b04      	ldr	r3, [sp, #16]
1004e4aa:	3301      	adds	r3, #1
1004e4ac:	d1d6      	bne.n	1004e45c <_vfiprintf_r+0x1a0>
1004e4ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004e4b0:	07db      	lsls	r3, r3, #31
1004e4b2:	d405      	bmi.n	1004e4c0 <_vfiprintf_r+0x204>
1004e4b4:	89bb      	ldrh	r3, [r7, #12]
1004e4b6:	059b      	lsls	r3, r3, #22
1004e4b8:	d402      	bmi.n	1004e4c0 <_vfiprintf_r+0x204>
1004e4ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004e4bc:	f7ff fdc6 	bl	1004e04c <__retarget_lock_release_recursive>
1004e4c0:	89bb      	ldrh	r3, [r7, #12]
1004e4c2:	065b      	lsls	r3, r3, #25
1004e4c4:	d500      	bpl.n	1004e4c8 <_vfiprintf_r+0x20c>
1004e4c6:	e71e      	b.n	1004e306 <_vfiprintf_r+0x4a>
1004e4c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004e4ca:	e71e      	b.n	1004e30a <_vfiprintf_r+0x4e>
1004e4cc:	aa07      	add	r2, sp, #28
1004e4ce:	9200      	str	r2, [sp, #0]
1004e4d0:	0021      	movs	r1, r4
1004e4d2:	003a      	movs	r2, r7
1004e4d4:	4b06      	ldr	r3, [pc, #24]	@ (1004e4f0 <_vfiprintf_r+0x234>)
1004e4d6:	9803      	ldr	r0, [sp, #12]
1004e4d8:	f000 f87c 	bl	1004e5d4 <_printf_i>
1004e4dc:	e7e3      	b.n	1004e4a6 <_vfiprintf_r+0x1ea>
1004e4de:	46c0      	nop			@ (mov r8, r8)
1004e4e0:	1004efcc 	.word	0x1004efcc
1004e4e4:	1004efd2 	.word	0x1004efd2
1004e4e8:	1004efd6 	.word	0x1004efd6
1004e4ec:	00000000 	.word	0x00000000
1004e4f0:	1004e297 	.word	0x1004e297

1004e4f4 <_printf_common>:
1004e4f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004e4f6:	0016      	movs	r6, r2
1004e4f8:	9301      	str	r3, [sp, #4]
1004e4fa:	688a      	ldr	r2, [r1, #8]
1004e4fc:	690b      	ldr	r3, [r1, #16]
1004e4fe:	000c      	movs	r4, r1
1004e500:	9000      	str	r0, [sp, #0]
1004e502:	4293      	cmp	r3, r2
1004e504:	da00      	bge.n	1004e508 <_printf_common+0x14>
1004e506:	0013      	movs	r3, r2
1004e508:	0022      	movs	r2, r4
1004e50a:	6033      	str	r3, [r6, #0]
1004e50c:	3243      	adds	r2, #67	@ 0x43
1004e50e:	7812      	ldrb	r2, [r2, #0]
1004e510:	2a00      	cmp	r2, #0
1004e512:	d001      	beq.n	1004e518 <_printf_common+0x24>
1004e514:	3301      	adds	r3, #1
1004e516:	6033      	str	r3, [r6, #0]
1004e518:	6823      	ldr	r3, [r4, #0]
1004e51a:	069b      	lsls	r3, r3, #26
1004e51c:	d502      	bpl.n	1004e524 <_printf_common+0x30>
1004e51e:	6833      	ldr	r3, [r6, #0]
1004e520:	3302      	adds	r3, #2
1004e522:	6033      	str	r3, [r6, #0]
1004e524:	6822      	ldr	r2, [r4, #0]
1004e526:	2306      	movs	r3, #6
1004e528:	0015      	movs	r5, r2
1004e52a:	401d      	ands	r5, r3
1004e52c:	421a      	tst	r2, r3
1004e52e:	d027      	beq.n	1004e580 <_printf_common+0x8c>
1004e530:	0023      	movs	r3, r4
1004e532:	3343      	adds	r3, #67	@ 0x43
1004e534:	781b      	ldrb	r3, [r3, #0]
1004e536:	1e5a      	subs	r2, r3, #1
1004e538:	4193      	sbcs	r3, r2
1004e53a:	6822      	ldr	r2, [r4, #0]
1004e53c:	0692      	lsls	r2, r2, #26
1004e53e:	d430      	bmi.n	1004e5a2 <_printf_common+0xae>
1004e540:	0022      	movs	r2, r4
1004e542:	9901      	ldr	r1, [sp, #4]
1004e544:	9800      	ldr	r0, [sp, #0]
1004e546:	9d08      	ldr	r5, [sp, #32]
1004e548:	3243      	adds	r2, #67	@ 0x43
1004e54a:	47a8      	blx	r5
1004e54c:	3001      	adds	r0, #1
1004e54e:	d025      	beq.n	1004e59c <_printf_common+0xa8>
1004e550:	2206      	movs	r2, #6
1004e552:	6823      	ldr	r3, [r4, #0]
1004e554:	2500      	movs	r5, #0
1004e556:	4013      	ands	r3, r2
1004e558:	2b04      	cmp	r3, #4
1004e55a:	d105      	bne.n	1004e568 <_printf_common+0x74>
1004e55c:	6833      	ldr	r3, [r6, #0]
1004e55e:	68e5      	ldr	r5, [r4, #12]
1004e560:	1aed      	subs	r5, r5, r3
1004e562:	43eb      	mvns	r3, r5
1004e564:	17db      	asrs	r3, r3, #31
1004e566:	401d      	ands	r5, r3
1004e568:	68a3      	ldr	r3, [r4, #8]
1004e56a:	6922      	ldr	r2, [r4, #16]
1004e56c:	4293      	cmp	r3, r2
1004e56e:	dd01      	ble.n	1004e574 <_printf_common+0x80>
1004e570:	1a9b      	subs	r3, r3, r2
1004e572:	18ed      	adds	r5, r5, r3
1004e574:	2600      	movs	r6, #0
1004e576:	42b5      	cmp	r5, r6
1004e578:	d120      	bne.n	1004e5bc <_printf_common+0xc8>
1004e57a:	2000      	movs	r0, #0
1004e57c:	e010      	b.n	1004e5a0 <_printf_common+0xac>
1004e57e:	3501      	adds	r5, #1
1004e580:	68e3      	ldr	r3, [r4, #12]
1004e582:	6832      	ldr	r2, [r6, #0]
1004e584:	1a9b      	subs	r3, r3, r2
1004e586:	42ab      	cmp	r3, r5
1004e588:	ddd2      	ble.n	1004e530 <_printf_common+0x3c>
1004e58a:	0022      	movs	r2, r4
1004e58c:	2301      	movs	r3, #1
1004e58e:	9901      	ldr	r1, [sp, #4]
1004e590:	9800      	ldr	r0, [sp, #0]
1004e592:	9f08      	ldr	r7, [sp, #32]
1004e594:	3219      	adds	r2, #25
1004e596:	47b8      	blx	r7
1004e598:	3001      	adds	r0, #1
1004e59a:	d1f0      	bne.n	1004e57e <_printf_common+0x8a>
1004e59c:	2001      	movs	r0, #1
1004e59e:	4240      	negs	r0, r0
1004e5a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004e5a2:	2030      	movs	r0, #48	@ 0x30
1004e5a4:	18e1      	adds	r1, r4, r3
1004e5a6:	3143      	adds	r1, #67	@ 0x43
1004e5a8:	7008      	strb	r0, [r1, #0]
1004e5aa:	0021      	movs	r1, r4
1004e5ac:	1c5a      	adds	r2, r3, #1
1004e5ae:	3145      	adds	r1, #69	@ 0x45
1004e5b0:	7809      	ldrb	r1, [r1, #0]
1004e5b2:	18a2      	adds	r2, r4, r2
1004e5b4:	3243      	adds	r2, #67	@ 0x43
1004e5b6:	3302      	adds	r3, #2
1004e5b8:	7011      	strb	r1, [r2, #0]
1004e5ba:	e7c1      	b.n	1004e540 <_printf_common+0x4c>
1004e5bc:	0022      	movs	r2, r4
1004e5be:	2301      	movs	r3, #1
1004e5c0:	9901      	ldr	r1, [sp, #4]
1004e5c2:	9800      	ldr	r0, [sp, #0]
1004e5c4:	9f08      	ldr	r7, [sp, #32]
1004e5c6:	321a      	adds	r2, #26
1004e5c8:	47b8      	blx	r7
1004e5ca:	3001      	adds	r0, #1
1004e5cc:	d0e6      	beq.n	1004e59c <_printf_common+0xa8>
1004e5ce:	3601      	adds	r6, #1
1004e5d0:	e7d1      	b.n	1004e576 <_printf_common+0x82>
	...

1004e5d4 <_printf_i>:
1004e5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e5d6:	b08b      	sub	sp, #44	@ 0x2c
1004e5d8:	9206      	str	r2, [sp, #24]
1004e5da:	000a      	movs	r2, r1
1004e5dc:	3243      	adds	r2, #67	@ 0x43
1004e5de:	9307      	str	r3, [sp, #28]
1004e5e0:	9005      	str	r0, [sp, #20]
1004e5e2:	9203      	str	r2, [sp, #12]
1004e5e4:	7e0a      	ldrb	r2, [r1, #24]
1004e5e6:	000c      	movs	r4, r1
1004e5e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004e5ea:	2a78      	cmp	r2, #120	@ 0x78
1004e5ec:	d809      	bhi.n	1004e602 <_printf_i+0x2e>
1004e5ee:	2a62      	cmp	r2, #98	@ 0x62
1004e5f0:	d80b      	bhi.n	1004e60a <_printf_i+0x36>
1004e5f2:	2a00      	cmp	r2, #0
1004e5f4:	d100      	bne.n	1004e5f8 <_printf_i+0x24>
1004e5f6:	e0bc      	b.n	1004e772 <_printf_i+0x19e>
1004e5f8:	497b      	ldr	r1, [pc, #492]	@ (1004e7e8 <_printf_i+0x214>)
1004e5fa:	9104      	str	r1, [sp, #16]
1004e5fc:	2a58      	cmp	r2, #88	@ 0x58
1004e5fe:	d100      	bne.n	1004e602 <_printf_i+0x2e>
1004e600:	e090      	b.n	1004e724 <_printf_i+0x150>
1004e602:	0025      	movs	r5, r4
1004e604:	3542      	adds	r5, #66	@ 0x42
1004e606:	702a      	strb	r2, [r5, #0]
1004e608:	e022      	b.n	1004e650 <_printf_i+0x7c>
1004e60a:	0010      	movs	r0, r2
1004e60c:	3863      	subs	r0, #99	@ 0x63
1004e60e:	2815      	cmp	r0, #21
1004e610:	d8f7      	bhi.n	1004e602 <_printf_i+0x2e>
1004e612:	f7f1 fe03 	bl	1004021c <__gnu_thumb1_case_shi>
1004e616:	0016      	.short	0x0016
1004e618:	fff6001f 	.word	0xfff6001f
1004e61c:	fff6fff6 	.word	0xfff6fff6
1004e620:	001ffff6 	.word	0x001ffff6
1004e624:	fff6fff6 	.word	0xfff6fff6
1004e628:	fff6fff6 	.word	0xfff6fff6
1004e62c:	003600a1 	.word	0x003600a1
1004e630:	fff60080 	.word	0xfff60080
1004e634:	00b2fff6 	.word	0x00b2fff6
1004e638:	0036fff6 	.word	0x0036fff6
1004e63c:	fff6fff6 	.word	0xfff6fff6
1004e640:	0084      	.short	0x0084
1004e642:	0025      	movs	r5, r4
1004e644:	681a      	ldr	r2, [r3, #0]
1004e646:	3542      	adds	r5, #66	@ 0x42
1004e648:	1d11      	adds	r1, r2, #4
1004e64a:	6019      	str	r1, [r3, #0]
1004e64c:	6813      	ldr	r3, [r2, #0]
1004e64e:	702b      	strb	r3, [r5, #0]
1004e650:	2301      	movs	r3, #1
1004e652:	e0a0      	b.n	1004e796 <_printf_i+0x1c2>
1004e654:	6818      	ldr	r0, [r3, #0]
1004e656:	6809      	ldr	r1, [r1, #0]
1004e658:	1d02      	adds	r2, r0, #4
1004e65a:	060d      	lsls	r5, r1, #24
1004e65c:	d50b      	bpl.n	1004e676 <_printf_i+0xa2>
1004e65e:	6806      	ldr	r6, [r0, #0]
1004e660:	601a      	str	r2, [r3, #0]
1004e662:	2e00      	cmp	r6, #0
1004e664:	da03      	bge.n	1004e66e <_printf_i+0x9a>
1004e666:	232d      	movs	r3, #45	@ 0x2d
1004e668:	9a03      	ldr	r2, [sp, #12]
1004e66a:	4276      	negs	r6, r6
1004e66c:	7013      	strb	r3, [r2, #0]
1004e66e:	4b5e      	ldr	r3, [pc, #376]	@ (1004e7e8 <_printf_i+0x214>)
1004e670:	270a      	movs	r7, #10
1004e672:	9304      	str	r3, [sp, #16]
1004e674:	e018      	b.n	1004e6a8 <_printf_i+0xd4>
1004e676:	6806      	ldr	r6, [r0, #0]
1004e678:	601a      	str	r2, [r3, #0]
1004e67a:	0649      	lsls	r1, r1, #25
1004e67c:	d5f1      	bpl.n	1004e662 <_printf_i+0x8e>
1004e67e:	b236      	sxth	r6, r6
1004e680:	e7ef      	b.n	1004e662 <_printf_i+0x8e>
1004e682:	6808      	ldr	r0, [r1, #0]
1004e684:	6819      	ldr	r1, [r3, #0]
1004e686:	c940      	ldmia	r1!, {r6}
1004e688:	0605      	lsls	r5, r0, #24
1004e68a:	d402      	bmi.n	1004e692 <_printf_i+0xbe>
1004e68c:	0640      	lsls	r0, r0, #25
1004e68e:	d500      	bpl.n	1004e692 <_printf_i+0xbe>
1004e690:	b2b6      	uxth	r6, r6
1004e692:	6019      	str	r1, [r3, #0]
1004e694:	4b54      	ldr	r3, [pc, #336]	@ (1004e7e8 <_printf_i+0x214>)
1004e696:	270a      	movs	r7, #10
1004e698:	9304      	str	r3, [sp, #16]
1004e69a:	2a6f      	cmp	r2, #111	@ 0x6f
1004e69c:	d100      	bne.n	1004e6a0 <_printf_i+0xcc>
1004e69e:	3f02      	subs	r7, #2
1004e6a0:	0023      	movs	r3, r4
1004e6a2:	2200      	movs	r2, #0
1004e6a4:	3343      	adds	r3, #67	@ 0x43
1004e6a6:	701a      	strb	r2, [r3, #0]
1004e6a8:	6863      	ldr	r3, [r4, #4]
1004e6aa:	60a3      	str	r3, [r4, #8]
1004e6ac:	2b00      	cmp	r3, #0
1004e6ae:	db03      	blt.n	1004e6b8 <_printf_i+0xe4>
1004e6b0:	2104      	movs	r1, #4
1004e6b2:	6822      	ldr	r2, [r4, #0]
1004e6b4:	438a      	bics	r2, r1
1004e6b6:	6022      	str	r2, [r4, #0]
1004e6b8:	2e00      	cmp	r6, #0
1004e6ba:	d102      	bne.n	1004e6c2 <_printf_i+0xee>
1004e6bc:	9d03      	ldr	r5, [sp, #12]
1004e6be:	2b00      	cmp	r3, #0
1004e6c0:	d00c      	beq.n	1004e6dc <_printf_i+0x108>
1004e6c2:	9d03      	ldr	r5, [sp, #12]
1004e6c4:	0030      	movs	r0, r6
1004e6c6:	0039      	movs	r1, r7
1004e6c8:	f7f1 fe38 	bl	1004033c <__aeabi_uidivmod>
1004e6cc:	9b04      	ldr	r3, [sp, #16]
1004e6ce:	3d01      	subs	r5, #1
1004e6d0:	5c5b      	ldrb	r3, [r3, r1]
1004e6d2:	702b      	strb	r3, [r5, #0]
1004e6d4:	0033      	movs	r3, r6
1004e6d6:	0006      	movs	r6, r0
1004e6d8:	429f      	cmp	r7, r3
1004e6da:	d9f3      	bls.n	1004e6c4 <_printf_i+0xf0>
1004e6dc:	2f08      	cmp	r7, #8
1004e6de:	d109      	bne.n	1004e6f4 <_printf_i+0x120>
1004e6e0:	6823      	ldr	r3, [r4, #0]
1004e6e2:	07db      	lsls	r3, r3, #31
1004e6e4:	d506      	bpl.n	1004e6f4 <_printf_i+0x120>
1004e6e6:	6862      	ldr	r2, [r4, #4]
1004e6e8:	6923      	ldr	r3, [r4, #16]
1004e6ea:	429a      	cmp	r2, r3
1004e6ec:	dc02      	bgt.n	1004e6f4 <_printf_i+0x120>
1004e6ee:	2330      	movs	r3, #48	@ 0x30
1004e6f0:	3d01      	subs	r5, #1
1004e6f2:	702b      	strb	r3, [r5, #0]
1004e6f4:	9b03      	ldr	r3, [sp, #12]
1004e6f6:	1b5b      	subs	r3, r3, r5
1004e6f8:	6123      	str	r3, [r4, #16]
1004e6fa:	9b07      	ldr	r3, [sp, #28]
1004e6fc:	0021      	movs	r1, r4
1004e6fe:	9300      	str	r3, [sp, #0]
1004e700:	9805      	ldr	r0, [sp, #20]
1004e702:	9b06      	ldr	r3, [sp, #24]
1004e704:	aa09      	add	r2, sp, #36	@ 0x24
1004e706:	f7ff fef5 	bl	1004e4f4 <_printf_common>
1004e70a:	3001      	adds	r0, #1
1004e70c:	d148      	bne.n	1004e7a0 <_printf_i+0x1cc>
1004e70e:	2001      	movs	r0, #1
1004e710:	4240      	negs	r0, r0
1004e712:	b00b      	add	sp, #44	@ 0x2c
1004e714:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e716:	2220      	movs	r2, #32
1004e718:	6809      	ldr	r1, [r1, #0]
1004e71a:	430a      	orrs	r2, r1
1004e71c:	6022      	str	r2, [r4, #0]
1004e71e:	2278      	movs	r2, #120	@ 0x78
1004e720:	4932      	ldr	r1, [pc, #200]	@ (1004e7ec <_printf_i+0x218>)
1004e722:	9104      	str	r1, [sp, #16]
1004e724:	0021      	movs	r1, r4
1004e726:	3145      	adds	r1, #69	@ 0x45
1004e728:	700a      	strb	r2, [r1, #0]
1004e72a:	6819      	ldr	r1, [r3, #0]
1004e72c:	6822      	ldr	r2, [r4, #0]
1004e72e:	c940      	ldmia	r1!, {r6}
1004e730:	0610      	lsls	r0, r2, #24
1004e732:	d402      	bmi.n	1004e73a <_printf_i+0x166>
1004e734:	0650      	lsls	r0, r2, #25
1004e736:	d500      	bpl.n	1004e73a <_printf_i+0x166>
1004e738:	b2b6      	uxth	r6, r6
1004e73a:	6019      	str	r1, [r3, #0]
1004e73c:	07d3      	lsls	r3, r2, #31
1004e73e:	d502      	bpl.n	1004e746 <_printf_i+0x172>
1004e740:	2320      	movs	r3, #32
1004e742:	4313      	orrs	r3, r2
1004e744:	6023      	str	r3, [r4, #0]
1004e746:	2e00      	cmp	r6, #0
1004e748:	d001      	beq.n	1004e74e <_printf_i+0x17a>
1004e74a:	2710      	movs	r7, #16
1004e74c:	e7a8      	b.n	1004e6a0 <_printf_i+0xcc>
1004e74e:	2220      	movs	r2, #32
1004e750:	6823      	ldr	r3, [r4, #0]
1004e752:	4393      	bics	r3, r2
1004e754:	6023      	str	r3, [r4, #0]
1004e756:	e7f8      	b.n	1004e74a <_printf_i+0x176>
1004e758:	681a      	ldr	r2, [r3, #0]
1004e75a:	680d      	ldr	r5, [r1, #0]
1004e75c:	1d10      	adds	r0, r2, #4
1004e75e:	6949      	ldr	r1, [r1, #20]
1004e760:	6018      	str	r0, [r3, #0]
1004e762:	6813      	ldr	r3, [r2, #0]
1004e764:	062e      	lsls	r6, r5, #24
1004e766:	d501      	bpl.n	1004e76c <_printf_i+0x198>
1004e768:	6019      	str	r1, [r3, #0]
1004e76a:	e002      	b.n	1004e772 <_printf_i+0x19e>
1004e76c:	066d      	lsls	r5, r5, #25
1004e76e:	d5fb      	bpl.n	1004e768 <_printf_i+0x194>
1004e770:	8019      	strh	r1, [r3, #0]
1004e772:	2300      	movs	r3, #0
1004e774:	9d03      	ldr	r5, [sp, #12]
1004e776:	6123      	str	r3, [r4, #16]
1004e778:	e7bf      	b.n	1004e6fa <_printf_i+0x126>
1004e77a:	681a      	ldr	r2, [r3, #0]
1004e77c:	1d11      	adds	r1, r2, #4
1004e77e:	6019      	str	r1, [r3, #0]
1004e780:	6815      	ldr	r5, [r2, #0]
1004e782:	2100      	movs	r1, #0
1004e784:	0028      	movs	r0, r5
1004e786:	6862      	ldr	r2, [r4, #4]
1004e788:	f000 f986 	bl	1004ea98 <memchr>
1004e78c:	2800      	cmp	r0, #0
1004e78e:	d001      	beq.n	1004e794 <_printf_i+0x1c0>
1004e790:	1b40      	subs	r0, r0, r5
1004e792:	6060      	str	r0, [r4, #4]
1004e794:	6863      	ldr	r3, [r4, #4]
1004e796:	6123      	str	r3, [r4, #16]
1004e798:	2300      	movs	r3, #0
1004e79a:	9a03      	ldr	r2, [sp, #12]
1004e79c:	7013      	strb	r3, [r2, #0]
1004e79e:	e7ac      	b.n	1004e6fa <_printf_i+0x126>
1004e7a0:	002a      	movs	r2, r5
1004e7a2:	6923      	ldr	r3, [r4, #16]
1004e7a4:	9906      	ldr	r1, [sp, #24]
1004e7a6:	9805      	ldr	r0, [sp, #20]
1004e7a8:	9d07      	ldr	r5, [sp, #28]
1004e7aa:	47a8      	blx	r5
1004e7ac:	3001      	adds	r0, #1
1004e7ae:	d0ae      	beq.n	1004e70e <_printf_i+0x13a>
1004e7b0:	6823      	ldr	r3, [r4, #0]
1004e7b2:	079b      	lsls	r3, r3, #30
1004e7b4:	d415      	bmi.n	1004e7e2 <_printf_i+0x20e>
1004e7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004e7b8:	68e0      	ldr	r0, [r4, #12]
1004e7ba:	4298      	cmp	r0, r3
1004e7bc:	daa9      	bge.n	1004e712 <_printf_i+0x13e>
1004e7be:	0018      	movs	r0, r3
1004e7c0:	e7a7      	b.n	1004e712 <_printf_i+0x13e>
1004e7c2:	0022      	movs	r2, r4
1004e7c4:	2301      	movs	r3, #1
1004e7c6:	9906      	ldr	r1, [sp, #24]
1004e7c8:	9805      	ldr	r0, [sp, #20]
1004e7ca:	9e07      	ldr	r6, [sp, #28]
1004e7cc:	3219      	adds	r2, #25
1004e7ce:	47b0      	blx	r6
1004e7d0:	3001      	adds	r0, #1
1004e7d2:	d09c      	beq.n	1004e70e <_printf_i+0x13a>
1004e7d4:	3501      	adds	r5, #1
1004e7d6:	68e3      	ldr	r3, [r4, #12]
1004e7d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004e7da:	1a9b      	subs	r3, r3, r2
1004e7dc:	42ab      	cmp	r3, r5
1004e7de:	dcf0      	bgt.n	1004e7c2 <_printf_i+0x1ee>
1004e7e0:	e7e9      	b.n	1004e7b6 <_printf_i+0x1e2>
1004e7e2:	2500      	movs	r5, #0
1004e7e4:	e7f7      	b.n	1004e7d6 <_printf_i+0x202>
1004e7e6:	46c0      	nop			@ (mov r8, r8)
1004e7e8:	1004efdd 	.word	0x1004efdd
1004e7ec:	1004efee 	.word	0x1004efee

1004e7f0 <__sflush_r>:
1004e7f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004e7f2:	220c      	movs	r2, #12
1004e7f4:	5e8b      	ldrsh	r3, [r1, r2]
1004e7f6:	0005      	movs	r5, r0
1004e7f8:	000c      	movs	r4, r1
1004e7fa:	071a      	lsls	r2, r3, #28
1004e7fc:	d456      	bmi.n	1004e8ac <__sflush_r+0xbc>
1004e7fe:	684a      	ldr	r2, [r1, #4]
1004e800:	2a00      	cmp	r2, #0
1004e802:	dc02      	bgt.n	1004e80a <__sflush_r+0x1a>
1004e804:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
1004e806:	2a00      	cmp	r2, #0
1004e808:	dd4e      	ble.n	1004e8a8 <__sflush_r+0xb8>
1004e80a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004e80c:	2f00      	cmp	r7, #0
1004e80e:	d04b      	beq.n	1004e8a8 <__sflush_r+0xb8>
1004e810:	2200      	movs	r2, #0
1004e812:	2080      	movs	r0, #128	@ 0x80
1004e814:	682e      	ldr	r6, [r5, #0]
1004e816:	602a      	str	r2, [r5, #0]
1004e818:	001a      	movs	r2, r3
1004e81a:	0140      	lsls	r0, r0, #5
1004e81c:	6a21      	ldr	r1, [r4, #32]
1004e81e:	4002      	ands	r2, r0
1004e820:	4203      	tst	r3, r0
1004e822:	d033      	beq.n	1004e88c <__sflush_r+0x9c>
1004e824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1004e826:	89a3      	ldrh	r3, [r4, #12]
1004e828:	075b      	lsls	r3, r3, #29
1004e82a:	d506      	bpl.n	1004e83a <__sflush_r+0x4a>
1004e82c:	6863      	ldr	r3, [r4, #4]
1004e82e:	1ad2      	subs	r2, r2, r3
1004e830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1004e832:	2b00      	cmp	r3, #0
1004e834:	d001      	beq.n	1004e83a <__sflush_r+0x4a>
1004e836:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1004e838:	1ad2      	subs	r2, r2, r3
1004e83a:	2300      	movs	r3, #0
1004e83c:	0028      	movs	r0, r5
1004e83e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004e840:	6a21      	ldr	r1, [r4, #32]
1004e842:	47b8      	blx	r7
1004e844:	89a2      	ldrh	r2, [r4, #12]
1004e846:	1c43      	adds	r3, r0, #1
1004e848:	d106      	bne.n	1004e858 <__sflush_r+0x68>
1004e84a:	6829      	ldr	r1, [r5, #0]
1004e84c:	291d      	cmp	r1, #29
1004e84e:	d846      	bhi.n	1004e8de <__sflush_r+0xee>
1004e850:	4b29      	ldr	r3, [pc, #164]	@ (1004e8f8 <__sflush_r+0x108>)
1004e852:	410b      	asrs	r3, r1
1004e854:	07db      	lsls	r3, r3, #31
1004e856:	d442      	bmi.n	1004e8de <__sflush_r+0xee>
1004e858:	2300      	movs	r3, #0
1004e85a:	6063      	str	r3, [r4, #4]
1004e85c:	6923      	ldr	r3, [r4, #16]
1004e85e:	6023      	str	r3, [r4, #0]
1004e860:	04d2      	lsls	r2, r2, #19
1004e862:	d505      	bpl.n	1004e870 <__sflush_r+0x80>
1004e864:	1c43      	adds	r3, r0, #1
1004e866:	d102      	bne.n	1004e86e <__sflush_r+0x7e>
1004e868:	682b      	ldr	r3, [r5, #0]
1004e86a:	2b00      	cmp	r3, #0
1004e86c:	d100      	bne.n	1004e870 <__sflush_r+0x80>
1004e86e:	6560      	str	r0, [r4, #84]	@ 0x54
1004e870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004e872:	602e      	str	r6, [r5, #0]
1004e874:	2900      	cmp	r1, #0
1004e876:	d017      	beq.n	1004e8a8 <__sflush_r+0xb8>
1004e878:	0023      	movs	r3, r4
1004e87a:	3344      	adds	r3, #68	@ 0x44
1004e87c:	4299      	cmp	r1, r3
1004e87e:	d002      	beq.n	1004e886 <__sflush_r+0x96>
1004e880:	0028      	movs	r0, r5
1004e882:	f7ff fbed 	bl	1004e060 <_free_r>
1004e886:	2300      	movs	r3, #0
1004e888:	6363      	str	r3, [r4, #52]	@ 0x34
1004e88a:	e00d      	b.n	1004e8a8 <__sflush_r+0xb8>
1004e88c:	2301      	movs	r3, #1
1004e88e:	0028      	movs	r0, r5
1004e890:	47b8      	blx	r7
1004e892:	0002      	movs	r2, r0
1004e894:	1c43      	adds	r3, r0, #1
1004e896:	d1c6      	bne.n	1004e826 <__sflush_r+0x36>
1004e898:	682b      	ldr	r3, [r5, #0]
1004e89a:	2b00      	cmp	r3, #0
1004e89c:	d0c3      	beq.n	1004e826 <__sflush_r+0x36>
1004e89e:	2b1d      	cmp	r3, #29
1004e8a0:	d001      	beq.n	1004e8a6 <__sflush_r+0xb6>
1004e8a2:	2b16      	cmp	r3, #22
1004e8a4:	d11a      	bne.n	1004e8dc <__sflush_r+0xec>
1004e8a6:	602e      	str	r6, [r5, #0]
1004e8a8:	2000      	movs	r0, #0
1004e8aa:	e01e      	b.n	1004e8ea <__sflush_r+0xfa>
1004e8ac:	690e      	ldr	r6, [r1, #16]
1004e8ae:	2e00      	cmp	r6, #0
1004e8b0:	d0fa      	beq.n	1004e8a8 <__sflush_r+0xb8>
1004e8b2:	680f      	ldr	r7, [r1, #0]
1004e8b4:	600e      	str	r6, [r1, #0]
1004e8b6:	1bba      	subs	r2, r7, r6
1004e8b8:	9201      	str	r2, [sp, #4]
1004e8ba:	2200      	movs	r2, #0
1004e8bc:	079b      	lsls	r3, r3, #30
1004e8be:	d100      	bne.n	1004e8c2 <__sflush_r+0xd2>
1004e8c0:	694a      	ldr	r2, [r1, #20]
1004e8c2:	60a2      	str	r2, [r4, #8]
1004e8c4:	9b01      	ldr	r3, [sp, #4]
1004e8c6:	2b00      	cmp	r3, #0
1004e8c8:	ddee      	ble.n	1004e8a8 <__sflush_r+0xb8>
1004e8ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
1004e8cc:	0032      	movs	r2, r6
1004e8ce:	001f      	movs	r7, r3
1004e8d0:	0028      	movs	r0, r5
1004e8d2:	9b01      	ldr	r3, [sp, #4]
1004e8d4:	6a21      	ldr	r1, [r4, #32]
1004e8d6:	47b8      	blx	r7
1004e8d8:	2800      	cmp	r0, #0
1004e8da:	dc07      	bgt.n	1004e8ec <__sflush_r+0xfc>
1004e8dc:	89a2      	ldrh	r2, [r4, #12]
1004e8de:	2340      	movs	r3, #64	@ 0x40
1004e8e0:	2001      	movs	r0, #1
1004e8e2:	4313      	orrs	r3, r2
1004e8e4:	b21b      	sxth	r3, r3
1004e8e6:	81a3      	strh	r3, [r4, #12]
1004e8e8:	4240      	negs	r0, r0
1004e8ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004e8ec:	9b01      	ldr	r3, [sp, #4]
1004e8ee:	1836      	adds	r6, r6, r0
1004e8f0:	1a1b      	subs	r3, r3, r0
1004e8f2:	9301      	str	r3, [sp, #4]
1004e8f4:	e7e6      	b.n	1004e8c4 <__sflush_r+0xd4>
1004e8f6:	46c0      	nop			@ (mov r8, r8)
1004e8f8:	dfbffffe 	.word	0xdfbffffe

1004e8fc <_fflush_r>:
1004e8fc:	690b      	ldr	r3, [r1, #16]
1004e8fe:	b570      	push	{r4, r5, r6, lr}
1004e900:	0005      	movs	r5, r0
1004e902:	000c      	movs	r4, r1
1004e904:	2b00      	cmp	r3, #0
1004e906:	d102      	bne.n	1004e90e <_fflush_r+0x12>
1004e908:	2500      	movs	r5, #0
1004e90a:	0028      	movs	r0, r5
1004e90c:	bd70      	pop	{r4, r5, r6, pc}
1004e90e:	2800      	cmp	r0, #0
1004e910:	d004      	beq.n	1004e91c <_fflush_r+0x20>
1004e912:	6a03      	ldr	r3, [r0, #32]
1004e914:	2b00      	cmp	r3, #0
1004e916:	d101      	bne.n	1004e91c <_fflush_r+0x20>
1004e918:	f7ff f8e6 	bl	1004dae8 <__sinit>
1004e91c:	220c      	movs	r2, #12
1004e91e:	5ea3      	ldrsh	r3, [r4, r2]
1004e920:	2b00      	cmp	r3, #0
1004e922:	d0f1      	beq.n	1004e908 <_fflush_r+0xc>
1004e924:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004e926:	07d2      	lsls	r2, r2, #31
1004e928:	d404      	bmi.n	1004e934 <_fflush_r+0x38>
1004e92a:	059b      	lsls	r3, r3, #22
1004e92c:	d402      	bmi.n	1004e934 <_fflush_r+0x38>
1004e92e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004e930:	f7ff fb8b 	bl	1004e04a <__retarget_lock_acquire_recursive>
1004e934:	0028      	movs	r0, r5
1004e936:	0021      	movs	r1, r4
1004e938:	f7ff ff5a 	bl	1004e7f0 <__sflush_r>
1004e93c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004e93e:	0005      	movs	r5, r0
1004e940:	07db      	lsls	r3, r3, #31
1004e942:	d4e2      	bmi.n	1004e90a <_fflush_r+0xe>
1004e944:	89a3      	ldrh	r3, [r4, #12]
1004e946:	059b      	lsls	r3, r3, #22
1004e948:	d4df      	bmi.n	1004e90a <_fflush_r+0xe>
1004e94a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004e94c:	f7ff fb7e 	bl	1004e04c <__retarget_lock_release_recursive>
1004e950:	e7db      	b.n	1004e90a <_fflush_r+0xe>
	...

1004e954 <__swhatbuf_r>:
1004e954:	b570      	push	{r4, r5, r6, lr}
1004e956:	000e      	movs	r6, r1
1004e958:	001d      	movs	r5, r3
1004e95a:	230e      	movs	r3, #14
1004e95c:	5ec9      	ldrsh	r1, [r1, r3]
1004e95e:	0014      	movs	r4, r2
1004e960:	b096      	sub	sp, #88	@ 0x58
1004e962:	2900      	cmp	r1, #0
1004e964:	da0c      	bge.n	1004e980 <__swhatbuf_r+0x2c>
1004e966:	89b2      	ldrh	r2, [r6, #12]
1004e968:	2380      	movs	r3, #128	@ 0x80
1004e96a:	0011      	movs	r1, r2
1004e96c:	4019      	ands	r1, r3
1004e96e:	421a      	tst	r2, r3
1004e970:	d114      	bne.n	1004e99c <__swhatbuf_r+0x48>
1004e972:	2380      	movs	r3, #128	@ 0x80
1004e974:	00db      	lsls	r3, r3, #3
1004e976:	2000      	movs	r0, #0
1004e978:	6029      	str	r1, [r5, #0]
1004e97a:	6023      	str	r3, [r4, #0]
1004e97c:	b016      	add	sp, #88	@ 0x58
1004e97e:	bd70      	pop	{r4, r5, r6, pc}
1004e980:	466a      	mov	r2, sp
1004e982:	f000 f853 	bl	1004ea2c <_fstat_r>
1004e986:	2800      	cmp	r0, #0
1004e988:	dbed      	blt.n	1004e966 <__swhatbuf_r+0x12>
1004e98a:	23f0      	movs	r3, #240	@ 0xf0
1004e98c:	9901      	ldr	r1, [sp, #4]
1004e98e:	021b      	lsls	r3, r3, #8
1004e990:	4019      	ands	r1, r3
1004e992:	4b04      	ldr	r3, [pc, #16]	@ (1004e9a4 <__swhatbuf_r+0x50>)
1004e994:	18c9      	adds	r1, r1, r3
1004e996:	424b      	negs	r3, r1
1004e998:	4159      	adcs	r1, r3
1004e99a:	e7ea      	b.n	1004e972 <__swhatbuf_r+0x1e>
1004e99c:	2100      	movs	r1, #0
1004e99e:	2340      	movs	r3, #64	@ 0x40
1004e9a0:	e7e9      	b.n	1004e976 <__swhatbuf_r+0x22>
1004e9a2:	46c0      	nop			@ (mov r8, r8)
1004e9a4:	ffffe000 	.word	0xffffe000

1004e9a8 <__smakebuf_r>:
1004e9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e9aa:	2602      	movs	r6, #2
1004e9ac:	898b      	ldrh	r3, [r1, #12]
1004e9ae:	0005      	movs	r5, r0
1004e9b0:	000c      	movs	r4, r1
1004e9b2:	b085      	sub	sp, #20
1004e9b4:	4233      	tst	r3, r6
1004e9b6:	d007      	beq.n	1004e9c8 <__smakebuf_r+0x20>
1004e9b8:	0023      	movs	r3, r4
1004e9ba:	3347      	adds	r3, #71	@ 0x47
1004e9bc:	6023      	str	r3, [r4, #0]
1004e9be:	6123      	str	r3, [r4, #16]
1004e9c0:	2301      	movs	r3, #1
1004e9c2:	6163      	str	r3, [r4, #20]
1004e9c4:	b005      	add	sp, #20
1004e9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e9c8:	ab03      	add	r3, sp, #12
1004e9ca:	aa02      	add	r2, sp, #8
1004e9cc:	f7ff ffc2 	bl	1004e954 <__swhatbuf_r>
1004e9d0:	9f02      	ldr	r7, [sp, #8]
1004e9d2:	9001      	str	r0, [sp, #4]
1004e9d4:	0039      	movs	r1, r7
1004e9d6:	0028      	movs	r0, r5
1004e9d8:	f7ff fbb8 	bl	1004e14c <_malloc_r>
1004e9dc:	2800      	cmp	r0, #0
1004e9de:	d108      	bne.n	1004e9f2 <__smakebuf_r+0x4a>
1004e9e0:	220c      	movs	r2, #12
1004e9e2:	5ea3      	ldrsh	r3, [r4, r2]
1004e9e4:	059a      	lsls	r2, r3, #22
1004e9e6:	d4ed      	bmi.n	1004e9c4 <__smakebuf_r+0x1c>
1004e9e8:	2203      	movs	r2, #3
1004e9ea:	4393      	bics	r3, r2
1004e9ec:	431e      	orrs	r6, r3
1004e9ee:	81a6      	strh	r6, [r4, #12]
1004e9f0:	e7e2      	b.n	1004e9b8 <__smakebuf_r+0x10>
1004e9f2:	2380      	movs	r3, #128	@ 0x80
1004e9f4:	89a2      	ldrh	r2, [r4, #12]
1004e9f6:	6020      	str	r0, [r4, #0]
1004e9f8:	4313      	orrs	r3, r2
1004e9fa:	81a3      	strh	r3, [r4, #12]
1004e9fc:	9b03      	ldr	r3, [sp, #12]
1004e9fe:	6120      	str	r0, [r4, #16]
1004ea00:	6167      	str	r7, [r4, #20]
1004ea02:	2b00      	cmp	r3, #0
1004ea04:	d00c      	beq.n	1004ea20 <__smakebuf_r+0x78>
1004ea06:	0028      	movs	r0, r5
1004ea08:	230e      	movs	r3, #14
1004ea0a:	5ee1      	ldrsh	r1, [r4, r3]
1004ea0c:	f000 f820 	bl	1004ea50 <_isatty_r>
1004ea10:	2800      	cmp	r0, #0
1004ea12:	d005      	beq.n	1004ea20 <__smakebuf_r+0x78>
1004ea14:	2303      	movs	r3, #3
1004ea16:	89a2      	ldrh	r2, [r4, #12]
1004ea18:	439a      	bics	r2, r3
1004ea1a:	3b02      	subs	r3, #2
1004ea1c:	4313      	orrs	r3, r2
1004ea1e:	81a3      	strh	r3, [r4, #12]
1004ea20:	89a3      	ldrh	r3, [r4, #12]
1004ea22:	9a01      	ldr	r2, [sp, #4]
1004ea24:	4313      	orrs	r3, r2
1004ea26:	81a3      	strh	r3, [r4, #12]
1004ea28:	e7cc      	b.n	1004e9c4 <__smakebuf_r+0x1c>
	...

1004ea2c <_fstat_r>:
1004ea2c:	2300      	movs	r3, #0
1004ea2e:	b570      	push	{r4, r5, r6, lr}
1004ea30:	4d06      	ldr	r5, [pc, #24]	@ (1004ea4c <_fstat_r+0x20>)
1004ea32:	0004      	movs	r4, r0
1004ea34:	0008      	movs	r0, r1
1004ea36:	0011      	movs	r1, r2
1004ea38:	602b      	str	r3, [r5, #0]
1004ea3a:	f7f2 fd3e 	bl	100414ba <_fstat>
1004ea3e:	1c43      	adds	r3, r0, #1
1004ea40:	d103      	bne.n	1004ea4a <_fstat_r+0x1e>
1004ea42:	682b      	ldr	r3, [r5, #0]
1004ea44:	2b00      	cmp	r3, #0
1004ea46:	d000      	beq.n	1004ea4a <_fstat_r+0x1e>
1004ea48:	6023      	str	r3, [r4, #0]
1004ea4a:	bd70      	pop	{r4, r5, r6, pc}
1004ea4c:	2000084c 	.word	0x2000084c

1004ea50 <_isatty_r>:
1004ea50:	2300      	movs	r3, #0
1004ea52:	b570      	push	{r4, r5, r6, lr}
1004ea54:	4d06      	ldr	r5, [pc, #24]	@ (1004ea70 <_isatty_r+0x20>)
1004ea56:	0004      	movs	r4, r0
1004ea58:	0008      	movs	r0, r1
1004ea5a:	602b      	str	r3, [r5, #0]
1004ea5c:	f7f2 fd3b 	bl	100414d6 <_isatty>
1004ea60:	1c43      	adds	r3, r0, #1
1004ea62:	d103      	bne.n	1004ea6c <_isatty_r+0x1c>
1004ea64:	682b      	ldr	r3, [r5, #0]
1004ea66:	2b00      	cmp	r3, #0
1004ea68:	d000      	beq.n	1004ea6c <_isatty_r+0x1c>
1004ea6a:	6023      	str	r3, [r4, #0]
1004ea6c:	bd70      	pop	{r4, r5, r6, pc}
1004ea6e:	46c0      	nop			@ (mov r8, r8)
1004ea70:	2000084c 	.word	0x2000084c

1004ea74 <_sbrk_r>:
1004ea74:	2300      	movs	r3, #0
1004ea76:	b570      	push	{r4, r5, r6, lr}
1004ea78:	4d06      	ldr	r5, [pc, #24]	@ (1004ea94 <_sbrk_r+0x20>)
1004ea7a:	0004      	movs	r4, r0
1004ea7c:	0008      	movs	r0, r1
1004ea7e:	602b      	str	r3, [r5, #0]
1004ea80:	f7f2 fd3e 	bl	10041500 <_sbrk>
1004ea84:	1c43      	adds	r3, r0, #1
1004ea86:	d103      	bne.n	1004ea90 <_sbrk_r+0x1c>
1004ea88:	682b      	ldr	r3, [r5, #0]
1004ea8a:	2b00      	cmp	r3, #0
1004ea8c:	d000      	beq.n	1004ea90 <_sbrk_r+0x1c>
1004ea8e:	6023      	str	r3, [r4, #0]
1004ea90:	bd70      	pop	{r4, r5, r6, pc}
1004ea92:	46c0      	nop			@ (mov r8, r8)
1004ea94:	2000084c 	.word	0x2000084c

1004ea98 <memchr>:
1004ea98:	b2c9      	uxtb	r1, r1
1004ea9a:	1882      	adds	r2, r0, r2
1004ea9c:	4290      	cmp	r0, r2
1004ea9e:	d101      	bne.n	1004eaa4 <memchr+0xc>
1004eaa0:	2000      	movs	r0, #0
1004eaa2:	4770      	bx	lr
1004eaa4:	7803      	ldrb	r3, [r0, #0]
1004eaa6:	428b      	cmp	r3, r1
1004eaa8:	d0fb      	beq.n	1004eaa2 <memchr+0xa>
1004eaaa:	3001      	adds	r0, #1
1004eaac:	e7f6      	b.n	1004ea9c <memchr+0x4>
	...

Disassembly of section .init:

1004eab0 <_init>:
1004eab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004eab2:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

1004eab4 <_fini>:
1004eab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004eab6:	46c0      	nop			@ (mov r8, r8)
