
BLE_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e314  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1004e3d4  1004e3d4  0000f3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  1004e3d8  1004e3d8  0000f3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000004a8  1004e3dc  1004e3dc  0000f3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1004e884  1004e884  0000f884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000b0  200007ec  1004e88c  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00011004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  00011004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  00011004  2**2
                  ALLOC
 10 .bss          00000658  20000194  20000194  00011004  2**2
                  ALLOC
 11 .noinit       000017b0  2000089c  1004e93c  0001089c  2**2
                  ALLOC
 12 .ota_region_end 00000000  1004e93c  1004e93c  0001089c  2**0
                  CONTENTS
 13 .heap         00000000  2000204c  2000204c  0001089c  2**0
                  CONTENTS
 14 .stack        00000c00  2000f400  2000f400  00011400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  0001089c  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  0001089c  2**0
                  CONTENTS, READONLY
 17 .debug_info   0001f81a  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000579f  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002570  00000000  00000000  00035888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001bf2  00000000  00000000  00037df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00022d85  00000000  00000000  000399ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00024bbc  00000000  00000000  0005c76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000c772c  00000000  00000000  0008132b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000087  00000000  00000000  00148a57  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00008e64  00000000  00000000  00148ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000185  00000000  00000000  00151944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <__gnu_thumb1_case_shi>:
1004021c:	b403      	push	{r0, r1}
1004021e:	4671      	mov	r1, lr
10040220:	0849      	lsrs	r1, r1, #1
10040222:	0040      	lsls	r0, r0, #1
10040224:	0049      	lsls	r1, r1, #1
10040226:	5e09      	ldrsh	r1, [r1, r0]
10040228:	0049      	lsls	r1, r1, #1
1004022a:	448e      	add	lr, r1
1004022c:	bc03      	pop	{r0, r1}
1004022e:	4770      	bx	lr

10040230 <__udivsi3>:
10040230:	2200      	movs	r2, #0
10040232:	0843      	lsrs	r3, r0, #1
10040234:	428b      	cmp	r3, r1
10040236:	d374      	bcc.n	10040322 <__udivsi3+0xf2>
10040238:	0903      	lsrs	r3, r0, #4
1004023a:	428b      	cmp	r3, r1
1004023c:	d35f      	bcc.n	100402fe <__udivsi3+0xce>
1004023e:	0a03      	lsrs	r3, r0, #8
10040240:	428b      	cmp	r3, r1
10040242:	d344      	bcc.n	100402ce <__udivsi3+0x9e>
10040244:	0b03      	lsrs	r3, r0, #12
10040246:	428b      	cmp	r3, r1
10040248:	d328      	bcc.n	1004029c <__udivsi3+0x6c>
1004024a:	0c03      	lsrs	r3, r0, #16
1004024c:	428b      	cmp	r3, r1
1004024e:	d30d      	bcc.n	1004026c <__udivsi3+0x3c>
10040250:	22ff      	movs	r2, #255	@ 0xff
10040252:	0209      	lsls	r1, r1, #8
10040254:	ba12      	rev	r2, r2
10040256:	0c03      	lsrs	r3, r0, #16
10040258:	428b      	cmp	r3, r1
1004025a:	d302      	bcc.n	10040262 <__udivsi3+0x32>
1004025c:	1212      	asrs	r2, r2, #8
1004025e:	0209      	lsls	r1, r1, #8
10040260:	d065      	beq.n	1004032e <__udivsi3+0xfe>
10040262:	0b03      	lsrs	r3, r0, #12
10040264:	428b      	cmp	r3, r1
10040266:	d319      	bcc.n	1004029c <__udivsi3+0x6c>
10040268:	e000      	b.n	1004026c <__udivsi3+0x3c>
1004026a:	0a09      	lsrs	r1, r1, #8
1004026c:	0bc3      	lsrs	r3, r0, #15
1004026e:	428b      	cmp	r3, r1
10040270:	d301      	bcc.n	10040276 <__udivsi3+0x46>
10040272:	03cb      	lsls	r3, r1, #15
10040274:	1ac0      	subs	r0, r0, r3
10040276:	4152      	adcs	r2, r2
10040278:	0b83      	lsrs	r3, r0, #14
1004027a:	428b      	cmp	r3, r1
1004027c:	d301      	bcc.n	10040282 <__udivsi3+0x52>
1004027e:	038b      	lsls	r3, r1, #14
10040280:	1ac0      	subs	r0, r0, r3
10040282:	4152      	adcs	r2, r2
10040284:	0b43      	lsrs	r3, r0, #13
10040286:	428b      	cmp	r3, r1
10040288:	d301      	bcc.n	1004028e <__udivsi3+0x5e>
1004028a:	034b      	lsls	r3, r1, #13
1004028c:	1ac0      	subs	r0, r0, r3
1004028e:	4152      	adcs	r2, r2
10040290:	0b03      	lsrs	r3, r0, #12
10040292:	428b      	cmp	r3, r1
10040294:	d301      	bcc.n	1004029a <__udivsi3+0x6a>
10040296:	030b      	lsls	r3, r1, #12
10040298:	1ac0      	subs	r0, r0, r3
1004029a:	4152      	adcs	r2, r2
1004029c:	0ac3      	lsrs	r3, r0, #11
1004029e:	428b      	cmp	r3, r1
100402a0:	d301      	bcc.n	100402a6 <__udivsi3+0x76>
100402a2:	02cb      	lsls	r3, r1, #11
100402a4:	1ac0      	subs	r0, r0, r3
100402a6:	4152      	adcs	r2, r2
100402a8:	0a83      	lsrs	r3, r0, #10
100402aa:	428b      	cmp	r3, r1
100402ac:	d301      	bcc.n	100402b2 <__udivsi3+0x82>
100402ae:	028b      	lsls	r3, r1, #10
100402b0:	1ac0      	subs	r0, r0, r3
100402b2:	4152      	adcs	r2, r2
100402b4:	0a43      	lsrs	r3, r0, #9
100402b6:	428b      	cmp	r3, r1
100402b8:	d301      	bcc.n	100402be <__udivsi3+0x8e>
100402ba:	024b      	lsls	r3, r1, #9
100402bc:	1ac0      	subs	r0, r0, r3
100402be:	4152      	adcs	r2, r2
100402c0:	0a03      	lsrs	r3, r0, #8
100402c2:	428b      	cmp	r3, r1
100402c4:	d301      	bcc.n	100402ca <__udivsi3+0x9a>
100402c6:	020b      	lsls	r3, r1, #8
100402c8:	1ac0      	subs	r0, r0, r3
100402ca:	4152      	adcs	r2, r2
100402cc:	d2cd      	bcs.n	1004026a <__udivsi3+0x3a>
100402ce:	09c3      	lsrs	r3, r0, #7
100402d0:	428b      	cmp	r3, r1
100402d2:	d301      	bcc.n	100402d8 <__udivsi3+0xa8>
100402d4:	01cb      	lsls	r3, r1, #7
100402d6:	1ac0      	subs	r0, r0, r3
100402d8:	4152      	adcs	r2, r2
100402da:	0983      	lsrs	r3, r0, #6
100402dc:	428b      	cmp	r3, r1
100402de:	d301      	bcc.n	100402e4 <__udivsi3+0xb4>
100402e0:	018b      	lsls	r3, r1, #6
100402e2:	1ac0      	subs	r0, r0, r3
100402e4:	4152      	adcs	r2, r2
100402e6:	0943      	lsrs	r3, r0, #5
100402e8:	428b      	cmp	r3, r1
100402ea:	d301      	bcc.n	100402f0 <__udivsi3+0xc0>
100402ec:	014b      	lsls	r3, r1, #5
100402ee:	1ac0      	subs	r0, r0, r3
100402f0:	4152      	adcs	r2, r2
100402f2:	0903      	lsrs	r3, r0, #4
100402f4:	428b      	cmp	r3, r1
100402f6:	d301      	bcc.n	100402fc <__udivsi3+0xcc>
100402f8:	010b      	lsls	r3, r1, #4
100402fa:	1ac0      	subs	r0, r0, r3
100402fc:	4152      	adcs	r2, r2
100402fe:	08c3      	lsrs	r3, r0, #3
10040300:	428b      	cmp	r3, r1
10040302:	d301      	bcc.n	10040308 <__udivsi3+0xd8>
10040304:	00cb      	lsls	r3, r1, #3
10040306:	1ac0      	subs	r0, r0, r3
10040308:	4152      	adcs	r2, r2
1004030a:	0883      	lsrs	r3, r0, #2
1004030c:	428b      	cmp	r3, r1
1004030e:	d301      	bcc.n	10040314 <__udivsi3+0xe4>
10040310:	008b      	lsls	r3, r1, #2
10040312:	1ac0      	subs	r0, r0, r3
10040314:	4152      	adcs	r2, r2
10040316:	0843      	lsrs	r3, r0, #1
10040318:	428b      	cmp	r3, r1
1004031a:	d301      	bcc.n	10040320 <__udivsi3+0xf0>
1004031c:	004b      	lsls	r3, r1, #1
1004031e:	1ac0      	subs	r0, r0, r3
10040320:	4152      	adcs	r2, r2
10040322:	1a41      	subs	r1, r0, r1
10040324:	d200      	bcs.n	10040328 <__udivsi3+0xf8>
10040326:	4601      	mov	r1, r0
10040328:	4152      	adcs	r2, r2
1004032a:	4610      	mov	r0, r2
1004032c:	4770      	bx	lr
1004032e:	e7ff      	b.n	10040330 <__udivsi3+0x100>
10040330:	b501      	push	{r0, lr}
10040332:	2000      	movs	r0, #0
10040334:	f000 f8f0 	bl	10040518 <__aeabi_idiv0>
10040338:	bd02      	pop	{r1, pc}
1004033a:	46c0      	nop			@ (mov r8, r8)

1004033c <__aeabi_uidivmod>:
1004033c:	2900      	cmp	r1, #0
1004033e:	d0f7      	beq.n	10040330 <__udivsi3+0x100>
10040340:	e776      	b.n	10040230 <__udivsi3>
10040342:	4770      	bx	lr

10040344 <__divsi3>:
10040344:	4603      	mov	r3, r0
10040346:	430b      	orrs	r3, r1
10040348:	d47f      	bmi.n	1004044a <__divsi3+0x106>
1004034a:	2200      	movs	r2, #0
1004034c:	0843      	lsrs	r3, r0, #1
1004034e:	428b      	cmp	r3, r1
10040350:	d374      	bcc.n	1004043c <__divsi3+0xf8>
10040352:	0903      	lsrs	r3, r0, #4
10040354:	428b      	cmp	r3, r1
10040356:	d35f      	bcc.n	10040418 <__divsi3+0xd4>
10040358:	0a03      	lsrs	r3, r0, #8
1004035a:	428b      	cmp	r3, r1
1004035c:	d344      	bcc.n	100403e8 <__divsi3+0xa4>
1004035e:	0b03      	lsrs	r3, r0, #12
10040360:	428b      	cmp	r3, r1
10040362:	d328      	bcc.n	100403b6 <__divsi3+0x72>
10040364:	0c03      	lsrs	r3, r0, #16
10040366:	428b      	cmp	r3, r1
10040368:	d30d      	bcc.n	10040386 <__divsi3+0x42>
1004036a:	22ff      	movs	r2, #255	@ 0xff
1004036c:	0209      	lsls	r1, r1, #8
1004036e:	ba12      	rev	r2, r2
10040370:	0c03      	lsrs	r3, r0, #16
10040372:	428b      	cmp	r3, r1
10040374:	d302      	bcc.n	1004037c <__divsi3+0x38>
10040376:	1212      	asrs	r2, r2, #8
10040378:	0209      	lsls	r1, r1, #8
1004037a:	d065      	beq.n	10040448 <__divsi3+0x104>
1004037c:	0b03      	lsrs	r3, r0, #12
1004037e:	428b      	cmp	r3, r1
10040380:	d319      	bcc.n	100403b6 <__divsi3+0x72>
10040382:	e000      	b.n	10040386 <__divsi3+0x42>
10040384:	0a09      	lsrs	r1, r1, #8
10040386:	0bc3      	lsrs	r3, r0, #15
10040388:	428b      	cmp	r3, r1
1004038a:	d301      	bcc.n	10040390 <__divsi3+0x4c>
1004038c:	03cb      	lsls	r3, r1, #15
1004038e:	1ac0      	subs	r0, r0, r3
10040390:	4152      	adcs	r2, r2
10040392:	0b83      	lsrs	r3, r0, #14
10040394:	428b      	cmp	r3, r1
10040396:	d301      	bcc.n	1004039c <__divsi3+0x58>
10040398:	038b      	lsls	r3, r1, #14
1004039a:	1ac0      	subs	r0, r0, r3
1004039c:	4152      	adcs	r2, r2
1004039e:	0b43      	lsrs	r3, r0, #13
100403a0:	428b      	cmp	r3, r1
100403a2:	d301      	bcc.n	100403a8 <__divsi3+0x64>
100403a4:	034b      	lsls	r3, r1, #13
100403a6:	1ac0      	subs	r0, r0, r3
100403a8:	4152      	adcs	r2, r2
100403aa:	0b03      	lsrs	r3, r0, #12
100403ac:	428b      	cmp	r3, r1
100403ae:	d301      	bcc.n	100403b4 <__divsi3+0x70>
100403b0:	030b      	lsls	r3, r1, #12
100403b2:	1ac0      	subs	r0, r0, r3
100403b4:	4152      	adcs	r2, r2
100403b6:	0ac3      	lsrs	r3, r0, #11
100403b8:	428b      	cmp	r3, r1
100403ba:	d301      	bcc.n	100403c0 <__divsi3+0x7c>
100403bc:	02cb      	lsls	r3, r1, #11
100403be:	1ac0      	subs	r0, r0, r3
100403c0:	4152      	adcs	r2, r2
100403c2:	0a83      	lsrs	r3, r0, #10
100403c4:	428b      	cmp	r3, r1
100403c6:	d301      	bcc.n	100403cc <__divsi3+0x88>
100403c8:	028b      	lsls	r3, r1, #10
100403ca:	1ac0      	subs	r0, r0, r3
100403cc:	4152      	adcs	r2, r2
100403ce:	0a43      	lsrs	r3, r0, #9
100403d0:	428b      	cmp	r3, r1
100403d2:	d301      	bcc.n	100403d8 <__divsi3+0x94>
100403d4:	024b      	lsls	r3, r1, #9
100403d6:	1ac0      	subs	r0, r0, r3
100403d8:	4152      	adcs	r2, r2
100403da:	0a03      	lsrs	r3, r0, #8
100403dc:	428b      	cmp	r3, r1
100403de:	d301      	bcc.n	100403e4 <__divsi3+0xa0>
100403e0:	020b      	lsls	r3, r1, #8
100403e2:	1ac0      	subs	r0, r0, r3
100403e4:	4152      	adcs	r2, r2
100403e6:	d2cd      	bcs.n	10040384 <__divsi3+0x40>
100403e8:	09c3      	lsrs	r3, r0, #7
100403ea:	428b      	cmp	r3, r1
100403ec:	d301      	bcc.n	100403f2 <__divsi3+0xae>
100403ee:	01cb      	lsls	r3, r1, #7
100403f0:	1ac0      	subs	r0, r0, r3
100403f2:	4152      	adcs	r2, r2
100403f4:	0983      	lsrs	r3, r0, #6
100403f6:	428b      	cmp	r3, r1
100403f8:	d301      	bcc.n	100403fe <__divsi3+0xba>
100403fa:	018b      	lsls	r3, r1, #6
100403fc:	1ac0      	subs	r0, r0, r3
100403fe:	4152      	adcs	r2, r2
10040400:	0943      	lsrs	r3, r0, #5
10040402:	428b      	cmp	r3, r1
10040404:	d301      	bcc.n	1004040a <__divsi3+0xc6>
10040406:	014b      	lsls	r3, r1, #5
10040408:	1ac0      	subs	r0, r0, r3
1004040a:	4152      	adcs	r2, r2
1004040c:	0903      	lsrs	r3, r0, #4
1004040e:	428b      	cmp	r3, r1
10040410:	d301      	bcc.n	10040416 <__divsi3+0xd2>
10040412:	010b      	lsls	r3, r1, #4
10040414:	1ac0      	subs	r0, r0, r3
10040416:	4152      	adcs	r2, r2
10040418:	08c3      	lsrs	r3, r0, #3
1004041a:	428b      	cmp	r3, r1
1004041c:	d301      	bcc.n	10040422 <__divsi3+0xde>
1004041e:	00cb      	lsls	r3, r1, #3
10040420:	1ac0      	subs	r0, r0, r3
10040422:	4152      	adcs	r2, r2
10040424:	0883      	lsrs	r3, r0, #2
10040426:	428b      	cmp	r3, r1
10040428:	d301      	bcc.n	1004042e <__divsi3+0xea>
1004042a:	008b      	lsls	r3, r1, #2
1004042c:	1ac0      	subs	r0, r0, r3
1004042e:	4152      	adcs	r2, r2
10040430:	0843      	lsrs	r3, r0, #1
10040432:	428b      	cmp	r3, r1
10040434:	d301      	bcc.n	1004043a <__divsi3+0xf6>
10040436:	004b      	lsls	r3, r1, #1
10040438:	1ac0      	subs	r0, r0, r3
1004043a:	4152      	adcs	r2, r2
1004043c:	1a41      	subs	r1, r0, r1
1004043e:	d200      	bcs.n	10040442 <__divsi3+0xfe>
10040440:	4601      	mov	r1, r0
10040442:	4152      	adcs	r2, r2
10040444:	4610      	mov	r0, r2
10040446:	4770      	bx	lr
10040448:	e05d      	b.n	10040506 <__divsi3+0x1c2>
1004044a:	0fca      	lsrs	r2, r1, #31
1004044c:	d000      	beq.n	10040450 <__divsi3+0x10c>
1004044e:	4249      	negs	r1, r1
10040450:	1003      	asrs	r3, r0, #32
10040452:	d300      	bcc.n	10040456 <__divsi3+0x112>
10040454:	4240      	negs	r0, r0
10040456:	4053      	eors	r3, r2
10040458:	2200      	movs	r2, #0
1004045a:	469c      	mov	ip, r3
1004045c:	0903      	lsrs	r3, r0, #4
1004045e:	428b      	cmp	r3, r1
10040460:	d32d      	bcc.n	100404be <__divsi3+0x17a>
10040462:	0a03      	lsrs	r3, r0, #8
10040464:	428b      	cmp	r3, r1
10040466:	d312      	bcc.n	1004048e <__divsi3+0x14a>
10040468:	22fc      	movs	r2, #252	@ 0xfc
1004046a:	0189      	lsls	r1, r1, #6
1004046c:	ba12      	rev	r2, r2
1004046e:	0a03      	lsrs	r3, r0, #8
10040470:	428b      	cmp	r3, r1
10040472:	d30c      	bcc.n	1004048e <__divsi3+0x14a>
10040474:	0189      	lsls	r1, r1, #6
10040476:	1192      	asrs	r2, r2, #6
10040478:	428b      	cmp	r3, r1
1004047a:	d308      	bcc.n	1004048e <__divsi3+0x14a>
1004047c:	0189      	lsls	r1, r1, #6
1004047e:	1192      	asrs	r2, r2, #6
10040480:	428b      	cmp	r3, r1
10040482:	d304      	bcc.n	1004048e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	d03a      	beq.n	100404fe <__divsi3+0x1ba>
10040488:	1192      	asrs	r2, r2, #6
1004048a:	e000      	b.n	1004048e <__divsi3+0x14a>
1004048c:	0989      	lsrs	r1, r1, #6
1004048e:	09c3      	lsrs	r3, r0, #7
10040490:	428b      	cmp	r3, r1
10040492:	d301      	bcc.n	10040498 <__divsi3+0x154>
10040494:	01cb      	lsls	r3, r1, #7
10040496:	1ac0      	subs	r0, r0, r3
10040498:	4152      	adcs	r2, r2
1004049a:	0983      	lsrs	r3, r0, #6
1004049c:	428b      	cmp	r3, r1
1004049e:	d301      	bcc.n	100404a4 <__divsi3+0x160>
100404a0:	018b      	lsls	r3, r1, #6
100404a2:	1ac0      	subs	r0, r0, r3
100404a4:	4152      	adcs	r2, r2
100404a6:	0943      	lsrs	r3, r0, #5
100404a8:	428b      	cmp	r3, r1
100404aa:	d301      	bcc.n	100404b0 <__divsi3+0x16c>
100404ac:	014b      	lsls	r3, r1, #5
100404ae:	1ac0      	subs	r0, r0, r3
100404b0:	4152      	adcs	r2, r2
100404b2:	0903      	lsrs	r3, r0, #4
100404b4:	428b      	cmp	r3, r1
100404b6:	d301      	bcc.n	100404bc <__divsi3+0x178>
100404b8:	010b      	lsls	r3, r1, #4
100404ba:	1ac0      	subs	r0, r0, r3
100404bc:	4152      	adcs	r2, r2
100404be:	08c3      	lsrs	r3, r0, #3
100404c0:	428b      	cmp	r3, r1
100404c2:	d301      	bcc.n	100404c8 <__divsi3+0x184>
100404c4:	00cb      	lsls	r3, r1, #3
100404c6:	1ac0      	subs	r0, r0, r3
100404c8:	4152      	adcs	r2, r2
100404ca:	0883      	lsrs	r3, r0, #2
100404cc:	428b      	cmp	r3, r1
100404ce:	d301      	bcc.n	100404d4 <__divsi3+0x190>
100404d0:	008b      	lsls	r3, r1, #2
100404d2:	1ac0      	subs	r0, r0, r3
100404d4:	4152      	adcs	r2, r2
100404d6:	d2d9      	bcs.n	1004048c <__divsi3+0x148>
100404d8:	0843      	lsrs	r3, r0, #1
100404da:	428b      	cmp	r3, r1
100404dc:	d301      	bcc.n	100404e2 <__divsi3+0x19e>
100404de:	004b      	lsls	r3, r1, #1
100404e0:	1ac0      	subs	r0, r0, r3
100404e2:	4152      	adcs	r2, r2
100404e4:	1a41      	subs	r1, r0, r1
100404e6:	d200      	bcs.n	100404ea <__divsi3+0x1a6>
100404e8:	4601      	mov	r1, r0
100404ea:	4663      	mov	r3, ip
100404ec:	4152      	adcs	r2, r2
100404ee:	105b      	asrs	r3, r3, #1
100404f0:	4610      	mov	r0, r2
100404f2:	d301      	bcc.n	100404f8 <__divsi3+0x1b4>
100404f4:	4240      	negs	r0, r0
100404f6:	2b00      	cmp	r3, #0
100404f8:	d500      	bpl.n	100404fc <__divsi3+0x1b8>
100404fa:	4249      	negs	r1, r1
100404fc:	4770      	bx	lr
100404fe:	4663      	mov	r3, ip
10040500:	105b      	asrs	r3, r3, #1
10040502:	d300      	bcc.n	10040506 <__divsi3+0x1c2>
10040504:	4240      	negs	r0, r0
10040506:	b501      	push	{r0, lr}
10040508:	2000      	movs	r0, #0
1004050a:	f000 f805 	bl	10040518 <__aeabi_idiv0>
1004050e:	bd02      	pop	{r1, pc}

10040510 <__aeabi_idivmod>:
10040510:	2900      	cmp	r1, #0
10040512:	d0f8      	beq.n	10040506 <__divsi3+0x1c2>
10040514:	e716      	b.n	10040344 <__divsi3>
10040516:	4770      	bx	lr

10040518 <__aeabi_idiv0>:
10040518:	4770      	bx	lr
1004051a:	46c0      	nop			@ (mov r8, r8)

1004051c <__aeabi_llsl>:
1004051c:	4091      	lsls	r1, r2
1004051e:	0003      	movs	r3, r0
10040520:	4090      	lsls	r0, r2
10040522:	469c      	mov	ip, r3
10040524:	3a20      	subs	r2, #32
10040526:	4093      	lsls	r3, r2
10040528:	4319      	orrs	r1, r3
1004052a:	4252      	negs	r2, r2
1004052c:	4663      	mov	r3, ip
1004052e:	40d3      	lsrs	r3, r2
10040530:	4319      	orrs	r1, r3
10040532:	4770      	bx	lr

10040534 <__clzsi2>:
10040534:	211c      	movs	r1, #28
10040536:	2301      	movs	r3, #1
10040538:	041b      	lsls	r3, r3, #16
1004053a:	4298      	cmp	r0, r3
1004053c:	d301      	bcc.n	10040542 <__clzsi2+0xe>
1004053e:	0c00      	lsrs	r0, r0, #16
10040540:	3910      	subs	r1, #16
10040542:	0a1b      	lsrs	r3, r3, #8
10040544:	4298      	cmp	r0, r3
10040546:	d301      	bcc.n	1004054c <__clzsi2+0x18>
10040548:	0a00      	lsrs	r0, r0, #8
1004054a:	3908      	subs	r1, #8
1004054c:	091b      	lsrs	r3, r3, #4
1004054e:	4298      	cmp	r0, r3
10040550:	d301      	bcc.n	10040556 <__clzsi2+0x22>
10040552:	0900      	lsrs	r0, r0, #4
10040554:	3904      	subs	r1, #4
10040556:	a202      	add	r2, pc, #8	@ (adr r2, 10040560 <__clzsi2+0x2c>)
10040558:	5c10      	ldrb	r0, [r2, r0]
1004055a:	1840      	adds	r0, r0, r1
1004055c:	4770      	bx	lr
1004055e:	46c0      	nop			@ (mov r8, r8)
10040560:	02020304 	.word	0x02020304
10040564:	01010101 	.word	0x01010101
	...

10040570 <__aeabi_uldivmod>:
10040570:	2b00      	cmp	r3, #0
10040572:	d111      	bne.n	10040598 <__aeabi_uldivmod+0x28>
10040574:	2a00      	cmp	r2, #0
10040576:	d10f      	bne.n	10040598 <__aeabi_uldivmod+0x28>
10040578:	2900      	cmp	r1, #0
1004057a:	d100      	bne.n	1004057e <__aeabi_uldivmod+0xe>
1004057c:	2800      	cmp	r0, #0
1004057e:	d002      	beq.n	10040586 <__aeabi_uldivmod+0x16>
10040580:	2100      	movs	r1, #0
10040582:	43c9      	mvns	r1, r1
10040584:	0008      	movs	r0, r1
10040586:	b407      	push	{r0, r1, r2}
10040588:	4802      	ldr	r0, [pc, #8]	@ (10040594 <__aeabi_uldivmod+0x24>)
1004058a:	a102      	add	r1, pc, #8	@ (adr r1, 10040594 <__aeabi_uldivmod+0x24>)
1004058c:	1840      	adds	r0, r0, r1
1004058e:	9002      	str	r0, [sp, #8]
10040590:	bd03      	pop	{r0, r1, pc}
10040592:	46c0      	nop			@ (mov r8, r8)
10040594:	ffffff85 	.word	0xffffff85
10040598:	b403      	push	{r0, r1}
1004059a:	4668      	mov	r0, sp
1004059c:	b501      	push	{r0, lr}
1004059e:	9802      	ldr	r0, [sp, #8]
100405a0:	f000 f834 	bl	1004060c <__udivmoddi4>
100405a4:	9b01      	ldr	r3, [sp, #4]
100405a6:	469e      	mov	lr, r3
100405a8:	b002      	add	sp, #8
100405aa:	bc0c      	pop	{r2, r3}
100405ac:	4770      	bx	lr
100405ae:	46c0      	nop			@ (mov r8, r8)

100405b0 <__aeabi_lmul>:
100405b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100405b2:	46ce      	mov	lr, r9
100405b4:	4699      	mov	r9, r3
100405b6:	0c03      	lsrs	r3, r0, #16
100405b8:	469c      	mov	ip, r3
100405ba:	0413      	lsls	r3, r2, #16
100405bc:	4647      	mov	r7, r8
100405be:	0c1b      	lsrs	r3, r3, #16
100405c0:	001d      	movs	r5, r3
100405c2:	000e      	movs	r6, r1
100405c4:	4661      	mov	r1, ip
100405c6:	0404      	lsls	r4, r0, #16
100405c8:	0c24      	lsrs	r4, r4, #16
100405ca:	b580      	push	{r7, lr}
100405cc:	0007      	movs	r7, r0
100405ce:	0c10      	lsrs	r0, r2, #16
100405d0:	434b      	muls	r3, r1
100405d2:	4365      	muls	r5, r4
100405d4:	4341      	muls	r1, r0
100405d6:	4360      	muls	r0, r4
100405d8:	0c2c      	lsrs	r4, r5, #16
100405da:	18c0      	adds	r0, r0, r3
100405dc:	1824      	adds	r4, r4, r0
100405de:	468c      	mov	ip, r1
100405e0:	42a3      	cmp	r3, r4
100405e2:	d903      	bls.n	100405ec <__aeabi_lmul+0x3c>
100405e4:	2380      	movs	r3, #128	@ 0x80
100405e6:	025b      	lsls	r3, r3, #9
100405e8:	4698      	mov	r8, r3
100405ea:	44c4      	add	ip, r8
100405ec:	4649      	mov	r1, r9
100405ee:	4379      	muls	r1, r7
100405f0:	4356      	muls	r6, r2
100405f2:	0c23      	lsrs	r3, r4, #16
100405f4:	042d      	lsls	r5, r5, #16
100405f6:	0c2d      	lsrs	r5, r5, #16
100405f8:	1989      	adds	r1, r1, r6
100405fa:	4463      	add	r3, ip
100405fc:	0424      	lsls	r4, r4, #16
100405fe:	1960      	adds	r0, r4, r5
10040600:	18c9      	adds	r1, r1, r3
10040602:	bcc0      	pop	{r6, r7}
10040604:	46b9      	mov	r9, r7
10040606:	46b0      	mov	r8, r6
10040608:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004060a:	46c0      	nop			@ (mov r8, r8)

1004060c <__udivmoddi4>:
1004060c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004060e:	4657      	mov	r7, sl
10040610:	464e      	mov	r6, r9
10040612:	4645      	mov	r5, r8
10040614:	46de      	mov	lr, fp
10040616:	b5e0      	push	{r5, r6, r7, lr}
10040618:	0004      	movs	r4, r0
1004061a:	000d      	movs	r5, r1
1004061c:	4692      	mov	sl, r2
1004061e:	4699      	mov	r9, r3
10040620:	b083      	sub	sp, #12
10040622:	428b      	cmp	r3, r1
10040624:	d830      	bhi.n	10040688 <__udivmoddi4+0x7c>
10040626:	d02d      	beq.n	10040684 <__udivmoddi4+0x78>
10040628:	4649      	mov	r1, r9
1004062a:	4650      	mov	r0, sl
1004062c:	f000 f8ba 	bl	100407a4 <__clzdi2>
10040630:	0029      	movs	r1, r5
10040632:	0006      	movs	r6, r0
10040634:	0020      	movs	r0, r4
10040636:	f000 f8b5 	bl	100407a4 <__clzdi2>
1004063a:	1a33      	subs	r3, r6, r0
1004063c:	4698      	mov	r8, r3
1004063e:	3b20      	subs	r3, #32
10040640:	d434      	bmi.n	100406ac <__udivmoddi4+0xa0>
10040642:	469b      	mov	fp, r3
10040644:	4653      	mov	r3, sl
10040646:	465a      	mov	r2, fp
10040648:	4093      	lsls	r3, r2
1004064a:	4642      	mov	r2, r8
1004064c:	001f      	movs	r7, r3
1004064e:	4653      	mov	r3, sl
10040650:	4093      	lsls	r3, r2
10040652:	001e      	movs	r6, r3
10040654:	42af      	cmp	r7, r5
10040656:	d83b      	bhi.n	100406d0 <__udivmoddi4+0xc4>
10040658:	42af      	cmp	r7, r5
1004065a:	d100      	bne.n	1004065e <__udivmoddi4+0x52>
1004065c:	e079      	b.n	10040752 <__udivmoddi4+0x146>
1004065e:	465b      	mov	r3, fp
10040660:	1ba4      	subs	r4, r4, r6
10040662:	41bd      	sbcs	r5, r7
10040664:	2b00      	cmp	r3, #0
10040666:	da00      	bge.n	1004066a <__udivmoddi4+0x5e>
10040668:	e076      	b.n	10040758 <__udivmoddi4+0x14c>
1004066a:	2200      	movs	r2, #0
1004066c:	2300      	movs	r3, #0
1004066e:	9200      	str	r2, [sp, #0]
10040670:	9301      	str	r3, [sp, #4]
10040672:	2301      	movs	r3, #1
10040674:	465a      	mov	r2, fp
10040676:	4093      	lsls	r3, r2
10040678:	9301      	str	r3, [sp, #4]
1004067a:	2301      	movs	r3, #1
1004067c:	4642      	mov	r2, r8
1004067e:	4093      	lsls	r3, r2
10040680:	9300      	str	r3, [sp, #0]
10040682:	e029      	b.n	100406d8 <__udivmoddi4+0xcc>
10040684:	4282      	cmp	r2, r0
10040686:	d9cf      	bls.n	10040628 <__udivmoddi4+0x1c>
10040688:	2200      	movs	r2, #0
1004068a:	2300      	movs	r3, #0
1004068c:	9200      	str	r2, [sp, #0]
1004068e:	9301      	str	r3, [sp, #4]
10040690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040692:	2b00      	cmp	r3, #0
10040694:	d001      	beq.n	1004069a <__udivmoddi4+0x8e>
10040696:	601c      	str	r4, [r3, #0]
10040698:	605d      	str	r5, [r3, #4]
1004069a:	9800      	ldr	r0, [sp, #0]
1004069c:	9901      	ldr	r1, [sp, #4]
1004069e:	b003      	add	sp, #12
100406a0:	bcf0      	pop	{r4, r5, r6, r7}
100406a2:	46bb      	mov	fp, r7
100406a4:	46b2      	mov	sl, r6
100406a6:	46a9      	mov	r9, r5
100406a8:	46a0      	mov	r8, r4
100406aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100406ac:	4642      	mov	r2, r8
100406ae:	469b      	mov	fp, r3
100406b0:	2320      	movs	r3, #32
100406b2:	1a9b      	subs	r3, r3, r2
100406b4:	4652      	mov	r2, sl
100406b6:	40da      	lsrs	r2, r3
100406b8:	4641      	mov	r1, r8
100406ba:	0013      	movs	r3, r2
100406bc:	464a      	mov	r2, r9
100406be:	408a      	lsls	r2, r1
100406c0:	0017      	movs	r7, r2
100406c2:	4642      	mov	r2, r8
100406c4:	431f      	orrs	r7, r3
100406c6:	4653      	mov	r3, sl
100406c8:	4093      	lsls	r3, r2
100406ca:	001e      	movs	r6, r3
100406cc:	42af      	cmp	r7, r5
100406ce:	d9c3      	bls.n	10040658 <__udivmoddi4+0x4c>
100406d0:	2200      	movs	r2, #0
100406d2:	2300      	movs	r3, #0
100406d4:	9200      	str	r2, [sp, #0]
100406d6:	9301      	str	r3, [sp, #4]
100406d8:	4643      	mov	r3, r8
100406da:	2b00      	cmp	r3, #0
100406dc:	d0d8      	beq.n	10040690 <__udivmoddi4+0x84>
100406de:	07fb      	lsls	r3, r7, #31
100406e0:	0872      	lsrs	r2, r6, #1
100406e2:	431a      	orrs	r2, r3
100406e4:	4646      	mov	r6, r8
100406e6:	087b      	lsrs	r3, r7, #1
100406e8:	e00e      	b.n	10040708 <__udivmoddi4+0xfc>
100406ea:	42ab      	cmp	r3, r5
100406ec:	d101      	bne.n	100406f2 <__udivmoddi4+0xe6>
100406ee:	42a2      	cmp	r2, r4
100406f0:	d80c      	bhi.n	1004070c <__udivmoddi4+0x100>
100406f2:	1aa4      	subs	r4, r4, r2
100406f4:	419d      	sbcs	r5, r3
100406f6:	2001      	movs	r0, #1
100406f8:	1924      	adds	r4, r4, r4
100406fa:	416d      	adcs	r5, r5
100406fc:	2100      	movs	r1, #0
100406fe:	3e01      	subs	r6, #1
10040700:	1824      	adds	r4, r4, r0
10040702:	414d      	adcs	r5, r1
10040704:	2e00      	cmp	r6, #0
10040706:	d006      	beq.n	10040716 <__udivmoddi4+0x10a>
10040708:	42ab      	cmp	r3, r5
1004070a:	d9ee      	bls.n	100406ea <__udivmoddi4+0xde>
1004070c:	3e01      	subs	r6, #1
1004070e:	1924      	adds	r4, r4, r4
10040710:	416d      	adcs	r5, r5
10040712:	2e00      	cmp	r6, #0
10040714:	d1f8      	bne.n	10040708 <__udivmoddi4+0xfc>
10040716:	9800      	ldr	r0, [sp, #0]
10040718:	9901      	ldr	r1, [sp, #4]
1004071a:	465b      	mov	r3, fp
1004071c:	1900      	adds	r0, r0, r4
1004071e:	4169      	adcs	r1, r5
10040720:	2b00      	cmp	r3, #0
10040722:	db24      	blt.n	1004076e <__udivmoddi4+0x162>
10040724:	002b      	movs	r3, r5
10040726:	465a      	mov	r2, fp
10040728:	4644      	mov	r4, r8
1004072a:	40d3      	lsrs	r3, r2
1004072c:	002a      	movs	r2, r5
1004072e:	40e2      	lsrs	r2, r4
10040730:	001c      	movs	r4, r3
10040732:	465b      	mov	r3, fp
10040734:	0015      	movs	r5, r2
10040736:	2b00      	cmp	r3, #0
10040738:	db2a      	blt.n	10040790 <__udivmoddi4+0x184>
1004073a:	0026      	movs	r6, r4
1004073c:	409e      	lsls	r6, r3
1004073e:	0033      	movs	r3, r6
10040740:	0026      	movs	r6, r4
10040742:	4647      	mov	r7, r8
10040744:	40be      	lsls	r6, r7
10040746:	0032      	movs	r2, r6
10040748:	1a80      	subs	r0, r0, r2
1004074a:	4199      	sbcs	r1, r3
1004074c:	9000      	str	r0, [sp, #0]
1004074e:	9101      	str	r1, [sp, #4]
10040750:	e79e      	b.n	10040690 <__udivmoddi4+0x84>
10040752:	42a3      	cmp	r3, r4
10040754:	d8bc      	bhi.n	100406d0 <__udivmoddi4+0xc4>
10040756:	e782      	b.n	1004065e <__udivmoddi4+0x52>
10040758:	4642      	mov	r2, r8
1004075a:	2320      	movs	r3, #32
1004075c:	2100      	movs	r1, #0
1004075e:	1a9b      	subs	r3, r3, r2
10040760:	2200      	movs	r2, #0
10040762:	9100      	str	r1, [sp, #0]
10040764:	9201      	str	r2, [sp, #4]
10040766:	2201      	movs	r2, #1
10040768:	40da      	lsrs	r2, r3
1004076a:	9201      	str	r2, [sp, #4]
1004076c:	e785      	b.n	1004067a <__udivmoddi4+0x6e>
1004076e:	4642      	mov	r2, r8
10040770:	2320      	movs	r3, #32
10040772:	1a9b      	subs	r3, r3, r2
10040774:	002a      	movs	r2, r5
10040776:	4646      	mov	r6, r8
10040778:	409a      	lsls	r2, r3
1004077a:	0023      	movs	r3, r4
1004077c:	40f3      	lsrs	r3, r6
1004077e:	4644      	mov	r4, r8
10040780:	4313      	orrs	r3, r2
10040782:	002a      	movs	r2, r5
10040784:	40e2      	lsrs	r2, r4
10040786:	001c      	movs	r4, r3
10040788:	465b      	mov	r3, fp
1004078a:	0015      	movs	r5, r2
1004078c:	2b00      	cmp	r3, #0
1004078e:	dad4      	bge.n	1004073a <__udivmoddi4+0x12e>
10040790:	4642      	mov	r2, r8
10040792:	002f      	movs	r7, r5
10040794:	2320      	movs	r3, #32
10040796:	0026      	movs	r6, r4
10040798:	4097      	lsls	r7, r2
1004079a:	1a9b      	subs	r3, r3, r2
1004079c:	40de      	lsrs	r6, r3
1004079e:	003b      	movs	r3, r7
100407a0:	4333      	orrs	r3, r6
100407a2:	e7cd      	b.n	10040740 <__udivmoddi4+0x134>

100407a4 <__clzdi2>:
100407a4:	b510      	push	{r4, lr}
100407a6:	2900      	cmp	r1, #0
100407a8:	d103      	bne.n	100407b2 <__clzdi2+0xe>
100407aa:	f7ff fec3 	bl	10040534 <__clzsi2>
100407ae:	3020      	adds	r0, #32
100407b0:	e002      	b.n	100407b8 <__clzdi2+0x14>
100407b2:	0008      	movs	r0, r1
100407b4:	f7ff febe 	bl	10040534 <__clzsi2>
100407b8:	bd10      	pop	{r4, pc}
100407ba:	46c0      	nop			@ (mov r8, r8)

100407bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100407bc:	b580      	push	{r7, lr}
100407be:	b082      	sub	sp, #8
100407c0:	af00      	add	r7, sp, #0
100407c2:	0002      	movs	r2, r0
100407c4:	1dfb      	adds	r3, r7, #7
100407c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100407c8:	1dfb      	adds	r3, r7, #7
100407ca:	781b      	ldrb	r3, [r3, #0]
100407cc:	2b7f      	cmp	r3, #127	@ 0x7f
100407ce:	d809      	bhi.n	100407e4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100407d0:	1dfb      	adds	r3, r7, #7
100407d2:	781b      	ldrb	r3, [r3, #0]
100407d4:	001a      	movs	r2, r3
100407d6:	231f      	movs	r3, #31
100407d8:	401a      	ands	r2, r3
100407da:	4b04      	ldr	r3, [pc, #16]	@ (100407ec <__NVIC_EnableIRQ+0x30>)
100407dc:	2101      	movs	r1, #1
100407de:	4091      	lsls	r1, r2
100407e0:	000a      	movs	r2, r1
100407e2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100407e4:	46c0      	nop			@ (mov r8, r8)
100407e6:	46bd      	mov	sp, r7
100407e8:	b002      	add	sp, #8
100407ea:	bd80      	pop	{r7, pc}
100407ec:	e000e100 	.word	0xe000e100

100407f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100407f0:	b590      	push	{r4, r7, lr}
100407f2:	b083      	sub	sp, #12
100407f4:	af00      	add	r7, sp, #0
100407f6:	0002      	movs	r2, r0
100407f8:	6039      	str	r1, [r7, #0]
100407fa:	1dfb      	adds	r3, r7, #7
100407fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100407fe:	1dfb      	adds	r3, r7, #7
10040800:	781b      	ldrb	r3, [r3, #0]
10040802:	2b7f      	cmp	r3, #127	@ 0x7f
10040804:	d828      	bhi.n	10040858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040806:	4a2f      	ldr	r2, [pc, #188]	@ (100408c4 <__NVIC_SetPriority+0xd4>)
10040808:	1dfb      	adds	r3, r7, #7
1004080a:	781b      	ldrb	r3, [r3, #0]
1004080c:	b25b      	sxtb	r3, r3
1004080e:	089b      	lsrs	r3, r3, #2
10040810:	33c0      	adds	r3, #192	@ 0xc0
10040812:	009b      	lsls	r3, r3, #2
10040814:	589b      	ldr	r3, [r3, r2]
10040816:	1dfa      	adds	r2, r7, #7
10040818:	7812      	ldrb	r2, [r2, #0]
1004081a:	0011      	movs	r1, r2
1004081c:	2203      	movs	r2, #3
1004081e:	400a      	ands	r2, r1
10040820:	00d2      	lsls	r2, r2, #3
10040822:	21ff      	movs	r1, #255	@ 0xff
10040824:	4091      	lsls	r1, r2
10040826:	000a      	movs	r2, r1
10040828:	43d2      	mvns	r2, r2
1004082a:	401a      	ands	r2, r3
1004082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004082e:	683b      	ldr	r3, [r7, #0]
10040830:	019b      	lsls	r3, r3, #6
10040832:	22ff      	movs	r2, #255	@ 0xff
10040834:	401a      	ands	r2, r3
10040836:	1dfb      	adds	r3, r7, #7
10040838:	781b      	ldrb	r3, [r3, #0]
1004083a:	0018      	movs	r0, r3
1004083c:	2303      	movs	r3, #3
1004083e:	4003      	ands	r3, r0
10040840:	00db      	lsls	r3, r3, #3
10040842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040844:	481f      	ldr	r0, [pc, #124]	@ (100408c4 <__NVIC_SetPriority+0xd4>)
10040846:	1dfb      	adds	r3, r7, #7
10040848:	781b      	ldrb	r3, [r3, #0]
1004084a:	b25b      	sxtb	r3, r3
1004084c:	089b      	lsrs	r3, r3, #2
1004084e:	430a      	orrs	r2, r1
10040850:	33c0      	adds	r3, #192	@ 0xc0
10040852:	009b      	lsls	r3, r3, #2
10040854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10040856:	e031      	b.n	100408bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040858:	4a1b      	ldr	r2, [pc, #108]	@ (100408c8 <__NVIC_SetPriority+0xd8>)
1004085a:	1dfb      	adds	r3, r7, #7
1004085c:	781b      	ldrb	r3, [r3, #0]
1004085e:	0019      	movs	r1, r3
10040860:	230f      	movs	r3, #15
10040862:	400b      	ands	r3, r1
10040864:	3b08      	subs	r3, #8
10040866:	089b      	lsrs	r3, r3, #2
10040868:	3306      	adds	r3, #6
1004086a:	009b      	lsls	r3, r3, #2
1004086c:	18d3      	adds	r3, r2, r3
1004086e:	3304      	adds	r3, #4
10040870:	681b      	ldr	r3, [r3, #0]
10040872:	1dfa      	adds	r2, r7, #7
10040874:	7812      	ldrb	r2, [r2, #0]
10040876:	0011      	movs	r1, r2
10040878:	2203      	movs	r2, #3
1004087a:	400a      	ands	r2, r1
1004087c:	00d2      	lsls	r2, r2, #3
1004087e:	21ff      	movs	r1, #255	@ 0xff
10040880:	4091      	lsls	r1, r2
10040882:	000a      	movs	r2, r1
10040884:	43d2      	mvns	r2, r2
10040886:	401a      	ands	r2, r3
10040888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004088a:	683b      	ldr	r3, [r7, #0]
1004088c:	019b      	lsls	r3, r3, #6
1004088e:	22ff      	movs	r2, #255	@ 0xff
10040890:	401a      	ands	r2, r3
10040892:	1dfb      	adds	r3, r7, #7
10040894:	781b      	ldrb	r3, [r3, #0]
10040896:	0018      	movs	r0, r3
10040898:	2303      	movs	r3, #3
1004089a:	4003      	ands	r3, r0
1004089c:	00db      	lsls	r3, r3, #3
1004089e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100408a0:	4809      	ldr	r0, [pc, #36]	@ (100408c8 <__NVIC_SetPriority+0xd8>)
100408a2:	1dfb      	adds	r3, r7, #7
100408a4:	781b      	ldrb	r3, [r3, #0]
100408a6:	001c      	movs	r4, r3
100408a8:	230f      	movs	r3, #15
100408aa:	4023      	ands	r3, r4
100408ac:	3b08      	subs	r3, #8
100408ae:	089b      	lsrs	r3, r3, #2
100408b0:	430a      	orrs	r2, r1
100408b2:	3306      	adds	r3, #6
100408b4:	009b      	lsls	r3, r3, #2
100408b6:	18c3      	adds	r3, r0, r3
100408b8:	3304      	adds	r3, #4
100408ba:	601a      	str	r2, [r3, #0]
}
100408bc:	46c0      	nop			@ (mov r8, r8)
100408be:	46bd      	mov	sp, r7
100408c0:	b003      	add	sp, #12
100408c2:	bd90      	pop	{r4, r7, pc}
100408c4:	e000e100 	.word	0xe000e100
100408c8:	e000ed00 	.word	0xe000ed00

100408cc <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
100408cc:	b580      	push	{r7, lr}
100408ce:	b086      	sub	sp, #24
100408d0:	af00      	add	r7, sp, #0
100408d2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100408d4:	f3ef 8310 	mrs	r3, PRIMASK
100408d8:	60bb      	str	r3, [r7, #8]
  return(result);
100408da:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
100408dc:	617b      	str	r3, [r7, #20]
100408de:	2301      	movs	r3, #1
100408e0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100408e2:	68fb      	ldr	r3, [r7, #12]
100408e4:	f383 8810 	msr	PRIMASK, r3
}
100408e8:	46c0      	nop			@ (mov r8, r8)
100408ea:	687b      	ldr	r3, [r7, #4]
100408ec:	681b      	ldr	r3, [r3, #0]
100408ee:	2220      	movs	r2, #32
100408f0:	431a      	orrs	r2, r3
100408f2:	687b      	ldr	r3, [r7, #4]
100408f4:	601a      	str	r2, [r3, #0]
100408f6:	697b      	ldr	r3, [r7, #20]
100408f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100408fa:	693b      	ldr	r3, [r7, #16]
100408fc:	f383 8810 	msr	PRIMASK, r3
}
10040900:	46c0      	nop			@ (mov r8, r8)
}
10040902:	46c0      	nop			@ (mov r8, r8)
10040904:	46bd      	mov	sp, r7
10040906:	b006      	add	sp, #24
10040908:	bd80      	pop	{r7, pc}

1004090a <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
1004090a:	b580      	push	{r7, lr}
1004090c:	b086      	sub	sp, #24
1004090e:	af00      	add	r7, sp, #0
10040910:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
10040912:	2000      	movs	r0, #0
10040914:	f001 fffb 	bl	1004290e <APP_DEBUG_SIGNAL_SET>
  UTIL_ADV_TRACE_SetRegion(~0x0);
#endif

  /* USER CODE BEGIN APPE_Init_1 */
#if (CFG_DEBUG_APP_TRACE != 0) && (CFG_DEBUG_APP_ADV_TRACE == 0)
  COM_InitTypeDef COM_Init =
10040918:	2108      	movs	r1, #8
1004091a:	187b      	adds	r3, r7, r1
1004091c:	22e1      	movs	r2, #225	@ 0xe1
1004091e:	0252      	lsls	r2, r2, #9
10040920:	601a      	str	r2, [r3, #0]
10040922:	187b      	adds	r3, r7, r1
10040924:	2200      	movs	r2, #0
10040926:	605a      	str	r2, [r3, #4]
10040928:	187b      	adds	r3, r7, r1
1004092a:	2200      	movs	r2, #0
1004092c:	811a      	strh	r2, [r3, #8]
1004092e:	187b      	adds	r3, r7, r1
10040930:	2200      	movs	r2, #0
10040932:	815a      	strh	r2, [r3, #10]
10040934:	187b      	adds	r3, r7, r1
10040936:	2200      	movs	r2, #0
10040938:	819a      	strh	r2, [r3, #12]
   .WordLength= COM_WORDLENGTH_8B,
   .StopBits = COM_STOPBITS_1,
   .Parity = COM_PARITY_NONE,
   .HwFlowCtl = COM_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &COM_Init);
1004093a:	187b      	adds	r3, r7, r1
1004093c:	0019      	movs	r1, r3
1004093e:	2000      	movs	r0, #0
10040940:	f003 fee6 	bl	10044710 <BSP_COM_Init>

#endif
  
  RxUART_Init();
10040944:	f000 f814 	bl	10040970 <RxUART_Init>
  
  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
10040948:	f002 fad6 	bl	10042ef8 <HW_RNG_Init>
1004094c:	1e03      	subs	r3, r0, #0
1004094e:	d001      	beq.n	10040954 <MX_APPE_Init+0x4a>
  {
    Error_Handler();
10040950:	f000 fa15 	bl	10040d7e <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
10040954:	f002 f840 	bl	100429d8 <HW_AES_Init>
  HW_PKA_Init();
10040958:	f002 f954 	bl	10042c04 <HW_PKA_Init>
  APP_BLE_Init();
1004095c:	f000 fdfe 	bl	1004155c <APP_BLE_Init>
  UTIL_LPM_Init();
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
10040960:	2000      	movs	r0, #0
10040962:	f001 ffde 	bl	10042922 <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
10040966:	2300      	movs	r3, #0
}
10040968:	0018      	movs	r0, r3
1004096a:	46bd      	mov	sp, r7
1004096c:	b006      	add	sp, #24
1004096e:	bd80      	pop	{r7, pc}

10040970 <RxUART_Init>:
#endif

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

static void RxUART_Init(void)
{
10040970:	b580      	push	{r7, lr}
10040972:	af00      	add	r7, sp, #0
  /* Enable the RX not empty interrupt */
  LL_USART_EnableIT_RXNE(USART1);
10040974:	4b0a      	ldr	r3, [pc, #40]	@ (100409a0 <RxUART_Init+0x30>)
10040976:	0018      	movs	r0, r3
10040978:	f7ff ffa8 	bl	100408cc <LL_USART_EnableIT_RXNE_RXFNE>

  /* Enable the UART IRQ */
  NVIC_SetPriority(USART1_IRQn, IRQ_HIGH_PRIORITY);
1004097c:	2101      	movs	r1, #1
1004097e:	2008      	movs	r0, #8
10040980:	f7ff ff36 	bl	100407f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
10040984:	2008      	movs	r0, #8
10040986:	f7ff ff19 	bl	100407bc <__NVIC_EnableIRQ>
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  setvbuf(stdout, NULL, _IONBF, 0);
1004098a:	4b06      	ldr	r3, [pc, #24]	@ (100409a4 <RxUART_Init+0x34>)
1004098c:	681b      	ldr	r3, [r3, #0]
1004098e:	6898      	ldr	r0, [r3, #8]
10040990:	2300      	movs	r3, #0
10040992:	2202      	movs	r2, #2
10040994:	2100      	movs	r1, #0
10040996:	f00c fddd 	bl	1004d554 <setvbuf>
#endif
}
1004099a:	46c0      	nop			@ (mov r8, r8)
1004099c:	46bd      	mov	sp, r7
1004099e:	bd80      	pop	{r7, pc}
100409a0:	41004000 	.word	0x41004000
100409a4:	2000084c 	.word	0x2000084c

100409a8 <UartRxCpltCallback>:

void UartRxCpltCallback(uint8_t * pRxDataBuff, uint16_t nDataSize)
{
100409a8:	b580      	push	{r7, lr}
100409aa:	b082      	sub	sp, #8
100409ac:	af00      	add	r7, sp, #0
100409ae:	6078      	str	r0, [r7, #4]
100409b0:	000a      	movs	r2, r1
100409b2:	1cbb      	adds	r3, r7, #2
100409b4:	801a      	strh	r2, [r3, #0]
  // Loop in case nDataSize > 1 (always 1 in current implementation).
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
100409b6:	4b15      	ldr	r3, [pc, #84]	@ (10040a0c <UartRxCpltCallback+0x64>)
100409b8:	881b      	ldrh	r3, [r3, #0]
100409ba:	2bff      	cmp	r3, #255	@ 0xff
100409bc:	d821      	bhi.n	10040a02 <UartRxCpltCallback+0x5a>
  {
    if (*pRxDataBuff == '\r')
100409be:	687b      	ldr	r3, [r7, #4]
100409c0:	781b      	ldrb	r3, [r3, #0]
100409c2:	2b0d      	cmp	r3, #13
100409c4:	d112      	bne.n	100409ec <UartRxCpltCallback+0x44>
    {
      APP_DBG_MSG("received %s\n", CommandString);
100409c6:	4a12      	ldr	r2, [pc, #72]	@ (10040a10 <UartRxCpltCallback+0x68>)
100409c8:	4b12      	ldr	r3, [pc, #72]	@ (10040a14 <UartRxCpltCallback+0x6c>)
100409ca:	0011      	movs	r1, r2
100409cc:	0018      	movs	r0, r3
100409ce:	f00c fd51 	bl	1004d474 <iprintf>

      UartCmdExecute();
100409d2:	f000 f821 	bl	10040a18 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
100409d6:	4b0d      	ldr	r3, [pc, #52]	@ (10040a0c <UartRxCpltCallback+0x64>)
100409d8:	2200      	movs	r2, #0
100409da:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
100409dc:	2380      	movs	r3, #128	@ 0x80
100409de:	005a      	lsls	r2, r3, #1
100409e0:	4b0b      	ldr	r3, [pc, #44]	@ (10040a10 <UartRxCpltCallback+0x68>)
100409e2:	2100      	movs	r1, #0
100409e4:	0018      	movs	r0, r3
100409e6:	f00c ff65 	bl	1004d8b4 <memset>
    else
    {
      CommandString[indexReceiveChar++] = *pRxDataBuff;
    }
  }
}
100409ea:	e00a      	b.n	10040a02 <UartRxCpltCallback+0x5a>
      CommandString[indexReceiveChar++] = *pRxDataBuff;
100409ec:	4b07      	ldr	r3, [pc, #28]	@ (10040a0c <UartRxCpltCallback+0x64>)
100409ee:	881b      	ldrh	r3, [r3, #0]
100409f0:	1c5a      	adds	r2, r3, #1
100409f2:	b291      	uxth	r1, r2
100409f4:	4a05      	ldr	r2, [pc, #20]	@ (10040a0c <UartRxCpltCallback+0x64>)
100409f6:	8011      	strh	r1, [r2, #0]
100409f8:	001a      	movs	r2, r3
100409fa:	687b      	ldr	r3, [r7, #4]
100409fc:	7819      	ldrb	r1, [r3, #0]
100409fe:	4b04      	ldr	r3, [pc, #16]	@ (10040a10 <UartRxCpltCallback+0x68>)
10040a00:	5499      	strb	r1, [r3, r2]
}
10040a02:	46c0      	nop			@ (mov r8, r8)
10040a04:	46bd      	mov	sp, r7
10040a06:	b002      	add	sp, #8
10040a08:	bd80      	pop	{r7, pc}
10040a0a:	46c0      	nop			@ (mov r8, r8)
10040a0c:	20000294 	.word	0x20000294
10040a10:	20000194 	.word	0x20000194
10040a14:	1004e3dc 	.word	0x1004e3dc

10040a18 <UartCmdExecute>:

static void UartCmdExecute(void)
{
10040a18:	b580      	push	{r7, lr}
10040a1a:	af00      	add	r7, sp, #0

}
10040a1c:	46c0      	nop			@ (mov r8, r8)
10040a1e:	46bd      	mov	sp, r7
10040a20:	bd80      	pop	{r7, pc}

10040a22 <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10040a22:	b580      	push	{r7, lr}
10040a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10040a26:	2301      	movs	r3, #1
10040a28:	425b      	negs	r3, r3
10040a2a:	0018      	movs	r0, r3
10040a2c:	f008 fac6 	bl	10048fbc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10040a30:	46c0      	nop			@ (mov r8, r8)
10040a32:	46bd      	mov	sp, r7
10040a34:	bd80      	pop	{r7, pc}

10040a36 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10040a36:	b580      	push	{r7, lr}
10040a38:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10040a3a:	46c0      	nop			@ (mov r8, r8)
}
10040a3c:	46bd      	mov	sp, r7
10040a3e:	bd80      	pop	{r7, pc}

10040a40 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10040a40:	b580      	push	{r7, lr}
10040a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10040a44:	46c0      	nop			@ (mov r8, r8)
10040a46:	46bd      	mov	sp, r7
10040a48:	bd80      	pop	{r7, pc}

10040a4a <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10040a4a:	b580      	push	{r7, lr}
10040a4c:	b082      	sub	sp, #8
10040a4e:	af00      	add	r7, sp, #0
10040a50:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10040a52:	687b      	ldr	r3, [r7, #4]
10040a54:	691b      	ldr	r3, [r3, #16]
}
10040a56:	0018      	movs	r0, r3
10040a58:	46bd      	mov	sp, r7
10040a5a:	b002      	add	sp, #8
10040a5c:	bd80      	pop	{r7, pc}
	...

10040a60 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10040a60:	b580      	push	{r7, lr}
10040a62:	b084      	sub	sp, #16
10040a64:	af00      	add	r7, sp, #0
10040a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10040a68:	4b07      	ldr	r3, [pc, #28]	@ (10040a88 <LL_AHB1_GRP1_EnableClock+0x28>)
10040a6a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040a6c:	4b06      	ldr	r3, [pc, #24]	@ (10040a88 <LL_AHB1_GRP1_EnableClock+0x28>)
10040a6e:	687a      	ldr	r2, [r7, #4]
10040a70:	430a      	orrs	r2, r1
10040a72:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040a74:	4b04      	ldr	r3, [pc, #16]	@ (10040a88 <LL_AHB1_GRP1_EnableClock+0x28>)
10040a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040a78:	687a      	ldr	r2, [r7, #4]
10040a7a:	4013      	ands	r3, r2
10040a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040a7e:	68fb      	ldr	r3, [r7, #12]
}
10040a80:	46c0      	nop			@ (mov r8, r8)
10040a82:	46bd      	mov	sp, r7
10040a84:	b004      	add	sp, #16
10040a86:	bd80      	pop	{r7, pc}
10040a88:	48400000 	.word	0x48400000

10040a8c <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10040a8c:	b580      	push	{r7, lr}
10040a8e:	b084      	sub	sp, #16
10040a90:	af00      	add	r7, sp, #0
10040a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10040a94:	4b07      	ldr	r3, [pc, #28]	@ (10040ab4 <LL_APB2_GRP1_EnableClock+0x28>)
10040a96:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10040a98:	4b06      	ldr	r3, [pc, #24]	@ (10040ab4 <LL_APB2_GRP1_EnableClock+0x28>)
10040a9a:	687a      	ldr	r2, [r7, #4]
10040a9c:	430a      	orrs	r2, r1
10040a9e:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10040aa0:	4b04      	ldr	r3, [pc, #16]	@ (10040ab4 <LL_APB2_GRP1_EnableClock+0x28>)
10040aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040aa4:	687a      	ldr	r2, [r7, #4]
10040aa6:	4013      	ands	r3, r2
10040aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040aaa:	68fb      	ldr	r3, [r7, #12]
}
10040aac:	46c0      	nop			@ (mov r8, r8)
10040aae:	46bd      	mov	sp, r7
10040ab0:	b004      	add	sp, #16
10040ab2:	bd80      	pop	{r7, pc}
10040ab4:	48400000 	.word	0x48400000

10040ab8 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10040ab8:	b580      	push	{r7, lr}
10040aba:	b082      	sub	sp, #8
10040abc:	af00      	add	r7, sp, #0
10040abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10040ac0:	4b06      	ldr	r3, [pc, #24]	@ (10040adc <LL_APB2_GRP1_IsEnabledClock+0x24>)
10040ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040ac4:	687a      	ldr	r2, [r7, #4]
10040ac6:	4013      	ands	r3, r2
10040ac8:	687a      	ldr	r2, [r7, #4]
10040aca:	429a      	cmp	r2, r3
10040acc:	d101      	bne.n	10040ad2 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10040ace:	2301      	movs	r3, #1
10040ad0:	e000      	b.n	10040ad4 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10040ad2:	2300      	movs	r3, #0
}
10040ad4:	0018      	movs	r0, r3
10040ad6:	46bd      	mov	sp, r7
10040ad8:	b002      	add	sp, #8
10040ada:	bd80      	pop	{r7, pc}
10040adc:	48400000 	.word	0x48400000

10040ae0 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10040ae0:	b580      	push	{r7, lr}
10040ae2:	b082      	sub	sp, #8
10040ae4:	af00      	add	r7, sp, #0
10040ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10040ae8:	4b04      	ldr	r3, [pc, #16]	@ (10040afc <LL_APB2_GRP1_ForceReset+0x1c>)
10040aea:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10040aec:	4b03      	ldr	r3, [pc, #12]	@ (10040afc <LL_APB2_GRP1_ForceReset+0x1c>)
10040aee:	687a      	ldr	r2, [r7, #4]
10040af0:	430a      	orrs	r2, r1
10040af2:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040af4:	46c0      	nop			@ (mov r8, r8)
10040af6:	46bd      	mov	sp, r7
10040af8:	b002      	add	sp, #8
10040afa:	bd80      	pop	{r7, pc}
10040afc:	48400000 	.word	0x48400000

10040b00 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10040b00:	b580      	push	{r7, lr}
10040b02:	b082      	sub	sp, #8
10040b04:	af00      	add	r7, sp, #0
10040b06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10040b08:	4b05      	ldr	r3, [pc, #20]	@ (10040b20 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040b0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10040b0c:	687b      	ldr	r3, [r7, #4]
10040b0e:	43d9      	mvns	r1, r3
10040b10:	4b03      	ldr	r3, [pc, #12]	@ (10040b20 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040b12:	400a      	ands	r2, r1
10040b14:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040b16:	46c0      	nop			@ (mov r8, r8)
10040b18:	46bd      	mov	sp, r7
10040b1a:	b002      	add	sp, #8
10040b1c:	bd80      	pop	{r7, pc}
10040b1e:	46c0      	nop			@ (mov r8, r8)
10040b20:	48400000 	.word	0x48400000

10040b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10040b24:	b580      	push	{r7, lr}
10040b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10040b28:	f004 f85a 	bl	10044be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
10040b2c:	f000 f812 	bl	10040b54 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
10040b30:	f000 f847 	bl	10040bc2 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10040b34:	f000 f916 	bl	10040d64 <MX_GPIO_Init>
  MX_RADIO_Init();
10040b38:	f000 f874 	bl	10040c24 <MX_RADIO_Init>
  MX_RADIO_TIMER_Init();
10040b3c:	f000 f890 	bl	10040c60 <MX_RADIO_TIMER_Init>
  MX_PKA_Init();
10040b40:	f000 f85c 	bl	10040bfc <MX_PKA_Init>
  MX_USART1_UART_Init();
10040b44:	f000 f8c0 	bl	10040cc8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_BLE */
  MX_APPE_Init(NULL);
10040b48:	2000      	movs	r0, #0
10040b4a:	f7ff fede 	bl	1004090a <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
10040b4e:	f7ff ff68 	bl	10040a22 <MX_APPE_Process>
10040b52:	e7fc      	b.n	10040b4e <main+0x2a>

10040b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10040b54:	b590      	push	{r4, r7, lr}
10040b56:	b089      	sub	sp, #36	@ 0x24
10040b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10040b5a:	2408      	movs	r4, #8
10040b5c:	193b      	adds	r3, r7, r4
10040b5e:	0018      	movs	r0, r3
10040b60:	2318      	movs	r3, #24
10040b62:	001a      	movs	r2, r3
10040b64:	2100      	movs	r1, #0
10040b66:	f00c fea5 	bl	1004d8b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10040b6a:	003b      	movs	r3, r7
10040b6c:	0018      	movs	r0, r3
10040b6e:	2308      	movs	r3, #8
10040b70:	001a      	movs	r2, r3
10040b72:	2100      	movs	r1, #0
10040b74:	f00c fe9e 	bl	1004d8b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
10040b78:	193b      	adds	r3, r7, r4
10040b7a:	2203      	movs	r2, #3
10040b7c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10040b7e:	193b      	adds	r3, r7, r4
10040b80:	2280      	movs	r2, #128	@ 0x80
10040b82:	0252      	lsls	r2, r2, #9
10040b84:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10040b86:	193b      	adds	r3, r7, r4
10040b88:	2210      	movs	r2, #16
10040b8a:	60da      	str	r2, [r3, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10040b8c:	193b      	adds	r3, r7, r4
10040b8e:	0018      	movs	r0, r3
10040b90:	f007 f874 	bl	10047c7c <HAL_RCC_OscConfig>
10040b94:	1e03      	subs	r3, r0, #0
10040b96:	d001      	beq.n	10040b9c <SystemClock_Config+0x48>
  {
    Error_Handler();
10040b98:	f000 f8f1 	bl	10040d7e <Error_Handler>
  }

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10040b9c:	003b      	movs	r3, r7
10040b9e:	2200      	movs	r2, #0
10040ba0:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV2;
10040ba2:	003b      	movs	r3, r7
10040ba4:	2220      	movs	r2, #32
10040ba6:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_0) != HAL_OK)
10040ba8:	003b      	movs	r3, r7
10040baa:	2100      	movs	r1, #0
10040bac:	0018      	movs	r0, r3
10040bae:	f007 f9af 	bl	10047f10 <HAL_RCC_ClockConfig>
10040bb2:	1e03      	subs	r3, r0, #0
10040bb4:	d001      	beq.n	10040bba <SystemClock_Config+0x66>
  {
    Error_Handler();
10040bb6:	f000 f8e2 	bl	10040d7e <Error_Handler>
  }
}
10040bba:	46c0      	nop			@ (mov r8, r8)
10040bbc:	46bd      	mov	sp, r7
10040bbe:	b009      	add	sp, #36	@ 0x24
10040bc0:	bd90      	pop	{r4, r7, pc}

10040bc2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10040bc2:	b580      	push	{r7, lr}
10040bc4:	b086      	sub	sp, #24
10040bc6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10040bc8:	003b      	movs	r3, r7
10040bca:	0018      	movs	r0, r3
10040bcc:	2318      	movs	r3, #24
10040bce:	001a      	movs	r2, r3
10040bd0:	2100      	movs	r1, #0
10040bd2:	f00c fe6f 	bl	1004d8b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10040bd6:	003b      	movs	r3, r7
10040bd8:	2202      	movs	r2, #2
10040bda:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10040bdc:	003b      	movs	r3, r7
10040bde:	2280      	movs	r2, #128	@ 0x80
10040be0:	0152      	lsls	r2, r2, #5
10040be2:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10040be4:	003b      	movs	r3, r7
10040be6:	0018      	movs	r0, r3
10040be8:	f007 fb28 	bl	1004823c <HAL_RCCEx_PeriphCLKConfig>
10040bec:	1e03      	subs	r3, r0, #0
10040bee:	d001      	beq.n	10040bf4 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
10040bf0:	f000 f8c5 	bl	10040d7e <Error_Handler>
  }
}
10040bf4:	46c0      	nop			@ (mov r8, r8)
10040bf6:	46bd      	mov	sp, r7
10040bf8:	b006      	add	sp, #24
10040bfa:	bd80      	pop	{r7, pc}

10040bfc <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
10040bfc:	b580      	push	{r7, lr}
10040bfe:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */
  
  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10040c00:	4b06      	ldr	r3, [pc, #24]	@ (10040c1c <MX_PKA_Init+0x20>)
10040c02:	4a07      	ldr	r2, [pc, #28]	@ (10040c20 <MX_PKA_Init+0x24>)
10040c04:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
10040c06:	4b05      	ldr	r3, [pc, #20]	@ (10040c1c <MX_PKA_Init+0x20>)
10040c08:	0018      	movs	r0, r3
10040c0a:	f004 fc50 	bl	100454ae <HAL_PKA_Init>
10040c0e:	1e03      	subs	r3, r0, #0
10040c10:	d001      	beq.n	10040c16 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10040c12:	f000 f8b4 	bl	10040d7e <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */
  
  /* USER CODE END PKA_Init 2 */

}
10040c16:	46c0      	nop			@ (mov r8, r8)
10040c18:	46bd      	mov	sp, r7
10040c1a:	bd80      	pop	{r7, pc}
10040c1c:	20000298 	.word	0x20000298
10040c20:	48300000 	.word	0x48300000

10040c24 <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10040c24:	b580      	push	{r7, lr}
10040c26:	b082      	sub	sp, #8
10040c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */

  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
10040c2a:	2300      	movs	r3, #0
10040c2c:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */

  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10040c2e:	2001      	movs	r0, #1
10040c30:	f7ff ff42 	bl	10040ab8 <LL_APB2_GRP1_IsEnabledClock>
10040c34:	1e03      	subs	r3, r0, #0
10040c36:	d108      	bne.n	10040c4a <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10040c38:	2001      	movs	r0, #1
10040c3a:	f7ff ff51 	bl	10040ae0 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10040c3e:	2001      	movs	r0, #1
10040c40:	f7ff ff5e 	bl	10040b00 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10040c44:	2001      	movs	r0, #1
10040c46:	f7ff ff21 	bl	10040a8c <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
10040c4a:	23c0      	movs	r3, #192	@ 0xc0
10040c4c:	05db      	lsls	r3, r3, #23
10040c4e:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
10040c50:	1d3b      	adds	r3, r7, #4
10040c52:	0018      	movs	r0, r3
10040c54:	f004 ff22 	bl	10045a9c <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */

  /* USER CODE END RADIO_Init 2 */

}
10040c58:	46c0      	nop			@ (mov r8, r8)
10040c5a:	46bd      	mov	sp, r7
10040c5c:	b002      	add	sp, #8
10040c5e:	bd80      	pop	{r7, pc}

10040c60 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
10040c60:	b580      	push	{r7, lr}
10040c62:	b082      	sub	sp, #8
10040c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
  
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
10040c66:	003b      	movs	r3, r7
10040c68:	0018      	movs	r0, r3
10040c6a:	2308      	movs	r3, #8
10040c6c:	001a      	movs	r2, r3
10040c6e:	2100      	movs	r1, #0
10040c70:	f00c fe20 	bl	1004d8b4 <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
  
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10040c74:	2001      	movs	r0, #1
10040c76:	f7ff ff1f 	bl	10040ab8 <LL_APB2_GRP1_IsEnabledClock>
10040c7a:	1e03      	subs	r3, r0, #0
10040c7c:	d108      	bne.n	10040c90 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10040c7e:	2001      	movs	r0, #1
10040c80:	f7ff ff2e 	bl	10040ae0 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10040c84:	2001      	movs	r0, #1
10040c86:	f7ff ff3b 	bl	10040b00 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10040c8a:	2001      	movs	r0, #1
10040c8c:	f7ff fefe 	bl	10040a8c <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
10040c90:	46c0      	nop			@ (mov r8, r8)
10040c92:	4b0c      	ldr	r3, [pc, #48]	@ (10040cc4 <MX_RADIO_TIMER_Init+0x64>)
10040c94:	0018      	movs	r0, r3
10040c96:	f7ff fed8 	bl	10040a4a <LL_RADIO_TIMER_GetAbsoluteTime>
10040c9a:	0003      	movs	r3, r0
10040c9c:	2b0f      	cmp	r3, #15
10040c9e:	d9f8      	bls.n	10040c92 <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10040ca0:	003b      	movs	r3, r7
10040ca2:	22a0      	movs	r2, #160	@ 0xa0
10040ca4:	0052      	lsls	r2, r2, #1
10040ca6:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
10040ca8:	003b      	movs	r3, r7
10040caa:	2200      	movs	r2, #0
10040cac:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
10040cae:	003b      	movs	r3, r7
10040cb0:	2200      	movs	r2, #0
10040cb2:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10040cb4:	003b      	movs	r3, r7
10040cb6:	0018      	movs	r0, r3
10040cb8:	f005 fbb6 	bl	10046428 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */

  /* USER CODE END RADIO_TIMER_Init 2 */

}
10040cbc:	46c0      	nop			@ (mov r8, r8)
10040cbe:	46bd      	mov	sp, r7
10040cc0:	b002      	add	sp, #8
10040cc2:	bd80      	pop	{r7, pc}
10040cc4:	60001800 	.word	0x60001800

10040cc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
10040cc8:	b580      	push	{r7, lr}
10040cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
10040ccc:	4b23      	ldr	r3, [pc, #140]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040cce:	4a24      	ldr	r2, [pc, #144]	@ (10040d60 <MX_USART1_UART_Init+0x98>)
10040cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
10040cd2:	4b22      	ldr	r3, [pc, #136]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040cd4:	22e1      	movs	r2, #225	@ 0xe1
10040cd6:	0252      	lsls	r2, r2, #9
10040cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
10040cda:	4b20      	ldr	r3, [pc, #128]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040cdc:	2200      	movs	r2, #0
10040cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
10040ce0:	4b1e      	ldr	r3, [pc, #120]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040ce2:	2200      	movs	r2, #0
10040ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
10040ce6:	4b1d      	ldr	r3, [pc, #116]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040ce8:	2200      	movs	r2, #0
10040cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
10040cec:	4b1b      	ldr	r3, [pc, #108]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040cee:	220c      	movs	r2, #12
10040cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10040cf2:	4b1a      	ldr	r3, [pc, #104]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040cf4:	2200      	movs	r2, #0
10040cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
10040cf8:	4b18      	ldr	r3, [pc, #96]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040cfa:	2200      	movs	r2, #0
10040cfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10040cfe:	4b17      	ldr	r3, [pc, #92]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040d00:	2200      	movs	r2, #0
10040d02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10040d04:	4b15      	ldr	r3, [pc, #84]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040d06:	2200      	movs	r2, #0
10040d08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10040d0a:	4b14      	ldr	r3, [pc, #80]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040d0c:	2200      	movs	r2, #0
10040d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
10040d10:	4b12      	ldr	r3, [pc, #72]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040d12:	0018      	movs	r0, r3
10040d14:	f007 fb6a 	bl	100483ec <HAL_UART_Init>
10040d18:	1e03      	subs	r3, r0, #0
10040d1a:	d001      	beq.n	10040d20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
10040d1c:	f000 f82f 	bl	10040d7e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10040d20:	4b0e      	ldr	r3, [pc, #56]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040d22:	2100      	movs	r1, #0
10040d24:	0018      	movs	r0, r3
10040d26:	f008 f831 	bl	10048d8c <HAL_UARTEx_SetTxFifoThreshold>
10040d2a:	1e03      	subs	r3, r0, #0
10040d2c:	d001      	beq.n	10040d32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
10040d2e:	f000 f826 	bl	10040d7e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10040d32:	4b0a      	ldr	r3, [pc, #40]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040d34:	2100      	movs	r1, #0
10040d36:	0018      	movs	r0, r3
10040d38:	f008 f868 	bl	10048e0c <HAL_UARTEx_SetRxFifoThreshold>
10040d3c:	1e03      	subs	r3, r0, #0
10040d3e:	d001      	beq.n	10040d44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
10040d40:	f000 f81d 	bl	10040d7e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
10040d44:	4b05      	ldr	r3, [pc, #20]	@ (10040d5c <MX_USART1_UART_Init+0x94>)
10040d46:	0018      	movs	r0, r3
10040d48:	f007 ffe6 	bl	10048d18 <HAL_UARTEx_DisableFifoMode>
10040d4c:	1e03      	subs	r3, r0, #0
10040d4e:	d001      	beq.n	10040d54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
10040d50:	f000 f815 	bl	10040d7e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
10040d54:	46c0      	nop			@ (mov r8, r8)
10040d56:	46bd      	mov	sp, r7
10040d58:	bd80      	pop	{r7, pc}
10040d5a:	46c0      	nop			@ (mov r8, r8)
10040d5c:	200002a4 	.word	0x200002a4
10040d60:	41004000 	.word	0x41004000

10040d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10040d64:	b580      	push	{r7, lr}
10040d66:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
10040d68:	2008      	movs	r0, #8
10040d6a:	f7ff fe79 	bl	10040a60 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
10040d6e:	2004      	movs	r0, #4
10040d70:	f7ff fe76 	bl	10040a60 <LL_AHB1_GRP1_EnableClock>

  /*RT DEBUG GPIO_Init */
  RT_DEBUG_GPIO_Init();
10040d74:	f001 fddf 	bl	10042936 <RT_DEBUG_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10040d78:	46c0      	nop			@ (mov r8, r8)
10040d7a:	46bd      	mov	sp, r7
10040d7c:	bd80      	pop	{r7, pc}

10040d7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10040d7e:	b580      	push	{r7, lr}
10040d80:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10040d82:	b672      	cpsid	i
}
10040d84:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10040d86:	e7fe      	b.n	10040d86 <Error_Handler+0x8>

10040d88 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10040d88:	b580      	push	{r7, lr}
10040d8a:	b082      	sub	sp, #8
10040d8c:	af00      	add	r7, sp, #0
10040d8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10040d90:	4b08      	ldr	r3, [pc, #32]	@ (10040db4 <LL_PWR_SetNoPullA+0x2c>)
10040d92:	6a1a      	ldr	r2, [r3, #32]
10040d94:	687b      	ldr	r3, [r7, #4]
10040d96:	43d9      	mvns	r1, r3
10040d98:	4b06      	ldr	r3, [pc, #24]	@ (10040db4 <LL_PWR_SetNoPullA+0x2c>)
10040d9a:	400a      	ands	r2, r1
10040d9c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10040d9e:	4b05      	ldr	r3, [pc, #20]	@ (10040db4 <LL_PWR_SetNoPullA+0x2c>)
10040da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10040da2:	687b      	ldr	r3, [r7, #4]
10040da4:	43d9      	mvns	r1, r3
10040da6:	4b03      	ldr	r3, [pc, #12]	@ (10040db4 <LL_PWR_SetNoPullA+0x2c>)
10040da8:	400a      	ands	r2, r1
10040daa:	625a      	str	r2, [r3, #36]	@ 0x24
}
10040dac:	46c0      	nop			@ (mov r8, r8)
10040dae:	46bd      	mov	sp, r7
10040db0:	b002      	add	sp, #8
10040db2:	bd80      	pop	{r7, pc}
10040db4:	48500000 	.word	0x48500000

10040db8 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10040db8:	b580      	push	{r7, lr}
10040dba:	b082      	sub	sp, #8
10040dbc:	af00      	add	r7, sp, #0
10040dbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10040dc0:	4b08      	ldr	r3, [pc, #32]	@ (10040de4 <LL_PWR_SetNoPullB+0x2c>)
10040dc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10040dc4:	687b      	ldr	r3, [r7, #4]
10040dc6:	43d9      	mvns	r1, r3
10040dc8:	4b06      	ldr	r3, [pc, #24]	@ (10040de4 <LL_PWR_SetNoPullB+0x2c>)
10040dca:	400a      	ands	r2, r1
10040dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10040dce:	4b05      	ldr	r3, [pc, #20]	@ (10040de4 <LL_PWR_SetNoPullB+0x2c>)
10040dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10040dd2:	687b      	ldr	r3, [r7, #4]
10040dd4:	43d9      	mvns	r1, r3
10040dd6:	4b03      	ldr	r3, [pc, #12]	@ (10040de4 <LL_PWR_SetNoPullB+0x2c>)
10040dd8:	400a      	ands	r2, r1
10040dda:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10040ddc:	46c0      	nop			@ (mov r8, r8)
10040dde:	46bd      	mov	sp, r7
10040de0:	b002      	add	sp, #8
10040de2:	bd80      	pop	{r7, pc}
10040de4:	48500000 	.word	0x48500000

10040de8 <LL_AHB1_GRP1_EnableClock>:
{
10040de8:	b580      	push	{r7, lr}
10040dea:	b084      	sub	sp, #16
10040dec:	af00      	add	r7, sp, #0
10040dee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10040df0:	4b07      	ldr	r3, [pc, #28]	@ (10040e10 <LL_AHB1_GRP1_EnableClock+0x28>)
10040df2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040df4:	4b06      	ldr	r3, [pc, #24]	@ (10040e10 <LL_AHB1_GRP1_EnableClock+0x28>)
10040df6:	687a      	ldr	r2, [r7, #4]
10040df8:	430a      	orrs	r2, r1
10040dfa:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040dfc:	4b04      	ldr	r3, [pc, #16]	@ (10040e10 <LL_AHB1_GRP1_EnableClock+0x28>)
10040dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040e00:	687a      	ldr	r2, [r7, #4]
10040e02:	4013      	ands	r3, r2
10040e04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040e06:	68fb      	ldr	r3, [r7, #12]
}
10040e08:	46c0      	nop			@ (mov r8, r8)
10040e0a:	46bd      	mov	sp, r7
10040e0c:	b004      	add	sp, #16
10040e0e:	bd80      	pop	{r7, pc}
10040e10:	48400000 	.word	0x48400000

10040e14 <LL_APB0_GRP1_EnableClock>:
{
10040e14:	b580      	push	{r7, lr}
10040e16:	b084      	sub	sp, #16
10040e18:	af00      	add	r7, sp, #0
10040e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10040e1c:	4b07      	ldr	r3, [pc, #28]	@ (10040e3c <LL_APB0_GRP1_EnableClock+0x28>)
10040e1e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10040e20:	4b06      	ldr	r3, [pc, #24]	@ (10040e3c <LL_APB0_GRP1_EnableClock+0x28>)
10040e22:	687a      	ldr	r2, [r7, #4]
10040e24:	430a      	orrs	r2, r1
10040e26:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10040e28:	4b04      	ldr	r3, [pc, #16]	@ (10040e3c <LL_APB0_GRP1_EnableClock+0x28>)
10040e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10040e2c:	687a      	ldr	r2, [r7, #4]
10040e2e:	4013      	ands	r3, r2
10040e30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040e32:	68fb      	ldr	r3, [r7, #12]
}
10040e34:	46c0      	nop			@ (mov r8, r8)
10040e36:	46bd      	mov	sp, r7
10040e38:	b004      	add	sp, #16
10040e3a:	bd80      	pop	{r7, pc}
10040e3c:	48400000 	.word	0x48400000

10040e40 <LL_APB1_GRP1_EnableClock>:
{
10040e40:	b580      	push	{r7, lr}
10040e42:	b084      	sub	sp, #16
10040e44:	af00      	add	r7, sp, #0
10040e46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10040e48:	4b07      	ldr	r3, [pc, #28]	@ (10040e68 <LL_APB1_GRP1_EnableClock+0x28>)
10040e4a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10040e4c:	4b06      	ldr	r3, [pc, #24]	@ (10040e68 <LL_APB1_GRP1_EnableClock+0x28>)
10040e4e:	687a      	ldr	r2, [r7, #4]
10040e50:	430a      	orrs	r2, r1
10040e52:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10040e54:	4b04      	ldr	r3, [pc, #16]	@ (10040e68 <LL_APB1_GRP1_EnableClock+0x28>)
10040e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10040e58:	687a      	ldr	r2, [r7, #4]
10040e5a:	4013      	ands	r3, r2
10040e5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040e5e:	68fb      	ldr	r3, [r7, #12]
}
10040e60:	46c0      	nop			@ (mov r8, r8)
10040e62:	46bd      	mov	sp, r7
10040e64:	b004      	add	sp, #16
10040e66:	bd80      	pop	{r7, pc}
10040e68:	48400000 	.word	0x48400000

10040e6c <LL_APB2_GRP1_EnableClock>:
{
10040e6c:	b580      	push	{r7, lr}
10040e6e:	b084      	sub	sp, #16
10040e70:	af00      	add	r7, sp, #0
10040e72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10040e74:	4b07      	ldr	r3, [pc, #28]	@ (10040e94 <LL_APB2_GRP1_EnableClock+0x28>)
10040e76:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10040e78:	4b06      	ldr	r3, [pc, #24]	@ (10040e94 <LL_APB2_GRP1_EnableClock+0x28>)
10040e7a:	687a      	ldr	r2, [r7, #4]
10040e7c:	430a      	orrs	r2, r1
10040e7e:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10040e80:	4b04      	ldr	r3, [pc, #16]	@ (10040e94 <LL_APB2_GRP1_EnableClock+0x28>)
10040e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040e84:	687a      	ldr	r2, [r7, #4]
10040e86:	4013      	ands	r3, r2
10040e88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040e8a:	68fb      	ldr	r3, [r7, #12]
}
10040e8c:	46c0      	nop			@ (mov r8, r8)
10040e8e:	46bd      	mov	sp, r7
10040e90:	b004      	add	sp, #16
10040e92:	bd80      	pop	{r7, pc}
10040e94:	48400000 	.word	0x48400000

10040e98 <LL_APB2_GRP1_IsEnabledClock>:
{
10040e98:	b580      	push	{r7, lr}
10040e9a:	b082      	sub	sp, #8
10040e9c:	af00      	add	r7, sp, #0
10040e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10040ea0:	4b06      	ldr	r3, [pc, #24]	@ (10040ebc <LL_APB2_GRP1_IsEnabledClock+0x24>)
10040ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040ea4:	687a      	ldr	r2, [r7, #4]
10040ea6:	4013      	ands	r3, r2
10040ea8:	687a      	ldr	r2, [r7, #4]
10040eaa:	429a      	cmp	r2, r3
10040eac:	d101      	bne.n	10040eb2 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10040eae:	2301      	movs	r3, #1
10040eb0:	e000      	b.n	10040eb4 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10040eb2:	2300      	movs	r3, #0
}
10040eb4:	0018      	movs	r0, r3
10040eb6:	46bd      	mov	sp, r7
10040eb8:	b002      	add	sp, #8
10040eba:	bd80      	pop	{r7, pc}
10040ebc:	48400000 	.word	0x48400000

10040ec0 <LL_APB2_GRP1_ForceReset>:
{
10040ec0:	b580      	push	{r7, lr}
10040ec2:	b082      	sub	sp, #8
10040ec4:	af00      	add	r7, sp, #0
10040ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10040ec8:	4b04      	ldr	r3, [pc, #16]	@ (10040edc <LL_APB2_GRP1_ForceReset+0x1c>)
10040eca:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10040ecc:	4b03      	ldr	r3, [pc, #12]	@ (10040edc <LL_APB2_GRP1_ForceReset+0x1c>)
10040ece:	687a      	ldr	r2, [r7, #4]
10040ed0:	430a      	orrs	r2, r1
10040ed2:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040ed4:	46c0      	nop			@ (mov r8, r8)
10040ed6:	46bd      	mov	sp, r7
10040ed8:	b002      	add	sp, #8
10040eda:	bd80      	pop	{r7, pc}
10040edc:	48400000 	.word	0x48400000

10040ee0 <LL_APB2_GRP1_ReleaseReset>:
{
10040ee0:	b580      	push	{r7, lr}
10040ee2:	b082      	sub	sp, #8
10040ee4:	af00      	add	r7, sp, #0
10040ee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10040ee8:	4b05      	ldr	r3, [pc, #20]	@ (10040f00 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10040eec:	687b      	ldr	r3, [r7, #4]
10040eee:	43d9      	mvns	r1, r3
10040ef0:	4b03      	ldr	r3, [pc, #12]	@ (10040f00 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040ef2:	400a      	ands	r2, r1
10040ef4:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040ef6:	46c0      	nop			@ (mov r8, r8)
10040ef8:	46bd      	mov	sp, r7
10040efa:	b002      	add	sp, #8
10040efc:	bd80      	pop	{r7, pc}
10040efe:	46c0      	nop			@ (mov r8, r8)
10040f00:	48400000 	.word	0x48400000

10040f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10040f04:	b580      	push	{r7, lr}
10040f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* IOs configuration to have the lowest power consumption in DEEPSTOP */
  lowPowerIOSetup();
10040f08:	f000 f8c6 	bl	10041098 <lowPowerIOSetup>

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10040f0c:	2380      	movs	r3, #128	@ 0x80
10040f0e:	005b      	lsls	r3, r3, #1
10040f10:	0018      	movs	r0, r3
10040f12:	f7ff ff7f 	bl	10040e14 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10040f16:	46c0      	nop			@ (mov r8, r8)
10040f18:	46bd      	mov	sp, r7
10040f1a:	bd80      	pop	{r7, pc}

10040f1c <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
10040f1c:	b580      	push	{r7, lr}
10040f1e:	b082      	sub	sp, #8
10040f20:	af00      	add	r7, sp, #0
10040f22:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
10040f24:	687b      	ldr	r3, [r7, #4]
10040f26:	681b      	ldr	r3, [r3, #0]
10040f28:	4a09      	ldr	r2, [pc, #36]	@ (10040f50 <HAL_PKA_MspInit+0x34>)
10040f2a:	4293      	cmp	r3, r2
10040f2c:	d10c      	bne.n	10040f48 <HAL_PKA_MspInit+0x2c>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
10040f2e:	2380      	movs	r3, #128	@ 0x80
10040f30:	025b      	lsls	r3, r3, #9
10040f32:	0018      	movs	r0, r3
10040f34:	f7ff ff58 	bl	10040de8 <LL_AHB1_GRP1_EnableClock>
    /* PKA interrupt Init */
    HAL_NVIC_SetPriority(PKA_IRQn, 1, 0);
10040f38:	2200      	movs	r2, #0
10040f3a:	2101      	movs	r1, #1
10040f3c:	200d      	movs	r0, #13
10040f3e:	f003 ff81 	bl	10044e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PKA_IRQn);
10040f42:	200d      	movs	r0, #13
10040f44:	f003 ff93 	bl	10044e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END PKA_MspInit 1 */

  }

}
10040f48:	46c0      	nop			@ (mov r8, r8)
10040f4a:	46bd      	mov	sp, r7
10040f4c:	b002      	add	sp, #8
10040f4e:	bd80      	pop	{r7, pc}
10040f50:	48300000 	.word	0x48300000

10040f54 <HAL_RADIO_MspInit>:
* This function configures the hardware resources used in this example
* @param hradio: RADIO handle pointer
* @retval None
*/
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
10040f54:	b590      	push	{r4, r7, lr}
10040f56:	b089      	sub	sp, #36	@ 0x24
10040f58:	af00      	add	r7, sp, #0
10040f5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10040f5c:	2408      	movs	r4, #8
10040f5e:	193b      	adds	r3, r7, r4
10040f60:	0018      	movs	r0, r3
10040f62:	2318      	movs	r3, #24
10040f64:	001a      	movs	r2, r3
10040f66:	2100      	movs	r1, #0
10040f68:	f00c fca4 	bl	1004d8b4 <memset>
  if(hradio->Instance==RADIO)
10040f6c:	687b      	ldr	r3, [r7, #4]
10040f6e:	681a      	ldr	r2, [r3, #0]
10040f70:	23c0      	movs	r3, #192	@ 0xc0
10040f72:	05db      	lsls	r3, r3, #23
10040f74:	429a      	cmp	r2, r3
10040f76:	d12d      	bne.n	10040fd4 <HAL_RADIO_MspInit+0x80>

  /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10040f78:	193b      	adds	r3, r7, r4
10040f7a:	2201      	movs	r2, #1
10040f7c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
10040f7e:	193b      	adds	r3, r7, r4
10040f80:	2204      	movs	r2, #4
10040f82:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10040f84:	193b      	adds	r3, r7, r4
10040f86:	0018      	movs	r0, r3
10040f88:	f007 f958 	bl	1004823c <HAL_RCCEx_PeriphCLKConfig>
10040f8c:	1e03      	subs	r3, r0, #0
10040f8e:	d001      	beq.n	10040f94 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10040f90:	f7ff fef5 	bl	10040d7e <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10040f94:	2001      	movs	r0, #1
10040f96:	f7ff ff7f 	bl	10040e98 <LL_APB2_GRP1_IsEnabledClock>
10040f9a:	1e03      	subs	r3, r0, #0
10040f9c:	d108      	bne.n	10040fb0 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10040f9e:	2001      	movs	r0, #1
10040fa0:	f7ff ff8e 	bl	10040ec0 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10040fa4:	2001      	movs	r0, #1
10040fa6:	f7ff ff9b 	bl	10040ee0 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
10040faa:	2001      	movs	r0, #1
10040fac:	f7ff ff5e 	bl	10040e6c <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10040fb0:	f001 fcc1 	bl	10042936 <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10040fb4:	2200      	movs	r2, #0
10040fb6:	2100      	movs	r1, #0
10040fb8:	2012      	movs	r0, #18
10040fba:	f003 ff43 	bl	10044e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10040fbe:	2012      	movs	r0, #18
10040fc0:	f003 ff55 	bl	10044e6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10040fc4:	2200      	movs	r2, #0
10040fc6:	2100      	movs	r1, #0
10040fc8:	2019      	movs	r0, #25
10040fca:	f003 ff3b 	bl	10044e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10040fce:	2019      	movs	r0, #25
10040fd0:	f003 ff4d 	bl	10044e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RADIO_MspInit 1 */

  }

}
10040fd4:	46c0      	nop			@ (mov r8, r8)
10040fd6:	46bd      	mov	sp, r7
10040fd8:	b009      	add	sp, #36	@ 0x24
10040fda:	bd90      	pop	{r4, r7, pc}

10040fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10040fdc:	b590      	push	{r4, r7, lr}
10040fde:	b089      	sub	sp, #36	@ 0x24
10040fe0:	af00      	add	r7, sp, #0
10040fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10040fe4:	240c      	movs	r4, #12
10040fe6:	193b      	adds	r3, r7, r4
10040fe8:	0018      	movs	r0, r3
10040fea:	2314      	movs	r3, #20
10040fec:	001a      	movs	r2, r3
10040fee:	2100      	movs	r1, #0
10040ff0:	f00c fc60 	bl	1004d8b4 <memset>
  if(huart->Instance==USART1)
10040ff4:	687b      	ldr	r3, [r7, #4]
10040ff6:	681b      	ldr	r3, [r3, #0]
10040ff8:	4a25      	ldr	r2, [pc, #148]	@ (10041090 <HAL_UART_MspInit+0xb4>)
10040ffa:	4293      	cmp	r3, r2
10040ffc:	d144      	bne.n	10041088 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
10040ffe:	2380      	movs	r3, #128	@ 0x80
10041000:	00db      	lsls	r3, r3, #3
10041002:	0018      	movs	r0, r3
10041004:	f7ff ff1c 	bl	10040e40 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10041008:	2008      	movs	r0, #8
1004100a:	f7ff feed 	bl	10040de8 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
1004100e:	2004      	movs	r0, #4
10041010:	f7ff feea 	bl	10040de8 <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB0     ------> USART1_RX
    PA1     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
10041014:	193b      	adds	r3, r7, r4
10041016:	2201      	movs	r2, #1
10041018:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004101a:	193b      	adds	r3, r7, r4
1004101c:	2202      	movs	r2, #2
1004101e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10041020:	193b      	adds	r3, r7, r4
10041022:	2200      	movs	r2, #0
10041024:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10041026:	193b      	adds	r3, r7, r4
10041028:	2200      	movs	r2, #0
1004102a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
1004102c:	193b      	adds	r3, r7, r4
1004102e:	2200      	movs	r2, #0
10041030:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10041032:	193b      	adds	r3, r7, r4
10041034:	4a17      	ldr	r2, [pc, #92]	@ (10041094 <HAL_UART_MspInit+0xb8>)
10041036:	0019      	movs	r1, r3
10041038:	0010      	movs	r0, r2
1004103a:	f004 f88f 	bl	1004515c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
1004103e:	0021      	movs	r1, r4
10041040:	187b      	adds	r3, r7, r1
10041042:	2202      	movs	r2, #2
10041044:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10041046:	187b      	adds	r3, r7, r1
10041048:	2202      	movs	r2, #2
1004104a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004104c:	187b      	adds	r3, r7, r1
1004104e:	2200      	movs	r2, #0
10041050:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10041052:	187b      	adds	r3, r7, r1
10041054:	2200      	movs	r2, #0
10041056:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART1;
10041058:	187b      	adds	r3, r7, r1
1004105a:	2202      	movs	r2, #2
1004105c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1004105e:	187a      	adds	r2, r7, r1
10041060:	2390      	movs	r3, #144	@ 0x90
10041062:	05db      	lsls	r3, r3, #23
10041064:	0011      	movs	r1, r2
10041066:	0018      	movs	r0, r3
10041068:	f004 f878 	bl	1004515c <HAL_GPIO_Init>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_0);
1004106c:	2001      	movs	r0, #1
1004106e:	f7ff fea3 	bl	10040db8 <LL_PWR_SetNoPullB>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_1);
10041072:	2002      	movs	r0, #2
10041074:	f7ff fe88 	bl	10040d88 <LL_PWR_SetNoPullA>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
10041078:	2200      	movs	r2, #0
1004107a:	2101      	movs	r1, #1
1004107c:	2008      	movs	r0, #8
1004107e:	f003 fee1 	bl	10044e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
10041082:	2008      	movs	r0, #8
10041084:	f003 fef3 	bl	10044e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
10041088:	46c0      	nop			@ (mov r8, r8)
1004108a:	46bd      	mov	sp, r7
1004108c:	b009      	add	sp, #36	@ 0x24
1004108e:	bd90      	pop	{r4, r7, pc}
10041090:	41004000 	.word	0x41004000
10041094:	48100000 	.word	0x48100000

10041098 <lowPowerIOSetup>:
  * @brief  Configures the IOs pull resistors to have the optimized power consumption.
  * @param  None
  * @retval None
  */
static void lowPowerIOSetup(void)
{
10041098:	b580      	push	{r7, lr}
1004109a:	af00      	add	r7, sp, #0
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_A, 
1004109c:	210f      	movs	r1, #15
1004109e:	2000      	movs	r0, #0
100410a0:	f004 fae2 	bl	10045668 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_0|
                       PWR_GPIO_BIT_1|
                       PWR_GPIO_BIT_2|                         
                       PWR_GPIO_BIT_3);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_A, 
100410a4:	23f0      	movs	r3, #240	@ 0xf0
100410a6:	011b      	lsls	r3, r3, #4
100410a8:	0019      	movs	r1, r3
100410aa:	2000      	movs	r0, #0
100410ac:	f004 fb16 	bl	100456dc <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_8|
                             PWR_GPIO_BIT_9|
                             PWR_GPIO_BIT_10|
                             PWR_GPIO_BIT_11);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, 
100410b0:	4b06      	ldr	r3, [pc, #24]	@ (100410cc <lowPowerIOSetup+0x34>)
100410b2:	0019      	movs	r1, r3
100410b4:	2001      	movs	r0, #1
100410b6:	f004 fb11 	bl	100456dc <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_6|
                             PWR_GPIO_BIT_7|
                             PWR_GPIO_BIT_12|
                             PWR_GPIO_BIT_13);
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_B, 
100410ba:	4b05      	ldr	r3, [pc, #20]	@ (100410d0 <lowPowerIOSetup+0x38>)
100410bc:	0019      	movs	r1, r3
100410be:	2001      	movs	r0, #1
100410c0:	f004 fad2 	bl	10045668 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_2|
                       PWR_GPIO_BIT_4|
                       PWR_GPIO_BIT_5|  
                       PWR_GPIO_BIT_14|
                       PWR_GPIO_BIT_15);
}
100410c4:	46c0      	nop			@ (mov r8, r8)
100410c6:	46bd      	mov	sp, r7
100410c8:	bd80      	pop	{r7, pc}
100410ca:	46c0      	nop			@ (mov r8, r8)
100410cc:	000030c9 	.word	0x000030c9
100410d0:	0000c036 	.word	0x0000c036

100410d4 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
100410d4:	b580      	push	{r7, lr}
100410d6:	b082      	sub	sp, #8
100410d8:	af00      	add	r7, sp, #0
100410da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
100410dc:	687b      	ldr	r3, [r7, #4]
100410de:	69db      	ldr	r3, [r3, #28]
100410e0:	2220      	movs	r2, #32
100410e2:	4013      	ands	r3, r2
100410e4:	2b20      	cmp	r3, #32
100410e6:	d101      	bne.n	100410ec <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
100410e8:	2301      	movs	r3, #1
100410ea:	e000      	b.n	100410ee <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
100410ec:	2300      	movs	r3, #0
}
100410ee:	0018      	movs	r0, r3
100410f0:	46bd      	mov	sp, r7
100410f2:	b002      	add	sp, #8
100410f4:	bd80      	pop	{r7, pc}

100410f6 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
100410f6:	b580      	push	{r7, lr}
100410f8:	b082      	sub	sp, #8
100410fa:	af00      	add	r7, sp, #0
100410fc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
100410fe:	687b      	ldr	r3, [r7, #4]
10041100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10041102:	b2db      	uxtb	r3, r3
}
10041104:	0018      	movs	r0, r3
10041106:	46bd      	mov	sp, r7
10041108:	b002      	add	sp, #8
1004110a:	bd80      	pop	{r7, pc}

1004110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
1004110c:	b580      	push	{r7, lr}
1004110e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10041110:	46c0      	nop			@ (mov r8, r8)
10041112:	46bd      	mov	sp, r7
10041114:	bd80      	pop	{r7, pc}

10041116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10041116:	b580      	push	{r7, lr}
10041118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1004111a:	e7fe      	b.n	1004111a <HardFault_Handler+0x4>

1004111c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
1004111c:	b580      	push	{r7, lr}
1004111e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10041120:	46c0      	nop			@ (mov r8, r8)
10041122:	46bd      	mov	sp, r7
10041124:	bd80      	pop	{r7, pc}

10041126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10041126:	b580      	push	{r7, lr}
10041128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1004112a:	46c0      	nop			@ (mov r8, r8)
1004112c:	46bd      	mov	sp, r7
1004112e:	bd80      	pop	{r7, pc}

10041130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10041130:	b580      	push	{r7, lr}
10041132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10041134:	f003 fdb4 	bl	10044ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10041138:	46c0      	nop			@ (mov r8, r8)
1004113a:	46bd      	mov	sp, r7
1004113c:	bd80      	pop	{r7, pc}
	...

10041140 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
10041140:	b580      	push	{r7, lr}
10041142:	b082      	sub	sp, #8
10041144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

    uint8_t read_data; 
  
  /* If the RX FIFO is Not Empty */
  if(LL_USART_IsActiveFlag_RXNE(USART1) == 1) {
10041146:	4b0c      	ldr	r3, [pc, #48]	@ (10041178 <USART1_IRQHandler+0x38>)
10041148:	0018      	movs	r0, r3
1004114a:	f7ff ffc3 	bl	100410d4 <LL_USART_IsActiveFlag_RXNE_RXFNE>
1004114e:	0003      	movs	r3, r0
10041150:	2b01      	cmp	r3, #1
10041152:	d10c      	bne.n	1004116e <USART1_IRQHandler+0x2e>
    /* Read a byte from the RX FIFO */
    read_data = LL_USART_ReceiveData8(USART1);
10041154:	4b08      	ldr	r3, [pc, #32]	@ (10041178 <USART1_IRQHandler+0x38>)
10041156:	0018      	movs	r0, r3
10041158:	f7ff ffcd 	bl	100410f6 <LL_USART_ReceiveData8>
1004115c:	0003      	movs	r3, r0
1004115e:	001a      	movs	r2, r3
10041160:	1dfb      	adds	r3, r7, #7
10041162:	701a      	strb	r2, [r3, #0]
    
    /* Send the data received to the user RX callback */
    UartRxCpltCallback(&read_data, 1);
10041164:	1dfb      	adds	r3, r7, #7
10041166:	2101      	movs	r1, #1
10041168:	0018      	movs	r0, r3
1004116a:	f7ff fc1d 	bl	100409a8 <UartRxCpltCallback>
  
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
1004116e:	46c0      	nop			@ (mov r8, r8)
10041170:	46bd      	mov	sp, r7
10041172:	b002      	add	sp, #8
10041174:	bd80      	pop	{r7, pc}
10041176:	46c0      	nop			@ (mov r8, r8)
10041178:	41004000 	.word	0x41004000

1004117c <PKA_IRQHandler>:

/**
  * @brief This function handles PKA global interrupt.
  */
void PKA_IRQHandler(void)
{
1004117c:	b580      	push	{r7, lr}
1004117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PKA_IRQn 0 */

  /* USER CODE END PKA_IRQn 0 */
  HAL_PKA_IRQHandler(&hpka);
10041180:	4b03      	ldr	r3, [pc, #12]	@ (10041190 <PKA_IRQHandler+0x14>)
10041182:	0018      	movs	r0, r3
10041184:	f004 f9f0 	bl	10045568 <HAL_PKA_IRQHandler>
  /* USER CODE BEGIN PKA_IRQn 1 */

  /* USER CODE END PKA_IRQn 1 */
}
10041188:	46c0      	nop			@ (mov r8, r8)
1004118a:	46bd      	mov	sp, r7
1004118c:	bd80      	pop	{r7, pc}
1004118e:	46c0      	nop			@ (mov r8, r8)
10041190:	20000298 	.word	0x20000298

10041194 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10041194:	b580      	push	{r7, lr}
10041196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10041198:	f006 fb7a 	bl	10047890 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
1004119c:	46c0      	nop			@ (mov r8, r8)
1004119e:	46bd      	mov	sp, r7
100411a0:	bd80      	pop	{r7, pc}

100411a2 <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
100411a2:	b580      	push	{r7, lr}
100411a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */
  
  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
100411a6:	f006 fb7c 	bl	100478a2 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
100411aa:	46c0      	nop			@ (mov r8, r8)
100411ac:	46bd      	mov	sp, r7
100411ae:	bd80      	pop	{r7, pc}

100411b0 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
100411b0:	b580      	push	{r7, lr}
100411b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */
  
  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
100411b4:	f004 ffba 	bl	1004612c <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */
  
  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
100411b8:	46c0      	nop			@ (mov r8, r8)
100411ba:	46bd      	mov	sp, r7
100411bc:	bd80      	pop	{r7, pc}

100411be <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
100411be:	b580      	push	{r7, lr}
100411c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
100411c2:	f004 ffd4 	bl	1004616e <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
100411c6:	46c0      	nop			@ (mov r8, r8)
100411c8:	46bd      	mov	sp, r7
100411ca:	bd80      	pop	{r7, pc}

100411cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100411cc:	b580      	push	{r7, lr}
100411ce:	b086      	sub	sp, #24
100411d0:	af00      	add	r7, sp, #0
100411d2:	60f8      	str	r0, [r7, #12]
100411d4:	60b9      	str	r1, [r7, #8]
100411d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100411d8:	2300      	movs	r3, #0
100411da:	617b      	str	r3, [r7, #20]
100411dc:	e00a      	b.n	100411f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
100411de:	e000      	b.n	100411e2 <_read+0x16>
100411e0:	bf00      	nop
100411e2:	0001      	movs	r1, r0
100411e4:	68bb      	ldr	r3, [r7, #8]
100411e6:	1c5a      	adds	r2, r3, #1
100411e8:	60ba      	str	r2, [r7, #8]
100411ea:	b2ca      	uxtb	r2, r1
100411ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100411ee:	697b      	ldr	r3, [r7, #20]
100411f0:	3301      	adds	r3, #1
100411f2:	617b      	str	r3, [r7, #20]
100411f4:	697a      	ldr	r2, [r7, #20]
100411f6:	687b      	ldr	r3, [r7, #4]
100411f8:	429a      	cmp	r2, r3
100411fa:	dbf0      	blt.n	100411de <_read+0x12>
  }

  return len;
100411fc:	687b      	ldr	r3, [r7, #4]
}
100411fe:	0018      	movs	r0, r3
10041200:	46bd      	mov	sp, r7
10041202:	b006      	add	sp, #24
10041204:	bd80      	pop	{r7, pc}

10041206 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10041206:	b580      	push	{r7, lr}
10041208:	b086      	sub	sp, #24
1004120a:	af00      	add	r7, sp, #0
1004120c:	60f8      	str	r0, [r7, #12]
1004120e:	60b9      	str	r1, [r7, #8]
10041210:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10041212:	2300      	movs	r3, #0
10041214:	617b      	str	r3, [r7, #20]
10041216:	e009      	b.n	1004122c <_write+0x26>
  {
    __io_putchar(*ptr++);
10041218:	68bb      	ldr	r3, [r7, #8]
1004121a:	1c5a      	adds	r2, r3, #1
1004121c:	60ba      	str	r2, [r7, #8]
1004121e:	781b      	ldrb	r3, [r3, #0]
10041220:	0018      	movs	r0, r3
10041222:	f003 fab5 	bl	10044790 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10041226:	697b      	ldr	r3, [r7, #20]
10041228:	3301      	adds	r3, #1
1004122a:	617b      	str	r3, [r7, #20]
1004122c:	697a      	ldr	r2, [r7, #20]
1004122e:	687b      	ldr	r3, [r7, #4]
10041230:	429a      	cmp	r2, r3
10041232:	dbf1      	blt.n	10041218 <_write+0x12>
  }
  return len;
10041234:	687b      	ldr	r3, [r7, #4]
}
10041236:	0018      	movs	r0, r3
10041238:	46bd      	mov	sp, r7
1004123a:	b006      	add	sp, #24
1004123c:	bd80      	pop	{r7, pc}

1004123e <_close>:

int _close(int file)
{
1004123e:	b580      	push	{r7, lr}
10041240:	b082      	sub	sp, #8
10041242:	af00      	add	r7, sp, #0
10041244:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
10041246:	2301      	movs	r3, #1
10041248:	425b      	negs	r3, r3
}
1004124a:	0018      	movs	r0, r3
1004124c:	46bd      	mov	sp, r7
1004124e:	b002      	add	sp, #8
10041250:	bd80      	pop	{r7, pc}

10041252 <_fstat>:


int _fstat(int file, struct stat *st)
{
10041252:	b580      	push	{r7, lr}
10041254:	b082      	sub	sp, #8
10041256:	af00      	add	r7, sp, #0
10041258:	6078      	str	r0, [r7, #4]
1004125a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
1004125c:	683b      	ldr	r3, [r7, #0]
1004125e:	2280      	movs	r2, #128	@ 0x80
10041260:	0192      	lsls	r2, r2, #6
10041262:	605a      	str	r2, [r3, #4]
  return 0;
10041264:	2300      	movs	r3, #0
}
10041266:	0018      	movs	r0, r3
10041268:	46bd      	mov	sp, r7
1004126a:	b002      	add	sp, #8
1004126c:	bd80      	pop	{r7, pc}

1004126e <_isatty>:

int _isatty(int file)
{
1004126e:	b580      	push	{r7, lr}
10041270:	b082      	sub	sp, #8
10041272:	af00      	add	r7, sp, #0
10041274:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
10041276:	2301      	movs	r3, #1
}
10041278:	0018      	movs	r0, r3
1004127a:	46bd      	mov	sp, r7
1004127c:	b002      	add	sp, #8
1004127e:	bd80      	pop	{r7, pc}

10041280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10041280:	b580      	push	{r7, lr}
10041282:	b084      	sub	sp, #16
10041284:	af00      	add	r7, sp, #0
10041286:	60f8      	str	r0, [r7, #12]
10041288:	60b9      	str	r1, [r7, #8]
1004128a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
1004128c:	2300      	movs	r3, #0
}
1004128e:	0018      	movs	r0, r3
10041290:	46bd      	mov	sp, r7
10041292:	b004      	add	sp, #16
10041294:	bd80      	pop	{r7, pc}
	...

10041298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10041298:	b580      	push	{r7, lr}
1004129a:	b086      	sub	sp, #24
1004129c:	af00      	add	r7, sp, #0
1004129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
100412a0:	4a14      	ldr	r2, [pc, #80]	@ (100412f4 <_sbrk+0x5c>)
100412a2:	4b15      	ldr	r3, [pc, #84]	@ (100412f8 <_sbrk+0x60>)
100412a4:	1ad3      	subs	r3, r2, r3
100412a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
100412a8:	697b      	ldr	r3, [r7, #20]
100412aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
100412ac:	4b13      	ldr	r3, [pc, #76]	@ (100412fc <_sbrk+0x64>)
100412ae:	681b      	ldr	r3, [r3, #0]
100412b0:	2b00      	cmp	r3, #0
100412b2:	d102      	bne.n	100412ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100412b4:	4b11      	ldr	r3, [pc, #68]	@ (100412fc <_sbrk+0x64>)
100412b6:	4a12      	ldr	r2, [pc, #72]	@ (10041300 <_sbrk+0x68>)
100412b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100412ba:	4b10      	ldr	r3, [pc, #64]	@ (100412fc <_sbrk+0x64>)
100412bc:	681a      	ldr	r2, [r3, #0]
100412be:	687b      	ldr	r3, [r7, #4]
100412c0:	18d3      	adds	r3, r2, r3
100412c2:	693a      	ldr	r2, [r7, #16]
100412c4:	429a      	cmp	r2, r3
100412c6:	d207      	bcs.n	100412d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
100412c8:	f00c fb4a 	bl	1004d960 <__errno>
100412cc:	0003      	movs	r3, r0
100412ce:	220c      	movs	r2, #12
100412d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100412d2:	2301      	movs	r3, #1
100412d4:	425b      	negs	r3, r3
100412d6:	e009      	b.n	100412ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100412d8:	4b08      	ldr	r3, [pc, #32]	@ (100412fc <_sbrk+0x64>)
100412da:	681b      	ldr	r3, [r3, #0]
100412dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100412de:	4b07      	ldr	r3, [pc, #28]	@ (100412fc <_sbrk+0x64>)
100412e0:	681a      	ldr	r2, [r3, #0]
100412e2:	687b      	ldr	r3, [r7, #4]
100412e4:	18d2      	adds	r2, r2, r3
100412e6:	4b05      	ldr	r3, [pc, #20]	@ (100412fc <_sbrk+0x64>)
100412e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
100412ea:	68fb      	ldr	r3, [r7, #12]
}
100412ec:	0018      	movs	r0, r3
100412ee:	46bd      	mov	sp, r7
100412f0:	b006      	add	sp, #24
100412f2:	bd80      	pop	{r7, pc}
100412f4:	20010000 	.word	0x20010000
100412f8:	00000c00 	.word	0x00000c00
100412fc:	20000338 	.word	0x20000338
10041300:	2000204c 	.word	0x2000204c

10041304 <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
10041304:	b580      	push	{r7, lr}
10041306:	af00      	add	r7, sp, #0
  BLENVM_Init();
10041308:	f000 fa18 	bl	1004173c <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
1004130c:	f003 f832 	bl	10044374 <PKAMGR_Init>
10041310:	0003      	movs	r3, r0
10041312:	3301      	adds	r3, #1
10041314:	d101      	bne.n	1004131a <ModulesInit+0x16>
  {
    Error_Handler();
10041316:	f7ff fd32 	bl	10040d7e <Error_Handler>
  }
}
1004131a:	46c0      	nop			@ (mov r8, r8)
1004131c:	46bd      	mov	sp, r7
1004131e:	bd80      	pop	{r7, pc}

10041320 <BLE_Init>:

void BLE_Init(void)
{
10041320:	b5f0      	push	{r4, r5, r6, r7, lr}
10041322:	b097      	sub	sp, #92	@ 0x5c
10041324:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
10041326:	2347      	movs	r3, #71	@ 0x47
10041328:	18fb      	adds	r3, r7, r3
1004132a:	2200      	movs	r2, #0
1004132c:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint8_t bd_address[6] = {0};
1004132e:	233c      	movs	r3, #60	@ 0x3c
10041330:	18fb      	adds	r3, r7, r3
10041332:	2200      	movs	r2, #0
10041334:	601a      	str	r2, [r3, #0]
10041336:	2200      	movs	r2, #0
10041338:	809a      	strh	r2, [r3, #4]
  uint8_t bd_address_len= 6;
1004133a:	233b      	movs	r3, #59	@ 0x3b
1004133c:	18fb      	adds	r3, r7, r3
1004133e:	2206      	movs	r2, #6
10041340:	701a      	strb	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
10041342:	1d3a      	adds	r2, r7, #4
10041344:	4b51      	ldr	r3, [pc, #324]	@ (1004148c <BLE_Init+0x16c>)
10041346:	0010      	movs	r0, r2
10041348:	0019      	movs	r1, r3
1004134a:	2334      	movs	r3, #52	@ 0x34
1004134c:	001a      	movs	r2, r3
1004134e:	f00c fb10 	bl	1004d972 <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
10041352:	2546      	movs	r5, #70	@ 0x46
10041354:	197c      	adds	r4, r7, r5
10041356:	1d3b      	adds	r3, r7, #4
10041358:	0018      	movs	r0, r3
1004135a:	f008 fa1f 	bl	1004979c <BLE_STACK_Init>
1004135e:	0003      	movs	r3, r0
10041360:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
10041362:	197b      	adds	r3, r7, r5
10041364:	781b      	ldrb	r3, [r3, #0]
10041366:	2b00      	cmp	r3, #0
10041368:	d008      	beq.n	1004137c <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
1004136a:	197b      	adds	r3, r7, r5
1004136c:	781a      	ldrb	r2, [r3, #0]
1004136e:	4b48      	ldr	r3, [pc, #288]	@ (10041490 <BLE_Init+0x170>)
10041370:	0011      	movs	r1, r2
10041372:	0018      	movs	r0, r3
10041374:	f00c f87e 	bl	1004d474 <iprintf>
    Error_Handler();
10041378:	f7ff fd01 	bl	10040d7e <Error_Handler>
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
1004137c:	2546      	movs	r5, #70	@ 0x46
1004137e:	197c      	adds	r4, r7, r5
10041380:	2118      	movs	r1, #24
10041382:	2000      	movs	r0, #0
10041384:	f008 f89c 	bl	100494c0 <aci_hal_set_tx_power_level>
10041388:	0003      	movs	r3, r0
1004138a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004138c:	002a      	movs	r2, r5
1004138e:	18bb      	adds	r3, r7, r2
10041390:	781b      	ldrb	r3, [r3, #0]
10041392:	2b00      	cmp	r3, #0
10041394:	d007      	beq.n	100413a6 <BLE_Init+0x86>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%02X\n", ret);
10041396:	18bb      	adds	r3, r7, r2
10041398:	781a      	ldrb	r2, [r3, #0]
1004139a:	4b3e      	ldr	r3, [pc, #248]	@ (10041494 <BLE_Init+0x174>)
1004139c:	0011      	movs	r1, r2
1004139e:	0018      	movs	r0, r3
100413a0:	f00c f868 	bl	1004d474 <iprintf>
100413a4:	e003      	b.n	100413ae <BLE_Init+0x8e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
100413a6:	4b3c      	ldr	r3, [pc, #240]	@ (10041498 <BLE_Init+0x178>)
100413a8:	0018      	movs	r0, r3
100413aa:	f00c f8c9 	bl	1004d540 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
100413ae:	2546      	movs	r5, #70	@ 0x46
100413b0:	197c      	adds	r4, r7, r5
100413b2:	2342      	movs	r3, #66	@ 0x42
100413b4:	18fb      	adds	r3, r7, r3
100413b6:	0019      	movs	r1, r3
100413b8:	2001      	movs	r0, #1
100413ba:	f003 f816 	bl	100443ea <aci_gatt_srv_profile_init>
100413be:	0003      	movs	r3, r0
100413c0:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100413c2:	197b      	adds	r3, r7, r5
100413c4:	781b      	ldrb	r3, [r3, #0]
100413c6:	2b00      	cmp	r3, #0
100413c8:	d007      	beq.n	100413da <BLE_Init+0xba>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_profile_init command, result: 0x%02X\n", ret);
100413ca:	197b      	adds	r3, r7, r5
100413cc:	781a      	ldrb	r2, [r3, #0]
100413ce:	4b33      	ldr	r3, [pc, #204]	@ (1004149c <BLE_Init+0x17c>)
100413d0:	0011      	movs	r1, r2
100413d2:	0018      	movs	r0, r3
100413d4:	f00c f84e 	bl	1004d474 <iprintf>
100413d8:	e003      	b.n	100413e2 <BLE_Init+0xc2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_profile_init command\n");
100413da:	4b31      	ldr	r3, [pc, #196]	@ (100414a0 <BLE_Init+0x180>)
100413dc:	0018      	movs	r0, r3
100413de:	f00c f8af 	bl	1004d540 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
100413e2:	2145      	movs	r1, #69	@ 0x45
100413e4:	187b      	adds	r3, r7, r1
100413e6:	2200      	movs	r2, #0
100413e8:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
100413ea:	187b      	adds	r3, r7, r1
100413ec:	187a      	adds	r2, r7, r1
100413ee:	7812      	ldrb	r2, [r2, #0]
100413f0:	2101      	movs	r1, #1
100413f2:	430a      	orrs	r2, r1
100413f4:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
100413f6:	2546      	movs	r5, #70	@ 0x46
100413f8:	197c      	adds	r4, r7, r5
100413fa:	2347      	movs	r3, #71	@ 0x47
100413fc:	18fb      	adds	r3, r7, r3
100413fe:	781b      	ldrb	r3, [r3, #0]
10041400:	2101      	movs	r1, #1
10041402:	0018      	movs	r0, r3
10041404:	f007 ff76 	bl	100492f4 <aci_gap_init>
10041408:	0003      	movs	r3, r0
1004140a:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004140c:	197b      	adds	r3, r7, r5
1004140e:	781b      	ldrb	r3, [r3, #0]
10041410:	2b00      	cmp	r3, #0
10041412:	d007      	beq.n	10041424 <BLE_Init+0x104>
  {
    APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%02X\n", ret);
10041414:	197b      	adds	r3, r7, r5
10041416:	781a      	ldrb	r2, [r3, #0]
10041418:	4b22      	ldr	r3, [pc, #136]	@ (100414a4 <BLE_Init+0x184>)
1004141a:	0011      	movs	r1, r2
1004141c:	0018      	movs	r0, r3
1004141e:	f00c f829 	bl	1004d474 <iprintf>
10041422:	e003      	b.n	1004142c <BLE_Init+0x10c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
10041424:	4b20      	ldr	r3, [pc, #128]	@ (100414a8 <BLE_Init+0x188>)
10041426:	0018      	movs	r0, r3
10041428:	f00c f88a 	bl	1004d540 <puts>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_STATIC_RANDOM_ADDR)
  ret = aci_hal_read_config_data(CONFIG_DATA_STORED_STATIC_RANDOM_ADDRESS,
1004142c:	2346      	movs	r3, #70	@ 0x46
1004142e:	18fc      	adds	r4, r7, r3
10041430:	253c      	movs	r5, #60	@ 0x3c
10041432:	197a      	adds	r2, r7, r5
10041434:	233b      	movs	r3, #59	@ 0x3b
10041436:	18fb      	adds	r3, r7, r3
10041438:	0019      	movs	r1, r3
1004143a:	2080      	movs	r0, #128	@ 0x80
1004143c:	f008 f83c 	bl	100494b8 <aci_hal_read_config_data>
10041440:	0003      	movs	r3, r0
10041442:	7023      	strb	r3, [r4, #0]
                                 &bd_address_len, bd_address);
  APP_DBG_MSG("  Static Random Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
10041444:	0028      	movs	r0, r5
10041446:	183b      	adds	r3, r7, r0
10041448:	795b      	ldrb	r3, [r3, #5]
1004144a:	001c      	movs	r4, r3
1004144c:	183b      	adds	r3, r7, r0
1004144e:	791b      	ldrb	r3, [r3, #4]
10041450:	001d      	movs	r5, r3
10041452:	183b      	adds	r3, r7, r0
10041454:	78db      	ldrb	r3, [r3, #3]
10041456:	001e      	movs	r6, r3
10041458:	183b      	adds	r3, r7, r0
1004145a:	789b      	ldrb	r3, [r3, #2]
1004145c:	001a      	movs	r2, r3
1004145e:	183b      	adds	r3, r7, r0
10041460:	785b      	ldrb	r3, [r3, #1]
10041462:	0019      	movs	r1, r3
10041464:	183b      	adds	r3, r7, r0
10041466:	781b      	ldrb	r3, [r3, #0]
10041468:	4810      	ldr	r0, [pc, #64]	@ (100414ac <BLE_Init+0x18c>)
1004146a:	9302      	str	r3, [sp, #8]
1004146c:	9101      	str	r1, [sp, #4]
1004146e:	9200      	str	r2, [sp, #0]
10041470:	0033      	movs	r3, r6
10041472:	002a      	movs	r2, r5
10041474:	0021      	movs	r1, r4
10041476:	f00b fffd 	bl	1004d474 <iprintf>
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  APP_DBG_MSG("BLE stack initialized\r\n");
1004147a:	4b0d      	ldr	r3, [pc, #52]	@ (100414b0 <BLE_Init+0x190>)
1004147c:	0018      	movs	r0, r3
1004147e:	f00c f85f 	bl	1004d540 <puts>
}
10041482:	46c0      	nop			@ (mov r8, r8)
10041484:	46bd      	mov	sp, r7
10041486:	b013      	add	sp, #76	@ 0x4c
10041488:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004148a:	46c0      	nop			@ (mov r8, r8)
1004148c:	1004e5a0 	.word	0x1004e5a0
10041490:	1004e3ec 	.word	0x1004e3ec
10041494:	1004e410 	.word	0x1004e410
10041498:	1004e450 	.word	0x1004e450
1004149c:	1004e480 	.word	0x1004e480
100414a0:	1004e4c0 	.word	0x1004e4c0
100414a4:	1004e4f0 	.word	0x1004e4f0
100414a8:	1004e524 	.word	0x1004e524
100414ac:	1004e544 	.word	0x1004e544
100414b0:	1004e588 	.word	0x1004e588

100414b4 <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
100414b4:	b580      	push	{r7, lr}
100414b6:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
100414b8:	2101      	movs	r1, #1
100414ba:	2001      	movs	r0, #1
100414bc:	f007 fea2 	bl	10049204 <UTIL_SEQ_SetTask>
}
100414c0:	46c0      	nop			@ (mov r8, r8)
100414c2:	46bd      	mov	sp, r7
100414c4:	bd80      	pop	{r7, pc}

100414c6 <BLEStack_Process>:
static void BLEStack_Process(void)
{
100414c6:	b580      	push	{r7, lr}
100414c8:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
100414ca:	2001      	movs	r0, #1
100414cc:	f001 fa1f 	bl	1004290e <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
100414d0:	f008 f880 	bl	100495d4 <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
100414d4:	2001      	movs	r0, #1
100414d6:	f001 fa24 	bl	10042922 <APP_DEBUG_SIGNAL_RESET>
}
100414da:	46c0      	nop			@ (mov r8, r8)
100414dc:	46bd      	mov	sp, r7
100414de:	bd80      	pop	{r7, pc}

100414e0 <VTimer_Process>:

void VTimer_Process(void)
{
100414e0:	b580      	push	{r7, lr}
100414e2:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
100414e4:	f005 f898 	bl	10046618 <HAL_RADIO_TIMER_Tick>
}
100414e8:	46c0      	nop			@ (mov r8, r8)
100414ea:	46bd      	mov	sp, r7
100414ec:	bd80      	pop	{r7, pc}

100414ee <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
100414ee:	b580      	push	{r7, lr}
100414f0:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
100414f2:	2100      	movs	r1, #0
100414f4:	2002      	movs	r0, #2
100414f6:	f007 fe85 	bl	10049204 <UTIL_SEQ_SetTask>
}
100414fa:	46c0      	nop			@ (mov r8, r8)
100414fc:	46bd      	mov	sp, r7
100414fe:	bd80      	pop	{r7, pc}

10041500 <NVM_Process>:
void NVM_Process(void)
{
10041500:	b580      	push	{r7, lr}
10041502:	af00      	add	r7, sp, #0
  NVMDB_Tick();
10041504:	f002 febc 	bl	10044280 <NVMDB_Tick>
}
10041508:	46c0      	nop			@ (mov r8, r8)
1004150a:	46bd      	mov	sp, r7
1004150c:	bd80      	pop	{r7, pc}

1004150e <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
1004150e:	b580      	push	{r7, lr}
10041510:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
10041512:	2101      	movs	r1, #1
10041514:	2004      	movs	r0, #4
10041516:	f007 fe75 	bl	10049204 <UTIL_SEQ_SetTask>
}
1004151a:	46c0      	nop			@ (mov r8, r8)
1004151c:	46bd      	mov	sp, r7
1004151e:	bd80      	pop	{r7, pc}

10041520 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10041520:	b580      	push	{r7, lr}
10041522:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
10041524:	f7ff ffe3 	bl	100414ee <VTimer_Process_Schedule>
}
10041528:	46c0      	nop			@ (mov r8, r8)
1004152a:	46bd      	mov	sp, r7
1004152c:	bd80      	pop	{r7, pc}

1004152e <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
1004152e:	b580      	push	{r7, lr}
10041530:	b082      	sub	sp, #8
10041532:	af00      	add	r7, sp, #0
10041534:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
10041536:	687b      	ldr	r3, [r7, #4]
10041538:	0018      	movs	r0, r3
1004153a:	f00a fabf 	bl	1004babc <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
1004153e:	f7ff ffd6 	bl	100414ee <VTimer_Process_Schedule>
  NVM_Process_Schedule();
10041542:	f7ff ffe4 	bl	1004150e <NVM_Process_Schedule>
}
10041546:	46c0      	nop			@ (mov r8, r8)
10041548:	46bd      	mov	sp, r7
1004154a:	b002      	add	sp, #8
1004154c:	bd80      	pop	{r7, pc}

1004154e <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
1004154e:	b580      	push	{r7, lr}
10041550:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
10041552:	f7ff ffaf 	bl	100414b4 <BLEStack_Process_Schedule>
}
10041556:	46c0      	nop			@ (mov r8, r8)
10041558:	46bd      	mov	sp, r7
1004155a:	bd80      	pop	{r7, pc}

1004155c <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
1004155c:	b580      	push	{r7, lr}
1004155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
10041560:	4b0d      	ldr	r3, [pc, #52]	@ (10041598 <APP_BLE_Init+0x3c>)
10041562:	001a      	movs	r2, r3
10041564:	2100      	movs	r1, #0
10041566:	2001      	movs	r0, #1
10041568:	f007 fe28 	bl	100491bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
1004156c:	4b0b      	ldr	r3, [pc, #44]	@ (1004159c <APP_BLE_Init+0x40>)
1004156e:	001a      	movs	r2, r3
10041570:	2100      	movs	r1, #0
10041572:	2002      	movs	r0, #2
10041574:	f007 fe22 	bl	100491bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10041578:	4b09      	ldr	r3, [pc, #36]	@ (100415a0 <APP_BLE_Init+0x44>)
1004157a:	001a      	movs	r2, r3
1004157c:	2100      	movs	r1, #0
1004157e:	2004      	movs	r0, #4
10041580:	f007 fe1c 	bl	100491bc <UTIL_SEQ_RegTask>
  ModulesInit();
10041584:	f7ff febe 	bl	10041304 <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10041588:	f7ff feca 	bl	10041320 <BLE_Init>
/* USER CODE BEGIN APP_BLE_Init_2 */


  /* Make the device discoverable  */

  PlantSensor_Process();
1004158c:	f000 f8ce 	bl	1004172c <PlantSensor_Process>
    IBeacon_Process();
  }
  */
  
/* USER CODE END APP_BLE_Init_2 */
  return;
10041590:	46c0      	nop			@ (mov r8, r8)
}
10041592:	46bd      	mov	sp, r7
10041594:	bd80      	pop	{r7, pc}
10041596:	46c0      	nop			@ (mov r8, r8)
10041598:	100414c7 	.word	0x100414c7
1004159c:	100414e1 	.word	0x100414e1
100415a0:	10041501 	.word	0x10041501

100415a4 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
100415a4:	b580      	push	{r7, lr}
100415a6:	b082      	sub	sp, #8
100415a8:	af00      	add	r7, sp, #0
100415aa:	6078      	str	r0, [r7, #4]

}
100415ac:	46c0      	nop			@ (mov r8, r8)
100415ae:	46bd      	mov	sp, r7
100415b0:	b002      	add	sp, #8
100415b2:	bd80      	pop	{r7, pc}

100415b4 <PlantSensor_Init>:
/* Private macros ------------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
tBleStatus PlantSensor_Init(void)
{
100415b4:	b5b0      	push	{r4, r5, r7, lr}
100415b6:	b090      	sub	sp, #64	@ 0x40
100415b8:	af0c      	add	r7, sp, #48	@ 0x30
  tBleStatus ret = BLE_STATUS_SUCCESS;
100415ba:	230d      	movs	r3, #13
100415bc:	18fb      	adds	r3, r7, r3
100415be:	2200      	movs	r2, #0
100415c0:	701a      	strb	r2, [r3, #0]
  uint16_t AdvertisingInterval = (ADVERTISING_INTERVAL_IN_MS * ADVERTISING_INTERVAL_INCREMENT / 10);
100415c2:	230a      	movs	r3, #10
100415c4:	18fb      	adds	r3, r7, r3
100415c6:	22c8      	movs	r2, #200	@ 0xc8
100415c8:	00d2      	lsls	r2, r2, #3
100415ca:	801a      	strh	r2, [r3, #0]
  Advertising_Set_Parameters_t Advertising_Set_Parameters;


  for (uint8_t i = 0 ; i< 10; i++)
100415cc:	230f      	movs	r3, #15
100415ce:	18fb      	adds	r3, r7, r3
100415d0:	2200      	movs	r2, #0
100415d2:	701a      	strb	r2, [r3, #0]
100415d4:	e00e      	b.n	100415f4 <PlantSensor_Init+0x40>
      sensor_service_data[i+NAMESPACE_OFFSET] = NamespaceID[i];
100415d6:	200f      	movs	r0, #15
100415d8:	183b      	adds	r3, r7, r0
100415da:	781a      	ldrb	r2, [r3, #0]
100415dc:	183b      	adds	r3, r7, r0
100415de:	781b      	ldrb	r3, [r3, #0]
100415e0:	330d      	adds	r3, #13
100415e2:	494c      	ldr	r1, [pc, #304]	@ (10041714 <PlantSensor_Init+0x160>)
100415e4:	5c89      	ldrb	r1, [r1, r2]
100415e6:	4a4c      	ldr	r2, [pc, #304]	@ (10041718 <PlantSensor_Init+0x164>)
100415e8:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0 ; i< 10; i++)
100415ea:	183b      	adds	r3, r7, r0
100415ec:	781a      	ldrb	r2, [r3, #0]
100415ee:	183b      	adds	r3, r7, r0
100415f0:	3201      	adds	r2, #1
100415f2:	701a      	strb	r2, [r3, #0]
100415f4:	230f      	movs	r3, #15
100415f6:	18fb      	adds	r3, r7, r3
100415f8:	781b      	ldrb	r3, [r3, #0]
100415fa:	2b09      	cmp	r3, #9
100415fc:	d9eb      	bls.n	100415d6 <PlantSensor_Init+0x22>
  for (uint8_t i = 0 ; i< 6; i++)
100415fe:	230e      	movs	r3, #14
10041600:	18fb      	adds	r3, r7, r3
10041602:	2200      	movs	r2, #0
10041604:	701a      	strb	r2, [r3, #0]
10041606:	e00e      	b.n	10041626 <PlantSensor_Init+0x72>
      sensor_service_data[i+BEACONID_OFFSET] = BeaconID[i];
10041608:	200e      	movs	r0, #14
1004160a:	183b      	adds	r3, r7, r0
1004160c:	781a      	ldrb	r2, [r3, #0]
1004160e:	183b      	adds	r3, r7, r0
10041610:	781b      	ldrb	r3, [r3, #0]
10041612:	3317      	adds	r3, #23
10041614:	4941      	ldr	r1, [pc, #260]	@ (1004171c <PlantSensor_Init+0x168>)
10041616:	5c89      	ldrb	r1, [r1, r2]
10041618:	4a3f      	ldr	r2, [pc, #252]	@ (10041718 <PlantSensor_Init+0x164>)
1004161a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0 ; i< 6; i++)
1004161c:	183b      	adds	r3, r7, r0
1004161e:	781a      	ldrb	r2, [r3, #0]
10041620:	183b      	adds	r3, r7, r0
10041622:	3201      	adds	r2, #1
10041624:	701a      	strb	r2, [r3, #0]
10041626:	230e      	movs	r3, #14
10041628:	18fb      	adds	r3, r7, r3
1004162a:	781b      	ldrb	r3, [r3, #0]
1004162c:	2b05      	cmp	r3, #5
1004162e:	d9eb      	bls.n	10041608 <PlantSensor_Init+0x54>

  /* Set advertising configuration for legacy advertising */  
  ret = aci_gap_set_advertising_configuration(ADV_UID_HANDLE, 
10041630:	210a      	movs	r1, #10
10041632:	187b      	adds	r3, r7, r1
10041634:	881a      	ldrh	r2, [r3, #0]
10041636:	187b      	adds	r3, r7, r1
10041638:	881b      	ldrh	r3, [r3, #0]
1004163a:	250d      	movs	r5, #13
1004163c:	197c      	adds	r4, r7, r5
1004163e:	2100      	movs	r1, #0
10041640:	910a      	str	r1, [sp, #40]	@ 0x28
10041642:	2100      	movs	r1, #0
10041644:	9109      	str	r1, [sp, #36]	@ 0x24
10041646:	2101      	movs	r1, #1
10041648:	9108      	str	r1, [sp, #32]
1004164a:	2100      	movs	r1, #0
1004164c:	9107      	str	r1, [sp, #28]
1004164e:	2101      	movs	r1, #1
10041650:	9106      	str	r1, [sp, #24]
10041652:	2100      	movs	r1, #0
10041654:	9105      	str	r1, [sp, #20]
10041656:	2100      	movs	r1, #0
10041658:	9104      	str	r1, [sp, #16]
1004165a:	2100      	movs	r1, #0
1004165c:	9103      	str	r1, [sp, #12]
1004165e:	2101      	movs	r1, #1
10041660:	9102      	str	r1, [sp, #8]
10041662:	2107      	movs	r1, #7
10041664:	9101      	str	r1, [sp, #4]
10041666:	9300      	str	r3, [sp, #0]
10041668:	0013      	movs	r3, r2
1004166a:	2210      	movs	r2, #16
1004166c:	2102      	movs	r1, #2
1004166e:	2000      	movs	r0, #0
10041670:	f007 fe64 	bl	1004933c <aci_gap_set_advertising_configuration>
10041674:	0003      	movs	r3, r0
10041676:	7023      	strb	r3, [r4, #0]
                                              HCI_PHY_LE_1M, /* Primary advertising PHY */
                                              0, /* 0 skips */
                                              HCI_PHY_LE_1M, /* Secondary advertising PHY. Not used with legacy advertising. */
                                              0, /* SID */
                                              0 /* No scan request notifications */);
  if (ret != BLE_STATUS_SUCCESS)
10041678:	197b      	adds	r3, r7, r5
1004167a:	781b      	ldrb	r3, [r3, #0]
1004167c:	2b00      	cmp	r3, #0
1004167e:	d009      	beq.n	10041694 <PlantSensor_Init+0xe0>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_configuration() 0x%02x\r\n", ret);
10041680:	197b      	adds	r3, r7, r5
10041682:	781a      	ldrb	r2, [r3, #0]
10041684:	4b26      	ldr	r3, [pc, #152]	@ (10041720 <PlantSensor_Init+0x16c>)
10041686:	0011      	movs	r1, r2
10041688:	0018      	movs	r0, r3
1004168a:	f00b fef3 	bl	1004d474 <iprintf>
    return ret;
1004168e:	197b      	adds	r3, r7, r5
10041690:	781b      	ldrb	r3, [r3, #0]
10041692:	e03b      	b.n	1004170c <PlantSensor_Init+0x158>
  }

  ret = aci_gap_set_advertising_data(ADV_UID_HANDLE, ADV_COMPLETE_DATA, sizeof(sensor_service_data), sensor_service_data);
10041694:	250d      	movs	r5, #13
10041696:	197c      	adds	r4, r7, r5
10041698:	4b1f      	ldr	r3, [pc, #124]	@ (10041718 <PlantSensor_Init+0x164>)
1004169a:	221f      	movs	r2, #31
1004169c:	2103      	movs	r1, #3
1004169e:	2000      	movs	r0, #0
100416a0:	f007 fe81 	bl	100493a6 <aci_gap_set_advertising_data>
100416a4:	0003      	movs	r3, r0
100416a6:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100416a8:	197b      	adds	r3, r7, r5
100416aa:	781b      	ldrb	r3, [r3, #0]
100416ac:	2b00      	cmp	r3, #0
100416ae:	d009      	beq.n	100416c4 <PlantSensor_Init+0x110>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_data() 0x%02x\r\n", ret);
100416b0:	197b      	adds	r3, r7, r5
100416b2:	781a      	ldrb	r2, [r3, #0]
100416b4:	4b1b      	ldr	r3, [pc, #108]	@ (10041724 <PlantSensor_Init+0x170>)
100416b6:	0011      	movs	r1, r2
100416b8:	0018      	movs	r0, r3
100416ba:	f00b fedb 	bl	1004d474 <iprintf>
    return ret; 
100416be:	197b      	adds	r3, r7, r5
100416c0:	781b      	ldrb	r3, [r3, #0]
100416c2:	e023      	b.n	1004170c <PlantSensor_Init+0x158>
  }

  Advertising_Set_Parameters.Advertising_Handle = ADV_UID_HANDLE;
100416c4:	1d3b      	adds	r3, r7, #4
100416c6:	2200      	movs	r2, #0
100416c8:	701a      	strb	r2, [r3, #0]
  Advertising_Set_Parameters.Duration = 0;
100416ca:	1d3b      	adds	r3, r7, #4
100416cc:	2200      	movs	r2, #0
100416ce:	805a      	strh	r2, [r3, #2]
  Advertising_Set_Parameters.Max_Extended_Advertising_Events = 0;
100416d0:	1d3b      	adds	r3, r7, #4
100416d2:	2200      	movs	r2, #0
100416d4:	711a      	strb	r2, [r3, #4]
  
  /* Enable advertising */
  ret = aci_gap_set_advertising_enable(1, 1, &Advertising_Set_Parameters);
100416d6:	250d      	movs	r5, #13
100416d8:	197c      	adds	r4, r7, r5
100416da:	1d3b      	adds	r3, r7, #4
100416dc:	001a      	movs	r2, r3
100416de:	2101      	movs	r1, #1
100416e0:	2001      	movs	r0, #1
100416e2:	f007 fe64 	bl	100493ae <aci_gap_set_advertising_enable>
100416e6:	0003      	movs	r3, r0
100416e8:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100416ea:	197b      	adds	r3, r7, r5
100416ec:	781b      	ldrb	r3, [r3, #0]
100416ee:	2b00      	cmp	r3, #0
100416f0:	d009      	beq.n	10041706 <PlantSensor_Init+0x152>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_enable() 0x%02x\r\n", ret);
100416f2:	197b      	adds	r3, r7, r5
100416f4:	781a      	ldrb	r2, [r3, #0]
100416f6:	4b0c      	ldr	r3, [pc, #48]	@ (10041728 <PlantSensor_Init+0x174>)
100416f8:	0011      	movs	r1, r2
100416fa:	0018      	movs	r0, r3
100416fc:	f00b feba 	bl	1004d474 <iprintf>
    return ret; 
10041700:	197b      	adds	r3, r7, r5
10041702:	781b      	ldrb	r3, [r3, #0]
10041704:	e002      	b.n	1004170c <PlantSensor_Init+0x158>
  }

  return ret;
10041706:	230d      	movs	r3, #13
10041708:	18fb      	adds	r3, r7, r3
1004170a:	781b      	ldrb	r3, [r3, #0]
}
1004170c:	0018      	movs	r0, r3
1004170e:	46bd      	mov	sp, r7
10041710:	b004      	add	sp, #16
10041712:	bdb0      	pop	{r4, r5, r7, pc}
10041714:	200007ec 	.word	0x200007ec
10041718:	20000800 	.word	0x20000800
1004171c:	200007f8 	.word	0x200007f8
10041720:	1004e5d4 	.word	0x1004e5d4
10041724:	1004e610 	.word	0x1004e610
10041728:	1004e644 	.word	0x1004e644

1004172c <PlantSensor_Process>:
  
void PlantSensor_Process(void)
{
1004172c:	b580      	push	{r7, lr}
1004172e:	af00      	add	r7, sp, #0
	PlantSensor_Init();
10041730:	f7ff ff40 	bl	100415b4 <PlantSensor_Init>
}
10041734:	46c0      	nop			@ (mov r8, r8)
10041736:	46bd      	mov	sp, r7
10041738:	bd80      	pop	{r7, pc}
	...

1004173c <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
1004173c:	b580      	push	{r7, lr}
1004173e:	af00      	add	r7, sp, #0
  NVMDB_Init();
10041740:	f002 fb0a 	bl	10043d58 <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
10041744:	4b07      	ldr	r3, [pc, #28]	@ (10041764 <BLENVM_Init+0x28>)
10041746:	0019      	movs	r1, r3
10041748:	2000      	movs	r0, #0
1004174a:	f002 fc63 	bl	10044014 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
1004174e:	4b06      	ldr	r3, [pc, #24]	@ (10041768 <BLENVM_Init+0x2c>)
10041750:	0019      	movs	r1, r3
10041752:	2001      	movs	r0, #1
10041754:	f002 fc5e 	bl	10044014 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
10041758:	4b04      	ldr	r3, [pc, #16]	@ (1004176c <BLENVM_Init+0x30>)
1004175a:	4a02      	ldr	r2, [pc, #8]	@ (10041764 <BLENVM_Init+0x28>)
1004175c:	601a      	str	r2, [r3, #0]
}
1004175e:	46c0      	nop			@ (mov r8, r8)
10041760:	46bd      	mov	sp, r7
10041762:	bd80      	pop	{r7, pc}
10041764:	2000033c 	.word	0x2000033c
10041768:	2000034c 	.word	0x2000034c
1004176c:	2000035c 	.word	0x2000035c

10041770 <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
10041770:	b5f0      	push	{r4, r5, r6, r7, lr}
10041772:	b089      	sub	sp, #36	@ 0x24
10041774:	af02      	add	r7, sp, #8
10041776:	60b9      	str	r1, [r7, #8]
10041778:	0011      	movs	r1, r2
1004177a:	607b      	str	r3, [r7, #4]
1004177c:	240f      	movs	r4, #15
1004177e:	193b      	adds	r3, r7, r4
10041780:	1c02      	adds	r2, r0, #0
10041782:	701a      	strb	r2, [r3, #0]
10041784:	230c      	movs	r3, #12
10041786:	18fb      	adds	r3, r7, r3
10041788:	1c0a      	adds	r2, r1, #0
1004178a:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
1004178c:	193b      	adds	r3, r7, r4
1004178e:	781b      	ldrb	r3, [r3, #0]
10041790:	2b02      	cmp	r3, #2
10041792:	d103      	bne.n	1004179c <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
10041794:	4b1a      	ldr	r3, [pc, #104]	@ (10041800 <BLEPLAT_NvmAdd+0x90>)
10041796:	4a1b      	ldr	r2, [pc, #108]	@ (10041804 <BLEPLAT_NvmAdd+0x94>)
10041798:	601a      	str	r2, [r3, #0]
1004179a:	e002      	b.n	100417a2 <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
1004179c:	4b18      	ldr	r3, [pc, #96]	@ (10041800 <BLEPLAT_NvmAdd+0x90>)
1004179e:	4a1a      	ldr	r2, [pc, #104]	@ (10041808 <BLEPLAT_NvmAdd+0x98>)
100417a0:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
100417a2:	4b17      	ldr	r3, [pc, #92]	@ (10041800 <BLEPLAT_NvmAdd+0x90>)
100417a4:	6818      	ldr	r0, [r3, #0]
100417a6:	2617      	movs	r6, #23
100417a8:	19bc      	adds	r4, r7, r6
100417aa:	68bd      	ldr	r5, [r7, #8]
100417ac:	230c      	movs	r3, #12
100417ae:	18fb      	adds	r3, r7, r3
100417b0:	881b      	ldrh	r3, [r3, #0]
100417b2:	469c      	mov	ip, r3
100417b4:	230f      	movs	r3, #15
100417b6:	18fb      	adds	r3, r7, r3
100417b8:	7819      	ldrb	r1, [r3, #0]
100417ba:	687b      	ldr	r3, [r7, #4]
100417bc:	9301      	str	r3, [sp, #4]
100417be:	2328      	movs	r3, #40	@ 0x28
100417c0:	2208      	movs	r2, #8
100417c2:	189b      	adds	r3, r3, r2
100417c4:	19db      	adds	r3, r3, r7
100417c6:	881b      	ldrh	r3, [r3, #0]
100417c8:	9300      	str	r3, [sp, #0]
100417ca:	002b      	movs	r3, r5
100417cc:	4662      	mov	r2, ip
100417ce:	f002 fcc3 	bl	10044158 <NVMDB_AppendRecord>
100417d2:	0003      	movs	r3, r0
100417d4:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
100417d6:	19bb      	adds	r3, r7, r6
100417d8:	781b      	ldrb	r3, [r3, #0]
100417da:	2b00      	cmp	r3, #0
100417dc:	d101      	bne.n	100417e2 <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
100417de:	2300      	movs	r3, #0
100417e0:	e009      	b.n	100417f6 <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
100417e2:	2317      	movs	r3, #23
100417e4:	18fb      	adds	r3, r7, r3
100417e6:	781b      	ldrb	r3, [r3, #0]
100417e8:	2b02      	cmp	r3, #2
100417ea:	d102      	bne.n	100417f2 <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
100417ec:	2301      	movs	r3, #1
100417ee:	425b      	negs	r3, r3
100417f0:	e001      	b.n	100417f6 <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
100417f2:	2302      	movs	r3, #2
100417f4:	425b      	negs	r3, r3
}
100417f6:	0018      	movs	r0, r3
100417f8:	46bd      	mov	sp, r7
100417fa:	b007      	add	sp, #28
100417fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100417fe:	46c0      	nop			@ (mov r8, r8)
10041800:	2000035c 	.word	0x2000035c
10041804:	2000034c 	.word	0x2000034c
10041808:	2000033c 	.word	0x2000033c

1004180c <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
1004180c:	b5b0      	push	{r4, r5, r7, lr}
1004180e:	b086      	sub	sp, #24
10041810:	af02      	add	r7, sp, #8
10041812:	0004      	movs	r4, r0
10041814:	0008      	movs	r0, r1
10041816:	0011      	movs	r1, r2
10041818:	603b      	str	r3, [r7, #0]
1004181a:	1dfb      	adds	r3, r7, #7
1004181c:	1c22      	adds	r2, r4, #0
1004181e:	701a      	strb	r2, [r3, #0]
10041820:	1dbb      	adds	r3, r7, #6
10041822:	1c02      	adds	r2, r0, #0
10041824:	701a      	strb	r2, [r3, #0]
10041826:	1d3b      	adds	r3, r7, #4
10041828:	1c0a      	adds	r2, r1, #0
1004182a:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
1004182c:	1dbb      	adds	r3, r7, #6
1004182e:	781b      	ldrb	r3, [r3, #0]
10041830:	2b02      	cmp	r3, #2
10041832:	d107      	bne.n	10041844 <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
10041834:	4b2e      	ldr	r3, [pc, #184]	@ (100418f0 <BLEPLAT_NvmGet+0xe4>)
10041836:	4a2f      	ldr	r2, [pc, #188]	@ (100418f4 <BLEPLAT_NvmGet+0xe8>)
10041838:	601a      	str	r2, [r3, #0]
    db_id = 1;
1004183a:	230e      	movs	r3, #14
1004183c:	18fb      	adds	r3, r7, r3
1004183e:	2201      	movs	r2, #1
10041840:	701a      	strb	r2, [r3, #0]
10041842:	e006      	b.n	10041852 <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10041844:	4b2a      	ldr	r3, [pc, #168]	@ (100418f0 <BLEPLAT_NvmGet+0xe4>)
10041846:	4a2c      	ldr	r2, [pc, #176]	@ (100418f8 <BLEPLAT_NvmGet+0xec>)
10041848:	601a      	str	r2, [r3, #0]
    db_id = 0;
1004184a:	230e      	movs	r3, #14
1004184c:	18fb      	adds	r3, r7, r3
1004184e:	2200      	movs	r2, #0
10041850:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
10041852:	1dfb      	adds	r3, r7, #7
10041854:	781b      	ldrb	r3, [r3, #0]
10041856:	2b02      	cmp	r3, #2
10041858:	d112      	bne.n	10041880 <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
1004185a:	4b25      	ldr	r3, [pc, #148]	@ (100418f0 <BLEPLAT_NvmGet+0xe4>)
1004185c:	6818      	ldr	r0, [r3, #0]
1004185e:	230f      	movs	r3, #15
10041860:	18fc      	adds	r4, r7, r3
10041862:	2320      	movs	r3, #32
10041864:	18fb      	adds	r3, r7, r3
10041866:	881d      	ldrh	r5, [r3, #0]
10041868:	683a      	ldr	r2, [r7, #0]
1004186a:	1d3b      	adds	r3, r7, #4
1004186c:	8819      	ldrh	r1, [r3, #0]
1004186e:	230c      	movs	r3, #12
10041870:	18fb      	adds	r3, r7, r3
10041872:	9300      	str	r3, [sp, #0]
10041874:	002b      	movs	r3, r5
10041876:	f002 fc3b 	bl	100440f0 <NVMDB_ReadCurrentRecord>
1004187a:	0003      	movs	r3, r0
1004187c:	7023      	strb	r3, [r4, #0]
1004187e:	e021      	b.n	100418c4 <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10041880:	1dfb      	adds	r3, r7, #7
10041882:	781b      	ldrb	r3, [r3, #0]
10041884:	2b00      	cmp	r3, #0
10041886:	d108      	bne.n	1004189a <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10041888:	4b19      	ldr	r3, [pc, #100]	@ (100418f0 <BLEPLAT_NvmGet+0xe4>)
1004188a:	681a      	ldr	r2, [r3, #0]
1004188c:	230e      	movs	r3, #14
1004188e:	18fb      	adds	r3, r7, r3
10041890:	781b      	ldrb	r3, [r3, #0]
10041892:	0011      	movs	r1, r2
10041894:	0018      	movs	r0, r3
10041896:	f002 fbbd 	bl	10044014 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
1004189a:	4b15      	ldr	r3, [pc, #84]	@ (100418f0 <BLEPLAT_NvmGet+0xe4>)
1004189c:	6818      	ldr	r0, [r3, #0]
1004189e:	230f      	movs	r3, #15
100418a0:	18fc      	adds	r4, r7, r3
100418a2:	683d      	ldr	r5, [r7, #0]
100418a4:	1d3b      	adds	r3, r7, #4
100418a6:	881a      	ldrh	r2, [r3, #0]
100418a8:	1dbb      	adds	r3, r7, #6
100418aa:	7819      	ldrb	r1, [r3, #0]
100418ac:	230c      	movs	r3, #12
100418ae:	18fb      	adds	r3, r7, r3
100418b0:	9301      	str	r3, [sp, #4]
100418b2:	2320      	movs	r3, #32
100418b4:	18fb      	adds	r3, r7, r3
100418b6:	881b      	ldrh	r3, [r3, #0]
100418b8:	9300      	str	r3, [sp, #0]
100418ba:	002b      	movs	r3, r5
100418bc:	f002 fbde 	bl	1004407c <NVMDB_ReadNextRecord>
100418c0:	0003      	movs	r3, r0
100418c2:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
100418c4:	230f      	movs	r3, #15
100418c6:	18fb      	adds	r3, r7, r3
100418c8:	781b      	ldrb	r3, [r3, #0]
100418ca:	2b00      	cmp	r3, #0
100418cc:	d101      	bne.n	100418d2 <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
100418ce:	2300      	movs	r3, #0
100418d0:	e009      	b.n	100418e6 <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
100418d2:	230f      	movs	r3, #15
100418d4:	18fb      	adds	r3, r7, r3
100418d6:	781b      	ldrb	r3, [r3, #0]
100418d8:	2b04      	cmp	r3, #4
100418da:	d102      	bne.n	100418e2 <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
100418dc:	2303      	movs	r3, #3
100418de:	425b      	negs	r3, r3
100418e0:	e001      	b.n	100418e6 <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
100418e2:	2302      	movs	r3, #2
100418e4:	425b      	negs	r3, r3
}
100418e6:	0018      	movs	r0, r3
100418e8:	46bd      	mov	sp, r7
100418ea:	b004      	add	sp, #16
100418ec:	bdb0      	pop	{r4, r5, r7, pc}
100418ee:	46c0      	nop			@ (mov r8, r8)
100418f0:	2000035c 	.word	0x2000035c
100418f4:	2000034c 	.word	0x2000034c
100418f8:	2000033c 	.word	0x2000033c

100418fc <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
100418fc:	b580      	push	{r7, lr}
100418fe:	b084      	sub	sp, #16
10041900:	af00      	add	r7, sp, #0
10041902:	60f8      	str	r0, [r7, #12]
10041904:	60b9      	str	r1, [r7, #8]
10041906:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10041908:	687a      	ldr	r2, [r7, #4]
1004190a:	68b9      	ldr	r1, [r7, #8]
1004190c:	68fb      	ldr	r3, [r7, #12]
1004190e:	0018      	movs	r0, r3
10041910:	f7fe fbf8 	bl	10040104 <Osal_MemCpy>
}
10041914:	46c0      	nop			@ (mov r8, r8)
10041916:	46bd      	mov	sp, r7
10041918:	b004      	add	sp, #16
1004191a:	bd80      	pop	{r7, pc}

1004191c <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
1004191c:	b580      	push	{r7, lr}
1004191e:	b084      	sub	sp, #16
10041920:	af00      	add	r7, sp, #0
10041922:	60f8      	str	r0, [r7, #12]
10041924:	60b9      	str	r1, [r7, #8]
10041926:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10041928:	687a      	ldr	r2, [r7, #4]
1004192a:	68b9      	ldr	r1, [r7, #8]
1004192c:	68fb      	ldr	r3, [r7, #12]
1004192e:	0018      	movs	r0, r3
10041930:	f00b ffc0 	bl	1004d8b4 <memset>
}
10041934:	46c0      	nop			@ (mov r8, r8)
10041936:	46bd      	mov	sp, r7
10041938:	b004      	add	sp, #16
1004193a:	bd80      	pop	{r7, pc}

1004193c <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
1004193c:	b590      	push	{r4, r7, lr}
1004193e:	b089      	sub	sp, #36	@ 0x24
10041940:	af00      	add	r7, sp, #0
10041942:	60f8      	str	r0, [r7, #12]
10041944:	60b9      	str	r1, [r7, #8]
10041946:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
10041948:	2410      	movs	r4, #16
1004194a:	193b      	adds	r3, r7, r4
1004194c:	0018      	movs	r0, r3
1004194e:	f002 fe4b 	bl	100445e8 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
10041952:	0021      	movs	r1, r4
10041954:	187b      	adds	r3, r7, r1
10041956:	781a      	ldrb	r2, [r3, #0]
10041958:	68fb      	ldr	r3, [r7, #12]
1004195a:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
1004195c:	187b      	adds	r3, r7, r1
1004195e:	785a      	ldrb	r2, [r3, #1]
10041960:	68bb      	ldr	r3, [r7, #8]
10041962:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
10041964:	187b      	adds	r3, r7, r1
10041966:	789a      	ldrb	r2, [r3, #2]
10041968:	687b      	ldr	r3, [r7, #4]
1004196a:	701a      	strb	r2, [r3, #0]
}
1004196c:	46c0      	nop			@ (mov r8, r8)
1004196e:	46bd      	mov	sp, r7
10041970:	b009      	add	sp, #36	@ 0x24
10041972:	bd90      	pop	{r4, r7, pc}

10041974 <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
10041974:	b580      	push	{r7, lr}
10041976:	b084      	sub	sp, #16
10041978:	af00      	add	r7, sp, #0
1004197a:	60f8      	str	r0, [r7, #12]
1004197c:	60b9      	str	r1, [r7, #8]
1004197e:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
10041980:	687a      	ldr	r2, [r7, #4]
10041982:	68b9      	ldr	r1, [r7, #8]
10041984:	68fb      	ldr	r3, [r7, #12]
10041986:	0018      	movs	r0, r3
10041988:	f001 f83a 	bl	10042a00 <HW_AES_Encrypt>
}
1004198c:	46c0      	nop			@ (mov r8, r8)
1004198e:	46bd      	mov	sp, r7
10041990:	b004      	add	sp, #16
10041992:	bd80      	pop	{r7, pc}

10041994 <BLEPLAT_RngGetRandom16>:
{
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
}

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
10041994:	b580      	push	{r7, lr}
10041996:	b082      	sub	sp, #8
10041998:	af00      	add	r7, sp, #0
1004199a:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
1004199c:	687b      	ldr	r3, [r7, #4]
1004199e:	0018      	movs	r0, r3
100419a0:	f001 fade 	bl	10042f60 <HW_RNG_GetRandom16>
}
100419a4:	46c0      	nop			@ (mov r8, r8)
100419a6:	46bd      	mov	sp, r7
100419a8:	b002      	add	sp, #8
100419aa:	bd80      	pop	{r7, pc}

100419ac <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
100419ac:	b580      	push	{r7, lr}
100419ae:	b082      	sub	sp, #8
100419b0:	af00      	add	r7, sp, #0
100419b2:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
100419b4:	687b      	ldr	r3, [r7, #4]
100419b6:	0018      	movs	r0, r3
100419b8:	f001 faec 	bl	10042f94 <HW_RNG_GetRandom32>
}
100419bc:	46c0      	nop			@ (mov r8, r8)
100419be:	46bd      	mov	sp, r7
100419c0:	b002      	add	sp, #8
100419c2:	bd80      	pop	{r7, pc}

100419c4 <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
100419c4:	b580      	push	{r7, lr}
100419c6:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
100419c8:	f002 fd76 	bl	100444b8 <RADIO_GetMaxPALevel>
100419cc:	0003      	movs	r3, r0
}
100419ce:	0018      	movs	r0, r3
100419d0:	46bd      	mov	sp, r7
100419d2:	bd80      	pop	{r7, pc}

100419d4 <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
100419d4:	b580      	push	{r7, lr}
100419d6:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
100419d8:	f002 fd74 	bl	100444c4 <RADIO_GetDefaultPALevel>
100419dc:	0003      	movs	r3, r0
}
100419de:	0018      	movs	r0, r3
100419e0:	46bd      	mov	sp, r7
100419e2:	bd80      	pop	{r7, pc}

100419e4 <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
100419e4:	b580      	push	{r7, lr}
100419e6:	b082      	sub	sp, #8
100419e8:	af00      	add	r7, sp, #0
100419ea:	0002      	movs	r2, r0
100419ec:	1dfb      	adds	r3, r7, #7
100419ee:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
100419f0:	1dfb      	adds	r3, r7, #7
100419f2:	781b      	ldrb	r3, [r3, #0]
100419f4:	0018      	movs	r0, r3
100419f6:	f002 fd6b 	bl	100444d0 <RADIO_SetHighPower>
}
100419fa:	46c0      	nop			@ (mov r8, r8)
100419fc:	46bd      	mov	sp, r7
100419fe:	b002      	add	sp, #8
10041a00:	bd80      	pop	{r7, pc}

10041a02 <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
10041a02:	b580      	push	{r7, lr}
10041a04:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
10041a06:	f005 f881 	bl	10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>
10041a0a:	0002      	movs	r2, r0
10041a0c:	000b      	movs	r3, r1

}
10041a0e:	0010      	movs	r0, r2
10041a10:	0019      	movs	r1, r3
10041a12:	46bd      	mov	sp, r7
10041a14:	bd80      	pop	{r7, pc}

10041a16 <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
10041a16:	b580      	push	{r7, lr}
10041a18:	b084      	sub	sp, #16
10041a1a:	af00      	add	r7, sp, #0
10041a1c:	60f8      	str	r0, [r7, #12]
10041a1e:	603a      	str	r2, [r7, #0]
10041a20:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
10041a22:	683a      	ldr	r2, [r7, #0]
10041a24:	687b      	ldr	r3, [r7, #4]
10041a26:	68f9      	ldr	r1, [r7, #12]
10041a28:	0008      	movs	r0, r1
10041a2a:	f005 f881 	bl	10046b30 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
10041a2e:	0003      	movs	r3, r0
}
10041a30:	0018      	movs	r0, r3
10041a32:	46bd      	mov	sp, r7
10041a34:	b004      	add	sp, #16
10041a36:	bd80      	pop	{r7, pc}

10041a38 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10041a38:	b580      	push	{r7, lr}
10041a3a:	b082      	sub	sp, #8
10041a3c:	af00      	add	r7, sp, #0
10041a3e:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
10041a40:	687b      	ldr	r3, [r7, #4]
10041a42:	0018      	movs	r0, r3
10041a44:	f005 f88e 	bl	10046b64 <HAL_RADIO_TIMER_StopVirtualTimer>
}
10041a48:	46c0      	nop			@ (mov r8, r8)
10041a4a:	46bd      	mov	sp, r7
10041a4c:	b002      	add	sp, #8
10041a4e:	bd80      	pop	{r7, pc}

10041a50 <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
10041a50:	b580      	push	{r7, lr}
10041a52:	b082      	sub	sp, #8
10041a54:	af00      	add	r7, sp, #0
10041a56:	6078      	str	r0, [r7, #4]
10041a58:	0008      	movs	r0, r1
10041a5a:	0011      	movs	r1, r2
10041a5c:	1cfb      	adds	r3, r7, #3
10041a5e:	1c02      	adds	r2, r0, #0
10041a60:	701a      	strb	r2, [r3, #0]
10041a62:	1cbb      	adds	r3, r7, #2
10041a64:	1c0a      	adds	r2, r1, #0
10041a66:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10041a68:	1cbb      	adds	r3, r7, #2
10041a6a:	781a      	ldrb	r2, [r3, #0]
10041a6c:	1cfb      	adds	r3, r7, #3
10041a6e:	7819      	ldrb	r1, [r3, #0]
10041a70:	687b      	ldr	r3, [r7, #4]
10041a72:	0018      	movs	r0, r3
10041a74:	f004 ff34 	bl	100468e0 <HAL_RADIO_TIMER_SetRadioTimerValue>
10041a78:	0003      	movs	r3, r0
10041a7a:	b2db      	uxtb	r3, r3
}
10041a7c:	0018      	movs	r0, r3
10041a7e:	46bd      	mov	sp, r7
10041a80:	b002      	add	sp, #8
10041a82:	bd80      	pop	{r7, pc}

10041a84 <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
10041a84:	b580      	push	{r7, lr}
10041a86:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
10041a88:	f004 ff7a 	bl	10046980 <HAL_RADIO_TIMER_ClearRadioTimerValue>
10041a8c:	0003      	movs	r3, r0
10041a8e:	b2db      	uxtb	r3, r3
}
10041a90:	0018      	movs	r0, r3
10041a92:	46bd      	mov	sp, r7
10041a94:	bd80      	pop	{r7, pc}

10041a96 <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
10041a96:	b580      	push	{r7, lr}
10041a98:	b082      	sub	sp, #8
10041a9a:	af00      	add	r7, sp, #0
10041a9c:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
10041a9e:	687b      	ldr	r3, [r7, #4]
10041aa0:	0018      	movs	r0, r3
10041aa2:	f004 ff09 	bl	100468b8 <HAL_RADIO_TIMER_GetAnchorPoint>
10041aa6:	0002      	movs	r2, r0
10041aa8:	000b      	movs	r3, r1
}
10041aaa:	0010      	movs	r0, r2
10041aac:	0019      	movs	r1, r3
10041aae:	46bd      	mov	sp, r7
10041ab0:	b002      	add	sp, #8
10041ab2:	bd80      	pop	{r7, pc}

10041ab4 <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
10041ab4:	b580      	push	{r7, lr}
10041ab6:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
10041ab8:	f004 ffd6 	bl	10046a68 <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
10041abc:	46c0      	nop			@ (mov r8, r8)
10041abe:	46bd      	mov	sp, r7
10041ac0:	bd80      	pop	{r7, pc}
	...

10041ac4 <LL_RADIO_SetCurrentConnectionMachineNumber>:
  * @rmtoll WORD1          CURSTMACHNUM       LL_RADIO_SetCurrentConnectionMachineNumber
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCurrentConnectionMachineNumber(uint32_t value)
{
10041ac4:	b580      	push	{r7, lr}
10041ac6:	b082      	sub	sp, #8
10041ac8:	af00      	add	r7, sp, #0
10041aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
10041acc:	4b07      	ldr	r3, [pc, #28]	@ (10041aec <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10041ace:	685b      	ldr	r3, [r3, #4]
10041ad0:	227f      	movs	r2, #127	@ 0x7f
10041ad2:	4393      	bics	r3, r2
10041ad4:	0019      	movs	r1, r3
10041ad6:	687b      	ldr	r3, [r7, #4]
10041ad8:	227f      	movs	r2, #127	@ 0x7f
10041ada:	401a      	ands	r2, r3
10041adc:	4b03      	ldr	r3, [pc, #12]	@ (10041aec <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10041ade:	430a      	orrs	r2, r1
10041ae0:	605a      	str	r2, [r3, #4]
}
10041ae2:	46c0      	nop			@ (mov r8, r8)
10041ae4:	46bd      	mov	sp, r7
10041ae6:	b002      	add	sp, #8
10041ae8:	bd80      	pop	{r7, pc}
10041aea:	46c0      	nop			@ (mov r8, r8)
10041aec:	200000c0 	.word	0x200000c0

10041af0 <LL_RADIO_GlobalEnableBlue>:
  * @brief  RADIO Enable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalEnableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalEnableBlue(void)
{
10041af0:	b580      	push	{r7, lr}
10041af2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10041af4:	4b04      	ldr	r3, [pc, #16]	@ (10041b08 <LL_RADIO_GlobalEnableBlue+0x18>)
10041af6:	685a      	ldr	r2, [r3, #4]
10041af8:	4b03      	ldr	r3, [pc, #12]	@ (10041b08 <LL_RADIO_GlobalEnableBlue+0x18>)
10041afa:	2180      	movs	r1, #128	@ 0x80
10041afc:	430a      	orrs	r2, r1
10041afe:	605a      	str	r2, [r3, #4]
}
10041b00:	46c0      	nop			@ (mov r8, r8)
10041b02:	46bd      	mov	sp, r7
10041b04:	bd80      	pop	{r7, pc}
10041b06:	46c0      	nop			@ (mov r8, r8)
10041b08:	200000c0 	.word	0x200000c0

10041b0c <LL_RADIO_GlobalDisableBlue>:
  * @brief  RADIO Disable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalDisableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalDisableBlue(void)
{
10041b0c:	b580      	push	{r7, lr}
10041b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10041b10:	4b04      	ldr	r3, [pc, #16]	@ (10041b24 <LL_RADIO_GlobalDisableBlue+0x18>)
10041b12:	685a      	ldr	r2, [r3, #4]
10041b14:	4b03      	ldr	r3, [pc, #12]	@ (10041b24 <LL_RADIO_GlobalDisableBlue+0x18>)
10041b16:	2180      	movs	r1, #128	@ 0x80
10041b18:	438a      	bics	r2, r1
10041b1a:	605a      	str	r2, [r3, #4]
}
10041b1c:	46c0      	nop			@ (mov r8, r8)
10041b1e:	46bd      	mov	sp, r7
10041b20:	bd80      	pop	{r7, pc}
10041b22:	46c0      	nop			@ (mov r8, r8)
10041b24:	200000c0 	.word	0x200000c0

10041b28 <LL_RADIO_SetReceiveWindowTimeout>:
  * @rmtoll WORD4          RCVTIMEOUT       LL_RADIO_SetReceiveWindowTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceiveWindowTimeout(uint32_t value)
{
10041b28:	b580      	push	{r7, lr}
10041b2a:	b082      	sub	sp, #8
10041b2c:	af00      	add	r7, sp, #0
10041b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
10041b30:	4b07      	ldr	r3, [pc, #28]	@ (10041b50 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10041b32:	691b      	ldr	r3, [r3, #16]
10041b34:	4a07      	ldr	r2, [pc, #28]	@ (10041b54 <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
10041b36:	4013      	ands	r3, r2
10041b38:	0019      	movs	r1, r3
10041b3a:	687b      	ldr	r3, [r7, #4]
10041b3c:	021b      	lsls	r3, r3, #8
10041b3e:	4a06      	ldr	r2, [pc, #24]	@ (10041b58 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
10041b40:	401a      	ands	r2, r3
10041b42:	4b03      	ldr	r3, [pc, #12]	@ (10041b50 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10041b44:	430a      	orrs	r2, r1
10041b46:	611a      	str	r2, [r3, #16]
}
10041b48:	46c0      	nop			@ (mov r8, r8)
10041b4a:	46bd      	mov	sp, r7
10041b4c:	b002      	add	sp, #8
10041b4e:	bd80      	pop	{r7, pc}
10041b50:	200000c0 	.word	0x200000c0
10041b54:	f00000ff 	.word	0xf00000ff
10041b58:	0fffff00 	.word	0x0fffff00

10041b5c <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
10041b5c:	b580      	push	{r7, lr}
10041b5e:	b082      	sub	sp, #8
10041b60:	af00      	add	r7, sp, #0
10041b62:	0002      	movs	r2, r0
10041b64:	1dfb      	adds	r3, r7, #7
10041b66:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10041b68:	1dfb      	adds	r3, r7, #7
10041b6a:	781b      	ldrb	r3, [r3, #0]
10041b6c:	225c      	movs	r2, #92	@ 0x5c
10041b6e:	4353      	muls	r3, r2
10041b70:	4a08      	ldr	r2, [pc, #32]	@ (10041b94 <LL_RADIO_RadioCommandList_Enable+0x38>)
10041b72:	4694      	mov	ip, r2
10041b74:	4463      	add	r3, ip
10041b76:	681a      	ldr	r2, [r3, #0]
10041b78:	1dfb      	adds	r3, r7, #7
10041b7a:	781b      	ldrb	r3, [r3, #0]
10041b7c:	215c      	movs	r1, #92	@ 0x5c
10041b7e:	434b      	muls	r3, r1
10041b80:	4904      	ldr	r1, [pc, #16]	@ (10041b94 <LL_RADIO_RadioCommandList_Enable+0x38>)
10041b82:	468c      	mov	ip, r1
10041b84:	4463      	add	r3, ip
10041b86:	2140      	movs	r1, #64	@ 0x40
10041b88:	430a      	orrs	r2, r1
10041b8a:	601a      	str	r2, [r3, #0]
}
10041b8c:	46c0      	nop			@ (mov r8, r8)
10041b8e:	46bd      	mov	sp, r7
10041b90:	b002      	add	sp, #8
10041b92:	bd80      	pop	{r7, pc}
10041b94:	200000dc 	.word	0x200000dc

10041b98 <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
10041b98:	b580      	push	{r7, lr}
10041b9a:	b082      	sub	sp, #8
10041b9c:	af00      	add	r7, sp, #0
10041b9e:	0002      	movs	r2, r0
10041ba0:	1dfb      	adds	r3, r7, #7
10041ba2:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10041ba4:	1dfb      	adds	r3, r7, #7
10041ba6:	781b      	ldrb	r3, [r3, #0]
10041ba8:	225c      	movs	r2, #92	@ 0x5c
10041baa:	4353      	muls	r3, r2
10041bac:	4a08      	ldr	r2, [pc, #32]	@ (10041bd0 <LL_RADIO_RadioCommandList_Disable+0x38>)
10041bae:	4694      	mov	ip, r2
10041bb0:	4463      	add	r3, ip
10041bb2:	681a      	ldr	r2, [r3, #0]
10041bb4:	1dfb      	adds	r3, r7, #7
10041bb6:	781b      	ldrb	r3, [r3, #0]
10041bb8:	215c      	movs	r1, #92	@ 0x5c
10041bba:	434b      	muls	r3, r1
10041bbc:	4904      	ldr	r1, [pc, #16]	@ (10041bd0 <LL_RADIO_RadioCommandList_Disable+0x38>)
10041bbe:	468c      	mov	ip, r1
10041bc0:	4463      	add	r3, ip
10041bc2:	2140      	movs	r1, #64	@ 0x40
10041bc4:	438a      	bics	r2, r1
10041bc6:	601a      	str	r2, [r3, #0]
}
10041bc8:	46c0      	nop			@ (mov r8, r8)
10041bca:	46bd      	mov	sp, r7
10041bcc:	b002      	add	sp, #8
10041bce:	bd80      	pop	{r7, pc}
10041bd0:	200000dc 	.word	0x200000dc

10041bd4 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10041bd4:	b580      	push	{r7, lr}
10041bd6:	b082      	sub	sp, #8
10041bd8:	af00      	add	r7, sp, #0
10041bda:	0002      	movs	r2, r0
10041bdc:	1dfb      	adds	r3, r7, #7
10041bde:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10041be0:	1dfb      	adds	r3, r7, #7
10041be2:	781b      	ldrb	r3, [r3, #0]
10041be4:	225c      	movs	r2, #92	@ 0x5c
10041be6:	4353      	muls	r3, r2
10041be8:	4a08      	ldr	r2, [pc, #32]	@ (10041c0c <LL_RADIO_TxMode_Enable+0x38>)
10041bea:	4694      	mov	ip, r2
10041bec:	4463      	add	r3, ip
10041bee:	681a      	ldr	r2, [r3, #0]
10041bf0:	1dfb      	adds	r3, r7, #7
10041bf2:	781b      	ldrb	r3, [r3, #0]
10041bf4:	215c      	movs	r1, #92	@ 0x5c
10041bf6:	434b      	muls	r3, r1
10041bf8:	4904      	ldr	r1, [pc, #16]	@ (10041c0c <LL_RADIO_TxMode_Enable+0x38>)
10041bfa:	468c      	mov	ip, r1
10041bfc:	4463      	add	r3, ip
10041bfe:	2180      	movs	r1, #128	@ 0x80
10041c00:	430a      	orrs	r2, r1
10041c02:	601a      	str	r2, [r3, #0]
}
10041c04:	46c0      	nop			@ (mov r8, r8)
10041c06:	46bd      	mov	sp, r7
10041c08:	b002      	add	sp, #8
10041c0a:	bd80      	pop	{r7, pc}
10041c0c:	200000dc 	.word	0x200000dc

10041c10 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10041c10:	b580      	push	{r7, lr}
10041c12:	b082      	sub	sp, #8
10041c14:	af00      	add	r7, sp, #0
10041c16:	0002      	movs	r2, r0
10041c18:	1dfb      	adds	r3, r7, #7
10041c1a:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10041c1c:	1dfb      	adds	r3, r7, #7
10041c1e:	781b      	ldrb	r3, [r3, #0]
10041c20:	225c      	movs	r2, #92	@ 0x5c
10041c22:	4353      	muls	r3, r2
10041c24:	4a08      	ldr	r2, [pc, #32]	@ (10041c48 <LL_RADIO_TxMode_Disable+0x38>)
10041c26:	4694      	mov	ip, r2
10041c28:	4463      	add	r3, ip
10041c2a:	681a      	ldr	r2, [r3, #0]
10041c2c:	1dfb      	adds	r3, r7, #7
10041c2e:	781b      	ldrb	r3, [r3, #0]
10041c30:	215c      	movs	r1, #92	@ 0x5c
10041c32:	434b      	muls	r3, r1
10041c34:	4904      	ldr	r1, [pc, #16]	@ (10041c48 <LL_RADIO_TxMode_Disable+0x38>)
10041c36:	468c      	mov	ip, r1
10041c38:	4463      	add	r3, ip
10041c3a:	2180      	movs	r1, #128	@ 0x80
10041c3c:	438a      	bics	r2, r1
10041c3e:	601a      	str	r2, [r3, #0]
}
10041c40:	46c0      	nop			@ (mov r8, r8)
10041c42:	46bd      	mov	sp, r7
10041c44:	b002      	add	sp, #8
10041c46:	bd80      	pop	{r7, pc}
10041c48:	200000dc 	.word	0x200000dc

10041c4c <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
10041c4c:	b580      	push	{r7, lr}
10041c4e:	b082      	sub	sp, #8
10041c50:	af00      	add	r7, sp, #0
10041c52:	0002      	movs	r2, r0
10041c54:	6039      	str	r1, [r7, #0]
10041c56:	1dfb      	adds	r3, r7, #7
10041c58:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10041c5a:	1dfb      	adds	r3, r7, #7
10041c5c:	781b      	ldrb	r3, [r3, #0]
10041c5e:	225c      	movs	r2, #92	@ 0x5c
10041c60:	4353      	muls	r3, r2
10041c62:	4a0c      	ldr	r2, [pc, #48]	@ (10041c94 <LL_RADIO_SetRemapChannel+0x48>)
10041c64:	4694      	mov	ip, r2
10041c66:	4463      	add	r3, ip
10041c68:	681b      	ldr	r3, [r3, #0]
10041c6a:	4a0b      	ldr	r2, [pc, #44]	@ (10041c98 <LL_RADIO_SetRemapChannel+0x4c>)
10041c6c:	4013      	ands	r3, r2
10041c6e:	0019      	movs	r1, r3
10041c70:	683b      	ldr	r3, [r7, #0]
10041c72:	021a      	lsls	r2, r3, #8
10041c74:	23fc      	movs	r3, #252	@ 0xfc
10041c76:	019b      	lsls	r3, r3, #6
10041c78:	401a      	ands	r2, r3
10041c7a:	1dfb      	adds	r3, r7, #7
10041c7c:	781b      	ldrb	r3, [r3, #0]
10041c7e:	205c      	movs	r0, #92	@ 0x5c
10041c80:	4343      	muls	r3, r0
10041c82:	4804      	ldr	r0, [pc, #16]	@ (10041c94 <LL_RADIO_SetRemapChannel+0x48>)
10041c84:	4684      	mov	ip, r0
10041c86:	4463      	add	r3, ip
10041c88:	430a      	orrs	r2, r1
10041c8a:	601a      	str	r2, [r3, #0]
}
10041c8c:	46c0      	nop			@ (mov r8, r8)
10041c8e:	46bd      	mov	sp, r7
10041c90:	b002      	add	sp, #8
10041c92:	bd80      	pop	{r7, pc}
10041c94:	200000dc 	.word	0x200000dc
10041c98:	ffffc0ff 	.word	0xffffc0ff

10041c9c <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10041c9c:	b580      	push	{r7, lr}
10041c9e:	b082      	sub	sp, #8
10041ca0:	af00      	add	r7, sp, #0
10041ca2:	0002      	movs	r2, r0
10041ca4:	6039      	str	r1, [r7, #0]
10041ca6:	1dfb      	adds	r3, r7, #7
10041ca8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10041caa:	1dfb      	adds	r3, r7, #7
10041cac:	781b      	ldrb	r3, [r3, #0]
10041cae:	225c      	movs	r2, #92	@ 0x5c
10041cb0:	4353      	muls	r3, r2
10041cb2:	4a0c      	ldr	r2, [pc, #48]	@ (10041ce4 <LL_RADIO_SetTransmissionPhy+0x48>)
10041cb4:	4694      	mov	ip, r2
10041cb6:	4463      	add	r3, ip
10041cb8:	681b      	ldr	r3, [r3, #0]
10041cba:	4a0b      	ldr	r2, [pc, #44]	@ (10041ce8 <LL_RADIO_SetTransmissionPhy+0x4c>)
10041cbc:	4013      	ands	r3, r2
10041cbe:	0019      	movs	r1, r3
10041cc0:	683b      	ldr	r3, [r7, #0]
10041cc2:	061a      	lsls	r2, r3, #24
10041cc4:	23e0      	movs	r3, #224	@ 0xe0
10041cc6:	04db      	lsls	r3, r3, #19
10041cc8:	401a      	ands	r2, r3
10041cca:	1dfb      	adds	r3, r7, #7
10041ccc:	781b      	ldrb	r3, [r3, #0]
10041cce:	205c      	movs	r0, #92	@ 0x5c
10041cd0:	4343      	muls	r3, r0
10041cd2:	4804      	ldr	r0, [pc, #16]	@ (10041ce4 <LL_RADIO_SetTransmissionPhy+0x48>)
10041cd4:	4684      	mov	ip, r0
10041cd6:	4463      	add	r3, ip
10041cd8:	430a      	orrs	r2, r1
10041cda:	601a      	str	r2, [r3, #0]
}
10041cdc:	46c0      	nop			@ (mov r8, r8)
10041cde:	46bd      	mov	sp, r7
10041ce0:	b002      	add	sp, #8
10041ce2:	bd80      	pop	{r7, pc}
10041ce4:	200000dc 	.word	0x200000dc
10041ce8:	f8ffffff 	.word	0xf8ffffff

10041cec <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
10041cec:	b580      	push	{r7, lr}
10041cee:	b082      	sub	sp, #8
10041cf0:	af00      	add	r7, sp, #0
10041cf2:	0002      	movs	r2, r0
10041cf4:	6039      	str	r1, [r7, #0]
10041cf6:	1dfb      	adds	r3, r7, #7
10041cf8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
10041cfa:	1dfb      	adds	r3, r7, #7
10041cfc:	781b      	ldrb	r3, [r3, #0]
10041cfe:	225c      	movs	r2, #92	@ 0x5c
10041d00:	4353      	muls	r3, r2
10041d02:	4a0c      	ldr	r2, [pc, #48]	@ (10041d34 <LL_RADIO_SetReceptionPhy+0x48>)
10041d04:	4694      	mov	ip, r2
10041d06:	4463      	add	r3, ip
10041d08:	681b      	ldr	r3, [r3, #0]
10041d0a:	4a0b      	ldr	r2, [pc, #44]	@ (10041d38 <LL_RADIO_SetReceptionPhy+0x4c>)
10041d0c:	4013      	ands	r3, r2
10041d0e:	0019      	movs	r1, r3
10041d10:	683b      	ldr	r3, [r7, #0]
10041d12:	071a      	lsls	r2, r3, #28
10041d14:	23e0      	movs	r3, #224	@ 0xe0
10041d16:	05db      	lsls	r3, r3, #23
10041d18:	401a      	ands	r2, r3
10041d1a:	1dfb      	adds	r3, r7, #7
10041d1c:	781b      	ldrb	r3, [r3, #0]
10041d1e:	205c      	movs	r0, #92	@ 0x5c
10041d20:	4343      	muls	r3, r0
10041d22:	4804      	ldr	r0, [pc, #16]	@ (10041d34 <LL_RADIO_SetReceptionPhy+0x48>)
10041d24:	4684      	mov	ip, r0
10041d26:	4463      	add	r3, ip
10041d28:	430a      	orrs	r2, r1
10041d2a:	601a      	str	r2, [r3, #0]
}
10041d2c:	46c0      	nop			@ (mov r8, r8)
10041d2e:	46bd      	mov	sp, r7
10041d30:	b002      	add	sp, #8
10041d32:	bd80      	pop	{r7, pc}
10041d34:	200000dc 	.word	0x200000dc
10041d38:	8fffffff 	.word	0x8fffffff

10041d3c <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10041d3c:	b580      	push	{r7, lr}
10041d3e:	b082      	sub	sp, #8
10041d40:	af00      	add	r7, sp, #0
10041d42:	0002      	movs	r2, r0
10041d44:	6039      	str	r1, [r7, #0]
10041d46:	1dfb      	adds	r3, r7, #7
10041d48:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10041d4a:	1dfb      	adds	r3, r7, #7
10041d4c:	781b      	ldrb	r3, [r3, #0]
10041d4e:	225c      	movs	r2, #92	@ 0x5c
10041d50:	4353      	muls	r3, r2
10041d52:	4a08      	ldr	r2, [pc, #32]	@ (10041d74 <LL_RADIO_SetTxPoint+0x38>)
10041d54:	4694      	mov	ip, r2
10041d56:	4463      	add	r3, ip
10041d58:	685b      	ldr	r3, [r3, #4]
10041d5a:	1dfb      	adds	r3, r7, #7
10041d5c:	781b      	ldrb	r3, [r3, #0]
10041d5e:	225c      	movs	r2, #92	@ 0x5c
10041d60:	4353      	muls	r3, r2
10041d62:	4a04      	ldr	r2, [pc, #16]	@ (10041d74 <LL_RADIO_SetTxPoint+0x38>)
10041d64:	4694      	mov	ip, r2
10041d66:	4463      	add	r3, ip
10041d68:	683a      	ldr	r2, [r7, #0]
10041d6a:	605a      	str	r2, [r3, #4]
}
10041d6c:	46c0      	nop			@ (mov r8, r8)
10041d6e:	46bd      	mov	sp, r7
10041d70:	b002      	add	sp, #8
10041d72:	bd80      	pop	{r7, pc}
10041d74:	200000dc 	.word	0x200000dc

10041d78 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
10041d78:	b580      	push	{r7, lr}
10041d7a:	b082      	sub	sp, #8
10041d7c:	af00      	add	r7, sp, #0
10041d7e:	0002      	movs	r2, r0
10041d80:	6039      	str	r1, [r7, #0]
10041d82:	1dfb      	adds	r3, r7, #7
10041d84:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
10041d86:	1dfb      	adds	r3, r7, #7
10041d88:	781b      	ldrb	r3, [r3, #0]
10041d8a:	225c      	movs	r2, #92	@ 0x5c
10041d8c:	4353      	muls	r3, r2
10041d8e:	4a08      	ldr	r2, [pc, #32]	@ (10041db0 <LL_RADIO_SetRcvPoint+0x38>)
10041d90:	4694      	mov	ip, r2
10041d92:	4463      	add	r3, ip
10041d94:	689b      	ldr	r3, [r3, #8]
10041d96:	1dfb      	adds	r3, r7, #7
10041d98:	781b      	ldrb	r3, [r3, #0]
10041d9a:	225c      	movs	r2, #92	@ 0x5c
10041d9c:	4353      	muls	r3, r2
10041d9e:	4a04      	ldr	r2, [pc, #16]	@ (10041db0 <LL_RADIO_SetRcvPoint+0x38>)
10041da0:	4694      	mov	ip, r2
10041da2:	4463      	add	r3, ip
10041da4:	683a      	ldr	r2, [r7, #0]
10041da6:	609a      	str	r2, [r3, #8]
}
10041da8:	46c0      	nop			@ (mov r8, r8)
10041daa:	46bd      	mov	sp, r7
10041dac:	b002      	add	sp, #8
10041dae:	bd80      	pop	{r7, pc}
10041db0:	200000dc 	.word	0x200000dc

10041db4 <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
10041db4:	b580      	push	{r7, lr}
10041db6:	b082      	sub	sp, #8
10041db8:	af00      	add	r7, sp, #0
10041dba:	0002      	movs	r2, r0
10041dbc:	6039      	str	r1, [r7, #0]
10041dbe:	1dfb      	adds	r3, r7, #7
10041dc0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
10041dc2:	1dfb      	adds	r3, r7, #7
10041dc4:	781b      	ldrb	r3, [r3, #0]
10041dc6:	225c      	movs	r2, #92	@ 0x5c
10041dc8:	4353      	muls	r3, r2
10041dca:	4a08      	ldr	r2, [pc, #32]	@ (10041dec <LL_RADIO_SetAccessAddress+0x38>)
10041dcc:	4694      	mov	ip, r2
10041dce:	4463      	add	r3, ip
10041dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10041dd2:	1dfb      	adds	r3, r7, #7
10041dd4:	781b      	ldrb	r3, [r3, #0]
10041dd6:	225c      	movs	r2, #92	@ 0x5c
10041dd8:	4353      	muls	r3, r2
10041dda:	4a04      	ldr	r2, [pc, #16]	@ (10041dec <LL_RADIO_SetAccessAddress+0x38>)
10041ddc:	4694      	mov	ip, r2
10041dde:	4463      	add	r3, ip
10041de0:	683a      	ldr	r2, [r7, #0]
10041de2:	625a      	str	r2, [r3, #36]	@ 0x24
}
10041de4:	46c0      	nop			@ (mov r8, r8)
10041de6:	46bd      	mov	sp, r7
10041de8:	b002      	add	sp, #8
10041dea:	bd80      	pop	{r7, pc}
10041dec:	200000dc 	.word	0x200000dc

10041df0 <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
10041df0:	b580      	push	{r7, lr}
10041df2:	b082      	sub	sp, #8
10041df4:	af00      	add	r7, sp, #0
10041df6:	0002      	movs	r2, r0
10041df8:	6039      	str	r1, [r7, #0]
10041dfa:	1dfb      	adds	r3, r7, #7
10041dfc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
10041dfe:	1dfb      	adds	r3, r7, #7
10041e00:	781b      	ldrb	r3, [r3, #0]
10041e02:	225c      	movs	r2, #92	@ 0x5c
10041e04:	4353      	muls	r3, r2
10041e06:	4a0b      	ldr	r2, [pc, #44]	@ (10041e34 <LL_RADIO_SetCRCInitializationValue+0x44>)
10041e08:	4694      	mov	ip, r2
10041e0a:	4463      	add	r3, ip
10041e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041e0e:	0e1b      	lsrs	r3, r3, #24
10041e10:	0619      	lsls	r1, r3, #24
10041e12:	683b      	ldr	r3, [r7, #0]
10041e14:	021b      	lsls	r3, r3, #8
10041e16:	0a1a      	lsrs	r2, r3, #8
10041e18:	1dfb      	adds	r3, r7, #7
10041e1a:	781b      	ldrb	r3, [r3, #0]
10041e1c:	205c      	movs	r0, #92	@ 0x5c
10041e1e:	4343      	muls	r3, r0
10041e20:	4804      	ldr	r0, [pc, #16]	@ (10041e34 <LL_RADIO_SetCRCInitializationValue+0x44>)
10041e22:	4684      	mov	ip, r0
10041e24:	4463      	add	r3, ip
10041e26:	430a      	orrs	r2, r1
10041e28:	629a      	str	r2, [r3, #40]	@ 0x28
}
10041e2a:	46c0      	nop			@ (mov r8, r8)
10041e2c:	46bd      	mov	sp, r7
10041e2e:	b002      	add	sp, #8
10041e30:	bd80      	pop	{r7, pc}
10041e32:	46c0      	nop			@ (mov r8, r8)
10041e34:	200000dc 	.word	0x200000dc

10041e38 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
10041e38:	b580      	push	{r7, lr}
10041e3a:	b082      	sub	sp, #8
10041e3c:	af00      	add	r7, sp, #0
10041e3e:	0002      	movs	r2, r0
10041e40:	6039      	str	r1, [r7, #0]
10041e42:	1dfb      	adds	r3, r7, #7
10041e44:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
10041e46:	1dfb      	adds	r3, r7, #7
10041e48:	781b      	ldrb	r3, [r3, #0]
10041e4a:	225c      	movs	r2, #92	@ 0x5c
10041e4c:	4353      	muls	r3, r2
10041e4e:	4a0a      	ldr	r2, [pc, #40]	@ (10041e78 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10041e50:	4694      	mov	ip, r2
10041e52:	4463      	add	r3, ip
10041e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041e56:	021b      	lsls	r3, r3, #8
10041e58:	0a19      	lsrs	r1, r3, #8
10041e5a:	683b      	ldr	r3, [r7, #0]
10041e5c:	061a      	lsls	r2, r3, #24
10041e5e:	1dfb      	adds	r3, r7, #7
10041e60:	781b      	ldrb	r3, [r3, #0]
10041e62:	205c      	movs	r0, #92	@ 0x5c
10041e64:	4343      	muls	r3, r0
10041e66:	4804      	ldr	r0, [pc, #16]	@ (10041e78 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10041e68:	4684      	mov	ip, r0
10041e6a:	4463      	add	r3, ip
10041e6c:	430a      	orrs	r2, r1
10041e6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10041e70:	46c0      	nop			@ (mov r8, r8)
10041e72:	46bd      	mov	sp, r7
10041e74:	b002      	add	sp, #8
10041e76:	bd80      	pop	{r7, pc}
10041e78:	200000dc 	.word	0x200000dc

10041e7c <LL_RADIO_TxHp_Enable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Enable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Enable(uint8_t stateMachineNo)
{
10041e7c:	b580      	push	{r7, lr}
10041e7e:	b082      	sub	sp, #8
10041e80:	af00      	add	r7, sp, #0
10041e82:	0002      	movs	r2, r0
10041e84:	1dfb      	adds	r3, r7, #7
10041e86:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10041e88:	1dfb      	adds	r3, r7, #7
10041e8a:	781b      	ldrb	r3, [r3, #0]
10041e8c:	225c      	movs	r2, #92	@ 0x5c
10041e8e:	4353      	muls	r3, r2
10041e90:	4a08      	ldr	r2, [pc, #32]	@ (10041eb4 <LL_RADIO_TxHp_Enable+0x38>)
10041e92:	4694      	mov	ip, r2
10041e94:	4463      	add	r3, ip
10041e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10041e98:	1dfb      	adds	r3, r7, #7
10041e9a:	781b      	ldrb	r3, [r3, #0]
10041e9c:	215c      	movs	r1, #92	@ 0x5c
10041e9e:	434b      	muls	r3, r1
10041ea0:	4904      	ldr	r1, [pc, #16]	@ (10041eb4 <LL_RADIO_TxHp_Enable+0x38>)
10041ea2:	468c      	mov	ip, r1
10041ea4:	4463      	add	r3, ip
10041ea6:	2180      	movs	r1, #128	@ 0x80
10041ea8:	430a      	orrs	r2, r1
10041eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10041eac:	46c0      	nop			@ (mov r8, r8)
10041eae:	46bd      	mov	sp, r7
10041eb0:	b002      	add	sp, #8
10041eb2:	bd80      	pop	{r7, pc}
10041eb4:	200000dc 	.word	0x200000dc

10041eb8 <LL_RADIO_TxHp_Disable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Disable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Disable(uint8_t stateMachineNo)
{
10041eb8:	b580      	push	{r7, lr}
10041eba:	b082      	sub	sp, #8
10041ebc:	af00      	add	r7, sp, #0
10041ebe:	0002      	movs	r2, r0
10041ec0:	1dfb      	adds	r3, r7, #7
10041ec2:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10041ec4:	1dfb      	adds	r3, r7, #7
10041ec6:	781b      	ldrb	r3, [r3, #0]
10041ec8:	225c      	movs	r2, #92	@ 0x5c
10041eca:	4353      	muls	r3, r2
10041ecc:	4a08      	ldr	r2, [pc, #32]	@ (10041ef0 <LL_RADIO_TxHp_Disable+0x38>)
10041ece:	4694      	mov	ip, r2
10041ed0:	4463      	add	r3, ip
10041ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10041ed4:	1dfb      	adds	r3, r7, #7
10041ed6:	781b      	ldrb	r3, [r3, #0]
10041ed8:	215c      	movs	r1, #92	@ 0x5c
10041eda:	434b      	muls	r3, r1
10041edc:	4904      	ldr	r1, [pc, #16]	@ (10041ef0 <LL_RADIO_TxHp_Disable+0x38>)
10041ede:	468c      	mov	ip, r1
10041ee0:	4463      	add	r3, ip
10041ee2:	2180      	movs	r1, #128	@ 0x80
10041ee4:	438a      	bics	r2, r1
10041ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10041ee8:	46c0      	nop			@ (mov r8, r8)
10041eea:	46bd      	mov	sp, r7
10041eec:	b002      	add	sp, #8
10041eee:	bd80      	pop	{r7, pc}
10041ef0:	200000dc 	.word	0x200000dc

10041ef4 <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
10041ef4:	b580      	push	{r7, lr}
10041ef6:	b082      	sub	sp, #8
10041ef8:	af00      	add	r7, sp, #0
10041efa:	0002      	movs	r2, r0
10041efc:	6039      	str	r1, [r7, #0]
10041efe:	1dfb      	adds	r3, r7, #7
10041f00:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
10041f02:	1dfb      	adds	r3, r7, #7
10041f04:	781b      	ldrb	r3, [r3, #0]
10041f06:	225c      	movs	r2, #92	@ 0x5c
10041f08:	4353      	muls	r3, r2
10041f0a:	4a0b      	ldr	r2, [pc, #44]	@ (10041f38 <LL_RADIO_SetPAPower+0x44>)
10041f0c:	4694      	mov	ip, r2
10041f0e:	4463      	add	r3, ip
10041f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10041f12:	221f      	movs	r2, #31
10041f14:	4393      	bics	r3, r2
10041f16:	0019      	movs	r1, r3
10041f18:	683b      	ldr	r3, [r7, #0]
10041f1a:	221f      	movs	r2, #31
10041f1c:	401a      	ands	r2, r3
10041f1e:	1dfb      	adds	r3, r7, #7
10041f20:	781b      	ldrb	r3, [r3, #0]
10041f22:	205c      	movs	r0, #92	@ 0x5c
10041f24:	4343      	muls	r3, r0
10041f26:	4804      	ldr	r0, [pc, #16]	@ (10041f38 <LL_RADIO_SetPAPower+0x44>)
10041f28:	4684      	mov	ip, r0
10041f2a:	4463      	add	r3, ip
10041f2c:	430a      	orrs	r2, r1
10041f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10041f30:	46c0      	nop			@ (mov r8, r8)
10041f32:	46bd      	mov	sp, r7
10041f34:	b002      	add	sp, #8
10041f36:	bd80      	pop	{r7, pc}
10041f38:	200000dc 	.word	0x200000dc

10041f3c <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
10041f3c:	b580      	push	{r7, lr}
10041f3e:	b082      	sub	sp, #8
10041f40:	af00      	add	r7, sp, #0
10041f42:	0002      	movs	r2, r0
10041f44:	6039      	str	r1, [r7, #0]
10041f46:	1dfb      	adds	r3, r7, #7
10041f48:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
10041f4a:	1dfb      	adds	r3, r7, #7
10041f4c:	781b      	ldrb	r3, [r3, #0]
10041f4e:	225c      	movs	r2, #92	@ 0x5c
10041f50:	4353      	muls	r3, r2
10041f52:	4a0c      	ldr	r2, [pc, #48]	@ (10041f84 <LL_RADIO_SetHopIncrement+0x48>)
10041f54:	4694      	mov	ip, r2
10041f56:	4463      	add	r3, ip
10041f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10041f5a:	4a0b      	ldr	r2, [pc, #44]	@ (10041f88 <LL_RADIO_SetHopIncrement+0x4c>)
10041f5c:	4013      	ands	r3, r2
10041f5e:	0019      	movs	r1, r3
10041f60:	683b      	ldr	r3, [r7, #0]
10041f62:	021a      	lsls	r2, r3, #8
10041f64:	23fc      	movs	r3, #252	@ 0xfc
10041f66:	019b      	lsls	r3, r3, #6
10041f68:	401a      	ands	r2, r3
10041f6a:	1dfb      	adds	r3, r7, #7
10041f6c:	781b      	ldrb	r3, [r3, #0]
10041f6e:	205c      	movs	r0, #92	@ 0x5c
10041f70:	4343      	muls	r3, r0
10041f72:	4804      	ldr	r0, [pc, #16]	@ (10041f84 <LL_RADIO_SetHopIncrement+0x48>)
10041f74:	4684      	mov	ip, r0
10041f76:	4463      	add	r3, ip
10041f78:	430a      	orrs	r2, r1
10041f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10041f7c:	46c0      	nop			@ (mov r8, r8)
10041f7e:	46bd      	mov	sp, r7
10041f80:	b002      	add	sp, #8
10041f82:	bd80      	pop	{r7, pc}
10041f84:	200000dc 	.word	0x200000dc
10041f88:	ffffc0ff 	.word	0xffffc0ff

10041f8c <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10041f8c:	b580      	push	{r7, lr}
10041f8e:	b082      	sub	sp, #8
10041f90:	af00      	add	r7, sp, #0
10041f92:	6078      	str	r0, [r7, #4]
10041f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
10041f96:	687b      	ldr	r3, [r7, #4]
10041f98:	681b      	ldr	r3, [r3, #0]
10041f9a:	687b      	ldr	r3, [r7, #4]
10041f9c:	683a      	ldr	r2, [r7, #0]
10041f9e:	601a      	str	r2, [r3, #0]
}
10041fa0:	46c0      	nop			@ (mov r8, r8)
10041fa2:	46bd      	mov	sp, r7
10041fa4:	b002      	add	sp, #8
10041fa6:	bd80      	pop	{r7, pc}

10041fa8 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10041fa8:	b580      	push	{r7, lr}
10041faa:	b082      	sub	sp, #8
10041fac:	af00      	add	r7, sp, #0
10041fae:	6078      	str	r0, [r7, #4]
10041fb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
10041fb2:	687b      	ldr	r3, [r7, #4]
10041fb4:	685b      	ldr	r3, [r3, #4]
10041fb6:	2201      	movs	r2, #1
10041fb8:	4393      	bics	r3, r2
10041fba:	001a      	movs	r2, r3
10041fbc:	683b      	ldr	r3, [r7, #0]
10041fbe:	2101      	movs	r1, #1
10041fc0:	400b      	ands	r3, r1
10041fc2:	431a      	orrs	r2, r3
10041fc4:	687b      	ldr	r3, [r7, #4]
10041fc6:	605a      	str	r2, [r3, #4]
}
10041fc8:	46c0      	nop			@ (mov r8, r8)
10041fca:	46bd      	mov	sp, r7
10041fcc:	b002      	add	sp, #8
10041fce:	bd80      	pop	{r7, pc}

10041fd0 <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
10041fd0:	b580      	push	{r7, lr}
10041fd2:	b082      	sub	sp, #8
10041fd4:	af00      	add	r7, sp, #0
10041fd6:	6078      	str	r0, [r7, #4]
10041fd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
10041fda:	687b      	ldr	r3, [r7, #4]
10041fdc:	685b      	ldr	r3, [r3, #4]
10041fde:	2204      	movs	r2, #4
10041fe0:	4393      	bics	r3, r2
10041fe2:	001a      	movs	r2, r3
10041fe4:	683b      	ldr	r3, [r7, #0]
10041fe6:	009b      	lsls	r3, r3, #2
10041fe8:	2104      	movs	r1, #4
10041fea:	400b      	ands	r3, r1
10041fec:	431a      	orrs	r2, r3
10041fee:	687b      	ldr	r3, [r7, #4]
10041ff0:	605a      	str	r2, [r3, #4]
}
10041ff2:	46c0      	nop			@ (mov r8, r8)
10041ff4:	46bd      	mov	sp, r7
10041ff6:	b002      	add	sp, #8
10041ff8:	bd80      	pop	{r7, pc}

10041ffa <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
10041ffa:	b580      	push	{r7, lr}
10041ffc:	b082      	sub	sp, #8
10041ffe:	af00      	add	r7, sp, #0
10042000:	6078      	str	r0, [r7, #4]
10042002:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10042004:	687b      	ldr	r3, [r7, #4]
10042006:	685b      	ldr	r3, [r3, #4]
10042008:	2220      	movs	r2, #32
1004200a:	4393      	bics	r3, r2
1004200c:	001a      	movs	r2, r3
1004200e:	683b      	ldr	r3, [r7, #0]
10042010:	015b      	lsls	r3, r3, #5
10042012:	2120      	movs	r1, #32
10042014:	400b      	ands	r3, r1
10042016:	431a      	orrs	r2, r3
10042018:	687b      	ldr	r3, [r7, #4]
1004201a:	605a      	str	r2, [r3, #4]
}
1004201c:	46c0      	nop			@ (mov r8, r8)
1004201e:	46bd      	mov	sp, r7
10042020:	b002      	add	sp, #8
10042022:	bd80      	pop	{r7, pc}

10042024 <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
10042024:	b580      	push	{r7, lr}
10042026:	b082      	sub	sp, #8
10042028:	af00      	add	r7, sp, #0
1004202a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
1004202c:	687b      	ldr	r3, [r7, #4]
1004202e:	685b      	ldr	r3, [r3, #4]
10042030:	2280      	movs	r2, #128	@ 0x80
10042032:	4393      	bics	r3, r2
10042034:	001a      	movs	r2, r3
10042036:	687b      	ldr	r3, [r7, #4]
10042038:	605a      	str	r2, [r3, #4]
}
1004203a:	46c0      	nop			@ (mov r8, r8)
1004203c:	46bd      	mov	sp, r7
1004203e:	b002      	add	sp, #8
10042040:	bd80      	pop	{r7, pc}
	...

10042044 <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
10042044:	b580      	push	{r7, lr}
10042046:	b082      	sub	sp, #8
10042048:	af00      	add	r7, sp, #0
1004204a:	6078      	str	r0, [r7, #4]
1004204c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
1004204e:	687b      	ldr	r3, [r7, #4]
10042050:	685b      	ldr	r3, [r3, #4]
10042052:	4a07      	ldr	r2, [pc, #28]	@ (10042070 <LL_RADIO_SetNextTxMode+0x2c>)
10042054:	401a      	ands	r2, r3
10042056:	683b      	ldr	r3, [r7, #0]
10042058:	0219      	lsls	r1, r3, #8
1004205a:	2380      	movs	r3, #128	@ 0x80
1004205c:	005b      	lsls	r3, r3, #1
1004205e:	400b      	ands	r3, r1
10042060:	431a      	orrs	r2, r3
10042062:	687b      	ldr	r3, [r7, #4]
10042064:	605a      	str	r2, [r3, #4]
}
10042066:	46c0      	nop			@ (mov r8, r8)
10042068:	46bd      	mov	sp, r7
1004206a:	b002      	add	sp, #8
1004206c:	bd80      	pop	{r7, pc}
1004206e:	46c0      	nop			@ (mov r8, r8)
10042070:	fffffeff 	.word	0xfffffeff

10042074 <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10042074:	b580      	push	{r7, lr}
10042076:	b082      	sub	sp, #8
10042078:	af00      	add	r7, sp, #0
1004207a:	6078      	str	r0, [r7, #4]
1004207c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
1004207e:	687b      	ldr	r3, [r7, #4]
10042080:	685b      	ldr	r3, [r3, #4]
10042082:	4a07      	ldr	r2, [pc, #28]	@ (100420a0 <LL_RADIO_SetAllTableDataReady+0x2c>)
10042084:	401a      	ands	r2, r3
10042086:	683b      	ldr	r3, [r7, #0]
10042088:	0259      	lsls	r1, r3, #9
1004208a:	2380      	movs	r3, #128	@ 0x80
1004208c:	009b      	lsls	r3, r3, #2
1004208e:	400b      	ands	r3, r1
10042090:	431a      	orrs	r2, r3
10042092:	687b      	ldr	r3, [r7, #4]
10042094:	605a      	str	r2, [r3, #4]
}
10042096:	46c0      	nop			@ (mov r8, r8)
10042098:	46bd      	mov	sp, r7
1004209a:	b002      	add	sp, #8
1004209c:	bd80      	pop	{r7, pc}
1004209e:	46c0      	nop			@ (mov r8, r8)
100420a0:	fffffdff 	.word	0xfffffdff

100420a4 <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
100420a4:	b580      	push	{r7, lr}
100420a6:	b082      	sub	sp, #8
100420a8:	af00      	add	r7, sp, #0
100420aa:	6078      	str	r0, [r7, #4]
100420ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
100420ae:	687b      	ldr	r3, [r7, #4]
100420b0:	685b      	ldr	r3, [r3, #4]
100420b2:	4a07      	ldr	r2, [pc, #28]	@ (100420d0 <LL_RADIO_SetTransmissionDataReady+0x2c>)
100420b4:	401a      	ands	r2, r3
100420b6:	683b      	ldr	r3, [r7, #0]
100420b8:	0299      	lsls	r1, r3, #10
100420ba:	2380      	movs	r3, #128	@ 0x80
100420bc:	00db      	lsls	r3, r3, #3
100420be:	400b      	ands	r3, r1
100420c0:	431a      	orrs	r2, r3
100420c2:	687b      	ldr	r3, [r7, #4]
100420c4:	605a      	str	r2, [r3, #4]
}
100420c6:	46c0      	nop			@ (mov r8, r8)
100420c8:	46bd      	mov	sp, r7
100420ca:	b002      	add	sp, #8
100420cc:	bd80      	pop	{r7, pc}
100420ce:	46c0      	nop			@ (mov r8, r8)
100420d0:	fffffbff 	.word	0xfffffbff

100420d4 <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
100420d4:	b580      	push	{r7, lr}
100420d6:	b082      	sub	sp, #8
100420d8:	af00      	add	r7, sp, #0
100420da:	6078      	str	r0, [r7, #4]
100420dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
100420de:	687b      	ldr	r3, [r7, #4]
100420e0:	689b      	ldr	r3, [r3, #8]
100420e2:	687b      	ldr	r3, [r7, #4]
100420e4:	683a      	ldr	r2, [r7, #0]
100420e6:	609a      	str	r2, [r3, #8]
}
100420e8:	46c0      	nop			@ (mov r8, r8)
100420ea:	46bd      	mov	sp, r7
100420ec:	b002      	add	sp, #8
100420ee:	bd80      	pop	{r7, pc}

100420f0 <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
100420f0:	b580      	push	{r7, lr}
100420f2:	b082      	sub	sp, #8
100420f4:	af00      	add	r7, sp, #0
100420f6:	6078      	str	r0, [r7, #4]
100420f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
100420fa:	687b      	ldr	r3, [r7, #4]
100420fc:	68db      	ldr	r3, [r3, #12]
100420fe:	0d1b      	lsrs	r3, r3, #20
10042100:	051a      	lsls	r2, r3, #20
10042102:	683b      	ldr	r3, [r7, #0]
10042104:	031b      	lsls	r3, r3, #12
10042106:	0b1b      	lsrs	r3, r3, #12
10042108:	431a      	orrs	r2, r3
1004210a:	687b      	ldr	r3, [r7, #4]
1004210c:	60da      	str	r2, [r3, #12]
}
1004210e:	46c0      	nop			@ (mov r8, r8)
10042110:	46bd      	mov	sp, r7
10042112:	b002      	add	sp, #8
10042114:	bd80      	pop	{r7, pc}

10042116 <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
10042116:	b580      	push	{r7, lr}
10042118:	b082      	sub	sp, #8
1004211a:	af00      	add	r7, sp, #0
1004211c:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
1004211e:	687b      	ldr	r3, [r7, #4]
10042120:	68db      	ldr	r3, [r3, #12]
10042122:	2280      	movs	r2, #128	@ 0x80
10042124:	0352      	lsls	r2, r2, #13
10042126:	431a      	orrs	r2, r3
10042128:	687b      	ldr	r3, [r7, #4]
1004212a:	60da      	str	r2, [r3, #12]
}
1004212c:	46c0      	nop			@ (mov r8, r8)
1004212e:	46bd      	mov	sp, r7
10042130:	b002      	add	sp, #8
10042132:	bd80      	pop	{r7, pc}

10042134 <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
10042134:	b580      	push	{r7, lr}
10042136:	b082      	sub	sp, #8
10042138:	af00      	add	r7, sp, #0
1004213a:	6078      	str	r0, [r7, #4]
1004213c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
1004213e:	687b      	ldr	r3, [r7, #4]
10042140:	68db      	ldr	r3, [r3, #12]
10042142:	4a07      	ldr	r2, [pc, #28]	@ (10042160 <LL_RADIO_SetTrigRcv+0x2c>)
10042144:	401a      	ands	r2, r3
10042146:	683b      	ldr	r3, [r7, #0]
10042148:	0599      	lsls	r1, r3, #22
1004214a:	2380      	movs	r3, #128	@ 0x80
1004214c:	03db      	lsls	r3, r3, #15
1004214e:	400b      	ands	r3, r1
10042150:	431a      	orrs	r2, r3
10042152:	687b      	ldr	r3, [r7, #4]
10042154:	60da      	str	r2, [r3, #12]
}
10042156:	46c0      	nop			@ (mov r8, r8)
10042158:	46bd      	mov	sp, r7
1004215a:	b002      	add	sp, #8
1004215c:	bd80      	pop	{r7, pc}
1004215e:	46c0      	nop			@ (mov r8, r8)
10042160:	ffbfffff 	.word	0xffbfffff

10042164 <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
10042164:	b580      	push	{r7, lr}
10042166:	b082      	sub	sp, #8
10042168:	af00      	add	r7, sp, #0
1004216a:	6078      	str	r0, [r7, #4]
1004216c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
1004216e:	687b      	ldr	r3, [r7, #4]
10042170:	68db      	ldr	r3, [r3, #12]
10042172:	4a07      	ldr	r2, [pc, #28]	@ (10042190 <LL_RADIO_SetTrigDone+0x2c>)
10042174:	401a      	ands	r2, r3
10042176:	683b      	ldr	r3, [r7, #0]
10042178:	05d9      	lsls	r1, r3, #23
1004217a:	2380      	movs	r3, #128	@ 0x80
1004217c:	041b      	lsls	r3, r3, #16
1004217e:	400b      	ands	r3, r1
10042180:	431a      	orrs	r2, r3
10042182:	687b      	ldr	r3, [r7, #4]
10042184:	60da      	str	r2, [r3, #12]
}
10042186:	46c0      	nop			@ (mov r8, r8)
10042188:	46bd      	mov	sp, r7
1004218a:	b002      	add	sp, #8
1004218c:	bd80      	pop	{r7, pc}
1004218e:	46c0      	nop			@ (mov r8, r8)
10042190:	ff7fffff 	.word	0xff7fffff

10042194 <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
10042194:	b580      	push	{r7, lr}
10042196:	b082      	sub	sp, #8
10042198:	af00      	add	r7, sp, #0
1004219a:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
1004219c:	687b      	ldr	r3, [r7, #4]
1004219e:	68db      	ldr	r3, [r3, #12]
100421a0:	2280      	movs	r2, #128	@ 0x80
100421a2:	0492      	lsls	r2, r2, #18
100421a4:	431a      	orrs	r2, r3
100421a6:	687b      	ldr	r3, [r7, #4]
100421a8:	60da      	str	r2, [r3, #12]
}
100421aa:	46c0      	nop			@ (mov r8, r8)
100421ac:	46bd      	mov	sp, r7
100421ae:	b002      	add	sp, #8
100421b0:	bd80      	pop	{r7, pc}

100421b2 <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
100421b2:	b580      	push	{r7, lr}
100421b4:	b082      	sub	sp, #8
100421b6:	af00      	add	r7, sp, #0
100421b8:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
100421ba:	687b      	ldr	r3, [r7, #4]
100421bc:	68db      	ldr	r3, [r3, #12]
100421be:	2280      	movs	r2, #128	@ 0x80
100421c0:	0612      	lsls	r2, r2, #24
100421c2:	431a      	orrs	r2, r3
100421c4:	687b      	ldr	r3, [r7, #4]
100421c6:	60da      	str	r2, [r3, #12]
}
100421c8:	46c0      	nop			@ (mov r8, r8)
100421ca:	46bd      	mov	sp, r7
100421cc:	b002      	add	sp, #8
100421ce:	bd80      	pop	{r7, pc}

100421d0 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
100421d0:	b580      	push	{r7, lr}
100421d2:	b082      	sub	sp, #8
100421d4:	af00      	add	r7, sp, #0
100421d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
100421d8:	23c0      	movs	r3, #192	@ 0xc0
100421da:	05db      	lsls	r3, r3, #23
100421dc:	685b      	ldr	r3, [r3, #4]
100421de:	4a07      	ldr	r2, [pc, #28]	@ (100421fc <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
100421e0:	4013      	ands	r3, r2
100421e2:	0019      	movs	r1, r3
100421e4:	687b      	ldr	r3, [r7, #4]
100421e6:	4a06      	ldr	r2, [pc, #24]	@ (10042200 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
100421e8:	401a      	ands	r2, r3
100421ea:	23c0      	movs	r3, #192	@ 0xc0
100421ec:	05db      	lsls	r3, r3, #23
100421ee:	430a      	orrs	r2, r1
100421f0:	605a      	str	r2, [r3, #4]
}
100421f2:	46c0      	nop			@ (mov r8, r8)
100421f4:	46bd      	mov	sp, r7
100421f6:	b002      	add	sp, #8
100421f8:	bd80      	pop	{r7, pc}
100421fa:	46c0      	nop			@ (mov r8, r8)
100421fc:	0002004f 	.word	0x0002004f
10042200:	fffdffb0 	.word	0xfffdffb0

10042204 <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10042204:	b580      	push	{r7, lr}
10042206:	b082      	sub	sp, #8
10042208:	af00      	add	r7, sp, #0
1004220a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
1004220c:	23c0      	movs	r3, #192	@ 0xc0
1004220e:	05db      	lsls	r3, r3, #23
10042210:	699b      	ldr	r3, [r3, #24]
10042212:	2208      	movs	r2, #8
10042214:	4393      	bics	r3, r2
10042216:	0019      	movs	r1, r3
10042218:	687b      	ldr	r3, [r7, #4]
1004221a:	00db      	lsls	r3, r3, #3
1004221c:	2208      	movs	r2, #8
1004221e:	401a      	ands	r2, r3
10042220:	23c0      	movs	r3, #192	@ 0xc0
10042222:	05db      	lsls	r3, r3, #23
10042224:	430a      	orrs	r2, r1
10042226:	619a      	str	r2, [r3, #24]
}
10042228:	46c0      	nop			@ (mov r8, r8)
1004222a:	46bd      	mov	sp, r7
1004222c:	b002      	add	sp, #8
1004222e:	bd80      	pop	{r7, pc}

10042230 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
10042230:	b580      	push	{r7, lr}
10042232:	b088      	sub	sp, #32
10042234:	af00      	add	r7, sp, #0
10042236:	6078      	str	r0, [r7, #4]
10042238:	0008      	movs	r0, r1
1004223a:	0011      	movs	r1, r2
1004223c:	1cfb      	adds	r3, r7, #3
1004223e:	1c02      	adds	r2, r0, #0
10042240:	701a      	strb	r2, [r3, #0]
10042242:	1cbb      	adds	r3, r7, #2
10042244:	1c0a      	adds	r2, r1, #0
10042246:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
10042248:	687b      	ldr	r3, [r7, #4]
1004224a:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
1004224c:	1cfb      	adds	r3, r7, #3
1004224e:	781b      	ldrb	r3, [r3, #0]
10042250:	2b01      	cmp	r3, #1
10042252:	d105      	bne.n	10042260 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 6;
10042254:	2306      	movs	r3, #6
10042256:	60bb      	str	r3, [r7, #8]
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
10042258:	68bb      	ldr	r3, [r7, #8]
1004225a:	3302      	adds	r3, #2
1004225c:	61fb      	str	r3, [r7, #28]
1004225e:	e015      	b.n	1004228c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
10042260:	1cfb      	adds	r3, r7, #3
10042262:	781b      	ldrb	r3, [r3, #0]
10042264:	2b00      	cmp	r3, #0
10042266:	d105      	bne.n	10042274 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 4;
10042268:	2304      	movs	r3, #4
1004226a:	60fb      	str	r3, [r7, #12]
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
1004226c:	68fb      	ldr	r3, [r7, #12]
1004226e:	3302      	adds	r3, #2
10042270:	61fb      	str	r3, [r7, #28]
10042272:	e00b      	b.n	1004228c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10042274:	1cfb      	adds	r3, r7, #3
10042276:	781b      	ldrb	r3, [r3, #0]
10042278:	2b02      	cmp	r3, #2
1004227a:	d105      	bne.n	10042288 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
#else
        const int32_t Adjust_Value = 2;
1004227c:	2302      	movs	r3, #2
1004227e:	613b      	str	r3, [r7, #16]
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
10042280:	693b      	ldr	r3, [r7, #16]
10042282:	3304      	adds	r3, #4
10042284:	61fb      	str	r3, [r7, #28]
10042286:	e001      	b.n	1004228c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
10042288:	2300      	movs	r3, #0
1004228a:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
1004228c:	1cfb      	adds	r3, r7, #3
1004228e:	781b      	ldrb	r3, [r3, #0]
10042290:	2b01      	cmp	r3, #1
10042292:	d003      	beq.n	1004229c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
10042294:	1cfb      	adds	r3, r7, #3
10042296:	781b      	ldrb	r3, [r3, #0]
10042298:	2b02      	cmp	r3, #2
1004229a:	d109      	bne.n	100422b0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
1004229c:	1cbb      	adds	r3, r7, #2
1004229e:	781b      	ldrb	r3, [r3, #0]
100422a0:	2b01      	cmp	r3, #1
100422a2:	d102      	bne.n	100422aa <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
100422a4:	239b      	movs	r3, #155	@ 0x9b
100422a6:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100422a8:	e013      	b.n	100422d2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
100422aa:	233d      	movs	r3, #61	@ 0x3d
100422ac:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100422ae:	e010      	b.n	100422d2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
100422b0:	1cfb      	adds	r3, r7, #3
100422b2:	781b      	ldrb	r3, [r3, #0]
100422b4:	2b00      	cmp	r3, #0
100422b6:	d003      	beq.n	100422c0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
100422b8:	1cfb      	adds	r3, r7, #3
100422ba:	781b      	ldrb	r3, [r3, #0]
100422bc:	2b03      	cmp	r3, #3
100422be:	d108      	bne.n	100422d2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
100422c0:	1cbb      	adds	r3, r7, #2
100422c2:	781b      	ldrb	r3, [r3, #0]
100422c4:	2b01      	cmp	r3, #1
100422c6:	d102      	bne.n	100422ce <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
100422c8:	2399      	movs	r3, #153	@ 0x99
100422ca:	61bb      	str	r3, [r7, #24]
100422cc:	e001      	b.n	100422d2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
100422ce:	233b      	movs	r3, #59	@ 0x3b
100422d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
100422d2:	69ba      	ldr	r2, [r7, #24]
100422d4:	69fb      	ldr	r3, [r7, #28]
100422d6:	18d3      	adds	r3, r2, r3
100422d8:	697a      	ldr	r2, [r7, #20]
100422da:	1ad3      	subs	r3, r2, r3
100422dc:	617b      	str	r3, [r7, #20]

    return Timeout;
100422de:	697b      	ldr	r3, [r7, #20]
}
100422e0:	0018      	movs	r0, r3
100422e2:	46bd      	mov	sp, r7
100422e4:	b008      	add	sp, #32
100422e6:	bd80      	pop	{r7, pc}

100422e8 <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
100422e8:	b580      	push	{r7, lr}
100422ea:	b082      	sub	sp, #8
100422ec:	af00      	add	r7, sp, #0
100422ee:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
100422f0:	687b      	ldr	r3, [r7, #4]
100422f2:	0018      	movs	r0, r3
100422f4:	f7ff ff6c 	bl	100421d0 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
100422f8:	46c0      	nop			@ (mov r8, r8)
100422fa:	46bd      	mov	sp, r7
100422fc:	b002      	add	sp, #8
100422fe:	bd80      	pop	{r7, pc}

10042300 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
10042300:	b580      	push	{r7, lr}
10042302:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
10042304:	2001      	movs	r0, #1
10042306:	f7ff ff7d 	bl	10042204 <LL_RADIO_BlueSetClearSemaphoreRequest>
}
1004230a:	46c0      	nop			@ (mov r8, r8)
1004230c:	46bd      	mov	sp, r7
1004230e:	bd80      	pop	{r7, pc}

10042310 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
10042310:	b580      	push	{r7, lr}
10042312:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
10042314:	f7ff fbfa 	bl	10041b0c <LL_RADIO_GlobalDisableBlue>
}
10042318:	46c0      	nop			@ (mov r8, r8)
1004231a:	46bd      	mov	sp, r7
1004231c:	bd80      	pop	{r7, pc}

1004231e <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
1004231e:	b580      	push	{r7, lr}
10042320:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
10042322:	f7ff fbe5 	bl	10041af0 <LL_RADIO_GlobalEnableBlue>
}
10042326:	46c0      	nop			@ (mov r8, r8)
10042328:	46bd      	mov	sp, r7
1004232a:	bd80      	pop	{r7, pc}

1004232c <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
1004232c:	b580      	push	{r7, lr}
1004232e:	b082      	sub	sp, #8
10042330:	af00      	add	r7, sp, #0
10042332:	0002      	movs	r2, r0
10042334:	1dfb      	adds	r3, r7, #7
10042336:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
10042338:	1dfb      	adds	r3, r7, #7
1004233a:	781b      	ldrb	r3, [r3, #0]
1004233c:	0018      	movs	r0, r3
1004233e:	f7ff fbc1 	bl	10041ac4 <LL_RADIO_SetCurrentConnectionMachineNumber>
}
10042342:	46c0      	nop			@ (mov r8, r8)
10042344:	46bd      	mov	sp, r7
10042346:	b002      	add	sp, #8
10042348:	bd80      	pop	{r7, pc}
	...

1004234c <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
1004234c:	b580      	push	{r7, lr}
1004234e:	b082      	sub	sp, #8
10042350:	af00      	add	r7, sp, #0
10042352:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10042354:	687b      	ldr	r3, [r7, #4]
10042356:	4a03      	ldr	r2, [pc, #12]	@ (10042364 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
10042358:	4013      	ands	r3, r2
}
1004235a:	0018      	movs	r0, r3
1004235c:	46bd      	mov	sp, r7
1004235e:	b002      	add	sp, #8
10042360:	bd80      	pop	{r7, pc}
10042362:	46c0      	nop			@ (mov r8, r8)
10042364:	00c9df30 	.word	0x00c9df30

10042368 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
10042368:	b580      	push	{r7, lr}
1004236a:	b082      	sub	sp, #8
1004236c:	af00      	add	r7, sp, #0
1004236e:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
10042370:	687a      	ldr	r2, [r7, #4]
10042372:	2380      	movs	r3, #128	@ 0x80
10042374:	03db      	lsls	r3, r3, #15
10042376:	4013      	ands	r3, r2
}
10042378:	0018      	movs	r0, r3
1004237a:	46bd      	mov	sp, r7
1004237c:	b002      	add	sp, #8
1004237e:	bd80      	pop	{r7, pc}

10042380 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
10042380:	b580      	push	{r7, lr}
10042382:	b082      	sub	sp, #8
10042384:	af00      	add	r7, sp, #0
10042386:	6078      	str	r0, [r7, #4]
    return 0;
10042388:	2300      	movs	r3, #0
}
1004238a:	0018      	movs	r0, r3
1004238c:	46bd      	mov	sp, r7
1004238e:	b002      	add	sp, #8
10042390:	bd80      	pop	{r7, pc}

10042392 <BLEPLAT_CNTR_IntGetIntStatusDone>:
}
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
10042392:	b580      	push	{r7, lr}
10042394:	b082      	sub	sp, #8
10042396:	af00      	add	r7, sp, #0
10042398:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
1004239a:	687a      	ldr	r2, [r7, #4]
1004239c:	2380      	movs	r3, #128	@ 0x80
1004239e:	049b      	lsls	r3, r3, #18
100423a0:	4013      	ands	r3, r2
}
100423a2:	0018      	movs	r0, r3
100423a4:	46bd      	mov	sp, r7
100423a6:	b002      	add	sp, #8
100423a8:	bd80      	pop	{r7, pc}

100423aa <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
}
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
100423aa:	b580      	push	{r7, lr}
100423ac:	b082      	sub	sp, #8
100423ae:	af00      	add	r7, sp, #0
100423b0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
100423b2:	687a      	ldr	r2, [r7, #4]
100423b4:	2380      	movs	r3, #128	@ 0x80
100423b6:	025b      	lsls	r3, r3, #9
100423b8:	4013      	ands	r3, r2
}
100423ba:	0018      	movs	r0, r3
100423bc:	46bd      	mov	sp, r7
100423be:	b002      	add	sp, #8
100423c0:	bd80      	pop	{r7, pc}

100423c2 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
100423c2:	b580      	push	{r7, lr}
100423c4:	b082      	sub	sp, #8
100423c6:	af00      	add	r7, sp, #0
100423c8:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
100423ca:	687a      	ldr	r2, [r7, #4]
100423cc:	2380      	movs	r3, #128	@ 0x80
100423ce:	039b      	lsls	r3, r3, #14
100423d0:	4013      	ands	r3, r2
}
100423d2:	0018      	movs	r0, r3
100423d4:	46bd      	mov	sp, r7
100423d6:	b002      	add	sp, #8
100423d8:	bd80      	pop	{r7, pc}

100423da <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
100423da:	b580      	push	{r7, lr}
100423dc:	b082      	sub	sp, #8
100423de:	af00      	add	r7, sp, #0
100423e0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
100423e2:	687a      	ldr	r2, [r7, #4]
100423e4:	2380      	movs	r3, #128	@ 0x80
100423e6:	009b      	lsls	r3, r3, #2
100423e8:	4013      	ands	r3, r2
}
100423ea:	0018      	movs	r0, r3
100423ec:	46bd      	mov	sp, r7
100423ee:	b002      	add	sp, #8
100423f0:	bd80      	pop	{r7, pc}

100423f2 <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
100423f2:	b580      	push	{r7, lr}
100423f4:	b082      	sub	sp, #8
100423f6:	af00      	add	r7, sp, #0
100423f8:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
100423fa:	687a      	ldr	r2, [r7, #4]
100423fc:	2380      	movs	r3, #128	@ 0x80
100423fe:	011b      	lsls	r3, r3, #4
10042400:	4013      	ands	r3, r2
}
10042402:	0018      	movs	r0, r3
10042404:	46bd      	mov	sp, r7
10042406:	b002      	add	sp, #8
10042408:	bd80      	pop	{r7, pc}

1004240a <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
1004240a:	b580      	push	{r7, lr}
1004240c:	b082      	sub	sp, #8
1004240e:	af00      	add	r7, sp, #0
10042410:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
10042412:	687b      	ldr	r3, [r7, #4]
10042414:	0fdb      	lsrs	r3, r3, #31
10042416:	07db      	lsls	r3, r3, #31
}
10042418:	0018      	movs	r0, r3
1004241a:	46bd      	mov	sp, r7
1004241c:	b002      	add	sp, #8
1004241e:	bd80      	pop	{r7, pc}

10042420 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
10042420:	b580      	push	{r7, lr}
10042422:	b082      	sub	sp, #8
10042424:	af00      	add	r7, sp, #0
10042426:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
10042428:	687b      	ldr	r3, [r7, #4]
1004242a:	2240      	movs	r2, #64	@ 0x40
1004242c:	4013      	ands	r3, r2
}
1004242e:	0018      	movs	r0, r3
10042430:	46bd      	mov	sp, r7
10042432:	b002      	add	sp, #8
10042434:	bd80      	pop	{r7, pc}

10042436 <BLEPLAT_CNTR_PacketClrIncChan>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042436:	b580      	push	{r7, lr}
10042438:	b082      	sub	sp, #8
1004243a:	af00      	add	r7, sp, #0
1004243c:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
1004243e:	687b      	ldr	r3, [r7, #4]
10042440:	0018      	movs	r0, r3
10042442:	f7ff fdef 	bl	10042024 <LL_RADIO_IncrementerChannel_Disable>
}
10042446:	46c0      	nop			@ (mov r8, r8)
10042448:	46bd      	mov	sp, r7
1004244a:	b002      	add	sp, #8
1004244c:	bd80      	pop	{r7, pc}

1004244e <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004244e:	b580      	push	{r7, lr}
10042450:	b082      	sub	sp, #8
10042452:	af00      	add	r7, sp, #0
10042454:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10042456:	687b      	ldr	r3, [r7, #4]
10042458:	2100      	movs	r1, #0
1004245a:	0018      	movs	r0, r3
1004245c:	f7ff fda4 	bl	10041fa8 <LL_RADIO_SetCalibrationRequest>
}
10042460:	46c0      	nop			@ (mov r8, r8)
10042462:	46bd      	mov	sp, r7
10042464:	b002      	add	sp, #8
10042466:	bd80      	pop	{r7, pc}

10042468 <BLEPLAT_CNTR_PacketInitTo0>:
{
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
}

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042468:	b580      	push	{r7, lr}
1004246a:	b082      	sub	sp, #8
1004246c:	af00      	add	r7, sp, #0
1004246e:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10042470:	687b      	ldr	r3, [r7, #4]
10042472:	2210      	movs	r2, #16
10042474:	2100      	movs	r1, #0
10042476:	0018      	movs	r0, r3
10042478:	f00b fa1c 	bl	1004d8b4 <memset>
}
1004247c:	46c0      	nop			@ (mov r8, r8)
1004247e:	46bd      	mov	sp, r7
10042480:	b002      	add	sp, #8
10042482:	bd80      	pop	{r7, pc}

10042484 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042484:	b580      	push	{r7, lr}
10042486:	b082      	sub	sp, #8
10042488:	af00      	add	r7, sp, #0
1004248a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004248c:	687b      	ldr	r3, [r7, #4]
1004248e:	2101      	movs	r1, #1
10042490:	0018      	movs	r0, r3
10042492:	f7ff fdb2 	bl	10041ffa <LL_RADIO_SetAdvertise>
}
10042496:	46c0      	nop			@ (mov r8, r8)
10042498:	46bd      	mov	sp, r7
1004249a:	b002      	add	sp, #8
1004249c:	bd80      	pop	{r7, pc}

1004249e <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
1004249e:	b580      	push	{r7, lr}
100424a0:	b082      	sub	sp, #8
100424a2:	af00      	add	r7, sp, #0
100424a4:	6078      	str	r0, [r7, #4]
100424a6:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
100424a8:	683a      	ldr	r2, [r7, #0]
100424aa:	687b      	ldr	r3, [r7, #4]
100424ac:	0011      	movs	r1, r2
100424ae:	0018      	movs	r0, r3
100424b0:	f7ff fe10 	bl	100420d4 <LL_RADIO_SetDataPointer>
}
100424b4:	46c0      	nop			@ (mov r8, r8)
100424b6:	46bd      	mov	sp, r7
100424b8:	b002      	add	sp, #8
100424ba:	bd80      	pop	{r7, pc}

100424bc <BLEPLAT_CNTR_PacketSetIntDone>:
{
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
}

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100424bc:	b580      	push	{r7, lr}
100424be:	b082      	sub	sp, #8
100424c0:	af00      	add	r7, sp, #0
100424c2:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
100424c4:	687b      	ldr	r3, [r7, #4]
100424c6:	0018      	movs	r0, r3
100424c8:	f7ff fe64 	bl	10042194 <LL_RADIO_IntDone_Enable>
}
100424cc:	46c0      	nop			@ (mov r8, r8)
100424ce:	46bd      	mov	sp, r7
100424d0:	b002      	add	sp, #8
100424d2:	bd80      	pop	{r7, pc}

100424d4 <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100424d4:	b580      	push	{r7, lr}
100424d6:	b082      	sub	sp, #8
100424d8:	af00      	add	r7, sp, #0
100424da:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
100424dc:	687b      	ldr	r3, [r7, #4]
100424de:	0018      	movs	r0, r3
100424e0:	f7ff fe67 	bl	100421b2 <LL_RADIO_IntRcvOk_Enable>
}
100424e4:	46c0      	nop			@ (mov r8, r8)
100424e6:	46bd      	mov	sp, r7
100424e8:	b002      	add	sp, #8
100424ea:	bd80      	pop	{r7, pc}

100424ec <BLEPLAT_CNTR_PacketSetKeepsemareq>:
{
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
}

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100424ec:	b580      	push	{r7, lr}
100424ee:	b082      	sub	sp, #8
100424f0:	af00      	add	r7, sp, #0
100424f2:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100424f4:	687b      	ldr	r3, [r7, #4]
100424f6:	2101      	movs	r1, #1
100424f8:	0018      	movs	r0, r3
100424fa:	f7ff fd69 	bl	10041fd0 <LL_RADIO_SetKeepSemaRequest>
}
100424fe:	46c0      	nop			@ (mov r8, r8)
10042500:	46bd      	mov	sp, r7
10042502:	b002      	add	sp, #8
10042504:	bd80      	pop	{r7, pc}

10042506 <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
10042506:	b580      	push	{r7, lr}
10042508:	b082      	sub	sp, #8
1004250a:	af00      	add	r7, sp, #0
1004250c:	6078      	str	r0, [r7, #4]
1004250e:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
10042510:	683a      	ldr	r2, [r7, #0]
10042512:	687b      	ldr	r3, [r7, #4]
10042514:	0011      	movs	r1, r2
10042516:	0018      	movs	r0, r3
10042518:	f7ff fd38 	bl	10041f8c <LL_RADIO_SetNextPointer>
}
1004251c:	46c0      	nop			@ (mov r8, r8)
1004251e:	46bd      	mov	sp, r7
10042520:	b002      	add	sp, #8
10042522:	bd80      	pop	{r7, pc}

10042524 <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042524:	b580      	push	{r7, lr}
10042526:	b082      	sub	sp, #8
10042528:	af00      	add	r7, sp, #0
1004252a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
1004252c:	687b      	ldr	r3, [r7, #4]
1004252e:	2100      	movs	r1, #0
10042530:	0018      	movs	r0, r3
10042532:	f7ff fd87 	bl	10042044 <LL_RADIO_SetNextTxMode>
}
10042536:	46c0      	nop			@ (mov r8, r8)
10042538:	46bd      	mov	sp, r7
1004253a:	b002      	add	sp, #8
1004253c:	bd80      	pop	{r7, pc}

1004253e <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
1004253e:	b580      	push	{r7, lr}
10042540:	b082      	sub	sp, #8
10042542:	af00      	add	r7, sp, #0
10042544:	6078      	str	r0, [r7, #4]
10042546:	000a      	movs	r2, r1
10042548:	1cfb      	adds	r3, r7, #3
1004254a:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
1004254c:	46c0      	nop			@ (mov r8, r8)
1004254e:	46bd      	mov	sp, r7
10042550:	b002      	add	sp, #8
10042552:	bd80      	pop	{r7, pc}

10042554 <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042554:	b580      	push	{r7, lr}
10042556:	b082      	sub	sp, #8
10042558:	af00      	add	r7, sp, #0
1004255a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004255c:	687b      	ldr	r3, [r7, #4]
1004255e:	2101      	movs	r1, #1
10042560:	0018      	movs	r0, r3
10042562:	f7ff fd6f 	bl	10042044 <LL_RADIO_SetNextTxMode>
}
10042566:	46c0      	nop			@ (mov r8, r8)
10042568:	46bd      	mov	sp, r7
1004256a:	b002      	add	sp, #8
1004256c:	bd80      	pop	{r7, pc}

1004256e <BLEPLAT_CNTR_PacketSetPllTrig>:
{
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
}

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004256e:	b580      	push	{r7, lr}
10042570:	b082      	sub	sp, #8
10042572:	af00      	add	r7, sp, #0
10042574:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042576:	687b      	ldr	r3, [r7, #4]
10042578:	2101      	movs	r1, #1
1004257a:	0018      	movs	r0, r3
1004257c:	f7ff fd14 	bl	10041fa8 <LL_RADIO_SetCalibrationRequest>
}
10042580:	46c0      	nop			@ (mov r8, r8)
10042582:	46bd      	mov	sp, r7
10042584:	b002      	add	sp, #8
10042586:	bd80      	pop	{r7, pc}

10042588 <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042588:	b580      	push	{r7, lr}
1004258a:	b082      	sub	sp, #8
1004258c:	af00      	add	r7, sp, #0
1004258e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042590:	687b      	ldr	r3, [r7, #4]
10042592:	2101      	movs	r1, #1
10042594:	0018      	movs	r0, r3
10042596:	f7ff fd6d 	bl	10042074 <LL_RADIO_SetAllTableDataReady>
}
1004259a:	46c0      	nop			@ (mov r8, r8)
1004259c:	46bd      	mov	sp, r7
1004259e:	b002      	add	sp, #8
100425a0:	bd80      	pop	{r7, pc}

100425a2 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
100425a2:	b580      	push	{r7, lr}
100425a4:	b082      	sub	sp, #8
100425a6:	af00      	add	r7, sp, #0
100425a8:	6078      	str	r0, [r7, #4]
100425aa:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
100425ac:	683a      	ldr	r2, [r7, #0]
100425ae:	687b      	ldr	r3, [r7, #4]
100425b0:	0011      	movs	r1, r2
100425b2:	0018      	movs	r0, r3
100425b4:	f7ff fd9c 	bl	100420f0 <LL_RADIO_SetTimer2Triggering>
}
100425b8:	46c0      	nop			@ (mov r8, r8)
100425ba:	46bd      	mov	sp, r7
100425bc:	b002      	add	sp, #8
100425be:	bd80      	pop	{r7, pc}

100425c0 <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100425c0:	b580      	push	{r7, lr}
100425c2:	b082      	sub	sp, #8
100425c4:	af00      	add	r7, sp, #0
100425c6:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
100425c8:	687b      	ldr	r3, [r7, #4]
100425ca:	0018      	movs	r0, r3
100425cc:	f7ff fda3 	bl	10042116 <LL_RADIO_Timer2_Enable>
}
100425d0:	46c0      	nop			@ (mov r8, r8)
100425d2:	46bd      	mov	sp, r7
100425d4:	b002      	add	sp, #8
100425d6:	bd80      	pop	{r7, pc}

100425d8 <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100425d8:	b580      	push	{r7, lr}
100425da:	b082      	sub	sp, #8
100425dc:	af00      	add	r7, sp, #0
100425de:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100425e0:	687b      	ldr	r3, [r7, #4]
100425e2:	2101      	movs	r1, #1
100425e4:	0018      	movs	r0, r3
100425e6:	f7ff fdbd 	bl	10042164 <LL_RADIO_SetTrigDone>
}
100425ea:	46c0      	nop			@ (mov r8, r8)
100425ec:	46bd      	mov	sp, r7
100425ee:	b002      	add	sp, #8
100425f0:	bd80      	pop	{r7, pc}

100425f2 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100425f2:	b580      	push	{r7, lr}
100425f4:	b082      	sub	sp, #8
100425f6:	af00      	add	r7, sp, #0
100425f8:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100425fa:	687b      	ldr	r3, [r7, #4]
100425fc:	2101      	movs	r1, #1
100425fe:	0018      	movs	r0, r3
10042600:	f7ff fd98 	bl	10042134 <LL_RADIO_SetTrigRcv>
}
10042604:	46c0      	nop			@ (mov r8, r8)
10042606:	46bd      	mov	sp, r7
10042608:	b002      	add	sp, #8
1004260a:	bd80      	pop	{r7, pc}

1004260c <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004260c:	b580      	push	{r7, lr}
1004260e:	b082      	sub	sp, #8
10042610:	af00      	add	r7, sp, #0
10042612:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042614:	687b      	ldr	r3, [r7, #4]
10042616:	2101      	movs	r1, #1
10042618:	0018      	movs	r0, r3
1004261a:	f7ff fd43 	bl	100420a4 <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004261e:	687b      	ldr	r3, [r7, #4]
10042620:	2101      	movs	r1, #1
10042622:	0018      	movs	r0, r3
10042624:	f7ff fd26 	bl	10042074 <LL_RADIO_SetAllTableDataReady>
}
10042628:	46c0      	nop			@ (mov r8, r8)
1004262a:	46bd      	mov	sp, r7
1004262c:	b002      	add	sp, #8
1004262e:	bd80      	pop	{r7, pc}

10042630 <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
10042630:	b580      	push	{r7, lr}
10042632:	b082      	sub	sp, #8
10042634:	af00      	add	r7, sp, #0
10042636:	6078      	str	r0, [r7, #4]
10042638:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
1004263a:	683b      	ldr	r3, [r7, #0]
1004263c:	031b      	lsls	r3, r3, #12
1004263e:	0b1b      	lsrs	r3, r3, #12
10042640:	0018      	movs	r0, r3
10042642:	f7ff fa71 	bl	10041b28 <LL_RADIO_SetReceiveWindowTimeout>
}
10042646:	46c0      	nop			@ (mov r8, r8)
10042648:	46bd      	mov	sp, r7
1004264a:	b002      	add	sp, #8
1004264c:	bd80      	pop	{r7, pc}

1004264e <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
1004264e:	b580      	push	{r7, lr}
10042650:	b082      	sub	sp, #8
10042652:	af00      	add	r7, sp, #0
10042654:	0002      	movs	r2, r0
10042656:	6039      	str	r1, [r7, #0]
10042658:	1dfb      	adds	r3, r7, #7
1004265a:	701a      	strb	r2, [r3, #0]
    if(enable)
1004265c:	683b      	ldr	r3, [r7, #0]
1004265e:	2b00      	cmp	r3, #0
10042660:	d005      	beq.n	1004266e <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
10042662:	1dfb      	adds	r3, r7, #7
10042664:	781b      	ldrb	r3, [r3, #0]
10042666:	0018      	movs	r0, r3
10042668:	f7ff fa78 	bl	10041b5c <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
1004266c:	e004      	b.n	10042678 <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
1004266e:	1dfb      	adds	r3, r7, #7
10042670:	781b      	ldrb	r3, [r3, #0]
10042672:	0018      	movs	r0, r3
10042674:	f7ff fa90 	bl	10041b98 <LL_RADIO_RadioCommandList_Disable>
}
10042678:	46c0      	nop			@ (mov r8, r8)
1004267a:	46bd      	mov	sp, r7
1004267c:	b002      	add	sp, #8
1004267e:	bd80      	pop	{r7, pc}

10042680 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
10042680:	b580      	push	{r7, lr}
10042682:	b082      	sub	sp, #8
10042684:	af00      	add	r7, sp, #0
10042686:	0002      	movs	r2, r0
10042688:	1dfb      	adds	r3, r7, #7
1004268a:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
1004268c:	1dfb      	adds	r3, r7, #7
1004268e:	781b      	ldrb	r3, [r3, #0]
10042690:	225c      	movs	r2, #92	@ 0x5c
10042692:	4353      	muls	r3, r2
10042694:	4a08      	ldr	r2, [pc, #32]	@ (100426b8 <BLEPLAT_CNTR_SmInitTo0+0x38>)
10042696:	4694      	mov	ip, r2
10042698:	4463      	add	r3, ip
1004269a:	225c      	movs	r2, #92	@ 0x5c
1004269c:	2100      	movs	r1, #0
1004269e:	0018      	movs	r0, r3
100426a0:	f00b f908 	bl	1004d8b4 <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
100426a4:	1dfb      	adds	r3, r7, #7
100426a6:	781b      	ldrb	r3, [r3, #0]
100426a8:	2101      	movs	r1, #1
100426aa:	0018      	movs	r0, r3
100426ac:	f7ff ffcf 	bl	1004264e <BLEPLAT_CNTR_SmEnRadioConfig>
}
100426b0:	46c0      	nop			@ (mov r8, r8)
100426b2:	46bd      	mov	sp, r7
100426b4:	b002      	add	sp, #8
100426b6:	bd80      	pop	{r7, pc}
100426b8:	200000dc 	.word	0x200000dc

100426bc <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
100426bc:	b580      	push	{r7, lr}
100426be:	b082      	sub	sp, #8
100426c0:	af00      	add	r7, sp, #0
100426c2:	0002      	movs	r2, r0
100426c4:	6039      	str	r1, [r7, #0]
100426c6:	1dfb      	adds	r3, r7, #7
100426c8:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
100426ca:	683a      	ldr	r2, [r7, #0]
100426cc:	1dfb      	adds	r3, r7, #7
100426ce:	781b      	ldrb	r3, [r3, #0]
100426d0:	0011      	movs	r1, r2
100426d2:	0018      	movs	r0, r3
100426d4:	f7ff fb6e 	bl	10041db4 <LL_RADIO_SetAccessAddress>
}
100426d8:	46c0      	nop			@ (mov r8, r8)
100426da:	46bd      	mov	sp, r7
100426dc:	b002      	add	sp, #8
100426de:	bd80      	pop	{r7, pc}

100426e0 <BLEPLAT_CNTR_SmSetCrcInit>:
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
}

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
100426e0:	b580      	push	{r7, lr}
100426e2:	b082      	sub	sp, #8
100426e4:	af00      	add	r7, sp, #0
100426e6:	0002      	movs	r2, r0
100426e8:	6039      	str	r1, [r7, #0]
100426ea:	1dfb      	adds	r3, r7, #7
100426ec:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
100426ee:	683a      	ldr	r2, [r7, #0]
100426f0:	1dfb      	adds	r3, r7, #7
100426f2:	781b      	ldrb	r3, [r3, #0]
100426f4:	0011      	movs	r1, r2
100426f6:	0018      	movs	r0, r3
100426f8:	f7ff fb7a 	bl	10041df0 <LL_RADIO_SetCRCInitializationValue>
}
100426fc:	46c0      	nop			@ (mov r8, r8)
100426fe:	46bd      	mov	sp, r7
10042700:	b002      	add	sp, #8
10042702:	bd80      	pop	{r7, pc}

10042704 <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
10042704:	b580      	push	{r7, lr}
10042706:	b082      	sub	sp, #8
10042708:	af00      	add	r7, sp, #0
1004270a:	0002      	movs	r2, r0
1004270c:	1dfb      	adds	r3, r7, #7
1004270e:	701a      	strb	r2, [r3, #0]
10042710:	1dbb      	adds	r3, r7, #6
10042712:	1c0a      	adds	r2, r1, #0
10042714:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
10042716:	1dbb      	adds	r3, r7, #6
10042718:	781a      	ldrb	r2, [r3, #0]
1004271a:	1dfb      	adds	r3, r7, #7
1004271c:	781b      	ldrb	r3, [r3, #0]
1004271e:	0011      	movs	r1, r2
10042720:	0018      	movs	r0, r3
10042722:	f7ff fb89 	bl	10041e38 <LL_RADIO_SetMaximumReceiveLength>
}
10042726:	46c0      	nop			@ (mov r8, r8)
10042728:	46bd      	mov	sp, r7
1004272a:	b002      	add	sp, #8
1004272c:	bd80      	pop	{r7, pc}

1004272e <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
1004272e:	b580      	push	{r7, lr}
10042730:	b082      	sub	sp, #8
10042732:	af00      	add	r7, sp, #0
10042734:	0002      	movs	r2, r0
10042736:	1dfb      	adds	r3, r7, #7
10042738:	701a      	strb	r2, [r3, #0]
1004273a:	1dbb      	adds	r3, r7, #6
1004273c:	1c0a      	adds	r2, r1, #0
1004273e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
10042740:	1dbb      	adds	r3, r7, #6
10042742:	781a      	ldrb	r2, [r3, #0]
10042744:	1dfb      	adds	r3, r7, #7
10042746:	781b      	ldrb	r3, [r3, #0]
10042748:	0011      	movs	r1, r2
1004274a:	0018      	movs	r0, r3
1004274c:	f7ff fbf6 	bl	10041f3c <LL_RADIO_SetHopIncrement>
}
10042750:	46c0      	nop			@ (mov r8, r8)
10042752:	46bd      	mov	sp, r7
10042754:	b002      	add	sp, #8
10042756:	bd80      	pop	{r7, pc}

10042758 <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
10042758:	b580      	push	{r7, lr}
1004275a:	b082      	sub	sp, #8
1004275c:	af00      	add	r7, sp, #0
1004275e:	0002      	movs	r2, r0
10042760:	1dfb      	adds	r3, r7, #7
10042762:	701a      	strb	r2, [r3, #0]
10042764:	1dbb      	adds	r3, r7, #6
10042766:	1c0a      	adds	r2, r1, #0
10042768:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
1004276a:	1dbb      	adds	r3, r7, #6
1004276c:	781a      	ldrb	r2, [r3, #0]
1004276e:	1dfb      	adds	r3, r7, #7
10042770:	781b      	ldrb	r3, [r3, #0]
10042772:	0011      	movs	r1, r2
10042774:	0018      	movs	r0, r3
10042776:	f7ff fa69 	bl	10041c4c <LL_RADIO_SetRemapChannel>
}
1004277a:	46c0      	nop			@ (mov r8, r8)
1004277c:	46bd      	mov	sp, r7
1004277e:	b002      	add	sp, #8
10042780:	bd80      	pop	{r7, pc}

10042782 <BLEPLAT_CNTR_SmSetRxMode>:
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
}

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10042782:	b580      	push	{r7, lr}
10042784:	b082      	sub	sp, #8
10042786:	af00      	add	r7, sp, #0
10042788:	0002      	movs	r2, r0
1004278a:	1dfb      	adds	r3, r7, #7
1004278c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
1004278e:	1dfb      	adds	r3, r7, #7
10042790:	781b      	ldrb	r3, [r3, #0]
10042792:	0018      	movs	r0, r3
10042794:	f7ff fa3c 	bl	10041c10 <LL_RADIO_TxMode_Disable>
}
10042798:	46c0      	nop			@ (mov r8, r8)
1004279a:	46bd      	mov	sp, r7
1004279c:	b002      	add	sp, #8
1004279e:	bd80      	pop	{r7, pc}

100427a0 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100427a0:	b580      	push	{r7, lr}
100427a2:	b082      	sub	sp, #8
100427a4:	af00      	add	r7, sp, #0
100427a6:	0002      	movs	r2, r0
100427a8:	6039      	str	r1, [r7, #0]
100427aa:	1dfb      	adds	r3, r7, #7
100427ac:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
100427ae:	683a      	ldr	r2, [r7, #0]
100427b0:	1dfb      	adds	r3, r7, #7
100427b2:	781b      	ldrb	r3, [r3, #0]
100427b4:	0011      	movs	r1, r2
100427b6:	0018      	movs	r0, r3
100427b8:	f7ff fade 	bl	10041d78 <LL_RADIO_SetRcvPoint>
}
100427bc:	46c0      	nop			@ (mov r8, r8)
100427be:	46bd      	mov	sp, r7
100427c0:	b002      	add	sp, #8
100427c2:	bd80      	pop	{r7, pc}

100427c4 <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
100427c4:	b580      	push	{r7, lr}
100427c6:	b082      	sub	sp, #8
100427c8:	af00      	add	r7, sp, #0
100427ca:	0002      	movs	r2, r0
100427cc:	1dfb      	adds	r3, r7, #7
100427ce:	701a      	strb	r2, [r3, #0]
100427d0:	1dbb      	adds	r3, r7, #6
100427d2:	1c0a      	adds	r2, r1, #0
100427d4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
100427d6:	1dbb      	adds	r3, r7, #6
100427d8:	781a      	ldrb	r2, [r3, #0]
100427da:	1dfb      	adds	r3, r7, #7
100427dc:	781b      	ldrb	r3, [r3, #0]
100427de:	0011      	movs	r1, r2
100427e0:	0018      	movs	r0, r3
100427e2:	f7ff fa83 	bl	10041cec <LL_RADIO_SetReceptionPhy>
}
100427e6:	46c0      	nop			@ (mov r8, r8)
100427e8:	46bd      	mov	sp, r7
100427ea:	b002      	add	sp, #8
100427ec:	bd80      	pop	{r7, pc}

100427ee <BLEPLAT_CNTR_SmSetTxMode>:
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
}

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
100427ee:	b580      	push	{r7, lr}
100427f0:	b082      	sub	sp, #8
100427f2:	af00      	add	r7, sp, #0
100427f4:	0002      	movs	r2, r0
100427f6:	1dfb      	adds	r3, r7, #7
100427f8:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
100427fa:	1dfb      	adds	r3, r7, #7
100427fc:	781b      	ldrb	r3, [r3, #0]
100427fe:	0018      	movs	r0, r3
10042800:	f7ff f9e8 	bl	10041bd4 <LL_RADIO_TxMode_Enable>
}
10042804:	46c0      	nop			@ (mov r8, r8)
10042806:	46bd      	mov	sp, r7
10042808:	b002      	add	sp, #8
1004280a:	bd80      	pop	{r7, pc}

1004280c <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004280c:	b580      	push	{r7, lr}
1004280e:	b082      	sub	sp, #8
10042810:	af00      	add	r7, sp, #0
10042812:	0002      	movs	r2, r0
10042814:	6039      	str	r1, [r7, #0]
10042816:	1dfb      	adds	r3, r7, #7
10042818:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
1004281a:	683a      	ldr	r2, [r7, #0]
1004281c:	1dfb      	adds	r3, r7, #7
1004281e:	781b      	ldrb	r3, [r3, #0]
10042820:	0011      	movs	r1, r2
10042822:	0018      	movs	r0, r3
10042824:	f7ff fa8a 	bl	10041d3c <LL_RADIO_SetTxPoint>
}
10042828:	46c0      	nop			@ (mov r8, r8)
1004282a:	46bd      	mov	sp, r7
1004282c:	b002      	add	sp, #8
1004282e:	bd80      	pop	{r7, pc}

10042830 <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10042830:	b580      	push	{r7, lr}
10042832:	b082      	sub	sp, #8
10042834:	af00      	add	r7, sp, #0
10042836:	0002      	movs	r2, r0
10042838:	1dfb      	adds	r3, r7, #7
1004283a:	701a      	strb	r2, [r3, #0]
1004283c:	1dbb      	adds	r3, r7, #6
1004283e:	1c0a      	adds	r2, r1, #0
10042840:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10042842:	1dbb      	adds	r3, r7, #6
10042844:	781a      	ldrb	r2, [r3, #0]
10042846:	1dfb      	adds	r3, r7, #7
10042848:	781b      	ldrb	r3, [r3, #0]
1004284a:	0011      	movs	r1, r2
1004284c:	0018      	movs	r0, r3
1004284e:	f7ff fa25 	bl	10041c9c <LL_RADIO_SetTransmissionPhy>
}
10042852:	46c0      	nop			@ (mov r8, r8)
10042854:	46bd      	mov	sp, r7
10042856:	b002      	add	sp, #8
10042858:	bd80      	pop	{r7, pc}

1004285a <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
1004285a:	b580      	push	{r7, lr}
1004285c:	b082      	sub	sp, #8
1004285e:	af00      	add	r7, sp, #0
10042860:	0002      	movs	r2, r0
10042862:	1dfb      	adds	r3, r7, #7
10042864:	701a      	strb	r2, [r3, #0]
10042866:	1dbb      	adds	r3, r7, #6
10042868:	1c0a      	adds	r2, r1, #0
1004286a:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  if(paLevel == HP_PA_LEVEL)
1004286c:	1dbb      	adds	r3, r7, #6
1004286e:	781b      	ldrb	r3, [r3, #0]
10042870:	2b20      	cmp	r3, #32
10042872:	d108      	bne.n	10042886 <BLEPLAT_CNTR_SmSetTxPwr+0x2c>
  {
    LL_RADIO_TxHp_Enable(smNo);
10042874:	1dfb      	adds	r3, r7, #7
10042876:	781b      	ldrb	r3, [r3, #0]
10042878:	0018      	movs	r0, r3
1004287a:	f7ff faff 	bl	10041e7c <LL_RADIO_TxHp_Enable>
    paLevel = MAX_PA_LEVEL;
1004287e:	1dbb      	adds	r3, r7, #6
10042880:	221f      	movs	r2, #31
10042882:	701a      	strb	r2, [r3, #0]
10042884:	e004      	b.n	10042890 <BLEPLAT_CNTR_SmSetTxPwr+0x36>
  }
  else
  {
    LL_RADIO_TxHp_Disable(smNo);
10042886:	1dfb      	adds	r3, r7, #7
10042888:	781b      	ldrb	r3, [r3, #0]
1004288a:	0018      	movs	r0, r3
1004288c:	f7ff fb14 	bl	10041eb8 <LL_RADIO_TxHp_Disable>
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
10042890:	1dbb      	adds	r3, r7, #6
10042892:	781a      	ldrb	r2, [r3, #0]
10042894:	1dfb      	adds	r3, r7, #7
10042896:	781b      	ldrb	r3, [r3, #0]
10042898:	0011      	movs	r1, r2
1004289a:	0018      	movs	r0, r3
1004289c:	f7ff fb2a 	bl	10041ef4 <LL_RADIO_SetPAPower>
}
100428a0:	46c0      	nop			@ (mov r8, r8)
100428a2:	46bd      	mov	sp, r7
100428a4:	b002      	add	sp, #8
100428a6:	bd80      	pop	{r7, pc}

100428a8 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
100428a8:	4810      	ldr	r0, [pc, #64]	@ (100428ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
100428aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
100428ac:	f002 f882 	bl	100449b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
100428b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
100428b2:	e003      	b.n	100428bc <LoopCopyDataInit>

100428b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
100428b4:	4b0e      	ldr	r3, [pc, #56]	@ (100428f0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
100428b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
100428b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
100428ba:	3104      	adds	r1, #4

100428bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
100428bc:	480d      	ldr	r0, [pc, #52]	@ (100428f4 <LoopForever+0xa>)
  ldr  r3, =_edata
100428be:	4b0e      	ldr	r3, [pc, #56]	@ (100428f8 <LoopForever+0xe>)
  adds  r2, r0, r1
100428c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
100428c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
100428c4:	d3f6      	bcc.n	100428b4 <CopyDataInit>
  ldr  r2, =_sbss
100428c6:	4a0d      	ldr	r2, [pc, #52]	@ (100428fc <LoopForever+0x12>)
  b  LoopFillZerobss
100428c8:	e002      	b.n	100428d0 <LoopFillZerobss>

100428ca <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
100428ca:	2300      	movs	r3, #0
  str  r3, [r2]
100428cc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
100428ce:	3204      	adds	r2, #4

100428d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
100428d0:	4b0b      	ldr	r3, [pc, #44]	@ (10042900 <LoopForever+0x16>)
  cmp  r2, r3
100428d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
100428d4:	d3f9      	bcc.n	100428ca <FillZerobss>
  ldr  r2, =_sbssblue
100428d6:	4a0b      	ldr	r2, [pc, #44]	@ (10042904 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
100428d8:	e002      	b.n	100428e0 <LoopFillZeroBlueRam>

100428da <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
100428da:	2300      	movs	r3, #0
  str  r3, [r2]
100428dc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
100428de:	3204      	adds	r2, #4

100428e0 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
100428e0:	4b09      	ldr	r3, [pc, #36]	@ (10042908 <LoopForever+0x1e>)
  cmp  r2, r3
100428e2:	429a      	cmp	r2, r3
  bcc  FillZerobssram
100428e4:	d3f9      	bcc.n	100428da <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
100428e6:	f7fe f91d 	bl	10040b24 <main>

100428ea <LoopForever>:

LoopForever:
    b LoopForever
100428ea:	e7fe      	b.n	100428ea <LoopForever>
   ldr   r0, =_estack
100428ec:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
100428f0:	1004e88c 	.word	0x1004e88c
  ldr  r0, =_sdata
100428f4:	200007ec 	.word	0x200007ec
  ldr  r3, =_edata
100428f8:	2000089c 	.word	0x2000089c
  ldr  r2, =_sbss
100428fc:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10042900:	200007ec 	.word	0x200007ec
  ldr  r2, =_sbssblue
10042904:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10042908:	20000194 	.word	0x20000194

1004290c <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
1004290c:	e7fe      	b.n	1004290c <ADC_IRQHandler>

1004290e <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
1004290e:	b580      	push	{r7, lr}
10042910:	b082      	sub	sp, #8
10042912:	af00      	add	r7, sp, #0
10042914:	0002      	movs	r2, r0
10042916:	1dfb      	adds	r3, r7, #7
10042918:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
1004291a:	46c0      	nop			@ (mov r8, r8)
1004291c:	46bd      	mov	sp, r7
1004291e:	b002      	add	sp, #8
10042920:	bd80      	pop	{r7, pc}

10042922 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10042922:	b580      	push	{r7, lr}
10042924:	b082      	sub	sp, #8
10042926:	af00      	add	r7, sp, #0
10042928:	0002      	movs	r2, r0
1004292a:	1dfb      	adds	r3, r7, #7
1004292c:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
1004292e:	46c0      	nop			@ (mov r8, r8)
10042930:	46bd      	mov	sp, r7
10042932:	b002      	add	sp, #8
10042934:	bd80      	pop	{r7, pc}

10042936 <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10042936:	b580      	push	{r7, lr}
10042938:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
1004293a:	46c0      	nop			@ (mov r8, r8)
1004293c:	46bd      	mov	sp, r7
1004293e:	bd80      	pop	{r7, pc}

10042940 <LL_APB2_GRP1_EnableClock>:
{
10042940:	b580      	push	{r7, lr}
10042942:	b084      	sub	sp, #16
10042944:	af00      	add	r7, sp, #0
10042946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10042948:	4b07      	ldr	r3, [pc, #28]	@ (10042968 <LL_APB2_GRP1_EnableClock+0x28>)
1004294a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004294c:	4b06      	ldr	r3, [pc, #24]	@ (10042968 <LL_APB2_GRP1_EnableClock+0x28>)
1004294e:	687a      	ldr	r2, [r7, #4]
10042950:	430a      	orrs	r2, r1
10042952:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10042954:	4b04      	ldr	r3, [pc, #16]	@ (10042968 <LL_APB2_GRP1_EnableClock+0x28>)
10042956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042958:	687a      	ldr	r2, [r7, #4]
1004295a:	4013      	ands	r3, r2
1004295c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004295e:	68fb      	ldr	r3, [r7, #12]
}
10042960:	46c0      	nop			@ (mov r8, r8)
10042962:	46bd      	mov	sp, r7
10042964:	b004      	add	sp, #16
10042966:	bd80      	pop	{r7, pc}
10042968:	48400000 	.word	0x48400000

1004296c <LL_APB2_GRP1_IsEnabledClock>:
{
1004296c:	b580      	push	{r7, lr}
1004296e:	b082      	sub	sp, #8
10042970:	af00      	add	r7, sp, #0
10042972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10042974:	4b06      	ldr	r3, [pc, #24]	@ (10042990 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10042976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042978:	687a      	ldr	r2, [r7, #4]
1004297a:	4013      	ands	r3, r2
1004297c:	687a      	ldr	r2, [r7, #4]
1004297e:	429a      	cmp	r2, r3
10042980:	d101      	bne.n	10042986 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10042982:	2301      	movs	r3, #1
10042984:	e000      	b.n	10042988 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10042986:	2300      	movs	r3, #0
}
10042988:	0018      	movs	r0, r3
1004298a:	46bd      	mov	sp, r7
1004298c:	b002      	add	sp, #8
1004298e:	bd80      	pop	{r7, pc}
10042990:	48400000 	.word	0x48400000

10042994 <LL_APB2_GRP1_ForceReset>:
{
10042994:	b580      	push	{r7, lr}
10042996:	b082      	sub	sp, #8
10042998:	af00      	add	r7, sp, #0
1004299a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004299c:	4b04      	ldr	r3, [pc, #16]	@ (100429b0 <LL_APB2_GRP1_ForceReset+0x1c>)
1004299e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
100429a0:	4b03      	ldr	r3, [pc, #12]	@ (100429b0 <LL_APB2_GRP1_ForceReset+0x1c>)
100429a2:	687a      	ldr	r2, [r7, #4]
100429a4:	430a      	orrs	r2, r1
100429a6:	641a      	str	r2, [r3, #64]	@ 0x40
}
100429a8:	46c0      	nop			@ (mov r8, r8)
100429aa:	46bd      	mov	sp, r7
100429ac:	b002      	add	sp, #8
100429ae:	bd80      	pop	{r7, pc}
100429b0:	48400000 	.word	0x48400000

100429b4 <LL_APB2_GRP1_ReleaseReset>:
{
100429b4:	b580      	push	{r7, lr}
100429b6:	b082      	sub	sp, #8
100429b8:	af00      	add	r7, sp, #0
100429ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
100429bc:	4b05      	ldr	r3, [pc, #20]	@ (100429d4 <LL_APB2_GRP1_ReleaseReset+0x20>)
100429be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100429c0:	687b      	ldr	r3, [r7, #4]
100429c2:	43d9      	mvns	r1, r3
100429c4:	4b03      	ldr	r3, [pc, #12]	@ (100429d4 <LL_APB2_GRP1_ReleaseReset+0x20>)
100429c6:	400a      	ands	r2, r1
100429c8:	641a      	str	r2, [r3, #64]	@ 0x40
}
100429ca:	46c0      	nop			@ (mov r8, r8)
100429cc:	46bd      	mov	sp, r7
100429ce:	b002      	add	sp, #8
100429d0:	bd80      	pop	{r7, pc}
100429d2:	46c0      	nop			@ (mov r8, r8)
100429d4:	48400000 	.word	0x48400000

100429d8 <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
100429d8:	b580      	push	{r7, lr}
100429da:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
100429dc:	2001      	movs	r0, #1
100429de:	f7ff ffc5 	bl	1004296c <LL_APB2_GRP1_IsEnabledClock>
100429e2:	1e03      	subs	r3, r0, #0
100429e4:	d108      	bne.n	100429f8 <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
100429e6:	2001      	movs	r0, #1
100429e8:	f7ff ffd4 	bl	10042994 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
100429ec:	2001      	movs	r0, #1
100429ee:	f7ff ffe1 	bl	100429b4 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
100429f2:	2001      	movs	r0, #1
100429f4:	f7ff ffa4 	bl	10042940 <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
100429f8:	2300      	movs	r3, #0
}
100429fa:	0018      	movs	r0, r3
100429fc:	46bd      	mov	sp, r7
100429fe:	bd80      	pop	{r7, pc}

10042a00 <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
10042a00:	b590      	push	{r4, r7, lr}
10042a02:	b087      	sub	sp, #28
10042a04:	af00      	add	r7, sp, #0
10042a06:	60f8      	str	r0, [r7, #12]
10042a08:	60b9      	str	r1, [r7, #8]
10042a0a:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
10042a0c:	4b31      	ldr	r3, [pc, #196]	@ (10042ad4 <HW_AES_Encrypt+0xd4>)
10042a0e:	781b      	ldrb	r3, [r3, #0]
10042a10:	b2db      	uxtb	r3, r3
10042a12:	3301      	adds	r3, #1
10042a14:	b2da      	uxtb	r2, r3
10042a16:	4b2f      	ldr	r3, [pc, #188]	@ (10042ad4 <HW_AES_Encrypt+0xd4>)
10042a18:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
10042a1a:	2417      	movs	r4, #23
10042a1c:	193b      	adds	r3, r7, r4
10042a1e:	4a2d      	ldr	r2, [pc, #180]	@ (10042ad4 <HW_AES_Encrypt+0xd4>)
10042a20:	7812      	ldrb	r2, [r2, #0]
10042a22:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
10042a24:	23c0      	movs	r3, #192	@ 0xc0
10042a26:	05db      	lsls	r3, r3, #23
10042a28:	68ba      	ldr	r2, [r7, #8]
10042a2a:	6812      	ldr	r2, [r2, #0]
10042a2c:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
10042a2e:	68bb      	ldr	r3, [r7, #8]
10042a30:	1d1a      	adds	r2, r3, #4
10042a32:	23c0      	movs	r3, #192	@ 0xc0
10042a34:	05db      	lsls	r3, r3, #23
10042a36:	6812      	ldr	r2, [r2, #0]
10042a38:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
10042a3a:	68bb      	ldr	r3, [r7, #8]
10042a3c:	3308      	adds	r3, #8
10042a3e:	001a      	movs	r2, r3
10042a40:	23c0      	movs	r3, #192	@ 0xc0
10042a42:	05db      	lsls	r3, r3, #23
10042a44:	6812      	ldr	r2, [r2, #0]
10042a46:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
10042a48:	68bb      	ldr	r3, [r7, #8]
10042a4a:	330c      	adds	r3, #12
10042a4c:	001a      	movs	r2, r3
10042a4e:	23c0      	movs	r3, #192	@ 0xc0
10042a50:	05db      	lsls	r3, r3, #23
10042a52:	6812      	ldr	r2, [r2, #0]
10042a54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
10042a56:	23c0      	movs	r3, #192	@ 0xc0
10042a58:	05db      	lsls	r3, r3, #23
10042a5a:	68fa      	ldr	r2, [r7, #12]
10042a5c:	6812      	ldr	r2, [r2, #0]
10042a5e:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
10042a60:	68fb      	ldr	r3, [r7, #12]
10042a62:	1d1a      	adds	r2, r3, #4
10042a64:	23c0      	movs	r3, #192	@ 0xc0
10042a66:	05db      	lsls	r3, r3, #23
10042a68:	6812      	ldr	r2, [r2, #0]
10042a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
10042a6c:	68fb      	ldr	r3, [r7, #12]
10042a6e:	3308      	adds	r3, #8
10042a70:	001a      	movs	r2, r3
10042a72:	23c0      	movs	r3, #192	@ 0xc0
10042a74:	05db      	lsls	r3, r3, #23
10042a76:	6812      	ldr	r2, [r2, #0]
10042a78:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
10042a7a:	68fb      	ldr	r3, [r7, #12]
10042a7c:	330c      	adds	r3, #12
10042a7e:	001a      	movs	r2, r3
10042a80:	23c0      	movs	r3, #192	@ 0xc0
10042a82:	05db      	lsls	r3, r3, #23
10042a84:	6812      	ldr	r2, [r2, #0]
10042a86:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
10042a88:	f000 f826 	bl	10042ad8 <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
10042a8c:	23c0      	movs	r3, #192	@ 0xc0
10042a8e:	05db      	lsls	r3, r3, #23
10042a90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10042a92:	687b      	ldr	r3, [r7, #4]
10042a94:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
10042a96:	23c0      	movs	r3, #192	@ 0xc0
10042a98:	05da      	lsls	r2, r3, #23
10042a9a:	687b      	ldr	r3, [r7, #4]
10042a9c:	3304      	adds	r3, #4
10042a9e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
10042aa0:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
10042aa2:	23c0      	movs	r3, #192	@ 0xc0
10042aa4:	05da      	lsls	r2, r3, #23
10042aa6:	687b      	ldr	r3, [r7, #4]
10042aa8:	3308      	adds	r3, #8
10042aaa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10042aac:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
10042aae:	23c0      	movs	r3, #192	@ 0xc0
10042ab0:	05da      	lsls	r2, r3, #23
10042ab2:	687b      	ldr	r3, [r7, #4]
10042ab4:	330c      	adds	r3, #12
10042ab6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
10042ab8:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
10042aba:	4b06      	ldr	r3, [pc, #24]	@ (10042ad4 <HW_AES_Encrypt+0xd4>)
10042abc:	781b      	ldrb	r3, [r3, #0]
10042abe:	b2db      	uxtb	r3, r3
10042ac0:	193a      	adds	r2, r7, r4
10042ac2:	7812      	ldrb	r2, [r2, #0]
10042ac4:	429a      	cmp	r2, r3
10042ac6:	d1a8      	bne.n	10042a1a <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
10042ac8:	2300      	movs	r3, #0
}
10042aca:	0018      	movs	r0, r3
10042acc:	46bd      	mov	sp, r7
10042ace:	b007      	add	sp, #28
10042ad0:	bd90      	pop	{r4, r7, pc}
10042ad2:	46c0      	nop			@ (mov r8, r8)
10042ad4:	20000360 	.word	0x20000360

10042ad8 <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
10042ad8:	b580      	push	{r7, lr}
10042ada:	b082      	sub	sp, #8
10042adc:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
10042ade:	1dfb      	adds	r3, r7, #7
10042ae0:	2264      	movs	r2, #100	@ 0x64
10042ae2:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
10042ae4:	23c0      	movs	r3, #192	@ 0xc0
10042ae6:	05db      	lsls	r3, r3, #23
10042ae8:	0018      	movs	r0, r3
10042aea:	f000 f81c 	bl	10042b26 <LL_AES_StartManualEncription>
    do
    {
        i--;
10042aee:	1dfb      	adds	r3, r7, #7
10042af0:	781b      	ldrb	r3, [r3, #0]
10042af2:	b2db      	uxtb	r3, r3
10042af4:	3b01      	subs	r3, #1
10042af6:	b2da      	uxtb	r2, r3
10042af8:	1dfb      	adds	r3, r7, #7
10042afa:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
10042afc:	23c0      	movs	r3, #192	@ 0xc0
10042afe:	05db      	lsls	r3, r3, #23
10042b00:	0018      	movs	r0, r3
10042b02:	f000 f81e 	bl	10042b42 <LL_AES_IsBusy>
10042b06:	1e03      	subs	r3, r0, #0
10042b08:	d005      	beq.n	10042b16 <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
10042b0a:	1dfb      	adds	r3, r7, #7
10042b0c:	781b      	ldrb	r3, [r3, #0]
10042b0e:	b2db      	uxtb	r3, r3
10042b10:	2b00      	cmp	r3, #0
10042b12:	d1ec      	bne.n	10042aee <HW_AES_Start+0x16>
10042b14:	e000      	b.n	10042b18 <HW_AES_Start+0x40>
            break;
10042b16:	46c0      	nop			@ (mov r8, r8)

    return i;
10042b18:	1dfb      	adds	r3, r7, #7
10042b1a:	781b      	ldrb	r3, [r3, #0]
10042b1c:	b2db      	uxtb	r3, r3
}
10042b1e:	0018      	movs	r0, r3
10042b20:	46bd      	mov	sp, r7
10042b22:	b002      	add	sp, #8
10042b24:	bd80      	pop	{r7, pc}

10042b26 <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
10042b26:	b580      	push	{r7, lr}
10042b28:	b082      	sub	sp, #8
10042b2a:	af00      	add	r7, sp, #0
10042b2c:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
10042b2e:	687b      	ldr	r3, [r7, #4]
10042b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10042b32:	2201      	movs	r2, #1
10042b34:	431a      	orrs	r2, r3
10042b36:	687b      	ldr	r3, [r7, #4]
10042b38:	659a      	str	r2, [r3, #88]	@ 0x58
}
10042b3a:	46c0      	nop			@ (mov r8, r8)
10042b3c:	46bd      	mov	sp, r7
10042b3e:	b002      	add	sp, #8
10042b40:	bd80      	pop	{r7, pc}

10042b42 <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
10042b42:	b580      	push	{r7, lr}
10042b44:	b082      	sub	sp, #8
10042b46:	af00      	add	r7, sp, #0
10042b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
10042b4a:	687b      	ldr	r3, [r7, #4]
10042b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10042b4e:	2201      	movs	r2, #1
10042b50:	4013      	ands	r3, r2
10042b52:	2b01      	cmp	r3, #1
10042b54:	d101      	bne.n	10042b5a <LL_AES_IsBusy+0x18>
10042b56:	2301      	movs	r3, #1
10042b58:	e000      	b.n	10042b5c <LL_AES_IsBusy+0x1a>
10042b5a:	2300      	movs	r3, #0
}
10042b5c:	0018      	movs	r0, r3
10042b5e:	46bd      	mov	sp, r7
10042b60:	b002      	add	sp, #8
10042b62:	bd80      	pop	{r7, pc}

10042b64 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
10042b64:	b580      	push	{r7, lr}
10042b66:	b082      	sub	sp, #8
10042b68:	af00      	add	r7, sp, #0
10042b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
10042b6c:	687b      	ldr	r3, [r7, #4]
10042b6e:	681b      	ldr	r3, [r3, #0]
10042b70:	2280      	movs	r2, #128	@ 0x80
10042b72:	0352      	lsls	r2, r2, #13
10042b74:	431a      	orrs	r2, r3
10042b76:	687b      	ldr	r3, [r7, #4]
10042b78:	601a      	str	r2, [r3, #0]
}
10042b7a:	46c0      	nop			@ (mov r8, r8)
10042b7c:	46bd      	mov	sp, r7
10042b7e:	b002      	add	sp, #8
10042b80:	bd80      	pop	{r7, pc}

10042b82 <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
10042b82:	b580      	push	{r7, lr}
10042b84:	b082      	sub	sp, #8
10042b86:	af00      	add	r7, sp, #0
10042b88:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
10042b8a:	687b      	ldr	r3, [r7, #4]
10042b8c:	681b      	ldr	r3, [r3, #0]
10042b8e:	2280      	movs	r2, #128	@ 0x80
10042b90:	0312      	lsls	r2, r2, #12
10042b92:	431a      	orrs	r2, r3
10042b94:	687b      	ldr	r3, [r7, #4]
10042b96:	601a      	str	r2, [r3, #0]
}
10042b98:	46c0      	nop			@ (mov r8, r8)
10042b9a:	46bd      	mov	sp, r7
10042b9c:	b002      	add	sp, #8
10042b9e:	bd80      	pop	{r7, pc}

10042ba0 <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
10042ba0:	b580      	push	{r7, lr}
10042ba2:	b082      	sub	sp, #8
10042ba4:	af00      	add	r7, sp, #0
10042ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
10042ba8:	687b      	ldr	r3, [r7, #4]
10042baa:	681b      	ldr	r3, [r3, #0]
10042bac:	2280      	movs	r2, #128	@ 0x80
10042bae:	0292      	lsls	r2, r2, #10
10042bb0:	431a      	orrs	r2, r3
10042bb2:	687b      	ldr	r3, [r7, #4]
10042bb4:	601a      	str	r2, [r3, #0]
}
10042bb6:	46c0      	nop			@ (mov r8, r8)
10042bb8:	46bd      	mov	sp, r7
10042bba:	b002      	add	sp, #8
10042bbc:	bd80      	pop	{r7, pc}
	...

10042bc0 <HW_PKA_ReadResult>:

#endif

#if defined(STM32WB05) || defined(STM32WB09)
void HW_PKA_ReadResult( uint32_t index, int size, uint32_t* out )
{
10042bc0:	b580      	push	{r7, lr}
10042bc2:	b086      	sub	sp, #24
10042bc4:	af00      	add	r7, sp, #0
10042bc6:	60f8      	str	r0, [r7, #12]
10042bc8:	60b9      	str	r1, [r7, #8]
10042bca:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
10042bcc:	68fb      	ldr	r3, [r7, #12]
10042bce:	009b      	lsls	r3, r3, #2
10042bd0:	4a0b      	ldr	r2, [pc, #44]	@ (10042c00 <HW_PKA_ReadResult+0x40>)
10042bd2:	4694      	mov	ip, r2
10042bd4:	4463      	add	r3, ip
10042bd6:	617b      	str	r3, [r7, #20]
  /* Read from PKA RAM */
  for ( ; size > 0; size-- )
10042bd8:	e00a      	b.n	10042bf0 <HW_PKA_ReadResult+0x30>
  {
    *out++ = *pka_ram++;
10042bda:	697a      	ldr	r2, [r7, #20]
10042bdc:	1d13      	adds	r3, r2, #4
10042bde:	617b      	str	r3, [r7, #20]
10042be0:	687b      	ldr	r3, [r7, #4]
10042be2:	1d19      	adds	r1, r3, #4
10042be4:	6079      	str	r1, [r7, #4]
10042be6:	6812      	ldr	r2, [r2, #0]
10042be8:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
10042bea:	68bb      	ldr	r3, [r7, #8]
10042bec:	3b01      	subs	r3, #1
10042bee:	60bb      	str	r3, [r7, #8]
10042bf0:	68bb      	ldr	r3, [r7, #8]
10042bf2:	2b00      	cmp	r3, #0
10042bf4:	dcf1      	bgt.n	10042bda <HW_PKA_ReadResult+0x1a>
  }
}
10042bf6:	46c0      	nop			@ (mov r8, r8)
10042bf8:	46c0      	nop			@ (mov r8, r8)
10042bfa:	46bd      	mov	sp, r7
10042bfc:	b006      	add	sp, #24
10042bfe:	bd80      	pop	{r7, pc}
10042c00:	48300400 	.word	0x48300400

10042c04 <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
10042c04:	b580      	push	{r7, lr}
10042c06:	af00      	add	r7, sp, #0
  PKAMGR_Init();
10042c08:	f001 fbb4 	bl	10044374 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
10042c0c:	4b07      	ldr	r3, [pc, #28]	@ (10042c2c <HW_PKA_Init+0x28>)
10042c0e:	0018      	movs	r0, r3
10042c10:	f7ff ffa8 	bl	10042b64 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
10042c14:	4b05      	ldr	r3, [pc, #20]	@ (10042c2c <HW_PKA_Init+0x28>)
10042c16:	0018      	movs	r0, r3
10042c18:	f7ff ffb3 	bl	10042b82 <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
10042c1c:	4b03      	ldr	r3, [pc, #12]	@ (10042c2c <HW_PKA_Init+0x28>)
10042c1e:	0018      	movs	r0, r3
10042c20:	f7ff ffbe 	bl	10042ba0 <LL_PKA_EnableIT_PROCEND>
}
10042c24:	46c0      	nop			@ (mov r8, r8)
10042c26:	46bd      	mov	sp, r7
10042c28:	bd80      	pop	{r7, pc}
10042c2a:	46c0      	nop			@ (mov r8, r8)
10042c2c:	48300000 	.word	0x48300000

10042c30 <HW_PKA_ExitWithError>:
  * @param
  * @param
  *
  */
void HW_PKA_ExitWithError(uint32_t errorCode)
{
10042c30:	b580      	push	{r7, lr}
10042c32:	b084      	sub	sp, #16
10042c34:	af00      	add	r7, sp, #0
10042c36:	6078      	str	r0, [r7, #4]
  internalStateMachine_Operation = 0;
10042c38:	4b14      	ldr	r3, [pc, #80]	@ (10042c8c <HW_PKA_ExitWithError+0x5c>)
10042c3a:	2200      	movs	r2, #0
10042c3c:	601a      	str	r2, [r3, #0]
  internalStateMachine_Step = 0;
10042c3e:	4b14      	ldr	r3, [pc, #80]	@ (10042c90 <HW_PKA_ExitWithError+0x60>)
10042c40:	2200      	movs	r2, #0
10042c42:	601a      	str	r2, [r3, #0]
  PKAMGR_Unlock();
10042c44:	f001 fba2 	bl	1004438c <PKAMGR_Unlock>
  ret[0]=errorCode;
10042c48:	4b12      	ldr	r3, [pc, #72]	@ (10042c94 <HW_PKA_ExitWithError+0x64>)
10042c4a:	687a      	ldr	r2, [r7, #4]
10042c4c:	601a      	str	r2, [r3, #0]
  for(int i=0; i<8; i++)
10042c4e:	2300      	movs	r3, #0
10042c50:	60fb      	str	r3, [r7, #12]
10042c52:	e00c      	b.n	10042c6e <HW_PKA_ExitWithError+0x3e>
  {
    ret[i+16] = bufferSecretKey[i];
10042c54:	68fb      	ldr	r3, [r7, #12]
10042c56:	3310      	adds	r3, #16
10042c58:	001a      	movs	r2, r3
10042c5a:	4b0f      	ldr	r3, [pc, #60]	@ (10042c98 <HW_PKA_ExitWithError+0x68>)
10042c5c:	68f9      	ldr	r1, [r7, #12]
10042c5e:	0089      	lsls	r1, r1, #2
10042c60:	58c9      	ldr	r1, [r1, r3]
10042c62:	4b0c      	ldr	r3, [pc, #48]	@ (10042c94 <HW_PKA_ExitWithError+0x64>)
10042c64:	0092      	lsls	r2, r2, #2
10042c66:	50d1      	str	r1, [r2, r3]
  for(int i=0; i<8; i++)
10042c68:	68fb      	ldr	r3, [r7, #12]
10042c6a:	3301      	adds	r3, #1
10042c6c:	60fb      	str	r3, [r7, #12]
10042c6e:	68fb      	ldr	r3, [r7, #12]
10042c70:	2b07      	cmp	r3, #7
10042c72:	ddef      	ble.n	10042c54 <HW_PKA_ExitWithError+0x24>
  }
  HW_PKA_funcCB_LP(PKAMGR_ERROR, ret);
10042c74:	4b09      	ldr	r3, [pc, #36]	@ (10042c9c <HW_PKA_ExitWithError+0x6c>)
10042c76:	681b      	ldr	r3, [r3, #0]
10042c78:	4906      	ldr	r1, [pc, #24]	@ (10042c94 <HW_PKA_ExitWithError+0x64>)
10042c7a:	2201      	movs	r2, #1
10042c7c:	4252      	negs	r2, r2
10042c7e:	0010      	movs	r0, r2
10042c80:	4798      	blx	r3
}
10042c82:	46c0      	nop			@ (mov r8, r8)
10042c84:	46bd      	mov	sp, r7
10042c86:	b004      	add	sp, #16
10042c88:	bd80      	pop	{r7, pc}
10042c8a:	46c0      	nop			@ (mov r8, r8)
10042c8c:	200003c4 	.word	0x200003c4
10042c90:	200003c8 	.word	0x200003c8
10042c94:	20000364 	.word	0x20000364
10042c98:	200003cc 	.word	0x200003cc
10042c9c:	200003ec 	.word	0x200003ec

10042ca0 <HW_PKA_ProcEnd_StateMachine>:
  * @param
  * @param
  *
  */
void HW_PKA_ProcEnd_StateMachine(void)
{
10042ca0:	b580      	push	{r7, lr}
10042ca2:	b082      	sub	sp, #8
10042ca4:	af00      	add	r7, sp, #0
  if(internalStateMachine_Operation == HW_PKA_OPERATION_P256)
10042ca6:	4b2f      	ldr	r3, [pc, #188]	@ (10042d64 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10042ca8:	681b      	ldr	r3, [r3, #0]
10042caa:	2b01      	cmp	r3, #1
10042cac:	d155      	bne.n	10042d5a <HW_PKA_ProcEnd_StateMachine+0xba>
  {
    switch(internalStateMachine_Step)
10042cae:	4b2e      	ldr	r3, [pc, #184]	@ (10042d68 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042cb0:	681b      	ldr	r3, [r3, #0]
10042cb2:	2b0e      	cmp	r3, #14
10042cb4:	d84d      	bhi.n	10042d52 <HW_PKA_ProcEnd_StateMachine+0xb2>
10042cb6:	009a      	lsls	r2, r3, #2
10042cb8:	4b2c      	ldr	r3, [pc, #176]	@ (10042d6c <HW_PKA_ProcEnd_StateMachine+0xcc>)
10042cba:	18d3      	adds	r3, r2, r3
10042cbc:	681b      	ldr	r3, [r3, #0]
10042cbe:	469f      	mov	pc, r3
    {
      case HW_PKA_STEP_0:
        internalStateMachine_Step = HW_PKA_STEP_1;
10042cc0:	4b29      	ldr	r3, [pc, #164]	@ (10042d68 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042cc2:	2201      	movs	r2, #1
10042cc4:	601a      	str	r2, [r3, #0]

      break;
10042cc6:	e048      	b.n	10042d5a <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_1:
        internalStateMachine_Step = HW_PKA_STEP_2;
10042cc8:	4b27      	ldr	r3, [pc, #156]	@ (10042d68 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042cca:	2202      	movs	r2, #2
10042ccc:	601a      	str	r2, [r3, #0]
        break;
10042cce:	e044      	b.n	10042d5a <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_2:
          internalStateMachine_Step = HW_PKA_STEP_3;
10042cd0:	4b25      	ldr	r3, [pc, #148]	@ (10042d68 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042cd2:	2203      	movs	r2, #3
10042cd4:	601a      	str	r2, [r3, #0]
          break;
10042cd6:	e040      	b.n	10042d5a <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_3:
            /* Read the PKA scalar multiplication result which is the DH key */
            for(int i=0;i<8;i++)
10042cd8:	2300      	movs	r3, #0
10042cda:	607b      	str	r3, [r7, #4]
10042cdc:	e00a      	b.n	10042cf4 <HW_PKA_ProcEnd_StateMachine+0x54>
              ret[i] = bufferSecretKey[i];
10042cde:	4b24      	ldr	r3, [pc, #144]	@ (10042d70 <HW_PKA_ProcEnd_StateMachine+0xd0>)
10042ce0:	687a      	ldr	r2, [r7, #4]
10042ce2:	0092      	lsls	r2, r2, #2
10042ce4:	58d1      	ldr	r1, [r2, r3]
10042ce6:	4b23      	ldr	r3, [pc, #140]	@ (10042d74 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042ce8:	687a      	ldr	r2, [r7, #4]
10042cea:	0092      	lsls	r2, r2, #2
10042cec:	50d1      	str	r1, [r2, r3]
            for(int i=0;i<8;i++)
10042cee:	687b      	ldr	r3, [r7, #4]
10042cf0:	3301      	adds	r3, #1
10042cf2:	607b      	str	r3, [r7, #4]
10042cf4:	687b      	ldr	r3, [r7, #4]
10042cf6:	2b07      	cmp	r3, #7
10042cf8:	ddf1      	ble.n	10042cde <HW_PKA_ProcEnd_StateMachine+0x3e>
            HW_PKA_P256_ReadEccScalarMul( (uint32_t *)&ret[8], (uint32_t *)&ret[16] );
10042cfa:	4a1f      	ldr	r2, [pc, #124]	@ (10042d78 <HW_PKA_ProcEnd_StateMachine+0xd8>)
10042cfc:	4b1f      	ldr	r3, [pc, #124]	@ (10042d7c <HW_PKA_ProcEnd_StateMachine+0xdc>)
10042cfe:	0011      	movs	r1, r2
10042d00:	0018      	movs	r0, r3
10042d02:	f000 f85a 	bl	10042dba <HW_PKA_P256_ReadEccScalarMul>
#ifdef STM32WB09
            internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
10042d06:	4b18      	ldr	r3, [pc, #96]	@ (10042d68 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042d08:	220e      	movs	r2, #14
10042d0a:	601a      	str	r2, [r3, #0]
            HW_PKA_ProcEnd_StateMachine();
10042d0c:	f7ff ffc8 	bl	10042ca0 <HW_PKA_ProcEnd_StateMachine>
         {
           internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
           HW_PKA_ProcEnd_StateMachine();
         }
#endif /* STM32WB05 */
          break;
10042d10:	e023      	b.n	10042d5a <HW_PKA_ProcEnd_StateMachine+0xba>
       case HW_PKA_STEP_END_SUCCESS:
          internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
10042d12:	4b14      	ldr	r3, [pc, #80]	@ (10042d64 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10042d14:	2200      	movs	r2, #0
10042d16:	601a      	str	r2, [r3, #0]
          internalStateMachine_Step = HW_PKA_STEP_0;
10042d18:	4b13      	ldr	r3, [pc, #76]	@ (10042d68 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042d1a:	2200      	movs	r2, #0
10042d1c:	601a      	str	r2, [r3, #0]
          PKAMGR_Unlock();
10042d1e:	f001 fb35 	bl	1004438c <PKAMGR_Unlock>
          for(int i=0;i<8;i++)
10042d22:	2300      	movs	r3, #0
10042d24:	603b      	str	r3, [r7, #0]
10042d26:	e00a      	b.n	10042d3e <HW_PKA_ProcEnd_StateMachine+0x9e>
            ret[i] = bufferSecretKey[i];
10042d28:	4b11      	ldr	r3, [pc, #68]	@ (10042d70 <HW_PKA_ProcEnd_StateMachine+0xd0>)
10042d2a:	683a      	ldr	r2, [r7, #0]
10042d2c:	0092      	lsls	r2, r2, #2
10042d2e:	58d1      	ldr	r1, [r2, r3]
10042d30:	4b10      	ldr	r3, [pc, #64]	@ (10042d74 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042d32:	683a      	ldr	r2, [r7, #0]
10042d34:	0092      	lsls	r2, r2, #2
10042d36:	50d1      	str	r1, [r2, r3]
          for(int i=0;i<8;i++)
10042d38:	683b      	ldr	r3, [r7, #0]
10042d3a:	3301      	adds	r3, #1
10042d3c:	603b      	str	r3, [r7, #0]
10042d3e:	683b      	ldr	r3, [r7, #0]
10042d40:	2b07      	cmp	r3, #7
10042d42:	ddf1      	ble.n	10042d28 <HW_PKA_ProcEnd_StateMachine+0x88>
          HW_PKA_funcCB_LP(PKAMGR_SUCCESS, ret);
10042d44:	4b0e      	ldr	r3, [pc, #56]	@ (10042d80 <HW_PKA_ProcEnd_StateMachine+0xe0>)
10042d46:	681b      	ldr	r3, [r3, #0]
10042d48:	4a0a      	ldr	r2, [pc, #40]	@ (10042d74 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042d4a:	0011      	movs	r1, r2
10042d4c:	2000      	movs	r0, #0
10042d4e:	4798      	blx	r3
          break;
10042d50:	e003      	b.n	10042d5a <HW_PKA_ProcEnd_StateMachine+0xba>
       default:
          HW_PKA_ExitWithError(0xA0);
10042d52:	20a0      	movs	r0, #160	@ 0xa0
10042d54:	f7ff ff6c 	bl	10042c30 <HW_PKA_ExitWithError>
    }
  }
}
10042d58:	e7ff      	b.n	10042d5a <HW_PKA_ProcEnd_StateMachine+0xba>
10042d5a:	46c0      	nop			@ (mov r8, r8)
10042d5c:	46bd      	mov	sp, r7
10042d5e:	b002      	add	sp, #8
10042d60:	bd80      	pop	{r7, pc}
10042d62:	46c0      	nop			@ (mov r8, r8)
10042d64:	200003c4 	.word	0x200003c4
10042d68:	200003c8 	.word	0x200003c8
10042d6c:	1004e69c 	.word	0x1004e69c
10042d70:	200003cc 	.word	0x200003cc
10042d74:	20000364 	.word	0x20000364
10042d78:	200003a4 	.word	0x200003a4
10042d7c:	20000384 	.word	0x20000384
10042d80:	200003ec 	.word	0x200003ec

10042d84 <HAL_PKA_OperationCpltCallback>:
    HW_PKA_ProcEnd_StateMachine();
  }
}

void HAL_PKA_OperationCpltCallback(PKA_HandleTypeDef *hpka)
{
10042d84:	b580      	push	{r7, lr}
10042d86:	b082      	sub	sp, #8
10042d88:	af00      	add	r7, sp, #0
10042d8a:	6078      	str	r0, [r7, #4]
  HW_PKA_ProcEnd_StateMachine();
10042d8c:	f7ff ff88 	bl	10042ca0 <HW_PKA_ProcEnd_StateMachine>
  PKAMGR_IRQCallback();
10042d90:	f001 fb26 	bl	100443e0 <PKAMGR_IRQCallback>
}
10042d94:	46c0      	nop			@ (mov r8, r8)
10042d96:	46bd      	mov	sp, r7
10042d98:	b002      	add	sp, #8
10042d9a:	bd80      	pop	{r7, pc}

10042d9c <HAL_PKA_ErrorCallback>:

void HAL_PKA_ErrorCallback(PKA_HandleTypeDef *hpka)
{
10042d9c:	b580      	push	{r7, lr}
10042d9e:	b082      	sub	sp, #8
10042da0:	af00      	add	r7, sp, #0
10042da2:	6078      	str	r0, [r7, #4]
  HW_PKA_ExitWithError(hpka->ErrorCode);
10042da4:	687b      	ldr	r3, [r7, #4]
10042da6:	689b      	ldr	r3, [r3, #8]
10042da8:	0018      	movs	r0, r3
10042daa:	f7ff ff41 	bl	10042c30 <HW_PKA_ExitWithError>
  PKAMGR_IRQCallback();
10042dae:	f001 fb17 	bl	100443e0 <PKAMGR_IRQCallback>
}
10042db2:	46c0      	nop			@ (mov r8, r8)
10042db4:	46bd      	mov	sp, r7
10042db6:	b002      	add	sp, #8
10042db8:	bd80      	pop	{r7, pc}

10042dba <HW_PKA_P256_ReadEccScalarMul>:
  * @param
  * @param
  *
  */
void HW_PKA_P256_ReadEccScalarMul( uint32_t* pX, uint32_t* pY )
{
10042dba:	b580      	push	{r7, lr}
10042dbc:	b082      	sub	sp, #8
10042dbe:	af00      	add	r7, sp, #0
10042dc0:	6078      	str	r0, [r7, #4]
10042dc2:	6039      	str	r1, [r7, #0]
#ifdef STM32WB09
  /* Read the output point X */
  if( pX )
10042dc4:	687b      	ldr	r3, [r7, #4]
10042dc6:	2b00      	cmp	r3, #0
10042dc8:	d005      	beq.n	10042dd6 <HW_PKA_P256_ReadEccScalarMul+0x1c>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_X, 8, pX );
10042dca:	687b      	ldr	r3, [r7, #4]
10042dcc:	001a      	movs	r2, r3
10042dce:	2108      	movs	r1, #8
10042dd0:	205e      	movs	r0, #94	@ 0x5e
10042dd2:	f7ff fef5 	bl	10042bc0 <HW_PKA_ReadResult>
  }
  /* Read the output point Y as the second half of the result */
  if( pY )
10042dd6:	683b      	ldr	r3, [r7, #0]
10042dd8:	2b00      	cmp	r3, #0
10042dda:	d005      	beq.n	10042de8 <HW_PKA_P256_ReadEccScalarMul+0x2e>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_Y, 8, pY );
10042ddc:	683b      	ldr	r3, [r7, #0]
10042dde:	001a      	movs	r2, r3
10042de0:	2108      	movs	r1, #8
10042de2:	2074      	movs	r0, #116	@ 0x74
10042de4:	f7ff feec 	bl	10042bc0 <HW_PKA_ReadResult>
  if( pY )
  {
    HW_PKA_ReadResult( 108, 8, pY );
  }
#endif /* STM32WB05 */
}
10042de8:	46c0      	nop			@ (mov r8, r8)
10042dea:	46bd      	mov	sp, r7
10042dec:	b002      	add	sp, #8
10042dee:	bd80      	pop	{r7, pc}

10042df0 <LL_AHB1_GRP1_EnableClock>:
{
10042df0:	b580      	push	{r7, lr}
10042df2:	b084      	sub	sp, #16
10042df4:	af00      	add	r7, sp, #0
10042df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10042df8:	4b07      	ldr	r3, [pc, #28]	@ (10042e18 <LL_AHB1_GRP1_EnableClock+0x28>)
10042dfa:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10042dfc:	4b06      	ldr	r3, [pc, #24]	@ (10042e18 <LL_AHB1_GRP1_EnableClock+0x28>)
10042dfe:	687a      	ldr	r2, [r7, #4]
10042e00:	430a      	orrs	r2, r1
10042e02:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10042e04:	4b04      	ldr	r3, [pc, #16]	@ (10042e18 <LL_AHB1_GRP1_EnableClock+0x28>)
10042e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10042e08:	687a      	ldr	r2, [r7, #4]
10042e0a:	4013      	ands	r3, r2
10042e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042e0e:	68fb      	ldr	r3, [r7, #12]
}
10042e10:	46c0      	nop			@ (mov r8, r8)
10042e12:	46bd      	mov	sp, r7
10042e14:	b004      	add	sp, #16
10042e16:	bd80      	pop	{r7, pc}
10042e18:	48400000 	.word	0x48400000

10042e1c <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
10042e1c:	b580      	push	{r7, lr}
10042e1e:	b082      	sub	sp, #8
10042e20:	af00      	add	r7, sp, #0
10042e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RNGx->CR, RNG_CR_DISABLE, LL_RNG_CR_DISABLE_0);
10042e24:	687b      	ldr	r3, [r7, #4]
10042e26:	681b      	ldr	r3, [r3, #0]
10042e28:	2201      	movs	r2, #1
10042e2a:	4393      	bics	r3, r2
10042e2c:	001a      	movs	r2, r3
10042e2e:	687b      	ldr	r3, [r7, #4]
10042e30:	601a      	str	r2, [r3, #0]
}
10042e32:	46c0      	nop			@ (mov r8, r8)
10042e34:	46bd      	mov	sp, r7
10042e36:	b002      	add	sp, #8
10042e38:	bd80      	pop	{r7, pc}
	...

10042e3c <LL_RNG_SetSamplingClockEnableDivider>:
  * @param  RNGx RNG Instance
  * @param  value parameter must be a number between 0 and 65535 (form 0x0 to 0xffff)
  * @retval None
  */
__STATIC_INLINE void LL_RNG_SetSamplingClockEnableDivider(RNG_TypeDef *RNGx, uint32_t value)
{
10042e3c:	b580      	push	{r7, lr}
10042e3e:	b082      	sub	sp, #8
10042e40:	af00      	add	r7, sp, #0
10042e42:	6078      	str	r0, [r7, #4]
10042e44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RNGx->CR, RNG_CR_CLKDIV_15_0, value << RNG_CR_CLKDIV_15_0_Pos);
10042e46:	687b      	ldr	r3, [r7, #4]
10042e48:	681b      	ldr	r3, [r3, #0]
10042e4a:	4a05      	ldr	r2, [pc, #20]	@ (10042e60 <LL_RNG_SetSamplingClockEnableDivider+0x24>)
10042e4c:	401a      	ands	r2, r3
10042e4e:	683b      	ldr	r3, [r7, #0]
10042e50:	021b      	lsls	r3, r3, #8
10042e52:	431a      	orrs	r2, r3
10042e54:	687b      	ldr	r3, [r7, #4]
10042e56:	601a      	str	r2, [r3, #0]
}
10042e58:	46c0      	nop			@ (mov r8, r8)
10042e5a:	46bd      	mov	sp, r7
10042e5c:	b002      	add	sp, #8
10042e5e:	bd80      	pop	{r7, pc}
10042e60:	ff0000ff 	.word	0xff0000ff

10042e64 <LL_RNG_GetSamplingClockEnableDivider>:
    @note   dividing by a factor equal to CLKDIV[15:0] + 1, values being in the range of 0 to 65535
  * @rmtoll CR          CLKDIV_15_0       LL_RNG_GetSamplingClockEnableDivider
  * @retval can be one of the following values
  */
__STATIC_INLINE uint32_t LL_RNG_GetSamplingClockEnableDivider(RNG_TypeDef *RNGx)
{
10042e64:	b580      	push	{r7, lr}
10042e66:	b082      	sub	sp, #8
10042e68:	af00      	add	r7, sp, #0
10042e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->CR, RNG_CR_CLKDIV_15_0) >> RNG_CR_CLKDIV_15_0_Pos);
10042e6c:	687b      	ldr	r3, [r7, #4]
10042e6e:	681b      	ldr	r3, [r3, #0]
10042e70:	0a1b      	lsrs	r3, r3, #8
10042e72:	041b      	lsls	r3, r3, #16
10042e74:	0c1b      	lsrs	r3, r3, #16
}
10042e76:	0018      	movs	r0, r3
10042e78:	46bd      	mov	sp, r7
10042e7a:	b002      	add	sp, #8
10042e7c:	bd80      	pop	{r7, pc}

10042e7e <LL_RNG_IsActiveFlag_DISABLED>:
  * @rmtoll SR          DISABLED            LL_RNG_IsActiveFlag_DISABLED
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_DISABLED(RNG_TypeDef *RNGx)
{
10042e7e:	b580      	push	{r7, lr}
10042e80:	b082      	sub	sp, #8
10042e82:	af00      	add	r7, sp, #0
10042e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_DISABLED) == (RNG_SR_DISABLED)) ? 1U : 0U);
10042e86:	687b      	ldr	r3, [r7, #4]
10042e88:	685b      	ldr	r3, [r3, #4]
10042e8a:	2201      	movs	r2, #1
10042e8c:	4013      	ands	r3, r2
10042e8e:	2b01      	cmp	r3, #1
10042e90:	d101      	bne.n	10042e96 <LL_RNG_IsActiveFlag_DISABLED+0x18>
10042e92:	2301      	movs	r3, #1
10042e94:	e000      	b.n	10042e98 <LL_RNG_IsActiveFlag_DISABLED+0x1a>
10042e96:	2300      	movs	r3, #0
}
10042e98:	0018      	movs	r0, r3
10042e9a:	46bd      	mov	sp, r7
10042e9c:	b002      	add	sp, #8
10042e9e:	bd80      	pop	{r7, pc}

10042ea0 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>:
  * @rmtoll SR          REVEAL_CLK_ERR            LL_RNG_IsActiveFlag_REVEAL_CLK_ERR
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG_TypeDef *RNGx)
{
10042ea0:	b580      	push	{r7, lr}
10042ea2:	b082      	sub	sp, #8
10042ea4:	af00      	add	r7, sp, #0
10042ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_REVEAL_CLK_ERR) == (RNG_SR_REVEAL_CLK_ERR)) ? 1U : 0U);
10042ea8:	687b      	ldr	r3, [r7, #4]
10042eaa:	685b      	ldr	r3, [r3, #4]
10042eac:	2204      	movs	r2, #4
10042eae:	4013      	ands	r3, r2
10042eb0:	2b04      	cmp	r3, #4
10042eb2:	d101      	bne.n	10042eb8 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x18>
10042eb4:	2301      	movs	r3, #1
10042eb6:	e000      	b.n	10042eba <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x1a>
10042eb8:	2300      	movs	r3, #0
}
10042eba:	0018      	movs	r0, r3
10042ebc:	46bd      	mov	sp, r7
10042ebe:	b002      	add	sp, #8
10042ec0:	bd80      	pop	{r7, pc}

10042ec2 <LL_RNG_IsActiveFlag_VAL_READY>:
  * @rmtoll SR          VAL_READY            LL_RNG_IsActiveFlag_VAL_READY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_VAL_READY(RNG_TypeDef *RNGx)
{
10042ec2:	b580      	push	{r7, lr}
10042ec4:	b082      	sub	sp, #8
10042ec6:	af00      	add	r7, sp, #0
10042ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_VAL_READY) == (RNG_SR_VAL_READY)) ? 1U : 0U);
10042eca:	687b      	ldr	r3, [r7, #4]
10042ecc:	685b      	ldr	r3, [r3, #4]
10042ece:	2210      	movs	r2, #16
10042ed0:	4013      	ands	r3, r2
10042ed2:	2b10      	cmp	r3, #16
10042ed4:	d101      	bne.n	10042eda <LL_RNG_IsActiveFlag_VAL_READY+0x18>
10042ed6:	2301      	movs	r3, #1
10042ed8:	e000      	b.n	10042edc <LL_RNG_IsActiveFlag_VAL_READY+0x1a>
10042eda:	2300      	movs	r3, #0
}
10042edc:	0018      	movs	r0, r3
10042ede:	46bd      	mov	sp, r7
10042ee0:	b002      	add	sp, #8
10042ee2:	bd80      	pop	{r7, pc}

10042ee4 <LL_RNG_GetRndVal>:
  available in FIFO by ready VAL_READY flag before starting a read otherwise a null value will be returned
  * @rmtoll VAL          RND_VAL       LL_RNG_GetRndVal
  * @retval a 32-bit Random Value
  */
__STATIC_INLINE uint32_t LL_RNG_GetRndVal(RNG_TypeDef *RNGx)
{
10042ee4:	b580      	push	{r7, lr}
10042ee6:	b082      	sub	sp, #8
10042ee8:	af00      	add	r7, sp, #0
10042eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->VAL, RNG_VAL_RND_VAL) >> RNG_VAL_RND_VAL_Pos);
10042eec:	687b      	ldr	r3, [r7, #4]
10042eee:	689b      	ldr	r3, [r3, #8]
}
10042ef0:	0018      	movs	r0, r3
10042ef2:	46bd      	mov	sp, r7
10042ef4:	b002      	add	sp, #8
10042ef6:	bd80      	pop	{r7, pc}

10042ef8 <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
10042ef8:	b580      	push	{r7, lr}
10042efa:	b082      	sub	sp, #8
10042efc:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
10042efe:	2380      	movs	r3, #128	@ 0x80
10042f00:	02db      	lsls	r3, r3, #11
10042f02:	0018      	movs	r0, r3
10042f04:	f7ff ff74 	bl	10042df0 <LL_AHB1_GRP1_EnableClock>

  uint32_t SamplingClockDivider = 0;
10042f08:	2300      	movs	r3, #0
10042f0a:	607b      	str	r3, [r7, #4]

  /* Check that the divider value is equal to the one to configure. If not, it must redo the write and checking. */
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
10042f0c:	e005      	b.n	10042f1a <HW_RNG_Init+0x22>
  {
     /* While the new divider value is being resynchronized with the TRNG core clock domain, it is not possible to write another new value. */
     LL_RNG_SetSamplingClockEnableDivider(RNG, SamplingClockDivider);
10042f0e:	687b      	ldr	r3, [r7, #4]
10042f10:	4a12      	ldr	r2, [pc, #72]	@ (10042f5c <HW_RNG_Init+0x64>)
10042f12:	0019      	movs	r1, r3
10042f14:	0010      	movs	r0, r2
10042f16:	f7ff ff91 	bl	10042e3c <LL_RNG_SetSamplingClockEnableDivider>
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
10042f1a:	4b10      	ldr	r3, [pc, #64]	@ (10042f5c <HW_RNG_Init+0x64>)
10042f1c:	0018      	movs	r0, r3
10042f1e:	f7ff ffa1 	bl	10042e64 <LL_RNG_GetSamplingClockEnableDivider>
10042f22:	0002      	movs	r2, r0
10042f24:	687b      	ldr	r3, [r7, #4]
10042f26:	4293      	cmp	r3, r2
10042f28:	d1f1      	bne.n	10042f0e <HW_RNG_Init+0x16>
  }

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
10042f2a:	4b0c      	ldr	r3, [pc, #48]	@ (10042f5c <HW_RNG_Init+0x64>)
10042f2c:	0018      	movs	r0, r3
10042f2e:	f7ff ff75 	bl	10042e1c <LL_RNG_Enable>

  /* Wait for RNG enable operation */
  while (LL_RNG_IsActiveFlag_DISABLED(RNG));
10042f32:	46c0      	nop			@ (mov r8, r8)
10042f34:	4b09      	ldr	r3, [pc, #36]	@ (10042f5c <HW_RNG_Init+0x64>)
10042f36:	0018      	movs	r0, r3
10042f38:	f7ff ffa1 	bl	10042e7e <LL_RNG_IsActiveFlag_DISABLED>
10042f3c:	1e03      	subs	r3, r0, #0
10042f3e:	d1f9      	bne.n	10042f34 <HW_RNG_Init+0x3c>

  /* Check if internal clock error occurs */
  if (LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG))
10042f40:	4b06      	ldr	r3, [pc, #24]	@ (10042f5c <HW_RNG_Init+0x64>)
10042f42:	0018      	movs	r0, r3
10042f44:	f7ff ffac 	bl	10042ea0 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>
10042f48:	1e03      	subs	r3, r0, #0
10042f4a:	d001      	beq.n	10042f50 <HW_RNG_Init+0x58>
  {
    return HW_RNG_ERROR;
10042f4c:	2301      	movs	r3, #1
10042f4e:	e000      	b.n	10042f52 <HW_RNG_Init+0x5a>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
10042f50:	2300      	movs	r3, #0
}
10042f52:	0018      	movs	r0, r3
10042f54:	46bd      	mov	sp, r7
10042f56:	b002      	add	sp, #8
10042f58:	bd80      	pop	{r7, pc}
10042f5a:	46c0      	nop			@ (mov r8, r8)
10042f5c:	48600000 	.word	0x48600000

10042f60 <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
10042f60:	b580      	push	{r7, lr}
10042f62:	b082      	sub	sp, #8
10042f64:	af00      	add	r7, sp, #0
10042f66:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
10042f68:	46c0      	nop			@ (mov r8, r8)
10042f6a:	4b09      	ldr	r3, [pc, #36]	@ (10042f90 <HW_RNG_GetRandom16+0x30>)
10042f6c:	0018      	movs	r0, r3
10042f6e:	f7ff ffa8 	bl	10042ec2 <LL_RNG_IsActiveFlag_VAL_READY>
10042f72:	1e03      	subs	r3, r0, #0
10042f74:	d0f9      	beq.n	10042f6a <HW_RNG_GetRandom16+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
10042f76:	4b06      	ldr	r3, [pc, #24]	@ (10042f90 <HW_RNG_GetRandom16+0x30>)
10042f78:	0018      	movs	r0, r3
10042f7a:	f7ff ffb3 	bl	10042ee4 <LL_RNG_GetRndVal>
10042f7e:	0003      	movs	r3, r0
10042f80:	b29a      	uxth	r2, r3
10042f82:	687b      	ldr	r3, [r7, #4]
10042f84:	801a      	strh	r2, [r3, #0]

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
10042f86:	2300      	movs	r3, #0
}
10042f88:	0018      	movs	r0, r3
10042f8a:	46bd      	mov	sp, r7
10042f8c:	b002      	add	sp, #8
10042f8e:	bd80      	pop	{r7, pc}
10042f90:	48600000 	.word	0x48600000

10042f94 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
10042f94:	b580      	push	{r7, lr}
10042f96:	b082      	sub	sp, #8
10042f98:	af00      	add	r7, sp, #0
10042f9a:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
10042f9c:	46c0      	nop			@ (mov r8, r8)
10042f9e:	4b09      	ldr	r3, [pc, #36]	@ (10042fc4 <HW_RNG_GetRandom32+0x30>)
10042fa0:	0018      	movs	r0, r3
10042fa2:	f7ff ff8e 	bl	10042ec2 <LL_RNG_IsActiveFlag_VAL_READY>
10042fa6:	1e03      	subs	r3, r0, #0
10042fa8:	d0f9      	beq.n	10042f9e <HW_RNG_GetRandom32+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
10042faa:	4b06      	ldr	r3, [pc, #24]	@ (10042fc4 <HW_RNG_GetRandom32+0x30>)
10042fac:	0018      	movs	r0, r3
10042fae:	f7ff ff99 	bl	10042ee4 <LL_RNG_GetRndVal>
10042fb2:	0002      	movs	r2, r0
10042fb4:	687b      	ldr	r3, [r7, #4]
10042fb6:	601a      	str	r2, [r3, #0]
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
10042fb8:	2300      	movs	r3, #0
}
10042fba:	0018      	movs	r0, r3
10042fbc:	46bd      	mov	sp, r7
10042fbe:	b002      	add	sp, #8
10042fc0:	bd80      	pop	{r7, pc}
10042fc2:	46c0      	nop			@ (mov r8, r8)
10042fc4:	48600000 	.word	0x48600000

10042fc8 <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
10042fc8:	b580      	push	{r7, lr}
10042fca:	b084      	sub	sp, #16
10042fcc:	af00      	add	r7, sp, #0
10042fce:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
10042fd0:	687b      	ldr	r3, [r7, #4]
10042fd2:	681b      	ldr	r3, [r3, #0]
10042fd4:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
10042fd6:	687b      	ldr	r3, [r7, #4]
10042fd8:	2200      	movs	r2, #0
10042fda:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
10042fdc:	687b      	ldr	r3, [r7, #4]
10042fde:	2200      	movs	r2, #0
10042fe0:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
10042fe2:	687b      	ldr	r3, [r7, #4]
10042fe4:	2200      	movs	r2, #0
10042fe6:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
10042fe8:	687b      	ldr	r3, [r7, #4]
10042fea:	2200      	movs	r2, #0
10042fec:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
10042fee:	68fb      	ldr	r3, [r7, #12]
10042ff0:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
10042ff2:	68bb      	ldr	r3, [r7, #8]
10042ff4:	781b      	ldrb	r3, [r3, #0]
10042ff6:	2bff      	cmp	r3, #255	@ 0xff
10042ff8:	d10c      	bne.n	10043014 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
10042ffa:	687b      	ldr	r3, [r7, #4]
10042ffc:	685b      	ldr	r3, [r3, #4]
10042ffe:	b29a      	uxth	r2, r3
10043000:	68fb      	ldr	r3, [r7, #12]
10043002:	b29b      	uxth	r3, r3
10043004:	1ad3      	subs	r3, r2, r3
10043006:	b29b      	uxth	r3, r3
10043008:	3b04      	subs	r3, #4
1004300a:	b29a      	uxth	r2, r3
1004300c:	687b      	ldr	r3, [r7, #4]
1004300e:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
10043010:	2300      	movs	r3, #0
10043012:	e028      	b.n	10043066 <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
10043014:	68bb      	ldr	r3, [r7, #8]
10043016:	781b      	ldrb	r3, [r3, #0]
10043018:	2bfe      	cmp	r3, #254	@ 0xfe
1004301a:	d106      	bne.n	1004302a <NVMDB_get_info+0x62>
    {
      info->valid_records++;
1004301c:	687b      	ldr	r3, [r7, #4]
1004301e:	891b      	ldrh	r3, [r3, #8]
10043020:	3301      	adds	r3, #1
10043022:	b29a      	uxth	r2, r3
10043024:	687b      	ldr	r3, [r7, #4]
10043026:	811a      	strh	r2, [r3, #8]
10043028:	e00c      	b.n	10043044 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
1004302a:	68bb      	ldr	r3, [r7, #8]
1004302c:	781b      	ldrb	r3, [r3, #0]
1004302e:	2b00      	cmp	r3, #0
10043030:	d106      	bne.n	10043040 <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
10043032:	687b      	ldr	r3, [r7, #4]
10043034:	895b      	ldrh	r3, [r3, #10]
10043036:	3301      	adds	r3, #1
10043038:	b29a      	uxth	r2, r3
1004303a:	687b      	ldr	r3, [r7, #4]
1004303c:	815a      	strh	r2, [r3, #10]
1004303e:	e001      	b.n	10043044 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
10043040:	2303      	movs	r3, #3
10043042:	e010      	b.n	10043066 <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10043044:	68bb      	ldr	r3, [r7, #8]
10043046:	885b      	ldrh	r3, [r3, #2]
10043048:	3303      	adds	r3, #3
1004304a:	2203      	movs	r2, #3
1004304c:	4313      	orrs	r3, r2
1004304e:	001a      	movs	r2, r3
10043050:	68fb      	ldr	r3, [r7, #12]
10043052:	18d3      	adds	r3, r2, r3
10043054:	3301      	adds	r3, #1
10043056:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
10043058:	68fb      	ldr	r3, [r7, #12]
1004305a:	1d5a      	adds	r2, r3, #5
1004305c:	687b      	ldr	r3, [r7, #4]
1004305e:	685b      	ldr	r3, [r3, #4]
10043060:	429a      	cmp	r2, r3
10043062:	d3c4      	bcc.n	10042fee <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
10043064:	2300      	movs	r3, #0
    }
  }
}
10043066:	0018      	movs	r0, r3
10043068:	46bd      	mov	sp, r7
1004306a:	b004      	add	sp, #16
1004306c:	bd80      	pop	{r7, pc}

1004306e <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
1004306e:	b580      	push	{r7, lr}
10043070:	b086      	sub	sp, #24
10043072:	af00      	add	r7, sp, #0
10043074:	60f8      	str	r0, [r7, #12]
10043076:	607a      	str	r2, [r7, #4]
10043078:	603b      	str	r3, [r7, #0]
1004307a:	230b      	movs	r3, #11
1004307c:	18fb      	adds	r3, r7, r3
1004307e:	1c0a      	adds	r2, r1, #0
10043080:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
10043082:	2020      	movs	r0, #32
10043084:	183b      	adds	r3, r7, r0
10043086:	881b      	ldrh	r3, [r3, #0]
10043088:	2b00      	cmp	r3, #0
1004308a:	d00a      	beq.n	100430a2 <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
1004308c:	2110      	movs	r1, #16
1004308e:	187a      	adds	r2, r7, r1
10043090:	183b      	adds	r3, r7, r0
10043092:	881b      	ldrh	r3, [r3, #0]
10043094:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
10043096:	187b      	adds	r3, r7, r1
10043098:	22fe      	movs	r2, #254	@ 0xfe
1004309a:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004309c:	187b      	adds	r3, r7, r1
1004309e:	617b      	str	r3, [r7, #20]
100430a0:	e002      	b.n	100430a8 <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
100430a2:	68fb      	ldr	r3, [r7, #12]
100430a4:	685b      	ldr	r3, [r3, #4]
100430a6:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100430a8:	68fb      	ldr	r3, [r7, #12]
100430aa:	685a      	ldr	r2, [r3, #4]
100430ac:	68fb      	ldr	r3, [r7, #12]
100430ae:	689b      	ldr	r3, [r3, #8]
100430b0:	429a      	cmp	r2, r3
100430b2:	d203      	bcs.n	100430bc <NextRecordNoLock+0x4e>
100430b4:	697b      	ldr	r3, [r7, #20]
100430b6:	781b      	ldrb	r3, [r3, #0]
100430b8:	2bff      	cmp	r3, #255	@ 0xff
100430ba:	d101      	bne.n	100430c0 <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
100430bc:	2304      	movs	r3, #4
100430be:	e04b      	b.n	10043158 <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
100430c0:	68fb      	ldr	r3, [r7, #12]
100430c2:	7b1b      	ldrb	r3, [r3, #12]
100430c4:	2b00      	cmp	r3, #0
100430c6:	d003      	beq.n	100430d0 <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
100430c8:	68fb      	ldr	r3, [r7, #12]
100430ca:	2200      	movs	r2, #0
100430cc:	731a      	strb	r2, [r3, #12]
100430ce:	e019      	b.n	10043104 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
100430d0:	68fb      	ldr	r3, [r7, #12]
100430d2:	685b      	ldr	r3, [r3, #4]
100430d4:	697a      	ldr	r2, [r7, #20]
100430d6:	8852      	ldrh	r2, [r2, #2]
100430d8:	3203      	adds	r2, #3
100430da:	2103      	movs	r1, #3
100430dc:	430a      	orrs	r2, r1
100430de:	189b      	adds	r3, r3, r2
100430e0:	1c5a      	adds	r2, r3, #1
100430e2:	68fb      	ldr	r3, [r7, #12]
100430e4:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
100430e6:	68fb      	ldr	r3, [r7, #12]
100430e8:	685b      	ldr	r3, [r3, #4]
100430ea:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100430ec:	68fb      	ldr	r3, [r7, #12]
100430ee:	685a      	ldr	r2, [r3, #4]
100430f0:	68fb      	ldr	r3, [r7, #12]
100430f2:	689b      	ldr	r3, [r3, #8]
100430f4:	429a      	cmp	r2, r3
100430f6:	d203      	bcs.n	10043100 <NextRecordNoLock+0x92>
100430f8:	697b      	ldr	r3, [r7, #20]
100430fa:	781b      	ldrb	r3, [r3, #0]
100430fc:	2bff      	cmp	r3, #255	@ 0xff
100430fe:	d101      	bne.n	10043104 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
10043100:	2304      	movs	r3, #4
10043102:	e029      	b.n	10043158 <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
10043104:	697b      	ldr	r3, [r7, #20]
10043106:	781b      	ldrb	r3, [r3, #0]
10043108:	2b00      	cmp	r3, #0
1004310a:	d023      	beq.n	10043154 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
1004310c:	697b      	ldr	r3, [r7, #20]
1004310e:	781b      	ldrb	r3, [r3, #0]
10043110:	2bfe      	cmp	r3, #254	@ 0xfe
10043112:	d001      	beq.n	10043118 <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
10043114:	2303      	movs	r3, #3
10043116:	e01f      	b.n	10043158 <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
10043118:	220b      	movs	r2, #11
1004311a:	18bb      	adds	r3, r7, r2
1004311c:	781b      	ldrb	r3, [r3, #0]
1004311e:	2bff      	cmp	r3, #255	@ 0xff
10043120:	d005      	beq.n	1004312e <NextRecordNoLock+0xc0>
10043122:	697b      	ldr	r3, [r7, #20]
10043124:	785b      	ldrb	r3, [r3, #1]
10043126:	18ba      	adds	r2, r7, r2
10043128:	7812      	ldrb	r2, [r2, #0]
1004312a:	429a      	cmp	r2, r3
1004312c:	d1c8      	bne.n	100430c0 <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
1004312e:	68fb      	ldr	r3, [r7, #12]
10043130:	685b      	ldr	r3, [r3, #4]
10043132:	3304      	adds	r3, #4
10043134:	001a      	movs	r2, r3
10043136:	687b      	ldr	r3, [r7, #4]
10043138:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
1004313a:	697b      	ldr	r3, [r7, #20]
1004313c:	885a      	ldrh	r2, [r3, #2]
1004313e:	683b      	ldr	r3, [r7, #0]
10043140:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
10043142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043144:	2b00      	cmp	r3, #0
10043146:	d003      	beq.n	10043150 <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
10043148:	697b      	ldr	r3, [r7, #20]
1004314a:	785a      	ldrb	r2, [r3, #1]
1004314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004314e:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
10043150:	2300      	movs	r3, #0
10043152:	e001      	b.n	10043158 <NextRecordNoLock+0xea>
      continue;
10043154:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
10043156:	e7b3      	b.n	100430c0 <NextRecordNoLock+0x52>
    }
  }
}
10043158:	0018      	movs	r0, r3
1004315a:	46bd      	mov	sp, r7
1004315c:	b006      	add	sp, #24
1004315e:	bd80      	pop	{r7, pc}

10043160 <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
10043160:	b5f0      	push	{r4, r5, r6, r7, lr}
10043162:	b08b      	sub	sp, #44	@ 0x2c
10043164:	af02      	add	r7, sp, #8
10043166:	60f8      	str	r0, [r7, #12]
10043168:	0008      	movs	r0, r1
1004316a:	0011      	movs	r1, r2
1004316c:	607b      	str	r3, [r7, #4]
1004316e:	230b      	movs	r3, #11
10043170:	18fb      	adds	r3, r7, r3
10043172:	1c02      	adds	r2, r0, #0
10043174:	701a      	strb	r2, [r3, #0]
10043176:	2208      	movs	r2, #8
10043178:	0010      	movs	r0, r2
1004317a:	18bb      	adds	r3, r7, r2
1004317c:	1c0a      	adds	r2, r1, #0
1004317e:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
10043180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10043182:	2200      	movs	r2, #0
10043184:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
10043186:	261f      	movs	r6, #31
10043188:	19bc      	adds	r4, r7, r6
1004318a:	2216      	movs	r2, #22
1004318c:	18bd      	adds	r5, r7, r2
1004318e:	2218      	movs	r2, #24
10043190:	18ba      	adds	r2, r7, r2
10043192:	230b      	movs	r3, #11
10043194:	18fb      	adds	r3, r7, r3
10043196:	7819      	ldrb	r1, [r3, #0]
10043198:	68fb      	ldr	r3, [r7, #12]
1004319a:	469c      	mov	ip, r3
1004319c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004319e:	9301      	str	r3, [sp, #4]
100431a0:	2338      	movs	r3, #56	@ 0x38
100431a2:	181b      	adds	r3, r3, r0
100431a4:	19db      	adds	r3, r3, r7
100431a6:	881b      	ldrh	r3, [r3, #0]
100431a8:	9300      	str	r3, [sp, #0]
100431aa:	002b      	movs	r3, r5
100431ac:	4660      	mov	r0, ip
100431ae:	f7ff ff5e 	bl	1004306e <NextRecordNoLock>
100431b2:	0003      	movs	r3, r0
100431b4:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
100431b6:	19bb      	adds	r3, r7, r6
100431b8:	781b      	ldrb	r3, [r3, #0]
100431ba:	2b00      	cmp	r3, #0
100431bc:	d002      	beq.n	100431c4 <ReadNextRecordNoLock+0x64>
  {
    return status;
100431be:	19bb      	adds	r3, r7, r6
100431c0:	781b      	ldrb	r3, [r3, #0]
100431c2:	e027      	b.n	10043214 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
100431c4:	2316      	movs	r3, #22
100431c6:	18fb      	adds	r3, r7, r3
100431c8:	881b      	ldrh	r3, [r3, #0]
100431ca:	2208      	movs	r2, #8
100431cc:	18ba      	adds	r2, r7, r2
100431ce:	8812      	ldrh	r2, [r2, #0]
100431d0:	429a      	cmp	r2, r3
100431d2:	d301      	bcc.n	100431d8 <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
100431d4:	2306      	movs	r3, #6
100431d6:	e01d      	b.n	10043214 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
100431d8:	69ba      	ldr	r2, [r7, #24]
100431da:	2408      	movs	r4, #8
100431dc:	193b      	adds	r3, r7, r4
100431de:	881b      	ldrh	r3, [r3, #0]
100431e0:	18d1      	adds	r1, r2, r3
100431e2:	2330      	movs	r3, #48	@ 0x30
100431e4:	2208      	movs	r2, #8
100431e6:	189b      	adds	r3, r3, r2
100431e8:	19db      	adds	r3, r3, r7
100431ea:	881a      	ldrh	r2, [r3, #0]
100431ec:	2316      	movs	r3, #22
100431ee:	18fb      	adds	r3, r7, r3
100431f0:	881b      	ldrh	r3, [r3, #0]
100431f2:	0018      	movs	r0, r3
100431f4:	193b      	adds	r3, r7, r4
100431f6:	881b      	ldrh	r3, [r3, #0]
100431f8:	1ac3      	subs	r3, r0, r3
100431fa:	429a      	cmp	r2, r3
100431fc:	dd00      	ble.n	10043200 <ReadNextRecordNoLock+0xa0>
100431fe:	001a      	movs	r2, r3
10043200:	687b      	ldr	r3, [r7, #4]
10043202:	0018      	movs	r0, r3
10043204:	f00a fbb5 	bl	1004d972 <memcpy>
  *size_p = data_len;
10043208:	2316      	movs	r3, #22
1004320a:	18fb      	adds	r3, r7, r3
1004320c:	881a      	ldrh	r2, [r3, #0]
1004320e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10043210:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10043212:	2300      	movs	r3, #0
}
10043214:	0018      	movs	r0, r3
10043216:	46bd      	mov	sp, r7
10043218:	b009      	add	sp, #36	@ 0x24
1004321a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004321c <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
1004321c:	b590      	push	{r4, r7, lr}
1004321e:	b089      	sub	sp, #36	@ 0x24
10043220:	af00      	add	r7, sp, #0
10043222:	60f8      	str	r0, [r7, #12]
10043224:	607a      	str	r2, [r7, #4]
10043226:	200a      	movs	r0, #10
10043228:	183b      	adds	r3, r7, r0
1004322a:	1c0a      	adds	r2, r1, #0
1004322c:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
1004322e:	687b      	ldr	r3, [r7, #4]
10043230:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
10043232:	0001      	movs	r1, r0
10043234:	187b      	adds	r3, r7, r1
10043236:	881b      	ldrh	r3, [r3, #0]
10043238:	089b      	lsrs	r3, r3, #2
1004323a:	b29a      	uxth	r2, r3
1004323c:	2016      	movs	r0, #22
1004323e:	183b      	adds	r3, r7, r0
10043240:	0092      	lsls	r2, r2, #2
10043242:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
10043244:	187b      	adds	r3, r7, r1
10043246:	881b      	ldrh	r3, [r3, #0]
10043248:	b2d9      	uxtb	r1, r3
1004324a:	183b      	adds	r3, r7, r0
1004324c:	881b      	ldrh	r3, [r3, #0]
1004324e:	b2da      	uxtb	r2, r3
10043250:	2315      	movs	r3, #21
10043252:	18fb      	adds	r3, r7, r3
10043254:	1a8a      	subs	r2, r1, r2
10043256:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
10043258:	2300      	movs	r3, #0
1004325a:	61fb      	str	r3, [r7, #28]
1004325c:	e013      	b.n	10043286 <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
1004325e:	69fb      	ldr	r3, [r7, #28]
10043260:	69ba      	ldr	r2, [r7, #24]
10043262:	18d1      	adds	r1, r2, r3
10043264:	2310      	movs	r3, #16
10043266:	18fb      	adds	r3, r7, r3
10043268:	2204      	movs	r2, #4
1004326a:	0018      	movs	r0, r3
1004326c:	f00a fb81 	bl	1004d972 <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
10043270:	69fa      	ldr	r2, [r7, #28]
10043272:	68fb      	ldr	r3, [r7, #12]
10043274:	18d3      	adds	r3, r2, r3
10043276:	693a      	ldr	r2, [r7, #16]
10043278:	0019      	movs	r1, r3
1004327a:	2000      	movs	r0, #0
1004327c:	f001 fe14 	bl	10044ea8 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
10043280:	69fb      	ldr	r3, [r7, #28]
10043282:	3304      	adds	r3, #4
10043284:	61fb      	str	r3, [r7, #28]
10043286:	2416      	movs	r4, #22
10043288:	193b      	adds	r3, r7, r4
1004328a:	881b      	ldrh	r3, [r3, #0]
1004328c:	69fa      	ldr	r2, [r7, #28]
1004328e:	429a      	cmp	r2, r3
10043290:	dbe5      	blt.n	1004325e <write_data+0x42>
  }
  word = 0xFFFFFFFF;
10043292:	2301      	movs	r3, #1
10043294:	425b      	negs	r3, r3
10043296:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
10043298:	193b      	adds	r3, r7, r4
1004329a:	881b      	ldrh	r3, [r3, #0]
1004329c:	69ba      	ldr	r2, [r7, #24]
1004329e:	18d1      	adds	r1, r2, r3
100432a0:	2315      	movs	r3, #21
100432a2:	18fb      	adds	r3, r7, r3
100432a4:	781a      	ldrb	r2, [r3, #0]
100432a6:	2310      	movs	r3, #16
100432a8:	18fb      	adds	r3, r7, r3
100432aa:	0018      	movs	r0, r3
100432ac:	f00a fb61 	bl	1004d972 <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
100432b0:	193b      	adds	r3, r7, r4
100432b2:	881a      	ldrh	r2, [r3, #0]
100432b4:	68fb      	ldr	r3, [r7, #12]
100432b6:	18d3      	adds	r3, r2, r3
100432b8:	693a      	ldr	r2, [r7, #16]
100432ba:	0019      	movs	r1, r3
100432bc:	2000      	movs	r0, #0
100432be:	f001 fdf3 	bl	10044ea8 <HAL_FLASH_Program>
}
100432c2:	46c0      	nop			@ (mov r8, r8)
100432c4:	46bd      	mov	sp, r7
100432c6:	b009      	add	sp, #36	@ 0x24
100432c8:	bd90      	pop	{r4, r7, pc}

100432ca <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
100432ca:	b5f0      	push	{r4, r5, r6, r7, lr}
100432cc:	b087      	sub	sp, #28
100432ce:	af00      	add	r7, sp, #0
100432d0:	60f8      	str	r0, [r7, #12]
100432d2:	0008      	movs	r0, r1
100432d4:	0011      	movs	r1, r2
100432d6:	607b      	str	r3, [r7, #4]
100432d8:	250b      	movs	r5, #11
100432da:	197b      	adds	r3, r7, r5
100432dc:	1c02      	adds	r2, r0, #0
100432de:	701a      	strb	r2, [r3, #0]
100432e0:	2408      	movs	r4, #8
100432e2:	193b      	adds	r3, r7, r4
100432e4:	1c0a      	adds	r2, r1, #0
100432e6:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
100432e8:	2310      	movs	r3, #16
100432ea:	18fb      	adds	r3, r7, r3
100432ec:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
100432ee:	193b      	adds	r3, r7, r4
100432f0:	881b      	ldrh	r3, [r3, #0]
100432f2:	3b01      	subs	r3, #1
100432f4:	b29b      	uxth	r3, r3
100432f6:	b21b      	sxth	r3, r3
100432f8:	2203      	movs	r2, #3
100432fa:	4313      	orrs	r3, r2
100432fc:	b21b      	sxth	r3, r3
100432fe:	b29a      	uxth	r2, r3
10043300:	193b      	adds	r3, r7, r4
10043302:	3201      	adds	r2, #1
10043304:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
10043306:	697b      	ldr	r3, [r7, #20]
10043308:	22fe      	movs	r2, #254	@ 0xfe
1004330a:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
1004330c:	697b      	ldr	r3, [r7, #20]
1004330e:	197a      	adds	r2, r7, r5
10043310:	7812      	ldrb	r2, [r2, #0]
10043312:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
10043314:	193a      	adds	r2, r7, r4
10043316:	2520      	movs	r5, #32
10043318:	2608      	movs	r6, #8
1004331a:	19ab      	adds	r3, r5, r6
1004331c:	2108      	movs	r1, #8
1004331e:	468c      	mov	ip, r1
10043320:	44bc      	add	ip, r7
10043322:	4463      	add	r3, ip
10043324:	8812      	ldrh	r2, [r2, #0]
10043326:	881b      	ldrh	r3, [r3, #0]
10043328:	18d3      	adds	r3, r2, r3
1004332a:	b29a      	uxth	r2, r3
1004332c:	697b      	ldr	r3, [r7, #20]
1004332e:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
10043330:	693a      	ldr	r2, [r7, #16]
10043332:	68fb      	ldr	r3, [r7, #12]
10043334:	0019      	movs	r1, r3
10043336:	2000      	movs	r0, #0
10043338:	f001 fdb6 	bl	10044ea8 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
1004333c:	68fb      	ldr	r3, [r7, #12]
1004333e:	1d18      	adds	r0, r3, #4
10043340:	687a      	ldr	r2, [r7, #4]
10043342:	193b      	adds	r3, r7, r4
10043344:	881b      	ldrh	r3, [r3, #0]
10043346:	0019      	movs	r1, r3
10043348:	f7ff ff68 	bl	1004321c <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
1004334c:	193b      	adds	r3, r7, r4
1004334e:	881a      	ldrh	r2, [r3, #0]
10043350:	68fb      	ldr	r3, [r7, #12]
10043352:	18d3      	adds	r3, r2, r3
10043354:	1d18      	adds	r0, r3, #4
10043356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10043358:	19ab      	adds	r3, r5, r6
1004335a:	2108      	movs	r1, #8
1004335c:	468c      	mov	ip, r1
1004335e:	44bc      	add	ip, r7
10043360:	4463      	add	r3, ip
10043362:	881b      	ldrh	r3, [r3, #0]
10043364:	0019      	movs	r1, r3
10043366:	f7ff ff59 	bl	1004321c <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004336a:	2300      	movs	r3, #0
}
1004336c:	0018      	movs	r0, r3
1004336e:	46bd      	mov	sp, r7
10043370:	b007      	add	sp, #28
10043372:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043374 <ReadCurrentRecordNoLock>:
    return -1;
  }
}

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
10043374:	b590      	push	{r4, r7, lr}
10043376:	b087      	sub	sp, #28
10043378:	af00      	add	r7, sp, #0
1004337a:	60f8      	str	r0, [r7, #12]
1004337c:	0008      	movs	r0, r1
1004337e:	607a      	str	r2, [r7, #4]
10043380:	0019      	movs	r1, r3
10043382:	230a      	movs	r3, #10
10043384:	18fb      	adds	r3, r7, r3
10043386:	1c02      	adds	r2, r0, #0
10043388:	801a      	strh	r2, [r3, #0]
1004338a:	2308      	movs	r3, #8
1004338c:	0018      	movs	r0, r3
1004338e:	18fb      	adds	r3, r7, r3
10043390:	1c0a      	adds	r2, r1, #0
10043392:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
10043394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10043396:	2200      	movs	r2, #0
10043398:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
1004339a:	2224      	movs	r2, #36	@ 0x24
1004339c:	1813      	adds	r3, r2, r0
1004339e:	19db      	adds	r3, r3, r7
100433a0:	881b      	ldrh	r3, [r3, #0]
100433a2:	2b00      	cmp	r3, #0
100433a4:	d00b      	beq.n	100433be <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
100433a6:	2110      	movs	r1, #16
100433a8:	187b      	adds	r3, r7, r1
100433aa:	1812      	adds	r2, r2, r0
100433ac:	19d2      	adds	r2, r2, r7
100433ae:	8812      	ldrh	r2, [r2, #0]
100433b0:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
100433b2:	187b      	adds	r3, r7, r1
100433b4:	22fe      	movs	r2, #254	@ 0xfe
100433b6:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
100433b8:	187b      	adds	r3, r7, r1
100433ba:	617b      	str	r3, [r7, #20]
100433bc:	e002      	b.n	100433c4 <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
100433be:	68fb      	ldr	r3, [r7, #12]
100433c0:	685b      	ldr	r3, [r3, #4]
100433c2:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100433c4:	68fb      	ldr	r3, [r7, #12]
100433c6:	685a      	ldr	r2, [r3, #4]
100433c8:	68fb      	ldr	r3, [r7, #12]
100433ca:	689b      	ldr	r3, [r3, #8]
100433cc:	429a      	cmp	r2, r3
100433ce:	d203      	bcs.n	100433d8 <ReadCurrentRecordNoLock+0x64>
100433d0:	697b      	ldr	r3, [r7, #20]
100433d2:	781b      	ldrb	r3, [r3, #0]
100433d4:	2bff      	cmp	r3, #255	@ 0xff
100433d6:	d101      	bne.n	100433dc <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
100433d8:	2304      	movs	r3, #4
100433da:	e033      	b.n	10043444 <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
100433dc:	68fb      	ldr	r3, [r7, #12]
100433de:	7b1b      	ldrb	r3, [r3, #12]
100433e0:	2b00      	cmp	r3, #0
100433e2:	d103      	bne.n	100433ec <ReadCurrentRecordNoLock+0x78>
100433e4:	697b      	ldr	r3, [r7, #20]
100433e6:	781b      	ldrb	r3, [r3, #0]
100433e8:	2bfe      	cmp	r3, #254	@ 0xfe
100433ea:	d001      	beq.n	100433f0 <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
100433ec:	2305      	movs	r3, #5
100433ee:	e029      	b.n	10043444 <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
100433f0:	697b      	ldr	r3, [r7, #20]
100433f2:	885b      	ldrh	r3, [r3, #2]
100433f4:	220a      	movs	r2, #10
100433f6:	18ba      	adds	r2, r7, r2
100433f8:	8812      	ldrh	r2, [r2, #0]
100433fa:	429a      	cmp	r2, r3
100433fc:	d301      	bcc.n	10043402 <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
100433fe:	2306      	movs	r3, #6
10043400:	e020      	b.n	10043444 <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
10043402:	68fb      	ldr	r3, [r7, #12]
10043404:	2200      	movs	r2, #0
10043406:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
10043408:	240a      	movs	r4, #10
1004340a:	193b      	adds	r3, r7, r4
1004340c:	881a      	ldrh	r2, [r3, #0]
1004340e:	68fb      	ldr	r3, [r7, #12]
10043410:	685b      	ldr	r3, [r3, #4]
10043412:	18d3      	adds	r3, r2, r3
10043414:	3304      	adds	r3, #4
10043416:	0018      	movs	r0, r3
10043418:	2308      	movs	r3, #8
1004341a:	18fb      	adds	r3, r7, r3
1004341c:	881a      	ldrh	r2, [r3, #0]
1004341e:	697b      	ldr	r3, [r7, #20]
10043420:	885b      	ldrh	r3, [r3, #2]
10043422:	0019      	movs	r1, r3
10043424:	193b      	adds	r3, r7, r4
10043426:	881b      	ldrh	r3, [r3, #0]
10043428:	1acb      	subs	r3, r1, r3
1004342a:	429a      	cmp	r2, r3
1004342c:	dd00      	ble.n	10043430 <ReadCurrentRecordNoLock+0xbc>
1004342e:	001a      	movs	r2, r3
10043430:	687b      	ldr	r3, [r7, #4]
10043432:	0001      	movs	r1, r0
10043434:	0018      	movs	r0, r3
10043436:	f00a fa9c 	bl	1004d972 <memcpy>
  *size_p = record_p->header.length;
1004343a:	697b      	ldr	r3, [r7, #20]
1004343c:	885a      	ldrh	r2, [r3, #2]
1004343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10043440:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10043442:	2300      	movs	r3, #0
}
10043444:	0018      	movs	r0, r3
10043446:	46bd      	mov	sp, r7
10043448:	b007      	add	sp, #28
1004344a:	bd90      	pop	{r4, r7, pc}

1004344c <ErasePage>:
    return NVMDB_STATUS_INVALID_RECORD;
  }
}

static void ErasePage(uint32_t address, uint8_t num_pages)
{
1004344c:	b580      	push	{r7, lr}
1004344e:	b088      	sub	sp, #32
10043450:	af00      	add	r7, sp, #0
10043452:	6078      	str	r0, [r7, #4]
10043454:	000a      	movs	r2, r1
10043456:	1cfb      	adds	r3, r7, #3
10043458:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004345a:	687b      	ldr	r3, [r7, #4]
1004345c:	4a0d      	ldr	r2, [pc, #52]	@ (10043494 <ErasePage+0x48>)
1004345e:	4694      	mov	ip, r2
10043460:	4463      	add	r3, ip
10043462:	0adb      	lsrs	r3, r3, #11
10043464:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
10043466:	2110      	movs	r1, #16
10043468:	187b      	adds	r3, r7, r1
1004346a:	2200      	movs	r2, #0
1004346c:	601a      	str	r2, [r3, #0]
1004346e:	69fa      	ldr	r2, [r7, #28]
10043470:	187b      	adds	r3, r7, r1
10043472:	605a      	str	r2, [r3, #4]
10043474:	1cfb      	adds	r3, r7, #3
10043476:	781a      	ldrb	r2, [r3, #0]
10043478:	187b      	adds	r3, r7, r1
1004347a:	609a      	str	r2, [r3, #8]
1004347c:	230c      	movs	r3, #12
1004347e:	18fa      	adds	r2, r7, r3
10043480:	187b      	adds	r3, r7, r1
10043482:	0011      	movs	r1, r2
10043484:	0018      	movs	r0, r3
10043486:	f001 fde9 	bl	1004505c <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
1004348a:	46c0      	nop			@ (mov r8, r8)
1004348c:	46bd      	mov	sp, r7
1004348e:	b008      	add	sp, #32
10043490:	bd80      	pop	{r7, pc}
10043492:	46c0      	nop			@ (mov r8, r8)
10043494:	effc0000 	.word	0xeffc0000

10043498 <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
10043498:	b580      	push	{r7, lr}
1004349a:	b086      	sub	sp, #24
1004349c:	af00      	add	r7, sp, #0
1004349e:	60f8      	str	r0, [r7, #12]
100434a0:	60b9      	str	r1, [r7, #8]
100434a2:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
100434a4:	687b      	ldr	r3, [r7, #4]
100434a6:	055b      	lsls	r3, r3, #21
100434a8:	0d5b      	lsrs	r3, r3, #21
100434aa:	d107      	bne.n	100434bc <WriteBufferToFlash+0x24>
100434ac:	68fb      	ldr	r3, [r7, #12]
100434ae:	687a      	ldr	r2, [r7, #4]
100434b0:	68b9      	ldr	r1, [r7, #8]
100434b2:	0018      	movs	r0, r3
100434b4:	f00a f9f0 	bl	1004d898 <memcmp>
100434b8:	1e03      	subs	r3, r0, #0
100434ba:	d026      	beq.n	1004350a <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
100434bc:	687b      	ldr	r3, [r7, #4]
100434be:	3b01      	subs	r3, #1
100434c0:	4a14      	ldr	r2, [pc, #80]	@ (10043514 <WriteBufferToFlash+0x7c>)
100434c2:	4313      	orrs	r3, r2
100434c4:	3301      	adds	r3, #1
100434c6:	0adb      	lsrs	r3, r3, #11
100434c8:	b2da      	uxtb	r2, r3
100434ca:	68fb      	ldr	r3, [r7, #12]
100434cc:	0011      	movs	r1, r2
100434ce:	0018      	movs	r0, r3
100434d0:	f7ff ffbc 	bl	1004344c <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
100434d4:	2300      	movs	r3, #0
100434d6:	617b      	str	r3, [r7, #20]
100434d8:	e012      	b.n	10043500 <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
100434da:	697a      	ldr	r2, [r7, #20]
100434dc:	68fb      	ldr	r3, [r7, #12]
100434de:	18d1      	adds	r1, r2, r3
100434e0:	697b      	ldr	r3, [r7, #20]
100434e2:	2b00      	cmp	r3, #0
100434e4:	da00      	bge.n	100434e8 <WriteBufferToFlash+0x50>
100434e6:	3303      	adds	r3, #3
100434e8:	109b      	asrs	r3, r3, #2
100434ea:	009b      	lsls	r3, r3, #2
100434ec:	68ba      	ldr	r2, [r7, #8]
100434ee:	18d3      	adds	r3, r2, r3
100434f0:	681b      	ldr	r3, [r3, #0]
100434f2:	001a      	movs	r2, r3
100434f4:	2000      	movs	r0, #0
100434f6:	f001 fcd7 	bl	10044ea8 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
100434fa:	697b      	ldr	r3, [r7, #20]
100434fc:	3304      	adds	r3, #4
100434fe:	617b      	str	r3, [r7, #20]
10043500:	697b      	ldr	r3, [r7, #20]
10043502:	687a      	ldr	r2, [r7, #4]
10043504:	429a      	cmp	r2, r3
10043506:	d8e8      	bhi.n	100434da <WriteBufferToFlash+0x42>
10043508:	e000      	b.n	1004350c <WriteBufferToFlash+0x74>
    return;
1004350a:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
1004350c:	46bd      	mov	sp, r7
1004350e:	b006      	add	sp, #24
10043510:	bd80      	pop	{r7, pc}
10043512:	46c0      	nop			@ (mov r8, r8)
10043514:	000007ff 	.word	0x000007ff

10043518 <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
10043518:	b580      	push	{r7, lr}
1004351a:	b082      	sub	sp, #8
1004351c:	af00      	add	r7, sp, #0
1004351e:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
10043520:	687b      	ldr	r3, [r7, #4]
10043522:	2201      	movs	r2, #1
10043524:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
10043526:	687b      	ldr	r3, [r7, #4]
10043528:	2200      	movs	r2, #0
1004352a:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
1004352c:	687b      	ldr	r3, [r7, #4]
1004352e:	2200      	movs	r2, #0
10043530:	809a      	strh	r2, [r3, #4]
}
10043532:	46c0      	nop			@ (mov r8, r8)
10043534:	46bd      	mov	sp, r7
10043536:	b002      	add	sp, #8
10043538:	bd80      	pop	{r7, pc}

1004353a <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
1004353a:	b5f0      	push	{r4, r5, r6, r7, lr}
1004353c:	b08d      	sub	sp, #52	@ 0x34
1004353e:	af04      	add	r7, sp, #16
10043540:	60f8      	str	r0, [r7, #12]
10043542:	60b9      	str	r1, [r7, #8]
10043544:	603b      	str	r3, [r7, #0]
10043546:	1dbb      	adds	r3, r7, #6
10043548:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
1004354a:	231e      	movs	r3, #30
1004354c:	18fb      	adds	r3, r7, r3
1004354e:	2200      	movs	r2, #0
10043550:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
10043552:	1dbb      	adds	r3, r7, #6
10043554:	881a      	ldrh	r2, [r3, #0]
10043556:	68bb      	ldr	r3, [r7, #8]
10043558:	21ff      	movs	r1, #255	@ 0xff
1004355a:	0018      	movs	r0, r3
1004355c:	f00a f9aa 	bl	1004d8b4 <memset>

  header.valid_flag = VALID_RECORD;
10043560:	2310      	movs	r3, #16
10043562:	18fb      	adds	r3, r7, r3
10043564:	22fe      	movs	r2, #254	@ 0xfe
10043566:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10043568:	1dba      	adds	r2, r7, #6
1004356a:	251e      	movs	r5, #30
1004356c:	197b      	adds	r3, r7, r5
1004356e:	8812      	ldrh	r2, [r2, #0]
10043570:	881b      	ldrh	r3, [r3, #0]
10043572:	1ad3      	subs	r3, r2, r3
10043574:	b29a      	uxth	r2, r3
10043576:	231c      	movs	r3, #28
10043578:	18fb      	adds	r3, r7, r3
1004357a:	3a04      	subs	r2, #4
1004357c:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
1004357e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043580:	781b      	ldrb	r3, [r3, #0]
10043582:	2b00      	cmp	r3, #0
10043584:	d04e      	beq.n	10043624 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
10043586:	197b      	adds	r3, r7, r5
10043588:	881b      	ldrh	r3, [r3, #0]
1004358a:	3304      	adds	r3, #4
1004358c:	68ba      	ldr	r2, [r7, #8]
1004358e:	18d1      	adds	r1, r2, r3
10043590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043592:	889b      	ldrh	r3, [r3, #4]
10043594:	261b      	movs	r6, #27
10043596:	19bc      	adds	r4, r7, r6
10043598:	68f8      	ldr	r0, [r7, #12]
1004359a:	2210      	movs	r2, #16
1004359c:	18ba      	adds	r2, r7, r2
1004359e:	3201      	adds	r2, #1
100435a0:	9203      	str	r2, [sp, #12]
100435a2:	9302      	str	r3, [sp, #8]
100435a4:	2216      	movs	r2, #22
100435a6:	18bb      	adds	r3, r7, r2
100435a8:	9301      	str	r3, [sp, #4]
100435aa:	231c      	movs	r3, #28
100435ac:	18fb      	adds	r3, r7, r3
100435ae:	881b      	ldrh	r3, [r3, #0]
100435b0:	9300      	str	r3, [sp, #0]
100435b2:	000b      	movs	r3, r1
100435b4:	2200      	movs	r2, #0
100435b6:	21ff      	movs	r1, #255	@ 0xff
100435b8:	f7ff fdd2 	bl	10043160 <ReadNextRecordNoLock>
100435bc:	0003      	movs	r3, r0
100435be:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
100435c0:	2216      	movs	r2, #22
100435c2:	18bb      	adds	r3, r7, r2
100435c4:	881a      	ldrh	r2, [r3, #0]
100435c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100435c8:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
100435ca:	19bb      	adds	r3, r7, r6
100435cc:	781b      	ldrb	r3, [r3, #0]
100435ce:	2b00      	cmp	r3, #0
100435d0:	d006      	beq.n	100435e0 <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
100435d2:	683b      	ldr	r3, [r7, #0]
100435d4:	197a      	adds	r2, r7, r5
100435d6:	8812      	ldrh	r2, [r2, #0]
100435d8:	801a      	strh	r2, [r3, #0]
        return status;
100435da:	19bb      	adds	r3, r7, r6
100435dc:	781b      	ldrb	r3, [r3, #0]
100435de:	e0a1      	b.n	10043724 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
100435e0:	2316      	movs	r3, #22
100435e2:	18fb      	adds	r3, r7, r3
100435e4:	881a      	ldrh	r2, [r3, #0]
100435e6:	2110      	movs	r1, #16
100435e8:	187b      	adds	r3, r7, r1
100435ea:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
100435ec:	251e      	movs	r5, #30
100435ee:	197b      	adds	r3, r7, r5
100435f0:	881b      	ldrh	r3, [r3, #0]
100435f2:	68ba      	ldr	r2, [r7, #8]
100435f4:	18d3      	adds	r3, r2, r3
100435f6:	000c      	movs	r4, r1
100435f8:	1879      	adds	r1, r7, r1
100435fa:	2204      	movs	r2, #4
100435fc:	0018      	movs	r0, r3
100435fe:	f00a f9b8 	bl	1004d972 <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
10043602:	193b      	adds	r3, r7, r4
10043604:	885b      	ldrh	r3, [r3, #2]
10043606:	3303      	adds	r3, #3
10043608:	b29b      	uxth	r3, r3
1004360a:	b21b      	sxth	r3, r3
1004360c:	2203      	movs	r2, #3
1004360e:	4313      	orrs	r3, r2
10043610:	b21b      	sxth	r3, r3
10043612:	b29a      	uxth	r2, r3
10043614:	197b      	adds	r3, r7, r5
10043616:	881b      	ldrh	r3, [r3, #0]
10043618:	18d3      	adds	r3, r2, r3
1004361a:	b29a      	uxth	r2, r3
1004361c:	197b      	adds	r3, r7, r5
1004361e:	3201      	adds	r2, #1
10043620:	801a      	strh	r2, [r3, #0]
10043622:	e031      	b.n	10043688 <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
10043624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043626:	8859      	ldrh	r1, [r3, #2]
10043628:	231e      	movs	r3, #30
1004362a:	18fb      	adds	r3, r7, r3
1004362c:	881b      	ldrh	r3, [r3, #0]
1004362e:	68ba      	ldr	r2, [r7, #8]
10043630:	18d5      	adds	r5, r2, r3
10043632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043634:	889b      	ldrh	r3, [r3, #4]
10043636:	261b      	movs	r6, #27
10043638:	19bc      	adds	r4, r7, r6
1004363a:	221c      	movs	r2, #28
1004363c:	18ba      	adds	r2, r7, r2
1004363e:	8812      	ldrh	r2, [r2, #0]
10043640:	68f8      	ldr	r0, [r7, #12]
10043642:	9301      	str	r3, [sp, #4]
10043644:	2316      	movs	r3, #22
10043646:	18fb      	adds	r3, r7, r3
10043648:	9300      	str	r3, [sp, #0]
1004364a:	0013      	movs	r3, r2
1004364c:	002a      	movs	r2, r5
1004364e:	f7ff fe91 	bl	10043374 <ReadCurrentRecordNoLock>
10043652:	0003      	movs	r3, r0
10043654:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
10043656:	19bb      	adds	r3, r7, r6
10043658:	781b      	ldrb	r3, [r3, #0]
1004365a:	2b00      	cmp	r3, #0
1004365c:	d002      	beq.n	10043664 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
1004365e:	19bb      	adds	r3, r7, r6
10043660:	781b      	ldrb	r3, [r3, #0]
10043662:	e05f      	b.n	10043724 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
10043664:	2316      	movs	r3, #22
10043666:	18fb      	adds	r3, r7, r3
10043668:	881a      	ldrh	r2, [r3, #0]
1004366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004366c:	885b      	ldrh	r3, [r3, #2]
1004366e:	1ad3      	subs	r3, r2, r3
10043670:	b29b      	uxth	r3, r3
10043672:	3b01      	subs	r3, #1
10043674:	b29b      	uxth	r3, r3
10043676:	b21b      	sxth	r3, r3
10043678:	2203      	movs	r2, #3
1004367a:	4313      	orrs	r3, r2
1004367c:	b21b      	sxth	r3, r3
1004367e:	b29a      	uxth	r2, r3
10043680:	231e      	movs	r3, #30
10043682:	18fb      	adds	r3, r7, r3
10043684:	3201      	adds	r2, #1
10043686:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
10043688:	2316      	movs	r3, #22
1004368a:	18fb      	adds	r3, r7, r3
1004368c:	881a      	ldrh	r2, [r3, #0]
1004368e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043690:	885b      	ldrh	r3, [r3, #2]
10043692:	1ad3      	subs	r3, r2, r3
10043694:	b29b      	uxth	r3, r3
10043696:	3b01      	subs	r3, #1
10043698:	b29b      	uxth	r3, r3
1004369a:	b21b      	sxth	r3, r3
1004369c:	2203      	movs	r2, #3
1004369e:	4313      	orrs	r3, r2
100436a0:	b21b      	sxth	r3, r3
100436a2:	b29a      	uxth	r2, r3
100436a4:	2118      	movs	r1, #24
100436a6:	187b      	adds	r3, r7, r1
100436a8:	3201      	adds	r2, #1
100436aa:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
100436ac:	187a      	adds	r2, r7, r1
100436ae:	211c      	movs	r1, #28
100436b0:	187b      	adds	r3, r7, r1
100436b2:	8812      	ldrh	r2, [r2, #0]
100436b4:	881b      	ldrh	r3, [r3, #0]
100436b6:	429a      	cmp	r2, r3
100436b8:	d910      	bls.n	100436dc <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
100436ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100436bc:	2200      	movs	r2, #0
100436be:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
100436c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100436c2:	885a      	ldrh	r2, [r3, #2]
100436c4:	187b      	adds	r3, r7, r1
100436c6:	881b      	ldrh	r3, [r3, #0]
100436c8:	18d3      	adds	r3, r2, r3
100436ca:	b29a      	uxth	r2, r3
100436cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100436ce:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
100436d0:	683b      	ldr	r3, [r7, #0]
100436d2:	1dba      	adds	r2, r7, #6
100436d4:	8812      	ldrh	r2, [r2, #0]
100436d6:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
100436d8:	2300      	movs	r3, #0
100436da:	e023      	b.n	10043724 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
100436dc:	2318      	movs	r3, #24
100436de:	18fa      	adds	r2, r7, r3
100436e0:	231c      	movs	r3, #28
100436e2:	18fb      	adds	r3, r7, r3
100436e4:	8812      	ldrh	r2, [r2, #0]
100436e6:	881b      	ldrh	r3, [r3, #0]
100436e8:	429a      	cmp	r2, r3
100436ea:	d10b      	bne.n	10043704 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
100436ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100436ee:	2201      	movs	r2, #1
100436f0:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
100436f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100436f4:	2200      	movs	r2, #0
100436f6:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
100436f8:	683b      	ldr	r3, [r7, #0]
100436fa:	1dba      	adds	r2, r7, #6
100436fc:	8812      	ldrh	r2, [r2, #0]
100436fe:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
10043700:	2300      	movs	r3, #0
10043702:	e00f      	b.n	10043724 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
10043704:	2318      	movs	r3, #24
10043706:	18fa      	adds	r2, r7, r3
10043708:	231c      	movs	r3, #28
1004370a:	18fb      	adds	r3, r7, r3
1004370c:	8812      	ldrh	r2, [r2, #0]
1004370e:	881b      	ldrh	r3, [r3, #0]
10043710:	429a      	cmp	r2, r3
10043712:	d300      	bcc.n	10043716 <LoadDBToRAM+0x1dc>
10043714:	e728      	b.n	10043568 <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
10043716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043718:	2201      	movs	r2, #1
1004371a:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
1004371c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004371e:	2200      	movs	r2, #0
10043720:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10043722:	e721      	b.n	10043568 <LoadDBToRAM+0x2e>
    }
  }
}
10043724:	0018      	movs	r0, r3
10043726:	46bd      	mov	sp, r7
10043728:	b009      	add	sp, #36	@ 0x24
1004372a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004372c <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
1004372c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004372e:	4c60      	ldr	r4, [pc, #384]	@ (100438b0 <CleanLargeDB+0x184>)
10043730:	44a5      	add	sp, r4
10043732:	af02      	add	r7, sp, #8
10043734:	0002      	movs	r2, r0
10043736:	4b5f      	ldr	r3, [pc, #380]	@ (100438b4 <CleanLargeDB+0x188>)
10043738:	2184      	movs	r1, #132	@ 0x84
1004373a:	0109      	lsls	r1, r1, #4
1004373c:	185b      	adds	r3, r3, r1
1004373e:	19db      	adds	r3, r3, r7
10043740:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
10043742:	4b5c      	ldr	r3, [pc, #368]	@ (100438b4 <CleanLargeDB+0x188>)
10043744:	185b      	adds	r3, r3, r1
10043746:	19db      	adds	r3, r3, r7
10043748:	781a      	ldrb	r2, [r3, #0]
1004374a:	495b      	ldr	r1, [pc, #364]	@ (100438b8 <CleanLargeDB+0x18c>)
1004374c:	0013      	movs	r3, r2
1004374e:	009b      	lsls	r3, r3, #2
10043750:	189b      	adds	r3, r3, r2
10043752:	009b      	lsls	r3, r3, #2
10043754:	18cb      	adds	r3, r1, r3
10043756:	330a      	adds	r3, #10
10043758:	881b      	ldrh	r3, [r3, #0]
1004375a:	2b00      	cmp	r3, #0
1004375c:	d101      	bne.n	10043762 <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
1004375e:	2300      	movs	r3, #0
10043760:	e0a0      	b.n	100438a4 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
10043762:	4b56      	ldr	r3, [pc, #344]	@ (100438bc <CleanLargeDB+0x190>)
10043764:	18fc      	adds	r4, r7, r3
10043766:	4d56      	ldr	r5, [pc, #344]	@ (100438c0 <CleanLargeDB+0x194>)
10043768:	197a      	adds	r2, r7, r5
1004376a:	4b52      	ldr	r3, [pc, #328]	@ (100438b4 <CleanLargeDB+0x188>)
1004376c:	2184      	movs	r1, #132	@ 0x84
1004376e:	0109      	lsls	r1, r1, #4
10043770:	185b      	adds	r3, r3, r1
10043772:	19db      	adds	r3, r3, r7
10043774:	781b      	ldrb	r3, [r3, #0]
10043776:	0011      	movs	r1, r2
10043778:	0018      	movs	r0, r3
1004377a:	f000 fc4b 	bl	10044014 <NVMDB_HandleInit>
1004377e:	0003      	movs	r3, r0
10043780:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
10043782:	197b      	adds	r3, r7, r5
10043784:	685b      	ldr	r3, [r3, #4]
10043786:	4a4f      	ldr	r2, [pc, #316]	@ (100438c4 <CleanLargeDB+0x198>)
10043788:	18ba      	adds	r2, r7, r2
1004378a:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
1004378c:	4b4e      	ldr	r3, [pc, #312]	@ (100438c8 <CleanLargeDB+0x19c>)
1004378e:	18fb      	adds	r3, r7, r3
10043790:	0018      	movs	r0, r3
10043792:	f7ff fec1 	bl	10043518 <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
10043796:	4e49      	ldr	r6, [pc, #292]	@ (100438bc <CleanLargeDB+0x190>)
10043798:	19bc      	adds	r4, r7, r6
1004379a:	4b4c      	ldr	r3, [pc, #304]	@ (100438cc <CleanLargeDB+0x1a0>)
1004379c:	18fd      	adds	r5, r7, r3
1004379e:	2380      	movs	r3, #128	@ 0x80
100437a0:	011a      	lsls	r2, r3, #4
100437a2:	230c      	movs	r3, #12
100437a4:	18f9      	adds	r1, r7, r3
100437a6:	4b46      	ldr	r3, [pc, #280]	@ (100438c0 <CleanLargeDB+0x194>)
100437a8:	18f8      	adds	r0, r7, r3
100437aa:	4b47      	ldr	r3, [pc, #284]	@ (100438c8 <CleanLargeDB+0x19c>)
100437ac:	18fb      	adds	r3, r7, r3
100437ae:	9300      	str	r3, [sp, #0]
100437b0:	002b      	movs	r3, r5
100437b2:	f7ff fec2 	bl	1004353a <LoadDBToRAM>
100437b6:	0003      	movs	r3, r0
100437b8:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
100437ba:	19bb      	adds	r3, r7, r6
100437bc:	781b      	ldrb	r3, [r3, #0]
100437be:	2b04      	cmp	r3, #4
100437c0:	d006      	beq.n	100437d0 <CleanLargeDB+0xa4>
100437c2:	19bb      	adds	r3, r7, r6
100437c4:	781b      	ldrb	r3, [r3, #0]
100437c6:	2b00      	cmp	r3, #0
100437c8:	d002      	beq.n	100437d0 <CleanLargeDB+0xa4>
    {
      return status;
100437ca:	19bb      	adds	r3, r7, r6
100437cc:	781b      	ldrb	r3, [r3, #0]
100437ce:	e069      	b.n	100438a4 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
100437d0:	4b3e      	ldr	r3, [pc, #248]	@ (100438cc <CleanLargeDB+0x1a0>)
100437d2:	18fb      	adds	r3, r7, r3
100437d4:	881a      	ldrh	r2, [r3, #0]
100437d6:	2380      	movs	r3, #128	@ 0x80
100437d8:	011b      	lsls	r3, r3, #4
100437da:	429a      	cmp	r2, r3
100437dc:	d004      	beq.n	100437e8 <CleanLargeDB+0xbc>
100437de:	4b37      	ldr	r3, [pc, #220]	@ (100438bc <CleanLargeDB+0x190>)
100437e0:	18fb      	adds	r3, r7, r3
100437e2:	781b      	ldrb	r3, [r3, #0]
100437e4:	2b00      	cmp	r3, #0
100437e6:	d0d6      	beq.n	10043796 <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
100437e8:	4a38      	ldr	r2, [pc, #224]	@ (100438cc <CleanLargeDB+0x1a0>)
100437ea:	18bb      	adds	r3, r7, r2
100437ec:	881b      	ldrh	r3, [r3, #0]
100437ee:	2b00      	cmp	r3, #0
100437f0:	d019      	beq.n	10043826 <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
100437f2:	18bb      	adds	r3, r7, r2
100437f4:	881b      	ldrh	r3, [r3, #0]
100437f6:	001a      	movs	r2, r3
100437f8:	230c      	movs	r3, #12
100437fa:	18f9      	adds	r1, r7, r3
100437fc:	4c31      	ldr	r4, [pc, #196]	@ (100438c4 <CleanLargeDB+0x198>)
100437fe:	193b      	adds	r3, r7, r4
10043800:	681b      	ldr	r3, [r3, #0]
10043802:	0018      	movs	r0, r3
10043804:	f7ff fe48 	bl	10043498 <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
10043808:	0022      	movs	r2, r4
1004380a:	18bb      	adds	r3, r7, r2
1004380c:	681b      	ldr	r3, [r3, #0]
1004380e:	2180      	movs	r1, #128	@ 0x80
10043810:	0109      	lsls	r1, r1, #4
10043812:	468c      	mov	ip, r1
10043814:	4463      	add	r3, ip
10043816:	18ba      	adds	r2, r7, r2
10043818:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
1004381a:	4b28      	ldr	r3, [pc, #160]	@ (100438bc <CleanLargeDB+0x190>)
1004381c:	18fb      	adds	r3, r7, r3
1004381e:	781b      	ldrb	r3, [r3, #0]
10043820:	2b00      	cmp	r3, #0
10043822:	d102      	bne.n	1004382a <CleanLargeDB+0xfe>
  {
10043824:	e7b7      	b.n	10043796 <CleanLargeDB+0x6a>
        break;
10043826:	46c0      	nop			@ (mov r8, r8)
10043828:	e000      	b.n	1004382c <CleanLargeDB+0x100>
      {
        break;
1004382a:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
1004382c:	4b24      	ldr	r3, [pc, #144]	@ (100438c0 <CleanLargeDB+0x194>)
1004382e:	18fb      	adds	r3, r7, r3
10043830:	689b      	ldr	r3, [r3, #8]
10043832:	3b01      	subs	r3, #1
10043834:	4a26      	ldr	r2, [pc, #152]	@ (100438d0 <CleanLargeDB+0x1a4>)
10043836:	431a      	orrs	r2, r3
10043838:	4922      	ldr	r1, [pc, #136]	@ (100438c4 <CleanLargeDB+0x198>)
1004383a:	187b      	adds	r3, r7, r1
1004383c:	681b      	ldr	r3, [r3, #0]
1004383e:	1ad3      	subs	r3, r2, r3
10043840:	3301      	adds	r3, #1
10043842:	0ada      	lsrs	r2, r3, #11
10043844:	4823      	ldr	r0, [pc, #140]	@ (100438d4 <CleanLargeDB+0x1a8>)
10043846:	183b      	adds	r3, r7, r0
10043848:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004384a:	187b      	adds	r3, r7, r1
1004384c:	681b      	ldr	r3, [r3, #0]
1004384e:	4a22      	ldr	r2, [pc, #136]	@ (100438d8 <CleanLargeDB+0x1ac>)
10043850:	4694      	mov	ip, r2
10043852:	4463      	add	r3, ip
10043854:	0ada      	lsrs	r2, r3, #11
10043856:	4c21      	ldr	r4, [pc, #132]	@ (100438dc <CleanLargeDB+0x1b0>)
10043858:	193b      	adds	r3, r7, r4
1004385a:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
1004385c:	2181      	movs	r1, #129	@ 0x81
1004385e:	0109      	lsls	r1, r1, #4
10043860:	187b      	adds	r3, r7, r1
10043862:	2200      	movs	r2, #0
10043864:	601a      	str	r2, [r3, #0]
10043866:	193b      	adds	r3, r7, r4
10043868:	781a      	ldrb	r2, [r3, #0]
1004386a:	187b      	adds	r3, r7, r1
1004386c:	605a      	str	r2, [r3, #4]
1004386e:	183b      	adds	r3, r7, r0
10043870:	781a      	ldrb	r2, [r3, #0]
10043872:	187b      	adds	r3, r7, r1
10043874:	609a      	str	r2, [r3, #8]
10043876:	4b1a      	ldr	r3, [pc, #104]	@ (100438e0 <CleanLargeDB+0x1b4>)
10043878:	18fa      	adds	r2, r7, r3
1004387a:	187b      	adds	r3, r7, r1
1004387c:	0011      	movs	r1, r2
1004387e:	0018      	movs	r0, r3
10043880:	f001 fbec 	bl	1004505c <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
10043884:	4b0b      	ldr	r3, [pc, #44]	@ (100438b4 <CleanLargeDB+0x188>)
10043886:	2284      	movs	r2, #132	@ 0x84
10043888:	0112      	lsls	r2, r2, #4
1004388a:	189b      	adds	r3, r3, r2
1004388c:	19db      	adds	r3, r3, r7
1004388e:	781a      	ldrb	r2, [r3, #0]
10043890:	0013      	movs	r3, r2
10043892:	009b      	lsls	r3, r3, #2
10043894:	189b      	adds	r3, r3, r2
10043896:	009b      	lsls	r3, r3, #2
10043898:	4a07      	ldr	r2, [pc, #28]	@ (100438b8 <CleanLargeDB+0x18c>)
1004389a:	189b      	adds	r3, r3, r2
1004389c:	0018      	movs	r0, r3
1004389e:	f7ff fb93 	bl	10042fc8 <NVMDB_get_info>
100438a2:	0003      	movs	r3, r0
}
100438a4:	0018      	movs	r0, r3
100438a6:	46bd      	mov	sp, r7
100438a8:	4b0e      	ldr	r3, [pc, #56]	@ (100438e4 <CleanLargeDB+0x1b8>)
100438aa:	449d      	add	sp, r3
100438ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100438ae:	46c0      	nop			@ (mov r8, r8)
100438b0:	fffff7b4 	.word	0xfffff7b4
100438b4:	fffff7c7 	.word	0xfffff7c7
100438b8:	200003f0 	.word	0x200003f0
100438bc:	0000083b 	.word	0x0000083b
100438c0:	00000824 	.word	0x00000824
100438c4:	0000083c 	.word	0x0000083c
100438c8:	0000081c 	.word	0x0000081c
100438cc:	00000836 	.word	0x00000836
100438d0:	000007ff 	.word	0x000007ff
100438d4:	0000083a 	.word	0x0000083a
100438d8:	effc0000 	.word	0xeffc0000
100438dc:	00000839 	.word	0x00000839
100438e0:	0000080c 	.word	0x0000080c
100438e4:	00000844 	.word	0x00000844

100438e8 <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100438e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100438ea:	4c7a      	ldr	r4, [pc, #488]	@ (10043ad4 <CleanPage+0x1ec>)
100438ec:	44a5      	add	sp, r4
100438ee:	af02      	add	r7, sp, #8
100438f0:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
100438f2:	4b79      	ldr	r3, [pc, #484]	@ (10043ad8 <CleanPage+0x1f0>)
100438f4:	18fb      	adds	r3, r7, r3
100438f6:	2200      	movs	r2, #0
100438f8:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
100438fa:	4b78      	ldr	r3, [pc, #480]	@ (10043adc <CleanPage+0x1f4>)
100438fc:	18fb      	adds	r3, r7, r3
100438fe:	2200      	movs	r2, #0
10043900:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043902:	2300      	movs	r3, #0
10043904:	4a76      	ldr	r2, [pc, #472]	@ (10043ae0 <CleanPage+0x1f8>)
10043906:	18ba      	adds	r2, r7, r2
10043908:	6013      	str	r3, [r2, #0]
1004390a:	e023      	b.n	10043954 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004390c:	687b      	ldr	r3, [r7, #4]
1004390e:	6899      	ldr	r1, [r3, #8]
10043910:	4b73      	ldr	r3, [pc, #460]	@ (10043ae0 <CleanPage+0x1f8>)
10043912:	18fb      	adds	r3, r7, r3
10043914:	681a      	ldr	r2, [r3, #0]
10043916:	0013      	movs	r3, r2
10043918:	005b      	lsls	r3, r3, #1
1004391a:	189b      	adds	r3, r3, r2
1004391c:	009b      	lsls	r3, r3, #2
1004391e:	18ca      	adds	r2, r1, r3
10043920:	4970      	ldr	r1, [pc, #448]	@ (10043ae4 <CleanPage+0x1fc>)
10043922:	187b      	adds	r3, r7, r1
10043924:	7812      	ldrb	r2, [r2, #0]
10043926:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
10043928:	187b      	adds	r3, r7, r1
1004392a:	781a      	ldrb	r2, [r3, #0]
1004392c:	496e      	ldr	r1, [pc, #440]	@ (10043ae8 <CleanPage+0x200>)
1004392e:	0013      	movs	r3, r2
10043930:	009b      	lsls	r3, r3, #2
10043932:	189b      	adds	r3, r3, r2
10043934:	009b      	lsls	r3, r3, #2
10043936:	18cb      	adds	r3, r1, r3
10043938:	330a      	adds	r3, #10
1004393a:	881b      	ldrh	r3, [r3, #0]
1004393c:	2b00      	cmp	r3, #0
1004393e:	d003      	beq.n	10043948 <CleanPage+0x60>
    {
      found = TRUE;
10043940:	4b66      	ldr	r3, [pc, #408]	@ (10043adc <CleanPage+0x1f4>)
10043942:	18fb      	adds	r3, r7, r3
10043944:	2201      	movs	r2, #1
10043946:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043948:	4a65      	ldr	r2, [pc, #404]	@ (10043ae0 <CleanPage+0x1f8>)
1004394a:	18bb      	adds	r3, r7, r2
1004394c:	681b      	ldr	r3, [r3, #0]
1004394e:	3301      	adds	r3, #1
10043950:	18ba      	adds	r2, r7, r2
10043952:	6013      	str	r3, [r2, #0]
10043954:	687b      	ldr	r3, [r7, #4]
10043956:	791b      	ldrb	r3, [r3, #4]
10043958:	001a      	movs	r2, r3
1004395a:	4b61      	ldr	r3, [pc, #388]	@ (10043ae0 <CleanPage+0x1f8>)
1004395c:	18fb      	adds	r3, r7, r3
1004395e:	681b      	ldr	r3, [r3, #0]
10043960:	4293      	cmp	r3, r2
10043962:	dbd3      	blt.n	1004390c <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
10043964:	4b5d      	ldr	r3, [pc, #372]	@ (10043adc <CleanPage+0x1f4>)
10043966:	18fb      	adds	r3, r7, r3
10043968:	781b      	ldrb	r3, [r3, #0]
1004396a:	2b00      	cmp	r3, #0
1004396c:	d101      	bne.n	10043972 <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
1004396e:	2300      	movs	r3, #0
10043970:	e0ab      	b.n	10043aca <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
10043972:	2380      	movs	r3, #128	@ 0x80
10043974:	011a      	lsls	r2, r3, #4
10043976:	2308      	movs	r3, #8
10043978:	18fb      	adds	r3, r7, r3
1004397a:	21ff      	movs	r1, #255	@ 0xff
1004397c:	0018      	movs	r0, r3
1004397e:	f009 ff99 	bl	1004d8b4 <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043982:	2300      	movs	r3, #0
10043984:	4a56      	ldr	r2, [pc, #344]	@ (10043ae0 <CleanPage+0x1f8>)
10043986:	18ba      	adds	r2, r7, r2
10043988:	6013      	str	r3, [r2, #0]
1004398a:	e051      	b.n	10043a30 <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004398c:	687b      	ldr	r3, [r7, #4]
1004398e:	6899      	ldr	r1, [r3, #8]
10043990:	4853      	ldr	r0, [pc, #332]	@ (10043ae0 <CleanPage+0x1f8>)
10043992:	183b      	adds	r3, r7, r0
10043994:	681a      	ldr	r2, [r3, #0]
10043996:	0013      	movs	r3, r2
10043998:	005b      	lsls	r3, r3, #1
1004399a:	189b      	adds	r3, r3, r2
1004399c:	009b      	lsls	r3, r3, #2
1004399e:	18ca      	adds	r2, r1, r3
100439a0:	4d50      	ldr	r5, [pc, #320]	@ (10043ae4 <CleanPage+0x1fc>)
100439a2:	197b      	adds	r3, r7, r5
100439a4:	7812      	ldrb	r2, [r2, #0]
100439a6:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
100439a8:	687b      	ldr	r3, [r7, #4]
100439aa:	6899      	ldr	r1, [r3, #8]
100439ac:	183b      	adds	r3, r7, r0
100439ae:	681a      	ldr	r2, [r3, #0]
100439b0:	0013      	movs	r3, r2
100439b2:	005b      	lsls	r3, r3, #1
100439b4:	189b      	adds	r3, r3, r2
100439b6:	009b      	lsls	r3, r3, #2
100439b8:	18cb      	adds	r3, r1, r3
100439ba:	685b      	ldr	r3, [r3, #4]
100439bc:	2282      	movs	r2, #130	@ 0x82
100439be:	0112      	lsls	r2, r2, #4
100439c0:	18ba      	adds	r2, r7, r2
100439c2:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
100439c4:	4e49      	ldr	r6, [pc, #292]	@ (10043aec <CleanPage+0x204>)
100439c6:	19bc      	adds	r4, r7, r6
100439c8:	2381      	movs	r3, #129	@ 0x81
100439ca:	011b      	lsls	r3, r3, #4
100439cc:	18fa      	adds	r2, r7, r3
100439ce:	197b      	adds	r3, r7, r5
100439d0:	781b      	ldrb	r3, [r3, #0]
100439d2:	0011      	movs	r1, r2
100439d4:	0018      	movs	r0, r3
100439d6:	f000 fb1d 	bl	10044014 <NVMDB_HandleInit>
100439da:	0003      	movs	r3, r0
100439dc:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
100439de:	19bb      	adds	r3, r7, r6
100439e0:	781b      	ldrb	r3, [r3, #0]
100439e2:	2b00      	cmp	r3, #0
100439e4:	d001      	beq.n	100439ea <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
100439e6:	2300      	movs	r3, #0
100439e8:	e06f      	b.n	10043aca <CleanPage+0x1e2>
    }

    InitReadState(&state);
100439ea:	4d41      	ldr	r5, [pc, #260]	@ (10043af0 <CleanPage+0x208>)
100439ec:	197b      	adds	r3, r7, r5
100439ee:	0018      	movs	r0, r3
100439f0:	f7ff fd92 	bl	10043518 <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
100439f4:	2308      	movs	r3, #8
100439f6:	18fa      	adds	r2, r7, r3
100439f8:	2082      	movs	r0, #130	@ 0x82
100439fa:	0100      	lsls	r0, r0, #4
100439fc:	183b      	adds	r3, r7, r0
100439fe:	681b      	ldr	r3, [r3, #0]
10043a00:	18d1      	adds	r1, r2, r3
10043a02:	183b      	adds	r3, r7, r0
10043a04:	681b      	ldr	r3, [r3, #0]
10043a06:	b29b      	uxth	r3, r3
10043a08:	2280      	movs	r2, #128	@ 0x80
10043a0a:	0112      	lsls	r2, r2, #4
10043a0c:	1ad3      	subs	r3, r2, r3
10043a0e:	b29a      	uxth	r2, r3
10043a10:	4b38      	ldr	r3, [pc, #224]	@ (10043af4 <CleanPage+0x20c>)
10043a12:	18fc      	adds	r4, r7, r3
10043a14:	2381      	movs	r3, #129	@ 0x81
10043a16:	011b      	lsls	r3, r3, #4
10043a18:	18f8      	adds	r0, r7, r3
10043a1a:	197b      	adds	r3, r7, r5
10043a1c:	9300      	str	r3, [sp, #0]
10043a1e:	0023      	movs	r3, r4
10043a20:	f7ff fd8b 	bl	1004353a <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043a24:	4a2e      	ldr	r2, [pc, #184]	@ (10043ae0 <CleanPage+0x1f8>)
10043a26:	18bb      	adds	r3, r7, r2
10043a28:	681b      	ldr	r3, [r3, #0]
10043a2a:	3301      	adds	r3, #1
10043a2c:	18ba      	adds	r2, r7, r2
10043a2e:	6013      	str	r3, [r2, #0]
10043a30:	687b      	ldr	r3, [r7, #4]
10043a32:	791b      	ldrb	r3, [r3, #4]
10043a34:	001a      	movs	r2, r3
10043a36:	4c2a      	ldr	r4, [pc, #168]	@ (10043ae0 <CleanPage+0x1f8>)
10043a38:	193b      	adds	r3, r7, r4
10043a3a:	681b      	ldr	r3, [r3, #0]
10043a3c:	4293      	cmp	r3, r2
10043a3e:	dba5      	blt.n	1004398c <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
10043a40:	687b      	ldr	r3, [r7, #4]
10043a42:	681b      	ldr	r3, [r3, #0]
10043a44:	2280      	movs	r2, #128	@ 0x80
10043a46:	0112      	lsls	r2, r2, #4
10043a48:	2108      	movs	r1, #8
10043a4a:	1879      	adds	r1, r7, r1
10043a4c:	0018      	movs	r0, r3
10043a4e:	f7ff fd23 	bl	10043498 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043a52:	2300      	movs	r3, #0
10043a54:	193a      	adds	r2, r7, r4
10043a56:	6013      	str	r3, [r2, #0]
10043a58:	e02c      	b.n	10043ab4 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10043a5a:	687b      	ldr	r3, [r7, #4]
10043a5c:	6899      	ldr	r1, [r3, #8]
10043a5e:	4b20      	ldr	r3, [pc, #128]	@ (10043ae0 <CleanPage+0x1f8>)
10043a60:	18fb      	adds	r3, r7, r3
10043a62:	681a      	ldr	r2, [r3, #0]
10043a64:	0013      	movs	r3, r2
10043a66:	005b      	lsls	r3, r3, #1
10043a68:	189b      	adds	r3, r3, r2
10043a6a:	009b      	lsls	r3, r3, #2
10043a6c:	18ca      	adds	r2, r1, r3
10043a6e:	491d      	ldr	r1, [pc, #116]	@ (10043ae4 <CleanPage+0x1fc>)
10043a70:	187b      	adds	r3, r7, r1
10043a72:	7812      	ldrb	r2, [r2, #0]
10043a74:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
10043a76:	187b      	adds	r3, r7, r1
10043a78:	781a      	ldrb	r2, [r3, #0]
10043a7a:	0013      	movs	r3, r2
10043a7c:	009b      	lsls	r3, r3, #2
10043a7e:	189b      	adds	r3, r3, r2
10043a80:	009b      	lsls	r3, r3, #2
10043a82:	4a19      	ldr	r2, [pc, #100]	@ (10043ae8 <CleanPage+0x200>)
10043a84:	189b      	adds	r3, r3, r2
10043a86:	4d19      	ldr	r5, [pc, #100]	@ (10043aec <CleanPage+0x204>)
10043a88:	197c      	adds	r4, r7, r5
10043a8a:	0018      	movs	r0, r3
10043a8c:	f7ff fa9c 	bl	10042fc8 <NVMDB_get_info>
10043a90:	0003      	movs	r3, r0
10043a92:	7023      	strb	r3, [r4, #0]
    if(status)
10043a94:	002a      	movs	r2, r5
10043a96:	18bb      	adds	r3, r7, r2
10043a98:	781b      	ldrb	r3, [r3, #0]
10043a9a:	2b00      	cmp	r3, #0
10043a9c:	d004      	beq.n	10043aa8 <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
10043a9e:	4b0e      	ldr	r3, [pc, #56]	@ (10043ad8 <CleanPage+0x1f0>)
10043aa0:	18fb      	adds	r3, r7, r3
10043aa2:	18ba      	adds	r2, r7, r2
10043aa4:	7812      	ldrb	r2, [r2, #0]
10043aa6:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10043aa8:	4a0d      	ldr	r2, [pc, #52]	@ (10043ae0 <CleanPage+0x1f8>)
10043aaa:	18bb      	adds	r3, r7, r2
10043aac:	681b      	ldr	r3, [r3, #0]
10043aae:	3301      	adds	r3, #1
10043ab0:	18ba      	adds	r2, r7, r2
10043ab2:	6013      	str	r3, [r2, #0]
10043ab4:	687b      	ldr	r3, [r7, #4]
10043ab6:	791b      	ldrb	r3, [r3, #4]
10043ab8:	001a      	movs	r2, r3
10043aba:	4b09      	ldr	r3, [pc, #36]	@ (10043ae0 <CleanPage+0x1f8>)
10043abc:	18fb      	adds	r3, r7, r3
10043abe:	681b      	ldr	r3, [r3, #0]
10043ac0:	4293      	cmp	r3, r2
10043ac2:	dbca      	blt.n	10043a5a <CleanPage+0x172>
    }
  }

  return ret;
10043ac4:	4b04      	ldr	r3, [pc, #16]	@ (10043ad8 <CleanPage+0x1f0>)
10043ac6:	18fb      	adds	r3, r7, r3
10043ac8:	781b      	ldrb	r3, [r3, #0]
}
10043aca:	0018      	movs	r0, r3
10043acc:	46bd      	mov	sp, r7
10043ace:	4b0a      	ldr	r3, [pc, #40]	@ (10043af8 <CleanPage+0x210>)
10043ad0:	449d      	add	sp, r3
10043ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043ad4:	fffff7c4 	.word	0xfffff7c4
10043ad8:	0000082f 	.word	0x0000082f
10043adc:	00000827 	.word	0x00000827
10043ae0:	00000828 	.word	0x00000828
10043ae4:	00000826 	.word	0x00000826
10043ae8:	200003f0 	.word	0x200003f0
10043aec:	00000825 	.word	0x00000825
10043af0:	00000808 	.word	0x00000808
10043af4:	0000080e 	.word	0x0000080e
10043af8:	00000834 	.word	0x00000834

10043afc <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
10043afc:	b590      	push	{r4, r7, lr}
10043afe:	b087      	sub	sp, #28
10043b00:	af00      	add	r7, sp, #0
10043b02:	0002      	movs	r2, r0
10043b04:	6039      	str	r1, [r7, #0]
10043b06:	1dfb      	adds	r3, r7, #7
10043b08:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
10043b0a:	2300      	movs	r3, #0
10043b0c:	617b      	str	r3, [r7, #20]
10043b0e:	e016      	b.n	10043b3e <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
10043b10:	240b      	movs	r4, #11
10043b12:	1939      	adds	r1, r7, r4
10043b14:	482e      	ldr	r0, [pc, #184]	@ (10043bd0 <GetDBType+0xd4>)
10043b16:	697a      	ldr	r2, [r7, #20]
10043b18:	0013      	movs	r3, r2
10043b1a:	005b      	lsls	r3, r3, #1
10043b1c:	189b      	adds	r3, r3, r2
10043b1e:	009b      	lsls	r3, r3, #2
10043b20:	18c3      	adds	r3, r0, r3
10043b22:	3306      	adds	r3, #6
10043b24:	781b      	ldrb	r3, [r3, #0]
10043b26:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
10043b28:	193a      	adds	r2, r7, r4
10043b2a:	1dfb      	adds	r3, r7, #7
10043b2c:	7812      	ldrb	r2, [r2, #0]
10043b2e:	781b      	ldrb	r3, [r3, #0]
10043b30:	429a      	cmp	r2, r3
10043b32:	d101      	bne.n	10043b38 <GetDBType+0x3c>
    {
      return LARGE_DB;
10043b34:	2302      	movs	r3, #2
10043b36:	e046      	b.n	10043bc6 <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10043b38:	697b      	ldr	r3, [r7, #20]
10043b3a:	3301      	adds	r3, #1
10043b3c:	617b      	str	r3, [r7, #20]
10043b3e:	697b      	ldr	r3, [r7, #20]
10043b40:	2b01      	cmp	r3, #1
10043b42:	dde5      	ble.n	10043b10 <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10043b44:	2300      	movs	r3, #0
10043b46:	613b      	str	r3, [r7, #16]
10043b48:	e039      	b.n	10043bbe <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10043b4a:	2300      	movs	r3, #0
10043b4c:	60fb      	str	r3, [r7, #12]
10043b4e:	e026      	b.n	10043b9e <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10043b50:	4920      	ldr	r1, [pc, #128]	@ (10043bd4 <GetDBType+0xd8>)
10043b52:	693a      	ldr	r2, [r7, #16]
10043b54:	0013      	movs	r3, r2
10043b56:	005b      	lsls	r3, r3, #1
10043b58:	189b      	adds	r3, r3, r2
10043b5a:	009b      	lsls	r3, r3, #2
10043b5c:	18cb      	adds	r3, r1, r3
10043b5e:	3308      	adds	r3, #8
10043b60:	6819      	ldr	r1, [r3, #0]
10043b62:	68fa      	ldr	r2, [r7, #12]
10043b64:	0013      	movs	r3, r2
10043b66:	005b      	lsls	r3, r3, #1
10043b68:	189b      	adds	r3, r3, r2
10043b6a:	009b      	lsls	r3, r3, #2
10043b6c:	18ca      	adds	r2, r1, r3
10043b6e:	210b      	movs	r1, #11
10043b70:	187b      	adds	r3, r7, r1
10043b72:	7812      	ldrb	r2, [r2, #0]
10043b74:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
10043b76:	187a      	adds	r2, r7, r1
10043b78:	1dfb      	adds	r3, r7, #7
10043b7a:	7812      	ldrb	r2, [r2, #0]
10043b7c:	781b      	ldrb	r3, [r3, #0]
10043b7e:	429a      	cmp	r2, r3
10043b80:	d10a      	bne.n	10043b98 <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
10043b82:	693a      	ldr	r2, [r7, #16]
10043b84:	0013      	movs	r3, r2
10043b86:	005b      	lsls	r3, r3, #1
10043b88:	189b      	adds	r3, r3, r2
10043b8a:	009b      	lsls	r3, r3, #2
10043b8c:	4a11      	ldr	r2, [pc, #68]	@ (10043bd4 <GetDBType+0xd8>)
10043b8e:	189a      	adds	r2, r3, r2
10043b90:	683b      	ldr	r3, [r7, #0]
10043b92:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
10043b94:	2301      	movs	r3, #1
10043b96:	e016      	b.n	10043bc6 <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10043b98:	68fb      	ldr	r3, [r7, #12]
10043b9a:	3301      	adds	r3, #1
10043b9c:	60fb      	str	r3, [r7, #12]
10043b9e:	490d      	ldr	r1, [pc, #52]	@ (10043bd4 <GetDBType+0xd8>)
10043ba0:	693a      	ldr	r2, [r7, #16]
10043ba2:	0013      	movs	r3, r2
10043ba4:	005b      	lsls	r3, r3, #1
10043ba6:	189b      	adds	r3, r3, r2
10043ba8:	009b      	lsls	r3, r3, #2
10043baa:	18cb      	adds	r3, r1, r3
10043bac:	3304      	adds	r3, #4
10043bae:	781b      	ldrb	r3, [r3, #0]
10043bb0:	001a      	movs	r2, r3
10043bb2:	68fb      	ldr	r3, [r7, #12]
10043bb4:	4293      	cmp	r3, r2
10043bb6:	dbcb      	blt.n	10043b50 <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10043bb8:	693b      	ldr	r3, [r7, #16]
10043bba:	3301      	adds	r3, #1
10043bbc:	613b      	str	r3, [r7, #16]
10043bbe:	693b      	ldr	r3, [r7, #16]
10043bc0:	2b00      	cmp	r3, #0
10043bc2:	dbc2      	blt.n	10043b4a <GetDBType+0x4e>
      }
    }
  }

  return 0;
10043bc4:	2300      	movs	r3, #0
}
10043bc6:	0018      	movs	r0, r3
10043bc8:	46bd      	mov	sp, r7
10043bca:	b007      	add	sp, #28
10043bcc:	bd90      	pop	{r4, r7, pc}
10043bce:	46c0      	nop			@ (mov r8, r8)
10043bd0:	1004e6d8 	.word	0x1004e6d8
10043bd4:	2000041c 	.word	0x2000041c

10043bd8 <NVMDB_AppendRecordNoCache>:

  return NVMDB_STATUS_OK;
}

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
10043bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
10043bda:	b089      	sub	sp, #36	@ 0x24
10043bdc:	af02      	add	r7, sp, #8
10043bde:	60f8      	str	r0, [r7, #12]
10043be0:	0008      	movs	r0, r1
10043be2:	0011      	movs	r1, r2
10043be4:	607b      	str	r3, [r7, #4]
10043be6:	230b      	movs	r3, #11
10043be8:	18fb      	adds	r3, r7, r3
10043bea:	1c02      	adds	r2, r0, #0
10043bec:	701a      	strb	r2, [r3, #0]
10043bee:	2008      	movs	r0, #8
10043bf0:	183b      	adds	r3, r7, r0
10043bf2:	1c0a      	adds	r2, r1, #0
10043bf4:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
10043bf6:	0001      	movs	r1, r0
10043bf8:	187b      	adds	r3, r7, r1
10043bfa:	881b      	ldrh	r3, [r3, #0]
10043bfc:	3b01      	subs	r3, #1
10043bfe:	b29b      	uxth	r3, r3
10043c00:	b21b      	sxth	r3, r3
10043c02:	2203      	movs	r2, #3
10043c04:	4313      	orrs	r3, r2
10043c06:	b21b      	sxth	r3, r3
10043c08:	b29a      	uxth	r2, r3
10043c0a:	187b      	adds	r3, r7, r1
10043c0c:	3201      	adds	r2, #1
10043c0e:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10043c10:	68fb      	ldr	r3, [r7, #12]
10043c12:	685b      	ldr	r3, [r3, #4]
10043c14:	1d5a      	adds	r2, r3, #5
10043c16:	68fb      	ldr	r3, [r7, #12]
10043c18:	689b      	ldr	r3, [r3, #8]
10043c1a:	429a      	cmp	r2, r3
10043c1c:	d310      	bcc.n	10043c40 <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
10043c1e:	68fb      	ldr	r3, [r7, #12]
10043c20:	781b      	ldrb	r3, [r3, #0]
10043c22:	0019      	movs	r1, r3
10043c24:	4a4a      	ldr	r2, [pc, #296]	@ (10043d50 <NVMDB_AppendRecordNoCache+0x178>)
10043c26:	000b      	movs	r3, r1
10043c28:	009b      	lsls	r3, r3, #2
10043c2a:	185b      	adds	r3, r3, r1
10043c2c:	009b      	lsls	r3, r3, #2
10043c2e:	18d3      	adds	r3, r2, r3
10043c30:	330a      	adds	r3, #10
10043c32:	881b      	ldrh	r3, [r3, #0]
10043c34:	2b00      	cmp	r3, #0
10043c36:	d001      	beq.n	10043c3c <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
10043c38:	230b      	movs	r3, #11
10043c3a:	e084      	b.n	10043d46 <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
10043c3c:	2302      	movs	r3, #2
10043c3e:	e082      	b.n	10043d46 <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10043c40:	68fb      	ldr	r3, [r7, #12]
10043c42:	685b      	ldr	r3, [r3, #4]
10043c44:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
10043c46:	697b      	ldr	r3, [r7, #20]
10043c48:	781b      	ldrb	r3, [r3, #0]
10043c4a:	2bff      	cmp	r3, #255	@ 0xff
10043c4c:	d11c      	bne.n	10043c88 <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
10043c4e:	68fb      	ldr	r3, [r7, #12]
10043c50:	689a      	ldr	r2, [r3, #8]
10043c52:	68fb      	ldr	r3, [r7, #12]
10043c54:	685b      	ldr	r3, [r3, #4]
10043c56:	1ad3      	subs	r3, r2, r3
10043c58:	2280      	movs	r2, #128	@ 0x80
10043c5a:	0252      	lsls	r2, r2, #9
10043c5c:	4293      	cmp	r3, r2
10043c5e:	d300      	bcc.n	10043c62 <NVMDB_AppendRecordNoCache+0x8a>
10043c60:	4b3c      	ldr	r3, [pc, #240]	@ (10043d54 <NVMDB_AppendRecordNoCache+0x17c>)
10043c62:	2112      	movs	r1, #18
10043c64:	187a      	adds	r2, r7, r1
10043c66:	8013      	strh	r3, [r2, #0]
      break;
10043c68:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
10043c6a:	2308      	movs	r3, #8
10043c6c:	0018      	movs	r0, r3
10043c6e:	18fb      	adds	r3, r7, r3
10043c70:	881a      	ldrh	r2, [r3, #0]
10043c72:	2328      	movs	r3, #40	@ 0x28
10043c74:	181b      	adds	r3, r3, r0
10043c76:	19db      	adds	r3, r3, r7
10043c78:	881b      	ldrh	r3, [r3, #0]
10043c7a:	18d3      	adds	r3, r2, r3
10043c7c:	1cda      	adds	r2, r3, #3
10043c7e:	187b      	adds	r3, r7, r1
10043c80:	881b      	ldrh	r3, [r3, #0]
10043c82:	429a      	cmp	r2, r3
10043c84:	db27      	blt.n	10043cd6 <NVMDB_AppendRecordNoCache+0xfe>
10043c86:	e015      	b.n	10043cb4 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
10043c88:	697b      	ldr	r3, [r7, #20]
10043c8a:	781b      	ldrb	r3, [r3, #0]
10043c8c:	2bfe      	cmp	r3, #254	@ 0xfe
10043c8e:	d005      	beq.n	10043c9c <NVMDB_AppendRecordNoCache+0xc4>
10043c90:	697b      	ldr	r3, [r7, #20]
10043c92:	781b      	ldrb	r3, [r3, #0]
10043c94:	2b00      	cmp	r3, #0
10043c96:	d001      	beq.n	10043c9c <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
10043c98:	2303      	movs	r3, #3
10043c9a:	e054      	b.n	10043d46 <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10043c9c:	68fb      	ldr	r3, [r7, #12]
10043c9e:	685b      	ldr	r3, [r3, #4]
10043ca0:	697a      	ldr	r2, [r7, #20]
10043ca2:	8852      	ldrh	r2, [r2, #2]
10043ca4:	3203      	adds	r2, #3
10043ca6:	2103      	movs	r1, #3
10043ca8:	430a      	orrs	r2, r1
10043caa:	189b      	adds	r3, r3, r2
10043cac:	1c5a      	adds	r2, r3, #1
10043cae:	68fb      	ldr	r3, [r7, #12]
10043cb0:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10043cb2:	e7ad      	b.n	10043c10 <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
10043cb4:	68fb      	ldr	r3, [r7, #12]
10043cb6:	781b      	ldrb	r3, [r3, #0]
10043cb8:	0019      	movs	r1, r3
10043cba:	4a25      	ldr	r2, [pc, #148]	@ (10043d50 <NVMDB_AppendRecordNoCache+0x178>)
10043cbc:	000b      	movs	r3, r1
10043cbe:	009b      	lsls	r3, r3, #2
10043cc0:	185b      	adds	r3, r3, r1
10043cc2:	009b      	lsls	r3, r3, #2
10043cc4:	18d3      	adds	r3, r2, r3
10043cc6:	330a      	adds	r3, #10
10043cc8:	881b      	ldrh	r3, [r3, #0]
10043cca:	2b00      	cmp	r3, #0
10043ccc:	d001      	beq.n	10043cd2 <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
10043cce:	230b      	movs	r3, #11
10043cd0:	e039      	b.n	10043d46 <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
10043cd2:	2302      	movs	r3, #2
10043cd4:	e037      	b.n	10043d46 <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
10043cd6:	68fb      	ldr	r3, [r7, #12]
10043cd8:	6858      	ldr	r0, [r3, #4]
10043cda:	2611      	movs	r6, #17
10043cdc:	19bc      	adds	r4, r7, r6
10043cde:	687d      	ldr	r5, [r7, #4]
10043ce0:	2308      	movs	r3, #8
10043ce2:	001a      	movs	r2, r3
10043ce4:	18fb      	adds	r3, r7, r3
10043ce6:	881b      	ldrh	r3, [r3, #0]
10043ce8:	469c      	mov	ip, r3
10043cea:	230b      	movs	r3, #11
10043cec:	18fb      	adds	r3, r7, r3
10043cee:	7819      	ldrb	r1, [r3, #0]
10043cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10043cf2:	9301      	str	r3, [sp, #4]
10043cf4:	2328      	movs	r3, #40	@ 0x28
10043cf6:	189b      	adds	r3, r3, r2
10043cf8:	19db      	adds	r3, r3, r7
10043cfa:	881b      	ldrh	r3, [r3, #0]
10043cfc:	9300      	str	r3, [sp, #0]
10043cfe:	002b      	movs	r3, r5
10043d00:	4662      	mov	r2, ip
10043d02:	f7ff fae2 	bl	100432ca <WriteRecord>
10043d06:	0003      	movs	r3, r0
10043d08:	7023      	strb	r3, [r4, #0]
  if(status)
10043d0a:	19bb      	adds	r3, r7, r6
10043d0c:	781b      	ldrb	r3, [r3, #0]
10043d0e:	2b00      	cmp	r3, #0
10043d10:	d002      	beq.n	10043d18 <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
10043d12:	19bb      	adds	r3, r7, r6
10043d14:	781b      	ldrb	r3, [r3, #0]
10043d16:	e016      	b.n	10043d46 <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
10043d18:	68fb      	ldr	r3, [r7, #12]
10043d1a:	781b      	ldrb	r3, [r3, #0]
10043d1c:	001a      	movs	r2, r3
10043d1e:	490c      	ldr	r1, [pc, #48]	@ (10043d50 <NVMDB_AppendRecordNoCache+0x178>)
10043d20:	0013      	movs	r3, r2
10043d22:	009b      	lsls	r3, r3, #2
10043d24:	189b      	adds	r3, r3, r2
10043d26:	009b      	lsls	r3, r3, #2
10043d28:	18cb      	adds	r3, r1, r3
10043d2a:	3308      	adds	r3, #8
10043d2c:	881b      	ldrh	r3, [r3, #0]
10043d2e:	3301      	adds	r3, #1
10043d30:	b298      	uxth	r0, r3
10043d32:	4907      	ldr	r1, [pc, #28]	@ (10043d50 <NVMDB_AppendRecordNoCache+0x178>)
10043d34:	0013      	movs	r3, r2
10043d36:	009b      	lsls	r3, r3, #2
10043d38:	189b      	adds	r3, r3, r2
10043d3a:	009b      	lsls	r3, r3, #2
10043d3c:	18cb      	adds	r3, r1, r3
10043d3e:	3308      	adds	r3, #8
10043d40:	1c02      	adds	r2, r0, #0
10043d42:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10043d44:	2300      	movs	r3, #0
}
10043d46:	0018      	movs	r0, r3
10043d48:	46bd      	mov	sp, r7
10043d4a:	b007      	add	sp, #28
10043d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043d4e:	46c0      	nop			@ (mov r8, r8)
10043d50:	200003f0 	.word	0x200003f0
10043d54:	0000ffff 	.word	0x0000ffff

10043d58 <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
10043d58:	b5b0      	push	{r4, r5, r7, lr}
10043d5a:	b088      	sub	sp, #32
10043d5c:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10043d5e:	2300      	movs	r3, #0
10043d60:	61fb      	str	r3, [r7, #28]
10043d62:	e0cd      	b.n	10043f00 <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
10043d64:	49a8      	ldr	r1, [pc, #672]	@ (10044008 <NVMDB_Init+0x2b0>)
10043d66:	69fa      	ldr	r2, [r7, #28]
10043d68:	0013      	movs	r3, r2
10043d6a:	005b      	lsls	r3, r3, #1
10043d6c:	189b      	adds	r3, r3, r2
10043d6e:	009b      	lsls	r3, r3, #2
10043d70:	585b      	ldr	r3, [r3, r1]
10043d72:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10043d74:	2300      	movs	r3, #0
10043d76:	61bb      	str	r3, [r7, #24]
10043d78:	e0b1      	b.n	10043ede <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10043d7a:	49a3      	ldr	r1, [pc, #652]	@ (10044008 <NVMDB_Init+0x2b0>)
10043d7c:	69fa      	ldr	r2, [r7, #28]
10043d7e:	0013      	movs	r3, r2
10043d80:	005b      	lsls	r3, r3, #1
10043d82:	189b      	adds	r3, r3, r2
10043d84:	009b      	lsls	r3, r3, #2
10043d86:	18cb      	adds	r3, r1, r3
10043d88:	3308      	adds	r3, #8
10043d8a:	6819      	ldr	r1, [r3, #0]
10043d8c:	69ba      	ldr	r2, [r7, #24]
10043d8e:	0013      	movs	r3, r2
10043d90:	005b      	lsls	r3, r3, #1
10043d92:	189b      	adds	r3, r3, r2
10043d94:	009b      	lsls	r3, r3, #2
10043d96:	18ca      	adds	r2, r1, r3
10043d98:	2013      	movs	r0, #19
10043d9a:	183b      	adds	r3, r7, r0
10043d9c:	7812      	ldrb	r2, [r2, #0]
10043d9e:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
10043da0:	4999      	ldr	r1, [pc, #612]	@ (10044008 <NVMDB_Init+0x2b0>)
10043da2:	69fa      	ldr	r2, [r7, #28]
10043da4:	0013      	movs	r3, r2
10043da6:	005b      	lsls	r3, r3, #1
10043da8:	189b      	adds	r3, r3, r2
10043daa:	009b      	lsls	r3, r3, #2
10043dac:	18cb      	adds	r3, r1, r3
10043dae:	3308      	adds	r3, #8
10043db0:	6819      	ldr	r1, [r3, #0]
10043db2:	69ba      	ldr	r2, [r7, #24]
10043db4:	0013      	movs	r3, r2
10043db6:	005b      	lsls	r3, r3, #1
10043db8:	189b      	adds	r3, r3, r2
10043dba:	009b      	lsls	r3, r3, #2
10043dbc:	18cb      	adds	r3, r1, r3
10043dbe:	685b      	ldr	r3, [r3, #4]
10043dc0:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
10043dc2:	4991      	ldr	r1, [pc, #580]	@ (10044008 <NVMDB_Init+0x2b0>)
10043dc4:	69fa      	ldr	r2, [r7, #28]
10043dc6:	0013      	movs	r3, r2
10043dc8:	005b      	lsls	r3, r3, #1
10043dca:	189b      	adds	r3, r3, r2
10043dcc:	009b      	lsls	r3, r3, #2
10043dce:	18cb      	adds	r3, r1, r3
10043dd0:	3308      	adds	r3, #8
10043dd2:	6819      	ldr	r1, [r3, #0]
10043dd4:	69ba      	ldr	r2, [r7, #24]
10043dd6:	0013      	movs	r3, r2
10043dd8:	005b      	lsls	r3, r3, #1
10043dda:	189b      	adds	r3, r3, r2
10043ddc:	009b      	lsls	r3, r3, #2
10043dde:	18ca      	adds	r2, r1, r3
10043de0:	1dbb      	adds	r3, r7, #6
10043de2:	8912      	ldrh	r2, [r2, #8]
10043de4:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
10043de6:	183b      	adds	r3, r7, r0
10043de8:	781a      	ldrb	r2, [r3, #0]
10043dea:	4988      	ldr	r1, [pc, #544]	@ (1004400c <NVMDB_Init+0x2b4>)
10043dec:	0013      	movs	r3, r2
10043dee:	009b      	lsls	r3, r3, #2
10043df0:	189b      	adds	r3, r3, r2
10043df2:	009b      	lsls	r3, r3, #2
10043df4:	585b      	ldr	r3, [r3, r1]
10043df6:	2b00      	cmp	r3, #0
10043df8:	d103      	bne.n	10043e02 <NVMDB_Init+0xaa>
10043dfa:	183b      	adds	r3, r7, r0
10043dfc:	781b      	ldrb	r3, [r3, #0]
10043dfe:	2b01      	cmp	r3, #1
10043e00:	d901      	bls.n	10043e06 <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
10043e02:	2301      	movs	r3, #1
10043e04:	e0fc      	b.n	10044000 <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
10043e06:	2413      	movs	r4, #19
10043e08:	193b      	adds	r3, r7, r4
10043e0a:	781a      	ldrb	r2, [r3, #0]
10043e0c:	68f9      	ldr	r1, [r7, #12]
10043e0e:	68bb      	ldr	r3, [r7, #8]
10043e10:	18c8      	adds	r0, r1, r3
10043e12:	497e      	ldr	r1, [pc, #504]	@ (1004400c <NVMDB_Init+0x2b4>)
10043e14:	0013      	movs	r3, r2
10043e16:	009b      	lsls	r3, r3, #2
10043e18:	189b      	adds	r3, r3, r2
10043e1a:	009b      	lsls	r3, r3, #2
10043e1c:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
10043e1e:	497a      	ldr	r1, [pc, #488]	@ (10044008 <NVMDB_Init+0x2b0>)
10043e20:	69fa      	ldr	r2, [r7, #28]
10043e22:	0013      	movs	r3, r2
10043e24:	005b      	lsls	r3, r3, #1
10043e26:	189b      	adds	r3, r3, r2
10043e28:	009b      	lsls	r3, r3, #2
10043e2a:	18cb      	adds	r3, r1, r3
10043e2c:	3304      	adds	r3, #4
10043e2e:	781b      	ldrb	r3, [r3, #0]
10043e30:	3b01      	subs	r3, #1
10043e32:	69ba      	ldr	r2, [r7, #24]
10043e34:	429a      	cmp	r2, r3
10043e36:	d10e      	bne.n	10043e56 <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
10043e38:	193b      	adds	r3, r7, r4
10043e3a:	781a      	ldrb	r2, [r3, #0]
10043e3c:	68fb      	ldr	r3, [r7, #12]
10043e3e:	2180      	movs	r1, #128	@ 0x80
10043e40:	0109      	lsls	r1, r1, #4
10043e42:	1859      	adds	r1, r3, r1
10043e44:	4871      	ldr	r0, [pc, #452]	@ (1004400c <NVMDB_Init+0x2b4>)
10043e46:	0013      	movs	r3, r2
10043e48:	009b      	lsls	r3, r3, #2
10043e4a:	189b      	adds	r3, r3, r2
10043e4c:	009b      	lsls	r3, r3, #2
10043e4e:	18c3      	adds	r3, r0, r3
10043e50:	3304      	adds	r3, #4
10043e52:	6019      	str	r1, [r3, #0]
10043e54:	e01d      	b.n	10043e92 <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
10043e56:	496c      	ldr	r1, [pc, #432]	@ (10044008 <NVMDB_Init+0x2b0>)
10043e58:	69fa      	ldr	r2, [r7, #28]
10043e5a:	0013      	movs	r3, r2
10043e5c:	005b      	lsls	r3, r3, #1
10043e5e:	189b      	adds	r3, r3, r2
10043e60:	009b      	lsls	r3, r3, #2
10043e62:	18cb      	adds	r3, r1, r3
10043e64:	3308      	adds	r3, #8
10043e66:	6819      	ldr	r1, [r3, #0]
10043e68:	69bb      	ldr	r3, [r7, #24]
10043e6a:	1c5a      	adds	r2, r3, #1
10043e6c:	0013      	movs	r3, r2
10043e6e:	005b      	lsls	r3, r3, #1
10043e70:	189b      	adds	r3, r3, r2
10043e72:	009b      	lsls	r3, r3, #2
10043e74:	18cb      	adds	r3, r1, r3
10043e76:	6859      	ldr	r1, [r3, #4]
10043e78:	2313      	movs	r3, #19
10043e7a:	18fb      	adds	r3, r7, r3
10043e7c:	781a      	ldrb	r2, [r3, #0]
10043e7e:	68fb      	ldr	r3, [r7, #12]
10043e80:	18c9      	adds	r1, r1, r3
10043e82:	4862      	ldr	r0, [pc, #392]	@ (1004400c <NVMDB_Init+0x2b4>)
10043e84:	0013      	movs	r3, r2
10043e86:	009b      	lsls	r3, r3, #2
10043e88:	189b      	adds	r3, r3, r2
10043e8a:	009b      	lsls	r3, r3, #2
10043e8c:	18c3      	adds	r3, r0, r3
10043e8e:	3304      	adds	r3, #4
10043e90:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
10043e92:	2013      	movs	r0, #19
10043e94:	183b      	adds	r3, r7, r0
10043e96:	781a      	ldrb	r2, [r3, #0]
10043e98:	495c      	ldr	r1, [pc, #368]	@ (1004400c <NVMDB_Init+0x2b4>)
10043e9a:	0013      	movs	r3, r2
10043e9c:	009b      	lsls	r3, r3, #2
10043e9e:	189b      	adds	r3, r3, r2
10043ea0:	009b      	lsls	r3, r3, #2
10043ea2:	18cb      	adds	r3, r1, r3
10043ea4:	3310      	adds	r3, #16
10043ea6:	1dba      	adds	r2, r7, #6
10043ea8:	8812      	ldrh	r2, [r2, #0]
10043eaa:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
10043eac:	183b      	adds	r3, r7, r0
10043eae:	781a      	ldrb	r2, [r3, #0]
10043eb0:	0013      	movs	r3, r2
10043eb2:	009b      	lsls	r3, r3, #2
10043eb4:	189b      	adds	r3, r3, r2
10043eb6:	009b      	lsls	r3, r3, #2
10043eb8:	4a54      	ldr	r2, [pc, #336]	@ (1004400c <NVMDB_Init+0x2b4>)
10043eba:	189b      	adds	r3, r3, r2
10043ebc:	2512      	movs	r5, #18
10043ebe:	197c      	adds	r4, r7, r5
10043ec0:	0018      	movs	r0, r3
10043ec2:	f7ff f881 	bl	10042fc8 <NVMDB_get_info>
10043ec6:	0003      	movs	r3, r0
10043ec8:	7023      	strb	r3, [r4, #0]
      if(status)
10043eca:	197b      	adds	r3, r7, r5
10043ecc:	781b      	ldrb	r3, [r3, #0]
10043ece:	2b00      	cmp	r3, #0
10043ed0:	d002      	beq.n	10043ed8 <NVMDB_Init+0x180>
      {
        return status;
10043ed2:	197b      	adds	r3, r7, r5
10043ed4:	781b      	ldrb	r3, [r3, #0]
10043ed6:	e093      	b.n	10044000 <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10043ed8:	69bb      	ldr	r3, [r7, #24]
10043eda:	3301      	adds	r3, #1
10043edc:	61bb      	str	r3, [r7, #24]
10043ede:	494a      	ldr	r1, [pc, #296]	@ (10044008 <NVMDB_Init+0x2b0>)
10043ee0:	69fa      	ldr	r2, [r7, #28]
10043ee2:	0013      	movs	r3, r2
10043ee4:	005b      	lsls	r3, r3, #1
10043ee6:	189b      	adds	r3, r3, r2
10043ee8:	009b      	lsls	r3, r3, #2
10043eea:	18cb      	adds	r3, r1, r3
10043eec:	3304      	adds	r3, #4
10043eee:	781b      	ldrb	r3, [r3, #0]
10043ef0:	001a      	movs	r2, r3
10043ef2:	69bb      	ldr	r3, [r7, #24]
10043ef4:	4293      	cmp	r3, r2
10043ef6:	da00      	bge.n	10043efa <NVMDB_Init+0x1a2>
10043ef8:	e73f      	b.n	10043d7a <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10043efa:	69fb      	ldr	r3, [r7, #28]
10043efc:	3301      	adds	r3, #1
10043efe:	61fb      	str	r3, [r7, #28]
10043f00:	69fb      	ldr	r3, [r7, #28]
10043f02:	2b00      	cmp	r3, #0
10043f04:	da00      	bge.n	10043f08 <NVMDB_Init+0x1b0>
10043f06:	e72d      	b.n	10043d64 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10043f08:	2300      	movs	r3, #0
10043f0a:	617b      	str	r3, [r7, #20]
10043f0c:	e074      	b.n	10043ff8 <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
10043f0e:	2413      	movs	r4, #19
10043f10:	1939      	adds	r1, r7, r4
10043f12:	483f      	ldr	r0, [pc, #252]	@ (10044010 <NVMDB_Init+0x2b8>)
10043f14:	697a      	ldr	r2, [r7, #20]
10043f16:	0013      	movs	r3, r2
10043f18:	005b      	lsls	r3, r3, #1
10043f1a:	189b      	adds	r3, r3, r2
10043f1c:	009b      	lsls	r3, r3, #2
10043f1e:	18c3      	adds	r3, r0, r3
10043f20:	3306      	adds	r3, #6
10043f22:	781b      	ldrb	r3, [r3, #0]
10043f24:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
10043f26:	193b      	adds	r3, r7, r4
10043f28:	781a      	ldrb	r2, [r3, #0]
10043f2a:	4938      	ldr	r1, [pc, #224]	@ (1004400c <NVMDB_Init+0x2b4>)
10043f2c:	0013      	movs	r3, r2
10043f2e:	009b      	lsls	r3, r3, #2
10043f30:	189b      	adds	r3, r3, r2
10043f32:	009b      	lsls	r3, r3, #2
10043f34:	585b      	ldr	r3, [r3, r1]
10043f36:	2b00      	cmp	r3, #0
10043f38:	d103      	bne.n	10043f42 <NVMDB_Init+0x1ea>
10043f3a:	193b      	adds	r3, r7, r4
10043f3c:	781b      	ldrb	r3, [r3, #0]
10043f3e:	2b01      	cmp	r3, #1
10043f40:	d901      	bls.n	10043f46 <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
10043f42:	2301      	movs	r3, #1
10043f44:	e05c      	b.n	10044000 <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
10043f46:	2413      	movs	r4, #19
10043f48:	193b      	adds	r3, r7, r4
10043f4a:	781a      	ldrb	r2, [r3, #0]
10043f4c:	4830      	ldr	r0, [pc, #192]	@ (10044010 <NVMDB_Init+0x2b8>)
10043f4e:	6979      	ldr	r1, [r7, #20]
10043f50:	000b      	movs	r3, r1
10043f52:	005b      	lsls	r3, r3, #1
10043f54:	185b      	adds	r3, r3, r1
10043f56:	009b      	lsls	r3, r3, #2
10043f58:	5818      	ldr	r0, [r3, r0]
10043f5a:	492c      	ldr	r1, [pc, #176]	@ (1004400c <NVMDB_Init+0x2b4>)
10043f5c:	0013      	movs	r3, r2
10043f5e:	009b      	lsls	r3, r3, #2
10043f60:	189b      	adds	r3, r3, r2
10043f62:	009b      	lsls	r3, r3, #2
10043f64:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
10043f66:	492a      	ldr	r1, [pc, #168]	@ (10044010 <NVMDB_Init+0x2b8>)
10043f68:	697a      	ldr	r2, [r7, #20]
10043f6a:	0013      	movs	r3, r2
10043f6c:	005b      	lsls	r3, r3, #1
10043f6e:	189b      	adds	r3, r3, r2
10043f70:	009b      	lsls	r3, r3, #2
10043f72:	5859      	ldr	r1, [r3, r1]
10043f74:	4826      	ldr	r0, [pc, #152]	@ (10044010 <NVMDB_Init+0x2b8>)
10043f76:	697a      	ldr	r2, [r7, #20]
10043f78:	0013      	movs	r3, r2
10043f7a:	005b      	lsls	r3, r3, #1
10043f7c:	189b      	adds	r3, r3, r2
10043f7e:	009b      	lsls	r3, r3, #2
10043f80:	18c3      	adds	r3, r0, r3
10043f82:	3304      	adds	r3, #4
10043f84:	881b      	ldrh	r3, [r3, #0]
10043f86:	0018      	movs	r0, r3
10043f88:	193b      	adds	r3, r7, r4
10043f8a:	781a      	ldrb	r2, [r3, #0]
10043f8c:	1809      	adds	r1, r1, r0
10043f8e:	481f      	ldr	r0, [pc, #124]	@ (1004400c <NVMDB_Init+0x2b4>)
10043f90:	0013      	movs	r3, r2
10043f92:	009b      	lsls	r3, r3, #2
10043f94:	189b      	adds	r3, r3, r2
10043f96:	009b      	lsls	r3, r3, #2
10043f98:	18c3      	adds	r3, r0, r3
10043f9a:	3304      	adds	r3, #4
10043f9c:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
10043f9e:	193b      	adds	r3, r7, r4
10043fa0:	781a      	ldrb	r2, [r3, #0]
10043fa2:	481b      	ldr	r0, [pc, #108]	@ (10044010 <NVMDB_Init+0x2b8>)
10043fa4:	6979      	ldr	r1, [r7, #20]
10043fa6:	000b      	movs	r3, r1
10043fa8:	005b      	lsls	r3, r3, #1
10043faa:	185b      	adds	r3, r3, r1
10043fac:	009b      	lsls	r3, r3, #2
10043fae:	18c3      	adds	r3, r0, r3
10043fb0:	3308      	adds	r3, #8
10043fb2:	8818      	ldrh	r0, [r3, #0]
10043fb4:	4915      	ldr	r1, [pc, #84]	@ (1004400c <NVMDB_Init+0x2b4>)
10043fb6:	0013      	movs	r3, r2
10043fb8:	009b      	lsls	r3, r3, #2
10043fba:	189b      	adds	r3, r3, r2
10043fbc:	009b      	lsls	r3, r3, #2
10043fbe:	18cb      	adds	r3, r1, r3
10043fc0:	3310      	adds	r3, #16
10043fc2:	1c02      	adds	r2, r0, #0
10043fc4:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
10043fc6:	193b      	adds	r3, r7, r4
10043fc8:	781a      	ldrb	r2, [r3, #0]
10043fca:	0013      	movs	r3, r2
10043fcc:	009b      	lsls	r3, r3, #2
10043fce:	189b      	adds	r3, r3, r2
10043fd0:	009b      	lsls	r3, r3, #2
10043fd2:	4a0e      	ldr	r2, [pc, #56]	@ (1004400c <NVMDB_Init+0x2b4>)
10043fd4:	189b      	adds	r3, r3, r2
10043fd6:	2512      	movs	r5, #18
10043fd8:	197c      	adds	r4, r7, r5
10043fda:	0018      	movs	r0, r3
10043fdc:	f7fe fff4 	bl	10042fc8 <NVMDB_get_info>
10043fe0:	0003      	movs	r3, r0
10043fe2:	7023      	strb	r3, [r4, #0]
    if(status)
10043fe4:	197b      	adds	r3, r7, r5
10043fe6:	781b      	ldrb	r3, [r3, #0]
10043fe8:	2b00      	cmp	r3, #0
10043fea:	d002      	beq.n	10043ff2 <NVMDB_Init+0x29a>
    {
      return status;
10043fec:	197b      	adds	r3, r7, r5
10043fee:	781b      	ldrb	r3, [r3, #0]
10043ff0:	e006      	b.n	10044000 <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10043ff2:	697b      	ldr	r3, [r7, #20]
10043ff4:	3301      	adds	r3, #1
10043ff6:	617b      	str	r3, [r7, #20]
10043ff8:	697b      	ldr	r3, [r7, #20]
10043ffa:	2b01      	cmp	r3, #1
10043ffc:	dd87      	ble.n	10043f0e <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
10043ffe:	2300      	movs	r3, #0
}
10044000:	0018      	movs	r0, r3
10044002:	46bd      	mov	sp, r7
10044004:	b008      	add	sp, #32
10044006:	bdb0      	pop	{r4, r5, r7, pc}
10044008:	2000041c 	.word	0x2000041c
1004400c:	200003f0 	.word	0x200003f0
10044010:	1004e6d8 	.word	0x1004e6d8

10044014 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
10044014:	b580      	push	{r7, lr}
10044016:	b082      	sub	sp, #8
10044018:	af00      	add	r7, sp, #0
1004401a:	0002      	movs	r2, r0
1004401c:	6039      	str	r1, [r7, #0]
1004401e:	1dfb      	adds	r3, r7, #7
10044020:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
10044022:	1dfb      	adds	r3, r7, #7
10044024:	781b      	ldrb	r3, [r3, #0]
10044026:	2b01      	cmp	r3, #1
10044028:	d901      	bls.n	1004402e <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
1004402a:	2301      	movs	r3, #1
1004402c:	e020      	b.n	10044070 <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
1004402e:	1dfb      	adds	r3, r7, #7
10044030:	781a      	ldrb	r2, [r3, #0]
10044032:	4911      	ldr	r1, [pc, #68]	@ (10044078 <NVMDB_HandleInit+0x64>)
10044034:	0013      	movs	r3, r2
10044036:	009b      	lsls	r3, r3, #2
10044038:	189b      	adds	r3, r3, r2
1004403a:	009b      	lsls	r3, r3, #2
1004403c:	585a      	ldr	r2, [r3, r1]
1004403e:	683b      	ldr	r3, [r7, #0]
10044040:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
10044042:	1dfb      	adds	r3, r7, #7
10044044:	781a      	ldrb	r2, [r3, #0]
10044046:	490c      	ldr	r1, [pc, #48]	@ (10044078 <NVMDB_HandleInit+0x64>)
10044048:	0013      	movs	r3, r2
1004404a:	009b      	lsls	r3, r3, #2
1004404c:	189b      	adds	r3, r3, r2
1004404e:	009b      	lsls	r3, r3, #2
10044050:	18cb      	adds	r3, r1, r3
10044052:	3304      	adds	r3, #4
10044054:	681a      	ldr	r2, [r3, #0]
10044056:	683b      	ldr	r3, [r7, #0]
10044058:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
1004405a:	683b      	ldr	r3, [r7, #0]
1004405c:	2201      	movs	r2, #1
1004405e:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
10044060:	683b      	ldr	r3, [r7, #0]
10044062:	1dfa      	adds	r2, r7, #7
10044064:	7812      	ldrb	r2, [r2, #0]
10044066:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
10044068:	683b      	ldr	r3, [r7, #0]
1004406a:	2200      	movs	r2, #0
1004406c:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
1004406e:	2300      	movs	r3, #0
}
10044070:	0018      	movs	r0, r3
10044072:	46bd      	mov	sp, r7
10044074:	b002      	add	sp, #8
10044076:	bd80      	pop	{r7, pc}
10044078:	200003f0 	.word	0x200003f0

1004407c <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004407c:	b590      	push	{r4, r7, lr}
1004407e:	b089      	sub	sp, #36	@ 0x24
10044080:	af04      	add	r7, sp, #16
10044082:	60f8      	str	r0, [r7, #12]
10044084:	0008      	movs	r0, r1
10044086:	0011      	movs	r1, r2
10044088:	607b      	str	r3, [r7, #4]
1004408a:	230b      	movs	r3, #11
1004408c:	18fb      	adds	r3, r7, r3
1004408e:	1c02      	adds	r2, r0, #0
10044090:	701a      	strb	r2, [r3, #0]
10044092:	2308      	movs	r3, #8
10044094:	18fb      	adds	r3, r7, r3
10044096:	1c0a      	adds	r2, r1, #0
10044098:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004409a:	68fb      	ldr	r3, [r7, #12]
1004409c:	781b      	ldrb	r3, [r3, #0]
1004409e:	0019      	movs	r1, r3
100440a0:	4a12      	ldr	r2, [pc, #72]	@ (100440ec <NVMDB_ReadNextRecord+0x70>)
100440a2:	000b      	movs	r3, r1
100440a4:	009b      	lsls	r3, r3, #2
100440a6:	185b      	adds	r3, r3, r1
100440a8:	009b      	lsls	r3, r3, #2
100440aa:	18d3      	adds	r3, r2, r3
100440ac:	330e      	adds	r3, #14
100440ae:	781b      	ldrb	r3, [r3, #0]
100440b0:	2b00      	cmp	r3, #0
100440b2:	d001      	beq.n	100440b8 <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
100440b4:	230a      	movs	r3, #10
100440b6:	e015      	b.n	100440e4 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
100440b8:	687c      	ldr	r4, [r7, #4]
100440ba:	2308      	movs	r3, #8
100440bc:	18fb      	adds	r3, r7, r3
100440be:	881a      	ldrh	r2, [r3, #0]
100440c0:	230b      	movs	r3, #11
100440c2:	18fb      	adds	r3, r7, r3
100440c4:	7819      	ldrb	r1, [r3, #0]
100440c6:	68f8      	ldr	r0, [r7, #12]
100440c8:	2300      	movs	r3, #0
100440ca:	9303      	str	r3, [sp, #12]
100440cc:	2300      	movs	r3, #0
100440ce:	9302      	str	r3, [sp, #8]
100440d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100440d2:	9301      	str	r3, [sp, #4]
100440d4:	2320      	movs	r3, #32
100440d6:	18fb      	adds	r3, r7, r3
100440d8:	881b      	ldrh	r3, [r3, #0]
100440da:	9300      	str	r3, [sp, #0]
100440dc:	0023      	movs	r3, r4
100440de:	f7ff f83f 	bl	10043160 <ReadNextRecordNoLock>
100440e2:	0003      	movs	r3, r0
}
100440e4:	0018      	movs	r0, r3
100440e6:	46bd      	mov	sp, r7
100440e8:	b005      	add	sp, #20
100440ea:	bd90      	pop	{r4, r7, pc}
100440ec:	200003f0 	.word	0x200003f0

100440f0 <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
100440f0:	b590      	push	{r4, r7, lr}
100440f2:	b087      	sub	sp, #28
100440f4:	af02      	add	r7, sp, #8
100440f6:	60f8      	str	r0, [r7, #12]
100440f8:	0008      	movs	r0, r1
100440fa:	607a      	str	r2, [r7, #4]
100440fc:	0019      	movs	r1, r3
100440fe:	230a      	movs	r3, #10
10044100:	18fb      	adds	r3, r7, r3
10044102:	1c02      	adds	r2, r0, #0
10044104:	801a      	strh	r2, [r3, #0]
10044106:	2308      	movs	r3, #8
10044108:	18fb      	adds	r3, r7, r3
1004410a:	1c0a      	adds	r2, r1, #0
1004410c:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004410e:	68fb      	ldr	r3, [r7, #12]
10044110:	781b      	ldrb	r3, [r3, #0]
10044112:	0019      	movs	r1, r3
10044114:	4a0f      	ldr	r2, [pc, #60]	@ (10044154 <NVMDB_ReadCurrentRecord+0x64>)
10044116:	000b      	movs	r3, r1
10044118:	009b      	lsls	r3, r3, #2
1004411a:	185b      	adds	r3, r3, r1
1004411c:	009b      	lsls	r3, r3, #2
1004411e:	18d3      	adds	r3, r2, r3
10044120:	330e      	adds	r3, #14
10044122:	781b      	ldrb	r3, [r3, #0]
10044124:	2b00      	cmp	r3, #0
10044126:	d001      	beq.n	1004412c <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10044128:	230a      	movs	r3, #10
1004412a:	e00f      	b.n	1004414c <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
1004412c:	2308      	movs	r3, #8
1004412e:	18fb      	adds	r3, r7, r3
10044130:	881c      	ldrh	r4, [r3, #0]
10044132:	687a      	ldr	r2, [r7, #4]
10044134:	230a      	movs	r3, #10
10044136:	18fb      	adds	r3, r7, r3
10044138:	8819      	ldrh	r1, [r3, #0]
1004413a:	68f8      	ldr	r0, [r7, #12]
1004413c:	2300      	movs	r3, #0
1004413e:	9301      	str	r3, [sp, #4]
10044140:	6a3b      	ldr	r3, [r7, #32]
10044142:	9300      	str	r3, [sp, #0]
10044144:	0023      	movs	r3, r4
10044146:	f7ff f915 	bl	10043374 <ReadCurrentRecordNoLock>
1004414a:	0003      	movs	r3, r0
}
1004414c:	0018      	movs	r0, r3
1004414e:	46bd      	mov	sp, r7
10044150:	b005      	add	sp, #20
10044152:	bd90      	pop	{r4, r7, pc}
10044154:	200003f0 	.word	0x200003f0

10044158 <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
10044158:	b5f0      	push	{r4, r5, r6, r7, lr}
1004415a:	46c6      	mov	lr, r8
1004415c:	b500      	push	{lr}
1004415e:	b088      	sub	sp, #32
10044160:	af02      	add	r7, sp, #8
10044162:	60f8      	str	r0, [r7, #12]
10044164:	0008      	movs	r0, r1
10044166:	0011      	movs	r1, r2
10044168:	607b      	str	r3, [r7, #4]
1004416a:	230b      	movs	r3, #11
1004416c:	001c      	movs	r4, r3
1004416e:	18fb      	adds	r3, r7, r3
10044170:	1c02      	adds	r2, r0, #0
10044172:	701a      	strb	r2, [r3, #0]
10044174:	2008      	movs	r0, #8
10044176:	183b      	adds	r3, r7, r0
10044178:	1c0a      	adds	r2, r1, #0
1004417a:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
1004417c:	2617      	movs	r6, #23
1004417e:	46b0      	mov	r8, r6
10044180:	44b8      	add	r8, r7
10044182:	687d      	ldr	r5, [r7, #4]
10044184:	183b      	adds	r3, r7, r0
10044186:	881a      	ldrh	r2, [r3, #0]
10044188:	0023      	movs	r3, r4
1004418a:	18fb      	adds	r3, r7, r3
1004418c:	7819      	ldrb	r1, [r3, #0]
1004418e:	68f8      	ldr	r0, [r7, #12]
10044190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044192:	9301      	str	r3, [sp, #4]
10044194:	2328      	movs	r3, #40	@ 0x28
10044196:	2408      	movs	r4, #8
10044198:	191b      	adds	r3, r3, r4
1004419a:	19db      	adds	r3, r3, r7
1004419c:	881b      	ldrh	r3, [r3, #0]
1004419e:	9300      	str	r3, [sp, #0]
100441a0:	002b      	movs	r3, r5
100441a2:	f7ff fd19 	bl	10043bd8 <NVMDB_AppendRecordNoCache>
100441a6:	0003      	movs	r3, r0
100441a8:	4642      	mov	r2, r8
100441aa:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
100441ac:	19bb      	adds	r3, r7, r6
100441ae:	781b      	ldrb	r3, [r3, #0]
100441b0:	2b00      	cmp	r3, #0
100441b2:	d002      	beq.n	100441ba <NVMDB_AppendRecord+0x62>
  {
    return status;
100441b4:	19bb      	adds	r3, r7, r6
100441b6:	781b      	ldrb	r3, [r3, #0]
100441b8:	e02c      	b.n	10044214 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
100441ba:	68fb      	ldr	r3, [r7, #12]
100441bc:	781b      	ldrb	r3, [r3, #0]
100441be:	0019      	movs	r1, r3
100441c0:	4a17      	ldr	r2, [pc, #92]	@ (10044220 <NVMDB_AppendRecord+0xc8>)
100441c2:	000b      	movs	r3, r1
100441c4:	009b      	lsls	r3, r3, #2
100441c6:	185b      	adds	r3, r3, r1
100441c8:	009b      	lsls	r3, r3, #2
100441ca:	18d3      	adds	r3, r2, r3
100441cc:	330c      	adds	r3, #12
100441ce:	881a      	ldrh	r2, [r3, #0]
100441d0:	2308      	movs	r3, #8
100441d2:	0018      	movs	r0, r3
100441d4:	18f9      	adds	r1, r7, r3
100441d6:	2328      	movs	r3, #40	@ 0x28
100441d8:	181b      	adds	r3, r3, r0
100441da:	19db      	adds	r3, r3, r7
100441dc:	8809      	ldrh	r1, [r1, #0]
100441de:	881b      	ldrh	r3, [r3, #0]
100441e0:	18cb      	adds	r3, r1, r3
100441e2:	b29b      	uxth	r3, r3
100441e4:	3b01      	subs	r3, #1
100441e6:	b29b      	uxth	r3, r3
100441e8:	b21b      	sxth	r3, r3
100441ea:	2103      	movs	r1, #3
100441ec:	430b      	orrs	r3, r1
100441ee:	b21b      	sxth	r3, r3
100441f0:	b29b      	uxth	r3, r3
100441f2:	1ad3      	subs	r3, r2, r3
100441f4:	b29b      	uxth	r3, r3
100441f6:	68fa      	ldr	r2, [r7, #12]
100441f8:	7812      	ldrb	r2, [r2, #0]
100441fa:	0011      	movs	r1, r2
100441fc:	3b05      	subs	r3, #5
100441fe:	b298      	uxth	r0, r3
10044200:	4a07      	ldr	r2, [pc, #28]	@ (10044220 <NVMDB_AppendRecord+0xc8>)
10044202:	000b      	movs	r3, r1
10044204:	009b      	lsls	r3, r3, #2
10044206:	185b      	adds	r3, r3, r1
10044208:	009b      	lsls	r3, r3, #2
1004420a:	18d3      	adds	r3, r2, r3
1004420c:	330c      	adds	r3, #12
1004420e:	1c02      	adds	r2, r0, #0
10044210:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10044212:	2300      	movs	r3, #0
}
10044214:	0018      	movs	r0, r3
10044216:	46bd      	mov	sp, r7
10044218:	b006      	add	sp, #24
1004421a:	bc80      	pop	{r7}
1004421c:	46b8      	mov	r8, r7
1004421e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044220:	200003f0 	.word	0x200003f0

10044224 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
10044224:	b5b0      	push	{r4, r5, r7, lr}
10044226:	b084      	sub	sp, #16
10044228:	af00      	add	r7, sp, #0
1004422a:	0002      	movs	r2, r0
1004422c:	1dfb      	adds	r3, r7, #7
1004422e:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
10044230:	250f      	movs	r5, #15
10044232:	197c      	adds	r4, r7, r5
10044234:	2308      	movs	r3, #8
10044236:	18fa      	adds	r2, r7, r3
10044238:	1dfb      	adds	r3, r7, #7
1004423a:	781b      	ldrb	r3, [r3, #0]
1004423c:	0011      	movs	r1, r2
1004423e:	0018      	movs	r0, r3
10044240:	f7ff fc5c 	bl	10043afc <GetDBType>
10044244:	0003      	movs	r3, r0
10044246:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
10044248:	197b      	adds	r3, r7, r5
1004424a:	781b      	ldrb	r3, [r3, #0]
1004424c:	2b02      	cmp	r3, #2
1004424e:	d106      	bne.n	1004425e <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
10044250:	1dfb      	adds	r3, r7, #7
10044252:	781b      	ldrb	r3, [r3, #0]
10044254:	0018      	movs	r0, r3
10044256:	f7ff fa69 	bl	1004372c <CleanLargeDB>
1004425a:	0003      	movs	r3, r0
1004425c:	e00b      	b.n	10044276 <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
1004425e:	230f      	movs	r3, #15
10044260:	18fb      	adds	r3, r7, r3
10044262:	781b      	ldrb	r3, [r3, #0]
10044264:	2b01      	cmp	r3, #1
10044266:	d105      	bne.n	10044274 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
10044268:	68bb      	ldr	r3, [r7, #8]
1004426a:	0018      	movs	r0, r3
1004426c:	f7ff fb3c 	bl	100438e8 <CleanPage>
10044270:	0003      	movs	r3, r0
10044272:	e000      	b.n	10044276 <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
10044274:	2301      	movs	r3, #1
}
10044276:	0018      	movs	r0, r3
10044278:	46bd      	mov	sp, r7
1004427a:	b004      	add	sp, #16
1004427c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10044280 <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
10044280:	b590      	push	{r4, r7, lr}
10044282:	b083      	sub	sp, #12
10044284:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
10044286:	1dfc      	adds	r4, r7, #7
10044288:	f000 f816 	bl	100442b8 <NVMDB_CleanCheck>
1004428c:	0003      	movs	r3, r0
1004428e:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
10044290:	1dfb      	adds	r3, r7, #7
10044292:	781b      	ldrb	r3, [r3, #0]
10044294:	2b7f      	cmp	r3, #127	@ 0x7f
10044296:	d808      	bhi.n	100442aa <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
10044298:	1dfb      	adds	r3, r7, #7
1004429a:	781b      	ldrb	r3, [r3, #0]
1004429c:	0018      	movs	r0, r3
1004429e:	f7ff ffc1 	bl	10044224 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
100442a2:	4b04      	ldr	r3, [pc, #16]	@ (100442b4 <NVMDB_Tick+0x34>)
100442a4:	0018      	movs	r0, r3
100442a6:	f009 f94b 	bl	1004d540 <puts>
  }
#endif

  return NVMDB_STATUS_OK;
100442aa:	2300      	movs	r3, #0
}
100442ac:	0018      	movs	r0, r3
100442ae:	46bd      	mov	sp, r7
100442b0:	b003      	add	sp, #12
100442b2:	bd90      	pop	{r4, r7, pc}
100442b4:	1004e678 	.word	0x1004e678

100442b8 <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
100442b8:	b580      	push	{r7, lr}
100442ba:	b082      	sub	sp, #8
100442bc:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
100442be:	4b2b      	ldr	r3, [pc, #172]	@ (1004436c <NVMDB_CleanCheck+0xb4>)
100442c0:	2200      	movs	r2, #0
100442c2:	569a      	ldrsb	r2, [r3, r2]
100442c4:	1dfb      	adds	r3, r7, #7
100442c6:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
100442c8:	1dfb      	adds	r3, r7, #7
100442ca:	781a      	ldrb	r2, [r3, #0]
100442cc:	4928      	ldr	r1, [pc, #160]	@ (10044370 <NVMDB_CleanCheck+0xb8>)
100442ce:	0013      	movs	r3, r2
100442d0:	009b      	lsls	r3, r3, #2
100442d2:	189b      	adds	r3, r3, r2
100442d4:	009b      	lsls	r3, r3, #2
100442d6:	18cb      	adds	r3, r1, r3
100442d8:	330a      	adds	r3, #10
100442da:	881b      	ldrh	r3, [r3, #0]
100442dc:	2b00      	cmp	r3, #0
100442de:	d028      	beq.n	10044332 <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
100442e0:	1dfb      	adds	r3, r7, #7
100442e2:	781a      	ldrb	r2, [r3, #0]
100442e4:	4922      	ldr	r1, [pc, #136]	@ (10044370 <NVMDB_CleanCheck+0xb8>)
100442e6:	0013      	movs	r3, r2
100442e8:	009b      	lsls	r3, r3, #2
100442ea:	189b      	adds	r3, r3, r2
100442ec:	009b      	lsls	r3, r3, #2
100442ee:	18cb      	adds	r3, r1, r3
100442f0:	330c      	adds	r3, #12
100442f2:	8819      	ldrh	r1, [r3, #0]
100442f4:	1dfb      	adds	r3, r7, #7
100442f6:	781a      	ldrb	r2, [r3, #0]
100442f8:	481d      	ldr	r0, [pc, #116]	@ (10044370 <NVMDB_CleanCheck+0xb8>)
100442fa:	0013      	movs	r3, r2
100442fc:	009b      	lsls	r3, r3, #2
100442fe:	189b      	adds	r3, r3, r2
10044300:	009b      	lsls	r3, r3, #2
10044302:	18c3      	adds	r3, r0, r3
10044304:	3310      	adds	r3, #16
10044306:	881b      	ldrh	r3, [r3, #0]
10044308:	4299      	cmp	r1, r3
1004430a:	d212      	bcs.n	10044332 <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
1004430c:	1dfb      	adds	r3, r7, #7
1004430e:	781b      	ldrb	r3, [r3, #0]
10044310:	3301      	adds	r3, #1
10044312:	b2db      	uxtb	r3, r3
10044314:	b25a      	sxtb	r2, r3
10044316:	4b15      	ldr	r3, [pc, #84]	@ (1004436c <NVMDB_CleanCheck+0xb4>)
10044318:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
1004431a:	4b14      	ldr	r3, [pc, #80]	@ (1004436c <NVMDB_CleanCheck+0xb4>)
1004431c:	781b      	ldrb	r3, [r3, #0]
1004431e:	b25b      	sxtb	r3, r3
10044320:	2b02      	cmp	r3, #2
10044322:	d102      	bne.n	1004432a <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
10044324:	4b11      	ldr	r3, [pc, #68]	@ (1004436c <NVMDB_CleanCheck+0xb4>)
10044326:	2200      	movs	r2, #0
10044328:	701a      	strb	r2, [r3, #0]
        }
        return i;
1004432a:	1dfb      	adds	r3, r7, #7
1004432c:	781b      	ldrb	r3, [r3, #0]
1004432e:	b25b      	sxtb	r3, r3
10044330:	e017      	b.n	10044362 <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
10044332:	1dfb      	adds	r3, r7, #7
10044334:	781a      	ldrb	r2, [r3, #0]
10044336:	1dfb      	adds	r3, r7, #7
10044338:	3201      	adds	r2, #1
1004433a:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
1004433c:	1dfb      	adds	r3, r7, #7
1004433e:	781b      	ldrb	r3, [r3, #0]
10044340:	2b02      	cmp	r3, #2
10044342:	d102      	bne.n	1004434a <NVMDB_CleanCheck+0x92>
    {
      i = 0;
10044344:	1dfb      	adds	r3, r7, #7
10044346:	2200      	movs	r2, #0
10044348:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
1004434a:	1dfb      	adds	r3, r7, #7
1004434c:	781b      	ldrb	r3, [r3, #0]
1004434e:	4a07      	ldr	r2, [pc, #28]	@ (1004436c <NVMDB_CleanCheck+0xb4>)
10044350:	7812      	ldrb	r2, [r2, #0]
10044352:	b252      	sxtb	r2, r2
10044354:	4293      	cmp	r3, r2
10044356:	d1b7      	bne.n	100442c8 <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
10044358:	4b04      	ldr	r3, [pc, #16]	@ (1004436c <NVMDB_CleanCheck+0xb4>)
1004435a:	2200      	movs	r2, #0
1004435c:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
1004435e:	2301      	movs	r3, #1
10044360:	425b      	negs	r3, r3
}
10044362:	0018      	movs	r0, r3
10044364:	46bd      	mov	sp, r7
10044366:	b002      	add	sp, #8
10044368:	bd80      	pop	{r7, pc}
1004436a:	46c0      	nop			@ (mov r8, r8)
1004436c:	20000418 	.word	0x20000418
10044370:	200003f0 	.word	0x200003f0

10044374 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
10044374:	b580      	push	{r7, lr}
10044376:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
10044378:	4b03      	ldr	r3, [pc, #12]	@ (10044388 <PKAMGR_Init+0x14>)
1004437a:	2201      	movs	r2, #1
1004437c:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
1004437e:	2300      	movs	r3, #0
}
10044380:	0018      	movs	r0, r3
10044382:	46bd      	mov	sp, r7
10044384:	bd80      	pop	{r7, pc}
10044386:	46c0      	nop			@ (mov r8, r8)
10044388:	20000820 	.word	0x20000820

1004438c <PKAMGR_Unlock>:

  return return_value;
}

PKAMGR_ResultStatus PKAMGR_Unlock()
{
1004438c:	b580      	push	{r7, lr}
1004438e:	b084      	sub	sp, #16
10044390:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_SUCCESS;
10044392:	210f      	movs	r1, #15
10044394:	187b      	adds	r3, r7, r1
10044396:	2200      	movs	r2, #0
10044398:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004439a:	f3ef 8310 	mrs	r3, PRIMASK
1004439e:	607b      	str	r3, [r7, #4]
  return(result);
100443a0:	687b      	ldr	r3, [r7, #4]

  /* Only one consumer (Application layer or Stack) can use the PKA at the time */
  ATOMIC_SECTION_BEGIN();
100443a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
100443a4:	b672      	cpsid	i
}
100443a6:	46c0      	nop			@ (mov r8, r8)
  if(internalState != PKAMGR_STATE_BUSY)
100443a8:	4b0c      	ldr	r3, [pc, #48]	@ (100443dc <PKAMGR_Unlock+0x50>)
100443aa:	681b      	ldr	r3, [r3, #0]
100443ac:	2b03      	cmp	r3, #3
100443ae:	d003      	beq.n	100443b8 <PKAMGR_Unlock+0x2c>
  {
    return_value = PKAMGR_ERR_BUSY;
100443b0:	187b      	adds	r3, r7, r1
100443b2:	22fe      	movs	r2, #254	@ 0xfe
100443b4:	701a      	strb	r2, [r3, #0]
100443b6:	e002      	b.n	100443be <PKAMGR_Unlock+0x32>
  }
  else
  {
    /* Unlock mechanism to access concurrently at the PKA resource */
    internalState = PKAMGR_STATE_IDLE;
100443b8:	4b08      	ldr	r3, [pc, #32]	@ (100443dc <PKAMGR_Unlock+0x50>)
100443ba:	2201      	movs	r2, #1
100443bc:	601a      	str	r2, [r3, #0]
100443be:	68bb      	ldr	r3, [r7, #8]
100443c0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100443c2:	683b      	ldr	r3, [r7, #0]
100443c4:	f383 8810 	msr	PRIMASK, r3
}
100443c8:	46c0      	nop			@ (mov r8, r8)
  }
  ATOMIC_SECTION_END();

  return return_value;
100443ca:	230f      	movs	r3, #15
100443cc:	18fb      	adds	r3, r7, r3
100443ce:	781b      	ldrb	r3, [r3, #0]
100443d0:	b25b      	sxtb	r3, r3
}
100443d2:	0018      	movs	r0, r3
100443d4:	46bd      	mov	sp, r7
100443d6:	b004      	add	sp, #16
100443d8:	bd80      	pop	{r7, pc}
100443da:	46c0      	nop			@ (mov r8, r8)
100443dc:	20000820 	.word	0x20000820

100443e0 <PKAMGR_IRQCallback>:
{
  return HW_PKA_StartP256DHkeyGeneration(privateKey, (uint32_t *)&PKAStartPoint[0], funcCB);
}

__weak void PKAMGR_IRQCallback(void)
{
100443e0:	b580      	push	{r7, lr}
100443e2:	af00      	add	r7, sp, #0
}
100443e4:	46c0      	nop			@ (mov r8, r8)
100443e6:	46bd      	mov	sp, r7
100443e8:	bd80      	pop	{r7, pc}

100443ea <aci_gatt_srv_profile_init>:

#else /* (CFG_BLE_CONNECTION_ENABLED == 0) */

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
100443ea:	b580      	push	{r7, lr}
100443ec:	b082      	sub	sp, #8
100443ee:	af00      	add	r7, sp, #0
100443f0:	0002      	movs	r2, r0
100443f2:	6039      	str	r1, [r7, #0]
100443f4:	1dfb      	adds	r3, r7, #7
100443f6:	701a      	strb	r2, [r3, #0]
  return BLE_ERROR_UNSUPPORTED_FEATURE;
100443f8:	2311      	movs	r3, #17
}
100443fa:	0018      	movs	r0, r3
100443fc:	46bd      	mov	sp, r7
100443fe:	b002      	add	sp, #8
10044400:	bd80      	pop	{r7, pc}
	...

10044404 <LL_PWR_IsSMPSReady>:
{
10044404:	b580      	push	{r7, lr}
10044406:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
10044408:	4b05      	ldr	r3, [pc, #20]	@ (10044420 <LL_PWR_IsSMPSReady+0x1c>)
1004440a:	695b      	ldr	r3, [r3, #20]
1004440c:	2204      	movs	r2, #4
1004440e:	4013      	ands	r3, r2
10044410:	2b04      	cmp	r3, #4
10044412:	d101      	bne.n	10044418 <LL_PWR_IsSMPSReady+0x14>
10044414:	2301      	movs	r3, #1
10044416:	e000      	b.n	1004441a <LL_PWR_IsSMPSReady+0x16>
10044418:	2300      	movs	r3, #0
}
1004441a:	0018      	movs	r0, r3
1004441c:	46bd      	mov	sp, r7
1004441e:	bd80      	pop	{r7, pc}
10044420:	48500000 	.word	0x48500000

10044424 <LL_PWR_GetSMPSMode>:
{
10044424:	b580      	push	{r7, lr}
10044426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
10044428:	4b03      	ldr	r3, [pc, #12]	@ (10044438 <LL_PWR_GetSMPSMode+0x14>)
1004442a:	69da      	ldr	r2, [r3, #28]
1004442c:	2380      	movs	r3, #128	@ 0x80
1004442e:	00db      	lsls	r3, r3, #3
10044430:	4013      	ands	r3, r2
}
10044432:	0018      	movs	r0, r3
10044434:	46bd      	mov	sp, r7
10044436:	bd80      	pop	{r7, pc}
10044438:	48500000 	.word	0x48500000

1004443c <LL_PWR_SetSMPSPrechargeMode>:
{
1004443c:	b580      	push	{r7, lr}
1004443e:	b082      	sub	sp, #8
10044440:	af00      	add	r7, sp, #0
10044442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
10044444:	4b06      	ldr	r3, [pc, #24]	@ (10044460 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10044446:	69db      	ldr	r3, [r3, #28]
10044448:	4a06      	ldr	r2, [pc, #24]	@ (10044464 <LL_PWR_SetSMPSPrechargeMode+0x28>)
1004444a:	4013      	ands	r3, r2
1004444c:	0019      	movs	r1, r3
1004444e:	4b04      	ldr	r3, [pc, #16]	@ (10044460 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10044450:	687a      	ldr	r2, [r7, #4]
10044452:	430a      	orrs	r2, r1
10044454:	61da      	str	r2, [r3, #28]
}
10044456:	46c0      	nop			@ (mov r8, r8)
10044458:	46bd      	mov	sp, r7
1004445a:	b002      	add	sp, #8
1004445c:	bd80      	pop	{r7, pc}
1004445e:	46c0      	nop			@ (mov r8, r8)
10044460:	48500000 	.word	0x48500000
10044464:	fffffdff 	.word	0xfffffdff

10044468 <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
10044468:	b580      	push	{r7, lr}
1004446a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
1004446c:	4b07      	ldr	r3, [pc, #28]	@ (1004448c <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
1004446e:	69da      	ldr	r2, [r3, #28]
10044470:	2380      	movs	r3, #128	@ 0x80
10044472:	009b      	lsls	r3, r3, #2
10044474:	401a      	ands	r2, r3
10044476:	2380      	movs	r3, #128	@ 0x80
10044478:	009b      	lsls	r3, r3, #2
1004447a:	429a      	cmp	r2, r3
1004447c:	d101      	bne.n	10044482 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
1004447e:	2301      	movs	r3, #1
10044480:	e000      	b.n	10044484 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
10044482:	2300      	movs	r3, #0
}
10044484:	0018      	movs	r0, r3
10044486:	46bd      	mov	sp, r7
10044488:	bd80      	pop	{r7, pc}
1004448a:	46c0      	nop			@ (mov r8, r8)
1004448c:	48500000 	.word	0x48500000

10044490 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
10044490:	b580      	push	{r7, lr}
10044492:	b082      	sub	sp, #8
10044494:	af00      	add	r7, sp, #0
10044496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
10044498:	4b06      	ldr	r3, [pc, #24]	@ (100444b4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
1004449a:	69db      	ldr	r3, [r3, #28]
1004449c:	220f      	movs	r2, #15
1004449e:	4393      	bics	r3, r2
100444a0:	0019      	movs	r1, r3
100444a2:	4b04      	ldr	r3, [pc, #16]	@ (100444b4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
100444a4:	687a      	ldr	r2, [r7, #4]
100444a6:	430a      	orrs	r2, r1
100444a8:	61da      	str	r2, [r3, #28]
}
100444aa:	46c0      	nop			@ (mov r8, r8)
100444ac:	46bd      	mov	sp, r7
100444ae:	b002      	add	sp, #8
100444b0:	bd80      	pop	{r7, pc}
100444b2:	46c0      	nop			@ (mov r8, r8)
100444b4:	48500000 	.word	0x48500000

100444b8 <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
100444b8:	b580      	push	{r7, lr}
100444ba:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
100444bc:	2320      	movs	r3, #32
}
100444be:	0018      	movs	r0, r3
100444c0:	46bd      	mov	sp, r7
100444c2:	bd80      	pop	{r7, pc}

100444c4 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
100444c4:	b580      	push	{r7, lr}
100444c6:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
100444c8:	231f      	movs	r3, #31
}
100444ca:	0018      	movs	r0, r3
100444cc:	46bd      	mov	sp, r7
100444ce:	bd80      	pop	{r7, pc}

100444d0 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
100444d0:	b580      	push	{r7, lr}
100444d2:	b082      	sub	sp, #8
100444d4:	af00      	add	r7, sp, #0
100444d6:	0002      	movs	r2, r0
100444d8:	1dfb      	adds	r3, r7, #7
100444da:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
100444dc:	1dfb      	adds	r3, r7, #7
100444de:	781b      	ldrb	r3, [r3, #0]
100444e0:	2b00      	cmp	r3, #0
100444e2:	d007      	beq.n	100444f4 <RADIO_SetHighPower+0x24>
  {
    if(high_power == FALSE)
100444e4:	4b1d      	ldr	r3, [pc, #116]	@ (1004455c <RADIO_SetHighPower+0x8c>)
100444e6:	781b      	ldrb	r3, [r3, #0]
100444e8:	2b00      	cmp	r3, #0
100444ea:	d10a      	bne.n	10044502 <RADIO_SetHighPower+0x32>
    {
      high_power = TRUE;
100444ec:	4b1b      	ldr	r3, [pc, #108]	@ (1004455c <RADIO_SetHighPower+0x8c>)
100444ee:	2201      	movs	r2, #1
100444f0:	701a      	strb	r2, [r3, #0]
100444f2:	e006      	b.n	10044502 <RADIO_SetHighPower+0x32>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
100444f4:	4b19      	ldr	r3, [pc, #100]	@ (1004455c <RADIO_SetHighPower+0x8c>)
100444f6:	781b      	ldrb	r3, [r3, #0]
100444f8:	2b01      	cmp	r3, #1
100444fa:	d102      	bne.n	10044502 <RADIO_SetHighPower+0x32>
    {
      high_power = FALSE;
100444fc:	4b17      	ldr	r3, [pc, #92]	@ (1004455c <RADIO_SetHighPower+0x8c>)
100444fe:	2200      	movs	r2, #0
10044500:	701a      	strb	r2, [r3, #0]
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
10044502:	f7ff ffb1 	bl	10044468 <LL_PWR_IsEnabledSMPSPrechargeMode>
10044506:	1e03      	subs	r3, r0, #0
10044508:	d124      	bne.n	10044554 <RADIO_SetHighPower+0x84>
1004450a:	f7ff ff8b 	bl	10044424 <LL_PWR_GetSMPSMode>
1004450e:	0002      	movs	r2, r0
10044510:	2380      	movs	r3, #128	@ 0x80
10044512:	00db      	lsls	r3, r3, #3
10044514:	429a      	cmp	r2, r3
10044516:	d01d      	beq.n	10044554 <RADIO_SetHighPower+0x84>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
10044518:	2380      	movs	r3, #128	@ 0x80
1004451a:	009b      	lsls	r3, r3, #2
1004451c:	0018      	movs	r0, r3
1004451e:	f7ff ff8d 	bl	1004443c <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
10044522:	46c0      	nop			@ (mov r8, r8)
10044524:	f7ff ff6e 	bl	10044404 <LL_PWR_IsSMPSReady>
10044528:	1e03      	subs	r3, r0, #0
1004452a:	d1fb      	bne.n	10044524 <RADIO_SetHighPower+0x54>
  /* Change level */
  if(state != DISABLE)
1004452c:	1dfb      	adds	r3, r7, #7
1004452e:	781b      	ldrb	r3, [r3, #0]
10044530:	2b00      	cmp	r3, #0
10044532:	d003      	beq.n	1004453c <RADIO_SetHighPower+0x6c>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
10044534:	200e      	movs	r0, #14
10044536:	f7ff ffab 	bl	10044490 <LL_PWR_SMPS_SetOutputVoltageLevel>
1004453a:	e002      	b.n	10044542 <RADIO_SetHighPower+0x72>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
1004453c:	2004      	movs	r0, #4
1004453e:	f7ff ffa7 	bl	10044490 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
10044542:	2000      	movs	r0, #0
10044544:	f7ff ff7a 	bl	1004443c <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
10044548:	46c0      	nop			@ (mov r8, r8)
1004454a:	f7ff ff5b 	bl	10044404 <LL_PWR_IsSMPSReady>
1004454e:	1e03      	subs	r3, r0, #0
10044550:	d0fb      	beq.n	1004454a <RADIO_SetHighPower+0x7a>
10044552:	e000      	b.n	10044556 <RADIO_SetHighPower+0x86>
    return;
10044554:	46c0      	nop			@ (mov r8, r8)
}
10044556:	46bd      	mov	sp, r7
10044558:	b002      	add	sp, #8
1004455a:	bd80      	pop	{r7, pc}
1004455c:	20000420 	.word	0x20000420

10044560 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
10044560:	b580      	push	{r7, lr}
10044562:	af00      	add	r7, sp, #0
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
  }
#endif
}
10044564:	46c0      	nop			@ (mov r8, r8)
10044566:	46bd      	mov	sp, r7
10044568:	bd80      	pop	{r7, pc}

1004456a <LL_SYSCFG_GetDeviceRevision>:
  * @brief  Get the device cut revision (metal fix) information.
  * @rmtoll DIE_ID REVISION   LL_SYSCFG_GetDeviceRevision
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceRevision(void)
{
1004456a:	b580      	push	{r7, lr}
1004456c:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
1004456e:	2380      	movs	r3, #128	@ 0x80
10044570:	05db      	lsls	r3, r3, #23
10044572:	681b      	ldr	r3, [r3, #0]
10044574:	220f      	movs	r2, #15
10044576:	4013      	ands	r3, r2
}
10044578:	0018      	movs	r0, r3
1004457a:	46bd      	mov	sp, r7
1004457c:	bd80      	pop	{r7, pc}

1004457e <LL_SYSCFG_GetDeviceVersion>:
  * @brief  Get the device cut version information.
  * @rmtoll DIE_ID VERSION   LL_SYSCFG_GetDeviceVersion
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceVersion(void)
{
1004457e:	b580      	push	{r7, lr}
10044580:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
10044582:	2380      	movs	r3, #128	@ 0x80
10044584:	05db      	lsls	r3, r3, #23
10044586:	681b      	ldr	r3, [r3, #0]
10044588:	091b      	lsrs	r3, r3, #4
1004458a:	220f      	movs	r2, #15
1004458c:	4013      	ands	r3, r2
}
1004458e:	0018      	movs	r0, r3
10044590:	46bd      	mov	sp, r7
10044592:	bd80      	pop	{r7, pc}

10044594 <LL_SYSCFG_GetDeviceJTAG_ID>:
  * @brief  Get the JTAG_ID device information.
  * @rmtoll JTAG_ID    LL_SYSCFG_GetDeviceJTAG_ID
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceJTAG_ID(void)
{
10044594:	b580      	push	{r7, lr}
10044596:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
10044598:	2380      	movs	r3, #128	@ 0x80
1004459a:	05db      	lsls	r3, r3, #23
1004459c:	685b      	ldr	r3, [r3, #4]
}
1004459e:	0018      	movs	r0, r3
100445a0:	46bd      	mov	sp, r7
100445a2:	bd80      	pop	{r7, pc}

100445a4 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
100445a4:	b580      	push	{r7, lr}
100445a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
100445a8:	4b03      	ldr	r3, [pc, #12]	@ (100445b8 <LL_GetFlashSize+0x14>)
100445aa:	681b      	ldr	r3, [r3, #0]
100445ac:	041b      	lsls	r3, r3, #16
100445ae:	0c1b      	lsrs	r3, r3, #16
}
100445b0:	0018      	movs	r0, r3
100445b2:	46bd      	mov	sp, r7
100445b4:	bd80      	pop	{r7, pc}
100445b6:	46c0      	nop			@ (mov r8, r8)
100445b8:	40001014 	.word	0x40001014

100445bc <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
100445bc:	b580      	push	{r7, lr}
100445be:	b082      	sub	sp, #8
100445c0:	af00      	add	r7, sp, #0
    __IOM uint32_t tmpreg;
#if defined(FLASH_FLASH_SIZE_RAM_SIZE)
    tmpreg = (READ_REG(*((uint32_t *)RAMSIZE_BASE_ADDRESS)) & FLASH_FLASH_SIZE_RAM_SIZE) >> FLASH_FLASH_SIZE_RAM_SIZE_Pos;
100445c2:	4b08      	ldr	r3, [pc, #32]	@ (100445e4 <LL_GetRAMSize+0x28>)
100445c4:	681b      	ldr	r3, [r3, #0]
100445c6:	0c5b      	lsrs	r3, r3, #17
100445c8:	2203      	movs	r2, #3
100445ca:	4013      	ands	r3, r2
100445cc:	607b      	str	r3, [r7, #4]

    if (tmpreg == 0) {
100445ce:	687b      	ldr	r3, [r7, #4]
100445d0:	2b00      	cmp	r3, #0
100445d2:	d101      	bne.n	100445d8 <LL_GetRAMSize+0x1c>
      tmpreg = LL_UTILS_RAMSIZE_32K;
100445d4:	2301      	movs	r3, #1
100445d6:	607b      	str	r3, [r7, #4]
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
#endif
    
    return tmpreg;
100445d8:	687b      	ldr	r3, [r7, #4]
  }
100445da:	0018      	movs	r0, r3
100445dc:	46bd      	mov	sp, r7
100445de:	b002      	add	sp, #8
100445e0:	bd80      	pop	{r7, pc}
100445e2:	46c0      	nop			@ (mov r8, r8)
100445e4:	40001014 	.word	0x40001014

100445e8 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
100445e8:	b580      	push	{r7, lr}
100445ea:	b084      	sub	sp, #16
100445ec:	af00      	add	r7, sp, #0
100445ee:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
100445f0:	687b      	ldr	r3, [r7, #4]
100445f2:	22ff      	movs	r2, #255	@ 0xff
100445f4:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
100445f6:	f7ff ffcd 	bl	10044594 <LL_SYSCFG_GetDeviceJTAG_ID>
100445fa:	0003      	movs	r3, r0
100445fc:	60fb      	str	r3, [r7, #12]

#if defined(STM32WB09)
  if(jtag_id == JTAG_ID_CODE_STM32WB09XX)
100445fe:	68fb      	ldr	r3, [r7, #12]
10044600:	4a18      	ldr	r2, [pc, #96]	@ (10044664 <GetPartInfo+0x7c>)
10044602:	4293      	cmp	r3, r2
10044604:	d102      	bne.n	1004460c <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB09XX;
10044606:	687b      	ldr	r3, [r7, #4]
10044608:	2206      	movs	r2, #6
1004460a:	701a      	strb	r2, [r3, #0]
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
1004460c:	f7ff ffb7 	bl	1004457e <LL_SYSCFG_GetDeviceVersion>
10044610:	0003      	movs	r3, r0
10044612:	b2da      	uxtb	r2, r3
10044614:	687b      	ldr	r3, [r7, #4]
10044616:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
10044618:	f7ff ffa7 	bl	1004456a <LL_SYSCFG_GetDeviceRevision>
1004461c:	0003      	movs	r3, r0
1004461e:	b2da      	uxtb	r2, r3
10044620:	687b      	ldr	r3, [r7, #4]
10044622:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
10044624:	f7ff ffb6 	bl	10044594 <LL_SYSCFG_GetDeviceJTAG_ID>
10044628:	0002      	movs	r2, r0
1004462a:	687b      	ldr	r3, [r7, #4]
1004462c:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
1004462e:	f7ff ffb9 	bl	100445a4 <LL_GetFlashSize>
10044632:	0003      	movs	r3, r0
10044634:	3301      	adds	r3, #1
10044636:	009a      	lsls	r2, r3, #2
10044638:	687b      	ldr	r3, [r7, #4]
1004463a:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
1004463c:	f7ff ffbe 	bl	100445bc <LL_GetRAMSize>
10044640:	1e03      	subs	r3, r0, #0
10044642:	d007      	beq.n	10044654 <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
10044644:	f7ff ffba 	bl	100445bc <LL_GetRAMSize>
10044648:	0003      	movs	r3, r0
1004464a:	3301      	adds	r3, #1
1004464c:	039a      	lsls	r2, r3, #14
1004464e:	687b      	ldr	r3, [r7, #4]
10044650:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
10044652:	e003      	b.n	1004465c <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
10044654:	687b      	ldr	r3, [r7, #4]
10044656:	22c0      	movs	r2, #192	@ 0xc0
10044658:	01d2      	lsls	r2, r2, #7
1004465a:	60da      	str	r2, [r3, #12]
}
1004465c:	46c0      	nop			@ (mov r8, r8)
1004465e:	46bd      	mov	sp, r7
10044660:	b004      	add	sp, #16
10044662:	bd80      	pop	{r7, pc}
10044664:	02032041 	.word	0x02032041

10044668 <LL_PWR_IsEnabledPUPDCfg>:
{
10044668:	b580      	push	{r7, lr}
1004466a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
1004466c:	4b05      	ldr	r3, [pc, #20]	@ (10044684 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
1004466e:	681b      	ldr	r3, [r3, #0]
10044670:	2210      	movs	r2, #16
10044672:	4013      	ands	r3, r2
10044674:	2b10      	cmp	r3, #16
10044676:	d101      	bne.n	1004467c <LL_PWR_IsEnabledPUPDCfg+0x14>
10044678:	2301      	movs	r3, #1
1004467a:	e000      	b.n	1004467e <LL_PWR_IsEnabledPUPDCfg+0x16>
1004467c:	2300      	movs	r3, #0
}
1004467e:	0018      	movs	r0, r3
10044680:	46bd      	mov	sp, r7
10044682:	bd80      	pop	{r7, pc}
10044684:	48500000 	.word	0x48500000

10044688 <LL_PWR_EnableGPIOPullUp>:
{
10044688:	b580      	push	{r7, lr}
1004468a:	b082      	sub	sp, #8
1004468c:	af00      	add	r7, sp, #0
1004468e:	6078      	str	r0, [r7, #4]
10044690:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
10044692:	687b      	ldr	r3, [r7, #4]
10044694:	3304      	adds	r3, #4
10044696:	681a      	ldr	r2, [r3, #0]
10044698:	683b      	ldr	r3, [r7, #0]
1004469a:	43d9      	mvns	r1, r3
1004469c:	687b      	ldr	r3, [r7, #4]
1004469e:	3304      	adds	r3, #4
100446a0:	400a      	ands	r2, r1
100446a2:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
100446a4:	687b      	ldr	r3, [r7, #4]
100446a6:	6819      	ldr	r1, [r3, #0]
100446a8:	687b      	ldr	r3, [r7, #4]
100446aa:	683a      	ldr	r2, [r7, #0]
100446ac:	430a      	orrs	r2, r1
100446ae:	601a      	str	r2, [r3, #0]
}
100446b0:	46c0      	nop			@ (mov r8, r8)
100446b2:	46bd      	mov	sp, r7
100446b4:	b002      	add	sp, #8
100446b6:	bd80      	pop	{r7, pc}

100446b8 <LL_AHB1_GRP1_EnableClock>:
{
100446b8:	b580      	push	{r7, lr}
100446ba:	b084      	sub	sp, #16
100446bc:	af00      	add	r7, sp, #0
100446be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100446c0:	4b07      	ldr	r3, [pc, #28]	@ (100446e0 <LL_AHB1_GRP1_EnableClock+0x28>)
100446c2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100446c4:	4b06      	ldr	r3, [pc, #24]	@ (100446e0 <LL_AHB1_GRP1_EnableClock+0x28>)
100446c6:	687a      	ldr	r2, [r7, #4]
100446c8:	430a      	orrs	r2, r1
100446ca:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100446cc:	4b04      	ldr	r3, [pc, #16]	@ (100446e0 <LL_AHB1_GRP1_EnableClock+0x28>)
100446ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100446d0:	687a      	ldr	r2, [r7, #4]
100446d2:	4013      	ands	r3, r2
100446d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100446d6:	68fb      	ldr	r3, [r7, #12]
}
100446d8:	46c0      	nop			@ (mov r8, r8)
100446da:	46bd      	mov	sp, r7
100446dc:	b004      	add	sp, #16
100446de:	bd80      	pop	{r7, pc}
100446e0:	48400000 	.word	0x48400000

100446e4 <LL_APB1_GRP1_EnableClock>:
{
100446e4:	b580      	push	{r7, lr}
100446e6:	b084      	sub	sp, #16
100446e8:	af00      	add	r7, sp, #0
100446ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
100446ec:	4b07      	ldr	r3, [pc, #28]	@ (1004470c <LL_APB1_GRP1_EnableClock+0x28>)
100446ee:	6d99      	ldr	r1, [r3, #88]	@ 0x58
100446f0:	4b06      	ldr	r3, [pc, #24]	@ (1004470c <LL_APB1_GRP1_EnableClock+0x28>)
100446f2:	687a      	ldr	r2, [r7, #4]
100446f4:	430a      	orrs	r2, r1
100446f6:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
100446f8:	4b04      	ldr	r3, [pc, #16]	@ (1004470c <LL_APB1_GRP1_EnableClock+0x28>)
100446fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
100446fc:	687a      	ldr	r2, [r7, #4]
100446fe:	4013      	ands	r3, r2
10044700:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10044702:	68fb      	ldr	r3, [r7, #12]
}
10044704:	46c0      	nop			@ (mov r8, r8)
10044706:	46bd      	mov	sp, r7
10044708:	b004      	add	sp, #16
1004470a:	bd80      	pop	{r7, pc}
1004470c:	48400000 	.word	0x48400000

10044710 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
10044710:	b580      	push	{r7, lr}
10044712:	b084      	sub	sp, #16
10044714:	af00      	add	r7, sp, #0
10044716:	0002      	movs	r2, r0
10044718:	6039      	str	r1, [r7, #0]
1004471a:	1dfb      	adds	r3, r7, #7
1004471c:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
1004471e:	2300      	movs	r3, #0
10044720:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
10044722:	683b      	ldr	r3, [r7, #0]
10044724:	2b00      	cmp	r3, #0
10044726:	d103      	bne.n	10044730 <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
10044728:	2302      	movs	r3, #2
1004472a:	425b      	negs	r3, r3
1004472c:	60fb      	str	r3, [r7, #12]
1004472e:	e026      	b.n	1004477e <BSP_COM_Init+0x6e>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
10044730:	1dfb      	adds	r3, r7, #7
10044732:	7819      	ldrb	r1, [r3, #0]
10044734:	1dfb      	adds	r3, r7, #7
10044736:	781a      	ldrb	r2, [r3, #0]
10044738:	4b13      	ldr	r3, [pc, #76]	@ (10044788 <BSP_COM_Init+0x78>)
1004473a:	0089      	lsls	r1, r1, #2
1004473c:	58c9      	ldr	r1, [r1, r3]
1004473e:	4b13      	ldr	r3, [pc, #76]	@ (1004478c <BSP_COM_Init+0x7c>)
10044740:	2094      	movs	r0, #148	@ 0x94
10044742:	4342      	muls	r2, r0
10044744:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
10044746:	1dfb      	adds	r3, r7, #7
10044748:	781b      	ldrb	r3, [r3, #0]
1004474a:	2294      	movs	r2, #148	@ 0x94
1004474c:	435a      	muls	r2, r3
1004474e:	4b0f      	ldr	r3, [pc, #60]	@ (1004478c <BSP_COM_Init+0x7c>)
10044750:	18d3      	adds	r3, r2, r3
10044752:	0018      	movs	r0, r3
10044754:	f000 f868 	bl	10044828 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
10044758:	68fb      	ldr	r3, [r7, #12]
1004475a:	2b00      	cmp	r3, #0
1004475c:	d10f      	bne.n	1004477e <BSP_COM_Init+0x6e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
1004475e:	1dfb      	adds	r3, r7, #7
10044760:	781b      	ldrb	r3, [r3, #0]
10044762:	2294      	movs	r2, #148	@ 0x94
10044764:	435a      	muls	r2, r3
10044766:	4b09      	ldr	r3, [pc, #36]	@ (1004478c <BSP_COM_Init+0x7c>)
10044768:	18d3      	adds	r3, r2, r3
1004476a:	683a      	ldr	r2, [r7, #0]
1004476c:	0011      	movs	r1, r2
1004476e:	0018      	movs	r0, r3
10044770:	f000 f828 	bl	100447c4 <MX_USART1_Init>
10044774:	1e03      	subs	r3, r0, #0
10044776:	d002      	beq.n	1004477e <BSP_COM_Init+0x6e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
10044778:	2304      	movs	r3, #4
1004477a:	425b      	negs	r3, r3
1004477c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
1004477e:	68fb      	ldr	r3, [r7, #12]
}
10044780:	0018      	movs	r0, r3
10044782:	46bd      	mov	sp, r7
10044784:	b004      	add	sp, #16
10044786:	bd80      	pop	{r7, pc}
10044788:	20000824 	.word	0x20000824
1004478c:	20000424 	.word	0x20000424

10044790 <__io_putchar>:
  return 1;
}

#elif defined(__GNUC__)
int __io_putchar(int ch)
{
10044790:	b580      	push	{r7, lr}
10044792:	b082      	sub	sp, #8
10044794:	af00      	add	r7, sp, #0
10044796:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
10044798:	4b08      	ldr	r3, [pc, #32]	@ (100447bc <__io_putchar+0x2c>)
1004479a:	781b      	ldrb	r3, [r3, #0]
1004479c:	001a      	movs	r2, r3
1004479e:	2394      	movs	r3, #148	@ 0x94
100447a0:	435a      	muls	r2, r3
100447a2:	4b07      	ldr	r3, [pc, #28]	@ (100447c0 <__io_putchar+0x30>)
100447a4:	18d0      	adds	r0, r2, r3
100447a6:	23fa      	movs	r3, #250	@ 0xfa
100447a8:	009b      	lsls	r3, r3, #2
100447aa:	1d39      	adds	r1, r7, #4
100447ac:	2201      	movs	r2, #1
100447ae:	f003 fe73 	bl	10048498 <HAL_UART_Transmit>
  return ch;
100447b2:	687b      	ldr	r3, [r7, #4]
}
100447b4:	0018      	movs	r0, r3
100447b6:	46bd      	mov	sp, r7
100447b8:	b002      	add	sp, #8
100447ba:	bd80      	pop	{r7, pc}
100447bc:	200004b8 	.word	0x200004b8
100447c0:	20000424 	.word	0x20000424

100447c4 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
100447c4:	b580      	push	{r7, lr}
100447c6:	b082      	sub	sp, #8
100447c8:	af00      	add	r7, sp, #0
100447ca:	6078      	str	r0, [r7, #4]
100447cc:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
100447ce:	683b      	ldr	r3, [r7, #0]
100447d0:	681a      	ldr	r2, [r3, #0]
100447d2:	687b      	ldr	r3, [r7, #4]
100447d4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
100447d6:	683b      	ldr	r3, [r7, #0]
100447d8:	685a      	ldr	r2, [r3, #4]
100447da:	687b      	ldr	r3, [r7, #4]
100447dc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
100447de:	683b      	ldr	r3, [r7, #0]
100447e0:	891b      	ldrh	r3, [r3, #8]
100447e2:	001a      	movs	r2, r3
100447e4:	687b      	ldr	r3, [r7, #4]
100447e6:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
100447e8:	683b      	ldr	r3, [r7, #0]
100447ea:	895b      	ldrh	r3, [r3, #10]
100447ec:	001a      	movs	r2, r3
100447ee:	687b      	ldr	r3, [r7, #4]
100447f0:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
100447f2:	687b      	ldr	r3, [r7, #4]
100447f4:	220c      	movs	r2, #12
100447f6:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
100447f8:	683b      	ldr	r3, [r7, #0]
100447fa:	899b      	ldrh	r3, [r3, #12]
100447fc:	001a      	movs	r2, r3
100447fe:	687b      	ldr	r3, [r7, #4]
10044800:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
10044802:	687b      	ldr	r3, [r7, #4]
10044804:	2280      	movs	r2, #128	@ 0x80
10044806:	0212      	lsls	r2, r2, #8
10044808:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1004480a:	687b      	ldr	r3, [r7, #4]
1004480c:	2200      	movs	r2, #0
1004480e:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
10044810:	687b      	ldr	r3, [r7, #4]
10044812:	2200      	movs	r2, #0
10044814:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
10044816:	687b      	ldr	r3, [r7, #4]
10044818:	0018      	movs	r0, r3
1004481a:	f003 fde7 	bl	100483ec <HAL_UART_Init>
1004481e:	0003      	movs	r3, r0
}
10044820:	0018      	movs	r0, r3
10044822:	46bd      	mov	sp, r7
10044824:	b002      	add	sp, #8
10044826:	bd80      	pop	{r7, pc}

10044828 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
10044828:	b590      	push	{r4, r7, lr}
1004482a:	b089      	sub	sp, #36	@ 0x24
1004482c:	af00      	add	r7, sp, #0
1004482e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
10044830:	2004      	movs	r0, #4
10044832:	f7ff ff41 	bl	100446b8 <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
10044836:	2008      	movs	r0, #8
10044838:	f7ff ff3e 	bl	100446b8 <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
1004483c:	2380      	movs	r3, #128	@ 0x80
1004483e:	00db      	lsls	r3, r3, #3
10044840:	0018      	movs	r0, r3
10044842:	f7ff ff4f 	bl	100446e4 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
10044846:	240c      	movs	r4, #12
10044848:	193b      	adds	r3, r7, r4
1004484a:	2202      	movs	r2, #2
1004484c:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
1004484e:	193b      	adds	r3, r7, r4
10044850:	2202      	movs	r2, #2
10044852:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
10044854:	193b      	adds	r3, r7, r4
10044856:	2202      	movs	r2, #2
10044858:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
1004485a:	193b      	adds	r3, r7, r4
1004485c:	2201      	movs	r2, #1
1004485e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
10044860:	193b      	adds	r3, r7, r4
10044862:	2202      	movs	r2, #2
10044864:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
10044866:	193a      	adds	r2, r7, r4
10044868:	2390      	movs	r3, #144	@ 0x90
1004486a:	05db      	lsls	r3, r3, #23
1004486c:	0011      	movs	r1, r2
1004486e:	0018      	movs	r0, r3
10044870:	f000 fc74 	bl	1004515c <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10044874:	f7ff fef8 	bl	10044668 <LL_PWR_IsEnabledPUPDCfg>
10044878:	1e03      	subs	r3, r0, #0
1004487a:	d006      	beq.n	1004488a <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
1004487c:	193b      	adds	r3, r7, r4
1004487e:	681b      	ldr	r3, [r3, #0]
10044880:	4a0a      	ldr	r2, [pc, #40]	@ (100448ac <UART_MspInit+0x84>)
10044882:	0019      	movs	r1, r3
10044884:	0010      	movs	r0, r2
10044886:	f7ff feff 	bl	10044688 <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
1004488a:	210c      	movs	r1, #12
1004488c:	187b      	adds	r3, r7, r1
1004488e:	2201      	movs	r2, #1
10044890:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
10044892:	187b      	adds	r3, r7, r1
10044894:	2200      	movs	r2, #0
10044896:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
10044898:	187b      	adds	r3, r7, r1
1004489a:	4a05      	ldr	r2, [pc, #20]	@ (100448b0 <UART_MspInit+0x88>)
1004489c:	0019      	movs	r1, r3
1004489e:	0010      	movs	r0, r2
100448a0:	f000 fc5c 	bl	1004515c <HAL_GPIO_Init>
}
100448a4:	46c0      	nop			@ (mov r8, r8)
100448a6:	46bd      	mov	sp, r7
100448a8:	b009      	add	sp, #36	@ 0x24
100448aa:	bd90      	pop	{r4, r7, pc}
100448ac:	48500020 	.word	0x48500020
100448b0:	48100000 	.word	0x48100000

100448b4 <__NVIC_SetPriority>:
{
100448b4:	b590      	push	{r4, r7, lr}
100448b6:	b083      	sub	sp, #12
100448b8:	af00      	add	r7, sp, #0
100448ba:	0002      	movs	r2, r0
100448bc:	6039      	str	r1, [r7, #0]
100448be:	1dfb      	adds	r3, r7, #7
100448c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100448c2:	1dfb      	adds	r3, r7, #7
100448c4:	781b      	ldrb	r3, [r3, #0]
100448c6:	2b7f      	cmp	r3, #127	@ 0x7f
100448c8:	d828      	bhi.n	1004491c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100448ca:	4a2f      	ldr	r2, [pc, #188]	@ (10044988 <__NVIC_SetPriority+0xd4>)
100448cc:	1dfb      	adds	r3, r7, #7
100448ce:	781b      	ldrb	r3, [r3, #0]
100448d0:	b25b      	sxtb	r3, r3
100448d2:	089b      	lsrs	r3, r3, #2
100448d4:	33c0      	adds	r3, #192	@ 0xc0
100448d6:	009b      	lsls	r3, r3, #2
100448d8:	589b      	ldr	r3, [r3, r2]
100448da:	1dfa      	adds	r2, r7, #7
100448dc:	7812      	ldrb	r2, [r2, #0]
100448de:	0011      	movs	r1, r2
100448e0:	2203      	movs	r2, #3
100448e2:	400a      	ands	r2, r1
100448e4:	00d2      	lsls	r2, r2, #3
100448e6:	21ff      	movs	r1, #255	@ 0xff
100448e8:	4091      	lsls	r1, r2
100448ea:	000a      	movs	r2, r1
100448ec:	43d2      	mvns	r2, r2
100448ee:	401a      	ands	r2, r3
100448f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100448f2:	683b      	ldr	r3, [r7, #0]
100448f4:	019b      	lsls	r3, r3, #6
100448f6:	22ff      	movs	r2, #255	@ 0xff
100448f8:	401a      	ands	r2, r3
100448fa:	1dfb      	adds	r3, r7, #7
100448fc:	781b      	ldrb	r3, [r3, #0]
100448fe:	0018      	movs	r0, r3
10044900:	2303      	movs	r3, #3
10044902:	4003      	ands	r3, r0
10044904:	00db      	lsls	r3, r3, #3
10044906:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044908:	481f      	ldr	r0, [pc, #124]	@ (10044988 <__NVIC_SetPriority+0xd4>)
1004490a:	1dfb      	adds	r3, r7, #7
1004490c:	781b      	ldrb	r3, [r3, #0]
1004490e:	b25b      	sxtb	r3, r3
10044910:	089b      	lsrs	r3, r3, #2
10044912:	430a      	orrs	r2, r1
10044914:	33c0      	adds	r3, #192	@ 0xc0
10044916:	009b      	lsls	r3, r3, #2
10044918:	501a      	str	r2, [r3, r0]
}
1004491a:	e031      	b.n	10044980 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004491c:	4a1b      	ldr	r2, [pc, #108]	@ (1004498c <__NVIC_SetPriority+0xd8>)
1004491e:	1dfb      	adds	r3, r7, #7
10044920:	781b      	ldrb	r3, [r3, #0]
10044922:	0019      	movs	r1, r3
10044924:	230f      	movs	r3, #15
10044926:	400b      	ands	r3, r1
10044928:	3b08      	subs	r3, #8
1004492a:	089b      	lsrs	r3, r3, #2
1004492c:	3306      	adds	r3, #6
1004492e:	009b      	lsls	r3, r3, #2
10044930:	18d3      	adds	r3, r2, r3
10044932:	3304      	adds	r3, #4
10044934:	681b      	ldr	r3, [r3, #0]
10044936:	1dfa      	adds	r2, r7, #7
10044938:	7812      	ldrb	r2, [r2, #0]
1004493a:	0011      	movs	r1, r2
1004493c:	2203      	movs	r2, #3
1004493e:	400a      	ands	r2, r1
10044940:	00d2      	lsls	r2, r2, #3
10044942:	21ff      	movs	r1, #255	@ 0xff
10044944:	4091      	lsls	r1, r2
10044946:	000a      	movs	r2, r1
10044948:	43d2      	mvns	r2, r2
1004494a:	401a      	ands	r2, r3
1004494c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004494e:	683b      	ldr	r3, [r7, #0]
10044950:	019b      	lsls	r3, r3, #6
10044952:	22ff      	movs	r2, #255	@ 0xff
10044954:	401a      	ands	r2, r3
10044956:	1dfb      	adds	r3, r7, #7
10044958:	781b      	ldrb	r3, [r3, #0]
1004495a:	0018      	movs	r0, r3
1004495c:	2303      	movs	r3, #3
1004495e:	4003      	ands	r3, r0
10044960:	00db      	lsls	r3, r3, #3
10044962:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044964:	4809      	ldr	r0, [pc, #36]	@ (1004498c <__NVIC_SetPriority+0xd8>)
10044966:	1dfb      	adds	r3, r7, #7
10044968:	781b      	ldrb	r3, [r3, #0]
1004496a:	001c      	movs	r4, r3
1004496c:	230f      	movs	r3, #15
1004496e:	4023      	ands	r3, r4
10044970:	3b08      	subs	r3, #8
10044972:	089b      	lsrs	r3, r3, #2
10044974:	430a      	orrs	r2, r1
10044976:	3306      	adds	r3, #6
10044978:	009b      	lsls	r3, r3, #2
1004497a:	18c3      	adds	r3, r0, r3
1004497c:	3304      	adds	r3, #4
1004497e:	601a      	str	r2, [r3, #0]
}
10044980:	46c0      	nop			@ (mov r8, r8)
10044982:	46bd      	mov	sp, r7
10044984:	b003      	add	sp, #12
10044986:	bd90      	pop	{r4, r7, pc}
10044988:	e000e100 	.word	0xe000e100
1004498c:	e000ed00 	.word	0xe000ed00

10044990 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10044990:	b580      	push	{r7, lr}
10044992:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10044994:	f3bf 8f4f 	dsb	sy
}
10044998:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1004499a:	4b04      	ldr	r3, [pc, #16]	@ (100449ac <__NVIC_SystemReset+0x1c>)
1004499c:	4a04      	ldr	r2, [pc, #16]	@ (100449b0 <__NVIC_SystemReset+0x20>)
1004499e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100449a0:	f3bf 8f4f 	dsb	sy
}
100449a4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100449a6:	46c0      	nop			@ (mov r8, r8)
100449a8:	e7fd      	b.n	100449a6 <__NVIC_SystemReset+0x16>
100449aa:	46c0      	nop			@ (mov r8, r8)
100449ac:	e000ed00 	.word	0xe000ed00
100449b0:	05fa0004 	.word	0x05fa0004

100449b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
100449b4:	b590      	push	{r4, r7, lr}
100449b6:	b087      	sub	sp, #28
100449b8:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
100449ba:	4a64      	ldr	r2, [pc, #400]	@ (10044b4c <SystemInit+0x198>)
100449bc:	2394      	movs	r3, #148	@ 0x94
100449be:	58d3      	ldr	r3, [r2, r3]
100449c0:	2b00      	cmp	r3, #0
100449c2:	d10e      	bne.n	100449e2 <SystemInit+0x2e>
100449c4:	4b62      	ldr	r3, [pc, #392]	@ (10044b50 <SystemInit+0x19c>)
100449c6:	691b      	ldr	r3, [r3, #16]
100449c8:	2b00      	cmp	r3, #0
100449ca:	d103      	bne.n	100449d4 <SystemInit+0x20>
100449cc:	4b60      	ldr	r3, [pc, #384]	@ (10044b50 <SystemInit+0x19c>)
100449ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100449d0:	2b00      	cmp	r3, #0
100449d2:	d006      	beq.n	100449e2 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
100449d4:	4b5f      	ldr	r3, [pc, #380]	@ (10044b54 <SystemInit+0x1a0>)
100449d6:	2201      	movs	r2, #1
100449d8:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
100449da:	f7fb fc05 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
100449de:	f7ff ffd7 	bl	10044990 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
100449e2:	4b5d      	ldr	r3, [pc, #372]	@ (10044b58 <SystemInit+0x1a4>)
100449e4:	4a5d      	ldr	r2, [pc, #372]	@ (10044b5c <SystemInit+0x1a8>)
100449e6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
100449e8:	4b5b      	ldr	r3, [pc, #364]	@ (10044b58 <SystemInit+0x1a4>)
100449ea:	689a      	ldr	r2, [r3, #8]
100449ec:	4b59      	ldr	r3, [pc, #356]	@ (10044b54 <SystemInit+0x1a0>)
100449ee:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
100449f0:	4b57      	ldr	r3, [pc, #348]	@ (10044b50 <SystemInit+0x19c>)
100449f2:	685a      	ldr	r2, [r3, #4]
100449f4:	4b56      	ldr	r3, [pc, #344]	@ (10044b50 <SystemInit+0x19c>)
100449f6:	2120      	movs	r1, #32
100449f8:	430a      	orrs	r2, r1
100449fa:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
100449fc:	4b54      	ldr	r3, [pc, #336]	@ (10044b50 <SystemInit+0x19c>)
100449fe:	685a      	ldr	r2, [r3, #4]
10044a00:	4b53      	ldr	r3, [pc, #332]	@ (10044b50 <SystemInit+0x19c>)
10044a02:	2140      	movs	r1, #64	@ 0x40
10044a04:	430a      	orrs	r2, r1
10044a06:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
10044a08:	4b51      	ldr	r3, [pc, #324]	@ (10044b50 <SystemInit+0x19c>)
10044a0a:	685a      	ldr	r2, [r3, #4]
10044a0c:	4b50      	ldr	r3, [pc, #320]	@ (10044b50 <SystemInit+0x19c>)
10044a0e:	2180      	movs	r1, #128	@ 0x80
10044a10:	430a      	orrs	r2, r1
10044a12:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10044a14:	4b4e      	ldr	r3, [pc, #312]	@ (10044b50 <SystemInit+0x19c>)
10044a16:	685a      	ldr	r2, [r3, #4]
10044a18:	4b4d      	ldr	r3, [pc, #308]	@ (10044b50 <SystemInit+0x19c>)
10044a1a:	4951      	ldr	r1, [pc, #324]	@ (10044b60 <SystemInit+0x1ac>)
10044a1c:	400a      	ands	r2, r1
10044a1e:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10044a20:	46c0      	nop			@ (mov r8, r8)
10044a22:	4b4b      	ldr	r3, [pc, #300]	@ (10044b50 <SystemInit+0x19c>)
10044a24:	695b      	ldr	r3, [r3, #20]
10044a26:	2204      	movs	r2, #4
10044a28:	4013      	ands	r3, r2
10044a2a:	2b04      	cmp	r3, #4
10044a2c:	d1f9      	bne.n	10044a22 <SystemInit+0x6e>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10044a2e:	4b48      	ldr	r3, [pc, #288]	@ (10044b50 <SystemInit+0x19c>)
10044a30:	69db      	ldr	r3, [r3, #28]
10044a32:	2230      	movs	r2, #48	@ 0x30
10044a34:	4393      	bics	r3, r2
10044a36:	001a      	movs	r2, r3
10044a38:	4b45      	ldr	r3, [pc, #276]	@ (10044b50 <SystemInit+0x19c>)
10044a3a:	2120      	movs	r1, #32
10044a3c:	430a      	orrs	r2, r1
10044a3e:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10044a40:	4b43      	ldr	r3, [pc, #268]	@ (10044b50 <SystemInit+0x19c>)
10044a42:	69da      	ldr	r2, [r3, #28]
10044a44:	4b42      	ldr	r3, [pc, #264]	@ (10044b50 <SystemInit+0x19c>)
10044a46:	4947      	ldr	r1, [pc, #284]	@ (10044b64 <SystemInit+0x1b0>)
10044a48:	400a      	ands	r2, r1
10044a4a:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10044a4c:	4b40      	ldr	r3, [pc, #256]	@ (10044b50 <SystemInit+0x19c>)
10044a4e:	69da      	ldr	r2, [r3, #28]
10044a50:	4b3f      	ldr	r3, [pc, #252]	@ (10044b50 <SystemInit+0x19c>)
10044a52:	2180      	movs	r1, #128	@ 0x80
10044a54:	0049      	lsls	r1, r1, #1
10044a56:	430a      	orrs	r2, r1
10044a58:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10044a5a:	4b43      	ldr	r3, [pc, #268]	@ (10044b68 <SystemInit+0x1b4>)
10044a5c:	681b      	ldr	r3, [r3, #0]
10044a5e:	4a43      	ldr	r2, [pc, #268]	@ (10044b6c <SystemInit+0x1b8>)
10044a60:	4293      	cmp	r3, r2
10044a62:	d055      	beq.n	10044b10 <SystemInit+0x15c>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10044a64:	231f      	movs	r3, #31
10044a66:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10044a68:	2308      	movs	r3, #8
10044a6a:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10044a6c:	230a      	movs	r3, #10
10044a6e:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10044a70:	2303      	movs	r3, #3
10044a72:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10044a74:	4b35      	ldr	r3, [pc, #212]	@ (10044b4c <SystemInit+0x198>)
10044a76:	68db      	ldr	r3, [r3, #12]
10044a78:	221e      	movs	r2, #30
10044a7a:	4393      	bics	r3, r2
10044a7c:	0019      	movs	r1, r3
10044a7e:	68fb      	ldr	r3, [r7, #12]
10044a80:	005a      	lsls	r2, r3, #1
10044a82:	4b32      	ldr	r3, [pc, #200]	@ (10044b4c <SystemInit+0x198>)
10044a84:	430a      	orrs	r2, r1
10044a86:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10044a88:	4b30      	ldr	r3, [pc, #192]	@ (10044b4c <SystemInit+0x198>)
10044a8a:	68da      	ldr	r2, [r3, #12]
10044a8c:	4b2f      	ldr	r3, [pc, #188]	@ (10044b4c <SystemInit+0x198>)
10044a8e:	2101      	movs	r1, #1
10044a90:	430a      	orrs	r2, r1
10044a92:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10044a94:	4b2d      	ldr	r3, [pc, #180]	@ (10044b4c <SystemInit+0x198>)
10044a96:	68db      	ldr	r3, [r3, #12]
10044a98:	4a35      	ldr	r2, [pc, #212]	@ (10044b70 <SystemInit+0x1bc>)
10044a9a:	4013      	ands	r3, r2
10044a9c:	0019      	movs	r1, r3
10044a9e:	693b      	ldr	r3, [r7, #16]
10044aa0:	061a      	lsls	r2, r3, #24
10044aa2:	4b2a      	ldr	r3, [pc, #168]	@ (10044b4c <SystemInit+0x198>)
10044aa4:	430a      	orrs	r2, r1
10044aa6:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10044aa8:	4b28      	ldr	r3, [pc, #160]	@ (10044b4c <SystemInit+0x198>)
10044aaa:	68da      	ldr	r2, [r3, #12]
10044aac:	4b27      	ldr	r3, [pc, #156]	@ (10044b4c <SystemInit+0x198>)
10044aae:	2180      	movs	r1, #128	@ 0x80
10044ab0:	0409      	lsls	r1, r1, #16
10044ab2:	430a      	orrs	r2, r1
10044ab4:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10044ab6:	4a26      	ldr	r2, [pc, #152]	@ (10044b50 <SystemInit+0x19c>)
10044ab8:	2394      	movs	r3, #148	@ 0x94
10044aba:	58d3      	ldr	r3, [r2, r3]
10044abc:	4a2d      	ldr	r2, [pc, #180]	@ (10044b74 <SystemInit+0x1c0>)
10044abe:	401a      	ands	r2, r3
10044ac0:	68bb      	ldr	r3, [r7, #8]
10044ac2:	0199      	lsls	r1, r3, #6
10044ac4:	23f0      	movs	r3, #240	@ 0xf0
10044ac6:	009b      	lsls	r3, r3, #2
10044ac8:	400b      	ands	r3, r1
10044aca:	4921      	ldr	r1, [pc, #132]	@ (10044b50 <SystemInit+0x19c>)
10044acc:	4313      	orrs	r3, r2
10044ace:	2294      	movs	r2, #148	@ 0x94
10044ad0:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10044ad2:	4a1f      	ldr	r2, [pc, #124]	@ (10044b50 <SystemInit+0x19c>)
10044ad4:	2394      	movs	r3, #148	@ 0x94
10044ad6:	58d3      	ldr	r3, [r2, r3]
10044ad8:	491d      	ldr	r1, [pc, #116]	@ (10044b50 <SystemInit+0x19c>)
10044ada:	2220      	movs	r2, #32
10044adc:	4313      	orrs	r3, r2
10044ade:	2294      	movs	r2, #148	@ 0x94
10044ae0:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10044ae2:	4a1b      	ldr	r2, [pc, #108]	@ (10044b50 <SystemInit+0x19c>)
10044ae4:	2394      	movs	r3, #148	@ 0x94
10044ae6:	58d3      	ldr	r3, [r2, r3]
10044ae8:	4a23      	ldr	r2, [pc, #140]	@ (10044b78 <SystemInit+0x1c4>)
10044aea:	401a      	ands	r2, r3
10044aec:	687b      	ldr	r3, [r7, #4]
10044aee:	02d9      	lsls	r1, r3, #11
10044af0:	23e0      	movs	r3, #224	@ 0xe0
10044af2:	019b      	lsls	r3, r3, #6
10044af4:	400b      	ands	r3, r1
10044af6:	4916      	ldr	r1, [pc, #88]	@ (10044b50 <SystemInit+0x19c>)
10044af8:	4313      	orrs	r3, r2
10044afa:	2294      	movs	r2, #148	@ 0x94
10044afc:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10044afe:	4a14      	ldr	r2, [pc, #80]	@ (10044b50 <SystemInit+0x19c>)
10044b00:	2394      	movs	r3, #148	@ 0x94
10044b02:	58d3      	ldr	r3, [r2, r3]
10044b04:	4912      	ldr	r1, [pc, #72]	@ (10044b50 <SystemInit+0x19c>)
10044b06:	2280      	movs	r2, #128	@ 0x80
10044b08:	00d2      	lsls	r2, r2, #3
10044b0a:	4313      	orrs	r3, r2
10044b0c:	2294      	movs	r2, #148	@ 0x94
10044b0e:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10044b10:	2317      	movs	r3, #23
10044b12:	18fb      	adds	r3, r7, r3
10044b14:	2200      	movs	r2, #0
10044b16:	701a      	strb	r2, [r3, #0]
10044b18:	e00d      	b.n	10044b36 <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10044b1a:	2417      	movs	r4, #23
10044b1c:	193b      	adds	r3, r7, r4
10044b1e:	781b      	ldrb	r3, [r3, #0]
10044b20:	b25b      	sxtb	r3, r3
10044b22:	2103      	movs	r1, #3
10044b24:	0018      	movs	r0, r3
10044b26:	f7ff fec5 	bl	100448b4 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10044b2a:	0021      	movs	r1, r4
10044b2c:	187b      	adds	r3, r7, r1
10044b2e:	781a      	ldrb	r2, [r3, #0]
10044b30:	187b      	adds	r3, r7, r1
10044b32:	3201      	adds	r2, #1
10044b34:	701a      	strb	r2, [r3, #0]
10044b36:	2317      	movs	r3, #23
10044b38:	18fb      	adds	r3, r7, r3
10044b3a:	781b      	ldrb	r3, [r3, #0]
10044b3c:	2b1f      	cmp	r3, #31
10044b3e:	d9ec      	bls.n	10044b1a <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
10044b40:	b662      	cpsie	i
}
10044b42:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10044b44:	46c0      	nop			@ (mov r8, r8)
10044b46:	46bd      	mov	sp, r7
10044b48:	b007      	add	sp, #28
10044b4a:	bd90      	pop	{r4, r7, pc}
10044b4c:	48400000 	.word	0x48400000
10044b50:	48500000 	.word	0x48500000
10044b54:	20000004 	.word	0x20000004
10044b58:	e000ed00 	.word	0xe000ed00
10044b5c:	10040000 	.word	0x10040000
10044b60:	fffffeff 	.word	0xfffffeff
10044b64:	fffffbff 	.word	0xfffffbff
10044b68:	10001ef8 	.word	0x10001ef8
10044b6c:	fcbceccc 	.word	0xfcbceccc
10044b70:	c0ffffff 	.word	0xc0ffffff
10044b74:	fffffc3f 	.word	0xfffffc3f
10044b78:	ffffc7ff 	.word	0xffffc7ff

10044b7c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10044b7c:	b580      	push	{r7, lr}
10044b7e:	b082      	sub	sp, #8
10044b80:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10044b82:	4b13      	ldr	r3, [pc, #76]	@ (10044bd0 <SystemCoreClockUpdate+0x54>)
10044b84:	689b      	ldr	r3, [r3, #8]
10044b86:	085b      	lsrs	r3, r3, #1
10044b88:	b2da      	uxtb	r2, r3
10044b8a:	1dfb      	adds	r3, r7, #7
10044b8c:	2101      	movs	r1, #1
10044b8e:	400a      	ands	r2, r1
10044b90:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10044b92:	4b0f      	ldr	r3, [pc, #60]	@ (10044bd0 <SystemCoreClockUpdate+0x54>)
10044b94:	689b      	ldr	r3, [r3, #8]
10044b96:	0a1b      	lsrs	r3, r3, #8
10044b98:	b2da      	uxtb	r2, r3
10044b9a:	1dbb      	adds	r3, r7, #6
10044b9c:	2107      	movs	r1, #7
10044b9e:	400a      	ands	r2, r1
10044ba0:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10044ba2:	1dfb      	adds	r3, r7, #7
10044ba4:	781b      	ldrb	r3, [r3, #0]
10044ba6:	2b00      	cmp	r3, #0
10044ba8:	d007      	beq.n	10044bba <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10044baa:	1dbb      	adds	r3, r7, #6
10044bac:	781b      	ldrb	r3, [r3, #0]
10044bae:	3b01      	subs	r3, #1
10044bb0:	4a08      	ldr	r2, [pc, #32]	@ (10044bd4 <SystemCoreClockUpdate+0x58>)
10044bb2:	40da      	lsrs	r2, r3
10044bb4:	4b08      	ldr	r3, [pc, #32]	@ (10044bd8 <SystemCoreClockUpdate+0x5c>)
10044bb6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10044bb8:	e005      	b.n	10044bc6 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10044bba:	1dbb      	adds	r3, r7, #6
10044bbc:	781b      	ldrb	r3, [r3, #0]
10044bbe:	4a07      	ldr	r2, [pc, #28]	@ (10044bdc <SystemCoreClockUpdate+0x60>)
10044bc0:	40da      	lsrs	r2, r3
10044bc2:	4b05      	ldr	r3, [pc, #20]	@ (10044bd8 <SystemCoreClockUpdate+0x5c>)
10044bc4:	601a      	str	r2, [r3, #0]
}
10044bc6:	46c0      	nop			@ (mov r8, r8)
10044bc8:	46bd      	mov	sp, r7
10044bca:	b002      	add	sp, #8
10044bcc:	bd80      	pop	{r7, pc}
10044bce:	46c0      	nop			@ (mov r8, r8)
10044bd0:	48400000 	.word	0x48400000
10044bd4:	01e84800 	.word	0x01e84800
10044bd8:	20000828 	.word	0x20000828
10044bdc:	03d09000 	.word	0x03d09000

10044be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10044be0:	b580      	push	{r7, lr}
10044be2:	b082      	sub	sp, #8
10044be4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10044be6:	1dfb      	adds	r3, r7, #7
10044be8:	2200      	movs	r2, #0
10044bea:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10044bec:	2003      	movs	r0, #3
10044bee:	f000 f80f 	bl	10044c10 <HAL_InitTick>
10044bf2:	1e03      	subs	r3, r0, #0
10044bf4:	d003      	beq.n	10044bfe <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10044bf6:	1dfb      	adds	r3, r7, #7
10044bf8:	2201      	movs	r2, #1
10044bfa:	701a      	strb	r2, [r3, #0]
10044bfc:	e001      	b.n	10044c02 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10044bfe:	f7fc f981 	bl	10040f04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
10044c02:	1dfb      	adds	r3, r7, #7
10044c04:	781b      	ldrb	r3, [r3, #0]
}
10044c06:	0018      	movs	r0, r3
10044c08:	46bd      	mov	sp, r7
10044c0a:	b002      	add	sp, #8
10044c0c:	bd80      	pop	{r7, pc}
	...

10044c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10044c10:	b590      	push	{r4, r7, lr}
10044c12:	b085      	sub	sp, #20
10044c14:	af00      	add	r7, sp, #0
10044c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10044c18:	230f      	movs	r3, #15
10044c1a:	18fb      	adds	r3, r7, r3
10044c1c:	2200      	movs	r2, #0
10044c1e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10044c20:	4b1d      	ldr	r3, [pc, #116]	@ (10044c98 <HAL_InitTick+0x88>)
10044c22:	781b      	ldrb	r3, [r3, #0]
10044c24:	2b00      	cmp	r3, #0
10044c26:	d02c      	beq.n	10044c82 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10044c28:	f003 fa1e 	bl	10048068 <HAL_RCC_GetSysClockFreq>
10044c2c:	0004      	movs	r4, r0
10044c2e:	4b1a      	ldr	r3, [pc, #104]	@ (10044c98 <HAL_InitTick+0x88>)
10044c30:	781b      	ldrb	r3, [r3, #0]
10044c32:	0019      	movs	r1, r3
10044c34:	23fa      	movs	r3, #250	@ 0xfa
10044c36:	0098      	lsls	r0, r3, #2
10044c38:	f7fb fafa 	bl	10040230 <__udivsi3>
10044c3c:	0003      	movs	r3, r0
10044c3e:	0019      	movs	r1, r3
10044c40:	0020      	movs	r0, r4
10044c42:	f7fb faf5 	bl	10040230 <__udivsi3>
10044c46:	0003      	movs	r3, r0
10044c48:	0018      	movs	r0, r3
10044c4a:	f000 f920 	bl	10044e8e <HAL_SYSTICK_Config>
10044c4e:	1e03      	subs	r3, r0, #0
10044c50:	d112      	bne.n	10044c78 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10044c52:	687b      	ldr	r3, [r7, #4]
10044c54:	2b03      	cmp	r3, #3
10044c56:	d80a      	bhi.n	10044c6e <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10044c58:	6879      	ldr	r1, [r7, #4]
10044c5a:	2301      	movs	r3, #1
10044c5c:	425b      	negs	r3, r3
10044c5e:	2200      	movs	r2, #0
10044c60:	0018      	movs	r0, r3
10044c62:	f000 f8ef 	bl	10044e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10044c66:	4b0d      	ldr	r3, [pc, #52]	@ (10044c9c <HAL_InitTick+0x8c>)
10044c68:	687a      	ldr	r2, [r7, #4]
10044c6a:	601a      	str	r2, [r3, #0]
10044c6c:	e00d      	b.n	10044c8a <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10044c6e:	230f      	movs	r3, #15
10044c70:	18fb      	adds	r3, r7, r3
10044c72:	2201      	movs	r2, #1
10044c74:	701a      	strb	r2, [r3, #0]
10044c76:	e008      	b.n	10044c8a <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10044c78:	230f      	movs	r3, #15
10044c7a:	18fb      	adds	r3, r7, r3
10044c7c:	2201      	movs	r2, #1
10044c7e:	701a      	strb	r2, [r3, #0]
10044c80:	e003      	b.n	10044c8a <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10044c82:	230f      	movs	r3, #15
10044c84:	18fb      	adds	r3, r7, r3
10044c86:	2201      	movs	r2, #1
10044c88:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10044c8a:	230f      	movs	r3, #15
10044c8c:	18fb      	adds	r3, r7, r3
10044c8e:	781b      	ldrb	r3, [r3, #0]
}
10044c90:	0018      	movs	r0, r3
10044c92:	46bd      	mov	sp, r7
10044c94:	b005      	add	sp, #20
10044c96:	bd90      	pop	{r4, r7, pc}
10044c98:	20000830 	.word	0x20000830
10044c9c:	2000082c 	.word	0x2000082c

10044ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10044ca0:	b580      	push	{r7, lr}
10044ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10044ca4:	4b05      	ldr	r3, [pc, #20]	@ (10044cbc <HAL_IncTick+0x1c>)
10044ca6:	781b      	ldrb	r3, [r3, #0]
10044ca8:	001a      	movs	r2, r3
10044caa:	4b05      	ldr	r3, [pc, #20]	@ (10044cc0 <HAL_IncTick+0x20>)
10044cac:	681b      	ldr	r3, [r3, #0]
10044cae:	18d2      	adds	r2, r2, r3
10044cb0:	4b03      	ldr	r3, [pc, #12]	@ (10044cc0 <HAL_IncTick+0x20>)
10044cb2:	601a      	str	r2, [r3, #0]
}
10044cb4:	46c0      	nop			@ (mov r8, r8)
10044cb6:	46bd      	mov	sp, r7
10044cb8:	bd80      	pop	{r7, pc}
10044cba:	46c0      	nop			@ (mov r8, r8)
10044cbc:	20000830 	.word	0x20000830
10044cc0:	200004bc 	.word	0x200004bc

10044cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10044cc4:	b580      	push	{r7, lr}
10044cc6:	af00      	add	r7, sp, #0
  return uwTick;
10044cc8:	4b02      	ldr	r3, [pc, #8]	@ (10044cd4 <HAL_GetTick+0x10>)
10044cca:	681b      	ldr	r3, [r3, #0]
}
10044ccc:	0018      	movs	r0, r3
10044cce:	46bd      	mov	sp, r7
10044cd0:	bd80      	pop	{r7, pc}
10044cd2:	46c0      	nop			@ (mov r8, r8)
10044cd4:	200004bc 	.word	0x200004bc

10044cd8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10044cd8:	b580      	push	{r7, lr}
10044cda:	af00      	add	r7, sp, #0
  return uwTickPrio;
10044cdc:	4b02      	ldr	r3, [pc, #8]	@ (10044ce8 <HAL_GetTickPrio+0x10>)
10044cde:	681b      	ldr	r3, [r3, #0]
}
10044ce0:	0018      	movs	r0, r3
10044ce2:	46bd      	mov	sp, r7
10044ce4:	bd80      	pop	{r7, pc}
10044ce6:	46c0      	nop			@ (mov r8, r8)
10044ce8:	2000082c 	.word	0x2000082c

10044cec <__NVIC_EnableIRQ>:
{
10044cec:	b580      	push	{r7, lr}
10044cee:	b082      	sub	sp, #8
10044cf0:	af00      	add	r7, sp, #0
10044cf2:	0002      	movs	r2, r0
10044cf4:	1dfb      	adds	r3, r7, #7
10044cf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044cf8:	1dfb      	adds	r3, r7, #7
10044cfa:	781b      	ldrb	r3, [r3, #0]
10044cfc:	2b7f      	cmp	r3, #127	@ 0x7f
10044cfe:	d809      	bhi.n	10044d14 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10044d00:	1dfb      	adds	r3, r7, #7
10044d02:	781b      	ldrb	r3, [r3, #0]
10044d04:	001a      	movs	r2, r3
10044d06:	231f      	movs	r3, #31
10044d08:	401a      	ands	r2, r3
10044d0a:	4b04      	ldr	r3, [pc, #16]	@ (10044d1c <__NVIC_EnableIRQ+0x30>)
10044d0c:	2101      	movs	r1, #1
10044d0e:	4091      	lsls	r1, r2
10044d10:	000a      	movs	r2, r1
10044d12:	601a      	str	r2, [r3, #0]
}
10044d14:	46c0      	nop			@ (mov r8, r8)
10044d16:	46bd      	mov	sp, r7
10044d18:	b002      	add	sp, #8
10044d1a:	bd80      	pop	{r7, pc}
10044d1c:	e000e100 	.word	0xe000e100

10044d20 <__NVIC_SetPriority>:
{
10044d20:	b590      	push	{r4, r7, lr}
10044d22:	b083      	sub	sp, #12
10044d24:	af00      	add	r7, sp, #0
10044d26:	0002      	movs	r2, r0
10044d28:	6039      	str	r1, [r7, #0]
10044d2a:	1dfb      	adds	r3, r7, #7
10044d2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10044d2e:	1dfb      	adds	r3, r7, #7
10044d30:	781b      	ldrb	r3, [r3, #0]
10044d32:	2b7f      	cmp	r3, #127	@ 0x7f
10044d34:	d828      	bhi.n	10044d88 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044d36:	4a2f      	ldr	r2, [pc, #188]	@ (10044df4 <__NVIC_SetPriority+0xd4>)
10044d38:	1dfb      	adds	r3, r7, #7
10044d3a:	781b      	ldrb	r3, [r3, #0]
10044d3c:	b25b      	sxtb	r3, r3
10044d3e:	089b      	lsrs	r3, r3, #2
10044d40:	33c0      	adds	r3, #192	@ 0xc0
10044d42:	009b      	lsls	r3, r3, #2
10044d44:	589b      	ldr	r3, [r3, r2]
10044d46:	1dfa      	adds	r2, r7, #7
10044d48:	7812      	ldrb	r2, [r2, #0]
10044d4a:	0011      	movs	r1, r2
10044d4c:	2203      	movs	r2, #3
10044d4e:	400a      	ands	r2, r1
10044d50:	00d2      	lsls	r2, r2, #3
10044d52:	21ff      	movs	r1, #255	@ 0xff
10044d54:	4091      	lsls	r1, r2
10044d56:	000a      	movs	r2, r1
10044d58:	43d2      	mvns	r2, r2
10044d5a:	401a      	ands	r2, r3
10044d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044d5e:	683b      	ldr	r3, [r7, #0]
10044d60:	019b      	lsls	r3, r3, #6
10044d62:	22ff      	movs	r2, #255	@ 0xff
10044d64:	401a      	ands	r2, r3
10044d66:	1dfb      	adds	r3, r7, #7
10044d68:	781b      	ldrb	r3, [r3, #0]
10044d6a:	0018      	movs	r0, r3
10044d6c:	2303      	movs	r3, #3
10044d6e:	4003      	ands	r3, r0
10044d70:	00db      	lsls	r3, r3, #3
10044d72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044d74:	481f      	ldr	r0, [pc, #124]	@ (10044df4 <__NVIC_SetPriority+0xd4>)
10044d76:	1dfb      	adds	r3, r7, #7
10044d78:	781b      	ldrb	r3, [r3, #0]
10044d7a:	b25b      	sxtb	r3, r3
10044d7c:	089b      	lsrs	r3, r3, #2
10044d7e:	430a      	orrs	r2, r1
10044d80:	33c0      	adds	r3, #192	@ 0xc0
10044d82:	009b      	lsls	r3, r3, #2
10044d84:	501a      	str	r2, [r3, r0]
}
10044d86:	e031      	b.n	10044dec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044d88:	4a1b      	ldr	r2, [pc, #108]	@ (10044df8 <__NVIC_SetPriority+0xd8>)
10044d8a:	1dfb      	adds	r3, r7, #7
10044d8c:	781b      	ldrb	r3, [r3, #0]
10044d8e:	0019      	movs	r1, r3
10044d90:	230f      	movs	r3, #15
10044d92:	400b      	ands	r3, r1
10044d94:	3b08      	subs	r3, #8
10044d96:	089b      	lsrs	r3, r3, #2
10044d98:	3306      	adds	r3, #6
10044d9a:	009b      	lsls	r3, r3, #2
10044d9c:	18d3      	adds	r3, r2, r3
10044d9e:	3304      	adds	r3, #4
10044da0:	681b      	ldr	r3, [r3, #0]
10044da2:	1dfa      	adds	r2, r7, #7
10044da4:	7812      	ldrb	r2, [r2, #0]
10044da6:	0011      	movs	r1, r2
10044da8:	2203      	movs	r2, #3
10044daa:	400a      	ands	r2, r1
10044dac:	00d2      	lsls	r2, r2, #3
10044dae:	21ff      	movs	r1, #255	@ 0xff
10044db0:	4091      	lsls	r1, r2
10044db2:	000a      	movs	r2, r1
10044db4:	43d2      	mvns	r2, r2
10044db6:	401a      	ands	r2, r3
10044db8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10044dba:	683b      	ldr	r3, [r7, #0]
10044dbc:	019b      	lsls	r3, r3, #6
10044dbe:	22ff      	movs	r2, #255	@ 0xff
10044dc0:	401a      	ands	r2, r3
10044dc2:	1dfb      	adds	r3, r7, #7
10044dc4:	781b      	ldrb	r3, [r3, #0]
10044dc6:	0018      	movs	r0, r3
10044dc8:	2303      	movs	r3, #3
10044dca:	4003      	ands	r3, r0
10044dcc:	00db      	lsls	r3, r3, #3
10044dce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10044dd0:	4809      	ldr	r0, [pc, #36]	@ (10044df8 <__NVIC_SetPriority+0xd8>)
10044dd2:	1dfb      	adds	r3, r7, #7
10044dd4:	781b      	ldrb	r3, [r3, #0]
10044dd6:	001c      	movs	r4, r3
10044dd8:	230f      	movs	r3, #15
10044dda:	4023      	ands	r3, r4
10044ddc:	3b08      	subs	r3, #8
10044dde:	089b      	lsrs	r3, r3, #2
10044de0:	430a      	orrs	r2, r1
10044de2:	3306      	adds	r3, #6
10044de4:	009b      	lsls	r3, r3, #2
10044de6:	18c3      	adds	r3, r0, r3
10044de8:	3304      	adds	r3, #4
10044dea:	601a      	str	r2, [r3, #0]
}
10044dec:	46c0      	nop			@ (mov r8, r8)
10044dee:	46bd      	mov	sp, r7
10044df0:	b003      	add	sp, #12
10044df2:	bd90      	pop	{r4, r7, pc}
10044df4:	e000e100 	.word	0xe000e100
10044df8:	e000ed00 	.word	0xe000ed00

10044dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10044dfc:	b580      	push	{r7, lr}
10044dfe:	b082      	sub	sp, #8
10044e00:	af00      	add	r7, sp, #0
10044e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10044e04:	687b      	ldr	r3, [r7, #4]
10044e06:	1e5a      	subs	r2, r3, #1
10044e08:	2380      	movs	r3, #128	@ 0x80
10044e0a:	045b      	lsls	r3, r3, #17
10044e0c:	429a      	cmp	r2, r3
10044e0e:	d301      	bcc.n	10044e14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10044e10:	2301      	movs	r3, #1
10044e12:	e010      	b.n	10044e36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10044e14:	4b0a      	ldr	r3, [pc, #40]	@ (10044e40 <SysTick_Config+0x44>)
10044e16:	687a      	ldr	r2, [r7, #4]
10044e18:	3a01      	subs	r2, #1
10044e1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10044e1c:	2301      	movs	r3, #1
10044e1e:	425b      	negs	r3, r3
10044e20:	2103      	movs	r1, #3
10044e22:	0018      	movs	r0, r3
10044e24:	f7ff ff7c 	bl	10044d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10044e28:	4b05      	ldr	r3, [pc, #20]	@ (10044e40 <SysTick_Config+0x44>)
10044e2a:	2200      	movs	r2, #0
10044e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10044e2e:	4b04      	ldr	r3, [pc, #16]	@ (10044e40 <SysTick_Config+0x44>)
10044e30:	2207      	movs	r2, #7
10044e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10044e34:	2300      	movs	r3, #0
}
10044e36:	0018      	movs	r0, r3
10044e38:	46bd      	mov	sp, r7
10044e3a:	b002      	add	sp, #8
10044e3c:	bd80      	pop	{r7, pc}
10044e3e:	46c0      	nop			@ (mov r8, r8)
10044e40:	e000e010 	.word	0xe000e010

10044e44 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10044e44:	b580      	push	{r7, lr}
10044e46:	b084      	sub	sp, #16
10044e48:	af00      	add	r7, sp, #0
10044e4a:	60b9      	str	r1, [r7, #8]
10044e4c:	607a      	str	r2, [r7, #4]
10044e4e:	210f      	movs	r1, #15
10044e50:	187b      	adds	r3, r7, r1
10044e52:	1c02      	adds	r2, r0, #0
10044e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10044e56:	68ba      	ldr	r2, [r7, #8]
10044e58:	187b      	adds	r3, r7, r1
10044e5a:	781b      	ldrb	r3, [r3, #0]
10044e5c:	b25b      	sxtb	r3, r3
10044e5e:	0011      	movs	r1, r2
10044e60:	0018      	movs	r0, r3
10044e62:	f7ff ff5d 	bl	10044d20 <__NVIC_SetPriority>
}
10044e66:	46c0      	nop			@ (mov r8, r8)
10044e68:	46bd      	mov	sp, r7
10044e6a:	b004      	add	sp, #16
10044e6c:	bd80      	pop	{r7, pc}

10044e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10044e6e:	b580      	push	{r7, lr}
10044e70:	b082      	sub	sp, #8
10044e72:	af00      	add	r7, sp, #0
10044e74:	0002      	movs	r2, r0
10044e76:	1dfb      	adds	r3, r7, #7
10044e78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10044e7a:	1dfb      	adds	r3, r7, #7
10044e7c:	781b      	ldrb	r3, [r3, #0]
10044e7e:	b25b      	sxtb	r3, r3
10044e80:	0018      	movs	r0, r3
10044e82:	f7ff ff33 	bl	10044cec <__NVIC_EnableIRQ>
}
10044e86:	46c0      	nop			@ (mov r8, r8)
10044e88:	46bd      	mov	sp, r7
10044e8a:	b002      	add	sp, #8
10044e8c:	bd80      	pop	{r7, pc}

10044e8e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10044e8e:	b580      	push	{r7, lr}
10044e90:	b082      	sub	sp, #8
10044e92:	af00      	add	r7, sp, #0
10044e94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10044e96:	687b      	ldr	r3, [r7, #4]
10044e98:	0018      	movs	r0, r3
10044e9a:	f7ff ffaf 	bl	10044dfc <SysTick_Config>
10044e9e:	0003      	movs	r3, r0
}
10044ea0:	0018      	movs	r0, r3
10044ea2:	46bd      	mov	sp, r7
10044ea4:	b002      	add	sp, #8
10044ea6:	bd80      	pop	{r7, pc}

10044ea8 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
10044ea8:	b5b0      	push	{r4, r5, r7, lr}
10044eaa:	b086      	sub	sp, #24
10044eac:	af00      	add	r7, sp, #0
10044eae:	60f8      	str	r0, [r7, #12]
10044eb0:	60b9      	str	r1, [r7, #8]
10044eb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10044eb4:	4b1d      	ldr	r3, [pc, #116]	@ (10044f2c <HAL_FLASH_Program+0x84>)
10044eb6:	781b      	ldrb	r3, [r3, #0]
10044eb8:	2b01      	cmp	r3, #1
10044eba:	d101      	bne.n	10044ec0 <HAL_FLASH_Program+0x18>
10044ebc:	2302      	movs	r3, #2
10044ebe:	e031      	b.n	10044f24 <HAL_FLASH_Program+0x7c>
10044ec0:	4b1a      	ldr	r3, [pc, #104]	@ (10044f2c <HAL_FLASH_Program+0x84>)
10044ec2:	2201      	movs	r2, #1
10044ec4:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10044ec6:	4b19      	ldr	r3, [pc, #100]	@ (10044f2c <HAL_FLASH_Program+0x84>)
10044ec8:	2200      	movs	r2, #0
10044eca:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10044ecc:	2517      	movs	r5, #23
10044ece:	197c      	adds	r4, r7, r5
10044ed0:	23fa      	movs	r3, #250	@ 0xfa
10044ed2:	009b      	lsls	r3, r3, #2
10044ed4:	0018      	movs	r0, r3
10044ed6:	f000 f82b 	bl	10044f30 <FLASH_WaitForLastOperation>
10044eda:	0003      	movs	r3, r0
10044edc:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
10044ede:	197b      	adds	r3, r7, r5
10044ee0:	781b      	ldrb	r3, [r3, #0]
10044ee2:	2b00      	cmp	r3, #0
10044ee4:	d118      	bne.n	10044f18 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
10044ee6:	68fb      	ldr	r3, [r7, #12]
10044ee8:	2b00      	cmp	r3, #0
10044eea:	d106      	bne.n	10044efa <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
10044eec:	687a      	ldr	r2, [r7, #4]
10044eee:	68bb      	ldr	r3, [r7, #8]
10044ef0:	0011      	movs	r1, r2
10044ef2:	0018      	movs	r0, r3
10044ef4:	f000 f856 	bl	10044fa4 <FLASH_Program_Word>
10044ef8:	e005      	b.n	10044f06 <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
10044efa:	687a      	ldr	r2, [r7, #4]
10044efc:	68bb      	ldr	r3, [r7, #8]
10044efe:	0011      	movs	r1, r2
10044f00:	0018      	movs	r0, r3
10044f02:	f000 f871 	bl	10044fe8 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10044f06:	2317      	movs	r3, #23
10044f08:	18fc      	adds	r4, r7, r3
10044f0a:	23fa      	movs	r3, #250	@ 0xfa
10044f0c:	009b      	lsls	r3, r3, #2
10044f0e:	0018      	movs	r0, r3
10044f10:	f000 f80e 	bl	10044f30 <FLASH_WaitForLastOperation>
10044f14:	0003      	movs	r3, r0
10044f16:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10044f18:	4b04      	ldr	r3, [pc, #16]	@ (10044f2c <HAL_FLASH_Program+0x84>)
10044f1a:	2200      	movs	r2, #0
10044f1c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
10044f1e:	2317      	movs	r3, #23
10044f20:	18fb      	adds	r3, r7, r3
10044f22:	781b      	ldrb	r3, [r3, #0]
}
10044f24:	0018      	movs	r0, r3
10044f26:	46bd      	mov	sp, r7
10044f28:	b006      	add	sp, #24
10044f2a:	bdb0      	pop	{r4, r5, r7, pc}
10044f2c:	200004c0 	.word	0x200004c0

10044f30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
10044f30:	b580      	push	{r7, lr}
10044f32:	b084      	sub	sp, #16
10044f34:	af00      	add	r7, sp, #0
10044f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10044f38:	f7ff fec4 	bl	10044cc4 <HAL_GetTick>
10044f3c:	0003      	movs	r3, r0
10044f3e:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10044f40:	e00c      	b.n	10044f5c <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
10044f42:	687b      	ldr	r3, [r7, #4]
10044f44:	3301      	adds	r3, #1
10044f46:	d009      	beq.n	10044f5c <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
10044f48:	f7ff febc 	bl	10044cc4 <HAL_GetTick>
10044f4c:	0002      	movs	r2, r0
10044f4e:	68fb      	ldr	r3, [r7, #12]
10044f50:	1ad3      	subs	r3, r2, r3
10044f52:	687a      	ldr	r2, [r7, #4]
10044f54:	429a      	cmp	r2, r3
10044f56:	d801      	bhi.n	10044f5c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
10044f58:	2303      	movs	r3, #3
10044f5a:	e01b      	b.n	10044f94 <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10044f5c:	4b0f      	ldr	r3, [pc, #60]	@ (10044f9c <FLASH_WaitForLastOperation+0x6c>)
10044f5e:	691b      	ldr	r3, [r3, #16]
10044f60:	2201      	movs	r2, #1
10044f62:	4013      	ands	r3, r2
10044f64:	2b01      	cmp	r3, #1
10044f66:	d1ec      	bne.n	10044f42 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
10044f68:	4b0c      	ldr	r3, [pc, #48]	@ (10044f9c <FLASH_WaitForLastOperation+0x6c>)
10044f6a:	691b      	ldr	r3, [r3, #16]
10044f6c:	220c      	movs	r2, #12
10044f6e:	4013      	ands	r3, r2
10044f70:	2b0c      	cmp	r3, #12
10044f72:	d10e      	bne.n	10044f92 <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
10044f74:	4b09      	ldr	r3, [pc, #36]	@ (10044f9c <FLASH_WaitForLastOperation+0x6c>)
10044f76:	689a      	ldr	r2, [r3, #8]
10044f78:	4b09      	ldr	r3, [pc, #36]	@ (10044fa0 <FLASH_WaitForLastOperation+0x70>)
10044f7a:	685b      	ldr	r3, [r3, #4]
10044f7c:	431a      	orrs	r2, r3
10044f7e:	4b08      	ldr	r3, [pc, #32]	@ (10044fa0 <FLASH_WaitForLastOperation+0x70>)
10044f80:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
10044f82:	4b06      	ldr	r3, [pc, #24]	@ (10044f9c <FLASH_WaitForLastOperation+0x6c>)
10044f84:	691a      	ldr	r2, [r3, #16]
10044f86:	4b05      	ldr	r3, [pc, #20]	@ (10044f9c <FLASH_WaitForLastOperation+0x6c>)
10044f88:	210c      	movs	r1, #12
10044f8a:	430a      	orrs	r2, r1
10044f8c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
10044f8e:	2301      	movs	r3, #1
10044f90:	e000      	b.n	10044f94 <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
10044f92:	2300      	movs	r3, #0
}
10044f94:	0018      	movs	r0, r3
10044f96:	46bd      	mov	sp, r7
10044f98:	b004      	add	sp, #16
10044f9a:	bd80      	pop	{r7, pc}
10044f9c:	40001000 	.word	0x40001000
10044fa0:	200004c0 	.word	0x200004c0

10044fa4 <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
10044fa4:	b580      	push	{r7, lr}
10044fa6:	b082      	sub	sp, #8
10044fa8:	af00      	add	r7, sp, #0
10044faa:	6078      	str	r0, [r7, #4]
10044fac:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10044fae:	4b0c      	ldr	r3, [pc, #48]	@ (10044fe0 <FLASH_Program_Word+0x3c>)
10044fb0:	691a      	ldr	r2, [r3, #16]
10044fb2:	4b0b      	ldr	r3, [pc, #44]	@ (10044fe0 <FLASH_Program_Word+0x3c>)
10044fb4:	210f      	movs	r1, #15
10044fb6:	430a      	orrs	r2, r1
10044fb8:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10044fba:	687b      	ldr	r3, [r7, #4]
10044fbc:	4a09      	ldr	r2, [pc, #36]	@ (10044fe4 <FLASH_Program_Word+0x40>)
10044fbe:	4694      	mov	ip, r2
10044fc0:	4463      	add	r3, ip
10044fc2:	089a      	lsrs	r2, r3, #2
10044fc4:	4b06      	ldr	r3, [pc, #24]	@ (10044fe0 <FLASH_Program_Word+0x3c>)
10044fc6:	03d2      	lsls	r2, r2, #15
10044fc8:	0bd2      	lsrs	r2, r2, #15
10044fca:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
10044fcc:	4b04      	ldr	r3, [pc, #16]	@ (10044fe0 <FLASH_Program_Word+0x3c>)
10044fce:	683a      	ldr	r2, [r7, #0]
10044fd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
10044fd2:	4b03      	ldr	r3, [pc, #12]	@ (10044fe0 <FLASH_Program_Word+0x3c>)
10044fd4:	2233      	movs	r2, #51	@ 0x33
10044fd6:	601a      	str	r2, [r3, #0]
}
10044fd8:	46c0      	nop			@ (mov r8, r8)
10044fda:	46bd      	mov	sp, r7
10044fdc:	b002      	add	sp, #8
10044fde:	bd80      	pop	{r7, pc}
10044fe0:	40001000 	.word	0x40001000
10044fe4:	effc0000 	.word	0xeffc0000

10044fe8 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
10044fe8:	b580      	push	{r7, lr}
10044fea:	b084      	sub	sp, #16
10044fec:	af00      	add	r7, sp, #0
10044fee:	6078      	str	r0, [r7, #4]
10044ff0:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
10044ff2:	683b      	ldr	r3, [r7, #0]
10044ff4:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10044ff6:	4b17      	ldr	r3, [pc, #92]	@ (10045054 <FLASH_Program_Burst+0x6c>)
10044ff8:	691a      	ldr	r2, [r3, #16]
10044ffa:	4b16      	ldr	r3, [pc, #88]	@ (10045054 <FLASH_Program_Burst+0x6c>)
10044ffc:	210f      	movs	r1, #15
10044ffe:	430a      	orrs	r2, r1
10045000:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10045002:	687b      	ldr	r3, [r7, #4]
10045004:	4a14      	ldr	r2, [pc, #80]	@ (10045058 <FLASH_Program_Burst+0x70>)
10045006:	4694      	mov	ip, r2
10045008:	4463      	add	r3, ip
1004500a:	089a      	lsrs	r2, r3, #2
1004500c:	4b11      	ldr	r3, [pc, #68]	@ (10045054 <FLASH_Program_Burst+0x6c>)
1004500e:	03d2      	lsls	r2, r2, #15
10045010:	0bd2      	lsrs	r2, r2, #15
10045012:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
10045014:	4a0f      	ldr	r2, [pc, #60]	@ (10045054 <FLASH_Program_Burst+0x6c>)
10045016:	68fb      	ldr	r3, [r7, #12]
10045018:	681b      	ldr	r3, [r3, #0]
1004501a:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
1004501c:	68fb      	ldr	r3, [r7, #12]
1004501e:	3304      	adds	r3, #4
10045020:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
10045022:	4a0c      	ldr	r2, [pc, #48]	@ (10045054 <FLASH_Program_Burst+0x6c>)
10045024:	68fb      	ldr	r3, [r7, #12]
10045026:	681b      	ldr	r3, [r3, #0]
10045028:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
1004502a:	68fb      	ldr	r3, [r7, #12]
1004502c:	3304      	adds	r3, #4
1004502e:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
10045030:	4a08      	ldr	r2, [pc, #32]	@ (10045054 <FLASH_Program_Burst+0x6c>)
10045032:	68fb      	ldr	r3, [r7, #12]
10045034:	681b      	ldr	r3, [r3, #0]
10045036:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
10045038:	68fb      	ldr	r3, [r7, #12]
1004503a:	3304      	adds	r3, #4
1004503c:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
1004503e:	4a05      	ldr	r2, [pc, #20]	@ (10045054 <FLASH_Program_Burst+0x6c>)
10045040:	68fb      	ldr	r3, [r7, #12]
10045042:	681b      	ldr	r3, [r3, #0]
10045044:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
10045046:	4b03      	ldr	r3, [pc, #12]	@ (10045054 <FLASH_Program_Burst+0x6c>)
10045048:	22cc      	movs	r2, #204	@ 0xcc
1004504a:	601a      	str	r2, [r3, #0]
}
1004504c:	46c0      	nop			@ (mov r8, r8)
1004504e:	46bd      	mov	sp, r7
10045050:	b004      	add	sp, #16
10045052:	bd80      	pop	{r7, pc}
10045054:	40001000 	.word	0x40001000
10045058:	effc0000 	.word	0xeffc0000

1004505c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
1004505c:	b5b0      	push	{r4, r5, r7, lr}
1004505e:	b084      	sub	sp, #16
10045060:	af00      	add	r7, sp, #0
10045062:	6078      	str	r0, [r7, #4]
10045064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10045066:	4b27      	ldr	r3, [pc, #156]	@ (10045104 <HAL_FLASHEx_Erase+0xa8>)
10045068:	781b      	ldrb	r3, [r3, #0]
1004506a:	2b01      	cmp	r3, #1
1004506c:	d101      	bne.n	10045072 <HAL_FLASHEx_Erase+0x16>
1004506e:	2302      	movs	r3, #2
10045070:	e043      	b.n	100450fa <HAL_FLASHEx_Erase+0x9e>
10045072:	4b24      	ldr	r3, [pc, #144]	@ (10045104 <HAL_FLASHEx_Erase+0xa8>)
10045074:	2201      	movs	r2, #1
10045076:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10045078:	4b22      	ldr	r3, [pc, #136]	@ (10045104 <HAL_FLASHEx_Erase+0xa8>)
1004507a:	2200      	movs	r2, #0
1004507c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
1004507e:	687b      	ldr	r3, [r7, #4]
10045080:	681b      	ldr	r3, [r3, #0]
10045082:	2bff      	cmp	r3, #255	@ 0xff
10045084:	d10b      	bne.n	1004509e <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
10045086:	f000 f83f 	bl	10045108 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004508a:	230f      	movs	r3, #15
1004508c:	18fc      	adds	r4, r7, r3
1004508e:	23fa      	movs	r3, #250	@ 0xfa
10045090:	009b      	lsls	r3, r3, #2
10045092:	0018      	movs	r0, r3
10045094:	f7ff ff4c 	bl	10044f30 <FLASH_WaitForLastOperation>
10045098:	0003      	movs	r3, r0
1004509a:	7023      	strb	r3, [r4, #0]
1004509c:	e027      	b.n	100450ee <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
1004509e:	683b      	ldr	r3, [r7, #0]
100450a0:	2201      	movs	r2, #1
100450a2:	4252      	negs	r2, r2
100450a4:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
100450a6:	687b      	ldr	r3, [r7, #4]
100450a8:	685b      	ldr	r3, [r3, #4]
100450aa:	60bb      	str	r3, [r7, #8]
100450ac:	e017      	b.n	100450de <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
100450ae:	68bb      	ldr	r3, [r7, #8]
100450b0:	0018      	movs	r0, r3
100450b2:	f000 f839 	bl	10045128 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
100450b6:	250f      	movs	r5, #15
100450b8:	197c      	adds	r4, r7, r5
100450ba:	23fa      	movs	r3, #250	@ 0xfa
100450bc:	009b      	lsls	r3, r3, #2
100450be:	0018      	movs	r0, r3
100450c0:	f7ff ff36 	bl	10044f30 <FLASH_WaitForLastOperation>
100450c4:	0003      	movs	r3, r0
100450c6:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
100450c8:	197b      	adds	r3, r7, r5
100450ca:	781b      	ldrb	r3, [r3, #0]
100450cc:	2b00      	cmp	r3, #0
100450ce:	d003      	beq.n	100450d8 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
100450d0:	683b      	ldr	r3, [r7, #0]
100450d2:	68ba      	ldr	r2, [r7, #8]
100450d4:	601a      	str	r2, [r3, #0]
        break;
100450d6:	e00a      	b.n	100450ee <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
100450d8:	68bb      	ldr	r3, [r7, #8]
100450da:	3301      	adds	r3, #1
100450dc:	60bb      	str	r3, [r7, #8]
100450de:	687b      	ldr	r3, [r7, #4]
100450e0:	685a      	ldr	r2, [r3, #4]
100450e2:	687b      	ldr	r3, [r7, #4]
100450e4:	689b      	ldr	r3, [r3, #8]
100450e6:	18d3      	adds	r3, r2, r3
100450e8:	68ba      	ldr	r2, [r7, #8]
100450ea:	429a      	cmp	r2, r3
100450ec:	d3df      	bcc.n	100450ae <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
100450ee:	4b05      	ldr	r3, [pc, #20]	@ (10045104 <HAL_FLASHEx_Erase+0xa8>)
100450f0:	2200      	movs	r2, #0
100450f2:	701a      	strb	r2, [r3, #0]

  return status;
100450f4:	230f      	movs	r3, #15
100450f6:	18fb      	adds	r3, r7, r3
100450f8:	781b      	ldrb	r3, [r3, #0]
}
100450fa:	0018      	movs	r0, r3
100450fc:	46bd      	mov	sp, r7
100450fe:	b004      	add	sp, #16
10045100:	bdb0      	pop	{r4, r5, r7, pc}
10045102:	46c0      	nop			@ (mov r8, r8)
10045104:	200004c0 	.word	0x200004c0

10045108 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
10045108:	b580      	push	{r7, lr}
1004510a:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004510c:	4b05      	ldr	r3, [pc, #20]	@ (10045124 <FLASH_MassErase+0x1c>)
1004510e:	691a      	ldr	r2, [r3, #16]
10045110:	4b04      	ldr	r3, [pc, #16]	@ (10045124 <FLASH_MassErase+0x1c>)
10045112:	210f      	movs	r1, #15
10045114:	430a      	orrs	r2, r1
10045116:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
10045118:	4b02      	ldr	r3, [pc, #8]	@ (10045124 <FLASH_MassErase+0x1c>)
1004511a:	2222      	movs	r2, #34	@ 0x22
1004511c:	601a      	str	r2, [r3, #0]
}
1004511e:	46c0      	nop			@ (mov r8, r8)
10045120:	46bd      	mov	sp, r7
10045122:	bd80      	pop	{r7, pc}
10045124:	40001000 	.word	0x40001000

10045128 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
10045128:	b580      	push	{r7, lr}
1004512a:	b082      	sub	sp, #8
1004512c:	af00      	add	r7, sp, #0
1004512e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10045130:	4b09      	ldr	r3, [pc, #36]	@ (10045158 <FLASH_PageErase+0x30>)
10045132:	691a      	ldr	r2, [r3, #16]
10045134:	4b08      	ldr	r3, [pc, #32]	@ (10045158 <FLASH_PageErase+0x30>)
10045136:	210f      	movs	r1, #15
10045138:	430a      	orrs	r2, r1
1004513a:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
1004513c:	687b      	ldr	r3, [r7, #4]
1004513e:	02db      	lsls	r3, r3, #11
10045140:	089a      	lsrs	r2, r3, #2
10045142:	4b05      	ldr	r3, [pc, #20]	@ (10045158 <FLASH_PageErase+0x30>)
10045144:	03d2      	lsls	r2, r2, #15
10045146:	0bd2      	lsrs	r2, r2, #15
10045148:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
1004514a:	4b03      	ldr	r3, [pc, #12]	@ (10045158 <FLASH_PageErase+0x30>)
1004514c:	2211      	movs	r2, #17
1004514e:	601a      	str	r2, [r3, #0]
}
10045150:	46c0      	nop			@ (mov r8, r8)
10045152:	46bd      	mov	sp, r7
10045154:	b002      	add	sp, #8
10045156:	bd80      	pop	{r7, pc}
10045158:	40001000 	.word	0x40001000

1004515c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
1004515c:	b580      	push	{r7, lr}
1004515e:	b086      	sub	sp, #24
10045160:	af00      	add	r7, sp, #0
10045162:	6078      	str	r0, [r7, #4]
10045164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10045166:	2300      	movs	r3, #0
10045168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
1004516a:	e194      	b.n	10045496 <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
1004516c:	683b      	ldr	r3, [r7, #0]
1004516e:	681b      	ldr	r3, [r3, #0]
10045170:	2101      	movs	r1, #1
10045172:	697a      	ldr	r2, [r7, #20]
10045174:	4091      	lsls	r1, r2
10045176:	000a      	movs	r2, r1
10045178:	4013      	ands	r3, r2
1004517a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
1004517c:	68fb      	ldr	r3, [r7, #12]
1004517e:	2b00      	cmp	r3, #0
10045180:	d100      	bne.n	10045184 <HAL_GPIO_Init+0x28>
10045182:	e185      	b.n	10045490 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10045184:	683b      	ldr	r3, [r7, #0]
10045186:	685b      	ldr	r3, [r3, #4]
10045188:	2203      	movs	r2, #3
1004518a:	4013      	ands	r3, r2
1004518c:	2b01      	cmp	r3, #1
1004518e:	d005      	beq.n	1004519c <HAL_GPIO_Init+0x40>
10045190:	683b      	ldr	r3, [r7, #0]
10045192:	685b      	ldr	r3, [r3, #4]
10045194:	2203      	movs	r2, #3
10045196:	4013      	ands	r3, r2
10045198:	2b02      	cmp	r3, #2
1004519a:	d130      	bne.n	100451fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
1004519c:	687b      	ldr	r3, [r7, #4]
1004519e:	689b      	ldr	r3, [r3, #8]
100451a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
100451a2:	697b      	ldr	r3, [r7, #20]
100451a4:	005b      	lsls	r3, r3, #1
100451a6:	2203      	movs	r2, #3
100451a8:	409a      	lsls	r2, r3
100451aa:	0013      	movs	r3, r2
100451ac:	43da      	mvns	r2, r3
100451ae:	693b      	ldr	r3, [r7, #16]
100451b0:	4013      	ands	r3, r2
100451b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
100451b4:	683b      	ldr	r3, [r7, #0]
100451b6:	68da      	ldr	r2, [r3, #12]
100451b8:	697b      	ldr	r3, [r7, #20]
100451ba:	005b      	lsls	r3, r3, #1
100451bc:	409a      	lsls	r2, r3
100451be:	0013      	movs	r3, r2
100451c0:	693a      	ldr	r2, [r7, #16]
100451c2:	4313      	orrs	r3, r2
100451c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
100451c6:	687b      	ldr	r3, [r7, #4]
100451c8:	693a      	ldr	r2, [r7, #16]
100451ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
100451cc:	687b      	ldr	r3, [r7, #4]
100451ce:	685b      	ldr	r3, [r3, #4]
100451d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
100451d2:	2201      	movs	r2, #1
100451d4:	697b      	ldr	r3, [r7, #20]
100451d6:	409a      	lsls	r2, r3
100451d8:	0013      	movs	r3, r2
100451da:	43da      	mvns	r2, r3
100451dc:	693b      	ldr	r3, [r7, #16]
100451de:	4013      	ands	r3, r2
100451e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
100451e2:	683b      	ldr	r3, [r7, #0]
100451e4:	685b      	ldr	r3, [r3, #4]
100451e6:	091b      	lsrs	r3, r3, #4
100451e8:	2201      	movs	r2, #1
100451ea:	401a      	ands	r2, r3
100451ec:	697b      	ldr	r3, [r7, #20]
100451ee:	409a      	lsls	r2, r3
100451f0:	0013      	movs	r3, r2
100451f2:	693a      	ldr	r2, [r7, #16]
100451f4:	4313      	orrs	r3, r2
100451f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
100451f8:	687b      	ldr	r3, [r7, #4]
100451fa:	693a      	ldr	r2, [r7, #16]
100451fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
100451fe:	683b      	ldr	r3, [r7, #0]
10045200:	685b      	ldr	r3, [r3, #4]
10045202:	2203      	movs	r2, #3
10045204:	4013      	ands	r3, r2
10045206:	2b03      	cmp	r3, #3
10045208:	d017      	beq.n	1004523a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
1004520a:	687b      	ldr	r3, [r7, #4]
1004520c:	68db      	ldr	r3, [r3, #12]
1004520e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10045210:	697b      	ldr	r3, [r7, #20]
10045212:	005b      	lsls	r3, r3, #1
10045214:	2203      	movs	r2, #3
10045216:	409a      	lsls	r2, r3
10045218:	0013      	movs	r3, r2
1004521a:	43da      	mvns	r2, r3
1004521c:	693b      	ldr	r3, [r7, #16]
1004521e:	4013      	ands	r3, r2
10045220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10045222:	683b      	ldr	r3, [r7, #0]
10045224:	689a      	ldr	r2, [r3, #8]
10045226:	697b      	ldr	r3, [r7, #20]
10045228:	005b      	lsls	r3, r3, #1
1004522a:	409a      	lsls	r2, r3
1004522c:	0013      	movs	r3, r2
1004522e:	693a      	ldr	r2, [r7, #16]
10045230:	4313      	orrs	r3, r2
10045232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10045234:	687b      	ldr	r3, [r7, #4]
10045236:	693a      	ldr	r2, [r7, #16]
10045238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
1004523a:	683b      	ldr	r3, [r7, #0]
1004523c:	685b      	ldr	r3, [r3, #4]
1004523e:	2203      	movs	r2, #3
10045240:	4013      	ands	r3, r2
10045242:	2b02      	cmp	r3, #2
10045244:	d123      	bne.n	1004528e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
10045246:	697b      	ldr	r3, [r7, #20]
10045248:	08da      	lsrs	r2, r3, #3
1004524a:	687b      	ldr	r3, [r7, #4]
1004524c:	3208      	adds	r2, #8
1004524e:	0092      	lsls	r2, r2, #2
10045250:	58d3      	ldr	r3, [r2, r3]
10045252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
10045254:	697b      	ldr	r3, [r7, #20]
10045256:	2207      	movs	r2, #7
10045258:	4013      	ands	r3, r2
1004525a:	009b      	lsls	r3, r3, #2
1004525c:	220f      	movs	r2, #15
1004525e:	409a      	lsls	r2, r3
10045260:	0013      	movs	r3, r2
10045262:	43da      	mvns	r2, r3
10045264:	693b      	ldr	r3, [r7, #16]
10045266:	4013      	ands	r3, r2
10045268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
1004526a:	683b      	ldr	r3, [r7, #0]
1004526c:	691a      	ldr	r2, [r3, #16]
1004526e:	697b      	ldr	r3, [r7, #20]
10045270:	2107      	movs	r1, #7
10045272:	400b      	ands	r3, r1
10045274:	009b      	lsls	r3, r3, #2
10045276:	409a      	lsls	r2, r3
10045278:	0013      	movs	r3, r2
1004527a:	693a      	ldr	r2, [r7, #16]
1004527c:	4313      	orrs	r3, r2
1004527e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
10045280:	697b      	ldr	r3, [r7, #20]
10045282:	08da      	lsrs	r2, r3, #3
10045284:	687b      	ldr	r3, [r7, #4]
10045286:	3208      	adds	r2, #8
10045288:	0092      	lsls	r2, r2, #2
1004528a:	6939      	ldr	r1, [r7, #16]
1004528c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1004528e:	687b      	ldr	r3, [r7, #4]
10045290:	681b      	ldr	r3, [r3, #0]
10045292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
10045294:	697b      	ldr	r3, [r7, #20]
10045296:	005b      	lsls	r3, r3, #1
10045298:	2203      	movs	r2, #3
1004529a:	409a      	lsls	r2, r3
1004529c:	0013      	movs	r3, r2
1004529e:	43da      	mvns	r2, r3
100452a0:	693b      	ldr	r3, [r7, #16]
100452a2:	4013      	ands	r3, r2
100452a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
100452a6:	683b      	ldr	r3, [r7, #0]
100452a8:	685b      	ldr	r3, [r3, #4]
100452aa:	2203      	movs	r2, #3
100452ac:	401a      	ands	r2, r3
100452ae:	697b      	ldr	r3, [r7, #20]
100452b0:	005b      	lsls	r3, r3, #1
100452b2:	409a      	lsls	r2, r3
100452b4:	0013      	movs	r3, r2
100452b6:	693a      	ldr	r2, [r7, #16]
100452b8:	4313      	orrs	r3, r2
100452ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
100452bc:	687b      	ldr	r3, [r7, #4]
100452be:	693a      	ldr	r2, [r7, #16]
100452c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
100452c2:	683b      	ldr	r3, [r7, #0]
100452c4:	685a      	ldr	r2, [r3, #4]
100452c6:	23c0      	movs	r3, #192	@ 0xc0
100452c8:	029b      	lsls	r3, r3, #10
100452ca:	4013      	ands	r3, r2
100452cc:	d100      	bne.n	100452d0 <HAL_GPIO_Init+0x174>
100452ce:	e0df      	b.n	10045490 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
100452d0:	683b      	ldr	r3, [r7, #0]
100452d2:	685a      	ldr	r2, [r3, #4]
100452d4:	2380      	movs	r3, #128	@ 0x80
100452d6:	02db      	lsls	r3, r3, #11
100452d8:	4013      	ands	r3, r2
100452da:	d031      	beq.n	10045340 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
100452dc:	2380      	movs	r3, #128	@ 0x80
100452de:	05db      	lsls	r3, r3, #23
100452e0:	68db      	ldr	r3, [r3, #12]
100452e2:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
100452e4:	687a      	ldr	r2, [r7, #4]
100452e6:	2390      	movs	r3, #144	@ 0x90
100452e8:	05db      	lsls	r3, r3, #23
100452ea:	429a      	cmp	r2, r3
100452ec:	d111      	bne.n	10045312 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
100452ee:	2201      	movs	r2, #1
100452f0:	697b      	ldr	r3, [r7, #20]
100452f2:	409a      	lsls	r2, r3
100452f4:	0013      	movs	r3, r2
100452f6:	43db      	mvns	r3, r3
100452f8:	001a      	movs	r2, r3
100452fa:	693b      	ldr	r3, [r7, #16]
100452fc:	4013      	ands	r3, r2
100452fe:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10045300:	2201      	movs	r2, #1
10045302:	697b      	ldr	r3, [r7, #20]
10045304:	409a      	lsls	r2, r3
10045306:	0013      	movs	r3, r2
10045308:	001a      	movs	r2, r3
1004530a:	693b      	ldr	r3, [r7, #16]
1004530c:	4313      	orrs	r3, r2
1004530e:	613b      	str	r3, [r7, #16]
10045310:	e012      	b.n	10045338 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10045312:	2201      	movs	r2, #1
10045314:	697b      	ldr	r3, [r7, #20]
10045316:	409a      	lsls	r2, r3
10045318:	0013      	movs	r3, r2
1004531a:	041b      	lsls	r3, r3, #16
1004531c:	43db      	mvns	r3, r3
1004531e:	001a      	movs	r2, r3
10045320:	693b      	ldr	r3, [r7, #16]
10045322:	4013      	ands	r3, r2
10045324:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10045326:	2201      	movs	r2, #1
10045328:	697b      	ldr	r3, [r7, #20]
1004532a:	409a      	lsls	r2, r3
1004532c:	0013      	movs	r3, r2
1004532e:	041b      	lsls	r3, r3, #16
10045330:	001a      	movs	r2, r3
10045332:	693b      	ldr	r3, [r7, #16]
10045334:	4313      	orrs	r3, r2
10045336:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10045338:	2380      	movs	r3, #128	@ 0x80
1004533a:	05db      	lsls	r3, r3, #23
1004533c:	693a      	ldr	r2, [r7, #16]
1004533e:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10045340:	683b      	ldr	r3, [r7, #0]
10045342:	685a      	ldr	r2, [r3, #4]
10045344:	2380      	movs	r3, #128	@ 0x80
10045346:	035b      	lsls	r3, r3, #13
10045348:	4013      	ands	r3, r2
1004534a:	d031      	beq.n	100453b0 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
1004534c:	2380      	movs	r3, #128	@ 0x80
1004534e:	05db      	lsls	r3, r3, #23
10045350:	691b      	ldr	r3, [r3, #16]
10045352:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10045354:	687a      	ldr	r2, [r7, #4]
10045356:	2390      	movs	r3, #144	@ 0x90
10045358:	05db      	lsls	r3, r3, #23
1004535a:	429a      	cmp	r2, r3
1004535c:	d111      	bne.n	10045382 <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
1004535e:	2201      	movs	r2, #1
10045360:	697b      	ldr	r3, [r7, #20]
10045362:	409a      	lsls	r2, r3
10045364:	0013      	movs	r3, r2
10045366:	43db      	mvns	r3, r3
10045368:	001a      	movs	r2, r3
1004536a:	693b      	ldr	r3, [r7, #16]
1004536c:	4013      	ands	r3, r2
1004536e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10045370:	2201      	movs	r2, #1
10045372:	697b      	ldr	r3, [r7, #20]
10045374:	409a      	lsls	r2, r3
10045376:	0013      	movs	r3, r2
10045378:	001a      	movs	r2, r3
1004537a:	693b      	ldr	r3, [r7, #16]
1004537c:	4313      	orrs	r3, r2
1004537e:	613b      	str	r3, [r7, #16]
10045380:	e012      	b.n	100453a8 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10045382:	2201      	movs	r2, #1
10045384:	697b      	ldr	r3, [r7, #20]
10045386:	409a      	lsls	r2, r3
10045388:	0013      	movs	r3, r2
1004538a:	041b      	lsls	r3, r3, #16
1004538c:	43db      	mvns	r3, r3
1004538e:	001a      	movs	r2, r3
10045390:	693b      	ldr	r3, [r7, #16]
10045392:	4013      	ands	r3, r2
10045394:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10045396:	2201      	movs	r2, #1
10045398:	697b      	ldr	r3, [r7, #20]
1004539a:	409a      	lsls	r2, r3
1004539c:	0013      	movs	r3, r2
1004539e:	041b      	lsls	r3, r3, #16
100453a0:	001a      	movs	r2, r3
100453a2:	693b      	ldr	r3, [r7, #16]
100453a4:	4313      	orrs	r3, r2
100453a6:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
100453a8:	2380      	movs	r3, #128	@ 0x80
100453aa:	05db      	lsls	r3, r3, #23
100453ac:	693a      	ldr	r2, [r7, #16]
100453ae:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
100453b0:	683b      	ldr	r3, [r7, #0]
100453b2:	685a      	ldr	r2, [r3, #4]
100453b4:	2380      	movs	r3, #128	@ 0x80
100453b6:	03db      	lsls	r3, r3, #15
100453b8:	4013      	ands	r3, r2
100453ba:	d031      	beq.n	10045420 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
100453bc:	2380      	movs	r3, #128	@ 0x80
100453be:	05db      	lsls	r3, r3, #23
100453c0:	695b      	ldr	r3, [r3, #20]
100453c2:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100453c4:	687a      	ldr	r2, [r7, #4]
100453c6:	2390      	movs	r3, #144	@ 0x90
100453c8:	05db      	lsls	r3, r3, #23
100453ca:	429a      	cmp	r2, r3
100453cc:	d111      	bne.n	100453f2 <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
100453ce:	2201      	movs	r2, #1
100453d0:	697b      	ldr	r3, [r7, #20]
100453d2:	409a      	lsls	r2, r3
100453d4:	0013      	movs	r3, r2
100453d6:	43db      	mvns	r3, r3
100453d8:	001a      	movs	r2, r3
100453da:	693b      	ldr	r3, [r7, #16]
100453dc:	4013      	ands	r3, r2
100453de:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100453e0:	2201      	movs	r2, #1
100453e2:	697b      	ldr	r3, [r7, #20]
100453e4:	409a      	lsls	r2, r3
100453e6:	0013      	movs	r3, r2
100453e8:	001a      	movs	r2, r3
100453ea:	693b      	ldr	r3, [r7, #16]
100453ec:	4313      	orrs	r3, r2
100453ee:	613b      	str	r3, [r7, #16]
100453f0:	e012      	b.n	10045418 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100453f2:	2201      	movs	r2, #1
100453f4:	697b      	ldr	r3, [r7, #20]
100453f6:	409a      	lsls	r2, r3
100453f8:	0013      	movs	r3, r2
100453fa:	041b      	lsls	r3, r3, #16
100453fc:	43db      	mvns	r3, r3
100453fe:	001a      	movs	r2, r3
10045400:	693b      	ldr	r3, [r7, #16]
10045402:	4013      	ands	r3, r2
10045404:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10045406:	2201      	movs	r2, #1
10045408:	697b      	ldr	r3, [r7, #20]
1004540a:	409a      	lsls	r2, r3
1004540c:	0013      	movs	r3, r2
1004540e:	041b      	lsls	r3, r3, #16
10045410:	001a      	movs	r2, r3
10045412:	693b      	ldr	r3, [r7, #16]
10045414:	4313      	orrs	r3, r2
10045416:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10045418:	2380      	movs	r3, #128	@ 0x80
1004541a:	05db      	lsls	r3, r3, #23
1004541c:	693a      	ldr	r2, [r7, #16]
1004541e:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10045420:	683b      	ldr	r3, [r7, #0]
10045422:	685a      	ldr	r2, [r3, #4]
10045424:	2380      	movs	r3, #128	@ 0x80
10045426:	025b      	lsls	r3, r3, #9
10045428:	4013      	ands	r3, r2
1004542a:	d031      	beq.n	10045490 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
1004542c:	2380      	movs	r3, #128	@ 0x80
1004542e:	05db      	lsls	r3, r3, #23
10045430:	699b      	ldr	r3, [r3, #24]
10045432:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10045434:	687a      	ldr	r2, [r7, #4]
10045436:	2390      	movs	r3, #144	@ 0x90
10045438:	05db      	lsls	r3, r3, #23
1004543a:	429a      	cmp	r2, r3
1004543c:	d111      	bne.n	10045462 <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
1004543e:	2201      	movs	r2, #1
10045440:	697b      	ldr	r3, [r7, #20]
10045442:	409a      	lsls	r2, r3
10045444:	0013      	movs	r3, r2
10045446:	43db      	mvns	r3, r3
10045448:	001a      	movs	r2, r3
1004544a:	693b      	ldr	r3, [r7, #16]
1004544c:	4013      	ands	r3, r2
1004544e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10045450:	2201      	movs	r2, #1
10045452:	697b      	ldr	r3, [r7, #20]
10045454:	409a      	lsls	r2, r3
10045456:	0013      	movs	r3, r2
10045458:	001a      	movs	r2, r3
1004545a:	693b      	ldr	r3, [r7, #16]
1004545c:	4313      	orrs	r3, r2
1004545e:	613b      	str	r3, [r7, #16]
10045460:	e012      	b.n	10045488 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10045462:	2201      	movs	r2, #1
10045464:	697b      	ldr	r3, [r7, #20]
10045466:	409a      	lsls	r2, r3
10045468:	0013      	movs	r3, r2
1004546a:	041b      	lsls	r3, r3, #16
1004546c:	43db      	mvns	r3, r3
1004546e:	001a      	movs	r2, r3
10045470:	693b      	ldr	r3, [r7, #16]
10045472:	4013      	ands	r3, r2
10045474:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10045476:	2201      	movs	r2, #1
10045478:	697b      	ldr	r3, [r7, #20]
1004547a:	409a      	lsls	r2, r3
1004547c:	0013      	movs	r3, r2
1004547e:	041b      	lsls	r3, r3, #16
10045480:	001a      	movs	r2, r3
10045482:	693b      	ldr	r3, [r7, #16]
10045484:	4313      	orrs	r3, r2
10045486:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
10045488:	2380      	movs	r3, #128	@ 0x80
1004548a:	05db      	lsls	r3, r3, #23
1004548c:	693a      	ldr	r2, [r7, #16]
1004548e:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
10045490:	697b      	ldr	r3, [r7, #20]
10045492:	3301      	adds	r3, #1
10045494:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10045496:	683b      	ldr	r3, [r7, #0]
10045498:	681a      	ldr	r2, [r3, #0]
1004549a:	697b      	ldr	r3, [r7, #20]
1004549c:	40da      	lsrs	r2, r3
1004549e:	1e13      	subs	r3, r2, #0
100454a0:	d000      	beq.n	100454a4 <HAL_GPIO_Init+0x348>
100454a2:	e663      	b.n	1004516c <HAL_GPIO_Init+0x10>
  }
}
100454a4:	46c0      	nop			@ (mov r8, r8)
100454a6:	46c0      	nop			@ (mov r8, r8)
100454a8:	46bd      	mov	sp, r7
100454aa:	b006      	add	sp, #24
100454ac:	bd80      	pop	{r7, pc}

100454ae <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
100454ae:	b580      	push	{r7, lr}
100454b0:	b084      	sub	sp, #16
100454b2:	af00      	add	r7, sp, #0
100454b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
100454b6:	230f      	movs	r3, #15
100454b8:	18fb      	adds	r3, r7, r3
100454ba:	2200      	movs	r2, #0
100454bc:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
100454be:	687b      	ldr	r3, [r7, #4]
100454c0:	2b00      	cmp	r3, #0
100454c2:	d045      	beq.n	10045550 <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
100454c4:	687b      	ldr	r3, [r7, #4]
100454c6:	791b      	ldrb	r3, [r3, #4]
100454c8:	b2db      	uxtb	r3, r3
100454ca:	2b00      	cmp	r3, #0
100454cc:	d103      	bne.n	100454d6 <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
100454ce:	687b      	ldr	r3, [r7, #4]
100454d0:	0018      	movs	r0, r3
100454d2:	f7fb fd23 	bl	10040f1c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
100454d6:	f7ff fbf5 	bl	10044cc4 <HAL_GetTick>
100454da:	0003      	movs	r3, r0
100454dc:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
100454de:	687b      	ldr	r3, [r7, #4]
100454e0:	2202      	movs	r2, #2
100454e2:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
100454e4:	e011      	b.n	1004550a <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
100454e6:	687b      	ldr	r3, [r7, #4]
100454e8:	681b      	ldr	r3, [r3, #0]
100454ea:	2201      	movs	r2, #1
100454ec:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
100454ee:	f7ff fbe9 	bl	10044cc4 <HAL_GetTick>
100454f2:	0002      	movs	r2, r0
100454f4:	68bb      	ldr	r3, [r7, #8]
100454f6:	1ad2      	subs	r2, r2, r3
100454f8:	23fa      	movs	r3, #250	@ 0xfa
100454fa:	009b      	lsls	r3, r3, #2
100454fc:	429a      	cmp	r2, r3
100454fe:	d904      	bls.n	1004550a <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
10045500:	230f      	movs	r3, #15
10045502:	18fb      	adds	r3, r7, r3
10045504:	2203      	movs	r2, #3
10045506:	701a      	strb	r2, [r3, #0]
        break;
10045508:	e006      	b.n	10045518 <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004550a:	687b      	ldr	r3, [r7, #4]
1004550c:	681b      	ldr	r3, [r3, #0]
1004550e:	681b      	ldr	r3, [r3, #0]
10045510:	2201      	movs	r2, #1
10045512:	4013      	ands	r3, r2
10045514:	2b01      	cmp	r3, #1
10045516:	d1e6      	bne.n	100454e6 <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
10045518:	230f      	movs	r3, #15
1004551a:	18fb      	adds	r3, r7, r3
1004551c:	781b      	ldrb	r3, [r3, #0]
1004551e:	2b00      	cmp	r3, #0
10045520:	d10f      	bne.n	10045542 <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
10045522:	687b      	ldr	r3, [r7, #4]
10045524:	681b      	ldr	r3, [r3, #0]
10045526:	689a      	ldr	r2, [r3, #8]
10045528:	687b      	ldr	r3, [r7, #4]
1004552a:	681b      	ldr	r3, [r3, #0]
1004552c:	21d0      	movs	r1, #208	@ 0xd0
1004552e:	0349      	lsls	r1, r1, #13
10045530:	430a      	orrs	r2, r1
10045532:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
10045534:	687b      	ldr	r3, [r7, #4]
10045536:	2200      	movs	r2, #0
10045538:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
1004553a:	687b      	ldr	r3, [r7, #4]
1004553c:	2201      	movs	r2, #1
1004553e:	711a      	strb	r2, [r3, #4]
10045540:	e00a      	b.n	10045558 <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
10045542:	687b      	ldr	r3, [r7, #4]
10045544:	2204      	movs	r2, #4
10045546:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
10045548:	687b      	ldr	r3, [r7, #4]
1004554a:	2203      	movs	r2, #3
1004554c:	711a      	strb	r2, [r3, #4]
1004554e:	e003      	b.n	10045558 <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
10045550:	230f      	movs	r3, #15
10045552:	18fb      	adds	r3, r7, r3
10045554:	2201      	movs	r2, #1
10045556:	701a      	strb	r2, [r3, #0]
  }

  return err;
10045558:	230f      	movs	r3, #15
1004555a:	18fb      	adds	r3, r7, r3
1004555c:	781b      	ldrb	r3, [r3, #0]
}
1004555e:	0018      	movs	r0, r3
10045560:	46bd      	mov	sp, r7
10045562:	b004      	add	sp, #16
10045564:	bd80      	pop	{r7, pc}
	...

10045568 <HAL_PKA_IRQHandler>:
  * @brief  This function handles PKA event interrupt request.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_IRQHandler(PKA_HandleTypeDef *hpka)
{
10045568:	b580      	push	{r7, lr}
1004556a:	b086      	sub	sp, #24
1004556c:	af00      	add	r7, sp, #0
1004556e:	6078      	str	r0, [r7, #4]
#if defined (STM32WB06) || defined(STM32WB07)
  uint32_t itsource = READ_REG(hpka->Instance->IEN);
  uint32_t flag  =    READ_REG(hpka->Instance->ISR);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t mode = PKA_GetMode(hpka);
10045570:	687b      	ldr	r3, [r7, #4]
10045572:	0018      	movs	r0, r3
10045574:	f000 f86a 	bl	1004564c <PKA_GetMode>
10045578:	0003      	movs	r3, r0
1004557a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hpka->Instance->CR);
1004557c:	687b      	ldr	r3, [r7, #4]
1004557e:	681b      	ldr	r3, [r3, #0]
10045580:	681b      	ldr	r3, [r3, #0]
10045582:	613b      	str	r3, [r7, #16]
  uint32_t flag  =   READ_REG(hpka->Instance->SR);
10045584:	687b      	ldr	r3, [r7, #4]
10045586:	681b      	ldr	r3, [r3, #0]
10045588:	685b      	ldr	r3, [r3, #4]
1004558a:	60fb      	str	r3, [r7, #12]
#endif /* STM32WB05 || STM32WB09 */

  /* Address error interrupt occurred */
  if (((itsource & PKA_IT_ADDRERR) == PKA_IT_ADDRERR) && ((flag & PKA_FLAG_ADDRERR) == PKA_FLAG_ADDRERR))
1004558c:	693a      	ldr	r2, [r7, #16]
1004558e:	2380      	movs	r3, #128	@ 0x80
10045590:	035b      	lsls	r3, r3, #13
10045592:	4013      	ands	r3, r2
10045594:	d00f      	beq.n	100455b6 <HAL_PKA_IRQHandler+0x4e>
10045596:	68fa      	ldr	r2, [r7, #12]
10045598:	2380      	movs	r3, #128	@ 0x80
1004559a:	035b      	lsls	r3, r3, #13
1004559c:	4013      	ands	r3, r2
1004559e:	d00a      	beq.n	100455b6 <HAL_PKA_IRQHandler+0x4e>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_ADDRERR;
100455a0:	687b      	ldr	r3, [r7, #4]
100455a2:	689b      	ldr	r3, [r3, #8]
100455a4:	2201      	movs	r2, #1
100455a6:	431a      	orrs	r2, r3
100455a8:	687b      	ldr	r3, [r7, #4]
100455aa:	609a      	str	r2, [r3, #8]

    /* Clear ADDRERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_ADDRERR);
100455ac:	687b      	ldr	r3, [r7, #4]
100455ae:	681b      	ldr	r3, [r3, #0]
100455b0:	2280      	movs	r2, #128	@ 0x80
100455b2:	0352      	lsls	r2, r2, #13
100455b4:	609a      	str	r2, [r3, #8]
  }

  /* RAM access error interrupt occurred */
  if (((itsource & PKA_IT_RAMERR) == PKA_IT_RAMERR) && ((flag & PKA_FLAG_RAMERR) == PKA_FLAG_RAMERR))
100455b6:	693a      	ldr	r2, [r7, #16]
100455b8:	2380      	movs	r3, #128	@ 0x80
100455ba:	031b      	lsls	r3, r3, #12
100455bc:	4013      	ands	r3, r2
100455be:	d00f      	beq.n	100455e0 <HAL_PKA_IRQHandler+0x78>
100455c0:	68fa      	ldr	r2, [r7, #12]
100455c2:	2380      	movs	r3, #128	@ 0x80
100455c4:	031b      	lsls	r3, r3, #12
100455c6:	4013      	ands	r3, r2
100455c8:	d00a      	beq.n	100455e0 <HAL_PKA_IRQHandler+0x78>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_RAMERR;
100455ca:	687b      	ldr	r3, [r7, #4]
100455cc:	689b      	ldr	r3, [r3, #8]
100455ce:	2202      	movs	r2, #2
100455d0:	431a      	orrs	r2, r3
100455d2:	687b      	ldr	r3, [r7, #4]
100455d4:	609a      	str	r2, [r3, #8]

    /* Clear RAMERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_RAMERR);
100455d6:	687b      	ldr	r3, [r7, #4]
100455d8:	681b      	ldr	r3, [r3, #0]
100455da:	2280      	movs	r2, #128	@ 0x80
100455dc:	0312      	lsls	r2, r2, #12
100455de:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB05 */
#if defined (STM32WB09)
  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
100455e0:	697b      	ldr	r3, [r7, #20]
100455e2:	2b24      	cmp	r3, #36	@ 0x24
100455e4:	d10d      	bne.n	10045602 <HAL_PKA_IRQHandler+0x9a>
  {
    /* If error output result is different from 0xD60D, ecdsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != 0xD60DUL)
100455e6:	687b      	ldr	r3, [r7, #4]
100455e8:	681a      	ldr	r2, [r3, #0]
100455ea:	23f8      	movs	r3, #248	@ 0xf8
100455ec:	011b      	lsls	r3, r3, #4
100455ee:	58d3      	ldr	r3, [r2, r3]
100455f0:	4a15      	ldr	r2, [pc, #84]	@ (10045648 <HAL_PKA_IRQHandler+0xe0>)
100455f2:	4293      	cmp	r3, r2
100455f4:	d005      	beq.n	10045602 <HAL_PKA_IRQHandler+0x9a>
    {
      hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
100455f6:	687b      	ldr	r3, [r7, #4]
100455f8:	689b      	ldr	r3, [r3, #8]
100455fa:	2208      	movs	r2, #8
100455fc:	431a      	orrs	r2, r3
100455fe:	687b      	ldr	r3, [r7, #4]
10045600:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB09 */

  /* Trigger the error callback if an error is present */
  if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
10045602:	687b      	ldr	r3, [r7, #4]
10045604:	689b      	ldr	r3, [r3, #8]
10045606:	2b00      	cmp	r3, #0
10045608:	d003      	beq.n	10045612 <HAL_PKA_IRQHandler+0xaa>
  {
#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->ErrorCallback(hpka);
#else
    HAL_PKA_ErrorCallback(hpka);
1004560a:	687b      	ldr	r3, [r7, #4]
1004560c:	0018      	movs	r0, r3
1004560e:	f7fd fbc5 	bl	10042d9c <HAL_PKA_ErrorCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }

  /* End Of Operation interrupt occurred */
  if (((itsource & PKA_IT_PROCEND) == PKA_IT_PROCEND) && ((flag & PKA_FLAG_PROCEND) == PKA_FLAG_PROCEND))
10045612:	693a      	ldr	r2, [r7, #16]
10045614:	2380      	movs	r3, #128	@ 0x80
10045616:	029b      	lsls	r3, r3, #10
10045618:	4013      	ands	r3, r2
1004561a:	d010      	beq.n	1004563e <HAL_PKA_IRQHandler+0xd6>
1004561c:	68fa      	ldr	r2, [r7, #12]
1004561e:	2380      	movs	r3, #128	@ 0x80
10045620:	029b      	lsls	r3, r3, #10
10045622:	4013      	ands	r3, r2
10045624:	d00b      	beq.n	1004563e <HAL_PKA_IRQHandler+0xd6>
  {
    /* Clear PROCEND flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_PROCEND);
10045626:	687b      	ldr	r3, [r7, #4]
10045628:	681b      	ldr	r3, [r3, #0]
1004562a:	2280      	movs	r2, #128	@ 0x80
1004562c:	0292      	lsls	r2, r2, #10
1004562e:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
10045630:	687b      	ldr	r3, [r7, #4]
10045632:	2201      	movs	r2, #1
10045634:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->OperationCpltCallback(hpka);
#else
    HAL_PKA_OperationCpltCallback(hpka);
10045636:	687b      	ldr	r3, [r7, #4]
10045638:	0018      	movs	r0, r3
1004563a:	f7fd fba3 	bl	10042d84 <HAL_PKA_OperationCpltCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }
}
1004563e:	46c0      	nop			@ (mov r8, r8)
10045640:	46bd      	mov	sp, r7
10045642:	b006      	add	sp, #24
10045644:	bd80      	pop	{r7, pc}
10045646:	46c0      	nop			@ (mov r8, r8)
10045648:	0000d60d 	.word	0x0000d60d

1004564c <PKA_GetMode>:
  * @brief  Get PKA operating mode.
  * @param  hpka PKA handle
  * @retval Return the current mode
  */
uint32_t PKA_GetMode(const PKA_HandleTypeDef *hpka)
{
1004564c:	b580      	push	{r7, lr}
1004564e:	b082      	sub	sp, #8
10045650:	af00      	add	r7, sp, #0
10045652:	6078      	str	r0, [r7, #4]
  /* return the shifted PKA_CR_MODE value */
  return (uint32_t)(READ_BIT(hpka->Instance->CR, PKA_CR_MODE) >> PKA_CR_MODE_Pos);
10045654:	687b      	ldr	r3, [r7, #4]
10045656:	681b      	ldr	r3, [r3, #0]
10045658:	681b      	ldr	r3, [r3, #0]
1004565a:	0a1b      	lsrs	r3, r3, #8
1004565c:	223f      	movs	r2, #63	@ 0x3f
1004565e:	4013      	ands	r3, r2
}
10045660:	0018      	movs	r0, r3
10045662:	46bd      	mov	sp, r7
10045664:	b002      	add	sp, #8
10045666:	bd80      	pop	{r7, pc}

10045668 <HAL_PWREx_EnableGPIOPullUp>:
  *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 or the logical OR
  *         of several of them to setseveral bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10045668:	b580      	push	{r7, lr}
1004566a:	b084      	sub	sp, #16
1004566c:	af00      	add	r7, sp, #0
1004566e:	6078      	str	r0, [r7, #4]
10045670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10045672:	230f      	movs	r3, #15
10045674:	18fb      	adds	r3, r7, r3
10045676:	2200      	movs	r2, #0
10045678:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004567a:	687b      	ldr	r3, [r7, #4]
1004567c:	2b00      	cmp	r3, #0
1004567e:	d003      	beq.n	10045688 <HAL_PWREx_EnableGPIOPullUp+0x20>
10045680:	687b      	ldr	r3, [r7, #4]
10045682:	2b01      	cmp	r3, #1
10045684:	d00e      	beq.n	100456a4 <HAL_PWREx_EnableGPIOPullUp+0x3c>
10045686:	e01b      	b.n	100456c0 <HAL_PWREx_EnableGPIOPullUp+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PUCRA, GPIONumber);
10045688:	4b13      	ldr	r3, [pc, #76]	@ (100456d8 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004568a:	6a19      	ldr	r1, [r3, #32]
1004568c:	4b12      	ldr	r3, [pc, #72]	@ (100456d8 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004568e:	683a      	ldr	r2, [r7, #0]
10045690:	430a      	orrs	r2, r1
10045692:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
10045694:	4b10      	ldr	r3, [pc, #64]	@ (100456d8 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10045696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10045698:	683b      	ldr	r3, [r7, #0]
1004569a:	43d9      	mvns	r1, r3
1004569c:	4b0e      	ldr	r3, [pc, #56]	@ (100456d8 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004569e:	400a      	ands	r2, r1
100456a0:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
100456a2:	e012      	b.n	100456ca <HAL_PWREx_EnableGPIOPullUp+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PUCRB, GPIONumber);
100456a4:	4b0c      	ldr	r3, [pc, #48]	@ (100456d8 <HAL_PWREx_EnableGPIOPullUp+0x70>)
100456a6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
100456a8:	4b0b      	ldr	r3, [pc, #44]	@ (100456d8 <HAL_PWREx_EnableGPIOPullUp+0x70>)
100456aa:	683a      	ldr	r2, [r7, #0]
100456ac:	430a      	orrs	r2, r1
100456ae:	629a      	str	r2, [r3, #40]	@ 0x28
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
100456b0:	4b09      	ldr	r3, [pc, #36]	@ (100456d8 <HAL_PWREx_EnableGPIOPullUp+0x70>)
100456b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100456b4:	683b      	ldr	r3, [r7, #0]
100456b6:	43d9      	mvns	r1, r3
100456b8:	4b07      	ldr	r3, [pc, #28]	@ (100456d8 <HAL_PWREx_EnableGPIOPullUp+0x70>)
100456ba:	400a      	ands	r2, r1
100456bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
100456be:	e004      	b.n	100456ca <HAL_PWREx_EnableGPIOPullUp+0x62>
    default:
      status = HAL_ERROR;
100456c0:	230f      	movs	r3, #15
100456c2:	18fb      	adds	r3, r7, r3
100456c4:	2201      	movs	r2, #1
100456c6:	701a      	strb	r2, [r3, #0]
      break;
100456c8:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
100456ca:	230f      	movs	r3, #15
100456cc:	18fb      	adds	r3, r7, r3
100456ce:	781b      	ldrb	r3, [r3, #0]
}
100456d0:	0018      	movs	r0, r3
100456d2:	46bd      	mov	sp, r7
100456d4:	b004      	add	sp, #16
100456d6:	bd80      	pop	{r7, pc}
100456d8:	48500000 	.word	0x48500000

100456dc <HAL_PWREx_EnableGPIOPullDown>:
  *         or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
100456dc:	b580      	push	{r7, lr}
100456de:	b084      	sub	sp, #16
100456e0:	af00      	add	r7, sp, #0
100456e2:	6078      	str	r0, [r7, #4]
100456e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
100456e6:	230f      	movs	r3, #15
100456e8:	18fb      	adds	r3, r7, r3
100456ea:	2200      	movs	r2, #0
100456ec:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
100456ee:	687b      	ldr	r3, [r7, #4]
100456f0:	2b00      	cmp	r3, #0
100456f2:	d003      	beq.n	100456fc <HAL_PWREx_EnableGPIOPullDown+0x20>
100456f4:	687b      	ldr	r3, [r7, #4]
100456f6:	2b01      	cmp	r3, #1
100456f8:	d00e      	beq.n	10045718 <HAL_PWREx_EnableGPIOPullDown+0x3c>
100456fa:	e01b      	b.n	10045734 <HAL_PWREx_EnableGPIOPullDown+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PDCRA, GPIONumber);
100456fc:	4b13      	ldr	r3, [pc, #76]	@ (1004574c <HAL_PWREx_EnableGPIOPullDown+0x70>)
100456fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10045700:	4b12      	ldr	r3, [pc, #72]	@ (1004574c <HAL_PWREx_EnableGPIOPullDown+0x70>)
10045702:	683a      	ldr	r2, [r7, #0]
10045704:	430a      	orrs	r2, r1
10045706:	625a      	str	r2, [r3, #36]	@ 0x24
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
10045708:	4b10      	ldr	r3, [pc, #64]	@ (1004574c <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004570a:	6a1a      	ldr	r2, [r3, #32]
1004570c:	683b      	ldr	r3, [r7, #0]
1004570e:	43d9      	mvns	r1, r3
10045710:	4b0e      	ldr	r3, [pc, #56]	@ (1004574c <HAL_PWREx_EnableGPIOPullDown+0x70>)
10045712:	400a      	ands	r2, r1
10045714:	621a      	str	r2, [r3, #32]
      break;
10045716:	e012      	b.n	1004573e <HAL_PWREx_EnableGPIOPullDown+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PDCRB, GPIONumber);
10045718:	4b0c      	ldr	r3, [pc, #48]	@ (1004574c <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004571a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1004571c:	4b0b      	ldr	r3, [pc, #44]	@ (1004574c <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004571e:	683a      	ldr	r2, [r7, #0]
10045720:	430a      	orrs	r2, r1
10045722:	62da      	str	r2, [r3, #44]	@ 0x2c
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
10045724:	4b09      	ldr	r3, [pc, #36]	@ (1004574c <HAL_PWREx_EnableGPIOPullDown+0x70>)
10045726:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10045728:	683b      	ldr	r3, [r7, #0]
1004572a:	43d9      	mvns	r1, r3
1004572c:	4b07      	ldr	r3, [pc, #28]	@ (1004574c <HAL_PWREx_EnableGPIOPullDown+0x70>)
1004572e:	400a      	ands	r2, r1
10045730:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
10045732:	e004      	b.n	1004573e <HAL_PWREx_EnableGPIOPullDown+0x62>
    default:
      status = HAL_ERROR;
10045734:	230f      	movs	r3, #15
10045736:	18fb      	adds	r3, r7, r3
10045738:	2201      	movs	r2, #1
1004573a:	701a      	strb	r2, [r3, #0]
      break;
1004573c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004573e:	230f      	movs	r3, #15
10045740:	18fb      	adds	r3, r7, r3
10045742:	781b      	ldrb	r3, [r3, #0]
}
10045744:	0018      	movs	r0, r3
10045746:	46bd      	mov	sp, r7
10045748:	b004      	add	sp, #16
1004574a:	bd80      	pop	{r7, pc}
1004574c:	48500000 	.word	0x48500000

10045750 <LL_RADIO_SetRadioConfigurationAddressPointer>:
{
10045750:	b580      	push	{r7, lr}
10045752:	b082      	sub	sp, #8
10045754:	af00      	add	r7, sp, #0
10045756:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10045758:	4b04      	ldr	r3, [pc, #16]	@ (1004576c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004575a:	681b      	ldr	r3, [r3, #0]
1004575c:	4b03      	ldr	r3, [pc, #12]	@ (1004576c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004575e:	687a      	ldr	r2, [r7, #4]
10045760:	601a      	str	r2, [r3, #0]
}
10045762:	46c0      	nop			@ (mov r8, r8)
10045764:	46bd      	mov	sp, r7
10045766:	b002      	add	sp, #8
10045768:	bd80      	pop	{r7, pc}
1004576a:	46c0      	nop			@ (mov r8, r8)
1004576c:	200000c0 	.word	0x200000c0

10045770 <LL_RADIO_SetWakeupInitDelay>:
{
10045770:	b580      	push	{r7, lr}
10045772:	b082      	sub	sp, #8
10045774:	af00      	add	r7, sp, #0
10045776:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10045778:	4b07      	ldr	r3, [pc, #28]	@ (10045798 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004577a:	685b      	ldr	r3, [r3, #4]
1004577c:	4a07      	ldr	r2, [pc, #28]	@ (1004579c <LL_RADIO_SetWakeupInitDelay+0x2c>)
1004577e:	4013      	ands	r3, r2
10045780:	0019      	movs	r1, r3
10045782:	687b      	ldr	r3, [r7, #4]
10045784:	021b      	lsls	r3, r3, #8
10045786:	041b      	lsls	r3, r3, #16
10045788:	0c1a      	lsrs	r2, r3, #16
1004578a:	4b03      	ldr	r3, [pc, #12]	@ (10045798 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004578c:	430a      	orrs	r2, r1
1004578e:	605a      	str	r2, [r3, #4]
}
10045790:	46c0      	nop			@ (mov r8, r8)
10045792:	46bd      	mov	sp, r7
10045794:	b002      	add	sp, #8
10045796:	bd80      	pop	{r7, pc}
10045798:	200000c0 	.word	0x200000c0
1004579c:	ffff00ff 	.word	0xffff00ff

100457a0 <LL_RADIO_SetTimer12InitDelayCal>:
{
100457a0:	b580      	push	{r7, lr}
100457a2:	b082      	sub	sp, #8
100457a4:	af00      	add	r7, sp, #0
100457a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
100457a8:	4b08      	ldr	r3, [pc, #32]	@ (100457cc <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
100457aa:	685b      	ldr	r3, [r3, #4]
100457ac:	4a08      	ldr	r2, [pc, #32]	@ (100457d0 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
100457ae:	4013      	ands	r3, r2
100457b0:	0019      	movs	r1, r3
100457b2:	687b      	ldr	r3, [r7, #4]
100457b4:	041a      	lsls	r2, r3, #16
100457b6:	23ff      	movs	r3, #255	@ 0xff
100457b8:	041b      	lsls	r3, r3, #16
100457ba:	401a      	ands	r2, r3
100457bc:	4b03      	ldr	r3, [pc, #12]	@ (100457cc <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
100457be:	430a      	orrs	r2, r1
100457c0:	605a      	str	r2, [r3, #4]
}
100457c2:	46c0      	nop			@ (mov r8, r8)
100457c4:	46bd      	mov	sp, r7
100457c6:	b002      	add	sp, #8
100457c8:	bd80      	pop	{r7, pc}
100457ca:	46c0      	nop			@ (mov r8, r8)
100457cc:	200000c0 	.word	0x200000c0
100457d0:	ff00ffff 	.word	0xff00ffff

100457d4 <LL_RADIO_SetTimer12InitDelayNoCal>:
{
100457d4:	b580      	push	{r7, lr}
100457d6:	b082      	sub	sp, #8
100457d8:	af00      	add	r7, sp, #0
100457da:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
100457dc:	4b06      	ldr	r3, [pc, #24]	@ (100457f8 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
100457de:	685b      	ldr	r3, [r3, #4]
100457e0:	021b      	lsls	r3, r3, #8
100457e2:	0a19      	lsrs	r1, r3, #8
100457e4:	687b      	ldr	r3, [r7, #4]
100457e6:	061a      	lsls	r2, r3, #24
100457e8:	4b03      	ldr	r3, [pc, #12]	@ (100457f8 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
100457ea:	430a      	orrs	r2, r1
100457ec:	605a      	str	r2, [r3, #4]
}
100457ee:	46c0      	nop			@ (mov r8, r8)
100457f0:	46bd      	mov	sp, r7
100457f2:	b002      	add	sp, #8
100457f4:	bd80      	pop	{r7, pc}
100457f6:	46c0      	nop			@ (mov r8, r8)
100457f8:	200000c0 	.word	0x200000c0

100457fc <LL_RADIO_SetTransmitCalDelayChk>:
{
100457fc:	b580      	push	{r7, lr}
100457fe:	b082      	sub	sp, #8
10045800:	af00      	add	r7, sp, #0
10045802:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
10045804:	4b07      	ldr	r3, [pc, #28]	@ (10045824 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10045806:	689b      	ldr	r3, [r3, #8]
10045808:	22ff      	movs	r2, #255	@ 0xff
1004580a:	4393      	bics	r3, r2
1004580c:	0019      	movs	r1, r3
1004580e:	687b      	ldr	r3, [r7, #4]
10045810:	22ff      	movs	r2, #255	@ 0xff
10045812:	401a      	ands	r2, r3
10045814:	4b03      	ldr	r3, [pc, #12]	@ (10045824 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10045816:	430a      	orrs	r2, r1
10045818:	609a      	str	r2, [r3, #8]
}
1004581a:	46c0      	nop			@ (mov r8, r8)
1004581c:	46bd      	mov	sp, r7
1004581e:	b002      	add	sp, #8
10045820:	bd80      	pop	{r7, pc}
10045822:	46c0      	nop			@ (mov r8, r8)
10045824:	200000c0 	.word	0x200000c0

10045828 <LL_RADIO_SetTransmitNoCalDelayChk>:
{
10045828:	b580      	push	{r7, lr}
1004582a:	b082      	sub	sp, #8
1004582c:	af00      	add	r7, sp, #0
1004582e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
10045830:	4b07      	ldr	r3, [pc, #28]	@ (10045850 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10045832:	689b      	ldr	r3, [r3, #8]
10045834:	4a07      	ldr	r2, [pc, #28]	@ (10045854 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
10045836:	4013      	ands	r3, r2
10045838:	0019      	movs	r1, r3
1004583a:	687b      	ldr	r3, [r7, #4]
1004583c:	021b      	lsls	r3, r3, #8
1004583e:	041b      	lsls	r3, r3, #16
10045840:	0c1a      	lsrs	r2, r3, #16
10045842:	4b03      	ldr	r3, [pc, #12]	@ (10045850 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10045844:	430a      	orrs	r2, r1
10045846:	609a      	str	r2, [r3, #8]
}
10045848:	46c0      	nop			@ (mov r8, r8)
1004584a:	46bd      	mov	sp, r7
1004584c:	b002      	add	sp, #8
1004584e:	bd80      	pop	{r7, pc}
10045850:	200000c0 	.word	0x200000c0
10045854:	ffff00ff 	.word	0xffff00ff

10045858 <LL_RADIO_SetReceivedCalDelayChk>:
{
10045858:	b580      	push	{r7, lr}
1004585a:	b082      	sub	sp, #8
1004585c:	af00      	add	r7, sp, #0
1004585e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10045860:	4b08      	ldr	r3, [pc, #32]	@ (10045884 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10045862:	689b      	ldr	r3, [r3, #8]
10045864:	4a08      	ldr	r2, [pc, #32]	@ (10045888 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10045866:	4013      	ands	r3, r2
10045868:	0019      	movs	r1, r3
1004586a:	687b      	ldr	r3, [r7, #4]
1004586c:	041a      	lsls	r2, r3, #16
1004586e:	23ff      	movs	r3, #255	@ 0xff
10045870:	041b      	lsls	r3, r3, #16
10045872:	401a      	ands	r2, r3
10045874:	4b03      	ldr	r3, [pc, #12]	@ (10045884 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10045876:	430a      	orrs	r2, r1
10045878:	609a      	str	r2, [r3, #8]
}
1004587a:	46c0      	nop			@ (mov r8, r8)
1004587c:	46bd      	mov	sp, r7
1004587e:	b002      	add	sp, #8
10045880:	bd80      	pop	{r7, pc}
10045882:	46c0      	nop			@ (mov r8, r8)
10045884:	200000c0 	.word	0x200000c0
10045888:	ff00ffff 	.word	0xff00ffff

1004588c <LL_RADIO_SetReceivedNoCalDelayChk>:
{
1004588c:	b580      	push	{r7, lr}
1004588e:	b082      	sub	sp, #8
10045890:	af00      	add	r7, sp, #0
10045892:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
10045894:	4b06      	ldr	r3, [pc, #24]	@ (100458b0 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10045896:	689b      	ldr	r3, [r3, #8]
10045898:	021b      	lsls	r3, r3, #8
1004589a:	0a19      	lsrs	r1, r3, #8
1004589c:	687b      	ldr	r3, [r7, #4]
1004589e:	061a      	lsls	r2, r3, #24
100458a0:	4b03      	ldr	r3, [pc, #12]	@ (100458b0 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
100458a2:	430a      	orrs	r2, r1
100458a4:	609a      	str	r2, [r3, #8]
}
100458a6:	46c0      	nop			@ (mov r8, r8)
100458a8:	46bd      	mov	sp, r7
100458aa:	b002      	add	sp, #8
100458ac:	bd80      	pop	{r7, pc}
100458ae:	46c0      	nop			@ (mov r8, r8)
100458b0:	200000c0 	.word	0x200000c0

100458b4 <LL_RADIO_SetConfigurationEndDuration>:
{
100458b4:	b580      	push	{r7, lr}
100458b6:	b082      	sub	sp, #8
100458b8:	af00      	add	r7, sp, #0
100458ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
100458bc:	4b07      	ldr	r3, [pc, #28]	@ (100458dc <LL_RADIO_SetConfigurationEndDuration+0x28>)
100458be:	68db      	ldr	r3, [r3, #12]
100458c0:	22ff      	movs	r2, #255	@ 0xff
100458c2:	4393      	bics	r3, r2
100458c4:	0019      	movs	r1, r3
100458c6:	687b      	ldr	r3, [r7, #4]
100458c8:	22ff      	movs	r2, #255	@ 0xff
100458ca:	401a      	ands	r2, r3
100458cc:	4b03      	ldr	r3, [pc, #12]	@ (100458dc <LL_RADIO_SetConfigurationEndDuration+0x28>)
100458ce:	430a      	orrs	r2, r1
100458d0:	60da      	str	r2, [r3, #12]
}
100458d2:	46c0      	nop			@ (mov r8, r8)
100458d4:	46bd      	mov	sp, r7
100458d6:	b002      	add	sp, #8
100458d8:	bd80      	pop	{r7, pc}
100458da:	46c0      	nop			@ (mov r8, r8)
100458dc:	200000c0 	.word	0x200000c0

100458e0 <LL_RADIO_SetTxDataReadyCheck>:
{
100458e0:	b580      	push	{r7, lr}
100458e2:	b082      	sub	sp, #8
100458e4:	af00      	add	r7, sp, #0
100458e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
100458e8:	4b07      	ldr	r3, [pc, #28]	@ (10045908 <LL_RADIO_SetTxDataReadyCheck+0x28>)
100458ea:	68db      	ldr	r3, [r3, #12]
100458ec:	4a07      	ldr	r2, [pc, #28]	@ (1004590c <LL_RADIO_SetTxDataReadyCheck+0x2c>)
100458ee:	4013      	ands	r3, r2
100458f0:	0019      	movs	r1, r3
100458f2:	687b      	ldr	r3, [r7, #4]
100458f4:	021b      	lsls	r3, r3, #8
100458f6:	041b      	lsls	r3, r3, #16
100458f8:	0c1a      	lsrs	r2, r3, #16
100458fa:	4b03      	ldr	r3, [pc, #12]	@ (10045908 <LL_RADIO_SetTxDataReadyCheck+0x28>)
100458fc:	430a      	orrs	r2, r1
100458fe:	60da      	str	r2, [r3, #12]
}
10045900:	46c0      	nop			@ (mov r8, r8)
10045902:	46bd      	mov	sp, r7
10045904:	b002      	add	sp, #8
10045906:	bd80      	pop	{r7, pc}
10045908:	200000c0 	.word	0x200000c0
1004590c:	ffff00ff 	.word	0xffff00ff

10045910 <LL_RADIO_SetTxDelayStart>:
{
10045910:	b580      	push	{r7, lr}
10045912:	b082      	sub	sp, #8
10045914:	af00      	add	r7, sp, #0
10045916:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
10045918:	4b08      	ldr	r3, [pc, #32]	@ (1004593c <LL_RADIO_SetTxDelayStart+0x2c>)
1004591a:	68db      	ldr	r3, [r3, #12]
1004591c:	4a08      	ldr	r2, [pc, #32]	@ (10045940 <LL_RADIO_SetTxDelayStart+0x30>)
1004591e:	4013      	ands	r3, r2
10045920:	0019      	movs	r1, r3
10045922:	687b      	ldr	r3, [r7, #4]
10045924:	041a      	lsls	r2, r3, #16
10045926:	23ff      	movs	r3, #255	@ 0xff
10045928:	041b      	lsls	r3, r3, #16
1004592a:	401a      	ands	r2, r3
1004592c:	4b03      	ldr	r3, [pc, #12]	@ (1004593c <LL_RADIO_SetTxDelayStart+0x2c>)
1004592e:	430a      	orrs	r2, r1
10045930:	60da      	str	r2, [r3, #12]
}
10045932:	46c0      	nop			@ (mov r8, r8)
10045934:	46bd      	mov	sp, r7
10045936:	b002      	add	sp, #8
10045938:	bd80      	pop	{r7, pc}
1004593a:	46c0      	nop			@ (mov r8, r8)
1004593c:	200000c0 	.word	0x200000c0
10045940:	ff00ffff 	.word	0xff00ffff

10045944 <LL_RADIO_SetTxDelayEnd>:
{
10045944:	b580      	push	{r7, lr}
10045946:	b082      	sub	sp, #8
10045948:	af00      	add	r7, sp, #0
1004594a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
1004594c:	4b08      	ldr	r3, [pc, #32]	@ (10045970 <LL_RADIO_SetTxDelayEnd+0x2c>)
1004594e:	68db      	ldr	r3, [r3, #12]
10045950:	4a08      	ldr	r2, [pc, #32]	@ (10045974 <LL_RADIO_SetTxDelayEnd+0x30>)
10045952:	4013      	ands	r3, r2
10045954:	0019      	movs	r1, r3
10045956:	687b      	ldr	r3, [r7, #4]
10045958:	061a      	lsls	r2, r3, #24
1004595a:	23fc      	movs	r3, #252	@ 0xfc
1004595c:	059b      	lsls	r3, r3, #22
1004595e:	401a      	ands	r2, r3
10045960:	4b03      	ldr	r3, [pc, #12]	@ (10045970 <LL_RADIO_SetTxDelayEnd+0x2c>)
10045962:	430a      	orrs	r2, r1
10045964:	60da      	str	r2, [r3, #12]
}
10045966:	46c0      	nop			@ (mov r8, r8)
10045968:	46bd      	mov	sp, r7
1004596a:	b002      	add	sp, #8
1004596c:	bd80      	pop	{r7, pc}
1004596e:	46c0      	nop			@ (mov r8, r8)
10045970:	200000c0 	.word	0x200000c0
10045974:	c0ffffff 	.word	0xc0ffffff

10045978 <LL_RADIO_SetTransmissionReadyTimeout>:
{
10045978:	b580      	push	{r7, lr}
1004597a:	b082      	sub	sp, #8
1004597c:	af00      	add	r7, sp, #0
1004597e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
10045980:	4b07      	ldr	r3, [pc, #28]	@ (100459a0 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10045982:	691b      	ldr	r3, [r3, #16]
10045984:	22ff      	movs	r2, #255	@ 0xff
10045986:	4393      	bics	r3, r2
10045988:	0019      	movs	r1, r3
1004598a:	687b      	ldr	r3, [r7, #4]
1004598c:	22ff      	movs	r2, #255	@ 0xff
1004598e:	401a      	ands	r2, r3
10045990:	4b03      	ldr	r3, [pc, #12]	@ (100459a0 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10045992:	430a      	orrs	r2, r1
10045994:	611a      	str	r2, [r3, #16]
}
10045996:	46c0      	nop			@ (mov r8, r8)
10045998:	46bd      	mov	sp, r7
1004599a:	b002      	add	sp, #8
1004599c:	bd80      	pop	{r7, pc}
1004599e:	46c0      	nop			@ (mov r8, r8)
100459a0:	200000c0 	.word	0x200000c0

100459a4 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
{
100459a4:	b580      	push	{r7, lr}
100459a6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
100459a8:	4b04      	ldr	r3, [pc, #16]	@ (100459bc <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
100459aa:	695a      	ldr	r2, [r3, #20]
100459ac:	4b03      	ldr	r3, [pc, #12]	@ (100459bc <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
100459ae:	2104      	movs	r1, #4
100459b0:	430a      	orrs	r2, r1
100459b2:	615a      	str	r2, [r3, #20]
}
100459b4:	46c0      	nop			@ (mov r8, r8)
100459b6:	46bd      	mov	sp, r7
100459b8:	bd80      	pop	{r7, pc}
100459ba:	46c0      	nop			@ (mov r8, r8)
100459bc:	200000c0 	.word	0x200000c0

100459c0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
{
100459c0:	b580      	push	{r7, lr}
100459c2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
100459c4:	4b04      	ldr	r3, [pc, #16]	@ (100459d8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
100459c6:	695a      	ldr	r2, [r3, #20]
100459c8:	4b03      	ldr	r3, [pc, #12]	@ (100459d8 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
100459ca:	2180      	movs	r1, #128	@ 0x80
100459cc:	0409      	lsls	r1, r1, #16
100459ce:	430a      	orrs	r2, r1
100459d0:	615a      	str	r2, [r3, #20]
}
100459d2:	46c0      	nop			@ (mov r8, r8)
100459d4:	46bd      	mov	sp, r7
100459d6:	bd80      	pop	{r7, pc}
100459d8:	200000c0 	.word	0x200000c0

100459dc <LL_RADIO_TxRxSkipInterrupt_Enable>:
{
100459dc:	b580      	push	{r7, lr}
100459de:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
100459e0:	4b04      	ldr	r3, [pc, #16]	@ (100459f4 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
100459e2:	695a      	ldr	r2, [r3, #20]
100459e4:	4b03      	ldr	r3, [pc, #12]	@ (100459f4 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
100459e6:	2180      	movs	r1, #128	@ 0x80
100459e8:	0589      	lsls	r1, r1, #22
100459ea:	430a      	orrs	r2, r1
100459ec:	615a      	str	r2, [r3, #20]
}
100459ee:	46c0      	nop			@ (mov r8, r8)
100459f0:	46bd      	mov	sp, r7
100459f2:	bd80      	pop	{r7, pc}
100459f4:	200000c0 	.word	0x200000c0

100459f8 <LL_RADIO_Active2ErrorInterrupt_Enable>:
{
100459f8:	b580      	push	{r7, lr}
100459fa:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
100459fc:	4b04      	ldr	r3, [pc, #16]	@ (10045a10 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
100459fe:	695a      	ldr	r2, [r3, #20]
10045a00:	4b03      	ldr	r3, [pc, #12]	@ (10045a10 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10045a02:	2180      	movs	r1, #128	@ 0x80
10045a04:	05c9      	lsls	r1, r1, #23
10045a06:	430a      	orrs	r2, r1
10045a08:	615a      	str	r2, [r3, #20]
}
10045a0a:	46c0      	nop			@ (mov r8, r8)
10045a0c:	46bd      	mov	sp, r7
10045a0e:	bd80      	pop	{r7, pc}
10045a10:	200000c0 	.word	0x200000c0

10045a14 <LL_RADIO_SetDefaultAntennaID>:
{
10045a14:	b580      	push	{r7, lr}
10045a16:	b082      	sub	sp, #8
10045a18:	af00      	add	r7, sp, #0
10045a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
10045a1c:	4b07      	ldr	r3, [pc, #28]	@ (10045a3c <LL_RADIO_SetDefaultAntennaID+0x28>)
10045a1e:	699b      	ldr	r3, [r3, #24]
10045a20:	227f      	movs	r2, #127	@ 0x7f
10045a22:	4393      	bics	r3, r2
10045a24:	0019      	movs	r1, r3
10045a26:	687b      	ldr	r3, [r7, #4]
10045a28:	227f      	movs	r2, #127	@ 0x7f
10045a2a:	401a      	ands	r2, r3
10045a2c:	4b03      	ldr	r3, [pc, #12]	@ (10045a3c <LL_RADIO_SetDefaultAntennaID+0x28>)
10045a2e:	430a      	orrs	r2, r1
10045a30:	619a      	str	r2, [r3, #24]
}
10045a32:	46c0      	nop			@ (mov r8, r8)
10045a34:	46bd      	mov	sp, r7
10045a36:	b002      	add	sp, #8
10045a38:	bd80      	pop	{r7, pc}
10045a3a:	46c0      	nop			@ (mov r8, r8)
10045a3c:	200000c0 	.word	0x200000c0

10045a40 <LL_RADIO_TIMER_DisableTimer1>:
{
10045a40:	b580      	push	{r7, lr}
10045a42:	b082      	sub	sp, #8
10045a44:	af00      	add	r7, sp, #0
10045a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10045a48:	687b      	ldr	r3, [r7, #4]
10045a4a:	68db      	ldr	r3, [r3, #12]
10045a4c:	2203      	movs	r2, #3
10045a4e:	4393      	bics	r3, r2
10045a50:	001a      	movs	r2, r3
10045a52:	687b      	ldr	r3, [r7, #4]
10045a54:	60da      	str	r2, [r3, #12]
}
10045a56:	46c0      	nop			@ (mov r8, r8)
10045a58:	46bd      	mov	sp, r7
10045a5a:	b002      	add	sp, #8
10045a5c:	bd80      	pop	{r7, pc}

10045a5e <LL_RADIO_TIMER_DisableTimer2>:
{
10045a5e:	b580      	push	{r7, lr}
10045a60:	b082      	sub	sp, #8
10045a62:	af00      	add	r7, sp, #0
10045a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10045a66:	687b      	ldr	r3, [r7, #4]
10045a68:	68db      	ldr	r3, [r3, #12]
10045a6a:	2203      	movs	r2, #3
10045a6c:	4393      	bics	r3, r2
10045a6e:	001a      	movs	r2, r3
10045a70:	687b      	ldr	r3, [r7, #4]
10045a72:	60da      	str	r2, [r3, #12]
}
10045a74:	46c0      	nop			@ (mov r8, r8)
10045a76:	46bd      	mov	sp, r7
10045a78:	b002      	add	sp, #8
10045a7a:	bd80      	pop	{r7, pc}

10045a7c <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10045a7c:	b580      	push	{r7, lr}
10045a7e:	b082      	sub	sp, #8
10045a80:	af00      	add	r7, sp, #0
10045a82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10045a84:	687b      	ldr	r3, [r7, #4]
10045a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10045a88:	4a03      	ldr	r2, [pc, #12]	@ (10045a98 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10045a8a:	401a      	ands	r2, r3
10045a8c:	687b      	ldr	r3, [r7, #4]
10045a8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10045a90:	46c0      	nop			@ (mov r8, r8)
10045a92:	46bd      	mov	sp, r7
10045a94:	b002      	add	sp, #8
10045a96:	bd80      	pop	{r7, pc}
10045a98:	bfffffff 	.word	0xbfffffff

10045a9c <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
10045a9c:	b590      	push	{r4, r7, lr}
10045a9e:	b08d      	sub	sp, #52	@ 0x34
10045aa0:	af00      	add	r7, sp, #0
10045aa2:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
10045aa4:	4b14      	ldr	r3, [pc, #80]	@ (10045af8 <HAL_RADIO_Init+0x5c>)
10045aa6:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
10045aa8:	4b14      	ldr	r3, [pc, #80]	@ (10045afc <HAL_RADIO_Init+0x60>)
10045aaa:	681b      	ldr	r3, [r3, #0]
10045aac:	4a14      	ldr	r2, [pc, #80]	@ (10045b00 <HAL_RADIO_Init+0x64>)
10045aae:	4293      	cmp	r3, r2
10045ab0:	d12a      	bne.n	10045b08 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
10045ab2:	4b14      	ldr	r3, [pc, #80]	@ (10045b04 <HAL_RADIO_Init+0x68>)
10045ab4:	681b      	ldr	r3, [r3, #0]
10045ab6:	0a1b      	lsrs	r3, r3, #8
10045ab8:	220f      	movs	r2, #15
10045aba:	4013      	ands	r3, r2
10045abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
10045abe:	4b11      	ldr	r3, [pc, #68]	@ (10045b04 <HAL_RADIO_Init+0x68>)
10045ac0:	681b      	ldr	r3, [r3, #0]
10045ac2:	0b1b      	lsrs	r3, r3, #12
10045ac4:	220f      	movs	r2, #15
10045ac6:	4013      	ands	r3, r2
10045ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
10045aca:	4b0e      	ldr	r3, [pc, #56]	@ (10045b04 <HAL_RADIO_Init+0x68>)
10045acc:	681b      	ldr	r3, [r3, #0]
10045ace:	0c1b      	lsrs	r3, r3, #16
10045ad0:	220f      	movs	r2, #15
10045ad2:	4013      	ands	r3, r2
10045ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
10045ad6:	4b0b      	ldr	r3, [pc, #44]	@ (10045b04 <HAL_RADIO_Init+0x68>)
10045ad8:	681b      	ldr	r3, [r3, #0]
10045ada:	0d1b      	lsrs	r3, r3, #20
10045adc:	2207      	movs	r2, #7
10045ade:	4013      	ands	r3, r2
10045ae0:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
10045ae2:	4b08      	ldr	r3, [pc, #32]	@ (10045b04 <HAL_RADIO_Init+0x68>)
10045ae4:	681b      	ldr	r3, [r3, #0]
10045ae6:	0e1b      	lsrs	r3, r3, #24
10045ae8:	2207      	movs	r2, #7
10045aea:	4013      	ands	r3, r2
10045aec:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10045aee:	231b      	movs	r3, #27
10045af0:	18fb      	adds	r3, r7, r3
10045af2:	2201      	movs	r2, #1
10045af4:	701a      	strb	r2, [r3, #0]
10045af6:	e018      	b.n	10045b2a <HAL_RADIO_Init+0x8e>
10045af8:	200004e8 	.word	0x200004e8
10045afc:	10001ef8 	.word	0x10001ef8
10045b00:	fcbceccc 	.word	0xfcbceccc
10045b04:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
10045b08:	2308      	movs	r3, #8
10045b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
10045b0c:	2307      	movs	r3, #7
10045b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
10045b10:	2308      	movs	r3, #8
10045b12:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
10045b14:	211b      	movs	r1, #27
10045b16:	187b      	adds	r3, r7, r1
10045b18:	2200      	movs	r2, #0
10045b1a:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
10045b1c:	2303      	movs	r3, #3
10045b1e:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
10045b20:	2303      	movs	r3, #3
10045b22:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10045b24:	187b      	adds	r3, r7, r1
10045b26:	2201      	movs	r2, #1
10045b28:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
10045b2a:	4bfc      	ldr	r3, [pc, #1008]	@ (10045f1c <HAL_RADIO_Init+0x480>)
10045b2c:	2200      	movs	r2, #0
10045b2e:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
10045b30:	687b      	ldr	r3, [r7, #4]
10045b32:	2b00      	cmp	r3, #0
10045b34:	d003      	beq.n	10045b3e <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
10045b36:	687b      	ldr	r3, [r7, #4]
10045b38:	0018      	movs	r0, r3
10045b3a:	f7fb fa0b 	bl	10040f54 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10045b3e:	23c0      	movs	r3, #192	@ 0xc0
10045b40:	05db      	lsls	r3, r3, #23
10045b42:	0018      	movs	r0, r3
10045b44:	f7ff ff7c 	bl	10045a40 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10045b48:	23c0      	movs	r3, #192	@ 0xc0
10045b4a:	05db      	lsls	r3, r3, #23
10045b4c:	0018      	movs	r0, r3
10045b4e:	f7ff ff86 	bl	10045a5e <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10045b52:	4bf3      	ldr	r3, [pc, #972]	@ (10045f20 <HAL_RADIO_Init+0x484>)
10045b54:	0018      	movs	r0, r3
10045b56:	f7ff ff91 	bl	10045a7c <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
10045b5a:	4af2      	ldr	r2, [pc, #968]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045b5c:	239e      	movs	r3, #158	@ 0x9e
10045b5e:	009b      	lsls	r3, r3, #2
10045b60:	58d3      	ldr	r3, [r2, r3]
10045b62:	220f      	movs	r2, #15
10045b64:	4393      	bics	r3, r2
10045b66:	001a      	movs	r2, r3
10045b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10045b6a:	210f      	movs	r1, #15
10045b6c:	400b      	ands	r3, r1
10045b6e:	49ed      	ldr	r1, [pc, #948]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045b70:	431a      	orrs	r2, r3
10045b72:	239e      	movs	r3, #158	@ 0x9e
10045b74:	009b      	lsls	r3, r3, #2
10045b76:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
10045b78:	4aea      	ldr	r2, [pc, #936]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045b7a:	239d      	movs	r3, #157	@ 0x9d
10045b7c:	009b      	lsls	r3, r3, #2
10045b7e:	58d3      	ldr	r3, [r2, r3]
10045b80:	22f0      	movs	r2, #240	@ 0xf0
10045b82:	4393      	bics	r3, r2
10045b84:	001a      	movs	r2, r3
10045b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10045b88:	011b      	lsls	r3, r3, #4
10045b8a:	21ff      	movs	r1, #255	@ 0xff
10045b8c:	400b      	ands	r3, r1
10045b8e:	49e5      	ldr	r1, [pc, #916]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045b90:	431a      	orrs	r2, r3
10045b92:	239d      	movs	r3, #157	@ 0x9d
10045b94:	009b      	lsls	r3, r3, #2
10045b96:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
10045b98:	4ae2      	ldr	r2, [pc, #904]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045b9a:	239d      	movs	r3, #157	@ 0x9d
10045b9c:	009b      	lsls	r3, r3, #2
10045b9e:	58d3      	ldr	r3, [r2, r3]
10045ba0:	220f      	movs	r2, #15
10045ba2:	4393      	bics	r3, r2
10045ba4:	001a      	movs	r2, r3
10045ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10045ba8:	210f      	movs	r1, #15
10045baa:	400b      	ands	r3, r1
10045bac:	49dd      	ldr	r1, [pc, #884]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045bae:	431a      	orrs	r2, r3
10045bb0:	239d      	movs	r3, #157	@ 0x9d
10045bb2:	009b      	lsls	r3, r3, #2
10045bb4:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
10045bb6:	231b      	movs	r3, #27
10045bb8:	18fb      	adds	r3, r7, r3
10045bba:	781b      	ldrb	r3, [r3, #0]
10045bbc:	2b00      	cmp	r3, #0
10045bbe:	d01e      	beq.n	10045bfe <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
10045bc0:	4ad8      	ldr	r2, [pc, #864]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045bc2:	2392      	movs	r3, #146	@ 0x92
10045bc4:	009b      	lsls	r3, r3, #2
10045bc6:	58d3      	ldr	r3, [r2, r3]
10045bc8:	2207      	movs	r2, #7
10045bca:	4393      	bics	r3, r2
10045bcc:	001a      	movs	r2, r3
10045bce:	6a3b      	ldr	r3, [r7, #32]
10045bd0:	2107      	movs	r1, #7
10045bd2:	400b      	ands	r3, r1
10045bd4:	49d3      	ldr	r1, [pc, #844]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045bd6:	431a      	orrs	r2, r3
10045bd8:	2392      	movs	r3, #146	@ 0x92
10045bda:	009b      	lsls	r3, r3, #2
10045bdc:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
10045bde:	4ad1      	ldr	r2, [pc, #836]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045be0:	2392      	movs	r3, #146	@ 0x92
10045be2:	009b      	lsls	r3, r3, #2
10045be4:	58d3      	ldr	r3, [r2, r3]
10045be6:	2238      	movs	r2, #56	@ 0x38
10045be8:	4393      	bics	r3, r2
10045bea:	001a      	movs	r2, r3
10045bec:	69fb      	ldr	r3, [r7, #28]
10045bee:	00db      	lsls	r3, r3, #3
10045bf0:	2138      	movs	r1, #56	@ 0x38
10045bf2:	400b      	ands	r3, r1
10045bf4:	49cb      	ldr	r1, [pc, #812]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045bf6:	431a      	orrs	r2, r3
10045bf8:	2392      	movs	r3, #146	@ 0x92
10045bfa:	009b      	lsls	r3, r3, #2
10045bfc:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
10045bfe:	4ac9      	ldr	r2, [pc, #804]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c00:	23a4      	movs	r3, #164	@ 0xa4
10045c02:	005b      	lsls	r3, r3, #1
10045c04:	58d3      	ldr	r3, [r2, r3]
10045c06:	22ff      	movs	r2, #255	@ 0xff
10045c08:	4393      	bics	r3, r2
10045c0a:	49c6      	ldr	r1, [pc, #792]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c0c:	2255      	movs	r2, #85	@ 0x55
10045c0e:	431a      	orrs	r2, r3
10045c10:	23a4      	movs	r3, #164	@ 0xa4
10045c12:	005b      	lsls	r3, r3, #1
10045c14:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
10045c16:	4ac3      	ldr	r2, [pc, #780]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c18:	23aa      	movs	r3, #170	@ 0xaa
10045c1a:	005b      	lsls	r3, r3, #1
10045c1c:	58d3      	ldr	r3, [r2, r3]
10045c1e:	22ff      	movs	r2, #255	@ 0xff
10045c20:	4393      	bics	r3, r2
10045c22:	49c0      	ldr	r1, [pc, #768]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c24:	2266      	movs	r2, #102	@ 0x66
10045c26:	431a      	orrs	r2, r3
10045c28:	23aa      	movs	r3, #170	@ 0xaa
10045c2a:	005b      	lsls	r3, r3, #1
10045c2c:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
10045c2e:	4abd      	ldr	r2, [pc, #756]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c30:	23b4      	movs	r3, #180	@ 0xb4
10045c32:	005b      	lsls	r3, r3, #1
10045c34:	58d3      	ldr	r3, [r2, r3]
10045c36:	22ff      	movs	r2, #255	@ 0xff
10045c38:	4393      	bics	r3, r2
10045c3a:	49ba      	ldr	r1, [pc, #744]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c3c:	2255      	movs	r2, #85	@ 0x55
10045c3e:	431a      	orrs	r2, r3
10045c40:	23b4      	movs	r3, #180	@ 0xb4
10045c42:	005b      	lsls	r3, r3, #1
10045c44:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
10045c46:	4ab7      	ldr	r2, [pc, #732]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c48:	23c4      	movs	r3, #196	@ 0xc4
10045c4a:	005b      	lsls	r3, r3, #1
10045c4c:	58d3      	ldr	r3, [r2, r3]
10045c4e:	22ff      	movs	r2, #255	@ 0xff
10045c50:	4393      	bics	r3, r2
10045c52:	49b4      	ldr	r1, [pc, #720]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c54:	221d      	movs	r2, #29
10045c56:	431a      	orrs	r2, r3
10045c58:	23c4      	movs	r3, #196	@ 0xc4
10045c5a:	005b      	lsls	r3, r3, #1
10045c5c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
10045c5e:	4ab1      	ldr	r2, [pc, #708]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c60:	23c2      	movs	r3, #194	@ 0xc2
10045c62:	005b      	lsls	r3, r3, #1
10045c64:	58d3      	ldr	r3, [r2, r3]
10045c66:	22ff      	movs	r2, #255	@ 0xff
10045c68:	4393      	bics	r3, r2
10045c6a:	49ae      	ldr	r1, [pc, #696]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c6c:	2259      	movs	r2, #89	@ 0x59
10045c6e:	431a      	orrs	r2, r3
10045c70:	23c2      	movs	r3, #194	@ 0xc2
10045c72:	005b      	lsls	r3, r3, #1
10045c74:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
10045c76:	4aab      	ldr	r2, [pc, #684]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c78:	23c6      	movs	r3, #198	@ 0xc6
10045c7a:	005b      	lsls	r3, r3, #1
10045c7c:	58d3      	ldr	r3, [r2, r3]
10045c7e:	22ff      	movs	r2, #255	@ 0xff
10045c80:	4393      	bics	r3, r2
10045c82:	49a8      	ldr	r1, [pc, #672]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c84:	2232      	movs	r2, #50	@ 0x32
10045c86:	431a      	orrs	r2, r3
10045c88:	23c6      	movs	r3, #198	@ 0xc6
10045c8a:	005b      	lsls	r3, r3, #1
10045c8c:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
10045c8e:	4aa5      	ldr	r2, [pc, #660]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c90:	23b6      	movs	r3, #182	@ 0xb6
10045c92:	005b      	lsls	r3, r3, #1
10045c94:	58d3      	ldr	r3, [r2, r3]
10045c96:	49a3      	ldr	r1, [pc, #652]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045c98:	2201      	movs	r2, #1
10045c9a:	431a      	orrs	r2, r3
10045c9c:	23b6      	movs	r3, #182	@ 0xb6
10045c9e:	005b      	lsls	r3, r3, #1
10045ca0:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
10045ca2:	4aa0      	ldr	r2, [pc, #640]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045ca4:	23d0      	movs	r3, #208	@ 0xd0
10045ca6:	009b      	lsls	r3, r3, #2
10045ca8:	58d3      	ldr	r3, [r2, r3]
10045caa:	227f      	movs	r2, #127	@ 0x7f
10045cac:	4393      	bics	r3, r2
10045cae:	499d      	ldr	r1, [pc, #628]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045cb0:	221f      	movs	r2, #31
10045cb2:	431a      	orrs	r2, r3
10045cb4:	23d0      	movs	r3, #208	@ 0xd0
10045cb6:	009b      	lsls	r3, r3, #2
10045cb8:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
10045cba:	4a9a      	ldr	r2, [pc, #616]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045cbc:	23d1      	movs	r3, #209	@ 0xd1
10045cbe:	009b      	lsls	r3, r3, #2
10045cc0:	58d3      	ldr	r3, [r2, r3]
10045cc2:	223f      	movs	r2, #63	@ 0x3f
10045cc4:	4393      	bics	r3, r2
10045cc6:	4997      	ldr	r1, [pc, #604]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045cc8:	2209      	movs	r2, #9
10045cca:	431a      	orrs	r2, r3
10045ccc:	23d1      	movs	r3, #209	@ 0xd1
10045cce:	009b      	lsls	r3, r3, #2
10045cd0:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
10045cd2:	2040      	movs	r0, #64	@ 0x40
10045cd4:	f7ff fd4c 	bl	10045770 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
10045cd8:	203f      	movs	r0, #63	@ 0x3f
10045cda:	f7ff fd61 	bl	100457a0 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
10045cde:	2009      	movs	r0, #9
10045ce0:	f7ff fd78 	bl	100457d4 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
10045ce4:	205a      	movs	r0, #90	@ 0x5a
10045ce6:	f7ff fdb7 	bl	10045858 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
10045cea:	2032      	movs	r0, #50	@ 0x32
10045cec:	f7ff fdce 	bl	1004588c <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
10045cf0:	205a      	movs	r0, #90	@ 0x5a
10045cf2:	f7ff fd83 	bl	100457fc <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
10045cf6:	2032      	movs	r0, #50	@ 0x32
10045cf8:	f7ff fd96 	bl	10045828 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
10045cfc:	2010      	movs	r0, #16
10045cfe:	f7ff fe07 	bl	10045910 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
10045d02:	2010      	movs	r0, #16
10045d04:	f7ff fe1e 	bl	10045944 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
10045d08:	2004      	movs	r0, #4
10045d0a:	f7ff fe35 	bl	10045978 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
10045d0e:	2014      	movs	r0, #20
10045d10:	f7ff fdd0 	bl	100458b4 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
10045d14:	2005      	movs	r0, #5
10045d16:	f7ff fde3 	bl	100458e0 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
10045d1a:	f7ff fe43 	bl	100459a4 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
10045d1e:	f7ff fe4f 	bl	100459c0 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
10045d22:	f7ff fe5b 	bl	100459dc <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
10045d26:	2000      	movs	r0, #0
10045d28:	f7ff fe74 	bl	10045a14 <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
10045d2c:	2013      	movs	r0, #19
10045d2e:	183b      	adds	r3, r7, r0
10045d30:	2200      	movs	r2, #0
10045d32:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045d34:	183b      	adds	r3, r7, r0
10045d36:	781b      	ldrb	r3, [r3, #0]
10045d38:	183a      	adds	r2, r7, r0
10045d3a:	1c59      	adds	r1, r3, #1
10045d3c:	7011      	strb	r1, [r2, #0]
10045d3e:	001a      	movs	r2, r3
10045d40:	697b      	ldr	r3, [r7, #20]
10045d42:	189b      	adds	r3, r3, r2
10045d44:	2201      	movs	r2, #1
10045d46:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
10045d48:	183b      	adds	r3, r7, r0
10045d4a:	781b      	ldrb	r3, [r3, #0]
10045d4c:	183a      	adds	r2, r7, r0
10045d4e:	1c59      	adds	r1, r3, #1
10045d50:	7011      	strb	r1, [r2, #0]
10045d52:	001a      	movs	r2, r3
10045d54:	697b      	ldr	r3, [r7, #20]
10045d56:	189b      	adds	r3, r3, r2
10045d58:	225e      	movs	r2, #94	@ 0x5e
10045d5a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
10045d5c:	4a71      	ldr	r2, [pc, #452]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045d5e:	239e      	movs	r3, #158	@ 0x9e
10045d60:	009b      	lsls	r3, r3, #2
10045d62:	58d1      	ldr	r1, [r2, r3]
10045d64:	183b      	adds	r3, r7, r0
10045d66:	781b      	ldrb	r3, [r3, #0]
10045d68:	0004      	movs	r4, r0
10045d6a:	183a      	adds	r2, r7, r0
10045d6c:	1c58      	adds	r0, r3, #1
10045d6e:	7010      	strb	r0, [r2, #0]
10045d70:	001a      	movs	r2, r3
10045d72:	697b      	ldr	r3, [r7, #20]
10045d74:	189b      	adds	r3, r3, r2
10045d76:	b2ca      	uxtb	r2, r1
10045d78:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045d7a:	0020      	movs	r0, r4
10045d7c:	183b      	adds	r3, r7, r0
10045d7e:	781b      	ldrb	r3, [r3, #0]
10045d80:	183a      	adds	r2, r7, r0
10045d82:	1c59      	adds	r1, r3, #1
10045d84:	7011      	strb	r1, [r2, #0]
10045d86:	001a      	movs	r2, r3
10045d88:	697b      	ldr	r3, [r7, #20]
10045d8a:	189b      	adds	r3, r3, r2
10045d8c:	2201      	movs	r2, #1
10045d8e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
10045d90:	183b      	adds	r3, r7, r0
10045d92:	781b      	ldrb	r3, [r3, #0]
10045d94:	183a      	adds	r2, r7, r0
10045d96:	1c59      	adds	r1, r3, #1
10045d98:	7011      	strb	r1, [r2, #0]
10045d9a:	001a      	movs	r2, r3
10045d9c:	697b      	ldr	r3, [r7, #20]
10045d9e:	189b      	adds	r3, r3, r2
10045da0:	225d      	movs	r2, #93	@ 0x5d
10045da2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
10045da4:	4a5f      	ldr	r2, [pc, #380]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045da6:	239d      	movs	r3, #157	@ 0x9d
10045da8:	009b      	lsls	r3, r3, #2
10045daa:	58d1      	ldr	r1, [r2, r3]
10045dac:	183b      	adds	r3, r7, r0
10045dae:	781b      	ldrb	r3, [r3, #0]
10045db0:	0004      	movs	r4, r0
10045db2:	183a      	adds	r2, r7, r0
10045db4:	1c58      	adds	r0, r3, #1
10045db6:	7010      	strb	r0, [r2, #0]
10045db8:	001a      	movs	r2, r3
10045dba:	697b      	ldr	r3, [r7, #20]
10045dbc:	189b      	adds	r3, r3, r2
10045dbe:	b2ca      	uxtb	r2, r1
10045dc0:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10045dc2:	0020      	movs	r0, r4
10045dc4:	183b      	adds	r3, r7, r0
10045dc6:	781b      	ldrb	r3, [r3, #0]
10045dc8:	183a      	adds	r2, r7, r0
10045dca:	1c59      	adds	r1, r3, #1
10045dcc:	7011      	strb	r1, [r2, #0]
10045dce:	001a      	movs	r2, r3
10045dd0:	697b      	ldr	r3, [r7, #20]
10045dd2:	189b      	adds	r3, r3, r2
10045dd4:	2201      	movs	r2, #1
10045dd6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
10045dd8:	183b      	adds	r3, r7, r0
10045dda:	781b      	ldrb	r3, [r3, #0]
10045ddc:	183a      	adds	r2, r7, r0
10045dde:	1c59      	adds	r1, r3, #1
10045de0:	7011      	strb	r1, [r2, #0]
10045de2:	001a      	movs	r2, r3
10045de4:	697b      	ldr	r3, [r7, #20]
10045de6:	189b      	adds	r3, r3, r2
10045de8:	2252      	movs	r2, #82	@ 0x52
10045dea:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
10045dec:	4a4d      	ldr	r2, [pc, #308]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045dee:	2392      	movs	r3, #146	@ 0x92
10045df0:	009b      	lsls	r3, r3, #2
10045df2:	58d1      	ldr	r1, [r2, r3]
10045df4:	183b      	adds	r3, r7, r0
10045df6:	781b      	ldrb	r3, [r3, #0]
10045df8:	0004      	movs	r4, r0
10045dfa:	183a      	adds	r2, r7, r0
10045dfc:	1c58      	adds	r0, r3, #1
10045dfe:	7010      	strb	r0, [r2, #0]
10045e00:	001a      	movs	r2, r3
10045e02:	697b      	ldr	r3, [r7, #20]
10045e04:	189b      	adds	r3, r3, r2
10045e06:	b2ca      	uxtb	r2, r1
10045e08:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10045e0a:	0020      	movs	r0, r4
10045e0c:	183b      	adds	r3, r7, r0
10045e0e:	781b      	ldrb	r3, [r3, #0]
10045e10:	183a      	adds	r2, r7, r0
10045e12:	1c59      	adds	r1, r3, #1
10045e14:	7011      	strb	r1, [r2, #0]
10045e16:	001a      	movs	r2, r3
10045e18:	697b      	ldr	r3, [r7, #20]
10045e1a:	189b      	adds	r3, r3, r2
10045e1c:	2201      	movs	r2, #1
10045e1e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
10045e20:	183b      	adds	r3, r7, r0
10045e22:	781b      	ldrb	r3, [r3, #0]
10045e24:	183a      	adds	r2, r7, r0
10045e26:	1c59      	adds	r1, r3, #1
10045e28:	7011      	strb	r1, [r2, #0]
10045e2a:	001a      	movs	r2, r3
10045e2c:	697b      	ldr	r3, [r7, #20]
10045e2e:	189b      	adds	r3, r3, r2
10045e30:	2212      	movs	r2, #18
10045e32:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
10045e34:	4a3b      	ldr	r2, [pc, #236]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045e36:	23a4      	movs	r3, #164	@ 0xa4
10045e38:	005b      	lsls	r3, r3, #1
10045e3a:	58d1      	ldr	r1, [r2, r3]
10045e3c:	183b      	adds	r3, r7, r0
10045e3e:	781b      	ldrb	r3, [r3, #0]
10045e40:	0004      	movs	r4, r0
10045e42:	183a      	adds	r2, r7, r0
10045e44:	1c58      	adds	r0, r3, #1
10045e46:	7010      	strb	r0, [r2, #0]
10045e48:	001a      	movs	r2, r3
10045e4a:	697b      	ldr	r3, [r7, #20]
10045e4c:	189b      	adds	r3, r3, r2
10045e4e:	b2ca      	uxtb	r2, r1
10045e50:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045e52:	0020      	movs	r0, r4
10045e54:	183b      	adds	r3, r7, r0
10045e56:	781b      	ldrb	r3, [r3, #0]
10045e58:	183a      	adds	r2, r7, r0
10045e5a:	1c59      	adds	r1, r3, #1
10045e5c:	7011      	strb	r1, [r2, #0]
10045e5e:	001a      	movs	r2, r3
10045e60:	697b      	ldr	r3, [r7, #20]
10045e62:	189b      	adds	r3, r3, r2
10045e64:	2201      	movs	r2, #1
10045e66:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
10045e68:	183b      	adds	r3, r7, r0
10045e6a:	781b      	ldrb	r3, [r3, #0]
10045e6c:	183a      	adds	r2, r7, r0
10045e6e:	1c59      	adds	r1, r3, #1
10045e70:	7011      	strb	r1, [r2, #0]
10045e72:	001a      	movs	r2, r3
10045e74:	697b      	ldr	r3, [r7, #20]
10045e76:	189b      	adds	r3, r3, r2
10045e78:	2215      	movs	r2, #21
10045e7a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
10045e7c:	4a29      	ldr	r2, [pc, #164]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045e7e:	23aa      	movs	r3, #170	@ 0xaa
10045e80:	005b      	lsls	r3, r3, #1
10045e82:	58d1      	ldr	r1, [r2, r3]
10045e84:	183b      	adds	r3, r7, r0
10045e86:	781b      	ldrb	r3, [r3, #0]
10045e88:	0004      	movs	r4, r0
10045e8a:	183a      	adds	r2, r7, r0
10045e8c:	1c58      	adds	r0, r3, #1
10045e8e:	7010      	strb	r0, [r2, #0]
10045e90:	001a      	movs	r2, r3
10045e92:	697b      	ldr	r3, [r7, #20]
10045e94:	189b      	adds	r3, r3, r2
10045e96:	b2ca      	uxtb	r2, r1
10045e98:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045e9a:	0020      	movs	r0, r4
10045e9c:	183b      	adds	r3, r7, r0
10045e9e:	781b      	ldrb	r3, [r3, #0]
10045ea0:	183a      	adds	r2, r7, r0
10045ea2:	1c59      	adds	r1, r3, #1
10045ea4:	7011      	strb	r1, [r2, #0]
10045ea6:	001a      	movs	r2, r3
10045ea8:	697b      	ldr	r3, [r7, #20]
10045eaa:	189b      	adds	r3, r3, r2
10045eac:	2201      	movs	r2, #1
10045eae:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
10045eb0:	183b      	adds	r3, r7, r0
10045eb2:	781b      	ldrb	r3, [r3, #0]
10045eb4:	183a      	adds	r2, r7, r0
10045eb6:	1c59      	adds	r1, r3, #1
10045eb8:	7011      	strb	r1, [r2, #0]
10045eba:	001a      	movs	r2, r3
10045ebc:	697b      	ldr	r3, [r7, #20]
10045ebe:	189b      	adds	r3, r3, r2
10045ec0:	221a      	movs	r2, #26
10045ec2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
10045ec4:	4a17      	ldr	r2, [pc, #92]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045ec6:	23b4      	movs	r3, #180	@ 0xb4
10045ec8:	005b      	lsls	r3, r3, #1
10045eca:	58d1      	ldr	r1, [r2, r3]
10045ecc:	183b      	adds	r3, r7, r0
10045ece:	781b      	ldrb	r3, [r3, #0]
10045ed0:	0004      	movs	r4, r0
10045ed2:	183a      	adds	r2, r7, r0
10045ed4:	1c58      	adds	r0, r3, #1
10045ed6:	7010      	strb	r0, [r2, #0]
10045ed8:	001a      	movs	r2, r3
10045eda:	697b      	ldr	r3, [r7, #20]
10045edc:	189b      	adds	r3, r3, r2
10045ede:	b2ca      	uxtb	r2, r1
10045ee0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045ee2:	0020      	movs	r0, r4
10045ee4:	183b      	adds	r3, r7, r0
10045ee6:	781b      	ldrb	r3, [r3, #0]
10045ee8:	183a      	adds	r2, r7, r0
10045eea:	1c59      	adds	r1, r3, #1
10045eec:	7011      	strb	r1, [r2, #0]
10045eee:	001a      	movs	r2, r3
10045ef0:	697b      	ldr	r3, [r7, #20]
10045ef2:	189b      	adds	r3, r3, r2
10045ef4:	2201      	movs	r2, #1
10045ef6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
10045ef8:	183b      	adds	r3, r7, r0
10045efa:	781b      	ldrb	r3, [r3, #0]
10045efc:	183a      	adds	r2, r7, r0
10045efe:	1c59      	adds	r1, r3, #1
10045f00:	7011      	strb	r1, [r2, #0]
10045f02:	001a      	movs	r2, r3
10045f04:	697b      	ldr	r3, [r7, #20]
10045f06:	189b      	adds	r3, r3, r2
10045f08:	2222      	movs	r2, #34	@ 0x22
10045f0a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
10045f0c:	4a05      	ldr	r2, [pc, #20]	@ (10045f24 <HAL_RADIO_Init+0x488>)
10045f0e:	23c4      	movs	r3, #196	@ 0xc4
10045f10:	005b      	lsls	r3, r3, #1
10045f12:	58d1      	ldr	r1, [r2, r3]
10045f14:	183b      	adds	r3, r7, r0
10045f16:	781b      	ldrb	r3, [r3, #0]
10045f18:	0004      	movs	r4, r0
10045f1a:	e005      	b.n	10045f28 <HAL_RADIO_Init+0x48c>
10045f1c:	200000c0 	.word	0x200000c0
10045f20:	60001800 	.word	0x60001800
10045f24:	60001400 	.word	0x60001400
10045f28:	183a      	adds	r2, r7, r0
10045f2a:	1c58      	adds	r0, r3, #1
10045f2c:	7010      	strb	r0, [r2, #0]
10045f2e:	001a      	movs	r2, r3
10045f30:	697b      	ldr	r3, [r7, #20]
10045f32:	189b      	adds	r3, r3, r2
10045f34:	b2ca      	uxtb	r2, r1
10045f36:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045f38:	0020      	movs	r0, r4
10045f3a:	183b      	adds	r3, r7, r0
10045f3c:	781b      	ldrb	r3, [r3, #0]
10045f3e:	183a      	adds	r2, r7, r0
10045f40:	1c59      	adds	r1, r3, #1
10045f42:	7011      	strb	r1, [r2, #0]
10045f44:	001a      	movs	r2, r3
10045f46:	697b      	ldr	r3, [r7, #20]
10045f48:	189b      	adds	r3, r3, r2
10045f4a:	2201      	movs	r2, #1
10045f4c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
10045f4e:	183b      	adds	r3, r7, r0
10045f50:	781b      	ldrb	r3, [r3, #0]
10045f52:	183a      	adds	r2, r7, r0
10045f54:	1c59      	adds	r1, r3, #1
10045f56:	7011      	strb	r1, [r2, #0]
10045f58:	001a      	movs	r2, r3
10045f5a:	697b      	ldr	r3, [r7, #20]
10045f5c:	189b      	adds	r3, r3, r2
10045f5e:	2221      	movs	r2, #33	@ 0x21
10045f60:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
10045f62:	4a6d      	ldr	r2, [pc, #436]	@ (10046118 <HAL_RADIO_Init+0x67c>)
10045f64:	23c2      	movs	r3, #194	@ 0xc2
10045f66:	005b      	lsls	r3, r3, #1
10045f68:	58d1      	ldr	r1, [r2, r3]
10045f6a:	183b      	adds	r3, r7, r0
10045f6c:	781b      	ldrb	r3, [r3, #0]
10045f6e:	0004      	movs	r4, r0
10045f70:	183a      	adds	r2, r7, r0
10045f72:	1c58      	adds	r0, r3, #1
10045f74:	7010      	strb	r0, [r2, #0]
10045f76:	001a      	movs	r2, r3
10045f78:	697b      	ldr	r3, [r7, #20]
10045f7a:	189b      	adds	r3, r3, r2
10045f7c:	b2ca      	uxtb	r2, r1
10045f7e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045f80:	0020      	movs	r0, r4
10045f82:	183b      	adds	r3, r7, r0
10045f84:	781b      	ldrb	r3, [r3, #0]
10045f86:	183a      	adds	r2, r7, r0
10045f88:	1c59      	adds	r1, r3, #1
10045f8a:	7011      	strb	r1, [r2, #0]
10045f8c:	001a      	movs	r2, r3
10045f8e:	697b      	ldr	r3, [r7, #20]
10045f90:	189b      	adds	r3, r3, r2
10045f92:	2201      	movs	r2, #1
10045f94:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
10045f96:	183b      	adds	r3, r7, r0
10045f98:	781b      	ldrb	r3, [r3, #0]
10045f9a:	183a      	adds	r2, r7, r0
10045f9c:	1c59      	adds	r1, r3, #1
10045f9e:	7011      	strb	r1, [r2, #0]
10045fa0:	001a      	movs	r2, r3
10045fa2:	697b      	ldr	r3, [r7, #20]
10045fa4:	189b      	adds	r3, r3, r2
10045fa6:	2223      	movs	r2, #35	@ 0x23
10045fa8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
10045faa:	4a5b      	ldr	r2, [pc, #364]	@ (10046118 <HAL_RADIO_Init+0x67c>)
10045fac:	23c6      	movs	r3, #198	@ 0xc6
10045fae:	005b      	lsls	r3, r3, #1
10045fb0:	58d1      	ldr	r1, [r2, r3]
10045fb2:	183b      	adds	r3, r7, r0
10045fb4:	781b      	ldrb	r3, [r3, #0]
10045fb6:	0004      	movs	r4, r0
10045fb8:	183a      	adds	r2, r7, r0
10045fba:	1c58      	adds	r0, r3, #1
10045fbc:	7010      	strb	r0, [r2, #0]
10045fbe:	001a      	movs	r2, r3
10045fc0:	697b      	ldr	r3, [r7, #20]
10045fc2:	189b      	adds	r3, r3, r2
10045fc4:	b2ca      	uxtb	r2, r1
10045fc6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10045fc8:	0020      	movs	r0, r4
10045fca:	183b      	adds	r3, r7, r0
10045fcc:	781b      	ldrb	r3, [r3, #0]
10045fce:	183a      	adds	r2, r7, r0
10045fd0:	1c59      	adds	r1, r3, #1
10045fd2:	7011      	strb	r1, [r2, #0]
10045fd4:	001a      	movs	r2, r3
10045fd6:	697b      	ldr	r3, [r7, #20]
10045fd8:	189b      	adds	r3, r3, r2
10045fda:	2201      	movs	r2, #1
10045fdc:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
10045fde:	183b      	adds	r3, r7, r0
10045fe0:	781b      	ldrb	r3, [r3, #0]
10045fe2:	183a      	adds	r2, r7, r0
10045fe4:	1c59      	adds	r1, r3, #1
10045fe6:	7011      	strb	r1, [r2, #0]
10045fe8:	001a      	movs	r2, r3
10045fea:	697b      	ldr	r3, [r7, #20]
10045fec:	189b      	adds	r3, r3, r2
10045fee:	221b      	movs	r2, #27
10045ff0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
10045ff2:	4a49      	ldr	r2, [pc, #292]	@ (10046118 <HAL_RADIO_Init+0x67c>)
10045ff4:	23b6      	movs	r3, #182	@ 0xb6
10045ff6:	005b      	lsls	r3, r3, #1
10045ff8:	58d1      	ldr	r1, [r2, r3]
10045ffa:	183b      	adds	r3, r7, r0
10045ffc:	781b      	ldrb	r3, [r3, #0]
10045ffe:	0004      	movs	r4, r0
10046000:	183a      	adds	r2, r7, r0
10046002:	1c58      	adds	r0, r3, #1
10046004:	7010      	strb	r0, [r2, #0]
10046006:	001a      	movs	r2, r3
10046008:	697b      	ldr	r3, [r7, #20]
1004600a:	189b      	adds	r3, r3, r2
1004600c:	b2ca      	uxtb	r2, r1
1004600e:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
10046010:	0020      	movs	r0, r4
10046012:	183b      	adds	r3, r7, r0
10046014:	781b      	ldrb	r3, [r3, #0]
10046016:	183a      	adds	r2, r7, r0
10046018:	1c59      	adds	r1, r3, #1
1004601a:	7011      	strb	r1, [r2, #0]
1004601c:	001a      	movs	r2, r3
1004601e:	697b      	ldr	r3, [r7, #20]
10046020:	189b      	adds	r3, r3, r2
10046022:	2201      	movs	r2, #1
10046024:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
10046026:	183b      	adds	r3, r7, r0
10046028:	781b      	ldrb	r3, [r3, #0]
1004602a:	183a      	adds	r2, r7, r0
1004602c:	1c59      	adds	r1, r3, #1
1004602e:	7011      	strb	r1, [r2, #0]
10046030:	001a      	movs	r2, r3
10046032:	697b      	ldr	r3, [r7, #20]
10046034:	189b      	adds	r3, r3, r2
10046036:	2290      	movs	r2, #144	@ 0x90
10046038:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
1004603a:	4a37      	ldr	r2, [pc, #220]	@ (10046118 <HAL_RADIO_Init+0x67c>)
1004603c:	23d0      	movs	r3, #208	@ 0xd0
1004603e:	009b      	lsls	r3, r3, #2
10046040:	58d1      	ldr	r1, [r2, r3]
10046042:	183b      	adds	r3, r7, r0
10046044:	781b      	ldrb	r3, [r3, #0]
10046046:	0004      	movs	r4, r0
10046048:	183a      	adds	r2, r7, r0
1004604a:	1c58      	adds	r0, r3, #1
1004604c:	7010      	strb	r0, [r2, #0]
1004604e:	001a      	movs	r2, r3
10046050:	697b      	ldr	r3, [r7, #20]
10046052:	189b      	adds	r3, r3, r2
10046054:	b2ca      	uxtb	r2, r1
10046056:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10046058:	0020      	movs	r0, r4
1004605a:	183b      	adds	r3, r7, r0
1004605c:	781b      	ldrb	r3, [r3, #0]
1004605e:	183a      	adds	r2, r7, r0
10046060:	1c59      	adds	r1, r3, #1
10046062:	7011      	strb	r1, [r2, #0]
10046064:	001a      	movs	r2, r3
10046066:	697b      	ldr	r3, [r7, #20]
10046068:	189b      	adds	r3, r3, r2
1004606a:	2201      	movs	r2, #1
1004606c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
1004606e:	183b      	adds	r3, r7, r0
10046070:	781b      	ldrb	r3, [r3, #0]
10046072:	183a      	adds	r2, r7, r0
10046074:	1c59      	adds	r1, r3, #1
10046076:	7011      	strb	r1, [r2, #0]
10046078:	001a      	movs	r2, r3
1004607a:	697b      	ldr	r3, [r7, #20]
1004607c:	189b      	adds	r3, r3, r2
1004607e:	2291      	movs	r2, #145	@ 0x91
10046080:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
10046082:	4a25      	ldr	r2, [pc, #148]	@ (10046118 <HAL_RADIO_Init+0x67c>)
10046084:	23d1      	movs	r3, #209	@ 0xd1
10046086:	009b      	lsls	r3, r3, #2
10046088:	58d1      	ldr	r1, [r2, r3]
1004608a:	183b      	adds	r3, r7, r0
1004608c:	781b      	ldrb	r3, [r3, #0]
1004608e:	0004      	movs	r4, r0
10046090:	183a      	adds	r2, r7, r0
10046092:	1c58      	adds	r0, r3, #1
10046094:	7010      	strb	r0, [r2, #0]
10046096:	001a      	movs	r2, r3
10046098:	697b      	ldr	r3, [r7, #20]
1004609a:	189b      	adds	r3, r3, r2
1004609c:	b2ca      	uxtb	r2, r1
1004609e:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
100460a0:	193b      	adds	r3, r7, r4
100460a2:	781b      	ldrb	r3, [r3, #0]
100460a4:	193a      	adds	r2, r7, r4
100460a6:	1c59      	adds	r1, r3, #1
100460a8:	7011      	strb	r1, [r2, #0]
100460aa:	001a      	movs	r2, r3
100460ac:	697b      	ldr	r3, [r7, #20]
100460ae:	189b      	adds	r3, r3, r2
100460b0:	2200      	movs	r2, #0
100460b2:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
100460b4:	4a19      	ldr	r2, [pc, #100]	@ (1004611c <HAL_RADIO_Init+0x680>)
100460b6:	4b1a      	ldr	r3, [pc, #104]	@ (10046120 <HAL_RADIO_Init+0x684>)
100460b8:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
100460ba:	4a18      	ldr	r2, [pc, #96]	@ (1004611c <HAL_RADIO_Init+0x680>)
100460bc:	4b18      	ldr	r3, [pc, #96]	@ (10046120 <HAL_RADIO_Init+0x684>)
100460be:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
100460c0:	4a18      	ldr	r2, [pc, #96]	@ (10046124 <HAL_RADIO_Init+0x688>)
100460c2:	4b17      	ldr	r3, [pc, #92]	@ (10046120 <HAL_RADIO_Init+0x684>)
100460c4:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
100460c6:	4b16      	ldr	r3, [pc, #88]	@ (10046120 <HAL_RADIO_Init+0x684>)
100460c8:	2200      	movs	r2, #0
100460ca:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
100460cc:	4b14      	ldr	r3, [pc, #80]	@ (10046120 <HAL_RADIO_Init+0x684>)
100460ce:	681b      	ldr	r3, [r3, #0]
100460d0:	0018      	movs	r0, r3
100460d2:	f7ff fb3d 	bl	10045750 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
100460d6:	4b10      	ldr	r3, [pc, #64]	@ (10046118 <HAL_RADIO_Init+0x67c>)
100460d8:	2201      	movs	r2, #1
100460da:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
100460dc:	f7ff fc8c 	bl	100459f8 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
100460e0:	23c0      	movs	r3, #192	@ 0xc0
100460e2:	05db      	lsls	r3, r3, #23
100460e4:	685b      	ldr	r3, [r3, #4]
100460e6:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
100460e8:	23c0      	movs	r3, #192	@ 0xc0
100460ea:	05db      	lsls	r3, r3, #23
100460ec:	68fa      	ldr	r2, [r7, #12]
100460ee:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
100460f0:	4b0d      	ldr	r3, [pc, #52]	@ (10046128 <HAL_RADIO_Init+0x68c>)
100460f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100460f4:	4b0c      	ldr	r3, [pc, #48]	@ (10046128 <HAL_RADIO_Init+0x68c>)
100460f6:	2101      	movs	r1, #1
100460f8:	430a      	orrs	r2, r1
100460fa:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
100460fc:	4b0a      	ldr	r3, [pc, #40]	@ (10046128 <HAL_RADIO_Init+0x68c>)
100460fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10046100:	4b09      	ldr	r3, [pc, #36]	@ (10046128 <HAL_RADIO_Init+0x68c>)
10046102:	2101      	movs	r1, #1
10046104:	430a      	orrs	r2, r1
10046106:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
10046108:	23c0      	movs	r3, #192	@ 0xc0
1004610a:	05db      	lsls	r3, r3, #23
1004610c:	685b      	ldr	r3, [r3, #4]
1004610e:	60fb      	str	r3, [r7, #12]

  return;
10046110:	46c0      	nop			@ (mov r8, r8)
}
10046112:	46bd      	mov	sp, r7
10046114:	b00d      	add	sp, #52	@ 0x34
10046116:	bd90      	pop	{r4, r7, pc}
10046118:	60001400 	.word	0x60001400
1004611c:	200004e8 	.word	0x200004e8
10046120:	200004d8 	.word	0x200004d8
10046124:	200004e4 	.word	0x200004e4
10046128:	60001800 	.word	0x60001800

1004612c <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
1004612c:	b580      	push	{r7, lr}
1004612e:	b082      	sub	sp, #8
10046130:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
10046132:	23c0      	movs	r3, #192	@ 0xc0
10046134:	05db      	lsls	r3, r3, #23
10046136:	69db      	ldr	r3, [r3, #28]
10046138:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
1004613a:	23c0      	movs	r3, #192	@ 0xc0
1004613c:	05db      	lsls	r3, r3, #23
1004613e:	685b      	ldr	r3, [r3, #4]
10046140:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
10046142:	23c0      	movs	r3, #192	@ 0xc0
10046144:	05db      	lsls	r3, r3, #23
10046146:	683a      	ldr	r2, [r7, #0]
10046148:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
1004614a:	f000 fcbd 	bl	10046ac8 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
1004614e:	687a      	ldr	r2, [r7, #4]
10046150:	683b      	ldr	r3, [r7, #0]
10046152:	4313      	orrs	r3, r2
10046154:	0018      	movs	r0, r3
10046156:	f7fb f9ea 	bl	1004152e <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
1004615a:	f000 fcaf 	bl	10046abc <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
1004615e:	23c0      	movs	r3, #192	@ 0xc0
10046160:	05db      	lsls	r3, r3, #23
10046162:	685b      	ldr	r3, [r3, #4]
10046164:	603b      	str	r3, [r7, #0]
}
10046166:	46c0      	nop			@ (mov r8, r8)
10046168:	46bd      	mov	sp, r7
1004616a:	b002      	add	sp, #8
1004616c:	bd80      	pop	{r7, pc}

1004616e <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
1004616e:	b580      	push	{r7, lr}
10046170:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
10046172:	f7fe f9f5 	bl	10044560 <HAL_RADIO_TxRxSeqCallback>
}
10046176:	46c0      	nop			@ (mov r8, r8)
10046178:	46bd      	mov	sp, r7
1004617a:	bd80      	pop	{r7, pc}

1004617c <__NVIC_EnableIRQ>:
{
1004617c:	b580      	push	{r7, lr}
1004617e:	b082      	sub	sp, #8
10046180:	af00      	add	r7, sp, #0
10046182:	0002      	movs	r2, r0
10046184:	1dfb      	adds	r3, r7, #7
10046186:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10046188:	1dfb      	adds	r3, r7, #7
1004618a:	781b      	ldrb	r3, [r3, #0]
1004618c:	2b7f      	cmp	r3, #127	@ 0x7f
1004618e:	d809      	bhi.n	100461a4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10046190:	1dfb      	adds	r3, r7, #7
10046192:	781b      	ldrb	r3, [r3, #0]
10046194:	001a      	movs	r2, r3
10046196:	231f      	movs	r3, #31
10046198:	401a      	ands	r2, r3
1004619a:	4b04      	ldr	r3, [pc, #16]	@ (100461ac <__NVIC_EnableIRQ+0x30>)
1004619c:	2101      	movs	r1, #1
1004619e:	4091      	lsls	r1, r2
100461a0:	000a      	movs	r2, r1
100461a2:	601a      	str	r2, [r3, #0]
}
100461a4:	46c0      	nop			@ (mov r8, r8)
100461a6:	46bd      	mov	sp, r7
100461a8:	b002      	add	sp, #8
100461aa:	bd80      	pop	{r7, pc}
100461ac:	e000e100 	.word	0xe000e100

100461b0 <LL_RADIO_TIMER_EnableTimer1>:
{
100461b0:	b580      	push	{r7, lr}
100461b2:	b082      	sub	sp, #8
100461b4:	af00      	add	r7, sp, #0
100461b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
100461b8:	687b      	ldr	r3, [r7, #4]
100461ba:	68db      	ldr	r3, [r3, #12]
100461bc:	2203      	movs	r2, #3
100461be:	4393      	bics	r3, r2
100461c0:	2202      	movs	r2, #2
100461c2:	431a      	orrs	r2, r3
100461c4:	687b      	ldr	r3, [r7, #4]
100461c6:	60da      	str	r2, [r3, #12]
}
100461c8:	46c0      	nop			@ (mov r8, r8)
100461ca:	46bd      	mov	sp, r7
100461cc:	b002      	add	sp, #8
100461ce:	bd80      	pop	{r7, pc}

100461d0 <LL_RADIO_TIMER_DisableTimer1>:
{
100461d0:	b580      	push	{r7, lr}
100461d2:	b082      	sub	sp, #8
100461d4:	af00      	add	r7, sp, #0
100461d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100461d8:	687b      	ldr	r3, [r7, #4]
100461da:	68db      	ldr	r3, [r3, #12]
100461dc:	2203      	movs	r2, #3
100461de:	4393      	bics	r3, r2
100461e0:	001a      	movs	r2, r3
100461e2:	687b      	ldr	r3, [r7, #4]
100461e4:	60da      	str	r2, [r3, #12]
}
100461e6:	46c0      	nop			@ (mov r8, r8)
100461e8:	46bd      	mov	sp, r7
100461ea:	b002      	add	sp, #8
100461ec:	bd80      	pop	{r7, pc}

100461ee <LL_RADIO_TIMER_DisableTimer2>:
{
100461ee:	b580      	push	{r7, lr}
100461f0:	b082      	sub	sp, #8
100461f2:	af00      	add	r7, sp, #0
100461f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100461f6:	687b      	ldr	r3, [r7, #4]
100461f8:	68db      	ldr	r3, [r3, #12]
100461fa:	2203      	movs	r2, #3
100461fc:	4393      	bics	r3, r2
100461fe:	001a      	movs	r2, r3
10046200:	687b      	ldr	r3, [r7, #4]
10046202:	60da      	str	r2, [r3, #12]
}
10046204:	46c0      	nop			@ (mov r8, r8)
10046206:	46bd      	mov	sp, r7
10046208:	b002      	add	sp, #8
1004620a:	bd80      	pop	{r7, pc}

1004620c <LL_RADIO_TIMER_SetTimeout>:
{
1004620c:	b580      	push	{r7, lr}
1004620e:	b082      	sub	sp, #8
10046210:	af00      	add	r7, sp, #0
10046212:	6078      	str	r0, [r7, #4]
10046214:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
10046216:	687b      	ldr	r3, [r7, #4]
10046218:	683a      	ldr	r2, [r7, #0]
1004621a:	611a      	str	r2, [r3, #16]
}
1004621c:	46c0      	nop			@ (mov r8, r8)
1004621e:	46bd      	mov	sp, r7
10046220:	b002      	add	sp, #8
10046222:	bd80      	pop	{r7, pc}

10046224 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
10046224:	b580      	push	{r7, lr}
10046226:	b082      	sub	sp, #8
10046228:	af00      	add	r7, sp, #0
1004622a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004622c:	687b      	ldr	r3, [r7, #4]
1004622e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046230:	2280      	movs	r2, #128	@ 0x80
10046232:	05d2      	lsls	r2, r2, #23
10046234:	431a      	orrs	r2, r3
10046236:	687b      	ldr	r3, [r7, #4]
10046238:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004623a:	46c0      	nop			@ (mov r8, r8)
1004623c:	46bd      	mov	sp, r7
1004623e:	b002      	add	sp, #8
10046240:	bd80      	pop	{r7, pc}
	...

10046244 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10046244:	b580      	push	{r7, lr}
10046246:	b082      	sub	sp, #8
10046248:	af00      	add	r7, sp, #0
1004624a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004624c:	687b      	ldr	r3, [r7, #4]
1004624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046250:	4a03      	ldr	r2, [pc, #12]	@ (10046260 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10046252:	401a      	ands	r2, r3
10046254:	687b      	ldr	r3, [r7, #4]
10046256:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046258:	46c0      	nop			@ (mov r8, r8)
1004625a:	46bd      	mov	sp, r7
1004625c:	b002      	add	sp, #8
1004625e:	bd80      	pop	{r7, pc}
10046260:	bfffffff 	.word	0xbfffffff

10046264 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
10046264:	b580      	push	{r7, lr}
10046266:	b082      	sub	sp, #8
10046268:	af00      	add	r7, sp, #0
1004626a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004626c:	687b      	ldr	r3, [r7, #4]
1004626e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046270:	2280      	movs	r2, #128	@ 0x80
10046272:	05d2      	lsls	r2, r2, #23
10046274:	431a      	orrs	r2, r3
10046276:	687b      	ldr	r3, [r7, #4]
10046278:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004627a:	46c0      	nop			@ (mov r8, r8)
1004627c:	46bd      	mov	sp, r7
1004627e:	b002      	add	sp, #8
10046280:	bd80      	pop	{r7, pc}
	...

10046284 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
10046284:	b580      	push	{r7, lr}
10046286:	b082      	sub	sp, #8
10046288:	af00      	add	r7, sp, #0
1004628a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004628c:	687b      	ldr	r3, [r7, #4]
1004628e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10046290:	4a03      	ldr	r2, [pc, #12]	@ (100462a0 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
10046292:	401a      	ands	r2, r3
10046294:	687b      	ldr	r3, [r7, #4]
10046296:	631a      	str	r2, [r3, #48]	@ 0x30
}
10046298:	46c0      	nop			@ (mov r8, r8)
1004629a:	46bd      	mov	sp, r7
1004629c:	b002      	add	sp, #8
1004629e:	bd80      	pop	{r7, pc}
100462a0:	bfffffff 	.word	0xbfffffff

100462a4 <LL_RADIO_TIMER_SetWakeupOffset>:
{
100462a4:	b580      	push	{r7, lr}
100462a6:	b082      	sub	sp, #8
100462a8:	af00      	add	r7, sp, #0
100462aa:	6078      	str	r0, [r7, #4]
100462ac:	000a      	movs	r2, r1
100462ae:	1cfb      	adds	r3, r7, #3
100462b0:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
100462b2:	1cfb      	adds	r3, r7, #3
100462b4:	781a      	ldrb	r2, [r3, #0]
100462b6:	687b      	ldr	r3, [r7, #4]
100462b8:	609a      	str	r2, [r3, #8]
}
100462ba:	46c0      	nop			@ (mov r8, r8)
100462bc:	46bd      	mov	sp, r7
100462be:	b002      	add	sp, #8
100462c0:	bd80      	pop	{r7, pc}

100462c2 <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
100462c2:	b580      	push	{r7, lr}
100462c4:	b082      	sub	sp, #8
100462c6:	af00      	add	r7, sp, #0
100462c8:	6078      	str	r0, [r7, #4]
100462ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
100462cc:	687b      	ldr	r3, [r7, #4]
100462ce:	683a      	ldr	r2, [r7, #0]
100462d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
100462d2:	46c0      	nop			@ (mov r8, r8)
100462d4:	46bd      	mov	sp, r7
100462d6:	b002      	add	sp, #8
100462d8:	bd80      	pop	{r7, pc}

100462da <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
100462da:	b580      	push	{r7, lr}
100462dc:	b082      	sub	sp, #8
100462de:	af00      	add	r7, sp, #0
100462e0:	6078      	str	r0, [r7, #4]
100462e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
100462e4:	687b      	ldr	r3, [r7, #4]
100462e6:	683a      	ldr	r2, [r7, #0]
100462e8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100462ea:	46c0      	nop			@ (mov r8, r8)
100462ec:	46bd      	mov	sp, r7
100462ee:	b002      	add	sp, #8
100462f0:	bd80      	pop	{r7, pc}

100462f2 <LL_RADIO_TIMER_GetAbsoluteTime>:
{
100462f2:	b580      	push	{r7, lr}
100462f4:	b082      	sub	sp, #8
100462f6:	af00      	add	r7, sp, #0
100462f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
100462fa:	687b      	ldr	r3, [r7, #4]
100462fc:	691b      	ldr	r3, [r3, #16]
}
100462fe:	0018      	movs	r0, r3
10046300:	46bd      	mov	sp, r7
10046302:	b002      	add	sp, #8
10046304:	bd80      	pop	{r7, pc}

10046306 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
10046306:	b580      	push	{r7, lr}
10046308:	b082      	sub	sp, #8
1004630a:	af00      	add	r7, sp, #0
1004630c:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
1004630e:	687b      	ldr	r3, [r7, #4]
10046310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046312:	2280      	movs	r2, #128	@ 0x80
10046314:	0592      	lsls	r2, r2, #22
10046316:	431a      	orrs	r2, r3
10046318:	687b      	ldr	r3, [r7, #4]
1004631a:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004631c:	46c0      	nop			@ (mov r8, r8)
1004631e:	46bd      	mov	sp, r7
10046320:	b002      	add	sp, #8
10046322:	bd80      	pop	{r7, pc}

10046324 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
10046324:	b580      	push	{r7, lr}
10046326:	b082      	sub	sp, #8
10046328:	af00      	add	r7, sp, #0
1004632a:	6078      	str	r0, [r7, #4]
1004632c:	000a      	movs	r2, r1
1004632e:	1cfb      	adds	r3, r7, #3
10046330:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
10046332:	46c0      	nop			@ (mov r8, r8)
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
#endif
}
10046334:	46bd      	mov	sp, r7
10046336:	b002      	add	sp, #8
10046338:	bd80      	pop	{r7, pc}

1004633a <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004633a:	b580      	push	{r7, lr}
1004633c:	b082      	sub	sp, #8
1004633e:	af00      	add	r7, sp, #0
10046340:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
10046342:	687b      	ldr	r3, [r7, #4]
10046344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10046346:	2201      	movs	r2, #1
10046348:	431a      	orrs	r2, r3
1004634a:	687b      	ldr	r3, [r7, #4]
1004634c:	649a      	str	r2, [r3, #72]	@ 0x48
}
1004634e:	46c0      	nop			@ (mov r8, r8)
10046350:	46bd      	mov	sp, r7
10046352:	b002      	add	sp, #8
10046354:	bd80      	pop	{r7, pc}

10046356 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046356:	b580      	push	{r7, lr}
10046358:	b082      	sub	sp, #8
1004635a:	af00      	add	r7, sp, #0
1004635c:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
1004635e:	687b      	ldr	r3, [r7, #4]
10046360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10046362:	2201      	movs	r2, #1
10046364:	431a      	orrs	r2, r3
10046366:	687b      	ldr	r3, [r7, #4]
10046368:	64da      	str	r2, [r3, #76]	@ 0x4c
}
1004636a:	46c0      	nop			@ (mov r8, r8)
1004636c:	46bd      	mov	sp, r7
1004636e:	b002      	add	sp, #8
10046370:	bd80      	pop	{r7, pc}

10046372 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
10046372:	b580      	push	{r7, lr}
10046374:	b082      	sub	sp, #8
10046376:	af00      	add	r7, sp, #0
10046378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
1004637a:	687b      	ldr	r3, [r7, #4]
1004637c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004637e:	2201      	movs	r2, #1
10046380:	4013      	ands	r3, r2
10046382:	2b01      	cmp	r3, #1
10046384:	d101      	bne.n	1004638a <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
10046386:	2301      	movs	r3, #1
10046388:	e000      	b.n	1004638c <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
1004638a:	2300      	movs	r3, #0
}
1004638c:	0018      	movs	r0, r3
1004638e:	46bd      	mov	sp, r7
10046390:	b002      	add	sp, #8
10046392:	bd80      	pop	{r7, pc}

10046394 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
10046394:	b580      	push	{r7, lr}
10046396:	b082      	sub	sp, #8
10046398:	af00      	add	r7, sp, #0
1004639a:	6078      	str	r0, [r7, #4]
1004639c:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
1004639e:	687b      	ldr	r3, [r7, #4]
100463a0:	683a      	ldr	r2, [r7, #0]
100463a2:	605a      	str	r2, [r3, #4]
}
100463a4:	46c0      	nop			@ (mov r8, r8)
100463a6:	46bd      	mov	sp, r7
100463a8:	b002      	add	sp, #8
100463aa:	bd80      	pop	{r7, pc}

100463ac <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100463ac:	b580      	push	{r7, lr}
100463ae:	b082      	sub	sp, #8
100463b0:	af00      	add	r7, sp, #0
100463b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
100463b4:	687b      	ldr	r3, [r7, #4]
100463b6:	2200      	movs	r2, #0
100463b8:	609a      	str	r2, [r3, #8]
}
100463ba:	46c0      	nop			@ (mov r8, r8)
100463bc:	46bd      	mov	sp, r7
100463be:	b002      	add	sp, #8
100463c0:	bd80      	pop	{r7, pc}

100463c2 <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100463c2:	b580      	push	{r7, lr}
100463c4:	b082      	sub	sp, #8
100463c6:	af00      	add	r7, sp, #0
100463c8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
100463ca:	687b      	ldr	r3, [r7, #4]
100463cc:	689b      	ldr	r3, [r3, #8]
}
100463ce:	0018      	movs	r0, r3
100463d0:	46bd      	mov	sp, r7
100463d2:	b002      	add	sp, #8
100463d4:	bd80      	pop	{r7, pc}

100463d6 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100463d6:	b580      	push	{r7, lr}
100463d8:	b082      	sub	sp, #8
100463da:	af00      	add	r7, sp, #0
100463dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
100463de:	687b      	ldr	r3, [r7, #4]
100463e0:	68db      	ldr	r3, [r3, #12]
}
100463e2:	0018      	movs	r0, r3
100463e4:	46bd      	mov	sp, r7
100463e6:	b002      	add	sp, #8
100463e8:	bd80      	pop	{r7, pc}

100463ea <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100463ea:	b580      	push	{r7, lr}
100463ec:	b082      	sub	sp, #8
100463ee:	af00      	add	r7, sp, #0
100463f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
100463f2:	687b      	ldr	r3, [r7, #4]
100463f4:	691b      	ldr	r3, [r3, #16]
100463f6:	2201      	movs	r2, #1
100463f8:	431a      	orrs	r2, r3
100463fa:	687b      	ldr	r3, [r7, #4]
100463fc:	611a      	str	r2, [r3, #16]
}
100463fe:	46c0      	nop			@ (mov r8, r8)
10046400:	46bd      	mov	sp, r7
10046402:	b002      	add	sp, #8
10046404:	bd80      	pop	{r7, pc}

10046406 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10046406:	b580      	push	{r7, lr}
10046408:	b082      	sub	sp, #8
1004640a:	af00      	add	r7, sp, #0
1004640c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
1004640e:	687b      	ldr	r3, [r7, #4]
10046410:	691b      	ldr	r3, [r3, #16]
10046412:	2201      	movs	r2, #1
10046414:	4013      	ands	r3, r2
10046416:	2b01      	cmp	r3, #1
10046418:	d101      	bne.n	1004641e <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004641a:	2301      	movs	r3, #1
1004641c:	e000      	b.n	10046420 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
1004641e:	2300      	movs	r3, #0
}
10046420:	0018      	movs	r0, r3
10046422:	46bd      	mov	sp, r7
10046424:	b002      	add	sp, #8
10046426:	bd80      	pop	{r7, pc}

10046428 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
10046428:	b5f0      	push	{r4, r5, r6, r7, lr}
1004642a:	b083      	sub	sp, #12
1004642c:	af00      	add	r7, sp, #0
1004642e:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046430:	4b70      	ldr	r3, [pc, #448]	@ (100465f4 <HAL_RADIO_TIMER_Init+0x1cc>)
10046432:	0018      	movs	r0, r3
10046434:	f7ff ff8f 	bl	10046356 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
10046438:	4b6e      	ldr	r3, [pc, #440]	@ (100465f4 <HAL_RADIO_TIMER_Init+0x1cc>)
1004643a:	0018      	movs	r0, r3
1004643c:	f7ff ff7d 	bl	1004633a <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
10046440:	2017      	movs	r0, #23
10046442:	f7ff fe9b 	bl	1004617c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
10046446:	2014      	movs	r0, #20
10046448:	f7ff fe98 	bl	1004617c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
1004644c:	687b      	ldr	r3, [r7, #4]
1004644e:	685b      	ldr	r3, [r3, #4]
10046450:	1e5a      	subs	r2, r3, #1
10046452:	4193      	sbcs	r3, r2
10046454:	b2db      	uxtb	r3, r3
10046456:	001a      	movs	r2, r3
10046458:	4b67      	ldr	r3, [pc, #412]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004645a:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
1004645c:	4b66      	ldr	r3, [pc, #408]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004645e:	781b      	ldrb	r3, [r3, #0]
10046460:	2b00      	cmp	r3, #0
10046462:	d103      	bne.n	1004646c <HAL_RADIO_TIMER_Init+0x44>
10046464:	687b      	ldr	r3, [r7, #4]
10046466:	789b      	ldrb	r3, [r3, #2]
10046468:	2b00      	cmp	r3, #0
1004646a:	d002      	beq.n	10046472 <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
1004646c:	f000 fc04 	bl	10046c78 <_calibrationProcedure>
10046470:	e010      	b.n	10046494 <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
10046472:	4b61      	ldr	r3, [pc, #388]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046474:	22c8      	movs	r2, #200	@ 0xc8
10046476:	0352      	lsls	r2, r2, #13
10046478:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
1004647a:	4b5f      	ldr	r3, [pc, #380]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004647c:	22c8      	movs	r2, #200	@ 0xc8
1004647e:	0352      	lsls	r2, r2, #13
10046480:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
10046482:	4b5d      	ldr	r3, [pc, #372]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046484:	4a5d      	ldr	r2, [pc, #372]	@ (100465fc <HAL_RADIO_TIMER_Init+0x1d4>)
10046486:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
10046488:	4b5b      	ldr	r3, [pc, #364]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004648a:	4a5d      	ldr	r2, [pc, #372]	@ (10046600 <HAL_RADIO_TIMER_Init+0x1d8>)
1004648c:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
1004648e:	4b5a      	ldr	r3, [pc, #360]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046490:	4a5c      	ldr	r2, [pc, #368]	@ (10046604 <HAL_RADIO_TIMER_Init+0x1dc>)
10046492:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
10046494:	687b      	ldr	r3, [r7, #4]
10046496:	685b      	ldr	r3, [r3, #4]
10046498:	2b00      	cmp	r3, #0
1004649a:	d108      	bne.n	100464ae <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
1004649c:	23a0      	movs	r3, #160	@ 0xa0
1004649e:	05db      	lsls	r3, r3, #23
100464a0:	0018      	movs	r0, r3
100464a2:	f000 fb1d 	bl	10046ae0 <HAL_RADIO_TIMER_MachineTimeToSysTime>
100464a6:	0002      	movs	r2, r0
100464a8:	4b53      	ldr	r3, [pc, #332]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100464aa:	605a      	str	r2, [r3, #4]
100464ac:	e01d      	b.n	100464ea <HAL_RADIO_TIMER_Init+0xc2>
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
100464ae:	687b      	ldr	r3, [r7, #4]
100464b0:	685b      	ldr	r3, [r3, #4]
100464b2:	031b      	lsls	r3, r3, #12
100464b4:	210a      	movs	r1, #10
100464b6:	0018      	movs	r0, r3
100464b8:	f7f9 feba 	bl	10040230 <__udivsi3>
100464bc:	0003      	movs	r3, r0
100464be:	001a      	movs	r2, r3
100464c0:	4b4d      	ldr	r3, [pc, #308]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100464c2:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100464c4:	4b4c      	ldr	r3, [pc, #304]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100464c6:	685e      	ldr	r6, [r3, #4]
100464c8:	4b4f      	ldr	r3, [pc, #316]	@ (10046608 <HAL_RADIO_TIMER_Init+0x1e0>)
100464ca:	0018      	movs	r0, r3
100464cc:	f000 fb08 	bl	10046ae0 <HAL_RADIO_TIMER_MachineTimeToSysTime>
100464d0:	0003      	movs	r3, r0
100464d2:	429e      	cmp	r6, r3
100464d4:	d202      	bcs.n	100464dc <HAL_RADIO_TIMER_Init+0xb4>
100464d6:	4b48      	ldr	r3, [pc, #288]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100464d8:	685a      	ldr	r2, [r3, #4]
100464da:	e004      	b.n	100464e6 <HAL_RADIO_TIMER_Init+0xbe>
100464dc:	4b4a      	ldr	r3, [pc, #296]	@ (10046608 <HAL_RADIO_TIMER_Init+0x1e0>)
100464de:	0018      	movs	r0, r3
100464e0:	f000 fafe 	bl	10046ae0 <HAL_RADIO_TIMER_MachineTimeToSysTime>
100464e4:	0002      	movs	r2, r0
100464e6:	4b44      	ldr	r3, [pc, #272]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100464e8:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
100464ea:	4b43      	ldr	r3, [pc, #268]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100464ec:	2200      	movs	r2, #0
100464ee:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
100464f0:	687b      	ldr	r3, [r7, #4]
100464f2:	881b      	ldrh	r3, [r3, #0]
100464f4:	001a      	movs	r2, r3
100464f6:	4b40      	ldr	r3, [pc, #256]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100464f8:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
100464fa:	4b3f      	ldr	r3, [pc, #252]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100464fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
100464fe:	b29a      	uxth	r2, r3
10046500:	4b3d      	ldr	r3, [pc, #244]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046502:	699b      	ldr	r3, [r3, #24]
10046504:	0019      	movs	r1, r3
10046506:	0010      	movs	r0, r2
10046508:	f000 fd2a 	bl	10046f60 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
1004650c:	4b3a      	ldr	r3, [pc, #232]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004650e:	2284      	movs	r2, #132	@ 0x84
10046510:	2100      	movs	r1, #0
10046512:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
10046514:	4938      	ldr	r1, [pc, #224]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046516:	2200      	movs	r2, #0
10046518:	2300      	movs	r3, #0
1004651a:	670a      	str	r2, [r1, #112]	@ 0x70
1004651c:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004651e:	4b35      	ldr	r3, [pc, #212]	@ (100465f4 <HAL_RADIO_TIMER_Init+0x1cc>)
10046520:	0018      	movs	r0, r3
10046522:	f7ff fee6 	bl	100462f2 <LL_RADIO_TIMER_GetAbsoluteTime>
10046526:	0002      	movs	r2, r0
10046528:	4b33      	ldr	r3, [pc, #204]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004652a:	2180      	movs	r1, #128	@ 0x80
1004652c:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004652e:	4932      	ldr	r1, [pc, #200]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046530:	2200      	movs	r2, #0
10046532:	2300      	movs	r3, #0
10046534:	678a      	str	r2, [r1, #120]	@ 0x78
10046536:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
10046538:	492f      	ldr	r1, [pc, #188]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004653a:	2200      	movs	r2, #0
1004653c:	2300      	movs	r3, #0
1004653e:	628a      	str	r2, [r1, #40]	@ 0x28
10046540:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
10046542:	4b2d      	ldr	r3, [pc, #180]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046544:	2234      	movs	r2, #52	@ 0x34
10046546:	2100      	movs	r1, #0
10046548:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004654a:	4b2b      	ldr	r3, [pc, #172]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004654c:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004654e:	4b2a      	ldr	r3, [pc, #168]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046550:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10046552:	0019      	movs	r1, r3
10046554:	4b2d      	ldr	r3, [pc, #180]	@ (1004660c <HAL_RADIO_TIMER_Init+0x1e4>)
10046556:	001a      	movs	r2, r3
10046558:	f7f9 fdb2 	bl	100400c0 <blue_unit_conversion>
1004655c:	0002      	movs	r2, r0
1004655e:	4b26      	ldr	r3, [pc, #152]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046560:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
10046562:	4b25      	ldr	r3, [pc, #148]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046564:	7819      	ldrb	r1, [r3, #0]
10046566:	4b24      	ldr	r3, [pc, #144]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046568:	2294      	movs	r2, #148	@ 0x94
1004656a:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
1004656c:	4b22      	ldr	r3, [pc, #136]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004656e:	228c      	movs	r2, #140	@ 0x8c
10046570:	2100      	movs	r1, #0
10046572:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
10046574:	4b20      	ldr	r3, [pc, #128]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046576:	2290      	movs	r2, #144	@ 0x90
10046578:	2101      	movs	r1, #1
1004657a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004657c:	4b1e      	ldr	r3, [pc, #120]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004657e:	2293      	movs	r2, #147	@ 0x93
10046580:	2100      	movs	r1, #0
10046582:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
10046584:	4b1c      	ldr	r3, [pc, #112]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046586:	2291      	movs	r2, #145	@ 0x91
10046588:	2100      	movs	r1, #0
1004658a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
1004658c:	4b1a      	ldr	r3, [pc, #104]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004658e:	2292      	movs	r2, #146	@ 0x92
10046590:	2100      	movs	r1, #0
10046592:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046594:	4b18      	ldr	r3, [pc, #96]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
10046596:	2261      	movs	r2, #97	@ 0x61
10046598:	2100      	movs	r1, #0
1004659a:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004659c:	4b16      	ldr	r3, [pc, #88]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
1004659e:	2262      	movs	r2, #98	@ 0x62
100465a0:	2100      	movs	r1, #0
100465a2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
100465a4:	4b14      	ldr	r3, [pc, #80]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100465a6:	2263      	movs	r2, #99	@ 0x63
100465a8:	2100      	movs	r1, #0
100465aa:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
100465ac:	4912      	ldr	r1, [pc, #72]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100465ae:	2200      	movs	r2, #0
100465b0:	2300      	movs	r3, #0
100465b2:	658a      	str	r2, [r1, #88]	@ 0x58
100465b4:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
100465b6:	4b10      	ldr	r3, [pc, #64]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100465b8:	4a15      	ldr	r2, [pc, #84]	@ (10046610 <HAL_RADIO_TIMER_Init+0x1e8>)
100465ba:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
100465bc:	4b0e      	ldr	r3, [pc, #56]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100465be:	2200      	movs	r2, #0
100465c0:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
100465c2:	f000 faa3 	bl	10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>
100465c6:	0002      	movs	r2, r0
100465c8:	000b      	movs	r3, r1
100465ca:	490b      	ldr	r1, [pc, #44]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100465cc:	6849      	ldr	r1, [r1, #4]
100465ce:	000c      	movs	r4, r1
100465d0:	2100      	movs	r1, #0
100465d2:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
100465d4:	1912      	adds	r2, r2, r4
100465d6:	416b      	adcs	r3, r5
100465d8:	490e      	ldr	r1, [pc, #56]	@ (10046614 <HAL_RADIO_TIMER_Init+0x1ec>)
100465da:	0008      	movs	r0, r1
100465dc:	f000 fd02 	bl	10046fe4 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
100465e0:	4b05      	ldr	r3, [pc, #20]	@ (100465f8 <HAL_RADIO_TIMER_Init+0x1d0>)
100465e2:	2101      	movs	r1, #1
100465e4:	0018      	movs	r0, r3
100465e6:	f000 fbf7 	bl	10046dd8 <_configureTxRxDelay>
}
100465ea:	46c0      	nop			@ (mov r8, r8)
100465ec:	46bd      	mov	sp, r7
100465ee:	b003      	add	sp, #12
100465f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100465f2:	46c0      	nop			@ (mov r8, r8)
100465f4:	60001800 	.word	0x60001800
100465f8:	20000510 	.word	0x20000510
100465fc:	0028f5c2 	.word	0x0028f5c2
10046600:	00005b8d 	.word	0x00005b8d
10046604:	0165ebec 	.word	0x0165ebec
10046608:	ffffefff 	.word	0xffffefff
1004660c:	00000326 	.word	0x00000326
10046610:	10046fbd 	.word	0x10046fbd
10046614:	20000550 	.word	0x20000550

10046618 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
10046618:	b5b0      	push	{r4, r5, r7, lr}
1004661a:	b090      	sub	sp, #64	@ 0x40
1004661c:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
1004661e:	230f      	movs	r3, #15
10046620:	18fb      	adds	r3, r7, r3
10046622:	2200      	movs	r2, #0
10046624:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046626:	f3ef 8310 	mrs	r3, PRIMASK
1004662a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
1004662e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
10046630:	b672      	cpsid	i
}
10046632:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
10046634:	4b9c      	ldr	r3, [pc, #624]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046636:	2261      	movs	r2, #97	@ 0x61
10046638:	5c9b      	ldrb	r3, [r3, r2]
1004663a:	2b00      	cmp	r3, #0
1004663c:	d00f      	beq.n	1004665e <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
1004663e:	4b9a      	ldr	r3, [pc, #616]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046640:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
10046642:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
10046644:	f000 fa62 	bl	10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>
10046648:	0002      	movs	r2, r0
1004664a:	000b      	movs	r3, r1
1004664c:	42ab      	cmp	r3, r5
1004664e:	d802      	bhi.n	10046656 <HAL_RADIO_TIMER_Tick+0x3e>
10046650:	d105      	bne.n	1004665e <HAL_RADIO_TIMER_Tick+0x46>
10046652:	42a2      	cmp	r2, r4
10046654:	d903      	bls.n	1004665e <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
10046656:	4b94      	ldr	r3, [pc, #592]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046658:	2261      	movs	r2, #97	@ 0x61
1004665a:	2100      	movs	r1, #0
1004665c:	5499      	strb	r1, [r3, r2]
1004665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10046660:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046662:	6a3b      	ldr	r3, [r7, #32]
10046664:	f383 8810 	msr	PRIMASK, r3
}
10046668:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004666a:	e06e      	b.n	1004674a <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
1004666c:	4b8e      	ldr	r3, [pc, #568]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
1004666e:	2291      	movs	r2, #145	@ 0x91
10046670:	5c99      	ldrb	r1, [r3, r2]
10046672:	4b8d      	ldr	r3, [pc, #564]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046674:	2292      	movs	r2, #146	@ 0x92
10046676:	5c9a      	ldrb	r2, [r3, r2]
10046678:	232b      	movs	r3, #43	@ 0x2b
1004667a:	2008      	movs	r0, #8
1004667c:	181b      	adds	r3, r3, r0
1004667e:	19db      	adds	r3, r3, r7
10046680:	1a8a      	subs	r2, r1, r2
10046682:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
10046684:	4b88      	ldr	r3, [pc, #544]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046686:	228c      	movs	r2, #140	@ 0x8c
10046688:	589b      	ldr	r3, [r3, r2]
1004668a:	183a      	adds	r2, r7, r0
1004668c:	0011      	movs	r1, r2
1004668e:	0018      	movs	r0, r3
10046690:	f000 fe7e 	bl	10047390 <_check_callbacks>
10046694:	0002      	movs	r2, r0
10046696:	4b84      	ldr	r3, [pc, #528]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046698:	218c      	movs	r1, #140	@ 0x8c
1004669a:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
1004669c:	68bb      	ldr	r3, [r7, #8]
1004669e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
100466a0:	e010      	b.n	100466c4 <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
100466a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100466a4:	691b      	ldr	r3, [r3, #16]
100466a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
100466a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100466aa:	2200      	movs	r2, #0
100466ac:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
100466ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100466b0:	689b      	ldr	r3, [r3, #8]
100466b2:	2b00      	cmp	r3, #0
100466b4:	d004      	beq.n	100466c0 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
100466b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100466b8:	689b      	ldr	r3, [r3, #8]
100466ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100466bc:	0010      	movs	r0, r2
100466be:	4798      	blx	r3
      }
      curr = next;
100466c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100466c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
100466c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100466c6:	2b00      	cmp	r3, #0
100466c8:	d1eb      	bne.n	100466a2 <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
100466ca:	4b77      	ldr	r3, [pc, #476]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
100466cc:	228c      	movs	r2, #140	@ 0x8c
100466ce:	589b      	ldr	r3, [r3, r2]
100466d0:	240f      	movs	r4, #15
100466d2:	193a      	adds	r2, r7, r4
100466d4:	0011      	movs	r1, r2
100466d6:	0018      	movs	r0, r3
100466d8:	f000 fd4a 	bl	10047170 <_update_user_timeout>
100466dc:	0002      	movs	r2, r0
100466de:	4b72      	ldr	r3, [pc, #456]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
100466e0:	218c      	movs	r1, #140	@ 0x8c
100466e2:	505a      	str	r2, [r3, r1]
    if (expired == 1)
100466e4:	193b      	adds	r3, r7, r4
100466e6:	781b      	ldrb	r3, [r3, #0]
100466e8:	2b01      	cmp	r3, #1
100466ea:	d121      	bne.n	10046730 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100466ec:	f3ef 8310 	mrs	r3, PRIMASK
100466f0:	61fb      	str	r3, [r7, #28]
  return(result);
100466f2:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
100466f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
100466f6:	b672      	cpsid	i
}
100466f8:	46c0      	nop			@ (mov r8, r8)
100466fa:	4b6b      	ldr	r3, [pc, #428]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
100466fc:	2291      	movs	r2, #145	@ 0x91
100466fe:	5c9b      	ldrb	r3, [r3, r2]
10046700:	3301      	adds	r3, #1
10046702:	4a69      	ldr	r2, [pc, #420]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046704:	2192      	movs	r1, #146	@ 0x92
10046706:	5c52      	ldrb	r2, [r2, r1]
10046708:	4293      	cmp	r3, r2
1004670a:	d103      	bne.n	10046714 <HAL_RADIO_TIMER_Tick+0xfc>
1004670c:	4b66      	ldr	r3, [pc, #408]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
1004670e:	2291      	movs	r2, #145	@ 0x91
10046710:	5c9b      	ldrb	r3, [r3, r2]
10046712:	e004      	b.n	1004671e <HAL_RADIO_TIMER_Tick+0x106>
10046714:	4b64      	ldr	r3, [pc, #400]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046716:	2291      	movs	r2, #145	@ 0x91
10046718:	5c9b      	ldrb	r3, [r3, r2]
1004671a:	3301      	adds	r3, #1
1004671c:	b2db      	uxtb	r3, r3
1004671e:	4a62      	ldr	r2, [pc, #392]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046720:	2191      	movs	r1, #145	@ 0x91
10046722:	5453      	strb	r3, [r2, r1]
10046724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046726:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046728:	69bb      	ldr	r3, [r7, #24]
1004672a:	f383 8810 	msr	PRIMASK, r3
}
1004672e:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
10046730:	4b5d      	ldr	r3, [pc, #372]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046732:	2292      	movs	r2, #146	@ 0x92
10046734:	5c9a      	ldrb	r2, [r3, r2]
10046736:	232b      	movs	r3, #43	@ 0x2b
10046738:	2108      	movs	r1, #8
1004673a:	185b      	adds	r3, r3, r1
1004673c:	19db      	adds	r3, r3, r7
1004673e:	781b      	ldrb	r3, [r3, #0]
10046740:	18d3      	adds	r3, r2, r3
10046742:	b2d9      	uxtb	r1, r3
10046744:	4b58      	ldr	r3, [pc, #352]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046746:	2292      	movs	r2, #146	@ 0x92
10046748:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004674a:	4b57      	ldr	r3, [pc, #348]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
1004674c:	2291      	movs	r2, #145	@ 0x91
1004674e:	5c9a      	ldrb	r2, [r3, r2]
10046750:	4b55      	ldr	r3, [pc, #340]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046752:	2192      	movs	r1, #146	@ 0x92
10046754:	5c5b      	ldrb	r3, [r3, r1]
10046756:	429a      	cmp	r2, r3
10046758:	d30a      	bcc.n	10046770 <HAL_RADIO_TIMER_Tick+0x158>
1004675a:	4b53      	ldr	r3, [pc, #332]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
1004675c:	2291      	movs	r2, #145	@ 0x91
1004675e:	5c9a      	ldrb	r2, [r3, r2]
10046760:	4b51      	ldr	r3, [pc, #324]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046762:	2192      	movs	r1, #146	@ 0x92
10046764:	5c5b      	ldrb	r3, [r3, r1]
10046766:	1ad3      	subs	r3, r2, r3
10046768:	1e5a      	subs	r2, r3, #1
1004676a:	4193      	sbcs	r3, r2
1004676c:	b2db      	uxtb	r3, r3
1004676e:	e00c      	b.n	1004678a <HAL_RADIO_TIMER_Tick+0x172>
10046770:	4b4d      	ldr	r3, [pc, #308]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046772:	2291      	movs	r2, #145	@ 0x91
10046774:	5c9b      	ldrb	r3, [r3, r2]
10046776:	0019      	movs	r1, r3
10046778:	4b4b      	ldr	r3, [pc, #300]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
1004677a:	2292      	movs	r2, #146	@ 0x92
1004677c:	5c9b      	ldrb	r3, [r3, r2]
1004677e:	1acb      	subs	r3, r1, r3
10046780:	3301      	adds	r3, #1
10046782:	33ff      	adds	r3, #255	@ 0xff
10046784:	1e5a      	subs	r2, r3, #1
10046786:	4193      	sbcs	r3, r2
10046788:	b2db      	uxtb	r3, r3
1004678a:	2b00      	cmp	r3, #0
1004678c:	d000      	beq.n	10046790 <HAL_RADIO_TIMER_Tick+0x178>
1004678e:	e76d      	b.n	1004666c <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
10046790:	4b45      	ldr	r3, [pc, #276]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046792:	7a1b      	ldrb	r3, [r3, #8]
10046794:	2b00      	cmp	r3, #0
10046796:	d06a      	beq.n	1004686e <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
10046798:	4b44      	ldr	r3, [pc, #272]	@ (100468ac <HAL_RADIO_TIMER_Tick+0x294>)
1004679a:	0018      	movs	r0, r3
1004679c:	f7ff fe33 	bl	10046406 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
100467a0:	1e03      	subs	r3, r0, #0
100467a2:	d100      	bne.n	100467a6 <HAL_RADIO_TIMER_Tick+0x18e>
100467a4:	e07b      	b.n	1004689e <HAL_RADIO_TIMER_Tick+0x286>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
100467a6:	4b40      	ldr	r3, [pc, #256]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
100467a8:	2200      	movs	r2, #0
100467aa:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
100467ac:	4b3e      	ldr	r3, [pc, #248]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
100467ae:	2294      	movs	r2, #148	@ 0x94
100467b0:	5c9b      	ldrb	r3, [r3, r2]
100467b2:	2b00      	cmp	r3, #0
100467b4:	d109      	bne.n	100467ca <HAL_RADIO_TIMER_Tick+0x1b2>
100467b6:	4b3c      	ldr	r3, [pc, #240]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
100467b8:	2293      	movs	r2, #147	@ 0x93
100467ba:	5c9b      	ldrb	r3, [r3, r2]
100467bc:	2b00      	cmp	r3, #0
100467be:	d004      	beq.n	100467ca <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
100467c0:	4b39      	ldr	r3, [pc, #228]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
100467c2:	2293      	movs	r2, #147	@ 0x93
100467c4:	2100      	movs	r1, #0
100467c6:	5499      	strb	r1, [r3, r2]
100467c8:	e034      	b.n	10046834 <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
100467ca:	f000 fe2b 	bl	10047424 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
100467ce:	4b36      	ldr	r3, [pc, #216]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
100467d0:	228c      	movs	r2, #140	@ 0x8c
100467d2:	589b      	ldr	r3, [r3, r2]
100467d4:	240f      	movs	r4, #15
100467d6:	193a      	adds	r2, r7, r4
100467d8:	0011      	movs	r1, r2
100467da:	0018      	movs	r0, r3
100467dc:	f000 fcc8 	bl	10047170 <_update_user_timeout>
100467e0:	0002      	movs	r2, r0
100467e2:	4b31      	ldr	r3, [pc, #196]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
100467e4:	218c      	movs	r1, #140	@ 0x8c
100467e6:	505a      	str	r2, [r3, r1]
        if (expired == 1)
100467e8:	193b      	adds	r3, r7, r4
100467ea:	781b      	ldrb	r3, [r3, #0]
100467ec:	2b01      	cmp	r3, #1
100467ee:	d121      	bne.n	10046834 <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100467f0:	f3ef 8310 	mrs	r3, PRIMASK
100467f4:	617b      	str	r3, [r7, #20]
  return(result);
100467f6:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
100467f8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
100467fa:	b672      	cpsid	i
}
100467fc:	46c0      	nop			@ (mov r8, r8)
100467fe:	4b2a      	ldr	r3, [pc, #168]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046800:	2291      	movs	r2, #145	@ 0x91
10046802:	5c9b      	ldrb	r3, [r3, r2]
10046804:	3301      	adds	r3, #1
10046806:	4a28      	ldr	r2, [pc, #160]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046808:	2192      	movs	r1, #146	@ 0x92
1004680a:	5c52      	ldrb	r2, [r2, r1]
1004680c:	4293      	cmp	r3, r2
1004680e:	d103      	bne.n	10046818 <HAL_RADIO_TIMER_Tick+0x200>
10046810:	4b25      	ldr	r3, [pc, #148]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046812:	2291      	movs	r2, #145	@ 0x91
10046814:	5c9b      	ldrb	r3, [r3, r2]
10046816:	e004      	b.n	10046822 <HAL_RADIO_TIMER_Tick+0x20a>
10046818:	4b23      	ldr	r3, [pc, #140]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
1004681a:	2291      	movs	r2, #145	@ 0x91
1004681c:	5c9b      	ldrb	r3, [r3, r2]
1004681e:	3301      	adds	r3, #1
10046820:	b2db      	uxtb	r3, r3
10046822:	4a21      	ldr	r2, [pc, #132]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046824:	2191      	movs	r1, #145	@ 0x91
10046826:	5453      	strb	r3, [r2, r1]
10046828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004682a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004682c:	693b      	ldr	r3, [r7, #16]
1004682e:	f383 8810 	msr	PRIMASK, r3
}
10046832:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
10046834:	230f      	movs	r3, #15
10046836:	18fa      	adds	r2, r7, r3
10046838:	4b1d      	ldr	r3, [pc, #116]	@ (100468b0 <HAL_RADIO_TIMER_Tick+0x298>)
1004683a:	0011      	movs	r1, r2
1004683c:	0018      	movs	r0, r3
1004683e:	f000 fe85 	bl	1004754c <_check_radio_activity>
#endif

      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10046842:	4b1c      	ldr	r3, [pc, #112]	@ (100468b4 <HAL_RADIO_TIMER_Tick+0x29c>)
10046844:	0018      	movs	r0, r3
10046846:	f000 f98d 	bl	10046b64 <HAL_RADIO_TIMER_StopVirtualTimer>
      /* Schedule next calibration event */
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004684a:	f000 f95f 	bl	10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>
1004684e:	0002      	movs	r2, r0
10046850:	000b      	movs	r3, r1
10046852:	4915      	ldr	r1, [pc, #84]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046854:	6849      	ldr	r1, [r1, #4]
10046856:	6039      	str	r1, [r7, #0]
10046858:	2100      	movs	r1, #0
1004685a:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004685c:	6838      	ldr	r0, [r7, #0]
1004685e:	6879      	ldr	r1, [r7, #4]
10046860:	1812      	adds	r2, r2, r0
10046862:	414b      	adcs	r3, r1
10046864:	4913      	ldr	r1, [pc, #76]	@ (100468b4 <HAL_RADIO_TIMER_Tick+0x29c>)
10046866:	0008      	movs	r0, r1
10046868:	f000 fbbc 	bl	10046fe4 <_start_timer>
      {
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
1004686c:	e017      	b.n	1004689e <HAL_RADIO_TIMER_Tick+0x286>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004686e:	4b0e      	ldr	r3, [pc, #56]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
10046870:	781b      	ldrb	r3, [r3, #0]
10046872:	2b00      	cmp	r3, #0
10046874:	d013      	beq.n	1004689e <HAL_RADIO_TIMER_Tick+0x286>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
10046876:	f000 f949 	bl	10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>
1004687a:	4b0b      	ldr	r3, [pc, #44]	@ (100468a8 <HAL_RADIO_TIMER_Tick+0x290>)
1004687c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046880:	24fa      	movs	r4, #250	@ 0xfa
10046882:	0364      	lsls	r4, r4, #13
10046884:	2500      	movs	r5, #0
10046886:	1912      	adds	r2, r2, r4
10046888:	416b      	adcs	r3, r5
1004688a:	4299      	cmp	r1, r3
1004688c:	d803      	bhi.n	10046896 <HAL_RADIO_TIMER_Tick+0x27e>
1004688e:	d106      	bne.n	1004689e <HAL_RADIO_TIMER_Tick+0x286>
10046890:	4290      	cmp	r0, r2
10046892:	d800      	bhi.n	10046896 <HAL_RADIO_TIMER_Tick+0x27e>
}
10046894:	e003      	b.n	1004689e <HAL_RADIO_TIMER_Tick+0x286>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10046896:	4b07      	ldr	r3, [pc, #28]	@ (100468b4 <HAL_RADIO_TIMER_Tick+0x29c>)
10046898:	0018      	movs	r0, r3
1004689a:	f000 fb8f 	bl	10046fbc <_calibration_callback>
}
1004689e:	46c0      	nop			@ (mov r8, r8)
100468a0:	46bd      	mov	sp, r7
100468a2:	b010      	add	sp, #64	@ 0x40
100468a4:	bdb0      	pop	{r4, r5, r7, pc}
100468a6:	46c0      	nop			@ (mov r8, r8)
100468a8:	20000510 	.word	0x20000510
100468ac:	60001000 	.word	0x60001000
100468b0:	20000568 	.word	0x20000568
100468b4:	20000550 	.word	0x20000550

100468b8 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
100468b8:	b580      	push	{r7, lr}
100468ba:	b082      	sub	sp, #8
100468bc:	af00      	add	r7, sp, #0
100468be:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
100468c0:	23c0      	movs	r3, #192	@ 0xc0
100468c2:	05db      	lsls	r3, r3, #23
100468c4:	695b      	ldr	r3, [r3, #20]
100468c6:	687a      	ldr	r2, [r7, #4]
100468c8:	0011      	movs	r1, r2
100468ca:	0018      	movs	r0, r3
100468cc:	f000 ffb0 	bl	10047830 <TIMER_GetPastSysTime>
100468d0:	0002      	movs	r2, r0
100468d2:	000b      	movs	r3, r1
}
100468d4:	0010      	movs	r0, r2
100468d6:	0019      	movs	r1, r3
100468d8:	46bd      	mov	sp, r7
100468da:	b002      	add	sp, #8
100468dc:	bd80      	pop	{r7, pc}
	...

100468e0 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
100468e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100468e2:	b085      	sub	sp, #20
100468e4:	af00      	add	r7, sp, #0
100468e6:	6078      	str	r0, [r7, #4]
100468e8:	0008      	movs	r0, r1
100468ea:	0011      	movs	r1, r2
100468ec:	1cfb      	adds	r3, r7, #3
100468ee:	1c02      	adds	r2, r0, #0
100468f0:	701a      	strb	r2, [r3, #0]
100468f2:	1cbb      	adds	r3, r7, #2
100468f4:	1c0a      	adds	r2, r1, #0
100468f6:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
100468f8:	260f      	movs	r6, #15
100468fa:	19bb      	adds	r3, r7, r6
100468fc:	2200      	movs	r2, #0
100468fe:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10046900:	1cfb      	adds	r3, r7, #3
10046902:	781b      	ldrb	r3, [r3, #0]
10046904:	1e5a      	subs	r2, r3, #1
10046906:	4193      	sbcs	r3, r2
10046908:	b2d9      	uxtb	r1, r3
1004690a:	4b1b      	ldr	r3, [pc, #108]	@ (10046978 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004690c:	2264      	movs	r2, #100	@ 0x64
1004690e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10046910:	1cbb      	adds	r3, r7, #2
10046912:	781b      	ldrb	r3, [r3, #0]
10046914:	1e5a      	subs	r2, r3, #1
10046916:	4193      	sbcs	r3, r2
10046918:	b2d9      	uxtb	r1, r3
1004691a:	4b17      	ldr	r3, [pc, #92]	@ (10046978 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004691c:	2260      	movs	r2, #96	@ 0x60
1004691e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10046920:	4b15      	ldr	r3, [pc, #84]	@ (10046978 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046922:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10046926:	4914      	ldr	r1, [pc, #80]	@ (10046978 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046928:	6a88      	ldr	r0, [r1, #40]	@ 0x28
1004692a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
1004692c:	6879      	ldr	r1, [r7, #4]
1004692e:	1a09      	subs	r1, r1, r0
10046930:	000c      	movs	r4, r1
10046932:	2100      	movs	r1, #0
10046934:	000d      	movs	r5, r1
10046936:	1912      	adds	r2, r2, r4
10046938:	416b      	adcs	r3, r5
1004693a:	490f      	ldr	r1, [pc, #60]	@ (10046978 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004693c:	658a      	str	r2, [r1, #88]	@ 0x58
1004693e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10046940:	4b0d      	ldr	r3, [pc, #52]	@ (10046978 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046942:	2261      	movs	r2, #97	@ 0x61
10046944:	2100      	movs	r1, #0
10046946:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046948:	4b0b      	ldr	r3, [pc, #44]	@ (10046978 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004694a:	2263      	movs	r2, #99	@ 0x63
1004694c:	2100      	movs	r1, #0
1004694e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10046950:	4b09      	ldr	r3, [pc, #36]	@ (10046978 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10046952:	2262      	movs	r2, #98	@ 0x62
10046954:	2101      	movs	r1, #1
10046956:	5499      	strb	r1, [r3, r2]
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10046958:	19ba      	adds	r2, r7, r6
1004695a:	4b08      	ldr	r3, [pc, #32]	@ (1004697c <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
1004695c:	0011      	movs	r1, r2
1004695e:	0018      	movs	r0, r3
10046960:	f000 fdf4 	bl	1004754c <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
10046964:	2001      	movs	r0, #1
10046966:	f000 fcbb 	bl	100472e0 <_virtualTimeBaseEnable>

  return retVal;
1004696a:	19bb      	adds	r3, r7, r6
1004696c:	781b      	ldrb	r3, [r3, #0]
}
1004696e:	0018      	movs	r0, r3
10046970:	46bd      	mov	sp, r7
10046972:	b005      	add	sp, #20
10046974:	bdf0      	pop	{r4, r5, r6, r7, pc}
10046976:	46c0      	nop			@ (mov r8, r8)
10046978:	20000510 	.word	0x20000510
1004697c:	20000568 	.word	0x20000568

10046980 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
10046980:	b5b0      	push	{r4, r5, r7, lr}
10046982:	b088      	sub	sp, #32
10046984:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10046986:	23c0      	movs	r3, #192	@ 0xc0
10046988:	05db      	lsls	r3, r3, #23
1004698a:	0018      	movs	r0, r3
1004698c:	f7ff fc20 	bl	100461d0 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10046990:	23c0      	movs	r3, #192	@ 0xc0
10046992:	05db      	lsls	r3, r3, #23
10046994:	0018      	movs	r0, r3
10046996:	f7ff fc2a 	bl	100461ee <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004699a:	4b31      	ldr	r3, [pc, #196]	@ (10046a60 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
1004699c:	0018      	movs	r0, r3
1004699e:	f7ff fc51 	bl	10046244 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
100469a2:	4b30      	ldr	r3, [pc, #192]	@ (10046a64 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
100469a4:	2261      	movs	r2, #97	@ 0x61
100469a6:	2100      	movs	r1, #0
100469a8:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
100469aa:	4b2e      	ldr	r3, [pc, #184]	@ (10046a64 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
100469ac:	2262      	movs	r2, #98	@ 0x62
100469ae:	2100      	movs	r1, #0
100469b0:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
100469b2:	4b2c      	ldr	r3, [pc, #176]	@ (10046a64 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
100469b4:	2263      	movs	r2, #99	@ 0x63
100469b6:	2100      	movs	r1, #0
100469b8:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100469ba:	f3ef 8310 	mrs	r3, PRIMASK
100469be:	60bb      	str	r3, [r7, #8]
  return(result);
100469c0:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
100469c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
100469c4:	b672      	cpsid	i
}
100469c6:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
100469c8:	4b26      	ldr	r3, [pc, #152]	@ (10046a64 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
100469ca:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
100469cc:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
100469ce:	f000 f89d 	bl	10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>
100469d2:	0002      	movs	r2, r0
100469d4:	000b      	movs	r3, r1
100469d6:	1aa4      	subs	r4, r4, r2
100469d8:	419d      	sbcs	r5, r3
100469da:	0022      	movs	r2, r4
100469dc:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
100469de:	4921      	ldr	r1, [pc, #132]	@ (10046a64 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
100469e0:	2084      	movs	r0, #132	@ 0x84
100469e2:	5c09      	ldrb	r1, [r1, r0]
100469e4:	6039      	str	r1, [r7, #0]
100469e6:	2100      	movs	r1, #0
100469e8:	6079      	str	r1, [r7, #4]
100469ea:	6838      	ldr	r0, [r7, #0]
100469ec:	6879      	ldr	r1, [r7, #4]
100469ee:	1a12      	subs	r2, r2, r0
100469f0:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
100469f2:	613a      	str	r2, [r7, #16]
100469f4:	617b      	str	r3, [r7, #20]
100469f6:	69bb      	ldr	r3, [r7, #24]
100469f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100469fa:	68fb      	ldr	r3, [r7, #12]
100469fc:	f383 8810 	msr	PRIMASK, r3
}
10046a00:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
10046a02:	697b      	ldr	r3, [r7, #20]
10046a04:	2b00      	cmp	r3, #0
10046a06:	dc0c      	bgt.n	10046a22 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
10046a08:	697b      	ldr	r3, [r7, #20]
10046a0a:	2b00      	cmp	r3, #0
10046a0c:	d102      	bne.n	10046a14 <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
10046a0e:	693b      	ldr	r3, [r7, #16]
10046a10:	2b00      	cmp	r3, #0
10046a12:	d106      	bne.n	10046a22 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
10046a14:	2317      	movs	r3, #23
10046a16:	2208      	movs	r2, #8
10046a18:	189b      	adds	r3, r3, r2
10046a1a:	19db      	adds	r3, r3, r7
10046a1c:	2201      	movs	r2, #1
10046a1e:	701a      	strb	r2, [r3, #0]
10046a20:	e015      	b.n	10046a4e <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
10046a22:	697b      	ldr	r3, [r7, #20]
10046a24:	2b00      	cmp	r3, #0
10046a26:	dc0c      	bgt.n	10046a42 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
10046a28:	697b      	ldr	r3, [r7, #20]
10046a2a:	2b00      	cmp	r3, #0
10046a2c:	d102      	bne.n	10046a34 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
10046a2e:	693b      	ldr	r3, [r7, #16]
10046a30:	2b0e      	cmp	r3, #14
10046a32:	d806      	bhi.n	10046a42 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
10046a34:	2317      	movs	r3, #23
10046a36:	2208      	movs	r2, #8
10046a38:	189b      	adds	r3, r3, r2
10046a3a:	19db      	adds	r3, r3, r7
10046a3c:	2202      	movs	r2, #2
10046a3e:	701a      	strb	r2, [r3, #0]
10046a40:	e005      	b.n	10046a4e <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
10046a42:	2317      	movs	r3, #23
10046a44:	2208      	movs	r2, #8
10046a46:	189b      	adds	r3, r3, r2
10046a48:	19db      	adds	r3, r3, r7
10046a4a:	2200      	movs	r2, #0
10046a4c:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
10046a4e:	2317      	movs	r3, #23
10046a50:	2208      	movs	r2, #8
10046a52:	189b      	adds	r3, r3, r2
10046a54:	19db      	adds	r3, r3, r7
10046a56:	781b      	ldrb	r3, [r3, #0]
}
10046a58:	0018      	movs	r0, r3
10046a5a:	46bd      	mov	sp, r7
10046a5c:	b008      	add	sp, #32
10046a5e:	bdb0      	pop	{r4, r5, r7, pc}
10046a60:	60001800 	.word	0x60001800
10046a64:	20000510 	.word	0x20000510

10046a68 <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
10046a68:	b580      	push	{r7, lr}
10046a6a:	b084      	sub	sp, #16
10046a6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046a6e:	f3ef 8310 	mrs	r3, PRIMASK
10046a72:	603b      	str	r3, [r7, #0]
  return(result);
10046a74:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
10046a76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10046a78:	b672      	cpsid	i
}
10046a7a:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10046a7c:	4b0e      	ldr	r3, [pc, #56]	@ (10046ab8 <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
10046a7e:	0018      	movs	r0, r3
10046a80:	f7ff fc37 	bl	100462f2 <LL_RADIO_TIMER_GetAbsoluteTime>
10046a84:	0003      	movs	r3, r0
10046a86:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
10046a88:	68bb      	ldr	r3, [r7, #8]
10046a8a:	1c9a      	adds	r2, r3, #2
10046a8c:	23c0      	movs	r3, #192	@ 0xc0
10046a8e:	05db      	lsls	r3, r3, #23
10046a90:	0011      	movs	r1, r2
10046a92:	0018      	movs	r0, r3
10046a94:	f7ff fbba 	bl	1004620c <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
10046a98:	23c0      	movs	r3, #192	@ 0xc0
10046a9a:	05db      	lsls	r3, r3, #23
10046a9c:	0018      	movs	r0, r3
10046a9e:	f7ff fb87 	bl	100461b0 <LL_RADIO_TIMER_EnableTimer1>
10046aa2:	68fb      	ldr	r3, [r7, #12]
10046aa4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046aa6:	687b      	ldr	r3, [r7, #4]
10046aa8:	f383 8810 	msr	PRIMASK, r3
}
10046aac:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10046aae:	46c0      	nop			@ (mov r8, r8)
10046ab0:	46bd      	mov	sp, r7
10046ab2:	b004      	add	sp, #16
10046ab4:	bd80      	pop	{r7, pc}
10046ab6:	46c0      	nop			@ (mov r8, r8)
10046ab8:	60001800 	.word	0x60001800

10046abc <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10046abc:	b580      	push	{r7, lr}
10046abe:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
10046ac0:	46c0      	nop			@ (mov r8, r8)
10046ac2:	46bd      	mov	sp, r7
10046ac4:	bd80      	pop	{r7, pc}
	...

10046ac8 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10046ac8:	b580      	push	{r7, lr}
10046aca:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10046acc:	4b03      	ldr	r3, [pc, #12]	@ (10046adc <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10046ace:	2263      	movs	r2, #99	@ 0x63
10046ad0:	2100      	movs	r1, #0
10046ad2:	5499      	strb	r1, [r3, r2]
}
10046ad4:	46c0      	nop			@ (mov r8, r8)
10046ad6:	46bd      	mov	sp, r7
10046ad8:	bd80      	pop	{r7, pc}
10046ada:	46c0      	nop			@ (mov r8, r8)
10046adc:	20000510 	.word	0x20000510

10046ae0 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
10046ae0:	b580      	push	{r7, lr}
10046ae2:	b082      	sub	sp, #8
10046ae4:	af00      	add	r7, sp, #0
10046ae6:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10046ae8:	4b06      	ldr	r3, [pc, #24]	@ (10046b04 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
10046aea:	69db      	ldr	r3, [r3, #28]
10046aec:	0019      	movs	r1, r3
10046aee:	4a06      	ldr	r2, [pc, #24]	@ (10046b08 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
10046af0:	687b      	ldr	r3, [r7, #4]
10046af2:	0018      	movs	r0, r3
10046af4:	f7f9 fae4 	bl	100400c0 <blue_unit_conversion>
10046af8:	0003      	movs	r3, r0
}
10046afa:	0018      	movs	r0, r3
10046afc:	46bd      	mov	sp, r7
10046afe:	b002      	add	sp, #8
10046b00:	bd80      	pop	{r7, pc}
10046b02:	46c0      	nop			@ (mov r8, r8)
10046b04:	20000510 	.word	0x20000510
10046b08:	00000635 	.word	0x00000635

10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10046b0c:	b580      	push	{r7, lr}
10046b0e:	b082      	sub	sp, #8
10046b10:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10046b12:	1d3a      	adds	r2, r7, #4
10046b14:	4b05      	ldr	r3, [pc, #20]	@ (10046b2c <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10046b16:	0011      	movs	r1, r2
10046b18:	0018      	movs	r0, r3
10046b1a:	f000 fac1 	bl	100470a0 <_get_system_time_and_machine>
10046b1e:	0002      	movs	r2, r0
10046b20:	000b      	movs	r3, r1
}
10046b22:	0010      	movs	r0, r2
10046b24:	0019      	movs	r1, r3
10046b26:	46bd      	mov	sp, r7
10046b28:	b002      	add	sp, #8
10046b2a:	bd80      	pop	{r7, pc}
10046b2c:	20000510 	.word	0x20000510

10046b30 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
10046b30:	b590      	push	{r4, r7, lr}
10046b32:	b087      	sub	sp, #28
10046b34:	af00      	add	r7, sp, #0
10046b36:	60f8      	str	r0, [r7, #12]
10046b38:	603a      	str	r2, [r7, #0]
10046b3a:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
10046b3c:	683a      	ldr	r2, [r7, #0]
10046b3e:	687b      	ldr	r3, [r7, #4]
10046b40:	68f9      	ldr	r1, [r7, #12]
10046b42:	0008      	movs	r0, r1
10046b44:	f000 fa4e 	bl	10046fe4 <_start_timer>
10046b48:	0002      	movs	r2, r0
10046b4a:	2417      	movs	r4, #23
10046b4c:	193b      	adds	r3, r7, r4
10046b4e:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
10046b50:	2001      	movs	r0, #1
10046b52:	f000 fbc5 	bl	100472e0 <_virtualTimeBaseEnable>

  return retVal;
10046b56:	193b      	adds	r3, r7, r4
10046b58:	781b      	ldrb	r3, [r3, #0]
}
10046b5a:	0018      	movs	r0, r3
10046b5c:	46bd      	mov	sp, r7
10046b5e:	b007      	add	sp, #28
10046b60:	bd90      	pop	{r4, r7, pc}
	...

10046b64 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10046b64:	b590      	push	{r4, r7, lr}
10046b66:	b089      	sub	sp, #36	@ 0x24
10046b68:	af00      	add	r7, sp, #0
10046b6a:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10046b6c:	4b28      	ldr	r3, [pc, #160]	@ (10046c10 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046b6e:	228c      	movs	r2, #140	@ 0x8c
10046b70:	589b      	ldr	r3, [r3, r2]
10046b72:	687a      	ldr	r2, [r7, #4]
10046b74:	0011      	movs	r1, r2
10046b76:	0018      	movs	r0, r3
10046b78:	f000 fbde 	bl	10047338 <_remove_timer_in_queue>
10046b7c:	0003      	movs	r3, r0
10046b7e:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10046b80:	210f      	movs	r1, #15
10046b82:	187b      	adds	r3, r7, r1
10046b84:	2200      	movs	r2, #0
10046b86:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10046b88:	687b      	ldr	r3, [r7, #4]
10046b8a:	2200      	movs	r2, #0
10046b8c:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10046b8e:	4b20      	ldr	r3, [pc, #128]	@ (10046c10 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046b90:	228c      	movs	r2, #140	@ 0x8c
10046b92:	589b      	ldr	r3, [r3, r2]
10046b94:	69fa      	ldr	r2, [r7, #28]
10046b96:	429a      	cmp	r2, r3
10046b98:	d031      	beq.n	10046bfe <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10046b9a:	000c      	movs	r4, r1
10046b9c:	187a      	adds	r2, r7, r1
10046b9e:	69fb      	ldr	r3, [r7, #28]
10046ba0:	0011      	movs	r1, r2
10046ba2:	0018      	movs	r0, r3
10046ba4:	f000 fae4 	bl	10047170 <_update_user_timeout>
10046ba8:	0002      	movs	r2, r0
10046baa:	4b19      	ldr	r3, [pc, #100]	@ (10046c10 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046bac:	218c      	movs	r1, #140	@ 0x8c
10046bae:	505a      	str	r2, [r3, r1]
    if (expired)
10046bb0:	193b      	adds	r3, r7, r4
10046bb2:	781b      	ldrb	r3, [r3, #0]
10046bb4:	2b00      	cmp	r3, #0
10046bb6:	d026      	beq.n	10046c06 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10046bb8:	f3ef 8310 	mrs	r3, PRIMASK
10046bbc:	617b      	str	r3, [r7, #20]
  return(result);
10046bbe:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10046bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10046bc2:	b672      	cpsid	i
}
10046bc4:	46c0      	nop			@ (mov r8, r8)
10046bc6:	4b12      	ldr	r3, [pc, #72]	@ (10046c10 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046bc8:	2291      	movs	r2, #145	@ 0x91
10046bca:	5c9b      	ldrb	r3, [r3, r2]
10046bcc:	3301      	adds	r3, #1
10046bce:	4a10      	ldr	r2, [pc, #64]	@ (10046c10 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046bd0:	2192      	movs	r1, #146	@ 0x92
10046bd2:	5c52      	ldrb	r2, [r2, r1]
10046bd4:	4293      	cmp	r3, r2
10046bd6:	d103      	bne.n	10046be0 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
10046bd8:	4b0d      	ldr	r3, [pc, #52]	@ (10046c10 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046bda:	2291      	movs	r2, #145	@ 0x91
10046bdc:	5c9b      	ldrb	r3, [r3, r2]
10046bde:	e004      	b.n	10046bea <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10046be0:	4b0b      	ldr	r3, [pc, #44]	@ (10046c10 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046be2:	2291      	movs	r2, #145	@ 0x91
10046be4:	5c9b      	ldrb	r3, [r3, r2]
10046be6:	3301      	adds	r3, #1
10046be8:	b2db      	uxtb	r3, r3
10046bea:	4a09      	ldr	r2, [pc, #36]	@ (10046c10 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046bec:	2191      	movs	r1, #145	@ 0x91
10046bee:	5453      	strb	r3, [r2, r1]
10046bf0:	69bb      	ldr	r3, [r7, #24]
10046bf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10046bf4:	693b      	ldr	r3, [r7, #16]
10046bf6:	f383 8810 	msr	PRIMASK, r3
}
10046bfa:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
10046bfc:	e003      	b.n	10046c06 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
10046bfe:	4b04      	ldr	r3, [pc, #16]	@ (10046c10 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10046c00:	218c      	movs	r1, #140	@ 0x8c
10046c02:	69fa      	ldr	r2, [r7, #28]
10046c04:	505a      	str	r2, [r3, r1]
}
10046c06:	46c0      	nop			@ (mov r8, r8)
10046c08:	46bd      	mov	sp, r7
10046c0a:	b009      	add	sp, #36	@ 0x24
10046c0c:	bd90      	pop	{r4, r7, pc}
10046c0e:	46c0      	nop			@ (mov r8, r8)
10046c10:	20000510 	.word	0x20000510

10046c14 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10046c14:	b580      	push	{r7, lr}
10046c16:	b082      	sub	sp, #8
10046c18:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
10046c1a:	2300      	movs	r3, #0
10046c1c:	607b      	str	r3, [r7, #4]
  UNUSED(status);
10046c1e:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10046c20:	4b13      	ldr	r3, [pc, #76]	@ (10046c70 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10046c22:	0018      	movs	r0, r3
10046c24:	f7ff fb2e 	bl	10046284 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10046c28:	4b12      	ldr	r3, [pc, #72]	@ (10046c74 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046c2a:	2291      	movs	r2, #145	@ 0x91
10046c2c:	5c9b      	ldrb	r3, [r3, r2]
10046c2e:	3301      	adds	r3, #1
10046c30:	4a10      	ldr	r2, [pc, #64]	@ (10046c74 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046c32:	2192      	movs	r1, #146	@ 0x92
10046c34:	5c52      	ldrb	r2, [r2, r1]
10046c36:	4293      	cmp	r3, r2
10046c38:	d103      	bne.n	10046c42 <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
10046c3a:	4b0e      	ldr	r3, [pc, #56]	@ (10046c74 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046c3c:	2291      	movs	r2, #145	@ 0x91
10046c3e:	5c9b      	ldrb	r3, [r3, r2]
10046c40:	e004      	b.n	10046c4c <HAL_RADIO_TIMER_TimeoutCallback+0x38>
10046c42:	4b0c      	ldr	r3, [pc, #48]	@ (10046c74 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046c44:	2291      	movs	r2, #145	@ 0x91
10046c46:	5c9b      	ldrb	r3, [r3, r2]
10046c48:	3301      	adds	r3, #1
10046c4a:	b2db      	uxtb	r3, r3
10046c4c:	4a09      	ldr	r2, [pc, #36]	@ (10046c74 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10046c4e:	2191      	movs	r1, #145	@ 0x91
10046c50:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10046c52:	4b07      	ldr	r3, [pc, #28]	@ (10046c70 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10046c54:	0018      	movs	r0, r3
10046c56:	f7ff fb7e 	bl	10046356 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
10046c5a:	4b05      	ldr	r3, [pc, #20]	@ (10046c70 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10046c5c:	0018      	movs	r0, r3
10046c5e:	f7ff fb88 	bl	10046372 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
10046c62:	0003      	movs	r3, r0
10046c64:	607b      	str	r3, [r7, #4]
}
10046c66:	46c0      	nop			@ (mov r8, r8)
10046c68:	46bd      	mov	sp, r7
10046c6a:	b002      	add	sp, #8
10046c6c:	bd80      	pop	{r7, pc}
10046c6e:	46c0      	nop			@ (mov r8, r8)
10046c70:	60001800 	.word	0x60001800
10046c74:	20000510 	.word	0x20000510

10046c78 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
10046c78:	b580      	push	{r7, lr}
10046c7a:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10046c7c:	46c0      	nop			@ (mov r8, r8)
10046c7e:	4b0b      	ldr	r3, [pc, #44]	@ (10046cac <_calibrationProcedure+0x34>)
10046c80:	0018      	movs	r0, r3
10046c82:	f7ff fbc0 	bl	10046406 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046c86:	1e03      	subs	r3, r0, #0
10046c88:	d0f9      	beq.n	10046c7e <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
10046c8a:	4b08      	ldr	r3, [pc, #32]	@ (10046cac <_calibrationProcedure+0x34>)
10046c8c:	2117      	movs	r1, #23
10046c8e:	0018      	movs	r0, r3
10046c90:	f7ff fb80 	bl	10046394 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
10046c94:	4b06      	ldr	r3, [pc, #24]	@ (10046cb0 <_calibrationProcedure+0x38>)
10046c96:	0018      	movs	r0, r3
10046c98:	f000 f81e 	bl	10046cd8 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
10046c9c:	4b05      	ldr	r3, [pc, #20]	@ (10046cb4 <_calibrationProcedure+0x3c>)
10046c9e:	69da      	ldr	r2, [r3, #28]
10046ca0:	4b04      	ldr	r3, [pc, #16]	@ (10046cb4 <_calibrationProcedure+0x3c>)
10046ca2:	621a      	str	r2, [r3, #32]

}
10046ca4:	46c0      	nop			@ (mov r8, r8)
10046ca6:	46bd      	mov	sp, r7
10046ca8:	bd80      	pop	{r7, pc}
10046caa:	46c0      	nop			@ (mov r8, r8)
10046cac:	60001000 	.word	0x60001000
10046cb0:	20000520 	.word	0x20000520
10046cb4:	20000510 	.word	0x20000510

10046cb8 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
10046cb8:	b580      	push	{r7, lr}
10046cba:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10046cbc:	4b05      	ldr	r3, [pc, #20]	@ (10046cd4 <_timer_start_calibration+0x1c>)
10046cbe:	0018      	movs	r0, r3
10046cc0:	f7ff fb93 	bl	100463ea <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
10046cc4:	4b03      	ldr	r3, [pc, #12]	@ (10046cd4 <_timer_start_calibration+0x1c>)
10046cc6:	0018      	movs	r0, r3
10046cc8:	f7ff fb70 	bl	100463ac <LL_RADIO_TIMER_StartLSICalibration>
}
10046ccc:	46c0      	nop			@ (mov r8, r8)
10046cce:	46bd      	mov	sp, r7
10046cd0:	bd80      	pop	{r7, pc}
10046cd2:	46c0      	nop			@ (mov r8, r8)
10046cd4:	60001000 	.word	0x60001000

10046cd8 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
10046cd8:	b580      	push	{r7, lr}
10046cda:	b082      	sub	sp, #8
10046cdc:	af00      	add	r7, sp, #0
10046cde:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
10046ce0:	f7ff ffea 	bl	10046cb8 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10046ce4:	46c0      	nop			@ (mov r8, r8)
10046ce6:	4b07      	ldr	r3, [pc, #28]	@ (10046d04 <_timer_calibrate+0x2c>)
10046ce8:	0018      	movs	r0, r3
10046cea:	f7ff fb8c 	bl	10046406 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10046cee:	1e03      	subs	r3, r0, #0
10046cf0:	d0f9      	beq.n	10046ce6 <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
10046cf2:	687b      	ldr	r3, [r7, #4]
10046cf4:	0018      	movs	r0, r3
10046cf6:	f000 f807 	bl	10046d08 <_get_calibration_data>
}
10046cfa:	46c0      	nop			@ (mov r8, r8)
10046cfc:	46bd      	mov	sp, r7
10046cfe:	b002      	add	sp, #8
10046d00:	bd80      	pop	{r7, pc}
10046d02:	46c0      	nop			@ (mov r8, r8)
10046d04:	60001000 	.word	0x60001000

10046d08 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
10046d08:	b580      	push	{r7, lr}
10046d0a:	b08a      	sub	sp, #40	@ 0x28
10046d0c:	af00      	add	r7, sp, #0
10046d0e:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10046d10:	4b2e      	ldr	r3, [pc, #184]	@ (10046dcc <_get_calibration_data+0xc4>)
10046d12:	0018      	movs	r0, r3
10046d14:	f7ff fb55 	bl	100463c2 <LL_RADIO_TIMER_GetLSIPeriod>
10046d18:	0003      	movs	r3, r0
10046d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10046d1c:	e005      	b.n	10046d2a <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10046d1e:	4b2b      	ldr	r3, [pc, #172]	@ (10046dcc <_get_calibration_data+0xc4>)
10046d20:	0018      	movs	r0, r3
10046d22:	f7ff fb4e 	bl	100463c2 <LL_RADIO_TIMER_GetLSIPeriod>
10046d26:	0003      	movs	r3, r0
10046d28:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10046d2a:	4b28      	ldr	r3, [pc, #160]	@ (10046dcc <_get_calibration_data+0xc4>)
10046d2c:	0018      	movs	r0, r3
10046d2e:	f7ff fb48 	bl	100463c2 <LL_RADIO_TIMER_GetLSIPeriod>
10046d32:	0002      	movs	r2, r0
10046d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046d36:	429a      	cmp	r2, r3
10046d38:	d1f1      	bne.n	10046d1e <_get_calibration_data+0x16>
10046d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046d3c:	2b00      	cmp	r3, #0
10046d3e:	d0ee      	beq.n	10046d1e <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
10046d40:	4b23      	ldr	r3, [pc, #140]	@ (10046dd0 <_get_calibration_data+0xc8>)
10046d42:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
10046d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046d46:	121b      	asrs	r3, r3, #8
10046d48:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
10046d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046d4c:	22ff      	movs	r2, #255	@ 0xff
10046d4e:	4013      	ands	r3, r2
10046d50:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
10046d52:	69fb      	ldr	r3, [r7, #28]
10046d54:	69ba      	ldr	r2, [r7, #24]
10046d56:	435a      	muls	r2, r3
10046d58:	697b      	ldr	r3, [r7, #20]
10046d5a:	69f9      	ldr	r1, [r7, #28]
10046d5c:	434b      	muls	r3, r1
10046d5e:	121b      	asrs	r3, r3, #8
10046d60:	18d3      	adds	r3, r2, r3
10046d62:	3310      	adds	r3, #16
10046d64:	115a      	asrs	r2, r3, #5
10046d66:	687b      	ldr	r3, [r7, #4]
10046d68:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
10046d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10046d6c:	687b      	ldr	r3, [r7, #4]
10046d6e:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
10046d70:	4b18      	ldr	r3, [pc, #96]	@ (10046dd4 <_get_calibration_data+0xcc>)
10046d72:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10046d74:	4b15      	ldr	r3, [pc, #84]	@ (10046dcc <_get_calibration_data+0xc4>)
10046d76:	0018      	movs	r0, r3
10046d78:	f7ff fb2d 	bl	100463d6 <LL_RADIO_TIMER_GetLSIFrequency>
10046d7c:	0003      	movs	r3, r0
10046d7e:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10046d80:	e005      	b.n	10046d8e <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10046d82:	4b12      	ldr	r3, [pc, #72]	@ (10046dcc <_get_calibration_data+0xc4>)
10046d84:	0018      	movs	r0, r3
10046d86:	f7ff fb26 	bl	100463d6 <LL_RADIO_TIMER_GetLSIFrequency>
10046d8a:	0003      	movs	r3, r0
10046d8c:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10046d8e:	4b0f      	ldr	r3, [pc, #60]	@ (10046dcc <_get_calibration_data+0xc4>)
10046d90:	0018      	movs	r0, r3
10046d92:	f7ff fb20 	bl	100463d6 <LL_RADIO_TIMER_GetLSIFrequency>
10046d96:	0002      	movs	r2, r0
10046d98:	6a3b      	ldr	r3, [r7, #32]
10046d9a:	429a      	cmp	r2, r3
10046d9c:	d1f1      	bne.n	10046d82 <_get_calibration_data+0x7a>
10046d9e:	6a3b      	ldr	r3, [r7, #32]
10046da0:	2b00      	cmp	r3, #0
10046da2:	d0ee      	beq.n	10046d82 <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
10046da4:	6a3b      	ldr	r3, [r7, #32]
10046da6:	119b      	asrs	r3, r3, #6
10046da8:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
10046daa:	68fb      	ldr	r3, [r7, #12]
10046dac:	693a      	ldr	r2, [r7, #16]
10046dae:	4353      	muls	r3, r2
10046db0:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
10046db2:	68bb      	ldr	r3, [r7, #8]
10046db4:	3380      	adds	r3, #128	@ 0x80
10046db6:	121a      	asrs	r2, r3, #8
10046db8:	687b      	ldr	r3, [r7, #4]
10046dba:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
10046dbc:	6a3a      	ldr	r2, [r7, #32]
10046dbe:	687b      	ldr	r3, [r7, #4]
10046dc0:	605a      	str	r2, [r3, #4]
}
10046dc2:	46c0      	nop			@ (mov r8, r8)
10046dc4:	46bd      	mov	sp, r7
10046dc6:	b00a      	add	sp, #40	@ 0x28
10046dc8:	bd80      	pop	{r7, pc}
10046dca:	46c0      	nop			@ (mov r8, r8)
10046dcc:	60001000 	.word	0x60001000
10046dd0:	0008bcf6 	.word	0x0008bcf6
10046dd4:	00000753 	.word	0x00000753

10046dd8 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
10046dd8:	b590      	push	{r4, r7, lr}
10046dda:	b085      	sub	sp, #20
10046ddc:	af00      	add	r7, sp, #0
10046dde:	6078      	str	r0, [r7, #4]
10046de0:	000a      	movs	r2, r1
10046de2:	1cfb      	adds	r3, r7, #3
10046de4:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
10046de6:	4b38      	ldr	r3, [pc, #224]	@ (10046ec8 <_configureTxRxDelay+0xf0>)
10046de8:	7b9b      	ldrb	r3, [r3, #14]
10046dea:	b2db      	uxtb	r3, r3
10046dec:	2b00      	cmp	r3, #0
10046dee:	da00      	bge.n	10046df2 <_configureTxRxDelay+0x1a>
10046df0:	3307      	adds	r3, #7
10046df2:	10db      	asrs	r3, r3, #3
10046df4:	b2da      	uxtb	r2, r3
10046df6:	240f      	movs	r4, #15
10046df8:	193b      	adds	r3, r7, r4
10046dfa:	3201      	adds	r2, #1
10046dfc:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
10046dfe:	687b      	ldr	r3, [r7, #4]
10046e00:	699b      	ldr	r3, [r3, #24]
10046e02:	0019      	movs	r1, r3
10046e04:	4b31      	ldr	r3, [pc, #196]	@ (10046ecc <_configureTxRxDelay+0xf4>)
10046e06:	001a      	movs	r2, r3
10046e08:	201b      	movs	r0, #27
10046e0a:	f7f9 f959 	bl	100400c0 <blue_unit_conversion>
10046e0e:	0002      	movs	r2, r0
10046e10:	4b2d      	ldr	r3, [pc, #180]	@ (10046ec8 <_configureTxRxDelay+0xf0>)
10046e12:	b2d2      	uxtb	r2, r2
10046e14:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
10046e16:	4b2c      	ldr	r3, [pc, #176]	@ (10046ec8 <_configureTxRxDelay+0xf0>)
10046e18:	799b      	ldrb	r3, [r3, #6]
10046e1a:	b2db      	uxtb	r3, r3
10046e1c:	0018      	movs	r0, r3
10046e1e:	f000 f86d 	bl	10046efc <_us_to_machinetime>
10046e22:	0003      	movs	r3, r0
10046e24:	b2d9      	uxtb	r1, r3
10046e26:	687b      	ldr	r3, [r7, #4]
10046e28:	223d      	movs	r2, #61	@ 0x3d
10046e2a:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
10046e2c:	4b26      	ldr	r3, [pc, #152]	@ (10046ec8 <_configureTxRxDelay+0xf0>)
10046e2e:	7a1b      	ldrb	r3, [r3, #8]
10046e30:	b2db      	uxtb	r3, r3
10046e32:	001a      	movs	r2, r3
10046e34:	193b      	adds	r3, r7, r4
10046e36:	781b      	ldrb	r3, [r3, #0]
10046e38:	18d3      	adds	r3, r2, r3
10046e3a:	0018      	movs	r0, r3
10046e3c:	f000 f85e 	bl	10046efc <_us_to_machinetime>
10046e40:	0003      	movs	r3, r0
10046e42:	b2d9      	uxtb	r1, r3
10046e44:	687b      	ldr	r3, [r7, #4]
10046e46:	2238      	movs	r2, #56	@ 0x38
10046e48:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
10046e4a:	4b1f      	ldr	r3, [pc, #124]	@ (10046ec8 <_configureTxRxDelay+0xf0>)
10046e4c:	7a5b      	ldrb	r3, [r3, #9]
10046e4e:	b2db      	uxtb	r3, r3
10046e50:	001a      	movs	r2, r3
10046e52:	193b      	adds	r3, r7, r4
10046e54:	781b      	ldrb	r3, [r3, #0]
10046e56:	18d3      	adds	r3, r2, r3
10046e58:	0018      	movs	r0, r3
10046e5a:	f000 f84f 	bl	10046efc <_us_to_machinetime>
10046e5e:	0003      	movs	r3, r0
10046e60:	b2d9      	uxtb	r1, r3
10046e62:	687b      	ldr	r3, [r7, #4]
10046e64:	2239      	movs	r2, #57	@ 0x39
10046e66:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
10046e68:	4b17      	ldr	r3, [pc, #92]	@ (10046ec8 <_configureTxRxDelay+0xf0>)
10046e6a:	7a9b      	ldrb	r3, [r3, #10]
10046e6c:	b2db      	uxtb	r3, r3
10046e6e:	0018      	movs	r0, r3
10046e70:	f000 f844 	bl	10046efc <_us_to_machinetime>
10046e74:	0003      	movs	r3, r0
10046e76:	b2d9      	uxtb	r1, r3
10046e78:	687b      	ldr	r3, [r7, #4]
10046e7a:	223a      	movs	r2, #58	@ 0x3a
10046e7c:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
10046e7e:	4b12      	ldr	r3, [pc, #72]	@ (10046ec8 <_configureTxRxDelay+0xf0>)
10046e80:	7adb      	ldrb	r3, [r3, #11]
10046e82:	b2db      	uxtb	r3, r3
10046e84:	0018      	movs	r0, r3
10046e86:	f000 f839 	bl	10046efc <_us_to_machinetime>
10046e8a:	0003      	movs	r3, r0
10046e8c:	b2d9      	uxtb	r1, r3
10046e8e:	687b      	ldr	r3, [r7, #4]
10046e90:	223b      	movs	r2, #59	@ 0x3b
10046e92:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
10046e94:	1cfb      	adds	r3, r7, #3
10046e96:	781b      	ldrb	r3, [r3, #0]
10046e98:	2b00      	cmp	r3, #0
10046e9a:	d010      	beq.n	10046ebe <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
10046e9c:	4b0a      	ldr	r3, [pc, #40]	@ (10046ec8 <_configureTxRxDelay+0xf0>)
10046e9e:	7a1b      	ldrb	r3, [r3, #8]
10046ea0:	b2db      	uxtb	r3, r3
10046ea2:	001a      	movs	r2, r3
10046ea4:	193b      	adds	r3, r7, r4
10046ea6:	781b      	ldrb	r3, [r3, #0]
10046ea8:	18d3      	adds	r3, r2, r3
10046eaa:	0018      	movs	r0, r3
10046eac:	f000 f810 	bl	10046ed0 <_us_to_systime>
10046eb0:	0003      	movs	r3, r0
10046eb2:	b2db      	uxtb	r3, r3
10046eb4:	331b      	adds	r3, #27
10046eb6:	b2d9      	uxtb	r1, r3
10046eb8:	687b      	ldr	r3, [r7, #4]
10046eba:	223c      	movs	r2, #60	@ 0x3c
10046ebc:	5499      	strb	r1, [r3, r2]
  }

}
10046ebe:	46c0      	nop			@ (mov r8, r8)
10046ec0:	46bd      	mov	sp, r7
10046ec2:	b005      	add	sp, #20
10046ec4:	bd90      	pop	{r4, r7, pc}
10046ec6:	46c0      	nop			@ (mov r8, r8)
10046ec8:	200000c0 	.word	0x200000c0
10046ecc:	00000326 	.word	0x00000326

10046ed0 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
10046ed0:	b580      	push	{r7, lr}
10046ed2:	b084      	sub	sp, #16
10046ed4:	af00      	add	r7, sp, #0
10046ed6:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
10046ed8:	687b      	ldr	r3, [r7, #4]
10046eda:	2268      	movs	r2, #104	@ 0x68
10046edc:	4353      	muls	r3, r2
10046ede:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
10046ee0:	687b      	ldr	r3, [r7, #4]
10046ee2:	22db      	movs	r2, #219	@ 0xdb
10046ee4:	4353      	muls	r3, r2
10046ee6:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
10046ee8:	68fb      	ldr	r3, [r7, #12]
10046eea:	0a1a      	lsrs	r2, r3, #8
10046eec:	68bb      	ldr	r3, [r7, #8]
10046eee:	0c1b      	lsrs	r3, r3, #16
10046ef0:	18d3      	adds	r3, r2, r3
}
10046ef2:	0018      	movs	r0, r3
10046ef4:	46bd      	mov	sp, r7
10046ef6:	b004      	add	sp, #16
10046ef8:	bd80      	pop	{r7, pc}
	...

10046efc <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
10046efc:	b5b0      	push	{r4, r5, r7, lr}
10046efe:	b088      	sub	sp, #32
10046f00:	af00      	add	r7, sp, #0
10046f02:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
10046f04:	4915      	ldr	r1, [pc, #84]	@ (10046f5c <_us_to_machinetime+0x60>)
10046f06:	6949      	ldr	r1, [r1, #20]
10046f08:	6039      	str	r1, [r7, #0]
10046f0a:	2100      	movs	r1, #0
10046f0c:	6079      	str	r1, [r7, #4]
10046f0e:	68f9      	ldr	r1, [r7, #12]
10046f10:	000a      	movs	r2, r1
10046f12:	2100      	movs	r1, #0
10046f14:	000b      	movs	r3, r1
10046f16:	6838      	ldr	r0, [r7, #0]
10046f18:	6879      	ldr	r1, [r7, #4]
10046f1a:	f7f9 fb49 	bl	100405b0 <__aeabi_lmul>
10046f1e:	0002      	movs	r2, r0
10046f20:	000b      	movs	r3, r1
10046f22:	0010      	movs	r0, r2
10046f24:	0019      	movs	r1, r3
10046f26:	0002      	movs	r2, r0
10046f28:	000b      	movs	r3, r1
10046f2a:	1892      	adds	r2, r2, r2
10046f2c:	415b      	adcs	r3, r3
10046f2e:	1812      	adds	r2, r2, r0
10046f30:	414b      	adcs	r3, r1
10046f32:	61ba      	str	r2, [r7, #24]
10046f34:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
10046f36:	69ba      	ldr	r2, [r7, #24]
10046f38:	69fb      	ldr	r3, [r7, #28]
10046f3a:	2080      	movs	r0, #128	@ 0x80
10046f3c:	04c0      	lsls	r0, r0, #19
10046f3e:	2100      	movs	r1, #0
10046f40:	1812      	adds	r2, r2, r0
10046f42:	414b      	adcs	r3, r1
10046f44:	0159      	lsls	r1, r3, #5
10046f46:	0ed4      	lsrs	r4, r2, #27
10046f48:	430c      	orrs	r4, r1
10046f4a:	0edd      	lsrs	r5, r3, #27
10046f4c:	0023      	movs	r3, r4
10046f4e:	617b      	str	r3, [r7, #20]

  return time_mt;
10046f50:	697b      	ldr	r3, [r7, #20]
}
10046f52:	0018      	movs	r0, r3
10046f54:	46bd      	mov	sp, r7
10046f56:	b008      	add	sp, #32
10046f58:	bdb0      	pop	{r4, r5, r7, pc}
10046f5a:	46c0      	nop			@ (mov r8, r8)
10046f5c:	20000510 	.word	0x20000510

10046f60 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
10046f60:	b580      	push	{r7, lr}
10046f62:	b084      	sub	sp, #16
10046f64:	af00      	add	r7, sp, #0
10046f66:	0002      	movs	r2, r0
10046f68:	6039      	str	r1, [r7, #0]
10046f6a:	1dbb      	adds	r3, r7, #6
10046f6c:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
10046f6e:	1dbb      	adds	r3, r7, #6
10046f70:	881b      	ldrh	r3, [r3, #0]
10046f72:	6839      	ldr	r1, [r7, #0]
10046f74:	4a0e      	ldr	r2, [pc, #56]	@ (10046fb0 <_update_xtal_startup_time+0x50>)
10046f76:	0018      	movs	r0, r3
10046f78:	f7f9 f8a2 	bl	100400c0 <blue_unit_conversion>
10046f7c:	0003      	movs	r3, r0
10046f7e:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
10046f80:	68fa      	ldr	r2, [r7, #12]
10046f82:	2380      	movs	r3, #128	@ 0x80
10046f84:	015b      	lsls	r3, r3, #5
10046f86:	429a      	cmp	r2, r3
10046f88:	db01      	blt.n	10046f8e <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
10046f8a:	4b0a      	ldr	r3, [pc, #40]	@ (10046fb4 <_update_xtal_startup_time+0x54>)
10046f8c:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
10046f8e:	68fb      	ldr	r3, [r7, #12]
10046f90:	2b0f      	cmp	r3, #15
10046f92:	dc01      	bgt.n	10046f98 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
10046f94:	2310      	movs	r3, #16
10046f96:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
10046f98:	68fb      	ldr	r3, [r7, #12]
10046f9a:	111b      	asrs	r3, r3, #4
10046f9c:	b2db      	uxtb	r3, r3
10046f9e:	4a06      	ldr	r2, [pc, #24]	@ (10046fb8 <_update_xtal_startup_time+0x58>)
10046fa0:	0019      	movs	r1, r3
10046fa2:	0010      	movs	r0, r2
10046fa4:	f7ff f97e 	bl	100462a4 <LL_RADIO_TIMER_SetWakeupOffset>
}
10046fa8:	46c0      	nop			@ (mov r8, r8)
10046faa:	46bd      	mov	sp, r7
10046fac:	b004      	add	sp, #16
10046fae:	bd80      	pop	{r7, pc}
10046fb0:	00000326 	.word	0x00000326
10046fb4:	00000fff 	.word	0x00000fff
10046fb8:	60001800 	.word	0x60001800

10046fbc <_calibration_callback>:

static void _calibration_callback(void *handle)
{
10046fbc:	b580      	push	{r7, lr}
10046fbe:	b082      	sub	sp, #8
10046fc0:	af00      	add	r7, sp, #0
10046fc2:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10046fc4:	4b06      	ldr	r3, [pc, #24]	@ (10046fe0 <_calibration_callback+0x24>)
10046fc6:	781b      	ldrb	r3, [r3, #0]
10046fc8:	2b00      	cmp	r3, #0
10046fca:	d001      	beq.n	10046fd0 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
10046fcc:	f7ff fe74 	bl	10046cb8 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
10046fd0:	4b03      	ldr	r3, [pc, #12]	@ (10046fe0 <_calibration_callback+0x24>)
10046fd2:	2201      	movs	r2, #1
10046fd4:	721a      	strb	r2, [r3, #8]
}
10046fd6:	46c0      	nop			@ (mov r8, r8)
10046fd8:	46bd      	mov	sp, r7
10046fda:	b002      	add	sp, #8
10046fdc:	bd80      	pop	{r7, pc}
10046fde:	46c0      	nop			@ (mov r8, r8)
10046fe0:	20000510 	.word	0x20000510

10046fe4 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
10046fe4:	b590      	push	{r4, r7, lr}
10046fe6:	b089      	sub	sp, #36	@ 0x24
10046fe8:	af00      	add	r7, sp, #0
10046fea:	60f8      	str	r0, [r7, #12]
10046fec:	603a      	str	r2, [r7, #0]
10046fee:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
10046ff0:	2313      	movs	r3, #19
10046ff2:	18fb      	adds	r3, r7, r3
10046ff4:	2200      	movs	r2, #0
10046ff6:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
10046ff8:	68fb      	ldr	r3, [r7, #12]
10046ffa:	7b1b      	ldrb	r3, [r3, #12]
10046ffc:	2b00      	cmp	r3, #0
10046ffe:	d001      	beq.n	10047004 <_start_timer+0x20>
  {
    return 1;
10047000:	2301      	movs	r3, #1
10047002:	e047      	b.n	10047094 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
10047004:	68f9      	ldr	r1, [r7, #12]
10047006:	683a      	ldr	r2, [r7, #0]
10047008:	687b      	ldr	r3, [r7, #4]
1004700a:	600a      	str	r2, [r1, #0]
1004700c:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004700e:	68fb      	ldr	r3, [r7, #12]
10047010:	2201      	movs	r2, #1
10047012:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
10047014:	4b21      	ldr	r3, [pc, #132]	@ (1004709c <_start_timer+0xb8>)
10047016:	228c      	movs	r2, #140	@ 0x8c
10047018:	589b      	ldr	r3, [r3, r2]
1004701a:	68fa      	ldr	r2, [r7, #12]
1004701c:	0011      	movs	r1, r2
1004701e:	0018      	movs	r0, r3
10047020:	f000 f92e 	bl	10047280 <_insert_timer_in_queue>
10047024:	0002      	movs	r2, r0
10047026:	68fb      	ldr	r3, [r7, #12]
10047028:	4293      	cmp	r3, r2
1004702a:	d130      	bne.n	1004708e <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004702c:	2413      	movs	r4, #19
1004702e:	193a      	adds	r2, r7, r4
10047030:	68fb      	ldr	r3, [r7, #12]
10047032:	0011      	movs	r1, r2
10047034:	0018      	movs	r0, r3
10047036:	f000 f89b 	bl	10047170 <_update_user_timeout>
1004703a:	0002      	movs	r2, r0
1004703c:	4b17      	ldr	r3, [pc, #92]	@ (1004709c <_start_timer+0xb8>)
1004703e:	218c      	movs	r1, #140	@ 0x8c
10047040:	505a      	str	r2, [r3, r1]
    if (expired)
10047042:	193b      	adds	r3, r7, r4
10047044:	781b      	ldrb	r3, [r3, #0]
10047046:	2b00      	cmp	r3, #0
10047048:	d021      	beq.n	1004708e <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004704a:	f3ef 8310 	mrs	r3, PRIMASK
1004704e:	61bb      	str	r3, [r7, #24]
  return(result);
10047050:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
10047052:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047054:	b672      	cpsid	i
}
10047056:	46c0      	nop			@ (mov r8, r8)
10047058:	4b10      	ldr	r3, [pc, #64]	@ (1004709c <_start_timer+0xb8>)
1004705a:	2291      	movs	r2, #145	@ 0x91
1004705c:	5c9b      	ldrb	r3, [r3, r2]
1004705e:	3301      	adds	r3, #1
10047060:	4a0e      	ldr	r2, [pc, #56]	@ (1004709c <_start_timer+0xb8>)
10047062:	2192      	movs	r1, #146	@ 0x92
10047064:	5c52      	ldrb	r2, [r2, r1]
10047066:	4293      	cmp	r3, r2
10047068:	d103      	bne.n	10047072 <_start_timer+0x8e>
1004706a:	4b0c      	ldr	r3, [pc, #48]	@ (1004709c <_start_timer+0xb8>)
1004706c:	2291      	movs	r2, #145	@ 0x91
1004706e:	5c9b      	ldrb	r3, [r3, r2]
10047070:	e004      	b.n	1004707c <_start_timer+0x98>
10047072:	4b0a      	ldr	r3, [pc, #40]	@ (1004709c <_start_timer+0xb8>)
10047074:	2291      	movs	r2, #145	@ 0x91
10047076:	5c9b      	ldrb	r3, [r3, r2]
10047078:	3301      	adds	r3, #1
1004707a:	b2db      	uxtb	r3, r3
1004707c:	4a07      	ldr	r2, [pc, #28]	@ (1004709c <_start_timer+0xb8>)
1004707e:	2191      	movs	r1, #145	@ 0x91
10047080:	5453      	strb	r3, [r2, r1]
10047082:	69fb      	ldr	r3, [r7, #28]
10047084:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047086:	697b      	ldr	r3, [r7, #20]
10047088:	f383 8810 	msr	PRIMASK, r3
}
1004708c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return expired;
1004708e:	2313      	movs	r3, #19
10047090:	18fb      	adds	r3, r7, r3
10047092:	781b      	ldrb	r3, [r3, #0]
}
10047094:	0018      	movs	r0, r3
10047096:	46bd      	mov	sp, r7
10047098:	b009      	add	sp, #36	@ 0x24
1004709a:	bd90      	pop	{r4, r7, pc}
1004709c:	20000510 	.word	0x20000510

100470a0 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
100470a0:	b5b0      	push	{r4, r5, r7, lr}
100470a2:	b08a      	sub	sp, #40	@ 0x28
100470a4:	af00      	add	r7, sp, #0
100470a6:	60f8      	str	r0, [r7, #12]
100470a8:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100470aa:	f3ef 8310 	mrs	r3, PRIMASK
100470ae:	617b      	str	r3, [r7, #20]
  return(result);
100470b0:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
100470b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100470b4:	b672      	cpsid	i
}
100470b6:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
100470b8:	68fb      	ldr	r3, [r7, #12]
100470ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100470bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100470be:	623a      	str	r2, [r7, #32]
100470c0:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100470c2:	4b29      	ldr	r3, [pc, #164]	@ (10047168 <_get_system_time_and_machine+0xc8>)
100470c4:	0018      	movs	r0, r3
100470c6:	f7ff f914 	bl	100462f2 <LL_RADIO_TIMER_GetAbsoluteTime>
100470ca:	0002      	movs	r2, r0
100470cc:	68bb      	ldr	r3, [r7, #8]
100470ce:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
100470d0:	68bb      	ldr	r3, [r7, #8]
100470d2:	681a      	ldr	r2, [r3, #0]
100470d4:	68fb      	ldr	r3, [r7, #12]
100470d6:	2180      	movs	r1, #128	@ 0x80
100470d8:	585b      	ldr	r3, [r3, r1]
100470da:	1ad3      	subs	r3, r2, r3
100470dc:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
100470de:	68fb      	ldr	r3, [r7, #12]
100470e0:	69db      	ldr	r3, [r3, #28]
100470e2:	0019      	movs	r1, r3
100470e4:	4a21      	ldr	r2, [pc, #132]	@ (1004716c <_get_system_time_and_machine+0xcc>)
100470e6:	69bb      	ldr	r3, [r7, #24]
100470e8:	0018      	movs	r0, r3
100470ea:	f7f8 ffe9 	bl	100400c0 <blue_unit_conversion>
100470ee:	0003      	movs	r3, r0
100470f0:	603b      	str	r3, [r7, #0]
100470f2:	2300      	movs	r3, #0
100470f4:	607b      	str	r3, [r7, #4]
100470f6:	6a3a      	ldr	r2, [r7, #32]
100470f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100470fa:	6838      	ldr	r0, [r7, #0]
100470fc:	6879      	ldr	r1, [r7, #4]
100470fe:	1812      	adds	r2, r2, r0
10047100:	414b      	adcs	r3, r1
10047102:	623a      	str	r2, [r7, #32]
10047104:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
10047106:	68fb      	ldr	r3, [r7, #12]
10047108:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
1004710a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1004710c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004710e:	4299      	cmp	r1, r3
10047110:	d305      	bcc.n	1004711e <_get_system_time_and_machine+0x7e>
10047112:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10047114:	4299      	cmp	r1, r3
10047116:	d115      	bne.n	10047144 <_get_system_time_and_machine+0xa4>
10047118:	6a39      	ldr	r1, [r7, #32]
1004711a:	4291      	cmp	r1, r2
1004711c:	d212      	bcs.n	10047144 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004711e:	68fb      	ldr	r3, [r7, #12]
10047120:	69db      	ldr	r3, [r3, #28]
10047122:	0019      	movs	r1, r3
10047124:	4a11      	ldr	r2, [pc, #68]	@ (1004716c <_get_system_time_and_machine+0xcc>)
10047126:	2301      	movs	r3, #1
10047128:	425b      	negs	r3, r3
1004712a:	0018      	movs	r0, r3
1004712c:	f7f8 ffc8 	bl	100400c0 <blue_unit_conversion>
10047130:	0003      	movs	r3, r0
10047132:	001c      	movs	r4, r3
10047134:	2300      	movs	r3, #0
10047136:	001d      	movs	r5, r3
10047138:	6a3a      	ldr	r2, [r7, #32]
1004713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004713c:	1912      	adds	r2, r2, r4
1004713e:	416b      	adcs	r3, r5
10047140:	623a      	str	r2, [r7, #32]
10047142:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
10047144:	68f9      	ldr	r1, [r7, #12]
10047146:	6a3a      	ldr	r2, [r7, #32]
10047148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004714a:	678a      	str	r2, [r1, #120]	@ 0x78
1004714c:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004714e:	69fb      	ldr	r3, [r7, #28]
10047150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047152:	693b      	ldr	r3, [r7, #16]
10047154:	f383 8810 	msr	PRIMASK, r3
}
10047158:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004715a:	6a3a      	ldr	r2, [r7, #32]
1004715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004715e:	0010      	movs	r0, r2
10047160:	0019      	movs	r1, r3
10047162:	46bd      	mov	sp, r7
10047164:	b00a      	add	sp, #40	@ 0x28
10047166:	bdb0      	pop	{r4, r5, r7, pc}
10047168:	60001800 	.word	0x60001800
1004716c:	00000635 	.word	0x00000635

10047170 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10047170:	b5b0      	push	{r4, r5, r7, lr}
10047172:	b08a      	sub	sp, #40	@ 0x28
10047174:	af00      	add	r7, sp, #0
10047176:	6078      	str	r0, [r7, #4]
10047178:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
1004717a:	687b      	ldr	r3, [r7, #4]
1004717c:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
1004717e:	687b      	ldr	r3, [r7, #4]
10047180:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
10047182:	683b      	ldr	r3, [r7, #0]
10047184:	2200      	movs	r2, #0
10047186:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
10047188:	e033      	b.n	100471f2 <_update_user_timeout+0x82>
  {
    if (curr->active)
1004718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004718c:	7b1b      	ldrb	r3, [r3, #12]
1004718e:	2b00      	cmp	r3, #0
10047190:	d02c      	beq.n	100471ec <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047192:	f3ef 8310 	mrs	r3, PRIMASK
10047196:	60fb      	str	r3, [r7, #12]
  return(result);
10047198:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
1004719a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004719c:	b672      	cpsid	i
}
1004719e:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
100471a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100471a2:	681c      	ldr	r4, [r3, #0]
100471a4:	685d      	ldr	r5, [r3, #4]
100471a6:	f7ff fcb1 	bl	10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>
100471aa:	0002      	movs	r2, r0
100471ac:	000b      	movs	r3, r1
100471ae:	1aa4      	subs	r4, r4, r2
100471b0:	419d      	sbcs	r5, r3
100471b2:	0022      	movs	r2, r4
100471b4:	002b      	movs	r3, r5
100471b6:	613a      	str	r2, [r7, #16]
100471b8:	617b      	str	r3, [r7, #20]
      if (delay > 0)
100471ba:	697b      	ldr	r3, [r7, #20]
100471bc:	2b00      	cmp	r3, #0
100471be:	dc05      	bgt.n	100471cc <_update_user_timeout+0x5c>
100471c0:	697b      	ldr	r3, [r7, #20]
100471c2:	2b00      	cmp	r3, #0
100471c4:	d108      	bne.n	100471d8 <_update_user_timeout+0x68>
100471c6:	693b      	ldr	r3, [r7, #16]
100471c8:	2b00      	cmp	r3, #0
100471ca:	d005      	beq.n	100471d8 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
100471cc:	693b      	ldr	r3, [r7, #16]
100471ce:	2101      	movs	r1, #1
100471d0:	0018      	movs	r0, r3
100471d2:	f000 f81d 	bl	10047210 <VTIMER_SetWakeupTime>
100471d6:	e002      	b.n	100471de <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
100471d8:	683b      	ldr	r3, [r7, #0]
100471da:	2201      	movs	r2, #1
100471dc:	701a      	strb	r2, [r3, #0]
100471de:	69fb      	ldr	r3, [r7, #28]
100471e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100471e2:	68bb      	ldr	r3, [r7, #8]
100471e4:	f383 8810 	msr	PRIMASK, r3
}
100471e8:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
100471ea:	e005      	b.n	100471f8 <_update_user_timeout+0x88>
    }
    curr = curr->next;
100471ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100471ee:	691b      	ldr	r3, [r3, #16]
100471f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
100471f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100471f4:	2b00      	cmp	r3, #0
100471f6:	d1c8      	bne.n	1004718a <_update_user_timeout+0x1a>
  }
  if (*expired)
100471f8:	683b      	ldr	r3, [r7, #0]
100471fa:	781b      	ldrb	r3, [r3, #0]
100471fc:	2b00      	cmp	r3, #0
100471fe:	d001      	beq.n	10047204 <_update_user_timeout+0x94>
  {
    return rootOrig;
10047200:	6a3b      	ldr	r3, [r7, #32]
10047202:	e000      	b.n	10047206 <_update_user_timeout+0x96>
  }

  return curr;
10047204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10047206:	0018      	movs	r0, r3
10047208:	46bd      	mov	sp, r7
1004720a:	b00a      	add	sp, #40	@ 0x28
1004720c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10047210 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
10047210:	b580      	push	{r7, lr}
10047212:	b084      	sub	sp, #16
10047214:	af00      	add	r7, sp, #0
10047216:	6078      	str	r0, [r7, #4]
10047218:	000a      	movs	r2, r1
1004721a:	1cfb      	adds	r3, r7, #3
1004721c:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004721e:	4b15      	ldr	r3, [pc, #84]	@ (10047274 <VTIMER_SetWakeupTime+0x64>)
10047220:	699b      	ldr	r3, [r3, #24]
10047222:	0019      	movs	r1, r3
10047224:	4a14      	ldr	r2, [pc, #80]	@ (10047278 <VTIMER_SetWakeupTime+0x68>)
10047226:	687b      	ldr	r3, [r7, #4]
10047228:	0018      	movs	r0, r3
1004722a:	f7f8 ff49 	bl	100400c0 <blue_unit_conversion>
1004722e:	0003      	movs	r3, r0
10047230:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
10047232:	687b      	ldr	r3, [r7, #4]
10047234:	2b20      	cmp	r3, #32
10047236:	d200      	bcs.n	1004723a <VTIMER_SetWakeupTime+0x2a>
10047238:	2320      	movs	r3, #32
1004723a:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004723c:	4b0f      	ldr	r3, [pc, #60]	@ (1004727c <VTIMER_SetWakeupTime+0x6c>)
1004723e:	0018      	movs	r0, r3
10047240:	f7ff f857 	bl	100462f2 <LL_RADIO_TIMER_GetAbsoluteTime>
10047244:	0003      	movs	r3, r0
10047246:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10047248:	687a      	ldr	r2, [r7, #4]
1004724a:	68fb      	ldr	r3, [r7, #12]
1004724c:	18d3      	adds	r3, r2, r3
1004724e:	3308      	adds	r3, #8
10047250:	4a0a      	ldr	r2, [pc, #40]	@ (1004727c <VTIMER_SetWakeupTime+0x6c>)
10047252:	0019      	movs	r1, r3
10047254:	0010      	movs	r0, r2
10047256:	f7ff f840 	bl	100462da <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004725a:	4b08      	ldr	r3, [pc, #32]	@ (1004727c <VTIMER_SetWakeupTime+0x6c>)
1004725c:	0018      	movs	r0, r3
1004725e:	f7ff f852 	bl	10046306 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
10047262:	4b06      	ldr	r3, [pc, #24]	@ (1004727c <VTIMER_SetWakeupTime+0x6c>)
10047264:	0018      	movs	r0, r3
10047266:	f7fe fffd 	bl	10046264 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004726a:	68fb      	ldr	r3, [r7, #12]
}
1004726c:	0018      	movs	r0, r3
1004726e:	46bd      	mov	sp, r7
10047270:	b004      	add	sp, #16
10047272:	bd80      	pop	{r7, pc}
10047274:	20000510 	.word	0x20000510
10047278:	00000326 	.word	0x00000326
1004727c:	60001800 	.word	0x60001800

10047280 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10047280:	b580      	push	{r7, lr}
10047282:	b086      	sub	sp, #24
10047284:	af00      	add	r7, sp, #0
10047286:	6078      	str	r0, [r7, #4]
10047288:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004728a:	687b      	ldr	r3, [r7, #4]
1004728c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004728e:	2300      	movs	r3, #0
10047290:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
10047292:	687b      	ldr	r3, [r7, #4]
10047294:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
10047296:	e004      	b.n	100472a2 <_insert_timer_in_queue+0x22>
  {
    prev = current;
10047298:	697b      	ldr	r3, [r7, #20]
1004729a:	613b      	str	r3, [r7, #16]
    current = current->next;
1004729c:	697b      	ldr	r3, [r7, #20]
1004729e:	691b      	ldr	r3, [r3, #16]
100472a0:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
100472a2:	697b      	ldr	r3, [r7, #20]
100472a4:	2b00      	cmp	r3, #0
100472a6:	d00a      	beq.n	100472be <_insert_timer_in_queue+0x3e>
100472a8:	697b      	ldr	r3, [r7, #20]
100472aa:	681a      	ldr	r2, [r3, #0]
100472ac:	685b      	ldr	r3, [r3, #4]
100472ae:	6839      	ldr	r1, [r7, #0]
100472b0:	6808      	ldr	r0, [r1, #0]
100472b2:	6849      	ldr	r1, [r1, #4]
100472b4:	4299      	cmp	r1, r3
100472b6:	d8ef      	bhi.n	10047298 <_insert_timer_in_queue+0x18>
100472b8:	d101      	bne.n	100472be <_insert_timer_in_queue+0x3e>
100472ba:	4290      	cmp	r0, r2
100472bc:	d8ec      	bhi.n	10047298 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
100472be:	683b      	ldr	r3, [r7, #0]
100472c0:	697a      	ldr	r2, [r7, #20]
100472c2:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
100472c4:	693b      	ldr	r3, [r7, #16]
100472c6:	2b00      	cmp	r3, #0
100472c8:	d102      	bne.n	100472d0 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
100472ca:	683b      	ldr	r3, [r7, #0]
100472cc:	60fb      	str	r3, [r7, #12]
100472ce:	e002      	b.n	100472d6 <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
100472d0:	693b      	ldr	r3, [r7, #16]
100472d2:	683a      	ldr	r2, [r7, #0]
100472d4:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
100472d6:	68fb      	ldr	r3, [r7, #12]
}
100472d8:	0018      	movs	r0, r3
100472da:	46bd      	mov	sp, r7
100472dc:	b006      	add	sp, #24
100472de:	bd80      	pop	{r7, pc}

100472e0 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
100472e0:	b580      	push	{r7, lr}
100472e2:	b082      	sub	sp, #8
100472e4:	af00      	add	r7, sp, #0
100472e6:	0002      	movs	r2, r0
100472e8:	1dfb      	adds	r3, r7, #7
100472ea:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
100472ec:	1dfb      	adds	r3, r7, #7
100472ee:	781b      	ldrb	r3, [r3, #0]
100472f0:	2b00      	cmp	r3, #0
100472f2:	d010      	beq.n	10047316 <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
100472f4:	4b0e      	ldr	r3, [pc, #56]	@ (10047330 <_virtualTimeBaseEnable+0x50>)
100472f6:	2290      	movs	r2, #144	@ 0x90
100472f8:	5c9b      	ldrb	r3, [r3, r2]
100472fa:	2201      	movs	r2, #1
100472fc:	4053      	eors	r3, r2
100472fe:	b2db      	uxtb	r3, r3
10047300:	2b00      	cmp	r3, #0
10047302:	d010      	beq.n	10047326 <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10047304:	4b0b      	ldr	r3, [pc, #44]	@ (10047334 <_virtualTimeBaseEnable+0x54>)
10047306:	0018      	movs	r0, r3
10047308:	f7ff fe58 	bl	10046fbc <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
1004730c:	4b08      	ldr	r3, [pc, #32]	@ (10047330 <_virtualTimeBaseEnable+0x50>)
1004730e:	2290      	movs	r2, #144	@ 0x90
10047310:	2101      	movs	r1, #1
10047312:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
10047314:	e007      	b.n	10047326 <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10047316:	4b07      	ldr	r3, [pc, #28]	@ (10047334 <_virtualTimeBaseEnable+0x54>)
10047318:	0018      	movs	r0, r3
1004731a:	f7ff fc23 	bl	10046b64 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004731e:	4b04      	ldr	r3, [pc, #16]	@ (10047330 <_virtualTimeBaseEnable+0x50>)
10047320:	2290      	movs	r2, #144	@ 0x90
10047322:	2100      	movs	r1, #0
10047324:	5499      	strb	r1, [r3, r2]
}
10047326:	46c0      	nop			@ (mov r8, r8)
10047328:	46bd      	mov	sp, r7
1004732a:	b002      	add	sp, #8
1004732c:	bd80      	pop	{r7, pc}
1004732e:	46c0      	nop			@ (mov r8, r8)
10047330:	20000510 	.word	0x20000510
10047334:	20000550 	.word	0x20000550

10047338 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10047338:	b580      	push	{r7, lr}
1004733a:	b086      	sub	sp, #24
1004733c:	af00      	add	r7, sp, #0
1004733e:	6078      	str	r0, [r7, #4]
10047340:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
10047342:	687b      	ldr	r3, [r7, #4]
10047344:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
10047346:	2300      	movs	r3, #0
10047348:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004734a:	687b      	ldr	r3, [r7, #4]
1004734c:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004734e:	e004      	b.n	1004735a <_remove_timer_in_queue+0x22>
  {
    prev = current;
10047350:	697b      	ldr	r3, [r7, #20]
10047352:	613b      	str	r3, [r7, #16]
    current = current->next;
10047354:	697b      	ldr	r3, [r7, #20]
10047356:	691b      	ldr	r3, [r3, #16]
10047358:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004735a:	697b      	ldr	r3, [r7, #20]
1004735c:	2b00      	cmp	r3, #0
1004735e:	d003      	beq.n	10047368 <_remove_timer_in_queue+0x30>
10047360:	697a      	ldr	r2, [r7, #20]
10047362:	683b      	ldr	r3, [r7, #0]
10047364:	429a      	cmp	r2, r3
10047366:	d1f3      	bne.n	10047350 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
10047368:	697b      	ldr	r3, [r7, #20]
1004736a:	2b00      	cmp	r3, #0
1004736c:	d00b      	beq.n	10047386 <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004736e:	697a      	ldr	r2, [r7, #20]
10047370:	687b      	ldr	r3, [r7, #4]
10047372:	429a      	cmp	r2, r3
10047374:	d103      	bne.n	1004737e <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
10047376:	697b      	ldr	r3, [r7, #20]
10047378:	691b      	ldr	r3, [r3, #16]
1004737a:	60fb      	str	r3, [r7, #12]
1004737c:	e003      	b.n	10047386 <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004737e:	697b      	ldr	r3, [r7, #20]
10047380:	691a      	ldr	r2, [r3, #16]
10047382:	693b      	ldr	r3, [r7, #16]
10047384:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
10047386:	68fb      	ldr	r3, [r7, #12]
}
10047388:	0018      	movs	r0, r3
1004738a:	46bd      	mov	sp, r7
1004738c:	b006      	add	sp, #24
1004738e:	bd80      	pop	{r7, pc}

10047390 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
10047390:	b5b0      	push	{r4, r5, r7, lr}
10047392:	b088      	sub	sp, #32
10047394:	af00      	add	r7, sp, #0
10047396:	6078      	str	r0, [r7, #4]
10047398:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004739a:	687b      	ldr	r3, [r7, #4]
1004739c:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004739e:	2300      	movs	r3, #0
100473a0:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
100473a2:	687b      	ldr	r3, [r7, #4]
100473a4:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
100473a6:	683b      	ldr	r3, [r7, #0]
100473a8:	687a      	ldr	r2, [r7, #4]
100473aa:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
100473ac:	2300      	movs	r3, #0
100473ae:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
100473b0:	e021      	b.n	100473f6 <_check_callbacks+0x66>
  {

    if (curr->active)
100473b2:	69fb      	ldr	r3, [r7, #28]
100473b4:	7b1b      	ldrb	r3, [r3, #12]
100473b6:	2b00      	cmp	r3, #0
100473b8:	d015      	beq.n	100473e6 <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
100473ba:	69fb      	ldr	r3, [r7, #28]
100473bc:	681c      	ldr	r4, [r3, #0]
100473be:	685d      	ldr	r5, [r3, #4]
100473c0:	f7ff fba4 	bl	10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>
100473c4:	0002      	movs	r2, r0
100473c6:	000b      	movs	r3, r1
100473c8:	1aa4      	subs	r4, r4, r2
100473ca:	419d      	sbcs	r5, r3
100473cc:	0022      	movs	r2, r4
100473ce:	002b      	movs	r3, r5
100473d0:	60ba      	str	r2, [r7, #8]
100473d2:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
100473d4:	68fb      	ldr	r3, [r7, #12]
100473d6:	2b00      	cmp	r3, #0
100473d8:	dc11      	bgt.n	100473fe <_check_callbacks+0x6e>
100473da:	68fb      	ldr	r3, [r7, #12]
100473dc:	2b00      	cmp	r3, #0
100473de:	d102      	bne.n	100473e6 <_check_callbacks+0x56>
100473e0:	68bb      	ldr	r3, [r7, #8]
100473e2:	2b05      	cmp	r3, #5
100473e4:	d80b      	bhi.n	100473fe <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
100473e6:	69fb      	ldr	r3, [r7, #28]
100473e8:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
100473ea:	69fb      	ldr	r3, [r7, #28]
100473ec:	691b      	ldr	r3, [r3, #16]
100473ee:	61fb      	str	r3, [r7, #28]
    expiredCount++;
100473f0:	693b      	ldr	r3, [r7, #16]
100473f2:	3301      	adds	r3, #1
100473f4:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
100473f6:	69fb      	ldr	r3, [r7, #28]
100473f8:	2b00      	cmp	r3, #0
100473fa:	d1da      	bne.n	100473b2 <_check_callbacks+0x22>
100473fc:	e000      	b.n	10047400 <_check_callbacks+0x70>
        break;
100473fe:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
10047400:	693b      	ldr	r3, [r7, #16]
10047402:	2b00      	cmp	r3, #0
10047404:	d005      	beq.n	10047412 <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
10047406:	69bb      	ldr	r3, [r7, #24]
10047408:	2200      	movs	r2, #0
1004740a:	611a      	str	r2, [r3, #16]
    returnValue = curr;
1004740c:	69fb      	ldr	r3, [r7, #28]
1004740e:	617b      	str	r3, [r7, #20]
10047410:	e002      	b.n	10047418 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
10047412:	683b      	ldr	r3, [r7, #0]
10047414:	2200      	movs	r2, #0
10047416:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
10047418:	697b      	ldr	r3, [r7, #20]
}
1004741a:	0018      	movs	r0, r3
1004741c:	46bd      	mov	sp, r7
1004741e:	b008      	add	sp, #32
10047420:	bdb0      	pop	{r4, r5, r7, pc}
	...

10047424 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
10047424:	b580      	push	{r7, lr}
10047426:	b084      	sub	sp, #16
10047428:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004742a:	4b17      	ldr	r3, [pc, #92]	@ (10047488 <_updateCalibrationData+0x64>)
1004742c:	781b      	ldrb	r3, [r3, #0]
1004742e:	2b00      	cmp	r3, #0
10047430:	d015      	beq.n	1004745e <_updateCalibrationData+0x3a>
  {
    _get_calibration_data(&RADIO_TIMER_Context.calibrationData);
10047432:	4b16      	ldr	r3, [pc, #88]	@ (1004748c <_updateCalibrationData+0x68>)
10047434:	0018      	movs	r0, r3
10047436:	f7ff fc67 	bl	10046d08 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004743a:	4b13      	ldr	r3, [pc, #76]	@ (10047488 <_updateCalibrationData+0x64>)
1004743c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004743e:	b29a      	uxth	r2, r3
10047440:	4b11      	ldr	r3, [pc, #68]	@ (10047488 <_updateCalibrationData+0x64>)
10047442:	699b      	ldr	r3, [r3, #24]
10047444:	0019      	movs	r1, r3
10047446:	0010      	movs	r0, r2
10047448:	f7ff fd8a 	bl	10046f60 <_update_xtal_startup_time>
    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004744c:	4b0e      	ldr	r3, [pc, #56]	@ (10047488 <_updateCalibrationData+0x64>)
1004744e:	2100      	movs	r1, #0
10047450:	0018      	movs	r0, r3
10047452:	f7ff fcc1 	bl	10046dd8 <_configureTxRxDelay>
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
10047456:	4b0c      	ldr	r3, [pc, #48]	@ (10047488 <_updateCalibrationData+0x64>)
10047458:	2234      	movs	r2, #52	@ 0x34
1004745a:	2101      	movs	r1, #1
1004745c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004745e:	f3ef 8310 	mrs	r3, PRIMASK
10047462:	607b      	str	r3, [r7, #4]
  return(result);
10047464:	687b      	ldr	r3, [r7, #4]
  }
  ATOMIC_SECTION_BEGIN();
10047466:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10047468:	b672      	cpsid	i
}
1004746a:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004746c:	4b06      	ldr	r3, [pc, #24]	@ (10047488 <_updateCalibrationData+0x64>)
1004746e:	0018      	movs	r0, r3
10047470:	f000 f80e 	bl	10047490 <_update_system_time>
10047474:	68fb      	ldr	r3, [r7, #12]
10047476:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047478:	68bb      	ldr	r3, [r7, #8]
1004747a:	f383 8810 	msr	PRIMASK, r3
}
1004747e:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10047480:	46c0      	nop			@ (mov r8, r8)
10047482:	46bd      	mov	sp, r7
10047484:	b004      	add	sp, #16
10047486:	bd80      	pop	{r7, pc}
10047488:	20000510 	.word	0x20000510
1004748c:	20000520 	.word	0x20000520

10047490 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
10047490:	b5b0      	push	{r4, r5, r7, lr}
10047492:	b088      	sub	sp, #32
10047494:	af00      	add	r7, sp, #0
10047496:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047498:	4b2a      	ldr	r3, [pc, #168]	@ (10047544 <_update_system_time+0xb4>)
1004749a:	0018      	movs	r0, r3
1004749c:	f7fe ff29 	bl	100462f2 <LL_RADIO_TIMER_GetAbsoluteTime>
100474a0:	0003      	movs	r3, r0
100474a2:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
100474a4:	697b      	ldr	r3, [r7, #20]
100474a6:	6a1b      	ldr	r3, [r3, #32]
100474a8:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
100474aa:	697b      	ldr	r3, [r7, #20]
100474ac:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
100474ae:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
100474b0:	697b      	ldr	r3, [r7, #20]
100474b2:	2280      	movs	r2, #128	@ 0x80
100474b4:	589b      	ldr	r3, [r3, r2]
100474b6:	69fa      	ldr	r2, [r7, #28]
100474b8:	1ad3      	subs	r3, r2, r3
100474ba:	4a23      	ldr	r2, [pc, #140]	@ (10047548 <_update_system_time+0xb8>)
100474bc:	69b9      	ldr	r1, [r7, #24]
100474be:	0018      	movs	r0, r3
100474c0:	f7f8 fdfe 	bl	100400c0 <blue_unit_conversion>
100474c4:	0003      	movs	r3, r0
100474c6:	60bb      	str	r3, [r7, #8]
100474c8:	2300      	movs	r3, #0
100474ca:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
100474cc:	68ba      	ldr	r2, [r7, #8]
100474ce:	68fb      	ldr	r3, [r7, #12]
100474d0:	1912      	adds	r2, r2, r4
100474d2:	416b      	adcs	r3, r5
100474d4:	6979      	ldr	r1, [r7, #20]
100474d6:	670a      	str	r2, [r1, #112]	@ 0x70
100474d8:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
100474da:	697b      	ldr	r3, [r7, #20]
100474dc:	781b      	ldrb	r3, [r3, #0]
100474de:	2b00      	cmp	r3, #0
100474e0:	d11d      	bne.n	1004751e <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
100474e2:	697b      	ldr	r3, [r7, #20]
100474e4:	2280      	movs	r2, #128	@ 0x80
100474e6:	589b      	ldr	r3, [r3, r2]
100474e8:	69fa      	ldr	r2, [r7, #28]
100474ea:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
100474ec:	697b      	ldr	r3, [r7, #20]
100474ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
100474f0:	429a      	cmp	r2, r3
100474f2:	d214      	bcs.n	1004751e <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
100474f4:	4a14      	ldr	r2, [pc, #80]	@ (10047548 <_update_system_time+0xb8>)
100474f6:	69b9      	ldr	r1, [r7, #24]
100474f8:	2301      	movs	r3, #1
100474fa:	425b      	negs	r3, r3
100474fc:	0018      	movs	r0, r3
100474fe:	f7f8 fddf 	bl	100400c0 <blue_unit_conversion>
10047502:	0001      	movs	r1, r0
10047504:	697b      	ldr	r3, [r7, #20]
10047506:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10047508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004750a:	6039      	str	r1, [r7, #0]
1004750c:	2100      	movs	r1, #0
1004750e:	6079      	str	r1, [r7, #4]
10047510:	6838      	ldr	r0, [r7, #0]
10047512:	6879      	ldr	r1, [r7, #4]
10047514:	1812      	adds	r2, r2, r0
10047516:	414b      	adcs	r3, r1
10047518:	6979      	ldr	r1, [r7, #20]
1004751a:	670a      	str	r2, [r1, #112]	@ 0x70
1004751c:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004751e:	697b      	ldr	r3, [r7, #20]
10047520:	2180      	movs	r1, #128	@ 0x80
10047522:	69fa      	ldr	r2, [r7, #28]
10047524:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
10047526:	697b      	ldr	r3, [r7, #20]
10047528:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004752a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004752c:	6979      	ldr	r1, [r7, #20]
1004752e:	628a      	str	r2, [r1, #40]	@ 0x28
10047530:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
10047532:	697b      	ldr	r3, [r7, #20]
10047534:	69da      	ldr	r2, [r3, #28]
10047536:	697b      	ldr	r3, [r7, #20]
10047538:	621a      	str	r2, [r3, #32]
}
1004753a:	46c0      	nop			@ (mov r8, r8)
1004753c:	46bd      	mov	sp, r7
1004753e:	b008      	add	sp, #32
10047540:	bdb0      	pop	{r4, r5, r7, pc}
10047542:	46c0      	nop			@ (mov r8, r8)
10047544:	60001800 	.word	0x60001800
10047548:	00000635 	.word	0x00000635

1004754c <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004754c:	b5b0      	push	{r4, r5, r7, lr}
1004754e:	b08a      	sub	sp, #40	@ 0x28
10047550:	af00      	add	r7, sp, #0
10047552:	6078      	str	r0, [r7, #4]
10047554:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
10047556:	683b      	ldr	r3, [r7, #0]
10047558:	2200      	movs	r2, #0
1004755a:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004755c:	687b      	ldr	r3, [r7, #4]
1004755e:	7a9b      	ldrb	r3, [r3, #10]
10047560:	2b00      	cmp	r3, #0
10047562:	d100      	bne.n	10047566 <_check_radio_activity+0x1a>
10047564:	e070      	b.n	10047648 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10047566:	4b3a      	ldr	r3, [pc, #232]	@ (10047650 <_check_radio_activity+0x104>)
10047568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004756c:	4938      	ldr	r1, [pc, #224]	@ (10047650 <_check_radio_activity+0x104>)
1004756e:	6849      	ldr	r1, [r1, #4]
10047570:	000c      	movs	r4, r1
10047572:	2100      	movs	r1, #0
10047574:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10047576:	1912      	adds	r2, r2, r4
10047578:	416b      	adcs	r3, r5
1004757a:	623a      	str	r2, [r7, #32]
1004757c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004757e:	f3ef 8310 	mrs	r3, PRIMASK
10047582:	60fb      	str	r3, [r7, #12]
  return(result);
10047584:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
10047586:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10047588:	b672      	cpsid	i
}
1004758a:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004758c:	f7ff fabe 	bl	10046b0c <HAL_RADIO_TIMER_GetCurrentSysTime>
10047590:	0002      	movs	r2, r0
10047592:	000b      	movs	r3, r1
10047594:	613a      	str	r2, [r7, #16]
10047596:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10047598:	687b      	ldr	r3, [r7, #4]
1004759a:	681a      	ldr	r2, [r3, #0]
1004759c:	685b      	ldr	r3, [r3, #4]
1004759e:	6a38      	ldr	r0, [r7, #32]
100475a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100475a2:	24c8      	movs	r4, #200	@ 0xc8
100475a4:	02a4      	lsls	r4, r4, #10
100475a6:	2500      	movs	r5, #0
100475a8:	1900      	adds	r0, r0, r4
100475aa:	4169      	adcs	r1, r5
100475ac:	4299      	cmp	r1, r3
100475ae:	d812      	bhi.n	100475d6 <_check_radio_activity+0x8a>
100475b0:	d101      	bne.n	100475b6 <_check_radio_activity+0x6a>
100475b2:	4290      	cmp	r0, r2
100475b4:	d80f      	bhi.n	100475d6 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
100475b6:	6a3a      	ldr	r2, [r7, #32]
100475b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100475ba:	20b9      	movs	r0, #185	@ 0xb9
100475bc:	0040      	lsls	r0, r0, #1
100475be:	2100      	movs	r1, #0
100475c0:	1812      	adds	r2, r2, r0
100475c2:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
100475c4:	6979      	ldr	r1, [r7, #20]
100475c6:	4299      	cmp	r1, r3
100475c8:	d805      	bhi.n	100475d6 <_check_radio_activity+0x8a>
100475ca:	6979      	ldr	r1, [r7, #20]
100475cc:	4299      	cmp	r1, r3
100475ce:	d135      	bne.n	1004763c <_check_radio_activity+0xf0>
100475d0:	6939      	ldr	r1, [r7, #16]
100475d2:	4291      	cmp	r1, r2
100475d4:	d932      	bls.n	1004763c <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
100475d6:	687b      	ldr	r3, [r7, #4]
100475d8:	681a      	ldr	r2, [r3, #0]
100475da:	685b      	ldr	r3, [r3, #4]
100475dc:	204c      	movs	r0, #76	@ 0x4c
100475de:	4240      	negs	r0, r0
100475e0:	17c1      	asrs	r1, r0, #31
100475e2:	1880      	adds	r0, r0, r2
100475e4:	4159      	adcs	r1, r3
100475e6:	693a      	ldr	r2, [r7, #16]
100475e8:	697b      	ldr	r3, [r7, #20]
100475ea:	240a      	movs	r4, #10
100475ec:	2500      	movs	r5, #0
100475ee:	1912      	adds	r2, r2, r4
100475f0:	416b      	adcs	r3, r5
100475f2:	4299      	cmp	r1, r3
100475f4:	d802      	bhi.n	100475fc <_check_radio_activity+0xb0>
100475f6:	d11a      	bne.n	1004762e <_check_radio_activity+0xe2>
100475f8:	4290      	cmp	r0, r2
100475fa:	d918      	bls.n	1004762e <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
100475fc:	687b      	ldr	r3, [r7, #4]
100475fe:	681a      	ldr	r2, [r3, #0]
10047600:	685b      	ldr	r3, [r3, #4]
10047602:	0010      	movs	r0, r2
10047604:	687b      	ldr	r3, [r7, #4]
10047606:	7b19      	ldrb	r1, [r3, #12]
10047608:	687b      	ldr	r3, [r7, #4]
1004760a:	7a1b      	ldrb	r3, [r3, #8]
1004760c:	001a      	movs	r2, r3
1004760e:	f000 f821 	bl	10047654 <TIMER_SetRadioTimerValue>
10047612:	0003      	movs	r3, r0
10047614:	001a      	movs	r2, r3
10047616:	683b      	ldr	r3, [r7, #0]
10047618:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004761a:	687b      	ldr	r3, [r7, #4]
1004761c:	2200      	movs	r2, #0
1004761e:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10047620:	687b      	ldr	r3, [r7, #4]
10047622:	2201      	movs	r2, #1
10047624:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
10047626:	687b      	ldr	r3, [r7, #4]
10047628:	2201      	movs	r2, #1
1004762a:	72da      	strb	r2, [r3, #11]
1004762c:	e006      	b.n	1004763c <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004762e:	4b08      	ldr	r3, [pc, #32]	@ (10047650 <_check_radio_activity+0x104>)
10047630:	2262      	movs	r2, #98	@ 0x62
10047632:	2100      	movs	r1, #0
10047634:	5499      	strb	r1, [r3, r2]
        *expired = 1;
10047636:	683b      	ldr	r3, [r7, #0]
10047638:	2201      	movs	r2, #1
1004763a:	701a      	strb	r2, [r3, #0]
1004763c:	69fb      	ldr	r3, [r7, #28]
1004763e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047640:	68bb      	ldr	r3, [r7, #8]
10047642:	f383 8810 	msr	PRIMASK, r3
}
10047646:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
10047648:	46c0      	nop			@ (mov r8, r8)
1004764a:	46bd      	mov	sp, r7
1004764c:	b00a      	add	sp, #40	@ 0x28
1004764e:	bdb0      	pop	{r4, r5, r7, pc}
10047650:	20000510 	.word	0x20000510

10047654 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
10047654:	b580      	push	{r7, lr}
10047656:	b08a      	sub	sp, #40	@ 0x28
10047658:	af00      	add	r7, sp, #0
1004765a:	6078      	str	r0, [r7, #4]
1004765c:	0008      	movs	r0, r1
1004765e:	0011      	movs	r1, r2
10047660:	1cfb      	adds	r3, r7, #3
10047662:	1c02      	adds	r2, r0, #0
10047664:	701a      	strb	r2, [r3, #0]
10047666:	1cbb      	adds	r3, r7, #2
10047668:	1c0a      	adds	r2, r1, #0
1004766a:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
1004766c:	1cfb      	adds	r3, r7, #3
1004766e:	781b      	ldrb	r3, [r3, #0]
10047670:	2b00      	cmp	r3, #0
10047672:	d015      	beq.n	100476a0 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
10047674:	1cbb      	adds	r3, r7, #2
10047676:	781b      	ldrb	r3, [r3, #0]
10047678:	2b00      	cmp	r3, #0
1004767a:	d008      	beq.n	1004768e <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
1004767c:	4b67      	ldr	r3, [pc, #412]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
1004767e:	2238      	movs	r2, #56	@ 0x38
10047680:	5c9b      	ldrb	r3, [r3, r2]
10047682:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047684:	4b65      	ldr	r3, [pc, #404]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
10047686:	223c      	movs	r2, #60	@ 0x3c
10047688:	5c9b      	ldrb	r3, [r3, r2]
1004768a:	61fb      	str	r3, [r7, #28]
1004768c:	e01d      	b.n	100476ca <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004768e:	4b63      	ldr	r3, [pc, #396]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
10047690:	2239      	movs	r2, #57	@ 0x39
10047692:	5c9b      	ldrb	r3, [r3, r2]
10047694:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10047696:	4b61      	ldr	r3, [pc, #388]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
10047698:	223c      	movs	r2, #60	@ 0x3c
1004769a:	5c9b      	ldrb	r3, [r3, r2]
1004769c:	61fb      	str	r3, [r7, #28]
1004769e:	e014      	b.n	100476ca <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
100476a0:	1cbb      	adds	r3, r7, #2
100476a2:	781b      	ldrb	r3, [r3, #0]
100476a4:	2b00      	cmp	r3, #0
100476a6:	d008      	beq.n	100476ba <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
100476a8:	4b5c      	ldr	r3, [pc, #368]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
100476aa:	223a      	movs	r2, #58	@ 0x3a
100476ac:	5c9b      	ldrb	r3, [r3, r2]
100476ae:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100476b0:	4b5a      	ldr	r3, [pc, #360]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
100476b2:	223c      	movs	r2, #60	@ 0x3c
100476b4:	5c9b      	ldrb	r3, [r3, r2]
100476b6:	61fb      	str	r3, [r7, #28]
100476b8:	e007      	b.n	100476ca <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
100476ba:	4b58      	ldr	r3, [pc, #352]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
100476bc:	223b      	movs	r2, #59	@ 0x3b
100476be:	5c9b      	ldrb	r3, [r3, r2]
100476c0:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
100476c2:	4b56      	ldr	r3, [pc, #344]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
100476c4:	223c      	movs	r2, #60	@ 0x3c
100476c6:	5c9b      	ldrb	r3, [r3, r2]
100476c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
100476ca:	230c      	movs	r3, #12
100476cc:	18fa      	adds	r2, r7, r3
100476ce:	4b53      	ldr	r3, [pc, #332]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
100476d0:	0011      	movs	r1, r2
100476d2:	0018      	movs	r0, r3
100476d4:	f7ff fce4 	bl	100470a0 <_get_system_time_and_machine>
100476d8:	0002      	movs	r2, r0
100476da:	000b      	movs	r3, r1
100476dc:	687b      	ldr	r3, [r7, #4]
100476de:	1a9b      	subs	r3, r3, r2
100476e0:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
100476e2:	4b4e      	ldr	r3, [pc, #312]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
100476e4:	699b      	ldr	r3, [r3, #24]
100476e6:	0019      	movs	r1, r3
100476e8:	4a4d      	ldr	r2, [pc, #308]	@ (10047820 <TIMER_SetRadioTimerValue+0x1cc>)
100476ea:	697b      	ldr	r3, [r7, #20]
100476ec:	0018      	movs	r0, r3
100476ee:	f7f8 fce7 	bl	100400c0 <blue_unit_conversion>
100476f2:	0003      	movs	r3, r0
100476f4:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
100476f6:	4b49      	ldr	r3, [pc, #292]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
100476f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
100476fa:	69fb      	ldr	r3, [r7, #28]
100476fc:	18d3      	adds	r3, r2, r3
100476fe:	33c8      	adds	r3, #200	@ 0xc8
10047700:	697a      	ldr	r2, [r7, #20]
10047702:	429a      	cmp	r2, r3
10047704:	d92f      	bls.n	10047766 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
10047706:	4b47      	ldr	r3, [pc, #284]	@ (10047824 <TIMER_SetRadioTimerValue+0x1d0>)
10047708:	795b      	ldrb	r3, [r3, #5]
1004770a:	b2db      	uxtb	r3, r3
1004770c:	001a      	movs	r2, r3
1004770e:	693b      	ldr	r3, [r7, #16]
10047710:	1a9a      	subs	r2, r3, r2
10047712:	6a3b      	ldr	r3, [r7, #32]
10047714:	1ad3      	subs	r3, r2, r3
10047716:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10047718:	68fa      	ldr	r2, [r7, #12]
1004771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004771c:	18d3      	adds	r3, r2, r3
1004771e:	4a42      	ldr	r2, [pc, #264]	@ (10047828 <TIMER_SetRadioTimerValue+0x1d4>)
10047720:	0019      	movs	r1, r3
10047722:	0010      	movs	r0, r2
10047724:	f7fe fdcd 	bl	100462c2 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10047728:	4b3f      	ldr	r3, [pc, #252]	@ (10047828 <TIMER_SetRadioTimerValue+0x1d4>)
1004772a:	2100      	movs	r1, #0
1004772c:	0018      	movs	r0, r3
1004772e:	f7fe fdf9 	bl	10046324 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10047732:	23c0      	movs	r3, #192	@ 0xc0
10047734:	05db      	lsls	r3, r3, #23
10047736:	0018      	movs	r0, r3
10047738:	f7fe fd4a 	bl	100461d0 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004773c:	23c0      	movs	r3, #192	@ 0xc0
1004773e:	05db      	lsls	r3, r3, #23
10047740:	0018      	movs	r0, r3
10047742:	f7fe fd54 	bl	100461ee <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10047746:	4b38      	ldr	r3, [pc, #224]	@ (10047828 <TIMER_SetRadioTimerValue+0x1d4>)
10047748:	0018      	movs	r0, r3
1004774a:	f7fe fd6b 	bl	10046224 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004774e:	4b36      	ldr	r3, [pc, #216]	@ (10047828 <TIMER_SetRadioTimerValue+0x1d4>)
10047750:	0018      	movs	r0, r3
10047752:	f7fe fdd8 	bl	10046306 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10047756:	4b33      	ldr	r3, [pc, #204]	@ (10047824 <TIMER_SetRadioTimerValue+0x1d0>)
10047758:	795b      	ldrb	r3, [r3, #5]
1004775a:	b2db      	uxtb	r3, r3
1004775c:	001a      	movs	r2, r3
1004775e:	6a3b      	ldr	r3, [r7, #32]
10047760:	189b      	adds	r3, r3, r2
10047762:	623b      	str	r3, [r7, #32]
10047764:	e021      	b.n	100477aa <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10047766:	4b2d      	ldr	r3, [pc, #180]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
10047768:	223d      	movs	r2, #61	@ 0x3d
1004776a:	5c9b      	ldrb	r3, [r3, r2]
1004776c:	001a      	movs	r2, r3
1004776e:	693b      	ldr	r3, [r7, #16]
10047770:	1a9a      	subs	r2, r3, r2
10047772:	6a3b      	ldr	r3, [r7, #32]
10047774:	1ad3      	subs	r3, r2, r3
10047776:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10047778:	68fa      	ldr	r2, [r7, #12]
1004777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004777c:	18d2      	adds	r2, r2, r3
1004777e:	23c0      	movs	r3, #192	@ 0xc0
10047780:	05db      	lsls	r3, r3, #23
10047782:	0011      	movs	r1, r2
10047784:	0018      	movs	r0, r3
10047786:	f7fe fd41 	bl	1004620c <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004778a:	4b27      	ldr	r3, [pc, #156]	@ (10047828 <TIMER_SetRadioTimerValue+0x1d4>)
1004778c:	0018      	movs	r0, r3
1004778e:	f7fe fd59 	bl	10046244 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
10047792:	23c0      	movs	r3, #192	@ 0xc0
10047794:	05db      	lsls	r3, r3, #23
10047796:	0018      	movs	r0, r3
10047798:	f7fe fd0a 	bl	100461b0 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
1004779c:	4b1f      	ldr	r3, [pc, #124]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
1004779e:	223d      	movs	r2, #61	@ 0x3d
100477a0:	5c9b      	ldrb	r3, [r3, r2]
100477a2:	001a      	movs	r2, r3
100477a4:	6a3b      	ldr	r3, [r7, #32]
100477a6:	189b      	adds	r3, r3, r2
100477a8:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
100477aa:	68fa      	ldr	r2, [r7, #12]
100477ac:	693b      	ldr	r3, [r7, #16]
100477ae:	18d2      	adds	r2, r2, r3
100477b0:	4b1a      	ldr	r3, [pc, #104]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
100477b2:	2188      	movs	r1, #136	@ 0x88
100477b4:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
100477b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100477b8:	6a3b      	ldr	r3, [r7, #32]
100477ba:	18d2      	adds	r2, r2, r3
100477bc:	6a3b      	ldr	r3, [r7, #32]
100477be:	3305      	adds	r3, #5
100477c0:	429a      	cmp	r2, r3
100477c2:	d212      	bcs.n	100477ea <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
100477c4:	23c0      	movs	r3, #192	@ 0xc0
100477c6:	05db      	lsls	r3, r3, #23
100477c8:	0018      	movs	r0, r3
100477ca:	f7fe fd01 	bl	100461d0 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
100477ce:	23c0      	movs	r3, #192	@ 0xc0
100477d0:	05db      	lsls	r3, r3, #23
100477d2:	0018      	movs	r0, r3
100477d4:	f7fe fd0b 	bl	100461ee <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
100477d8:	4b13      	ldr	r3, [pc, #76]	@ (10047828 <TIMER_SetRadioTimerValue+0x1d4>)
100477da:	0018      	movs	r0, r3
100477dc:	f7fe fd32 	bl	10046244 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
100477e0:	231b      	movs	r3, #27
100477e2:	18fb      	adds	r3, r7, r3
100477e4:	2201      	movs	r2, #1
100477e6:	701a      	strb	r2, [r3, #0]
100477e8:	e010      	b.n	1004780c <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
100477ea:	4b0c      	ldr	r3, [pc, #48]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
100477ec:	69db      	ldr	r3, [r3, #28]
100477ee:	0019      	movs	r1, r3
100477f0:	4a0e      	ldr	r2, [pc, #56]	@ (1004782c <TIMER_SetRadioTimerValue+0x1d8>)
100477f2:	6a3b      	ldr	r3, [r7, #32]
100477f4:	0018      	movs	r0, r3
100477f6:	f7f8 fc63 	bl	100400c0 <blue_unit_conversion>
100477fa:	0003      	movs	r3, r0
100477fc:	b2d9      	uxtb	r1, r3
100477fe:	4b07      	ldr	r3, [pc, #28]	@ (1004781c <TIMER_SetRadioTimerValue+0x1c8>)
10047800:	2284      	movs	r2, #132	@ 0x84
10047802:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
10047804:	231b      	movs	r3, #27
10047806:	18fb      	adds	r3, r7, r3
10047808:	2200      	movs	r2, #0
1004780a:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
1004780c:	231b      	movs	r3, #27
1004780e:	18fb      	adds	r3, r7, r3
10047810:	781b      	ldrb	r3, [r3, #0]
}
10047812:	0018      	movs	r0, r3
10047814:	46bd      	mov	sp, r7
10047816:	b00a      	add	sp, #40	@ 0x28
10047818:	bd80      	pop	{r7, pc}
1004781a:	46c0      	nop			@ (mov r8, r8)
1004781c:	20000510 	.word	0x20000510
10047820:	00000326 	.word	0x00000326
10047824:	200000c0 	.word	0x200000c0
10047828:	60001800 	.word	0x60001800
1004782c:	00000635 	.word	0x00000635

10047830 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10047830:	b5b0      	push	{r4, r5, r7, lr}
10047832:	b084      	sub	sp, #16
10047834:	af00      	add	r7, sp, #0
10047836:	6078      	str	r0, [r7, #4]
10047838:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004783a:	2308      	movs	r3, #8
1004783c:	18fa      	adds	r2, r7, r3
1004783e:	4b12      	ldr	r3, [pc, #72]	@ (10047888 <TIMER_GetPastSysTime+0x58>)
10047840:	0011      	movs	r1, r2
10047842:	0018      	movs	r0, r3
10047844:	f7ff fc2c 	bl	100470a0 <_get_system_time_and_machine>
10047848:	0002      	movs	r2, r0
1004784a:	000b      	movs	r3, r1
1004784c:	6839      	ldr	r1, [r7, #0]
1004784e:	600a      	str	r2, [r1, #0]
10047850:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047852:	68ba      	ldr	r2, [r7, #8]
10047854:	687b      	ldr	r3, [r7, #4]
10047856:	1ad0      	subs	r0, r2, r3
10047858:	4b0b      	ldr	r3, [pc, #44]	@ (10047888 <TIMER_GetPastSysTime+0x58>)
1004785a:	69db      	ldr	r3, [r3, #28]
1004785c:	0019      	movs	r1, r3
1004785e:	4b0b      	ldr	r3, [pc, #44]	@ (1004788c <TIMER_GetPastSysTime+0x5c>)
10047860:	001a      	movs	r2, r3
10047862:	f7f8 fc2d 	bl	100400c0 <blue_unit_conversion>
10047866:	0003      	movs	r3, r0
10047868:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
1004786a:	683b      	ldr	r3, [r7, #0]
1004786c:	681a      	ldr	r2, [r3, #0]
1004786e:	685b      	ldr	r3, [r3, #4]
10047870:	68f9      	ldr	r1, [r7, #12]
10047872:	000c      	movs	r4, r1
10047874:	2100      	movs	r1, #0
10047876:	000d      	movs	r5, r1
10047878:	1b12      	subs	r2, r2, r4
1004787a:	41ab      	sbcs	r3, r5
}
1004787c:	0010      	movs	r0, r2
1004787e:	0019      	movs	r1, r3
10047880:	46bd      	mov	sp, r7
10047882:	b004      	add	sp, #16
10047884:	bdb0      	pop	{r4, r5, r7, pc}
10047886:	46c0      	nop			@ (mov r8, r8)
10047888:	20000510 	.word	0x20000510
1004788c:	00000635 	.word	0x00000635

10047890 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10047890:	b580      	push	{r7, lr}
10047892:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
10047894:	f7ff f9be 	bl	10046c14 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
10047898:	f7f9 fe42 	bl	10041520 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
1004789c:	46c0      	nop			@ (mov r8, r8)
1004789e:	46bd      	mov	sp, r7
100478a0:	bd80      	pop	{r7, pc}

100478a2 <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
100478a2:	b580      	push	{r7, lr}
100478a4:	b082      	sub	sp, #8
100478a6:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
100478a8:	2300      	movs	r3, #0
100478aa:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
100478ac:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
100478ae:	23c0      	movs	r3, #192	@ 0xc0
100478b0:	05db      	lsls	r3, r3, #23
100478b2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
100478b4:	23c0      	movs	r3, #192	@ 0xc0
100478b6:	05db      	lsls	r3, r3, #23
100478b8:	2101      	movs	r1, #1
100478ba:	430a      	orrs	r2, r1
100478bc:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
100478be:	23c0      	movs	r3, #192	@ 0xc0
100478c0:	05db      	lsls	r3, r3, #23
100478c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100478c4:	607b      	str	r3, [r7, #4]
}
100478c6:	46c0      	nop			@ (mov r8, r8)
100478c8:	46bd      	mov	sp, r7
100478ca:	b002      	add	sp, #8
100478cc:	bd80      	pop	{r7, pc}
	...

100478d0 <LL_PWR_SetNoPullB>:
{
100478d0:	b580      	push	{r7, lr}
100478d2:	b082      	sub	sp, #8
100478d4:	af00      	add	r7, sp, #0
100478d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
100478d8:	4b08      	ldr	r3, [pc, #32]	@ (100478fc <LL_PWR_SetNoPullB+0x2c>)
100478da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100478dc:	687b      	ldr	r3, [r7, #4]
100478de:	43d9      	mvns	r1, r3
100478e0:	4b06      	ldr	r3, [pc, #24]	@ (100478fc <LL_PWR_SetNoPullB+0x2c>)
100478e2:	400a      	ands	r2, r1
100478e4:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
100478e6:	4b05      	ldr	r3, [pc, #20]	@ (100478fc <LL_PWR_SetNoPullB+0x2c>)
100478e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100478ea:	687b      	ldr	r3, [r7, #4]
100478ec:	43d9      	mvns	r1, r3
100478ee:	4b03      	ldr	r3, [pc, #12]	@ (100478fc <LL_PWR_SetNoPullB+0x2c>)
100478f0:	400a      	ands	r2, r1
100478f2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100478f4:	46c0      	nop			@ (mov r8, r8)
100478f6:	46bd      	mov	sp, r7
100478f8:	b002      	add	sp, #8
100478fa:	bd80      	pop	{r7, pc}
100478fc:	48500000 	.word	0x48500000

10047900 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
10047900:	b580      	push	{r7, lr}
10047902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
10047904:	4b04      	ldr	r3, [pc, #16]	@ (10047918 <LL_RCC_HSE_Enable+0x18>)
10047906:	681a      	ldr	r2, [r3, #0]
10047908:	4b03      	ldr	r3, [pc, #12]	@ (10047918 <LL_RCC_HSE_Enable+0x18>)
1004790a:	2180      	movs	r1, #128	@ 0x80
1004790c:	0249      	lsls	r1, r1, #9
1004790e:	430a      	orrs	r2, r1
10047910:	601a      	str	r2, [r3, #0]
}
10047912:	46c0      	nop			@ (mov r8, r8)
10047914:	46bd      	mov	sp, r7
10047916:	bd80      	pop	{r7, pc}
10047918:	48400000 	.word	0x48400000

1004791c <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
1004791c:	b580      	push	{r7, lr}
1004791e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10047920:	4b04      	ldr	r3, [pc, #16]	@ (10047934 <LL_RCC_HSE_Disable+0x18>)
10047922:	681a      	ldr	r2, [r3, #0]
10047924:	4b03      	ldr	r3, [pc, #12]	@ (10047934 <LL_RCC_HSE_Disable+0x18>)
10047926:	4904      	ldr	r1, [pc, #16]	@ (10047938 <LL_RCC_HSE_Disable+0x1c>)
10047928:	400a      	ands	r2, r1
1004792a:	601a      	str	r2, [r3, #0]
}
1004792c:	46c0      	nop			@ (mov r8, r8)
1004792e:	46bd      	mov	sp, r7
10047930:	bd80      	pop	{r7, pc}
10047932:	46c0      	nop			@ (mov r8, r8)
10047934:	48400000 	.word	0x48400000
10047938:	fffeffff 	.word	0xfffeffff

1004793c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004793c:	b580      	push	{r7, lr}
1004793e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10047940:	4b07      	ldr	r3, [pc, #28]	@ (10047960 <LL_RCC_HSE_IsReady+0x24>)
10047942:	681a      	ldr	r2, [r3, #0]
10047944:	2380      	movs	r3, #128	@ 0x80
10047946:	029b      	lsls	r3, r3, #10
10047948:	401a      	ands	r2, r3
1004794a:	2380      	movs	r3, #128	@ 0x80
1004794c:	029b      	lsls	r3, r3, #10
1004794e:	429a      	cmp	r2, r3
10047950:	d101      	bne.n	10047956 <LL_RCC_HSE_IsReady+0x1a>
10047952:	2301      	movs	r3, #1
10047954:	e000      	b.n	10047958 <LL_RCC_HSE_IsReady+0x1c>
10047956:	2300      	movs	r3, #0
}
10047958:	0018      	movs	r0, r3
1004795a:	46bd      	mov	sp, r7
1004795c:	bd80      	pop	{r7, pc}
1004795e:	46c0      	nop			@ (mov r8, r8)
10047960:	48400000 	.word	0x48400000

10047964 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
10047964:	b580      	push	{r7, lr}
10047966:	b082      	sub	sp, #8
10047968:	af00      	add	r7, sp, #0
1004796a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
1004796c:	4a0b      	ldr	r2, [pc, #44]	@ (1004799c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004796e:	2398      	movs	r3, #152	@ 0x98
10047970:	58d3      	ldr	r3, [r2, r3]
10047972:	4a0b      	ldr	r2, [pc, #44]	@ (100479a0 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
10047974:	401a      	ands	r2, r3
10047976:	687b      	ldr	r3, [r7, #4]
10047978:	021b      	lsls	r3, r3, #8
1004797a:	4908      	ldr	r1, [pc, #32]	@ (1004799c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004797c:	4313      	orrs	r3, r2
1004797e:	2298      	movs	r2, #152	@ 0x98
10047980:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
10047982:	4a06      	ldr	r2, [pc, #24]	@ (1004799c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10047984:	2398      	movs	r3, #152	@ 0x98
10047986:	58d3      	ldr	r3, [r2, r3]
10047988:	4904      	ldr	r1, [pc, #16]	@ (1004799c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004798a:	2280      	movs	r2, #128	@ 0x80
1004798c:	4313      	orrs	r3, r2
1004798e:	2298      	movs	r2, #152	@ 0x98
10047990:	508b      	str	r3, [r1, r2]
}
10047992:	46c0      	nop			@ (mov r8, r8)
10047994:	46bd      	mov	sp, r7
10047996:	b002      	add	sp, #8
10047998:	bd80      	pop	{r7, pc}
1004799a:	46c0      	nop			@ (mov r8, r8)
1004799c:	48400000 	.word	0x48400000
100479a0:	ffffc0ff 	.word	0xffffc0ff

100479a4 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
100479a4:	b580      	push	{r7, lr}
100479a6:	b082      	sub	sp, #8
100479a8:	af00      	add	r7, sp, #0
100479aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
100479ac:	4a07      	ldr	r2, [pc, #28]	@ (100479cc <LL_RCC_HSE_SetCurrentControl+0x28>)
100479ae:	2398      	movs	r3, #152	@ 0x98
100479b0:	58d3      	ldr	r3, [r2, r3]
100479b2:	2270      	movs	r2, #112	@ 0x70
100479b4:	4393      	bics	r3, r2
100479b6:	001a      	movs	r2, r3
100479b8:	4904      	ldr	r1, [pc, #16]	@ (100479cc <LL_RCC_HSE_SetCurrentControl+0x28>)
100479ba:	687b      	ldr	r3, [r7, #4]
100479bc:	4313      	orrs	r3, r2
100479be:	2298      	movs	r2, #152	@ 0x98
100479c0:	508b      	str	r3, [r1, r2]
}
100479c2:	46c0      	nop			@ (mov r8, r8)
100479c4:	46bd      	mov	sp, r7
100479c6:	b002      	add	sp, #8
100479c8:	bd80      	pop	{r7, pc}
100479ca:	46c0      	nop			@ (mov r8, r8)
100479cc:	48400000 	.word	0x48400000

100479d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
100479d0:	b580      	push	{r7, lr}
100479d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100479d4:	4b07      	ldr	r3, [pc, #28]	@ (100479f4 <LL_RCC_HSI_Enable+0x24>)
100479d6:	689a      	ldr	r2, [r3, #8]
100479d8:	4b06      	ldr	r3, [pc, #24]	@ (100479f4 <LL_RCC_HSI_Enable+0x24>)
100479da:	2104      	movs	r1, #4
100479dc:	438a      	bics	r2, r1
100479de:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100479e0:	4b04      	ldr	r3, [pc, #16]	@ (100479f4 <LL_RCC_HSI_Enable+0x24>)
100479e2:	689a      	ldr	r2, [r3, #8]
100479e4:	4b03      	ldr	r3, [pc, #12]	@ (100479f4 <LL_RCC_HSI_Enable+0x24>)
100479e6:	2102      	movs	r1, #2
100479e8:	438a      	bics	r2, r1
100479ea:	609a      	str	r2, [r3, #8]
}
100479ec:	46c0      	nop			@ (mov r8, r8)
100479ee:	46bd      	mov	sp, r7
100479f0:	bd80      	pop	{r7, pc}
100479f2:	46c0      	nop			@ (mov r8, r8)
100479f4:	48400000 	.word	0x48400000

100479f8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
100479f8:	b580      	push	{r7, lr}
100479fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100479fc:	4b07      	ldr	r3, [pc, #28]	@ (10047a1c <LL_RCC_HSI_Disable+0x24>)
100479fe:	689a      	ldr	r2, [r3, #8]
10047a00:	4b06      	ldr	r3, [pc, #24]	@ (10047a1c <LL_RCC_HSI_Disable+0x24>)
10047a02:	2102      	movs	r1, #2
10047a04:	430a      	orrs	r2, r1
10047a06:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047a08:	4b04      	ldr	r3, [pc, #16]	@ (10047a1c <LL_RCC_HSI_Disable+0x24>)
10047a0a:	689a      	ldr	r2, [r3, #8]
10047a0c:	4b03      	ldr	r3, [pc, #12]	@ (10047a1c <LL_RCC_HSI_Disable+0x24>)
10047a0e:	2104      	movs	r1, #4
10047a10:	430a      	orrs	r2, r1
10047a12:	609a      	str	r2, [r3, #8]
}
10047a14:	46c0      	nop			@ (mov r8, r8)
10047a16:	46bd      	mov	sp, r7
10047a18:	bd80      	pop	{r7, pc}
10047a1a:	46c0      	nop			@ (mov r8, r8)
10047a1c:	48400000 	.word	0x48400000

10047a20 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
10047a20:	b580      	push	{r7, lr}
10047a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10047a24:	4b07      	ldr	r3, [pc, #28]	@ (10047a44 <LL_RCC_HSI_IsReady+0x24>)
10047a26:	681a      	ldr	r2, [r3, #0]
10047a28:	2380      	movs	r3, #128	@ 0x80
10047a2a:	00db      	lsls	r3, r3, #3
10047a2c:	401a      	ands	r2, r3
10047a2e:	2380      	movs	r3, #128	@ 0x80
10047a30:	00db      	lsls	r3, r3, #3
10047a32:	429a      	cmp	r2, r3
10047a34:	d101      	bne.n	10047a3a <LL_RCC_HSI_IsReady+0x1a>
10047a36:	2301      	movs	r3, #1
10047a38:	e000      	b.n	10047a3c <LL_RCC_HSI_IsReady+0x1c>
10047a3a:	2300      	movs	r3, #0
}
10047a3c:	0018      	movs	r0, r3
10047a3e:	46bd      	mov	sp, r7
10047a40:	bd80      	pop	{r7, pc}
10047a42:	46c0      	nop			@ (mov r8, r8)
10047a44:	48400000 	.word	0x48400000

10047a48 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
10047a48:	b580      	push	{r7, lr}
10047a4a:	b082      	sub	sp, #8
10047a4c:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10047a4e:	46c0      	nop			@ (mov r8, r8)
10047a50:	4b0f      	ldr	r3, [pc, #60]	@ (10047a90 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047a52:	681a      	ldr	r2, [r3, #0]
10047a54:	2380      	movs	r3, #128	@ 0x80
10047a56:	029b      	lsls	r3, r3, #10
10047a58:	4013      	ands	r3, r2
10047a5a:	d0f9      	beq.n	10047a50 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10047a5c:	4b0c      	ldr	r3, [pc, #48]	@ (10047a90 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047a5e:	689a      	ldr	r2, [r3, #8]
10047a60:	4b0b      	ldr	r3, [pc, #44]	@ (10047a90 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047a62:	2102      	movs	r1, #2
10047a64:	430a      	orrs	r2, r1
10047a66:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10047a68:	2300      	movs	r3, #0
10047a6a:	607b      	str	r3, [r7, #4]
10047a6c:	e003      	b.n	10047a76 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
10047a6e:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10047a70:	687b      	ldr	r3, [r7, #4]
10047a72:	3301      	adds	r3, #1
10047a74:	607b      	str	r3, [r7, #4]
10047a76:	687b      	ldr	r3, [r7, #4]
10047a78:	2b05      	cmp	r3, #5
10047a7a:	ddf8      	ble.n	10047a6e <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10047a7c:	4b04      	ldr	r3, [pc, #16]	@ (10047a90 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047a7e:	689a      	ldr	r2, [r3, #8]
10047a80:	4b03      	ldr	r3, [pc, #12]	@ (10047a90 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10047a82:	2104      	movs	r1, #4
10047a84:	430a      	orrs	r2, r1
10047a86:	609a      	str	r2, [r3, #8]
}
10047a88:	46c0      	nop			@ (mov r8, r8)
10047a8a:	46bd      	mov	sp, r7
10047a8c:	b002      	add	sp, #8
10047a8e:	bd80      	pop	{r7, pc}
10047a90:	48400000 	.word	0x48400000

10047a94 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
10047a94:	b580      	push	{r7, lr}
10047a96:	b082      	sub	sp, #8
10047a98:	af00      	add	r7, sp, #0
10047a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10047a9c:	4b06      	ldr	r3, [pc, #24]	@ (10047ab8 <LL_RCC_LSCO_SetSource+0x24>)
10047a9e:	689b      	ldr	r3, [r3, #8]
10047aa0:	4a06      	ldr	r2, [pc, #24]	@ (10047abc <LL_RCC_LSCO_SetSource+0x28>)
10047aa2:	4013      	ands	r3, r2
10047aa4:	0019      	movs	r1, r3
10047aa6:	4b04      	ldr	r3, [pc, #16]	@ (10047ab8 <LL_RCC_LSCO_SetSource+0x24>)
10047aa8:	687a      	ldr	r2, [r7, #4]
10047aaa:	430a      	orrs	r2, r1
10047aac:	609a      	str	r2, [r3, #8]
}
10047aae:	46c0      	nop			@ (mov r8, r8)
10047ab0:	46bd      	mov	sp, r7
10047ab2:	b002      	add	sp, #8
10047ab4:	bd80      	pop	{r7, pc}
10047ab6:	46c0      	nop			@ (mov r8, r8)
10047ab8:	48400000 	.word	0x48400000
10047abc:	fffe7fff 	.word	0xfffe7fff

10047ac0 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10047ac0:	b580      	push	{r7, lr}
10047ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10047ac4:	4b04      	ldr	r3, [pc, #16]	@ (10047ad8 <LL_RCC_LSE_Enable+0x18>)
10047ac6:	681a      	ldr	r2, [r3, #0]
10047ac8:	4b03      	ldr	r3, [pc, #12]	@ (10047ad8 <LL_RCC_LSE_Enable+0x18>)
10047aca:	2110      	movs	r1, #16
10047acc:	430a      	orrs	r2, r1
10047ace:	601a      	str	r2, [r3, #0]
}
10047ad0:	46c0      	nop			@ (mov r8, r8)
10047ad2:	46bd      	mov	sp, r7
10047ad4:	bd80      	pop	{r7, pc}
10047ad6:	46c0      	nop			@ (mov r8, r8)
10047ad8:	48400000 	.word	0x48400000

10047adc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
10047adc:	b580      	push	{r7, lr}
10047ade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10047ae0:	4b04      	ldr	r3, [pc, #16]	@ (10047af4 <LL_RCC_LSE_Disable+0x18>)
10047ae2:	681a      	ldr	r2, [r3, #0]
10047ae4:	4b03      	ldr	r3, [pc, #12]	@ (10047af4 <LL_RCC_LSE_Disable+0x18>)
10047ae6:	2110      	movs	r1, #16
10047ae8:	438a      	bics	r2, r1
10047aea:	601a      	str	r2, [r3, #0]
}
10047aec:	46c0      	nop			@ (mov r8, r8)
10047aee:	46bd      	mov	sp, r7
10047af0:	bd80      	pop	{r7, pc}
10047af2:	46c0      	nop			@ (mov r8, r8)
10047af4:	48400000 	.word	0x48400000

10047af8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10047af8:	b580      	push	{r7, lr}
10047afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10047afc:	4b05      	ldr	r3, [pc, #20]	@ (10047b14 <LL_RCC_LSE_IsReady+0x1c>)
10047afe:	681b      	ldr	r3, [r3, #0]
10047b00:	2220      	movs	r2, #32
10047b02:	4013      	ands	r3, r2
10047b04:	2b20      	cmp	r3, #32
10047b06:	d101      	bne.n	10047b0c <LL_RCC_LSE_IsReady+0x14>
10047b08:	2301      	movs	r3, #1
10047b0a:	e000      	b.n	10047b0e <LL_RCC_LSE_IsReady+0x16>
10047b0c:	2300      	movs	r3, #0
}
10047b0e:	0018      	movs	r0, r3
10047b10:	46bd      	mov	sp, r7
10047b12:	bd80      	pop	{r7, pc}
10047b14:	48400000 	.word	0x48400000

10047b18 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
10047b18:	b580      	push	{r7, lr}
10047b1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
10047b1c:	4b04      	ldr	r3, [pc, #16]	@ (10047b30 <LL_RCC_LSE_EnableBypass+0x18>)
10047b1e:	681a      	ldr	r2, [r3, #0]
10047b20:	4b03      	ldr	r3, [pc, #12]	@ (10047b30 <LL_RCC_LSE_EnableBypass+0x18>)
10047b22:	2140      	movs	r1, #64	@ 0x40
10047b24:	430a      	orrs	r2, r1
10047b26:	601a      	str	r2, [r3, #0]
}
10047b28:	46c0      	nop			@ (mov r8, r8)
10047b2a:	46bd      	mov	sp, r7
10047b2c:	bd80      	pop	{r7, pc}
10047b2e:	46c0      	nop			@ (mov r8, r8)
10047b30:	48400000 	.word	0x48400000

10047b34 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
10047b34:	b580      	push	{r7, lr}
10047b36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
10047b38:	4b04      	ldr	r3, [pc, #16]	@ (10047b4c <LL_RCC_LSE_DisableBypass+0x18>)
10047b3a:	681a      	ldr	r2, [r3, #0]
10047b3c:	4b03      	ldr	r3, [pc, #12]	@ (10047b4c <LL_RCC_LSE_DisableBypass+0x18>)
10047b3e:	2140      	movs	r1, #64	@ 0x40
10047b40:	438a      	bics	r2, r1
10047b42:	601a      	str	r2, [r3, #0]
}
10047b44:	46c0      	nop			@ (mov r8, r8)
10047b46:	46bd      	mov	sp, r7
10047b48:	bd80      	pop	{r7, pc}
10047b4a:	46c0      	nop			@ (mov r8, r8)
10047b4c:	48400000 	.word	0x48400000

10047b50 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
10047b50:	b580      	push	{r7, lr}
10047b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10047b54:	4b05      	ldr	r3, [pc, #20]	@ (10047b6c <LL_RCC_LSE_IsBypassEnabled+0x1c>)
10047b56:	681b      	ldr	r3, [r3, #0]
10047b58:	2240      	movs	r2, #64	@ 0x40
10047b5a:	4013      	ands	r3, r2
10047b5c:	2b40      	cmp	r3, #64	@ 0x40
10047b5e:	d101      	bne.n	10047b64 <LL_RCC_LSE_IsBypassEnabled+0x14>
10047b60:	2301      	movs	r3, #1
10047b62:	e000      	b.n	10047b66 <LL_RCC_LSE_IsBypassEnabled+0x16>
10047b64:	2300      	movs	r3, #0
}
10047b66:	0018      	movs	r0, r3
10047b68:	46bd      	mov	sp, r7
10047b6a:	bd80      	pop	{r7, pc}
10047b6c:	48400000 	.word	0x48400000

10047b70 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
10047b70:	b580      	push	{r7, lr}
10047b72:	b082      	sub	sp, #8
10047b74:	af00      	add	r7, sp, #0
10047b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
10047b78:	4b06      	ldr	r3, [pc, #24]	@ (10047b94 <LL_RCC_LSE_SetDriveCapability+0x24>)
10047b7a:	68db      	ldr	r3, [r3, #12]
10047b7c:	2260      	movs	r2, #96	@ 0x60
10047b7e:	4393      	bics	r3, r2
10047b80:	0019      	movs	r1, r3
10047b82:	4b04      	ldr	r3, [pc, #16]	@ (10047b94 <LL_RCC_LSE_SetDriveCapability+0x24>)
10047b84:	687a      	ldr	r2, [r7, #4]
10047b86:	430a      	orrs	r2, r1
10047b88:	60da      	str	r2, [r3, #12]
}
10047b8a:	46c0      	nop			@ (mov r8, r8)
10047b8c:	46bd      	mov	sp, r7
10047b8e:	b002      	add	sp, #8
10047b90:	bd80      	pop	{r7, pc}
10047b92:	46c0      	nop			@ (mov r8, r8)
10047b94:	48400000 	.word	0x48400000

10047b98 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
10047b98:	b580      	push	{r7, lr}
10047b9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10047b9c:	4b04      	ldr	r3, [pc, #16]	@ (10047bb0 <LL_RCC_LSI_Enable+0x18>)
10047b9e:	681a      	ldr	r2, [r3, #0]
10047ba0:	4b03      	ldr	r3, [pc, #12]	@ (10047bb0 <LL_RCC_LSI_Enable+0x18>)
10047ba2:	2104      	movs	r1, #4
10047ba4:	430a      	orrs	r2, r1
10047ba6:	601a      	str	r2, [r3, #0]
}
10047ba8:	46c0      	nop			@ (mov r8, r8)
10047baa:	46bd      	mov	sp, r7
10047bac:	bd80      	pop	{r7, pc}
10047bae:	46c0      	nop			@ (mov r8, r8)
10047bb0:	48400000 	.word	0x48400000

10047bb4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
10047bb4:	b580      	push	{r7, lr}
10047bb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
10047bb8:	4b04      	ldr	r3, [pc, #16]	@ (10047bcc <LL_RCC_LSI_Disable+0x18>)
10047bba:	681a      	ldr	r2, [r3, #0]
10047bbc:	4b03      	ldr	r3, [pc, #12]	@ (10047bcc <LL_RCC_LSI_Disable+0x18>)
10047bbe:	2104      	movs	r1, #4
10047bc0:	438a      	bics	r2, r1
10047bc2:	601a      	str	r2, [r3, #0]
}
10047bc4:	46c0      	nop			@ (mov r8, r8)
10047bc6:	46bd      	mov	sp, r7
10047bc8:	bd80      	pop	{r7, pc}
10047bca:	46c0      	nop			@ (mov r8, r8)
10047bcc:	48400000 	.word	0x48400000

10047bd0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
10047bd0:	b580      	push	{r7, lr}
10047bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10047bd4:	4b05      	ldr	r3, [pc, #20]	@ (10047bec <LL_RCC_LSI_IsReady+0x1c>)
10047bd6:	681b      	ldr	r3, [r3, #0]
10047bd8:	2208      	movs	r2, #8
10047bda:	4013      	ands	r3, r2
10047bdc:	2b08      	cmp	r3, #8
10047bde:	d101      	bne.n	10047be4 <LL_RCC_LSI_IsReady+0x14>
10047be0:	2301      	movs	r3, #1
10047be2:	e000      	b.n	10047be6 <LL_RCC_LSI_IsReady+0x16>
10047be4:	2300      	movs	r3, #0
}
10047be6:	0018      	movs	r0, r3
10047be8:	46bd      	mov	sp, r7
10047bea:	bd80      	pop	{r7, pc}
10047bec:	48400000 	.word	0x48400000

10047bf0 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
10047bf0:	b580      	push	{r7, lr}
10047bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10047bf4:	4b04      	ldr	r3, [pc, #16]	@ (10047c08 <LL_RCC_RC64MPLL_Enable+0x18>)
10047bf6:	681a      	ldr	r2, [r3, #0]
10047bf8:	4b03      	ldr	r3, [pc, #12]	@ (10047c08 <LL_RCC_RC64MPLL_Enable+0x18>)
10047bfa:	2180      	movs	r1, #128	@ 0x80
10047bfc:	0189      	lsls	r1, r1, #6
10047bfe:	430a      	orrs	r2, r1
10047c00:	601a      	str	r2, [r3, #0]
}
10047c02:	46c0      	nop			@ (mov r8, r8)
10047c04:	46bd      	mov	sp, r7
10047c06:	bd80      	pop	{r7, pc}
10047c08:	48400000 	.word	0x48400000

10047c0c <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
10047c0c:	b580      	push	{r7, lr}
10047c0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
10047c10:	4b04      	ldr	r3, [pc, #16]	@ (10047c24 <LL_RCC_RC64MPLL_Disable+0x18>)
10047c12:	681a      	ldr	r2, [r3, #0]
10047c14:	4b03      	ldr	r3, [pc, #12]	@ (10047c24 <LL_RCC_RC64MPLL_Disable+0x18>)
10047c16:	4904      	ldr	r1, [pc, #16]	@ (10047c28 <LL_RCC_RC64MPLL_Disable+0x1c>)
10047c18:	400a      	ands	r2, r1
10047c1a:	601a      	str	r2, [r3, #0]
}
10047c1c:	46c0      	nop			@ (mov r8, r8)
10047c1e:	46bd      	mov	sp, r7
10047c20:	bd80      	pop	{r7, pc}
10047c22:	46c0      	nop			@ (mov r8, r8)
10047c24:	48400000 	.word	0x48400000
10047c28:	ffffdfff 	.word	0xffffdfff

10047c2c <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
10047c2c:	b580      	push	{r7, lr}
10047c2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10047c30:	4b07      	ldr	r3, [pc, #28]	@ (10047c50 <LL_RCC_RC64MPLL_IsReady+0x24>)
10047c32:	681a      	ldr	r2, [r3, #0]
10047c34:	2380      	movs	r3, #128	@ 0x80
10047c36:	01db      	lsls	r3, r3, #7
10047c38:	401a      	ands	r2, r3
10047c3a:	2380      	movs	r3, #128	@ 0x80
10047c3c:	01db      	lsls	r3, r3, #7
10047c3e:	429a      	cmp	r2, r3
10047c40:	d101      	bne.n	10047c46 <LL_RCC_RC64MPLL_IsReady+0x1a>
10047c42:	2301      	movs	r3, #1
10047c44:	e000      	b.n	10047c48 <LL_RCC_RC64MPLL_IsReady+0x1c>
10047c46:	2300      	movs	r3, #0
}
10047c48:	0018      	movs	r0, r3
10047c4a:	46bd      	mov	sp, r7
10047c4c:	bd80      	pop	{r7, pc}
10047c4e:	46c0      	nop			@ (mov r8, r8)
10047c50:	48400000 	.word	0x48400000

10047c54 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10047c54:	b580      	push	{r7, lr}
10047c56:	b082      	sub	sp, #8
10047c58:	af00      	add	r7, sp, #0
10047c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10047c5c:	4b06      	ldr	r3, [pc, #24]	@ (10047c78 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10047c5e:	689b      	ldr	r3, [r3, #8]
10047c60:	22e0      	movs	r2, #224	@ 0xe0
10047c62:	4393      	bics	r3, r2
10047c64:	0019      	movs	r1, r3
10047c66:	4b04      	ldr	r3, [pc, #16]	@ (10047c78 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10047c68:	687a      	ldr	r2, [r7, #4]
10047c6a:	430a      	orrs	r2, r1
10047c6c:	609a      	str	r2, [r3, #8]
}
10047c6e:	46c0      	nop			@ (mov r8, r8)
10047c70:	46bd      	mov	sp, r7
10047c72:	b002      	add	sp, #8
10047c74:	bd80      	pop	{r7, pc}
10047c76:	46c0      	nop			@ (mov r8, r8)
10047c78:	48400000 	.word	0x48400000

10047c7c <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10047c7c:	b580      	push	{r7, lr}
10047c7e:	b084      	sub	sp, #16
10047c80:	af00      	add	r7, sp, #0
10047c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10047c84:	687b      	ldr	r3, [r7, #4]
10047c86:	2b00      	cmp	r3, #0
10047c88:	d101      	bne.n	10047c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
10047c8a:	2301      	movs	r3, #1
10047c8c:	e13c      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10047c8e:	687b      	ldr	r3, [r7, #4]
10047c90:	681b      	ldr	r3, [r3, #0]
10047c92:	2210      	movs	r2, #16
10047c94:	4013      	ands	r3, r2
10047c96:	d033      	beq.n	10047d00 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
10047c98:	687b      	ldr	r3, [r7, #4]
10047c9a:	689b      	ldr	r3, [r3, #8]
10047c9c:	2b00      	cmp	r3, #0
10047c9e:	d102      	bne.n	10047ca6 <HAL_RCC_OscConfig+0x2a>
10047ca0:	f7ff fe96 	bl	100479d0 <LL_RCC_HSI_Enable>
10047ca4:	e001      	b.n	10047caa <HAL_RCC_OscConfig+0x2e>
10047ca6:	f7ff fea7 	bl	100479f8 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
10047caa:	687b      	ldr	r3, [r7, #4]
10047cac:	689b      	ldr	r3, [r3, #8]
10047cae:	2b04      	cmp	r3, #4
10047cb0:	d113      	bne.n	10047cda <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047cb2:	f7fd f807 	bl	10044cc4 <HAL_GetTick>
10047cb6:	0003      	movs	r3, r0
10047cb8:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
10047cba:	e008      	b.n	10047cce <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10047cbc:	f7fd f802 	bl	10044cc4 <HAL_GetTick>
10047cc0:	0002      	movs	r2, r0
10047cc2:	68fb      	ldr	r3, [r7, #12]
10047cc4:	1ad3      	subs	r3, r2, r3
10047cc6:	2b64      	cmp	r3, #100	@ 0x64
10047cc8:	d901      	bls.n	10047cce <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
10047cca:	2303      	movs	r3, #3
10047ccc:	e11c      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
10047cce:	f7ff fea7 	bl	10047a20 <LL_RCC_HSI_IsReady>
10047cd2:	0003      	movs	r3, r0
10047cd4:	2b01      	cmp	r3, #1
10047cd6:	d0f1      	beq.n	10047cbc <HAL_RCC_OscConfig+0x40>
10047cd8:	e012      	b.n	10047d00 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047cda:	f7fc fff3 	bl	10044cc4 <HAL_GetTick>
10047cde:	0003      	movs	r3, r0
10047ce0:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
10047ce2:	e008      	b.n	10047cf6 <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10047ce4:	f7fc ffee 	bl	10044cc4 <HAL_GetTick>
10047ce8:	0002      	movs	r2, r0
10047cea:	68fb      	ldr	r3, [r7, #12]
10047cec:	1ad3      	subs	r3, r2, r3
10047cee:	2b64      	cmp	r3, #100	@ 0x64
10047cf0:	d901      	bls.n	10047cf6 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
10047cf2:	2303      	movs	r3, #3
10047cf4:	e108      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
10047cf6:	f7ff fe93 	bl	10047a20 <LL_RCC_HSI_IsReady>
10047cfa:	0003      	movs	r3, r0
10047cfc:	2b01      	cmp	r3, #1
10047cfe:	d1f1      	bne.n	10047ce4 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10047d00:	687b      	ldr	r3, [r7, #4]
10047d02:	681b      	ldr	r3, [r3, #0]
10047d04:	2201      	movs	r2, #1
10047d06:	4013      	ands	r3, r2
10047d08:	d039      	beq.n	10047d7e <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
10047d0a:	2020      	movs	r0, #32
10047d0c:	f7ff fe2a 	bl	10047964 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
10047d10:	2030      	movs	r0, #48	@ 0x30
10047d12:	f7ff fe47 	bl	100479a4 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
10047d16:	687b      	ldr	r3, [r7, #4]
10047d18:	685a      	ldr	r2, [r3, #4]
10047d1a:	2380      	movs	r3, #128	@ 0x80
10047d1c:	025b      	lsls	r3, r3, #9
10047d1e:	429a      	cmp	r2, r3
10047d20:	d102      	bne.n	10047d28 <HAL_RCC_OscConfig+0xac>
10047d22:	f7ff fded 	bl	10047900 <LL_RCC_HSE_Enable>
10047d26:	e001      	b.n	10047d2c <HAL_RCC_OscConfig+0xb0>
10047d28:	f7ff fdf8 	bl	1004791c <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
10047d2c:	687b      	ldr	r3, [r7, #4]
10047d2e:	685b      	ldr	r3, [r3, #4]
10047d30:	2b00      	cmp	r3, #0
10047d32:	d012      	beq.n	10047d5a <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047d34:	f7fc ffc6 	bl	10044cc4 <HAL_GetTick>
10047d38:	0003      	movs	r3, r0
10047d3a:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
10047d3c:	e008      	b.n	10047d50 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10047d3e:	f7fc ffc1 	bl	10044cc4 <HAL_GetTick>
10047d42:	0002      	movs	r2, r0
10047d44:	68fb      	ldr	r3, [r7, #12]
10047d46:	1ad3      	subs	r3, r2, r3
10047d48:	2b64      	cmp	r3, #100	@ 0x64
10047d4a:	d901      	bls.n	10047d50 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
10047d4c:	2303      	movs	r3, #3
10047d4e:	e0db      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
10047d50:	f7ff fdf4 	bl	1004793c <LL_RCC_HSE_IsReady>
10047d54:	1e03      	subs	r3, r0, #0
10047d56:	d0f2      	beq.n	10047d3e <HAL_RCC_OscConfig+0xc2>
10047d58:	e011      	b.n	10047d7e <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047d5a:	f7fc ffb3 	bl	10044cc4 <HAL_GetTick>
10047d5e:	0003      	movs	r3, r0
10047d60:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
10047d62:	e008      	b.n	10047d76 <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10047d64:	f7fc ffae 	bl	10044cc4 <HAL_GetTick>
10047d68:	0002      	movs	r2, r0
10047d6a:	68fb      	ldr	r3, [r7, #12]
10047d6c:	1ad3      	subs	r3, r2, r3
10047d6e:	2b64      	cmp	r3, #100	@ 0x64
10047d70:	d901      	bls.n	10047d76 <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
10047d72:	2303      	movs	r3, #3
10047d74:	e0c8      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
10047d76:	f7ff fde1 	bl	1004793c <LL_RCC_HSE_IsReady>
10047d7a:	1e03      	subs	r3, r0, #0
10047d7c:	d1f2      	bne.n	10047d64 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10047d7e:	687b      	ldr	r3, [r7, #4]
10047d80:	681b      	ldr	r3, [r3, #0]
10047d82:	2204      	movs	r2, #4
10047d84:	4013      	ands	r3, r2
10047d86:	d03a      	beq.n	10047dfe <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
10047d88:	687b      	ldr	r3, [r7, #4]
10047d8a:	691b      	ldr	r3, [r3, #16]
10047d8c:	2b00      	cmp	r3, #0
10047d8e:	d022      	beq.n	10047dd6 <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
10047d90:	f7ff ff10 	bl	10047bb4 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
10047d94:	46c0      	nop			@ (mov r8, r8)
10047d96:	f7ff ff1b 	bl	10047bd0 <LL_RCC_LSI_IsReady>
10047d9a:	1e03      	subs	r3, r0, #0
10047d9c:	d1fb      	bne.n	10047d96 <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10047d9e:	f7ff fe9d 	bl	10047adc <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
10047da2:	2380      	movs	r3, #128	@ 0x80
10047da4:	025b      	lsls	r3, r3, #9
10047da6:	0018      	movs	r0, r3
10047da8:	f7ff fe74 	bl	10047a94 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10047dac:	f7ff fef4 	bl	10047b98 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047db0:	f7fc ff88 	bl	10044cc4 <HAL_GetTick>
10047db4:	0003      	movs	r3, r0
10047db6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10047db8:	e008      	b.n	10047dcc <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10047dba:	f7fc ff83 	bl	10044cc4 <HAL_GetTick>
10047dbe:	0002      	movs	r2, r0
10047dc0:	68fb      	ldr	r3, [r7, #12]
10047dc2:	1ad3      	subs	r3, r2, r3
10047dc4:	2b02      	cmp	r3, #2
10047dc6:	d901      	bls.n	10047dcc <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
10047dc8:	2303      	movs	r3, #3
10047dca:	e09d      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10047dcc:	f7ff ff00 	bl	10047bd0 <LL_RCC_LSI_IsReady>
10047dd0:	1e03      	subs	r3, r0, #0
10047dd2:	d0f2      	beq.n	10047dba <HAL_RCC_OscConfig+0x13e>
10047dd4:	e013      	b.n	10047dfe <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10047dd6:	f7ff feed 	bl	10047bb4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047dda:	f7fc ff73 	bl	10044cc4 <HAL_GetTick>
10047dde:	0003      	movs	r3, r0
10047de0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10047de2:	e008      	b.n	10047df6 <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10047de4:	f7fc ff6e 	bl	10044cc4 <HAL_GetTick>
10047de8:	0002      	movs	r2, r0
10047dea:	68fb      	ldr	r3, [r7, #12]
10047dec:	1ad3      	subs	r3, r2, r3
10047dee:	2b02      	cmp	r3, #2
10047df0:	d901      	bls.n	10047df6 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
10047df2:	2303      	movs	r3, #3
10047df4:	e088      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10047df6:	f7ff feeb 	bl	10047bd0 <LL_RCC_LSI_IsReady>
10047dfa:	1e03      	subs	r3, r0, #0
10047dfc:	d1f2      	bne.n	10047de4 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10047dfe:	687b      	ldr	r3, [r7, #4]
10047e00:	681b      	ldr	r3, [r3, #0]
10047e02:	2202      	movs	r2, #2
10047e04:	4013      	ands	r3, r2
10047e06:	d047      	beq.n	10047e98 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
10047e08:	f7ff fed4 	bl	10047bb4 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10047e0c:	f7ff fe66 	bl	10047adc <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
10047e10:	46c0      	nop			@ (mov r8, r8)
10047e12:	f7ff fe71 	bl	10047af8 <LL_RCC_LSE_IsReady>
10047e16:	1e03      	subs	r3, r0, #0
10047e18:	d1fb      	bne.n	10047e12 <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
10047e1a:	23c0      	movs	r3, #192	@ 0xc0
10047e1c:	019b      	lsls	r3, r3, #6
10047e1e:	0018      	movs	r0, r3
10047e20:	f7ff fd56 	bl	100478d0 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
10047e24:	2380      	movs	r3, #128	@ 0x80
10047e26:	021b      	lsls	r3, r3, #8
10047e28:	0018      	movs	r0, r3
10047e2a:	f7ff fe33 	bl	10047a94 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
10047e2e:	2020      	movs	r0, #32
10047e30:	f7ff fe9e 	bl	10047b70 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
10047e34:	687b      	ldr	r3, [r7, #4]
10047e36:	68db      	ldr	r3, [r3, #12]
10047e38:	2b10      	cmp	r3, #16
10047e3a:	d102      	bne.n	10047e42 <HAL_RCC_OscConfig+0x1c6>
10047e3c:	f7ff fe40 	bl	10047ac0 <LL_RCC_LSE_Enable>
10047e40:	e001      	b.n	10047e46 <HAL_RCC_OscConfig+0x1ca>
10047e42:	f7ff fe4b 	bl	10047adc <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
10047e46:	687b      	ldr	r3, [r7, #4]
10047e48:	68db      	ldr	r3, [r3, #12]
10047e4a:	2b00      	cmp	r3, #0
10047e4c:	d012      	beq.n	10047e74 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047e4e:	f7fc ff39 	bl	10044cc4 <HAL_GetTick>
10047e52:	0003      	movs	r3, r0
10047e54:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10047e56:	e008      	b.n	10047e6a <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10047e58:	f7fc ff34 	bl	10044cc4 <HAL_GetTick>
10047e5c:	0002      	movs	r2, r0
10047e5e:	68fb      	ldr	r3, [r7, #12]
10047e60:	1ad3      	subs	r3, r2, r3
10047e62:	2b64      	cmp	r3, #100	@ 0x64
10047e64:	d901      	bls.n	10047e6a <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
10047e66:	2303      	movs	r3, #3
10047e68:	e04e      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
10047e6a:	f7ff fe45 	bl	10047af8 <LL_RCC_LSE_IsReady>
10047e6e:	1e03      	subs	r3, r0, #0
10047e70:	d0f2      	beq.n	10047e58 <HAL_RCC_OscConfig+0x1dc>
10047e72:	e011      	b.n	10047e98 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047e74:	f7fc ff26 	bl	10044cc4 <HAL_GetTick>
10047e78:	0003      	movs	r3, r0
10047e7a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10047e7c:	e008      	b.n	10047e90 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10047e7e:	f7fc ff21 	bl	10044cc4 <HAL_GetTick>
10047e82:	0002      	movs	r2, r0
10047e84:	68fb      	ldr	r3, [r7, #12]
10047e86:	1ad3      	subs	r3, r2, r3
10047e88:	2b64      	cmp	r3, #100	@ 0x64
10047e8a:	d901      	bls.n	10047e90 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
10047e8c:	2303      	movs	r3, #3
10047e8e:	e03b      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10047e90:	f7ff fe32 	bl	10047af8 <LL_RCC_LSE_IsReady>
10047e94:	1e03      	subs	r3, r0, #0
10047e96:	d1f2      	bne.n	10047e7e <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
10047e98:	687b      	ldr	r3, [r7, #4]
10047e9a:	681b      	ldr	r3, [r3, #0]
10047e9c:	2208      	movs	r2, #8
10047e9e:	4013      	ands	r3, r2
10047ea0:	d031      	beq.n	10047f06 <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
10047ea2:	687b      	ldr	r3, [r7, #4]
10047ea4:	695b      	ldr	r3, [r3, #20]
10047ea6:	2b40      	cmp	r3, #64	@ 0x40
10047ea8:	d102      	bne.n	10047eb0 <HAL_RCC_OscConfig+0x234>
10047eaa:	f7ff fe35 	bl	10047b18 <LL_RCC_LSE_EnableBypass>
10047eae:	e001      	b.n	10047eb4 <HAL_RCC_OscConfig+0x238>
10047eb0:	f7ff fe40 	bl	10047b34 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
10047eb4:	687b      	ldr	r3, [r7, #4]
10047eb6:	695b      	ldr	r3, [r3, #20]
10047eb8:	2b00      	cmp	r3, #0
10047eba:	d012      	beq.n	10047ee2 <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047ebc:	f7fc ff02 	bl	10044cc4 <HAL_GetTick>
10047ec0:	0003      	movs	r3, r0
10047ec2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10047ec4:	e008      	b.n	10047ed8 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10047ec6:	f7fc fefd 	bl	10044cc4 <HAL_GetTick>
10047eca:	0002      	movs	r2, r0
10047ecc:	68fb      	ldr	r3, [r7, #12]
10047ece:	1ad3      	subs	r3, r2, r3
10047ed0:	2b64      	cmp	r3, #100	@ 0x64
10047ed2:	d901      	bls.n	10047ed8 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
10047ed4:	2303      	movs	r3, #3
10047ed6:	e017      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10047ed8:	f7ff fe3a 	bl	10047b50 <LL_RCC_LSE_IsBypassEnabled>
10047edc:	1e03      	subs	r3, r0, #0
10047ede:	d0f2      	beq.n	10047ec6 <HAL_RCC_OscConfig+0x24a>
10047ee0:	e011      	b.n	10047f06 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10047ee2:	f7fc feef 	bl	10044cc4 <HAL_GetTick>
10047ee6:	0003      	movs	r3, r0
10047ee8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10047eea:	e008      	b.n	10047efe <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10047eec:	f7fc feea 	bl	10044cc4 <HAL_GetTick>
10047ef0:	0002      	movs	r2, r0
10047ef2:	68fb      	ldr	r3, [r7, #12]
10047ef4:	1ad3      	subs	r3, r2, r3
10047ef6:	2b64      	cmp	r3, #100	@ 0x64
10047ef8:	d901      	bls.n	10047efe <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
10047efa:	2303      	movs	r3, #3
10047efc:	e004      	b.n	10047f08 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10047efe:	f7ff fe27 	bl	10047b50 <LL_RCC_LSE_IsBypassEnabled>
10047f02:	1e03      	subs	r3, r0, #0
10047f04:	d1f2      	bne.n	10047eec <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
10047f06:	2300      	movs	r3, #0
}
10047f08:	0018      	movs	r0, r3
10047f0a:	46bd      	mov	sp, r7
10047f0c:	b004      	add	sp, #16
10047f0e:	bd80      	pop	{r7, pc}

10047f10 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
10047f10:	b580      	push	{r7, lr}
10047f12:	b084      	sub	sp, #16
10047f14:	af00      	add	r7, sp, #0
10047f16:	6078      	str	r0, [r7, #4]
10047f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10047f1a:	687b      	ldr	r3, [r7, #4]
10047f1c:	2b00      	cmp	r3, #0
10047f1e:	d101      	bne.n	10047f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
10047f20:	2301      	movs	r3, #1
10047f22:	e098      	b.n	10048056 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
10047f24:	4b4e      	ldr	r3, [pc, #312]	@ (10048060 <HAL_RCC_ClockConfig+0x150>)
10047f26:	685b      	ldr	r3, [r3, #4]
10047f28:	2230      	movs	r2, #48	@ 0x30
10047f2a:	4393      	bics	r3, r2
10047f2c:	0019      	movs	r1, r3
10047f2e:	4b4c      	ldr	r3, [pc, #304]	@ (10048060 <HAL_RCC_ClockConfig+0x150>)
10047f30:	683a      	ldr	r2, [r7, #0]
10047f32:	430a      	orrs	r2, r1
10047f34:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
10047f36:	687b      	ldr	r3, [r7, #4]
10047f38:	681b      	ldr	r3, [r3, #0]
10047f3a:	2b02      	cmp	r3, #2
10047f3c:	d10e      	bne.n	10047f5c <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
10047f3e:	f7ff fd47 	bl	100479d0 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10047f42:	f7ff fd6d 	bl	10047a20 <LL_RCC_HSI_IsReady>
10047f46:	1e03      	subs	r3, r0, #0
10047f48:	d101      	bne.n	10047f4e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
10047f4a:	2301      	movs	r3, #1
10047f4c:	e083      	b.n	10048056 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
10047f4e:	f7ff fe5d 	bl	10047c0c <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10047f52:	687b      	ldr	r3, [r7, #4]
10047f54:	685b      	ldr	r3, [r3, #4]
10047f56:	0018      	movs	r0, r3
10047f58:	f7ff fe7c 	bl	10047c54 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10047f5c:	687b      	ldr	r3, [r7, #4]
10047f5e:	681b      	ldr	r3, [r3, #0]
10047f60:	2b00      	cmp	r3, #0
10047f62:	d124      	bne.n	10047fae <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10047f64:	f7ff fd5c 	bl	10047a20 <LL_RCC_HSI_IsReady>
10047f68:	1e03      	subs	r3, r0, #0
10047f6a:	d101      	bne.n	10047f70 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10047f6c:	2301      	movs	r3, #1
10047f6e:	e072      	b.n	10048056 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10047f70:	f7ff fce4 	bl	1004793c <LL_RCC_HSE_IsReady>
10047f74:	1e03      	subs	r3, r0, #0
10047f76:	d101      	bne.n	10047f7c <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10047f78:	2301      	movs	r3, #1
10047f7a:	e06c      	b.n	10048056 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10047f7c:	f7ff fe38 	bl	10047bf0 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10047f80:	f7fc fea0 	bl	10044cc4 <HAL_GetTick>
10047f84:	0003      	movs	r3, r0
10047f86:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10047f88:	e008      	b.n	10047f9c <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10047f8a:	f7fc fe9b 	bl	10044cc4 <HAL_GetTick>
10047f8e:	0002      	movs	r2, r0
10047f90:	68fb      	ldr	r3, [r7, #12]
10047f92:	1ad3      	subs	r3, r2, r3
10047f94:	2b02      	cmp	r3, #2
10047f96:	d901      	bls.n	10047f9c <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10047f98:	2303      	movs	r3, #3
10047f9a:	e05c      	b.n	10048056 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10047f9c:	f7ff fe46 	bl	10047c2c <LL_RCC_RC64MPLL_IsReady>
10047fa0:	1e03      	subs	r3, r0, #0
10047fa2:	d0f2      	beq.n	10047f8a <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10047fa4:	687b      	ldr	r3, [r7, #4]
10047fa6:	685b      	ldr	r3, [r3, #4]
10047fa8:	0018      	movs	r0, r3
10047faa:	f7ff fe53 	bl	10047c54 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10047fae:	687b      	ldr	r3, [r7, #4]
10047fb0:	681b      	ldr	r3, [r3, #0]
10047fb2:	2b01      	cmp	r3, #1
10047fb4:	d117      	bne.n	10047fe6 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10047fb6:	f7ff fd47 	bl	10047a48 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10047fba:	f7ff fd31 	bl	10047a20 <LL_RCC_HSI_IsReady>
10047fbe:	1e03      	subs	r3, r0, #0
10047fc0:	d001      	beq.n	10047fc6 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10047fc2:	2301      	movs	r3, #1
10047fc4:	e047      	b.n	10048056 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10047fc6:	f7ff fcb9 	bl	1004793c <LL_RCC_HSE_IsReady>
10047fca:	1e03      	subs	r3, r0, #0
10047fcc:	d101      	bne.n	10047fd2 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10047fce:	2301      	movs	r3, #1
10047fd0:	e041      	b.n	10048056 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10047fd2:	4b24      	ldr	r3, [pc, #144]	@ (10048064 <HAL_RCC_ClockConfig+0x154>)
10047fd4:	689b      	ldr	r3, [r3, #8]
10047fd6:	22e0      	movs	r2, #224	@ 0xe0
10047fd8:	4393      	bics	r3, r2
10047fda:	0019      	movs	r1, r3
10047fdc:	687b      	ldr	r3, [r7, #4]
10047fde:	685a      	ldr	r2, [r3, #4]
10047fe0:	4b20      	ldr	r3, [pc, #128]	@ (10048064 <HAL_RCC_ClockConfig+0x154>)
10047fe2:	430a      	orrs	r2, r1
10047fe4:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10047fe6:	4b1e      	ldr	r3, [pc, #120]	@ (10048060 <HAL_RCC_ClockConfig+0x150>)
10047fe8:	685b      	ldr	r3, [r3, #4]
10047fea:	2230      	movs	r2, #48	@ 0x30
10047fec:	4013      	ands	r3, r2
10047fee:	683a      	ldr	r2, [r7, #0]
10047ff0:	429a      	cmp	r2, r3
10047ff2:	d01d      	beq.n	10048030 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10047ff4:	4b1a      	ldr	r3, [pc, #104]	@ (10048060 <HAL_RCC_ClockConfig+0x150>)
10047ff6:	685b      	ldr	r3, [r3, #4]
10047ff8:	2230      	movs	r2, #48	@ 0x30
10047ffa:	4393      	bics	r3, r2
10047ffc:	0019      	movs	r1, r3
10047ffe:	4b18      	ldr	r3, [pc, #96]	@ (10048060 <HAL_RCC_ClockConfig+0x150>)
10048000:	683a      	ldr	r2, [r7, #0]
10048002:	430a      	orrs	r2, r1
10048004:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10048006:	f7fc fe5d 	bl	10044cc4 <HAL_GetTick>
1004800a:	0003      	movs	r3, r0
1004800c:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004800e:	e008      	b.n	10048022 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
10048010:	f7fc fe58 	bl	10044cc4 <HAL_GetTick>
10048014:	0002      	movs	r2, r0
10048016:	68fb      	ldr	r3, [r7, #12]
10048018:	1ad3      	subs	r3, r2, r3
1004801a:	2b02      	cmp	r3, #2
1004801c:	d901      	bls.n	10048022 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
1004801e:	2303      	movs	r3, #3
10048020:	e019      	b.n	10048056 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
10048022:	4b0f      	ldr	r3, [pc, #60]	@ (10048060 <HAL_RCC_ClockConfig+0x150>)
10048024:	685b      	ldr	r3, [r3, #4]
10048026:	2230      	movs	r2, #48	@ 0x30
10048028:	4013      	ands	r3, r2
1004802a:	683a      	ldr	r2, [r7, #0]
1004802c:	429a      	cmp	r2, r3
1004802e:	d1ef      	bne.n	10048010 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
10048030:	2300      	movs	r3, #0
10048032:	60bb      	str	r3, [r7, #8]
10048034:	e003      	b.n	1004803e <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
10048036:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10048038:	68bb      	ldr	r3, [r7, #8]
1004803a:	3301      	adds	r3, #1
1004803c:	60bb      	str	r3, [r7, #8]
1004803e:	68bb      	ldr	r3, [r7, #8]
10048040:	2b05      	cmp	r3, #5
10048042:	ddf8      	ble.n	10048036 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
10048044:	f7fc fd9a 	bl	10044b7c <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
10048048:	f7fc fe46 	bl	10044cd8 <HAL_GetTickPrio>
1004804c:	0003      	movs	r3, r0
1004804e:	0018      	movs	r0, r3
10048050:	f7fc fdde 	bl	10044c10 <HAL_InitTick>
10048054:	0003      	movs	r3, r0
}
10048056:	0018      	movs	r0, r3
10048058:	46bd      	mov	sp, r7
1004805a:	b004      	add	sp, #16
1004805c:	bd80      	pop	{r7, pc}
1004805e:	46c0      	nop			@ (mov r8, r8)
10048060:	40001000 	.word	0x40001000
10048064:	48400000 	.word	0x48400000

10048068 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
10048068:	b580      	push	{r7, lr}
1004806a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
1004806c:	4b02      	ldr	r3, [pc, #8]	@ (10048078 <HAL_RCC_GetSysClockFreq+0x10>)
1004806e:	681b      	ldr	r3, [r3, #0]
}
10048070:	0018      	movs	r0, r3
10048072:	46bd      	mov	sp, r7
10048074:	bd80      	pop	{r7, pc}
10048076:	46c0      	nop			@ (mov r8, r8)
10048078:	20000828 	.word	0x20000828

1004807c <LL_RCC_HSE_IsReady>:
{
1004807c:	b580      	push	{r7, lr}
1004807e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10048080:	4b07      	ldr	r3, [pc, #28]	@ (100480a0 <LL_RCC_HSE_IsReady+0x24>)
10048082:	681a      	ldr	r2, [r3, #0]
10048084:	2380      	movs	r3, #128	@ 0x80
10048086:	029b      	lsls	r3, r3, #10
10048088:	401a      	ands	r2, r3
1004808a:	2380      	movs	r3, #128	@ 0x80
1004808c:	029b      	lsls	r3, r3, #10
1004808e:	429a      	cmp	r2, r3
10048090:	d101      	bne.n	10048096 <LL_RCC_HSE_IsReady+0x1a>
10048092:	2301      	movs	r3, #1
10048094:	e000      	b.n	10048098 <LL_RCC_HSE_IsReady+0x1c>
10048096:	2300      	movs	r3, #0
}
10048098:	0018      	movs	r0, r3
1004809a:	46bd      	mov	sp, r7
1004809c:	bd80      	pop	{r7, pc}
1004809e:	46c0      	nop			@ (mov r8, r8)
100480a0:	48400000 	.word	0x48400000

100480a4 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
100480a4:	b580      	push	{r7, lr}
100480a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
100480a8:	4b05      	ldr	r3, [pc, #20]	@ (100480c0 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
100480aa:	689b      	ldr	r3, [r3, #8]
100480ac:	2208      	movs	r2, #8
100480ae:	4013      	ands	r3, r2
100480b0:	2b08      	cmp	r3, #8
100480b2:	d101      	bne.n	100480b8 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
100480b4:	2301      	movs	r3, #1
100480b6:	e000      	b.n	100480ba <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
100480b8:	2300      	movs	r3, #0
}
100480ba:	0018      	movs	r0, r3
100480bc:	46bd      	mov	sp, r7
100480be:	bd80      	pop	{r7, pc}
100480c0:	48400000 	.word	0x48400000

100480c4 <LL_RCC_LSCO_SetSource>:
{
100480c4:	b580      	push	{r7, lr}
100480c6:	b082      	sub	sp, #8
100480c8:	af00      	add	r7, sp, #0
100480ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
100480cc:	4b06      	ldr	r3, [pc, #24]	@ (100480e8 <LL_RCC_LSCO_SetSource+0x24>)
100480ce:	689b      	ldr	r3, [r3, #8]
100480d0:	4a06      	ldr	r2, [pc, #24]	@ (100480ec <LL_RCC_LSCO_SetSource+0x28>)
100480d2:	4013      	ands	r3, r2
100480d4:	0019      	movs	r1, r3
100480d6:	4b04      	ldr	r3, [pc, #16]	@ (100480e8 <LL_RCC_LSCO_SetSource+0x24>)
100480d8:	687a      	ldr	r2, [r7, #4]
100480da:	430a      	orrs	r2, r1
100480dc:	609a      	str	r2, [r3, #8]
}
100480de:	46c0      	nop			@ (mov r8, r8)
100480e0:	46bd      	mov	sp, r7
100480e2:	b002      	add	sp, #8
100480e4:	bd80      	pop	{r7, pc}
100480e6:	46c0      	nop			@ (mov r8, r8)
100480e8:	48400000 	.word	0x48400000
100480ec:	fffe7fff 	.word	0xfffe7fff

100480f0 <LL_RCC_LSCO_GetSource>:
{
100480f0:	b580      	push	{r7, lr}
100480f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
100480f4:	4b03      	ldr	r3, [pc, #12]	@ (10048104 <LL_RCC_LSCO_GetSource+0x14>)
100480f6:	689a      	ldr	r2, [r3, #8]
100480f8:	23c0      	movs	r3, #192	@ 0xc0
100480fa:	025b      	lsls	r3, r3, #9
100480fc:	4013      	ands	r3, r2
}
100480fe:	0018      	movs	r0, r3
10048100:	46bd      	mov	sp, r7
10048102:	bd80      	pop	{r7, pc}
10048104:	48400000 	.word	0x48400000

10048108 <LL_RCC_SetRFClock>:
{
10048108:	b580      	push	{r7, lr}
1004810a:	b082      	sub	sp, #8
1004810c:	af00      	add	r7, sp, #0
1004810e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
10048110:	4b06      	ldr	r3, [pc, #24]	@ (1004812c <LL_RCC_SetRFClock+0x24>)
10048112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10048114:	2204      	movs	r2, #4
10048116:	4393      	bics	r3, r2
10048118:	0019      	movs	r1, r3
1004811a:	4b04      	ldr	r3, [pc, #16]	@ (1004812c <LL_RCC_SetRFClock+0x24>)
1004811c:	687a      	ldr	r2, [r7, #4]
1004811e:	430a      	orrs	r2, r1
10048120:	661a      	str	r2, [r3, #96]	@ 0x60
}
10048122:	46c0      	nop			@ (mov r8, r8)
10048124:	46bd      	mov	sp, r7
10048126:	b002      	add	sp, #8
10048128:	bd80      	pop	{r7, pc}
1004812a:	46c0      	nop			@ (mov r8, r8)
1004812c:	48400000 	.word	0x48400000

10048130 <LL_RCC_GetRFClock>:
{
10048130:	b580      	push	{r7, lr}
10048132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
10048134:	4b03      	ldr	r3, [pc, #12]	@ (10048144 <LL_RCC_GetRFClock+0x14>)
10048136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10048138:	2204      	movs	r2, #4
1004813a:	4013      	ands	r3, r2
}
1004813c:	0018      	movs	r0, r3
1004813e:	46bd      	mov	sp, r7
10048140:	bd80      	pop	{r7, pc}
10048142:	46c0      	nop			@ (mov r8, r8)
10048144:	48400000 	.word	0x48400000

10048148 <LL_RCC_SetSMPSPrescaler>:
{
10048148:	b580      	push	{r7, lr}
1004814a:	b082      	sub	sp, #8
1004814c:	af00      	add	r7, sp, #0
1004814e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
10048150:	4b06      	ldr	r3, [pc, #24]	@ (1004816c <LL_RCC_SetSMPSPrescaler+0x24>)
10048152:	689b      	ldr	r3, [r3, #8]
10048154:	4a06      	ldr	r2, [pc, #24]	@ (10048170 <LL_RCC_SetSMPSPrescaler+0x28>)
10048156:	4013      	ands	r3, r2
10048158:	0019      	movs	r1, r3
1004815a:	4b04      	ldr	r3, [pc, #16]	@ (1004816c <LL_RCC_SetSMPSPrescaler+0x24>)
1004815c:	687a      	ldr	r2, [r7, #4]
1004815e:	430a      	orrs	r2, r1
10048160:	609a      	str	r2, [r3, #8]
}
10048162:	46c0      	nop			@ (mov r8, r8)
10048164:	46bd      	mov	sp, r7
10048166:	b002      	add	sp, #8
10048168:	bd80      	pop	{r7, pc}
1004816a:	46c0      	nop			@ (mov r8, r8)
1004816c:	48400000 	.word	0x48400000
10048170:	ffffefff 	.word	0xffffefff

10048174 <LL_RCC_GetSMPSPrescaler>:
{
10048174:	b580      	push	{r7, lr}
10048176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
10048178:	4b03      	ldr	r3, [pc, #12]	@ (10048188 <LL_RCC_GetSMPSPrescaler+0x14>)
1004817a:	689a      	ldr	r2, [r3, #8]
1004817c:	2380      	movs	r3, #128	@ 0x80
1004817e:	015b      	lsls	r3, r3, #5
10048180:	4013      	ands	r3, r2
}
10048182:	0018      	movs	r0, r3
10048184:	46bd      	mov	sp, r7
10048186:	bd80      	pop	{r7, pc}
10048188:	48400000 	.word	0x48400000

1004818c <LL_RCC_SetLPUARTClockSource>:
{
1004818c:	b580      	push	{r7, lr}
1004818e:	b082      	sub	sp, #8
10048190:	af00      	add	r7, sp, #0
10048192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
10048194:	4b06      	ldr	r3, [pc, #24]	@ (100481b0 <LL_RCC_SetLPUARTClockSource+0x24>)
10048196:	689b      	ldr	r3, [r3, #8]
10048198:	4a06      	ldr	r2, [pc, #24]	@ (100481b4 <LL_RCC_SetLPUARTClockSource+0x28>)
1004819a:	4013      	ands	r3, r2
1004819c:	0019      	movs	r1, r3
1004819e:	4b04      	ldr	r3, [pc, #16]	@ (100481b0 <LL_RCC_SetLPUARTClockSource+0x24>)
100481a0:	687a      	ldr	r2, [r7, #4]
100481a2:	430a      	orrs	r2, r1
100481a4:	609a      	str	r2, [r3, #8]
}
100481a6:	46c0      	nop			@ (mov r8, r8)
100481a8:	46bd      	mov	sp, r7
100481aa:	b002      	add	sp, #8
100481ac:	bd80      	pop	{r7, pc}
100481ae:	46c0      	nop			@ (mov r8, r8)
100481b0:	48400000 	.word	0x48400000
100481b4:	ffffdfff 	.word	0xffffdfff

100481b8 <LL_RCC_GetLPUARTClockSource>:
{
100481b8:	b580      	push	{r7, lr}
100481ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
100481bc:	4b03      	ldr	r3, [pc, #12]	@ (100481cc <LL_RCC_GetLPUARTClockSource+0x14>)
100481be:	689a      	ldr	r2, [r3, #8]
100481c0:	2380      	movs	r3, #128	@ 0x80
100481c2:	019b      	lsls	r3, r3, #6
100481c4:	4013      	ands	r3, r2
}
100481c6:	0018      	movs	r0, r3
100481c8:	46bd      	mov	sp, r7
100481ca:	bd80      	pop	{r7, pc}
100481cc:	48400000 	.word	0x48400000

100481d0 <LL_RCC_SetSPI3I2SClockSource>:
{
100481d0:	b580      	push	{r7, lr}
100481d2:	b082      	sub	sp, #8
100481d4:	af00      	add	r7, sp, #0
100481d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
100481d8:	4b06      	ldr	r3, [pc, #24]	@ (100481f4 <LL_RCC_SetSPI3I2SClockSource+0x24>)
100481da:	689b      	ldr	r3, [r3, #8]
100481dc:	4a06      	ldr	r2, [pc, #24]	@ (100481f8 <LL_RCC_SetSPI3I2SClockSource+0x28>)
100481de:	4013      	ands	r3, r2
100481e0:	0019      	movs	r1, r3
100481e2:	4b04      	ldr	r3, [pc, #16]	@ (100481f4 <LL_RCC_SetSPI3I2SClockSource+0x24>)
100481e4:	687a      	ldr	r2, [r7, #4]
100481e6:	430a      	orrs	r2, r1
100481e8:	609a      	str	r2, [r3, #8]
}
100481ea:	46c0      	nop			@ (mov r8, r8)
100481ec:	46bd      	mov	sp, r7
100481ee:	b002      	add	sp, #8
100481f0:	bd80      	pop	{r7, pc}
100481f2:	46c0      	nop			@ (mov r8, r8)
100481f4:	48400000 	.word	0x48400000
100481f8:	ff3fffff 	.word	0xff3fffff

100481fc <LL_RCC_GetSPI3I2SClockSource>:
{
100481fc:	b580      	push	{r7, lr}
100481fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
10048200:	4b03      	ldr	r3, [pc, #12]	@ (10048210 <LL_RCC_GetSPI3I2SClockSource+0x14>)
10048202:	689a      	ldr	r2, [r3, #8]
10048204:	23c0      	movs	r3, #192	@ 0xc0
10048206:	041b      	lsls	r3, r3, #16
10048208:	4013      	ands	r3, r2
}
1004820a:	0018      	movs	r0, r3
1004820c:	46bd      	mov	sp, r7
1004820e:	bd80      	pop	{r7, pc}
10048210:	48400000 	.word	0x48400000

10048214 <LL_RCC_RC64MPLL_IsReady>:
{
10048214:	b580      	push	{r7, lr}
10048216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
10048218:	4b07      	ldr	r3, [pc, #28]	@ (10048238 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004821a:	681a      	ldr	r2, [r3, #0]
1004821c:	2380      	movs	r3, #128	@ 0x80
1004821e:	01db      	lsls	r3, r3, #7
10048220:	401a      	ands	r2, r3
10048222:	2380      	movs	r3, #128	@ 0x80
10048224:	01db      	lsls	r3, r3, #7
10048226:	429a      	cmp	r2, r3
10048228:	d101      	bne.n	1004822e <LL_RCC_RC64MPLL_IsReady+0x1a>
1004822a:	2301      	movs	r3, #1
1004822c:	e000      	b.n	10048230 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004822e:	2300      	movs	r3, #0
}
10048230:	0018      	movs	r0, r3
10048232:	46bd      	mov	sp, r7
10048234:	bd80      	pop	{r7, pc}
10048236:	46c0      	nop			@ (mov r8, r8)
10048238:	48400000 	.word	0x48400000

1004823c <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
1004823c:	b580      	push	{r7, lr}
1004823e:	b082      	sub	sp, #8
10048240:	af00      	add	r7, sp, #0
10048242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
10048244:	687b      	ldr	r3, [r7, #4]
10048246:	681b      	ldr	r3, [r3, #0]
10048248:	2201      	movs	r2, #1
1004824a:	4013      	ands	r3, r2
1004824c:	d004      	beq.n	10048258 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1004824e:	687b      	ldr	r3, [r7, #4]
10048250:	691b      	ldr	r3, [r3, #16]
10048252:	0018      	movs	r0, r3
10048254:	f7ff ff58 	bl	10048108 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
10048258:	687b      	ldr	r3, [r7, #4]
1004825a:	681b      	ldr	r3, [r3, #0]
1004825c:	2202      	movs	r2, #2
1004825e:	4013      	ands	r3, r2
10048260:	d004      	beq.n	1004826c <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10048262:	687b      	ldr	r3, [r7, #4]
10048264:	695b      	ldr	r3, [r3, #20]
10048266:	0018      	movs	r0, r3
10048268:	f7ff ff6e 	bl	10048148 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
1004826c:	687b      	ldr	r3, [r7, #4]
1004826e:	681b      	ldr	r3, [r3, #0]
10048270:	2208      	movs	r2, #8
10048272:	4013      	ands	r3, r2
10048274:	d004      	beq.n	10048280 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
10048276:	687b      	ldr	r3, [r7, #4]
10048278:	685b      	ldr	r3, [r3, #4]
1004827a:	0018      	movs	r0, r3
1004827c:	f7ff ffa8 	bl	100481d0 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
10048280:	687b      	ldr	r3, [r7, #4]
10048282:	681b      	ldr	r3, [r3, #0]
10048284:	2210      	movs	r2, #16
10048286:	4013      	ands	r3, r2
10048288:	d004      	beq.n	10048294 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004828a:	687b      	ldr	r3, [r7, #4]
1004828c:	68db      	ldr	r3, [r3, #12]
1004828e:	0018      	movs	r0, r3
10048290:	f7ff ff7c 	bl	1004818c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10048294:	687b      	ldr	r3, [r7, #4]
10048296:	689b      	ldr	r3, [r3, #8]
10048298:	2220      	movs	r2, #32
1004829a:	4013      	ands	r3, r2
1004829c:	d004      	beq.n	100482a8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004829e:	687b      	ldr	r3, [r7, #4]
100482a0:	689b      	ldr	r3, [r3, #8]
100482a2:	0018      	movs	r0, r3
100482a4:	f7ff ff0e 	bl	100480c4 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
100482a8:	2300      	movs	r3, #0
}
100482aa:	0018      	movs	r0, r3
100482ac:	46bd      	mov	sp, r7
100482ae:	b002      	add	sp, #8
100482b0:	bd80      	pop	{r7, pc}
	...

100482b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
100482b4:	b580      	push	{r7, lr}
100482b6:	b084      	sub	sp, #16
100482b8:	af00      	add	r7, sp, #0
100482ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
100482bc:	2300      	movs	r3, #0
100482be:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
100482c0:	687b      	ldr	r3, [r7, #4]
100482c2:	2b20      	cmp	r3, #32
100482c4:	d900      	bls.n	100482c8 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
100482c6:	e07b      	b.n	100483c0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
100482c8:	687b      	ldr	r3, [r7, #4]
100482ca:	009a      	lsls	r2, r3, #2
100482cc:	4b40      	ldr	r3, [pc, #256]	@ (100483d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
100482ce:	18d3      	adds	r3, r2, r3
100482d0:	681b      	ldr	r3, [r3, #0]
100482d2:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
100482d4:	f7ff ff2c 	bl	10048130 <LL_RCC_GetRFClock>
100482d8:	1e03      	subs	r3, r0, #0
100482da:	d002      	beq.n	100482e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
100482dc:	2b04      	cmp	r3, #4
100482de:	d003      	beq.n	100482e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
100482e0:	e071      	b.n	100483c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
100482e2:	4b3c      	ldr	r3, [pc, #240]	@ (100483d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
100482e4:	60fb      	str	r3, [r7, #12]
          break;
100482e6:	e002      	b.n	100482ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
100482e8:	4b3b      	ldr	r3, [pc, #236]	@ (100483d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
100482ea:	60fb      	str	r3, [r7, #12]
          break;
100482ec:	46c0      	nop			@ (mov r8, r8)
      break;
100482ee:	e06a      	b.n	100483c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
100482f0:	f7ff ff40 	bl	10048174 <LL_RCC_GetSMPSPrescaler>
100482f4:	1e03      	subs	r3, r0, #0
100482f6:	d004      	beq.n	10048302 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
100482f8:	2280      	movs	r2, #128	@ 0x80
100482fa:	0152      	lsls	r2, r2, #5
100482fc:	4293      	cmp	r3, r2
100482fe:	d003      	beq.n	10048308 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
10048300:	e061      	b.n	100483c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
10048302:	4b36      	ldr	r3, [pc, #216]	@ (100483dc <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
10048304:	60fb      	str	r3, [r7, #12]
          break;
10048306:	e002      	b.n	1004830e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
10048308:	4b35      	ldr	r3, [pc, #212]	@ (100483e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
1004830a:	60fb      	str	r3, [r7, #12]
          break;
1004830c:	46c0      	nop			@ (mov r8, r8)
      break;
1004830e:	e05a      	b.n	100483c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
10048310:	f7ff fec8 	bl	100480a4 <LL_RCC_DIRECT_HSE_IsEnabled>
10048314:	1e03      	subs	r3, r0, #0
10048316:	d005      	beq.n	10048324 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
10048318:	f7ff feb0 	bl	1004807c <LL_RCC_HSE_IsReady>
1004831c:	1e03      	subs	r3, r0, #0
1004831e:	d107      	bne.n	10048330 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
10048320:	2300      	movs	r3, #0
10048322:	e051      	b.n	100483c8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
10048324:	f7ff ff76 	bl	10048214 <LL_RCC_RC64MPLL_IsReady>
10048328:	1e03      	subs	r3, r0, #0
1004832a:	d101      	bne.n	10048330 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004832c:	2300      	movs	r3, #0
1004832e:	e04b      	b.n	100483c8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
10048330:	f7ff ff64 	bl	100481fc <LL_RCC_GetSPI3I2SClockSource>
10048334:	0003      	movs	r3, r0
10048336:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
10048338:	68bb      	ldr	r3, [r7, #8]
1004833a:	2b00      	cmp	r3, #0
1004833c:	d101      	bne.n	10048342 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
1004833e:	4b26      	ldr	r3, [pc, #152]	@ (100483d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10048340:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
10048342:	68ba      	ldr	r2, [r7, #8]
10048344:	2380      	movs	r3, #128	@ 0x80
10048346:	03db      	lsls	r3, r3, #15
10048348:	429a      	cmp	r2, r3
1004834a:	d101      	bne.n	10048350 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
1004834c:	4b21      	ldr	r3, [pc, #132]	@ (100483d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004834e:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
10048350:	68ba      	ldr	r2, [r7, #8]
10048352:	2380      	movs	r3, #128	@ 0x80
10048354:	041b      	lsls	r3, r3, #16
10048356:	429a      	cmp	r2, r3
10048358:	d134      	bne.n	100483c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
1004835a:	4b22      	ldr	r3, [pc, #136]	@ (100483e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
1004835c:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
1004835e:	e031      	b.n	100483c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
10048360:	f7ff ff2a 	bl	100481b8 <LL_RCC_GetLPUARTClockSource>
10048364:	0002      	movs	r2, r0
10048366:	2380      	movs	r3, #128	@ 0x80
10048368:	019b      	lsls	r3, r3, #6
1004836a:	429a      	cmp	r2, r3
1004836c:	d103      	bne.n	10048376 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1004836e:	2380      	movs	r3, #128	@ 0x80
10048370:	021b      	lsls	r3, r3, #8
10048372:	60fb      	str	r3, [r7, #12]
          break;
10048374:	e002      	b.n	1004837c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
10048376:	4b18      	ldr	r3, [pc, #96]	@ (100483d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10048378:	60fb      	str	r3, [r7, #12]
          break;
1004837a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004837c:	e023      	b.n	100483c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
1004837e:	f7ff feb7 	bl	100480f0 <LL_RCC_LSCO_GetSource>
10048382:	0003      	movs	r3, r0
10048384:	22c0      	movs	r2, #192	@ 0xc0
10048386:	0252      	lsls	r2, r2, #9
10048388:	4293      	cmp	r3, r2
1004838a:	d014      	beq.n	100483b6 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
1004838c:	22c0      	movs	r2, #192	@ 0xc0
1004838e:	0252      	lsls	r2, r2, #9
10048390:	4293      	cmp	r3, r2
10048392:	d813      	bhi.n	100483bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
10048394:	2280      	movs	r2, #128	@ 0x80
10048396:	0212      	lsls	r2, r2, #8
10048398:	4293      	cmp	r3, r2
1004839a:	d004      	beq.n	100483a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
1004839c:	2280      	movs	r2, #128	@ 0x80
1004839e:	0252      	lsls	r2, r2, #9
100483a0:	4293      	cmp	r3, r2
100483a2:	d004      	beq.n	100483ae <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
100483a4:	e00a      	b.n	100483bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
100483a6:	2380      	movs	r3, #128	@ 0x80
100483a8:	021b      	lsls	r3, r3, #8
100483aa:	60fb      	str	r3, [r7, #12]
          break;
100483ac:	e007      	b.n	100483be <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
100483ae:	23fa      	movs	r3, #250	@ 0xfa
100483b0:	01db      	lsls	r3, r3, #7
100483b2:	60fb      	str	r3, [r7, #12]
          break;
100483b4:	e003      	b.n	100483be <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
100483b6:	4b0c      	ldr	r3, [pc, #48]	@ (100483e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
100483b8:	60fb      	str	r3, [r7, #12]
          break;
100483ba:	e000      	b.n	100483be <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
100483bc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
100483be:	e002      	b.n	100483c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
100483c0:	46c0      	nop			@ (mov r8, r8)
100483c2:	e000      	b.n	100483c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
100483c4:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
100483c6:	68fb      	ldr	r3, [r7, #12]
}
100483c8:	0018      	movs	r0, r3
100483ca:	46bd      	mov	sp, r7
100483cc:	b004      	add	sp, #16
100483ce:	bd80      	pop	{r7, pc}
100483d0:	1004e6f0 	.word	0x1004e6f0
100483d4:	01e84800 	.word	0x01e84800
100483d8:	00f42400 	.word	0x00f42400
100483dc:	007a1200 	.word	0x007a1200
100483e0:	003d0900 	.word	0x003d0900
100483e4:	03d09000 	.word	0x03d09000
100483e8:	00007a12 	.word	0x00007a12

100483ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100483ec:	b580      	push	{r7, lr}
100483ee:	b082      	sub	sp, #8
100483f0:	af00      	add	r7, sp, #0
100483f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100483f4:	687b      	ldr	r3, [r7, #4]
100483f6:	2b00      	cmp	r3, #0
100483f8:	d101      	bne.n	100483fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100483fa:	2301      	movs	r3, #1
100483fc:	e046      	b.n	1004848c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100483fe:	687b      	ldr	r3, [r7, #4]
10048400:	2288      	movs	r2, #136	@ 0x88
10048402:	589b      	ldr	r3, [r3, r2]
10048404:	2b00      	cmp	r3, #0
10048406:	d107      	bne.n	10048418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10048408:	687b      	ldr	r3, [r7, #4]
1004840a:	2284      	movs	r2, #132	@ 0x84
1004840c:	2100      	movs	r1, #0
1004840e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10048410:	687b      	ldr	r3, [r7, #4]
10048412:	0018      	movs	r0, r3
10048414:	f7f8 fde2 	bl	10040fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10048418:	687b      	ldr	r3, [r7, #4]
1004841a:	2288      	movs	r2, #136	@ 0x88
1004841c:	2124      	movs	r1, #36	@ 0x24
1004841e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
10048420:	687b      	ldr	r3, [r7, #4]
10048422:	681b      	ldr	r3, [r3, #0]
10048424:	681a      	ldr	r2, [r3, #0]
10048426:	687b      	ldr	r3, [r7, #4]
10048428:	681b      	ldr	r3, [r3, #0]
1004842a:	2101      	movs	r1, #1
1004842c:	438a      	bics	r2, r1
1004842e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10048430:	687b      	ldr	r3, [r7, #4]
10048432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048434:	2b00      	cmp	r3, #0
10048436:	d003      	beq.n	10048440 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
10048438:	687b      	ldr	r3, [r7, #4]
1004843a:	0018      	movs	r0, r3
1004843c:	f000 fa38 	bl	100488b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10048440:	687b      	ldr	r3, [r7, #4]
10048442:	0018      	movs	r0, r3
10048444:	f000 f8cc 	bl	100485e0 <UART_SetConfig>
10048448:	0003      	movs	r3, r0
1004844a:	2b01      	cmp	r3, #1
1004844c:	d101      	bne.n	10048452 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
1004844e:	2301      	movs	r3, #1
10048450:	e01c      	b.n	1004848c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10048452:	687b      	ldr	r3, [r7, #4]
10048454:	681b      	ldr	r3, [r3, #0]
10048456:	685a      	ldr	r2, [r3, #4]
10048458:	687b      	ldr	r3, [r7, #4]
1004845a:	681b      	ldr	r3, [r3, #0]
1004845c:	490d      	ldr	r1, [pc, #52]	@ (10048494 <HAL_UART_Init+0xa8>)
1004845e:	400a      	ands	r2, r1
10048460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10048462:	687b      	ldr	r3, [r7, #4]
10048464:	681b      	ldr	r3, [r3, #0]
10048466:	689a      	ldr	r2, [r3, #8]
10048468:	687b      	ldr	r3, [r7, #4]
1004846a:	681b      	ldr	r3, [r3, #0]
1004846c:	212a      	movs	r1, #42	@ 0x2a
1004846e:	438a      	bics	r2, r1
10048470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10048472:	687b      	ldr	r3, [r7, #4]
10048474:	681b      	ldr	r3, [r3, #0]
10048476:	681a      	ldr	r2, [r3, #0]
10048478:	687b      	ldr	r3, [r7, #4]
1004847a:	681b      	ldr	r3, [r3, #0]
1004847c:	2101      	movs	r1, #1
1004847e:	430a      	orrs	r2, r1
10048480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10048482:	687b      	ldr	r3, [r7, #4]
10048484:	0018      	movs	r0, r3
10048486:	f000 fac7 	bl	10048a18 <UART_CheckIdleState>
1004848a:	0003      	movs	r3, r0
}
1004848c:	0018      	movs	r0, r3
1004848e:	46bd      	mov	sp, r7
10048490:	b002      	add	sp, #8
10048492:	bd80      	pop	{r7, pc}
10048494:	ffffb7ff 	.word	0xffffb7ff

10048498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10048498:	b580      	push	{r7, lr}
1004849a:	b08a      	sub	sp, #40	@ 0x28
1004849c:	af02      	add	r7, sp, #8
1004849e:	60f8      	str	r0, [r7, #12]
100484a0:	60b9      	str	r1, [r7, #8]
100484a2:	603b      	str	r3, [r7, #0]
100484a4:	1dbb      	adds	r3, r7, #6
100484a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
100484a8:	68fb      	ldr	r3, [r7, #12]
100484aa:	2288      	movs	r2, #136	@ 0x88
100484ac:	589b      	ldr	r3, [r3, r2]
100484ae:	2b20      	cmp	r3, #32
100484b0:	d000      	beq.n	100484b4 <HAL_UART_Transmit+0x1c>
100484b2:	e090      	b.n	100485d6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
100484b4:	68bb      	ldr	r3, [r7, #8]
100484b6:	2b00      	cmp	r3, #0
100484b8:	d003      	beq.n	100484c2 <HAL_UART_Transmit+0x2a>
100484ba:	1dbb      	adds	r3, r7, #6
100484bc:	881b      	ldrh	r3, [r3, #0]
100484be:	2b00      	cmp	r3, #0
100484c0:	d101      	bne.n	100484c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
100484c2:	2301      	movs	r3, #1
100484c4:	e088      	b.n	100485d8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100484c6:	68fb      	ldr	r3, [r7, #12]
100484c8:	689a      	ldr	r2, [r3, #8]
100484ca:	2380      	movs	r3, #128	@ 0x80
100484cc:	015b      	lsls	r3, r3, #5
100484ce:	429a      	cmp	r2, r3
100484d0:	d109      	bne.n	100484e6 <HAL_UART_Transmit+0x4e>
100484d2:	68fb      	ldr	r3, [r7, #12]
100484d4:	691b      	ldr	r3, [r3, #16]
100484d6:	2b00      	cmp	r3, #0
100484d8:	d105      	bne.n	100484e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
100484da:	68bb      	ldr	r3, [r7, #8]
100484dc:	2201      	movs	r2, #1
100484de:	4013      	ands	r3, r2
100484e0:	d001      	beq.n	100484e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
100484e2:	2301      	movs	r3, #1
100484e4:	e078      	b.n	100485d8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
100484e6:	68fb      	ldr	r3, [r7, #12]
100484e8:	2290      	movs	r2, #144	@ 0x90
100484ea:	2100      	movs	r1, #0
100484ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
100484ee:	68fb      	ldr	r3, [r7, #12]
100484f0:	2288      	movs	r2, #136	@ 0x88
100484f2:	2121      	movs	r1, #33	@ 0x21
100484f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
100484f6:	f7fc fbe5 	bl	10044cc4 <HAL_GetTick>
100484fa:	0003      	movs	r3, r0
100484fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
100484fe:	68fb      	ldr	r3, [r7, #12]
10048500:	1dba      	adds	r2, r7, #6
10048502:	2154      	movs	r1, #84	@ 0x54
10048504:	8812      	ldrh	r2, [r2, #0]
10048506:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
10048508:	68fb      	ldr	r3, [r7, #12]
1004850a:	1dba      	adds	r2, r7, #6
1004850c:	2156      	movs	r1, #86	@ 0x56
1004850e:	8812      	ldrh	r2, [r2, #0]
10048510:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10048512:	68fb      	ldr	r3, [r7, #12]
10048514:	689a      	ldr	r2, [r3, #8]
10048516:	2380      	movs	r3, #128	@ 0x80
10048518:	015b      	lsls	r3, r3, #5
1004851a:	429a      	cmp	r2, r3
1004851c:	d108      	bne.n	10048530 <HAL_UART_Transmit+0x98>
1004851e:	68fb      	ldr	r3, [r7, #12]
10048520:	691b      	ldr	r3, [r3, #16]
10048522:	2b00      	cmp	r3, #0
10048524:	d104      	bne.n	10048530 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
10048526:	2300      	movs	r3, #0
10048528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
1004852a:	68bb      	ldr	r3, [r7, #8]
1004852c:	61bb      	str	r3, [r7, #24]
1004852e:	e003      	b.n	10048538 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
10048530:	68bb      	ldr	r3, [r7, #8]
10048532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10048534:	2300      	movs	r3, #0
10048536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
10048538:	e030      	b.n	1004859c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1004853a:	697a      	ldr	r2, [r7, #20]
1004853c:	68f8      	ldr	r0, [r7, #12]
1004853e:	683b      	ldr	r3, [r7, #0]
10048540:	9300      	str	r3, [sp, #0]
10048542:	0013      	movs	r3, r2
10048544:	2200      	movs	r2, #0
10048546:	2180      	movs	r1, #128	@ 0x80
10048548:	f000 fb10 	bl	10048b6c <UART_WaitOnFlagUntilTimeout>
1004854c:	1e03      	subs	r3, r0, #0
1004854e:	d005      	beq.n	1004855c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
10048550:	68fb      	ldr	r3, [r7, #12]
10048552:	2288      	movs	r2, #136	@ 0x88
10048554:	2120      	movs	r1, #32
10048556:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
10048558:	2303      	movs	r3, #3
1004855a:	e03d      	b.n	100485d8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
1004855c:	69fb      	ldr	r3, [r7, #28]
1004855e:	2b00      	cmp	r3, #0
10048560:	d10b      	bne.n	1004857a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10048562:	69bb      	ldr	r3, [r7, #24]
10048564:	881b      	ldrh	r3, [r3, #0]
10048566:	001a      	movs	r2, r3
10048568:	68fb      	ldr	r3, [r7, #12]
1004856a:	681b      	ldr	r3, [r3, #0]
1004856c:	05d2      	lsls	r2, r2, #23
1004856e:	0dd2      	lsrs	r2, r2, #23
10048570:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
10048572:	69bb      	ldr	r3, [r7, #24]
10048574:	3302      	adds	r3, #2
10048576:	61bb      	str	r3, [r7, #24]
10048578:	e007      	b.n	1004858a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
1004857a:	69fb      	ldr	r3, [r7, #28]
1004857c:	781a      	ldrb	r2, [r3, #0]
1004857e:	68fb      	ldr	r3, [r7, #12]
10048580:	681b      	ldr	r3, [r3, #0]
10048582:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
10048584:	69fb      	ldr	r3, [r7, #28]
10048586:	3301      	adds	r3, #1
10048588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
1004858a:	68fb      	ldr	r3, [r7, #12]
1004858c:	2256      	movs	r2, #86	@ 0x56
1004858e:	5a9b      	ldrh	r3, [r3, r2]
10048590:	b29b      	uxth	r3, r3
10048592:	3b01      	subs	r3, #1
10048594:	b299      	uxth	r1, r3
10048596:	68fb      	ldr	r3, [r7, #12]
10048598:	2256      	movs	r2, #86	@ 0x56
1004859a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
1004859c:	68fb      	ldr	r3, [r7, #12]
1004859e:	2256      	movs	r2, #86	@ 0x56
100485a0:	5a9b      	ldrh	r3, [r3, r2]
100485a2:	b29b      	uxth	r3, r3
100485a4:	2b00      	cmp	r3, #0
100485a6:	d1c8      	bne.n	1004853a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
100485a8:	697a      	ldr	r2, [r7, #20]
100485aa:	68f8      	ldr	r0, [r7, #12]
100485ac:	683b      	ldr	r3, [r7, #0]
100485ae:	9300      	str	r3, [sp, #0]
100485b0:	0013      	movs	r3, r2
100485b2:	2200      	movs	r2, #0
100485b4:	2140      	movs	r1, #64	@ 0x40
100485b6:	f000 fad9 	bl	10048b6c <UART_WaitOnFlagUntilTimeout>
100485ba:	1e03      	subs	r3, r0, #0
100485bc:	d005      	beq.n	100485ca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
100485be:	68fb      	ldr	r3, [r7, #12]
100485c0:	2288      	movs	r2, #136	@ 0x88
100485c2:	2120      	movs	r1, #32
100485c4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
100485c6:	2303      	movs	r3, #3
100485c8:	e006      	b.n	100485d8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
100485ca:	68fb      	ldr	r3, [r7, #12]
100485cc:	2288      	movs	r2, #136	@ 0x88
100485ce:	2120      	movs	r1, #32
100485d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
100485d2:	2300      	movs	r3, #0
100485d4:	e000      	b.n	100485d8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
100485d6:	2302      	movs	r3, #2
  }
}
100485d8:	0018      	movs	r0, r3
100485da:	46bd      	mov	sp, r7
100485dc:	b008      	add	sp, #32
100485de:	bd80      	pop	{r7, pc}

100485e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
100485e0:	b5b0      	push	{r4, r5, r7, lr}
100485e2:	b090      	sub	sp, #64	@ 0x40
100485e4:	af00      	add	r7, sp, #0
100485e6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
100485e8:	231b      	movs	r3, #27
100485ea:	2220      	movs	r2, #32
100485ec:	189b      	adds	r3, r3, r2
100485ee:	19db      	adds	r3, r3, r7
100485f0:	2200      	movs	r2, #0
100485f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
100485f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100485f6:	689a      	ldr	r2, [r3, #8]
100485f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100485fa:	691b      	ldr	r3, [r3, #16]
100485fc:	431a      	orrs	r2, r3
100485fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048600:	695b      	ldr	r3, [r3, #20]
10048602:	431a      	orrs	r2, r3
10048604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048606:	69db      	ldr	r3, [r3, #28]
10048608:	4313      	orrs	r3, r2
1004860a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
1004860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004860e:	681b      	ldr	r3, [r3, #0]
10048610:	681b      	ldr	r3, [r3, #0]
10048612:	4aa1      	ldr	r2, [pc, #644]	@ (10048898 <UART_SetConfig+0x2b8>)
10048614:	4013      	ands	r3, r2
10048616:	0019      	movs	r1, r3
10048618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004861a:	681a      	ldr	r2, [r3, #0]
1004861c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004861e:	430b      	orrs	r3, r1
10048620:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10048622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048624:	681b      	ldr	r3, [r3, #0]
10048626:	685b      	ldr	r3, [r3, #4]
10048628:	4a9c      	ldr	r2, [pc, #624]	@ (1004889c <UART_SetConfig+0x2bc>)
1004862a:	4013      	ands	r3, r2
1004862c:	0018      	movs	r0, r3
1004862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048630:	68d9      	ldr	r1, [r3, #12]
10048632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048634:	681a      	ldr	r2, [r3, #0]
10048636:	0003      	movs	r3, r0
10048638:	430b      	orrs	r3, r1
1004863a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1004863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004863e:	699b      	ldr	r3, [r3, #24]
10048640:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10048642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048644:	681b      	ldr	r3, [r3, #0]
10048646:	4a96      	ldr	r2, [pc, #600]	@ (100488a0 <UART_SetConfig+0x2c0>)
10048648:	4293      	cmp	r3, r2
1004864a:	d004      	beq.n	10048656 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
1004864c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004864e:	6a1b      	ldr	r3, [r3, #32]
10048650:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10048652:	4313      	orrs	r3, r2
10048654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10048656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048658:	681b      	ldr	r3, [r3, #0]
1004865a:	689b      	ldr	r3, [r3, #8]
1004865c:	4a91      	ldr	r2, [pc, #580]	@ (100488a4 <UART_SetConfig+0x2c4>)
1004865e:	4013      	ands	r3, r2
10048660:	0019      	movs	r1, r3
10048662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048664:	681a      	ldr	r2, [r3, #0]
10048666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048668:	430b      	orrs	r3, r1
1004866a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
1004866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004866e:	681b      	ldr	r3, [r3, #0]
10048670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048672:	220f      	movs	r2, #15
10048674:	4393      	bics	r3, r2
10048676:	0018      	movs	r0, r3
10048678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004867a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1004867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004867e:	681a      	ldr	r2, [r3, #0]
10048680:	0003      	movs	r3, r0
10048682:	430b      	orrs	r3, r1
10048684:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10048686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048688:	681b      	ldr	r3, [r3, #0]
1004868a:	4a85      	ldr	r2, [pc, #532]	@ (100488a0 <UART_SetConfig+0x2c0>)
1004868c:	4293      	cmp	r3, r2
1004868e:	d16d      	bne.n	1004876c <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
10048690:	2010      	movs	r0, #16
10048692:	f7ff fe0f 	bl	100482b4 <HAL_RCCEx_GetPeriphCLKFreq>
10048696:	0003      	movs	r3, r0
10048698:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
1004869a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004869c:	2b00      	cmp	r3, #0
1004869e:	d100      	bne.n	100486a2 <UART_SetConfig+0xc2>
100486a0:	e0e3      	b.n	1004886a <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
100486a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100486a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100486a6:	4b80      	ldr	r3, [pc, #512]	@ (100488a8 <UART_SetConfig+0x2c8>)
100486a8:	0052      	lsls	r2, r2, #1
100486aa:	5ad3      	ldrh	r3, [r2, r3]
100486ac:	0019      	movs	r1, r3
100486ae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
100486b0:	f7f7 fdbe 	bl	10040230 <__udivsi3>
100486b4:	0003      	movs	r3, r0
100486b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
100486b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100486ba:	685a      	ldr	r2, [r3, #4]
100486bc:	0013      	movs	r3, r2
100486be:	005b      	lsls	r3, r3, #1
100486c0:	189b      	adds	r3, r3, r2
100486c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100486c4:	429a      	cmp	r2, r3
100486c6:	d305      	bcc.n	100486d4 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
100486c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100486ca:	685b      	ldr	r3, [r3, #4]
100486cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
100486ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100486d0:	429a      	cmp	r2, r3
100486d2:	d906      	bls.n	100486e2 <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
100486d4:	231b      	movs	r3, #27
100486d6:	2220      	movs	r2, #32
100486d8:	189b      	adds	r3, r3, r2
100486da:	19db      	adds	r3, r3, r7
100486dc:	2201      	movs	r2, #1
100486de:	701a      	strb	r2, [r3, #0]
100486e0:	e0c3      	b.n	1004886a <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100486e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100486e4:	61bb      	str	r3, [r7, #24]
100486e6:	2300      	movs	r3, #0
100486e8:	61fb      	str	r3, [r7, #28]
100486ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100486ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100486ee:	4b6e      	ldr	r3, [pc, #440]	@ (100488a8 <UART_SetConfig+0x2c8>)
100486f0:	0052      	lsls	r2, r2, #1
100486f2:	5ad3      	ldrh	r3, [r2, r3]
100486f4:	613b      	str	r3, [r7, #16]
100486f6:	2300      	movs	r3, #0
100486f8:	617b      	str	r3, [r7, #20]
100486fa:	693a      	ldr	r2, [r7, #16]
100486fc:	697b      	ldr	r3, [r7, #20]
100486fe:	69b8      	ldr	r0, [r7, #24]
10048700:	69f9      	ldr	r1, [r7, #28]
10048702:	f7f7 ff35 	bl	10040570 <__aeabi_uldivmod>
10048706:	0002      	movs	r2, r0
10048708:	000b      	movs	r3, r1
1004870a:	0e11      	lsrs	r1, r2, #24
1004870c:	021d      	lsls	r5, r3, #8
1004870e:	430d      	orrs	r5, r1
10048710:	0214      	lsls	r4, r2, #8
10048712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048714:	685b      	ldr	r3, [r3, #4]
10048716:	085b      	lsrs	r3, r3, #1
10048718:	60bb      	str	r3, [r7, #8]
1004871a:	2300      	movs	r3, #0
1004871c:	60fb      	str	r3, [r7, #12]
1004871e:	68b8      	ldr	r0, [r7, #8]
10048720:	68f9      	ldr	r1, [r7, #12]
10048722:	1900      	adds	r0, r0, r4
10048724:	4169      	adcs	r1, r5
10048726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048728:	685b      	ldr	r3, [r3, #4]
1004872a:	603b      	str	r3, [r7, #0]
1004872c:	2300      	movs	r3, #0
1004872e:	607b      	str	r3, [r7, #4]
10048730:	683a      	ldr	r2, [r7, #0]
10048732:	687b      	ldr	r3, [r7, #4]
10048734:	f7f7 ff1c 	bl	10040570 <__aeabi_uldivmod>
10048738:	0002      	movs	r2, r0
1004873a:	000b      	movs	r3, r1
1004873c:	0013      	movs	r3, r2
1004873e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10048740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10048742:	23c0      	movs	r3, #192	@ 0xc0
10048744:	009b      	lsls	r3, r3, #2
10048746:	429a      	cmp	r2, r3
10048748:	d309      	bcc.n	1004875e <UART_SetConfig+0x17e>
1004874a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004874c:	2380      	movs	r3, #128	@ 0x80
1004874e:	035b      	lsls	r3, r3, #13
10048750:	429a      	cmp	r2, r3
10048752:	d204      	bcs.n	1004875e <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
10048754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048756:	681b      	ldr	r3, [r3, #0]
10048758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004875a:	60da      	str	r2, [r3, #12]
1004875c:	e085      	b.n	1004886a <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
1004875e:	231b      	movs	r3, #27
10048760:	2220      	movs	r2, #32
10048762:	189b      	adds	r3, r3, r2
10048764:	19db      	adds	r3, r3, r7
10048766:	2201      	movs	r2, #1
10048768:	701a      	strb	r2, [r3, #0]
1004876a:	e07e      	b.n	1004886a <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
1004876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004876e:	69da      	ldr	r2, [r3, #28]
10048770:	2380      	movs	r3, #128	@ 0x80
10048772:	021b      	lsls	r3, r3, #8
10048774:	429a      	cmp	r2, r3
10048776:	d148      	bne.n	1004880a <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
10048778:	4b4c      	ldr	r3, [pc, #304]	@ (100488ac <UART_SetConfig+0x2cc>)
1004877a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
1004877c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004877e:	2b00      	cmp	r3, #0
10048780:	d100      	bne.n	10048784 <UART_SetConfig+0x1a4>
10048782:	e072      	b.n	1004886a <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048786:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048788:	4b47      	ldr	r3, [pc, #284]	@ (100488a8 <UART_SetConfig+0x2c8>)
1004878a:	0052      	lsls	r2, r2, #1
1004878c:	5ad3      	ldrh	r3, [r2, r3]
1004878e:	0019      	movs	r1, r3
10048790:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048792:	f7f7 fd4d 	bl	10040230 <__udivsi3>
10048796:	0003      	movs	r3, r0
10048798:	005a      	lsls	r2, r3, #1
1004879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004879c:	685b      	ldr	r3, [r3, #4]
1004879e:	085b      	lsrs	r3, r3, #1
100487a0:	18d2      	adds	r2, r2, r3
100487a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100487a4:	685b      	ldr	r3, [r3, #4]
100487a6:	0019      	movs	r1, r3
100487a8:	0010      	movs	r0, r2
100487aa:	f7f7 fd41 	bl	10040230 <__udivsi3>
100487ae:	0003      	movs	r3, r0
100487b0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
100487b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100487b4:	2b0f      	cmp	r3, #15
100487b6:	d921      	bls.n	100487fc <UART_SetConfig+0x21c>
100487b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100487ba:	2380      	movs	r3, #128	@ 0x80
100487bc:	025b      	lsls	r3, r3, #9
100487be:	429a      	cmp	r2, r3
100487c0:	d21c      	bcs.n	100487fc <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
100487c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100487c4:	b29a      	uxth	r2, r3
100487c6:	200e      	movs	r0, #14
100487c8:	2420      	movs	r4, #32
100487ca:	1903      	adds	r3, r0, r4
100487cc:	19db      	adds	r3, r3, r7
100487ce:	210f      	movs	r1, #15
100487d0:	438a      	bics	r2, r1
100487d2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
100487d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100487d6:	085b      	lsrs	r3, r3, #1
100487d8:	b29b      	uxth	r3, r3
100487da:	2207      	movs	r2, #7
100487dc:	4013      	ands	r3, r2
100487de:	b299      	uxth	r1, r3
100487e0:	1903      	adds	r3, r0, r4
100487e2:	19db      	adds	r3, r3, r7
100487e4:	1902      	adds	r2, r0, r4
100487e6:	19d2      	adds	r2, r2, r7
100487e8:	8812      	ldrh	r2, [r2, #0]
100487ea:	430a      	orrs	r2, r1
100487ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
100487ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100487f0:	681b      	ldr	r3, [r3, #0]
100487f2:	1902      	adds	r2, r0, r4
100487f4:	19d2      	adds	r2, r2, r7
100487f6:	8812      	ldrh	r2, [r2, #0]
100487f8:	60da      	str	r2, [r3, #12]
100487fa:	e036      	b.n	1004886a <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
100487fc:	231b      	movs	r3, #27
100487fe:	2220      	movs	r2, #32
10048800:	189b      	adds	r3, r3, r2
10048802:	19db      	adds	r3, r3, r7
10048804:	2201      	movs	r2, #1
10048806:	701a      	strb	r2, [r3, #0]
10048808:	e02f      	b.n	1004886a <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
1004880a:	4b28      	ldr	r3, [pc, #160]	@ (100488ac <UART_SetConfig+0x2cc>)
1004880c:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
1004880e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048810:	2b00      	cmp	r3, #0
10048812:	d02a      	beq.n	1004886a <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10048814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048818:	4b23      	ldr	r3, [pc, #140]	@ (100488a8 <UART_SetConfig+0x2c8>)
1004881a:	0052      	lsls	r2, r2, #1
1004881c:	5ad3      	ldrh	r3, [r2, r3]
1004881e:	0019      	movs	r1, r3
10048820:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10048822:	f7f7 fd05 	bl	10040230 <__udivsi3>
10048826:	0003      	movs	r3, r0
10048828:	001a      	movs	r2, r3
1004882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004882c:	685b      	ldr	r3, [r3, #4]
1004882e:	085b      	lsrs	r3, r3, #1
10048830:	18d2      	adds	r2, r2, r3
10048832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048834:	685b      	ldr	r3, [r3, #4]
10048836:	0019      	movs	r1, r3
10048838:	0010      	movs	r0, r2
1004883a:	f7f7 fcf9 	bl	10040230 <__udivsi3>
1004883e:	0003      	movs	r3, r0
10048840:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10048842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048844:	2b0f      	cmp	r3, #15
10048846:	d90a      	bls.n	1004885e <UART_SetConfig+0x27e>
10048848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004884a:	2380      	movs	r3, #128	@ 0x80
1004884c:	025b      	lsls	r3, r3, #9
1004884e:	429a      	cmp	r2, r3
10048850:	d205      	bcs.n	1004885e <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10048852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048854:	b29a      	uxth	r2, r3
10048856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048858:	681b      	ldr	r3, [r3, #0]
1004885a:	60da      	str	r2, [r3, #12]
1004885c:	e005      	b.n	1004886a <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004885e:	231b      	movs	r3, #27
10048860:	2220      	movs	r2, #32
10048862:	189b      	adds	r3, r3, r2
10048864:	19db      	adds	r3, r3, r7
10048866:	2201      	movs	r2, #1
10048868:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1004886a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004886c:	226a      	movs	r2, #106	@ 0x6a
1004886e:	2101      	movs	r1, #1
10048870:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10048872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048874:	2268      	movs	r2, #104	@ 0x68
10048876:	2101      	movs	r1, #1
10048878:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1004887a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004887c:	2200      	movs	r2, #0
1004887e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10048880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048882:	2200      	movs	r2, #0
10048884:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10048886:	231b      	movs	r3, #27
10048888:	2220      	movs	r2, #32
1004888a:	189b      	adds	r3, r3, r2
1004888c:	19db      	adds	r3, r3, r7
1004888e:	781b      	ldrb	r3, [r3, #0]
}
10048890:	0018      	movs	r0, r3
10048892:	46bd      	mov	sp, r7
10048894:	b010      	add	sp, #64	@ 0x40
10048896:	bdb0      	pop	{r4, r5, r7, pc}
10048898:	cfff69f3 	.word	0xcfff69f3
1004889c:	ffffcfff 	.word	0xffffcfff
100488a0:	41005000 	.word	0x41005000
100488a4:	11fff4ff 	.word	0x11fff4ff
100488a8:	1004e774 	.word	0x1004e774
100488ac:	00f42400 	.word	0x00f42400

100488b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
100488b0:	b580      	push	{r7, lr}
100488b2:	b082      	sub	sp, #8
100488b4:	af00      	add	r7, sp, #0
100488b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
100488b8:	687b      	ldr	r3, [r7, #4]
100488ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100488bc:	2208      	movs	r2, #8
100488be:	4013      	ands	r3, r2
100488c0:	d00b      	beq.n	100488da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
100488c2:	687b      	ldr	r3, [r7, #4]
100488c4:	681b      	ldr	r3, [r3, #0]
100488c6:	685b      	ldr	r3, [r3, #4]
100488c8:	4a4a      	ldr	r2, [pc, #296]	@ (100489f4 <UART_AdvFeatureConfig+0x144>)
100488ca:	4013      	ands	r3, r2
100488cc:	0019      	movs	r1, r3
100488ce:	687b      	ldr	r3, [r7, #4]
100488d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
100488d2:	687b      	ldr	r3, [r7, #4]
100488d4:	681b      	ldr	r3, [r3, #0]
100488d6:	430a      	orrs	r2, r1
100488d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
100488da:	687b      	ldr	r3, [r7, #4]
100488dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100488de:	2201      	movs	r2, #1
100488e0:	4013      	ands	r3, r2
100488e2:	d00b      	beq.n	100488fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
100488e4:	687b      	ldr	r3, [r7, #4]
100488e6:	681b      	ldr	r3, [r3, #0]
100488e8:	685b      	ldr	r3, [r3, #4]
100488ea:	4a43      	ldr	r2, [pc, #268]	@ (100489f8 <UART_AdvFeatureConfig+0x148>)
100488ec:	4013      	ands	r3, r2
100488ee:	0019      	movs	r1, r3
100488f0:	687b      	ldr	r3, [r7, #4]
100488f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100488f4:	687b      	ldr	r3, [r7, #4]
100488f6:	681b      	ldr	r3, [r3, #0]
100488f8:	430a      	orrs	r2, r1
100488fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
100488fc:	687b      	ldr	r3, [r7, #4]
100488fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048900:	2202      	movs	r2, #2
10048902:	4013      	ands	r3, r2
10048904:	d00b      	beq.n	1004891e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10048906:	687b      	ldr	r3, [r7, #4]
10048908:	681b      	ldr	r3, [r3, #0]
1004890a:	685b      	ldr	r3, [r3, #4]
1004890c:	4a3b      	ldr	r2, [pc, #236]	@ (100489fc <UART_AdvFeatureConfig+0x14c>)
1004890e:	4013      	ands	r3, r2
10048910:	0019      	movs	r1, r3
10048912:	687b      	ldr	r3, [r7, #4]
10048914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10048916:	687b      	ldr	r3, [r7, #4]
10048918:	681b      	ldr	r3, [r3, #0]
1004891a:	430a      	orrs	r2, r1
1004891c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1004891e:	687b      	ldr	r3, [r7, #4]
10048920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048922:	2204      	movs	r2, #4
10048924:	4013      	ands	r3, r2
10048926:	d00b      	beq.n	10048940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10048928:	687b      	ldr	r3, [r7, #4]
1004892a:	681b      	ldr	r3, [r3, #0]
1004892c:	685b      	ldr	r3, [r3, #4]
1004892e:	4a34      	ldr	r2, [pc, #208]	@ (10048a00 <UART_AdvFeatureConfig+0x150>)
10048930:	4013      	ands	r3, r2
10048932:	0019      	movs	r1, r3
10048934:	687b      	ldr	r3, [r7, #4]
10048936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10048938:	687b      	ldr	r3, [r7, #4]
1004893a:	681b      	ldr	r3, [r3, #0]
1004893c:	430a      	orrs	r2, r1
1004893e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10048940:	687b      	ldr	r3, [r7, #4]
10048942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048944:	2210      	movs	r2, #16
10048946:	4013      	ands	r3, r2
10048948:	d00b      	beq.n	10048962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1004894a:	687b      	ldr	r3, [r7, #4]
1004894c:	681b      	ldr	r3, [r3, #0]
1004894e:	689b      	ldr	r3, [r3, #8]
10048950:	4a2c      	ldr	r2, [pc, #176]	@ (10048a04 <UART_AdvFeatureConfig+0x154>)
10048952:	4013      	ands	r3, r2
10048954:	0019      	movs	r1, r3
10048956:	687b      	ldr	r3, [r7, #4]
10048958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
1004895a:	687b      	ldr	r3, [r7, #4]
1004895c:	681b      	ldr	r3, [r3, #0]
1004895e:	430a      	orrs	r2, r1
10048960:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10048962:	687b      	ldr	r3, [r7, #4]
10048964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048966:	2220      	movs	r2, #32
10048968:	4013      	ands	r3, r2
1004896a:	d00b      	beq.n	10048984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1004896c:	687b      	ldr	r3, [r7, #4]
1004896e:	681b      	ldr	r3, [r3, #0]
10048970:	689b      	ldr	r3, [r3, #8]
10048972:	4a25      	ldr	r2, [pc, #148]	@ (10048a08 <UART_AdvFeatureConfig+0x158>)
10048974:	4013      	ands	r3, r2
10048976:	0019      	movs	r1, r3
10048978:	687b      	ldr	r3, [r7, #4]
1004897a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004897c:	687b      	ldr	r3, [r7, #4]
1004897e:	681b      	ldr	r3, [r3, #0]
10048980:	430a      	orrs	r2, r1
10048982:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10048984:	687b      	ldr	r3, [r7, #4]
10048986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10048988:	2240      	movs	r2, #64	@ 0x40
1004898a:	4013      	ands	r3, r2
1004898c:	d01d      	beq.n	100489ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1004898e:	687b      	ldr	r3, [r7, #4]
10048990:	681b      	ldr	r3, [r3, #0]
10048992:	685b      	ldr	r3, [r3, #4]
10048994:	4a1d      	ldr	r2, [pc, #116]	@ (10048a0c <UART_AdvFeatureConfig+0x15c>)
10048996:	4013      	ands	r3, r2
10048998:	0019      	movs	r1, r3
1004899a:	687b      	ldr	r3, [r7, #4]
1004899c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004899e:	687b      	ldr	r3, [r7, #4]
100489a0:	681b      	ldr	r3, [r3, #0]
100489a2:	430a      	orrs	r2, r1
100489a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
100489a6:	687b      	ldr	r3, [r7, #4]
100489a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100489aa:	2380      	movs	r3, #128	@ 0x80
100489ac:	035b      	lsls	r3, r3, #13
100489ae:	429a      	cmp	r2, r3
100489b0:	d10b      	bne.n	100489ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
100489b2:	687b      	ldr	r3, [r7, #4]
100489b4:	681b      	ldr	r3, [r3, #0]
100489b6:	685b      	ldr	r3, [r3, #4]
100489b8:	4a15      	ldr	r2, [pc, #84]	@ (10048a10 <UART_AdvFeatureConfig+0x160>)
100489ba:	4013      	ands	r3, r2
100489bc:	0019      	movs	r1, r3
100489be:	687b      	ldr	r3, [r7, #4]
100489c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
100489c2:	687b      	ldr	r3, [r7, #4]
100489c4:	681b      	ldr	r3, [r3, #0]
100489c6:	430a      	orrs	r2, r1
100489c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
100489ca:	687b      	ldr	r3, [r7, #4]
100489cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100489ce:	2280      	movs	r2, #128	@ 0x80
100489d0:	4013      	ands	r3, r2
100489d2:	d00b      	beq.n	100489ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
100489d4:	687b      	ldr	r3, [r7, #4]
100489d6:	681b      	ldr	r3, [r3, #0]
100489d8:	685b      	ldr	r3, [r3, #4]
100489da:	4a0e      	ldr	r2, [pc, #56]	@ (10048a14 <UART_AdvFeatureConfig+0x164>)
100489dc:	4013      	ands	r3, r2
100489de:	0019      	movs	r1, r3
100489e0:	687b      	ldr	r3, [r7, #4]
100489e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
100489e4:	687b      	ldr	r3, [r7, #4]
100489e6:	681b      	ldr	r3, [r3, #0]
100489e8:	430a      	orrs	r2, r1
100489ea:	605a      	str	r2, [r3, #4]
  }
}
100489ec:	46c0      	nop			@ (mov r8, r8)
100489ee:	46bd      	mov	sp, r7
100489f0:	b002      	add	sp, #8
100489f2:	bd80      	pop	{r7, pc}
100489f4:	ffff7fff 	.word	0xffff7fff
100489f8:	fffdffff 	.word	0xfffdffff
100489fc:	fffeffff 	.word	0xfffeffff
10048a00:	fffbffff 	.word	0xfffbffff
10048a04:	ffffefff 	.word	0xffffefff
10048a08:	ffffdfff 	.word	0xffffdfff
10048a0c:	ffefffff 	.word	0xffefffff
10048a10:	ff9fffff 	.word	0xff9fffff
10048a14:	fff7ffff 	.word	0xfff7ffff

10048a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10048a18:	b580      	push	{r7, lr}
10048a1a:	b092      	sub	sp, #72	@ 0x48
10048a1c:	af02      	add	r7, sp, #8
10048a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10048a20:	687b      	ldr	r3, [r7, #4]
10048a22:	2290      	movs	r2, #144	@ 0x90
10048a24:	2100      	movs	r1, #0
10048a26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10048a28:	f7fc f94c 	bl	10044cc4 <HAL_GetTick>
10048a2c:	0003      	movs	r3, r0
10048a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10048a30:	687b      	ldr	r3, [r7, #4]
10048a32:	681b      	ldr	r3, [r3, #0]
10048a34:	681b      	ldr	r3, [r3, #0]
10048a36:	2208      	movs	r2, #8
10048a38:	4013      	ands	r3, r2
10048a3a:	2b08      	cmp	r3, #8
10048a3c:	d12d      	bne.n	10048a9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048a40:	2280      	movs	r2, #128	@ 0x80
10048a42:	0391      	lsls	r1, r2, #14
10048a44:	6878      	ldr	r0, [r7, #4]
10048a46:	4a47      	ldr	r2, [pc, #284]	@ (10048b64 <UART_CheckIdleState+0x14c>)
10048a48:	9200      	str	r2, [sp, #0]
10048a4a:	2200      	movs	r2, #0
10048a4c:	f000 f88e 	bl	10048b6c <UART_WaitOnFlagUntilTimeout>
10048a50:	1e03      	subs	r3, r0, #0
10048a52:	d022      	beq.n	10048a9a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048a54:	f3ef 8310 	mrs	r3, PRIMASK
10048a58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10048a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10048a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
10048a5e:	2301      	movs	r3, #1
10048a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10048a64:	f383 8810 	msr	PRIMASK, r3
}
10048a68:	46c0      	nop			@ (mov r8, r8)
10048a6a:	687b      	ldr	r3, [r7, #4]
10048a6c:	681b      	ldr	r3, [r3, #0]
10048a6e:	681a      	ldr	r2, [r3, #0]
10048a70:	687b      	ldr	r3, [r7, #4]
10048a72:	681b      	ldr	r3, [r3, #0]
10048a74:	2180      	movs	r1, #128	@ 0x80
10048a76:	438a      	bics	r2, r1
10048a78:	601a      	str	r2, [r3, #0]
10048a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10048a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10048a80:	f383 8810 	msr	PRIMASK, r3
}
10048a84:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10048a86:	687b      	ldr	r3, [r7, #4]
10048a88:	2288      	movs	r2, #136	@ 0x88
10048a8a:	2120      	movs	r1, #32
10048a8c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10048a8e:	687b      	ldr	r3, [r7, #4]
10048a90:	2284      	movs	r2, #132	@ 0x84
10048a92:	2100      	movs	r1, #0
10048a94:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10048a96:	2303      	movs	r3, #3
10048a98:	e060      	b.n	10048b5c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10048a9a:	687b      	ldr	r3, [r7, #4]
10048a9c:	681b      	ldr	r3, [r3, #0]
10048a9e:	681b      	ldr	r3, [r3, #0]
10048aa0:	2204      	movs	r2, #4
10048aa2:	4013      	ands	r3, r2
10048aa4:	2b04      	cmp	r3, #4
10048aa6:	d146      	bne.n	10048b36 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10048aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048aaa:	2280      	movs	r2, #128	@ 0x80
10048aac:	03d1      	lsls	r1, r2, #15
10048aae:	6878      	ldr	r0, [r7, #4]
10048ab0:	4a2c      	ldr	r2, [pc, #176]	@ (10048b64 <UART_CheckIdleState+0x14c>)
10048ab2:	9200      	str	r2, [sp, #0]
10048ab4:	2200      	movs	r2, #0
10048ab6:	f000 f859 	bl	10048b6c <UART_WaitOnFlagUntilTimeout>
10048aba:	1e03      	subs	r3, r0, #0
10048abc:	d03b      	beq.n	10048b36 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048abe:	f3ef 8310 	mrs	r3, PRIMASK
10048ac2:	60fb      	str	r3, [r7, #12]
  return(result);
10048ac4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10048ac6:	637b      	str	r3, [r7, #52]	@ 0x34
10048ac8:	2301      	movs	r3, #1
10048aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048acc:	693b      	ldr	r3, [r7, #16]
10048ace:	f383 8810 	msr	PRIMASK, r3
}
10048ad2:	46c0      	nop			@ (mov r8, r8)
10048ad4:	687b      	ldr	r3, [r7, #4]
10048ad6:	681b      	ldr	r3, [r3, #0]
10048ad8:	681a      	ldr	r2, [r3, #0]
10048ada:	687b      	ldr	r3, [r7, #4]
10048adc:	681b      	ldr	r3, [r3, #0]
10048ade:	4922      	ldr	r1, [pc, #136]	@ (10048b68 <UART_CheckIdleState+0x150>)
10048ae0:	400a      	ands	r2, r1
10048ae2:	601a      	str	r2, [r3, #0]
10048ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048ae8:	697b      	ldr	r3, [r7, #20]
10048aea:	f383 8810 	msr	PRIMASK, r3
}
10048aee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048af0:	f3ef 8310 	mrs	r3, PRIMASK
10048af4:	61bb      	str	r3, [r7, #24]
  return(result);
10048af6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10048af8:	633b      	str	r3, [r7, #48]	@ 0x30
10048afa:	2301      	movs	r3, #1
10048afc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048afe:	69fb      	ldr	r3, [r7, #28]
10048b00:	f383 8810 	msr	PRIMASK, r3
}
10048b04:	46c0      	nop			@ (mov r8, r8)
10048b06:	687b      	ldr	r3, [r7, #4]
10048b08:	681b      	ldr	r3, [r3, #0]
10048b0a:	689a      	ldr	r2, [r3, #8]
10048b0c:	687b      	ldr	r3, [r7, #4]
10048b0e:	681b      	ldr	r3, [r3, #0]
10048b10:	2101      	movs	r1, #1
10048b12:	438a      	bics	r2, r1
10048b14:	609a      	str	r2, [r3, #8]
10048b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048b18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048b1a:	6a3b      	ldr	r3, [r7, #32]
10048b1c:	f383 8810 	msr	PRIMASK, r3
}
10048b20:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
10048b22:	687b      	ldr	r3, [r7, #4]
10048b24:	228c      	movs	r2, #140	@ 0x8c
10048b26:	2120      	movs	r1, #32
10048b28:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10048b2a:	687b      	ldr	r3, [r7, #4]
10048b2c:	2284      	movs	r2, #132	@ 0x84
10048b2e:	2100      	movs	r1, #0
10048b30:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10048b32:	2303      	movs	r3, #3
10048b34:	e012      	b.n	10048b5c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10048b36:	687b      	ldr	r3, [r7, #4]
10048b38:	2288      	movs	r2, #136	@ 0x88
10048b3a:	2120      	movs	r1, #32
10048b3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
10048b3e:	687b      	ldr	r3, [r7, #4]
10048b40:	228c      	movs	r2, #140	@ 0x8c
10048b42:	2120      	movs	r1, #32
10048b44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10048b46:	687b      	ldr	r3, [r7, #4]
10048b48:	2200      	movs	r2, #0
10048b4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10048b4c:	687b      	ldr	r3, [r7, #4]
10048b4e:	2200      	movs	r2, #0
10048b50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
10048b52:	687b      	ldr	r3, [r7, #4]
10048b54:	2284      	movs	r2, #132	@ 0x84
10048b56:	2100      	movs	r1, #0
10048b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048b5a:	2300      	movs	r3, #0
}
10048b5c:	0018      	movs	r0, r3
10048b5e:	46bd      	mov	sp, r7
10048b60:	b010      	add	sp, #64	@ 0x40
10048b62:	bd80      	pop	{r7, pc}
10048b64:	01ffffff 	.word	0x01ffffff
10048b68:	fffffedf 	.word	0xfffffedf

10048b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10048b6c:	b580      	push	{r7, lr}
10048b6e:	b084      	sub	sp, #16
10048b70:	af00      	add	r7, sp, #0
10048b72:	60f8      	str	r0, [r7, #12]
10048b74:	60b9      	str	r1, [r7, #8]
10048b76:	603b      	str	r3, [r7, #0]
10048b78:	1dfb      	adds	r3, r7, #7
10048b7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10048b7c:	e051      	b.n	10048c22 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10048b7e:	69bb      	ldr	r3, [r7, #24]
10048b80:	3301      	adds	r3, #1
10048b82:	d04e      	beq.n	10048c22 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10048b84:	f7fc f89e 	bl	10044cc4 <HAL_GetTick>
10048b88:	0002      	movs	r2, r0
10048b8a:	683b      	ldr	r3, [r7, #0]
10048b8c:	1ad3      	subs	r3, r2, r3
10048b8e:	69ba      	ldr	r2, [r7, #24]
10048b90:	429a      	cmp	r2, r3
10048b92:	d302      	bcc.n	10048b9a <UART_WaitOnFlagUntilTimeout+0x2e>
10048b94:	69bb      	ldr	r3, [r7, #24]
10048b96:	2b00      	cmp	r3, #0
10048b98:	d101      	bne.n	10048b9e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
10048b9a:	2303      	movs	r3, #3
10048b9c:	e051      	b.n	10048c42 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
10048b9e:	68fb      	ldr	r3, [r7, #12]
10048ba0:	681b      	ldr	r3, [r3, #0]
10048ba2:	681b      	ldr	r3, [r3, #0]
10048ba4:	2204      	movs	r2, #4
10048ba6:	4013      	ands	r3, r2
10048ba8:	d03b      	beq.n	10048c22 <UART_WaitOnFlagUntilTimeout+0xb6>
10048baa:	68bb      	ldr	r3, [r7, #8]
10048bac:	2b80      	cmp	r3, #128	@ 0x80
10048bae:	d038      	beq.n	10048c22 <UART_WaitOnFlagUntilTimeout+0xb6>
10048bb0:	68bb      	ldr	r3, [r7, #8]
10048bb2:	2b40      	cmp	r3, #64	@ 0x40
10048bb4:	d035      	beq.n	10048c22 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
10048bb6:	68fb      	ldr	r3, [r7, #12]
10048bb8:	681b      	ldr	r3, [r3, #0]
10048bba:	69db      	ldr	r3, [r3, #28]
10048bbc:	2208      	movs	r2, #8
10048bbe:	4013      	ands	r3, r2
10048bc0:	2b08      	cmp	r3, #8
10048bc2:	d111      	bne.n	10048be8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
10048bc4:	68fb      	ldr	r3, [r7, #12]
10048bc6:	681b      	ldr	r3, [r3, #0]
10048bc8:	2208      	movs	r2, #8
10048bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10048bcc:	68fb      	ldr	r3, [r7, #12]
10048bce:	0018      	movs	r0, r3
10048bd0:	f000 f83c 	bl	10048c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
10048bd4:	68fb      	ldr	r3, [r7, #12]
10048bd6:	2290      	movs	r2, #144	@ 0x90
10048bd8:	2108      	movs	r1, #8
10048bda:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10048bdc:	68fb      	ldr	r3, [r7, #12]
10048bde:	2284      	movs	r2, #132	@ 0x84
10048be0:	2100      	movs	r1, #0
10048be2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
10048be4:	2301      	movs	r3, #1
10048be6:	e02c      	b.n	10048c42 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10048be8:	68fb      	ldr	r3, [r7, #12]
10048bea:	681b      	ldr	r3, [r3, #0]
10048bec:	69da      	ldr	r2, [r3, #28]
10048bee:	2380      	movs	r3, #128	@ 0x80
10048bf0:	011b      	lsls	r3, r3, #4
10048bf2:	401a      	ands	r2, r3
10048bf4:	2380      	movs	r3, #128	@ 0x80
10048bf6:	011b      	lsls	r3, r3, #4
10048bf8:	429a      	cmp	r2, r3
10048bfa:	d112      	bne.n	10048c22 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10048bfc:	68fb      	ldr	r3, [r7, #12]
10048bfe:	681b      	ldr	r3, [r3, #0]
10048c00:	2280      	movs	r2, #128	@ 0x80
10048c02:	0112      	lsls	r2, r2, #4
10048c04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
10048c06:	68fb      	ldr	r3, [r7, #12]
10048c08:	0018      	movs	r0, r3
10048c0a:	f000 f81f 	bl	10048c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
10048c0e:	68fb      	ldr	r3, [r7, #12]
10048c10:	2290      	movs	r2, #144	@ 0x90
10048c12:	2120      	movs	r1, #32
10048c14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10048c16:	68fb      	ldr	r3, [r7, #12]
10048c18:	2284      	movs	r2, #132	@ 0x84
10048c1a:	2100      	movs	r1, #0
10048c1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
10048c1e:	2303      	movs	r3, #3
10048c20:	e00f      	b.n	10048c42 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10048c22:	68fb      	ldr	r3, [r7, #12]
10048c24:	681b      	ldr	r3, [r3, #0]
10048c26:	69db      	ldr	r3, [r3, #28]
10048c28:	68ba      	ldr	r2, [r7, #8]
10048c2a:	4013      	ands	r3, r2
10048c2c:	68ba      	ldr	r2, [r7, #8]
10048c2e:	1ad3      	subs	r3, r2, r3
10048c30:	425a      	negs	r2, r3
10048c32:	4153      	adcs	r3, r2
10048c34:	b2db      	uxtb	r3, r3
10048c36:	001a      	movs	r2, r3
10048c38:	1dfb      	adds	r3, r7, #7
10048c3a:	781b      	ldrb	r3, [r3, #0]
10048c3c:	429a      	cmp	r2, r3
10048c3e:	d09e      	beq.n	10048b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10048c40:	2300      	movs	r3, #0
}
10048c42:	0018      	movs	r0, r3
10048c44:	46bd      	mov	sp, r7
10048c46:	b004      	add	sp, #16
10048c48:	bd80      	pop	{r7, pc}
	...

10048c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
10048c4c:	b580      	push	{r7, lr}
10048c4e:	b08e      	sub	sp, #56	@ 0x38
10048c50:	af00      	add	r7, sp, #0
10048c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048c54:	f3ef 8310 	mrs	r3, PRIMASK
10048c58:	617b      	str	r3, [r7, #20]
  return(result);
10048c5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10048c5c:	637b      	str	r3, [r7, #52]	@ 0x34
10048c5e:	2301      	movs	r3, #1
10048c60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048c62:	69bb      	ldr	r3, [r7, #24]
10048c64:	f383 8810 	msr	PRIMASK, r3
}
10048c68:	46c0      	nop			@ (mov r8, r8)
10048c6a:	687b      	ldr	r3, [r7, #4]
10048c6c:	681b      	ldr	r3, [r3, #0]
10048c6e:	681a      	ldr	r2, [r3, #0]
10048c70:	687b      	ldr	r3, [r7, #4]
10048c72:	681b      	ldr	r3, [r3, #0]
10048c74:	4926      	ldr	r1, [pc, #152]	@ (10048d10 <UART_EndRxTransfer+0xc4>)
10048c76:	400a      	ands	r2, r1
10048c78:	601a      	str	r2, [r3, #0]
10048c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10048c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048c7e:	69fb      	ldr	r3, [r7, #28]
10048c80:	f383 8810 	msr	PRIMASK, r3
}
10048c84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048c86:	f3ef 8310 	mrs	r3, PRIMASK
10048c8a:	623b      	str	r3, [r7, #32]
  return(result);
10048c8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
10048c8e:	633b      	str	r3, [r7, #48]	@ 0x30
10048c90:	2301      	movs	r3, #1
10048c92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c96:	f383 8810 	msr	PRIMASK, r3
}
10048c9a:	46c0      	nop			@ (mov r8, r8)
10048c9c:	687b      	ldr	r3, [r7, #4]
10048c9e:	681b      	ldr	r3, [r3, #0]
10048ca0:	689a      	ldr	r2, [r3, #8]
10048ca2:	687b      	ldr	r3, [r7, #4]
10048ca4:	681b      	ldr	r3, [r3, #0]
10048ca6:	491b      	ldr	r1, [pc, #108]	@ (10048d14 <UART_EndRxTransfer+0xc8>)
10048ca8:	400a      	ands	r2, r1
10048caa:	609a      	str	r2, [r3, #8]
10048cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10048cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10048cb2:	f383 8810 	msr	PRIMASK, r3
}
10048cb6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
10048cb8:	687b      	ldr	r3, [r7, #4]
10048cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
10048cbc:	2b01      	cmp	r3, #1
10048cbe:	d118      	bne.n	10048cf2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048cc0:	f3ef 8310 	mrs	r3, PRIMASK
10048cc4:	60bb      	str	r3, [r7, #8]
  return(result);
10048cc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
10048cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
10048cca:	2301      	movs	r3, #1
10048ccc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048cce:	68fb      	ldr	r3, [r7, #12]
10048cd0:	f383 8810 	msr	PRIMASK, r3
}
10048cd4:	46c0      	nop			@ (mov r8, r8)
10048cd6:	687b      	ldr	r3, [r7, #4]
10048cd8:	681b      	ldr	r3, [r3, #0]
10048cda:	681a      	ldr	r2, [r3, #0]
10048cdc:	687b      	ldr	r3, [r7, #4]
10048cde:	681b      	ldr	r3, [r3, #0]
10048ce0:	2110      	movs	r1, #16
10048ce2:	438a      	bics	r2, r1
10048ce4:	601a      	str	r2, [r3, #0]
10048ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10048ce8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048cea:	693b      	ldr	r3, [r7, #16]
10048cec:	f383 8810 	msr	PRIMASK, r3
}
10048cf0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
10048cf2:	687b      	ldr	r3, [r7, #4]
10048cf4:	228c      	movs	r2, #140	@ 0x8c
10048cf6:	2120      	movs	r1, #32
10048cf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10048cfa:	687b      	ldr	r3, [r7, #4]
10048cfc:	2200      	movs	r2, #0
10048cfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
10048d00:	687b      	ldr	r3, [r7, #4]
10048d02:	2200      	movs	r2, #0
10048d04:	675a      	str	r2, [r3, #116]	@ 0x74
}
10048d06:	46c0      	nop			@ (mov r8, r8)
10048d08:	46bd      	mov	sp, r7
10048d0a:	b00e      	add	sp, #56	@ 0x38
10048d0c:	bd80      	pop	{r7, pc}
10048d0e:	46c0      	nop			@ (mov r8, r8)
10048d10:	fffffedf 	.word	0xfffffedf
10048d14:	effffffe 	.word	0xeffffffe

10048d18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
10048d18:	b580      	push	{r7, lr}
10048d1a:	b084      	sub	sp, #16
10048d1c:	af00      	add	r7, sp, #0
10048d1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
10048d20:	687b      	ldr	r3, [r7, #4]
10048d22:	2284      	movs	r2, #132	@ 0x84
10048d24:	5c9b      	ldrb	r3, [r3, r2]
10048d26:	2b01      	cmp	r3, #1
10048d28:	d101      	bne.n	10048d2e <HAL_UARTEx_DisableFifoMode+0x16>
10048d2a:	2302      	movs	r3, #2
10048d2c:	e027      	b.n	10048d7e <HAL_UARTEx_DisableFifoMode+0x66>
10048d2e:	687b      	ldr	r3, [r7, #4]
10048d30:	2284      	movs	r2, #132	@ 0x84
10048d32:	2101      	movs	r1, #1
10048d34:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10048d36:	687b      	ldr	r3, [r7, #4]
10048d38:	2288      	movs	r2, #136	@ 0x88
10048d3a:	2124      	movs	r1, #36	@ 0x24
10048d3c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10048d3e:	687b      	ldr	r3, [r7, #4]
10048d40:	681b      	ldr	r3, [r3, #0]
10048d42:	681b      	ldr	r3, [r3, #0]
10048d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10048d46:	687b      	ldr	r3, [r7, #4]
10048d48:	681b      	ldr	r3, [r3, #0]
10048d4a:	681a      	ldr	r2, [r3, #0]
10048d4c:	687b      	ldr	r3, [r7, #4]
10048d4e:	681b      	ldr	r3, [r3, #0]
10048d50:	2101      	movs	r1, #1
10048d52:	438a      	bics	r2, r1
10048d54:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
10048d56:	68fb      	ldr	r3, [r7, #12]
10048d58:	4a0b      	ldr	r2, [pc, #44]	@ (10048d88 <HAL_UARTEx_DisableFifoMode+0x70>)
10048d5a:	4013      	ands	r3, r2
10048d5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
10048d5e:	687b      	ldr	r3, [r7, #4]
10048d60:	2200      	movs	r2, #0
10048d62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10048d64:	687b      	ldr	r3, [r7, #4]
10048d66:	681b      	ldr	r3, [r3, #0]
10048d68:	68fa      	ldr	r2, [r7, #12]
10048d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10048d6c:	687b      	ldr	r3, [r7, #4]
10048d6e:	2288      	movs	r2, #136	@ 0x88
10048d70:	2120      	movs	r1, #32
10048d72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10048d74:	687b      	ldr	r3, [r7, #4]
10048d76:	2284      	movs	r2, #132	@ 0x84
10048d78:	2100      	movs	r1, #0
10048d7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048d7c:	2300      	movs	r3, #0
}
10048d7e:	0018      	movs	r0, r3
10048d80:	46bd      	mov	sp, r7
10048d82:	b004      	add	sp, #16
10048d84:	bd80      	pop	{r7, pc}
10048d86:	46c0      	nop			@ (mov r8, r8)
10048d88:	dfffffff 	.word	0xdfffffff

10048d8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10048d8c:	b580      	push	{r7, lr}
10048d8e:	b084      	sub	sp, #16
10048d90:	af00      	add	r7, sp, #0
10048d92:	6078      	str	r0, [r7, #4]
10048d94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10048d96:	687b      	ldr	r3, [r7, #4]
10048d98:	2284      	movs	r2, #132	@ 0x84
10048d9a:	5c9b      	ldrb	r3, [r3, r2]
10048d9c:	2b01      	cmp	r3, #1
10048d9e:	d101      	bne.n	10048da4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
10048da0:	2302      	movs	r3, #2
10048da2:	e02e      	b.n	10048e02 <HAL_UARTEx_SetTxFifoThreshold+0x76>
10048da4:	687b      	ldr	r3, [r7, #4]
10048da6:	2284      	movs	r2, #132	@ 0x84
10048da8:	2101      	movs	r1, #1
10048daa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10048dac:	687b      	ldr	r3, [r7, #4]
10048dae:	2288      	movs	r2, #136	@ 0x88
10048db0:	2124      	movs	r1, #36	@ 0x24
10048db2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10048db4:	687b      	ldr	r3, [r7, #4]
10048db6:	681b      	ldr	r3, [r3, #0]
10048db8:	681b      	ldr	r3, [r3, #0]
10048dba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10048dbc:	687b      	ldr	r3, [r7, #4]
10048dbe:	681b      	ldr	r3, [r3, #0]
10048dc0:	681a      	ldr	r2, [r3, #0]
10048dc2:	687b      	ldr	r3, [r7, #4]
10048dc4:	681b      	ldr	r3, [r3, #0]
10048dc6:	2101      	movs	r1, #1
10048dc8:	438a      	bics	r2, r1
10048dca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10048dcc:	687b      	ldr	r3, [r7, #4]
10048dce:	681b      	ldr	r3, [r3, #0]
10048dd0:	689b      	ldr	r3, [r3, #8]
10048dd2:	00db      	lsls	r3, r3, #3
10048dd4:	08d9      	lsrs	r1, r3, #3
10048dd6:	687b      	ldr	r3, [r7, #4]
10048dd8:	681b      	ldr	r3, [r3, #0]
10048dda:	683a      	ldr	r2, [r7, #0]
10048ddc:	430a      	orrs	r2, r1
10048dde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10048de0:	687b      	ldr	r3, [r7, #4]
10048de2:	0018      	movs	r0, r3
10048de4:	f000 f854 	bl	10048e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10048de8:	687b      	ldr	r3, [r7, #4]
10048dea:	681b      	ldr	r3, [r3, #0]
10048dec:	68fa      	ldr	r2, [r7, #12]
10048dee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10048df0:	687b      	ldr	r3, [r7, #4]
10048df2:	2288      	movs	r2, #136	@ 0x88
10048df4:	2120      	movs	r1, #32
10048df6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10048df8:	687b      	ldr	r3, [r7, #4]
10048dfa:	2284      	movs	r2, #132	@ 0x84
10048dfc:	2100      	movs	r1, #0
10048dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048e00:	2300      	movs	r3, #0
}
10048e02:	0018      	movs	r0, r3
10048e04:	46bd      	mov	sp, r7
10048e06:	b004      	add	sp, #16
10048e08:	bd80      	pop	{r7, pc}
	...

10048e0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10048e0c:	b580      	push	{r7, lr}
10048e0e:	b084      	sub	sp, #16
10048e10:	af00      	add	r7, sp, #0
10048e12:	6078      	str	r0, [r7, #4]
10048e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10048e16:	687b      	ldr	r3, [r7, #4]
10048e18:	2284      	movs	r2, #132	@ 0x84
10048e1a:	5c9b      	ldrb	r3, [r3, r2]
10048e1c:	2b01      	cmp	r3, #1
10048e1e:	d101      	bne.n	10048e24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
10048e20:	2302      	movs	r3, #2
10048e22:	e02f      	b.n	10048e84 <HAL_UARTEx_SetRxFifoThreshold+0x78>
10048e24:	687b      	ldr	r3, [r7, #4]
10048e26:	2284      	movs	r2, #132	@ 0x84
10048e28:	2101      	movs	r1, #1
10048e2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
10048e2c:	687b      	ldr	r3, [r7, #4]
10048e2e:	2288      	movs	r2, #136	@ 0x88
10048e30:	2124      	movs	r1, #36	@ 0x24
10048e32:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10048e34:	687b      	ldr	r3, [r7, #4]
10048e36:	681b      	ldr	r3, [r3, #0]
10048e38:	681b      	ldr	r3, [r3, #0]
10048e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10048e3c:	687b      	ldr	r3, [r7, #4]
10048e3e:	681b      	ldr	r3, [r3, #0]
10048e40:	681a      	ldr	r2, [r3, #0]
10048e42:	687b      	ldr	r3, [r7, #4]
10048e44:	681b      	ldr	r3, [r3, #0]
10048e46:	2101      	movs	r1, #1
10048e48:	438a      	bics	r2, r1
10048e4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10048e4c:	687b      	ldr	r3, [r7, #4]
10048e4e:	681b      	ldr	r3, [r3, #0]
10048e50:	689b      	ldr	r3, [r3, #8]
10048e52:	4a0e      	ldr	r2, [pc, #56]	@ (10048e8c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
10048e54:	4013      	ands	r3, r2
10048e56:	0019      	movs	r1, r3
10048e58:	687b      	ldr	r3, [r7, #4]
10048e5a:	681b      	ldr	r3, [r3, #0]
10048e5c:	683a      	ldr	r2, [r7, #0]
10048e5e:	430a      	orrs	r2, r1
10048e60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10048e62:	687b      	ldr	r3, [r7, #4]
10048e64:	0018      	movs	r0, r3
10048e66:	f000 f813 	bl	10048e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10048e6a:	687b      	ldr	r3, [r7, #4]
10048e6c:	681b      	ldr	r3, [r3, #0]
10048e6e:	68fa      	ldr	r2, [r7, #12]
10048e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10048e72:	687b      	ldr	r3, [r7, #4]
10048e74:	2288      	movs	r2, #136	@ 0x88
10048e76:	2120      	movs	r1, #32
10048e78:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10048e7a:	687b      	ldr	r3, [r7, #4]
10048e7c:	2284      	movs	r2, #132	@ 0x84
10048e7e:	2100      	movs	r1, #0
10048e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048e82:	2300      	movs	r3, #0
}
10048e84:	0018      	movs	r0, r3
10048e86:	46bd      	mov	sp, r7
10048e88:	b004      	add	sp, #16
10048e8a:	bd80      	pop	{r7, pc}
10048e8c:	f1ffffff 	.word	0xf1ffffff

10048e90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10048e90:	b5f0      	push	{r4, r5, r6, r7, lr}
10048e92:	b085      	sub	sp, #20
10048e94:	af00      	add	r7, sp, #0
10048e96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
10048e98:	687b      	ldr	r3, [r7, #4]
10048e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10048e9c:	2b00      	cmp	r3, #0
10048e9e:	d108      	bne.n	10048eb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
10048ea0:	687b      	ldr	r3, [r7, #4]
10048ea2:	226a      	movs	r2, #106	@ 0x6a
10048ea4:	2101      	movs	r1, #1
10048ea6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
10048ea8:	687b      	ldr	r3, [r7, #4]
10048eaa:	2268      	movs	r2, #104	@ 0x68
10048eac:	2101      	movs	r1, #1
10048eae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
10048eb0:	e043      	b.n	10048f3a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
10048eb2:	260f      	movs	r6, #15
10048eb4:	19bb      	adds	r3, r7, r6
10048eb6:	2208      	movs	r2, #8
10048eb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
10048eba:	200e      	movs	r0, #14
10048ebc:	183b      	adds	r3, r7, r0
10048ebe:	2208      	movs	r2, #8
10048ec0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
10048ec2:	687b      	ldr	r3, [r7, #4]
10048ec4:	681b      	ldr	r3, [r3, #0]
10048ec6:	689b      	ldr	r3, [r3, #8]
10048ec8:	0e5b      	lsrs	r3, r3, #25
10048eca:	b2da      	uxtb	r2, r3
10048ecc:	240d      	movs	r4, #13
10048ece:	193b      	adds	r3, r7, r4
10048ed0:	2107      	movs	r1, #7
10048ed2:	400a      	ands	r2, r1
10048ed4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
10048ed6:	687b      	ldr	r3, [r7, #4]
10048ed8:	681b      	ldr	r3, [r3, #0]
10048eda:	689b      	ldr	r3, [r3, #8]
10048edc:	0f5b      	lsrs	r3, r3, #29
10048ede:	b2da      	uxtb	r2, r3
10048ee0:	250c      	movs	r5, #12
10048ee2:	197b      	adds	r3, r7, r5
10048ee4:	2107      	movs	r1, #7
10048ee6:	400a      	ands	r2, r1
10048ee8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
10048eea:	183b      	adds	r3, r7, r0
10048eec:	781b      	ldrb	r3, [r3, #0]
10048eee:	197a      	adds	r2, r7, r5
10048ef0:	7812      	ldrb	r2, [r2, #0]
10048ef2:	4914      	ldr	r1, [pc, #80]	@ (10048f44 <UARTEx_SetNbDataToProcess+0xb4>)
10048ef4:	5c8a      	ldrb	r2, [r1, r2]
10048ef6:	435a      	muls	r2, r3
10048ef8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
10048efa:	197b      	adds	r3, r7, r5
10048efc:	781b      	ldrb	r3, [r3, #0]
10048efe:	4a12      	ldr	r2, [pc, #72]	@ (10048f48 <UARTEx_SetNbDataToProcess+0xb8>)
10048f00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
10048f02:	0019      	movs	r1, r3
10048f04:	f7f7 fa1e 	bl	10040344 <__divsi3>
10048f08:	0003      	movs	r3, r0
10048f0a:	b299      	uxth	r1, r3
10048f0c:	687b      	ldr	r3, [r7, #4]
10048f0e:	226a      	movs	r2, #106	@ 0x6a
10048f10:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10048f12:	19bb      	adds	r3, r7, r6
10048f14:	781b      	ldrb	r3, [r3, #0]
10048f16:	193a      	adds	r2, r7, r4
10048f18:	7812      	ldrb	r2, [r2, #0]
10048f1a:	490a      	ldr	r1, [pc, #40]	@ (10048f44 <UARTEx_SetNbDataToProcess+0xb4>)
10048f1c:	5c8a      	ldrb	r2, [r1, r2]
10048f1e:	435a      	muls	r2, r3
10048f20:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
10048f22:	193b      	adds	r3, r7, r4
10048f24:	781b      	ldrb	r3, [r3, #0]
10048f26:	4a08      	ldr	r2, [pc, #32]	@ (10048f48 <UARTEx_SetNbDataToProcess+0xb8>)
10048f28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
10048f2a:	0019      	movs	r1, r3
10048f2c:	f7f7 fa0a 	bl	10040344 <__divsi3>
10048f30:	0003      	movs	r3, r0
10048f32:	b299      	uxth	r1, r3
10048f34:	687b      	ldr	r3, [r7, #4]
10048f36:	2268      	movs	r2, #104	@ 0x68
10048f38:	5299      	strh	r1, [r3, r2]
}
10048f3a:	46c0      	nop			@ (mov r8, r8)
10048f3c:	46bd      	mov	sp, r7
10048f3e:	b005      	add	sp, #20
10048f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10048f42:	46c0      	nop			@ (mov r8, r8)
10048f44:	1004e78c 	.word	0x1004e78c
10048f48:	1004e794 	.word	0x1004e794

10048f4c <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
10048f4c:	b580      	push	{r7, lr}
10048f4e:	b088      	sub	sp, #32
10048f50:	af00      	add	r7, sp, #0
10048f52:	6078      	str	r0, [r7, #4]
10048f54:	000a      	movs	r2, r1
10048f56:	1cbb      	adds	r3, r7, #2
10048f58:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
10048f5a:	231b      	movs	r3, #27
10048f5c:	18fb      	adds	r3, r7, r3
10048f5e:	2200      	movs	r2, #0
10048f60:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
10048f62:	687b      	ldr	r3, [r7, #4]
10048f64:	781b      	ldrb	r3, [r3, #0]
10048f66:	2b04      	cmp	r3, #4
10048f68:	d003      	beq.n	10048f72 <BLE_STACK_Event+0x26>
10048f6a:	687b      	ldr	r3, [r7, #4]
10048f6c:	781b      	ldrb	r3, [r3, #0]
10048f6e:	2b82      	cmp	r3, #130	@ 0x82
10048f70:	d116      	bne.n	10048fa0 <BLE_STACK_Event+0x54>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
10048f72:	687b      	ldr	r3, [r7, #4]
10048f74:	3301      	adds	r3, #1
10048f76:	617b      	str	r3, [r7, #20]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
10048f78:	687b      	ldr	r3, [r7, #4]
10048f7a:	781b      	ldrb	r3, [r3, #0]
10048f7c:	2b04      	cmp	r3, #4
10048f7e:	d103      	bne.n	10048f88 <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
10048f80:	697b      	ldr	r3, [r7, #20]
10048f82:	3302      	adds	r3, #2
10048f84:	61fb      	str	r3, [r7, #28]
10048f86:	e005      	b.n	10048f94 <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
10048f88:	687b      	ldr	r3, [r7, #4]
10048f8a:	3301      	adds	r3, #1
10048f8c:	613b      	str	r3, [r7, #16]
      data = event_pckt->data;
10048f8e:	693b      	ldr	r3, [r7, #16]
10048f90:	3303      	adds	r3, #3
10048f92:	61fb      	str	r3, [r7, #28]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
10048f94:	697b      	ldr	r3, [r7, #20]
10048f96:	781b      	ldrb	r3, [r3, #0]
10048f98:	2bff      	cmp	r3, #255	@ 0xff
10048f9a:	d101      	bne.n	10048fa0 <BLE_STACK_Event+0x54>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
10048f9c:	69fb      	ldr	r3, [r7, #28]
10048f9e:	60fb      	str	r3, [r7, #12]
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
10048fa0:	231b      	movs	r3, #27
10048fa2:	18fb      	adds	r3, r7, r3
10048fa4:	781b      	ldrb	r3, [r3, #0]
10048fa6:	2b00      	cmp	r3, #0
10048fa8:	d103      	bne.n	10048fb2 <BLE_STACK_Event+0x66>
  {
    BLEEVT_App_Notification(hci_pckt);
10048faa:	687b      	ldr	r3, [r7, #4]
10048fac:	0018      	movs	r0, r3
10048fae:	f7f8 faf9 	bl	100415a4 <BLEEVT_App_Notification>
  }
}
10048fb2:	46c0      	nop			@ (mov r8, r8)
10048fb4:	46bd      	mov	sp, r7
10048fb6:	b008      	add	sp, #32
10048fb8:	bd80      	pop	{r7, pc}
	...

10048fbc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
10048fbc:	b580      	push	{r7, lr}
10048fbe:	b090      	sub	sp, #64	@ 0x40
10048fc0:	af00      	add	r7, sp, #0
10048fc2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
10048fc4:	4b75      	ldr	r3, [pc, #468]	@ (1004919c <UTIL_SEQ_Run+0x1e0>)
10048fc6:	681b      	ldr	r3, [r3, #0]
10048fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
10048fca:	4b74      	ldr	r3, [pc, #464]	@ (1004919c <UTIL_SEQ_Run+0x1e0>)
10048fcc:	681b      	ldr	r3, [r3, #0]
10048fce:	687a      	ldr	r2, [r7, #4]
10048fd0:	401a      	ands	r2, r3
10048fd2:	4b72      	ldr	r3, [pc, #456]	@ (1004919c <UTIL_SEQ_Run+0x1e0>)
10048fd4:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
10048fd6:	4b72      	ldr	r3, [pc, #456]	@ (100491a0 <UTIL_SEQ_Run+0x1e4>)
10048fd8:	681b      	ldr	r3, [r3, #0]
10048fda:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
10048fdc:	4b71      	ldr	r3, [pc, #452]	@ (100491a4 <UTIL_SEQ_Run+0x1e8>)
10048fde:	681b      	ldr	r3, [r3, #0]
10048fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
10048fe2:	4b71      	ldr	r3, [pc, #452]	@ (100491a8 <UTIL_SEQ_Run+0x1ec>)
10048fe4:	681b      	ldr	r3, [r3, #0]
10048fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
10048fe8:	4b70      	ldr	r3, [pc, #448]	@ (100491ac <UTIL_SEQ_Run+0x1f0>)
10048fea:	681b      	ldr	r3, [r3, #0]
10048fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
10048fee:	e090      	b.n	10049112 <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
10048ff0:	2300      	movs	r3, #0
10048ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
10048ff4:	e002      	b.n	10048ffc <UTIL_SEQ_Run+0x40>
    {
      counter++;
10048ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10048ff8:	3301      	adds	r3, #1
10048ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
10048ffc:	4b6c      	ldr	r3, [pc, #432]	@ (100491b0 <UTIL_SEQ_Run+0x1f4>)
10048ffe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10049000:	00d2      	lsls	r2, r2, #3
10049002:	58d3      	ldr	r3, [r2, r3]
10049004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049006:	401a      	ands	r2, r3
10049008:	4b64      	ldr	r3, [pc, #400]	@ (1004919c <UTIL_SEQ_Run+0x1e0>)
1004900a:	681b      	ldr	r3, [r3, #0]
1004900c:	4013      	ands	r3, r2
1004900e:	d0f2      	beq.n	10048ff6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
10049010:	4b67      	ldr	r3, [pc, #412]	@ (100491b0 <UTIL_SEQ_Run+0x1f4>)
10049012:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10049014:	00d2      	lsls	r2, r2, #3
10049016:	58d3      	ldr	r3, [r2, r3]
10049018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004901a:	401a      	ands	r2, r3
1004901c:	4b5f      	ldr	r3, [pc, #380]	@ (1004919c <UTIL_SEQ_Run+0x1e0>)
1004901e:	681b      	ldr	r3, [r3, #0]
10049020:	4013      	ands	r3, r2
10049022:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
10049024:	4a62      	ldr	r2, [pc, #392]	@ (100491b0 <UTIL_SEQ_Run+0x1f4>)
10049026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049028:	00db      	lsls	r3, r3, #3
1004902a:	18d3      	adds	r3, r2, r3
1004902c:	3304      	adds	r3, #4
1004902e:	681b      	ldr	r3, [r3, #0]
10049030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10049032:	4013      	ands	r3, r2
10049034:	d107      	bne.n	10049046 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
10049036:	4a5e      	ldr	r2, [pc, #376]	@ (100491b0 <UTIL_SEQ_Run+0x1f4>)
10049038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004903a:	00db      	lsls	r3, r3, #3
1004903c:	18d3      	adds	r3, r2, r3
1004903e:	3304      	adds	r3, #4
10049040:	2201      	movs	r2, #1
10049042:	4252      	negs	r2, r2
10049044:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
10049046:	4a5a      	ldr	r2, [pc, #360]	@ (100491b0 <UTIL_SEQ_Run+0x1f4>)
10049048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004904a:	00db      	lsls	r3, r3, #3
1004904c:	18d3      	adds	r3, r2, r3
1004904e:	3304      	adds	r3, #4
10049050:	681b      	ldr	r3, [r3, #0]
10049052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10049054:	4013      	ands	r3, r2
10049056:	0018      	movs	r0, r3
10049058:	f000 f906 	bl	10049268 <SEQ_BitPosition>
1004905c:	0003      	movs	r3, r0
1004905e:	001a      	movs	r2, r3
10049060:	4b54      	ldr	r3, [pc, #336]	@ (100491b4 <UTIL_SEQ_Run+0x1f8>)
10049062:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
10049064:	4a52      	ldr	r2, [pc, #328]	@ (100491b0 <UTIL_SEQ_Run+0x1f4>)
10049066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049068:	00db      	lsls	r3, r3, #3
1004906a:	18d3      	adds	r3, r2, r3
1004906c:	3304      	adds	r3, #4
1004906e:	681a      	ldr	r2, [r3, #0]
10049070:	4b50      	ldr	r3, [pc, #320]	@ (100491b4 <UTIL_SEQ_Run+0x1f8>)
10049072:	681b      	ldr	r3, [r3, #0]
10049074:	2101      	movs	r1, #1
10049076:	4099      	lsls	r1, r3
10049078:	000b      	movs	r3, r1
1004907a:	43db      	mvns	r3, r3
1004907c:	401a      	ands	r2, r3
1004907e:	494c      	ldr	r1, [pc, #304]	@ (100491b0 <UTIL_SEQ_Run+0x1f4>)
10049080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049082:	00db      	lsls	r3, r3, #3
10049084:	18cb      	adds	r3, r1, r3
10049086:	3304      	adds	r3, #4
10049088:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004908a:	f3ef 8310 	mrs	r3, PRIMASK
1004908e:	61bb      	str	r3, [r7, #24]
  return(result);
10049090:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10049092:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
10049094:	b672      	cpsid	i
}
10049096:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
10049098:	4b46      	ldr	r3, [pc, #280]	@ (100491b4 <UTIL_SEQ_Run+0x1f8>)
1004909a:	681b      	ldr	r3, [r3, #0]
1004909c:	2201      	movs	r2, #1
1004909e:	409a      	lsls	r2, r3
100490a0:	0013      	movs	r3, r2
100490a2:	43da      	mvns	r2, r3
100490a4:	4b3e      	ldr	r3, [pc, #248]	@ (100491a0 <UTIL_SEQ_Run+0x1e4>)
100490a6:	681b      	ldr	r3, [r3, #0]
100490a8:	401a      	ands	r2, r3
100490aa:	4b3d      	ldr	r3, [pc, #244]	@ (100491a0 <UTIL_SEQ_Run+0x1e4>)
100490ac:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
100490ae:	2302      	movs	r3, #2
100490b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
100490b2:	e013      	b.n	100490dc <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
100490b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100490b6:	1e5a      	subs	r2, r3, #1
100490b8:	4b3d      	ldr	r3, [pc, #244]	@ (100491b0 <UTIL_SEQ_Run+0x1f4>)
100490ba:	00d2      	lsls	r2, r2, #3
100490bc:	58d1      	ldr	r1, [r2, r3]
100490be:	4b3d      	ldr	r3, [pc, #244]	@ (100491b4 <UTIL_SEQ_Run+0x1f8>)
100490c0:	681b      	ldr	r3, [r3, #0]
100490c2:	2201      	movs	r2, #1
100490c4:	409a      	lsls	r2, r3
100490c6:	0013      	movs	r3, r2
100490c8:	43db      	mvns	r3, r3
100490ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100490cc:	3a01      	subs	r2, #1
100490ce:	4019      	ands	r1, r3
100490d0:	4b37      	ldr	r3, [pc, #220]	@ (100491b0 <UTIL_SEQ_Run+0x1f4>)
100490d2:	00d2      	lsls	r2, r2, #3
100490d4:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
100490d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100490d8:	3b01      	subs	r3, #1
100490da:	63fb      	str	r3, [r7, #60]	@ 0x3c
100490dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100490de:	2b00      	cmp	r3, #0
100490e0:	d1e8      	bne.n	100490b4 <UTIL_SEQ_Run+0xf8>
100490e2:	6a3b      	ldr	r3, [r7, #32]
100490e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100490e6:	697b      	ldr	r3, [r7, #20]
100490e8:	f383 8810 	msr	PRIMASK, r3
}
100490ec:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
100490ee:	4b31      	ldr	r3, [pc, #196]	@ (100491b4 <UTIL_SEQ_Run+0x1f8>)
100490f0:	681a      	ldr	r2, [r3, #0]
100490f2:	4b31      	ldr	r3, [pc, #196]	@ (100491b8 <UTIL_SEQ_Run+0x1fc>)
100490f4:	0092      	lsls	r2, r2, #2
100490f6:	58d3      	ldr	r3, [r2, r3]
100490f8:	4798      	blx	r3

    local_taskset = TaskSet;
100490fa:	4b29      	ldr	r3, [pc, #164]	@ (100491a0 <UTIL_SEQ_Run+0x1e4>)
100490fc:	681b      	ldr	r3, [r3, #0]
100490fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10049100:	4b28      	ldr	r3, [pc, #160]	@ (100491a4 <UTIL_SEQ_Run+0x1e8>)
10049102:	681b      	ldr	r3, [r3, #0]
10049104:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
10049106:	4b28      	ldr	r3, [pc, #160]	@ (100491a8 <UTIL_SEQ_Run+0x1ec>)
10049108:	681b      	ldr	r3, [r3, #0]
1004910a:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
1004910c:	4b27      	ldr	r3, [pc, #156]	@ (100491ac <UTIL_SEQ_Run+0x1f0>)
1004910e:	681b      	ldr	r3, [r3, #0]
10049110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
10049112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049116:	401a      	ands	r2, r3
10049118:	4b20      	ldr	r3, [pc, #128]	@ (1004919c <UTIL_SEQ_Run+0x1e0>)
1004911a:	681b      	ldr	r3, [r3, #0]
1004911c:	4013      	ands	r3, r2
1004911e:	d004      	beq.n	1004912a <UTIL_SEQ_Run+0x16e>
10049120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10049124:	4013      	ands	r3, r2
10049126:	d100      	bne.n	1004912a <UTIL_SEQ_Run+0x16e>
10049128:	e762      	b.n	10048ff0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
1004912a:	4b22      	ldr	r3, [pc, #136]	@ (100491b4 <UTIL_SEQ_Run+0x1f8>)
1004912c:	2201      	movs	r2, #1
1004912e:	4252      	negs	r2, r2
10049130:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
10049132:	4b1e      	ldr	r3, [pc, #120]	@ (100491ac <UTIL_SEQ_Run+0x1f0>)
10049134:	681b      	ldr	r3, [r3, #0]
10049136:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10049138:	4013      	ands	r3, r2
1004913a:	d127      	bne.n	1004918c <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
1004913c:	f7f7 fc7b 	bl	10040a36 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049140:	f3ef 8310 	mrs	r3, PRIMASK
10049144:	613b      	str	r3, [r7, #16]
  return(result);
10049146:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
10049148:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004914a:	b672      	cpsid	i
}
1004914c:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
1004914e:	4b14      	ldr	r3, [pc, #80]	@ (100491a0 <UTIL_SEQ_Run+0x1e4>)
10049150:	681b      	ldr	r3, [r3, #0]
10049152:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10049154:	4b13      	ldr	r3, [pc, #76]	@ (100491a4 <UTIL_SEQ_Run+0x1e8>)
10049156:	681b      	ldr	r3, [r3, #0]
10049158:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
1004915a:	4b13      	ldr	r3, [pc, #76]	@ (100491a8 <UTIL_SEQ_Run+0x1ec>)
1004915c:	681b      	ldr	r3, [r3, #0]
1004915e:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
10049160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049164:	401a      	ands	r2, r3
10049166:	4b0d      	ldr	r3, [pc, #52]	@ (1004919c <UTIL_SEQ_Run+0x1e0>)
10049168:	681b      	ldr	r3, [r3, #0]
1004916a:	4013      	ands	r3, r2
1004916c:	d106      	bne.n	1004917c <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
1004916e:	4b0f      	ldr	r3, [pc, #60]	@ (100491ac <UTIL_SEQ_Run+0x1f0>)
10049170:	681b      	ldr	r3, [r3, #0]
10049172:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10049174:	4013      	ands	r3, r2
10049176:	d101      	bne.n	1004917c <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
10049178:	f7f7 fc62 	bl	10040a40 <UTIL_SEQ_Idle>
1004917c:	69fb      	ldr	r3, [r7, #28]
1004917e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049180:	68fb      	ldr	r3, [r7, #12]
10049182:	f383 8810 	msr	PRIMASK, r3
}
10049186:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
10049188:	f000 f868 	bl	1004925c <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
1004918c:	4b03      	ldr	r3, [pc, #12]	@ (1004919c <UTIL_SEQ_Run+0x1e0>)
1004918e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10049190:	601a      	str	r2, [r3, #0]

  return;
10049192:	46c0      	nop			@ (mov r8, r8)
}
10049194:	46bd      	mov	sp, r7
10049196:	b010      	add	sp, #64	@ 0x40
10049198:	bd80      	pop	{r7, pc}
1004919a:	46c0      	nop			@ (mov r8, r8)
1004919c:	20000838 	.word	0x20000838
100491a0:	200005a8 	.word	0x200005a8
100491a4:	200005ac 	.word	0x200005ac
100491a8:	20000834 	.word	0x20000834
100491ac:	200005b0 	.word	0x200005b0
100491b0:	20000638 	.word	0x20000638
100491b4:	200005b4 	.word	0x200005b4
100491b8:	200005b8 	.word	0x200005b8

100491bc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
100491bc:	b580      	push	{r7, lr}
100491be:	b088      	sub	sp, #32
100491c0:	af00      	add	r7, sp, #0
100491c2:	60f8      	str	r0, [r7, #12]
100491c4:	60b9      	str	r1, [r7, #8]
100491c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100491c8:	f3ef 8310 	mrs	r3, PRIMASK
100491cc:	617b      	str	r3, [r7, #20]
  return(result);
100491ce:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
100491d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100491d2:	b672      	cpsid	i
}
100491d4:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
100491d6:	68fb      	ldr	r3, [r7, #12]
100491d8:	0018      	movs	r0, r3
100491da:	f000 f845 	bl	10049268 <SEQ_BitPosition>
100491de:	0003      	movs	r3, r0
100491e0:	001a      	movs	r2, r3
100491e2:	4b07      	ldr	r3, [pc, #28]	@ (10049200 <UTIL_SEQ_RegTask+0x44>)
100491e4:	0092      	lsls	r2, r2, #2
100491e6:	6879      	ldr	r1, [r7, #4]
100491e8:	50d1      	str	r1, [r2, r3]
100491ea:	69fb      	ldr	r3, [r7, #28]
100491ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100491ee:	69bb      	ldr	r3, [r7, #24]
100491f0:	f383 8810 	msr	PRIMASK, r3
}
100491f4:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
100491f6:	46c0      	nop			@ (mov r8, r8)
}
100491f8:	46bd      	mov	sp, r7
100491fa:	b008      	add	sp, #32
100491fc:	bd80      	pop	{r7, pc}
100491fe:	46c0      	nop			@ (mov r8, r8)
10049200:	200005b8 	.word	0x200005b8

10049204 <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
10049204:	b580      	push	{r7, lr}
10049206:	b086      	sub	sp, #24
10049208:	af00      	add	r7, sp, #0
1004920a:	6078      	str	r0, [r7, #4]
1004920c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004920e:	f3ef 8310 	mrs	r3, PRIMASK
10049212:	60fb      	str	r3, [r7, #12]
  return(result);
10049214:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10049216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10049218:	b672      	cpsid	i
}
1004921a:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
1004921c:	4b0d      	ldr	r3, [pc, #52]	@ (10049254 <UTIL_SEQ_SetTask+0x50>)
1004921e:	681a      	ldr	r2, [r3, #0]
10049220:	687b      	ldr	r3, [r7, #4]
10049222:	431a      	orrs	r2, r3
10049224:	4b0b      	ldr	r3, [pc, #44]	@ (10049254 <UTIL_SEQ_SetTask+0x50>)
10049226:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
10049228:	4b0b      	ldr	r3, [pc, #44]	@ (10049258 <UTIL_SEQ_SetTask+0x54>)
1004922a:	683a      	ldr	r2, [r7, #0]
1004922c:	00d2      	lsls	r2, r2, #3
1004922e:	58d2      	ldr	r2, [r2, r3]
10049230:	687b      	ldr	r3, [r7, #4]
10049232:	431a      	orrs	r2, r3
10049234:	0011      	movs	r1, r2
10049236:	4b08      	ldr	r3, [pc, #32]	@ (10049258 <UTIL_SEQ_SetTask+0x54>)
10049238:	683a      	ldr	r2, [r7, #0]
1004923a:	00d2      	lsls	r2, r2, #3
1004923c:	50d1      	str	r1, [r2, r3]
1004923e:	697b      	ldr	r3, [r7, #20]
10049240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049242:	693b      	ldr	r3, [r7, #16]
10049244:	f383 8810 	msr	PRIMASK, r3
}
10049248:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
1004924a:	46c0      	nop			@ (mov r8, r8)
}
1004924c:	46bd      	mov	sp, r7
1004924e:	b006      	add	sp, #24
10049250:	bd80      	pop	{r7, pc}
10049252:	46c0      	nop			@ (mov r8, r8)
10049254:	200005a8 	.word	0x200005a8
10049258:	20000638 	.word	0x20000638

1004925c <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
1004925c:	b580      	push	{r7, lr}
1004925e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
10049260:	46c0      	nop			@ (mov r8, r8)
}
10049262:	46bd      	mov	sp, r7
10049264:	bd80      	pop	{r7, pc}
	...

10049268 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
10049268:	b580      	push	{r7, lr}
1004926a:	b084      	sub	sp, #16
1004926c:	af00      	add	r7, sp, #0
1004926e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
10049270:	210f      	movs	r1, #15
10049272:	187b      	adds	r3, r7, r1
10049274:	2200      	movs	r2, #0
10049276:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
10049278:	687b      	ldr	r3, [r7, #4]
1004927a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
1004927c:	68ba      	ldr	r2, [r7, #8]
1004927e:	2380      	movs	r3, #128	@ 0x80
10049280:	025b      	lsls	r3, r3, #9
10049282:	429a      	cmp	r2, r3
10049284:	d205      	bcs.n	10049292 <SEQ_BitPosition+0x2a>
10049286:	187b      	adds	r3, r7, r1
10049288:	2210      	movs	r2, #16
1004928a:	701a      	strb	r2, [r3, #0]
1004928c:	68bb      	ldr	r3, [r7, #8]
1004928e:	041b      	lsls	r3, r3, #16
10049290:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
10049292:	68ba      	ldr	r2, [r7, #8]
10049294:	2380      	movs	r3, #128	@ 0x80
10049296:	045b      	lsls	r3, r3, #17
10049298:	429a      	cmp	r2, r3
1004929a:	d208      	bcs.n	100492ae <SEQ_BitPosition+0x46>
1004929c:	220f      	movs	r2, #15
1004929e:	18bb      	adds	r3, r7, r2
100492a0:	18ba      	adds	r2, r7, r2
100492a2:	7812      	ldrb	r2, [r2, #0]
100492a4:	3208      	adds	r2, #8
100492a6:	701a      	strb	r2, [r3, #0]
100492a8:	68bb      	ldr	r3, [r7, #8]
100492aa:	021b      	lsls	r3, r3, #8
100492ac:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
100492ae:	68ba      	ldr	r2, [r7, #8]
100492b0:	2380      	movs	r3, #128	@ 0x80
100492b2:	055b      	lsls	r3, r3, #21
100492b4:	429a      	cmp	r2, r3
100492b6:	d208      	bcs.n	100492ca <SEQ_BitPosition+0x62>
100492b8:	220f      	movs	r2, #15
100492ba:	18bb      	adds	r3, r7, r2
100492bc:	18ba      	adds	r2, r7, r2
100492be:	7812      	ldrb	r2, [r2, #0]
100492c0:	3204      	adds	r2, #4
100492c2:	701a      	strb	r2, [r3, #0]
100492c4:	68bb      	ldr	r3, [r7, #8]
100492c6:	011b      	lsls	r3, r3, #4
100492c8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
100492ca:	68bb      	ldr	r3, [r7, #8]
100492cc:	0f1b      	lsrs	r3, r3, #28
100492ce:	4a08      	ldr	r2, [pc, #32]	@ (100492f0 <SEQ_BitPosition+0x88>)
100492d0:	5cd1      	ldrb	r1, [r2, r3]
100492d2:	200f      	movs	r0, #15
100492d4:	183b      	adds	r3, r7, r0
100492d6:	183a      	adds	r2, r7, r0
100492d8:	7812      	ldrb	r2, [r2, #0]
100492da:	188a      	adds	r2, r1, r2
100492dc:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
100492de:	183b      	adds	r3, r7, r0
100492e0:	781b      	ldrb	r3, [r3, #0]
100492e2:	221f      	movs	r2, #31
100492e4:	1ad3      	subs	r3, r2, r3
100492e6:	b2db      	uxtb	r3, r3
}
100492e8:	0018      	movs	r0, r3
100492ea:	46bd      	mov	sp, r7
100492ec:	b004      	add	sp, #16
100492ee:	bd80      	pop	{r7, pc}
100492f0:	1004e79c 	.word	0x1004e79c

100492f4 <aci_gap_init>:
100492f4:	b580      	push	{r7, lr}
100492f6:	2802      	cmp	r0, #2
100492f8:	d901      	bls.n	100492fe <aci_gap_init+0xa>
100492fa:	2012      	movs	r0, #18
100492fc:	bd80      	pop	{r7, pc}
100492fe:	f000 fd91 	bl	10049e24 <GAP_Init>
10049302:	bd80      	pop	{r7, pc}

10049304 <GAP_set_advertising_configuration_ucfg_weak>:
10049304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10049306:	461c      	mov	r4, r3
10049308:	4608      	mov	r0, r1
1004930a:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004930c:	9103      	str	r1, [sp, #12]
1004930e:	9909      	ldr	r1, [sp, #36]	@ 0x24
10049310:	9102      	str	r1, [sp, #8]
10049312:	9908      	ldr	r1, [sp, #32]
10049314:	9101      	str	r1, [sp, #4]
10049316:	9907      	ldr	r1, [sp, #28]
10049318:	9100      	str	r1, [sp, #0]
1004931a:	9b06      	ldr	r3, [sp, #24]
1004931c:	4611      	mov	r1, r2
1004931e:	4622      	mov	r2, r4
10049320:	f000 fea4 	bl	1004a06c <GAP_set_legacy_advertising_configuration>
10049324:	b004      	add	sp, #16
10049326:	bd10      	pop	{r4, pc}

10049328 <GAP_set_advertising_data_ucfg_weak>:
10049328:	b580      	push	{r7, lr}
1004932a:	4619      	mov	r1, r3
1004932c:	4610      	mov	r0, r2
1004932e:	f000 fff7 	bl	1004a320 <GAP_set_legacy_advertising_data>
10049332:	bd80      	pop	{r7, pc}

10049334 <GAP_set_advertising_enable_ucfg_weak>:
10049334:	b580      	push	{r7, lr}
10049336:	f000 feed 	bl	1004a114 <GAP_set_legacy_advertising_enable>
1004933a:	bd80      	pop	{r7, pc}

1004933c <aci_gap_set_advertising_configuration>:
1004933c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004933e:	b093      	sub	sp, #76	@ 0x4c
10049340:	461f      	mov	r7, r3
10049342:	4615      	mov	r5, r2
10049344:	460e      	mov	r6, r1
10049346:	9012      	str	r0, [sp, #72]	@ 0x48
10049348:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1004934a:	4608      	mov	r0, r1
1004934c:	4611      	mov	r1, r2
1004934e:	4622      	mov	r2, r4
10049350:	f000 fe5e 	bl	1004a010 <GAP_check_discoverability_mode>
10049354:	2800      	cmp	r0, #0
10049356:	d124      	bne.n	100493a2 <aci_gap_set_advertising_configuration+0x66>
10049358:	9822      	ldr	r0, [sp, #136]	@ 0x88
1004935a:	900d      	str	r0, [sp, #52]	@ 0x34
1004935c:	ab1f      	add	r3, sp, #124	@ 0x7c
1004935e:	cb0d      	ldmia	r3, {r0, r2, r3}
10049360:	9011      	str	r0, [sp, #68]	@ 0x44
10049362:	981e      	ldr	r0, [sp, #120]	@ 0x78
10049364:	900f      	str	r0, [sp, #60]	@ 0x3c
10049366:	981d      	ldr	r0, [sp, #116]	@ 0x74
10049368:	900e      	str	r0, [sp, #56]	@ 0x38
1004936a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
1004936c:	900c      	str	r0, [sp, #48]	@ 0x30
1004936e:	991a      	ldr	r1, [sp, #104]	@ 0x68
10049370:	9819      	ldr	r0, [sp, #100]	@ 0x64
10049372:	9710      	str	r7, [sp, #64]	@ 0x40
10049374:	9f18      	ldr	r7, [sp, #96]	@ 0x60
10049376:	9208      	str	r2, [sp, #32]
10049378:	9309      	str	r3, [sp, #36]	@ 0x24
1004937a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004937c:	920a      	str	r2, [sp, #40]	@ 0x28
1004937e:	9700      	str	r7, [sp, #0]
10049380:	9001      	str	r0, [sp, #4]
10049382:	9102      	str	r1, [sp, #8]
10049384:	980c      	ldr	r0, [sp, #48]	@ 0x30
10049386:	9003      	str	r0, [sp, #12]
10049388:	9404      	str	r4, [sp, #16]
1004938a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004938c:	9005      	str	r0, [sp, #20]
1004938e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10049390:	9006      	str	r0, [sp, #24]
10049392:	9811      	ldr	r0, [sp, #68]	@ 0x44
10049394:	9007      	str	r0, [sp, #28]
10049396:	9812      	ldr	r0, [sp, #72]	@ 0x48
10049398:	4631      	mov	r1, r6
1004939a:	462a      	mov	r2, r5
1004939c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004939e:	f7ff ffb1 	bl	10049304 <GAP_set_advertising_configuration_ucfg_weak>
100493a2:	b013      	add	sp, #76	@ 0x4c
100493a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

100493a6 <aci_gap_set_advertising_data>:
100493a6:	b580      	push	{r7, lr}
100493a8:	f7ff ffbe 	bl	10049328 <GAP_set_advertising_data_ucfg_weak>
100493ac:	bd80      	pop	{r7, pc}

100493ae <aci_gap_set_advertising_enable>:
100493ae:	b580      	push	{r7, lr}
100493b0:	f7ff ffc0 	bl	10049334 <GAP_set_advertising_enable_ucfg_weak>
100493b4:	bd80      	pop	{r7, pc}

100493b6 <configBitmapGet>:
100493b6:	2000      	movs	r0, #0
100493b8:	4770      	bx	lr
	...

100493bc <HAL_Read_ConfigData>:
100493bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100493be:	b08b      	sub	sp, #44	@ 0x2c
100493c0:	4615      	mov	r5, r2
100493c2:	460c      	mov	r4, r1
100493c4:	493a      	ldr	r1, [pc, #232]	@ (100494b0 <__arm_cp.5_0>)
100493c6:	680b      	ldr	r3, [r1, #0]
100493c8:	4606      	mov	r6, r0
100493ca:	3e28      	subs	r6, #40	@ 0x28
100493cc:	2206      	movs	r2, #6
100493ce:	2112      	movs	r1, #18
100493d0:	2e0b      	cmp	r6, #11
100493d2:	d910      	bls.n	100493f6 <HAL_Read_ConfigData+0x3a>
100493d4:	2800      	cmp	r0, #0
100493d6:	d01c      	beq.n	10049412 <HAL_Read_ConfigData+0x56>
100493d8:	28ff      	cmp	r0, #255	@ 0xff
100493da:	d035      	beq.n	10049448 <HAL_Read_ConfigData+0x8c>
100493dc:	2808      	cmp	r0, #8
100493de:	d017      	beq.n	10049410 <HAL_Read_ConfigData+0x54>
100493e0:	2818      	cmp	r0, #24
100493e2:	d015      	beq.n	10049410 <HAL_Read_ConfigData+0x54>
100493e4:	2880      	cmp	r0, #128	@ 0x80
100493e6:	d03c      	beq.n	10049462 <HAL_Read_ConfigData+0xa6>
100493e8:	2881      	cmp	r0, #129	@ 0x81
100493ea:	d047      	beq.n	1004947c <HAL_Read_ConfigData+0xc0>
100493ec:	28fe      	cmp	r0, #254	@ 0xfe
100493ee:	d04b      	beq.n	10049488 <HAL_Read_ConfigData+0xcc>
100493f0:	2806      	cmp	r0, #6
100493f2:	d00b      	beq.n	1004940c <HAL_Read_ConfigData+0x50>
100493f4:	e013      	b.n	1004941e <HAL_Read_ConfigData+0x62>
100493f6:	46c0      	nop			@ (mov r8, r8)
100493f8:	447e      	add	r6, pc
100493fa:	7936      	ldrb	r6, [r6, #4]
100493fc:	0076      	lsls	r6, r6, #1
100493fe:	44b7      	add	pc, r6
10049400:	0e050e05 	.word	0x0e050e05
10049404:	0e080e11 	.word	0x0e080e11
10049408:	180e0e0e 	.word	0x180e0e0e
1004940c:	2202      	movs	r2, #2
1004940e:	e000      	b.n	10049412 <HAL_Read_ConfigData+0x56>
10049410:	2210      	movs	r2, #16
10049412:	7022      	strb	r2, [r4, #0]
10049414:	1819      	adds	r1, r3, r0
10049416:	4628      	mov	r0, r5
10049418:	f7f8 fa70 	bl	100418fc <BLEPLAT_MemCpy>
1004941c:	2100      	movs	r1, #0
1004941e:	4608      	mov	r0, r1
10049420:	b00b      	add	sp, #44	@ 0x2c
10049422:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049424:	2001      	movs	r0, #1
10049426:	7020      	strb	r0, [r4, #0]
10049428:	212c      	movs	r1, #44	@ 0x2c
1004942a:	5c59      	ldrb	r1, [r3, r1]
1004942c:	4001      	ands	r1, r0
1004942e:	7029      	strb	r1, [r5, #0]
10049430:	e7f4      	b.n	1004941c <HAL_Read_ConfigData+0x60>
10049432:	f000 fde5 	bl	1004a000 <GAP_is_rpa_change_at_timeout_enabled>
10049436:	a901      	add	r1, sp, #4
10049438:	7008      	strb	r0, [r1, #0]
1004943a:	2601      	movs	r6, #1
1004943c:	4628      	mov	r0, r5
1004943e:	4632      	mov	r2, r6
10049440:	f7f8 fa5c 	bl	100418fc <BLEPLAT_MemCpy>
10049444:	7026      	strb	r6, [r4, #0]
10049446:	e7e9      	b.n	1004941c <HAL_Read_ConfigData+0x60>
10049448:	a801      	add	r0, sp, #4
1004944a:	f7ff ffb4 	bl	100493b6 <configBitmapGet>
1004944e:	2800      	cmp	r0, #0
10049450:	d026      	beq.n	100494a0 <HAL_Read_ConfigData+0xe4>
10049452:	a901      	add	r1, sp, #4
10049454:	2604      	movs	r6, #4
10049456:	4628      	mov	r0, r5
10049458:	4632      	mov	r2, r6
1004945a:	f7f8 fa4f 	bl	100418fc <BLEPLAT_MemCpy>
1004945e:	2100      	movs	r1, #0
10049460:	e020      	b.n	100494a4 <HAL_Read_ConfigData+0xe8>
10049462:	2006      	movs	r0, #6
10049464:	7020      	strb	r0, [r4, #0]
10049466:	a801      	add	r0, sp, #4
10049468:	f003 fb09 	bl	1004ca7e <nvm_dev_id_data_get_record>
1004946c:	2800      	cmp	r0, #0
1004946e:	d01b      	beq.n	100494a8 <HAL_Read_ConfigData+0xec>
10049470:	7822      	ldrb	r2, [r4, #0]
10049472:	21ff      	movs	r1, #255	@ 0xff
10049474:	4628      	mov	r0, r5
10049476:	f7f8 fa51 	bl	1004191c <BLEPLAT_MemSet>
1004947a:	e7cf      	b.n	1004941c <HAL_Read_ConfigData+0x60>
1004947c:	2206      	movs	r2, #6
1004947e:	7022      	strb	r2, [r4, #0]
10049480:	480c      	ldr	r0, [pc, #48]	@ (100494b4 <__arm_cp.5_1>)
10049482:	6801      	ldr	r1, [r0, #0]
10049484:	3166      	adds	r1, #102	@ 0x66
10049486:	e7c6      	b.n	10049416 <HAL_Read_ConfigData+0x5a>
10049488:	ae01      	add	r6, sp, #4
1004948a:	4630      	mov	r0, r6
1004948c:	f000 f9bc 	bl	10049808 <log_verbosity_get_ucfg_weak>
10049490:	2705      	movs	r7, #5
10049492:	4628      	mov	r0, r5
10049494:	4631      	mov	r1, r6
10049496:	463a      	mov	r2, r7
10049498:	f7f8 fa30 	bl	100418fc <BLEPLAT_MemCpy>
1004949c:	7027      	strb	r7, [r4, #0]
1004949e:	e7bd      	b.n	1004941c <HAL_Read_ConfigData+0x60>
100494a0:	2112      	movs	r1, #18
100494a2:	2600      	movs	r6, #0
100494a4:	7026      	strb	r6, [r4, #0]
100494a6:	e7ba      	b.n	1004941e <HAL_Read_ConfigData+0x62>
100494a8:	7822      	ldrb	r2, [r4, #0]
100494aa:	a901      	add	r1, sp, #4
100494ac:	3120      	adds	r1, #32
100494ae:	e7b2      	b.n	10049416 <HAL_Read_ConfigData+0x5a>

100494b0 <__arm_cp.5_0>:
100494b0:	20000648 	.word	0x20000648

100494b4 <__arm_cp.5_1>:
100494b4:	20000650 	.word	0x20000650

100494b8 <aci_hal_read_config_data>:
100494b8:	b580      	push	{r7, lr}
100494ba:	f7ff ff7f 	bl	100493bc <HAL_Read_ConfigData>
100494be:	bd80      	pop	{r7, pc}

100494c0 <aci_hal_set_tx_power_level>:
100494c0:	b580      	push	{r7, lr}
100494c2:	f000 f801 	bl	100494c8 <HAL_Set_TX_Power_Level>
100494c6:	bd80      	pop	{r7, pc}

100494c8 <HAL_Set_TX_Power_Level>:
100494c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100494ca:	460e      	mov	r6, r1
100494cc:	4605      	mov	r5, r0
100494ce:	2412      	movs	r4, #18
100494d0:	f7f8 fa78 	bl	100419c4 <BLEPLAT_GetMaxPALevel>
100494d4:	42b0      	cmp	r0, r6
100494d6:	d317      	bcc.n	10049508 <HAL_Set_TX_Power_Level+0x40>
100494d8:	2d01      	cmp	r5, #1
100494da:	d815      	bhi.n	10049508 <HAL_Set_TX_Power_Level+0x40>
100494dc:	480b      	ldr	r0, [pc, #44]	@ (1004950c <__arm_cp.11_0>)
100494de:	6800      	ldr	r0, [r0, #0]
100494e0:	7a81      	ldrb	r1, [r0, #10]
100494e2:	9100      	str	r1, [sp, #0]
100494e4:	7285      	strb	r5, [r0, #10]
100494e6:	7a47      	ldrb	r7, [r0, #9]
100494e8:	7246      	strb	r6, [r0, #9]
100494ea:	4628      	mov	r0, r5
100494ec:	f7f8 fa7a 	bl	100419e4 <BLEPLAT_SetHighPower>
100494f0:	2400      	movs	r4, #0
100494f2:	42b7      	cmp	r7, r6
100494f4:	d102      	bne.n	100494fc <HAL_Set_TX_Power_Level+0x34>
100494f6:	9800      	ldr	r0, [sp, #0]
100494f8:	42a8      	cmp	r0, r5
100494fa:	d005      	beq.n	10049508 <HAL_Set_TX_Power_Level+0x40>
100494fc:	20ff      	movs	r0, #255	@ 0xff
100494fe:	227f      	movs	r2, #127	@ 0x7f
10049500:	2101      	movs	r1, #1
10049502:	460b      	mov	r3, r1
10049504:	f001 faba 	bl	1004aa7c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10049508:	4620      	mov	r0, r4
1004950a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004950c <__arm_cp.11_0>:
1004950c:	20000658 	.word	0x20000658

10049510 <ble_HAL_Init>:
10049510:	b580      	push	{r7, lr}
10049512:	4804      	ldr	r0, [pc, #16]	@ (10049524 <__arm_cp.17_0>)
10049514:	6800      	ldr	r0, [r0, #0]
10049516:	3060      	adds	r0, #96	@ 0x60
10049518:	2100      	movs	r1, #0
1004951a:	2204      	movs	r2, #4
1004951c:	f7f8 f9fe 	bl	1004191c <BLEPLAT_MemSet>
10049520:	bd80      	pop	{r7, pc}
10049522:	46c0      	nop			@ (mov r8, r8)

10049524 <__arm_cp.17_0>:
10049524:	20000658 	.word	0x20000658

10049528 <hal_read_radio_activity_state>:
10049528:	b570      	push	{r4, r5, r6, lr}
1004952a:	4603      	mov	r3, r0
1004952c:	480a      	ldr	r0, [pc, #40]	@ (10049558 <__arm_cp.18_0>)
1004952e:	6804      	ldr	r4, [r0, #0]
10049530:	f3ef 8010 	mrs	r0, PRIMASK
10049534:	b672      	cpsid	i
10049536:	7d20      	ldrb	r0, [r4, #20]
10049538:	2500      	movs	r5, #0
1004953a:	7525      	strb	r5, [r4, #20]
1004953c:	7c25      	ldrb	r5, [r4, #16]
1004953e:	260f      	movs	r6, #15
10049540:	402e      	ands	r6, r5
10049542:	701e      	strb	r6, [r3, #0]
10049544:	7c23      	ldrb	r3, [r4, #16]
10049546:	091b      	lsrs	r3, r3, #4
10049548:	700b      	strb	r3, [r1, #0]
1004954a:	68e1      	ldr	r1, [r4, #12]
1004954c:	6011      	str	r1, [r2, #0]
1004954e:	1e41      	subs	r1, r0, #1
10049550:	4188      	sbcs	r0, r1
10049552:	b662      	cpsie	i
10049554:	bd70      	pop	{r4, r5, r6, pc}
10049556:	46c0      	nop			@ (mov r8, r8)

10049558 <__arm_cp.18_0>:
10049558:	20000658 	.word	0x20000658

1004955c <hal_radio_activity_state_init>:
1004955c:	4803      	ldr	r0, [pc, #12]	@ (1004956c <__arm_cp.20_0>)
1004955e:	6800      	ldr	r0, [r0, #0]
10049560:	2100      	movs	r1, #0
10049562:	7501      	strb	r1, [r0, #20]
10049564:	8241      	strh	r1, [r0, #18]
10049566:	7401      	strb	r1, [r0, #16]
10049568:	4770      	bx	lr
1004956a:	46c0      	nop			@ (mov r8, r8)

1004956c <__arm_cp.20_0>:
1004956c:	20000658 	.word	0x20000658

10049570 <hal_radio_activity_state_cb_check>:
10049570:	b510      	push	{r4, lr}
10049572:	b086      	sub	sp, #24
10049574:	4815      	ldr	r0, [pc, #84]	@ (100495cc <__arm_cp.22_0>)
10049576:	6804      	ldr	r4, [r0, #0]
10049578:	a802      	add	r0, sp, #8
1004957a:	a901      	add	r1, sp, #4
1004957c:	466a      	mov	r2, sp
1004957e:	f7ff ffd3 	bl	10049528 <hal_read_radio_activity_state>
10049582:	2800      	cmp	r0, #0
10049584:	d01f      	beq.n	100495c6 <hal_radio_activity_state_cb_check+0x56>
10049586:	a802      	add	r0, sp, #8
10049588:	7801      	ldrb	r1, [r0, #0]
1004958a:	8a60      	ldrh	r0, [r4, #18]
1004958c:	40c8      	lsrs	r0, r1
1004958e:	07c0      	lsls	r0, r0, #31
10049590:	d019      	beq.n	100495c6 <hal_radio_activity_state_cb_check+0x56>
10049592:	9a01      	ldr	r2, [sp, #4]
10049594:	9b00      	ldr	r3, [sp, #0]
10049596:	a803      	add	r0, sp, #12
10049598:	2408      	movs	r4, #8
1004959a:	7084      	strb	r4, [r0, #2]
1004959c:	0e1c      	lsrs	r4, r3, #24
1004959e:	72c4      	strb	r4, [r0, #11]
100495a0:	0c1c      	lsrs	r4, r3, #16
100495a2:	7284      	strb	r4, [r0, #10]
100495a4:	0a1c      	lsrs	r4, r3, #8
100495a6:	7244      	strb	r4, [r0, #9]
100495a8:	7203      	strb	r3, [r0, #8]
100495aa:	71c2      	strb	r2, [r0, #7]
100495ac:	7181      	strb	r1, [r0, #6]
100495ae:	21ff      	movs	r1, #255	@ 0xff
100495b0:	7041      	strb	r1, [r0, #1]
100495b2:	2182      	movs	r1, #130	@ 0x82
100495b4:	7001      	strb	r1, [r0, #0]
100495b6:	2100      	movs	r1, #0
100495b8:	7141      	strb	r1, [r0, #5]
100495ba:	2204      	movs	r2, #4
100495bc:	7102      	strb	r2, [r0, #4]
100495be:	70c1      	strb	r1, [r0, #3]
100495c0:	210c      	movs	r1, #12
100495c2:	f7ff fcc3 	bl	10048f4c <BLE_STACK_Event>
100495c6:	b006      	add	sp, #24
100495c8:	bd10      	pop	{r4, pc}
100495ca:	46c0      	nop			@ (mov r8, r8)

100495cc <__arm_cp.22_0>:
100495cc:	20000658 	.word	0x20000658

100495d0 <ACL_pkt_init_ucfg_weak>:
100495d0:	2000      	movs	r0, #0
100495d2:	4770      	bx	lr

100495d4 <BLE_STACK_Tick>:
100495d4:	b580      	push	{r7, lr}
100495d6:	f003 fa75 	bl	1004cac4 <tsk_scheduler>
100495da:	bd80      	pop	{r7, pc}

100495dc <BlueNRG_Stack_Initialize_Layers>:
100495dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100495de:	b08f      	sub	sp, #60	@ 0x3c
100495e0:	9309      	str	r3, [sp, #36]	@ 0x24
100495e2:	920b      	str	r2, [sp, #44]	@ 0x2c
100495e4:	910a      	str	r1, [sp, #40]	@ 0x28
100495e6:	9008      	str	r0, [sp, #32]
100495e8:	f002 ff84 	bl	1004c4f4 <csmem_init>
100495ec:	2401      	movs	r4, #1
100495ee:	2138      	movs	r1, #56	@ 0x38
100495f0:	4620      	mov	r0, r4
100495f2:	f002 ff97 	bl	1004c524 <csmem_mem_0_assign>
100495f6:	4933      	ldr	r1, [pc, #204]	@ (100496c4 <__arm_cp.1_0>)
100495f8:	7ac9      	ldrb	r1, [r1, #11]
100495fa:	2234      	movs	r2, #52	@ 0x34
100495fc:	5481      	strb	r1, [r0, r2]
100495fe:	4e32      	ldr	r6, [pc, #200]	@ (100496c8 <__arm_cp.1_1>)
10049600:	6030      	str	r0, [r6, #0]
10049602:	2700      	movs	r7, #0
10049604:	7007      	strb	r7, [r0, #0]
10049606:	6830      	ldr	r0, [r6, #0]
10049608:	7047      	strb	r7, [r0, #1]
1004960a:	6830      	ldr	r0, [r6, #0]
1004960c:	7087      	strb	r7, [r0, #2]
1004960e:	6830      	ldr	r0, [r6, #0]
10049610:	21e1      	movs	r1, #225	@ 0xe1
10049612:	70c1      	strb	r1, [r0, #3]
10049614:	2005      	movs	r0, #5
10049616:	01c0      	lsls	r0, r0, #7
10049618:	6831      	ldr	r1, [r6, #0]
1004961a:	8088      	strh	r0, [r1, #4]
1004961c:	2030      	movs	r0, #48	@ 0x30
1004961e:	8508      	strh	r0, [r1, #40]	@ 0x28
10049620:	ad0e      	add	r5, sp, #56	@ 0x38
10049622:	a90d      	add	r1, sp, #52	@ 0x34
10049624:	aa0c      	add	r2, sp, #48	@ 0x30
10049626:	4628      	mov	r0, r5
10049628:	f7f8 f988 	bl	1004193c <BLEPLAT_GetPartInfo>
1004962c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004962e:	0200      	lsls	r0, r0, #8
10049630:	7829      	ldrb	r1, [r5, #0]
10049632:	0109      	lsls	r1, r1, #4
10049634:	4301      	orrs	r1, r0
10049636:	980d      	ldr	r0, [sp, #52]	@ 0x34
10049638:	0300      	lsls	r0, r0, #12
1004963a:	4308      	orrs	r0, r1
1004963c:	1d00      	adds	r0, r0, #4
1004963e:	6831      	ldr	r1, [r6, #0]
10049640:	8548      	strh	r0, [r1, #42]	@ 0x2a
10049642:	2118      	movs	r1, #24
10049644:	4620      	mov	r0, r4
10049646:	f002 ff6d 	bl	1004c524 <csmem_mem_0_assign>
1004964a:	4920      	ldr	r1, [pc, #128]	@ (100496cc <__arm_cp.1_2>)
1004964c:	6008      	str	r0, [r1, #0]
1004964e:	7507      	strb	r7, [r0, #20]
10049650:	f003 fa2e 	bl	1004cab0 <tsk_init>
10049654:	981c      	ldr	r0, [sp, #112]	@ 0x70
10049656:	9006      	str	r0, [sp, #24]
10049658:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
1004965a:	9405      	str	r4, [sp, #20]
1004965c:	981a      	ldr	r0, [sp, #104]	@ 0x68
1004965e:	9004      	str	r0, [sp, #16]
10049660:	9819      	ldr	r0, [sp, #100]	@ 0x64
10049662:	9003      	str	r0, [sp, #12]
10049664:	9818      	ldr	r0, [sp, #96]	@ 0x60
10049666:	9002      	str	r0, [sp, #8]
10049668:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1004966a:	9001      	str	r0, [sp, #4]
1004966c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004966e:	9500      	str	r5, [sp, #0]
10049670:	9808      	ldr	r0, [sp, #32]
10049672:	990a      	ldr	r1, [sp, #40]	@ 0x28
10049674:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10049676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10049678:	f002 facc 	bl	1004bc14 <LL_init_ucfg_weak>
1004967c:	f002 ff38 	bl	1004c4f0 <MBM_init_ucfg_weak>
10049680:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
10049682:	2c01      	cmp	r4, #1
10049684:	d101      	bne.n	1004968a <BlueNRG_Stack_Initialize_Layers+0xae>
10049686:	f7ff ffa3 	bl	100495d0 <ACL_pkt_init_ucfg_weak>
1004968a:	f000 f989 	bl	100499a0 <Events_Process_init>
1004968e:	2f01      	cmp	r7, #1
10049690:	d101      	bne.n	10049696 <BlueNRG_Stack_Initialize_Layers+0xba>
10049692:	f000 f8ba 	bl	1004980a <log_init_ucfg_weak>
10049696:	6830      	ldr	r0, [r6, #0]
10049698:	212c      	movs	r1, #44	@ 0x2c
1004969a:	5c40      	ldrb	r0, [r0, r1]
1004969c:	07c0      	lsls	r0, r0, #31
1004969e:	d10e      	bne.n	100496be <BlueNRG_Stack_Initialize_Layers+0xe2>
100496a0:	2c01      	cmp	r4, #1
100496a2:	d106      	bne.n	100496b2 <BlueNRG_Stack_Initialize_Layers+0xd6>
100496a4:	9816      	ldr	r0, [sp, #88]	@ 0x58
100496a6:	f000 ffab 	bl	1004a600 <L2C_init_ucfg_weak>
100496aa:	f003 f9e5 	bl	1004ca78 <smp_init_ucfg_weak>
100496ae:	f000 fea6 	bl	1004a3fe <GAT_att_cmn_init_ucfg_weak>
100496b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
100496b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100496b6:	462a      	mov	r2, r5
100496b8:	4623      	mov	r3, r4
100496ba:	f000 fb17 	bl	10049cec <GAP_init_context>
100496be:	b00f      	add	sp, #60	@ 0x3c
100496c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100496c2:	46c0      	nop			@ (mov r8, r8)

100496c4 <__arm_cp.1_0>:
100496c4:	20000668 	.word	0x20000668

100496c8 <__arm_cp.1_1>:
100496c8:	20000648 	.word	0x20000648

100496cc <__arm_cp.1_2>:
100496cc:	2000069c 	.word	0x2000069c

100496d0 <_BlueNRG_Stack_Initialization>:
100496d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100496d2:	b095      	sub	sp, #84	@ 0x54
100496d4:	2001      	movs	r0, #1
100496d6:	0481      	lsls	r1, r0, #18
100496d8:	9114      	str	r1, [sp, #80]	@ 0x50
100496da:	482e      	ldr	r0, [pc, #184]	@ (10049794 <__arm_cp.2_0>)
100496dc:	6001      	str	r1, [r0, #0]
100496de:	f3bf 8f4f 	dsb	sy
100496e2:	f3bf 8f6f 	isb	sy
100496e6:	f7f8 fe13 	bl	10042310 <BLEPLAT_CNTR_GlobDisableBlue>
100496ea:	f7f8 f9cb 	bl	10041a84 <BLEPLAT_ClearRadioTimerValue>
100496ee:	2000      	movs	r0, #0
100496f0:	9012      	str	r0, [sp, #72]	@ 0x48
100496f2:	43c0      	mvns	r0, r0
100496f4:	f7f8 fdf8 	bl	100422e8 <BLEPLAT_CNTR_ClearInterrupt>
100496f8:	f000 ff75 	bl	1004a5e6 <data_length_extension_csr_ucfg_weak>
100496fc:	9013      	str	r0, [sp, #76]	@ 0x4c
100496fe:	f000 ff76 	bl	1004a5ee <phy_upd_csr_ucfg_weak>
10049702:	9011      	str	r0, [sp, #68]	@ 0x44
10049704:	f002 f9d7 	bl	1004bab6 <ext_adv_scan_enabled_ucfg_weak>
10049708:	9010      	str	r0, [sp, #64]	@ 0x40
1004970a:	f001 f993 	bl	1004aa34 <llc_priv_controller_privacy_csr_ucfg_weak>
1004970e:	900f      	str	r0, [sp, #60]	@ 0x3c
10049710:	f003 f9b3 	bl	1004ca7a <secure_connections_csr_ucfg_weak>
10049714:	f000 ff6d 	bl	1004a5f2 <scan_csr_ucfg_weak>
10049718:	900e      	str	r0, [sp, #56]	@ 0x38
1004971a:	f000 ff6e 	bl	1004a5fa <l2c_cos_csr_ucfg_weak>
1004971e:	900d      	str	r0, [sp, #52]	@ 0x34
10049720:	f001 f980 	bl	1004aa24 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10049724:	900c      	str	r0, [sp, #48]	@ 0x30
10049726:	f001 f97f 	bl	1004aa28 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004972a:	900b      	str	r0, [sp, #44]	@ 0x2c
1004972c:	f000 ff57 	bl	1004a5de <cte_csr_ucfg_weak>
10049730:	4604      	mov	r4, r0
10049732:	f000 ff5a 	bl	1004a5ea <pcl_csr_ucfg_weak>
10049736:	4605      	mov	r5, r0
10049738:	f000 ff5d 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004973c:	4606      	mov	r6, r0
1004973e:	f000 fed5 	bl	1004a4ec <chc_csr_ucfg_weak>
10049742:	4607      	mov	r7, r0
10049744:	f000 f863 	bl	1004980e <log_csr_ucfg_weak>
10049748:	b2c0      	uxtb	r0, r0
1004974a:	b2f9      	uxtb	r1, r7
1004974c:	9108      	str	r1, [sp, #32]
1004974e:	9009      	str	r0, [sp, #36]	@ 0x24
10049750:	b2f0      	uxtb	r0, r6
10049752:	b2e9      	uxtb	r1, r5
10049754:	b2e2      	uxtb	r2, r4
10049756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10049758:	b2db      	uxtb	r3, r3
1004975a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1004975c:	b2e4      	uxtb	r4, r4
1004975e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10049760:	b2ed      	uxtb	r5, r5
10049762:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10049764:	b2f6      	uxtb	r6, r6
10049766:	9f12      	ldr	r7, [sp, #72]	@ 0x48
10049768:	9700      	str	r7, [sp, #0]
1004976a:	9601      	str	r6, [sp, #4]
1004976c:	9502      	str	r5, [sp, #8]
1004976e:	9403      	str	r4, [sp, #12]
10049770:	9304      	str	r3, [sp, #16]
10049772:	9205      	str	r2, [sp, #20]
10049774:	9106      	str	r1, [sp, #24]
10049776:	9007      	str	r0, [sp, #28]
10049778:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1004977a:	b2c0      	uxtb	r0, r0
1004977c:	9911      	ldr	r1, [sp, #68]	@ 0x44
1004977e:	b2c9      	uxtb	r1, r1
10049780:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
10049782:	b2d3      	uxtb	r3, r2
10049784:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10049786:	f7ff ff29 	bl	100495dc <BlueNRG_Stack_Initialize_Layers>
1004978a:	4803      	ldr	r0, [pc, #12]	@ (10049798 <__arm_cp.2_1>)
1004978c:	9914      	ldr	r1, [sp, #80]	@ 0x50
1004978e:	6001      	str	r1, [r0, #0]
10049790:	b015      	add	sp, #84	@ 0x54
10049792:	bdf0      	pop	{r4, r5, r6, r7, pc}

10049794 <__arm_cp.2_0>:
10049794:	e000e180 	.word	0xe000e180

10049798 <__arm_cp.2_1>:
10049798:	e000e100 	.word	0xe000e100

1004979c <BLE_STACK_Init>:
1004979c:	b5b0      	push	{r4, r5, r7, lr}
1004979e:	4605      	mov	r5, r0
100497a0:	7ac0      	ldrb	r0, [r0, #11]
100497a2:	2412      	movs	r4, #18
100497a4:	2880      	cmp	r0, #128	@ 0x80
100497a6:	d829      	bhi.n	100497fc <BLE_STACK_Init+0x60>
100497a8:	8c29      	ldrh	r1, [r5, #32]
100497aa:	2917      	cmp	r1, #23
100497ac:	d326      	bcc.n	100497fc <BLE_STACK_Init+0x60>
100497ae:	4814      	ldr	r0, [pc, #80]	@ (10049800 <__arm_cp.3_0>)
100497b0:	1d82      	adds	r2, r0, #6
100497b2:	4291      	cmp	r1, r2
100497b4:	d822      	bhi.n	100497fc <BLE_STACK_Init+0x60>
100497b6:	8a29      	ldrh	r1, [r5, #16]
100497b8:	2917      	cmp	r1, #23
100497ba:	d31f      	bcc.n	100497fc <BLE_STACK_Init+0x60>
100497bc:	4281      	cmp	r1, r0
100497be:	d81d      	bhi.n	100497fc <BLE_STACK_Init+0x60>
100497c0:	7ea8      	ldrb	r0, [r5, #26]
100497c2:	2800      	cmp	r0, #0
100497c4:	d01a      	beq.n	100497fc <BLE_STACK_Init+0x60>
100497c6:	f001 f92f 	bl	1004aa28 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100497ca:	2800      	cmp	r0, #0
100497cc:	d008      	beq.n	100497e0 <BLE_STACK_Init+0x44>
100497ce:	7ee8      	ldrb	r0, [r5, #27]
100497d0:	2800      	cmp	r0, #0
100497d2:	d013      	beq.n	100497fc <BLE_STACK_Init+0x60>
100497d4:	2880      	cmp	r0, #128	@ 0x80
100497d6:	d811      	bhi.n	100497fc <BLE_STACK_Init+0x60>
100497d8:	7f28      	ldrb	r0, [r5, #28]
100497da:	1e40      	subs	r0, r0, #1
100497dc:	280e      	cmp	r0, #14
100497de:	d80d      	bhi.n	100497fc <BLE_STACK_Init+0x60>
100497e0:	4808      	ldr	r0, [pc, #32]	@ (10049804 <__arm_cp.3_1>)
100497e2:	2234      	movs	r2, #52	@ 0x34
100497e4:	4629      	mov	r1, r5
100497e6:	f7f8 f889 	bl	100418fc <BLEPLAT_MemCpy>
100497ea:	f002 fea5 	bl	1004c538 <BlueNRG_Stack_Initialize_RAM_check>
100497ee:	2800      	cmp	r0, #0
100497f0:	d403      	bmi.n	100497fa <BLE_STACK_Init+0x5e>
100497f2:	f7ff ff6d 	bl	100496d0 <_BlueNRG_Stack_Initialization>
100497f6:	2400      	movs	r4, #0
100497f8:	e000      	b.n	100497fc <BLE_STACK_Init+0x60>
100497fa:	2487      	movs	r4, #135	@ 0x87
100497fc:	4620      	mov	r0, r4
100497fe:	bdb0      	pop	{r4, r5, r7, pc}

10049800 <__arm_cp.3_0>:
10049800:	000003fa 	.word	0x000003fa

10049804 <__arm_cp.3_1>:
10049804:	20000668 	.word	0x20000668

10049808 <log_verbosity_get_ucfg_weak>:
10049808:	4770      	bx	lr

1004980a <log_init_ucfg_weak>:
1004980a:	4770      	bx	lr

1004980c <log_notify_us_flush_ucfg_weak>:
1004980c:	4770      	bx	lr

1004980e <log_csr_ucfg_weak>:
1004980e:	2000      	movs	r0, #0
10049810:	4770      	bx	lr
	...

10049814 <aci_event_fifo_push_header>:
10049814:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10049816:	4615      	mov	r5, r2
10049818:	460c      	mov	r4, r1
1004981a:	4606      	mov	r6, r0
1004981c:	0608      	lsls	r0, r1, #24
1004981e:	d414      	bmi.n	1004984a <aci_event_fifo_push_header+0x36>
10049820:	aa02      	add	r2, sp, #8
10049822:	af01      	add	r7, sp, #4
10049824:	4630      	mov	r0, r6
10049826:	4619      	mov	r1, r3
10049828:	463b      	mov	r3, r7
1004982a:	f000 f853 	bl	100498d4 <fifoBuf_getFreeHeader>
1004982e:	2800      	cmp	r0, #0
10049830:	d021      	beq.n	10049876 <aci_event_fifo_push_header+0x62>
10049832:	0660      	lsls	r0, r4, #25
10049834:	d438      	bmi.n	100498a8 <aci_event_fifo_push_header+0x94>
10049836:	9802      	ldr	r0, [sp, #8]
10049838:	7881      	ldrb	r1, [r0, #2]
1004983a:	22fc      	movs	r2, #252	@ 0xfc
1004983c:	400a      	ands	r2, r1
1004983e:	7082      	strb	r2, [r0, #2]
10049840:	9901      	ldr	r1, [sp, #4]
10049842:	8001      	strh	r1, [r0, #0]
10049844:	8071      	strh	r1, [r6, #2]
10049846:	2701      	movs	r7, #1
10049848:	e02f      	b.n	100498aa <aci_event_fifo_push_header+0x96>
1004984a:	f3ef 8010 	mrs	r0, PRIMASK
1004984e:	b672      	cpsid	i
10049850:	aa02      	add	r2, sp, #8
10049852:	af01      	add	r7, sp, #4
10049854:	4630      	mov	r0, r6
10049856:	4619      	mov	r1, r3
10049858:	463b      	mov	r3, r7
1004985a:	f000 f83b 	bl	100498d4 <fifoBuf_getFreeHeader>
1004985e:	2800      	cmp	r0, #0
10049860:	d00b      	beq.n	1004987a <aci_event_fifo_push_header+0x66>
10049862:	9902      	ldr	r1, [sp, #8]
10049864:	788a      	ldrb	r2, [r1, #2]
10049866:	23fc      	movs	r3, #252	@ 0xfc
10049868:	4013      	ands	r3, r2
1004986a:	708b      	strb	r3, [r1, #2]
1004986c:	9a01      	ldr	r2, [sp, #4]
1004986e:	800a      	strh	r2, [r1, #0]
10049870:	8072      	strh	r2, [r6, #2]
10049872:	2701      	movs	r7, #1
10049874:	e002      	b.n	1004987c <aci_event_fifo_push_header+0x68>
10049876:	2700      	movs	r7, #0
10049878:	e003      	b.n	10049882 <aci_event_fifo_push_header+0x6e>
1004987a:	2700      	movs	r7, #0
1004987c:	b662      	cpsie	i
1004987e:	2800      	cmp	r0, #0
10049880:	d113      	bne.n	100498aa <aci_event_fifo_push_header+0x96>
10049882:	f3ef 8010 	mrs	r0, PRIMASK
10049886:	b672      	cpsid	i
10049888:	06a0      	lsls	r0, r4, #26
1004988a:	d40a      	bmi.n	100498a2 <aci_event_fifo_push_header+0x8e>
1004988c:	4810      	ldr	r0, [pc, #64]	@ (100498d0 <__arm_cp.0_0>)
1004988e:	6800      	ldr	r0, [r0, #0]
10049890:	6801      	ldr	r1, [r0, #0]
10049892:	2208      	movs	r2, #8
10049894:	430a      	orrs	r2, r1
10049896:	6002      	str	r2, [r0, #0]
10049898:	2000      	movs	r0, #0
1004989a:	f003 f947 	bl	1004cb2c <tsk_notify_idx>
1004989e:	f7f7 fe56 	bl	1004154e <BLE_STACK_ProcessRequest>
100498a2:	b662      	cpsie	i
100498a4:	2600      	movs	r6, #0
100498a6:	e00a      	b.n	100498be <aci_event_fifo_push_header+0xaa>
100498a8:	2700      	movs	r7, #0
100498aa:	9e02      	ldr	r6, [sp, #8]
100498ac:	70f5      	strb	r5, [r6, #3]
100498ae:	00a0      	lsls	r0, r4, #2
100498b0:	2160      	movs	r1, #96	@ 0x60
100498b2:	4001      	ands	r1, r0
100498b4:	78b0      	ldrb	r0, [r6, #2]
100498b6:	2203      	movs	r2, #3
100498b8:	4002      	ands	r2, r0
100498ba:	1850      	adds	r0, r2, r1
100498bc:	70b0      	strb	r0, [r6, #2]
100498be:	2f00      	cmp	r7, #0
100498c0:	d004      	beq.n	100498cc <aci_event_fifo_push_header+0xb8>
100498c2:	2000      	movs	r0, #0
100498c4:	f003 f932 	bl	1004cb2c <tsk_notify_idx>
100498c8:	f7f7 fe41 	bl	1004154e <BLE_STACK_ProcessRequest>
100498cc:	4630      	mov	r0, r6
100498ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100498d0 <__arm_cp.0_0>:
100498d0:	2000064c 	.word	0x2000064c

100498d4 <fifoBuf_getFreeHeader>:
100498d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100498d6:	9200      	str	r2, [sp, #0]
100498d8:	8845      	ldrh	r5, [r0, #2]
100498da:	08ac      	lsrs	r4, r5, #2
100498dc:	801c      	strh	r4, [r3, #0]
100498de:	1c49      	adds	r1, r1, #1
100498e0:	b28a      	uxth	r2, r1
100498e2:	18a6      	adds	r6, r4, r2
100498e4:	8887      	ldrh	r7, [r0, #4]
100498e6:	42be      	cmp	r6, r7
100498e8:	d900      	bls.n	100498ec <fifoBuf_getFreeHeader+0x18>
100498ea:	1b09      	subs	r1, r1, r4
100498ec:	190a      	adds	r2, r1, r4
100498ee:	0092      	lsls	r2, r2, #2
100498f0:	42be      	cmp	r6, r7
100498f2:	d900      	bls.n	100498f6 <fifoBuf_getFreeHeader+0x22>
100498f4:	1c6d      	adds	r5, r5, #1
100498f6:	2603      	movs	r6, #3
100498f8:	4035      	ands	r5, r6
100498fa:	1952      	adds	r2, r2, r5
100498fc:	801a      	strh	r2, [r3, #0]
100498fe:	00a3      	lsls	r3, r4, #2
10049900:	181b      	adds	r3, r3, r0
10049902:	3308      	adds	r3, #8
10049904:	9c00      	ldr	r4, [sp, #0]
10049906:	6023      	str	r3, [r4, #0]
10049908:	b292      	uxth	r2, r2
1004990a:	8805      	ldrh	r5, [r0, #0]
1004990c:	1b52      	subs	r2, r2, r5
1004990e:	4617      	mov	r7, r2
10049910:	4037      	ands	r7, r6
10049912:	8884      	ldrh	r4, [r0, #4]
10049914:	4367      	muls	r7, r4
10049916:	4035      	ands	r5, r6
10049918:	1952      	adds	r2, r2, r5
1004991a:	0892      	lsrs	r2, r2, #2
1004991c:	19d2      	adds	r2, r2, r7
1004991e:	b295      	uxth	r5, r2
10049920:	88c6      	ldrh	r6, [r0, #6]
10049922:	42b5      	cmp	r5, r6
10049924:	d900      	bls.n	10049928 <fifoBuf_getFreeHeader+0x54>
10049926:	80c2      	strh	r2, [r0, #6]
10049928:	42a5      	cmp	r5, r4
1004992a:	d80a      	bhi.n	10049942 <fifoBuf_getFreeHeader+0x6e>
1004992c:	b209      	sxth	r1, r1
1004992e:	2900      	cmp	r1, #0
10049930:	d507      	bpl.n	10049942 <fifoBuf_getFreeHeader+0x6e>
10049932:	7899      	ldrb	r1, [r3, #2]
10049934:	22fc      	movs	r2, #252	@ 0xfc
10049936:	400a      	ands	r2, r1
10049938:	1c51      	adds	r1, r2, #1
1004993a:	7099      	strb	r1, [r3, #2]
1004993c:	3008      	adds	r0, #8
1004993e:	9900      	ldr	r1, [sp, #0]
10049940:	6008      	str	r0, [r1, #0]
10049942:	42a5      	cmp	r5, r4
10049944:	d901      	bls.n	1004994a <fifoBuf_getFreeHeader+0x76>
10049946:	2000      	movs	r0, #0
10049948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004994a:	2001      	movs	r0, #1
1004994c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004994e <aci_event_fifo_push>:
1004994e:	b580      	push	{r7, lr}
10049950:	0640      	lsls	r0, r0, #25
10049952:	d405      	bmi.n	10049960 <aci_event_fifo_push+0x12>
10049954:	7888      	ldrb	r0, [r1, #2]
10049956:	22fc      	movs	r2, #252	@ 0xfc
10049958:	4002      	ands	r2, r0
1004995a:	1c90      	adds	r0, r2, #2
1004995c:	7088      	strb	r0, [r1, #2]
1004995e:	bd80      	pop	{r7, pc}
10049960:	4608      	mov	r0, r1
10049962:	f000 f801 	bl	10049968 <event_notify_cb>
10049966:	bd80      	pop	{r7, pc}

10049968 <event_notify_cb>:
10049968:	b580      	push	{r7, lr}
1004996a:	1d01      	adds	r1, r0, #4
1004996c:	78c2      	ldrb	r2, [r0, #3]
1004996e:	2a14      	cmp	r2, #20
10049970:	d804      	bhi.n	1004997c <event_notify_cb+0x14>
10049972:	6842      	ldr	r2, [r0, #4]
10049974:	7880      	ldrb	r0, [r0, #2]
10049976:	0880      	lsrs	r0, r0, #2
10049978:	4790      	blx	r2
1004997a:	bd80      	pop	{r7, pc}
1004997c:	2a3d      	cmp	r2, #61	@ 0x3d
1004997e:	d803      	bhi.n	10049988 <event_notify_cb+0x20>
10049980:	2000      	movs	r0, #0
10049982:	f000 f8e9 	bl	10049b58 <hci_event_notify_cb>
10049986:	bd80      	pop	{r7, pc}
10049988:	2a3f      	cmp	r2, #63	@ 0x3f
1004998a:	d803      	bhi.n	10049994 <event_notify_cb+0x2c>
1004998c:	2000      	movs	r0, #0
1004998e:	f000 f8f5 	bl	10049b7c <hci_rx_data_notify_cb>
10049992:	bd80      	pop	{r7, pc}
10049994:	2a60      	cmp	r2, #96	@ 0x60
10049996:	d802      	bhi.n	1004999e <event_notify_cb+0x36>
10049998:	2000      	movs	r0, #0
1004999a:	f000 f8e4 	bl	10049b66 <hci_aci_event_notify_cb>
1004999e:	bd80      	pop	{r7, pc}

100499a0 <Events_Process_init>:
100499a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100499a2:	2001      	movs	r0, #1
100499a4:	211c      	movs	r1, #28
100499a6:	4a29      	ldr	r2, [pc, #164]	@ (10049a4c <__arm_cp.7_0>)
100499a8:	4790      	blx	r2
100499aa:	4f29      	ldr	r7, [pc, #164]	@ (10049a50 <__arm_cp.7_1>)
100499ac:	6038      	str	r0, [r7, #0]
100499ae:	4d29      	ldr	r5, [pc, #164]	@ (10049a54 <__arm_cp.7_2>)
100499b0:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
100499b2:	1e40      	subs	r0, r0, #1
100499b4:	2603      	movs	r6, #3
100499b6:	4330      	orrs	r0, r6
100499b8:	1c40      	adds	r0, r0, #1
100499ba:	0880      	lsrs	r0, r0, #2
100499bc:	1cc0      	adds	r0, r0, #3
100499be:	2404      	movs	r4, #4
100499c0:	4621      	mov	r1, r4
100499c2:	4a22      	ldr	r2, [pc, #136]	@ (10049a4c <__arm_cp.7_0>)
100499c4:	4790      	blx	r2
100499c6:	6839      	ldr	r1, [r7, #0]
100499c8:	6048      	str	r0, [r1, #4]
100499ca:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
100499cc:	1e40      	subs	r0, r0, #1
100499ce:	4330      	orrs	r0, r6
100499d0:	1c40      	adds	r0, r0, #1
100499d2:	0880      	lsrs	r0, r0, #2
100499d4:	1cc0      	adds	r0, r0, #3
100499d6:	4621      	mov	r1, r4
100499d8:	4d1c      	ldr	r5, [pc, #112]	@ (10049a4c <__arm_cp.7_0>)
100499da:	47a8      	blx	r5
100499dc:	462a      	mov	r2, r5
100499de:	6839      	ldr	r1, [r7, #0]
100499e0:	6088      	str	r0, [r1, #8]
100499e2:	4d1c      	ldr	r5, [pc, #112]	@ (10049a54 <__arm_cp.7_2>)
100499e4:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
100499e6:	1e40      	subs	r0, r0, #1
100499e8:	4330      	orrs	r0, r6
100499ea:	1c40      	adds	r0, r0, #1
100499ec:	0880      	lsrs	r0, r0, #2
100499ee:	1cc0      	adds	r0, r0, #3
100499f0:	4621      	mov	r1, r4
100499f2:	4790      	blx	r2
100499f4:	6839      	ldr	r1, [r7, #0]
100499f6:	60c8      	str	r0, [r1, #12]
100499f8:	f7ff fdb0 	bl	1004955c <hal_radio_activity_state_init>
100499fc:	6838      	ldr	r0, [r7, #0]
100499fe:	6842      	ldr	r2, [r0, #4]
10049a00:	2100      	movs	r1, #0
10049a02:	8011      	strh	r1, [r2, #0]
10049a04:	8051      	strh	r1, [r2, #2]
10049a06:	6883      	ldr	r3, [r0, #8]
10049a08:	8019      	strh	r1, [r3, #0]
10049a0a:	80d1      	strh	r1, [r2, #6]
10049a0c:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
10049a0e:	1e7f      	subs	r7, r7, #1
10049a10:	4337      	orrs	r7, r6
10049a12:	1c7f      	adds	r7, r7, #1
10049a14:	08bf      	lsrs	r7, r7, #2
10049a16:	8097      	strh	r7, [r2, #4]
10049a18:	8059      	strh	r1, [r3, #2]
10049a1a:	80d9      	strh	r1, [r3, #6]
10049a1c:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
10049a1e:	1e7f      	subs	r7, r7, #1
10049a20:	4337      	orrs	r7, r6
10049a22:	1c7f      	adds	r7, r7, #1
10049a24:	08bf      	lsrs	r7, r7, #2
10049a26:	809f      	strh	r7, [r3, #4]
10049a28:	68c7      	ldr	r7, [r0, #12]
10049a2a:	8039      	strh	r1, [r7, #0]
10049a2c:	6102      	str	r2, [r0, #16]
10049a2e:	6143      	str	r3, [r0, #20]
10049a30:	80f9      	strh	r1, [r7, #6]
10049a32:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
10049a34:	1e52      	subs	r2, r2, #1
10049a36:	4332      	orrs	r2, r6
10049a38:	1c52      	adds	r2, r2, #1
10049a3a:	0892      	lsrs	r2, r2, #2
10049a3c:	80ba      	strh	r2, [r7, #4]
10049a3e:	8079      	strh	r1, [r7, #2]
10049a40:	6187      	str	r7, [r0, #24]
10049a42:	4622      	mov	r2, r4
10049a44:	f7f7 ff6a 	bl	1004191c <BLEPLAT_MemSet>
10049a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10049a4a:	46c0      	nop			@ (mov r8, r8)

10049a4c <__arm_cp.7_0>:
10049a4c:	1004c525 	.word	0x1004c525

10049a50 <__arm_cp.7_1>:
10049a50:	2000064c 	.word	0x2000064c

10049a54 <__arm_cp.7_2>:
10049a54:	20000668 	.word	0x20000668

10049a58 <Events_Process_Q>:
10049a58:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10049a5a:	4d3d      	ldr	r5, [pc, #244]	@ (10049b50 <__arm_cp.8_0>)
10049a5c:	6828      	ldr	r0, [r5, #0]
10049a5e:	3010      	adds	r0, #16
10049a60:	2100      	movs	r1, #0
10049a62:	2906      	cmp	r1, #6
10049a64:	d005      	beq.n	10049a72 <Events_Process_Q+0x1a>
10049a66:	c804      	ldmia	r0!, {r2}
10049a68:	8852      	ldrh	r2, [r2, #2]
10049a6a:	ab01      	add	r3, sp, #4
10049a6c:	525a      	strh	r2, [r3, r1]
10049a6e:	1c89      	adds	r1, r1, #2
10049a70:	e7f7      	b.n	10049a62 <Events_Process_Q+0xa>
10049a72:	f3ef 8010 	mrs	r0, PRIMASK
10049a76:	b672      	cpsid	i
10049a78:	6828      	ldr	r0, [r5, #0]
10049a7a:	6804      	ldr	r4, [r0, #0]
10049a7c:	2700      	movs	r7, #0
10049a7e:	6007      	str	r7, [r0, #0]
10049a80:	b662      	cpsie	i
10049a82:	07e0      	lsls	r0, r4, #31
10049a84:	d002      	beq.n	10049a8c <Events_Process_Q+0x34>
10049a86:	2000      	movs	r0, #0
10049a88:	f000 f89f 	bl	10049bca <hci_hardware_error_event_cb>
10049a8c:	07a0      	lsls	r0, r4, #30
10049a8e:	d502      	bpl.n	10049a96 <Events_Process_Q+0x3e>
10049a90:	2001      	movs	r0, #1
10049a92:	f000 f89a 	bl	10049bca <hci_hardware_error_event_cb>
10049a96:	0760      	lsls	r0, r4, #29
10049a98:	d502      	bpl.n	10049aa0 <Events_Process_Q+0x48>
10049a9a:	2002      	movs	r0, #2
10049a9c:	f000 f895 	bl	10049bca <hci_hardware_error_event_cb>
10049aa0:	0720      	lsls	r0, r4, #28
10049aa2:	d502      	bpl.n	10049aaa <Events_Process_Q+0x52>
10049aa4:	2003      	movs	r0, #3
10049aa6:	f000 f890 	bl	10049bca <hci_hardware_error_event_cb>
10049aaa:	06e0      	lsls	r0, r4, #27
10049aac:	d54a      	bpl.n	10049b44 <Events_Process_Q+0xec>
10049aae:	2004      	movs	r0, #4
10049ab0:	f000 f88b 	bl	10049bca <hci_hardware_error_event_cb>
10049ab4:	e046      	b.n	10049b44 <Events_Process_Q+0xec>
10049ab6:	0078      	lsls	r0, r7, #1
10049ab8:	a901      	add	r1, sp, #4
10049aba:	5a0e      	ldrh	r6, [r1, r0]
10049abc:	9700      	str	r7, [sp, #0]
10049abe:	00bf      	lsls	r7, r7, #2
10049ac0:	6828      	ldr	r0, [r5, #0]
10049ac2:	19c0      	adds	r0, r0, r7
10049ac4:	6900      	ldr	r0, [r0, #16]
10049ac6:	8801      	ldrh	r1, [r0, #0]
10049ac8:	8802      	ldrh	r2, [r0, #0]
10049aca:	42b2      	cmp	r2, r6
10049acc:	d02a      	beq.n	10049b24 <Events_Process_Q+0xcc>
10049ace:	0889      	lsrs	r1, r1, #2
10049ad0:	1c89      	adds	r1, r1, #2
10049ad2:	0089      	lsls	r1, r1, #2
10049ad4:	1844      	adds	r4, r0, r1
10049ad6:	78a1      	ldrb	r1, [r4, #2]
10049ad8:	2203      	movs	r2, #3
10049ada:	400a      	ands	r2, r1
10049adc:	2a01      	cmp	r2, #1
10049ade:	d002      	beq.n	10049ae6 <Events_Process_Q+0x8e>
10049ae0:	2a00      	cmp	r2, #0
10049ae2:	d103      	bne.n	10049aec <Events_Process_Q+0x94>
10049ae4:	e01e      	b.n	10049b24 <Events_Process_Q+0xcc>
10049ae6:	7a81      	ldrb	r1, [r0, #10]
10049ae8:	3008      	adds	r0, #8
10049aea:	4604      	mov	r4, r0
10049aec:	0648      	lsls	r0, r1, #25
10049aee:	d403      	bmi.n	10049af8 <Events_Process_Q+0xa0>
10049af0:	4620      	mov	r0, r4
10049af2:	f7ff ff39 	bl	10049968 <event_notify_cb>
10049af6:	e00a      	b.n	10049b0e <Events_Process_Q+0xb6>
10049af8:	78e0      	ldrb	r0, [r4, #3]
10049afa:	2813      	cmp	r0, #19
10049afc:	d207      	bcs.n	10049b0e <Events_Process_Q+0xb6>
10049afe:	0080      	lsls	r0, r0, #2
10049b00:	4914      	ldr	r1, [pc, #80]	@ (10049b54 <__arm_cp.8_1>)
10049b02:	580a      	ldr	r2, [r1, r0]
10049b04:	1d21      	adds	r1, r4, #4
10049b06:	4620      	mov	r0, r4
10049b08:	4790      	blx	r2
10049b0a:	2800      	cmp	r0, #0
10049b0c:	d105      	bne.n	10049b1a <Events_Process_Q+0xc2>
10049b0e:	6828      	ldr	r0, [r5, #0]
10049b10:	19c0      	adds	r0, r0, r7
10049b12:	6900      	ldr	r0, [r0, #16]
10049b14:	8821      	ldrh	r1, [r4, #0]
10049b16:	8001      	strh	r1, [r0, #0]
10049b18:	e7d5      	b.n	10049ac6 <Events_Process_Q+0x6e>
10049b1a:	2000      	movs	r0, #0
10049b1c:	f003 f806 	bl	1004cb2c <tsk_notify_idx>
10049b20:	f7f7 fd15 	bl	1004154e <BLE_STACK_ProcessRequest>
10049b24:	f3ef 8010 	mrs	r0, PRIMASK
10049b28:	b672      	cpsid	i
10049b2a:	6828      	ldr	r0, [r5, #0]
10049b2c:	19c0      	adds	r0, r0, r7
10049b2e:	6900      	ldr	r0, [r0, #16]
10049b30:	8841      	ldrh	r1, [r0, #2]
10049b32:	8802      	ldrh	r2, [r0, #0]
10049b34:	4291      	cmp	r1, r2
10049b36:	d102      	bne.n	10049b3e <Events_Process_Q+0xe6>
10049b38:	2100      	movs	r1, #0
10049b3a:	8001      	strh	r1, [r0, #0]
10049b3c:	8041      	strh	r1, [r0, #2]
10049b3e:	b662      	cpsie	i
10049b40:	9f00      	ldr	r7, [sp, #0]
10049b42:	1c7f      	adds	r7, r7, #1
10049b44:	2f03      	cmp	r7, #3
10049b46:	d1b6      	bne.n	10049ab6 <Events_Process_Q+0x5e>
10049b48:	f7ff fd12 	bl	10049570 <hal_radio_activity_state_cb_check>
10049b4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10049b4e:	46c0      	nop			@ (mov r8, r8)

10049b50 <__arm_cp.8_0>:
10049b50:	2000064c 	.word	0x2000064c

10049b54 <__arm_cp.8_1>:
10049b54:	1004e7ac 	.word	0x1004e7ac

10049b58 <hci_event_notify_cb>:
10049b58:	b580      	push	{r7, lr}
10049b5a:	4608      	mov	r0, r1
10049b5c:	7889      	ldrb	r1, [r1, #2]
10049b5e:	1cc9      	adds	r1, r1, #3
10049b60:	f7ff f9f4 	bl	10048f4c <BLE_STACK_Event>
10049b64:	bd80      	pop	{r7, pc}

10049b66 <hci_aci_event_notify_cb>:
10049b66:	b580      	push	{r7, lr}
10049b68:	4608      	mov	r0, r1
10049b6a:	7889      	ldrb	r1, [r1, #2]
10049b6c:	78c2      	ldrb	r2, [r0, #3]
10049b6e:	0212      	lsls	r2, r2, #8
10049b70:	1851      	adds	r1, r2, r1
10049b72:	1d09      	adds	r1, r1, #4
10049b74:	b289      	uxth	r1, r1
10049b76:	f7ff f9e9 	bl	10048f4c <BLE_STACK_Event>
10049b7a:	bd80      	pop	{r7, pc}

10049b7c <hci_rx_data_notify_cb>:
10049b7c:	b580      	push	{r7, lr}
10049b7e:	4608      	mov	r0, r1
10049b80:	78c9      	ldrb	r1, [r1, #3]
10049b82:	7902      	ldrb	r2, [r0, #4]
10049b84:	0212      	lsls	r2, r2, #8
10049b86:	1851      	adds	r1, r2, r1
10049b88:	1d49      	adds	r1, r1, #5
10049b8a:	b289      	uxth	r1, r1
10049b8c:	f7ff f9de 	bl	10048f4c <BLE_STACK_Event>
10049b90:	bd80      	pop	{r7, pc}

10049b92 <hci_disconnection_complete_event_int_cb_ucfg_weak>:
10049b92:	2000      	movs	r0, #0
10049b94:	4770      	bx	lr

10049b96 <hci_encryption_change_event_int_cb_ucfg_weak>:
10049b96:	2000      	movs	r0, #0
10049b98:	4770      	bx	lr

10049b9a <hci_encryption_key_refresh_complete_event_int_cb_ucfg_weak>:
10049b9a:	2000      	movs	r0, #0
10049b9c:	4770      	bx	lr

10049b9e <hci_le_connection_complete_event_int_cb_ucfg_weak>:
10049b9e:	2000      	movs	r0, #0
10049ba0:	4770      	bx	lr

10049ba2 <hci_le_enhanced_connection_complete_event_int_cb_ucfg_weak>:
10049ba2:	2000      	movs	r0, #0
10049ba4:	4770      	bx	lr

10049ba6 <hci_le_long_term_key_request_event_int_cb_ucfg_weak>:
10049ba6:	2000      	movs	r0, #0
10049ba8:	4770      	bx	lr

10049baa <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg_weak>:
10049baa:	2000      	movs	r0, #0
10049bac:	4770      	bx	lr

10049bae <hci_le_generate_dhkey_complete_event_int_cb_ucfg_weak>:
10049bae:	2000      	movs	r0, #0
10049bb0:	4770      	bx	lr

10049bb2 <hci_le_advertising_report_event_int_cb_ucfg_weak>:
10049bb2:	2000      	movs	r0, #0
10049bb4:	4770      	bx	lr

10049bb6 <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
10049bb6:	2000      	movs	r0, #0
10049bb8:	4770      	bx	lr

10049bba <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
10049bba:	2000      	movs	r0, #0
10049bbc:	4770      	bx	lr

10049bbe <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
10049bbe:	2000      	movs	r0, #0
10049bc0:	4770      	bx	lr

10049bc2 <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
10049bc2:	2000      	movs	r0, #0
10049bc4:	4770      	bx	lr

10049bc6 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
10049bc6:	2000      	movs	r0, #0
10049bc8:	4770      	bx	lr

10049bca <hci_hardware_error_event_cb>:
10049bca:	b5e0      	push	{r5, r6, r7, lr}
10049bcc:	aa01      	add	r2, sp, #4
10049bce:	70d0      	strb	r0, [r2, #3]
10049bd0:	2001      	movs	r0, #1
10049bd2:	7090      	strb	r0, [r2, #2]
10049bd4:	2010      	movs	r0, #16
10049bd6:	7050      	strb	r0, [r2, #1]
10049bd8:	2104      	movs	r1, #4
10049bda:	7011      	strb	r1, [r2, #0]
10049bdc:	4610      	mov	r0, r2
10049bde:	f7ff f9b5 	bl	10048f4c <BLE_STACK_Event>
10049be2:	bd8c      	pop	{r2, r3, r7, pc}

10049be4 <gap_timers_callback_wrapper>:
10049be4:	b580      	push	{r7, lr}
10049be6:	6940      	ldr	r0, [r0, #20]
10049be8:	4901      	ldr	r1, [pc, #4]	@ (10049bf0 <__arm_cp.0_0>)
10049bea:	f003 f8ac 	bl	1004cd46 <cst_sharedCallback>
10049bee:	bd80      	pop	{r7, pc}

10049bf0 <__arm_cp.0_0>:
10049bf0:	10049bf5 	.word	0x10049bf5

10049bf4 <gap_timers_callback>:
10049bf4:	b580      	push	{r7, lr}
10049bf6:	2802      	cmp	r0, #2
10049bf8:	d007      	beq.n	10049c0a <gap_timers_callback+0x16>
10049bfa:	2801      	cmp	r0, #1
10049bfc:	d009      	beq.n	10049c12 <gap_timers_callback+0x1e>
10049bfe:	2800      	cmp	r0, #0
10049c00:	d106      	bne.n	10049c10 <gap_timers_callback+0x1c>
10049c02:	2000      	movs	r0, #0
10049c04:	f000 f97a 	bl	10049efc <GAP_LimDiscTimeoutcb_ucfg_weak>
10049c08:	bd80      	pop	{r7, pc}
10049c0a:	2000      	movs	r0, #0
10049c0c:	f003 fa4f 	bl	1004d0ae <GAP_DiscProcTimeoutcb_ucfg_weak>
10049c10:	bd80      	pop	{r7, pc}
10049c12:	2000      	movs	r0, #0
10049c14:	f000 f802 	bl	10049c1c <GAP_PrivateAddrTimercb>
10049c18:	bd80      	pop	{r7, pc}
	...

10049c1c <GAP_PrivateAddrTimercb>:
10049c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10049c1e:	b087      	sub	sp, #28
10049c20:	4831      	ldr	r0, [pc, #196]	@ (10049ce8 <__arm_cp.2_0>)
10049c22:	6804      	ldr	r4, [r0, #0]
10049c24:	a906      	add	r1, sp, #24
10049c26:	9104      	str	r1, [sp, #16]
10049c28:	2000      	movs	r0, #0
10049c2a:	9001      	str	r0, [sp, #4]
10049c2c:	7008      	strb	r0, [r1, #0]
10049c2e:	ae05      	add	r6, sp, #20
10049c30:	2001      	movs	r0, #1
10049c32:	7030      	strb	r0, [r6, #0]
10049c34:	f000 f952 	bl	10049edc <GAP_reset_privacy_timer>
10049c38:	205d      	movs	r0, #93	@ 0x5d
10049c3a:	9403      	str	r4, [sp, #12]
10049c3c:	5c27      	ldrb	r7, [r4, r0]
10049c3e:	1e78      	subs	r0, r7, #1
10049c40:	463d      	mov	r5, r7
10049c42:	4185      	sbcs	r5, r0
10049c44:	2020      	movs	r0, #32
10049c46:	4038      	ands	r0, r7
10049c48:	4244      	negs	r4, r0
10049c4a:	9002      	str	r0, [sp, #8]
10049c4c:	4144      	adcs	r4, r0
10049c4e:	9804      	ldr	r0, [sp, #16]
10049c50:	4631      	mov	r1, r6
10049c52:	f000 fb8f 	bl	1004a374 <GAP_check_adv_status>
10049c56:	2f00      	cmp	r7, #0
10049c58:	d101      	bne.n	10049c5e <GAP_PrivateAddrTimercb+0x42>
10049c5a:	2801      	cmp	r0, #1
10049c5c:	d13e      	bne.n	10049cdc <GAP_PrivateAddrTimercb+0xc0>
10049c5e:	402c      	ands	r4, r5
10049c60:	d138      	bne.n	10049cd4 <GAP_PrivateAddrTimercb+0xb8>
10049c62:	a805      	add	r0, sp, #20
10049c64:	7800      	ldrb	r0, [r0, #0]
10049c66:	2800      	cmp	r0, #0
10049c68:	d034      	beq.n	10049cd4 <GAP_PrivateAddrTimercb+0xb8>
10049c6a:	9c03      	ldr	r4, [sp, #12]
10049c6c:	4620      	mov	r0, r4
10049c6e:	305d      	adds	r0, #93	@ 0x5d
10049c70:	7bc0      	ldrb	r0, [r0, #15]
10049c72:	2800      	cmp	r0, #0
10049c74:	d034      	beq.n	10049ce0 <GAP_PrivateAddrTimercb+0xc4>
10049c76:	3428      	adds	r4, #40	@ 0x28
10049c78:	9d02      	ldr	r5, [sp, #8]
10049c7a:	2d00      	cmp	r5, #0
10049c7c:	d003      	beq.n	10049c86 <GAP_PrivateAddrTimercb+0x6a>
10049c7e:	7821      	ldrb	r1, [r4, #0]
10049c80:	2000      	movs	r0, #0
10049c82:	f003 fa11 	bl	1004d0a8 <GAP_enable_disable_scan_ucfg_weak>
10049c86:	a806      	add	r0, sp, #24
10049c88:	7800      	ldrb	r0, [r0, #0]
10049c8a:	2801      	cmp	r0, #1
10049c8c:	d102      	bne.n	10049c94 <GAP_PrivateAddrTimercb+0x78>
10049c8e:	2000      	movs	r0, #0
10049c90:	f000 fb34 	bl	1004a2fc <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
10049c94:	f000 f996 	bl	10049fc4 <GAP_generate_new_rpa>
10049c98:	2800      	cmp	r0, #0
10049c9a:	d104      	bne.n	10049ca6 <GAP_PrivateAddrTimercb+0x8a>
10049c9c:	2000      	movs	r0, #0
10049c9e:	2101      	movs	r1, #1
10049ca0:	f000 f968 	bl	10049f74 <GAP_start_privacy_timer>
10049ca4:	9001      	str	r0, [sp, #4]
10049ca6:	2d00      	cmp	r5, #0
10049ca8:	d00a      	beq.n	10049cc0 <GAP_PrivateAddrTimercb+0xa4>
10049caa:	7821      	ldrb	r1, [r4, #0]
10049cac:	2001      	movs	r0, #1
10049cae:	f003 f9fb 	bl	1004d0a8 <GAP_enable_disable_scan_ucfg_weak>
10049cb2:	2800      	cmp	r0, #0
10049cb4:	d004      	beq.n	10049cc0 <GAP_PrivateAddrTimercb+0xa4>
10049cb6:	9801      	ldr	r0, [sp, #4]
10049cb8:	2800      	cmp	r0, #0
10049cba:	d001      	beq.n	10049cc0 <GAP_PrivateAddrTimercb+0xa4>
10049cbc:	f000 f920 	bl	10049f00 <GAP_stop_privacy_timer>
10049cc0:	a806      	add	r0, sp, #24
10049cc2:	7800      	ldrb	r0, [r0, #0]
10049cc4:	2801      	cmp	r0, #1
10049cc6:	d109      	bne.n	10049cdc <GAP_PrivateAddrTimercb+0xc0>
10049cc8:	2006      	movs	r0, #6
10049cca:	f002 ff2f 	bl	1004cb2c <tsk_notify_idx>
10049cce:	f7f7 fc3e 	bl	1004154e <BLE_STACK_ProcessRequest>
10049cd2:	e003      	b.n	10049cdc <GAP_PrivateAddrTimercb+0xc0>
10049cd4:	2001      	movs	r0, #1
10049cd6:	4601      	mov	r1, r0
10049cd8:	f000 f94c 	bl	10049f74 <GAP_start_privacy_timer>
10049cdc:	b007      	add	sp, #28
10049cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
10049ce0:	2000      	movs	r0, #0
10049ce2:	2101      	movs	r1, #1
10049ce4:	e7f8      	b.n	10049cd8 <GAP_PrivateAddrTimercb+0xbc>
10049ce6:	46c0      	nop			@ (mov r8, r8)

10049ce8 <__arm_cp.2_0>:
10049ce8:	20000650 	.word	0x20000650

10049cec <GAP_init_context>:
10049cec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10049cee:	461f      	mov	r7, r3
10049cf0:	9201      	str	r2, [sp, #4]
10049cf2:	9102      	str	r1, [sp, #8]
10049cf4:	4605      	mov	r5, r0
10049cf6:	2401      	movs	r4, #1
10049cf8:	2178      	movs	r1, #120	@ 0x78
10049cfa:	4620      	mov	r0, r4
10049cfc:	f002 fc12 	bl	1004c524 <csmem_mem_0_assign>
10049d00:	21e1      	movs	r1, #225	@ 0xe1
10049d02:	0089      	lsls	r1, r1, #2
10049d04:	225a      	movs	r2, #90	@ 0x5a
10049d06:	5281      	strh	r1, [r0, r2]
10049d08:	4e24      	ldr	r6, [pc, #144]	@ (10049d9c <__arm_cp.3_0>)
10049d0a:	6030      	str	r0, [r6, #0]
10049d0c:	2d01      	cmp	r5, #1
10049d0e:	d117      	bne.n	10049d40 <GAP_init_context+0x54>
10049d10:	2001      	movs	r0, #1
10049d12:	2106      	movs	r1, #6
10049d14:	f002 fc06 	bl	1004c524 <csmem_mem_0_assign>
10049d18:	4601      	mov	r1, r0
10049d1a:	6830      	ldr	r0, [r6, #0]
10049d1c:	6381      	str	r1, [r0, #56]	@ 0x38
10049d1e:	2f01      	cmp	r7, #1
10049d20:	d10e      	bne.n	10049d40 <GAP_init_context+0x54>
10049d22:	2501      	movs	r5, #1
10049d24:	270e      	movs	r7, #14
10049d26:	4628      	mov	r0, r5
10049d28:	4639      	mov	r1, r7
10049d2a:	f002 fbfb 	bl	1004c524 <csmem_mem_0_assign>
10049d2e:	6831      	ldr	r1, [r6, #0]
10049d30:	64c8      	str	r0, [r1, #76]	@ 0x4c
10049d32:	4628      	mov	r0, r5
10049d34:	4639      	mov	r1, r7
10049d36:	f002 fbf5 	bl	1004c524 <csmem_mem_0_assign>
10049d3a:	4601      	mov	r1, r0
10049d3c:	6830      	ldr	r0, [r6, #0]
10049d3e:	6501      	str	r1, [r0, #80]	@ 0x50
10049d40:	9902      	ldr	r1, [sp, #8]
10049d42:	2901      	cmp	r1, #1
10049d44:	d10b      	bne.n	10049d5e <GAP_init_context+0x72>
10049d46:	9801      	ldr	r0, [sp, #4]
10049d48:	2801      	cmp	r0, #1
10049d4a:	d105      	bne.n	10049d58 <GAP_init_context+0x6c>
10049d4c:	201c      	movs	r0, #28
10049d4e:	2101      	movs	r1, #1
10049d50:	f002 fbe8 	bl	1004c524 <csmem_mem_0_assign>
10049d54:	6831      	ldr	r1, [r6, #0]
10049d56:	62c8      	str	r0, [r1, #44]	@ 0x2c
10049d58:	4811      	ldr	r0, [pc, #68]	@ (10049da0 <__arm_cp.3_1>)
10049d5a:	7e84      	ldrb	r4, [r0, #26]
10049d5c:	e001      	b.n	10049d62 <GAP_init_context+0x76>
10049d5e:	2100      	movs	r1, #0
10049d60:	62c1      	str	r1, [r0, #44]	@ 0x2c
10049d62:	2114      	movs	r1, #20
10049d64:	4620      	mov	r0, r4
10049d66:	f002 fbdd 	bl	1004c524 <csmem_mem_0_assign>
10049d6a:	6831      	ldr	r1, [r6, #0]
10049d6c:	6548      	str	r0, [r1, #84]	@ 0x54
10049d6e:	4c0d      	ldr	r4, [pc, #52]	@ (10049da4 <__arm_cp.3_2>)
10049d70:	2104      	movs	r1, #4
10049d72:	2201      	movs	r2, #1
10049d74:	4620      	mov	r0, r4
10049d76:	f002 fbc3 	bl	1004c500 <csmem_mem_assign>
10049d7a:	6831      	ldr	r1, [r6, #0]
10049d7c:	6208      	str	r0, [r1, #32]
10049d7e:	2503      	movs	r5, #3
10049d80:	2202      	movs	r2, #2
10049d82:	4620      	mov	r0, r4
10049d84:	4629      	mov	r1, r5
10049d86:	f002 fbbb 	bl	1004c500 <csmem_mem_assign>
10049d8a:	6831      	ldr	r1, [r6, #0]
10049d8c:	6248      	str	r0, [r1, #36]	@ 0x24
10049d8e:	4a06      	ldr	r2, [pc, #24]	@ (10049da8 <__arm_cp.3_3>)
10049d90:	2307      	movs	r3, #7
10049d92:	4608      	mov	r0, r1
10049d94:	4629      	mov	r1, r5
10049d96:	f002 fefd 	bl	1004cb94 <CST_init>
10049d9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10049d9c <__arm_cp.3_0>:
10049d9c:	20000650 	.word	0x20000650

10049da0 <__arm_cp.3_1>:
10049da0:	20000668 	.word	0x20000668

10049da4 <__arm_cp.3_2>:
10049da4:	20000664 	.word	0x20000664

10049da8 <__arm_cp.3_3>:
10049da8:	10049be5 	.word	0x10049be5

10049dac <GAP_get_default_le_event_mask>:
10049dac:	b5b0      	push	{r4, r5, r7, lr}
10049dae:	4604      	mov	r4, r0
10049db0:	2100      	movs	r1, #0
10049db2:	2508      	movs	r5, #8
10049db4:	462a      	mov	r2, r5
10049db6:	f7f7 fdb1 	bl	1004191c <BLEPLAT_MemSet>
10049dba:	7820      	ldrb	r0, [r4, #0]
10049dbc:	21df      	movs	r1, #223	@ 0xdf
10049dbe:	4301      	orrs	r1, r0
10049dc0:	7021      	strb	r1, [r4, #0]
10049dc2:	7860      	ldrb	r0, [r4, #1]
10049dc4:	2109      	movs	r1, #9
10049dc6:	4301      	orrs	r1, r0
10049dc8:	7061      	strb	r1, [r4, #1]
10049dca:	78a1      	ldrb	r1, [r4, #2]
10049dcc:	4329      	orrs	r1, r5
10049dce:	70a1      	strb	r1, [r4, #2]
10049dd0:	4911      	ldr	r1, [pc, #68]	@ (10049e18 <__arm_cp.4_0>)
10049dd2:	6809      	ldr	r1, [r1, #0]
10049dd4:	225c      	movs	r2, #92	@ 0x5c
10049dd6:	5c89      	ldrb	r1, [r1, r2]
10049dd8:	0689      	lsls	r1, r1, #26
10049dda:	d502      	bpl.n	10049de2 <GAP_get_default_le_event_mask+0x36>
10049ddc:	210f      	movs	r1, #15
10049dde:	4308      	orrs	r0, r1
10049de0:	7060      	strb	r0, [r4, #1]
10049de2:	f001 fe68 	bl	1004bab6 <ext_adv_scan_enabled_ucfg_weak>
10049de6:	2801      	cmp	r0, #1
10049de8:	d107      	bne.n	10049dfa <GAP_get_default_le_event_mask+0x4e>
10049dea:	7860      	ldrb	r0, [r4, #1]
10049dec:	2112      	movs	r1, #18
10049dee:	4301      	orrs	r1, r0
10049df0:	7061      	strb	r1, [r4, #1]
10049df2:	78a0      	ldrb	r0, [r4, #2]
10049df4:	2107      	movs	r1, #7
10049df6:	4301      	orrs	r1, r0
10049df8:	70a1      	strb	r1, [r4, #2]
10049dfa:	f000 fe13 	bl	1004aa24 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10049dfe:	b2c0      	uxtb	r0, r0
10049e00:	2801      	cmp	r0, #1
10049e02:	d107      	bne.n	10049e14 <GAP_get_default_le_event_mask+0x68>
10049e04:	7860      	ldrb	r0, [r4, #1]
10049e06:	21e0      	movs	r1, #224	@ 0xe0
10049e08:	4301      	orrs	r1, r0
10049e0a:	7061      	strb	r1, [r4, #1]
10049e0c:	78a0      	ldrb	r0, [r4, #2]
10049e0e:	2180      	movs	r1, #128	@ 0x80
10049e10:	4301      	orrs	r1, r0
10049e12:	70a1      	strb	r1, [r4, #2]
10049e14:	bdb0      	pop	{r4, r5, r7, pc}
10049e16:	46c0      	nop			@ (mov r8, r8)

10049e18 <__arm_cp.4_0>:
10049e18:	20000650 	.word	0x20000650

10049e1c <gap_extended_adv_scan_supported>:
10049e1c:	b580      	push	{r7, lr}
10049e1e:	f001 fe4a 	bl	1004bab6 <ext_adv_scan_enabled_ucfg_weak>
10049e22:	bd80      	pop	{r7, pc}

10049e24 <GAP_Init>:
10049e24:	b5f0      	push	{r4, r5, r6, r7, lr}
10049e26:	b087      	sub	sp, #28
10049e28:	4606      	mov	r6, r0
10049e2a:	a806      	add	r0, sp, #24
10049e2c:	2700      	movs	r7, #0
10049e2e:	7007      	strb	r7, [r0, #0]
10049e30:	2412      	movs	r4, #18
10049e32:	2901      	cmp	r1, #1
10049e34:	d901      	bls.n	10049e3a <GAP_Init+0x16>
10049e36:	4620      	mov	r0, r4
10049e38:	e04a      	b.n	10049ed0 <GAP_Init+0xac>
10049e3a:	460d      	mov	r5, r1
10049e3c:	4825      	ldr	r0, [pc, #148]	@ (10049ed4 <__arm_cp.7_0>)
10049e3e:	6800      	ldr	r0, [r0, #0]
10049e40:	9002      	str	r0, [sp, #8]
10049e42:	f003 f83f 	bl	1004cec4 <IDD_Initialize_Device_IDs>
10049e46:	2800      	cmp	r0, #0
10049e48:	d142      	bne.n	10049ed0 <GAP_Init+0xac>
10049e4a:	9902      	ldr	r1, [sp, #8]
10049e4c:	315c      	adds	r1, #92	@ 0x5c
10049e4e:	7808      	ldrb	r0, [r1, #0]
10049e50:	07c0      	lsls	r0, r0, #31
10049e52:	d111      	bne.n	10049e78 <GAP_Init+0x54>
10049e54:	78c8      	ldrb	r0, [r1, #3]
10049e56:	4328      	orrs	r0, r5
10049e58:	9101      	str	r1, [sp, #4]
10049e5a:	70c8      	strb	r0, [r1, #3]
10049e5c:	a805      	add	r0, sp, #20
10049e5e:	2107      	movs	r1, #7
10049e60:	7001      	strb	r1, [r0, #0]
10049e62:	2e00      	cmp	r6, #0
10049e64:	d012      	beq.n	10049e8c <GAP_Init+0x68>
10049e66:	2e02      	cmp	r6, #2
10049e68:	d008      	beq.n	10049e7c <GAP_Init+0x58>
10049e6a:	2e01      	cmp	r6, #1
10049e6c:	4620      	mov	r0, r4
10049e6e:	d12f      	bne.n	10049ed0 <GAP_Init+0xac>
10049e70:	a806      	add	r0, sp, #24
10049e72:	2110      	movs	r1, #16
10049e74:	7001      	strb	r1, [r0, #0]
10049e76:	e009      	b.n	10049e8c <GAP_Init+0x68>
10049e78:	200c      	movs	r0, #12
10049e7a:	e029      	b.n	10049ed0 <GAP_Init+0xac>
10049e7c:	a806      	add	r0, sp, #24
10049e7e:	2120      	movs	r1, #32
10049e80:	7001      	strb	r1, [r0, #0]
10049e82:	a905      	add	r1, sp, #20
10049e84:	f000 f86e 	bl	10049f64 <GAP_enable_controller_privacy_ucfg_weak>
10049e88:	2800      	cmp	r0, #0
10049e8a:	d121      	bne.n	10049ed0 <GAP_Init+0xac>
10049e8c:	4628      	mov	r0, r5
10049e8e:	f000 f86f 	bl	10049f70 <GAP_init_advertising_sets_ucfg_weak>
10049e92:	2800      	cmp	r0, #0
10049e94:	d11c      	bne.n	10049ed0 <GAP_Init+0xac>
10049e96:	9802      	ldr	r0, [sp, #8]
10049e98:	3060      	adds	r0, #96	@ 0x60
10049e9a:	f000 f865 	bl	10049f68 <GAP_set_controller_random_address_ucfg_weak>
10049e9e:	2800      	cmp	r0, #0
10049ea0:	d116      	bne.n	10049ed0 <GAP_Init+0xac>
10049ea2:	9806      	ldr	r0, [sp, #24]
10049ea4:	2101      	movs	r1, #1
10049ea6:	9a01      	ldr	r2, [sp, #4]
10049ea8:	7411      	strb	r1, [r2, #16]
10049eaa:	4308      	orrs	r0, r1
10049eac:	7010      	strb	r0, [r2, #0]
10049eae:	f000 f815 	bl	10049edc <GAP_reset_privacy_timer>
10049eb2:	ac03      	add	r4, sp, #12
10049eb4:	4620      	mov	r0, r4
10049eb6:	f7ff ff79 	bl	10049dac <GAP_get_default_le_event_mask>
10049eba:	4620      	mov	r0, r4
10049ebc:	f000 fb66 	bl	1004a58c <hci_le_set_event_mask>
10049ec0:	43f8      	mvns	r0, r7
10049ec2:	9003      	str	r0, [sp, #12]
10049ec4:	4804      	ldr	r0, [pc, #16]	@ (10049ed8 <__arm_cp.7_1>)
10049ec6:	9004      	str	r0, [sp, #16]
10049ec8:	4620      	mov	r0, r4
10049eca:	f000 fb4f 	bl	1004a56c <hci_set_event_mask>
10049ece:	4638      	mov	r0, r7
10049ed0:	b007      	add	sp, #28
10049ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

10049ed4 <__arm_cp.7_0>:
10049ed4:	20000650 	.word	0x20000650

10049ed8 <__arm_cp.7_1>:
10049ed8:	20009fff 	.word	0x20009fff

10049edc <GAP_reset_privacy_timer>:
10049edc:	4806      	ldr	r0, [pc, #24]	@ (10049ef8 <__arm_cp.8_0>)
10049ede:	6800      	ldr	r0, [r0, #0]
10049ee0:	215c      	movs	r1, #92	@ 0x5c
10049ee2:	5c41      	ldrb	r1, [r0, r1]
10049ee4:	0689      	lsls	r1, r1, #26
10049ee6:	0f89      	lsrs	r1, r1, #30
10049ee8:	d004      	beq.n	10049ef4 <GAP_reset_privacy_timer+0x18>
10049eea:	305c      	adds	r0, #92	@ 0x5c
10049eec:	78c1      	ldrb	r1, [r0, #3]
10049eee:	2202      	movs	r2, #2
10049ef0:	430a      	orrs	r2, r1
10049ef2:	70c2      	strb	r2, [r0, #3]
10049ef4:	4770      	bx	lr
10049ef6:	46c0      	nop			@ (mov r8, r8)

10049ef8 <__arm_cp.8_0>:
10049ef8:	20000650 	.word	0x20000650

10049efc <GAP_LimDiscTimeoutcb_ucfg_weak>:
10049efc:	4770      	bx	lr
	...

10049f00 <GAP_stop_privacy_timer>:
10049f00:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10049f02:	4c0d      	ldr	r4, [pc, #52]	@ (10049f38 <__arm_cp.19_0>)
10049f04:	6825      	ldr	r5, [r4, #0]
10049f06:	205c      	movs	r0, #92	@ 0x5c
10049f08:	5c28      	ldrb	r0, [r5, r0]
10049f0a:	0680      	lsls	r0, r0, #26
10049f0c:	0f80      	lsrs	r0, r0, #30
10049f0e:	d012      	beq.n	10049f36 <GAP_stop_privacy_timer+0x36>
10049f10:	355c      	adds	r5, #92	@ 0x5c
10049f12:	78e8      	ldrb	r0, [r5, #3]
10049f14:	2602      	movs	r6, #2
10049f16:	4030      	ands	r0, r6
10049f18:	d10d      	bne.n	10049f36 <GAP_stop_privacy_timer+0x36>
10049f1a:	a801      	add	r0, sp, #4
10049f1c:	4669      	mov	r1, sp
10049f1e:	f000 fa29 	bl	1004a374 <GAP_check_adv_status>
10049f22:	7869      	ldrb	r1, [r5, #1]
10049f24:	4301      	orrs	r1, r0
10049f26:	d106      	bne.n	10049f36 <GAP_stop_privacy_timer+0x36>
10049f28:	78e8      	ldrb	r0, [r5, #3]
10049f2a:	4330      	orrs	r0, r6
10049f2c:	70e8      	strb	r0, [r5, #3]
10049f2e:	6820      	ldr	r0, [r4, #0]
10049f30:	2101      	movs	r1, #1
10049f32:	f002 fe44 	bl	1004cbbe <CST_stop>
10049f36:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10049f38 <__arm_cp.19_0>:
10049f38:	20000650 	.word	0x20000650

10049f3c <GAP_get_own_address_type>:
10049f3c:	4808      	ldr	r0, [pc, #32]	@ (10049f60 <__arm_cp.29_0>)
10049f3e:	6800      	ldr	r0, [r0, #0]
10049f40:	215c      	movs	r1, #92	@ 0x5c
10049f42:	5c41      	ldrb	r1, [r0, r1]
10049f44:	06ca      	lsls	r2, r1, #27
10049f46:	d406      	bmi.n	10049f56 <GAP_get_own_address_type+0x1a>
10049f48:	0689      	lsls	r1, r1, #26
10049f4a:	d406      	bmi.n	10049f5a <GAP_get_own_address_type+0x1e>
10049f4c:	305c      	adds	r0, #92	@ 0x5c
10049f4e:	78c1      	ldrb	r1, [r0, #3]
10049f50:	2001      	movs	r0, #1
10049f52:	4008      	ands	r0, r1
10049f54:	4770      	bx	lr
10049f56:	2001      	movs	r0, #1
10049f58:	4770      	bx	lr
10049f5a:	2003      	movs	r0, #3
10049f5c:	4770      	bx	lr
10049f5e:	46c0      	nop			@ (mov r8, r8)

10049f60 <__arm_cp.29_0>:
10049f60:	20000650 	.word	0x20000650

10049f64 <GAP_enable_controller_privacy_ucfg_weak>:
10049f64:	2012      	movs	r0, #18
10049f66:	4770      	bx	lr

10049f68 <GAP_set_controller_random_address_ucfg_weak>:
10049f68:	b580      	push	{r7, lr}
10049f6a:	f000 fafa 	bl	1004a562 <hci_le_set_random_address>
10049f6e:	bd80      	pop	{r7, pc}

10049f70 <GAP_init_advertising_sets_ucfg_weak>:
10049f70:	2000      	movs	r0, #0
10049f72:	4770      	bx	lr

10049f74 <GAP_start_privacy_timer>:
10049f74:	b5b0      	push	{r4, r5, r7, lr}
10049f76:	4602      	mov	r2, r0
10049f78:	4810      	ldr	r0, [pc, #64]	@ (10049fbc <__arm_cp.47_0>)
10049f7a:	6800      	ldr	r0, [r0, #0]
10049f7c:	4605      	mov	r5, r0
10049f7e:	355a      	adds	r5, #90	@ 0x5a
10049f80:	2900      	cmp	r1, #0
10049f82:	d108      	bne.n	10049f96 <GAP_start_privacy_timer+0x22>
10049f84:	78a9      	ldrb	r1, [r5, #2]
10049f86:	0689      	lsls	r1, r1, #26
10049f88:	2400      	movs	r4, #0
10049f8a:	0f89      	lsrs	r1, r1, #30
10049f8c:	d014      	beq.n	10049fb8 <GAP_start_privacy_timer+0x44>
10049f8e:	7969      	ldrb	r1, [r5, #5]
10049f90:	2302      	movs	r3, #2
10049f92:	400b      	ands	r3, r1
10049f94:	d010      	beq.n	10049fb8 <GAP_start_privacy_timer+0x44>
10049f96:	2a00      	cmp	r2, #0
10049f98:	d001      	beq.n	10049f9e <GAP_start_privacy_timer+0x2a>
10049f9a:	4b09      	ldr	r3, [pc, #36]	@ (10049fc0 <__arm_cp.47_1>)
10049f9c:	e003      	b.n	10049fa6 <GAP_start_privacy_timer+0x32>
10049f9e:	217d      	movs	r1, #125	@ 0x7d
10049fa0:	00c9      	lsls	r1, r1, #3
10049fa2:	882b      	ldrh	r3, [r5, #0]
10049fa4:	434b      	muls	r3, r1
10049fa6:	2401      	movs	r4, #1
10049fa8:	4621      	mov	r1, r4
10049faa:	4622      	mov	r2, r4
10049fac:	f002 fe3d 	bl	1004cc2a <CST_start>
10049fb0:	7968      	ldrb	r0, [r5, #5]
10049fb2:	21fd      	movs	r1, #253	@ 0xfd
10049fb4:	4001      	ands	r1, r0
10049fb6:	7169      	strb	r1, [r5, #5]
10049fb8:	4620      	mov	r0, r4
10049fba:	bdb0      	pop	{r4, r5, r7, pc}

10049fbc <__arm_cp.47_0>:
10049fbc:	20000650 	.word	0x20000650

10049fc0 <__arm_cp.47_1>:
10049fc0:	00007530 	.word	0x00007530

10049fc4 <GAP_generate_new_rpa>:
10049fc4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10049fc6:	4d0d      	ldr	r5, [pc, #52]	@ (10049ffc <__arm_cp.48_0>)
10049fc8:	6828      	ldr	r0, [r5, #0]
10049fca:	215f      	movs	r1, #95	@ 0x5f
10049fcc:	5c40      	ldrb	r0, [r0, r1]
10049fce:	0780      	lsls	r0, r0, #30
10049fd0:	d401      	bmi.n	10049fd6 <GAP_generate_new_rpa+0x12>
10049fd2:	240c      	movs	r4, #12
10049fd4:	e00f      	b.n	10049ff6 <GAP_generate_new_rpa+0x32>
10049fd6:	466c      	mov	r4, sp
10049fd8:	4620      	mov	r0, r4
10049fda:	f002 fd05 	bl	1004c9e8 <smp_sap_crt_generate_rpa>
10049fde:	4620      	mov	r0, r4
10049fe0:	f7ff ffc2 	bl	10049f68 <GAP_set_controller_random_address_ucfg_weak>
10049fe4:	4604      	mov	r4, r0
10049fe6:	2800      	cmp	r0, #0
10049fe8:	d105      	bne.n	10049ff6 <GAP_generate_new_rpa+0x32>
10049fea:	6828      	ldr	r0, [r5, #0]
10049fec:	3066      	adds	r0, #102	@ 0x66
10049fee:	4669      	mov	r1, sp
10049ff0:	2206      	movs	r2, #6
10049ff2:	f7f7 fc83 	bl	100418fc <BLEPLAT_MemCpy>
10049ff6:	4620      	mov	r0, r4
10049ff8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10049ffa:	46c0      	nop			@ (mov r8, r8)

10049ffc <__arm_cp.48_0>:
10049ffc:	20000650 	.word	0x20000650

1004a000 <GAP_is_rpa_change_at_timeout_enabled>:
1004a000:	4802      	ldr	r0, [pc, #8]	@ (1004a00c <__arm_cp.54_0>)
1004a002:	6800      	ldr	r0, [r0, #0]
1004a004:	216c      	movs	r1, #108	@ 0x6c
1004a006:	5c40      	ldrb	r0, [r0, r1]
1004a008:	4770      	bx	lr
1004a00a:	46c0      	nop			@ (mov r8, r8)

1004a00c <__arm_cp.54_0>:
1004a00c:	20000650 	.word	0x20000650

1004a010 <GAP_check_discoverability_mode>:
1004a010:	1e43      	subs	r3, r0, #1
1004a012:	2b02      	cmp	r3, #2
1004a014:	d309      	bcc.n	1004a02a <GAP_check_discoverability_mode+0x1a>
1004a016:	2800      	cmp	r0, #0
1004a018:	d00c      	beq.n	1004a034 <GAP_check_discoverability_mode+0x24>
1004a01a:	2803      	cmp	r0, #3
1004a01c:	d109      	bne.n	1004a032 <GAP_check_discoverability_mode+0x22>
1004a01e:	2001      	movs	r0, #1
1004a020:	4001      	ands	r1, r0
1004a022:	4249      	negs	r1, r1
1004a024:	2012      	movs	r0, #18
1004a026:	4008      	ands	r0, r1
1004a028:	4770      	bx	lr
1004a02a:	2a00      	cmp	r2, #0
1004a02c:	d101      	bne.n	1004a032 <GAP_check_discoverability_mode+0x22>
1004a02e:	4610      	mov	r0, r2
1004a030:	4770      	bx	lr
1004a032:	2012      	movs	r0, #18
1004a034:	4770      	bx	lr
	...

1004a038 <GAP_advEvtProp_to_advType>:
1004a038:	4601      	mov	r1, r0
1004a03a:	3910      	subs	r1, #16
1004a03c:	2905      	cmp	r1, #5
1004a03e:	d80a      	bhi.n	1004a056 <GAP_advEvtProp_to_advType+0x1e>
1004a040:	2000      	movs	r0, #0
1004a042:	46c0      	nop			@ (mov r8, r8)
1004a044:	4479      	add	r1, pc
1004a046:	7909      	ldrb	r1, [r1, #4]
1004a048:	0049      	lsls	r1, r1, #1
1004a04a:	448f      	add	pc, r1
1004a04c:	090a0802 	.word	0x090a0802
1004a050:	0c08      	.short	0x0c08
1004a052:	2003      	movs	r0, #3
1004a054:	4770      	bx	lr
1004a056:	281d      	cmp	r0, #29
1004a058:	d101      	bne.n	1004a05e <GAP_advEvtProp_to_advType+0x26>
1004a05a:	2001      	movs	r0, #1
1004a05c:	4770      	bx	lr
1004a05e:	2005      	movs	r0, #5
1004a060:	4770      	bx	lr
1004a062:	2002      	movs	r0, #2
1004a064:	4770      	bx	lr
1004a066:	2004      	movs	r0, #4
1004a068:	4770      	bx	lr
	...

1004a06c <GAP_set_legacy_advertising_configuration>:
1004a06c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a06e:	b08d      	sub	sp, #52	@ 0x34
1004a070:	4615      	mov	r5, r2
1004a072:	460f      	mov	r7, r1
1004a074:	4601      	mov	r1, r0
1004a076:	06fa      	lsls	r2, r7, #27
1004a078:	2012      	movs	r0, #18
1004a07a:	2a00      	cmp	r2, #0
1004a07c:	d542      	bpl.n	1004a104 <GAP_set_legacy_advertising_configuration+0x98>
1004a07e:	461c      	mov	r4, r3
1004a080:	2301      	movs	r3, #1
1004a082:	039a      	lsls	r2, r3, #14
1004a084:	4295      	cmp	r5, r2
1004a086:	d83d      	bhi.n	1004a104 <GAP_set_legacy_advertising_configuration+0x98>
1004a088:	4294      	cmp	r4, r2
1004a08a:	d83b      	bhi.n	1004a104 <GAP_set_legacy_advertising_configuration+0x98>
1004a08c:	930c      	str	r3, [sp, #48]	@ 0x30
1004a08e:	481e      	ldr	r0, [pc, #120]	@ (1004a108 <__arm_cp.2_0>)
1004a090:	6806      	ldr	r6, [r0, #0]
1004a092:	9815      	ldr	r0, [sp, #84]	@ 0x54
1004a094:	900b      	str	r0, [sp, #44]	@ 0x2c
1004a096:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004a098:	900a      	str	r0, [sp, #40]	@ 0x28
1004a09a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1004a09c:	9008      	str	r0, [sp, #32]
1004a09e:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a0a0:	9009      	str	r0, [sp, #36]	@ 0x24
1004a0a2:	6d70      	ldr	r0, [r6, #84]	@ 0x54
1004a0a4:	2200      	movs	r2, #0
1004a0a6:	9205      	str	r2, [sp, #20]
1004a0a8:	7042      	strb	r2, [r0, #1]
1004a0aa:	7001      	strb	r1, [r0, #0]
1004a0ac:	f7ff ff46 	bl	10049f3c <GAP_get_own_address_type>
1004a0b0:	9007      	str	r0, [sp, #28]
1004a0b2:	4638      	mov	r0, r7
1004a0b4:	f7ff ffc0 	bl	1004a038 <GAP_advEvtProp_to_advType>
1004a0b8:	4602      	mov	r2, r0
1004a0ba:	9606      	str	r6, [sp, #24]
1004a0bc:	6d70      	ldr	r0, [r6, #84]	@ 0x54
1004a0be:	7841      	ldrb	r1, [r0, #1]
1004a0c0:	2320      	movs	r3, #32
1004a0c2:	430b      	orrs	r3, r1
1004a0c4:	7043      	strb	r3, [r0, #1]
1004a0c6:	2a04      	cmp	r2, #4
1004a0c8:	d808      	bhi.n	1004a0dc <GAP_set_legacy_advertising_configuration+0x70>
1004a0ca:	2317      	movs	r3, #23
1004a0cc:	40d3      	lsrs	r3, r2
1004a0ce:	07db      	lsls	r3, r3, #31
1004a0d0:	d004      	beq.n	1004a0dc <GAP_set_legacy_advertising_configuration+0x70>
1004a0d2:	b253      	sxtb	r3, r2
1004a0d4:	a70d      	add	r7, pc, #52	@ (adr r7, 1004a10c <__arm_cp.2_0+0x4>)
1004a0d6:	5cfb      	ldrb	r3, [r7, r3]
1004a0d8:	4319      	orrs	r1, r3
1004a0da:	7041      	strb	r1, [r0, #1]
1004a0dc:	9808      	ldr	r0, [sp, #32]
1004a0de:	9000      	str	r0, [sp, #0]
1004a0e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004a0e2:	9001      	str	r0, [sp, #4]
1004a0e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004a0e6:	9002      	str	r0, [sp, #8]
1004a0e8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004a0ea:	9003      	str	r0, [sp, #12]
1004a0ec:	b2a8      	uxth	r0, r5
1004a0ee:	b2a1      	uxth	r1, r4
1004a0f0:	9b07      	ldr	r3, [sp, #28]
1004a0f2:	f000 f98a 	bl	1004a40a <hci_le_set_advertising_parameters>
1004a0f6:	2800      	cmp	r0, #0
1004a0f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004a0fa:	d103      	bne.n	1004a104 <GAP_set_legacy_advertising_configuration+0x98>
1004a0fc:	9806      	ldr	r0, [sp, #24]
1004a0fe:	6d40      	ldr	r0, [r0, #84]	@ 0x54
1004a100:	7481      	strb	r1, [r0, #18]
1004a102:	9805      	ldr	r0, [sp, #20]
1004a104:	b00d      	add	sp, #52	@ 0x34
1004a106:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004a108 <__arm_cp.2_0>:
1004a108:	20000650 	.word	0x20000650
1004a10c:	70287028 	.word	0x70287028
1004a110:	00000030 	.word	0x00000030

1004a114 <GAP_set_legacy_advertising_enable>:
1004a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004a116:	4604      	mov	r4, r0
1004a118:	481a      	ldr	r0, [pc, #104]	@ (1004a184 <__arm_cp.4_0>)
1004a11a:	6807      	ldr	r7, [r0, #0]
1004a11c:	2c00      	cmp	r4, #0
1004a11e:	d00e      	beq.n	1004a13e <GAP_set_legacy_advertising_enable+0x2a>
1004a120:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1004a122:	7c80      	ldrb	r0, [r0, #18]
1004a124:	2801      	cmp	r0, #1
1004a126:	d124      	bne.n	1004a172 <GAP_set_legacy_advertising_enable+0x5e>
1004a128:	2000      	movs	r0, #0
1004a12a:	4601      	mov	r1, r0
1004a12c:	f000 f82c 	bl	1004a188 <GAP_check_flags>
1004a130:	4605      	mov	r5, r0
1004a132:	2800      	cmp	r0, #0
1004a134:	d11e      	bne.n	1004a174 <GAP_set_legacy_advertising_enable+0x60>
1004a136:	f7ff ff45 	bl	10049fc4 <GAP_generate_new_rpa>
1004a13a:	4606      	mov	r6, r0
1004a13c:	e000      	b.n	1004a140 <GAP_set_legacy_advertising_enable+0x2c>
1004a13e:	260c      	movs	r6, #12
1004a140:	4620      	mov	r0, r4
1004a142:	f000 f9c2 	bl	1004a4ca <hci_le_set_advertising_enable>
1004a146:	4605      	mov	r5, r0
1004a148:	2800      	cmp	r0, #0
1004a14a:	d113      	bne.n	1004a174 <GAP_set_legacy_advertising_enable+0x60>
1004a14c:	2500      	movs	r5, #0
1004a14e:	4620      	mov	r0, r4
1004a150:	4629      	mov	r1, r5
1004a152:	462a      	mov	r2, r5
1004a154:	f000 f872 	bl	1004a23c <GAP_set_discoverability_mode>
1004a158:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1004a15a:	2c00      	cmp	r4, #0
1004a15c:	d00c      	beq.n	1004a178 <GAP_set_legacy_advertising_enable+0x64>
1004a15e:	2101      	movs	r1, #1
1004a160:	74c1      	strb	r1, [r0, #19]
1004a162:	2e00      	cmp	r6, #0
1004a164:	d106      	bne.n	1004a174 <GAP_set_legacy_advertising_enable+0x60>
1004a166:	2500      	movs	r5, #0
1004a168:	4628      	mov	r0, r5
1004a16a:	4629      	mov	r1, r5
1004a16c:	f7ff ff02 	bl	10049f74 <GAP_start_privacy_timer>
1004a170:	e000      	b.n	1004a174 <GAP_set_legacy_advertising_enable+0x60>
1004a172:	25d3      	movs	r5, #211	@ 0xd3
1004a174:	4628      	mov	r0, r5
1004a176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004a178:	2500      	movs	r5, #0
1004a17a:	74c5      	strb	r5, [r0, #19]
1004a17c:	f7ff fec0 	bl	10049f00 <GAP_stop_privacy_timer>
1004a180:	e7f8      	b.n	1004a174 <GAP_set_legacy_advertising_enable+0x60>
1004a182:	46c0      	nop			@ (mov r8, r8)

1004a184 <__arm_cp.4_0>:
1004a184:	20000650 	.word	0x20000650

1004a188 <GAP_check_flags>:
1004a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004a18a:	4a28      	ldr	r2, [pc, #160]	@ (1004a22c <__arm_cp.5_0>)
1004a18c:	7e92      	ldrb	r2, [r2, #26]
1004a18e:	2512      	movs	r5, #18
1004a190:	428a      	cmp	r2, r1
1004a192:	d925      	bls.n	1004a1e0 <GAP_check_flags+0x58>
1004a194:	2800      	cmp	r0, #0
1004a196:	d100      	bne.n	1004a19a <GAP_check_flags+0x12>
1004a198:	4601      	mov	r1, r0
1004a19a:	2214      	movs	r2, #20
1004a19c:	434a      	muls	r2, r1
1004a19e:	4824      	ldr	r0, [pc, #144]	@ (1004a230 <__arm_cp.5_1>)
1004a1a0:	6800      	ldr	r0, [r0, #0]
1004a1a2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
1004a1a4:	1899      	adds	r1, r3, r2
1004a1a6:	784c      	ldrb	r4, [r1, #1]
1004a1a8:	06a0      	lsls	r0, r4, #26
1004a1aa:	0fc6      	lsrs	r6, r0, #31
1004a1ac:	2000      	movs	r0, #0
1004a1ae:	2e00      	cmp	r6, #0
1004a1b0:	d002      	beq.n	1004a1b8 <GAP_check_flags+0x30>
1004a1b2:	2710      	movs	r7, #16
1004a1b4:	4027      	ands	r7, r4
1004a1b6:	d114      	bne.n	1004a1e2 <GAP_check_flags+0x5a>
1004a1b8:	2e00      	cmp	r6, #0
1004a1ba:	d102      	bne.n	1004a1c2 <GAP_check_flags+0x3a>
1004a1bc:	2608      	movs	r6, #8
1004a1be:	4034      	ands	r4, r6
1004a1c0:	d10f      	bne.n	1004a1e2 <GAP_check_flags+0x5a>
1004a1c2:	5c9e      	ldrb	r6, [r3, r2]
1004a1c4:	684c      	ldr	r4, [r1, #4]
1004a1c6:	8908      	ldrh	r0, [r1, #8]
1004a1c8:	4621      	mov	r1, r4
1004a1ca:	f000 f8bb 	bl	1004a344 <GAP_search_flags_index>
1004a1ce:	4919      	ldr	r1, [pc, #100]	@ (1004a234 <__arm_cp.5_2>)
1004a1d0:	4288      	cmp	r0, r1
1004a1d2:	d008      	beq.n	1004a1e6 <GAP_check_flags+0x5e>
1004a1d4:	1900      	adds	r0, r0, r4
1004a1d6:	7881      	ldrb	r1, [r0, #2]
1004a1d8:	0748      	lsls	r0, r1, #29
1004a1da:	d40b      	bmi.n	1004a1f4 <GAP_check_flags+0x6c>
1004a1dc:	20d4      	movs	r0, #212	@ 0xd4
1004a1de:	e000      	b.n	1004a1e2 <GAP_check_flags+0x5a>
1004a1e0:	4628      	mov	r0, r5
1004a1e2:	b2c0      	uxtb	r0, r0
1004a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004a1e6:	2e03      	cmp	r6, #3
1004a1e8:	4628      	mov	r0, r5
1004a1ea:	d8fa      	bhi.n	1004a1e2 <GAP_check_flags+0x5a>
1004a1ec:	00f1      	lsls	r1, r6, #3
1004a1ee:	4812      	ldr	r0, [pc, #72]	@ (1004a238 <__arm_cp.5_3>)
1004a1f0:	40c8      	lsrs	r0, r1
1004a1f2:	e7f6      	b.n	1004a1e2 <GAP_check_flags+0x5a>
1004a1f4:	2e03      	cmp	r6, #3
1004a1f6:	4628      	mov	r0, r5
1004a1f8:	d8f3      	bhi.n	1004a1e2 <GAP_check_flags+0x5a>
1004a1fa:	46c0      	nop			@ (mov r8, r8)
1004a1fc:	447e      	add	r6, pc
1004a1fe:	7936      	ldrb	r6, [r6, #4]
1004a200:	0076      	lsls	r6, r6, #1
1004a202:	44b7      	add	pc, r6
1004a204:	010d0601 	.word	0x010d0601
1004a208:	2003      	movs	r0, #3
1004a20a:	4001      	ands	r1, r0
1004a20c:	d105      	bne.n	1004a21a <GAP_check_flags+0x92>
1004a20e:	4608      	mov	r0, r1
1004a210:	e7e7      	b.n	1004a1e2 <GAP_check_flags+0x5a>
1004a212:	2003      	movs	r0, #3
1004a214:	4001      	ands	r1, r0
1004a216:	2901      	cmp	r1, #1
1004a218:	d006      	beq.n	1004a228 <GAP_check_flags+0xa0>
1004a21a:	202b      	movs	r0, #43	@ 0x2b
1004a21c:	43c0      	mvns	r0, r0
1004a21e:	e7e0      	b.n	1004a1e2 <GAP_check_flags+0x5a>
1004a220:	2003      	movs	r0, #3
1004a222:	4001      	ands	r1, r0
1004a224:	2902      	cmp	r1, #2
1004a226:	d1f8      	bne.n	1004a21a <GAP_check_flags+0x92>
1004a228:	2000      	movs	r0, #0
1004a22a:	e7da      	b.n	1004a1e2 <GAP_check_flags+0x5a>

1004a22c <__arm_cp.5_0>:
1004a22c:	20000668 	.word	0x20000668

1004a230 <__arm_cp.5_1>:
1004a230:	20000650 	.word	0x20000650

1004a234 <__arm_cp.5_2>:
1004a234:	0000ffff 	.word	0x0000ffff

1004a238 <__arm_cp.5_3>:
1004a238:	00d4d400 	.word	0x00d4d400

1004a23c <GAP_set_discoverability_mode>:
1004a23c:	b570      	push	{r4, r5, r6, lr}
1004a23e:	4603      	mov	r3, r0
1004a240:	2900      	cmp	r1, #0
1004a242:	d100      	bne.n	1004a246 <GAP_set_discoverability_mode+0xa>
1004a244:	460a      	mov	r2, r1
1004a246:	4829      	ldr	r0, [pc, #164]	@ (1004a2ec <__arm_cp.6_0>)
1004a248:	6800      	ldr	r0, [r0, #0]
1004a24a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1004a24c:	2b01      	cmp	r3, #1
1004a24e:	d10c      	bne.n	1004a26a <GAP_set_discoverability_mode+0x2e>
1004a250:	2314      	movs	r3, #20
1004a252:	4353      	muls	r3, r2
1004a254:	5cca      	ldrb	r2, [r1, r3]
1004a256:	2a01      	cmp	r2, #1
1004a258:	d033      	beq.n	1004a2c2 <GAP_set_discoverability_mode+0x86>
1004a25a:	2a02      	cmp	r2, #2
1004a25c:	d13e      	bne.n	1004a2dc <GAP_set_discoverability_mode+0xa0>
1004a25e:	18ca      	adds	r2, r1, r3
1004a260:	7894      	ldrb	r4, [r2, #2]
1004a262:	2004      	movs	r0, #4
1004a264:	4320      	orrs	r0, r4
1004a266:	7090      	strb	r0, [r2, #2]
1004a268:	e03a      	b.n	1004a2e0 <GAP_set_discoverability_mode+0xa4>
1004a26a:	2314      	movs	r3, #20
1004a26c:	4353      	muls	r3, r2
1004a26e:	18c9      	adds	r1, r1, r3
1004a270:	1c8e      	adds	r6, r1, #2
1004a272:	7889      	ldrb	r1, [r1, #2]
1004a274:	0789      	lsls	r1, r1, #30
1004a276:	d521      	bpl.n	1004a2bc <GAP_set_discoverability_mode+0x80>
1004a278:	2400      	movs	r4, #0
1004a27a:	4621      	mov	r1, r4
1004a27c:	f002 fc9f 	bl	1004cbbe <CST_stop>
1004a280:	481b      	ldr	r0, [pc, #108]	@ (1004a2f0 <__arm_cp.6_1>)
1004a282:	6800      	ldr	r0, [r0, #0]
1004a284:	214e      	movs	r1, #78	@ 0x4e
1004a286:	5c40      	ldrb	r0, [r0, r1]
1004a288:	07c0      	lsls	r0, r0, #31
1004a28a:	d017      	beq.n	1004a2bc <GAP_set_discoverability_mode+0x80>
1004a28c:	4819      	ldr	r0, [pc, #100]	@ (1004a2f4 <__arm_cp.6_2>)
1004a28e:	6800      	ldr	r0, [r0, #0]
1004a290:	6980      	ldr	r0, [r0, #24]
1004a292:	2244      	movs	r2, #68	@ 0x44
1004a294:	2502      	movs	r5, #2
1004a296:	4629      	mov	r1, r5
1004a298:	462b      	mov	r3, r5
1004a29a:	f7ff fabb 	bl	10049814 <aci_event_fifo_push_header>
1004a29e:	2800      	cmp	r0, #0
1004a2a0:	d00c      	beq.n	1004a2bc <GAP_set_discoverability_mode+0x80>
1004a2a2:	4601      	mov	r1, r0
1004a2a4:	7185      	strb	r5, [r0, #6]
1004a2a6:	71c4      	strb	r4, [r0, #7]
1004a2a8:	7204      	strb	r4, [r0, #8]
1004a2aa:	20ff      	movs	r0, #255	@ 0xff
1004a2ac:	7148      	strb	r0, [r1, #5]
1004a2ae:	2082      	movs	r0, #130	@ 0x82
1004a2b0:	7108      	strb	r0, [r1, #4]
1004a2b2:	2004      	movs	r0, #4
1004a2b4:	7248      	strb	r0, [r1, #9]
1004a2b6:	4628      	mov	r0, r5
1004a2b8:	f7ff fb49 	bl	1004994e <aci_event_fifo_push>
1004a2bc:	2000      	movs	r0, #0
1004a2be:	7030      	strb	r0, [r6, #0]
1004a2c0:	bd70      	pop	{r4, r5, r6, pc}
1004a2c2:	18c9      	adds	r1, r1, r3
1004a2c4:	784a      	ldrb	r2, [r1, #1]
1004a2c6:	788b      	ldrb	r3, [r1, #2]
1004a2c8:	4313      	orrs	r3, r2
1004a2ca:	2202      	movs	r2, #2
1004a2cc:	431a      	orrs	r2, r3
1004a2ce:	708a      	strb	r2, [r1, #2]
1004a2d0:	2100      	movs	r1, #0
1004a2d2:	2201      	movs	r2, #1
1004a2d4:	4b08      	ldr	r3, [pc, #32]	@ (1004a2f8 <__arm_cp.6_3>)
1004a2d6:	f002 fca8 	bl	1004cc2a <CST_start>
1004a2da:	bd70      	pop	{r4, r5, r6, pc}
1004a2dc:	18c8      	adds	r0, r1, r3
1004a2de:	7880      	ldrb	r0, [r0, #2]
1004a2e0:	18c9      	adds	r1, r1, r3
1004a2e2:	784a      	ldrb	r2, [r1, #1]
1004a2e4:	4302      	orrs	r2, r0
1004a2e6:	708a      	strb	r2, [r1, #2]
1004a2e8:	bd70      	pop	{r4, r5, r6, pc}
1004a2ea:	46c0      	nop			@ (mov r8, r8)

1004a2ec <__arm_cp.6_0>:
1004a2ec:	20000650 	.word	0x20000650

1004a2f0 <__arm_cp.6_1>:
1004a2f0:	20000658 	.word	0x20000658

1004a2f4 <__arm_cp.6_2>:
1004a2f4:	2000064c 	.word	0x2000064c

1004a2f8 <__arm_cp.6_3>:
1004a2f8:	0002bf20 	.word	0x0002bf20

1004a2fc <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
1004a2fc:	b580      	push	{r7, lr}
1004a2fe:	f000 f801 	bl	1004a304 <GAP_suspend_resume_active_advertising_sets_legacy>
1004a302:	bd80      	pop	{r7, pc}

1004a304 <GAP_suspend_resume_active_advertising_sets_legacy>:
1004a304:	b580      	push	{r7, lr}
1004a306:	4905      	ldr	r1, [pc, #20]	@ (1004a31c <__arm_cp.10_0>)
1004a308:	6809      	ldr	r1, [r1, #0]
1004a30a:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1004a30c:	7cc9      	ldrb	r1, [r1, #19]
1004a30e:	2901      	cmp	r1, #1
1004a310:	d102      	bne.n	1004a318 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
1004a312:	f000 f8da 	bl	1004a4ca <hci_le_set_advertising_enable>
1004a316:	bd80      	pop	{r7, pc}
1004a318:	2000      	movs	r0, #0
1004a31a:	bd80      	pop	{r7, pc}

1004a31c <__arm_cp.10_0>:
1004a31c:	20000650 	.word	0x20000650

1004a320 <GAP_set_legacy_advertising_data>:
1004a320:	b5b0      	push	{r4, r5, r7, lr}
1004a322:	460c      	mov	r4, r1
1004a324:	4605      	mov	r5, r0
1004a326:	b2c0      	uxtb	r0, r0
1004a328:	f001 f830 	bl	1004b38c <ll_set_legacy_advertising_data_ptr>
1004a32c:	2800      	cmp	r0, #0
1004a32e:	d000      	beq.n	1004a332 <GAP_set_legacy_advertising_data+0x12>
1004a330:	bdb0      	pop	{r4, r5, r7, pc}
1004a332:	4903      	ldr	r1, [pc, #12]	@ (1004a340 <__arm_cp.11_0>)
1004a334:	6809      	ldr	r1, [r1, #0]
1004a336:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1004a338:	810d      	strh	r5, [r1, #8]
1004a33a:	604c      	str	r4, [r1, #4]
1004a33c:	bdb0      	pop	{r4, r5, r7, pc}
1004a33e:	46c0      	nop			@ (mov r8, r8)

1004a340 <__arm_cp.11_0>:
1004a340:	20000650 	.word	0x20000650

1004a344 <GAP_search_flags_index>:
1004a344:	b5b0      	push	{r4, r5, r7, lr}
1004a346:	4a0a      	ldr	r2, [pc, #40]	@ (1004a370 <__arm_cp.15_0>)
1004a348:	2803      	cmp	r0, #3
1004a34a:	d30f      	bcc.n	1004a36c <GAP_search_flags_index+0x28>
1004a34c:	2300      	movs	r3, #0
1004a34e:	b29d      	uxth	r5, r3
1004a350:	5d4c      	ldrb	r4, [r1, r5]
1004a352:	2c02      	cmp	r4, #2
1004a354:	d103      	bne.n	1004a35e <GAP_search_flags_index+0x1a>
1004a356:	186d      	adds	r5, r5, r1
1004a358:	786d      	ldrb	r5, [r5, #1]
1004a35a:	2d01      	cmp	r5, #1
1004a35c:	d005      	beq.n	1004a36a <GAP_search_flags_index+0x26>
1004a35e:	191b      	adds	r3, r3, r4
1004a360:	1c5b      	adds	r3, r3, #1
1004a362:	b29c      	uxth	r4, r3
1004a364:	4284      	cmp	r4, r0
1004a366:	d3f2      	bcc.n	1004a34e <GAP_search_flags_index+0xa>
1004a368:	e000      	b.n	1004a36c <GAP_search_flags_index+0x28>
1004a36a:	461a      	mov	r2, r3
1004a36c:	b290      	uxth	r0, r2
1004a36e:	bdb0      	pop	{r4, r5, r7, pc}

1004a370 <__arm_cp.15_0>:
1004a370:	0000ffff 	.word	0x0000ffff

1004a374 <GAP_check_adv_status>:
1004a374:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004a376:	460c      	mov	r4, r1
1004a378:	4605      	mov	r5, r0
1004a37a:	481c      	ldr	r0, [pc, #112]	@ (1004a3ec <__arm_cp.16_0>)
1004a37c:	6806      	ldr	r6, [r0, #0]
1004a37e:	f7ff fd4d 	bl	10049e1c <gap_extended_adv_scan_supported>
1004a382:	491b      	ldr	r1, [pc, #108]	@ (1004a3f0 <__arm_cp.16_1>)
1004a384:	7e8a      	ldrb	r2, [r1, #26]
1004a386:	2100      	movs	r1, #0
1004a388:	9501      	str	r5, [sp, #4]
1004a38a:	7029      	strb	r1, [r5, #0]
1004a38c:	2301      	movs	r3, #1
1004a38e:	9402      	str	r4, [sp, #8]
1004a390:	7023      	strb	r3, [r4, #0]
1004a392:	2800      	cmp	r0, #0
1004a394:	d000      	beq.n	1004a398 <GAP_check_adv_status+0x24>
1004a396:	4613      	mov	r3, r2
1004a398:	b2d8      	uxtb	r0, r3
1004a39a:	2714      	movs	r7, #20
1004a39c:	4347      	muls	r7, r0
1004a39e:	4608      	mov	r0, r1
1004a3a0:	460b      	mov	r3, r1
1004a3a2:	460a      	mov	r2, r1
1004a3a4:	428f      	cmp	r7, r1
1004a3a6:	d011      	beq.n	1004a3cc <GAP_check_adv_status+0x58>
1004a3a8:	6d74      	ldr	r4, [r6, #84]	@ 0x54
1004a3aa:	1864      	adds	r4, r4, r1
1004a3ac:	7ca5      	ldrb	r5, [r4, #18]
1004a3ae:	2d01      	cmp	r5, #1
1004a3b0:	d10a      	bne.n	1004a3c8 <GAP_check_adv_status+0x54>
1004a3b2:	7ce5      	ldrb	r5, [r4, #19]
1004a3b4:	2d00      	cmp	r5, #0
1004a3b6:	d007      	beq.n	1004a3c8 <GAP_check_adv_status+0x54>
1004a3b8:	2d02      	cmp	r5, #2
1004a3ba:	d100      	bne.n	1004a3be <GAP_check_adv_status+0x4a>
1004a3bc:	2301      	movs	r3, #1
1004a3be:	78a4      	ldrb	r4, [r4, #2]
1004a3c0:	2001      	movs	r0, #1
1004a3c2:	07a4      	lsls	r4, r4, #30
1004a3c4:	d500      	bpl.n	1004a3c8 <GAP_check_adv_status+0x54>
1004a3c6:	4602      	mov	r2, r0
1004a3c8:	3114      	adds	r1, #20
1004a3ca:	e7eb      	b.n	1004a3a4 <GAP_check_adv_status+0x30>
1004a3cc:	2801      	cmp	r0, #1
1004a3ce:	d102      	bne.n	1004a3d6 <GAP_check_adv_status+0x62>
1004a3d0:	2101      	movs	r1, #1
1004a3d2:	9c01      	ldr	r4, [sp, #4]
1004a3d4:	7021      	strb	r1, [r4, #0]
1004a3d6:	2b01      	cmp	r3, #1
1004a3d8:	d002      	beq.n	1004a3e0 <GAP_check_adv_status+0x6c>
1004a3da:	b2d1      	uxtb	r1, r2
1004a3dc:	2901      	cmp	r1, #1
1004a3de:	d102      	bne.n	1004a3e6 <GAP_check_adv_status+0x72>
1004a3e0:	2100      	movs	r1, #0
1004a3e2:	9a02      	ldr	r2, [sp, #8]
1004a3e4:	7011      	strb	r1, [r2, #0]
1004a3e6:	b2c0      	uxtb	r0, r0
1004a3e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004a3ea:	46c0      	nop			@ (mov r8, r8)

1004a3ec <__arm_cp.16_0>:
1004a3ec:	20000650 	.word	0x20000650

1004a3f0 <__arm_cp.16_1>:
1004a3f0:	20000668 	.word	0x20000668

1004a3f4 <GAP_ResumeAdvertising_ucfg_weak>:
1004a3f4:	b580      	push	{r7, lr}
1004a3f6:	2001      	movs	r0, #1
1004a3f8:	f7ff ff84 	bl	1004a304 <GAP_suspend_resume_active_advertising_sets_legacy>
1004a3fc:	bd80      	pop	{r7, pc}

1004a3fe <GAT_att_cmn_init_ucfg_weak>:
1004a3fe:	4770      	bx	lr

1004a400 <GAT_att_cmn_timer_expire_tsk_ucfg_weak>:
1004a400:	4770      	bx	lr

1004a402 <GAT_att_cmn_tx_pool_evt_tsk_ucfg_weak>:
1004a402:	4770      	bx	lr

1004a404 <GAT_att_srv_process_rx_pckt_tsk_ucfg_weak>:
1004a404:	4770      	bx	lr

1004a406 <GAT_srv_db_hash_tsk_ucfg_weak>:
1004a406:	4770      	bx	lr

1004a408 <GAT_srv_send_srv_change_tsk_ucfg_weak>:
1004a408:	4770      	bx	lr

1004a40a <hci_le_set_advertising_parameters>:
1004a40a:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a40c:	b089      	sub	sp, #36	@ 0x24
1004a40e:	461d      	mov	r5, r3
1004a410:	4616      	mov	r6, r2
1004a412:	460f      	mov	r7, r1
1004a414:	9004      	str	r0, [sp, #16]
1004a416:	2002      	movs	r0, #2
1004a418:	2401      	movs	r4, #1
1004a41a:	4621      	mov	r1, r4
1004a41c:	f000 f8c6 	bl	1004a5ac <hci_get_set_legacy_ext_flag>
1004a420:	2800      	cmp	r0, #0
1004a422:	d150      	bne.n	1004a4c6 <hci_le_set_advertising_parameters+0xbc>
1004a424:	9703      	str	r7, [sp, #12]
1004a426:	2012      	movs	r0, #18
1004a428:	2e04      	cmp	r6, #4
1004a42a:	d84c      	bhi.n	1004a4c6 <hci_le_set_advertising_parameters+0xbc>
1004a42c:	9002      	str	r0, [sp, #8]
1004a42e:	f000 f8e2 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004a432:	2e01      	cmp	r6, #1
1004a434:	d803      	bhi.n	1004a43e <hci_le_set_advertising_parameters+0x34>
1004a436:	2800      	cmp	r0, #0
1004a438:	d101      	bne.n	1004a43e <hci_le_set_advertising_parameters+0x34>
1004a43a:	2011      	movs	r0, #17
1004a43c:	e043      	b.n	1004a4c6 <hci_le_set_advertising_parameters+0xbc>
1004a43e:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004a440:	9000      	str	r0, [sp, #0]
1004a442:	9810      	ldr	r0, [sp, #64]	@ 0x40
1004a444:	9001      	str	r0, [sp, #4]
1004a446:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1004a448:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004a44a:	af05      	add	r7, sp, #20
1004a44c:	7238      	strb	r0, [r7, #8]
1004a44e:	71fd      	strb	r5, [r7, #7]
1004a450:	713e      	strb	r6, [r7, #4]
1004a452:	9803      	ldr	r0, [sp, #12]
1004a454:	8078      	strh	r0, [r7, #2]
1004a456:	9804      	ldr	r0, [sp, #16]
1004a458:	8038      	strh	r0, [r7, #0]
1004a45a:	4638      	mov	r0, r7
1004a45c:	3009      	adds	r0, #9
1004a45e:	2206      	movs	r2, #6
1004a460:	f7f7 fa4c 	bl	100418fc <BLEPLAT_MemCpy>
1004a464:	9900      	ldr	r1, [sp, #0]
1004a466:	71b9      	strb	r1, [r7, #6]
1004a468:	9801      	ldr	r0, [sp, #4]
1004a46a:	7178      	strb	r0, [r7, #5]
1004a46c:	7938      	ldrb	r0, [r7, #4]
1004a46e:	2804      	cmp	r0, #4
1004a470:	d001      	beq.n	1004a476 <hci_le_set_advertising_parameters+0x6c>
1004a472:	2801      	cmp	r0, #1
1004a474:	d104      	bne.n	1004a480 <hci_le_set_advertising_parameters+0x76>
1004a476:	a905      	add	r1, sp, #20
1004a478:	7a09      	ldrb	r1, [r1, #8]
1004a47a:	2902      	cmp	r1, #2
1004a47c:	d302      	bcc.n	1004a484 <hci_le_set_advertising_parameters+0x7a>
1004a47e:	e021      	b.n	1004a4c4 <hci_le_set_advertising_parameters+0xba>
1004a480:	2903      	cmp	r1, #3
1004a482:	d81f      	bhi.n	1004a4c4 <hci_le_set_advertising_parameters+0xba>
1004a484:	2801      	cmp	r0, #1
1004a486:	d10e      	bne.n	1004a4a6 <hci_le_set_advertising_parameters+0x9c>
1004a488:	f000 f8ab 	bl	1004a5e2 <hci_le_check_own_address_type_max_value_ucfg_weak>
1004a48c:	a905      	add	r1, sp, #20
1004a48e:	79c9      	ldrb	r1, [r1, #7]
1004a490:	4281      	cmp	r1, r0
1004a492:	d817      	bhi.n	1004a4c4 <hci_le_set_advertising_parameters+0xba>
1004a494:	a805      	add	r0, sp, #20
1004a496:	7940      	ldrb	r0, [r0, #5]
1004a498:	0740      	lsls	r0, r0, #29
1004a49a:	9802      	ldr	r0, [sp, #8]
1004a49c:	d013      	beq.n	1004a4c6 <hci_le_set_advertising_parameters+0xbc>
1004a49e:	a805      	add	r0, sp, #20
1004a4a0:	f000 fc52 	bl	1004ad48 <LL_LE_Set_Advertising_Parameters>
1004a4a4:	e00f      	b.n	1004a4c6 <hci_le_set_advertising_parameters+0xbc>
1004a4a6:	a805      	add	r0, sp, #20
1004a4a8:	8800      	ldrh	r0, [r0, #0]
1004a4aa:	2820      	cmp	r0, #32
1004a4ac:	d30a      	bcc.n	1004a4c4 <hci_le_set_advertising_parameters+0xba>
1004a4ae:	03a1      	lsls	r1, r4, #14
1004a4b0:	4288      	cmp	r0, r1
1004a4b2:	d807      	bhi.n	1004a4c4 <hci_le_set_advertising_parameters+0xba>
1004a4b4:	aa05      	add	r2, sp, #20
1004a4b6:	8852      	ldrh	r2, [r2, #2]
1004a4b8:	2a20      	cmp	r2, #32
1004a4ba:	d303      	bcc.n	1004a4c4 <hci_le_set_advertising_parameters+0xba>
1004a4bc:	428a      	cmp	r2, r1
1004a4be:	d801      	bhi.n	1004a4c4 <hci_le_set_advertising_parameters+0xba>
1004a4c0:	4290      	cmp	r0, r2
1004a4c2:	d9e1      	bls.n	1004a488 <hci_le_set_advertising_parameters+0x7e>
1004a4c4:	9802      	ldr	r0, [sp, #8]
1004a4c6:	b009      	add	sp, #36	@ 0x24
1004a4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004a4ca <hci_le_set_advertising_enable>:
1004a4ca:	b510      	push	{r4, lr}
1004a4cc:	4604      	mov	r4, r0
1004a4ce:	2002      	movs	r0, #2
1004a4d0:	2101      	movs	r1, #1
1004a4d2:	f000 f86b 	bl	1004a5ac <hci_get_set_legacy_ext_flag>
1004a4d6:	2800      	cmp	r0, #0
1004a4d8:	d000      	beq.n	1004a4dc <hci_le_set_advertising_enable+0x12>
1004a4da:	bd10      	pop	{r4, pc}
1004a4dc:	2c01      	cmp	r4, #1
1004a4de:	d803      	bhi.n	1004a4e8 <hci_le_set_advertising_enable+0x1e>
1004a4e0:	4620      	mov	r0, r4
1004a4e2:	f000 fcb5 	bl	1004ae50 <LL_LE_Set_Advertise_Enable>
1004a4e6:	bd10      	pop	{r4, pc}
1004a4e8:	2012      	movs	r0, #18
1004a4ea:	bd10      	pop	{r4, pc}

1004a4ec <chc_csr_ucfg_weak>:
1004a4ec:	2000      	movs	r0, #0
1004a4ee:	4770      	bx	lr

1004a4f0 <HCI_Init>:
1004a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004a4f2:	4917      	ldr	r1, [pc, #92]	@ (1004a550 <__arm_cp.0_0>)
1004a4f4:	6808      	ldr	r0, [r1, #0]
1004a4f6:	460d      	mov	r5, r1
1004a4f8:	2124      	movs	r1, #36	@ 0x24
1004a4fa:	2400      	movs	r4, #0
1004a4fc:	5444      	strb	r4, [r0, r1]
1004a4fe:	3025      	adds	r0, #37	@ 0x25
1004a500:	2211      	movs	r2, #17
1004a502:	4f14      	ldr	r7, [pc, #80]	@ (1004a554 <__arm_cp.0_1>)
1004a504:	4621      	mov	r1, r4
1004a506:	47b8      	blx	r7
1004a508:	6828      	ldr	r0, [r5, #0]
1004a50a:	3036      	adds	r0, #54	@ 0x36
1004a50c:	26ff      	movs	r6, #255	@ 0xff
1004a50e:	2205      	movs	r2, #5
1004a510:	4631      	mov	r1, r6
1004a512:	47b8      	blx	r7
1004a514:	6829      	ldr	r1, [r5, #0]
1004a516:	203b      	movs	r0, #59	@ 0x3b
1004a518:	231f      	movs	r3, #31
1004a51a:	540b      	strb	r3, [r1, r0]
1004a51c:	2201      	movs	r2, #1
1004a51e:	0355      	lsls	r5, r2, #13
1004a520:	4608      	mov	r0, r1
1004a522:	303b      	adds	r0, #59	@ 0x3b
1004a524:	5285      	strh	r5, [r0, r2]
1004a526:	72c3      	strb	r3, [r0, #11]
1004a528:	3147      	adds	r1, #71	@ 0x47
1004a52a:	2207      	movs	r2, #7
1004a52c:	4608      	mov	r0, r1
1004a52e:	4621      	mov	r1, r4
1004a530:	47b8      	blx	r7
1004a532:	4d07      	ldr	r5, [pc, #28]	@ (1004a550 <__arm_cp.0_0>)
1004a534:	6828      	ldr	r0, [r5, #0]
1004a536:	304e      	adds	r0, #78	@ 0x4e
1004a538:	2208      	movs	r2, #8
1004a53a:	4631      	mov	r1, r6
1004a53c:	47b8      	blx	r7
1004a53e:	4806      	ldr	r0, [pc, #24]	@ (1004a558 <__arm_cp.0_2>)
1004a540:	6800      	ldr	r0, [r0, #0]
1004a542:	2135      	movs	r1, #53	@ 0x35
1004a544:	5444      	strb	r4, [r0, r1]
1004a546:	6828      	ldr	r0, [r5, #0]
1004a548:	4904      	ldr	r1, [pc, #16]	@ (1004a55c <__arm_cp.0_3>)
1004a54a:	6201      	str	r1, [r0, #32]
1004a54c:	65c4      	str	r4, [r0, #92]	@ 0x5c
1004a54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004a550 <__arm_cp.0_0>:
1004a550:	20000658 	.word	0x20000658

1004a554 <__arm_cp.0_1>:
1004a554:	1004191d 	.word	0x1004191d

1004a558 <__arm_cp.0_2>:
1004a558:	20000648 	.word	0x20000648

1004a55c <__arm_cp.0_3>:
1004a55c:	fffffdbe 	.word	0xfffffdbe

1004a560 <Controller_Process_Q_ucfg_weak>:
1004a560:	4770      	bx	lr

1004a562 <hci_le_set_random_address>:
1004a562:	b580      	push	{r7, lr}
1004a564:	f000 fe84 	bl	1004b270 <LL_Set_Advertising_Set_Random_Address>
1004a568:	bd80      	pop	{r7, pc}
	...

1004a56c <hci_set_event_mask>:
1004a56c:	b510      	push	{r4, lr}
1004a56e:	2136      	movs	r1, #54	@ 0x36
1004a570:	4a05      	ldr	r2, [pc, #20]	@ (1004a588 <__arm_cp.14_0>)
1004a572:	293e      	cmp	r1, #62	@ 0x3e
1004a574:	d006      	beq.n	1004a584 <hci_set_event_mask+0x18>
1004a576:	1843      	adds	r3, r0, r1
1004a578:	3b36      	subs	r3, #54	@ 0x36
1004a57a:	781b      	ldrb	r3, [r3, #0]
1004a57c:	6814      	ldr	r4, [r2, #0]
1004a57e:	5463      	strb	r3, [r4, r1]
1004a580:	1c49      	adds	r1, r1, #1
1004a582:	e7f6      	b.n	1004a572 <hci_set_event_mask+0x6>
1004a584:	2000      	movs	r0, #0
1004a586:	bd10      	pop	{r4, pc}

1004a588 <__arm_cp.14_0>:
1004a588:	20000658 	.word	0x20000658

1004a58c <hci_le_set_event_mask>:
1004a58c:	b510      	push	{r4, lr}
1004a58e:	2146      	movs	r1, #70	@ 0x46
1004a590:	4a05      	ldr	r2, [pc, #20]	@ (1004a5a8 <__arm_cp.16_0>)
1004a592:	294e      	cmp	r1, #78	@ 0x4e
1004a594:	d006      	beq.n	1004a5a4 <hci_le_set_event_mask+0x18>
1004a596:	1843      	adds	r3, r0, r1
1004a598:	3b46      	subs	r3, #70	@ 0x46
1004a59a:	781b      	ldrb	r3, [r3, #0]
1004a59c:	6814      	ldr	r4, [r2, #0]
1004a59e:	5463      	strb	r3, [r4, r1]
1004a5a0:	1c49      	adds	r1, r1, #1
1004a5a2:	e7f6      	b.n	1004a592 <hci_le_set_event_mask+0x6>
1004a5a4:	2000      	movs	r0, #0
1004a5a6:	bd10      	pop	{r4, pc}

1004a5a8 <__arm_cp.16_0>:
1004a5a8:	20000658 	.word	0x20000658

1004a5ac <hci_get_set_legacy_ext_flag>:
1004a5ac:	4a05      	ldr	r2, [pc, #20]	@ (1004a5c4 <__arm_cp.18_0>)
1004a5ae:	6812      	ldr	r2, [r2, #0]
1004a5b0:	2335      	movs	r3, #53	@ 0x35
1004a5b2:	5cd3      	ldrb	r3, [r2, r3]
1004a5b4:	4203      	tst	r3, r0
1004a5b6:	d001      	beq.n	1004a5bc <hci_get_set_legacy_ext_flag+0x10>
1004a5b8:	200c      	movs	r0, #12
1004a5ba:	4770      	bx	lr
1004a5bc:	3235      	adds	r2, #53	@ 0x35
1004a5be:	7011      	strb	r1, [r2, #0]
1004a5c0:	2000      	movs	r0, #0
1004a5c2:	4770      	bx	lr

1004a5c4 <__arm_cp.18_0>:
1004a5c4:	20000648 	.word	0x20000648

1004a5c8 <hci_check_legacy_ext_flag>:
1004a5c8:	4903      	ldr	r1, [pc, #12]	@ (1004a5d8 <__arm_cp.25_0>)
1004a5ca:	6809      	ldr	r1, [r1, #0]
1004a5cc:	2235      	movs	r2, #53	@ 0x35
1004a5ce:	5c89      	ldrb	r1, [r1, r2]
1004a5d0:	4008      	ands	r0, r1
1004a5d2:	1e41      	subs	r1, r0, #1
1004a5d4:	4188      	sbcs	r0, r1
1004a5d6:	4770      	bx	lr

1004a5d8 <__arm_cp.25_0>:
1004a5d8:	20000648 	.word	0x20000648

1004a5dc <LLC_offline_control_procedures_processing_ucfg_weak>:
1004a5dc:	4770      	bx	lr

1004a5de <cte_csr_ucfg_weak>:
1004a5de:	2000      	movs	r0, #0
1004a5e0:	4770      	bx	lr

1004a5e2 <hci_le_check_own_address_type_max_value_ucfg_weak>:
1004a5e2:	2001      	movs	r0, #1
1004a5e4:	4770      	bx	lr

1004a5e6 <data_length_extension_csr_ucfg_weak>:
1004a5e6:	2000      	movs	r0, #0
1004a5e8:	4770      	bx	lr

1004a5ea <pcl_csr_ucfg_weak>:
1004a5ea:	2000      	movs	r0, #0
1004a5ec:	4770      	bx	lr

1004a5ee <phy_upd_csr_ucfg_weak>:
1004a5ee:	2000      	movs	r0, #0
1004a5f0:	4770      	bx	lr

1004a5f2 <scan_csr_ucfg_weak>:
1004a5f2:	2000      	movs	r0, #0
1004a5f4:	4770      	bx	lr

1004a5f6 <conn_supp_csr_ucfg_weak>:
1004a5f6:	2000      	movs	r0, #0
1004a5f8:	4770      	bx	lr

1004a5fa <l2c_cos_csr_ucfg_weak>:
1004a5fa:	2000      	movs	r0, #0
1004a5fc:	4770      	bx	lr

1004a5fe <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
1004a5fe:	4770      	bx	lr

1004a600 <L2C_init_ucfg_weak>:
1004a600:	2000      	movs	r0, #0
1004a602:	4770      	bx	lr

1004a604 <llc_conn_get_cntxt_p>:
1004a604:	4803      	ldr	r0, [pc, #12]	@ (1004a614 <__arm_cp.0_0>)
1004a606:	6800      	ldr	r0, [r0, #0]
1004a608:	219c      	movs	r1, #156	@ 0x9c
1004a60a:	5840      	ldr	r0, [r0, r1]
1004a60c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004a60e:	6800      	ldr	r0, [r0, #0]
1004a610:	4770      	bx	lr
1004a612:	46c0      	nop			@ (mov r8, r8)

1004a614 <__arm_cp.0_0>:
1004a614:	20000658 	.word	0x20000658

1004a618 <llc_conn_get_cntxt_per_p>:
1004a618:	214d      	movs	r1, #77	@ 0x4d
1004a61a:	0089      	lsls	r1, r1, #2
1004a61c:	4341      	muls	r1, r0
1004a61e:	4804      	ldr	r0, [pc, #16]	@ (1004a630 <__arm_cp.1_0>)
1004a620:	6800      	ldr	r0, [r0, #0]
1004a622:	229c      	movs	r2, #156	@ 0x9c
1004a624:	5880      	ldr	r0, [r0, r2]
1004a626:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004a628:	6840      	ldr	r0, [r0, #4]
1004a62a:	1840      	adds	r0, r0, r1
1004a62c:	4770      	bx	lr
1004a62e:	46c0      	nop			@ (mov r8, r8)

1004a630 <__arm_cp.1_0>:
1004a630:	20000658 	.word	0x20000658

1004a634 <llc_conn_mem_allocate>:
1004a634:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a636:	b085      	sub	sp, #20
1004a638:	2b01      	cmp	r3, #1
1004a63a:	d000      	beq.n	1004a63e <llc_conn_mem_allocate+0xa>
1004a63c:	e082      	b.n	1004a744 <llc_conn_mem_allocate+0x110>
1004a63e:	ab02      	add	r3, sp, #8
1004a640:	c307      	stmia	r3!, {r0, r1, r2}
1004a642:	4841      	ldr	r0, [pc, #260]	@ (1004a748 <__arm_cp.10_0>)
1004a644:	7fc1      	ldrb	r1, [r0, #31]
1004a646:	9101      	str	r1, [sp, #4]
1004a648:	7ac4      	ldrb	r4, [r0, #11]
1004a64a:	9400      	str	r4, [sp, #0]
1004a64c:	2601      	movs	r6, #1
1004a64e:	2124      	movs	r1, #36	@ 0x24
1004a650:	4a3e      	ldr	r2, [pc, #248]	@ (1004a74c <__arm_cp.10_1>)
1004a652:	4630      	mov	r0, r6
1004a654:	4790      	blx	r2
1004a656:	493e      	ldr	r1, [pc, #248]	@ (1004a750 <__arm_cp.10_2>)
1004a658:	6809      	ldr	r1, [r1, #0]
1004a65a:	279c      	movs	r7, #156	@ 0x9c
1004a65c:	59c9      	ldr	r1, [r1, r7]
1004a65e:	63c8      	str	r0, [r1, #60]	@ 0x3c
1004a660:	2538      	movs	r5, #56	@ 0x38
1004a662:	4630      	mov	r0, r6
1004a664:	4629      	mov	r1, r5
1004a666:	4a39      	ldr	r2, [pc, #228]	@ (1004a74c <__arm_cp.10_1>)
1004a668:	4790      	blx	r2
1004a66a:	4939      	ldr	r1, [pc, #228]	@ (1004a750 <__arm_cp.10_2>)
1004a66c:	6809      	ldr	r1, [r1, #0]
1004a66e:	59c9      	ldr	r1, [r1, r7]
1004a670:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a672:	6008      	str	r0, [r1, #0]
1004a674:	204d      	movs	r0, #77	@ 0x4d
1004a676:	0081      	lsls	r1, r0, #2
1004a678:	4620      	mov	r0, r4
1004a67a:	4c34      	ldr	r4, [pc, #208]	@ (1004a74c <__arm_cp.10_1>)
1004a67c:	47a0      	blx	r4
1004a67e:	4934      	ldr	r1, [pc, #208]	@ (1004a750 <__arm_cp.10_2>)
1004a680:	6809      	ldr	r1, [r1, #0]
1004a682:	59c9      	ldr	r1, [r1, r7]
1004a684:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a686:	6048      	str	r0, [r1, #4]
1004a688:	9801      	ldr	r0, [sp, #4]
1004a68a:	4086      	lsls	r6, r0
1004a68c:	b2f0      	uxtb	r0, r6
1004a68e:	2108      	movs	r1, #8
1004a690:	47a0      	blx	r4
1004a692:	492f      	ldr	r1, [pc, #188]	@ (1004a750 <__arm_cp.10_2>)
1004a694:	6809      	ldr	r1, [r1, #0]
1004a696:	59c9      	ldr	r1, [r1, r7]
1004a698:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a69a:	6809      	ldr	r1, [r1, #0]
1004a69c:	2228      	movs	r2, #40	@ 0x28
1004a69e:	2300      	movs	r3, #0
1004a6a0:	548b      	strb	r3, [r1, r2]
1004a6a2:	6248      	str	r0, [r1, #36]	@ 0x24
1004a6a4:	3128      	adds	r1, #40	@ 0x28
1004a6a6:	704e      	strb	r6, [r1, #1]
1004a6a8:	9c00      	ldr	r4, [sp, #0]
1004a6aa:	2013      	movs	r0, #19
1004a6ac:	2104      	movs	r1, #4
1004a6ae:	4e27      	ldr	r6, [pc, #156]	@ (1004a74c <__arm_cp.10_1>)
1004a6b0:	47b0      	blx	r6
1004a6b2:	4927      	ldr	r1, [pc, #156]	@ (1004a750 <__arm_cp.10_2>)
1004a6b4:	6809      	ldr	r1, [r1, #0]
1004a6b6:	59c9      	ldr	r1, [r1, r7]
1004a6b8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a6ba:	6108      	str	r0, [r1, #16]
1004a6bc:	4620      	mov	r0, r4
1004a6be:	4629      	mov	r1, r5
1004a6c0:	47b0      	blx	r6
1004a6c2:	4633      	mov	r3, r6
1004a6c4:	4a22      	ldr	r2, [pc, #136]	@ (1004a750 <__arm_cp.10_2>)
1004a6c6:	6811      	ldr	r1, [r2, #0]
1004a6c8:	59c9      	ldr	r1, [r1, r7]
1004a6ca:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a6cc:	6088      	str	r0, [r1, #8]
1004a6ce:	4626      	mov	r6, r4
1004a6d0:	4620      	mov	r0, r4
1004a6d2:	4629      	mov	r1, r5
1004a6d4:	4615      	mov	r5, r2
1004a6d6:	4798      	blx	r3
1004a6d8:	6829      	ldr	r1, [r5, #0]
1004a6da:	59c9      	ldr	r1, [r1, r7]
1004a6dc:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a6de:	60c8      	str	r0, [r1, #12]
1004a6e0:	9802      	ldr	r0, [sp, #8]
1004a6e2:	2801      	cmp	r0, #1
1004a6e4:	d107      	bne.n	1004a6f6 <llc_conn_mem_allocate+0xc2>
1004a6e6:	210e      	movs	r1, #14
1004a6e8:	4630      	mov	r0, r6
1004a6ea:	f001 ff1b 	bl	1004c524 <csmem_mem_0_assign>
1004a6ee:	6829      	ldr	r1, [r5, #0]
1004a6f0:	59c9      	ldr	r1, [r1, r7]
1004a6f2:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a6f4:	6148      	str	r0, [r1, #20]
1004a6f6:	9803      	ldr	r0, [sp, #12]
1004a6f8:	2801      	cmp	r0, #1
1004a6fa:	d107      	bne.n	1004a70c <llc_conn_mem_allocate+0xd8>
1004a6fc:	2108      	movs	r1, #8
1004a6fe:	4630      	mov	r0, r6
1004a700:	f001 ff10 	bl	1004c524 <csmem_mem_0_assign>
1004a704:	6829      	ldr	r1, [r5, #0]
1004a706:	59c9      	ldr	r1, [r1, r7]
1004a708:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a70a:	6188      	str	r0, [r1, #24]
1004a70c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1004a70e:	9804      	ldr	r0, [sp, #16]
1004a710:	2801      	cmp	r0, #1
1004a712:	d10d      	bne.n	1004a730 <llc_conn_mem_allocate+0xfc>
1004a714:	2120      	movs	r1, #32
1004a716:	4630      	mov	r0, r6
1004a718:	f001 ff04 	bl	1004c524 <csmem_mem_0_assign>
1004a71c:	6829      	ldr	r1, [r5, #0]
1004a71e:	59c9      	ldr	r1, [r1, r7]
1004a720:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a722:	61c8      	str	r0, [r1, #28]
1004a724:	2001      	movs	r0, #1
1004a726:	2111      	movs	r1, #17
1004a728:	f001 fefc 	bl	1004c524 <csmem_mem_0_assign>
1004a72c:	6829      	ldr	r1, [r5, #0]
1004a72e:	6648      	str	r0, [r1, #100]	@ 0x64
1004a730:	2c01      	cmp	r4, #1
1004a732:	d107      	bne.n	1004a744 <llc_conn_mem_allocate+0x110>
1004a734:	211c      	movs	r1, #28
1004a736:	4630      	mov	r0, r6
1004a738:	f001 fef4 	bl	1004c524 <csmem_mem_0_assign>
1004a73c:	6829      	ldr	r1, [r5, #0]
1004a73e:	59c9      	ldr	r1, [r1, r7]
1004a740:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004a742:	6208      	str	r0, [r1, #32]
1004a744:	b005      	add	sp, #20
1004a746:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004a748 <__arm_cp.10_0>:
1004a748:	20000668 	.word	0x20000668

1004a74c <__arm_cp.10_1>:
1004a74c:	1004c525 	.word	0x1004c525

1004a750 <__arm_cp.10_2>:
1004a750:	20000658 	.word	0x20000658

1004a754 <llc_conn_list_search_address>:
1004a754:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1004a756:	460c      	mov	r4, r1
1004a758:	4605      	mov	r5, r0
1004a75a:	f7ff ff53 	bl	1004a604 <llc_conn_get_cntxt_p>
1004a75e:	2136      	movs	r1, #54	@ 0x36
1004a760:	5c40      	ldrb	r0, [r0, r1]
1004a762:	2800      	cmp	r0, #0
1004a764:	d001      	beq.n	1004a76a <llc_conn_list_search_address+0x16>
1004a766:	2000      	movs	r0, #0
1004a768:	e011      	b.n	1004a78e <llc_conn_list_search_address+0x3a>
1004a76a:	480a      	ldr	r0, [pc, #40]	@ (1004a794 <__arm_cp.26_0>)
1004a76c:	6800      	ldr	r0, [r0, #0]
1004a76e:	219c      	movs	r1, #156	@ 0x9c
1004a770:	5840      	ldr	r0, [r0, r1]
1004a772:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004a774:	6801      	ldr	r1, [r0, #0]
1004a776:	6a48      	ldr	r0, [r1, #36]	@ 0x24
1004a778:	6a89      	ldr	r1, [r1, #40]	@ 0x28
1004a77a:	aa03      	add	r2, sp, #12
1004a77c:	2300      	movs	r3, #0
1004a77e:	9300      	str	r3, [sp, #0]
1004a780:	9201      	str	r2, [sp, #4]
1004a782:	22fe      	movs	r2, #254	@ 0xfe
1004a784:	4395      	bics	r5, r2
1004a786:	462a      	mov	r2, r5
1004a788:	4623      	mov	r3, r4
1004a78a:	f002 fb2b 	bl	1004cde4 <addr8_list_search>
1004a78e:	b004      	add	sp, #16
1004a790:	bdb0      	pop	{r4, r5, r7, pc}
1004a792:	46c0      	nop			@ (mov r8, r8)

1004a794 <__arm_cp.26_0>:
1004a794:	20000658 	.word	0x20000658

1004a798 <llc_conn_push_connection_complete_event>:
1004a798:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a79a:	b08d      	sub	sp, #52	@ 0x34
1004a79c:	4604      	mov	r4, r0
1004a79e:	4895      	ldr	r0, [pc, #596]	@ (1004a9f4 <__arm_cp.28_0>)
1004a7a0:	6800      	ldr	r0, [r0, #0]
1004a7a2:	212c      	movs	r1, #44	@ 0x2c
1004a7a4:	5c40      	ldrb	r0, [r0, r1]
1004a7a6:	07c0      	lsls	r0, r0, #31
1004a7a8:	0ec5      	lsrs	r5, r0, #27
1004a7aa:	206f      	movs	r0, #111	@ 0x6f
1004a7ac:	43c6      	mvns	r6, r0
1004a7ae:	406e      	eors	r6, r5
1004a7b0:	f000 f93a 	bl	1004aa28 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004a7b4:	4990      	ldr	r1, [pc, #576]	@ (1004a9f8 <__arm_cp.28_1>)
1004a7b6:	6809      	ldr	r1, [r1, #0]
1004a7b8:	223d      	movs	r2, #61	@ 0x3d
1004a7ba:	5c8b      	ldrb	r3, [r1, r2]
1004a7bc:	2220      	movs	r2, #32
1004a7be:	4013      	ands	r3, r2
1004a7c0:	313d      	adds	r1, #61	@ 0x3d
1004a7c2:	2800      	cmp	r0, #0
1004a7c4:	d066      	beq.n	1004a894 <llc_conn_push_connection_complete_event+0xfc>
1004a7c6:	2b00      	cmp	r3, #0
1004a7c8:	d100      	bne.n	1004a7cc <llc_conn_push_connection_complete_event+0x34>
1004a7ca:	e110      	b.n	1004a9ee <llc_conn_push_connection_complete_event+0x256>
1004a7cc:	7b88      	ldrb	r0, [r1, #14]
1004a7ce:	07c0      	lsls	r0, r0, #31
1004a7d0:	d063      	beq.n	1004a89a <llc_conn_push_connection_complete_event+0x102>
1004a7d2:	2d00      	cmp	r5, #0
1004a7d4:	d100      	bne.n	1004a7d8 <llc_conn_push_connection_complete_event+0x40>
1004a7d6:	2212      	movs	r2, #18
1004a7d8:	8aa0      	ldrh	r0, [r4, #20]
1004a7da:	900c      	str	r0, [sp, #48]	@ 0x30
1004a7dc:	7da7      	ldrb	r7, [r4, #22]
1004a7de:	7de0      	ldrb	r0, [r4, #23]
1004a7e0:	9008      	str	r0, [sp, #32]
1004a7e2:	8a60      	ldrh	r0, [r4, #18]
1004a7e4:	900b      	str	r0, [sp, #44]	@ 0x2c
1004a7e6:	8a20      	ldrh	r0, [r4, #16]
1004a7e8:	9009      	str	r0, [sp, #36]	@ 0x24
1004a7ea:	89a0      	ldrh	r0, [r4, #12]
1004a7ec:	900a      	str	r0, [sp, #40]	@ 0x28
1004a7ee:	6820      	ldr	r0, [r4, #0]
1004a7f0:	9005      	str	r0, [sp, #20]
1004a7f2:	6860      	ldr	r0, [r4, #4]
1004a7f4:	9007      	str	r0, [sp, #28]
1004a7f6:	68a0      	ldr	r0, [r4, #8]
1004a7f8:	9006      	str	r0, [sp, #24]
1004a7fa:	7e20      	ldrb	r0, [r4, #24]
1004a7fc:	9003      	str	r0, [sp, #12]
1004a7fe:	7e60      	ldrb	r0, [r4, #25]
1004a800:	9004      	str	r0, [sp, #16]
1004a802:	89e5      	ldrh	r5, [r4, #14]
1004a804:	7ea0      	ldrb	r0, [r4, #26]
1004a806:	9002      	str	r0, [sp, #8]
1004a808:	487c      	ldr	r0, [pc, #496]	@ (1004a9fc <__arm_cp.28_2>)
1004a80a:	6800      	ldr	r0, [r0, #0]
1004a80c:	6900      	ldr	r0, [r0, #16]
1004a80e:	b2f1      	uxtb	r1, r6
1004a810:	230a      	movs	r3, #10
1004a812:	f7fe ffff 	bl	10049814 <aci_event_fifo_push_header>
1004a816:	2800      	cmp	r0, #0
1004a818:	d100      	bne.n	1004a81c <llc_conn_push_connection_complete_event+0x84>
1004a81a:	e0e8      	b.n	1004a9ee <llc_conn_push_connection_complete_event+0x256>
1004a81c:	4604      	mov	r4, r0
1004a81e:	9701      	str	r7, [sp, #4]
1004a820:	4607      	mov	r7, r0
1004a822:	371f      	adds	r7, #31
1004a824:	7245      	strb	r5, [r0, #9]
1004a826:	9803      	ldr	r0, [sp, #12]
1004a828:	7320      	strb	r0, [r4, #12]
1004a82a:	9804      	ldr	r0, [sp, #16]
1004a82c:	72e0      	strb	r0, [r4, #11]
1004a82e:	9802      	ldr	r0, [sp, #8]
1004a830:	7220      	strb	r0, [r4, #8]
1004a832:	0a28      	lsrs	r0, r5, #8
1004a834:	72a0      	strb	r0, [r4, #10]
1004a836:	4620      	mov	r0, r4
1004a838:	300d      	adds	r0, #13
1004a83a:	2506      	movs	r5, #6
1004a83c:	9905      	ldr	r1, [sp, #20]
1004a83e:	462a      	mov	r2, r5
1004a840:	4b6f      	ldr	r3, [pc, #444]	@ (1004aa00 <__arm_cp.28_3>)
1004a842:	4798      	blx	r3
1004a844:	4620      	mov	r0, r4
1004a846:	3013      	adds	r0, #19
1004a848:	9906      	ldr	r1, [sp, #24]
1004a84a:	462a      	mov	r2, r5
1004a84c:	4b6c      	ldr	r3, [pc, #432]	@ (1004aa00 <__arm_cp.28_3>)
1004a84e:	4798      	blx	r3
1004a850:	4b6b      	ldr	r3, [pc, #428]	@ (1004aa00 <__arm_cp.28_3>)
1004a852:	4620      	mov	r0, r4
1004a854:	3019      	adds	r0, #25
1004a856:	9907      	ldr	r1, [sp, #28]
1004a858:	462a      	mov	r2, r5
1004a85a:	4798      	blx	r3
1004a85c:	2021      	movs	r0, #33	@ 0x21
1004a85e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004a860:	5421      	strb	r1, [r4, r0]
1004a862:	2025      	movs	r0, #37	@ 0x25
1004a864:	9a08      	ldr	r2, [sp, #32]
1004a866:	5422      	strb	r2, [r4, r0]
1004a868:	4620      	mov	r0, r4
1004a86a:	3021      	adds	r0, #33	@ 0x21
1004a86c:	0a09      	lsrs	r1, r1, #8
1004a86e:	7041      	strb	r1, [r0, #1]
1004a870:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004a872:	0a08      	lsrs	r0, r1, #8
1004a874:	7078      	strb	r0, [r7, #1]
1004a876:	7039      	strb	r1, [r7, #0]
1004a878:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a87a:	0a08      	lsrs	r0, r1, #8
1004a87c:	7178      	strb	r0, [r7, #5]
1004a87e:	7139      	strb	r1, [r7, #4]
1004a880:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004a882:	0a08      	lsrs	r0, r1, #8
1004a884:	7278      	strb	r0, [r7, #9]
1004a886:	7239      	strb	r1, [r7, #8]
1004a888:	9801      	ldr	r0, [sp, #4]
1004a88a:	71f8      	strb	r0, [r7, #7]
1004a88c:	1d20      	adds	r0, r4, #4
1004a88e:	2129      	movs	r1, #41	@ 0x29
1004a890:	2222      	movs	r2, #34	@ 0x22
1004a892:	e0a2      	b.n	1004a9da <llc_conn_push_connection_complete_event+0x242>
1004a894:	2b00      	cmp	r3, #0
1004a896:	d100      	bne.n	1004a89a <llc_conn_push_connection_complete_event+0x102>
1004a898:	e0a9      	b.n	1004a9ee <llc_conn_push_connection_complete_event+0x256>
1004a89a:	7a88      	ldrb	r0, [r1, #10]
1004a89c:	0780      	lsls	r0, r0, #30
1004a89e:	d445      	bmi.n	1004a92c <llc_conn_push_connection_complete_event+0x194>
1004a8a0:	7a48      	ldrb	r0, [r1, #9]
1004a8a2:	07c0      	lsls	r0, r0, #31
1004a8a4:	d100      	bne.n	1004a8a8 <llc_conn_push_connection_complete_event+0x110>
1004a8a6:	e0a2      	b.n	1004a9ee <llc_conn_push_connection_complete_event+0x256>
1004a8a8:	2008      	movs	r0, #8
1004a8aa:	4305      	orrs	r5, r0
1004a8ac:	7de0      	ldrb	r0, [r4, #23]
1004a8ae:	900c      	str	r0, [sp, #48]	@ 0x30
1004a8b0:	8a60      	ldrh	r0, [r4, #18]
1004a8b2:	900b      	str	r0, [sp, #44]	@ 0x2c
1004a8b4:	8a20      	ldrh	r0, [r4, #16]
1004a8b6:	9009      	str	r0, [sp, #36]	@ 0x24
1004a8b8:	89a0      	ldrh	r0, [r4, #12]
1004a8ba:	900a      	str	r0, [sp, #40]	@ 0x28
1004a8bc:	6820      	ldr	r0, [r4, #0]
1004a8be:	9008      	str	r0, [sp, #32]
1004a8c0:	7e20      	ldrb	r0, [r4, #24]
1004a8c2:	9006      	str	r0, [sp, #24]
1004a8c4:	7e60      	ldrb	r0, [r4, #25]
1004a8c6:	9007      	str	r0, [sp, #28]
1004a8c8:	89e7      	ldrh	r7, [r4, #14]
1004a8ca:	7ea0      	ldrb	r0, [r4, #26]
1004a8cc:	9005      	str	r0, [sp, #20]
1004a8ce:	484b      	ldr	r0, [pc, #300]	@ (1004a9fc <__arm_cp.28_2>)
1004a8d0:	6800      	ldr	r0, [r0, #0]
1004a8d2:	6900      	ldr	r0, [r0, #16]
1004a8d4:	b2f1      	uxtb	r1, r6
1004a8d6:	2306      	movs	r3, #6
1004a8d8:	462a      	mov	r2, r5
1004a8da:	f7fe ff9b 	bl	10049814 <aci_event_fifo_push_header>
1004a8de:	2800      	cmp	r0, #0
1004a8e0:	d100      	bne.n	1004a8e4 <llc_conn_push_connection_complete_event+0x14c>
1004a8e2:	e084      	b.n	1004a9ee <llc_conn_push_connection_complete_event+0x256>
1004a8e4:	4604      	mov	r4, r0
1004a8e6:	4605      	mov	r5, r0
1004a8e8:	3513      	adds	r5, #19
1004a8ea:	7247      	strb	r7, [r0, #9]
1004a8ec:	9806      	ldr	r0, [sp, #24]
1004a8ee:	7320      	strb	r0, [r4, #12]
1004a8f0:	9807      	ldr	r0, [sp, #28]
1004a8f2:	72e0      	strb	r0, [r4, #11]
1004a8f4:	9805      	ldr	r0, [sp, #20]
1004a8f6:	7220      	strb	r0, [r4, #8]
1004a8f8:	0a38      	lsrs	r0, r7, #8
1004a8fa:	72a0      	strb	r0, [r4, #10]
1004a8fc:	4620      	mov	r0, r4
1004a8fe:	300d      	adds	r0, #13
1004a900:	2206      	movs	r2, #6
1004a902:	9908      	ldr	r1, [sp, #32]
1004a904:	f7f6 fffa 	bl	100418fc <BLEPLAT_MemCpy>
1004a908:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004a90a:	0a08      	lsrs	r0, r1, #8
1004a90c:	75a0      	strb	r0, [r4, #22]
1004a90e:	7561      	strb	r1, [r4, #21]
1004a910:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004a912:	0a08      	lsrs	r0, r1, #8
1004a914:	7068      	strb	r0, [r5, #1]
1004a916:	7029      	strb	r1, [r5, #0]
1004a918:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004a91a:	0a08      	lsrs	r0, r1, #8
1004a91c:	7168      	strb	r0, [r5, #5]
1004a91e:	7129      	strb	r1, [r5, #4]
1004a920:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004a922:	7660      	strb	r0, [r4, #25]
1004a924:	1d20      	adds	r0, r4, #4
1004a926:	2101      	movs	r1, #1
1004a928:	2213      	movs	r2, #19
1004a92a:	e056      	b.n	1004a9da <llc_conn_push_connection_complete_event+0x242>
1004a92c:	2d00      	cmp	r5, #0
1004a92e:	d001      	beq.n	1004a934 <llc_conn_push_connection_complete_event+0x19c>
1004a930:	221c      	movs	r2, #28
1004a932:	e000      	b.n	1004a936 <llc_conn_push_connection_complete_event+0x19e>
1004a934:	220d      	movs	r2, #13
1004a936:	7de0      	ldrb	r0, [r4, #23]
1004a938:	900a      	str	r0, [sp, #40]	@ 0x28
1004a93a:	8a67      	ldrh	r7, [r4, #18]
1004a93c:	8a20      	ldrh	r0, [r4, #16]
1004a93e:	900b      	str	r0, [sp, #44]	@ 0x2c
1004a940:	89a0      	ldrh	r0, [r4, #12]
1004a942:	900c      	str	r0, [sp, #48]	@ 0x30
1004a944:	6820      	ldr	r0, [r4, #0]
1004a946:	9007      	str	r0, [sp, #28]
1004a948:	6860      	ldr	r0, [r4, #4]
1004a94a:	9009      	str	r0, [sp, #36]	@ 0x24
1004a94c:	68a0      	ldr	r0, [r4, #8]
1004a94e:	9008      	str	r0, [sp, #32]
1004a950:	7e20      	ldrb	r0, [r4, #24]
1004a952:	9005      	str	r0, [sp, #20]
1004a954:	7e60      	ldrb	r0, [r4, #25]
1004a956:	9006      	str	r0, [sp, #24]
1004a958:	89e5      	ldrh	r5, [r4, #14]
1004a95a:	7ea0      	ldrb	r0, [r4, #26]
1004a95c:	9004      	str	r0, [sp, #16]
1004a95e:	4827      	ldr	r0, [pc, #156]	@ (1004a9fc <__arm_cp.28_2>)
1004a960:	6800      	ldr	r0, [r0, #0]
1004a962:	6900      	ldr	r0, [r0, #16]
1004a964:	b2f1      	uxtb	r1, r6
1004a966:	2309      	movs	r3, #9
1004a968:	f7fe ff54 	bl	10049814 <aci_event_fifo_push_header>
1004a96c:	2800      	cmp	r0, #0
1004a96e:	d03e      	beq.n	1004a9ee <llc_conn_push_connection_complete_event+0x256>
1004a970:	4604      	mov	r4, r0
1004a972:	9703      	str	r7, [sp, #12]
1004a974:	4607      	mov	r7, r0
1004a976:	371f      	adds	r7, #31
1004a978:	7245      	strb	r5, [r0, #9]
1004a97a:	9805      	ldr	r0, [sp, #20]
1004a97c:	7320      	strb	r0, [r4, #12]
1004a97e:	9806      	ldr	r0, [sp, #24]
1004a980:	72e0      	strb	r0, [r4, #11]
1004a982:	9804      	ldr	r0, [sp, #16]
1004a984:	7220      	strb	r0, [r4, #8]
1004a986:	0a28      	lsrs	r0, r5, #8
1004a988:	72a0      	strb	r0, [r4, #10]
1004a98a:	4620      	mov	r0, r4
1004a98c:	300d      	adds	r0, #13
1004a98e:	2506      	movs	r5, #6
1004a990:	9907      	ldr	r1, [sp, #28]
1004a992:	462a      	mov	r2, r5
1004a994:	4b1a      	ldr	r3, [pc, #104]	@ (1004aa00 <__arm_cp.28_3>)
1004a996:	4798      	blx	r3
1004a998:	4620      	mov	r0, r4
1004a99a:	3013      	adds	r0, #19
1004a99c:	9908      	ldr	r1, [sp, #32]
1004a99e:	462a      	mov	r2, r5
1004a9a0:	4b17      	ldr	r3, [pc, #92]	@ (1004aa00 <__arm_cp.28_3>)
1004a9a2:	4798      	blx	r3
1004a9a4:	4b16      	ldr	r3, [pc, #88]	@ (1004aa00 <__arm_cp.28_3>)
1004a9a6:	4620      	mov	r0, r4
1004a9a8:	3019      	adds	r0, #25
1004a9aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004a9ac:	462a      	mov	r2, r5
1004a9ae:	4798      	blx	r3
1004a9b0:	2021      	movs	r0, #33	@ 0x21
1004a9b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004a9b4:	5422      	strb	r2, [r4, r0]
1004a9b6:	2025      	movs	r0, #37	@ 0x25
1004a9b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004a9ba:	5421      	strb	r1, [r4, r0]
1004a9bc:	1d20      	adds	r0, r4, #4
1004a9be:	4621      	mov	r1, r4
1004a9c0:	3121      	adds	r1, #33	@ 0x21
1004a9c2:	0a12      	lsrs	r2, r2, #8
1004a9c4:	704a      	strb	r2, [r1, #1]
1004a9c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004a9c8:	0a11      	lsrs	r1, r2, #8
1004a9ca:	7079      	strb	r1, [r7, #1]
1004a9cc:	703a      	strb	r2, [r7, #0]
1004a9ce:	9a03      	ldr	r2, [sp, #12]
1004a9d0:	0a11      	lsrs	r1, r2, #8
1004a9d2:	7179      	strb	r1, [r7, #5]
1004a9d4:	713a      	strb	r2, [r7, #4]
1004a9d6:	210a      	movs	r1, #10
1004a9d8:	221f      	movs	r2, #31
1004a9da:	2304      	movs	r3, #4
1004a9dc:	7123      	strb	r3, [r4, #4]
1004a9de:	233e      	movs	r3, #62	@ 0x3e
1004a9e0:	7043      	strb	r3, [r0, #1]
1004a9e2:	71e1      	strb	r1, [r4, #7]
1004a9e4:	71a2      	strb	r2, [r4, #6]
1004a9e6:	b2f0      	uxtb	r0, r6
1004a9e8:	4621      	mov	r1, r4
1004a9ea:	f7fe ffb0 	bl	1004994e <aci_event_fifo_push>
1004a9ee:	b00d      	add	sp, #52	@ 0x34
1004a9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a9f2:	46c0      	nop			@ (mov r8, r8)

1004a9f4 <__arm_cp.28_0>:
1004a9f4:	20000648 	.word	0x20000648

1004a9f8 <__arm_cp.28_1>:
1004a9f8:	20000658 	.word	0x20000658

1004a9fc <__arm_cp.28_2>:
1004a9fc:	2000064c 	.word	0x2000064c

1004aa00 <__arm_cp.28_3>:
1004aa00:	100418fd 	.word	0x100418fd

1004aa04 <llc_conn_release_conn_idx>:
1004aa04:	b580      	push	{r7, lr}
1004aa06:	f7ff fe07 	bl	1004a618 <llc_conn_get_cntxt_per_p>
1004aa0a:	212c      	movs	r1, #44	@ 0x2c
1004aa0c:	2200      	movs	r2, #0
1004aa0e:	5442      	strb	r2, [r0, r1]
1004aa10:	bd80      	pop	{r7, pc}

1004aa12 <llc_conn_peripheral_roll_back_params_tsk_ucfg_weak>:
1004aa12:	4770      	bx	lr

1004aa14 <llc_isoal_mem_alloc_ucfg_weak>:
1004aa14:	4770      	bx	lr

1004aa16 <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1004aa16:	2000      	movs	r0, #0
1004aa18:	4770      	bx	lr

1004aa1a <iso_terminate_event_int_cb_ucfg_weak>:
1004aa1a:	2000      	movs	r0, #0
1004aa1c:	4770      	bx	lr

1004aa1e <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1004aa1e:	2000      	movs	r0, #0
1004aa20:	4770      	bx	lr

1004aa22 <llc_iso_cmn_mem_alloc_ucfg_weak>:
1004aa22:	4770      	bx	lr

1004aa24 <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1004aa24:	2000      	movs	r0, #0
1004aa26:	4770      	bx	lr

1004aa28 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1004aa28:	2000      	movs	r0, #0
1004aa2a:	4770      	bx	lr

1004aa2c <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1004aa2c:	4770      	bx	lr

1004aa2e <llc_priv_init_ucfg_weak>:
1004aa2e:	4770      	bx	lr

1004aa30 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1004aa30:	4770      	bx	lr

1004aa32 <llc_priv_offline_rpa_resolution_ucfg_weak>:
1004aa32:	4770      	bx	lr

1004aa34 <llc_priv_controller_privacy_csr_ucfg_weak>:
1004aa34:	2000      	movs	r0, #0
1004aa36:	4770      	bx	lr

1004aa38 <llc_priv_start_privacy_timer_ucfg_weak>:
1004aa38:	4770      	bx	lr

1004aa3a <llc_priv_stop_privacy_timer_ucfg_weak>:
1004aa3a:	4770      	bx	lr

1004aa3c <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1004aa3c:	4770      	bx	lr
	...

1004aa40 <llc_scan_get_cntxt_p>:
1004aa40:	4802      	ldr	r0, [pc, #8]	@ (1004aa4c <__arm_cp.0_0>)
1004aa42:	6800      	ldr	r0, [r0, #0]
1004aa44:	219c      	movs	r1, #156	@ 0x9c
1004aa46:	5840      	ldr	r0, [r0, r1]
1004aa48:	6840      	ldr	r0, [r0, #4]
1004aa4a:	4770      	bx	lr

1004aa4c <__arm_cp.0_0>:
1004aa4c:	20000658 	.word	0x20000658

1004aa50 <llc_scan_init_ucfg_weak>:
1004aa50:	4770      	bx	lr

1004aa52 <llc_scan_mem_allocate_ucfg_weak>:
1004aa52:	4770      	bx	lr

1004aa54 <llc_scan_stop_ucfg_weak>:
1004aa54:	2000      	movs	r0, #0
1004aa56:	4770      	bx	lr

1004aa58 <llc_convert_hci_phy_enum_to_hw_phy>:
1004aa58:	1e80      	subs	r0, r0, #2
1004aa5a:	b2c0      	uxtb	r0, r0
1004aa5c:	2803      	cmp	r0, #3
1004aa5e:	d301      	bcc.n	1004aa64 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1004aa60:	2000      	movs	r0, #0
1004aa62:	e002      	b.n	1004aa6a <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1004aa64:	00c1      	lsls	r1, r0, #3
1004aa66:	4802      	ldr	r0, [pc, #8]	@ (1004aa70 <__arm_cp.4_0>)
1004aa68:	40c8      	lsrs	r0, r1
1004aa6a:	b2c0      	uxtb	r0, r0
1004aa6c:	4770      	bx	lr
1004aa6e:	46c0      	nop			@ (mov r8, r8)

1004aa70 <__arm_cp.4_0>:
1004aa70:	00060401 	.word	0x00060401

1004aa74 <LL_cpf_cis_processing_ucfg_weak>:
1004aa74:	4770      	bx	lr

1004aa76 <LLC_authenticated_payload_timeout_processing_ucfg_weak>:
1004aa76:	4770      	bx	lr

1004aa78 <llc_past_mem_allocate_ucfg_weak>:
1004aa78:	4770      	bx	lr

1004aa7a <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1004aa7a:	4770      	bx	lr

1004aa7c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1004aa7c:	4770      	bx	lr
	...

1004aa80 <llc_cte_get_ctxt>:
1004aa80:	4802      	ldr	r0, [pc, #8]	@ (1004aa8c <__arm_cp.2_0>)
1004aa82:	6800      	ldr	r0, [r0, #0]
1004aa84:	219c      	movs	r1, #156	@ 0x9c
1004aa86:	5840      	ldr	r0, [r0, r1]
1004aa88:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1004aa8a:	4770      	bx	lr

1004aa8c <__arm_cp.2_0>:
1004aa8c:	20000658 	.word	0x20000658

1004aa90 <llc_cte_init_ucfg_weak>:
1004aa90:	4770      	bx	lr

1004aa92 <llc_cte_mem_allocate_ucfg_weak>:
1004aa92:	4770      	bx	lr

1004aa94 <llc_cte_timer_error_ucfg_weak>:
1004aa94:	4770      	bx	lr

1004aa96 <llc_cte_timer_stop_ucfg_weak>:
1004aa96:	2000      	movs	r0, #0
1004aa98:	4770      	bx	lr
	...

1004aa9c <LL_dtm_init>:
1004aa9c:	b5b0      	push	{r4, r5, r7, lr}
1004aa9e:	480e      	ldr	r0, [pc, #56]	@ (1004aad8 <__arm_cp.0_0>)
1004aaa0:	6800      	ldr	r0, [r0, #0]
1004aaa2:	21ac      	movs	r1, #172	@ 0xac
1004aaa4:	5844      	ldr	r4, [r0, r1]
1004aaa6:	20ff      	movs	r0, #255	@ 0xff
1004aaa8:	77a0      	strb	r0, [r4, #30]
1004aaaa:	2500      	movs	r5, #0
1004aaac:	77e5      	strb	r5, [r4, #31]
1004aaae:	f7ff fd96 	bl	1004a5de <cte_csr_ucfg_weak>
1004aab2:	2801      	cmp	r0, #1
1004aab4:	d10f      	bne.n	1004aad6 <LL_dtm_init+0x3a>
1004aab6:	f7ff ffe3 	bl	1004aa80 <llc_cte_get_ctxt>
1004aaba:	2224      	movs	r2, #36	@ 0x24
1004aabc:	4907      	ldr	r1, [pc, #28]	@ (1004aadc <__arm_cp.0_1>)
1004aabe:	5c8a      	ldrb	r2, [r1, r2]
1004aac0:	2a00      	cmp	r2, #0
1004aac2:	462a      	mov	r2, r5
1004aac4:	d000      	beq.n	1004aac8 <LL_dtm_init+0x2c>
1004aac6:	6802      	ldr	r2, [r0, #0]
1004aac8:	62a2      	str	r2, [r4, #40]	@ 0x28
1004aaca:	2223      	movs	r2, #35	@ 0x23
1004aacc:	5c89      	ldrb	r1, [r1, r2]
1004aace:	2900      	cmp	r1, #0
1004aad0:	d000      	beq.n	1004aad4 <LL_dtm_init+0x38>
1004aad2:	6845      	ldr	r5, [r0, #4]
1004aad4:	62e5      	str	r5, [r4, #44]	@ 0x2c
1004aad6:	bdb0      	pop	{r4, r5, r7, pc}

1004aad8 <__arm_cp.0_0>:
1004aad8:	20000658 	.word	0x20000658

1004aadc <__arm_cp.0_1>:
1004aadc:	20000668 	.word	0x20000668

1004aae0 <LL_eadv_switchbackupdata_data_struc>:
1004aae0:	b510      	push	{r4, lr}
1004aae2:	7c01      	ldrb	r1, [r0, #16]
1004aae4:	2902      	cmp	r1, #2
1004aae6:	d109      	bne.n	1004aafc <LL_eadv_switchbackupdata_data_struc+0x1c>
1004aae8:	2401      	movs	r4, #1
1004aaea:	7404      	strb	r4, [r0, #16]
1004aaec:	6801      	ldr	r1, [r0, #0]
1004aaee:	6882      	ldr	r2, [r0, #8]
1004aaf0:	68c3      	ldr	r3, [r0, #12]
1004aaf2:	c00c      	stmia	r0!, {r2, r3}
1004aaf4:	20a1      	movs	r0, #161	@ 0xa1
1004aaf6:	f002 fa9d 	bl	1004d034 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1004aafa:	e000      	b.n	1004aafe <LL_eadv_switchbackupdata_data_struc+0x1e>
1004aafc:	2400      	movs	r4, #0
1004aafe:	4620      	mov	r0, r4
1004ab00:	bd10      	pop	{r4, pc}

1004ab02 <LL_eadv_Blue_Tx>:
1004ab02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ab04:	461e      	mov	r6, r3
1004ab06:	4617      	mov	r7, r2
1004ab08:	460d      	mov	r5, r1
1004ab0a:	4604      	mov	r4, r0
1004ab0c:	f7f7 fcac 	bl	10042468 <BLEPLAT_CNTR_PacketInitTo0>
1004ab10:	4620      	mov	r0, r4
1004ab12:	f7f7 fcb7 	bl	10042484 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1004ab16:	4620      	mov	r0, r4
1004ab18:	f7f7 fce8 	bl	100424ec <BLEPLAT_CNTR_PacketSetKeepsemareq>
1004ab1c:	4620      	mov	r0, r4
1004ab1e:	4621      	mov	r1, r4
1004ab20:	f7f7 fcf1 	bl	10042506 <BLEPLAT_CNTR_PacketSetNextPtr>
1004ab24:	4620      	mov	r0, r4
1004ab26:	4639      	mov	r1, r7
1004ab28:	f7f7 fcb9 	bl	1004249e <BLEPLAT_CNTR_PacketSetDataPtr>
1004ab2c:	4620      	mov	r0, r4
1004ab2e:	4631      	mov	r1, r6
1004ab30:	f7f7 fd37 	bl	100425a2 <BLEPLAT_CNTR_PacketSetTimeout>
1004ab34:	9f06      	ldr	r7, [sp, #24]
1004ab36:	2e00      	cmp	r6, #0
1004ab38:	d002      	beq.n	1004ab40 <LL_eadv_Blue_Tx+0x3e>
1004ab3a:	4620      	mov	r0, r4
1004ab3c:	f7f7 fd40 	bl	100425c0 <BLEPLAT_CNTR_PacketSetTimer2Active>
1004ab40:	4620      	mov	r0, r4
1004ab42:	f7f7 fc78 	bl	10042436 <BLEPLAT_CNTR_PacketClrIncChan>
1004ab46:	4620      	mov	r0, r4
1004ab48:	f7f7 fcb8 	bl	100424bc <BLEPLAT_CNTR_PacketSetIntDone>
1004ab4c:	4620      	mov	r0, r4
1004ab4e:	f7f7 fd5d 	bl	1004260c <BLEPLAT_CNTR_PacketSetTxReady>
1004ab52:	4620      	mov	r0, r4
1004ab54:	2f81      	cmp	r7, #129	@ 0x81
1004ab56:	d109      	bne.n	1004ab6c <LL_eadv_Blue_Tx+0x6a>
1004ab58:	4629      	mov	r1, r5
1004ab5a:	f7f7 fcf0 	bl	1004253e <BLEPLAT_CNTR_PacketSetNextSlot>
1004ab5e:	4620      	mov	r0, r4
1004ab60:	f7f7 fd05 	bl	1004256e <BLEPLAT_CNTR_PacketSetPllTrig>
1004ab64:	4620      	mov	r0, r4
1004ab66:	f7f7 fd37 	bl	100425d8 <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1004ab6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004ab6c:	f7f7 fd41 	bl	100425f2 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1004ab70:	4620      	mov	r0, r4
1004ab72:	f7f7 fcd7 	bl	10042524 <BLEPLAT_CNTR_PacketSetNextRxMode>
1004ab76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004ab78 <LL_eadv_Blue_Rx>:
1004ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ab7a:	461e      	mov	r6, r3
1004ab7c:	4617      	mov	r7, r2
1004ab7e:	460d      	mov	r5, r1
1004ab80:	4604      	mov	r4, r0
1004ab82:	f7f7 fc71 	bl	10042468 <BLEPLAT_CNTR_PacketInitTo0>
1004ab86:	4620      	mov	r0, r4
1004ab88:	f7f7 fc7c 	bl	10042484 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1004ab8c:	4620      	mov	r0, r4
1004ab8e:	f7f7 fcad 	bl	100424ec <BLEPLAT_CNTR_PacketSetKeepsemareq>
1004ab92:	4620      	mov	r0, r4
1004ab94:	4621      	mov	r1, r4
1004ab96:	f7f7 fcb6 	bl	10042506 <BLEPLAT_CNTR_PacketSetNextPtr>
1004ab9a:	4620      	mov	r0, r4
1004ab9c:	4639      	mov	r1, r7
1004ab9e:	f7f7 fc7e 	bl	1004249e <BLEPLAT_CNTR_PacketSetDataPtr>
1004aba2:	4620      	mov	r0, r4
1004aba4:	4631      	mov	r1, r6
1004aba6:	f7f7 fcfc 	bl	100425a2 <BLEPLAT_CNTR_PacketSetTimeout>
1004abaa:	9f07      	ldr	r7, [sp, #28]
1004abac:	2e00      	cmp	r6, #0
1004abae:	d002      	beq.n	1004abb6 <LL_eadv_Blue_Rx+0x3e>
1004abb0:	4620      	mov	r0, r4
1004abb2:	f7f7 fd05 	bl	100425c0 <BLEPLAT_CNTR_PacketSetTimer2Active>
1004abb6:	4620      	mov	r0, r4
1004abb8:	f7f7 fccc 	bl	10042554 <BLEPLAT_CNTR_PacketSetNextTxMode>
1004abbc:	4620      	mov	r0, r4
1004abbe:	f7f7 fc3a 	bl	10042436 <BLEPLAT_CNTR_PacketClrIncChan>
1004abc2:	4620      	mov	r0, r4
1004abc4:	f7f7 fc7a 	bl	100424bc <BLEPLAT_CNTR_PacketSetIntDone>
1004abc8:	4620      	mov	r0, r4
1004abca:	f7f7 fd12 	bl	100425f2 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1004abce:	4620      	mov	r0, r4
1004abd0:	f7f7 fc80 	bl	100424d4 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1004abd4:	4620      	mov	r0, r4
1004abd6:	f7f7 fcd7 	bl	10042588 <BLEPLAT_CNTR_PacketSetRxReady>
1004abda:	2f81      	cmp	r7, #129	@ 0x81
1004abdc:	d107      	bne.n	1004abee <LL_eadv_Blue_Rx+0x76>
1004abde:	4620      	mov	r0, r4
1004abe0:	4629      	mov	r1, r5
1004abe2:	f7f7 fcac 	bl	1004253e <BLEPLAT_CNTR_PacketSetNextSlot>
1004abe6:	4620      	mov	r0, r4
1004abe8:	f7f7 fc31 	bl	1004244e <BLEPLAT_CNTR_PacketClrPllTrig>
1004abec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004abee:	4620      	mov	r0, r4
1004abf0:	f7f7 fcbd 	bl	1004256e <BLEPLAT_CNTR_PacketSetPllTrig>
1004abf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1004abf8 <LL_eadv_BLUE_SM>:
1004abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004abfa:	461d      	mov	r5, r3
1004abfc:	4616      	mov	r6, r2
1004abfe:	460f      	mov	r7, r1
1004ac00:	4604      	mov	r4, r0
1004ac02:	f7f7 fd3d 	bl	10042680 <BLEPLAT_CNTR_SmInitTo0>
1004ac06:	4911      	ldr	r1, [pc, #68]	@ (1004ac4c <__arm_cp.10_0>)
1004ac08:	4620      	mov	r0, r4
1004ac0a:	f7f7 fd57 	bl	100426bc <BLEPLAT_CNTR_SmSetAccessAddr>
1004ac0e:	4910      	ldr	r1, [pc, #64]	@ (1004ac50 <__arm_cp.10_1>)
1004ac10:	4620      	mov	r0, r4
1004ac12:	f7f7 fd65 	bl	100426e0 <BLEPLAT_CNTR_SmSetCrcInit>
1004ac16:	4620      	mov	r0, r4
1004ac18:	4639      	mov	r1, r7
1004ac1a:	f7f7 fe1e 	bl	1004285a <BLEPLAT_CNTR_SmSetTxPwr>
1004ac1e:	4620      	mov	r0, r4
1004ac20:	4631      	mov	r1, r6
1004ac22:	f7f7 fdf3 	bl	1004280c <BLEPLAT_CNTR_SmSetTxPacketPtr>
1004ac26:	4620      	mov	r0, r4
1004ac28:	4629      	mov	r1, r5
1004ac2a:	f7f7 fdb9 	bl	100427a0 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1004ac2e:	9806      	ldr	r0, [sp, #24]
1004ac30:	2881      	cmp	r0, #129	@ 0x81
1004ac32:	d103      	bne.n	1004ac3c <LL_eadv_BLUE_SM+0x44>
1004ac34:	4620      	mov	r0, r4
1004ac36:	f7f7 fdda 	bl	100427ee <BLEPLAT_CNTR_SmSetTxMode>
1004ac3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004ac3c:	4620      	mov	r0, r4
1004ac3e:	f7f7 fda0 	bl	10042782 <BLEPLAT_CNTR_SmSetRxMode>
1004ac42:	2101      	movs	r1, #1
1004ac44:	4620      	mov	r0, r4
1004ac46:	f7f7 fd72 	bl	1004272e <BLEPLAT_CNTR_SmSetHopIncr>
1004ac4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004ac4c <__arm_cp.10_0>:
1004ac4c:	8e89bed6 	.word	0x8e89bed6

1004ac50 <__arm_cp.10_1>:
1004ac50:	00555555 	.word	0x00555555

1004ac54 <llc_get_advertising_set_index>:
1004ac54:	b570      	push	{r4, r5, r6, lr}
1004ac56:	4604      	mov	r4, r0
1004ac58:	f001 f96c 	bl	1004bf34 <llc_get_linkms_cntxt_p>
1004ac5c:	214d      	movs	r1, #77	@ 0x4d
1004ac5e:	5c41      	ldrb	r1, [r0, r1]
1004ac60:	4d09      	ldr	r5, [pc, #36]	@ (1004ac88 <__arm_cp.12_0>)
1004ac62:	2200      	movs	r2, #0
1004ac64:	23be      	movs	r3, #190	@ 0xbe
1004ac66:	4291      	cmp	r1, r2
1004ac68:	d00b      	beq.n	1004ac82 <llc_get_advertising_set_index+0x2e>
1004ac6a:	6806      	ldr	r6, [r0, #0]
1004ac6c:	5af6      	ldrh	r6, [r6, r3]
1004ac6e:	42a6      	cmp	r6, r4
1004ac70:	4616      	mov	r6, r2
1004ac72:	d000      	beq.n	1004ac76 <llc_get_advertising_set_index+0x22>
1004ac74:	462e      	mov	r6, r5
1004ac76:	2501      	movs	r5, #1
1004ac78:	022d      	lsls	r5, r5, #8
1004ac7a:	195b      	adds	r3, r3, r5
1004ac7c:	1c52      	adds	r2, r2, #1
1004ac7e:	4635      	mov	r5, r6
1004ac80:	e7f1      	b.n	1004ac66 <llc_get_advertising_set_index+0x12>
1004ac82:	b2a8      	uxth	r0, r5
1004ac84:	bd70      	pop	{r4, r5, r6, pc}
1004ac86:	46c0      	nop			@ (mov r8, r8)

1004ac88 <__arm_cp.12_0>:
1004ac88:	0000ffff 	.word	0x0000ffff

1004ac8c <llc_eadv_generate_new_rpa_for_one_adv_set>:
1004ac8c:	b5b0      	push	{r4, r5, r7, lr}
1004ac8e:	4604      	mov	r4, r0
1004ac90:	20d6      	movs	r0, #214	@ 0xd6
1004ac92:	5c20      	ldrb	r0, [r4, r0]
1004ac94:	0780      	lsls	r0, r0, #30
1004ac96:	d401      	bmi.n	1004ac9c <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1004ac98:	2000      	movs	r0, #0
1004ac9a:	bdb0      	pop	{r4, r5, r7, pc}
1004ac9c:	4625      	mov	r5, r4
1004ac9e:	3584      	adds	r5, #132	@ 0x84
1004aca0:	4628      	mov	r0, r5
1004aca2:	f7ff fecb 	bl	1004aa3c <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1004aca6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1004aca8:	4628      	mov	r0, r5
1004acaa:	f7ff fec1 	bl	1004aa30 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1004acae:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1004acb0:	3008      	adds	r0, #8
1004acb2:	2100      	movs	r1, #0
1004acb4:	f7ff feba 	bl	1004aa2c <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1004acb8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1004acba:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1004acbc:	6761      	str	r1, [r4, #116]	@ 0x74
1004acbe:	67a0      	str	r0, [r4, #120]	@ 0x78
1004acc0:	2001      	movs	r0, #1
1004acc2:	bdb0      	pop	{r4, r5, r7, pc}

1004acc4 <EADV_init>:
1004acc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004acc6:	b085      	sub	sp, #20
1004acc8:	9204      	str	r2, [sp, #16]
1004acca:	460e      	mov	r6, r1
1004accc:	4605      	mov	r5, r0
1004acce:	244d      	movs	r4, #77	@ 0x4d
1004acd0:	f001 f930 	bl	1004bf34 <llc_get_linkms_cntxt_p>
1004acd4:	5505      	strb	r5, [r0, r4]
1004acd6:	6006      	str	r6, [r0, #0]
1004acd8:	9003      	str	r0, [sp, #12]
1004acda:	304d      	adds	r0, #77	@ 0x4d
1004acdc:	2101      	movs	r1, #1
1004acde:	9002      	str	r0, [sp, #8]
1004ace0:	7041      	strb	r1, [r0, #1]
1004ace2:	9101      	str	r1, [sp, #4]
1004ace4:	04cb      	lsls	r3, r1, #19
1004ace6:	2600      	movs	r6, #0
1004ace8:	277c      	movs	r7, #124	@ 0x7c
1004acea:	9a04      	ldr	r2, [sp, #16]
1004acec:	b2e8      	uxtb	r0, r5
1004acee:	4286      	cmp	r6, r0
1004acf0:	d226      	bcs.n	1004ad40 <EADV_init+0x7c>
1004acf2:	9803      	ldr	r0, [sp, #12]
1004acf4:	6800      	ldr	r0, [r0, #0]
1004acf6:	51c3      	str	r3, [r0, r7]
1004acf8:	19c5      	adds	r5, r0, r7
1004acfa:	2054      	movs	r0, #84	@ 0x54
1004acfc:	4911      	ldr	r1, [pc, #68]	@ (1004ad44 <__arm_cp.19_0>)
1004acfe:	5229      	strh	r1, [r5, r0]
1004ad00:	2452      	movs	r4, #82	@ 0x52
1004ad02:	2000      	movs	r0, #0
1004ad04:	5328      	strh	r0, [r5, r4]
1004ad06:	2442      	movs	r4, #66	@ 0x42
1004ad08:	5329      	strh	r1, [r5, r4]
1004ad0a:	245e      	movs	r4, #94	@ 0x5e
1004ad0c:	5528      	strb	r0, [r5, r4]
1004ad0e:	245c      	movs	r4, #92	@ 0x5c
1004ad10:	21ff      	movs	r1, #255	@ 0xff
1004ad12:	5529      	strb	r1, [r5, r4]
1004ad14:	215a      	movs	r1, #90	@ 0x5a
1004ad16:	5468      	strb	r0, [r5, r1]
1004ad18:	2146      	movs	r1, #70	@ 0x46
1004ad1a:	2407      	movs	r4, #7
1004ad1c:	526c      	strh	r4, [r5, r1]
1004ad1e:	6128      	str	r0, [r5, #16]
1004ad20:	6168      	str	r0, [r5, #20]
1004ad22:	606b      	str	r3, [r5, #4]
1004ad24:	9904      	ldr	r1, [sp, #16]
1004ad26:	2900      	cmp	r1, #0
1004ad28:	d002      	beq.n	1004ad30 <EADV_init+0x6c>
1004ad2a:	6550      	str	r0, [r2, #84]	@ 0x54
1004ad2c:	3d2c      	subs	r5, #44	@ 0x2c
1004ad2e:	602a      	str	r2, [r5, #0]
1004ad30:	9801      	ldr	r0, [sp, #4]
1004ad32:	0200      	lsls	r0, r0, #8
1004ad34:	183f      	adds	r7, r7, r0
1004ad36:	325c      	adds	r2, #92	@ 0x5c
1004ad38:	9802      	ldr	r0, [sp, #8]
1004ad3a:	7805      	ldrb	r5, [r0, #0]
1004ad3c:	1c76      	adds	r6, r6, #1
1004ad3e:	e7d5      	b.n	1004acec <EADV_init+0x28>
1004ad40:	b005      	add	sp, #20
1004ad42:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004ad44 <__arm_cp.19_0>:
1004ad44:	0000ffff 	.word	0x0000ffff

1004ad48 <LL_LE_Set_Advertising_Parameters>:
1004ad48:	b570      	push	{r4, r5, r6, lr}
1004ad4a:	4604      	mov	r4, r0
1004ad4c:	f001 f8f2 	bl	1004bf34 <llc_get_linkms_cntxt_p>
1004ad50:	4605      	mov	r5, r0
1004ad52:	4e30      	ldr	r6, [pc, #192]	@ (1004ae14 <__arm_cp.20_0>)
1004ad54:	4630      	mov	r0, r6
1004ad56:	f7ff ff7d 	bl	1004ac54 <llc_get_advertising_set_index>
1004ad5a:	492f      	ldr	r1, [pc, #188]	@ (1004ae18 <__arm_cp.20_1>)
1004ad5c:	4288      	cmp	r0, r1
1004ad5e:	d112      	bne.n	1004ad86 <LL_LE_Set_Advertising_Parameters+0x3e>
1004ad60:	f000 f860 	bl	1004ae24 <LL_Context_ReturnFree>
1004ad64:	28ff      	cmp	r0, #255	@ 0xff
1004ad66:	d034      	beq.n	1004add2 <LL_LE_Set_Advertising_Parameters+0x8a>
1004ad68:	0200      	lsls	r0, r0, #8
1004ad6a:	6829      	ldr	r1, [r5, #0]
1004ad6c:	1808      	adds	r0, r1, r0
1004ad6e:	21be      	movs	r1, #190	@ 0xbe
1004ad70:	5246      	strh	r6, [r0, r1]
1004ad72:	214c      	movs	r1, #76	@ 0x4c
1004ad74:	2200      	movs	r2, #0
1004ad76:	5442      	strb	r2, [r0, r1]
1004ad78:	2138      	movs	r1, #56	@ 0x38
1004ad7a:	5442      	strb	r2, [r0, r1]
1004ad7c:	63c2      	str	r2, [r0, #60]	@ 0x3c
1004ad7e:	6402      	str	r2, [r0, #64]	@ 0x40
1004ad80:	6282      	str	r2, [r0, #40]	@ 0x28
1004ad82:	62c2      	str	r2, [r0, #44]	@ 0x2c
1004ad84:	e008      	b.n	1004ad98 <LL_LE_Set_Advertising_Parameters+0x50>
1004ad86:	0200      	lsls	r0, r0, #8
1004ad88:	6829      	ldr	r1, [r5, #0]
1004ad8a:	1808      	adds	r0, r1, r0
1004ad8c:	21ce      	movs	r1, #206	@ 0xce
1004ad8e:	5c41      	ldrb	r1, [r0, r1]
1004ad90:	2901      	cmp	r1, #1
1004ad92:	d101      	bne.n	1004ad98 <LL_LE_Set_Advertising_Parameters+0x50>
1004ad94:	250c      	movs	r5, #12
1004ad96:	e03a      	b.n	1004ae0e <LL_LE_Set_Advertising_Parameters+0xc6>
1004ad98:	7961      	ldrb	r1, [r4, #5]
1004ad9a:	22c2      	movs	r2, #194	@ 0xc2
1004ad9c:	5481      	strb	r1, [r0, r2]
1004ad9e:	4606      	mov	r6, r0
1004ada0:	36c2      	adds	r6, #194	@ 0xc2
1004ada2:	2500      	movs	r5, #0
1004ada4:	72f5      	strb	r5, [r6, #11]
1004ada6:	2101      	movs	r1, #1
1004ada8:	70f1      	strb	r1, [r6, #3]
1004adaa:	79a1      	ldrb	r1, [r4, #6]
1004adac:	7071      	strb	r1, [r6, #1]
1004adae:	8821      	ldrh	r1, [r4, #0]
1004adb0:	0209      	lsls	r1, r1, #8
1004adb2:	67c1      	str	r1, [r0, #124]	@ 0x7c
1004adb4:	4601      	mov	r1, r0
1004adb6:	3184      	adds	r1, #132	@ 0x84
1004adb8:	7922      	ldrb	r2, [r4, #4]
1004adba:	2a04      	cmp	r2, #4
1004adbc:	d815      	bhi.n	1004adea <LL_LE_Set_Advertising_Parameters+0xa2>
1004adbe:	46c0      	nop			@ (mov r8, r8)
1004adc0:	447a      	add	r2, pc
1004adc2:	7912      	ldrb	r2, [r2, #4]
1004adc4:	0052      	lsls	r2, r2, #1
1004adc6:	4497      	add	pc, r2
1004adc8:	0c0a0602 	.word	0x0c0a0602
1004adcc:	000e      	.short	0x000e
1004adce:	20f3      	movs	r0, #243	@ 0xf3
1004add0:	e00a      	b.n	1004ade8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004add2:	2507      	movs	r5, #7
1004add4:	e01b      	b.n	1004ae0e <LL_LE_Set_Advertising_Parameters+0xc6>
1004add6:	4a11      	ldr	r2, [pc, #68]	@ (1004ae1c <__arm_cp.20_2>)
1004add8:	67c2      	str	r2, [r0, #124]	@ 0x7c
1004adda:	20fd      	movs	r0, #253	@ 0xfd
1004addc:	e004      	b.n	1004ade8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004adde:	20f2      	movs	r0, #242	@ 0xf2
1004ade0:	e002      	b.n	1004ade8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004ade2:	20f0      	movs	r0, #240	@ 0xf0
1004ade4:	e000      	b.n	1004ade8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004ade6:	20f5      	movs	r0, #245	@ 0xf5
1004ade8:	8688      	strh	r0, [r1, #52]	@ 0x34
1004adea:	7a20      	ldrb	r0, [r4, #8]
1004adec:	79e2      	ldrb	r2, [r4, #7]
1004adee:	600d      	str	r5, [r1, #0]
1004adf0:	604d      	str	r5, [r1, #4]
1004adf2:	7532      	strb	r2, [r6, #20]
1004adf4:	7570      	strb	r0, [r6, #21]
1004adf6:	7a20      	ldrb	r0, [r4, #8]
1004adf8:	7008      	strb	r0, [r1, #0]
1004adfa:	1c48      	adds	r0, r1, #1
1004adfc:	3409      	adds	r4, #9
1004adfe:	2206      	movs	r2, #6
1004ae00:	4621      	mov	r1, r4
1004ae02:	f7f6 fd7b 	bl	100418fc <BLEPLAT_MemCpy>
1004ae06:	4806      	ldr	r0, [pc, #24]	@ (1004ae20 <__arm_cp.20_3>)
1004ae08:	6800      	ldr	r0, [r0, #0]
1004ae0a:	7a40      	ldrb	r0, [r0, #9]
1004ae0c:	70b0      	strb	r0, [r6, #2]
1004ae0e:	4628      	mov	r0, r5
1004ae10:	bd70      	pop	{r4, r5, r6, pc}
1004ae12:	46c0      	nop			@ (mov r8, r8)

1004ae14 <__arm_cp.20_0>:
1004ae14:	0000fffc 	.word	0x0000fffc

1004ae18 <__arm_cp.20_1>:
1004ae18:	0000ffff 	.word	0x0000ffff

1004ae1c <__arm_cp.20_2>:
1004ae1c:	000005dc 	.word	0x000005dc

1004ae20 <__arm_cp.20_3>:
1004ae20:	20000658 	.word	0x20000658

1004ae24 <LL_Context_ReturnFree>:
1004ae24:	b510      	push	{r4, lr}
1004ae26:	f001 f885 	bl	1004bf34 <llc_get_linkms_cntxt_p>
1004ae2a:	214d      	movs	r1, #77	@ 0x4d
1004ae2c:	5c42      	ldrb	r2, [r0, r1]
1004ae2e:	2100      	movs	r1, #0
1004ae30:	23be      	movs	r3, #190	@ 0xbe
1004ae32:	428a      	cmp	r2, r1
1004ae34:	d008      	beq.n	1004ae48 <LL_Context_ReturnFree+0x24>
1004ae36:	6804      	ldr	r4, [r0, #0]
1004ae38:	5ae4      	ldrh	r4, [r4, r3]
1004ae3a:	0b24      	lsrs	r4, r4, #12
1004ae3c:	d105      	bne.n	1004ae4a <LL_Context_ReturnFree+0x26>
1004ae3e:	2401      	movs	r4, #1
1004ae40:	0224      	lsls	r4, r4, #8
1004ae42:	191b      	adds	r3, r3, r4
1004ae44:	1c49      	adds	r1, r1, #1
1004ae46:	e7f4      	b.n	1004ae32 <LL_Context_ReturnFree+0xe>
1004ae48:	21ff      	movs	r1, #255	@ 0xff
1004ae4a:	b2c8      	uxtb	r0, r1
1004ae4c:	bd10      	pop	{r4, pc}
	...

1004ae50 <LL_LE_Set_Advertise_Enable>:
1004ae50:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1004ae52:	4604      	mov	r4, r0
1004ae54:	f000 f816 	bl	1004ae84 <LL_LE_Set_Advertising_Parameters_Default>
1004ae58:	2300      	movs	r3, #0
1004ae5a:	9300      	str	r3, [sp, #0]
1004ae5c:	2101      	movs	r1, #1
1004ae5e:	4d07      	ldr	r5, [pc, #28]	@ (1004ae7c <__arm_cp.22_0>)
1004ae60:	4620      	mov	r0, r4
1004ae62:	462a      	mov	r2, r5
1004ae64:	f000 f82c 	bl	1004aec0 <LL_Set_Extented_Advertising_Enable>
1004ae68:	4604      	mov	r4, r0
1004ae6a:	4805      	ldr	r0, [pc, #20]	@ (1004ae80 <__arm_cp.22_1>)
1004ae6c:	6801      	ldr	r1, [r0, #0]
1004ae6e:	3156      	adds	r1, #86	@ 0x56
1004ae70:	4628      	mov	r0, r5
1004ae72:	f000 f98f 	bl	1004b194 <LL_Set_Extented_Advertising_Set_Random_Address>
1004ae76:	4620      	mov	r0, r4
1004ae78:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1004ae7a:	46c0      	nop			@ (mov r8, r8)

1004ae7c <__arm_cp.22_0>:
1004ae7c:	0000fffc 	.word	0x0000fffc

1004ae80 <__arm_cp.22_1>:
1004ae80:	20000658 	.word	0x20000658

1004ae84 <LL_LE_Set_Advertising_Parameters_Default>:
1004ae84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004ae86:	480c      	ldr	r0, [pc, #48]	@ (1004aeb8 <__arm_cp.23_0>)
1004ae88:	f7ff fee4 	bl	1004ac54 <llc_get_advertising_set_index>
1004ae8c:	490b      	ldr	r1, [pc, #44]	@ (1004aebc <__arm_cp.23_1>)
1004ae8e:	4288      	cmp	r0, r1
1004ae90:	d110      	bne.n	1004aeb4 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1004ae92:	466c      	mov	r4, sp
1004ae94:	2100      	movs	r1, #0
1004ae96:	7221      	strb	r1, [r4, #8]
1004ae98:	2001      	movs	r0, #1
1004ae9a:	02c0      	lsls	r0, r0, #11
1004ae9c:	8020      	strh	r0, [r4, #0]
1004ae9e:	2007      	movs	r0, #7
1004aea0:	0200      	lsls	r0, r0, #8
1004aea2:	9001      	str	r0, [sp, #4]
1004aea4:	4620      	mov	r0, r4
1004aea6:	3009      	adds	r0, #9
1004aea8:	2206      	movs	r2, #6
1004aeaa:	f7f6 fd37 	bl	1004191c <BLEPLAT_MemSet>
1004aeae:	4620      	mov	r0, r4
1004aeb0:	f7ff ff4a 	bl	1004ad48 <LL_LE_Set_Advertising_Parameters>
1004aeb4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1004aeb6:	46c0      	nop			@ (mov r8, r8)

1004aeb8 <__arm_cp.23_0>:
1004aeb8:	0000fffc 	.word	0x0000fffc

1004aebc <__arm_cp.23_1>:
1004aebc:	0000ffff 	.word	0x0000ffff

1004aec0 <LL_Set_Extented_Advertising_Enable>:
1004aec0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004aec2:	b08f      	sub	sp, #60	@ 0x3c
1004aec4:	930e      	str	r3, [sp, #56]	@ 0x38
1004aec6:	4617      	mov	r7, r2
1004aec8:	460d      	mov	r5, r1
1004aeca:	4606      	mov	r6, r0
1004aecc:	4305      	orrs	r5, r0
1004aece:	f001 f831 	bl	1004bf34 <llc_get_linkms_cntxt_p>
1004aed2:	4604      	mov	r4, r0
1004aed4:	2d00      	cmp	r5, #0
1004aed6:	d007      	beq.n	1004aee8 <LL_Set_Extented_Advertising_Enable+0x28>
1004aed8:	4638      	mov	r0, r7
1004aeda:	f7ff febb 	bl	1004ac54 <llc_get_advertising_set_index>
1004aede:	49a7      	ldr	r1, [pc, #668]	@ (1004b17c <__arm_cp.24_1>)
1004aee0:	4288      	cmp	r0, r1
1004aee2:	d118      	bne.n	1004af16 <LL_Set_Extented_Advertising_Enable+0x56>
1004aee4:	2042      	movs	r0, #66	@ 0x42
1004aee6:	e04a      	b.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004aee8:	4625      	mov	r5, r4
1004aeea:	354d      	adds	r5, #77	@ 0x4d
1004aeec:	2600      	movs	r6, #0
1004aeee:	4637      	mov	r7, r6
1004aef0:	960e      	str	r6, [sp, #56]	@ 0x38
1004aef2:	7828      	ldrb	r0, [r5, #0]
1004aef4:	4286      	cmp	r6, r0
1004aef6:	d20c      	bcs.n	1004af12 <LL_Set_Extented_Advertising_Enable+0x52>
1004aef8:	6820      	ldr	r0, [r4, #0]
1004aefa:	19c0      	adds	r0, r0, r7
1004aefc:	21ce      	movs	r1, #206	@ 0xce
1004aefe:	5c41      	ldrb	r1, [r0, r1]
1004af00:	2901      	cmp	r1, #1
1004af02:	d101      	bne.n	1004af08 <LL_Set_Extented_Advertising_Enable+0x48>
1004af04:	f000 f992 	bl	1004b22c <EADV_stop>
1004af08:	2001      	movs	r0, #1
1004af0a:	0200      	lsls	r0, r0, #8
1004af0c:	183f      	adds	r7, r7, r0
1004af0e:	1c76      	adds	r6, r6, #1
1004af10:	e7ef      	b.n	1004aef2 <LL_Set_Extented_Advertising_Enable+0x32>
1004af12:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004af14:	e033      	b.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004af16:	0201      	lsls	r1, r0, #8
1004af18:	6822      	ldr	r2, [r4, #0]
1004af1a:	1854      	adds	r4, r2, r1
1004af1c:	21ce      	movs	r1, #206	@ 0xce
1004af1e:	5c61      	ldrb	r1, [r4, r1]
1004af20:	2e01      	cmp	r6, #1
1004af22:	d124      	bne.n	1004af6e <LL_Set_Extented_Advertising_Enable+0xae>
1004af24:	0200      	lsls	r0, r0, #8
1004af26:	1815      	adds	r5, r2, r0
1004af28:	20d6      	movs	r0, #214	@ 0xd6
1004af2a:	5c28      	ldrb	r0, [r5, r0]
1004af2c:	2701      	movs	r7, #1
1004af2e:	4038      	ands	r0, r7
1004af30:	2900      	cmp	r1, #0
1004af32:	d026      	beq.n	1004af82 <LL_Set_Extented_Advertising_Enable+0xc2>
1004af34:	2800      	cmp	r0, #0
1004af36:	d00a      	beq.n	1004af4e <LL_Set_Extented_Advertising_Enable+0x8e>
1004af38:	208c      	movs	r0, #140	@ 0x8c
1004af3a:	5828      	ldr	r0, [r5, r0]
1004af3c:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1004af3e:	462a      	mov	r2, r5
1004af40:	328c      	adds	r2, #140	@ 0x8c
1004af42:	6852      	ldr	r2, [r2, #4]
1004af44:	c105      	stmia	r1!, {r0, r2}
1004af46:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1004af48:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1004af4a:	6769      	str	r1, [r5, #116]	@ 0x74
1004af4c:	67a8      	str	r0, [r5, #120]	@ 0x78
1004af4e:	2094      	movs	r0, #148	@ 0x94
1004af50:	5828      	ldr	r0, [r5, r0]
1004af52:	2600      	movs	r6, #0
1004af54:	2800      	cmp	r0, #0
1004af56:	d008      	beq.n	1004af6a <LL_Set_Extented_Advertising_Enable+0xaa>
1004af58:	3594      	adds	r5, #148	@ 0x94
1004af5a:	207d      	movs	r0, #125	@ 0x7d
1004af5c:	0144      	lsls	r4, r0, #5
1004af5e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004af60:	4344      	muls	r4, r0
1004af62:	f7f6 fd4e 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004af66:	1820      	adds	r0, r4, r0
1004af68:	6028      	str	r0, [r5, #0]
1004af6a:	4630      	mov	r0, r6
1004af6c:	e007      	b.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004af6e:	2000      	movs	r0, #0
1004af70:	2901      	cmp	r1, #1
1004af72:	d104      	bne.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004af74:	4605      	mov	r5, r0
1004af76:	4620      	mov	r0, r4
1004af78:	f000 f958 	bl	1004b22c <EADV_stop>
1004af7c:	4628      	mov	r0, r5
1004af7e:	b00f      	add	sp, #60	@ 0x3c
1004af80:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004af82:	2800      	cmp	r0, #0
1004af84:	d007      	beq.n	1004af96 <LL_Set_Extented_Advertising_Enable+0xd6>
1004af86:	208c      	movs	r0, #140	@ 0x8c
1004af88:	5828      	ldr	r0, [r5, r0]
1004af8a:	2800      	cmp	r0, #0
1004af8c:	d103      	bne.n	1004af96 <LL_Set_Extented_Advertising_Enable+0xd6>
1004af8e:	2090      	movs	r0, #144	@ 0x90
1004af90:	5828      	ldr	r0, [r5, r0]
1004af92:	2800      	cmp	r0, #0
1004af94:	d006      	beq.n	1004afa4 <LL_Set_Extented_Advertising_Enable+0xe4>
1004af96:	20b8      	movs	r0, #184	@ 0xb8
1004af98:	5a28      	ldrh	r0, [r5, r0]
1004af9a:	07c1      	lsls	r1, r0, #31
1004af9c:	d004      	beq.n	1004afa8 <LL_Set_Extented_Advertising_Enable+0xe8>
1004af9e:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1004afa0:	29f5      	cmp	r1, #245	@ 0xf5
1004afa2:	d901      	bls.n	1004afa8 <LL_Set_Extented_Advertising_Enable+0xe8>
1004afa4:	2012      	movs	r0, #18
1004afa6:	e7ea      	b.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004afa8:	2312      	movs	r3, #18
1004afaa:	4601      	mov	r1, r0
1004afac:	461a      	mov	r2, r3
1004afae:	4019      	ands	r1, r3
1004afb0:	2902      	cmp	r1, #2
1004afb2:	d103      	bne.n	1004afbc <LL_Set_Extented_Advertising_Enable+0xfc>
1004afb4:	2142      	movs	r1, #66	@ 0x42
1004afb6:	5a69      	ldrh	r1, [r5, r1]
1004afb8:	2900      	cmp	r1, #0
1004afba:	d040      	beq.n	1004b03e <LL_Set_Extented_Advertising_Enable+0x17e>
1004afbc:	0700      	lsls	r0, r0, #28
1004afbe:	d50f      	bpl.n	1004afe0 <LL_Set_Extented_Advertising_Enable+0x120>
1004afc0:	486d      	ldr	r0, [pc, #436]	@ (1004b178 <__arm_cp.24_0>)
1004afc2:	21be      	movs	r1, #190	@ 0xbe
1004afc4:	5a69      	ldrh	r1, [r5, r1]
1004afc6:	4281      	cmp	r1, r0
1004afc8:	d001      	beq.n	1004afce <LL_Set_Extented_Advertising_Enable+0x10e>
1004afca:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004afcc:	e000      	b.n	1004afd0 <LL_Set_Extented_Advertising_Enable+0x110>
1004afce:	2080      	movs	r0, #128	@ 0x80
1004afd0:	2880      	cmp	r0, #128	@ 0x80
1004afd2:	d901      	bls.n	1004afd8 <LL_Set_Extented_Advertising_Enable+0x118>
1004afd4:	4610      	mov	r0, r2
1004afd6:	e7d2      	b.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004afd8:	900e      	str	r0, [sp, #56]	@ 0x38
1004afda:	2800      	cmp	r0, #0
1004afdc:	4610      	mov	r0, r2
1004afde:	d0ce      	beq.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004afe0:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004afe2:	21ba      	movs	r1, #186	@ 0xba
1004afe4:	5268      	strh	r0, [r5, r1]
1004afe6:	267d      	movs	r6, #125	@ 0x7d
1004afe8:	0171      	lsls	r1, r6, #5
1004afea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004afec:	4351      	muls	r1, r2
1004afee:	2294      	movs	r2, #148	@ 0x94
1004aff0:	50a9      	str	r1, [r5, r2]
1004aff2:	2800      	cmp	r0, #0
1004aff4:	d001      	beq.n	1004affa <LL_Set_Extented_Advertising_Enable+0x13a>
1004aff6:	21cf      	movs	r1, #207	@ 0xcf
1004aff8:	546f      	strb	r7, [r5, r1]
1004affa:	21bc      	movs	r1, #188	@ 0xbc
1004affc:	5268      	strh	r0, [r5, r1]
1004affe:	4620      	mov	r0, r4
1004b000:	f000 fd34 	bl	1004ba6c <EADV_start_request_radio_tasks_ucfg_weak>
1004b004:	2800      	cmp	r0, #0
1004b006:	d1ba      	bne.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b008:	4629      	mov	r1, r5
1004b00a:	31d6      	adds	r1, #214	@ 0xd6
1004b00c:	4628      	mov	r0, r5
1004b00e:	3064      	adds	r0, #100	@ 0x64
1004b010:	462a      	mov	r2, r5
1004b012:	3254      	adds	r2, #84	@ 0x54
1004b014:	676a      	str	r2, [r5, #116]	@ 0x74
1004b016:	67a8      	str	r0, [r5, #120]	@ 0x78
1004b018:	462b      	mov	r3, r5
1004b01a:	3378      	adds	r3, #120	@ 0x78
1004b01c:	7809      	ldrb	r1, [r1, #0]
1004b01e:	07c9      	lsls	r1, r1, #31
1004b020:	930d      	str	r3, [sp, #52]	@ 0x34
1004b022:	d10e      	bne.n	1004b042 <LL_Set_Extented_Advertising_Enable+0x182>
1004b024:	2100      	movs	r1, #0
1004b026:	6001      	str	r1, [r0, #0]
1004b028:	66a9      	str	r1, [r5, #104]	@ 0x68
1004b02a:	4855      	ldr	r0, [pc, #340]	@ (1004b180 <__arm_cp.24_2>)
1004b02c:	6801      	ldr	r1, [r0, #0]
1004b02e:	4620      	mov	r0, r4
1004b030:	3065      	adds	r0, #101	@ 0x65
1004b032:	2206      	movs	r2, #6
1004b034:	f7f6 fc62 	bl	100418fc <BLEPLAT_MemCpy>
1004b038:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004b03a:	6800      	ldr	r0, [r0, #0]
1004b03c:	e008      	b.n	1004b050 <LL_Set_Extented_Advertising_Enable+0x190>
1004b03e:	200c      	movs	r0, #12
1004b040:	e79d      	b.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b042:	218c      	movs	r1, #140	@ 0x8c
1004b044:	5869      	ldr	r1, [r5, r1]
1004b046:	462a      	mov	r2, r5
1004b048:	328c      	adds	r2, #140	@ 0x8c
1004b04a:	6852      	ldr	r2, [r2, #4]
1004b04c:	c006      	stmia	r0!, {r1, r2}
1004b04e:	3808      	subs	r0, #8
1004b050:	4629      	mov	r1, r5
1004b052:	3194      	adds	r1, #148	@ 0x94
1004b054:	910e      	str	r1, [sp, #56]	@ 0x38
1004b056:	2184      	movs	r1, #132	@ 0x84
1004b058:	5869      	ldr	r1, [r5, r1]
1004b05a:	462a      	mov	r2, r5
1004b05c:	3284      	adds	r2, #132	@ 0x84
1004b05e:	6852      	ldr	r2, [r2, #4]
1004b060:	6081      	str	r1, [r0, #8]
1004b062:	60c2      	str	r2, [r0, #12]
1004b064:	4620      	mov	r0, r4
1004b066:	f7ff fe11 	bl	1004ac8c <llc_eadv_generate_new_rpa_for_one_adv_set>
1004b06a:	2800      	cmp	r0, #0
1004b06c:	960c      	str	r6, [sp, #48]	@ 0x30
1004b06e:	d002      	beq.n	1004b076 <LL_Set_Extented_Advertising_Enable+0x1b6>
1004b070:	f7ff fce2 	bl	1004aa38 <llc_priv_start_privacy_timer_ucfg_weak>
1004b074:	e006      	b.n	1004b084 <LL_Set_Extented_Advertising_Enable+0x1c4>
1004b076:	4628      	mov	r0, r5
1004b078:	3074      	adds	r0, #116	@ 0x74
1004b07a:	6801      	ldr	r1, [r0, #0]
1004b07c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004b07e:	681a      	ldr	r2, [r3, #0]
1004b080:	6002      	str	r2, [r0, #0]
1004b082:	6019      	str	r1, [r3, #0]
1004b084:	990e      	ldr	r1, [sp, #56]	@ 0x38
1004b086:	4626      	mov	r6, r4
1004b088:	36ce      	adds	r6, #206	@ 0xce
1004b08a:	4628      	mov	r0, r5
1004b08c:	30b8      	adds	r0, #184	@ 0xb8
1004b08e:	900d      	str	r0, [sp, #52]	@ 0x34
1004b090:	6808      	ldr	r0, [r1, #0]
1004b092:	2800      	cmp	r0, #0
1004b094:	d005      	beq.n	1004b0a2 <LL_Set_Extented_Advertising_Enable+0x1e2>
1004b096:	f7f6 fcb4 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004b09a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004b09c:	6811      	ldr	r1, [r2, #0]
1004b09e:	1808      	adds	r0, r1, r0
1004b0a0:	6010      	str	r0, [r2, #0]
1004b0a2:	7037      	strb	r7, [r6, #0]
1004b0a4:	20c4      	movs	r0, #196	@ 0xc4
1004b0a6:	5c29      	ldrb	r1, [r5, r0]
1004b0a8:	27d0      	movs	r7, #208	@ 0xd0
1004b0aa:	5de8      	ldrb	r0, [r5, r7]
1004b0ac:	2281      	movs	r2, #129	@ 0x81
1004b0ae:	920e      	str	r2, [sp, #56]	@ 0x38
1004b0b0:	9200      	str	r2, [sp, #0]
1004b0b2:	462e      	mov	r6, r5
1004b0b4:	3614      	adds	r6, #20
1004b0b6:	4622      	mov	r2, r4
1004b0b8:	4633      	mov	r3, r6
1004b0ba:	f7ff fd9d 	bl	1004abf8 <LL_eadv_BLUE_SM>
1004b0be:	5de8      	ldrb	r0, [r5, r7]
1004b0c0:	2125      	movs	r1, #37	@ 0x25
1004b0c2:	f7f7 fb1f 	bl	10042704 <BLEPLAT_CNTR_SmSetDataLength>
1004b0c6:	462f      	mov	r7, r5
1004b0c8:	37d0      	adds	r7, #208	@ 0xd0
1004b0ca:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004b0cc:	8800      	ldrh	r0, [r0, #0]
1004b0ce:	06c0      	lsls	r0, r0, #27
1004b0d0:	d403      	bmi.n	1004b0da <LL_Set_Extented_Advertising_Enable+0x21a>
1004b0d2:	4620      	mov	r0, r4
1004b0d4:	f000 fcee 	bl	1004bab4 <LL_eadv_start_extended_ucfg_weak>
1004b0d8:	e042      	b.n	1004b160 <LL_Set_Extented_Advertising_Enable+0x2a0>
1004b0da:	f7f6 fc92 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004b0de:	219c      	movs	r1, #156	@ 0x9c
1004b0e0:	910b      	str	r1, [sp, #44]	@ 0x2c
1004b0e2:	5068      	str	r0, [r5, r1]
1004b0e4:	f000 ff16 	bl	1004bf14 <LL_get_tx_common_buffer_p>
1004b0e8:	9009      	str	r0, [sp, #36]	@ 0x24
1004b0ea:	f000 ff1b 	bl	1004bf24 <LL_get_rx_common_buffer_p>
1004b0ee:	900a      	str	r0, [sp, #40]	@ 0x28
1004b0f0:	7838      	ldrb	r0, [r7, #0]
1004b0f2:	9008      	str	r0, [sp, #32]
1004b0f4:	2094      	movs	r0, #148	@ 0x94
1004b0f6:	2100      	movs	r1, #0
1004b0f8:	910d      	str	r1, [sp, #52]	@ 0x34
1004b0fa:	460a      	mov	r2, r1
1004b0fc:	f7f7 f898 	bl	10042230 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1004b100:	4603      	mov	r3, r0
1004b102:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004b104:	9000      	str	r0, [sp, #0]
1004b106:	4620      	mov	r0, r4
1004b108:	9908      	ldr	r1, [sp, #32]
1004b10a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004b10c:	f7ff fcf9 	bl	1004ab02 <LL_eadv_Blue_Tx>
1004b110:	7838      	ldrb	r0, [r7, #0]
1004b112:	9009      	str	r0, [sp, #36]	@ 0x24
1004b114:	2096      	movs	r0, #150	@ 0x96
1004b116:	2101      	movs	r1, #1
1004b118:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004b11a:	f7f7 f889 	bl	10042230 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1004b11e:	4603      	mov	r3, r0
1004b120:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004b122:	9000      	str	r0, [sp, #0]
1004b124:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004b126:	9001      	str	r0, [sp, #4]
1004b128:	4630      	mov	r0, r6
1004b12a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004b12c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004b12e:	f7ff fd23 	bl	1004ab78 <LL_eadv_Blue_Rx>
1004b132:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1004b134:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004b136:	582a      	ldr	r2, [r5, r0]
1004b138:	7838      	ldrb	r0, [r7, #0]
1004b13a:	4b12      	ldr	r3, [pc, #72]	@ (1004b184 <__arm_cp.24_3>)
1004b13c:	9307      	str	r3, [sp, #28]
1004b13e:	4b12      	ldr	r3, [pc, #72]	@ (1004b188 <__arm_cp.24_4>)
1004b140:	9306      	str	r3, [sp, #24]
1004b142:	4b12      	ldr	r3, [pc, #72]	@ (1004b18c <__arm_cp.24_5>)
1004b144:	9305      	str	r3, [sp, #20]
1004b146:	4b12      	ldr	r3, [pc, #72]	@ (1004b190 <__arm_cp.24_6>)
1004b148:	9304      	str	r3, [sp, #16]
1004b14a:	2314      	movs	r3, #20
1004b14c:	9303      	str	r3, [sp, #12]
1004b14e:	231f      	movs	r3, #31
1004b150:	ae00      	add	r6, sp, #0
1004b152:	c60e      	stmia	r6!, {r1, r2, r3}
1004b154:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004b156:	00cb      	lsls	r3, r1, #3
1004b158:	4621      	mov	r1, r4
1004b15a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004b15c:	f000 ff30 	bl	1004bfc0 <LL_sched_enable_taskslot>
1004b160:	249c      	movs	r4, #156	@ 0x9c
1004b162:	5929      	ldr	r1, [r5, r4]
1004b164:	7838      	ldrb	r0, [r7, #0]
1004b166:	f000 ff11 	bl	1004bf8c <LL_sched_set_anchor>
1004b16a:	5928      	ldr	r0, [r5, r4]
1004b16c:	7839      	ldrb	r1, [r7, #0]
1004b16e:	f001 f97f 	bl	1004c470 <LL_sched_check_and_call_sched>
1004b172:	2000      	movs	r0, #0
1004b174:	e703      	b.n	1004af7e <LL_Set_Extented_Advertising_Enable+0xbe>
1004b176:	46c0      	nop			@ (mov r8, r8)

1004b178 <__arm_cp.24_0>:
1004b178:	0000fffc 	.word	0x0000fffc

1004b17c <__arm_cp.24_1>:
1004b17c:	0000ffff 	.word	0x0000ffff

1004b180 <__arm_cp.24_2>:
1004b180:	20000648 	.word	0x20000648

1004b184 <__arm_cp.24_3>:
1004b184:	1004b3d9 	.word	0x1004b3d9

1004b188 <__arm_cp.24_4>:
1004b188:	1004b7d1 	.word	0x1004b7d1

1004b18c <__arm_cp.24_5>:
1004b18c:	1004b6ad 	.word	0x1004b6ad

1004b190 <__arm_cp.24_6>:
1004b190:	1004b3e1 	.word	0x1004b3e1

1004b194 <LL_Set_Extented_Advertising_Set_Random_Address>:
1004b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b196:	460c      	mov	r4, r1
1004b198:	4606      	mov	r6, r0
1004b19a:	f000 fecb 	bl	1004bf34 <llc_get_linkms_cntxt_p>
1004b19e:	4607      	mov	r7, r0
1004b1a0:	4630      	mov	r0, r6
1004b1a2:	f7ff fd57 	bl	1004ac54 <llc_get_advertising_set_index>
1004b1a6:	4605      	mov	r5, r0
1004b1a8:	4816      	ldr	r0, [pc, #88]	@ (1004b204 <__arm_cp.25_0>)
1004b1aa:	4285      	cmp	r5, r0
1004b1ac:	d027      	beq.n	1004b1fe <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1004b1ae:	0228      	lsls	r0, r5, #8
1004b1b0:	683f      	ldr	r7, [r7, #0]
1004b1b2:	1838      	adds	r0, r7, r0
1004b1b4:	21be      	movs	r1, #190	@ 0xbe
1004b1b6:	5246      	strh	r6, [r0, r1]
1004b1b8:	21b8      	movs	r1, #184	@ 0xb8
1004b1ba:	5c40      	ldrb	r0, [r0, r1]
1004b1bc:	07c0      	lsls	r0, r0, #31
1004b1be:	d007      	beq.n	1004b1d0 <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1004b1c0:	0228      	lsls	r0, r5, #8
1004b1c2:	1838      	adds	r0, r7, r0
1004b1c4:	21ce      	movs	r1, #206	@ 0xce
1004b1c6:	5c40      	ldrb	r0, [r0, r1]
1004b1c8:	2801      	cmp	r0, #1
1004b1ca:	d101      	bne.n	1004b1d0 <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1004b1cc:	250c      	movs	r5, #12
1004b1ce:	e017      	b.n	1004b200 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1004b1d0:	480d      	ldr	r0, [pc, #52]	@ (1004b208 <__arm_cp.25_1>)
1004b1d2:	6800      	ldr	r0, [r0, #0]
1004b1d4:	3056      	adds	r0, #86	@ 0x56
1004b1d6:	2606      	movs	r6, #6
1004b1d8:	4621      	mov	r1, r4
1004b1da:	4632      	mov	r2, r6
1004b1dc:	f7f6 fb8e 	bl	100418fc <BLEPLAT_MemCpy>
1004b1e0:	0228      	lsls	r0, r5, #8
1004b1e2:	1838      	adds	r0, r7, r0
1004b1e4:	218c      	movs	r1, #140	@ 0x8c
1004b1e6:	2201      	movs	r2, #1
1004b1e8:	5042      	str	r2, [r0, r1]
1004b1ea:	4601      	mov	r1, r0
1004b1ec:	318c      	adds	r1, #140	@ 0x8c
1004b1ee:	2500      	movs	r5, #0
1004b1f0:	604d      	str	r5, [r1, #4]
1004b1f2:	308d      	adds	r0, #141	@ 0x8d
1004b1f4:	4621      	mov	r1, r4
1004b1f6:	4632      	mov	r2, r6
1004b1f8:	f7f6 fb80 	bl	100418fc <BLEPLAT_MemCpy>
1004b1fc:	e000      	b.n	1004b200 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1004b1fe:	2512      	movs	r5, #18
1004b200:	4628      	mov	r0, r5
1004b202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004b204 <__arm_cp.25_0>:
1004b204:	0000ffff 	.word	0x0000ffff

1004b208 <__arm_cp.25_1>:
1004b208:	20000658 	.word	0x20000658

1004b20c <LL_eadv_update_did>:
1004b20c:	b510      	push	{r4, lr}
1004b20e:	4604      	mov	r4, r0
1004b210:	2000      	movs	r0, #0
1004b212:	f001 fe32 	bl	1004ce7a <Hal_Get_Random_Number>
1004b216:	4904      	ldr	r1, [pc, #16]	@ (1004b228 <__arm_cp.27_0>)
1004b218:	4001      	ands	r1, r0
1004b21a:	8820      	ldrh	r0, [r4, #0]
1004b21c:	1a40      	subs	r0, r0, r1
1004b21e:	4242      	negs	r2, r0
1004b220:	4142      	adcs	r2, r0
1004b222:	404a      	eors	r2, r1
1004b224:	8022      	strh	r2, [r4, #0]
1004b226:	bd10      	pop	{r4, pc}

1004b228 <__arm_cp.27_0>:
1004b228:	00000fff 	.word	0x00000fff

1004b22c <EADV_stop>:
1004b22c:	b5b0      	push	{r4, r5, r7, lr}
1004b22e:	4604      	mov	r4, r0
1004b230:	f3ef 8010 	mrs	r0, PRIMASK
1004b234:	b672      	cpsid	i
1004b236:	4625      	mov	r5, r4
1004b238:	35ce      	adds	r5, #206	@ 0xce
1004b23a:	78a8      	ldrb	r0, [r5, #2]
1004b23c:	f000 feae 	bl	1004bf9c <LL_sched_set_cancel_request>
1004b240:	20d1      	movs	r0, #209	@ 0xd1
1004b242:	5c20      	ldrb	r0, [r4, r0]
1004b244:	f000 feaa 	bl	1004bf9c <LL_sched_set_cancel_request>
1004b248:	b662      	cpsie	i
1004b24a:	78a8      	ldrb	r0, [r5, #2]
1004b24c:	f001 f920 	bl	1004c490 <LL_sched_check_and_wait_sched>
1004b250:	20ce      	movs	r0, #206	@ 0xce
1004b252:	2100      	movs	r1, #0
1004b254:	5221      	strh	r1, [r4, r0]
1004b256:	7aa8      	ldrb	r0, [r5, #10]
1004b258:	28ff      	cmp	r0, #255	@ 0xff
1004b25a:	d001      	beq.n	1004b260 <EADV_stop+0x34>
1004b25c:	f7ff fbd2 	bl	1004aa04 <llc_conn_release_conn_idx>
1004b260:	20ff      	movs	r0, #255	@ 0xff
1004b262:	72a8      	strb	r0, [r5, #10]
1004b264:	7a28      	ldrb	r0, [r5, #8]
1004b266:	0780      	lsls	r0, r0, #30
1004b268:	d501      	bpl.n	1004b26e <EADV_stop+0x42>
1004b26a:	f7ff fbe6 	bl	1004aa3a <llc_priv_stop_privacy_timer_ucfg_weak>
1004b26e:	bdb0      	pop	{r4, r5, r7, pc}

1004b270 <LL_Set_Advertising_Set_Random_Address>:
1004b270:	b510      	push	{r4, lr}
1004b272:	4604      	mov	r4, r0
1004b274:	f7ff f9bd 	bl	1004a5f2 <scan_csr_ucfg_weak>
1004b278:	2801      	cmp	r0, #1
1004b27a:	d105      	bne.n	1004b288 <LL_Set_Advertising_Set_Random_Address+0x18>
1004b27c:	f7ff fbe0 	bl	1004aa40 <llc_scan_get_cntxt_p>
1004b280:	21eb      	movs	r1, #235	@ 0xeb
1004b282:	5c40      	ldrb	r0, [r0, r1]
1004b284:	07c0      	lsls	r0, r0, #31
1004b286:	d106      	bne.n	1004b296 <LL_Set_Advertising_Set_Random_Address+0x26>
1004b288:	f7ff fdfc 	bl	1004ae84 <LL_LE_Set_Advertising_Parameters_Default>
1004b28c:	4803      	ldr	r0, [pc, #12]	@ (1004b29c <__arm_cp.29_0>)
1004b28e:	4621      	mov	r1, r4
1004b290:	f7ff ff80 	bl	1004b194 <LL_Set_Extented_Advertising_Set_Random_Address>
1004b294:	bd10      	pop	{r4, pc}
1004b296:	200c      	movs	r0, #12
1004b298:	bd10      	pop	{r4, pc}
1004b29a:	46c0      	nop			@ (mov r8, r8)

1004b29c <__arm_cp.29_0>:
1004b29c:	0000fffc 	.word	0x0000fffc

1004b2a0 <ll_set_advertising_data_ptr>:
1004b2a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004b2a2:	9301      	str	r3, [sp, #4]
1004b2a4:	4614      	mov	r4, r2
1004b2a6:	9102      	str	r1, [sp, #8]
1004b2a8:	4605      	mov	r5, r0
1004b2aa:	f000 fe43 	bl	1004bf34 <llc_get_linkms_cntxt_p>
1004b2ae:	4607      	mov	r7, r0
1004b2b0:	4834      	ldr	r0, [pc, #208]	@ (1004b384 <__arm_cp.33_0>)
1004b2b2:	4285      	cmp	r5, r0
1004b2b4:	d101      	bne.n	1004b2ba <ll_set_advertising_data_ptr+0x1a>
1004b2b6:	201f      	movs	r0, #31
1004b2b8:	e007      	b.n	1004b2ca <ll_set_advertising_data_ptr+0x2a>
1004b2ba:	2001      	movs	r0, #1
1004b2bc:	2102      	movs	r1, #2
1004b2be:	f7ff f975 	bl	1004a5ac <hci_get_set_legacy_ext_flag>
1004b2c2:	4606      	mov	r6, r0
1004b2c4:	2800      	cmp	r0, #0
1004b2c6:	d111      	bne.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b2c8:	482f      	ldr	r0, [pc, #188]	@ (1004b388 <__arm_cp.33_1>)
1004b2ca:	2612      	movs	r6, #18
1004b2cc:	42a0      	cmp	r0, r4
1004b2ce:	d30d      	bcc.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b2d0:	9600      	str	r6, [sp, #0]
1004b2d2:	4628      	mov	r0, r5
1004b2d4:	f7ff fcbe 	bl	1004ac54 <llc_get_advertising_set_index>
1004b2d8:	0200      	lsls	r0, r0, #8
1004b2da:	6839      	ldr	r1, [r7, #0]
1004b2dc:	180f      	adds	r7, r1, r0
1004b2de:	4620      	mov	r0, r4
1004b2e0:	4639      	mov	r1, r7
1004b2e2:	f000 fbe5 	bl	1004bab0 <llc_eadv_max_supported_data_check_ucfg_weak>
1004b2e6:	4606      	mov	r6, r0
1004b2e8:	2800      	cmp	r0, #0
1004b2ea:	d001      	beq.n	1004b2f0 <ll_set_advertising_data_ptr+0x50>
1004b2ec:	4630      	mov	r0, r6
1004b2ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b2f0:	20ce      	movs	r0, #206	@ 0xce
1004b2f2:	5c39      	ldrb	r1, [r7, r0]
1004b2f4:	2038      	movs	r0, #56	@ 0x38
1004b2f6:	5c38      	ldrb	r0, [r7, r0]
1004b2f8:	9a02      	ldr	r2, [sp, #8]
1004b2fa:	2a04      	cmp	r2, #4
1004b2fc:	d111      	bne.n	1004b322 <ll_set_advertising_data_ptr+0x82>
1004b2fe:	2900      	cmp	r1, #0
1004b300:	d03d      	beq.n	1004b37e <ll_set_advertising_data_ptr+0xde>
1004b302:	2800      	cmp	r0, #0
1004b304:	9e00      	ldr	r6, [sp, #0]
1004b306:	d0f1      	beq.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b308:	481e      	ldr	r0, [pc, #120]	@ (1004b384 <__arm_cp.33_0>)
1004b30a:	4285      	cmp	r5, r0
1004b30c:	d1ee      	bne.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b30e:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
1004b310:	2800      	cmp	r0, #0
1004b312:	d0eb      	beq.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b314:	20b8      	movs	r0, #184	@ 0xb8
1004b316:	5a38      	ldrh	r0, [r7, r0]
1004b318:	2110      	movs	r1, #16
1004b31a:	4001      	ands	r1, r0
1004b31c:	4321      	orrs	r1, r4
1004b31e:	d1e5      	bne.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b320:	e00d      	b.n	1004b33e <ll_set_advertising_data_ptr+0x9e>
1004b322:	463d      	mov	r5, r7
1004b324:	3538      	adds	r5, #56	@ 0x38
1004b326:	2900      	cmp	r1, #0
1004b328:	d016      	beq.n	1004b358 <ll_set_advertising_data_ptr+0xb8>
1004b32a:	2a03      	cmp	r2, #3
1004b32c:	d107      	bne.n	1004b33e <ll_set_advertising_data_ptr+0x9e>
1004b32e:	2002      	movs	r0, #2
1004b330:	7028      	strb	r0, [r5, #0]
1004b332:	86fc      	strh	r4, [r7, #54]	@ 0x36
1004b334:	2000      	movs	r0, #0
1004b336:	86b8      	strh	r0, [r7, #52]	@ 0x34
1004b338:	9801      	ldr	r0, [sp, #4]
1004b33a:	6338      	str	r0, [r7, #48]	@ 0x30
1004b33c:	e003      	b.n	1004b346 <ll_set_advertising_data_ptr+0xa6>
1004b33e:	4638      	mov	r0, r7
1004b340:	30b6      	adds	r0, #182	@ 0xb6
1004b342:	f7ff ff63 	bl	1004b20c <LL_eadv_update_did>
1004b346:	20da      	movs	r0, #218	@ 0xda
1004b348:	5c38      	ldrb	r0, [r7, r0]
1004b34a:	2600      	movs	r6, #0
1004b34c:	07c0      	lsls	r0, r0, #31
1004b34e:	d0cd      	beq.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b350:	4638      	mov	r0, r7
1004b352:	f7ff fc9b 	bl	1004ac8c <llc_eadv_generate_new_rpa_for_one_adv_set>
1004b356:	e7c9      	b.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b358:	9702      	str	r7, [sp, #8]
1004b35a:	463e      	mov	r6, r7
1004b35c:	3628      	adds	r6, #40	@ 0x28
1004b35e:	2800      	cmp	r0, #0
1004b360:	9f01      	ldr	r7, [sp, #4]
1004b362:	d004      	beq.n	1004b36e <ll_set_advertising_data_ptr+0xce>
1004b364:	6831      	ldr	r1, [r6, #0]
1004b366:	20a1      	movs	r0, #161	@ 0xa1
1004b368:	463a      	mov	r2, r7
1004b36a:	f001 fe63 	bl	1004d034 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1004b36e:	6037      	str	r7, [r6, #0]
1004b370:	2001      	movs	r0, #1
1004b372:	7028      	strb	r0, [r5, #0]
1004b374:	9802      	ldr	r0, [sp, #8]
1004b376:	85c4      	strh	r4, [r0, #46]	@ 0x2e
1004b378:	2600      	movs	r6, #0
1004b37a:	8586      	strh	r6, [r0, #44]	@ 0x2c
1004b37c:	e7b6      	b.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b37e:	9e00      	ldr	r6, [sp, #0]
1004b380:	e7b4      	b.n	1004b2ec <ll_set_advertising_data_ptr+0x4c>
1004b382:	46c0      	nop			@ (mov r8, r8)

1004b384 <__arm_cp.33_0>:
1004b384:	0000fffc 	.word	0x0000fffc

1004b388 <__arm_cp.33_1>:
1004b388:	00000672 	.word	0x00000672

1004b38c <ll_set_legacy_advertising_data_ptr>:
1004b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b38e:	460c      	mov	r4, r1
1004b390:	4605      	mov	r5, r0
1004b392:	f000 fdcf 	bl	1004bf34 <llc_get_linkms_cntxt_p>
1004b396:	4607      	mov	r7, r0
1004b398:	f7ff fd74 	bl	1004ae84 <LL_LE_Set_Advertising_Parameters_Default>
1004b39c:	4e0c      	ldr	r6, [pc, #48]	@ (1004b3d0 <__arm_cp.36_0>)
1004b39e:	4630      	mov	r0, r6
1004b3a0:	f7ff fc58 	bl	1004ac54 <llc_get_advertising_set_index>
1004b3a4:	490b      	ldr	r1, [pc, #44]	@ (1004b3d4 <__arm_cp.36_1>)
1004b3a6:	4288      	cmp	r0, r1
1004b3a8:	d108      	bne.n	1004b3bc <ll_set_legacy_advertising_data_ptr+0x30>
1004b3aa:	f7ff fd3b 	bl	1004ae24 <LL_Context_ReturnFree>
1004b3ae:	28ff      	cmp	r0, #255	@ 0xff
1004b3b0:	d00b      	beq.n	1004b3ca <ll_set_legacy_advertising_data_ptr+0x3e>
1004b3b2:	0200      	lsls	r0, r0, #8
1004b3b4:	6839      	ldr	r1, [r7, #0]
1004b3b6:	1808      	adds	r0, r1, r0
1004b3b8:	21be      	movs	r1, #190	@ 0xbe
1004b3ba:	5246      	strh	r6, [r0, r1]
1004b3bc:	2103      	movs	r1, #3
1004b3be:	4630      	mov	r0, r6
1004b3c0:	462a      	mov	r2, r5
1004b3c2:	4623      	mov	r3, r4
1004b3c4:	f7ff ff6c 	bl	1004b2a0 <ll_set_advertising_data_ptr>
1004b3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b3ca:	2001      	movs	r0, #1
1004b3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b3ce:	46c0      	nop			@ (mov r8, r8)

1004b3d0 <__arm_cp.36_0>:
1004b3d0:	0000fffc 	.word	0x0000fffc

1004b3d4 <__arm_cp.36_1>:
1004b3d4:	0000ffff 	.word	0x0000ffff

1004b3d8 <ADV_cancelslot>:
1004b3d8:	21d0      	movs	r1, #208	@ 0xd0
1004b3da:	22ff      	movs	r2, #255	@ 0xff
1004b3dc:	5442      	strb	r2, [r0, r1]
1004b3de:	4770      	bx	lr

1004b3e0 <ADV_skiproutine>:
1004b3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b3e2:	b08d      	sub	sp, #52	@ 0x34
1004b3e4:	4607      	mov	r7, r0
1004b3e6:	20d0      	movs	r0, #208	@ 0xd0
1004b3e8:	5c38      	ldrb	r0, [r7, r0]
1004b3ea:	232c      	movs	r3, #44	@ 0x2c
1004b3ec:	4358      	muls	r0, r3
1004b3ee:	4a5f      	ldr	r2, [pc, #380]	@ (1004b56c <__arm_cp.40_0>)
1004b3f0:	6812      	ldr	r2, [r2, #0]
1004b3f2:	1810      	adds	r0, r2, r0
1004b3f4:	7d80      	ldrb	r0, [r0, #22]
1004b3f6:	463c      	mov	r4, r7
1004b3f8:	3494      	adds	r4, #148	@ 0x94
1004b3fa:	463a      	mov	r2, r7
1004b3fc:	32b4      	adds	r2, #180	@ 0xb4
1004b3fe:	9203      	str	r2, [sp, #12]
1004b400:	463a      	mov	r2, r7
1004b402:	32d6      	adds	r2, #214	@ 0xd6
1004b404:	9202      	str	r2, [sp, #8]
1004b406:	2814      	cmp	r0, #20
1004b408:	9301      	str	r3, [sp, #4]
1004b40a:	d10a      	bne.n	1004b422 <ADV_skiproutine+0x42>
1004b40c:	f7f6 faf9 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004b410:	4605      	mov	r5, r0
1004b412:	f000 fd9b 	bl	1004bf4c <LL_sched_engine_return_actual_scheduler_margin>
1004b416:	9b03      	ldr	r3, [sp, #12]
1004b418:	1828      	adds	r0, r5, r0
1004b41a:	3032      	adds	r0, #50	@ 0x32
1004b41c:	60a0      	str	r0, [r4, #8]
1004b41e:	2501      	movs	r5, #1
1004b420:	e01b      	b.n	1004b45a <ADV_skiproutine+0x7a>
1004b422:	68a2      	ldr	r2, [r4, #8]
1004b424:	1856      	adds	r6, r2, r1
1004b426:	2500      	movs	r5, #0
1004b428:	4630      	mov	r0, r6
1004b42a:	4611      	mov	r1, r2
1004b42c:	f000 fd8a 	bl	1004bf44 <LL_sched_time_t1_ge_t2>
1004b430:	2800      	cmp	r0, #0
1004b432:	d005      	beq.n	1004b440 <ADV_skiproutine+0x60>
1004b434:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1004b436:	68a1      	ldr	r1, [r4, #8]
1004b438:	180a      	adds	r2, r1, r0
1004b43a:	60a2      	str	r2, [r4, #8]
1004b43c:	1c6d      	adds	r5, r5, #1
1004b43e:	e7f3      	b.n	1004b428 <ADV_skiproutine+0x48>
1004b440:	9b03      	ldr	r3, [sp, #12]
1004b442:	8898      	ldrh	r0, [r3, #4]
1004b444:	0700      	lsls	r0, r0, #28
1004b446:	d408      	bmi.n	1004b45a <ADV_skiproutine+0x7a>
1004b448:	2001      	movs	r0, #1
1004b44a:	f001 fd1d 	bl	1004ce88 <Hal_Get_Random_Number32>
1004b44e:	9b03      	ldr	r3, [sp, #12]
1004b450:	4947      	ldr	r1, [pc, #284]	@ (1004b570 <__arm_cp.40_1>)
1004b452:	4001      	ands	r1, r0
1004b454:	68a0      	ldr	r0, [r4, #8]
1004b456:	1840      	adds	r0, r0, r1
1004b458:	60a0      	str	r0, [r4, #8]
1004b45a:	8898      	ldrh	r0, [r3, #4]
1004b45c:	2103      	movs	r1, #3
1004b45e:	4001      	ands	r1, r0
1004b460:	1e48      	subs	r0, r1, #1
1004b462:	4181      	sbcs	r1, r0
1004b464:	0048      	lsls	r0, r1, #1
1004b466:	8018      	strh	r0, [r3, #0]
1004b468:	7b98      	ldrb	r0, [r3, #14]
1004b46a:	2201      	movs	r2, #1
1004b46c:	4601      	mov	r1, r0
1004b46e:	9200      	str	r2, [sp, #0]
1004b470:	4011      	ands	r1, r2
1004b472:	0782      	lsls	r2, r0, #30
1004b474:	0fd2      	lsrs	r2, r2, #31
1004b476:	1889      	adds	r1, r1, r2
1004b478:	0740      	lsls	r0, r0, #29
1004b47a:	0fc0      	lsrs	r0, r0, #31
1004b47c:	1808      	adds	r0, r1, r0
1004b47e:	1e40      	subs	r0, r0, #1
1004b480:	7798      	strb	r0, [r3, #30]
1004b482:	4638      	mov	r0, r7
1004b484:	f000 f87a 	bl	1004b57c <UTIL_u8GetNextAdvChannel>
1004b488:	4601      	mov	r1, r0
1004b48a:	9803      	ldr	r0, [sp, #12]
1004b48c:	7f00      	ldrb	r0, [r0, #28]
1004b48e:	f7f7 f963 	bl	10042758 <BLEPLAT_CNTR_SmSetRemapChan>
1004b492:	9803      	ldr	r0, [sp, #12]
1004b494:	7f00      	ldrb	r0, [r0, #28]
1004b496:	f7f7 f9aa 	bl	100427ee <BLEPLAT_CNTR_SmSetTxMode>
1004b49a:	2600      	movs	r6, #0
1004b49c:	9802      	ldr	r0, [sp, #8]
1004b49e:	7146      	strb	r6, [r0, #5]
1004b4a0:	4638      	mov	r0, r7
1004b4a2:	3028      	adds	r0, #40	@ 0x28
1004b4a4:	f7ff fb1c 	bl	1004aae0 <LL_eadv_switchbackupdata_data_struc>
1004b4a8:	4638      	mov	r0, r7
1004b4aa:	303c      	adds	r0, #60	@ 0x3c
1004b4ac:	f7ff fb18 	bl	1004aae0 <LL_eadv_switchbackupdata_data_struc>
1004b4b0:	9b03      	ldr	r3, [sp, #12]
1004b4b2:	68a1      	ldr	r1, [r4, #8]
1004b4b4:	6820      	ldr	r0, [r4, #0]
1004b4b6:	88da      	ldrh	r2, [r3, #6]
1004b4b8:	2a00      	cmp	r2, #0
1004b4ba:	d102      	bne.n	1004b4c2 <ADV_skiproutine+0xe2>
1004b4bc:	7eda      	ldrb	r2, [r3, #27]
1004b4be:	2a01      	cmp	r2, #1
1004b4c0:	d003      	beq.n	1004b4ca <ADV_skiproutine+0xea>
1004b4c2:	4288      	cmp	r0, r1
1004b4c4:	da4a      	bge.n	1004b55c <ADV_skiproutine+0x17c>
1004b4c6:	2800      	cmp	r0, #0
1004b4c8:	d048      	beq.n	1004b55c <ADV_skiproutine+0x17c>
1004b4ca:	7e98      	ldrb	r0, [r3, #26]
1004b4cc:	2800      	cmp	r0, #0
1004b4ce:	d045      	beq.n	1004b55c <ADV_skiproutine+0x17c>
1004b4d0:	8898      	ldrh	r0, [r3, #4]
1004b4d2:	0700      	lsls	r0, r0, #28
1004b4d4:	d51e      	bpl.n	1004b514 <ADV_skiproutine+0x134>
1004b4d6:	a90b      	add	r1, sp, #44	@ 0x2c
1004b4d8:	808e      	strh	r6, [r1, #4]
1004b4da:	960b      	str	r6, [sp, #44]	@ 0x2c
1004b4dc:	a804      	add	r0, sp, #16
1004b4de:	9a00      	ldr	r2, [sp, #0]
1004b4e0:	7642      	strb	r2, [r0, #25]
1004b4e2:	223c      	movs	r2, #60	@ 0x3c
1004b4e4:	7682      	strb	r2, [r0, #26]
1004b4e6:	22ff      	movs	r2, #255	@ 0xff
1004b4e8:	7582      	strb	r2, [r0, #22]
1004b4ea:	81c6      	strh	r6, [r0, #14]
1004b4ec:	4a21      	ldr	r2, [pc, #132]	@ (1004b574 <__arm_cp.40_2>)
1004b4ee:	8282      	strh	r2, [r0, #20]
1004b4f0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1004b4f2:	7a13      	ldrb	r3, [r2, #8]
1004b4f4:	7603      	strb	r3, [r0, #24]
1004b4f6:	8186      	strh	r6, [r0, #12]
1004b4f8:	75c6      	strb	r6, [r0, #23]
1004b4fa:	9105      	str	r1, [sp, #20]
1004b4fc:	3209      	adds	r2, #9
1004b4fe:	9204      	str	r2, [sp, #16]
1004b500:	9608      	str	r6, [sp, #32]
1004b502:	9106      	str	r1, [sp, #24]
1004b504:	f7ff f948 	bl	1004a798 <llc_conn_push_connection_complete_event>
1004b508:	9802      	ldr	r0, [sp, #8]
1004b50a:	7800      	ldrb	r0, [r0, #0]
1004b50c:	0780      	lsls	r0, r0, #30
1004b50e:	d501      	bpl.n	1004b514 <ADV_skiproutine+0x134>
1004b510:	f7ff fa93 	bl	1004aa3a <llc_priv_stop_privacy_timer_ucfg_weak>
1004b514:	2002      	movs	r0, #2
1004b516:	f7ff f857 	bl	1004a5c8 <hci_check_legacy_ext_flag>
1004b51a:	2801      	cmp	r0, #1
1004b51c:	d119      	bne.n	1004b552 <ADV_skiproutine+0x172>
1004b51e:	9b03      	ldr	r3, [sp, #12]
1004b520:	88da      	ldrh	r2, [r3, #6]
1004b522:	2a00      	cmp	r2, #0
1004b524:	d001      	beq.n	1004b52a <ADV_skiproutine+0x14a>
1004b526:	203c      	movs	r0, #60	@ 0x3c
1004b528:	e000      	b.n	1004b52c <ADV_skiproutine+0x14c>
1004b52a:	2043      	movs	r0, #67	@ 0x43
1004b52c:	9000      	str	r0, [sp, #0]
1004b52e:	4812      	ldr	r0, [pc, #72]	@ (1004b578 <__arm_cp.40_3>)
1004b530:	6800      	ldr	r0, [r0, #0]
1004b532:	9901      	ldr	r1, [sp, #4]
1004b534:	5c40      	ldrb	r0, [r0, r1]
1004b536:	0100      	lsls	r0, r0, #4
1004b538:	43c0      	mvns	r0, r0
1004b53a:	4619      	mov	r1, r3
1004b53c:	23a1      	movs	r3, #161	@ 0xa1
1004b53e:	4303      	orrs	r3, r0
1004b540:	20b1      	movs	r0, #177	@ 0xb1
1004b542:	4018      	ands	r0, r3
1004b544:	7a0b      	ldrb	r3, [r1, #8]
1004b546:	1a9a      	subs	r2, r3, r2
1004b548:	b2d3      	uxtb	r3, r2
1004b54a:	7a8a      	ldrb	r2, [r1, #10]
1004b54c:	9900      	ldr	r1, [sp, #0]
1004b54e:	f000 f85d 	bl	1004b60c <hci_le_advertising_set_terminated_event_push>
1004b552:	4638      	mov	r0, r7
1004b554:	f000 f894 	bl	1004b680 <EADV_stop_isr>
1004b558:	68a1      	ldr	r1, [r4, #8]
1004b55a:	9b03      	ldr	r3, [sp, #12]
1004b55c:	7f18      	ldrb	r0, [r3, #28]
1004b55e:	f000 fd15 	bl	1004bf8c <LL_sched_set_anchor>
1004b562:	9802      	ldr	r0, [sp, #8]
1004b564:	7146      	strb	r6, [r0, #5]
1004b566:	4628      	mov	r0, r5
1004b568:	b00d      	add	sp, #52	@ 0x34
1004b56a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004b56c <__arm_cp.40_0>:
1004b56c:	20000660 	.word	0x20000660

1004b570 <__arm_cp.40_1>:
1004b570:	00000fff 	.word	0x00000fff

1004b574 <__arm_cp.40_2>:
1004b574:	0000ffff 	.word	0x0000ffff

1004b578 <__arm_cp.40_3>:
1004b578:	20000648 	.word	0x20000648

1004b57c <UTIL_u8GetNextAdvChannel>:
1004b57c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004b57e:	4604      	mov	r4, r0
1004b580:	20c2      	movs	r0, #194	@ 0xc2
1004b582:	5c27      	ldrb	r7, [r4, r0]
1004b584:	2501      	movs	r5, #1
1004b586:	403d      	ands	r5, r7
1004b588:	07ba      	lsls	r2, r7, #30
1004b58a:	0fd0      	lsrs	r0, r2, #31
1004b58c:	1828      	adds	r0, r5, r0
1004b58e:	0779      	lsls	r1, r7, #29
1004b590:	0fc9      	lsrs	r1, r1, #31
1004b592:	1840      	adds	r0, r0, r1
1004b594:	1e40      	subs	r0, r0, #1
1004b596:	b2c0      	uxtb	r0, r0
1004b598:	34c2      	adds	r4, #194	@ 0xc2
1004b59a:	7c26      	ldrb	r6, [r4, #16]
1004b59c:	42b0      	cmp	r0, r6
1004b59e:	d10f      	bne.n	1004b5c0 <UTIL_u8GetNextAdvChannel+0x44>
1004b5a0:	9201      	str	r2, [sp, #4]
1004b5a2:	2001      	movs	r0, #1
1004b5a4:	9002      	str	r0, [sp, #8]
1004b5a6:	f001 fc68 	bl	1004ce7a <Hal_Get_Random_Number>
1004b5aa:	2e01      	cmp	r6, #1
1004b5ac:	d00a      	beq.n	1004b5c4 <UTIL_u8GetNextAdvChannel+0x48>
1004b5ae:	2e02      	cmp	r6, #2
1004b5b0:	d10e      	bne.n	1004b5d0 <UTIL_u8GetNextAdvChannel+0x54>
1004b5b2:	b2c0      	uxtb	r0, r0
1004b5b4:	2106      	movs	r1, #6
1004b5b6:	f7f4 fec1 	bl	1004033c <__aeabi_uidivmod>
1004b5ba:	a012      	add	r0, pc, #72	@ (adr r0, 1004b604 <UTIL_u8GetNextAdvChannel+0x88>)
1004b5bc:	5c40      	ldrb	r0, [r0, r1]
1004b5be:	e012      	b.n	1004b5e6 <UTIL_u8GetNextAdvChannel+0x6a>
1004b5c0:	7c60      	ldrb	r0, [r4, #17]
1004b5c2:	e011      	b.n	1004b5e8 <UTIL_u8GetNextAdvChannel+0x6c>
1004b5c4:	9902      	ldr	r1, [sp, #8]
1004b5c6:	4008      	ands	r0, r1
1004b5c8:	2d00      	cmp	r5, #0
1004b5ca:	d104      	bne.n	1004b5d6 <UTIL_u8GetNextAdvChannel+0x5a>
1004b5cc:	a10c      	add	r1, pc, #48	@ (adr r1, 1004b600 <UTIL_u8GetNextAdvChannel+0x84>)
1004b5ce:	e008      	b.n	1004b5e2 <UTIL_u8GetNextAdvChannel+0x66>
1004b5d0:	08b8      	lsrs	r0, r7, #2
1004b5d2:	1a38      	subs	r0, r7, r0
1004b5d4:	e007      	b.n	1004b5e6 <UTIL_u8GetNextAdvChannel+0x6a>
1004b5d6:	9901      	ldr	r1, [sp, #4]
1004b5d8:	2900      	cmp	r1, #0
1004b5da:	d401      	bmi.n	1004b5e0 <UTIL_u8GetNextAdvChannel+0x64>
1004b5dc:	a107      	add	r1, pc, #28	@ (adr r1, 1004b5fc <UTIL_u8GetNextAdvChannel+0x80>)
1004b5de:	e000      	b.n	1004b5e2 <UTIL_u8GetNextAdvChannel+0x66>
1004b5e0:	a105      	add	r1, pc, #20	@ (adr r1, 1004b5f8 <UTIL_u8GetNextAdvChannel+0x7c>)
1004b5e2:	1808      	adds	r0, r1, r0
1004b5e4:	7800      	ldrb	r0, [r0, #0]
1004b5e6:	7460      	strb	r0, [r4, #17]
1004b5e8:	0071      	lsls	r1, r6, #1
1004b5ea:	b2c2      	uxtb	r2, r0
1004b5ec:	40ca      	lsrs	r2, r1
1004b5ee:	2003      	movs	r0, #3
1004b5f0:	4010      	ands	r0, r2
1004b5f2:	3024      	adds	r0, #36	@ 0x24
1004b5f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b5f6:	46c0      	nop			@ (mov r8, r8)
1004b5f8:	00000906 	.word	0x00000906
1004b5fc:	00000d07 	.word	0x00000d07
1004b600:	00000e0b 	.word	0x00000e0b
1004b604:	2d271e1b 	.word	0x2d271e1b
1004b608:	00003936 	.word	0x00003936

1004b60c <hci_le_advertising_set_terminated_event_push>:
1004b60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b60e:	461f      	mov	r7, r3
1004b610:	4616      	mov	r6, r2
1004b612:	460d      	mov	r5, r1
1004b614:	4604      	mov	r4, r0
1004b616:	06c0      	lsls	r0, r0, #27
1004b618:	d40b      	bmi.n	1004b632 <hci_le_advertising_set_terminated_event_push+0x26>
1004b61a:	4817      	ldr	r0, [pc, #92]	@ (1004b678 <__arm_cp.42_0>)
1004b61c:	6800      	ldr	r0, [r0, #0]
1004b61e:	213d      	movs	r1, #61	@ 0x3d
1004b620:	5c41      	ldrb	r1, [r0, r1]
1004b622:	0689      	lsls	r1, r1, #26
1004b624:	d527      	bpl.n	1004b676 <hci_le_advertising_set_terminated_event_push+0x6a>
1004b626:	303d      	adds	r0, #61	@ 0x3d
1004b628:	7ac0      	ldrb	r0, [r0, #11]
1004b62a:	0780      	lsls	r0, r0, #30
1004b62c:	d523      	bpl.n	1004b676 <hci_le_advertising_set_terminated_event_push+0x6a>
1004b62e:	221f      	movs	r2, #31
1004b630:	e002      	b.n	1004b638 <hci_le_advertising_set_terminated_event_push+0x2c>
1004b632:	20bf      	movs	r0, #191	@ 0xbf
1004b634:	4004      	ands	r4, r0
1004b636:	2211      	movs	r2, #17
1004b638:	4810      	ldr	r0, [pc, #64]	@ (1004b67c <__arm_cp.42_1>)
1004b63a:	6800      	ldr	r0, [r0, #0]
1004b63c:	0761      	lsls	r1, r4, #29
1004b63e:	0ec9      	lsrs	r1, r1, #27
1004b640:	1840      	adds	r0, r0, r1
1004b642:	6900      	ldr	r0, [r0, #16]
1004b644:	2303      	movs	r3, #3
1004b646:	4621      	mov	r1, r4
1004b648:	f7fe f8e4 	bl	10049814 <aci_event_fifo_push_header>
1004b64c:	2800      	cmp	r0, #0
1004b64e:	d012      	beq.n	1004b676 <hci_le_advertising_set_terminated_event_push+0x6a>
1004b650:	4601      	mov	r1, r0
1004b652:	200f      	movs	r0, #15
1004b654:	72c8      	strb	r0, [r1, #11]
1004b656:	20ff      	movs	r0, #255	@ 0xff
1004b658:	7288      	strb	r0, [r1, #10]
1004b65a:	730f      	strb	r7, [r1, #12]
1004b65c:	724e      	strb	r6, [r1, #9]
1004b65e:	720d      	strb	r5, [r1, #8]
1004b660:	2012      	movs	r0, #18
1004b662:	71c8      	strb	r0, [r1, #7]
1004b664:	2006      	movs	r0, #6
1004b666:	7188      	strb	r0, [r1, #6]
1004b668:	203e      	movs	r0, #62	@ 0x3e
1004b66a:	7148      	strb	r0, [r1, #5]
1004b66c:	2004      	movs	r0, #4
1004b66e:	7108      	strb	r0, [r1, #4]
1004b670:	4620      	mov	r0, r4
1004b672:	f7fe f96c 	bl	1004994e <aci_event_fifo_push>
1004b676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004b678 <__arm_cp.42_0>:
1004b678:	20000658 	.word	0x20000658

1004b67c <__arm_cp.42_1>:
1004b67c:	2000064c 	.word	0x2000064c

1004b680 <EADV_stop_isr>:
1004b680:	b5b0      	push	{r4, r5, r7, lr}
1004b682:	4604      	mov	r4, r0
1004b684:	20d1      	movs	r0, #209	@ 0xd1
1004b686:	5c20      	ldrb	r0, [r4, r0]
1004b688:	f000 fc88 	bl	1004bf9c <LL_sched_set_cancel_request>
1004b68c:	4625      	mov	r5, r4
1004b68e:	35ce      	adds	r5, #206	@ 0xce
1004b690:	78a8      	ldrb	r0, [r5, #2]
1004b692:	f000 fc83 	bl	1004bf9c <LL_sched_set_cancel_request>
1004b696:	20ce      	movs	r0, #206	@ 0xce
1004b698:	2100      	movs	r1, #0
1004b69a:	5221      	strh	r1, [r4, r0]
1004b69c:	7aa8      	ldrb	r0, [r5, #10]
1004b69e:	28ff      	cmp	r0, #255	@ 0xff
1004b6a0:	d001      	beq.n	1004b6a6 <EADV_stop_isr+0x26>
1004b6a2:	f7ff f9af 	bl	1004aa04 <llc_conn_release_conn_idx>
1004b6a6:	20ff      	movs	r0, #255	@ 0xff
1004b6a8:	72a8      	strb	r0, [r5, #10]
1004b6aa:	bdb0      	pop	{r4, r5, r7, pc}

1004b6ac <ADV_createslot>:
1004b6ac:	b570      	push	{r4, r5, r6, lr}
1004b6ae:	4604      	mov	r4, r0
1004b6b0:	20c5      	movs	r0, #197	@ 0xc5
1004b6b2:	5c20      	ldrb	r0, [r4, r0]
1004b6b4:	f7ff f9d0 	bl	1004aa58 <llc_convert_hci_phy_enum_to_hw_phy>
1004b6b8:	4605      	mov	r5, r0
1004b6ba:	4626      	mov	r6, r4
1004b6bc:	36c5      	adds	r6, #197	@ 0xc5
1004b6be:	7af0      	ldrb	r0, [r6, #11]
1004b6c0:	4629      	mov	r1, r5
1004b6c2:	f7f7 f8b5 	bl	10042830 <BLEPLAT_CNTR_SmSetTxPhy>
1004b6c6:	7af0      	ldrb	r0, [r6, #11]
1004b6c8:	4629      	mov	r1, r5
1004b6ca:	f7f7 f87b 	bl	100427c4 <BLEPLAT_CNTR_SmSetRxPhy>
1004b6ce:	f7f6 fe26 	bl	1004231e <BLEPLAT_CNTR_GlobEnableBlue>
1004b6d2:	f000 fc1f 	bl	1004bf14 <LL_get_tx_common_buffer_p>
1004b6d6:	4602      	mov	r2, r0
1004b6d8:	7db0      	ldrb	r0, [r6, #22]
1004b6da:	4621      	mov	r1, r4
1004b6dc:	f000 f801 	bl	1004b6e2 <EADV_vPrepareAdvOrRspLegacyPacket>
1004b6e0:	bd70      	pop	{r4, r5, r6, pc}

1004b6e2 <EADV_vPrepareAdvOrRspLegacyPacket>:
1004b6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b6e4:	4614      	mov	r4, r2
1004b6e6:	460d      	mov	r5, r1
1004b6e8:	4606      	mov	r6, r0
1004b6ea:	460f      	mov	r7, r1
1004b6ec:	37b8      	adds	r7, #184	@ 0xb8
1004b6ee:	2004      	movs	r0, #4
1004b6f0:	2e00      	cmp	r6, #0
1004b6f2:	4601      	mov	r1, r0
1004b6f4:	d10d      	bne.n	1004b712 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004b6f6:	8839      	ldrh	r1, [r7, #0]
1004b6f8:	074a      	lsls	r2, r1, #29
1004b6fa:	d407      	bmi.n	1004b70c <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1004b6fc:	2203      	movs	r2, #3
1004b6fe:	4011      	ands	r1, r2
1004b700:	424a      	negs	r2, r1
1004b702:	414a      	adcs	r2, r1
1004b704:	2902      	cmp	r1, #2
1004b706:	d003      	beq.n	1004b710 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1004b708:	0051      	lsls	r1, r2, #1
1004b70a:	e002      	b.n	1004b712 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004b70c:	2101      	movs	r1, #1
1004b70e:	e000      	b.n	1004b712 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004b710:	2106      	movs	r1, #6
1004b712:	7021      	strb	r1, [r4, #0]
1004b714:	2e00      	cmp	r6, #0
1004b716:	d107      	bne.n	1004b728 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1004b718:	8839      	ldrh	r1, [r7, #0]
1004b71a:	4001      	ands	r1, r0
1004b71c:	d104      	bne.n	1004b728 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1004b71e:	202e      	movs	r0, #46	@ 0x2e
1004b720:	5c28      	ldrb	r0, [r5, r0]
1004b722:	1d80      	adds	r0, r0, #6
1004b724:	7060      	strb	r0, [r4, #1]
1004b726:	e00f      	b.n	1004b748 <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1004b728:	2e00      	cmp	r6, #0
1004b72a:	d004      	beq.n	1004b736 <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1004b72c:	4628      	mov	r0, r5
1004b72e:	3042      	adds	r0, #66	@ 0x42
1004b730:	7800      	ldrb	r0, [r0, #0]
1004b732:	1d80      	adds	r0, r0, #6
1004b734:	e000      	b.n	1004b738 <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1004b736:	200c      	movs	r0, #12
1004b738:	7060      	strb	r0, [r4, #1]
1004b73a:	4620      	mov	r0, r4
1004b73c:	3008      	adds	r0, #8
1004b73e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004b740:	3109      	adds	r1, #9
1004b742:	2206      	movs	r2, #6
1004b744:	f7f6 f8da 	bl	100418fc <BLEPLAT_MemCpy>
1004b748:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004b74a:	1ca0      	adds	r0, r4, #2
1004b74c:	1c49      	adds	r1, r1, #1
1004b74e:	2206      	movs	r2, #6
1004b750:	f7f6 f8d4 	bl	100418fc <BLEPLAT_MemCpy>
1004b754:	7820      	ldrb	r0, [r4, #0]
1004b756:	212f      	movs	r1, #47	@ 0x2f
1004b758:	4001      	ands	r1, r0
1004b75a:	7021      	strb	r1, [r4, #0]
1004b75c:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1004b75e:	7800      	ldrb	r0, [r0, #0]
1004b760:	07c0      	lsls	r0, r0, #31
1004b762:	0e40      	lsrs	r0, r0, #25
1004b764:	1840      	adds	r0, r0, r1
1004b766:	7020      	strb	r0, [r4, #0]
1004b768:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004b76a:	7a09      	ldrb	r1, [r1, #8]
1004b76c:	01c9      	lsls	r1, r1, #7
1004b76e:	1808      	adds	r0, r1, r0
1004b770:	7020      	strb	r0, [r4, #0]
1004b772:	f000 f997 	bl	1004baa4 <llc_get_channel_sel_algo2_enabled>
1004b776:	7821      	ldrb	r1, [r4, #0]
1004b778:	0140      	lsls	r0, r0, #5
1004b77a:	4308      	orrs	r0, r1
1004b77c:	7020      	strb	r0, [r4, #0]
1004b77e:	4271      	negs	r1, r6
1004b780:	4171      	adcs	r1, r6
1004b782:	8838      	ldrh	r0, [r7, #0]
1004b784:	2204      	movs	r2, #4
1004b786:	4002      	ands	r2, r0
1004b788:	0890      	lsrs	r0, r2, #2
1004b78a:	4008      	ands	r0, r1
1004b78c:	d101      	bne.n	1004b792 <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1004b78e:	2708      	movs	r7, #8
1004b790:	e000      	b.n	1004b794 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1004b792:	270e      	movs	r7, #14
1004b794:	2800      	cmp	r0, #0
1004b796:	d001      	beq.n	1004b79c <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1004b798:	200c      	movs	r0, #12
1004b79a:	e011      	b.n	1004b7c0 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1004b79c:	2e00      	cmp	r6, #0
1004b79e:	d001      	beq.n	1004b7a4 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1004b7a0:	203c      	movs	r0, #60	@ 0x3c
1004b7a2:	e000      	b.n	1004b7a6 <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1004b7a4:	2028      	movs	r0, #40	@ 0x28
1004b7a6:	5829      	ldr	r1, [r5, r0]
1004b7a8:	2e00      	cmp	r6, #0
1004b7aa:	d001      	beq.n	1004b7b0 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1004b7ac:	2042      	movs	r0, #66	@ 0x42
1004b7ae:	e000      	b.n	1004b7b2 <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1004b7b0:	202e      	movs	r0, #46	@ 0x2e
1004b7b2:	5a2d      	ldrh	r5, [r5, r0]
1004b7b4:	19e0      	adds	r0, r4, r7
1004b7b6:	462a      	mov	r2, r5
1004b7b8:	f7f6 f8a0 	bl	100418fc <BLEPLAT_MemCpy>
1004b7bc:	1978      	adds	r0, r7, r5
1004b7be:	1e80      	subs	r0, r0, #2
1004b7c0:	7060      	strb	r0, [r4, #1]
1004b7c2:	2000      	movs	r0, #0
1004b7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004b7c6 <ADV_ISR_connect_request_received_ucfg_weak>:
1004b7c6:	21b4      	movs	r1, #180	@ 0xb4
1004b7c8:	2200      	movs	r2, #0
1004b7ca:	5242      	strh	r2, [r0, r1]
1004b7cc:	4770      	bx	lr
	...

1004b7d0 <ADV_ISR>:
1004b7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b7d2:	b08d      	sub	sp, #52	@ 0x34
1004b7d4:	4605      	mov	r5, r0
1004b7d6:	f000 fba5 	bl	1004bf24 <LL_get_rx_common_buffer_p>
1004b7da:	9005      	str	r0, [sp, #20]
1004b7dc:	4c85      	ldr	r4, [pc, #532]	@ (1004b9f4 <__arm_cp.48_0>)
1004b7de:	6820      	ldr	r0, [r4, #0]
1004b7e0:	f7f6 fe13 	bl	1004240a <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1004b7e4:	4606      	mov	r6, r0
1004b7e6:	6820      	ldr	r0, [r4, #0]
1004b7e8:	f7f6 fe1a 	bl	10042420 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1004b7ec:	4607      	mov	r7, r0
1004b7ee:	20d0      	movs	r0, #208	@ 0xd0
1004b7f0:	5c28      	ldrb	r0, [r5, r0]
1004b7f2:	212c      	movs	r1, #44	@ 0x2c
1004b7f4:	4341      	muls	r1, r0
1004b7f6:	4a80      	ldr	r2, [pc, #512]	@ (1004b9f8 <__arm_cp.48_1>)
1004b7f8:	6812      	ldr	r2, [r2, #0]
1004b7fa:	1851      	adds	r1, r2, r1
1004b7fc:	7d89      	ldrb	r1, [r1, #22]
1004b7fe:	2914      	cmp	r1, #20
1004b800:	d103      	bne.n	1004b80a <ADV_ISR+0x3a>
1004b802:	210a      	movs	r1, #10
1004b804:	2203      	movs	r2, #3
1004b806:	f000 fdf7 	bl	1004c3f8 <LL_sched_set_priority>
1004b80a:	462c      	mov	r4, r5
1004b80c:	34b4      	adds	r4, #180	@ 0xb4
1004b80e:	4628      	mov	r0, r5
1004b810:	30db      	adds	r0, #219	@ 0xdb
1004b812:	9004      	str	r0, [sp, #16]
1004b814:	2e00      	cmp	r6, #0
1004b816:	d038      	beq.n	1004b88a <ADV_ISR+0xba>
1004b818:	9506      	str	r5, [sp, #24]
1004b81a:	2700      	movs	r7, #0
1004b81c:	970c      	str	r7, [sp, #48]	@ 0x30
1004b81e:	970b      	str	r7, [sp, #44]	@ 0x2c
1004b820:	9d05      	ldr	r5, [sp, #20]
1004b822:	7828      	ldrb	r0, [r5, #0]
1004b824:	09c0      	lsrs	r0, r0, #7
1004b826:	a90b      	add	r1, sp, #44	@ 0x2c
1004b828:	7008      	strb	r0, [r1, #0]
1004b82a:	4874      	ldr	r0, [pc, #464]	@ (1004b9fc <__arm_cp.48_2>)
1004b82c:	6800      	ldr	r0, [r0, #0]
1004b82e:	22d8      	movs	r2, #216	@ 0xd8
1004b830:	5c80      	ldrb	r0, [r0, r2]
1004b832:	9003      	str	r0, [sp, #12]
1004b834:	1c48      	adds	r0, r1, #1
1004b836:	4629      	mov	r1, r5
1004b838:	3108      	adds	r1, #8
1004b83a:	2606      	movs	r6, #6
1004b83c:	4632      	mov	r2, r6
1004b83e:	f7f6 f85d 	bl	100418fc <BLEPLAT_MemCpy>
1004b842:	970a      	str	r7, [sp, #40]	@ 0x28
1004b844:	9709      	str	r7, [sp, #36]	@ 0x24
1004b846:	7828      	ldrb	r0, [r5, #0]
1004b848:	0640      	lsls	r0, r0, #25
1004b84a:	0fc0      	lsrs	r0, r0, #31
1004b84c:	a909      	add	r1, sp, #36	@ 0x24
1004b84e:	7008      	strb	r0, [r1, #0]
1004b850:	1c48      	adds	r0, r1, #1
1004b852:	1ca9      	adds	r1, r5, #2
1004b854:	4632      	mov	r2, r6
1004b856:	f7f6 f851 	bl	100418fc <BLEPLAT_MemCpy>
1004b85a:	7828      	ldrb	r0, [r5, #0]
1004b85c:	260f      	movs	r6, #15
1004b85e:	4006      	ands	r6, r0
1004b860:	2e05      	cmp	r6, #5
1004b862:	d101      	bne.n	1004b868 <ADV_ISR+0x98>
1004b864:	f7f6 f90e 	bl	10041a84 <BLEPLAT_ClearRadioTimerValue>
1004b868:	7be3      	ldrb	r3, [r4, #15]
1004b86a:	7922      	ldrb	r2, [r4, #4]
1004b86c:	9702      	str	r7, [sp, #8]
1004b86e:	ad07      	add	r5, sp, #28
1004b870:	9501      	str	r5, [sp, #4]
1004b872:	9806      	ldr	r0, [sp, #24]
1004b874:	3084      	adds	r0, #132	@ 0x84
1004b876:	9000      	str	r0, [sp, #0]
1004b878:	a809      	add	r0, sp, #36	@ 0x24
1004b87a:	4631      	mov	r1, r6
1004b87c:	f001 fc7a 	bl	1004d174 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1004b880:	0841      	lsrs	r1, r0, #1
1004b882:	297e      	cmp	r1, #126	@ 0x7e
1004b884:	d807      	bhi.n	1004b896 <ADV_ISR+0xc6>
1004b886:	4601      	mov	r1, r0
1004b888:	e006      	b.n	1004b898 <ADV_ISR+0xc8>
1004b88a:	2601      	movs	r6, #1
1004b88c:	2f00      	cmp	r7, #0
1004b88e:	d14f      	bne.n	1004b930 <ADV_ISR+0x160>
1004b890:	2700      	movs	r7, #0
1004b892:	8027      	strh	r7, [r4, #0]
1004b894:	e051      	b.n	1004b93a <ADV_ISR+0x16a>
1004b896:	2101      	movs	r1, #1
1004b898:	7029      	strb	r1, [r5, #0]
1004b89a:	9d06      	ldr	r5, [sp, #24]
1004b89c:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004b89e:	680a      	ldr	r2, [r1, #0]
1004b8a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004b8a2:	429a      	cmp	r2, r3
1004b8a4:	d12d      	bne.n	1004b902 <ADV_ISR+0x132>
1004b8a6:	6849      	ldr	r1, [r1, #4]
1004b8a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004b8aa:	4291      	cmp	r1, r2
1004b8ac:	d129      	bne.n	1004b902 <ADV_ISR+0x132>
1004b8ae:	4607      	mov	r7, r0
1004b8b0:	3fff      	subs	r7, #255	@ 0xff
1004b8b2:	1e79      	subs	r1, r7, #1
1004b8b4:	418f      	sbcs	r7, r1
1004b8b6:	2e03      	cmp	r6, #3
1004b8b8:	d123      	bne.n	1004b902 <ADV_ISR+0x132>
1004b8ba:	28ff      	cmp	r0, #255	@ 0xff
1004b8bc:	d021      	beq.n	1004b902 <ADV_ISR+0x132>
1004b8be:	88a0      	ldrh	r0, [r4, #4]
1004b8c0:	2701      	movs	r7, #1
1004b8c2:	0780      	lsls	r0, r0, #30
1004b8c4:	d51d      	bpl.n	1004b902 <ADV_ISR+0x132>
1004b8c6:	9803      	ldr	r0, [sp, #12]
1004b8c8:	2801      	cmp	r0, #1
1004b8ca:	d11a      	bne.n	1004b902 <ADV_ISR+0x132>
1004b8cc:	4628      	mov	r0, r5
1004b8ce:	f7f6 fdbe 	bl	1004244e <BLEPLAT_CNTR_PacketClrPllTrig>
1004b8d2:	7e60      	ldrb	r0, [r4, #25]
1004b8d4:	2801      	cmp	r0, #1
1004b8d6:	d109      	bne.n	1004b8ec <ADV_ISR+0x11c>
1004b8d8:	8960      	ldrh	r0, [r4, #10]
1004b8da:	4949      	ldr	r1, [pc, #292]	@ (1004ba00 <__arm_cp.48_3>)
1004b8dc:	4288      	cmp	r0, r1
1004b8de:	d005      	beq.n	1004b8ec <ADV_ISR+0x11c>
1004b8e0:	aa07      	add	r2, sp, #28
1004b8e2:	7811      	ldrb	r1, [r2, #0]
1004b8e4:	b2c0      	uxtb	r0, r0
1004b8e6:	1c52      	adds	r2, r2, #1
1004b8e8:	f000 f88e 	bl	1004ba08 <hci_le_scan_request_received_event_push>
1004b8ec:	7f20      	ldrb	r0, [r4, #28]
1004b8ee:	f7f6 ff7e 	bl	100427ee <BLEPLAT_CNTR_SmSetTxMode>
1004b8f2:	2001      	movs	r0, #1
1004b8f4:	9904      	ldr	r1, [sp, #16]
1004b8f6:	7008      	strb	r0, [r1, #0]
1004b8f8:	4628      	mov	r0, r5
1004b8fa:	f7ff fed7 	bl	1004b6ac <ADV_createslot>
1004b8fe:	2600      	movs	r6, #0
1004b900:	e01b      	b.n	1004b93a <ADV_ISR+0x16a>
1004b902:	88a0      	ldrh	r0, [r4, #4]
1004b904:	07c0      	lsls	r0, r0, #31
1004b906:	d015      	beq.n	1004b934 <ADV_ISR+0x164>
1004b908:	2e05      	cmp	r6, #5
1004b90a:	d113      	bne.n	1004b934 <ADV_ISR+0x164>
1004b90c:	9908      	ldr	r1, [sp, #32]
1004b90e:	9807      	ldr	r0, [sp, #28]
1004b910:	f7fe ff20 	bl	1004a754 <llc_conn_list_search_address>
1004b914:	4241      	negs	r1, r0
1004b916:	4141      	adcs	r1, r0
1004b918:	4039      	ands	r1, r7
1004b91a:	2901      	cmp	r1, #1
1004b91c:	d10a      	bne.n	1004b934 <ADV_ISR+0x164>
1004b91e:	9803      	ldr	r0, [sp, #12]
1004b920:	2801      	cmp	r0, #1
1004b922:	d107      	bne.n	1004b934 <ADV_ISR+0x164>
1004b924:	aa07      	add	r2, sp, #28
1004b926:	4628      	mov	r0, r5
1004b928:	9905      	ldr	r1, [sp, #20]
1004b92a:	f7ff ff4c 	bl	1004b7c6 <ADV_ISR_connect_request_received_ucfg_weak>
1004b92e:	2601      	movs	r6, #1
1004b930:	2700      	movs	r7, #0
1004b932:	e002      	b.n	1004b93a <ADV_ISR+0x16a>
1004b934:	2700      	movs	r7, #0
1004b936:	8027      	strh	r7, [r4, #0]
1004b938:	2601      	movs	r6, #1
1004b93a:	8821      	ldrh	r1, [r4, #0]
1004b93c:	7fa0      	ldrb	r0, [r4, #30]
1004b93e:	2800      	cmp	r0, #0
1004b940:	d022      	beq.n	1004b988 <ADV_ISR+0x1b8>
1004b942:	2900      	cmp	r1, #0
1004b944:	d122      	bne.n	1004b98c <ADV_ISR+0x1bc>
1004b946:	1e40      	subs	r0, r0, #1
1004b948:	77a0      	strb	r0, [r4, #30]
1004b94a:	88a0      	ldrh	r0, [r4, #4]
1004b94c:	2103      	movs	r1, #3
1004b94e:	4001      	ands	r1, r0
1004b950:	1e48      	subs	r0, r1, #1
1004b952:	4181      	sbcs	r1, r0
1004b954:	0048      	lsls	r0, r1, #1
1004b956:	8020      	strh	r0, [r4, #0]
1004b958:	4628      	mov	r0, r5
1004b95a:	f7ff fe0f 	bl	1004b57c <UTIL_u8GetNextAdvChannel>
1004b95e:	4601      	mov	r1, r0
1004b960:	7f20      	ldrb	r0, [r4, #28]
1004b962:	f7f6 fef9 	bl	10042758 <BLEPLAT_CNTR_SmSetRemapChan>
1004b966:	7f20      	ldrb	r0, [r4, #28]
1004b968:	f7f6 ff41 	bl	100427ee <BLEPLAT_CNTR_SmSetTxMode>
1004b96c:	4628      	mov	r0, r5
1004b96e:	f7f6 fdfe 	bl	1004256e <BLEPLAT_CNTR_PacketSetPllTrig>
1004b972:	f7f6 f887 	bl	10041a84 <BLEPLAT_ClearRadioTimerValue>
1004b976:	2000      	movs	r0, #0
1004b978:	9904      	ldr	r1, [sp, #16]
1004b97a:	7008      	strb	r0, [r1, #0]
1004b97c:	4628      	mov	r0, r5
1004b97e:	f7ff fe95 	bl	1004b6ac <ADV_createslot>
1004b982:	f7f6 f897 	bl	10041ab4 <BLEPLAT_SetRadioCloseTimeout>
1004b986:	e02a      	b.n	1004b9de <ADV_ISR+0x20e>
1004b988:	2900      	cmp	r1, #0
1004b98a:	d019      	beq.n	1004b9c0 <ADV_ISR+0x1f0>
1004b98c:	4819      	ldr	r0, [pc, #100]	@ (1004b9f4 <__arm_cp.48_0>)
1004b98e:	6800      	ldr	r0, [r0, #0]
1004b990:	f7f6 fd46 	bl	10042420 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1004b994:	2800      	cmp	r0, #0
1004b996:	d022      	beq.n	1004b9de <ADV_ISR+0x20e>
1004b998:	4628      	mov	r0, r5
1004b99a:	f7f6 fde8 	bl	1004256e <BLEPLAT_CNTR_PacketSetPllTrig>
1004b99e:	7c60      	ldrb	r0, [r4, #17]
1004b9a0:	2801      	cmp	r0, #1
1004b9a2:	d001      	beq.n	1004b9a8 <ADV_ISR+0x1d8>
1004b9a4:	4917      	ldr	r1, [pc, #92]	@ (1004ba04 <__arm_cp.48_4>)
1004b9a6:	e000      	b.n	1004b9aa <ADV_ISR+0x1da>
1004b9a8:	2146      	movs	r1, #70	@ 0x46
1004b9aa:	3514      	adds	r5, #20
1004b9ac:	4628      	mov	r0, r5
1004b9ae:	f7f6 fe3f 	bl	10042630 <BLEPLAT_CNTR_SetRcvLen>
1004b9b2:	8820      	ldrh	r0, [r4, #0]
1004b9b4:	1e40      	subs	r0, r0, #1
1004b9b6:	8020      	strh	r0, [r4, #0]
1004b9b8:	f7f6 fcb1 	bl	1004231e <BLEPLAT_CNTR_GlobEnableBlue>
1004b9bc:	2600      	movs	r6, #0
1004b9be:	e00e      	b.n	1004b9de <ADV_ISR+0x20e>
1004b9c0:	f7f6 f860 	bl	10041a84 <BLEPLAT_ClearRadioTimerValue>
1004b9c4:	4628      	mov	r0, r5
1004b9c6:	f7f6 fdd2 	bl	1004256e <BLEPLAT_CNTR_PacketSetPllTrig>
1004b9ca:	88e0      	ldrh	r0, [r4, #6]
1004b9cc:	1e40      	subs	r0, r0, #1
1004b9ce:	80e0      	strh	r0, [r4, #6]
1004b9d0:	2100      	movs	r1, #0
1004b9d2:	4628      	mov	r0, r5
1004b9d4:	f7ff fd04 	bl	1004b3e0 <ADV_skiproutine>
1004b9d8:	7f20      	ldrb	r0, [r4, #28]
1004b9da:	f000 fb47 	bl	1004c06c <LL_sched_engine>
1004b9de:	2f00      	cmp	r7, #0
1004b9e0:	d002      	beq.n	1004b9e8 <ADV_ISR+0x218>
1004b9e2:	8820      	ldrh	r0, [r4, #0]
1004b9e4:	1e40      	subs	r0, r0, #1
1004b9e6:	8020      	strh	r0, [r4, #0]
1004b9e8:	f7fd ff10 	bl	1004980c <log_notify_us_flush_ucfg_weak>
1004b9ec:	4630      	mov	r0, r6
1004b9ee:	b00d      	add	sp, #52	@ 0x34
1004b9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b9f2:	46c0      	nop			@ (mov r8, r8)

1004b9f4 <__arm_cp.48_0>:
1004b9f4:	20000654 	.word	0x20000654

1004b9f8 <__arm_cp.48_1>:
1004b9f8:	20000660 	.word	0x20000660

1004b9fc <__arm_cp.48_2>:
1004b9fc:	20000658 	.word	0x20000658

1004ba00 <__arm_cp.48_3>:
1004ba00:	0000fffc 	.word	0x0000fffc

1004ba04 <__arm_cp.48_4>:
1004ba04:	000002ee 	.word	0x000002ee

1004ba08 <hci_le_scan_request_received_event_push>:
1004ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ba0a:	460e      	mov	r6, r1
1004ba0c:	4605      	mov	r5, r0
1004ba0e:	4815      	ldr	r0, [pc, #84]	@ (1004ba64 <__arm_cp.49_0>)
1004ba10:	6800      	ldr	r0, [r0, #0]
1004ba12:	213d      	movs	r1, #61	@ 0x3d
1004ba14:	5c41      	ldrb	r1, [r0, r1]
1004ba16:	0689      	lsls	r1, r1, #26
1004ba18:	d522      	bpl.n	1004ba60 <hci_le_scan_request_received_event_push+0x58>
1004ba1a:	303d      	adds	r0, #61	@ 0x3d
1004ba1c:	7ac0      	ldrb	r0, [r0, #11]
1004ba1e:	0740      	lsls	r0, r0, #29
1004ba20:	d51e      	bpl.n	1004ba60 <hci_le_scan_request_received_event_push+0x58>
1004ba22:	4614      	mov	r4, r2
1004ba24:	4810      	ldr	r0, [pc, #64]	@ (1004ba68 <__arm_cp.49_1>)
1004ba26:	6800      	ldr	r0, [r0, #0]
1004ba28:	6940      	ldr	r0, [r0, #20]
1004ba2a:	21a1      	movs	r1, #161	@ 0xa1
1004ba2c:	222b      	movs	r2, #43	@ 0x2b
1004ba2e:	2303      	movs	r3, #3
1004ba30:	f7fd fef0 	bl	10049814 <aci_event_fifo_push_header>
1004ba34:	2800      	cmp	r0, #0
1004ba36:	d013      	beq.n	1004ba60 <hci_le_scan_request_received_event_push+0x58>
1004ba38:	4607      	mov	r7, r0
1004ba3a:	7246      	strb	r6, [r0, #9]
1004ba3c:	7205      	strb	r5, [r0, #8]
1004ba3e:	300a      	adds	r0, #10
1004ba40:	2206      	movs	r2, #6
1004ba42:	4621      	mov	r1, r4
1004ba44:	f7f5 ff5a 	bl	100418fc <BLEPLAT_MemCpy>
1004ba48:	2013      	movs	r0, #19
1004ba4a:	71f8      	strb	r0, [r7, #7]
1004ba4c:	2009      	movs	r0, #9
1004ba4e:	71b8      	strb	r0, [r7, #6]
1004ba50:	203e      	movs	r0, #62	@ 0x3e
1004ba52:	7178      	strb	r0, [r7, #5]
1004ba54:	2004      	movs	r0, #4
1004ba56:	7138      	strb	r0, [r7, #4]
1004ba58:	20a1      	movs	r0, #161	@ 0xa1
1004ba5a:	4639      	mov	r1, r7
1004ba5c:	f7fd ff77 	bl	1004994e <aci_event_fifo_push>
1004ba60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004ba62:	46c0      	nop			@ (mov r8, r8)

1004ba64 <__arm_cp.49_0>:
1004ba64:	20000658 	.word	0x20000658

1004ba68 <__arm_cp.49_1>:
1004ba68:	2000064c 	.word	0x2000064c

1004ba6c <EADV_start_request_radio_tasks_ucfg_weak>:
1004ba6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ba6e:	4604      	mov	r4, r0
1004ba70:	20d8      	movs	r0, #216	@ 0xd8
1004ba72:	21ff      	movs	r1, #255	@ 0xff
1004ba74:	5421      	strb	r1, [r4, r0]
1004ba76:	20b8      	movs	r0, #184	@ 0xb8
1004ba78:	5a27      	ldrh	r7, [r4, r0]
1004ba7a:	34b8      	adds	r4, #184	@ 0xb8
1004ba7c:	f000 fcca 	bl	1004c414 <LL_sched_reserve_taskslot>
1004ba80:	7620      	strb	r0, [r4, #24]
1004ba82:	2607      	movs	r6, #7
1004ba84:	28ff      	cmp	r0, #255	@ 0xff
1004ba86:	d00a      	beq.n	1004ba9e <EADV_start_request_radio_tasks_ucfg_weak+0x32>
1004ba88:	2500      	movs	r5, #0
1004ba8a:	06f8      	lsls	r0, r7, #27
1004ba8c:	d408      	bmi.n	1004baa0 <EADV_start_request_radio_tasks_ucfg_weak+0x34>
1004ba8e:	f000 fcc1 	bl	1004c414 <LL_sched_reserve_taskslot>
1004ba92:	7660      	strb	r0, [r4, #25]
1004ba94:	28ff      	cmp	r0, #255	@ 0xff
1004ba96:	d103      	bne.n	1004baa0 <EADV_start_request_radio_tasks_ucfg_weak+0x34>
1004ba98:	7e20      	ldrb	r0, [r4, #24]
1004ba9a:	f000 fcdd 	bl	1004c458 <LL_sched_release_taskslot>
1004ba9e:	4635      	mov	r5, r6
1004baa0:	4628      	mov	r0, r5
1004baa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004baa4 <llc_get_channel_sel_algo2_enabled>:
1004baa4:	b580      	push	{r7, lr}
1004baa6:	f000 fa45 	bl	1004bf34 <llc_get_linkms_cntxt_p>
1004baaa:	214e      	movs	r1, #78	@ 0x4e
1004baac:	5c40      	ldrb	r0, [r0, r1]
1004baae:	bd80      	pop	{r7, pc}

1004bab0 <llc_eadv_max_supported_data_check_ucfg_weak>:
1004bab0:	2000      	movs	r0, #0
1004bab2:	4770      	bx	lr

1004bab4 <LL_eadv_start_extended_ucfg_weak>:
1004bab4:	4770      	bx	lr

1004bab6 <ext_adv_scan_enabled_ucfg_weak>:
1004bab6:	2000      	movs	r0, #0
1004bab8:	4770      	bx	lr

1004baba <BLE_STACK_EndOfRadioActivityCb>:
1004baba:	4770      	bx	lr

1004babc <BLE_STACK_RadioHandler>:
1004babc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004babe:	b083      	sub	sp, #12
1004bac0:	4604      	mov	r4, r0
1004bac2:	484c      	ldr	r0, [pc, #304]	@ (1004bbf4 <__arm_cp.1_0>)
1004bac4:	6004      	str	r4, [r0, #0]
1004bac6:	4620      	mov	r0, r4
1004bac8:	f7f6 fc7b 	bl	100423c2 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1004bacc:	4605      	mov	r5, r0
1004bace:	4620      	mov	r0, r4
1004bad0:	f7f6 fc5f 	bl	10042392 <BLEPLAT_CNTR_IntGetIntStatusDone>
1004bad4:	4606      	mov	r6, r0
1004bad6:	4668      	mov	r0, sp
1004bad8:	f7f5 ffdd 	bl	10041a96 <BLEPLAT_GetAnchorPoint>
1004badc:	9900      	ldr	r1, [sp, #0]
1004bade:	1a09      	subs	r1, r1, r0
1004bae0:	0b4b      	lsrs	r3, r1, #13
1004bae2:	4945      	ldr	r1, [pc, #276]	@ (1004bbf8 <__arm_cp.1_1>)
1004bae4:	680a      	ldr	r2, [r1, #0]
1004bae6:	4611      	mov	r1, r2
1004bae8:	31d8      	adds	r1, #216	@ 0xd8
1004baea:	2b00      	cmp	r3, #0
1004baec:	d102      	bne.n	1004baf4 <BLE_STACK_RadioHandler+0x38>
1004baee:	6010      	str	r0, [r2, #0]
1004baf0:	2001      	movs	r0, #1
1004baf2:	e000      	b.n	1004baf6 <BLE_STACK_RadioHandler+0x3a>
1004baf4:	2000      	movs	r0, #0
1004baf6:	7008      	strb	r0, [r1, #0]
1004baf8:	4840      	ldr	r0, [pc, #256]	@ (1004bbfc <__arm_cp.1_2>)
1004bafa:	6800      	ldr	r0, [r0, #0]
1004bafc:	7b44      	ldrb	r4, [r0, #13]
1004bafe:	2100      	movs	r1, #0
1004bb00:	2cff      	cmp	r4, #255	@ 0xff
1004bb02:	d00a      	beq.n	1004bb1a <BLE_STACK_RadioHandler+0x5e>
1004bb04:	202c      	movs	r0, #44	@ 0x2c
1004bb06:	4360      	muls	r0, r4
1004bb08:	4a3d      	ldr	r2, [pc, #244]	@ (1004bc00 <__arm_cp.1_3>)
1004bb0a:	6812      	ldr	r2, [r2, #0]
1004bb0c:	1810      	adds	r0, r2, r0
1004bb0e:	7c82      	ldrb	r2, [r0, #18]
1004bb10:	2a00      	cmp	r2, #0
1004bb12:	d002      	beq.n	1004bb1a <BLE_STACK_RadioHandler+0x5e>
1004bb14:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1004bb16:	68c0      	ldr	r0, [r0, #12]
1004bb18:	e7ff      	b.n	1004bb1a <BLE_STACK_RadioHandler+0x5e>
1004bb1a:	2701      	movs	r7, #1
1004bb1c:	2e00      	cmp	r6, #0
1004bb1e:	d003      	beq.n	1004bb28 <BLE_STACK_RadioHandler+0x6c>
1004bb20:	2d00      	cmp	r5, #0
1004bb22:	d101      	bne.n	1004bb28 <BLE_STACK_RadioHandler+0x6c>
1004bb24:	2900      	cmp	r1, #0
1004bb26:	e011      	b.n	1004bb4c <BLE_STACK_RadioHandler+0x90>
1004bb28:	2d00      	cmp	r5, #0
1004bb2a:	d015      	beq.n	1004bb58 <BLE_STACK_RadioHandler+0x9c>
1004bb2c:	4a35      	ldr	r2, [pc, #212]	@ (1004bc04 <__arm_cp.1_4>)
1004bb2e:	1a8b      	subs	r3, r1, r2
1004bb30:	425a      	negs	r2, r3
1004bb32:	415a      	adcs	r2, r3
1004bb34:	4b34      	ldr	r3, [pc, #208]	@ (1004bc08 <__arm_cp.1_5>)
1004bb36:	1acd      	subs	r5, r1, r3
1004bb38:	426b      	negs	r3, r5
1004bb3a:	416b      	adcs	r3, r5
1004bb3c:	4d33      	ldr	r5, [pc, #204]	@ (1004bc0c <__arm_cp.1_6>)
1004bb3e:	1b4e      	subs	r6, r1, r5
1004bb40:	4275      	negs	r5, r6
1004bb42:	4175      	adcs	r5, r6
1004bb44:	2900      	cmp	r1, #0
1004bb46:	d007      	beq.n	1004bb58 <BLE_STACK_RadioHandler+0x9c>
1004bb48:	4313      	orrs	r3, r2
1004bb4a:	431d      	orrs	r5, r3
1004bb4c:	4e2a      	ldr	r6, [pc, #168]	@ (1004bbf8 <__arm_cp.1_1>)
1004bb4e:	4d29      	ldr	r5, [pc, #164]	@ (1004bbf4 <__arm_cp.1_0>)
1004bb50:	d004      	beq.n	1004bb5c <BLE_STACK_RadioHandler+0xa0>
1004bb52:	4788      	blx	r1
1004bb54:	2700      	movs	r7, #0
1004bb56:	e001      	b.n	1004bb5c <BLE_STACK_RadioHandler+0xa0>
1004bb58:	4e27      	ldr	r6, [pc, #156]	@ (1004bbf8 <__arm_cp.1_1>)
1004bb5a:	4d26      	ldr	r5, [pc, #152]	@ (1004bbf4 <__arm_cp.1_0>)
1004bb5c:	6828      	ldr	r0, [r5, #0]
1004bb5e:	f7f6 fc24 	bl	100423aa <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1004bb62:	2800      	cmp	r0, #0
1004bb64:	d001      	beq.n	1004bb6a <BLE_STACK_RadioHandler+0xae>
1004bb66:	2504      	movs	r5, #4
1004bb68:	e020      	b.n	1004bbac <BLE_STACK_RadioHandler+0xf0>
1004bb6a:	6828      	ldr	r0, [r5, #0]
1004bb6c:	f7f6 fbfc 	bl	10042368 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1004bb70:	2800      	cmp	r0, #0
1004bb72:	d001      	beq.n	1004bb78 <BLE_STACK_RadioHandler+0xbc>
1004bb74:	2501      	movs	r5, #1
1004bb76:	e019      	b.n	1004bbac <BLE_STACK_RadioHandler+0xf0>
1004bb78:	6828      	ldr	r0, [r5, #0]
1004bb7a:	f7f6 fc01 	bl	10042380 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1004bb7e:	2800      	cmp	r0, #0
1004bb80:	d001      	beq.n	1004bb86 <BLE_STACK_RadioHandler+0xca>
1004bb82:	2502      	movs	r5, #2
1004bb84:	e012      	b.n	1004bbac <BLE_STACK_RadioHandler+0xf0>
1004bb86:	6828      	ldr	r0, [r5, #0]
1004bb88:	f7f6 fc27 	bl	100423da <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1004bb8c:	4629      	mov	r1, r5
1004bb8e:	2505      	movs	r5, #5
1004bb90:	2800      	cmp	r0, #0
1004bb92:	d10b      	bne.n	1004bbac <BLE_STACK_RadioHandler+0xf0>
1004bb94:	6808      	ldr	r0, [r1, #0]
1004bb96:	f7f6 fc2c 	bl	100423f2 <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1004bb9a:	2800      	cmp	r0, #0
1004bb9c:	d106      	bne.n	1004bbac <BLE_STACK_RadioHandler+0xf0>
1004bb9e:	4815      	ldr	r0, [pc, #84]	@ (1004bbf4 <__arm_cp.1_0>)
1004bba0:	6800      	ldr	r0, [r0, #0]
1004bba2:	f7f6 fbd3 	bl	1004234c <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1004bba6:	2800      	cmp	r0, #0
1004bba8:	d020      	beq.n	1004bbec <BLE_STACK_RadioHandler+0x130>
1004bbaa:	2500      	movs	r5, #0
1004bbac:	2001      	movs	r0, #1
1004bbae:	40a8      	lsls	r0, r5
1004bbb0:	4917      	ldr	r1, [pc, #92]	@ (1004bc10 <__arm_cp.1_7>)
1004bbb2:	6809      	ldr	r1, [r1, #0]
1004bbb4:	680a      	ldr	r2, [r1, #0]
1004bbb6:	4302      	orrs	r2, r0
1004bbb8:	600a      	str	r2, [r1, #0]
1004bbba:	2000      	movs	r0, #0
1004bbbc:	f000 ffb6 	bl	1004cb2c <tsk_notify_idx>
1004bbc0:	f7f5 fcc5 	bl	1004154e <BLE_STACK_ProcessRequest>
1004bbc4:	f7f5 ff5e 	bl	10041a84 <BLEPLAT_ClearRadioTimerValue>
1004bbc8:	4620      	mov	r0, r4
1004bbca:	f000 fa4f 	bl	1004c06c <LL_sched_engine>
1004bbce:	6834      	ldr	r4, [r6, #0]
1004bbd0:	7d60      	ldrb	r0, [r4, #21]
1004bbd2:	2801      	cmp	r0, #1
1004bbd4:	d108      	bne.n	1004bbe8 <BLE_STACK_RadioHandler+0x12c>
1004bbd6:	7c21      	ldrb	r1, [r4, #16]
1004bbd8:	200f      	movs	r0, #15
1004bbda:	4008      	ands	r0, r1
1004bbdc:	68e2      	ldr	r2, [r4, #12]
1004bbde:	0909      	lsrs	r1, r1, #4
1004bbe0:	f7ff ff6b 	bl	1004baba <BLE_STACK_EndOfRadioActivityCb>
1004bbe4:	2000      	movs	r0, #0
1004bbe6:	7560      	strb	r0, [r4, #21]
1004bbe8:	b003      	add	sp, #12
1004bbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004bbec:	2f00      	cmp	r7, #0
1004bbee:	d1e9      	bne.n	1004bbc4 <BLE_STACK_RadioHandler+0x108>
1004bbf0:	e7ed      	b.n	1004bbce <BLE_STACK_RadioHandler+0x112>
1004bbf2:	46c0      	nop			@ (mov r8, r8)

1004bbf4 <__arm_cp.1_0>:
1004bbf4:	20000654 	.word	0x20000654

1004bbf8 <__arm_cp.1_1>:
1004bbf8:	20000658 	.word	0x20000658

1004bbfc <__arm_cp.1_2>:
1004bbfc:	2000065c 	.word	0x2000065c

1004bc00 <__arm_cp.1_3>:
1004bc00:	20000660 	.word	0x20000660

1004bc04 <__arm_cp.1_4>:
1004bc04:	1004d2dd 	.word	0x1004d2dd

1004bc08 <__arm_cp.1_5>:
1004bc08:	1004d289 	.word	0x1004d289

1004bc0c <__arm_cp.1_6>:
1004bc0c:	1004d2e1 	.word	0x1004d2e1

1004bc10 <__arm_cp.1_7>:
1004bc10:	2000064c 	.word	0x2000064c

1004bc14 <LL_init_ucfg_weak>:
1004bc14:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bc16:	b091      	sub	sp, #68	@ 0x44
1004bc18:	9306      	str	r3, [sp, #24]
1004bc1a:	4614      	mov	r4, r2
1004bc1c:	910d      	str	r1, [sp, #52]	@ 0x34
1004bc1e:	900b      	str	r0, [sp, #44]	@ 0x2c
1004bc20:	48b8      	ldr	r0, [pc, #736]	@ (1004bf04 <__arm_cp.6_0>)
1004bc22:	7ac1      	ldrb	r1, [r0, #11]
1004bc24:	910c      	str	r1, [sp, #48]	@ 0x30
1004bc26:	7f01      	ldrb	r1, [r0, #28]
1004bc28:	9109      	str	r1, [sp, #36]	@ 0x24
1004bc2a:	7ec1      	ldrb	r1, [r0, #27]
1004bc2c:	910a      	str	r1, [sp, #40]	@ 0x28
1004bc2e:	7e81      	ldrb	r1, [r0, #26]
1004bc30:	9108      	str	r1, [sp, #32]
1004bc32:	7fc7      	ldrb	r7, [r0, #31]
1004bc34:	2501      	movs	r5, #1
1004bc36:	21e8      	movs	r1, #232	@ 0xe8
1004bc38:	4628      	mov	r0, r5
1004bc3a:	f000 fc73 	bl	1004c524 <csmem_mem_0_assign>
1004bc3e:	4eb2      	ldr	r6, [pc, #712]	@ (1004bf08 <__arm_cp.6_1>)
1004bc40:	6030      	str	r0, [r6, #0]
1004bc42:	2158      	movs	r1, #88	@ 0x58
1004bc44:	4628      	mov	r0, r5
1004bc46:	f000 fc6d 	bl	1004c524 <csmem_mem_0_assign>
1004bc4a:	6831      	ldr	r1, [r6, #0]
1004bc4c:	229c      	movs	r2, #156	@ 0x9c
1004bc4e:	9207      	str	r2, [sp, #28]
1004bc50:	5088      	str	r0, [r1, r2]
1004bc52:	4638      	mov	r0, r7
1004bc54:	f001 fab6 	bl	1004d1c4 <llc_wl_mem_allocate>
1004bc58:	2107      	movs	r1, #7
1004bc5a:	4039      	ands	r1, r7
1004bc5c:	9806      	ldr	r0, [sp, #24]
1004bc5e:	f001 fac3 	bl	1004d1e8 <llc_priv_mem_allocate>
1004bc62:	981c      	ldr	r0, [sp, #112]	@ 0x70
1004bc64:	9000      	str	r0, [sp, #0]
1004bc66:	ab19      	add	r3, sp, #100	@ 0x64
1004bc68:	cb0e      	ldmia	r3, {r1, r2, r3}
1004bc6a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004bc6c:	9106      	str	r1, [sp, #24]
1004bc6e:	930d      	str	r3, [sp, #52]	@ 0x34
1004bc70:	f7fe fce0 	bl	1004a634 <llc_conn_mem_allocate>
1004bc74:	2c01      	cmp	r4, #1
1004bc76:	d000      	beq.n	1004bc7a <LL_init_ucfg_weak+0x66>
1004bc78:	9508      	str	r5, [sp, #32]
1004bc7a:	2000      	movs	r0, #0
1004bc7c:	2c01      	cmp	r4, #1
1004bc7e:	d000      	beq.n	1004bc82 <LL_init_ucfg_weak+0x6e>
1004bc80:	900a      	str	r0, [sp, #40]	@ 0x28
1004bc82:	2c01      	cmp	r4, #1
1004bc84:	4fa0      	ldr	r7, [pc, #640]	@ (1004bf08 <__arm_cp.6_1>)
1004bc86:	d000      	beq.n	1004bc8a <LL_init_ucfg_weak+0x76>
1004bc88:	9009      	str	r0, [sp, #36]	@ 0x24
1004bc8a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
1004bc8c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004bc8e:	2801      	cmp	r0, #1
1004bc90:	9205      	str	r2, [sp, #20]
1004bc92:	d118      	bne.n	1004bcc6 <LL_init_ucfg_weak+0xb2>
1004bc94:	2029      	movs	r0, #41	@ 0x29
1004bc96:	499b      	ldr	r1, [pc, #620]	@ (1004bf04 <__arm_cp.6_0>)
1004bc98:	5c08      	ldrb	r0, [r1, r0]
1004bc9a:	1e41      	subs	r1, r0, #1
1004bc9c:	4188      	sbcs	r0, r1
1004bc9e:	4310      	orrs	r0, r2
1004bca0:	d001      	beq.n	1004bca6 <LL_init_ucfg_weak+0x92>
1004bca2:	2530      	movs	r5, #48	@ 0x30
1004bca4:	e000      	b.n	1004bca8 <LL_init_ucfg_weak+0x94>
1004bca6:	2520      	movs	r5, #32
1004bca8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1004bcaa:	4630      	mov	r0, r6
1004bcac:	4629      	mov	r1, r5
1004bcae:	f000 fc39 	bl	1004c524 <csmem_mem_0_assign>
1004bcb2:	6839      	ldr	r1, [r7, #0]
1004bcb4:	2294      	movs	r2, #148	@ 0x94
1004bcb6:	5088      	str	r0, [r1, r2]
1004bcb8:	4630      	mov	r0, r6
1004bcba:	4629      	mov	r1, r5
1004bcbc:	f000 fc32 	bl	1004c524 <csmem_mem_0_assign>
1004bcc0:	6839      	ldr	r1, [r7, #0]
1004bcc2:	2298      	movs	r2, #152	@ 0x98
1004bcc4:	5088      	str	r0, [r1, r2]
1004bcc6:	262c      	movs	r6, #44	@ 0x2c
1004bcc8:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004bcca:	4631      	mov	r1, r6
1004bccc:	f000 fc2a 	bl	1004c524 <csmem_mem_0_assign>
1004bcd0:	6839      	ldr	r1, [r7, #0]
1004bcd2:	22a4      	movs	r2, #164	@ 0xa4
1004bcd4:	5088      	str	r0, [r1, r2]
1004bcd6:	2041      	movs	r0, #65	@ 0x41
1004bcd8:	0082      	lsls	r2, r0, #2
1004bcda:	2c01      	cmp	r4, #1
1004bcdc:	9402      	str	r4, [sp, #8]
1004bcde:	d10a      	bne.n	1004bcf6 <LL_init_ucfg_weak+0xe2>
1004bce0:	4611      	mov	r1, r2
1004bce2:	3120      	adds	r1, #32
1004bce4:	2001      	movs	r0, #1
1004bce6:	4614      	mov	r4, r2
1004bce8:	f000 fc1c 	bl	1004c524 <csmem_mem_0_assign>
1004bcec:	6839      	ldr	r1, [r7, #0]
1004bcee:	228c      	movs	r2, #140	@ 0x8c
1004bcf0:	5088      	str	r0, [r1, r2]
1004bcf2:	4621      	mov	r1, r4
1004bcf4:	e038      	b.n	1004bd68 <LL_init_ucfg_weak+0x154>
1004bcf6:	2125      	movs	r1, #37	@ 0x25
1004bcf8:	4882      	ldr	r0, [pc, #520]	@ (1004bf04 <__arm_cp.6_0>)
1004bcfa:	910c      	str	r1, [sp, #48]	@ 0x30
1004bcfc:	5c41      	ldrb	r1, [r0, r1]
1004bcfe:	4610      	mov	r0, r2
1004bd00:	3020      	adds	r0, #32
1004bd02:	2900      	cmp	r1, #0
1004bd04:	9201      	str	r2, [sp, #4]
1004bd06:	d001      	beq.n	1004bd0c <LL_init_ucfg_weak+0xf8>
1004bd08:	4601      	mov	r1, r0
1004bd0a:	e000      	b.n	1004bd0e <LL_init_ucfg_weak+0xfa>
1004bd0c:	2144      	movs	r1, #68	@ 0x44
1004bd0e:	2726      	movs	r7, #38	@ 0x26
1004bd10:	4a7c      	ldr	r2, [pc, #496]	@ (1004bf04 <__arm_cp.6_0>)
1004bd12:	5dd2      	ldrb	r2, [r2, r7]
1004bd14:	2a00      	cmp	r2, #0
1004bd16:	d000      	beq.n	1004bd1a <LL_init_ucfg_weak+0x106>
1004bd18:	4601      	mov	r1, r0
1004bd1a:	2529      	movs	r5, #41	@ 0x29
1004bd1c:	4a79      	ldr	r2, [pc, #484]	@ (1004bf04 <__arm_cp.6_0>)
1004bd1e:	5d52      	ldrb	r2, [r2, r5]
1004bd20:	2a00      	cmp	r2, #0
1004bd22:	d000      	beq.n	1004bd26 <LL_init_ucfg_weak+0x112>
1004bd24:	4601      	mov	r1, r0
1004bd26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004bd28:	2a01      	cmp	r2, #1
1004bd2a:	d100      	bne.n	1004bd2e <LL_init_ucfg_weak+0x11a>
1004bd2c:	4601      	mov	r1, r0
1004bd2e:	2001      	movs	r0, #1
1004bd30:	f000 fbf8 	bl	1004c524 <csmem_mem_0_assign>
1004bd34:	4974      	ldr	r1, [pc, #464]	@ (1004bf08 <__arm_cp.6_1>)
1004bd36:	6809      	ldr	r1, [r1, #0]
1004bd38:	228c      	movs	r2, #140	@ 0x8c
1004bd3a:	5088      	str	r0, [r1, r2]
1004bd3c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004bd3e:	2801      	cmp	r0, #1
1004bd40:	9c01      	ldr	r4, [sp, #4]
1004bd42:	4621      	mov	r1, r4
1004bd44:	d010      	beq.n	1004bd68 <LL_init_ucfg_weak+0x154>
1004bd46:	486f      	ldr	r0, [pc, #444]	@ (1004bf04 <__arm_cp.6_0>)
1004bd48:	5d40      	ldrb	r0, [r0, r5]
1004bd4a:	2800      	cmp	r0, #0
1004bd4c:	4621      	mov	r1, r4
1004bd4e:	d10b      	bne.n	1004bd68 <LL_init_ucfg_weak+0x154>
1004bd50:	486c      	ldr	r0, [pc, #432]	@ (1004bf04 <__arm_cp.6_0>)
1004bd52:	5dc0      	ldrb	r0, [r0, r7]
1004bd54:	2800      	cmp	r0, #0
1004bd56:	4621      	mov	r1, r4
1004bd58:	d106      	bne.n	1004bd68 <LL_init_ucfg_weak+0x154>
1004bd5a:	486a      	ldr	r0, [pc, #424]	@ (1004bf04 <__arm_cp.6_0>)
1004bd5c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004bd5e:	5c40      	ldrb	r0, [r0, r1]
1004bd60:	2800      	cmp	r0, #0
1004bd62:	d000      	beq.n	1004bd66 <LL_init_ucfg_weak+0x152>
1004bd64:	4626      	mov	r6, r4
1004bd66:	4631      	mov	r1, r6
1004bd68:	9818      	ldr	r0, [sp, #96]	@ 0x60
1004bd6a:	900b      	str	r0, [sp, #44]	@ 0x2c
1004bd6c:	9816      	ldr	r0, [sp, #88]	@ 0x58
1004bd6e:	9003      	str	r0, [sp, #12]
1004bd70:	2601      	movs	r6, #1
1004bd72:	4d66      	ldr	r5, [pc, #408]	@ (1004bf0c <__arm_cp.6_2>)
1004bd74:	4630      	mov	r0, r6
1004bd76:	47a8      	blx	r5
1004bd78:	4f63      	ldr	r7, [pc, #396]	@ (1004bf08 <__arm_cp.6_1>)
1004bd7a:	6839      	ldr	r1, [r7, #0]
1004bd7c:	2290      	movs	r2, #144	@ 0x90
1004bd7e:	5088      	str	r0, [r1, r2]
1004bd80:	2110      	movs	r1, #16
1004bd82:	4630      	mov	r0, r6
1004bd84:	47a8      	blx	r5
1004bd86:	6839      	ldr	r1, [r7, #0]
1004bd88:	22a0      	movs	r2, #160	@ 0xa0
1004bd8a:	9204      	str	r2, [sp, #16]
1004bd8c:	5088      	str	r0, [r1, r2]
1004bd8e:	2104      	movs	r1, #4
1004bd90:	4630      	mov	r0, r6
1004bd92:	47a8      	blx	r5
1004bd94:	6839      	ldr	r1, [r7, #0]
1004bd96:	22a8      	movs	r2, #168	@ 0xa8
1004bd98:	5088      	str	r0, [r1, r2]
1004bd9a:	2134      	movs	r1, #52	@ 0x34
1004bd9c:	960c      	str	r6, [sp, #48]	@ 0x30
1004bd9e:	4630      	mov	r0, r6
1004bda0:	47a8      	blx	r5
1004bda2:	6839      	ldr	r1, [r7, #0]
1004bda4:	22ac      	movs	r2, #172	@ 0xac
1004bda6:	5088      	str	r0, [r1, r2]
1004bda8:	9808      	ldr	r0, [sp, #32]
1004bdaa:	b2c7      	uxtb	r7, r0
1004bdac:	1f21      	subs	r1, r4, #4
1004bdae:	4638      	mov	r0, r7
1004bdb0:	47a8      	blx	r5
1004bdb2:	4605      	mov	r5, r0
1004bdb4:	9c02      	ldr	r4, [sp, #8]
1004bdb6:	2c01      	cmp	r4, #1
1004bdb8:	d105      	bne.n	1004bdc6 <LL_init_ucfg_weak+0x1b2>
1004bdba:	215c      	movs	r1, #92	@ 0x5c
1004bdbc:	4638      	mov	r0, r7
1004bdbe:	f000 fbb1 	bl	1004c524 <csmem_mem_0_assign>
1004bdc2:	4602      	mov	r2, r0
1004bdc4:	e000      	b.n	1004bdc8 <LL_init_ucfg_weak+0x1b4>
1004bdc6:	2200      	movs	r2, #0
1004bdc8:	4638      	mov	r0, r7
1004bdca:	4629      	mov	r1, r5
1004bdcc:	f7fe ff7a 	bl	1004acc4 <EADV_init>
1004bdd0:	ab10      	add	r3, sp, #64	@ 0x40
1004bdd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004bdd4:	70d8      	strb	r0, [r3, #3]
1004bdd6:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004bdd8:	7098      	strb	r0, [r3, #2]
1004bdda:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1004bddc:	705e      	strb	r6, [r3, #1]
1004bdde:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004bde0:	7018      	strb	r0, [r3, #0]
1004bde2:	4620      	mov	r0, r4
1004bde4:	9d05      	ldr	r5, [sp, #20]
1004bde6:	4629      	mov	r1, r5
1004bde8:	463a      	mov	r2, r7
1004bdea:	f001 f9fb 	bl	1004d1e4 <llc_padv_mem_allocate_ucfg_weak>
1004bdee:	9f03      	ldr	r7, [sp, #12]
1004bdf0:	4638      	mov	r0, r7
1004bdf2:	4621      	mov	r1, r4
1004bdf4:	f7fe fe2d 	bl	1004aa52 <llc_scan_mem_allocate_ucfg_weak>
1004bdf8:	4638      	mov	r0, r7
1004bdfa:	4621      	mov	r1, r4
1004bdfc:	462a      	mov	r2, r5
1004bdfe:	f001 fa54 	bl	1004d2aa <llc_pscan_mem_allocate_ucfg_weak>
1004be02:	4638      	mov	r0, r7
1004be04:	4621      	mov	r1, r4
1004be06:	462a      	mov	r2, r5
1004be08:	4633      	mov	r3, r6
1004be0a:	f7fe fe35 	bl	1004aa78 <llc_past_mem_allocate_ucfg_weak>
1004be0e:	9600      	str	r6, [sp, #0]
1004be10:	463e      	mov	r6, r7
1004be12:	4638      	mov	r0, r7
1004be14:	4621      	mov	r1, r4
1004be16:	462a      	mov	r2, r5
1004be18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004be1a:	f001 fa47 	bl	1004d2ac <llc_pscan_wr_mem_allocate_ucfg_weak>
1004be1e:	f7fe fe00 	bl	1004aa22 <llc_iso_cmn_mem_alloc_ucfg_weak>
1004be22:	2c01      	cmp	r4, #1
1004be24:	d107      	bne.n	1004be36 <LL_init_ucfg_weak+0x222>
1004be26:	2d01      	cmp	r5, #1
1004be28:	d105      	bne.n	1004be36 <LL_init_ucfg_weak+0x222>
1004be2a:	f001 f970 	bl	1004d10e <llc_big_brc_mem_alloc_ucfg_weak>
1004be2e:	2e01      	cmp	r6, #1
1004be30:	d101      	bne.n	1004be36 <LL_init_ucfg_weak+0x222>
1004be32:	f001 f96d 	bl	1004d110 <llc_big_sync_mem_alloc_ucfg_weak>
1004be36:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004be38:	2801      	cmp	r0, #1
1004be3a:	4f33      	ldr	r7, [pc, #204]	@ (1004bf08 <__arm_cp.6_1>)
1004be3c:	d101      	bne.n	1004be42 <LL_init_ucfg_weak+0x22e>
1004be3e:	f001 f968 	bl	1004d112 <llc_cig_cmn_mem_alloc_ucfg_weak>
1004be42:	f7fe fde7 	bl	1004aa14 <llc_isoal_mem_alloc_ucfg_weak>
1004be46:	9806      	ldr	r0, [sp, #24]
1004be48:	4631      	mov	r1, r6
1004be4a:	4622      	mov	r2, r4
1004be4c:	462b      	mov	r3, r5
1004be4e:	f7fe fe20 	bl	1004aa92 <llc_cte_mem_allocate_ucfg_weak>
1004be52:	4e2c      	ldr	r6, [pc, #176]	@ (1004bf04 <__arm_cp.6_0>)
1004be54:	7af0      	ldrb	r0, [r6, #11]
1004be56:	1c41      	adds	r1, r0, #1
1004be58:	4d2d      	ldr	r5, [pc, #180]	@ (1004bf10 <__arm_cp.6_3>)
1004be5a:	4628      	mov	r0, r5
1004be5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004be5e:	f000 fb4f 	bl	1004c500 <csmem_mem_assign>
1004be62:	6839      	ldr	r1, [r7, #0]
1004be64:	22d0      	movs	r2, #208	@ 0xd0
1004be66:	5088      	str	r0, [r1, r2]
1004be68:	7af1      	ldrb	r1, [r6, #11]
1004be6a:	2202      	movs	r2, #2
1004be6c:	4628      	mov	r0, r5
1004be6e:	f000 fb47 	bl	1004c500 <csmem_mem_assign>
1004be72:	6839      	ldr	r1, [r7, #0]
1004be74:	460a      	mov	r2, r1
1004be76:	32a0      	adds	r2, #160	@ 0xa0
1004be78:	6350      	str	r0, [r2, #52]	@ 0x34
1004be7a:	9804      	ldr	r0, [sp, #16]
1004be7c:	5808      	ldr	r0, [r1, r0]
1004be7e:	6078      	str	r0, [r7, #4]
1004be80:	6850      	ldr	r0, [r2, #4]
1004be82:	60b8      	str	r0, [r7, #8]
1004be84:	4620      	mov	r0, r4
1004be86:	f7fe fde3 	bl	1004aa50 <llc_scan_init_ucfg_weak>
1004be8a:	f001 fa0d 	bl	1004d2a8 <llc_pscan_init_ucfg_weak>
1004be8e:	f000 f863 	bl	1004bf58 <LL_sched_init>
1004be92:	f7fe fe03 	bl	1004aa9c <LL_dtm_init>
1004be96:	f001 f9a6 	bl	1004d1e6 <llc_padv_init_ucfg_weak>
1004be9a:	f7fe fdf9 	bl	1004aa90 <llc_cte_init_ucfg_weak>
1004be9e:	f7fe fb27 	bl	1004a4f0 <HCI_Init>
1004bea2:	f7f5 fd97 	bl	100419d4 <BLEPLAT_GetDefaultPALevel>
1004bea6:	6839      	ldr	r1, [r7, #0]
1004bea8:	2400      	movs	r4, #0
1004beaa:	728c      	strb	r4, [r1, #10]
1004beac:	7248      	strb	r0, [r1, #9]
1004beae:	4620      	mov	r0, r4
1004beb0:	f7f5 fd98 	bl	100419e4 <BLEPLAT_SetHighPower>
1004beb4:	f7fd fb2c 	bl	10049510 <ble_HAL_Init>
1004beb8:	6838      	ldr	r0, [r7, #0]
1004beba:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1004bebc:	f7fe fddd 	bl	1004aa7a <LLC_pcl_hal_cntxt_init_ucfg_weak>
1004bec0:	6838      	ldr	r0, [r7, #0]
1004bec2:	9d07      	ldr	r5, [sp, #28]
1004bec4:	5940      	ldr	r0, [r0, r5]
1004bec6:	300c      	adds	r0, #12
1004bec8:	f000 ffd0 	bl	1004ce6c <addr8_list_clear>
1004becc:	463e      	mov	r6, r7
1004bece:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
1004bed0:	4638      	mov	r0, r7
1004bed2:	f7fe fdac 	bl	1004aa2e <llc_priv_init_ucfg_weak>
1004bed6:	6830      	ldr	r0, [r6, #0]
1004bed8:	5941      	ldr	r1, [r0, r5]
1004beda:	2240      	movs	r2, #64	@ 0x40
1004bedc:	548c      	strb	r4, [r1, r2]
1004bede:	4a09      	ldr	r2, [pc, #36]	@ (1004bf04 <__arm_cp.6_0>)
1004bee0:	8b12      	ldrh	r2, [r2, #24]
1004bee2:	8302      	strh	r2, [r0, #24]
1004bee4:	201f      	movs	r0, #31
1004bee6:	900f      	str	r0, [sp, #60]	@ 0x3c
1004bee8:	43e0      	mvns	r0, r4
1004beea:	900e      	str	r0, [sp, #56]	@ 0x38
1004beec:	3148      	adds	r1, #72	@ 0x48
1004beee:	a80e      	add	r0, sp, #56	@ 0x38
1004bef0:	2205      	movs	r2, #5
1004bef2:	f000 ff69 	bl	1004cdc8 <char_copy>
1004bef6:	6830      	ldr	r0, [r6, #0]
1004bef8:	5940      	ldr	r0, [r0, r5]
1004befa:	02f9      	lsls	r1, r7, #11
1004befc:	2254      	movs	r2, #84	@ 0x54
1004befe:	5281      	strh	r1, [r0, r2]
1004bf00:	b011      	add	sp, #68	@ 0x44
1004bf02:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004bf04 <__arm_cp.6_0>:
1004bf04:	20000668 	.word	0x20000668

1004bf08 <__arm_cp.6_1>:
1004bf08:	20000658 	.word	0x20000658

1004bf0c <__arm_cp.6_2>:
1004bf0c:	1004c525 	.word	0x1004c525

1004bf10 <__arm_cp.6_3>:
1004bf10:	20000664 	.word	0x20000664

1004bf14 <LL_get_tx_common_buffer_p>:
1004bf14:	4802      	ldr	r0, [pc, #8]	@ (1004bf20 <__arm_cp.11_0>)
1004bf16:	6800      	ldr	r0, [r0, #0]
1004bf18:	218c      	movs	r1, #140	@ 0x8c
1004bf1a:	5840      	ldr	r0, [r0, r1]
1004bf1c:	4770      	bx	lr
1004bf1e:	46c0      	nop			@ (mov r8, r8)

1004bf20 <__arm_cp.11_0>:
1004bf20:	20000658 	.word	0x20000658

1004bf24 <LL_get_rx_common_buffer_p>:
1004bf24:	4802      	ldr	r0, [pc, #8]	@ (1004bf30 <__arm_cp.12_0>)
1004bf26:	6800      	ldr	r0, [r0, #0]
1004bf28:	2190      	movs	r1, #144	@ 0x90
1004bf2a:	5840      	ldr	r0, [r0, r1]
1004bf2c:	4770      	bx	lr
1004bf2e:	46c0      	nop			@ (mov r8, r8)

1004bf30 <__arm_cp.12_0>:
1004bf30:	20000658 	.word	0x20000658

1004bf34 <llc_get_linkms_cntxt_p>:
1004bf34:	4802      	ldr	r0, [pc, #8]	@ (1004bf40 <__arm_cp.15_0>)
1004bf36:	6800      	ldr	r0, [r0, #0]
1004bf38:	219c      	movs	r1, #156	@ 0x9c
1004bf3a:	5840      	ldr	r0, [r0, r1]
1004bf3c:	4770      	bx	lr
1004bf3e:	46c0      	nop			@ (mov r8, r8)

1004bf40 <__arm_cp.15_0>:
1004bf40:	20000658 	.word	0x20000658

1004bf44 <LL_sched_time_t1_ge_t2>:
1004bf44:	43c0      	mvns	r0, r0
1004bf46:	1840      	adds	r0, r0, r1
1004bf48:	0fc0      	lsrs	r0, r0, #31
1004bf4a:	4770      	bx	lr

1004bf4c <LL_sched_engine_return_actual_scheduler_margin>:
1004bf4c:	4801      	ldr	r0, [pc, #4]	@ (1004bf54 <__arm_cp.2_0>)
1004bf4e:	6800      	ldr	r0, [r0, #0]
1004bf50:	6880      	ldr	r0, [r0, #8]
1004bf52:	4770      	bx	lr

1004bf54 <__arm_cp.2_0>:
1004bf54:	2000065c 	.word	0x2000065c

1004bf58 <LL_sched_init>:
1004bf58:	4809      	ldr	r0, [pc, #36]	@ (1004bf80 <__arm_cp.4_0>)
1004bf5a:	7ac0      	ldrb	r0, [r0, #11]
1004bf5c:	4909      	ldr	r1, [pc, #36]	@ (1004bf84 <__arm_cp.4_1>)
1004bf5e:	6809      	ldr	r1, [r1, #0]
1004bf60:	3112      	adds	r1, #18
1004bf62:	2800      	cmp	r0, #0
1004bf64:	d004      	beq.n	1004bf70 <LL_sched_init+0x18>
1004bf66:	2200      	movs	r2, #0
1004bf68:	800a      	strh	r2, [r1, #0]
1004bf6a:	312c      	adds	r1, #44	@ 0x2c
1004bf6c:	1e40      	subs	r0, r0, #1
1004bf6e:	e7f8      	b.n	1004bf62 <LL_sched_init+0xa>
1004bf70:	4805      	ldr	r0, [pc, #20]	@ (1004bf88 <__arm_cp.4_2>)
1004bf72:	6800      	ldr	r0, [r0, #0]
1004bf74:	2100      	movs	r1, #0
1004bf76:	73c1      	strb	r1, [r0, #15]
1004bf78:	21ff      	movs	r1, #255	@ 0xff
1004bf7a:	0209      	lsls	r1, r1, #8
1004bf7c:	8181      	strh	r1, [r0, #12]
1004bf7e:	4770      	bx	lr

1004bf80 <__arm_cp.4_0>:
1004bf80:	20000668 	.word	0x20000668

1004bf84 <__arm_cp.4_1>:
1004bf84:	20000660 	.word	0x20000660

1004bf88 <__arm_cp.4_2>:
1004bf88:	2000065c 	.word	0x2000065c

1004bf8c <LL_sched_set_anchor>:
1004bf8c:	222c      	movs	r2, #44	@ 0x2c
1004bf8e:	4342      	muls	r2, r0
1004bf90:	4801      	ldr	r0, [pc, #4]	@ (1004bf98 <__arm_cp.5_0>)
1004bf92:	6800      	ldr	r0, [r0, #0]
1004bf94:	5081      	str	r1, [r0, r2]
1004bf96:	4770      	bx	lr

1004bf98 <__arm_cp.5_0>:
1004bf98:	20000660 	.word	0x20000660

1004bf9c <LL_sched_set_cancel_request>:
1004bf9c:	28ff      	cmp	r0, #255	@ 0xff
1004bf9e:	d00b      	beq.n	1004bfb8 <LL_sched_set_cancel_request+0x1c>
1004bfa0:	212c      	movs	r1, #44	@ 0x2c
1004bfa2:	4341      	muls	r1, r0
1004bfa4:	4805      	ldr	r0, [pc, #20]	@ (1004bfbc <__arm_cp.9_0>)
1004bfa6:	6800      	ldr	r0, [r0, #0]
1004bfa8:	1840      	adds	r0, r0, r1
1004bfaa:	7c81      	ldrb	r1, [r0, #18]
1004bfac:	2908      	cmp	r1, #8
1004bfae:	d001      	beq.n	1004bfb4 <LL_sched_set_cancel_request+0x18>
1004bfb0:	2110      	movs	r1, #16
1004bfb2:	e000      	b.n	1004bfb6 <LL_sched_set_cancel_request+0x1a>
1004bfb4:	2120      	movs	r1, #32
1004bfb6:	7481      	strb	r1, [r0, #18]
1004bfb8:	4770      	bx	lr
1004bfba:	46c0      	nop			@ (mov r8, r8)

1004bfbc <__arm_cp.9_0>:
1004bfbc:	20000660 	.word	0x20000660

1004bfc0 <LL_sched_enable_taskslot>:
1004bfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bfc2:	b088      	sub	sp, #32
1004bfc4:	9307      	str	r3, [sp, #28]
1004bfc6:	272c      	movs	r7, #44	@ 0x2c
1004bfc8:	4347      	muls	r7, r0
1004bfca:	481a      	ldr	r0, [pc, #104]	@ (1004c034 <__arm_cp.10_0>)
1004bfcc:	6806      	ldr	r6, [r0, #0]
1004bfce:	19f0      	adds	r0, r6, r7
1004bfd0:	7c84      	ldrb	r4, [r0, #18]
1004bfd2:	2c01      	cmp	r4, #1
1004bfd4:	d12b      	bne.n	1004c02e <LL_sched_enable_taskslot+0x6e>
1004bfd6:	4603      	mov	r3, r0
1004bfd8:	3312      	adds	r3, #18
1004bfda:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1004bfdc:	9506      	str	r5, [sp, #24]
1004bfde:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1004bfe0:	9505      	str	r5, [sp, #20]
1004bfe2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1004bfe4:	9503      	str	r5, [sp, #12]
1004bfe6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
1004bfe8:	9502      	str	r5, [sp, #8]
1004bfea:	9104      	str	r1, [sp, #16]
1004bfec:	9910      	ldr	r1, [sp, #64]	@ 0x40
1004bfee:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004bff0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1004bff2:	9400      	str	r4, [sp, #0]
1004bff4:	9201      	str	r2, [sp, #4]
1004bff6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004bff8:	9c07      	ldr	r4, [sp, #28]
1004bffa:	6044      	str	r4, [r0, #4]
1004bffc:	6082      	str	r2, [r0, #8]
1004bffe:	9a00      	ldr	r2, [sp, #0]
1004c000:	51f2      	str	r2, [r6, r7]
1004c002:	221f      	movs	r2, #31
1004c004:	4015      	ands	r5, r2
1004c006:	7545      	strb	r5, [r0, #21]
1004c008:	4011      	ands	r1, r2
1004c00a:	7581      	strb	r1, [r0, #22]
1004c00c:	2101      	movs	r1, #1
1004c00e:	7501      	strb	r1, [r0, #20]
1004c010:	9a01      	ldr	r2, [sp, #4]
1004c012:	74c2      	strb	r2, [r0, #19]
1004c014:	8201      	strh	r1, [r0, #16]
1004c016:	9902      	ldr	r1, [sp, #8]
1004c018:	61c1      	str	r1, [r0, #28]
1004c01a:	9903      	ldr	r1, [sp, #12]
1004c01c:	6201      	str	r1, [r0, #32]
1004c01e:	9905      	ldr	r1, [sp, #20]
1004c020:	6241      	str	r1, [r0, #36]	@ 0x24
1004c022:	9906      	ldr	r1, [sp, #24]
1004c024:	6281      	str	r1, [r0, #40]	@ 0x28
1004c026:	9904      	ldr	r1, [sp, #16]
1004c028:	60c1      	str	r1, [r0, #12]
1004c02a:	2002      	movs	r0, #2
1004c02c:	7018      	strb	r0, [r3, #0]
1004c02e:	b008      	add	sp, #32
1004c030:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c032:	46c0      	nop			@ (mov r8, r8)

1004c034 <__arm_cp.10_0>:
1004c034:	20000660 	.word	0x20000660

1004c038 <LL_sched_is_scheduler_call_pending>:
1004c038:	b580      	push	{r7, lr}
1004c03a:	490a      	ldr	r1, [pc, #40]	@ (1004c064 <__arm_cp.11_0>)
1004c03c:	6809      	ldr	r1, [r1, #0]
1004c03e:	7b0a      	ldrb	r2, [r1, #12]
1004c040:	2a01      	cmp	r2, #1
1004c042:	d106      	bne.n	1004c052 <LL_sched_is_scheduler_call_pending+0x1a>
1004c044:	7bca      	ldrb	r2, [r1, #15]
1004c046:	2a03      	cmp	r2, #3
1004c048:	d105      	bne.n	1004c056 <LL_sched_is_scheduler_call_pending+0x1e>
1004c04a:	2000      	movs	r0, #0
1004c04c:	f7fe fd02 	bl	1004aa54 <llc_scan_stop_ucfg_weak>
1004c050:	bd80      	pop	{r7, pc}
1004c052:	2000      	movs	r0, #0
1004c054:	bd80      	pop	{r7, pc}
1004c056:	6809      	ldr	r1, [r1, #0]
1004c058:	1a08      	subs	r0, r1, r0
1004c05a:	4903      	ldr	r1, [pc, #12]	@ (1004c068 <__arm_cp.11_1>)
1004c05c:	1840      	adds	r0, r0, r1
1004c05e:	0fc0      	lsrs	r0, r0, #31
1004c060:	bd80      	pop	{r7, pc}
1004c062:	46c0      	nop			@ (mov r8, r8)

1004c064 <__arm_cp.11_0>:
1004c064:	2000065c 	.word	0x2000065c

1004c068 <__arm_cp.11_1>:
1004c068:	fffffe0b 	.word	0xfffffe0b

1004c06c <LL_sched_engine>:
1004c06c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c06e:	b0b3      	sub	sp, #204	@ 0xcc
1004c070:	4607      	mov	r7, r0
1004c072:	48dc      	ldr	r0, [pc, #880]	@ (1004c3e4 <__arm_cp.13_0>)
1004c074:	6800      	ldr	r0, [r0, #0]
1004c076:	900b      	str	r0, [sp, #44]	@ 0x2c
1004c078:	2001      	movs	r0, #1
1004c07a:	9001      	str	r0, [sp, #4]
1004c07c:	9009      	str	r0, [sp, #36]	@ 0x24
1004c07e:	2100      	movs	r1, #0
1004c080:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c082:	7381      	strb	r1, [r0, #14]
1004c084:	48d8      	ldr	r0, [pc, #864]	@ (1004c3e8 <__arm_cp.13_1>)
1004c086:	6803      	ldr	r3, [r0, #0]
1004c088:	910a      	str	r1, [sp, #40]	@ 0x28
1004c08a:	7219      	strb	r1, [r3, #8]
1004c08c:	20ff      	movs	r0, #255	@ 0xff
1004c08e:	9008      	str	r0, [sp, #32]
1004c090:	3002      	adds	r0, #2
1004c092:	8298      	strh	r0, [r3, #20]
1004c094:	7c18      	ldrb	r0, [r3, #16]
1004c096:	21f0      	movs	r1, #240	@ 0xf0
1004c098:	4001      	ands	r1, r0
1004c09a:	090a      	lsrs	r2, r1, #4
1004c09c:	1888      	adds	r0, r1, r2
1004c09e:	7418      	strb	r0, [r3, #16]
1004c0a0:	8a59      	ldrh	r1, [r3, #18]
1004c0a2:	40d1      	lsrs	r1, r2
1004c0a4:	07c9      	lsls	r1, r1, #31
1004c0a6:	49d1      	ldr	r1, [pc, #836]	@ (1004c3ec <__arm_cp.13_2>)
1004c0a8:	6809      	ldr	r1, [r1, #0]
1004c0aa:	9107      	str	r1, [sp, #28]
1004c0ac:	9305      	str	r3, [sp, #20]
1004c0ae:	d006      	beq.n	1004c0be <LL_sched_engine+0x52>
1004c0b0:	2000      	movs	r0, #0
1004c0b2:	f000 fd3b 	bl	1004cb2c <tsk_notify_idx>
1004c0b6:	f7f5 fa4a 	bl	1004154e <BLE_STACK_ProcessRequest>
1004c0ba:	9b05      	ldr	r3, [sp, #20]
1004c0bc:	7c18      	ldrb	r0, [r3, #16]
1004c0be:	210f      	movs	r1, #15
1004c0c0:	9102      	str	r1, [sp, #8]
1004c0c2:	4008      	ands	r0, r1
1004c0c4:	7418      	strb	r0, [r3, #16]
1004c0c6:	2196      	movs	r1, #150	@ 0x96
1004c0c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004c0ca:	4341      	muls	r1, r0
1004c0cc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c0ce:	9112      	str	r1, [sp, #72]	@ 0x48
1004c0d0:	6081      	str	r1, [r0, #8]
1004c0d2:	2001      	movs	r0, #1
1004c0d4:	9004      	str	r0, [sp, #16]
1004c0d6:	43c0      	mvns	r0, r0
1004c0d8:	b279      	sxtb	r1, r7
1004c0da:	4281      	cmp	r1, r0
1004c0dc:	dc10      	bgt.n	1004c100 <LL_sched_engine+0x94>
1004c0de:	207f      	movs	r0, #127	@ 0x7f
1004c0e0:	4007      	ands	r7, r0
1004c0e2:	252c      	movs	r5, #44	@ 0x2c
1004c0e4:	437d      	muls	r5, r7
1004c0e6:	9c07      	ldr	r4, [sp, #28]
1004c0e8:	1960      	adds	r0, r4, r5
1004c0ea:	900a      	str	r0, [sp, #40]	@ 0x28
1004c0ec:	5966      	ldr	r6, [r4, r5]
1004c0ee:	f7f5 fc88 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004c0f2:	1a30      	subs	r0, r6, r0
1004c0f4:	49be      	ldr	r1, [pc, #760]	@ (1004c3f0 <__arm_cp.13_3>)
1004c0f6:	1840      	adds	r0, r0, r1
1004c0f8:	d500      	bpl.n	1004c0fc <LL_sched_engine+0x90>
1004c0fa:	e0ef      	b.n	1004c2dc <LL_sched_engine+0x270>
1004c0fc:	4638      	mov	r0, r7
1004c0fe:	e004      	b.n	1004c10a <LL_sched_engine+0x9e>
1004c100:	b2f8      	uxtb	r0, r7
1004c102:	28ff      	cmp	r0, #255	@ 0xff
1004c104:	d00e      	beq.n	1004c124 <LL_sched_engine+0xb8>
1004c106:	2100      	movs	r1, #0
1004c108:	910a      	str	r1, [sp, #40]	@ 0x28
1004c10a:	212c      	movs	r1, #44	@ 0x2c
1004c10c:	4341      	muls	r1, r0
1004c10e:	9807      	ldr	r0, [sp, #28]
1004c110:	1840      	adds	r0, r0, r1
1004c112:	2101      	movs	r1, #1
1004c114:	7501      	strb	r1, [r0, #20]
1004c116:	7c81      	ldrb	r1, [r0, #18]
1004c118:	2908      	cmp	r1, #8
1004c11a:	d102      	bne.n	1004c122 <LL_sched_engine+0xb6>
1004c11c:	3012      	adds	r0, #18
1004c11e:	2104      	movs	r1, #4
1004c120:	7001      	strb	r1, [r0, #0]
1004c122:	9708      	str	r7, [sp, #32]
1004c124:	f7f5 fc6d 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004c128:	9912      	ldr	r1, [sp, #72]	@ 0x48
1004c12a:	180c      	adds	r4, r1, r0
1004c12c:	48af      	ldr	r0, [pc, #700]	@ (1004c3ec <__arm_cp.13_2>)
1004c12e:	6807      	ldr	r7, [r0, #0]
1004c130:	3728      	adds	r7, #40	@ 0x28
1004c132:	2500      	movs	r5, #0
1004c134:	4628      	mov	r0, r5
1004c136:	49af      	ldr	r1, [pc, #700]	@ (1004c3f4 <__arm_cp.13_4>)
1004c138:	7aca      	ldrb	r2, [r1, #11]
1004c13a:	4295      	cmp	r5, r2
1004c13c:	d23a      	bcs.n	1004c1b4 <LL_sched_engine+0x148>
1004c13e:	463e      	mov	r6, r7
1004c140:	3e16      	subs	r6, #22
1004c142:	7831      	ldrb	r1, [r6, #0]
1004c144:	070a      	lsls	r2, r1, #28
1004c146:	0f52      	lsrs	r2, r2, #29
1004c148:	d01e      	beq.n	1004c188 <LL_sched_engine+0x11c>
1004c14a:	2104      	movs	r1, #4
1004c14c:	7031      	strb	r1, [r6, #0]
1004c14e:	4639      	mov	r1, r7
1004c150:	3928      	subs	r1, #40	@ 0x28
1004c152:	6809      	ldr	r1, [r1, #0]
1004c154:	43ca      	mvns	r2, r1
1004c156:	18a2      	adds	r2, r4, r2
1004c158:	d429      	bmi.n	1004c1ae <LL_sched_engine+0x142>
1004c15a:	1a61      	subs	r1, r4, r1
1004c15c:	4638      	mov	r0, r7
1004c15e:	381c      	subs	r0, #28
1004c160:	6800      	ldr	r0, [r0, #0]
1004c162:	463a      	mov	r2, r7
1004c164:	3a0c      	subs	r2, #12
1004c166:	6812      	ldr	r2, [r2, #0]
1004c168:	4790      	blx	r2
1004c16a:	4639      	mov	r1, r7
1004c16c:	3918      	subs	r1, #24
1004c16e:	880a      	ldrh	r2, [r1, #0]
1004c170:	1812      	adds	r2, r2, r0
1004c172:	800a      	strh	r2, [r1, #0]
1004c174:	4639      	mov	r1, r7
1004c176:	3914      	subs	r1, #20
1004c178:	780a      	ldrb	r2, [r1, #0]
1004c17a:	1880      	adds	r0, r0, r2
1004c17c:	287f      	cmp	r0, #127	@ 0x7f
1004c17e:	d300      	bcc.n	1004c182 <LL_sched_engine+0x116>
1004c180:	207f      	movs	r0, #127	@ 0x7f
1004c182:	7008      	strb	r0, [r1, #0]
1004c184:	7831      	ldrb	r1, [r6, #0]
1004c186:	2001      	movs	r0, #1
1004c188:	0689      	lsls	r1, r1, #26
1004c18a:	0f89      	lsrs	r1, r1, #30
1004c18c:	d00f      	beq.n	1004c1ae <LL_sched_engine+0x142>
1004c18e:	6839      	ldr	r1, [r7, #0]
1004c190:	2900      	cmp	r1, #0
1004c192:	d006      	beq.n	1004c1a2 <LL_sched_engine+0x136>
1004c194:	4638      	mov	r0, r7
1004c196:	381c      	subs	r0, #28
1004c198:	6800      	ldr	r0, [r0, #0]
1004c19a:	4788      	blx	r1
1004c19c:	7830      	ldrb	r0, [r6, #0]
1004c19e:	2801      	cmp	r0, #1
1004c1a0:	d004      	beq.n	1004c1ac <LL_sched_engine+0x140>
1004c1a2:	2000      	movs	r0, #0
1004c1a4:	7030      	strb	r0, [r6, #0]
1004c1a6:	4639      	mov	r1, r7
1004c1a8:	3915      	subs	r1, #21
1004c1aa:	7008      	strb	r0, [r1, #0]
1004c1ac:	2001      	movs	r0, #1
1004c1ae:	372c      	adds	r7, #44	@ 0x2c
1004c1b0:	1c6d      	adds	r5, r5, #1
1004c1b2:	e7c0      	b.n	1004c136 <LL_sched_engine+0xca>
1004c1b4:	2800      	cmp	r0, #0
1004c1b6:	d1b5      	bne.n	1004c124 <LL_sched_engine+0xb8>
1004c1b8:	488c      	ldr	r0, [pc, #560]	@ (1004c3ec <__arm_cp.13_2>)
1004c1ba:	6800      	ldr	r0, [r0, #0]
1004c1bc:	4603      	mov	r3, r0
1004c1be:	3312      	adds	r3, #18
1004c1c0:	2400      	movs	r4, #0
1004c1c2:	4621      	mov	r1, r4
1004c1c4:	42a2      	cmp	r2, r4
1004c1c6:	d009      	beq.n	1004c1dc <LL_sched_engine+0x170>
1004c1c8:	781d      	ldrb	r5, [r3, #0]
1004c1ca:	2d04      	cmp	r5, #4
1004c1cc:	d103      	bne.n	1004c1d6 <LL_sched_engine+0x16a>
1004c1ce:	b2cd      	uxtb	r5, r1
1004c1d0:	ae13      	add	r6, sp, #76	@ 0x4c
1004c1d2:	5574      	strb	r4, [r6, r5]
1004c1d4:	1c49      	adds	r1, r1, #1
1004c1d6:	332c      	adds	r3, #44	@ 0x2c
1004c1d8:	1c64      	adds	r4, r4, #1
1004c1da:	e7f3      	b.n	1004c1c4 <LL_sched_engine+0x158>
1004c1dc:	060a      	lsls	r2, r1, #24
1004c1de:	d074      	beq.n	1004c2ca <LL_sched_engine+0x25e>
1004c1e0:	b2ca      	uxtb	r2, r1
1004c1e2:	920e      	str	r2, [sp, #56]	@ 0x38
1004c1e4:	2200      	movs	r2, #0
1004c1e6:	9206      	str	r2, [sp, #24]
1004c1e8:	460c      	mov	r4, r1
1004c1ea:	9203      	str	r2, [sp, #12]
1004c1ec:	4616      	mov	r6, r2
1004c1ee:	910d      	str	r1, [sp, #52]	@ 0x34
1004c1f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c1f2:	4296      	cmp	r6, r2
1004c1f4:	d06e      	beq.n	1004c2d4 <LL_sched_engine+0x268>
1004c1f6:	9612      	str	r6, [sp, #72]	@ 0x48
1004c1f8:	9410      	str	r4, [sp, #64]	@ 0x40
1004c1fa:	b2e3      	uxtb	r3, r4
1004c1fc:	2700      	movs	r7, #0
1004c1fe:	462c      	mov	r4, r5
1004c200:	463e      	mov	r6, r7
1004c202:	42bb      	cmp	r3, r7
1004c204:	d00d      	beq.n	1004c222 <LL_sched_engine+0x1b6>
1004c206:	aa13      	add	r2, sp, #76	@ 0x4c
1004c208:	5dd2      	ldrb	r2, [r2, r7]
1004c20a:	252c      	movs	r5, #44	@ 0x2c
1004c20c:	4355      	muls	r5, r2
1004c20e:	5945      	ldr	r5, [r0, r5]
1004c210:	2f00      	cmp	r7, #0
1004c212:	d002      	beq.n	1004c21a <LL_sched_engine+0x1ae>
1004c214:	43f2      	mvns	r2, r6
1004c216:	18aa      	adds	r2, r5, r2
1004c218:	d501      	bpl.n	1004c21e <LL_sched_engine+0x1b2>
1004c21a:	463c      	mov	r4, r7
1004c21c:	462e      	mov	r6, r5
1004c21e:	1c7f      	adds	r7, r7, #1
1004c220:	e7ef      	b.n	1004c202 <LL_sched_engine+0x196>
1004c222:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1004c224:	1b4a      	subs	r2, r1, r5
1004c226:	b2d2      	uxtb	r2, r2
1004c228:	1e51      	subs	r1, r2, #1
1004c22a:	aa13      	add	r2, sp, #76	@ 0x4c
1004c22c:	5c53      	ldrb	r3, [r2, r1]
1004c22e:	b2e4      	uxtb	r4, r4
1004c230:	5d17      	ldrb	r7, [r2, r4]
1004c232:	5457      	strb	r7, [r2, r1]
1004c234:	5513      	strb	r3, [r2, r4]
1004c236:	910f      	str	r1, [sp, #60]	@ 0x3c
1004c238:	b2cb      	uxtb	r3, r1
1004c23a:	5cd3      	ldrb	r3, [r2, r3]
1004c23c:	2d00      	cmp	r5, #0
1004c23e:	d02e      	beq.n	1004c29e <LL_sched_engine+0x232>
1004c240:	461d      	mov	r5, r3
1004c242:	9911      	ldr	r1, [sp, #68]	@ 0x44
1004c244:	b2ca      	uxtb	r2, r1
1004c246:	ac13      	add	r4, sp, #76	@ 0x4c
1004c248:	5ca4      	ldrb	r4, [r4, r2]
1004c24a:	272c      	movs	r7, #44	@ 0x2c
1004c24c:	437c      	muls	r4, r7
1004c24e:	5902      	ldr	r2, [r0, r4]
1004c250:	1b91      	subs	r1, r2, r6
1004c252:	1904      	adds	r4, r0, r4
1004c254:	6863      	ldr	r3, [r4, #4]
1004c256:	18c9      	adds	r1, r1, r3
1004c258:	3195      	adds	r1, #149	@ 0x95
1004c25a:	d44a      	bmi.n	1004c2f2 <LL_sched_engine+0x286>
1004c25c:	43d1      	mvns	r1, r2
1004c25e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004c260:	1851      	adds	r1, r2, r1
1004c262:	d449      	bmi.n	1004c2f8 <LL_sched_engine+0x28c>
1004c264:	436f      	muls	r7, r5
1004c266:	19c1      	adds	r1, r0, r7
1004c268:	7d8a      	ldrb	r2, [r1, #22]
1004c26a:	7d0b      	ldrb	r3, [r1, #20]
1004c26c:	4093      	lsls	r3, r2
1004c26e:	7d49      	ldrb	r1, [r1, #21]
1004c270:	2601      	movs	r6, #1
1004c272:	4632      	mov	r2, r6
1004c274:	408a      	lsls	r2, r1
1004c276:	429a      	cmp	r2, r3
1004c278:	d800      	bhi.n	1004c27c <LL_sched_engine+0x210>
1004c27a:	4613      	mov	r3, r2
1004c27c:	7da1      	ldrb	r1, [r4, #22]
1004c27e:	7d27      	ldrb	r7, [r4, #20]
1004c280:	408f      	lsls	r7, r1
1004c282:	7d61      	ldrb	r1, [r4, #21]
1004c284:	408e      	lsls	r6, r1
1004c286:	42be      	cmp	r6, r7
1004c288:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004c28a:	d800      	bhi.n	1004c28e <LL_sched_engine+0x222>
1004c28c:	4637      	mov	r7, r6
1004c28e:	429f      	cmp	r7, r3
1004c290:	462b      	mov	r3, r5
1004c292:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004c294:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1004c296:	d300      	bcc.n	1004c29a <LL_sched_engine+0x22e>
1004c298:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004c29a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1004c29c:	e011      	b.n	1004c2c2 <LL_sched_engine+0x256>
1004c29e:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004c2a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c2a2:	2a01      	cmp	r2, #1
1004c2a4:	d101      	bne.n	1004c2aa <LL_sched_engine+0x23e>
1004c2a6:	2202      	movs	r2, #2
1004c2a8:	9206      	str	r2, [sp, #24]
1004c2aa:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1004c2ac:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1004c2ae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004c2b0:	222c      	movs	r2, #44	@ 0x2c
1004c2b2:	435a      	muls	r2, r3
1004c2b4:	5883      	ldr	r3, [r0, r2]
1004c2b6:	1882      	adds	r2, r0, r2
1004c2b8:	6852      	ldr	r2, [r2, #4]
1004c2ba:	189a      	adds	r2, r3, r2
1004c2bc:	3296      	adds	r2, #150	@ 0x96
1004c2be:	920c      	str	r2, [sp, #48]	@ 0x30
1004c2c0:	462b      	mov	r3, r5
1004c2c2:	1e64      	subs	r4, r4, #1
1004c2c4:	1c76      	adds	r6, r6, #1
1004c2c6:	9311      	str	r3, [sp, #68]	@ 0x44
1004c2c8:	e792      	b.n	1004c1f0 <LL_sched_engine+0x184>
1004c2ca:	2000      	movs	r0, #0
1004c2cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004c2ce:	6048      	str	r0, [r1, #4]
1004c2d0:	7388      	strb	r0, [r1, #14]
1004c2d2:	e02d      	b.n	1004c330 <LL_sched_engine+0x2c4>
1004c2d4:	9a03      	ldr	r2, [sp, #12]
1004c2d6:	4616      	mov	r6, r2
1004c2d8:	9b06      	ldr	r3, [sp, #24]
1004c2da:	e013      	b.n	1004c304 <LL_sched_engine+0x298>
1004c2dc:	1960      	adds	r0, r4, r5
1004c2de:	7c80      	ldrb	r0, [r0, #18]
1004c2e0:	2810      	cmp	r0, #16
1004c2e2:	d100      	bne.n	1004c2e6 <LL_sched_engine+0x27a>
1004c2e4:	e70a      	b.n	1004c0fc <LL_sched_engine+0x90>
1004c2e6:	2820      	cmp	r0, #32
1004c2e8:	d100      	bne.n	1004c2ec <LL_sched_engine+0x280>
1004c2ea:	e707      	b.n	1004c0fc <LL_sched_engine+0x90>
1004c2ec:	2400      	movs	r4, #0
1004c2ee:	463d      	mov	r5, r7
1004c2f0:	e021      	b.n	1004c336 <LL_sched_engine+0x2ca>
1004c2f2:	3e96      	subs	r6, #150	@ 0x96
1004c2f4:	9b04      	ldr	r3, [sp, #16]
1004c2f6:	e004      	b.n	1004c302 <LL_sched_engine+0x296>
1004c2f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c2fa:	1e40      	subs	r0, r0, #1
1004c2fc:	9011      	str	r0, [sp, #68]	@ 0x44
1004c2fe:	2600      	movs	r6, #0
1004c300:	4633      	mov	r3, r6
1004c302:	9a03      	ldr	r2, [sp, #12]
1004c304:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004c306:	b2c0      	uxtb	r0, r0
1004c308:	a913      	add	r1, sp, #76	@ 0x4c
1004c30a:	5c0d      	ldrb	r5, [r1, r0]
1004c30c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c30e:	6042      	str	r2, [r0, #4]
1004c310:	7383      	strb	r3, [r0, #14]
1004c312:	2dff      	cmp	r5, #255	@ 0xff
1004c314:	d00c      	beq.n	1004c330 <LL_sched_engine+0x2c4>
1004c316:	202c      	movs	r0, #44	@ 0x2c
1004c318:	4368      	muls	r0, r5
1004c31a:	9907      	ldr	r1, [sp, #28]
1004c31c:	1809      	adds	r1, r1, r0
1004c31e:	b2d8      	uxtb	r0, r3
1004c320:	2801      	cmp	r0, #1
1004c322:	910a      	str	r1, [sp, #40]	@ 0x28
1004c324:	d105      	bne.n	1004c332 <LL_sched_engine+0x2c6>
1004c326:	6808      	ldr	r0, [r1, #0]
1004c328:	1a30      	subs	r0, r6, r0
1004c32a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004c32c:	6048      	str	r0, [r1, #4]
1004c32e:	e000      	b.n	1004c332 <LL_sched_engine+0x2c6>
1004c330:	25ff      	movs	r5, #255	@ 0xff
1004c332:	9c01      	ldr	r4, [sp, #4]
1004c334:	9f08      	ldr	r7, [sp, #32]
1004c336:	f7f5 ffe3 	bl	10042300 <BLEPLAT_CNTR_ClearSemareq>
1004c33a:	482a      	ldr	r0, [pc, #168]	@ (1004c3e4 <__arm_cp.13_0>)
1004c33c:	6800      	ldr	r0, [r0, #0]
1004c33e:	2dff      	cmp	r5, #255	@ 0xff
1004c340:	d02f      	beq.n	1004c3a2 <LL_sched_engine+0x336>
1004c342:	9711      	str	r7, [sp, #68]	@ 0x44
1004c344:	9412      	str	r4, [sp, #72]	@ 0x48
1004c346:	4604      	mov	r4, r0
1004c348:	2008      	movs	r0, #8
1004c34a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1004c34c:	74b8      	strb	r0, [r7, #18]
1004c34e:	f7fe fba2 	bl	1004aa96 <llc_cte_timer_stop_ucfg_weak>
1004c352:	7365      	strb	r5, [r4, #13]
1004c354:	6a3a      	ldr	r2, [r7, #32]
1004c356:	68f8      	ldr	r0, [r7, #12]
1004c358:	6879      	ldr	r1, [r7, #4]
1004c35a:	4790      	blx	r2
1004c35c:	683e      	ldr	r6, [r7, #0]
1004c35e:	940b      	str	r4, [sp, #44]	@ 0x2c
1004c360:	6026      	str	r6, [r4, #0]
1004c362:	4628      	mov	r0, r5
1004c364:	f7f5 ffe2 	bl	1004232c <BLEPLAT_CNTR_GlobWriteSlot>
1004c368:	f7f5 ffd9 	bl	1004231e <BLEPLAT_CNTR_GlobEnableBlue>
1004c36c:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004c36e:	2800      	cmp	r0, #0
1004c370:	d023      	beq.n	1004c3ba <LL_sched_engine+0x34e>
1004c372:	7cf8      	ldrb	r0, [r7, #19]
1004c374:	09c1      	lsrs	r1, r0, #7
1004c376:	2201      	movs	r2, #1
1004c378:	4630      	mov	r0, r6
1004c37a:	f7f5 fb69 	bl	10041a50 <BLEPLAT_SetRadioTimerValue>
1004c37e:	2800      	cmp	r0, #0
1004c380:	d01d      	beq.n	1004c3be <LL_sched_engine+0x352>
1004c382:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004c384:	0040      	lsls	r0, r0, #1
1004c386:	9009      	str	r0, [sp, #36]	@ 0x24
1004c388:	2810      	cmp	r0, #16
1004c38a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
1004c38c:	d200      	bcs.n	1004c390 <LL_sched_engine+0x324>
1004c38e:	e676      	b.n	1004c07e <LL_sched_engine+0x12>
1004c390:	f7fe fb80 	bl	1004aa94 <llc_cte_timer_error_ucfg_weak>
1004c394:	20a1      	movs	r0, #161	@ 0xa1
1004c396:	2106      	movs	r1, #6
1004c398:	2200      	movs	r2, #0
1004c39a:	4613      	mov	r3, r2
1004c39c:	f000 fe10 	bl	1004cfc0 <aci_hal_fw_error_event_push_noinline>
1004c3a0:	e009      	b.n	1004c3b6 <LL_sched_engine+0x34a>
1004c3a2:	4604      	mov	r4, r0
1004c3a4:	f7f5 fb6e 	bl	10041a84 <BLEPLAT_ClearRadioTimerValue>
1004c3a8:	f7f5 ffb2 	bl	10042310 <BLEPLAT_CNTR_GlobDisableBlue>
1004c3ac:	2000      	movs	r0, #0
1004c3ae:	73e0      	strb	r0, [r4, #15]
1004c3b0:	20ff      	movs	r0, #255	@ 0xff
1004c3b2:	0200      	lsls	r0, r0, #8
1004c3b4:	81a0      	strh	r0, [r4, #12]
1004c3b6:	9904      	ldr	r1, [sp, #16]
1004c3b8:	e00f      	b.n	1004c3da <LL_sched_engine+0x36e>
1004c3ba:	f7f5 fb7b 	bl	10041ab4 <BLEPLAT_SetRadioCloseTimeout>
1004c3be:	9b04      	ldr	r3, [sp, #16]
1004c3c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004c3c2:	730b      	strb	r3, [r1, #12]
1004c3c4:	7cf8      	ldrb	r0, [r7, #19]
1004c3c6:	73c8      	strb	r0, [r1, #15]
1004c3c8:	9a05      	ldr	r2, [sp, #20]
1004c3ca:	60d6      	str	r6, [r2, #12]
1004c3cc:	7c11      	ldrb	r1, [r2, #16]
1004c3ce:	9c02      	ldr	r4, [sp, #8]
1004c3d0:	4021      	ands	r1, r4
1004c3d2:	0100      	lsls	r0, r0, #4
1004c3d4:	1808      	adds	r0, r1, r0
1004c3d6:	4619      	mov	r1, r3
1004c3d8:	7410      	strb	r0, [r2, #16]
1004c3da:	4803      	ldr	r0, [pc, #12]	@ (1004c3e8 <__arm_cp.13_1>)
1004c3dc:	6800      	ldr	r0, [r0, #0]
1004c3de:	7201      	strb	r1, [r0, #8]
1004c3e0:	b033      	add	sp, #204	@ 0xcc
1004c3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004c3e4 <__arm_cp.13_0>:
1004c3e4:	2000065c 	.word	0x2000065c

1004c3e8 <__arm_cp.13_1>:
1004c3e8:	20000658 	.word	0x20000658

1004c3ec <__arm_cp.13_2>:
1004c3ec:	20000660 	.word	0x20000660

1004c3f0 <__arm_cp.13_3>:
1004c3f0:	fffffed4 	.word	0xfffffed4

1004c3f4 <__arm_cp.13_4>:
1004c3f4:	20000668 	.word	0x20000668

1004c3f8 <LL_sched_set_priority>:
1004c3f8:	b510      	push	{r4, lr}
1004c3fa:	231f      	movs	r3, #31
1004c3fc:	401a      	ands	r2, r3
1004c3fe:	242c      	movs	r4, #44	@ 0x2c
1004c400:	4344      	muls	r4, r0
1004c402:	4803      	ldr	r0, [pc, #12]	@ (1004c410 <__arm_cp.14_0>)
1004c404:	6800      	ldr	r0, [r0, #0]
1004c406:	1900      	adds	r0, r0, r4
1004c408:	7582      	strb	r2, [r0, #22]
1004c40a:	4019      	ands	r1, r3
1004c40c:	7541      	strb	r1, [r0, #21]
1004c40e:	bd10      	pop	{r4, pc}

1004c410 <__arm_cp.14_0>:
1004c410:	20000660 	.word	0x20000660

1004c414 <LL_sched_reserve_taskslot>:
1004c414:	b510      	push	{r4, lr}
1004c416:	480e      	ldr	r0, [pc, #56]	@ (1004c450 <__arm_cp.22_0>)
1004c418:	6801      	ldr	r1, [r0, #0]
1004c41a:	3128      	adds	r1, #40	@ 0x28
1004c41c:	2000      	movs	r0, #0
1004c41e:	4a0d      	ldr	r2, [pc, #52]	@ (1004c454 <__arm_cp.22_1>)
1004c420:	7ad3      	ldrb	r3, [r2, #11]
1004c422:	4298      	cmp	r0, r3
1004c424:	d20b      	bcs.n	1004c43e <LL_sched_reserve_taskslot+0x2a>
1004c426:	f3ef 8310 	mrs	r3, PRIMASK
1004c42a:	b672      	cpsid	i
1004c42c:	460b      	mov	r3, r1
1004c42e:	3b16      	subs	r3, #22
1004c430:	781c      	ldrb	r4, [r3, #0]
1004c432:	2c00      	cmp	r4, #0
1004c434:	d005      	beq.n	1004c442 <LL_sched_reserve_taskslot+0x2e>
1004c436:	b662      	cpsie	i
1004c438:	312c      	adds	r1, #44	@ 0x2c
1004c43a:	1c40      	adds	r0, r0, #1
1004c43c:	e7f0      	b.n	1004c420 <LL_sched_reserve_taskslot+0xc>
1004c43e:	20ff      	movs	r0, #255	@ 0xff
1004c440:	e004      	b.n	1004c44c <LL_sched_reserve_taskslot+0x38>
1004c442:	2200      	movs	r2, #0
1004c444:	600a      	str	r2, [r1, #0]
1004c446:	2101      	movs	r1, #1
1004c448:	7019      	strb	r1, [r3, #0]
1004c44a:	b662      	cpsie	i
1004c44c:	b2c0      	uxtb	r0, r0
1004c44e:	bd10      	pop	{r4, pc}

1004c450 <__arm_cp.22_0>:
1004c450:	20000660 	.word	0x20000660

1004c454 <__arm_cp.22_1>:
1004c454:	20000668 	.word	0x20000668

1004c458 <LL_sched_release_taskslot>:
1004c458:	28ff      	cmp	r0, #255	@ 0xff
1004c45a:	d006      	beq.n	1004c46a <LL_sched_release_taskslot+0x12>
1004c45c:	212c      	movs	r1, #44	@ 0x2c
1004c45e:	4341      	muls	r1, r0
1004c460:	4802      	ldr	r0, [pc, #8]	@ (1004c46c <__arm_cp.23_0>)
1004c462:	6800      	ldr	r0, [r0, #0]
1004c464:	1840      	adds	r0, r0, r1
1004c466:	2100      	movs	r1, #0
1004c468:	8241      	strh	r1, [r0, #18]
1004c46a:	4770      	bx	lr

1004c46c <__arm_cp.23_0>:
1004c46c:	20000660 	.word	0x20000660

1004c470 <LL_sched_check_and_call_sched>:
1004c470:	b510      	push	{r4, lr}
1004c472:	460c      	mov	r4, r1
1004c474:	f3ef 8110 	mrs	r1, PRIMASK
1004c478:	b672      	cpsid	i
1004c47a:	f7ff fddd 	bl	1004c038 <LL_sched_is_scheduler_call_pending>
1004c47e:	b662      	cpsie	i
1004c480:	2800      	cmp	r0, #0
1004c482:	d000      	beq.n	1004c486 <LL_sched_check_and_call_sched+0x16>
1004c484:	bd10      	pop	{r4, pc}
1004c486:	4620      	mov	r0, r4
1004c488:	f7ff fdf0 	bl	1004c06c <LL_sched_engine>
1004c48c:	bd10      	pop	{r4, pc}
	...

1004c490 <LL_sched_check_and_wait_sched>:
1004c490:	b5b0      	push	{r4, r5, r7, lr}
1004c492:	4604      	mov	r4, r0
1004c494:	4813      	ldr	r0, [pc, #76]	@ (1004c4e4 <__arm_cp.25_0>)
1004c496:	7ac0      	ldrb	r0, [r0, #11]
1004c498:	42a0      	cmp	r0, r4
1004c49a:	d922      	bls.n	1004c4e2 <LL_sched_check_and_wait_sched+0x52>
1004c49c:	f3ef 8010 	mrs	r0, PRIMASK
1004c4a0:	b672      	cpsid	i
1004c4a2:	25ff      	movs	r5, #255	@ 0xff
1004c4a4:	35ec      	adds	r5, #236	@ 0xec
1004c4a6:	f7f5 faac 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004c4aa:	1940      	adds	r0, r0, r5
1004c4ac:	f7ff fdc4 	bl	1004c038 <LL_sched_is_scheduler_call_pending>
1004c4b0:	4a0d      	ldr	r2, [pc, #52]	@ (1004c4e8 <__arm_cp.25_1>)
1004c4b2:	6813      	ldr	r3, [r2, #0]
1004c4b4:	2100      	movs	r1, #0
1004c4b6:	7219      	strb	r1, [r3, #8]
1004c4b8:	b662      	cpsie	i
1004c4ba:	2801      	cmp	r0, #1
1004c4bc:	d10c      	bne.n	1004c4d8 <LL_sched_check_and_wait_sched+0x48>
1004c4be:	6810      	ldr	r0, [r2, #0]
1004c4c0:	6041      	str	r1, [r0, #4]
1004c4c2:	4a0a      	ldr	r2, [pc, #40]	@ (1004c4ec <__arm_cp.25_2>)
1004c4c4:	6843      	ldr	r3, [r0, #4]
1004c4c6:	4293      	cmp	r3, r2
1004c4c8:	d80b      	bhi.n	1004c4e2 <LL_sched_check_and_wait_sched+0x52>
1004c4ca:	7a03      	ldrb	r3, [r0, #8]
1004c4cc:	2b00      	cmp	r3, #0
1004c4ce:	d107      	bne.n	1004c4e0 <LL_sched_check_and_wait_sched+0x50>
1004c4d0:	6843      	ldr	r3, [r0, #4]
1004c4d2:	1c5b      	adds	r3, r3, #1
1004c4d4:	6043      	str	r3, [r0, #4]
1004c4d6:	e7f5      	b.n	1004c4c4 <LL_sched_check_and_wait_sched+0x34>
1004c4d8:	4620      	mov	r0, r4
1004c4da:	f7ff fdc7 	bl	1004c06c <LL_sched_engine>
1004c4de:	bdb0      	pop	{r4, r5, r7, pc}
1004c4e0:	7201      	strb	r1, [r0, #8]
1004c4e2:	bdb0      	pop	{r4, r5, r7, pc}

1004c4e4 <__arm_cp.25_0>:
1004c4e4:	20000668 	.word	0x20000668

1004c4e8 <__arm_cp.25_1>:
1004c4e8:	20000658 	.word	0x20000658

1004c4ec <__arm_cp.25_2>:
1004c4ec:	0004e1ff 	.word	0x0004e1ff

1004c4f0 <MBM_init_ucfg_weak>:
1004c4f0:	2000      	movs	r0, #0
1004c4f2:	4770      	bx	lr

1004c4f4 <csmem_init>:
1004c4f4:	4801      	ldr	r0, [pc, #4]	@ (1004c4fc <__arm_cp.0_0>)
1004c4f6:	6841      	ldr	r1, [r0, #4]
1004c4f8:	6001      	str	r1, [r0, #0]
1004c4fa:	4770      	bx	lr

1004c4fc <__arm_cp.0_0>:
1004c4fc:	20000664 	.word	0x20000664

1004c500 <csmem_mem_assign>:
1004c500:	b570      	push	{r4, r5, r6, lr}
1004c502:	4614      	mov	r4, r2
1004c504:	4605      	mov	r5, r0
1004c506:	434c      	muls	r4, r1
1004c508:	6800      	ldr	r0, [r0, #0]
1004c50a:	1e40      	subs	r0, r0, #1
1004c50c:	2103      	movs	r1, #3
1004c50e:	4301      	orrs	r1, r0
1004c510:	1c4e      	adds	r6, r1, #1
1004c512:	2100      	movs	r1, #0
1004c514:	4630      	mov	r0, r6
1004c516:	4622      	mov	r2, r4
1004c518:	f7f5 fa00 	bl	1004191c <BLEPLAT_MemSet>
1004c51c:	1930      	adds	r0, r6, r4
1004c51e:	6028      	str	r0, [r5, #0]
1004c520:	4630      	mov	r0, r6
1004c522:	bd70      	pop	{r4, r5, r6, pc}

1004c524 <csmem_mem_0_assign>:
1004c524:	b580      	push	{r7, lr}
1004c526:	460a      	mov	r2, r1
1004c528:	4601      	mov	r1, r0
1004c52a:	4802      	ldr	r0, [pc, #8]	@ (1004c534 <__arm_cp.3_0>)
1004c52c:	f7ff ffe8 	bl	1004c500 <csmem_mem_assign>
1004c530:	bd80      	pop	{r7, pc}
1004c532:	46c0      	nop			@ (mov r8, r8)

1004c534 <__arm_cp.3_0>:
1004c534:	20000664 	.word	0x20000664

1004c538 <BlueNRG_Stack_Initialize_RAM_check>:
1004c538:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c53a:	b097      	sub	sp, #92	@ 0x5c
1004c53c:	4ce5      	ldr	r4, [pc, #916]	@ (1004c8d4 <__arm_cp.0_4>)
1004c53e:	2067      	movs	r0, #103	@ 0x67
1004c540:	43c5      	mvns	r5, r0
1004c542:	f7fe f858 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c546:	4ee4      	ldr	r6, [pc, #912]	@ (1004c8d8 <__arm_cp.0_5>)
1004c548:	2801      	cmp	r0, #1
1004c54a:	d002      	beq.n	1004c552 <BlueNRG_Stack_Initialize_RAM_check+0x1a>
1004c54c:	7af0      	ldrb	r0, [r6, #11]
1004c54e:	2800      	cmp	r0, #0
1004c550:	d010      	beq.n	1004c574 <BlueNRG_Stack_Initialize_RAM_check+0x3c>
1004c552:	4627      	mov	r7, r4
1004c554:	462c      	mov	r4, r5
1004c556:	3438      	adds	r4, #56	@ 0x38
1004c558:	f7fe f84d 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c55c:	7af1      	ldrb	r1, [r6, #11]
1004c55e:	4361      	muls	r1, r4
1004c560:	4378      	muls	r0, r7
1004c562:	1838      	adds	r0, r7, r0
1004c564:	1844      	adds	r4, r0, r1
1004c566:	f7fe f846 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c56a:	7af1      	ldrb	r1, [r6, #11]
1004c56c:	4341      	muls	r1, r0
1004c56e:	48db      	ldr	r0, [pc, #876]	@ (1004c8dc <__arm_cp.0_6>)
1004c570:	4348      	muls	r0, r1
1004c572:	1824      	adds	r4, r4, r0
1004c574:	3416      	adds	r4, #22
1004c576:	f7fe f83e 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c57a:	2801      	cmp	r0, #1
1004c57c:	d10e      	bne.n	1004c59c <BlueNRG_Stack_Initialize_RAM_check+0x64>
1004c57e:	4628      	mov	r0, r5
1004c580:	3060      	adds	r0, #96	@ 0x60
1004c582:	8931      	ldrh	r1, [r6, #8]
1004c584:	4341      	muls	r1, r0
1004c586:	4628      	mov	r0, r5
1004c588:	3044      	adds	r0, #68	@ 0x44
1004c58a:	7ab2      	ldrb	r2, [r6, #10]
1004c58c:	4342      	muls	r2, r0
1004c58e:	1850      	adds	r0, r2, r1
1004c590:	4629      	mov	r1, r5
1004c592:	3148      	adds	r1, #72	@ 0x48
1004c594:	7b32      	ldrb	r2, [r6, #12]
1004c596:	434a      	muls	r2, r1
1004c598:	1880      	adds	r0, r0, r2
1004c59a:	e000      	b.n	1004c59e <BlueNRG_Stack_Initialize_RAM_check+0x66>
1004c59c:	2000      	movs	r0, #0
1004c59e:	9003      	str	r0, [sp, #12]
1004c5a0:	89f0      	ldrh	r0, [r6, #14]
1004c5a2:	900a      	str	r0, [sp, #40]	@ 0x28
1004c5a4:	f7fe f81f 	bl	1004a5e6 <data_length_extension_csr_ucfg_weak>
1004c5a8:	2801      	cmp	r0, #1
1004c5aa:	d001      	beq.n	1004c5b0 <BlueNRG_Stack_Initialize_RAM_check+0x78>
1004c5ac:	f7ff fa83 	bl	1004bab6 <ext_adv_scan_enabled_ucfg_weak>
1004c5b0:	f7fe f81d 	bl	1004a5ee <phy_upd_csr_ucfg_weak>
1004c5b4:	2801      	cmp	r0, #1
1004c5b6:	9411      	str	r4, [sp, #68]	@ 0x44
1004c5b8:	d109      	bne.n	1004c5ce <BlueNRG_Stack_Initialize_RAM_check+0x96>
1004c5ba:	462c      	mov	r4, r5
1004c5bc:	3438      	adds	r4, #56	@ 0x38
1004c5be:	f7fe f81a 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c5c2:	4360      	muls	r0, r4
1004c5c4:	7af1      	ldrb	r1, [r6, #11]
1004c5c6:	4341      	muls	r1, r0
1004c5c8:	3908      	subs	r1, #8
1004c5ca:	9109      	str	r1, [sp, #36]	@ 0x24
1004c5cc:	e001      	b.n	1004c5d2 <BlueNRG_Stack_Initialize_RAM_check+0x9a>
1004c5ce:	2000      	movs	r0, #0
1004c5d0:	9009      	str	r0, [sp, #36]	@ 0x24
1004c5d2:	48f2      	ldr	r0, [pc, #968]	@ (1004c99c <__arm_cp.0_3>)
1004c5d4:	304c      	adds	r0, #76	@ 0x4c
1004c5d6:	9013      	str	r0, [sp, #76]	@ 0x4c
1004c5d8:	f7ff fa6d 	bl	1004bab6 <ext_adv_scan_enabled_ucfg_weak>
1004c5dc:	2801      	cmp	r0, #1
1004c5de:	d015      	beq.n	1004c60c <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004c5e0:	f7fe f801 	bl	1004a5e6 <data_length_extension_csr_ucfg_weak>
1004c5e4:	2801      	cmp	r0, #1
1004c5e6:	d011      	beq.n	1004c60c <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004c5e8:	2029      	movs	r0, #41	@ 0x29
1004c5ea:	5c30      	ldrb	r0, [r6, r0]
1004c5ec:	2800      	cmp	r0, #0
1004c5ee:	d10d      	bne.n	1004c60c <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004c5f0:	2025      	movs	r0, #37	@ 0x25
1004c5f2:	5c30      	ldrb	r0, [r6, r0]
1004c5f4:	2800      	cmp	r0, #0
1004c5f6:	d109      	bne.n	1004c60c <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004c5f8:	2026      	movs	r0, #38	@ 0x26
1004c5fa:	5c30      	ldrb	r0, [r6, r0]
1004c5fc:	2800      	cmp	r0, #0
1004c5fe:	d002      	beq.n	1004c606 <BlueNRG_Stack_Initialize_RAM_check+0xce>
1004c600:	48e6      	ldr	r0, [pc, #920]	@ (1004c99c <__arm_cp.0_3>)
1004c602:	304c      	adds	r0, #76	@ 0x4c
1004c604:	e001      	b.n	1004c60a <BlueNRG_Stack_Initialize_RAM_check+0xd2>
1004c606:	4628      	mov	r0, r5
1004c608:	3024      	adds	r0, #36	@ 0x24
1004c60a:	9013      	str	r0, [sp, #76]	@ 0x4c
1004c60c:	48e3      	ldr	r0, [pc, #908]	@ (1004c99c <__arm_cp.0_3>)
1004c60e:	306c      	adds	r0, #108	@ 0x6c
1004c610:	9012      	str	r0, [sp, #72]	@ 0x48
1004c612:	f7ff fa50 	bl	1004bab6 <ext_adv_scan_enabled_ucfg_weak>
1004c616:	2801      	cmp	r0, #1
1004c618:	d015      	beq.n	1004c646 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004c61a:	f7fd ffe4 	bl	1004a5e6 <data_length_extension_csr_ucfg_weak>
1004c61e:	2801      	cmp	r0, #1
1004c620:	d011      	beq.n	1004c646 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004c622:	2029      	movs	r0, #41	@ 0x29
1004c624:	5c30      	ldrb	r0, [r6, r0]
1004c626:	2800      	cmp	r0, #0
1004c628:	d10d      	bne.n	1004c646 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004c62a:	2025      	movs	r0, #37	@ 0x25
1004c62c:	5c30      	ldrb	r0, [r6, r0]
1004c62e:	2800      	cmp	r0, #0
1004c630:	d109      	bne.n	1004c646 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004c632:	2026      	movs	r0, #38	@ 0x26
1004c634:	5c30      	ldrb	r0, [r6, r0]
1004c636:	2800      	cmp	r0, #0
1004c638:	d002      	beq.n	1004c640 <BlueNRG_Stack_Initialize_RAM_check+0x108>
1004c63a:	48d8      	ldr	r0, [pc, #864]	@ (1004c99c <__arm_cp.0_3>)
1004c63c:	306c      	adds	r0, #108	@ 0x6c
1004c63e:	e001      	b.n	1004c644 <BlueNRG_Stack_Initialize_RAM_check+0x10c>
1004c640:	4628      	mov	r0, r5
1004c642:	303c      	adds	r0, #60	@ 0x3c
1004c644:	9012      	str	r0, [sp, #72]	@ 0x48
1004c646:	f7ff fa36 	bl	1004bab6 <ext_adv_scan_enabled_ucfg_weak>
1004c64a:	9010      	str	r0, [sp, #64]	@ 0x40
1004c64c:	7eb0      	ldrb	r0, [r6, #26]
1004c64e:	9000      	str	r0, [sp, #0]
1004c650:	7ff0      	ldrb	r0, [r6, #31]
1004c652:	900f      	str	r0, [sp, #60]	@ 0x3c
1004c654:	f7fd ffcf 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c658:	9007      	str	r0, [sp, #28]
1004c65a:	7ff0      	ldrb	r0, [r6, #31]
1004c65c:	9001      	str	r0, [sp, #4]
1004c65e:	f7fe f9e9 	bl	1004aa34 <llc_priv_controller_privacy_csr_ucfg_weak>
1004c662:	9008      	str	r0, [sp, #32]
1004c664:	7ff0      	ldrb	r0, [r6, #31]
1004c666:	9002      	str	r0, [sp, #8]
1004c668:	f000 fa07 	bl	1004ca7a <secure_connections_csr_ucfg_weak>
1004c66c:	2700      	movs	r7, #0
1004c66e:	f7fd ffc0 	bl	1004a5f2 <scan_csr_ucfg_weak>
1004c672:	2801      	cmp	r0, #1
1004c674:	4638      	mov	r0, r7
1004c676:	9515      	str	r5, [sp, #84]	@ 0x54
1004c678:	9716      	str	r7, [sp, #88]	@ 0x58
1004c67a:	d14f      	bne.n	1004c71c <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
1004c67c:	7f70      	ldrb	r0, [r6, #29]
1004c67e:	280a      	cmp	r0, #10
1004c680:	d300      	bcc.n	1004c684 <BlueNRG_Stack_Initialize_RAM_check+0x14c>
1004c682:	200a      	movs	r0, #10
1004c684:	462c      	mov	r4, r5
1004c686:	3438      	adds	r4, #56	@ 0x38
1004c688:	4344      	muls	r4, r0
1004c68a:	3cc0      	subs	r4, #192	@ 0xc0
1004c68c:	2500      	movs	r5, #0
1004c68e:	f7fe f9c9 	bl	1004aa24 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004c692:	2801      	cmp	r0, #1
1004c694:	462f      	mov	r7, r5
1004c696:	d120      	bne.n	1004c6da <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
1004c698:	f7fd ffad 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c69c:	2801      	cmp	r0, #1
1004c69e:	950e      	str	r5, [sp, #56]	@ 0x38
1004c6a0:	d003      	beq.n	1004c6aa <BlueNRG_Stack_Initialize_RAM_check+0x172>
1004c6a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004c6a4:	4618      	mov	r0, r3
1004c6a6:	3054      	adds	r0, #84	@ 0x54
1004c6a8:	e002      	b.n	1004c6b0 <BlueNRG_Stack_Initialize_RAM_check+0x178>
1004c6aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004c6ac:	4618      	mov	r0, r3
1004c6ae:	3048      	adds	r0, #72	@ 0x48
1004c6b0:	49ba      	ldr	r1, [pc, #744]	@ (1004c99c <__arm_cp.0_3>)
1004c6b2:	31e0      	adds	r1, #224	@ 0xe0
1004c6b4:	7fb2      	ldrb	r2, [r6, #30]
1004c6b6:	434a      	muls	r2, r1
1004c6b8:	1810      	adds	r0, r2, r0
1004c6ba:	4619      	mov	r1, r3
1004c6bc:	3160      	adds	r1, #96	@ 0x60
1004c6be:	7ff2      	ldrb	r2, [r6, #31]
1004c6c0:	4091      	lsls	r1, r2
1004c6c2:	461d      	mov	r5, r3
1004c6c4:	1847      	adds	r7, r0, r1
1004c6c6:	f7fd ff96 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c6ca:	2801      	cmp	r0, #1
1004c6cc:	d104      	bne.n	1004c6d8 <BlueNRG_Stack_Initialize_RAM_check+0x1a0>
1004c6ce:	4628      	mov	r0, r5
1004c6d0:	3050      	adds	r0, #80	@ 0x50
1004c6d2:	7af1      	ldrb	r1, [r6, #11]
1004c6d4:	4341      	muls	r1, r0
1004c6d6:	187f      	adds	r7, r7, r1
1004c6d8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1004c6da:	19e0      	adds	r0, r4, r7
1004c6dc:	9014      	str	r0, [sp, #80]	@ 0x50
1004c6de:	f7fe f9a3 	bl	1004aa28 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004c6e2:	4607      	mov	r7, r0
1004c6e4:	f7fe f99e 	bl	1004aa24 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004c6e8:	4604      	mov	r4, r0
1004c6ea:	403c      	ands	r4, r7
1004c6ec:	f7fd ff83 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c6f0:	4020      	ands	r0, r4
1004c6f2:	2801      	cmp	r0, #1
1004c6f4:	d108      	bne.n	1004c708 <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
1004c6f6:	7ef0      	ldrb	r0, [r6, #27]
1004c6f8:	1e40      	subs	r0, r0, #1
1004c6fa:	2103      	movs	r1, #3
1004c6fc:	4301      	orrs	r1, r0
1004c6fe:	7fb0      	ldrb	r0, [r6, #30]
1004c700:	22b0      	movs	r2, #176	@ 0xb0
1004c702:	4342      	muls	r2, r0
1004c704:	43d0      	mvns	r0, r2
1004c706:	1a45      	subs	r5, r0, r1
1004c708:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004c70a:	1944      	adds	r4, r0, r5
1004c70c:	f7ff f9d3 	bl	1004bab6 <ext_adv_scan_enabled_ucfg_weak>
1004c710:	4360      	muls	r0, r4
1004c712:	49a2      	ldr	r1, [pc, #648]	@ (1004c99c <__arm_cp.0_3>)
1004c714:	1808      	adds	r0, r1, r0
1004c716:	302c      	adds	r0, #44	@ 0x2c
1004c718:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004c71a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004c71c:	9006      	str	r0, [sp, #24]
1004c71e:	f7fd ff6a 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c722:	2801      	cmp	r0, #1
1004c724:	4639      	mov	r1, r7
1004c726:	d109      	bne.n	1004c73c <BlueNRG_Stack_Initialize_RAM_check+0x204>
1004c728:	f7fd ff67 	bl	1004a5fa <l2c_cos_csr_ucfg_weak>
1004c72c:	2801      	cmp	r0, #1
1004c72e:	4639      	mov	r1, r7
1004c730:	d104      	bne.n	1004c73c <BlueNRG_Stack_Initialize_RAM_check+0x204>
1004c732:	2022      	movs	r0, #34	@ 0x22
1004c734:	5c30      	ldrb	r0, [r6, r0]
1004c736:	4629      	mov	r1, r5
1004c738:	3114      	adds	r1, #20
1004c73a:	4341      	muls	r1, r0
1004c73c:	9105      	str	r1, [sp, #20]
1004c73e:	f7fe f971 	bl	1004aa24 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004c742:	2801      	cmp	r0, #1
1004c744:	4638      	mov	r0, r7
1004c746:	d121      	bne.n	1004c78c <BlueNRG_Stack_Initialize_RAM_check+0x254>
1004c748:	4894      	ldr	r0, [pc, #592]	@ (1004c99c <__arm_cp.0_3>)
1004c74a:	30d4      	adds	r0, #212	@ 0xd4
1004c74c:	7eb1      	ldrb	r1, [r6, #26]
1004c74e:	4341      	muls	r1, r0
1004c750:	4628      	mov	r0, r5
1004c752:	3048      	adds	r0, #72	@ 0x48
1004c754:	7af2      	ldrb	r2, [r6, #11]
1004c756:	4342      	muls	r2, r0
1004c758:	1854      	adds	r4, r2, r1
1004c75a:	2700      	movs	r7, #0
1004c75c:	f7fe f964 	bl	1004aa28 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004c760:	2801      	cmp	r0, #1
1004c762:	d110      	bne.n	1004c786 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1004c764:	f7fd ff47 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c768:	2801      	cmp	r0, #1
1004c76a:	d10c      	bne.n	1004c786 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1004c76c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1004c76e:	4610      	mov	r0, r2
1004c770:	3058      	adds	r0, #88	@ 0x58
1004c772:	7f31      	ldrb	r1, [r6, #28]
1004c774:	4341      	muls	r1, r0
1004c776:	4610      	mov	r0, r2
1004c778:	3060      	adds	r0, #96	@ 0x60
1004c77a:	7ef2      	ldrb	r2, [r6, #27]
1004c77c:	4342      	muls	r2, r0
1004c77e:	1850      	adds	r0, r2, r1
1004c780:	3884      	subs	r0, #132	@ 0x84
1004c782:	7eb7      	ldrb	r7, [r6, #26]
1004c784:	4347      	muls	r7, r0
1004c786:	19e0      	adds	r0, r4, r7
1004c788:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004c78a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004c78c:	900e      	str	r0, [sp, #56]	@ 0x38
1004c78e:	f7fd ff26 	bl	1004a5de <cte_csr_ucfg_weak>
1004c792:	2801      	cmp	r0, #1
1004c794:	4638      	mov	r0, r7
1004c796:	d133      	bne.n	1004c800 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
1004c798:	f7fd ff2d 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c79c:	2801      	cmp	r0, #1
1004c79e:	d002      	beq.n	1004c7a6 <BlueNRG_Stack_Initialize_RAM_check+0x26e>
1004c7a0:	462f      	mov	r7, r5
1004c7a2:	375c      	adds	r7, #92	@ 0x5c
1004c7a4:	e004      	b.n	1004c7b0 <BlueNRG_Stack_Initialize_RAM_check+0x278>
1004c7a6:	4628      	mov	r0, r5
1004c7a8:	3060      	adds	r0, #96	@ 0x60
1004c7aa:	7af7      	ldrb	r7, [r6, #11]
1004c7ac:	4347      	muls	r7, r0
1004c7ae:	3f0c      	subs	r7, #12
1004c7b0:	2523      	movs	r5, #35	@ 0x23
1004c7b2:	5d70      	ldrb	r0, [r6, r5]
1004c7b4:	2400      	movs	r4, #0
1004c7b6:	2800      	cmp	r0, #0
1004c7b8:	4620      	mov	r0, r4
1004c7ba:	d005      	beq.n	1004c7c8 <BlueNRG_Stack_Initialize_RAM_check+0x290>
1004c7bc:	f7fd ff1b 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c7c0:	5d70      	ldrb	r0, [r6, r5]
1004c7c2:	4240      	negs	r0, r0
1004c7c4:	2103      	movs	r1, #3
1004c7c6:	4388      	bics	r0, r1
1004c7c8:	19c0      	adds	r0, r0, r7
1004c7ca:	2724      	movs	r7, #36	@ 0x24
1004c7cc:	5df1      	ldrb	r1, [r6, r7]
1004c7ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1004c7d0:	3264      	adds	r2, #100	@ 0x64
1004c7d2:	434a      	muls	r2, r1
1004c7d4:	1885      	adds	r5, r0, r2
1004c7d6:	f7fd ff0c 	bl	1004a5f2 <scan_csr_ucfg_weak>
1004c7da:	2801      	cmp	r0, #1
1004c7dc:	d10d      	bne.n	1004c7fa <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004c7de:	f7ff f96a 	bl	1004bab6 <ext_adv_scan_enabled_ucfg_weak>
1004c7e2:	2801      	cmp	r0, #1
1004c7e4:	d109      	bne.n	1004c7fa <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004c7e6:	f7fe f91d 	bl	1004aa24 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004c7ea:	2801      	cmp	r0, #1
1004c7ec:	d105      	bne.n	1004c7fa <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004c7ee:	5df4      	ldrb	r4, [r6, r7]
1004c7f0:	2c00      	cmp	r4, #0
1004c7f2:	9815      	ldr	r0, [sp, #84]	@ 0x54
1004c7f4:	d001      	beq.n	1004c7fa <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004c7f6:	4604      	mov	r4, r0
1004c7f8:	3450      	adds	r4, #80	@ 0x50
1004c7fa:	1928      	adds	r0, r5, r4
1004c7fc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004c7fe:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004c800:	900d      	str	r0, [sp, #52]	@ 0x34
1004c802:	f7fd fef8 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c806:	2801      	cmp	r0, #1
1004c808:	4639      	mov	r1, r7
1004c80a:	d109      	bne.n	1004c820 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1004c80c:	f7fd feed 	bl	1004a5ea <pcl_csr_ucfg_weak>
1004c810:	2801      	cmp	r0, #1
1004c812:	4639      	mov	r1, r7
1004c814:	d104      	bne.n	1004c820 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1004c816:	4628      	mov	r0, r5
1004c818:	3048      	adds	r0, #72	@ 0x48
1004c81a:	7af1      	ldrb	r1, [r6, #11]
1004c81c:	4341      	muls	r1, r0
1004c81e:	3914      	subs	r1, #20
1004c820:	910c      	str	r1, [sp, #48]	@ 0x30
1004c822:	f7fd fee8 	bl	1004a5f6 <conn_supp_csr_ucfg_weak>
1004c826:	2801      	cmp	r0, #1
1004c828:	463a      	mov	r2, r7
1004c82a:	d108      	bne.n	1004c83e <BlueNRG_Stack_Initialize_RAM_check+0x306>
1004c82c:	f7fd fe5e 	bl	1004a4ec <chc_csr_ucfg_weak>
1004c830:	2801      	cmp	r0, #1
1004c832:	463a      	mov	r2, r7
1004c834:	d103      	bne.n	1004c83e <BlueNRG_Stack_Initialize_RAM_check+0x306>
1004c836:	4628      	mov	r0, r5
1004c838:	304c      	adds	r0, #76	@ 0x4c
1004c83a:	7af2      	ldrb	r2, [r6, #11]
1004c83c:	4342      	muls	r2, r0
1004c83e:	2026      	movs	r0, #38	@ 0x26
1004c840:	5c31      	ldrb	r1, [r6, r0]
1004c842:	2025      	movs	r0, #37	@ 0x25
1004c844:	5c34      	ldrb	r4, [r6, r0]
1004c846:	1863      	adds	r3, r4, r1
1004c848:	2029      	movs	r0, #41	@ 0x29
1004c84a:	5c30      	ldrb	r0, [r6, r0]
1004c84c:	9304      	str	r3, [sp, #16]
1004c84e:	2b00      	cmp	r3, #0
1004c850:	9014      	str	r0, [sp, #80]	@ 0x50
1004c852:	d010      	beq.n	1004c876 <BlueNRG_Stack_Initialize_RAM_check+0x33e>
1004c854:	2028      	movs	r0, #40	@ 0x28
1004c856:	5c33      	ldrb	r3, [r6, r0]
1004c858:	4628      	mov	r0, r5
1004c85a:	3060      	adds	r0, #96	@ 0x60
1004c85c:	4358      	muls	r0, r3
1004c85e:	38f8      	subs	r0, #248	@ 0xf8
1004c860:	4348      	muls	r0, r1
1004c862:	2327      	movs	r3, #39	@ 0x27
1004c864:	5cf3      	ldrb	r3, [r6, r3]
1004c866:	3554      	adds	r5, #84	@ 0x54
1004c868:	435d      	muls	r5, r3
1004c86a:	4b4c      	ldr	r3, [pc, #304]	@ (1004c99c <__arm_cp.0_3>)
1004c86c:	195b      	adds	r3, r3, r5
1004c86e:	3348      	adds	r3, #72	@ 0x48
1004c870:	4363      	muls	r3, r4
1004c872:	181f      	adds	r7, r3, r0
1004c874:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004c876:	2800      	cmp	r0, #0
1004c878:	9716      	str	r7, [sp, #88]	@ 0x58
1004c87a:	920b      	str	r2, [sp, #44]	@ 0x2c
1004c87c:	d00d      	beq.n	1004c89a <BlueNRG_Stack_Initialize_RAM_check+0x362>
1004c87e:	4602      	mov	r2, r0
1004c880:	202a      	movs	r0, #42	@ 0x2a
1004c882:	5c30      	ldrb	r0, [r6, r0]
1004c884:	4d45      	ldr	r5, [pc, #276]	@ (1004c99c <__arm_cp.0_3>)
1004c886:	462b      	mov	r3, r5
1004c888:	33b0      	adds	r3, #176	@ 0xb0
1004c88a:	4343      	muls	r3, r0
1004c88c:	4637      	mov	r7, r6
1004c88e:	462e      	mov	r6, r5
1004c890:	36c8      	adds	r6, #200	@ 0xc8
1004c892:	4356      	muls	r6, r2
1004c894:	18f3      	adds	r3, r6, r3
1004c896:	3b48      	subs	r3, #72	@ 0x48
1004c898:	e003      	b.n	1004c8a2 <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1004c89a:	202a      	movs	r0, #42	@ 0x2a
1004c89c:	5c30      	ldrb	r0, [r6, r0]
1004c89e:	2300      	movs	r3, #0
1004c8a0:	4637      	mov	r7, r6
1004c8a2:	2628      	movs	r6, #40	@ 0x28
1004c8a4:	5dbe      	ldrb	r6, [r7, r6]
1004c8a6:	4371      	muls	r1, r6
1004c8a8:	1809      	adds	r1, r1, r0
1004c8aa:	2627      	movs	r6, #39	@ 0x27
1004c8ac:	463d      	mov	r5, r7
1004c8ae:	5dbe      	ldrb	r6, [r7, r6]
1004c8b0:	4374      	muls	r4, r6
1004c8b2:	1824      	adds	r4, r4, r0
1004c8b4:	1860      	adds	r0, r4, r1
1004c8b6:	d013      	beq.n	1004c8e0 <__arm_cp.0_6+0x4>
1004c8b8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1004c8ba:	463e      	mov	r6, r7
1004c8bc:	364c      	adds	r6, #76	@ 0x4c
1004c8be:	4366      	muls	r6, r4
1004c8c0:	463c      	mov	r4, r7
1004c8c2:	3434      	adds	r4, #52	@ 0x34
1004c8c4:	434c      	muls	r4, r1
1004c8c6:	19a1      	adds	r1, r4, r6
1004c8c8:	463c      	mov	r4, r7
1004c8ca:	345c      	adds	r4, #92	@ 0x5c
1004c8cc:	4344      	muls	r4, r0
1004c8ce:	190c      	adds	r4, r1, r4
1004c8d0:	3c14      	subs	r4, #20
1004c8d2:	e007      	b.n	1004c8e4 <__arm_cp.0_6+0x8>

1004c8d4 <__arm_cp.0_4>:
1004c8d4:	fffffc18 	.word	0xfffffc18

1004c8d8 <__arm_cp.0_5>:
1004c8d8:	20000668 	.word	0x20000668

1004c8dc <__arm_cp.0_6>:
1004c8dc:	fffffd70 	.word	0xfffffd70
1004c8e0:	2400      	movs	r4, #0
1004c8e2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1004c8e4:	9903      	ldr	r1, [sp, #12]
1004c8e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1004c8e8:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004c8ea:	1808      	adds	r0, r1, r0
1004c8ec:	4639      	mov	r1, r7
1004c8ee:	3144      	adds	r1, #68	@ 0x44
1004c8f0:	4371      	muls	r1, r6
1004c8f2:	1840      	adds	r0, r0, r1
1004c8f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004c8f6:	1840      	adds	r0, r0, r1
1004c8f8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004c8fa:	1840      	adds	r0, r0, r1
1004c8fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
1004c8fe:	1841      	adds	r1, r0, r1
1004c900:	4638      	mov	r0, r7
1004c902:	3060      	adds	r0, #96	@ 0x60
1004c904:	4606      	mov	r6, r0
1004c906:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1004c908:	4096      	lsls	r6, r2
1004c90a:	1989      	adds	r1, r1, r6
1004c90c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1004c90e:	2a01      	cmp	r2, #1
1004c910:	d106      	bne.n	1004c920 <__arm_cp.0_6+0x44>
1004c912:	4e22      	ldr	r6, [pc, #136]	@ (1004c99c <__arm_cp.0_3>)
1004c914:	9a00      	ldr	r2, [sp, #0]
1004c916:	4356      	muls	r6, r2
1004c918:	1871      	adds	r1, r6, r1
1004c91a:	2645      	movs	r6, #69	@ 0x45
1004c91c:	00b6      	lsls	r6, r6, #2
1004c91e:	1989      	adds	r1, r1, r6
1004c920:	462e      	mov	r6, r5
1004c922:	9d07      	ldr	r5, [sp, #28]
1004c924:	9a05      	ldr	r2, [sp, #20]
1004c926:	2d01      	cmp	r5, #1
1004c928:	d102      	bne.n	1004c930 <__arm_cp.0_6+0x54>
1004c92a:	9d01      	ldr	r5, [sp, #4]
1004c92c:	40a8      	lsls	r0, r5
1004c92e:	1809      	adds	r1, r1, r0
1004c930:	9808      	ldr	r0, [sp, #32]
1004c932:	2801      	cmp	r0, #1
1004c934:	d105      	bne.n	1004c942 <__arm_cp.0_6+0x66>
1004c936:	4638      	mov	r0, r7
1004c938:	3018      	adds	r0, #24
1004c93a:	9d02      	ldr	r5, [sp, #8]
1004c93c:	40a8      	lsls	r0, r5
1004c93e:	1841      	adds	r1, r0, r1
1004c940:	3970      	subs	r1, #112	@ 0x70
1004c942:	9806      	ldr	r0, [sp, #24]
1004c944:	9d04      	ldr	r5, [sp, #16]
1004c946:	1808      	adds	r0, r1, r0
1004c948:	1880      	adds	r0, r0, r2
1004c94a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1004c94c:	1840      	adds	r0, r0, r1
1004c94e:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004c950:	1840      	adds	r0, r0, r1
1004c952:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004c954:	1840      	adds	r0, r0, r1
1004c956:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004c958:	1840      	adds	r0, r0, r1
1004c95a:	9914      	ldr	r1, [sp, #80]	@ 0x50
1004c95c:	42cd      	cmn	r5, r1
1004c95e:	d001      	beq.n	1004c964 <__arm_cp.0_6+0x88>
1004c960:	1838      	adds	r0, r7, r0
1004c962:	3058      	adds	r0, #88	@ 0x58
1004c964:	9916      	ldr	r1, [sp, #88]	@ 0x58
1004c966:	1840      	adds	r0, r0, r1
1004c968:	18c0      	adds	r0, r0, r3
1004c96a:	1904      	adds	r4, r0, r4
1004c96c:	f7fc ff4f 	bl	1004980e <log_csr_ucfg_weak>
1004c970:	2801      	cmp	r0, #1
1004c972:	d100      	bne.n	1004c976 <__arm_cp.0_6+0x9a>
1004c974:	19e4      	adds	r4, r4, r7
1004c976:	6870      	ldr	r0, [r6, #4]
1004c978:	1820      	adds	r0, r4, r0
1004c97a:	2103      	movs	r1, #3
1004c97c:	43c9      	mvns	r1, r1
1004c97e:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
1004c980:	1cd2      	adds	r2, r2, #3
1004c982:	400a      	ands	r2, r1
1004c984:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1004c986:	1cdb      	adds	r3, r3, #3
1004c988:	400b      	ands	r3, r1
1004c98a:	189a      	adds	r2, r3, r2
1004c98c:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1004c98e:	1cdb      	adds	r3, r3, #3
1004c990:	400b      	ands	r3, r1
1004c992:	18d1      	adds	r1, r2, r3
1004c994:	1a40      	subs	r0, r0, r1
1004c996:	b017      	add	sp, #92	@ 0x5c
1004c998:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c99a:	46c0      	nop			@ (mov r8, r8)

1004c99c <__arm_cp.0_3>:
1004c99c:	fffffe90 	.word	0xfffffe90

1004c9a0 <smp_crt_diversify>:
1004c9a0:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1004c9a2:	780d      	ldrb	r5, [r1, #0]
1004c9a4:	466c      	mov	r4, sp
1004c9a6:	7025      	strb	r5, [r4, #0]
1004c9a8:	7849      	ldrb	r1, [r1, #1]
1004c9aa:	7061      	strb	r1, [r4, #1]
1004c9ac:	7811      	ldrb	r1, [r2, #0]
1004c9ae:	70a1      	strb	r1, [r4, #2]
1004c9b0:	7851      	ldrb	r1, [r2, #1]
1004c9b2:	70e1      	strb	r1, [r4, #3]
1004c9b4:	2100      	movs	r1, #0
1004c9b6:	9103      	str	r1, [sp, #12]
1004c9b8:	9102      	str	r1, [sp, #8]
1004c9ba:	9101      	str	r1, [sp, #4]
1004c9bc:	4621      	mov	r1, r4
1004c9be:	461a      	mov	r2, r3
1004c9c0:	f000 fb80 	bl	1004d0c4 <hci_le_encrypt>
1004c9c4:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

1004c9c8 <smp_sap_crt_generate_local_irk>:
1004c9c8:	b5e0      	push	{r5, r6, r7, lr}
1004c9ca:	4603      	mov	r3, r0
1004c9cc:	a901      	add	r1, sp, #4
1004c9ce:	2001      	movs	r0, #1
1004c9d0:	8008      	strh	r0, [r1, #0]
1004c9d2:	466a      	mov	r2, sp
1004c9d4:	2000      	movs	r0, #0
1004c9d6:	8010      	strh	r0, [r2, #0]
1004c9d8:	4802      	ldr	r0, [pc, #8]	@ (1004c9e4 <__arm_cp.2_0>)
1004c9da:	6800      	ldr	r0, [r0, #0]
1004c9dc:	3018      	adds	r0, #24
1004c9de:	f7ff ffdf 	bl	1004c9a0 <smp_crt_diversify>
1004c9e2:	bd8c      	pop	{r2, r3, r7, pc}

1004c9e4 <__arm_cp.2_0>:
1004c9e4:	20000648 	.word	0x20000648

1004c9e8 <smp_sap_crt_generate_rpa>:
1004c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c9ea:	b087      	sub	sp, #28
1004c9ec:	9000      	str	r0, [sp, #0]
1004c9ee:	ae03      	add	r6, sp, #12
1004c9f0:	4630      	mov	r0, r6
1004c9f2:	f7ff ffe9 	bl	1004c9c8 <smp_sap_crt_generate_local_irk>
1004c9f6:	2700      	movs	r7, #0
1004c9f8:	4638      	mov	r0, r7
1004c9fa:	f000 fa3e 	bl	1004ce7a <Hal_Get_Random_Number>
1004c9fe:	0a01      	lsrs	r1, r0, #8
1004ca00:	ad02      	add	r5, sp, #8
1004ca02:	7069      	strb	r1, [r5, #1]
1004ca04:	243f      	movs	r4, #63	@ 0x3f
1004ca06:	4004      	ands	r4, r0
1004ca08:	3440      	adds	r4, #64	@ 0x40
1004ca0a:	4638      	mov	r0, r7
1004ca0c:	f000 fa35 	bl	1004ce7a <Hal_Get_Random_Number>
1004ca10:	70ac      	strb	r4, [r5, #2]
1004ca12:	7028      	strb	r0, [r5, #0]
1004ca14:	af01      	add	r7, sp, #4
1004ca16:	4630      	mov	r0, r6
1004ca18:	4629      	mov	r1, r5
1004ca1a:	463a      	mov	r2, r7
1004ca1c:	f000 f80e 	bl	1004ca3c <smp_crt_calculate_hash>
1004ca20:	2603      	movs	r6, #3
1004ca22:	9c00      	ldr	r4, [sp, #0]
1004ca24:	4620      	mov	r0, r4
1004ca26:	4639      	mov	r1, r7
1004ca28:	4632      	mov	r2, r6
1004ca2a:	f7f4 ff67 	bl	100418fc <BLEPLAT_MemCpy>
1004ca2e:	1ce0      	adds	r0, r4, #3
1004ca30:	4629      	mov	r1, r5
1004ca32:	4632      	mov	r2, r6
1004ca34:	f7f4 ff62 	bl	100418fc <BLEPLAT_MemCpy>
1004ca38:	b007      	add	sp, #28
1004ca3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004ca3c <smp_crt_calculate_hash>:
1004ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ca3e:	b089      	sub	sp, #36	@ 0x24
1004ca40:	9200      	str	r2, [sp, #0]
1004ca42:	460f      	mov	r7, r1
1004ca44:	4605      	mov	r5, r0
1004ca46:	ae05      	add	r6, sp, #20
1004ca48:	2100      	movs	r1, #0
1004ca4a:	2210      	movs	r2, #16
1004ca4c:	4630      	mov	r0, r6
1004ca4e:	f7f4 ff65 	bl	1004191c <BLEPLAT_MemSet>
1004ca52:	2403      	movs	r4, #3
1004ca54:	4630      	mov	r0, r6
1004ca56:	4639      	mov	r1, r7
1004ca58:	4622      	mov	r2, r4
1004ca5a:	f7f4 ff4f 	bl	100418fc <BLEPLAT_MemCpy>
1004ca5e:	af01      	add	r7, sp, #4
1004ca60:	4628      	mov	r0, r5
1004ca62:	4631      	mov	r1, r6
1004ca64:	463a      	mov	r2, r7
1004ca66:	f000 fb2d 	bl	1004d0c4 <hci_le_encrypt>
1004ca6a:	9800      	ldr	r0, [sp, #0]
1004ca6c:	4639      	mov	r1, r7
1004ca6e:	4622      	mov	r2, r4
1004ca70:	f7f4 ff44 	bl	100418fc <BLEPLAT_MemCpy>
1004ca74:	b009      	add	sp, #36	@ 0x24
1004ca76:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004ca78 <smp_init_ucfg_weak>:
1004ca78:	4770      	bx	lr

1004ca7a <secure_connections_csr_ucfg_weak>:
1004ca7a:	2000      	movs	r0, #0
1004ca7c:	4770      	bx	lr

1004ca7e <nvm_dev_id_data_get_record>:
1004ca7e:	b5e0      	push	{r5, r6, r7, lr}
1004ca80:	4603      	mov	r3, r0
1004ca82:	2026      	movs	r0, #38	@ 0x26
1004ca84:	9000      	str	r0, [sp, #0]
1004ca86:	2102      	movs	r1, #2
1004ca88:	2000      	movs	r0, #0
1004ca8a:	4602      	mov	r2, r0
1004ca8c:	f7f4 febe 	bl	1004180c <BLEPLAT_NvmGet>
1004ca90:	2800      	cmp	r0, #0
1004ca92:	d000      	beq.n	1004ca96 <nvm_dev_id_data_get_record+0x18>
1004ca94:	2081      	movs	r0, #129	@ 0x81
1004ca96:	bd8c      	pop	{r2, r3, r7, pc}

1004ca98 <nvm_dev_id_data_add_record>:
1004ca98:	b5e0      	push	{r5, r6, r7, lr}
1004ca9a:	4601      	mov	r1, r0
1004ca9c:	2300      	movs	r3, #0
1004ca9e:	9300      	str	r3, [sp, #0]
1004caa0:	2002      	movs	r0, #2
1004caa2:	2226      	movs	r2, #38	@ 0x26
1004caa4:	f7f4 fe64 	bl	10041770 <BLEPLAT_NvmAdd>
1004caa8:	2800      	cmp	r0, #0
1004caaa:	d000      	beq.n	1004caae <nvm_dev_id_data_add_record+0x16>
1004caac:	2081      	movs	r0, #129	@ 0x81
1004caae:	bd8c      	pop	{r2, r3, r7, pc}

1004cab0 <tsk_init>:
1004cab0:	4803      	ldr	r0, [pc, #12]	@ (1004cac0 <__arm_cp.0_0>)
1004cab2:	6800      	ldr	r0, [r0, #0]
1004cab4:	2100      	movs	r1, #0
1004cab6:	6081      	str	r1, [r0, #8]
1004cab8:	60c1      	str	r1, [r0, #12]
1004caba:	6101      	str	r1, [r0, #16]
1004cabc:	6001      	str	r1, [r0, #0]
1004cabe:	4770      	bx	lr

1004cac0 <__arm_cp.0_0>:
1004cac0:	2000069c 	.word	0x2000069c

1004cac4 <tsk_scheduler>:
1004cac4:	b570      	push	{r4, r5, r6, lr}
1004cac6:	4d17      	ldr	r5, [pc, #92]	@ (1004cb24 <__arm_cp.1_0>)
1004cac8:	6828      	ldr	r0, [r5, #0]
1004caca:	f3ef 8110 	mrs	r1, PRIMASK
1004cace:	b672      	cpsid	i
1004cad0:	6801      	ldr	r1, [r0, #0]
1004cad2:	2600      	movs	r6, #0
1004cad4:	6006      	str	r6, [r0, #0]
1004cad6:	6842      	ldr	r2, [r0, #4]
1004cad8:	430a      	orrs	r2, r1
1004cada:	6042      	str	r2, [r0, #4]
1004cadc:	b662      	cpsie	i
1004cade:	682c      	ldr	r4, [r5, #0]
1004cae0:	3410      	adds	r4, #16
1004cae2:	6820      	ldr	r0, [r4, #0]
1004cae4:	2800      	cmp	r0, #0
1004cae6:	d00f      	beq.n	1004cb08 <tsk_scheduler+0x44>
1004cae8:	4620      	mov	r0, r4
1004caea:	f000 f831 	bl	1004cb50 <lsbit>
1004caee:	0080      	lsls	r0, r0, #2
1004caf0:	6829      	ldr	r1, [r5, #0]
1004caf2:	1808      	adds	r0, r1, r0
1004caf4:	f3ef 8210 	mrs	r2, PRIMASK
1004caf8:	b672      	cpsid	i
1004cafa:	6882      	ldr	r2, [r0, #8]
1004cafc:	6086      	str	r6, [r0, #8]
1004cafe:	6848      	ldr	r0, [r1, #4]
1004cb00:	4310      	orrs	r0, r2
1004cb02:	6048      	str	r0, [r1, #4]
1004cb04:	b662      	cpsie	i
1004cb06:	e7ec      	b.n	1004cae2 <tsk_scheduler+0x1e>
1004cb08:	6828      	ldr	r0, [r5, #0]
1004cb0a:	1d04      	adds	r4, r0, #4
1004cb0c:	4d06      	ldr	r5, [pc, #24]	@ (1004cb28 <__arm_cp.1_1>)
1004cb0e:	6820      	ldr	r0, [r4, #0]
1004cb10:	2800      	cmp	r0, #0
1004cb12:	d006      	beq.n	1004cb22 <tsk_scheduler+0x5e>
1004cb14:	4620      	mov	r0, r4
1004cb16:	f000 f81b 	bl	1004cb50 <lsbit>
1004cb1a:	0081      	lsls	r1, r0, #2
1004cb1c:	5869      	ldr	r1, [r5, r1]
1004cb1e:	4788      	blx	r1
1004cb20:	e7f5      	b.n	1004cb0e <tsk_scheduler+0x4a>
1004cb22:	bd70      	pop	{r4, r5, r6, pc}

1004cb24 <__arm_cp.1_0>:
1004cb24:	2000069c 	.word	0x2000069c

1004cb28 <__arm_cp.1_1>:
1004cb28:	1004e7f8 	.word	0x1004e7f8

1004cb2c <tsk_notify_idx>:
1004cb2c:	211f      	movs	r1, #31
1004cb2e:	4001      	ands	r1, r0
1004cb30:	2201      	movs	r2, #1
1004cb32:	408a      	lsls	r2, r1
1004cb34:	f3ef 8110 	mrs	r1, PRIMASK
1004cb38:	b672      	cpsid	i
1004cb3a:	4904      	ldr	r1, [pc, #16]	@ (1004cb4c <__arm_cp.3_0>)
1004cb3c:	6809      	ldr	r1, [r1, #0]
1004cb3e:	0940      	lsrs	r0, r0, #5
1004cb40:	0080      	lsls	r0, r0, #2
1004cb42:	580b      	ldr	r3, [r1, r0]
1004cb44:	4313      	orrs	r3, r2
1004cb46:	500b      	str	r3, [r1, r0]
1004cb48:	b662      	cpsie	i
1004cb4a:	4770      	bx	lr

1004cb4c <__arm_cp.3_0>:
1004cb4c:	2000069c 	.word	0x2000069c

1004cb50 <lsbit>:
1004cb50:	f3ef 8110 	mrs	r1, PRIMASK
1004cb54:	b672      	cpsid	i
1004cb56:	6801      	ldr	r1, [r0, #0]
1004cb58:	424a      	negs	r2, r1
1004cb5a:	400a      	ands	r2, r1
1004cb5c:	4051      	eors	r1, r2
1004cb5e:	6001      	str	r1, [r0, #0]
1004cb60:	4803      	ldr	r0, [pc, #12]	@ (1004cb70 <__arm_cp.7_0>)
1004cb62:	4350      	muls	r0, r2
1004cb64:	0ec0      	lsrs	r0, r0, #27
1004cb66:	a103      	add	r1, pc, #12	@ (adr r1, 1004cb74 <__arm_cp.7_0+0x4>)
1004cb68:	5c08      	ldrb	r0, [r1, r0]
1004cb6a:	b662      	cpsie	i
1004cb6c:	4770      	bx	lr
1004cb6e:	46c0      	nop			@ (mov r8, r8)

1004cb70 <__arm_cp.7_0>:
1004cb70:	04653adf 	.word	0x04653adf
1004cb74:	06020100 	.word	0x06020100
1004cb78:	10070b03 	.word	0x10070b03
1004cb7c:	150c0e04 	.word	0x150c0e04
1004cb80:	1a111708 	.word	0x1a111708
1004cb84:	0f0a051f 	.word	0x0f0a051f
1004cb88:	1916140d 	.word	0x1916140d
1004cb8c:	1813091e 	.word	0x1813091e
1004cb90:	1b1c121d 	.word	0x1b1c121d

1004cb94 <CST_init>:
1004cb94:	b510      	push	{r4, lr}
1004cb96:	2412      	movs	r4, #18
1004cb98:	2800      	cmp	r0, #0
1004cb9a:	d00e      	beq.n	1004cbba <CST_init+0x26>
1004cb9c:	2a00      	cmp	r2, #0
1004cb9e:	d00c      	beq.n	1004cbba <CST_init+0x26>
1004cba0:	2b0b      	cmp	r3, #11
1004cba2:	d80a      	bhi.n	1004cbba <CST_init+0x26>
1004cba4:	7041      	strb	r1, [r0, #1]
1004cba6:	7003      	strb	r3, [r0, #0]
1004cba8:	6a03      	ldr	r3, [r0, #32]
1004cbaa:	5459      	strb	r1, [r3, r1]
1004cbac:	1e49      	subs	r1, r1, #1
1004cbae:	1c4b      	adds	r3, r1, #1
1004cbb0:	d3fa      	bcc.n	1004cba8 <CST_init+0x14>
1004cbb2:	6102      	str	r2, [r0, #16]
1004cbb4:	2400      	movs	r4, #0
1004cbb6:	7504      	strb	r4, [r0, #20]
1004cbb8:	61c0      	str	r0, [r0, #28]
1004cbba:	4620      	mov	r0, r4
1004cbbc:	bd10      	pop	{r4, pc}

1004cbbe <CST_stop>:
1004cbbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004cbc0:	4605      	mov	r5, r0
1004cbc2:	2012      	movs	r0, #18
1004cbc4:	2d00      	cmp	r5, #0
1004cbc6:	d01b      	beq.n	1004cc00 <CST_stop+0x42>
1004cbc8:	460c      	mov	r4, r1
1004cbca:	786a      	ldrb	r2, [r5, #1]
1004cbcc:	428a      	cmp	r2, r1
1004cbce:	d917      	bls.n	1004cc00 <CST_stop+0x42>
1004cbd0:	6a2b      	ldr	r3, [r5, #32]
1004cbd2:	5d19      	ldrb	r1, [r3, r4]
1004cbd4:	42a1      	cmp	r1, r4
1004cbd6:	d101      	bne.n	1004cbdc <CST_stop+0x1e>
1004cbd8:	2000      	movs	r0, #0
1004cbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004cbdc:	4617      	mov	r7, r2
1004cbde:	463e      	mov	r6, r7
1004cbe0:	5ddf      	ldrb	r7, [r3, r7]
1004cbe2:	4297      	cmp	r7, r2
1004cbe4:	d001      	beq.n	1004cbea <CST_stop+0x2c>
1004cbe6:	42a7      	cmp	r7, r4
1004cbe8:	d1f9      	bne.n	1004cbde <CST_stop+0x20>
1004cbea:	2000      	movs	r0, #0
1004cbec:	4297      	cmp	r7, r2
1004cbee:	d005      	beq.n	1004cbfc <CST_stop+0x3e>
1004cbf0:	5599      	strb	r1, [r3, r6]
1004cbf2:	4296      	cmp	r6, r2
1004cbf4:	d102      	bne.n	1004cbfc <CST_stop+0x3e>
1004cbf6:	4628      	mov	r0, r5
1004cbf8:	f000 f803 	bl	1004cc02 <Timer_TryStartFirstActive>
1004cbfc:	6a29      	ldr	r1, [r5, #32]
1004cbfe:	550c      	strb	r4, [r1, r4]
1004cc00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004cc02 <Timer_TryStartFirstActive>:
1004cc02:	b510      	push	{r4, lr}
1004cc04:	7842      	ldrb	r2, [r0, #1]
1004cc06:	428a      	cmp	r2, r1
1004cc08:	d107      	bne.n	1004cc1a <Timer_TryStartFirstActive+0x18>
1004cc0a:	7d01      	ldrb	r1, [r0, #20]
1004cc0c:	2400      	movs	r4, #0
1004cc0e:	2900      	cmp	r1, #0
1004cc10:	d009      	beq.n	1004cc26 <Timer_TryStartFirstActive+0x24>
1004cc12:	3008      	adds	r0, #8
1004cc14:	f7f4 ff10 	bl	10041a38 <BLEPLAT_StopTimer>
1004cc18:	e005      	b.n	1004cc26 <Timer_TryStartFirstActive+0x24>
1004cc1a:	0049      	lsls	r1, r1, #1
1004cc1c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
1004cc1e:	5e51      	ldrsh	r1, [r2, r1]
1004cc20:	f000 f86a 	bl	1004ccf8 <Timer_StartFirstActive_sysT>
1004cc24:	4604      	mov	r4, r0
1004cc26:	4620      	mov	r0, r4
1004cc28:	bd10      	pop	{r4, pc}

1004cc2a <CST_start>:
1004cc2a:	b5f0      	push	{r4, r5, r6, r7, lr}
1004cc2c:	b085      	sub	sp, #20
1004cc2e:	2612      	movs	r6, #18
1004cc30:	2800      	cmp	r0, #0
1004cc32:	d05e      	beq.n	1004ccf2 <CST_start+0xc8>
1004cc34:	461f      	mov	r7, r3
1004cc36:	460d      	mov	r5, r1
1004cc38:	4604      	mov	r4, r0
1004cc3a:	7843      	ldrb	r3, [r0, #1]
1004cc3c:	428b      	cmp	r3, r1
1004cc3e:	d958      	bls.n	1004ccf2 <CST_start+0xc8>
1004cc40:	7820      	ldrb	r0, [r4, #0]
1004cc42:	2105      	movs	r1, #5
1004cc44:	0309      	lsls	r1, r1, #12
1004cc46:	4081      	lsls	r1, r0
1004cc48:	428f      	cmp	r7, r1
1004cc4a:	d852      	bhi.n	1004ccf2 <CST_start+0xc8>
1004cc4c:	9204      	str	r2, [sp, #16]
1004cc4e:	9302      	str	r3, [sp, #8]
1004cc50:	f7f4 fed7 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004cc54:	4602      	mov	r2, r0
1004cc56:	7823      	ldrb	r3, [r4, #0]
1004cc58:	6a20      	ldr	r0, [r4, #32]
1004cc5a:	5d40      	ldrb	r0, [r0, r5]
1004cc5c:	42a8      	cmp	r0, r5
1004cc5e:	d00c      	beq.n	1004cc7a <CST_start+0x50>
1004cc60:	9804      	ldr	r0, [sp, #16]
1004cc62:	2800      	cmp	r0, #0
1004cc64:	d045      	beq.n	1004ccf2 <CST_start+0xc8>
1004cc66:	4620      	mov	r0, r4
1004cc68:	9103      	str	r1, [sp, #12]
1004cc6a:	4629      	mov	r1, r5
1004cc6c:	9304      	str	r3, [sp, #16]
1004cc6e:	4616      	mov	r6, r2
1004cc70:	f7ff ffa5 	bl	1004cbbe <CST_stop>
1004cc74:	9903      	ldr	r1, [sp, #12]
1004cc76:	4632      	mov	r2, r6
1004cc78:	9b04      	ldr	r3, [sp, #16]
1004cc7a:	2033      	movs	r0, #51	@ 0x33
1004cc7c:	4378      	muls	r0, r7
1004cc7e:	460e      	mov	r6, r1
1004cc80:	0a01      	lsrs	r1, r0, #8
1004cc82:	1808      	adds	r0, r1, r0
1004cc84:	0c01      	lsrs	r1, r0, #16
1004cc86:	1808      	adds	r0, r1, r0
1004cc88:	0771      	lsls	r1, r6, #29
1004cc8a:	08d2      	lsrs	r2, r2, #3
1004cc8c:	1851      	adds	r1, r2, r1
1004cc8e:	1842      	adds	r2, r0, r1
1004cc90:	1d58      	adds	r0, r3, #5
1004cc92:	b2c0      	uxtb	r0, r0
1004cc94:	40c2      	lsrs	r2, r0
1004cc96:	9501      	str	r5, [sp, #4]
1004cc98:	0068      	lsls	r0, r5, #1
1004cc9a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
1004cc9c:	9204      	str	r2, [sp, #16]
1004cc9e:	520a      	strh	r2, [r1, r0]
1004cca0:	f7f4 feaf 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004cca4:	08c0      	lsrs	r0, r0, #3
1004cca6:	9003      	str	r0, [sp, #12]
1004cca8:	7862      	ldrb	r2, [r4, #1]
1004ccaa:	6a20      	ldr	r0, [r4, #32]
1004ccac:	4617      	mov	r7, r2
1004ccae:	463b      	mov	r3, r7
1004ccb0:	5dc7      	ldrb	r7, [r0, r7]
1004ccb2:	4297      	cmp	r7, r2
1004ccb4:	d00d      	beq.n	1004ccd2 <CST_start+0xa8>
1004ccb6:	007d      	lsls	r5, r7, #1
1004ccb8:	6a66      	ldr	r6, [r4, #36]	@ 0x24
1004ccba:	5b75      	ldrh	r5, [r6, r5]
1004ccbc:	7826      	ldrb	r6, [r4, #0]
1004ccbe:	1d76      	adds	r6, r6, #5
1004ccc0:	9903      	ldr	r1, [sp, #12]
1004ccc2:	40f1      	lsrs	r1, r6
1004ccc4:	1a6d      	subs	r5, r5, r1
1004ccc6:	b22d      	sxth	r5, r5
1004ccc8:	9e04      	ldr	r6, [sp, #16]
1004ccca:	1a71      	subs	r1, r6, r1
1004cccc:	b209      	sxth	r1, r1
1004ccce:	428d      	cmp	r5, r1
1004ccd0:	dded      	ble.n	1004ccae <CST_start+0x84>
1004ccd2:	5cc1      	ldrb	r1, [r0, r3]
1004ccd4:	9a01      	ldr	r2, [sp, #4]
1004ccd6:	5481      	strb	r1, [r0, r2]
1004ccd8:	6a20      	ldr	r0, [r4, #32]
1004ccda:	54c2      	strb	r2, [r0, r3]
1004ccdc:	9802      	ldr	r0, [sp, #8]
1004ccde:	4283      	cmp	r3, r0
1004cce0:	d106      	bne.n	1004ccf0 <CST_start+0xc6>
1004cce2:	9804      	ldr	r0, [sp, #16]
1004cce4:	b201      	sxth	r1, r0
1004cce6:	4620      	mov	r0, r4
1004cce8:	f000 f806 	bl	1004ccf8 <Timer_StartFirstActive_sysT>
1004ccec:	4606      	mov	r6, r0
1004ccee:	e000      	b.n	1004ccf2 <CST_start+0xc8>
1004ccf0:	2600      	movs	r6, #0
1004ccf2:	4630      	mov	r0, r6
1004ccf4:	b005      	add	sp, #20
1004ccf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004ccf8 <Timer_StartFirstActive_sysT>:
1004ccf8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004ccfa:	9101      	str	r1, [sp, #4]
1004ccfc:	4604      	mov	r4, r0
1004ccfe:	4607      	mov	r7, r0
1004cd00:	3708      	adds	r7, #8
1004cd02:	f7f4 fe7e 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004cd06:	9002      	str	r0, [sp, #8]
1004cd08:	460d      	mov	r5, r1
1004cd0a:	7826      	ldrb	r6, [r4, #0]
1004cd0c:	7d20      	ldrb	r0, [r4, #20]
1004cd0e:	2800      	cmp	r0, #0
1004cd10:	d004      	beq.n	1004cd1c <Timer_StartFirstActive_sysT+0x24>
1004cd12:	4638      	mov	r0, r7
1004cd14:	f7f4 fe90 	bl	10041a38 <BLEPLAT_StopTimer>
1004cd18:	7822      	ldrb	r2, [r4, #0]
1004cd1a:	e000      	b.n	1004cd1e <Timer_StartFirstActive_sysT+0x26>
1004cd1c:	4632      	mov	r2, r6
1004cd1e:	1d70      	adds	r0, r6, #5
1004cd20:	9c02      	ldr	r4, [sp, #8]
1004cd22:	08e1      	lsrs	r1, r4, #3
1004cd24:	40c1      	lsrs	r1, r0
1004cd26:	9801      	ldr	r0, [sp, #4]
1004cd28:	1a40      	subs	r0, r0, r1
1004cd2a:	b200      	sxth	r0, r0
1004cd2c:	1e40      	subs	r0, r0, #1
1004cd2e:	17c1      	asrs	r1, r0, #31
1004cd30:	3208      	adds	r2, #8
1004cd32:	f7f3 fbf3 	bl	1004051c <__aeabi_llsl>
1004cd36:	1902      	adds	r2, r0, r4
1004cd38:	414d      	adcs	r5, r1
1004cd3a:	4638      	mov	r0, r7
1004cd3c:	462b      	mov	r3, r5
1004cd3e:	f7f4 fe6a 	bl	10041a16 <BLEPLAT_StartTimer>
1004cd42:	b2c0      	uxtb	r0, r0
1004cd44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004cd46 <cst_sharedCallback>:
1004cd46:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004cd48:	9102      	str	r1, [sp, #8]
1004cd4a:	4605      	mov	r5, r0
1004cd4c:	7847      	ldrb	r7, [r0, #1]
1004cd4e:	6a00      	ldr	r0, [r0, #32]
1004cd50:	5dc4      	ldrb	r4, [r0, r7]
1004cd52:	f7f4 fe56 	bl	10041a02 <BLEPLAT_GetCurrentSysTime>
1004cd56:	08c0      	lsrs	r0, r0, #3
1004cd58:	9001      	str	r0, [sp, #4]
1004cd5a:	4620      	mov	r0, r4
1004cd5c:	b2c2      	uxtb	r2, r0
1004cd5e:	42ba      	cmp	r2, r7
1004cd60:	d00d      	beq.n	1004cd7e <cst_sharedCallback+0x38>
1004cd62:	0053      	lsls	r3, r2, #1
1004cd64:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
1004cd66:	5af3      	ldrh	r3, [r6, r3]
1004cd68:	782e      	ldrb	r6, [r5, #0]
1004cd6a:	1d76      	adds	r6, r6, #5
1004cd6c:	9901      	ldr	r1, [sp, #4]
1004cd6e:	40f1      	lsrs	r1, r6
1004cd70:	1a59      	subs	r1, r3, r1
1004cd72:	b209      	sxth	r1, r1
1004cd74:	2901      	cmp	r1, #1
1004cd76:	dc03      	bgt.n	1004cd80 <cst_sharedCallback+0x3a>
1004cd78:	6a28      	ldr	r0, [r5, #32]
1004cd7a:	5c80      	ldrb	r0, [r0, r2]
1004cd7c:	e7ee      	b.n	1004cd5c <cst_sharedCallback+0x16>
1004cd7e:	4638      	mov	r0, r7
1004cd80:	6a29      	ldr	r1, [r5, #32]
1004cd82:	55c8      	strb	r0, [r1, r7]
1004cd84:	b2c6      	uxtb	r6, r0
1004cd86:	4628      	mov	r0, r5
1004cd88:	4631      	mov	r1, r6
1004cd8a:	f7ff ff3a 	bl	1004cc02 <Timer_TryStartFirstActive>
1004cd8e:	b2e0      	uxtb	r0, r4
1004cd90:	42b0      	cmp	r0, r6
1004cd92:	d006      	beq.n	1004cda2 <cst_sharedCallback+0x5c>
1004cd94:	6a29      	ldr	r1, [r5, #32]
1004cd96:	5c0f      	ldrb	r7, [r1, r0]
1004cd98:	540c      	strb	r4, [r1, r0]
1004cd9a:	9902      	ldr	r1, [sp, #8]
1004cd9c:	4788      	blx	r1
1004cd9e:	463c      	mov	r4, r7
1004cda0:	e7f5      	b.n	1004cd8e <cst_sharedCallback+0x48>
1004cda2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004cda4 <is_Buffer_All_Set_To>:
1004cda4:	b570      	push	{r4, r5, r6, lr}
1004cda6:	4603      	mov	r3, r0
1004cda8:	2001      	movs	r0, #1
1004cdaa:	2900      	cmp	r1, #0
1004cdac:	d009      	beq.n	1004cdc2 <is_Buffer_All_Set_To+0x1e>
1004cdae:	2400      	movs	r4, #0
1004cdb0:	4626      	mov	r6, r4
1004cdb2:	4625      	mov	r5, r4
1004cdb4:	5d96      	ldrb	r6, [r2, r6]
1004cdb6:	429e      	cmp	r6, r3
1004cdb8:	d104      	bne.n	1004cdc4 <is_Buffer_All_Set_To+0x20>
1004cdba:	1c6d      	adds	r5, r5, #1
1004cdbc:	b2ee      	uxtb	r6, r5
1004cdbe:	428e      	cmp	r6, r1
1004cdc0:	d3f8      	bcc.n	1004cdb4 <is_Buffer_All_Set_To+0x10>
1004cdc2:	bd70      	pop	{r4, r5, r6, pc}
1004cdc4:	4620      	mov	r0, r4
1004cdc6:	bd70      	pop	{r4, r5, r6, pc}

1004cdc8 <char_copy>:
1004cdc8:	2a00      	cmp	r2, #0
1004cdca:	d005      	beq.n	1004cdd8 <char_copy+0x10>
1004cdcc:	7803      	ldrb	r3, [r0, #0]
1004cdce:	700b      	strb	r3, [r1, #0]
1004cdd0:	1e52      	subs	r2, r2, #1
1004cdd2:	1c49      	adds	r1, r1, #1
1004cdd4:	1c40      	adds	r0, r0, #1
1004cdd6:	e7f7      	b.n	1004cdc8 <char_copy>
1004cdd8:	4770      	bx	lr

1004cdda <hci_acl_data_tx_cmpl_event_int_cb_ucfg_weak>:
1004cdda:	2000      	movs	r0, #0
1004cddc:	4770      	bx	lr

1004cdde <hci_acl_data_ind_event_int_cb_ucfg_weak>:
1004cdde:	2000      	movs	r0, #0
1004cde0:	4770      	bx	lr
	...

1004cde4 <addr8_list_search>:
1004cde4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004cde6:	b083      	sub	sp, #12
1004cde8:	9202      	str	r2, [sp, #8]
1004cdea:	9d08      	ldr	r5, [sp, #32]
1004cdec:	2d00      	cmp	r5, #0
1004cdee:	d101      	bne.n	1004cdf4 <addr8_list_search+0x10>
1004cdf0:	462e      	mov	r6, r5
1004cdf2:	e002      	b.n	1004cdfa <addr8_list_search+0x16>
1004cdf4:	24ff      	movs	r4, #255	@ 0xff
1004cdf6:	0626      	lsls	r6, r4, #24
1004cdf8:	401e      	ands	r6, r3
1004cdfa:	060c      	lsls	r4, r1, #24
1004cdfc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1004cdfe:	d02a      	beq.n	1004ce56 <addr8_list_search+0x72>
1004ce00:	9501      	str	r5, [sp, #4]
1004ce02:	9400      	str	r4, [sp, #0]
1004ce04:	4a18      	ldr	r2, [pc, #96]	@ (1004ce68 <__arm_cp.0_0>)
1004ce06:	4013      	ands	r3, r2
1004ce08:	431e      	orrs	r6, r3
1004ce0a:	1e4a      	subs	r2, r1, #1
1004ce0c:	b2c9      	uxtb	r1, r1
1004ce0e:	0849      	lsrs	r1, r1, #1
1004ce10:	2400      	movs	r4, #0
1004ce12:	b2cd      	uxtb	r5, r1
1004ce14:	00ed      	lsls	r5, r5, #3
1004ce16:	1947      	adds	r7, r0, r5
1004ce18:	687f      	ldr	r7, [r7, #4]
1004ce1a:	9b01      	ldr	r3, [sp, #4]
1004ce1c:	2b00      	cmp	r3, #0
1004ce1e:	d101      	bne.n	1004ce24 <addr8_list_search+0x40>
1004ce20:	4b11      	ldr	r3, [pc, #68]	@ (1004ce68 <__arm_cp.0_0>)
1004ce22:	401f      	ands	r7, r3
1004ce24:	5945      	ldr	r5, [r0, r5]
1004ce26:	9b02      	ldr	r3, [sp, #8]
1004ce28:	42ab      	cmp	r3, r5
1004ce2a:	d101      	bne.n	1004ce30 <addr8_list_search+0x4c>
1004ce2c:	42be      	cmp	r6, r7
1004ce2e:	d015      	beq.n	1004ce5c <addr8_list_search+0x78>
1004ce30:	42be      	cmp	r6, r7
1004ce32:	d803      	bhi.n	1004ce3c <addr8_list_search+0x58>
1004ce34:	d104      	bne.n	1004ce40 <addr8_list_search+0x5c>
1004ce36:	9b02      	ldr	r3, [sp, #8]
1004ce38:	42ab      	cmp	r3, r5
1004ce3a:	d901      	bls.n	1004ce40 <addr8_list_search+0x5c>
1004ce3c:	1c4c      	adds	r4, r1, #1
1004ce3e:	e000      	b.n	1004ce42 <addr8_list_search+0x5e>
1004ce40:	1e4a      	subs	r2, r1, #1
1004ce42:	1b11      	subs	r1, r2, r4
1004ce44:	b2c9      	uxtb	r1, r1
1004ce46:	1c4d      	adds	r5, r1, #1
1004ce48:	b2ef      	uxtb	r7, r5
1004ce4a:	0879      	lsrs	r1, r7, #1
1004ce4c:	1909      	adds	r1, r1, r4
1004ce4e:	42af      	cmp	r7, r5
1004ce50:	d0df      	beq.n	1004ce12 <addr8_list_search+0x2e>
1004ce52:	2000      	movs	r0, #0
1004ce54:	e003      	b.n	1004ce5e <addr8_list_search+0x7a>
1004ce56:	2100      	movs	r1, #0
1004ce58:	4608      	mov	r0, r1
1004ce5a:	e001      	b.n	1004ce60 <addr8_list_search+0x7c>
1004ce5c:	2001      	movs	r0, #1
1004ce5e:	9c00      	ldr	r4, [sp, #0]
1004ce60:	7021      	strb	r1, [r4, #0]
1004ce62:	b003      	add	sp, #12
1004ce64:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ce66:	46c0      	nop			@ (mov r8, r8)

1004ce68 <__arm_cp.0_0>:
1004ce68:	00ffffff 	.word	0x00ffffff

1004ce6c <addr8_list_clear>:
1004ce6c:	2100      	movs	r1, #0
1004ce6e:	7101      	strb	r1, [r0, #4]
1004ce70:	4770      	bx	lr

1004ce72 <BLEPLAT_aes128_encrypt>:
1004ce72:	b580      	push	{r7, lr}
1004ce74:	f7f4 fd7e 	bl	10041974 <BLEPLAT_AesEcbEncrypt>
1004ce78:	bd80      	pop	{r7, pc}

1004ce7a <Hal_Get_Random_Number>:
1004ce7a:	b51c      	push	{r2, r3, r4, lr}
1004ce7c:	ac01      	add	r4, sp, #4
1004ce7e:	4620      	mov	r0, r4
1004ce80:	f7f4 fd88 	bl	10041994 <BLEPLAT_RngGetRandom16>
1004ce84:	8820      	ldrh	r0, [r4, #0]
1004ce86:	bd1c      	pop	{r2, r3, r4, pc}

1004ce88 <Hal_Get_Random_Number32>:
1004ce88:	b5e0      	push	{r5, r6, r7, lr}
1004ce8a:	a801      	add	r0, sp, #4
1004ce8c:	f7f4 fd8e 	bl	100419ac <BLEPLAT_RngGetRandom32>
1004ce90:	9801      	ldr	r0, [sp, #4]
1004ce92:	bd8c      	pop	{r2, r3, r7, pc}

1004ce94 <HAL_Generate_Random_Bytes_To>:
1004ce94:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1004ce96:	460c      	mov	r4, r1
1004ce98:	4605      	mov	r5, r0
1004ce9a:	2000      	movs	r0, #0
1004ce9c:	b2c6      	uxtb	r6, r0
1004ce9e:	42a6      	cmp	r6, r4
1004cea0:	d20e      	bcs.n	1004cec0 <HAL_Generate_Random_Bytes_To+0x2c>
1004cea2:	2000      	movs	r0, #0
1004cea4:	f7ff ffe9 	bl	1004ce7a <Hal_Get_Random_Number>
1004cea8:	55a8      	strb	r0, [r5, r6]
1004ceaa:	a901      	add	r1, sp, #4
1004ceac:	7008      	strb	r0, [r1, #0]
1004ceae:	0a00      	lsrs	r0, r0, #8
1004ceb0:	4669      	mov	r1, sp
1004ceb2:	7008      	strb	r0, [r1, #0]
1004ceb4:	1c71      	adds	r1, r6, #1
1004ceb6:	42a1      	cmp	r1, r4
1004ceb8:	d200      	bcs.n	1004cebc <HAL_Generate_Random_Bytes_To+0x28>
1004ceba:	5468      	strb	r0, [r5, r1]
1004cebc:	1cb0      	adds	r0, r6, #2
1004cebe:	e7ed      	b.n	1004ce9c <HAL_Generate_Random_Bytes_To+0x8>
1004cec0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

1004cec4 <IDD_Initialize_Device_IDs>:
1004cec4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004cec6:	b095      	sub	sp, #84	@ 0x54
1004cec8:	4839      	ldr	r0, [pc, #228]	@ (1004cfb0 <__arm_cp.0_0>)
1004ceca:	6800      	ldr	r0, [r0, #0]
1004cecc:	9000      	str	r0, [sp, #0]
1004cece:	a80b      	add	r0, sp, #44	@ 0x2c
1004ced0:	f7ff fdd5 	bl	1004ca7e <nvm_dev_id_data_get_record>
1004ced4:	2800      	cmp	r0, #0
1004ced6:	d031      	beq.n	1004cf3c <IDD_Initialize_Device_IDs+0x78>
1004ced8:	af01      	add	r7, sp, #4
1004ceda:	2406      	movs	r4, #6
1004cedc:	2500      	movs	r5, #0
1004cede:	4b35      	ldr	r3, [pc, #212]	@ (1004cfb4 <__arm_cp.0_1>)
1004cee0:	4638      	mov	r0, r7
1004cee2:	4621      	mov	r1, r4
1004cee4:	462a      	mov	r2, r5
1004cee6:	4798      	blx	r3
1004cee8:	7978      	ldrb	r0, [r7, #5]
1004ceea:	21c0      	movs	r1, #192	@ 0xc0
1004ceec:	4301      	orrs	r1, r0
1004ceee:	7179      	strb	r1, [r7, #5]
1004cef0:	ae0b      	add	r6, sp, #44	@ 0x2c
1004cef2:	4630      	mov	r0, r6
1004cef4:	3020      	adds	r0, #32
1004cef6:	4b30      	ldr	r3, [pc, #192]	@ (1004cfb8 <__arm_cp.0_2>)
1004cef8:	4639      	mov	r1, r7
1004cefa:	4622      	mov	r2, r4
1004cefc:	4798      	blx	r3
1004cefe:	ac07      	add	r4, sp, #28
1004cf00:	2710      	movs	r7, #16
1004cf02:	4620      	mov	r0, r4
1004cf04:	4639      	mov	r1, r7
1004cf06:	462a      	mov	r2, r5
1004cf08:	4b2a      	ldr	r3, [pc, #168]	@ (1004cfb4 <__arm_cp.0_1>)
1004cf0a:	4798      	blx	r3
1004cf0c:	4630      	mov	r0, r6
1004cf0e:	4621      	mov	r1, r4
1004cf10:	463a      	mov	r2, r7
1004cf12:	4b29      	ldr	r3, [pc, #164]	@ (1004cfb8 <__arm_cp.0_2>)
1004cf14:	4798      	blx	r3
1004cf16:	ac03      	add	r4, sp, #12
1004cf18:	4620      	mov	r0, r4
1004cf1a:	4639      	mov	r1, r7
1004cf1c:	462a      	mov	r2, r5
1004cf1e:	4b25      	ldr	r3, [pc, #148]	@ (1004cfb4 <__arm_cp.0_1>)
1004cf20:	4798      	blx	r3
1004cf22:	4630      	mov	r0, r6
1004cf24:	3010      	adds	r0, #16
1004cf26:	4621      	mov	r1, r4
1004cf28:	463a      	mov	r2, r7
1004cf2a:	4b23      	ldr	r3, [pc, #140]	@ (1004cfb8 <__arm_cp.0_2>)
1004cf2c:	4798      	blx	r3
1004cf2e:	4630      	mov	r0, r6
1004cf30:	f7ff fdb2 	bl	1004ca98 <nvm_dev_id_data_add_record>
1004cf34:	2800      	cmp	r0, #0
1004cf36:	d103      	bne.n	1004cf40 <IDD_Initialize_Device_IDs+0x7c>
1004cf38:	4605      	mov	r5, r0
1004cf3a:	e003      	b.n	1004cf44 <IDD_Initialize_Device_IDs+0x80>
1004cf3c:	2500      	movs	r5, #0
1004cf3e:	e001      	b.n	1004cf44 <IDD_Initialize_Device_IDs+0x80>
1004cf40:	200e      	movs	r0, #14
1004cf42:	43c5      	mvns	r5, r0
1004cf44:	4c1d      	ldr	r4, [pc, #116]	@ (1004cfbc <__arm_cp.0_3>)
1004cf46:	6822      	ldr	r2, [r4, #0]
1004cf48:	322e      	adds	r2, #46	@ 0x2e
1004cf4a:	2600      	movs	r6, #0
1004cf4c:	2706      	movs	r7, #6
1004cf4e:	4630      	mov	r0, r6
1004cf50:	4639      	mov	r1, r7
1004cf52:	f7ff ff27 	bl	1004cda4 <is_Buffer_All_Set_To>
1004cf56:	a90b      	add	r1, sp, #44	@ 0x2c
1004cf58:	2800      	cmp	r0, #0
1004cf5a:	d001      	beq.n	1004cf60 <IDD_Initialize_Device_IDs+0x9c>
1004cf5c:	3120      	adds	r1, #32
1004cf5e:	e001      	b.n	1004cf64 <IDD_Initialize_Device_IDs+0xa0>
1004cf60:	6821      	ldr	r1, [r4, #0]
1004cf62:	312e      	adds	r1, #46	@ 0x2e
1004cf64:	9800      	ldr	r0, [sp, #0]
1004cf66:	3060      	adds	r0, #96	@ 0x60
1004cf68:	463a      	mov	r2, r7
1004cf6a:	f7f4 fcc7 	bl	100418fc <BLEPLAT_MemCpy>
1004cf6e:	6822      	ldr	r2, [r4, #0]
1004cf70:	3208      	adds	r2, #8
1004cf72:	2110      	movs	r1, #16
1004cf74:	4630      	mov	r0, r6
1004cf76:	f7ff ff15 	bl	1004cda4 <is_Buffer_All_Set_To>
1004cf7a:	2800      	cmp	r0, #0
1004cf7c:	d005      	beq.n	1004cf8a <IDD_Initialize_Device_IDs+0xc6>
1004cf7e:	6820      	ldr	r0, [r4, #0]
1004cf80:	3008      	adds	r0, #8
1004cf82:	a90b      	add	r1, sp, #44	@ 0x2c
1004cf84:	2210      	movs	r2, #16
1004cf86:	f7f4 fcb9 	bl	100418fc <BLEPLAT_MemCpy>
1004cf8a:	6822      	ldr	r2, [r4, #0]
1004cf8c:	3218      	adds	r2, #24
1004cf8e:	2000      	movs	r0, #0
1004cf90:	2110      	movs	r1, #16
1004cf92:	f7ff ff07 	bl	1004cda4 <is_Buffer_All_Set_To>
1004cf96:	2800      	cmp	r0, #0
1004cf98:	d006      	beq.n	1004cfa8 <IDD_Initialize_Device_IDs+0xe4>
1004cf9a:	a90b      	add	r1, sp, #44	@ 0x2c
1004cf9c:	3110      	adds	r1, #16
1004cf9e:	6820      	ldr	r0, [r4, #0]
1004cfa0:	3018      	adds	r0, #24
1004cfa2:	2210      	movs	r2, #16
1004cfa4:	f7f4 fcaa 	bl	100418fc <BLEPLAT_MemCpy>
1004cfa8:	b2e8      	uxtb	r0, r5
1004cfaa:	b015      	add	sp, #84	@ 0x54
1004cfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004cfae:	46c0      	nop			@ (mov r8, r8)

1004cfb0 <__arm_cp.0_0>:
1004cfb0:	20000650 	.word	0x20000650

1004cfb4 <__arm_cp.0_1>:
1004cfb4:	1004ce95 	.word	0x1004ce95

1004cfb8 <__arm_cp.0_2>:
1004cfb8:	100418fd 	.word	0x100418fd

1004cfbc <__arm_cp.0_3>:
1004cfbc:	20000648 	.word	0x20000648

1004cfc0 <aci_hal_fw_error_event_push_noinline>:
1004cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004cfc2:	4604      	mov	r4, r0
1004cfc4:	06c0      	lsls	r0, r0, #27
1004cfc6:	d42d      	bmi.n	1004d024 <aci_hal_fw_error_event_push_noinline+0x64>
1004cfc8:	4615      	mov	r5, r2
1004cfca:	460f      	mov	r7, r1
1004cfcc:	9300      	str	r3, [sp, #0]
1004cfce:	4818      	ldr	r0, [pc, #96]	@ (1004d030 <__arm_cp.0_0>)
1004cfd0:	6800      	ldr	r0, [r0, #0]
1004cfd2:	0761      	lsls	r1, r4, #29
1004cfd4:	0ec9      	lsrs	r1, r1, #27
1004cfd6:	1840      	adds	r0, r0, r1
1004cfd8:	6900      	ldr	r0, [r0, #16]
1004cfda:	1e51      	subs	r1, r2, #1
1004cfdc:	2203      	movs	r2, #3
1004cfde:	430a      	orrs	r2, r1
1004cfe0:	3209      	adds	r2, #9
1004cfe2:	0891      	lsrs	r1, r2, #2
1004cfe4:	b28b      	uxth	r3, r1
1004cfe6:	2240      	movs	r2, #64	@ 0x40
1004cfe8:	4621      	mov	r1, r4
1004cfea:	f7fc fc13 	bl	10049814 <aci_event_fifo_push_header>
1004cfee:	2800      	cmp	r0, #0
1004cff0:	d01a      	beq.n	1004d028 <aci_hal_fw_error_event_push_noinline+0x68>
1004cff2:	4606      	mov	r6, r0
1004cff4:	72c5      	strb	r5, [r0, #11]
1004cff6:	7287      	strb	r7, [r0, #10]
1004cff8:	300c      	adds	r0, #12
1004cffa:	9900      	ldr	r1, [sp, #0]
1004cffc:	462a      	mov	r2, r5
1004cffe:	f7f4 fc7d 	bl	100418fc <BLEPLAT_MemCpy>
1004d002:	2700      	movs	r7, #0
1004d004:	7277      	strb	r7, [r6, #9]
1004d006:	2006      	movs	r0, #6
1004d008:	7230      	strb	r0, [r6, #8]
1004d00a:	1d28      	adds	r0, r5, #4
1004d00c:	0a01      	lsrs	r1, r0, #8
1004d00e:	71f1      	strb	r1, [r6, #7]
1004d010:	71b0      	strb	r0, [r6, #6]
1004d012:	20ff      	movs	r0, #255	@ 0xff
1004d014:	7170      	strb	r0, [r6, #5]
1004d016:	2082      	movs	r0, #130	@ 0x82
1004d018:	7130      	strb	r0, [r6, #4]
1004d01a:	4620      	mov	r0, r4
1004d01c:	4631      	mov	r1, r6
1004d01e:	f7fc fc96 	bl	1004994e <aci_event_fifo_push>
1004d022:	e002      	b.n	1004d02a <aci_hal_fw_error_event_push_noinline+0x6a>
1004d024:	2786      	movs	r7, #134	@ 0x86
1004d026:	e000      	b.n	1004d02a <aci_hal_fw_error_event_push_noinline+0x6a>
1004d028:	2707      	movs	r7, #7
1004d02a:	4638      	mov	r0, r7
1004d02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d02e:	46c0      	nop			@ (mov r8, r8)

1004d030 <__arm_cp.0_0>:
1004d030:	2000064c 	.word	0x2000064c

1004d034 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
1004d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d036:	4604      	mov	r4, r0
1004d038:	06c0      	lsls	r0, r0, #27
1004d03a:	d42d      	bmi.n	1004d098 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
1004d03c:	4616      	mov	r6, r2
1004d03e:	460d      	mov	r5, r1
1004d040:	4818      	ldr	r0, [pc, #96]	@ (1004d0a4 <__arm_cp.1_0>)
1004d042:	6800      	ldr	r0, [r0, #0]
1004d044:	0761      	lsls	r1, r4, #29
1004d046:	0ec9      	lsrs	r1, r1, #27
1004d048:	1840      	adds	r0, r0, r1
1004d04a:	6900      	ldr	r0, [r0, #16]
1004d04c:	2241      	movs	r2, #65	@ 0x41
1004d04e:	2304      	movs	r3, #4
1004d050:	4621      	mov	r1, r4
1004d052:	f7fc fbdf 	bl	10049814 <aci_event_fifo_push_header>
1004d056:	2800      	cmp	r0, #0
1004d058:	d020      	beq.n	1004d09c <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
1004d05a:	4601      	mov	r1, r0
1004d05c:	300a      	adds	r0, #10
1004d05e:	7106      	strb	r6, [r0, #4]
1004d060:	7005      	strb	r5, [r0, #0]
1004d062:	2700      	movs	r7, #0
1004d064:	724f      	strb	r7, [r1, #9]
1004d066:	2210      	movs	r2, #16
1004d068:	720a      	strb	r2, [r1, #8]
1004d06a:	71cf      	strb	r7, [r1, #7]
1004d06c:	220a      	movs	r2, #10
1004d06e:	718a      	strb	r2, [r1, #6]
1004d070:	22ff      	movs	r2, #255	@ 0xff
1004d072:	714a      	strb	r2, [r1, #5]
1004d074:	2282      	movs	r2, #130	@ 0x82
1004d076:	710a      	strb	r2, [r1, #4]
1004d078:	0e32      	lsrs	r2, r6, #24
1004d07a:	71c2      	strb	r2, [r0, #7]
1004d07c:	0c32      	lsrs	r2, r6, #16
1004d07e:	7182      	strb	r2, [r0, #6]
1004d080:	0a32      	lsrs	r2, r6, #8
1004d082:	7142      	strb	r2, [r0, #5]
1004d084:	0e2a      	lsrs	r2, r5, #24
1004d086:	70c2      	strb	r2, [r0, #3]
1004d088:	0c2a      	lsrs	r2, r5, #16
1004d08a:	7082      	strb	r2, [r0, #2]
1004d08c:	0a2a      	lsrs	r2, r5, #8
1004d08e:	7042      	strb	r2, [r0, #1]
1004d090:	4620      	mov	r0, r4
1004d092:	f7fc fc5c 	bl	1004994e <aci_event_fifo_push>
1004d096:	e002      	b.n	1004d09e <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1004d098:	2786      	movs	r7, #134	@ 0x86
1004d09a:	e000      	b.n	1004d09e <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1004d09c:	2707      	movs	r7, #7
1004d09e:	4638      	mov	r0, r7
1004d0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d0a2:	46c0      	nop			@ (mov r8, r8)

1004d0a4 <__arm_cp.1_0>:
1004d0a4:	2000064c 	.word	0x2000064c

1004d0a8 <GAP_enable_disable_scan_ucfg_weak>:
1004d0a8:	2000      	movs	r0, #0
1004d0aa:	4770      	bx	lr

1004d0ac <GAP_name_disc_proc_connected_check_ucfg_weak>:
1004d0ac:	4770      	bx	lr

1004d0ae <GAP_DiscProcTimeoutcb_ucfg_weak>:
1004d0ae:	4770      	bx	lr

1004d0b0 <GAT_clt_proc_exec_tsk>:
1004d0b0:	b580      	push	{r7, lr}
1004d0b2:	4802      	ldr	r0, [pc, #8]	@ (1004d0bc <__arm_cp.3_0>)
1004d0b4:	6800      	ldr	r0, [r0, #0]
1004d0b6:	4780      	blx	r0
1004d0b8:	bd80      	pop	{r7, pc}
1004d0ba:	46c0      	nop			@ (mov r8, r8)

1004d0bc <__arm_cp.3_0>:
1004d0bc:	2000083c 	.word	0x2000083c

1004d0c0 <GAT_clt_exec_empty>:
1004d0c0:	4770      	bx	lr
	...

1004d0c4 <hci_le_encrypt>:
1004d0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d0c6:	b08f      	sub	sp, #60	@ 0x3c
1004d0c8:	9202      	str	r2, [sp, #8]
1004d0ca:	4607      	mov	r7, r0
1004d0cc:	a807      	add	r0, sp, #28
1004d0ce:	9001      	str	r0, [sp, #4]
1004d0d0:	2510      	movs	r5, #16
1004d0d2:	4e0c      	ldr	r6, [pc, #48]	@ (1004d104 <__arm_cp.0_0>)
1004d0d4:	462a      	mov	r2, r5
1004d0d6:	47b0      	blx	r6
1004d0d8:	ac0b      	add	r4, sp, #44	@ 0x2c
1004d0da:	4620      	mov	r0, r4
1004d0dc:	4639      	mov	r1, r7
1004d0de:	462a      	mov	r2, r5
1004d0e0:	47b0      	blx	r6
1004d0e2:	af03      	add	r7, sp, #12
1004d0e4:	2600      	movs	r6, #0
1004d0e6:	9801      	ldr	r0, [sp, #4]
1004d0e8:	4621      	mov	r1, r4
1004d0ea:	463a      	mov	r2, r7
1004d0ec:	4633      	mov	r3, r6
1004d0ee:	f7ff fec0 	bl	1004ce72 <BLEPLAT_aes128_encrypt>
1004d0f2:	9802      	ldr	r0, [sp, #8]
1004d0f4:	4639      	mov	r1, r7
1004d0f6:	462a      	mov	r2, r5
1004d0f8:	4b02      	ldr	r3, [pc, #8]	@ (1004d104 <__arm_cp.0_0>)
1004d0fa:	4798      	blx	r3
1004d0fc:	4630      	mov	r0, r6
1004d0fe:	b00f      	add	sp, #60	@ 0x3c
1004d100:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d102:	46c0      	nop			@ (mov r8, r8)

1004d104 <__arm_cp.0_0>:
1004d104:	100418fd 	.word	0x100418fd

1004d108 <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
1004d108:	4770      	bx	lr

1004d10a <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
1004d10a:	4770      	bx	lr

1004d10c <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
1004d10c:	4770      	bx	lr

1004d10e <llc_big_brc_mem_alloc_ucfg_weak>:
1004d10e:	4770      	bx	lr

1004d110 <llc_big_sync_mem_alloc_ucfg_weak>:
1004d110:	4770      	bx	lr

1004d112 <llc_cig_cmn_mem_alloc_ucfg_weak>:
1004d112:	4770      	bx	lr

1004d114 <llc_check_sreq_or_creq_tx_addr_res_off>:
1004d114:	b570      	push	{r4, r5, r6, lr}
1004d116:	b084      	sub	sp, #16
1004d118:	4615      	mov	r5, r2
1004d11a:	460a      	mov	r2, r1
1004d11c:	4604      	mov	r4, r0
1004d11e:	2b00      	cmp	r3, #0
1004d120:	d007      	beq.n	1004d132 <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
1004d122:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004d124:	4282      	cmp	r2, r0
1004d126:	d11f      	bne.n	1004d168 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
1004d128:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d12a:	4068      	eors	r0, r5
1004d12c:	0200      	lsls	r0, r0, #8
1004d12e:	d11b      	bne.n	1004d168 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
1004d130:	e01b      	b.n	1004d16a <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004d132:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004d134:	9908      	ldr	r1, [sp, #32]
1004d136:	2900      	cmp	r1, #0
1004d138:	d002      	beq.n	1004d140 <llc_check_sreq_or_creq_tx_addr_res_off+0x2c>
1004d13a:	2301      	movs	r3, #1
1004d13c:	4003      	ands	r3, r0
1004d13e:	d104      	bne.n	1004d14a <llc_check_sreq_or_creq_tx_addr_res_off+0x36>
1004d140:	2900      	cmp	r1, #0
1004d142:	d112      	bne.n	1004d16a <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004d144:	2102      	movs	r1, #2
1004d146:	4008      	ands	r0, r1
1004d148:	d00f      	beq.n	1004d16a <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004d14a:	4809      	ldr	r0, [pc, #36]	@ (1004d170 <__arm_cp.1_0>)
1004d14c:	6800      	ldr	r0, [r0, #0]
1004d14e:	219c      	movs	r1, #156	@ 0x9c
1004d150:	5841      	ldr	r1, [r0, r1]
1004d152:	68c8      	ldr	r0, [r1, #12]
1004d154:	6909      	ldr	r1, [r1, #16]
1004d156:	ab03      	add	r3, sp, #12
1004d158:	2600      	movs	r6, #0
1004d15a:	9600      	str	r6, [sp, #0]
1004d15c:	9301      	str	r3, [sp, #4]
1004d15e:	462b      	mov	r3, r5
1004d160:	f7ff fe40 	bl	1004cde4 <addr8_list_search>
1004d164:	2800      	cmp	r0, #0
1004d166:	d100      	bne.n	1004d16a <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004d168:	24ff      	movs	r4, #255	@ 0xff
1004d16a:	4620      	mov	r0, r4
1004d16c:	b004      	add	sp, #16
1004d16e:	bd70      	pop	{r4, r5, r6, pc}

1004d170 <__arm_cp.1_0>:
1004d170:	20000658 	.word	0x20000658

1004d174 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
1004d174:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d176:	b087      	sub	sp, #28
1004d178:	1ecd      	subs	r5, r1, #3
1004d17a:	21ff      	movs	r1, #255	@ 0xff
1004d17c:	24fd      	movs	r4, #253	@ 0xfd
1004d17e:	4225      	tst	r5, r4
1004d180:	d11c      	bne.n	1004d1bc <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1004d182:	2a00      	cmp	r2, #0
1004d184:	d01a      	beq.n	1004d1bc <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1004d186:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1004d188:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004d18a:	680c      	ldr	r4, [r1, #0]
1004d18c:	9405      	str	r4, [sp, #20]
1004d18e:	9306      	str	r3, [sp, #24]
1004d190:	684b      	ldr	r3, [r1, #4]
1004d192:	c882      	ldmia	r0!, {r1, r7}
1004d194:	20ff      	movs	r0, #255	@ 0xff
1004d196:	0600      	lsls	r0, r0, #24
1004d198:	463c      	mov	r4, r7
1004d19a:	4384      	bics	r4, r0
1004d19c:	c612      	stmia	r6!, {r1, r4}
1004d19e:	9303      	str	r3, [sp, #12]
1004d1a0:	9805      	ldr	r0, [sp, #20]
1004d1a2:	9002      	str	r0, [sp, #8]
1004d1a4:	9806      	ldr	r0, [sp, #24]
1004d1a6:	9001      	str	r0, [sp, #4]
1004d1a8:	4268      	negs	r0, r5
1004d1aa:	4168      	adcs	r0, r5
1004d1ac:	9000      	str	r0, [sp, #0]
1004d1ae:	b2c8      	uxtb	r0, r1
1004d1b0:	0752      	lsls	r2, r2, #29
1004d1b2:	0fd3      	lsrs	r3, r2, #31
1004d1b4:	463a      	mov	r2, r7
1004d1b6:	f7ff ffad 	bl	1004d114 <llc_check_sreq_or_creq_tx_addr_res_off>
1004d1ba:	4601      	mov	r1, r0
1004d1bc:	4608      	mov	r0, r1
1004d1be:	b007      	add	sp, #28
1004d1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1004d1c4 <llc_wl_mem_allocate>:
1004d1c4:	b510      	push	{r4, lr}
1004d1c6:	2401      	movs	r4, #1
1004d1c8:	4084      	lsls	r4, r0
1004d1ca:	2108      	movs	r1, #8
1004d1cc:	4620      	mov	r0, r4
1004d1ce:	f7ff f9a9 	bl	1004c524 <csmem_mem_0_assign>
1004d1d2:	4903      	ldr	r1, [pc, #12]	@ (1004d1e0 <__arm_cp.0_0>)
1004d1d4:	6809      	ldr	r1, [r1, #0]
1004d1d6:	229c      	movs	r2, #156	@ 0x9c
1004d1d8:	5889      	ldr	r1, [r1, r2]
1004d1da:	744c      	strb	r4, [r1, #17]
1004d1dc:	60c8      	str	r0, [r1, #12]
1004d1de:	bd10      	pop	{r4, pc}

1004d1e0 <__arm_cp.0_0>:
1004d1e0:	20000658 	.word	0x20000658

1004d1e4 <llc_padv_mem_allocate_ucfg_weak>:
1004d1e4:	4770      	bx	lr

1004d1e6 <llc_padv_init_ucfg_weak>:
1004d1e6:	4770      	bx	lr

1004d1e8 <llc_priv_mem_allocate>:
1004d1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d1ea:	2800      	cmp	r0, #0
1004d1ec:	d046      	beq.n	1004d27c <llc_priv_mem_allocate+0x94>
1004d1ee:	460e      	mov	r6, r1
1004d1f0:	2501      	movs	r5, #1
1004d1f2:	2168      	movs	r1, #104	@ 0x68
1004d1f4:	4628      	mov	r0, r5
1004d1f6:	f7ff f995 	bl	1004c524 <csmem_mem_0_assign>
1004d1fa:	4f21      	ldr	r7, [pc, #132]	@ (1004d280 <__arm_cp.0_0>)
1004d1fc:	6839      	ldr	r1, [r7, #0]
1004d1fe:	249c      	movs	r4, #156	@ 0x9c
1004d200:	5909      	ldr	r1, [r1, r4]
1004d202:	6088      	str	r0, [r1, #8]
1004d204:	40b5      	lsls	r5, r6
1004d206:	b2ee      	uxtb	r6, r5
1004d208:	2108      	movs	r1, #8
1004d20a:	4630      	mov	r0, r6
1004d20c:	f7ff f98a 	bl	1004c524 <csmem_mem_0_assign>
1004d210:	6839      	ldr	r1, [r7, #0]
1004d212:	5909      	ldr	r1, [r1, r4]
1004d214:	6889      	ldr	r1, [r1, #8]
1004d216:	724d      	strb	r5, [r1, #9]
1004d218:	6048      	str	r0, [r1, #4]
1004d21a:	9600      	str	r6, [sp, #0]
1004d21c:	0075      	lsls	r5, r6, #1
1004d21e:	2611      	movs	r6, #17
1004d220:	2e21      	cmp	r6, #33	@ 0x21
1004d222:	d00f      	beq.n	1004d244 <llc_priv_mem_allocate+0x5c>
1004d224:	2108      	movs	r1, #8
1004d226:	4628      	mov	r0, r5
1004d228:	f7ff f97c 	bl	1004c524 <csmem_mem_0_assign>
1004d22c:	6839      	ldr	r1, [r7, #0]
1004d22e:	5909      	ldr	r1, [r1, r4]
1004d230:	6889      	ldr	r1, [r1, #8]
1004d232:	1989      	adds	r1, r1, r6
1004d234:	1f49      	subs	r1, r1, #5
1004d236:	6008      	str	r0, [r1, #0]
1004d238:	6838      	ldr	r0, [r7, #0]
1004d23a:	5900      	ldr	r0, [r0, r4]
1004d23c:	6880      	ldr	r0, [r0, #8]
1004d23e:	5585      	strb	r5, [r0, r6]
1004d240:	3608      	adds	r6, #8
1004d242:	e7ed      	b.n	1004d220 <llc_priv_mem_allocate+0x38>
1004d244:	2128      	movs	r1, #40	@ 0x28
1004d246:	9800      	ldr	r0, [sp, #0]
1004d248:	f7ff f96c 	bl	1004c524 <csmem_mem_0_assign>
1004d24c:	6839      	ldr	r1, [r7, #0]
1004d24e:	5909      	ldr	r1, [r1, r4]
1004d250:	6889      	ldr	r1, [r1, #8]
1004d252:	6008      	str	r0, [r1, #0]
1004d254:	480b      	ldr	r0, [pc, #44]	@ (1004d284 <__arm_cp.0_1>)
1004d256:	2502      	movs	r5, #2
1004d258:	2601      	movs	r6, #1
1004d25a:	4629      	mov	r1, r5
1004d25c:	4632      	mov	r2, r6
1004d25e:	f7ff f94f 	bl	1004c500 <csmem_mem_assign>
1004d262:	6839      	ldr	r1, [r7, #0]
1004d264:	5909      	ldr	r1, [r1, r4]
1004d266:	6889      	ldr	r1, [r1, #8]
1004d268:	6488      	str	r0, [r1, #72]	@ 0x48
1004d26a:	4806      	ldr	r0, [pc, #24]	@ (1004d284 <__arm_cp.0_1>)
1004d26c:	4631      	mov	r1, r6
1004d26e:	462a      	mov	r2, r5
1004d270:	f7ff f946 	bl	1004c500 <csmem_mem_assign>
1004d274:	6839      	ldr	r1, [r7, #0]
1004d276:	5909      	ldr	r1, [r1, r4]
1004d278:	6889      	ldr	r1, [r1, #8]
1004d27a:	64c8      	str	r0, [r1, #76]	@ 0x4c
1004d27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d27e:	46c0      	nop			@ (mov r8, r8)

1004d280 <__arm_cp.0_0>:
1004d280:	20000658 	.word	0x20000658

1004d284 <__arm_cp.0_1>:
1004d284:	20000664 	.word	0x20000664

1004d288 <llc_pscan_isr_ucfg_weak>:
1004d288:	2000      	movs	r0, #0
1004d28a:	4770      	bx	lr

1004d28c <llc_pscan_get_cntxt_per_p>:
1004d28c:	2190      	movs	r1, #144	@ 0x90
1004d28e:	4341      	muls	r1, r0
1004d290:	4804      	ldr	r0, [pc, #16]	@ (1004d2a4 <__arm_cp.1_0>)
1004d292:	6800      	ldr	r0, [r0, #0]
1004d294:	229c      	movs	r2, #156	@ 0x9c
1004d296:	5880      	ldr	r0, [r0, r2]
1004d298:	6840      	ldr	r0, [r0, #4]
1004d29a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1004d29c:	6800      	ldr	r0, [r0, #0]
1004d29e:	6800      	ldr	r0, [r0, #0]
1004d2a0:	1840      	adds	r0, r0, r1
1004d2a2:	4770      	bx	lr

1004d2a4 <__arm_cp.1_0>:
1004d2a4:	20000658 	.word	0x20000658

1004d2a8 <llc_pscan_init_ucfg_weak>:
1004d2a8:	4770      	bx	lr

1004d2aa <llc_pscan_mem_allocate_ucfg_weak>:
1004d2aa:	4770      	bx	lr

1004d2ac <llc_pscan_wr_mem_allocate_ucfg_weak>:
1004d2ac:	b510      	push	{r4, lr}
1004d2ae:	2801      	cmp	r0, #1
1004d2b0:	d110      	bne.n	1004d2d4 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004d2b2:	2901      	cmp	r1, #1
1004d2b4:	d10e      	bne.n	1004d2d4 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004d2b6:	2a01      	cmp	r2, #1
1004d2b8:	d10c      	bne.n	1004d2d4 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004d2ba:	2400      	movs	r4, #0
1004d2bc:	4620      	mov	r0, r4
1004d2be:	f7ff ffe5 	bl	1004d28c <llc_pscan_get_cntxt_per_p>
1004d2c2:	3014      	adds	r0, #20
1004d2c4:	4904      	ldr	r1, [pc, #16]	@ (1004d2d8 <__arm_cp.5_0>)
1004d2c6:	7f89      	ldrb	r1, [r1, #30]
1004d2c8:	2900      	cmp	r1, #0
1004d2ca:	d003      	beq.n	1004d2d4 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004d2cc:	6004      	str	r4, [r0, #0]
1004d2ce:	3090      	adds	r0, #144	@ 0x90
1004d2d0:	1e49      	subs	r1, r1, #1
1004d2d2:	e7f9      	b.n	1004d2c8 <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1004d2d4:	bd10      	pop	{r4, pc}
1004d2d6:	46c0      	nop			@ (mov r8, r8)

1004d2d8 <__arm_cp.5_0>:
1004d2d8:	20000668 	.word	0x20000668

1004d2dc <llc_scan_isr_uncoded_ucfg_weak>:
1004d2dc:	2000      	movs	r0, #0
1004d2de:	4770      	bx	lr

1004d2e0 <llc_scan_isr_coded_ucfg_weak>:
1004d2e0:	2000      	movs	r0, #0
1004d2e2:	4770      	bx	lr

1004d2e4 <smp_fsm_process_actions_wrt_state_tsk_ucfg_weak>:
1004d2e4:	4770      	bx	lr

1004d2e6 <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
1004d2e6:	4770      	bx	lr

1004d2e8 <smp_rxp_process_rxed_packets_tsk_ucfg_weak>:
1004d2e8:	4770      	bx	lr
	...

1004d2ec <std>:
1004d2ec:	2300      	movs	r3, #0
1004d2ee:	b510      	push	{r4, lr}
1004d2f0:	0004      	movs	r4, r0
1004d2f2:	6003      	str	r3, [r0, #0]
1004d2f4:	6043      	str	r3, [r0, #4]
1004d2f6:	6083      	str	r3, [r0, #8]
1004d2f8:	8181      	strh	r1, [r0, #12]
1004d2fa:	6643      	str	r3, [r0, #100]	@ 0x64
1004d2fc:	81c2      	strh	r2, [r0, #14]
1004d2fe:	6103      	str	r3, [r0, #16]
1004d300:	6143      	str	r3, [r0, #20]
1004d302:	6183      	str	r3, [r0, #24]
1004d304:	0019      	movs	r1, r3
1004d306:	2208      	movs	r2, #8
1004d308:	305c      	adds	r0, #92	@ 0x5c
1004d30a:	f000 fad3 	bl	1004d8b4 <memset>
1004d30e:	4b0b      	ldr	r3, [pc, #44]	@ (1004d33c <std+0x50>)
1004d310:	6224      	str	r4, [r4, #32]
1004d312:	6263      	str	r3, [r4, #36]	@ 0x24
1004d314:	4b0a      	ldr	r3, [pc, #40]	@ (1004d340 <std+0x54>)
1004d316:	62a3      	str	r3, [r4, #40]	@ 0x28
1004d318:	4b0a      	ldr	r3, [pc, #40]	@ (1004d344 <std+0x58>)
1004d31a:	62e3      	str	r3, [r4, #44]	@ 0x2c
1004d31c:	4b0a      	ldr	r3, [pc, #40]	@ (1004d348 <std+0x5c>)
1004d31e:	6323      	str	r3, [r4, #48]	@ 0x30
1004d320:	4b0a      	ldr	r3, [pc, #40]	@ (1004d34c <std+0x60>)
1004d322:	429c      	cmp	r4, r3
1004d324:	d005      	beq.n	1004d332 <std+0x46>
1004d326:	4b0a      	ldr	r3, [pc, #40]	@ (1004d350 <std+0x64>)
1004d328:	429c      	cmp	r4, r3
1004d32a:	d002      	beq.n	1004d332 <std+0x46>
1004d32c:	4b09      	ldr	r3, [pc, #36]	@ (1004d354 <std+0x68>)
1004d32e:	429c      	cmp	r4, r3
1004d330:	d103      	bne.n	1004d33a <std+0x4e>
1004d332:	0020      	movs	r0, r4
1004d334:	3058      	adds	r0, #88	@ 0x58
1004d336:	f000 fb19 	bl	1004d96c <__retarget_lock_init_recursive>
1004d33a:	bd10      	pop	{r4, pc}
1004d33c:	1004d6c1 	.word	0x1004d6c1
1004d340:	1004d6e9 	.word	0x1004d6e9
1004d344:	1004d721 	.word	0x1004d721
1004d348:	1004d74d 	.word	0x1004d74d
1004d34c:	200006a0 	.word	0x200006a0
1004d350:	20000708 	.word	0x20000708
1004d354:	20000770 	.word	0x20000770

1004d358 <stdio_exit_handler>:
1004d358:	b510      	push	{r4, lr}
1004d35a:	4a03      	ldr	r2, [pc, #12]	@ (1004d368 <stdio_exit_handler+0x10>)
1004d35c:	4903      	ldr	r1, [pc, #12]	@ (1004d36c <stdio_exit_handler+0x14>)
1004d35e:	4804      	ldr	r0, [pc, #16]	@ (1004d370 <stdio_exit_handler+0x18>)
1004d360:	f000 f86c 	bl	1004d43c <_fwalk_sglue>
1004d364:	bd10      	pop	{r4, pc}
1004d366:	46c0      	nop			@ (mov r8, r8)
1004d368:	20000840 	.word	0x20000840
1004d36c:	1004e221 	.word	0x1004e221
1004d370:	20000850 	.word	0x20000850

1004d374 <cleanup_stdio>:
1004d374:	6841      	ldr	r1, [r0, #4]
1004d376:	4b0b      	ldr	r3, [pc, #44]	@ (1004d3a4 <cleanup_stdio+0x30>)
1004d378:	b510      	push	{r4, lr}
1004d37a:	0004      	movs	r4, r0
1004d37c:	4299      	cmp	r1, r3
1004d37e:	d001      	beq.n	1004d384 <cleanup_stdio+0x10>
1004d380:	f000 ff4e 	bl	1004e220 <_fflush_r>
1004d384:	68a1      	ldr	r1, [r4, #8]
1004d386:	4b08      	ldr	r3, [pc, #32]	@ (1004d3a8 <cleanup_stdio+0x34>)
1004d388:	4299      	cmp	r1, r3
1004d38a:	d002      	beq.n	1004d392 <cleanup_stdio+0x1e>
1004d38c:	0020      	movs	r0, r4
1004d38e:	f000 ff47 	bl	1004e220 <_fflush_r>
1004d392:	68e1      	ldr	r1, [r4, #12]
1004d394:	4b05      	ldr	r3, [pc, #20]	@ (1004d3ac <cleanup_stdio+0x38>)
1004d396:	4299      	cmp	r1, r3
1004d398:	d002      	beq.n	1004d3a0 <cleanup_stdio+0x2c>
1004d39a:	0020      	movs	r0, r4
1004d39c:	f000 ff40 	bl	1004e220 <_fflush_r>
1004d3a0:	bd10      	pop	{r4, pc}
1004d3a2:	46c0      	nop			@ (mov r8, r8)
1004d3a4:	200006a0 	.word	0x200006a0
1004d3a8:	20000708 	.word	0x20000708
1004d3ac:	20000770 	.word	0x20000770

1004d3b0 <global_stdio_init.part.0>:
1004d3b0:	b510      	push	{r4, lr}
1004d3b2:	4b09      	ldr	r3, [pc, #36]	@ (1004d3d8 <global_stdio_init.part.0+0x28>)
1004d3b4:	4a09      	ldr	r2, [pc, #36]	@ (1004d3dc <global_stdio_init.part.0+0x2c>)
1004d3b6:	2104      	movs	r1, #4
1004d3b8:	601a      	str	r2, [r3, #0]
1004d3ba:	4809      	ldr	r0, [pc, #36]	@ (1004d3e0 <global_stdio_init.part.0+0x30>)
1004d3bc:	2200      	movs	r2, #0
1004d3be:	f7ff ff95 	bl	1004d2ec <std>
1004d3c2:	2201      	movs	r2, #1
1004d3c4:	2109      	movs	r1, #9
1004d3c6:	4807      	ldr	r0, [pc, #28]	@ (1004d3e4 <global_stdio_init.part.0+0x34>)
1004d3c8:	f7ff ff90 	bl	1004d2ec <std>
1004d3cc:	2202      	movs	r2, #2
1004d3ce:	2112      	movs	r1, #18
1004d3d0:	4805      	ldr	r0, [pc, #20]	@ (1004d3e8 <global_stdio_init.part.0+0x38>)
1004d3d2:	f7ff ff8b 	bl	1004d2ec <std>
1004d3d6:	bd10      	pop	{r4, pc}
1004d3d8:	200007d8 	.word	0x200007d8
1004d3dc:	1004d359 	.word	0x1004d359
1004d3e0:	200006a0 	.word	0x200006a0
1004d3e4:	20000708 	.word	0x20000708
1004d3e8:	20000770 	.word	0x20000770

1004d3ec <__sfp_lock_acquire>:
1004d3ec:	b510      	push	{r4, lr}
1004d3ee:	4802      	ldr	r0, [pc, #8]	@ (1004d3f8 <__sfp_lock_acquire+0xc>)
1004d3f0:	f000 fabd 	bl	1004d96e <__retarget_lock_acquire_recursive>
1004d3f4:	bd10      	pop	{r4, pc}
1004d3f6:	46c0      	nop			@ (mov r8, r8)
1004d3f8:	200007e1 	.word	0x200007e1

1004d3fc <__sfp_lock_release>:
1004d3fc:	b510      	push	{r4, lr}
1004d3fe:	4802      	ldr	r0, [pc, #8]	@ (1004d408 <__sfp_lock_release+0xc>)
1004d400:	f000 fab6 	bl	1004d970 <__retarget_lock_release_recursive>
1004d404:	bd10      	pop	{r4, pc}
1004d406:	46c0      	nop			@ (mov r8, r8)
1004d408:	200007e1 	.word	0x200007e1

1004d40c <__sinit>:
1004d40c:	b510      	push	{r4, lr}
1004d40e:	0004      	movs	r4, r0
1004d410:	f7ff ffec 	bl	1004d3ec <__sfp_lock_acquire>
1004d414:	6a23      	ldr	r3, [r4, #32]
1004d416:	2b00      	cmp	r3, #0
1004d418:	d002      	beq.n	1004d420 <__sinit+0x14>
1004d41a:	f7ff ffef 	bl	1004d3fc <__sfp_lock_release>
1004d41e:	bd10      	pop	{r4, pc}
1004d420:	4b04      	ldr	r3, [pc, #16]	@ (1004d434 <__sinit+0x28>)
1004d422:	6223      	str	r3, [r4, #32]
1004d424:	4b04      	ldr	r3, [pc, #16]	@ (1004d438 <__sinit+0x2c>)
1004d426:	681b      	ldr	r3, [r3, #0]
1004d428:	2b00      	cmp	r3, #0
1004d42a:	d1f6      	bne.n	1004d41a <__sinit+0xe>
1004d42c:	f7ff ffc0 	bl	1004d3b0 <global_stdio_init.part.0>
1004d430:	e7f3      	b.n	1004d41a <__sinit+0xe>
1004d432:	46c0      	nop			@ (mov r8, r8)
1004d434:	1004d375 	.word	0x1004d375
1004d438:	200007d8 	.word	0x200007d8

1004d43c <_fwalk_sglue>:
1004d43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004d43e:	0014      	movs	r4, r2
1004d440:	2600      	movs	r6, #0
1004d442:	9000      	str	r0, [sp, #0]
1004d444:	9101      	str	r1, [sp, #4]
1004d446:	68a5      	ldr	r5, [r4, #8]
1004d448:	6867      	ldr	r7, [r4, #4]
1004d44a:	3f01      	subs	r7, #1
1004d44c:	d504      	bpl.n	1004d458 <_fwalk_sglue+0x1c>
1004d44e:	6824      	ldr	r4, [r4, #0]
1004d450:	2c00      	cmp	r4, #0
1004d452:	d1f8      	bne.n	1004d446 <_fwalk_sglue+0xa>
1004d454:	0030      	movs	r0, r6
1004d456:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004d458:	89ab      	ldrh	r3, [r5, #12]
1004d45a:	2b01      	cmp	r3, #1
1004d45c:	d908      	bls.n	1004d470 <_fwalk_sglue+0x34>
1004d45e:	220e      	movs	r2, #14
1004d460:	5eab      	ldrsh	r3, [r5, r2]
1004d462:	3301      	adds	r3, #1
1004d464:	d004      	beq.n	1004d470 <_fwalk_sglue+0x34>
1004d466:	0029      	movs	r1, r5
1004d468:	9800      	ldr	r0, [sp, #0]
1004d46a:	9b01      	ldr	r3, [sp, #4]
1004d46c:	4798      	blx	r3
1004d46e:	4306      	orrs	r6, r0
1004d470:	3568      	adds	r5, #104	@ 0x68
1004d472:	e7ea      	b.n	1004d44a <_fwalk_sglue+0xe>

1004d474 <iprintf>:
1004d474:	b40f      	push	{r0, r1, r2, r3}
1004d476:	b507      	push	{r0, r1, r2, lr}
1004d478:	4905      	ldr	r1, [pc, #20]	@ (1004d490 <iprintf+0x1c>)
1004d47a:	ab04      	add	r3, sp, #16
1004d47c:	6808      	ldr	r0, [r1, #0]
1004d47e:	cb04      	ldmia	r3!, {r2}
1004d480:	6881      	ldr	r1, [r0, #8]
1004d482:	9301      	str	r3, [sp, #4]
1004d484:	f000 fbac 	bl	1004dbe0 <_vfiprintf_r>
1004d488:	b003      	add	sp, #12
1004d48a:	bc08      	pop	{r3}
1004d48c:	b004      	add	sp, #16
1004d48e:	4718      	bx	r3
1004d490:	2000084c 	.word	0x2000084c

1004d494 <_puts_r>:
1004d494:	6a03      	ldr	r3, [r0, #32]
1004d496:	b570      	push	{r4, r5, r6, lr}
1004d498:	0005      	movs	r5, r0
1004d49a:	000e      	movs	r6, r1
1004d49c:	6884      	ldr	r4, [r0, #8]
1004d49e:	2b00      	cmp	r3, #0
1004d4a0:	d101      	bne.n	1004d4a6 <_puts_r+0x12>
1004d4a2:	f7ff ffb3 	bl	1004d40c <__sinit>
1004d4a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004d4a8:	07db      	lsls	r3, r3, #31
1004d4aa:	d405      	bmi.n	1004d4b8 <_puts_r+0x24>
1004d4ac:	89a3      	ldrh	r3, [r4, #12]
1004d4ae:	059b      	lsls	r3, r3, #22
1004d4b0:	d402      	bmi.n	1004d4b8 <_puts_r+0x24>
1004d4b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004d4b4:	f000 fa5b 	bl	1004d96e <__retarget_lock_acquire_recursive>
1004d4b8:	89a3      	ldrh	r3, [r4, #12]
1004d4ba:	071b      	lsls	r3, r3, #28
1004d4bc:	d502      	bpl.n	1004d4c4 <_puts_r+0x30>
1004d4be:	6923      	ldr	r3, [r4, #16]
1004d4c0:	2b00      	cmp	r3, #0
1004d4c2:	d11f      	bne.n	1004d504 <_puts_r+0x70>
1004d4c4:	0021      	movs	r1, r4
1004d4c6:	0028      	movs	r0, r5
1004d4c8:	f000 f988 	bl	1004d7dc <__swsetup_r>
1004d4cc:	2800      	cmp	r0, #0
1004d4ce:	d019      	beq.n	1004d504 <_puts_r+0x70>
1004d4d0:	2501      	movs	r5, #1
1004d4d2:	426d      	negs	r5, r5
1004d4d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004d4d6:	07db      	lsls	r3, r3, #31
1004d4d8:	d405      	bmi.n	1004d4e6 <_puts_r+0x52>
1004d4da:	89a3      	ldrh	r3, [r4, #12]
1004d4dc:	059b      	lsls	r3, r3, #22
1004d4de:	d402      	bmi.n	1004d4e6 <_puts_r+0x52>
1004d4e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004d4e2:	f000 fa45 	bl	1004d970 <__retarget_lock_release_recursive>
1004d4e6:	0028      	movs	r0, r5
1004d4e8:	bd70      	pop	{r4, r5, r6, pc}
1004d4ea:	3601      	adds	r6, #1
1004d4ec:	60a3      	str	r3, [r4, #8]
1004d4ee:	2b00      	cmp	r3, #0
1004d4f0:	da04      	bge.n	1004d4fc <_puts_r+0x68>
1004d4f2:	69a2      	ldr	r2, [r4, #24]
1004d4f4:	429a      	cmp	r2, r3
1004d4f6:	dc16      	bgt.n	1004d526 <_puts_r+0x92>
1004d4f8:	290a      	cmp	r1, #10
1004d4fa:	d014      	beq.n	1004d526 <_puts_r+0x92>
1004d4fc:	6823      	ldr	r3, [r4, #0]
1004d4fe:	1c5a      	adds	r2, r3, #1
1004d500:	6022      	str	r2, [r4, #0]
1004d502:	7019      	strb	r1, [r3, #0]
1004d504:	68a3      	ldr	r3, [r4, #8]
1004d506:	7831      	ldrb	r1, [r6, #0]
1004d508:	3b01      	subs	r3, #1
1004d50a:	2900      	cmp	r1, #0
1004d50c:	d1ed      	bne.n	1004d4ea <_puts_r+0x56>
1004d50e:	60a3      	str	r3, [r4, #8]
1004d510:	2b00      	cmp	r3, #0
1004d512:	da0f      	bge.n	1004d534 <_puts_r+0xa0>
1004d514:	0022      	movs	r2, r4
1004d516:	0028      	movs	r0, r5
1004d518:	310a      	adds	r1, #10
1004d51a:	f000 f91d 	bl	1004d758 <__swbuf_r>
1004d51e:	3001      	adds	r0, #1
1004d520:	d0d6      	beq.n	1004d4d0 <_puts_r+0x3c>
1004d522:	250a      	movs	r5, #10
1004d524:	e7d6      	b.n	1004d4d4 <_puts_r+0x40>
1004d526:	0022      	movs	r2, r4
1004d528:	0028      	movs	r0, r5
1004d52a:	f000 f915 	bl	1004d758 <__swbuf_r>
1004d52e:	3001      	adds	r0, #1
1004d530:	d1e8      	bne.n	1004d504 <_puts_r+0x70>
1004d532:	e7cd      	b.n	1004d4d0 <_puts_r+0x3c>
1004d534:	6823      	ldr	r3, [r4, #0]
1004d536:	1c5a      	adds	r2, r3, #1
1004d538:	6022      	str	r2, [r4, #0]
1004d53a:	220a      	movs	r2, #10
1004d53c:	701a      	strb	r2, [r3, #0]
1004d53e:	e7f0      	b.n	1004d522 <_puts_r+0x8e>

1004d540 <puts>:
1004d540:	b510      	push	{r4, lr}
1004d542:	4b03      	ldr	r3, [pc, #12]	@ (1004d550 <puts+0x10>)
1004d544:	0001      	movs	r1, r0
1004d546:	6818      	ldr	r0, [r3, #0]
1004d548:	f7ff ffa4 	bl	1004d494 <_puts_r>
1004d54c:	bd10      	pop	{r4, pc}
1004d54e:	46c0      	nop			@ (mov r8, r8)
1004d550:	2000084c 	.word	0x2000084c

1004d554 <setvbuf>:
1004d554:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d556:	001d      	movs	r5, r3
1004d558:	4b57      	ldr	r3, [pc, #348]	@ (1004d6b8 <setvbuf+0x164>)
1004d55a:	b085      	sub	sp, #20
1004d55c:	681e      	ldr	r6, [r3, #0]
1004d55e:	0004      	movs	r4, r0
1004d560:	000f      	movs	r7, r1
1004d562:	9200      	str	r2, [sp, #0]
1004d564:	2e00      	cmp	r6, #0
1004d566:	d005      	beq.n	1004d574 <setvbuf+0x20>
1004d568:	6a33      	ldr	r3, [r6, #32]
1004d56a:	2b00      	cmp	r3, #0
1004d56c:	d102      	bne.n	1004d574 <setvbuf+0x20>
1004d56e:	0030      	movs	r0, r6
1004d570:	f7ff ff4c 	bl	1004d40c <__sinit>
1004d574:	9b00      	ldr	r3, [sp, #0]
1004d576:	2b02      	cmp	r3, #2
1004d578:	d005      	beq.n	1004d586 <setvbuf+0x32>
1004d57a:	2b01      	cmp	r3, #1
1004d57c:	d900      	bls.n	1004d580 <setvbuf+0x2c>
1004d57e:	e097      	b.n	1004d6b0 <setvbuf+0x15c>
1004d580:	2d00      	cmp	r5, #0
1004d582:	da00      	bge.n	1004d586 <setvbuf+0x32>
1004d584:	e094      	b.n	1004d6b0 <setvbuf+0x15c>
1004d586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004d588:	07db      	lsls	r3, r3, #31
1004d58a:	d405      	bmi.n	1004d598 <setvbuf+0x44>
1004d58c:	89a3      	ldrh	r3, [r4, #12]
1004d58e:	059b      	lsls	r3, r3, #22
1004d590:	d402      	bmi.n	1004d598 <setvbuf+0x44>
1004d592:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004d594:	f000 f9eb 	bl	1004d96e <__retarget_lock_acquire_recursive>
1004d598:	0021      	movs	r1, r4
1004d59a:	0030      	movs	r0, r6
1004d59c:	f000 fe40 	bl	1004e220 <_fflush_r>
1004d5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004d5a2:	2900      	cmp	r1, #0
1004d5a4:	d008      	beq.n	1004d5b8 <setvbuf+0x64>
1004d5a6:	0023      	movs	r3, r4
1004d5a8:	3344      	adds	r3, #68	@ 0x44
1004d5aa:	4299      	cmp	r1, r3
1004d5ac:	d002      	beq.n	1004d5b4 <setvbuf+0x60>
1004d5ae:	0030      	movs	r0, r6
1004d5b0:	f000 f9e8 	bl	1004d984 <_free_r>
1004d5b4:	2300      	movs	r3, #0
1004d5b6:	6363      	str	r3, [r4, #52]	@ 0x34
1004d5b8:	2300      	movs	r3, #0
1004d5ba:	61a3      	str	r3, [r4, #24]
1004d5bc:	6063      	str	r3, [r4, #4]
1004d5be:	89a3      	ldrh	r3, [r4, #12]
1004d5c0:	061b      	lsls	r3, r3, #24
1004d5c2:	d503      	bpl.n	1004d5cc <setvbuf+0x78>
1004d5c4:	0030      	movs	r0, r6
1004d5c6:	6921      	ldr	r1, [r4, #16]
1004d5c8:	f000 f9dc 	bl	1004d984 <_free_r>
1004d5cc:	89a3      	ldrh	r3, [r4, #12]
1004d5ce:	4a3b      	ldr	r2, [pc, #236]	@ (1004d6bc <setvbuf+0x168>)
1004d5d0:	4013      	ands	r3, r2
1004d5d2:	81a3      	strh	r3, [r4, #12]
1004d5d4:	9b00      	ldr	r3, [sp, #0]
1004d5d6:	2b02      	cmp	r3, #2
1004d5d8:	d060      	beq.n	1004d69c <setvbuf+0x148>
1004d5da:	ab03      	add	r3, sp, #12
1004d5dc:	0021      	movs	r1, r4
1004d5de:	0030      	movs	r0, r6
1004d5e0:	aa02      	add	r2, sp, #8
1004d5e2:	f000 fe49 	bl	1004e278 <__swhatbuf_r>
1004d5e6:	89a3      	ldrh	r3, [r4, #12]
1004d5e8:	4303      	orrs	r3, r0
1004d5ea:	81a3      	strh	r3, [r4, #12]
1004d5ec:	2d00      	cmp	r5, #0
1004d5ee:	d124      	bne.n	1004d63a <setvbuf+0xe6>
1004d5f0:	9d02      	ldr	r5, [sp, #8]
1004d5f2:	0028      	movs	r0, r5
1004d5f4:	f000 fa10 	bl	1004da18 <malloc>
1004d5f8:	9501      	str	r5, [sp, #4]
1004d5fa:	1e07      	subs	r7, r0, #0
1004d5fc:	d148      	bne.n	1004d690 <setvbuf+0x13c>
1004d5fe:	9b02      	ldr	r3, [sp, #8]
1004d600:	9301      	str	r3, [sp, #4]
1004d602:	42ab      	cmp	r3, r5
1004d604:	d13f      	bne.n	1004d686 <setvbuf+0x132>
1004d606:	2501      	movs	r5, #1
1004d608:	426d      	negs	r5, r5
1004d60a:	220c      	movs	r2, #12
1004d60c:	5ea3      	ldrsh	r3, [r4, r2]
1004d60e:	2202      	movs	r2, #2
1004d610:	431a      	orrs	r2, r3
1004d612:	81a2      	strh	r2, [r4, #12]
1004d614:	2200      	movs	r2, #0
1004d616:	60a2      	str	r2, [r4, #8]
1004d618:	0022      	movs	r2, r4
1004d61a:	3247      	adds	r2, #71	@ 0x47
1004d61c:	6022      	str	r2, [r4, #0]
1004d61e:	6122      	str	r2, [r4, #16]
1004d620:	2201      	movs	r2, #1
1004d622:	6e61      	ldr	r1, [r4, #100]	@ 0x64
1004d624:	6162      	str	r2, [r4, #20]
1004d626:	4211      	tst	r1, r2
1004d628:	d104      	bne.n	1004d634 <setvbuf+0xe0>
1004d62a:	059b      	lsls	r3, r3, #22
1004d62c:	d402      	bmi.n	1004d634 <setvbuf+0xe0>
1004d62e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004d630:	f000 f99e 	bl	1004d970 <__retarget_lock_release_recursive>
1004d634:	0028      	movs	r0, r5
1004d636:	b005      	add	sp, #20
1004d638:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d63a:	2f00      	cmp	r7, #0
1004d63c:	d0d9      	beq.n	1004d5f2 <setvbuf+0x9e>
1004d63e:	6a33      	ldr	r3, [r6, #32]
1004d640:	2b00      	cmp	r3, #0
1004d642:	d102      	bne.n	1004d64a <setvbuf+0xf6>
1004d644:	0030      	movs	r0, r6
1004d646:	f7ff fee1 	bl	1004d40c <__sinit>
1004d64a:	9b00      	ldr	r3, [sp, #0]
1004d64c:	2b01      	cmp	r3, #1
1004d64e:	d103      	bne.n	1004d658 <setvbuf+0x104>
1004d650:	89a3      	ldrh	r3, [r4, #12]
1004d652:	9a00      	ldr	r2, [sp, #0]
1004d654:	431a      	orrs	r2, r3
1004d656:	81a2      	strh	r2, [r4, #12]
1004d658:	220c      	movs	r2, #12
1004d65a:	5ea3      	ldrsh	r3, [r4, r2]
1004d65c:	2208      	movs	r2, #8
1004d65e:	0019      	movs	r1, r3
1004d660:	6027      	str	r7, [r4, #0]
1004d662:	6127      	str	r7, [r4, #16]
1004d664:	6165      	str	r5, [r4, #20]
1004d666:	4011      	ands	r1, r2
1004d668:	4213      	tst	r3, r2
1004d66a:	d01b      	beq.n	1004d6a4 <setvbuf+0x150>
1004d66c:	07da      	lsls	r2, r3, #31
1004d66e:	d517      	bpl.n	1004d6a0 <setvbuf+0x14c>
1004d670:	2200      	movs	r2, #0
1004d672:	426d      	negs	r5, r5
1004d674:	60a2      	str	r2, [r4, #8]
1004d676:	61a5      	str	r5, [r4, #24]
1004d678:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004d67a:	07d2      	lsls	r2, r2, #31
1004d67c:	d401      	bmi.n	1004d682 <setvbuf+0x12e>
1004d67e:	059b      	lsls	r3, r3, #22
1004d680:	d512      	bpl.n	1004d6a8 <setvbuf+0x154>
1004d682:	2500      	movs	r5, #0
1004d684:	e7d6      	b.n	1004d634 <setvbuf+0xe0>
1004d686:	9801      	ldr	r0, [sp, #4]
1004d688:	f000 f9c6 	bl	1004da18 <malloc>
1004d68c:	1e07      	subs	r7, r0, #0
1004d68e:	d0ba      	beq.n	1004d606 <setvbuf+0xb2>
1004d690:	2380      	movs	r3, #128	@ 0x80
1004d692:	89a2      	ldrh	r2, [r4, #12]
1004d694:	9d01      	ldr	r5, [sp, #4]
1004d696:	4313      	orrs	r3, r2
1004d698:	81a3      	strh	r3, [r4, #12]
1004d69a:	e7d0      	b.n	1004d63e <setvbuf+0xea>
1004d69c:	2500      	movs	r5, #0
1004d69e:	e7b4      	b.n	1004d60a <setvbuf+0xb6>
1004d6a0:	60a5      	str	r5, [r4, #8]
1004d6a2:	e7e9      	b.n	1004d678 <setvbuf+0x124>
1004d6a4:	60a1      	str	r1, [r4, #8]
1004d6a6:	e7e7      	b.n	1004d678 <setvbuf+0x124>
1004d6a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004d6aa:	f000 f961 	bl	1004d970 <__retarget_lock_release_recursive>
1004d6ae:	e7e8      	b.n	1004d682 <setvbuf+0x12e>
1004d6b0:	2501      	movs	r5, #1
1004d6b2:	426d      	negs	r5, r5
1004d6b4:	e7be      	b.n	1004d634 <setvbuf+0xe0>
1004d6b6:	46c0      	nop			@ (mov r8, r8)
1004d6b8:	2000084c 	.word	0x2000084c
1004d6bc:	fffff35c 	.word	0xfffff35c

1004d6c0 <__sread>:
1004d6c0:	b570      	push	{r4, r5, r6, lr}
1004d6c2:	000c      	movs	r4, r1
1004d6c4:	250e      	movs	r5, #14
1004d6c6:	5f49      	ldrsh	r1, [r1, r5]
1004d6c8:	f000 f922 	bl	1004d910 <_read_r>
1004d6cc:	2800      	cmp	r0, #0
1004d6ce:	db03      	blt.n	1004d6d8 <__sread+0x18>
1004d6d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
1004d6d2:	181b      	adds	r3, r3, r0
1004d6d4:	6563      	str	r3, [r4, #84]	@ 0x54
1004d6d6:	bd70      	pop	{r4, r5, r6, pc}
1004d6d8:	89a3      	ldrh	r3, [r4, #12]
1004d6da:	4a02      	ldr	r2, [pc, #8]	@ (1004d6e4 <__sread+0x24>)
1004d6dc:	4013      	ands	r3, r2
1004d6de:	81a3      	strh	r3, [r4, #12]
1004d6e0:	e7f9      	b.n	1004d6d6 <__sread+0x16>
1004d6e2:	46c0      	nop			@ (mov r8, r8)
1004d6e4:	ffffefff 	.word	0xffffefff

1004d6e8 <__swrite>:
1004d6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d6ea:	001f      	movs	r7, r3
1004d6ec:	898b      	ldrh	r3, [r1, #12]
1004d6ee:	0005      	movs	r5, r0
1004d6f0:	000c      	movs	r4, r1
1004d6f2:	0016      	movs	r6, r2
1004d6f4:	05db      	lsls	r3, r3, #23
1004d6f6:	d505      	bpl.n	1004d704 <__swrite+0x1c>
1004d6f8:	230e      	movs	r3, #14
1004d6fa:	5ec9      	ldrsh	r1, [r1, r3]
1004d6fc:	2200      	movs	r2, #0
1004d6fe:	2302      	movs	r3, #2
1004d700:	f000 f8f2 	bl	1004d8e8 <_lseek_r>
1004d704:	89a3      	ldrh	r3, [r4, #12]
1004d706:	4a05      	ldr	r2, [pc, #20]	@ (1004d71c <__swrite+0x34>)
1004d708:	0028      	movs	r0, r5
1004d70a:	4013      	ands	r3, r2
1004d70c:	81a3      	strh	r3, [r4, #12]
1004d70e:	0032      	movs	r2, r6
1004d710:	230e      	movs	r3, #14
1004d712:	5ee1      	ldrsh	r1, [r4, r3]
1004d714:	003b      	movs	r3, r7
1004d716:	f000 f90f 	bl	1004d938 <_write_r>
1004d71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d71c:	ffffefff 	.word	0xffffefff

1004d720 <__sseek>:
1004d720:	b570      	push	{r4, r5, r6, lr}
1004d722:	000c      	movs	r4, r1
1004d724:	250e      	movs	r5, #14
1004d726:	5f49      	ldrsh	r1, [r1, r5]
1004d728:	f000 f8de 	bl	1004d8e8 <_lseek_r>
1004d72c:	89a3      	ldrh	r3, [r4, #12]
1004d72e:	1c42      	adds	r2, r0, #1
1004d730:	d103      	bne.n	1004d73a <__sseek+0x1a>
1004d732:	4a05      	ldr	r2, [pc, #20]	@ (1004d748 <__sseek+0x28>)
1004d734:	4013      	ands	r3, r2
1004d736:	81a3      	strh	r3, [r4, #12]
1004d738:	bd70      	pop	{r4, r5, r6, pc}
1004d73a:	2280      	movs	r2, #128	@ 0x80
1004d73c:	0152      	lsls	r2, r2, #5
1004d73e:	4313      	orrs	r3, r2
1004d740:	81a3      	strh	r3, [r4, #12]
1004d742:	6560      	str	r0, [r4, #84]	@ 0x54
1004d744:	e7f8      	b.n	1004d738 <__sseek+0x18>
1004d746:	46c0      	nop			@ (mov r8, r8)
1004d748:	ffffefff 	.word	0xffffefff

1004d74c <__sclose>:
1004d74c:	b510      	push	{r4, lr}
1004d74e:	230e      	movs	r3, #14
1004d750:	5ec9      	ldrsh	r1, [r1, r3]
1004d752:	f000 f8b7 	bl	1004d8c4 <_close_r>
1004d756:	bd10      	pop	{r4, pc}

1004d758 <__swbuf_r>:
1004d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d75a:	0006      	movs	r6, r0
1004d75c:	000d      	movs	r5, r1
1004d75e:	0014      	movs	r4, r2
1004d760:	2800      	cmp	r0, #0
1004d762:	d004      	beq.n	1004d76e <__swbuf_r+0x16>
1004d764:	6a03      	ldr	r3, [r0, #32]
1004d766:	2b00      	cmp	r3, #0
1004d768:	d101      	bne.n	1004d76e <__swbuf_r+0x16>
1004d76a:	f7ff fe4f 	bl	1004d40c <__sinit>
1004d76e:	69a3      	ldr	r3, [r4, #24]
1004d770:	60a3      	str	r3, [r4, #8]
1004d772:	89a3      	ldrh	r3, [r4, #12]
1004d774:	071b      	lsls	r3, r3, #28
1004d776:	d502      	bpl.n	1004d77e <__swbuf_r+0x26>
1004d778:	6923      	ldr	r3, [r4, #16]
1004d77a:	2b00      	cmp	r3, #0
1004d77c:	d109      	bne.n	1004d792 <__swbuf_r+0x3a>
1004d77e:	0021      	movs	r1, r4
1004d780:	0030      	movs	r0, r6
1004d782:	f000 f82b 	bl	1004d7dc <__swsetup_r>
1004d786:	2800      	cmp	r0, #0
1004d788:	d003      	beq.n	1004d792 <__swbuf_r+0x3a>
1004d78a:	2501      	movs	r5, #1
1004d78c:	426d      	negs	r5, r5
1004d78e:	0028      	movs	r0, r5
1004d790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d792:	6923      	ldr	r3, [r4, #16]
1004d794:	6820      	ldr	r0, [r4, #0]
1004d796:	b2ef      	uxtb	r7, r5
1004d798:	1ac0      	subs	r0, r0, r3
1004d79a:	6963      	ldr	r3, [r4, #20]
1004d79c:	b2ed      	uxtb	r5, r5
1004d79e:	4283      	cmp	r3, r0
1004d7a0:	dc05      	bgt.n	1004d7ae <__swbuf_r+0x56>
1004d7a2:	0021      	movs	r1, r4
1004d7a4:	0030      	movs	r0, r6
1004d7a6:	f000 fd3b 	bl	1004e220 <_fflush_r>
1004d7aa:	2800      	cmp	r0, #0
1004d7ac:	d1ed      	bne.n	1004d78a <__swbuf_r+0x32>
1004d7ae:	68a3      	ldr	r3, [r4, #8]
1004d7b0:	3001      	adds	r0, #1
1004d7b2:	3b01      	subs	r3, #1
1004d7b4:	60a3      	str	r3, [r4, #8]
1004d7b6:	6823      	ldr	r3, [r4, #0]
1004d7b8:	1c5a      	adds	r2, r3, #1
1004d7ba:	6022      	str	r2, [r4, #0]
1004d7bc:	701f      	strb	r7, [r3, #0]
1004d7be:	6963      	ldr	r3, [r4, #20]
1004d7c0:	4283      	cmp	r3, r0
1004d7c2:	d004      	beq.n	1004d7ce <__swbuf_r+0x76>
1004d7c4:	89a3      	ldrh	r3, [r4, #12]
1004d7c6:	07db      	lsls	r3, r3, #31
1004d7c8:	d5e1      	bpl.n	1004d78e <__swbuf_r+0x36>
1004d7ca:	2d0a      	cmp	r5, #10
1004d7cc:	d1df      	bne.n	1004d78e <__swbuf_r+0x36>
1004d7ce:	0021      	movs	r1, r4
1004d7d0:	0030      	movs	r0, r6
1004d7d2:	f000 fd25 	bl	1004e220 <_fflush_r>
1004d7d6:	2800      	cmp	r0, #0
1004d7d8:	d0d9      	beq.n	1004d78e <__swbuf_r+0x36>
1004d7da:	e7d6      	b.n	1004d78a <__swbuf_r+0x32>

1004d7dc <__swsetup_r>:
1004d7dc:	4b2d      	ldr	r3, [pc, #180]	@ (1004d894 <__swsetup_r+0xb8>)
1004d7de:	b570      	push	{r4, r5, r6, lr}
1004d7e0:	0005      	movs	r5, r0
1004d7e2:	6818      	ldr	r0, [r3, #0]
1004d7e4:	000c      	movs	r4, r1
1004d7e6:	2800      	cmp	r0, #0
1004d7e8:	d004      	beq.n	1004d7f4 <__swsetup_r+0x18>
1004d7ea:	6a03      	ldr	r3, [r0, #32]
1004d7ec:	2b00      	cmp	r3, #0
1004d7ee:	d101      	bne.n	1004d7f4 <__swsetup_r+0x18>
1004d7f0:	f7ff fe0c 	bl	1004d40c <__sinit>
1004d7f4:	230c      	movs	r3, #12
1004d7f6:	5ee2      	ldrsh	r2, [r4, r3]
1004d7f8:	0713      	lsls	r3, r2, #28
1004d7fa:	d423      	bmi.n	1004d844 <__swsetup_r+0x68>
1004d7fc:	06d3      	lsls	r3, r2, #27
1004d7fe:	d407      	bmi.n	1004d810 <__swsetup_r+0x34>
1004d800:	2309      	movs	r3, #9
1004d802:	602b      	str	r3, [r5, #0]
1004d804:	2340      	movs	r3, #64	@ 0x40
1004d806:	2001      	movs	r0, #1
1004d808:	4313      	orrs	r3, r2
1004d80a:	81a3      	strh	r3, [r4, #12]
1004d80c:	4240      	negs	r0, r0
1004d80e:	e03a      	b.n	1004d886 <__swsetup_r+0xaa>
1004d810:	0752      	lsls	r2, r2, #29
1004d812:	d513      	bpl.n	1004d83c <__swsetup_r+0x60>
1004d814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004d816:	2900      	cmp	r1, #0
1004d818:	d008      	beq.n	1004d82c <__swsetup_r+0x50>
1004d81a:	0023      	movs	r3, r4
1004d81c:	3344      	adds	r3, #68	@ 0x44
1004d81e:	4299      	cmp	r1, r3
1004d820:	d002      	beq.n	1004d828 <__swsetup_r+0x4c>
1004d822:	0028      	movs	r0, r5
1004d824:	f000 f8ae 	bl	1004d984 <_free_r>
1004d828:	2300      	movs	r3, #0
1004d82a:	6363      	str	r3, [r4, #52]	@ 0x34
1004d82c:	2224      	movs	r2, #36	@ 0x24
1004d82e:	89a3      	ldrh	r3, [r4, #12]
1004d830:	4393      	bics	r3, r2
1004d832:	81a3      	strh	r3, [r4, #12]
1004d834:	2300      	movs	r3, #0
1004d836:	6063      	str	r3, [r4, #4]
1004d838:	6923      	ldr	r3, [r4, #16]
1004d83a:	6023      	str	r3, [r4, #0]
1004d83c:	2308      	movs	r3, #8
1004d83e:	89a2      	ldrh	r2, [r4, #12]
1004d840:	4313      	orrs	r3, r2
1004d842:	81a3      	strh	r3, [r4, #12]
1004d844:	6923      	ldr	r3, [r4, #16]
1004d846:	2b00      	cmp	r3, #0
1004d848:	d10b      	bne.n	1004d862 <__swsetup_r+0x86>
1004d84a:	21a0      	movs	r1, #160	@ 0xa0
1004d84c:	2280      	movs	r2, #128	@ 0x80
1004d84e:	89a3      	ldrh	r3, [r4, #12]
1004d850:	0089      	lsls	r1, r1, #2
1004d852:	0092      	lsls	r2, r2, #2
1004d854:	400b      	ands	r3, r1
1004d856:	4293      	cmp	r3, r2
1004d858:	d003      	beq.n	1004d862 <__swsetup_r+0x86>
1004d85a:	0021      	movs	r1, r4
1004d85c:	0028      	movs	r0, r5
1004d85e:	f000 fd35 	bl	1004e2cc <__smakebuf_r>
1004d862:	230c      	movs	r3, #12
1004d864:	5ee2      	ldrsh	r2, [r4, r3]
1004d866:	2101      	movs	r1, #1
1004d868:	0013      	movs	r3, r2
1004d86a:	400b      	ands	r3, r1
1004d86c:	420a      	tst	r2, r1
1004d86e:	d00b      	beq.n	1004d888 <__swsetup_r+0xac>
1004d870:	2300      	movs	r3, #0
1004d872:	60a3      	str	r3, [r4, #8]
1004d874:	6963      	ldr	r3, [r4, #20]
1004d876:	425b      	negs	r3, r3
1004d878:	61a3      	str	r3, [r4, #24]
1004d87a:	2000      	movs	r0, #0
1004d87c:	6923      	ldr	r3, [r4, #16]
1004d87e:	4283      	cmp	r3, r0
1004d880:	d101      	bne.n	1004d886 <__swsetup_r+0xaa>
1004d882:	0613      	lsls	r3, r2, #24
1004d884:	d4be      	bmi.n	1004d804 <__swsetup_r+0x28>
1004d886:	bd70      	pop	{r4, r5, r6, pc}
1004d888:	0791      	lsls	r1, r2, #30
1004d88a:	d400      	bmi.n	1004d88e <__swsetup_r+0xb2>
1004d88c:	6963      	ldr	r3, [r4, #20]
1004d88e:	60a3      	str	r3, [r4, #8]
1004d890:	e7f3      	b.n	1004d87a <__swsetup_r+0x9e>
1004d892:	46c0      	nop			@ (mov r8, r8)
1004d894:	2000084c 	.word	0x2000084c

1004d898 <memcmp>:
1004d898:	b530      	push	{r4, r5, lr}
1004d89a:	2400      	movs	r4, #0
1004d89c:	3901      	subs	r1, #1
1004d89e:	42a2      	cmp	r2, r4
1004d8a0:	d101      	bne.n	1004d8a6 <memcmp+0xe>
1004d8a2:	2000      	movs	r0, #0
1004d8a4:	e005      	b.n	1004d8b2 <memcmp+0x1a>
1004d8a6:	5d03      	ldrb	r3, [r0, r4]
1004d8a8:	3401      	adds	r4, #1
1004d8aa:	5d0d      	ldrb	r5, [r1, r4]
1004d8ac:	42ab      	cmp	r3, r5
1004d8ae:	d0f6      	beq.n	1004d89e <memcmp+0x6>
1004d8b0:	1b58      	subs	r0, r3, r5
1004d8b2:	bd30      	pop	{r4, r5, pc}

1004d8b4 <memset>:
1004d8b4:	0003      	movs	r3, r0
1004d8b6:	1882      	adds	r2, r0, r2
1004d8b8:	4293      	cmp	r3, r2
1004d8ba:	d100      	bne.n	1004d8be <memset+0xa>
1004d8bc:	4770      	bx	lr
1004d8be:	7019      	strb	r1, [r3, #0]
1004d8c0:	3301      	adds	r3, #1
1004d8c2:	e7f9      	b.n	1004d8b8 <memset+0x4>

1004d8c4 <_close_r>:
1004d8c4:	2300      	movs	r3, #0
1004d8c6:	b570      	push	{r4, r5, r6, lr}
1004d8c8:	4d06      	ldr	r5, [pc, #24]	@ (1004d8e4 <_close_r+0x20>)
1004d8ca:	0004      	movs	r4, r0
1004d8cc:	0008      	movs	r0, r1
1004d8ce:	602b      	str	r3, [r5, #0]
1004d8d0:	f7f3 fcb5 	bl	1004123e <_close>
1004d8d4:	1c43      	adds	r3, r0, #1
1004d8d6:	d103      	bne.n	1004d8e0 <_close_r+0x1c>
1004d8d8:	682b      	ldr	r3, [r5, #0]
1004d8da:	2b00      	cmp	r3, #0
1004d8dc:	d000      	beq.n	1004d8e0 <_close_r+0x1c>
1004d8de:	6023      	str	r3, [r4, #0]
1004d8e0:	bd70      	pop	{r4, r5, r6, pc}
1004d8e2:	46c0      	nop			@ (mov r8, r8)
1004d8e4:	200007dc 	.word	0x200007dc

1004d8e8 <_lseek_r>:
1004d8e8:	b570      	push	{r4, r5, r6, lr}
1004d8ea:	0004      	movs	r4, r0
1004d8ec:	0008      	movs	r0, r1
1004d8ee:	0011      	movs	r1, r2
1004d8f0:	001a      	movs	r2, r3
1004d8f2:	2300      	movs	r3, #0
1004d8f4:	4d05      	ldr	r5, [pc, #20]	@ (1004d90c <_lseek_r+0x24>)
1004d8f6:	602b      	str	r3, [r5, #0]
1004d8f8:	f7f3 fcc2 	bl	10041280 <_lseek>
1004d8fc:	1c43      	adds	r3, r0, #1
1004d8fe:	d103      	bne.n	1004d908 <_lseek_r+0x20>
1004d900:	682b      	ldr	r3, [r5, #0]
1004d902:	2b00      	cmp	r3, #0
1004d904:	d000      	beq.n	1004d908 <_lseek_r+0x20>
1004d906:	6023      	str	r3, [r4, #0]
1004d908:	bd70      	pop	{r4, r5, r6, pc}
1004d90a:	46c0      	nop			@ (mov r8, r8)
1004d90c:	200007dc 	.word	0x200007dc

1004d910 <_read_r>:
1004d910:	b570      	push	{r4, r5, r6, lr}
1004d912:	0004      	movs	r4, r0
1004d914:	0008      	movs	r0, r1
1004d916:	0011      	movs	r1, r2
1004d918:	001a      	movs	r2, r3
1004d91a:	2300      	movs	r3, #0
1004d91c:	4d05      	ldr	r5, [pc, #20]	@ (1004d934 <_read_r+0x24>)
1004d91e:	602b      	str	r3, [r5, #0]
1004d920:	f7f3 fc54 	bl	100411cc <_read>
1004d924:	1c43      	adds	r3, r0, #1
1004d926:	d103      	bne.n	1004d930 <_read_r+0x20>
1004d928:	682b      	ldr	r3, [r5, #0]
1004d92a:	2b00      	cmp	r3, #0
1004d92c:	d000      	beq.n	1004d930 <_read_r+0x20>
1004d92e:	6023      	str	r3, [r4, #0]
1004d930:	bd70      	pop	{r4, r5, r6, pc}
1004d932:	46c0      	nop			@ (mov r8, r8)
1004d934:	200007dc 	.word	0x200007dc

1004d938 <_write_r>:
1004d938:	b570      	push	{r4, r5, r6, lr}
1004d93a:	0004      	movs	r4, r0
1004d93c:	0008      	movs	r0, r1
1004d93e:	0011      	movs	r1, r2
1004d940:	001a      	movs	r2, r3
1004d942:	2300      	movs	r3, #0
1004d944:	4d05      	ldr	r5, [pc, #20]	@ (1004d95c <_write_r+0x24>)
1004d946:	602b      	str	r3, [r5, #0]
1004d948:	f7f3 fc5d 	bl	10041206 <_write>
1004d94c:	1c43      	adds	r3, r0, #1
1004d94e:	d103      	bne.n	1004d958 <_write_r+0x20>
1004d950:	682b      	ldr	r3, [r5, #0]
1004d952:	2b00      	cmp	r3, #0
1004d954:	d000      	beq.n	1004d958 <_write_r+0x20>
1004d956:	6023      	str	r3, [r4, #0]
1004d958:	bd70      	pop	{r4, r5, r6, pc}
1004d95a:	46c0      	nop			@ (mov r8, r8)
1004d95c:	200007dc 	.word	0x200007dc

1004d960 <__errno>:
1004d960:	4b01      	ldr	r3, [pc, #4]	@ (1004d968 <__errno+0x8>)
1004d962:	6818      	ldr	r0, [r3, #0]
1004d964:	4770      	bx	lr
1004d966:	46c0      	nop			@ (mov r8, r8)
1004d968:	2000084c 	.word	0x2000084c

1004d96c <__retarget_lock_init_recursive>:
1004d96c:	4770      	bx	lr

1004d96e <__retarget_lock_acquire_recursive>:
1004d96e:	4770      	bx	lr

1004d970 <__retarget_lock_release_recursive>:
1004d970:	4770      	bx	lr

1004d972 <memcpy>:
1004d972:	2300      	movs	r3, #0
1004d974:	b510      	push	{r4, lr}
1004d976:	429a      	cmp	r2, r3
1004d978:	d100      	bne.n	1004d97c <memcpy+0xa>
1004d97a:	bd10      	pop	{r4, pc}
1004d97c:	5ccc      	ldrb	r4, [r1, r3]
1004d97e:	54c4      	strb	r4, [r0, r3]
1004d980:	3301      	adds	r3, #1
1004d982:	e7f8      	b.n	1004d976 <memcpy+0x4>

1004d984 <_free_r>:
1004d984:	b570      	push	{r4, r5, r6, lr}
1004d986:	0005      	movs	r5, r0
1004d988:	1e0c      	subs	r4, r1, #0
1004d98a:	d010      	beq.n	1004d9ae <_free_r+0x2a>
1004d98c:	3c04      	subs	r4, #4
1004d98e:	6823      	ldr	r3, [r4, #0]
1004d990:	2b00      	cmp	r3, #0
1004d992:	da00      	bge.n	1004d996 <_free_r+0x12>
1004d994:	18e4      	adds	r4, r4, r3
1004d996:	0028      	movs	r0, r5
1004d998:	f000 f8ea 	bl	1004db70 <__malloc_lock>
1004d99c:	4a1d      	ldr	r2, [pc, #116]	@ (1004da14 <_free_r+0x90>)
1004d99e:	6813      	ldr	r3, [r2, #0]
1004d9a0:	2b00      	cmp	r3, #0
1004d9a2:	d105      	bne.n	1004d9b0 <_free_r+0x2c>
1004d9a4:	6063      	str	r3, [r4, #4]
1004d9a6:	6014      	str	r4, [r2, #0]
1004d9a8:	0028      	movs	r0, r5
1004d9aa:	f000 f8e9 	bl	1004db80 <__malloc_unlock>
1004d9ae:	bd70      	pop	{r4, r5, r6, pc}
1004d9b0:	42a3      	cmp	r3, r4
1004d9b2:	d908      	bls.n	1004d9c6 <_free_r+0x42>
1004d9b4:	6820      	ldr	r0, [r4, #0]
1004d9b6:	1821      	adds	r1, r4, r0
1004d9b8:	428b      	cmp	r3, r1
1004d9ba:	d1f3      	bne.n	1004d9a4 <_free_r+0x20>
1004d9bc:	6819      	ldr	r1, [r3, #0]
1004d9be:	685b      	ldr	r3, [r3, #4]
1004d9c0:	1809      	adds	r1, r1, r0
1004d9c2:	6021      	str	r1, [r4, #0]
1004d9c4:	e7ee      	b.n	1004d9a4 <_free_r+0x20>
1004d9c6:	001a      	movs	r2, r3
1004d9c8:	685b      	ldr	r3, [r3, #4]
1004d9ca:	2b00      	cmp	r3, #0
1004d9cc:	d001      	beq.n	1004d9d2 <_free_r+0x4e>
1004d9ce:	42a3      	cmp	r3, r4
1004d9d0:	d9f9      	bls.n	1004d9c6 <_free_r+0x42>
1004d9d2:	6811      	ldr	r1, [r2, #0]
1004d9d4:	1850      	adds	r0, r2, r1
1004d9d6:	42a0      	cmp	r0, r4
1004d9d8:	d10b      	bne.n	1004d9f2 <_free_r+0x6e>
1004d9da:	6820      	ldr	r0, [r4, #0]
1004d9dc:	1809      	adds	r1, r1, r0
1004d9de:	1850      	adds	r0, r2, r1
1004d9e0:	6011      	str	r1, [r2, #0]
1004d9e2:	4283      	cmp	r3, r0
1004d9e4:	d1e0      	bne.n	1004d9a8 <_free_r+0x24>
1004d9e6:	6818      	ldr	r0, [r3, #0]
1004d9e8:	685b      	ldr	r3, [r3, #4]
1004d9ea:	1841      	adds	r1, r0, r1
1004d9ec:	6011      	str	r1, [r2, #0]
1004d9ee:	6053      	str	r3, [r2, #4]
1004d9f0:	e7da      	b.n	1004d9a8 <_free_r+0x24>
1004d9f2:	42a0      	cmp	r0, r4
1004d9f4:	d902      	bls.n	1004d9fc <_free_r+0x78>
1004d9f6:	230c      	movs	r3, #12
1004d9f8:	602b      	str	r3, [r5, #0]
1004d9fa:	e7d5      	b.n	1004d9a8 <_free_r+0x24>
1004d9fc:	6820      	ldr	r0, [r4, #0]
1004d9fe:	1821      	adds	r1, r4, r0
1004da00:	428b      	cmp	r3, r1
1004da02:	d103      	bne.n	1004da0c <_free_r+0x88>
1004da04:	6819      	ldr	r1, [r3, #0]
1004da06:	685b      	ldr	r3, [r3, #4]
1004da08:	1809      	adds	r1, r1, r0
1004da0a:	6021      	str	r1, [r4, #0]
1004da0c:	6063      	str	r3, [r4, #4]
1004da0e:	6054      	str	r4, [r2, #4]
1004da10:	e7ca      	b.n	1004d9a8 <_free_r+0x24>
1004da12:	46c0      	nop			@ (mov r8, r8)
1004da14:	200007e8 	.word	0x200007e8

1004da18 <malloc>:
1004da18:	b510      	push	{r4, lr}
1004da1a:	4b03      	ldr	r3, [pc, #12]	@ (1004da28 <malloc+0x10>)
1004da1c:	0001      	movs	r1, r0
1004da1e:	6818      	ldr	r0, [r3, #0]
1004da20:	f000 f826 	bl	1004da70 <_malloc_r>
1004da24:	bd10      	pop	{r4, pc}
1004da26:	46c0      	nop			@ (mov r8, r8)
1004da28:	2000084c 	.word	0x2000084c

1004da2c <sbrk_aligned>:
1004da2c:	b570      	push	{r4, r5, r6, lr}
1004da2e:	4e0f      	ldr	r6, [pc, #60]	@ (1004da6c <sbrk_aligned+0x40>)
1004da30:	000d      	movs	r5, r1
1004da32:	6831      	ldr	r1, [r6, #0]
1004da34:	0004      	movs	r4, r0
1004da36:	2900      	cmp	r1, #0
1004da38:	d102      	bne.n	1004da40 <sbrk_aligned+0x14>
1004da3a:	f000 fcad 	bl	1004e398 <_sbrk_r>
1004da3e:	6030      	str	r0, [r6, #0]
1004da40:	0029      	movs	r1, r5
1004da42:	0020      	movs	r0, r4
1004da44:	f000 fca8 	bl	1004e398 <_sbrk_r>
1004da48:	1c43      	adds	r3, r0, #1
1004da4a:	d103      	bne.n	1004da54 <sbrk_aligned+0x28>
1004da4c:	2501      	movs	r5, #1
1004da4e:	426d      	negs	r5, r5
1004da50:	0028      	movs	r0, r5
1004da52:	bd70      	pop	{r4, r5, r6, pc}
1004da54:	2303      	movs	r3, #3
1004da56:	1cc5      	adds	r5, r0, #3
1004da58:	439d      	bics	r5, r3
1004da5a:	42a8      	cmp	r0, r5
1004da5c:	d0f8      	beq.n	1004da50 <sbrk_aligned+0x24>
1004da5e:	1a29      	subs	r1, r5, r0
1004da60:	0020      	movs	r0, r4
1004da62:	f000 fc99 	bl	1004e398 <_sbrk_r>
1004da66:	3001      	adds	r0, #1
1004da68:	d1f2      	bne.n	1004da50 <sbrk_aligned+0x24>
1004da6a:	e7ef      	b.n	1004da4c <sbrk_aligned+0x20>
1004da6c:	200007e4 	.word	0x200007e4

1004da70 <_malloc_r>:
1004da70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004da72:	2203      	movs	r2, #3
1004da74:	1ccb      	adds	r3, r1, #3
1004da76:	4393      	bics	r3, r2
1004da78:	3308      	adds	r3, #8
1004da7a:	0005      	movs	r5, r0
1004da7c:	001f      	movs	r7, r3
1004da7e:	2b0c      	cmp	r3, #12
1004da80:	d234      	bcs.n	1004daec <_malloc_r+0x7c>
1004da82:	270c      	movs	r7, #12
1004da84:	42b9      	cmp	r1, r7
1004da86:	d833      	bhi.n	1004daf0 <_malloc_r+0x80>
1004da88:	0028      	movs	r0, r5
1004da8a:	f000 f871 	bl	1004db70 <__malloc_lock>
1004da8e:	4e37      	ldr	r6, [pc, #220]	@ (1004db6c <_malloc_r+0xfc>)
1004da90:	6833      	ldr	r3, [r6, #0]
1004da92:	001c      	movs	r4, r3
1004da94:	2c00      	cmp	r4, #0
1004da96:	d12f      	bne.n	1004daf8 <_malloc_r+0x88>
1004da98:	0039      	movs	r1, r7
1004da9a:	0028      	movs	r0, r5
1004da9c:	f7ff ffc6 	bl	1004da2c <sbrk_aligned>
1004daa0:	0004      	movs	r4, r0
1004daa2:	1c43      	adds	r3, r0, #1
1004daa4:	d15f      	bne.n	1004db66 <_malloc_r+0xf6>
1004daa6:	6834      	ldr	r4, [r6, #0]
1004daa8:	9400      	str	r4, [sp, #0]
1004daaa:	9b00      	ldr	r3, [sp, #0]
1004daac:	2b00      	cmp	r3, #0
1004daae:	d14a      	bne.n	1004db46 <_malloc_r+0xd6>
1004dab0:	2c00      	cmp	r4, #0
1004dab2:	d052      	beq.n	1004db5a <_malloc_r+0xea>
1004dab4:	6823      	ldr	r3, [r4, #0]
1004dab6:	0028      	movs	r0, r5
1004dab8:	18e3      	adds	r3, r4, r3
1004daba:	9900      	ldr	r1, [sp, #0]
1004dabc:	9301      	str	r3, [sp, #4]
1004dabe:	f000 fc6b 	bl	1004e398 <_sbrk_r>
1004dac2:	9b01      	ldr	r3, [sp, #4]
1004dac4:	4283      	cmp	r3, r0
1004dac6:	d148      	bne.n	1004db5a <_malloc_r+0xea>
1004dac8:	6823      	ldr	r3, [r4, #0]
1004daca:	0028      	movs	r0, r5
1004dacc:	1aff      	subs	r7, r7, r3
1004dace:	0039      	movs	r1, r7
1004dad0:	f7ff ffac 	bl	1004da2c <sbrk_aligned>
1004dad4:	3001      	adds	r0, #1
1004dad6:	d040      	beq.n	1004db5a <_malloc_r+0xea>
1004dad8:	6823      	ldr	r3, [r4, #0]
1004dada:	19db      	adds	r3, r3, r7
1004dadc:	6023      	str	r3, [r4, #0]
1004dade:	6833      	ldr	r3, [r6, #0]
1004dae0:	685a      	ldr	r2, [r3, #4]
1004dae2:	2a00      	cmp	r2, #0
1004dae4:	d133      	bne.n	1004db4e <_malloc_r+0xde>
1004dae6:	9b00      	ldr	r3, [sp, #0]
1004dae8:	6033      	str	r3, [r6, #0]
1004daea:	e019      	b.n	1004db20 <_malloc_r+0xb0>
1004daec:	2b00      	cmp	r3, #0
1004daee:	dac9      	bge.n	1004da84 <_malloc_r+0x14>
1004daf0:	230c      	movs	r3, #12
1004daf2:	602b      	str	r3, [r5, #0]
1004daf4:	2000      	movs	r0, #0
1004daf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004daf8:	6821      	ldr	r1, [r4, #0]
1004dafa:	1bc9      	subs	r1, r1, r7
1004dafc:	d420      	bmi.n	1004db40 <_malloc_r+0xd0>
1004dafe:	290b      	cmp	r1, #11
1004db00:	d90a      	bls.n	1004db18 <_malloc_r+0xa8>
1004db02:	19e2      	adds	r2, r4, r7
1004db04:	6027      	str	r7, [r4, #0]
1004db06:	42a3      	cmp	r3, r4
1004db08:	d104      	bne.n	1004db14 <_malloc_r+0xa4>
1004db0a:	6032      	str	r2, [r6, #0]
1004db0c:	6863      	ldr	r3, [r4, #4]
1004db0e:	6011      	str	r1, [r2, #0]
1004db10:	6053      	str	r3, [r2, #4]
1004db12:	e005      	b.n	1004db20 <_malloc_r+0xb0>
1004db14:	605a      	str	r2, [r3, #4]
1004db16:	e7f9      	b.n	1004db0c <_malloc_r+0x9c>
1004db18:	6862      	ldr	r2, [r4, #4]
1004db1a:	42a3      	cmp	r3, r4
1004db1c:	d10e      	bne.n	1004db3c <_malloc_r+0xcc>
1004db1e:	6032      	str	r2, [r6, #0]
1004db20:	0028      	movs	r0, r5
1004db22:	f000 f82d 	bl	1004db80 <__malloc_unlock>
1004db26:	0020      	movs	r0, r4
1004db28:	2207      	movs	r2, #7
1004db2a:	300b      	adds	r0, #11
1004db2c:	1d23      	adds	r3, r4, #4
1004db2e:	4390      	bics	r0, r2
1004db30:	1ac2      	subs	r2, r0, r3
1004db32:	4298      	cmp	r0, r3
1004db34:	d0df      	beq.n	1004daf6 <_malloc_r+0x86>
1004db36:	1a1b      	subs	r3, r3, r0
1004db38:	50a3      	str	r3, [r4, r2]
1004db3a:	e7dc      	b.n	1004daf6 <_malloc_r+0x86>
1004db3c:	605a      	str	r2, [r3, #4]
1004db3e:	e7ef      	b.n	1004db20 <_malloc_r+0xb0>
1004db40:	0023      	movs	r3, r4
1004db42:	6864      	ldr	r4, [r4, #4]
1004db44:	e7a6      	b.n	1004da94 <_malloc_r+0x24>
1004db46:	9c00      	ldr	r4, [sp, #0]
1004db48:	6863      	ldr	r3, [r4, #4]
1004db4a:	9300      	str	r3, [sp, #0]
1004db4c:	e7ad      	b.n	1004daaa <_malloc_r+0x3a>
1004db4e:	001a      	movs	r2, r3
1004db50:	685b      	ldr	r3, [r3, #4]
1004db52:	42a3      	cmp	r3, r4
1004db54:	d1fb      	bne.n	1004db4e <_malloc_r+0xde>
1004db56:	2300      	movs	r3, #0
1004db58:	e7da      	b.n	1004db10 <_malloc_r+0xa0>
1004db5a:	230c      	movs	r3, #12
1004db5c:	0028      	movs	r0, r5
1004db5e:	602b      	str	r3, [r5, #0]
1004db60:	f000 f80e 	bl	1004db80 <__malloc_unlock>
1004db64:	e7c6      	b.n	1004daf4 <_malloc_r+0x84>
1004db66:	6007      	str	r7, [r0, #0]
1004db68:	e7da      	b.n	1004db20 <_malloc_r+0xb0>
1004db6a:	46c0      	nop			@ (mov r8, r8)
1004db6c:	200007e8 	.word	0x200007e8

1004db70 <__malloc_lock>:
1004db70:	b510      	push	{r4, lr}
1004db72:	4802      	ldr	r0, [pc, #8]	@ (1004db7c <__malloc_lock+0xc>)
1004db74:	f7ff fefb 	bl	1004d96e <__retarget_lock_acquire_recursive>
1004db78:	bd10      	pop	{r4, pc}
1004db7a:	46c0      	nop			@ (mov r8, r8)
1004db7c:	200007e0 	.word	0x200007e0

1004db80 <__malloc_unlock>:
1004db80:	b510      	push	{r4, lr}
1004db82:	4802      	ldr	r0, [pc, #8]	@ (1004db8c <__malloc_unlock+0xc>)
1004db84:	f7ff fef4 	bl	1004d970 <__retarget_lock_release_recursive>
1004db88:	bd10      	pop	{r4, pc}
1004db8a:	46c0      	nop			@ (mov r8, r8)
1004db8c:	200007e0 	.word	0x200007e0

1004db90 <__sfputc_r>:
1004db90:	6893      	ldr	r3, [r2, #8]
1004db92:	b510      	push	{r4, lr}
1004db94:	3b01      	subs	r3, #1
1004db96:	6093      	str	r3, [r2, #8]
1004db98:	2b00      	cmp	r3, #0
1004db9a:	da04      	bge.n	1004dba6 <__sfputc_r+0x16>
1004db9c:	6994      	ldr	r4, [r2, #24]
1004db9e:	42a3      	cmp	r3, r4
1004dba0:	db07      	blt.n	1004dbb2 <__sfputc_r+0x22>
1004dba2:	290a      	cmp	r1, #10
1004dba4:	d005      	beq.n	1004dbb2 <__sfputc_r+0x22>
1004dba6:	6813      	ldr	r3, [r2, #0]
1004dba8:	1c58      	adds	r0, r3, #1
1004dbaa:	6010      	str	r0, [r2, #0]
1004dbac:	7019      	strb	r1, [r3, #0]
1004dbae:	0008      	movs	r0, r1
1004dbb0:	bd10      	pop	{r4, pc}
1004dbb2:	f7ff fdd1 	bl	1004d758 <__swbuf_r>
1004dbb6:	0001      	movs	r1, r0
1004dbb8:	e7f9      	b.n	1004dbae <__sfputc_r+0x1e>

1004dbba <__sfputs_r>:
1004dbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004dbbc:	0006      	movs	r6, r0
1004dbbe:	000f      	movs	r7, r1
1004dbc0:	0014      	movs	r4, r2
1004dbc2:	18d5      	adds	r5, r2, r3
1004dbc4:	42ac      	cmp	r4, r5
1004dbc6:	d101      	bne.n	1004dbcc <__sfputs_r+0x12>
1004dbc8:	2000      	movs	r0, #0
1004dbca:	e007      	b.n	1004dbdc <__sfputs_r+0x22>
1004dbcc:	7821      	ldrb	r1, [r4, #0]
1004dbce:	003a      	movs	r2, r7
1004dbd0:	0030      	movs	r0, r6
1004dbd2:	f7ff ffdd 	bl	1004db90 <__sfputc_r>
1004dbd6:	3401      	adds	r4, #1
1004dbd8:	1c43      	adds	r3, r0, #1
1004dbda:	d1f3      	bne.n	1004dbc4 <__sfputs_r+0xa>
1004dbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1004dbe0 <_vfiprintf_r>:
1004dbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004dbe2:	b0a1      	sub	sp, #132	@ 0x84
1004dbe4:	000f      	movs	r7, r1
1004dbe6:	0015      	movs	r5, r2
1004dbe8:	001e      	movs	r6, r3
1004dbea:	9003      	str	r0, [sp, #12]
1004dbec:	2800      	cmp	r0, #0
1004dbee:	d004      	beq.n	1004dbfa <_vfiprintf_r+0x1a>
1004dbf0:	6a03      	ldr	r3, [r0, #32]
1004dbf2:	2b00      	cmp	r3, #0
1004dbf4:	d101      	bne.n	1004dbfa <_vfiprintf_r+0x1a>
1004dbf6:	f7ff fc09 	bl	1004d40c <__sinit>
1004dbfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004dbfc:	07db      	lsls	r3, r3, #31
1004dbfe:	d405      	bmi.n	1004dc0c <_vfiprintf_r+0x2c>
1004dc00:	89bb      	ldrh	r3, [r7, #12]
1004dc02:	059b      	lsls	r3, r3, #22
1004dc04:	d402      	bmi.n	1004dc0c <_vfiprintf_r+0x2c>
1004dc06:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004dc08:	f7ff feb1 	bl	1004d96e <__retarget_lock_acquire_recursive>
1004dc0c:	89bb      	ldrh	r3, [r7, #12]
1004dc0e:	071b      	lsls	r3, r3, #28
1004dc10:	d502      	bpl.n	1004dc18 <_vfiprintf_r+0x38>
1004dc12:	693b      	ldr	r3, [r7, #16]
1004dc14:	2b00      	cmp	r3, #0
1004dc16:	d113      	bne.n	1004dc40 <_vfiprintf_r+0x60>
1004dc18:	0039      	movs	r1, r7
1004dc1a:	9803      	ldr	r0, [sp, #12]
1004dc1c:	f7ff fdde 	bl	1004d7dc <__swsetup_r>
1004dc20:	2800      	cmp	r0, #0
1004dc22:	d00d      	beq.n	1004dc40 <_vfiprintf_r+0x60>
1004dc24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004dc26:	07db      	lsls	r3, r3, #31
1004dc28:	d503      	bpl.n	1004dc32 <_vfiprintf_r+0x52>
1004dc2a:	2001      	movs	r0, #1
1004dc2c:	4240      	negs	r0, r0
1004dc2e:	b021      	add	sp, #132	@ 0x84
1004dc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004dc32:	89bb      	ldrh	r3, [r7, #12]
1004dc34:	059b      	lsls	r3, r3, #22
1004dc36:	d4f8      	bmi.n	1004dc2a <_vfiprintf_r+0x4a>
1004dc38:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004dc3a:	f7ff fe99 	bl	1004d970 <__retarget_lock_release_recursive>
1004dc3e:	e7f4      	b.n	1004dc2a <_vfiprintf_r+0x4a>
1004dc40:	2300      	movs	r3, #0
1004dc42:	ac08      	add	r4, sp, #32
1004dc44:	6163      	str	r3, [r4, #20]
1004dc46:	3320      	adds	r3, #32
1004dc48:	7663      	strb	r3, [r4, #25]
1004dc4a:	3310      	adds	r3, #16
1004dc4c:	76a3      	strb	r3, [r4, #26]
1004dc4e:	9607      	str	r6, [sp, #28]
1004dc50:	002e      	movs	r6, r5
1004dc52:	7833      	ldrb	r3, [r6, #0]
1004dc54:	2b00      	cmp	r3, #0
1004dc56:	d001      	beq.n	1004dc5c <_vfiprintf_r+0x7c>
1004dc58:	2b25      	cmp	r3, #37	@ 0x25
1004dc5a:	d148      	bne.n	1004dcee <_vfiprintf_r+0x10e>
1004dc5c:	1b73      	subs	r3, r6, r5
1004dc5e:	9305      	str	r3, [sp, #20]
1004dc60:	42ae      	cmp	r6, r5
1004dc62:	d00b      	beq.n	1004dc7c <_vfiprintf_r+0x9c>
1004dc64:	002a      	movs	r2, r5
1004dc66:	0039      	movs	r1, r7
1004dc68:	9803      	ldr	r0, [sp, #12]
1004dc6a:	f7ff ffa6 	bl	1004dbba <__sfputs_r>
1004dc6e:	3001      	adds	r0, #1
1004dc70:	d100      	bne.n	1004dc74 <_vfiprintf_r+0x94>
1004dc72:	e0ae      	b.n	1004ddd2 <_vfiprintf_r+0x1f2>
1004dc74:	6963      	ldr	r3, [r4, #20]
1004dc76:	9a05      	ldr	r2, [sp, #20]
1004dc78:	189b      	adds	r3, r3, r2
1004dc7a:	6163      	str	r3, [r4, #20]
1004dc7c:	7833      	ldrb	r3, [r6, #0]
1004dc7e:	2b00      	cmp	r3, #0
1004dc80:	d100      	bne.n	1004dc84 <_vfiprintf_r+0xa4>
1004dc82:	e0a6      	b.n	1004ddd2 <_vfiprintf_r+0x1f2>
1004dc84:	2201      	movs	r2, #1
1004dc86:	2300      	movs	r3, #0
1004dc88:	4252      	negs	r2, r2
1004dc8a:	6062      	str	r2, [r4, #4]
1004dc8c:	a904      	add	r1, sp, #16
1004dc8e:	3254      	adds	r2, #84	@ 0x54
1004dc90:	1852      	adds	r2, r2, r1
1004dc92:	1c75      	adds	r5, r6, #1
1004dc94:	6023      	str	r3, [r4, #0]
1004dc96:	60e3      	str	r3, [r4, #12]
1004dc98:	60a3      	str	r3, [r4, #8]
1004dc9a:	7013      	strb	r3, [r2, #0]
1004dc9c:	65a3      	str	r3, [r4, #88]	@ 0x58
1004dc9e:	4b59      	ldr	r3, [pc, #356]	@ (1004de04 <_vfiprintf_r+0x224>)
1004dca0:	2205      	movs	r2, #5
1004dca2:	0018      	movs	r0, r3
1004dca4:	7829      	ldrb	r1, [r5, #0]
1004dca6:	9305      	str	r3, [sp, #20]
1004dca8:	f000 fb88 	bl	1004e3bc <memchr>
1004dcac:	1c6e      	adds	r6, r5, #1
1004dcae:	2800      	cmp	r0, #0
1004dcb0:	d11f      	bne.n	1004dcf2 <_vfiprintf_r+0x112>
1004dcb2:	6822      	ldr	r2, [r4, #0]
1004dcb4:	06d3      	lsls	r3, r2, #27
1004dcb6:	d504      	bpl.n	1004dcc2 <_vfiprintf_r+0xe2>
1004dcb8:	2353      	movs	r3, #83	@ 0x53
1004dcba:	a904      	add	r1, sp, #16
1004dcbc:	185b      	adds	r3, r3, r1
1004dcbe:	2120      	movs	r1, #32
1004dcc0:	7019      	strb	r1, [r3, #0]
1004dcc2:	0713      	lsls	r3, r2, #28
1004dcc4:	d504      	bpl.n	1004dcd0 <_vfiprintf_r+0xf0>
1004dcc6:	2353      	movs	r3, #83	@ 0x53
1004dcc8:	a904      	add	r1, sp, #16
1004dcca:	185b      	adds	r3, r3, r1
1004dccc:	212b      	movs	r1, #43	@ 0x2b
1004dcce:	7019      	strb	r1, [r3, #0]
1004dcd0:	782b      	ldrb	r3, [r5, #0]
1004dcd2:	2b2a      	cmp	r3, #42	@ 0x2a
1004dcd4:	d016      	beq.n	1004dd04 <_vfiprintf_r+0x124>
1004dcd6:	002e      	movs	r6, r5
1004dcd8:	2100      	movs	r1, #0
1004dcda:	200a      	movs	r0, #10
1004dcdc:	68e3      	ldr	r3, [r4, #12]
1004dcde:	7832      	ldrb	r2, [r6, #0]
1004dce0:	1c75      	adds	r5, r6, #1
1004dce2:	3a30      	subs	r2, #48	@ 0x30
1004dce4:	2a09      	cmp	r2, #9
1004dce6:	d950      	bls.n	1004dd8a <_vfiprintf_r+0x1aa>
1004dce8:	2900      	cmp	r1, #0
1004dcea:	d111      	bne.n	1004dd10 <_vfiprintf_r+0x130>
1004dcec:	e017      	b.n	1004dd1e <_vfiprintf_r+0x13e>
1004dcee:	3601      	adds	r6, #1
1004dcf0:	e7af      	b.n	1004dc52 <_vfiprintf_r+0x72>
1004dcf2:	9b05      	ldr	r3, [sp, #20]
1004dcf4:	6822      	ldr	r2, [r4, #0]
1004dcf6:	1ac0      	subs	r0, r0, r3
1004dcf8:	2301      	movs	r3, #1
1004dcfa:	4083      	lsls	r3, r0
1004dcfc:	4313      	orrs	r3, r2
1004dcfe:	0035      	movs	r5, r6
1004dd00:	6023      	str	r3, [r4, #0]
1004dd02:	e7cc      	b.n	1004dc9e <_vfiprintf_r+0xbe>
1004dd04:	9b07      	ldr	r3, [sp, #28]
1004dd06:	1d19      	adds	r1, r3, #4
1004dd08:	681b      	ldr	r3, [r3, #0]
1004dd0a:	9107      	str	r1, [sp, #28]
1004dd0c:	2b00      	cmp	r3, #0
1004dd0e:	db01      	blt.n	1004dd14 <_vfiprintf_r+0x134>
1004dd10:	930b      	str	r3, [sp, #44]	@ 0x2c
1004dd12:	e004      	b.n	1004dd1e <_vfiprintf_r+0x13e>
1004dd14:	425b      	negs	r3, r3
1004dd16:	60e3      	str	r3, [r4, #12]
1004dd18:	2302      	movs	r3, #2
1004dd1a:	4313      	orrs	r3, r2
1004dd1c:	6023      	str	r3, [r4, #0]
1004dd1e:	7833      	ldrb	r3, [r6, #0]
1004dd20:	2b2e      	cmp	r3, #46	@ 0x2e
1004dd22:	d10c      	bne.n	1004dd3e <_vfiprintf_r+0x15e>
1004dd24:	7873      	ldrb	r3, [r6, #1]
1004dd26:	2b2a      	cmp	r3, #42	@ 0x2a
1004dd28:	d134      	bne.n	1004dd94 <_vfiprintf_r+0x1b4>
1004dd2a:	9b07      	ldr	r3, [sp, #28]
1004dd2c:	3602      	adds	r6, #2
1004dd2e:	1d1a      	adds	r2, r3, #4
1004dd30:	681b      	ldr	r3, [r3, #0]
1004dd32:	9207      	str	r2, [sp, #28]
1004dd34:	2b00      	cmp	r3, #0
1004dd36:	da01      	bge.n	1004dd3c <_vfiprintf_r+0x15c>
1004dd38:	2301      	movs	r3, #1
1004dd3a:	425b      	negs	r3, r3
1004dd3c:	9309      	str	r3, [sp, #36]	@ 0x24
1004dd3e:	4d32      	ldr	r5, [pc, #200]	@ (1004de08 <_vfiprintf_r+0x228>)
1004dd40:	2203      	movs	r2, #3
1004dd42:	0028      	movs	r0, r5
1004dd44:	7831      	ldrb	r1, [r6, #0]
1004dd46:	f000 fb39 	bl	1004e3bc <memchr>
1004dd4a:	2800      	cmp	r0, #0
1004dd4c:	d006      	beq.n	1004dd5c <_vfiprintf_r+0x17c>
1004dd4e:	2340      	movs	r3, #64	@ 0x40
1004dd50:	1b40      	subs	r0, r0, r5
1004dd52:	4083      	lsls	r3, r0
1004dd54:	6822      	ldr	r2, [r4, #0]
1004dd56:	3601      	adds	r6, #1
1004dd58:	4313      	orrs	r3, r2
1004dd5a:	6023      	str	r3, [r4, #0]
1004dd5c:	7831      	ldrb	r1, [r6, #0]
1004dd5e:	2206      	movs	r2, #6
1004dd60:	482a      	ldr	r0, [pc, #168]	@ (1004de0c <_vfiprintf_r+0x22c>)
1004dd62:	1c75      	adds	r5, r6, #1
1004dd64:	7621      	strb	r1, [r4, #24]
1004dd66:	f000 fb29 	bl	1004e3bc <memchr>
1004dd6a:	2800      	cmp	r0, #0
1004dd6c:	d040      	beq.n	1004ddf0 <_vfiprintf_r+0x210>
1004dd6e:	4b28      	ldr	r3, [pc, #160]	@ (1004de10 <_vfiprintf_r+0x230>)
1004dd70:	2b00      	cmp	r3, #0
1004dd72:	d122      	bne.n	1004ddba <_vfiprintf_r+0x1da>
1004dd74:	2207      	movs	r2, #7
1004dd76:	9b07      	ldr	r3, [sp, #28]
1004dd78:	3307      	adds	r3, #7
1004dd7a:	4393      	bics	r3, r2
1004dd7c:	3308      	adds	r3, #8
1004dd7e:	9307      	str	r3, [sp, #28]
1004dd80:	6963      	ldr	r3, [r4, #20]
1004dd82:	9a04      	ldr	r2, [sp, #16]
1004dd84:	189b      	adds	r3, r3, r2
1004dd86:	6163      	str	r3, [r4, #20]
1004dd88:	e762      	b.n	1004dc50 <_vfiprintf_r+0x70>
1004dd8a:	4343      	muls	r3, r0
1004dd8c:	002e      	movs	r6, r5
1004dd8e:	2101      	movs	r1, #1
1004dd90:	189b      	adds	r3, r3, r2
1004dd92:	e7a4      	b.n	1004dcde <_vfiprintf_r+0xfe>
1004dd94:	2300      	movs	r3, #0
1004dd96:	200a      	movs	r0, #10
1004dd98:	0019      	movs	r1, r3
1004dd9a:	3601      	adds	r6, #1
1004dd9c:	6063      	str	r3, [r4, #4]
1004dd9e:	7832      	ldrb	r2, [r6, #0]
1004dda0:	1c75      	adds	r5, r6, #1
1004dda2:	3a30      	subs	r2, #48	@ 0x30
1004dda4:	2a09      	cmp	r2, #9
1004dda6:	d903      	bls.n	1004ddb0 <_vfiprintf_r+0x1d0>
1004dda8:	2b00      	cmp	r3, #0
1004ddaa:	d0c8      	beq.n	1004dd3e <_vfiprintf_r+0x15e>
1004ddac:	9109      	str	r1, [sp, #36]	@ 0x24
1004ddae:	e7c6      	b.n	1004dd3e <_vfiprintf_r+0x15e>
1004ddb0:	4341      	muls	r1, r0
1004ddb2:	002e      	movs	r6, r5
1004ddb4:	2301      	movs	r3, #1
1004ddb6:	1889      	adds	r1, r1, r2
1004ddb8:	e7f1      	b.n	1004dd9e <_vfiprintf_r+0x1be>
1004ddba:	aa07      	add	r2, sp, #28
1004ddbc:	9200      	str	r2, [sp, #0]
1004ddbe:	0021      	movs	r1, r4
1004ddc0:	003a      	movs	r2, r7
1004ddc2:	4b14      	ldr	r3, [pc, #80]	@ (1004de14 <_vfiprintf_r+0x234>)
1004ddc4:	9803      	ldr	r0, [sp, #12]
1004ddc6:	e000      	b.n	1004ddca <_vfiprintf_r+0x1ea>
1004ddc8:	bf00      	nop
1004ddca:	9004      	str	r0, [sp, #16]
1004ddcc:	9b04      	ldr	r3, [sp, #16]
1004ddce:	3301      	adds	r3, #1
1004ddd0:	d1d6      	bne.n	1004dd80 <_vfiprintf_r+0x1a0>
1004ddd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004ddd4:	07db      	lsls	r3, r3, #31
1004ddd6:	d405      	bmi.n	1004dde4 <_vfiprintf_r+0x204>
1004ddd8:	89bb      	ldrh	r3, [r7, #12]
1004ddda:	059b      	lsls	r3, r3, #22
1004dddc:	d402      	bmi.n	1004dde4 <_vfiprintf_r+0x204>
1004ddde:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004dde0:	f7ff fdc6 	bl	1004d970 <__retarget_lock_release_recursive>
1004dde4:	89bb      	ldrh	r3, [r7, #12]
1004dde6:	065b      	lsls	r3, r3, #25
1004dde8:	d500      	bpl.n	1004ddec <_vfiprintf_r+0x20c>
1004ddea:	e71e      	b.n	1004dc2a <_vfiprintf_r+0x4a>
1004ddec:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004ddee:	e71e      	b.n	1004dc2e <_vfiprintf_r+0x4e>
1004ddf0:	aa07      	add	r2, sp, #28
1004ddf2:	9200      	str	r2, [sp, #0]
1004ddf4:	0021      	movs	r1, r4
1004ddf6:	003a      	movs	r2, r7
1004ddf8:	4b06      	ldr	r3, [pc, #24]	@ (1004de14 <_vfiprintf_r+0x234>)
1004ddfa:	9803      	ldr	r0, [sp, #12]
1004ddfc:	f000 f87c 	bl	1004def8 <_printf_i>
1004de00:	e7e3      	b.n	1004ddca <_vfiprintf_r+0x1ea>
1004de02:	46c0      	nop			@ (mov r8, r8)
1004de04:	1004e850 	.word	0x1004e850
1004de08:	1004e856 	.word	0x1004e856
1004de0c:	1004e85a 	.word	0x1004e85a
1004de10:	00000000 	.word	0x00000000
1004de14:	1004dbbb 	.word	0x1004dbbb

1004de18 <_printf_common>:
1004de18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004de1a:	0016      	movs	r6, r2
1004de1c:	9301      	str	r3, [sp, #4]
1004de1e:	688a      	ldr	r2, [r1, #8]
1004de20:	690b      	ldr	r3, [r1, #16]
1004de22:	000c      	movs	r4, r1
1004de24:	9000      	str	r0, [sp, #0]
1004de26:	4293      	cmp	r3, r2
1004de28:	da00      	bge.n	1004de2c <_printf_common+0x14>
1004de2a:	0013      	movs	r3, r2
1004de2c:	0022      	movs	r2, r4
1004de2e:	6033      	str	r3, [r6, #0]
1004de30:	3243      	adds	r2, #67	@ 0x43
1004de32:	7812      	ldrb	r2, [r2, #0]
1004de34:	2a00      	cmp	r2, #0
1004de36:	d001      	beq.n	1004de3c <_printf_common+0x24>
1004de38:	3301      	adds	r3, #1
1004de3a:	6033      	str	r3, [r6, #0]
1004de3c:	6823      	ldr	r3, [r4, #0]
1004de3e:	069b      	lsls	r3, r3, #26
1004de40:	d502      	bpl.n	1004de48 <_printf_common+0x30>
1004de42:	6833      	ldr	r3, [r6, #0]
1004de44:	3302      	adds	r3, #2
1004de46:	6033      	str	r3, [r6, #0]
1004de48:	6822      	ldr	r2, [r4, #0]
1004de4a:	2306      	movs	r3, #6
1004de4c:	0015      	movs	r5, r2
1004de4e:	401d      	ands	r5, r3
1004de50:	421a      	tst	r2, r3
1004de52:	d027      	beq.n	1004dea4 <_printf_common+0x8c>
1004de54:	0023      	movs	r3, r4
1004de56:	3343      	adds	r3, #67	@ 0x43
1004de58:	781b      	ldrb	r3, [r3, #0]
1004de5a:	1e5a      	subs	r2, r3, #1
1004de5c:	4193      	sbcs	r3, r2
1004de5e:	6822      	ldr	r2, [r4, #0]
1004de60:	0692      	lsls	r2, r2, #26
1004de62:	d430      	bmi.n	1004dec6 <_printf_common+0xae>
1004de64:	0022      	movs	r2, r4
1004de66:	9901      	ldr	r1, [sp, #4]
1004de68:	9800      	ldr	r0, [sp, #0]
1004de6a:	9d08      	ldr	r5, [sp, #32]
1004de6c:	3243      	adds	r2, #67	@ 0x43
1004de6e:	47a8      	blx	r5
1004de70:	3001      	adds	r0, #1
1004de72:	d025      	beq.n	1004dec0 <_printf_common+0xa8>
1004de74:	2206      	movs	r2, #6
1004de76:	6823      	ldr	r3, [r4, #0]
1004de78:	2500      	movs	r5, #0
1004de7a:	4013      	ands	r3, r2
1004de7c:	2b04      	cmp	r3, #4
1004de7e:	d105      	bne.n	1004de8c <_printf_common+0x74>
1004de80:	6833      	ldr	r3, [r6, #0]
1004de82:	68e5      	ldr	r5, [r4, #12]
1004de84:	1aed      	subs	r5, r5, r3
1004de86:	43eb      	mvns	r3, r5
1004de88:	17db      	asrs	r3, r3, #31
1004de8a:	401d      	ands	r5, r3
1004de8c:	68a3      	ldr	r3, [r4, #8]
1004de8e:	6922      	ldr	r2, [r4, #16]
1004de90:	4293      	cmp	r3, r2
1004de92:	dd01      	ble.n	1004de98 <_printf_common+0x80>
1004de94:	1a9b      	subs	r3, r3, r2
1004de96:	18ed      	adds	r5, r5, r3
1004de98:	2600      	movs	r6, #0
1004de9a:	42b5      	cmp	r5, r6
1004de9c:	d120      	bne.n	1004dee0 <_printf_common+0xc8>
1004de9e:	2000      	movs	r0, #0
1004dea0:	e010      	b.n	1004dec4 <_printf_common+0xac>
1004dea2:	3501      	adds	r5, #1
1004dea4:	68e3      	ldr	r3, [r4, #12]
1004dea6:	6832      	ldr	r2, [r6, #0]
1004dea8:	1a9b      	subs	r3, r3, r2
1004deaa:	42ab      	cmp	r3, r5
1004deac:	ddd2      	ble.n	1004de54 <_printf_common+0x3c>
1004deae:	0022      	movs	r2, r4
1004deb0:	2301      	movs	r3, #1
1004deb2:	9901      	ldr	r1, [sp, #4]
1004deb4:	9800      	ldr	r0, [sp, #0]
1004deb6:	9f08      	ldr	r7, [sp, #32]
1004deb8:	3219      	adds	r2, #25
1004deba:	47b8      	blx	r7
1004debc:	3001      	adds	r0, #1
1004debe:	d1f0      	bne.n	1004dea2 <_printf_common+0x8a>
1004dec0:	2001      	movs	r0, #1
1004dec2:	4240      	negs	r0, r0
1004dec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004dec6:	2030      	movs	r0, #48	@ 0x30
1004dec8:	18e1      	adds	r1, r4, r3
1004deca:	3143      	adds	r1, #67	@ 0x43
1004decc:	7008      	strb	r0, [r1, #0]
1004dece:	0021      	movs	r1, r4
1004ded0:	1c5a      	adds	r2, r3, #1
1004ded2:	3145      	adds	r1, #69	@ 0x45
1004ded4:	7809      	ldrb	r1, [r1, #0]
1004ded6:	18a2      	adds	r2, r4, r2
1004ded8:	3243      	adds	r2, #67	@ 0x43
1004deda:	3302      	adds	r3, #2
1004dedc:	7011      	strb	r1, [r2, #0]
1004dede:	e7c1      	b.n	1004de64 <_printf_common+0x4c>
1004dee0:	0022      	movs	r2, r4
1004dee2:	2301      	movs	r3, #1
1004dee4:	9901      	ldr	r1, [sp, #4]
1004dee6:	9800      	ldr	r0, [sp, #0]
1004dee8:	9f08      	ldr	r7, [sp, #32]
1004deea:	321a      	adds	r2, #26
1004deec:	47b8      	blx	r7
1004deee:	3001      	adds	r0, #1
1004def0:	d0e6      	beq.n	1004dec0 <_printf_common+0xa8>
1004def2:	3601      	adds	r6, #1
1004def4:	e7d1      	b.n	1004de9a <_printf_common+0x82>
	...

1004def8 <_printf_i>:
1004def8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004defa:	b08b      	sub	sp, #44	@ 0x2c
1004defc:	9206      	str	r2, [sp, #24]
1004defe:	000a      	movs	r2, r1
1004df00:	3243      	adds	r2, #67	@ 0x43
1004df02:	9307      	str	r3, [sp, #28]
1004df04:	9005      	str	r0, [sp, #20]
1004df06:	9203      	str	r2, [sp, #12]
1004df08:	7e0a      	ldrb	r2, [r1, #24]
1004df0a:	000c      	movs	r4, r1
1004df0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004df0e:	2a78      	cmp	r2, #120	@ 0x78
1004df10:	d809      	bhi.n	1004df26 <_printf_i+0x2e>
1004df12:	2a62      	cmp	r2, #98	@ 0x62
1004df14:	d80b      	bhi.n	1004df2e <_printf_i+0x36>
1004df16:	2a00      	cmp	r2, #0
1004df18:	d100      	bne.n	1004df1c <_printf_i+0x24>
1004df1a:	e0bc      	b.n	1004e096 <_printf_i+0x19e>
1004df1c:	497b      	ldr	r1, [pc, #492]	@ (1004e10c <_printf_i+0x214>)
1004df1e:	9104      	str	r1, [sp, #16]
1004df20:	2a58      	cmp	r2, #88	@ 0x58
1004df22:	d100      	bne.n	1004df26 <_printf_i+0x2e>
1004df24:	e090      	b.n	1004e048 <_printf_i+0x150>
1004df26:	0025      	movs	r5, r4
1004df28:	3542      	adds	r5, #66	@ 0x42
1004df2a:	702a      	strb	r2, [r5, #0]
1004df2c:	e022      	b.n	1004df74 <_printf_i+0x7c>
1004df2e:	0010      	movs	r0, r2
1004df30:	3863      	subs	r0, #99	@ 0x63
1004df32:	2815      	cmp	r0, #21
1004df34:	d8f7      	bhi.n	1004df26 <_printf_i+0x2e>
1004df36:	f7f2 f971 	bl	1004021c <__gnu_thumb1_case_shi>
1004df3a:	0016      	.short	0x0016
1004df3c:	fff6001f 	.word	0xfff6001f
1004df40:	fff6fff6 	.word	0xfff6fff6
1004df44:	001ffff6 	.word	0x001ffff6
1004df48:	fff6fff6 	.word	0xfff6fff6
1004df4c:	fff6fff6 	.word	0xfff6fff6
1004df50:	003600a1 	.word	0x003600a1
1004df54:	fff60080 	.word	0xfff60080
1004df58:	00b2fff6 	.word	0x00b2fff6
1004df5c:	0036fff6 	.word	0x0036fff6
1004df60:	fff6fff6 	.word	0xfff6fff6
1004df64:	0084      	.short	0x0084
1004df66:	0025      	movs	r5, r4
1004df68:	681a      	ldr	r2, [r3, #0]
1004df6a:	3542      	adds	r5, #66	@ 0x42
1004df6c:	1d11      	adds	r1, r2, #4
1004df6e:	6019      	str	r1, [r3, #0]
1004df70:	6813      	ldr	r3, [r2, #0]
1004df72:	702b      	strb	r3, [r5, #0]
1004df74:	2301      	movs	r3, #1
1004df76:	e0a0      	b.n	1004e0ba <_printf_i+0x1c2>
1004df78:	6818      	ldr	r0, [r3, #0]
1004df7a:	6809      	ldr	r1, [r1, #0]
1004df7c:	1d02      	adds	r2, r0, #4
1004df7e:	060d      	lsls	r5, r1, #24
1004df80:	d50b      	bpl.n	1004df9a <_printf_i+0xa2>
1004df82:	6806      	ldr	r6, [r0, #0]
1004df84:	601a      	str	r2, [r3, #0]
1004df86:	2e00      	cmp	r6, #0
1004df88:	da03      	bge.n	1004df92 <_printf_i+0x9a>
1004df8a:	232d      	movs	r3, #45	@ 0x2d
1004df8c:	9a03      	ldr	r2, [sp, #12]
1004df8e:	4276      	negs	r6, r6
1004df90:	7013      	strb	r3, [r2, #0]
1004df92:	4b5e      	ldr	r3, [pc, #376]	@ (1004e10c <_printf_i+0x214>)
1004df94:	270a      	movs	r7, #10
1004df96:	9304      	str	r3, [sp, #16]
1004df98:	e018      	b.n	1004dfcc <_printf_i+0xd4>
1004df9a:	6806      	ldr	r6, [r0, #0]
1004df9c:	601a      	str	r2, [r3, #0]
1004df9e:	0649      	lsls	r1, r1, #25
1004dfa0:	d5f1      	bpl.n	1004df86 <_printf_i+0x8e>
1004dfa2:	b236      	sxth	r6, r6
1004dfa4:	e7ef      	b.n	1004df86 <_printf_i+0x8e>
1004dfa6:	6808      	ldr	r0, [r1, #0]
1004dfa8:	6819      	ldr	r1, [r3, #0]
1004dfaa:	c940      	ldmia	r1!, {r6}
1004dfac:	0605      	lsls	r5, r0, #24
1004dfae:	d402      	bmi.n	1004dfb6 <_printf_i+0xbe>
1004dfb0:	0640      	lsls	r0, r0, #25
1004dfb2:	d500      	bpl.n	1004dfb6 <_printf_i+0xbe>
1004dfb4:	b2b6      	uxth	r6, r6
1004dfb6:	6019      	str	r1, [r3, #0]
1004dfb8:	4b54      	ldr	r3, [pc, #336]	@ (1004e10c <_printf_i+0x214>)
1004dfba:	270a      	movs	r7, #10
1004dfbc:	9304      	str	r3, [sp, #16]
1004dfbe:	2a6f      	cmp	r2, #111	@ 0x6f
1004dfc0:	d100      	bne.n	1004dfc4 <_printf_i+0xcc>
1004dfc2:	3f02      	subs	r7, #2
1004dfc4:	0023      	movs	r3, r4
1004dfc6:	2200      	movs	r2, #0
1004dfc8:	3343      	adds	r3, #67	@ 0x43
1004dfca:	701a      	strb	r2, [r3, #0]
1004dfcc:	6863      	ldr	r3, [r4, #4]
1004dfce:	60a3      	str	r3, [r4, #8]
1004dfd0:	2b00      	cmp	r3, #0
1004dfd2:	db03      	blt.n	1004dfdc <_printf_i+0xe4>
1004dfd4:	2104      	movs	r1, #4
1004dfd6:	6822      	ldr	r2, [r4, #0]
1004dfd8:	438a      	bics	r2, r1
1004dfda:	6022      	str	r2, [r4, #0]
1004dfdc:	2e00      	cmp	r6, #0
1004dfde:	d102      	bne.n	1004dfe6 <_printf_i+0xee>
1004dfe0:	9d03      	ldr	r5, [sp, #12]
1004dfe2:	2b00      	cmp	r3, #0
1004dfe4:	d00c      	beq.n	1004e000 <_printf_i+0x108>
1004dfe6:	9d03      	ldr	r5, [sp, #12]
1004dfe8:	0030      	movs	r0, r6
1004dfea:	0039      	movs	r1, r7
1004dfec:	f7f2 f9a6 	bl	1004033c <__aeabi_uidivmod>
1004dff0:	9b04      	ldr	r3, [sp, #16]
1004dff2:	3d01      	subs	r5, #1
1004dff4:	5c5b      	ldrb	r3, [r3, r1]
1004dff6:	702b      	strb	r3, [r5, #0]
1004dff8:	0033      	movs	r3, r6
1004dffa:	0006      	movs	r6, r0
1004dffc:	429f      	cmp	r7, r3
1004dffe:	d9f3      	bls.n	1004dfe8 <_printf_i+0xf0>
1004e000:	2f08      	cmp	r7, #8
1004e002:	d109      	bne.n	1004e018 <_printf_i+0x120>
1004e004:	6823      	ldr	r3, [r4, #0]
1004e006:	07db      	lsls	r3, r3, #31
1004e008:	d506      	bpl.n	1004e018 <_printf_i+0x120>
1004e00a:	6862      	ldr	r2, [r4, #4]
1004e00c:	6923      	ldr	r3, [r4, #16]
1004e00e:	429a      	cmp	r2, r3
1004e010:	dc02      	bgt.n	1004e018 <_printf_i+0x120>
1004e012:	2330      	movs	r3, #48	@ 0x30
1004e014:	3d01      	subs	r5, #1
1004e016:	702b      	strb	r3, [r5, #0]
1004e018:	9b03      	ldr	r3, [sp, #12]
1004e01a:	1b5b      	subs	r3, r3, r5
1004e01c:	6123      	str	r3, [r4, #16]
1004e01e:	9b07      	ldr	r3, [sp, #28]
1004e020:	0021      	movs	r1, r4
1004e022:	9300      	str	r3, [sp, #0]
1004e024:	9805      	ldr	r0, [sp, #20]
1004e026:	9b06      	ldr	r3, [sp, #24]
1004e028:	aa09      	add	r2, sp, #36	@ 0x24
1004e02a:	f7ff fef5 	bl	1004de18 <_printf_common>
1004e02e:	3001      	adds	r0, #1
1004e030:	d148      	bne.n	1004e0c4 <_printf_i+0x1cc>
1004e032:	2001      	movs	r0, #1
1004e034:	4240      	negs	r0, r0
1004e036:	b00b      	add	sp, #44	@ 0x2c
1004e038:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e03a:	2220      	movs	r2, #32
1004e03c:	6809      	ldr	r1, [r1, #0]
1004e03e:	430a      	orrs	r2, r1
1004e040:	6022      	str	r2, [r4, #0]
1004e042:	2278      	movs	r2, #120	@ 0x78
1004e044:	4932      	ldr	r1, [pc, #200]	@ (1004e110 <_printf_i+0x218>)
1004e046:	9104      	str	r1, [sp, #16]
1004e048:	0021      	movs	r1, r4
1004e04a:	3145      	adds	r1, #69	@ 0x45
1004e04c:	700a      	strb	r2, [r1, #0]
1004e04e:	6819      	ldr	r1, [r3, #0]
1004e050:	6822      	ldr	r2, [r4, #0]
1004e052:	c940      	ldmia	r1!, {r6}
1004e054:	0610      	lsls	r0, r2, #24
1004e056:	d402      	bmi.n	1004e05e <_printf_i+0x166>
1004e058:	0650      	lsls	r0, r2, #25
1004e05a:	d500      	bpl.n	1004e05e <_printf_i+0x166>
1004e05c:	b2b6      	uxth	r6, r6
1004e05e:	6019      	str	r1, [r3, #0]
1004e060:	07d3      	lsls	r3, r2, #31
1004e062:	d502      	bpl.n	1004e06a <_printf_i+0x172>
1004e064:	2320      	movs	r3, #32
1004e066:	4313      	orrs	r3, r2
1004e068:	6023      	str	r3, [r4, #0]
1004e06a:	2e00      	cmp	r6, #0
1004e06c:	d001      	beq.n	1004e072 <_printf_i+0x17a>
1004e06e:	2710      	movs	r7, #16
1004e070:	e7a8      	b.n	1004dfc4 <_printf_i+0xcc>
1004e072:	2220      	movs	r2, #32
1004e074:	6823      	ldr	r3, [r4, #0]
1004e076:	4393      	bics	r3, r2
1004e078:	6023      	str	r3, [r4, #0]
1004e07a:	e7f8      	b.n	1004e06e <_printf_i+0x176>
1004e07c:	681a      	ldr	r2, [r3, #0]
1004e07e:	680d      	ldr	r5, [r1, #0]
1004e080:	1d10      	adds	r0, r2, #4
1004e082:	6949      	ldr	r1, [r1, #20]
1004e084:	6018      	str	r0, [r3, #0]
1004e086:	6813      	ldr	r3, [r2, #0]
1004e088:	062e      	lsls	r6, r5, #24
1004e08a:	d501      	bpl.n	1004e090 <_printf_i+0x198>
1004e08c:	6019      	str	r1, [r3, #0]
1004e08e:	e002      	b.n	1004e096 <_printf_i+0x19e>
1004e090:	066d      	lsls	r5, r5, #25
1004e092:	d5fb      	bpl.n	1004e08c <_printf_i+0x194>
1004e094:	8019      	strh	r1, [r3, #0]
1004e096:	2300      	movs	r3, #0
1004e098:	9d03      	ldr	r5, [sp, #12]
1004e09a:	6123      	str	r3, [r4, #16]
1004e09c:	e7bf      	b.n	1004e01e <_printf_i+0x126>
1004e09e:	681a      	ldr	r2, [r3, #0]
1004e0a0:	1d11      	adds	r1, r2, #4
1004e0a2:	6019      	str	r1, [r3, #0]
1004e0a4:	6815      	ldr	r5, [r2, #0]
1004e0a6:	2100      	movs	r1, #0
1004e0a8:	0028      	movs	r0, r5
1004e0aa:	6862      	ldr	r2, [r4, #4]
1004e0ac:	f000 f986 	bl	1004e3bc <memchr>
1004e0b0:	2800      	cmp	r0, #0
1004e0b2:	d001      	beq.n	1004e0b8 <_printf_i+0x1c0>
1004e0b4:	1b40      	subs	r0, r0, r5
1004e0b6:	6060      	str	r0, [r4, #4]
1004e0b8:	6863      	ldr	r3, [r4, #4]
1004e0ba:	6123      	str	r3, [r4, #16]
1004e0bc:	2300      	movs	r3, #0
1004e0be:	9a03      	ldr	r2, [sp, #12]
1004e0c0:	7013      	strb	r3, [r2, #0]
1004e0c2:	e7ac      	b.n	1004e01e <_printf_i+0x126>
1004e0c4:	002a      	movs	r2, r5
1004e0c6:	6923      	ldr	r3, [r4, #16]
1004e0c8:	9906      	ldr	r1, [sp, #24]
1004e0ca:	9805      	ldr	r0, [sp, #20]
1004e0cc:	9d07      	ldr	r5, [sp, #28]
1004e0ce:	47a8      	blx	r5
1004e0d0:	3001      	adds	r0, #1
1004e0d2:	d0ae      	beq.n	1004e032 <_printf_i+0x13a>
1004e0d4:	6823      	ldr	r3, [r4, #0]
1004e0d6:	079b      	lsls	r3, r3, #30
1004e0d8:	d415      	bmi.n	1004e106 <_printf_i+0x20e>
1004e0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004e0dc:	68e0      	ldr	r0, [r4, #12]
1004e0de:	4298      	cmp	r0, r3
1004e0e0:	daa9      	bge.n	1004e036 <_printf_i+0x13e>
1004e0e2:	0018      	movs	r0, r3
1004e0e4:	e7a7      	b.n	1004e036 <_printf_i+0x13e>
1004e0e6:	0022      	movs	r2, r4
1004e0e8:	2301      	movs	r3, #1
1004e0ea:	9906      	ldr	r1, [sp, #24]
1004e0ec:	9805      	ldr	r0, [sp, #20]
1004e0ee:	9e07      	ldr	r6, [sp, #28]
1004e0f0:	3219      	adds	r2, #25
1004e0f2:	47b0      	blx	r6
1004e0f4:	3001      	adds	r0, #1
1004e0f6:	d09c      	beq.n	1004e032 <_printf_i+0x13a>
1004e0f8:	3501      	adds	r5, #1
1004e0fa:	68e3      	ldr	r3, [r4, #12]
1004e0fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004e0fe:	1a9b      	subs	r3, r3, r2
1004e100:	42ab      	cmp	r3, r5
1004e102:	dcf0      	bgt.n	1004e0e6 <_printf_i+0x1ee>
1004e104:	e7e9      	b.n	1004e0da <_printf_i+0x1e2>
1004e106:	2500      	movs	r5, #0
1004e108:	e7f7      	b.n	1004e0fa <_printf_i+0x202>
1004e10a:	46c0      	nop			@ (mov r8, r8)
1004e10c:	1004e861 	.word	0x1004e861
1004e110:	1004e872 	.word	0x1004e872

1004e114 <__sflush_r>:
1004e114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004e116:	220c      	movs	r2, #12
1004e118:	5e8b      	ldrsh	r3, [r1, r2]
1004e11a:	0005      	movs	r5, r0
1004e11c:	000c      	movs	r4, r1
1004e11e:	071a      	lsls	r2, r3, #28
1004e120:	d456      	bmi.n	1004e1d0 <__sflush_r+0xbc>
1004e122:	684a      	ldr	r2, [r1, #4]
1004e124:	2a00      	cmp	r2, #0
1004e126:	dc02      	bgt.n	1004e12e <__sflush_r+0x1a>
1004e128:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
1004e12a:	2a00      	cmp	r2, #0
1004e12c:	dd4e      	ble.n	1004e1cc <__sflush_r+0xb8>
1004e12e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004e130:	2f00      	cmp	r7, #0
1004e132:	d04b      	beq.n	1004e1cc <__sflush_r+0xb8>
1004e134:	2200      	movs	r2, #0
1004e136:	2080      	movs	r0, #128	@ 0x80
1004e138:	682e      	ldr	r6, [r5, #0]
1004e13a:	602a      	str	r2, [r5, #0]
1004e13c:	001a      	movs	r2, r3
1004e13e:	0140      	lsls	r0, r0, #5
1004e140:	6a21      	ldr	r1, [r4, #32]
1004e142:	4002      	ands	r2, r0
1004e144:	4203      	tst	r3, r0
1004e146:	d033      	beq.n	1004e1b0 <__sflush_r+0x9c>
1004e148:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1004e14a:	89a3      	ldrh	r3, [r4, #12]
1004e14c:	075b      	lsls	r3, r3, #29
1004e14e:	d506      	bpl.n	1004e15e <__sflush_r+0x4a>
1004e150:	6863      	ldr	r3, [r4, #4]
1004e152:	1ad2      	subs	r2, r2, r3
1004e154:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1004e156:	2b00      	cmp	r3, #0
1004e158:	d001      	beq.n	1004e15e <__sflush_r+0x4a>
1004e15a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1004e15c:	1ad2      	subs	r2, r2, r3
1004e15e:	2300      	movs	r3, #0
1004e160:	0028      	movs	r0, r5
1004e162:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004e164:	6a21      	ldr	r1, [r4, #32]
1004e166:	47b8      	blx	r7
1004e168:	89a2      	ldrh	r2, [r4, #12]
1004e16a:	1c43      	adds	r3, r0, #1
1004e16c:	d106      	bne.n	1004e17c <__sflush_r+0x68>
1004e16e:	6829      	ldr	r1, [r5, #0]
1004e170:	291d      	cmp	r1, #29
1004e172:	d846      	bhi.n	1004e202 <__sflush_r+0xee>
1004e174:	4b29      	ldr	r3, [pc, #164]	@ (1004e21c <__sflush_r+0x108>)
1004e176:	410b      	asrs	r3, r1
1004e178:	07db      	lsls	r3, r3, #31
1004e17a:	d442      	bmi.n	1004e202 <__sflush_r+0xee>
1004e17c:	2300      	movs	r3, #0
1004e17e:	6063      	str	r3, [r4, #4]
1004e180:	6923      	ldr	r3, [r4, #16]
1004e182:	6023      	str	r3, [r4, #0]
1004e184:	04d2      	lsls	r2, r2, #19
1004e186:	d505      	bpl.n	1004e194 <__sflush_r+0x80>
1004e188:	1c43      	adds	r3, r0, #1
1004e18a:	d102      	bne.n	1004e192 <__sflush_r+0x7e>
1004e18c:	682b      	ldr	r3, [r5, #0]
1004e18e:	2b00      	cmp	r3, #0
1004e190:	d100      	bne.n	1004e194 <__sflush_r+0x80>
1004e192:	6560      	str	r0, [r4, #84]	@ 0x54
1004e194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004e196:	602e      	str	r6, [r5, #0]
1004e198:	2900      	cmp	r1, #0
1004e19a:	d017      	beq.n	1004e1cc <__sflush_r+0xb8>
1004e19c:	0023      	movs	r3, r4
1004e19e:	3344      	adds	r3, #68	@ 0x44
1004e1a0:	4299      	cmp	r1, r3
1004e1a2:	d002      	beq.n	1004e1aa <__sflush_r+0x96>
1004e1a4:	0028      	movs	r0, r5
1004e1a6:	f7ff fbed 	bl	1004d984 <_free_r>
1004e1aa:	2300      	movs	r3, #0
1004e1ac:	6363      	str	r3, [r4, #52]	@ 0x34
1004e1ae:	e00d      	b.n	1004e1cc <__sflush_r+0xb8>
1004e1b0:	2301      	movs	r3, #1
1004e1b2:	0028      	movs	r0, r5
1004e1b4:	47b8      	blx	r7
1004e1b6:	0002      	movs	r2, r0
1004e1b8:	1c43      	adds	r3, r0, #1
1004e1ba:	d1c6      	bne.n	1004e14a <__sflush_r+0x36>
1004e1bc:	682b      	ldr	r3, [r5, #0]
1004e1be:	2b00      	cmp	r3, #0
1004e1c0:	d0c3      	beq.n	1004e14a <__sflush_r+0x36>
1004e1c2:	2b1d      	cmp	r3, #29
1004e1c4:	d001      	beq.n	1004e1ca <__sflush_r+0xb6>
1004e1c6:	2b16      	cmp	r3, #22
1004e1c8:	d11a      	bne.n	1004e200 <__sflush_r+0xec>
1004e1ca:	602e      	str	r6, [r5, #0]
1004e1cc:	2000      	movs	r0, #0
1004e1ce:	e01e      	b.n	1004e20e <__sflush_r+0xfa>
1004e1d0:	690e      	ldr	r6, [r1, #16]
1004e1d2:	2e00      	cmp	r6, #0
1004e1d4:	d0fa      	beq.n	1004e1cc <__sflush_r+0xb8>
1004e1d6:	680f      	ldr	r7, [r1, #0]
1004e1d8:	600e      	str	r6, [r1, #0]
1004e1da:	1bba      	subs	r2, r7, r6
1004e1dc:	9201      	str	r2, [sp, #4]
1004e1de:	2200      	movs	r2, #0
1004e1e0:	079b      	lsls	r3, r3, #30
1004e1e2:	d100      	bne.n	1004e1e6 <__sflush_r+0xd2>
1004e1e4:	694a      	ldr	r2, [r1, #20]
1004e1e6:	60a2      	str	r2, [r4, #8]
1004e1e8:	9b01      	ldr	r3, [sp, #4]
1004e1ea:	2b00      	cmp	r3, #0
1004e1ec:	ddee      	ble.n	1004e1cc <__sflush_r+0xb8>
1004e1ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
1004e1f0:	0032      	movs	r2, r6
1004e1f2:	001f      	movs	r7, r3
1004e1f4:	0028      	movs	r0, r5
1004e1f6:	9b01      	ldr	r3, [sp, #4]
1004e1f8:	6a21      	ldr	r1, [r4, #32]
1004e1fa:	47b8      	blx	r7
1004e1fc:	2800      	cmp	r0, #0
1004e1fe:	dc07      	bgt.n	1004e210 <__sflush_r+0xfc>
1004e200:	89a2      	ldrh	r2, [r4, #12]
1004e202:	2340      	movs	r3, #64	@ 0x40
1004e204:	2001      	movs	r0, #1
1004e206:	4313      	orrs	r3, r2
1004e208:	b21b      	sxth	r3, r3
1004e20a:	81a3      	strh	r3, [r4, #12]
1004e20c:	4240      	negs	r0, r0
1004e20e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004e210:	9b01      	ldr	r3, [sp, #4]
1004e212:	1836      	adds	r6, r6, r0
1004e214:	1a1b      	subs	r3, r3, r0
1004e216:	9301      	str	r3, [sp, #4]
1004e218:	e7e6      	b.n	1004e1e8 <__sflush_r+0xd4>
1004e21a:	46c0      	nop			@ (mov r8, r8)
1004e21c:	dfbffffe 	.word	0xdfbffffe

1004e220 <_fflush_r>:
1004e220:	690b      	ldr	r3, [r1, #16]
1004e222:	b570      	push	{r4, r5, r6, lr}
1004e224:	0005      	movs	r5, r0
1004e226:	000c      	movs	r4, r1
1004e228:	2b00      	cmp	r3, #0
1004e22a:	d102      	bne.n	1004e232 <_fflush_r+0x12>
1004e22c:	2500      	movs	r5, #0
1004e22e:	0028      	movs	r0, r5
1004e230:	bd70      	pop	{r4, r5, r6, pc}
1004e232:	2800      	cmp	r0, #0
1004e234:	d004      	beq.n	1004e240 <_fflush_r+0x20>
1004e236:	6a03      	ldr	r3, [r0, #32]
1004e238:	2b00      	cmp	r3, #0
1004e23a:	d101      	bne.n	1004e240 <_fflush_r+0x20>
1004e23c:	f7ff f8e6 	bl	1004d40c <__sinit>
1004e240:	220c      	movs	r2, #12
1004e242:	5ea3      	ldrsh	r3, [r4, r2]
1004e244:	2b00      	cmp	r3, #0
1004e246:	d0f1      	beq.n	1004e22c <_fflush_r+0xc>
1004e248:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004e24a:	07d2      	lsls	r2, r2, #31
1004e24c:	d404      	bmi.n	1004e258 <_fflush_r+0x38>
1004e24e:	059b      	lsls	r3, r3, #22
1004e250:	d402      	bmi.n	1004e258 <_fflush_r+0x38>
1004e252:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004e254:	f7ff fb8b 	bl	1004d96e <__retarget_lock_acquire_recursive>
1004e258:	0028      	movs	r0, r5
1004e25a:	0021      	movs	r1, r4
1004e25c:	f7ff ff5a 	bl	1004e114 <__sflush_r>
1004e260:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004e262:	0005      	movs	r5, r0
1004e264:	07db      	lsls	r3, r3, #31
1004e266:	d4e2      	bmi.n	1004e22e <_fflush_r+0xe>
1004e268:	89a3      	ldrh	r3, [r4, #12]
1004e26a:	059b      	lsls	r3, r3, #22
1004e26c:	d4df      	bmi.n	1004e22e <_fflush_r+0xe>
1004e26e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004e270:	f7ff fb7e 	bl	1004d970 <__retarget_lock_release_recursive>
1004e274:	e7db      	b.n	1004e22e <_fflush_r+0xe>
	...

1004e278 <__swhatbuf_r>:
1004e278:	b570      	push	{r4, r5, r6, lr}
1004e27a:	000e      	movs	r6, r1
1004e27c:	001d      	movs	r5, r3
1004e27e:	230e      	movs	r3, #14
1004e280:	5ec9      	ldrsh	r1, [r1, r3]
1004e282:	0014      	movs	r4, r2
1004e284:	b096      	sub	sp, #88	@ 0x58
1004e286:	2900      	cmp	r1, #0
1004e288:	da0c      	bge.n	1004e2a4 <__swhatbuf_r+0x2c>
1004e28a:	89b2      	ldrh	r2, [r6, #12]
1004e28c:	2380      	movs	r3, #128	@ 0x80
1004e28e:	0011      	movs	r1, r2
1004e290:	4019      	ands	r1, r3
1004e292:	421a      	tst	r2, r3
1004e294:	d114      	bne.n	1004e2c0 <__swhatbuf_r+0x48>
1004e296:	2380      	movs	r3, #128	@ 0x80
1004e298:	00db      	lsls	r3, r3, #3
1004e29a:	2000      	movs	r0, #0
1004e29c:	6029      	str	r1, [r5, #0]
1004e29e:	6023      	str	r3, [r4, #0]
1004e2a0:	b016      	add	sp, #88	@ 0x58
1004e2a2:	bd70      	pop	{r4, r5, r6, pc}
1004e2a4:	466a      	mov	r2, sp
1004e2a6:	f000 f853 	bl	1004e350 <_fstat_r>
1004e2aa:	2800      	cmp	r0, #0
1004e2ac:	dbed      	blt.n	1004e28a <__swhatbuf_r+0x12>
1004e2ae:	23f0      	movs	r3, #240	@ 0xf0
1004e2b0:	9901      	ldr	r1, [sp, #4]
1004e2b2:	021b      	lsls	r3, r3, #8
1004e2b4:	4019      	ands	r1, r3
1004e2b6:	4b04      	ldr	r3, [pc, #16]	@ (1004e2c8 <__swhatbuf_r+0x50>)
1004e2b8:	18c9      	adds	r1, r1, r3
1004e2ba:	424b      	negs	r3, r1
1004e2bc:	4159      	adcs	r1, r3
1004e2be:	e7ea      	b.n	1004e296 <__swhatbuf_r+0x1e>
1004e2c0:	2100      	movs	r1, #0
1004e2c2:	2340      	movs	r3, #64	@ 0x40
1004e2c4:	e7e9      	b.n	1004e29a <__swhatbuf_r+0x22>
1004e2c6:	46c0      	nop			@ (mov r8, r8)
1004e2c8:	ffffe000 	.word	0xffffe000

1004e2cc <__smakebuf_r>:
1004e2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e2ce:	2602      	movs	r6, #2
1004e2d0:	898b      	ldrh	r3, [r1, #12]
1004e2d2:	0005      	movs	r5, r0
1004e2d4:	000c      	movs	r4, r1
1004e2d6:	b085      	sub	sp, #20
1004e2d8:	4233      	tst	r3, r6
1004e2da:	d007      	beq.n	1004e2ec <__smakebuf_r+0x20>
1004e2dc:	0023      	movs	r3, r4
1004e2de:	3347      	adds	r3, #71	@ 0x47
1004e2e0:	6023      	str	r3, [r4, #0]
1004e2e2:	6123      	str	r3, [r4, #16]
1004e2e4:	2301      	movs	r3, #1
1004e2e6:	6163      	str	r3, [r4, #20]
1004e2e8:	b005      	add	sp, #20
1004e2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e2ec:	ab03      	add	r3, sp, #12
1004e2ee:	aa02      	add	r2, sp, #8
1004e2f0:	f7ff ffc2 	bl	1004e278 <__swhatbuf_r>
1004e2f4:	9f02      	ldr	r7, [sp, #8]
1004e2f6:	9001      	str	r0, [sp, #4]
1004e2f8:	0039      	movs	r1, r7
1004e2fa:	0028      	movs	r0, r5
1004e2fc:	f7ff fbb8 	bl	1004da70 <_malloc_r>
1004e300:	2800      	cmp	r0, #0
1004e302:	d108      	bne.n	1004e316 <__smakebuf_r+0x4a>
1004e304:	220c      	movs	r2, #12
1004e306:	5ea3      	ldrsh	r3, [r4, r2]
1004e308:	059a      	lsls	r2, r3, #22
1004e30a:	d4ed      	bmi.n	1004e2e8 <__smakebuf_r+0x1c>
1004e30c:	2203      	movs	r2, #3
1004e30e:	4393      	bics	r3, r2
1004e310:	431e      	orrs	r6, r3
1004e312:	81a6      	strh	r6, [r4, #12]
1004e314:	e7e2      	b.n	1004e2dc <__smakebuf_r+0x10>
1004e316:	2380      	movs	r3, #128	@ 0x80
1004e318:	89a2      	ldrh	r2, [r4, #12]
1004e31a:	6020      	str	r0, [r4, #0]
1004e31c:	4313      	orrs	r3, r2
1004e31e:	81a3      	strh	r3, [r4, #12]
1004e320:	9b03      	ldr	r3, [sp, #12]
1004e322:	6120      	str	r0, [r4, #16]
1004e324:	6167      	str	r7, [r4, #20]
1004e326:	2b00      	cmp	r3, #0
1004e328:	d00c      	beq.n	1004e344 <__smakebuf_r+0x78>
1004e32a:	0028      	movs	r0, r5
1004e32c:	230e      	movs	r3, #14
1004e32e:	5ee1      	ldrsh	r1, [r4, r3]
1004e330:	f000 f820 	bl	1004e374 <_isatty_r>
1004e334:	2800      	cmp	r0, #0
1004e336:	d005      	beq.n	1004e344 <__smakebuf_r+0x78>
1004e338:	2303      	movs	r3, #3
1004e33a:	89a2      	ldrh	r2, [r4, #12]
1004e33c:	439a      	bics	r2, r3
1004e33e:	3b02      	subs	r3, #2
1004e340:	4313      	orrs	r3, r2
1004e342:	81a3      	strh	r3, [r4, #12]
1004e344:	89a3      	ldrh	r3, [r4, #12]
1004e346:	9a01      	ldr	r2, [sp, #4]
1004e348:	4313      	orrs	r3, r2
1004e34a:	81a3      	strh	r3, [r4, #12]
1004e34c:	e7cc      	b.n	1004e2e8 <__smakebuf_r+0x1c>
	...

1004e350 <_fstat_r>:
1004e350:	2300      	movs	r3, #0
1004e352:	b570      	push	{r4, r5, r6, lr}
1004e354:	4d06      	ldr	r5, [pc, #24]	@ (1004e370 <_fstat_r+0x20>)
1004e356:	0004      	movs	r4, r0
1004e358:	0008      	movs	r0, r1
1004e35a:	0011      	movs	r1, r2
1004e35c:	602b      	str	r3, [r5, #0]
1004e35e:	f7f2 ff78 	bl	10041252 <_fstat>
1004e362:	1c43      	adds	r3, r0, #1
1004e364:	d103      	bne.n	1004e36e <_fstat_r+0x1e>
1004e366:	682b      	ldr	r3, [r5, #0]
1004e368:	2b00      	cmp	r3, #0
1004e36a:	d000      	beq.n	1004e36e <_fstat_r+0x1e>
1004e36c:	6023      	str	r3, [r4, #0]
1004e36e:	bd70      	pop	{r4, r5, r6, pc}
1004e370:	200007dc 	.word	0x200007dc

1004e374 <_isatty_r>:
1004e374:	2300      	movs	r3, #0
1004e376:	b570      	push	{r4, r5, r6, lr}
1004e378:	4d06      	ldr	r5, [pc, #24]	@ (1004e394 <_isatty_r+0x20>)
1004e37a:	0004      	movs	r4, r0
1004e37c:	0008      	movs	r0, r1
1004e37e:	602b      	str	r3, [r5, #0]
1004e380:	f7f2 ff75 	bl	1004126e <_isatty>
1004e384:	1c43      	adds	r3, r0, #1
1004e386:	d103      	bne.n	1004e390 <_isatty_r+0x1c>
1004e388:	682b      	ldr	r3, [r5, #0]
1004e38a:	2b00      	cmp	r3, #0
1004e38c:	d000      	beq.n	1004e390 <_isatty_r+0x1c>
1004e38e:	6023      	str	r3, [r4, #0]
1004e390:	bd70      	pop	{r4, r5, r6, pc}
1004e392:	46c0      	nop			@ (mov r8, r8)
1004e394:	200007dc 	.word	0x200007dc

1004e398 <_sbrk_r>:
1004e398:	2300      	movs	r3, #0
1004e39a:	b570      	push	{r4, r5, r6, lr}
1004e39c:	4d06      	ldr	r5, [pc, #24]	@ (1004e3b8 <_sbrk_r+0x20>)
1004e39e:	0004      	movs	r4, r0
1004e3a0:	0008      	movs	r0, r1
1004e3a2:	602b      	str	r3, [r5, #0]
1004e3a4:	f7f2 ff78 	bl	10041298 <_sbrk>
1004e3a8:	1c43      	adds	r3, r0, #1
1004e3aa:	d103      	bne.n	1004e3b4 <_sbrk_r+0x1c>
1004e3ac:	682b      	ldr	r3, [r5, #0]
1004e3ae:	2b00      	cmp	r3, #0
1004e3b0:	d000      	beq.n	1004e3b4 <_sbrk_r+0x1c>
1004e3b2:	6023      	str	r3, [r4, #0]
1004e3b4:	bd70      	pop	{r4, r5, r6, pc}
1004e3b6:	46c0      	nop			@ (mov r8, r8)
1004e3b8:	200007dc 	.word	0x200007dc

1004e3bc <memchr>:
1004e3bc:	b2c9      	uxtb	r1, r1
1004e3be:	1882      	adds	r2, r0, r2
1004e3c0:	4290      	cmp	r0, r2
1004e3c2:	d101      	bne.n	1004e3c8 <memchr+0xc>
1004e3c4:	2000      	movs	r0, #0
1004e3c6:	4770      	bx	lr
1004e3c8:	7803      	ldrb	r3, [r0, #0]
1004e3ca:	428b      	cmp	r3, r1
1004e3cc:	d0fb      	beq.n	1004e3c6 <memchr+0xa>
1004e3ce:	3001      	adds	r0, #1
1004e3d0:	e7f6      	b.n	1004e3c0 <memchr+0x4>
	...

Disassembly of section .init:

1004e3d4 <_init>:
1004e3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e3d6:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

1004e3d8 <_fini>:
1004e3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e3da:	46c0      	nop			@ (mov r8, r8)
