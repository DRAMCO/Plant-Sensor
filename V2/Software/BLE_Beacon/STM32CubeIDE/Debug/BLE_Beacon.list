
BLE_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa20  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1004fae0  1004fae0  00010ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  1004fae4  1004fae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000004e4  1004fae8  1004fae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1004ffcc  1004ffcc  00010fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  20000cf4  1004ffd4  00011cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00012004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  00012004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  00012004  2**2
                  ALLOC
 10 .bss          00000b60  20000194  20000194  00012004  2**2
                  ALLOC
 11 .noinit       000017b0  20000d70  10050050  00011d70  2**2
                  ALLOC
 12 .ota_region_end 00000000  10050050  10050050  00011d70  2**0
                  CONTENTS
 13 .heap         00000000  20002520  20002520  00011d70  2**0
                  CONTENTS
 14 .stack        00000c00  2000f400  2000f400  00012400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  00011d70  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  00011d70  2**0
                  CONTENTS, READONLY
 17 .debug_info   00024301  00000000  00000000  00011d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006387  00000000  00000000  0003609d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000028e8  00000000  00000000  0003c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001e89  00000000  00000000  0003ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00023d66  00000000  00000000  00040b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002c4be  00000000  00000000  000648ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000c84f0  00000000  00000000  00090dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000087  00000000  00000000  001592ad  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009908  00000000  00000000  00159334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000015d  00000000  00000000  00162c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loclists 0000033b  00000000  00000000  00162d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <__gnu_thumb1_case_shi>:
1004021c:	b403      	push	{r0, r1}
1004021e:	4671      	mov	r1, lr
10040220:	0849      	lsrs	r1, r1, #1
10040222:	0040      	lsls	r0, r0, #1
10040224:	0049      	lsls	r1, r1, #1
10040226:	5e09      	ldrsh	r1, [r1, r0]
10040228:	0049      	lsls	r1, r1, #1
1004022a:	448e      	add	lr, r1
1004022c:	bc03      	pop	{r0, r1}
1004022e:	4770      	bx	lr

10040230 <__udivsi3>:
10040230:	2200      	movs	r2, #0
10040232:	0843      	lsrs	r3, r0, #1
10040234:	428b      	cmp	r3, r1
10040236:	d374      	bcc.n	10040322 <__udivsi3+0xf2>
10040238:	0903      	lsrs	r3, r0, #4
1004023a:	428b      	cmp	r3, r1
1004023c:	d35f      	bcc.n	100402fe <__udivsi3+0xce>
1004023e:	0a03      	lsrs	r3, r0, #8
10040240:	428b      	cmp	r3, r1
10040242:	d344      	bcc.n	100402ce <__udivsi3+0x9e>
10040244:	0b03      	lsrs	r3, r0, #12
10040246:	428b      	cmp	r3, r1
10040248:	d328      	bcc.n	1004029c <__udivsi3+0x6c>
1004024a:	0c03      	lsrs	r3, r0, #16
1004024c:	428b      	cmp	r3, r1
1004024e:	d30d      	bcc.n	1004026c <__udivsi3+0x3c>
10040250:	22ff      	movs	r2, #255	@ 0xff
10040252:	0209      	lsls	r1, r1, #8
10040254:	ba12      	rev	r2, r2
10040256:	0c03      	lsrs	r3, r0, #16
10040258:	428b      	cmp	r3, r1
1004025a:	d302      	bcc.n	10040262 <__udivsi3+0x32>
1004025c:	1212      	asrs	r2, r2, #8
1004025e:	0209      	lsls	r1, r1, #8
10040260:	d065      	beq.n	1004032e <__udivsi3+0xfe>
10040262:	0b03      	lsrs	r3, r0, #12
10040264:	428b      	cmp	r3, r1
10040266:	d319      	bcc.n	1004029c <__udivsi3+0x6c>
10040268:	e000      	b.n	1004026c <__udivsi3+0x3c>
1004026a:	0a09      	lsrs	r1, r1, #8
1004026c:	0bc3      	lsrs	r3, r0, #15
1004026e:	428b      	cmp	r3, r1
10040270:	d301      	bcc.n	10040276 <__udivsi3+0x46>
10040272:	03cb      	lsls	r3, r1, #15
10040274:	1ac0      	subs	r0, r0, r3
10040276:	4152      	adcs	r2, r2
10040278:	0b83      	lsrs	r3, r0, #14
1004027a:	428b      	cmp	r3, r1
1004027c:	d301      	bcc.n	10040282 <__udivsi3+0x52>
1004027e:	038b      	lsls	r3, r1, #14
10040280:	1ac0      	subs	r0, r0, r3
10040282:	4152      	adcs	r2, r2
10040284:	0b43      	lsrs	r3, r0, #13
10040286:	428b      	cmp	r3, r1
10040288:	d301      	bcc.n	1004028e <__udivsi3+0x5e>
1004028a:	034b      	lsls	r3, r1, #13
1004028c:	1ac0      	subs	r0, r0, r3
1004028e:	4152      	adcs	r2, r2
10040290:	0b03      	lsrs	r3, r0, #12
10040292:	428b      	cmp	r3, r1
10040294:	d301      	bcc.n	1004029a <__udivsi3+0x6a>
10040296:	030b      	lsls	r3, r1, #12
10040298:	1ac0      	subs	r0, r0, r3
1004029a:	4152      	adcs	r2, r2
1004029c:	0ac3      	lsrs	r3, r0, #11
1004029e:	428b      	cmp	r3, r1
100402a0:	d301      	bcc.n	100402a6 <__udivsi3+0x76>
100402a2:	02cb      	lsls	r3, r1, #11
100402a4:	1ac0      	subs	r0, r0, r3
100402a6:	4152      	adcs	r2, r2
100402a8:	0a83      	lsrs	r3, r0, #10
100402aa:	428b      	cmp	r3, r1
100402ac:	d301      	bcc.n	100402b2 <__udivsi3+0x82>
100402ae:	028b      	lsls	r3, r1, #10
100402b0:	1ac0      	subs	r0, r0, r3
100402b2:	4152      	adcs	r2, r2
100402b4:	0a43      	lsrs	r3, r0, #9
100402b6:	428b      	cmp	r3, r1
100402b8:	d301      	bcc.n	100402be <__udivsi3+0x8e>
100402ba:	024b      	lsls	r3, r1, #9
100402bc:	1ac0      	subs	r0, r0, r3
100402be:	4152      	adcs	r2, r2
100402c0:	0a03      	lsrs	r3, r0, #8
100402c2:	428b      	cmp	r3, r1
100402c4:	d301      	bcc.n	100402ca <__udivsi3+0x9a>
100402c6:	020b      	lsls	r3, r1, #8
100402c8:	1ac0      	subs	r0, r0, r3
100402ca:	4152      	adcs	r2, r2
100402cc:	d2cd      	bcs.n	1004026a <__udivsi3+0x3a>
100402ce:	09c3      	lsrs	r3, r0, #7
100402d0:	428b      	cmp	r3, r1
100402d2:	d301      	bcc.n	100402d8 <__udivsi3+0xa8>
100402d4:	01cb      	lsls	r3, r1, #7
100402d6:	1ac0      	subs	r0, r0, r3
100402d8:	4152      	adcs	r2, r2
100402da:	0983      	lsrs	r3, r0, #6
100402dc:	428b      	cmp	r3, r1
100402de:	d301      	bcc.n	100402e4 <__udivsi3+0xb4>
100402e0:	018b      	lsls	r3, r1, #6
100402e2:	1ac0      	subs	r0, r0, r3
100402e4:	4152      	adcs	r2, r2
100402e6:	0943      	lsrs	r3, r0, #5
100402e8:	428b      	cmp	r3, r1
100402ea:	d301      	bcc.n	100402f0 <__udivsi3+0xc0>
100402ec:	014b      	lsls	r3, r1, #5
100402ee:	1ac0      	subs	r0, r0, r3
100402f0:	4152      	adcs	r2, r2
100402f2:	0903      	lsrs	r3, r0, #4
100402f4:	428b      	cmp	r3, r1
100402f6:	d301      	bcc.n	100402fc <__udivsi3+0xcc>
100402f8:	010b      	lsls	r3, r1, #4
100402fa:	1ac0      	subs	r0, r0, r3
100402fc:	4152      	adcs	r2, r2
100402fe:	08c3      	lsrs	r3, r0, #3
10040300:	428b      	cmp	r3, r1
10040302:	d301      	bcc.n	10040308 <__udivsi3+0xd8>
10040304:	00cb      	lsls	r3, r1, #3
10040306:	1ac0      	subs	r0, r0, r3
10040308:	4152      	adcs	r2, r2
1004030a:	0883      	lsrs	r3, r0, #2
1004030c:	428b      	cmp	r3, r1
1004030e:	d301      	bcc.n	10040314 <__udivsi3+0xe4>
10040310:	008b      	lsls	r3, r1, #2
10040312:	1ac0      	subs	r0, r0, r3
10040314:	4152      	adcs	r2, r2
10040316:	0843      	lsrs	r3, r0, #1
10040318:	428b      	cmp	r3, r1
1004031a:	d301      	bcc.n	10040320 <__udivsi3+0xf0>
1004031c:	004b      	lsls	r3, r1, #1
1004031e:	1ac0      	subs	r0, r0, r3
10040320:	4152      	adcs	r2, r2
10040322:	1a41      	subs	r1, r0, r1
10040324:	d200      	bcs.n	10040328 <__udivsi3+0xf8>
10040326:	4601      	mov	r1, r0
10040328:	4152      	adcs	r2, r2
1004032a:	4610      	mov	r0, r2
1004032c:	4770      	bx	lr
1004032e:	e7ff      	b.n	10040330 <__udivsi3+0x100>
10040330:	b501      	push	{r0, lr}
10040332:	2000      	movs	r0, #0
10040334:	f000 f8f0 	bl	10040518 <__aeabi_idiv0>
10040338:	bd02      	pop	{r1, pc}
1004033a:	46c0      	nop			@ (mov r8, r8)

1004033c <__aeabi_uidivmod>:
1004033c:	2900      	cmp	r1, #0
1004033e:	d0f7      	beq.n	10040330 <__udivsi3+0x100>
10040340:	e776      	b.n	10040230 <__udivsi3>
10040342:	4770      	bx	lr

10040344 <__divsi3>:
10040344:	4603      	mov	r3, r0
10040346:	430b      	orrs	r3, r1
10040348:	d47f      	bmi.n	1004044a <__divsi3+0x106>
1004034a:	2200      	movs	r2, #0
1004034c:	0843      	lsrs	r3, r0, #1
1004034e:	428b      	cmp	r3, r1
10040350:	d374      	bcc.n	1004043c <__divsi3+0xf8>
10040352:	0903      	lsrs	r3, r0, #4
10040354:	428b      	cmp	r3, r1
10040356:	d35f      	bcc.n	10040418 <__divsi3+0xd4>
10040358:	0a03      	lsrs	r3, r0, #8
1004035a:	428b      	cmp	r3, r1
1004035c:	d344      	bcc.n	100403e8 <__divsi3+0xa4>
1004035e:	0b03      	lsrs	r3, r0, #12
10040360:	428b      	cmp	r3, r1
10040362:	d328      	bcc.n	100403b6 <__divsi3+0x72>
10040364:	0c03      	lsrs	r3, r0, #16
10040366:	428b      	cmp	r3, r1
10040368:	d30d      	bcc.n	10040386 <__divsi3+0x42>
1004036a:	22ff      	movs	r2, #255	@ 0xff
1004036c:	0209      	lsls	r1, r1, #8
1004036e:	ba12      	rev	r2, r2
10040370:	0c03      	lsrs	r3, r0, #16
10040372:	428b      	cmp	r3, r1
10040374:	d302      	bcc.n	1004037c <__divsi3+0x38>
10040376:	1212      	asrs	r2, r2, #8
10040378:	0209      	lsls	r1, r1, #8
1004037a:	d065      	beq.n	10040448 <__divsi3+0x104>
1004037c:	0b03      	lsrs	r3, r0, #12
1004037e:	428b      	cmp	r3, r1
10040380:	d319      	bcc.n	100403b6 <__divsi3+0x72>
10040382:	e000      	b.n	10040386 <__divsi3+0x42>
10040384:	0a09      	lsrs	r1, r1, #8
10040386:	0bc3      	lsrs	r3, r0, #15
10040388:	428b      	cmp	r3, r1
1004038a:	d301      	bcc.n	10040390 <__divsi3+0x4c>
1004038c:	03cb      	lsls	r3, r1, #15
1004038e:	1ac0      	subs	r0, r0, r3
10040390:	4152      	adcs	r2, r2
10040392:	0b83      	lsrs	r3, r0, #14
10040394:	428b      	cmp	r3, r1
10040396:	d301      	bcc.n	1004039c <__divsi3+0x58>
10040398:	038b      	lsls	r3, r1, #14
1004039a:	1ac0      	subs	r0, r0, r3
1004039c:	4152      	adcs	r2, r2
1004039e:	0b43      	lsrs	r3, r0, #13
100403a0:	428b      	cmp	r3, r1
100403a2:	d301      	bcc.n	100403a8 <__divsi3+0x64>
100403a4:	034b      	lsls	r3, r1, #13
100403a6:	1ac0      	subs	r0, r0, r3
100403a8:	4152      	adcs	r2, r2
100403aa:	0b03      	lsrs	r3, r0, #12
100403ac:	428b      	cmp	r3, r1
100403ae:	d301      	bcc.n	100403b4 <__divsi3+0x70>
100403b0:	030b      	lsls	r3, r1, #12
100403b2:	1ac0      	subs	r0, r0, r3
100403b4:	4152      	adcs	r2, r2
100403b6:	0ac3      	lsrs	r3, r0, #11
100403b8:	428b      	cmp	r3, r1
100403ba:	d301      	bcc.n	100403c0 <__divsi3+0x7c>
100403bc:	02cb      	lsls	r3, r1, #11
100403be:	1ac0      	subs	r0, r0, r3
100403c0:	4152      	adcs	r2, r2
100403c2:	0a83      	lsrs	r3, r0, #10
100403c4:	428b      	cmp	r3, r1
100403c6:	d301      	bcc.n	100403cc <__divsi3+0x88>
100403c8:	028b      	lsls	r3, r1, #10
100403ca:	1ac0      	subs	r0, r0, r3
100403cc:	4152      	adcs	r2, r2
100403ce:	0a43      	lsrs	r3, r0, #9
100403d0:	428b      	cmp	r3, r1
100403d2:	d301      	bcc.n	100403d8 <__divsi3+0x94>
100403d4:	024b      	lsls	r3, r1, #9
100403d6:	1ac0      	subs	r0, r0, r3
100403d8:	4152      	adcs	r2, r2
100403da:	0a03      	lsrs	r3, r0, #8
100403dc:	428b      	cmp	r3, r1
100403de:	d301      	bcc.n	100403e4 <__divsi3+0xa0>
100403e0:	020b      	lsls	r3, r1, #8
100403e2:	1ac0      	subs	r0, r0, r3
100403e4:	4152      	adcs	r2, r2
100403e6:	d2cd      	bcs.n	10040384 <__divsi3+0x40>
100403e8:	09c3      	lsrs	r3, r0, #7
100403ea:	428b      	cmp	r3, r1
100403ec:	d301      	bcc.n	100403f2 <__divsi3+0xae>
100403ee:	01cb      	lsls	r3, r1, #7
100403f0:	1ac0      	subs	r0, r0, r3
100403f2:	4152      	adcs	r2, r2
100403f4:	0983      	lsrs	r3, r0, #6
100403f6:	428b      	cmp	r3, r1
100403f8:	d301      	bcc.n	100403fe <__divsi3+0xba>
100403fa:	018b      	lsls	r3, r1, #6
100403fc:	1ac0      	subs	r0, r0, r3
100403fe:	4152      	adcs	r2, r2
10040400:	0943      	lsrs	r3, r0, #5
10040402:	428b      	cmp	r3, r1
10040404:	d301      	bcc.n	1004040a <__divsi3+0xc6>
10040406:	014b      	lsls	r3, r1, #5
10040408:	1ac0      	subs	r0, r0, r3
1004040a:	4152      	adcs	r2, r2
1004040c:	0903      	lsrs	r3, r0, #4
1004040e:	428b      	cmp	r3, r1
10040410:	d301      	bcc.n	10040416 <__divsi3+0xd2>
10040412:	010b      	lsls	r3, r1, #4
10040414:	1ac0      	subs	r0, r0, r3
10040416:	4152      	adcs	r2, r2
10040418:	08c3      	lsrs	r3, r0, #3
1004041a:	428b      	cmp	r3, r1
1004041c:	d301      	bcc.n	10040422 <__divsi3+0xde>
1004041e:	00cb      	lsls	r3, r1, #3
10040420:	1ac0      	subs	r0, r0, r3
10040422:	4152      	adcs	r2, r2
10040424:	0883      	lsrs	r3, r0, #2
10040426:	428b      	cmp	r3, r1
10040428:	d301      	bcc.n	1004042e <__divsi3+0xea>
1004042a:	008b      	lsls	r3, r1, #2
1004042c:	1ac0      	subs	r0, r0, r3
1004042e:	4152      	adcs	r2, r2
10040430:	0843      	lsrs	r3, r0, #1
10040432:	428b      	cmp	r3, r1
10040434:	d301      	bcc.n	1004043a <__divsi3+0xf6>
10040436:	004b      	lsls	r3, r1, #1
10040438:	1ac0      	subs	r0, r0, r3
1004043a:	4152      	adcs	r2, r2
1004043c:	1a41      	subs	r1, r0, r1
1004043e:	d200      	bcs.n	10040442 <__divsi3+0xfe>
10040440:	4601      	mov	r1, r0
10040442:	4152      	adcs	r2, r2
10040444:	4610      	mov	r0, r2
10040446:	4770      	bx	lr
10040448:	e05d      	b.n	10040506 <__divsi3+0x1c2>
1004044a:	0fca      	lsrs	r2, r1, #31
1004044c:	d000      	beq.n	10040450 <__divsi3+0x10c>
1004044e:	4249      	negs	r1, r1
10040450:	1003      	asrs	r3, r0, #32
10040452:	d300      	bcc.n	10040456 <__divsi3+0x112>
10040454:	4240      	negs	r0, r0
10040456:	4053      	eors	r3, r2
10040458:	2200      	movs	r2, #0
1004045a:	469c      	mov	ip, r3
1004045c:	0903      	lsrs	r3, r0, #4
1004045e:	428b      	cmp	r3, r1
10040460:	d32d      	bcc.n	100404be <__divsi3+0x17a>
10040462:	0a03      	lsrs	r3, r0, #8
10040464:	428b      	cmp	r3, r1
10040466:	d312      	bcc.n	1004048e <__divsi3+0x14a>
10040468:	22fc      	movs	r2, #252	@ 0xfc
1004046a:	0189      	lsls	r1, r1, #6
1004046c:	ba12      	rev	r2, r2
1004046e:	0a03      	lsrs	r3, r0, #8
10040470:	428b      	cmp	r3, r1
10040472:	d30c      	bcc.n	1004048e <__divsi3+0x14a>
10040474:	0189      	lsls	r1, r1, #6
10040476:	1192      	asrs	r2, r2, #6
10040478:	428b      	cmp	r3, r1
1004047a:	d308      	bcc.n	1004048e <__divsi3+0x14a>
1004047c:	0189      	lsls	r1, r1, #6
1004047e:	1192      	asrs	r2, r2, #6
10040480:	428b      	cmp	r3, r1
10040482:	d304      	bcc.n	1004048e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	d03a      	beq.n	100404fe <__divsi3+0x1ba>
10040488:	1192      	asrs	r2, r2, #6
1004048a:	e000      	b.n	1004048e <__divsi3+0x14a>
1004048c:	0989      	lsrs	r1, r1, #6
1004048e:	09c3      	lsrs	r3, r0, #7
10040490:	428b      	cmp	r3, r1
10040492:	d301      	bcc.n	10040498 <__divsi3+0x154>
10040494:	01cb      	lsls	r3, r1, #7
10040496:	1ac0      	subs	r0, r0, r3
10040498:	4152      	adcs	r2, r2
1004049a:	0983      	lsrs	r3, r0, #6
1004049c:	428b      	cmp	r3, r1
1004049e:	d301      	bcc.n	100404a4 <__divsi3+0x160>
100404a0:	018b      	lsls	r3, r1, #6
100404a2:	1ac0      	subs	r0, r0, r3
100404a4:	4152      	adcs	r2, r2
100404a6:	0943      	lsrs	r3, r0, #5
100404a8:	428b      	cmp	r3, r1
100404aa:	d301      	bcc.n	100404b0 <__divsi3+0x16c>
100404ac:	014b      	lsls	r3, r1, #5
100404ae:	1ac0      	subs	r0, r0, r3
100404b0:	4152      	adcs	r2, r2
100404b2:	0903      	lsrs	r3, r0, #4
100404b4:	428b      	cmp	r3, r1
100404b6:	d301      	bcc.n	100404bc <__divsi3+0x178>
100404b8:	010b      	lsls	r3, r1, #4
100404ba:	1ac0      	subs	r0, r0, r3
100404bc:	4152      	adcs	r2, r2
100404be:	08c3      	lsrs	r3, r0, #3
100404c0:	428b      	cmp	r3, r1
100404c2:	d301      	bcc.n	100404c8 <__divsi3+0x184>
100404c4:	00cb      	lsls	r3, r1, #3
100404c6:	1ac0      	subs	r0, r0, r3
100404c8:	4152      	adcs	r2, r2
100404ca:	0883      	lsrs	r3, r0, #2
100404cc:	428b      	cmp	r3, r1
100404ce:	d301      	bcc.n	100404d4 <__divsi3+0x190>
100404d0:	008b      	lsls	r3, r1, #2
100404d2:	1ac0      	subs	r0, r0, r3
100404d4:	4152      	adcs	r2, r2
100404d6:	d2d9      	bcs.n	1004048c <__divsi3+0x148>
100404d8:	0843      	lsrs	r3, r0, #1
100404da:	428b      	cmp	r3, r1
100404dc:	d301      	bcc.n	100404e2 <__divsi3+0x19e>
100404de:	004b      	lsls	r3, r1, #1
100404e0:	1ac0      	subs	r0, r0, r3
100404e2:	4152      	adcs	r2, r2
100404e4:	1a41      	subs	r1, r0, r1
100404e6:	d200      	bcs.n	100404ea <__divsi3+0x1a6>
100404e8:	4601      	mov	r1, r0
100404ea:	4663      	mov	r3, ip
100404ec:	4152      	adcs	r2, r2
100404ee:	105b      	asrs	r3, r3, #1
100404f0:	4610      	mov	r0, r2
100404f2:	d301      	bcc.n	100404f8 <__divsi3+0x1b4>
100404f4:	4240      	negs	r0, r0
100404f6:	2b00      	cmp	r3, #0
100404f8:	d500      	bpl.n	100404fc <__divsi3+0x1b8>
100404fa:	4249      	negs	r1, r1
100404fc:	4770      	bx	lr
100404fe:	4663      	mov	r3, ip
10040500:	105b      	asrs	r3, r3, #1
10040502:	d300      	bcc.n	10040506 <__divsi3+0x1c2>
10040504:	4240      	negs	r0, r0
10040506:	b501      	push	{r0, lr}
10040508:	2000      	movs	r0, #0
1004050a:	f000 f805 	bl	10040518 <__aeabi_idiv0>
1004050e:	bd02      	pop	{r1, pc}

10040510 <__aeabi_idivmod>:
10040510:	2900      	cmp	r1, #0
10040512:	d0f8      	beq.n	10040506 <__divsi3+0x1c2>
10040514:	e716      	b.n	10040344 <__divsi3>
10040516:	4770      	bx	lr

10040518 <__aeabi_idiv0>:
10040518:	4770      	bx	lr
1004051a:	46c0      	nop			@ (mov r8, r8)

1004051c <__aeabi_llsl>:
1004051c:	4091      	lsls	r1, r2
1004051e:	0003      	movs	r3, r0
10040520:	4090      	lsls	r0, r2
10040522:	469c      	mov	ip, r3
10040524:	3a20      	subs	r2, #32
10040526:	4093      	lsls	r3, r2
10040528:	4319      	orrs	r1, r3
1004052a:	4252      	negs	r2, r2
1004052c:	4663      	mov	r3, ip
1004052e:	40d3      	lsrs	r3, r2
10040530:	4319      	orrs	r1, r3
10040532:	4770      	bx	lr

10040534 <__clzsi2>:
10040534:	211c      	movs	r1, #28
10040536:	2301      	movs	r3, #1
10040538:	041b      	lsls	r3, r3, #16
1004053a:	4298      	cmp	r0, r3
1004053c:	d301      	bcc.n	10040542 <__clzsi2+0xe>
1004053e:	0c00      	lsrs	r0, r0, #16
10040540:	3910      	subs	r1, #16
10040542:	0a1b      	lsrs	r3, r3, #8
10040544:	4298      	cmp	r0, r3
10040546:	d301      	bcc.n	1004054c <__clzsi2+0x18>
10040548:	0a00      	lsrs	r0, r0, #8
1004054a:	3908      	subs	r1, #8
1004054c:	091b      	lsrs	r3, r3, #4
1004054e:	4298      	cmp	r0, r3
10040550:	d301      	bcc.n	10040556 <__clzsi2+0x22>
10040552:	0900      	lsrs	r0, r0, #4
10040554:	3904      	subs	r1, #4
10040556:	a202      	add	r2, pc, #8	@ (adr r2, 10040560 <__clzsi2+0x2c>)
10040558:	5c10      	ldrb	r0, [r2, r0]
1004055a:	1840      	adds	r0, r0, r1
1004055c:	4770      	bx	lr
1004055e:	46c0      	nop			@ (mov r8, r8)
10040560:	02020304 	.word	0x02020304
10040564:	01010101 	.word	0x01010101
	...

10040570 <__aeabi_uldivmod>:
10040570:	2b00      	cmp	r3, #0
10040572:	d111      	bne.n	10040598 <__aeabi_uldivmod+0x28>
10040574:	2a00      	cmp	r2, #0
10040576:	d10f      	bne.n	10040598 <__aeabi_uldivmod+0x28>
10040578:	2900      	cmp	r1, #0
1004057a:	d100      	bne.n	1004057e <__aeabi_uldivmod+0xe>
1004057c:	2800      	cmp	r0, #0
1004057e:	d002      	beq.n	10040586 <__aeabi_uldivmod+0x16>
10040580:	2100      	movs	r1, #0
10040582:	43c9      	mvns	r1, r1
10040584:	0008      	movs	r0, r1
10040586:	b407      	push	{r0, r1, r2}
10040588:	4802      	ldr	r0, [pc, #8]	@ (10040594 <__aeabi_uldivmod+0x24>)
1004058a:	a102      	add	r1, pc, #8	@ (adr r1, 10040594 <__aeabi_uldivmod+0x24>)
1004058c:	1840      	adds	r0, r0, r1
1004058e:	9002      	str	r0, [sp, #8]
10040590:	bd03      	pop	{r0, r1, pc}
10040592:	46c0      	nop			@ (mov r8, r8)
10040594:	ffffff85 	.word	0xffffff85
10040598:	b403      	push	{r0, r1}
1004059a:	4668      	mov	r0, sp
1004059c:	b501      	push	{r0, lr}
1004059e:	9802      	ldr	r0, [sp, #8]
100405a0:	f000 f834 	bl	1004060c <__udivmoddi4>
100405a4:	9b01      	ldr	r3, [sp, #4]
100405a6:	469e      	mov	lr, r3
100405a8:	b002      	add	sp, #8
100405aa:	bc0c      	pop	{r2, r3}
100405ac:	4770      	bx	lr
100405ae:	46c0      	nop			@ (mov r8, r8)

100405b0 <__aeabi_lmul>:
100405b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100405b2:	46ce      	mov	lr, r9
100405b4:	4699      	mov	r9, r3
100405b6:	0c03      	lsrs	r3, r0, #16
100405b8:	469c      	mov	ip, r3
100405ba:	0413      	lsls	r3, r2, #16
100405bc:	4647      	mov	r7, r8
100405be:	0c1b      	lsrs	r3, r3, #16
100405c0:	001d      	movs	r5, r3
100405c2:	000e      	movs	r6, r1
100405c4:	4661      	mov	r1, ip
100405c6:	0404      	lsls	r4, r0, #16
100405c8:	0c24      	lsrs	r4, r4, #16
100405ca:	b580      	push	{r7, lr}
100405cc:	0007      	movs	r7, r0
100405ce:	0c10      	lsrs	r0, r2, #16
100405d0:	434b      	muls	r3, r1
100405d2:	4365      	muls	r5, r4
100405d4:	4341      	muls	r1, r0
100405d6:	4360      	muls	r0, r4
100405d8:	0c2c      	lsrs	r4, r5, #16
100405da:	18c0      	adds	r0, r0, r3
100405dc:	1824      	adds	r4, r4, r0
100405de:	468c      	mov	ip, r1
100405e0:	42a3      	cmp	r3, r4
100405e2:	d903      	bls.n	100405ec <__aeabi_lmul+0x3c>
100405e4:	2380      	movs	r3, #128	@ 0x80
100405e6:	025b      	lsls	r3, r3, #9
100405e8:	4698      	mov	r8, r3
100405ea:	44c4      	add	ip, r8
100405ec:	4649      	mov	r1, r9
100405ee:	4379      	muls	r1, r7
100405f0:	4356      	muls	r6, r2
100405f2:	0c23      	lsrs	r3, r4, #16
100405f4:	042d      	lsls	r5, r5, #16
100405f6:	0c2d      	lsrs	r5, r5, #16
100405f8:	1989      	adds	r1, r1, r6
100405fa:	4463      	add	r3, ip
100405fc:	0424      	lsls	r4, r4, #16
100405fe:	1960      	adds	r0, r4, r5
10040600:	18c9      	adds	r1, r1, r3
10040602:	bcc0      	pop	{r6, r7}
10040604:	46b9      	mov	r9, r7
10040606:	46b0      	mov	r8, r6
10040608:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004060a:	46c0      	nop			@ (mov r8, r8)

1004060c <__udivmoddi4>:
1004060c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004060e:	4657      	mov	r7, sl
10040610:	464e      	mov	r6, r9
10040612:	4645      	mov	r5, r8
10040614:	46de      	mov	lr, fp
10040616:	b5e0      	push	{r5, r6, r7, lr}
10040618:	0004      	movs	r4, r0
1004061a:	000d      	movs	r5, r1
1004061c:	4692      	mov	sl, r2
1004061e:	4699      	mov	r9, r3
10040620:	b083      	sub	sp, #12
10040622:	428b      	cmp	r3, r1
10040624:	d830      	bhi.n	10040688 <__udivmoddi4+0x7c>
10040626:	d02d      	beq.n	10040684 <__udivmoddi4+0x78>
10040628:	4649      	mov	r1, r9
1004062a:	4650      	mov	r0, sl
1004062c:	f000 f8ba 	bl	100407a4 <__clzdi2>
10040630:	0029      	movs	r1, r5
10040632:	0006      	movs	r6, r0
10040634:	0020      	movs	r0, r4
10040636:	f000 f8b5 	bl	100407a4 <__clzdi2>
1004063a:	1a33      	subs	r3, r6, r0
1004063c:	4698      	mov	r8, r3
1004063e:	3b20      	subs	r3, #32
10040640:	d434      	bmi.n	100406ac <__udivmoddi4+0xa0>
10040642:	469b      	mov	fp, r3
10040644:	4653      	mov	r3, sl
10040646:	465a      	mov	r2, fp
10040648:	4093      	lsls	r3, r2
1004064a:	4642      	mov	r2, r8
1004064c:	001f      	movs	r7, r3
1004064e:	4653      	mov	r3, sl
10040650:	4093      	lsls	r3, r2
10040652:	001e      	movs	r6, r3
10040654:	42af      	cmp	r7, r5
10040656:	d83b      	bhi.n	100406d0 <__udivmoddi4+0xc4>
10040658:	42af      	cmp	r7, r5
1004065a:	d100      	bne.n	1004065e <__udivmoddi4+0x52>
1004065c:	e079      	b.n	10040752 <__udivmoddi4+0x146>
1004065e:	465b      	mov	r3, fp
10040660:	1ba4      	subs	r4, r4, r6
10040662:	41bd      	sbcs	r5, r7
10040664:	2b00      	cmp	r3, #0
10040666:	da00      	bge.n	1004066a <__udivmoddi4+0x5e>
10040668:	e076      	b.n	10040758 <__udivmoddi4+0x14c>
1004066a:	2200      	movs	r2, #0
1004066c:	2300      	movs	r3, #0
1004066e:	9200      	str	r2, [sp, #0]
10040670:	9301      	str	r3, [sp, #4]
10040672:	2301      	movs	r3, #1
10040674:	465a      	mov	r2, fp
10040676:	4093      	lsls	r3, r2
10040678:	9301      	str	r3, [sp, #4]
1004067a:	2301      	movs	r3, #1
1004067c:	4642      	mov	r2, r8
1004067e:	4093      	lsls	r3, r2
10040680:	9300      	str	r3, [sp, #0]
10040682:	e029      	b.n	100406d8 <__udivmoddi4+0xcc>
10040684:	4282      	cmp	r2, r0
10040686:	d9cf      	bls.n	10040628 <__udivmoddi4+0x1c>
10040688:	2200      	movs	r2, #0
1004068a:	2300      	movs	r3, #0
1004068c:	9200      	str	r2, [sp, #0]
1004068e:	9301      	str	r3, [sp, #4]
10040690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040692:	2b00      	cmp	r3, #0
10040694:	d001      	beq.n	1004069a <__udivmoddi4+0x8e>
10040696:	601c      	str	r4, [r3, #0]
10040698:	605d      	str	r5, [r3, #4]
1004069a:	9800      	ldr	r0, [sp, #0]
1004069c:	9901      	ldr	r1, [sp, #4]
1004069e:	b003      	add	sp, #12
100406a0:	bcf0      	pop	{r4, r5, r6, r7}
100406a2:	46bb      	mov	fp, r7
100406a4:	46b2      	mov	sl, r6
100406a6:	46a9      	mov	r9, r5
100406a8:	46a0      	mov	r8, r4
100406aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100406ac:	4642      	mov	r2, r8
100406ae:	469b      	mov	fp, r3
100406b0:	2320      	movs	r3, #32
100406b2:	1a9b      	subs	r3, r3, r2
100406b4:	4652      	mov	r2, sl
100406b6:	40da      	lsrs	r2, r3
100406b8:	4641      	mov	r1, r8
100406ba:	0013      	movs	r3, r2
100406bc:	464a      	mov	r2, r9
100406be:	408a      	lsls	r2, r1
100406c0:	0017      	movs	r7, r2
100406c2:	4642      	mov	r2, r8
100406c4:	431f      	orrs	r7, r3
100406c6:	4653      	mov	r3, sl
100406c8:	4093      	lsls	r3, r2
100406ca:	001e      	movs	r6, r3
100406cc:	42af      	cmp	r7, r5
100406ce:	d9c3      	bls.n	10040658 <__udivmoddi4+0x4c>
100406d0:	2200      	movs	r2, #0
100406d2:	2300      	movs	r3, #0
100406d4:	9200      	str	r2, [sp, #0]
100406d6:	9301      	str	r3, [sp, #4]
100406d8:	4643      	mov	r3, r8
100406da:	2b00      	cmp	r3, #0
100406dc:	d0d8      	beq.n	10040690 <__udivmoddi4+0x84>
100406de:	07fb      	lsls	r3, r7, #31
100406e0:	0872      	lsrs	r2, r6, #1
100406e2:	431a      	orrs	r2, r3
100406e4:	4646      	mov	r6, r8
100406e6:	087b      	lsrs	r3, r7, #1
100406e8:	e00e      	b.n	10040708 <__udivmoddi4+0xfc>
100406ea:	42ab      	cmp	r3, r5
100406ec:	d101      	bne.n	100406f2 <__udivmoddi4+0xe6>
100406ee:	42a2      	cmp	r2, r4
100406f0:	d80c      	bhi.n	1004070c <__udivmoddi4+0x100>
100406f2:	1aa4      	subs	r4, r4, r2
100406f4:	419d      	sbcs	r5, r3
100406f6:	2001      	movs	r0, #1
100406f8:	1924      	adds	r4, r4, r4
100406fa:	416d      	adcs	r5, r5
100406fc:	2100      	movs	r1, #0
100406fe:	3e01      	subs	r6, #1
10040700:	1824      	adds	r4, r4, r0
10040702:	414d      	adcs	r5, r1
10040704:	2e00      	cmp	r6, #0
10040706:	d006      	beq.n	10040716 <__udivmoddi4+0x10a>
10040708:	42ab      	cmp	r3, r5
1004070a:	d9ee      	bls.n	100406ea <__udivmoddi4+0xde>
1004070c:	3e01      	subs	r6, #1
1004070e:	1924      	adds	r4, r4, r4
10040710:	416d      	adcs	r5, r5
10040712:	2e00      	cmp	r6, #0
10040714:	d1f8      	bne.n	10040708 <__udivmoddi4+0xfc>
10040716:	9800      	ldr	r0, [sp, #0]
10040718:	9901      	ldr	r1, [sp, #4]
1004071a:	465b      	mov	r3, fp
1004071c:	1900      	adds	r0, r0, r4
1004071e:	4169      	adcs	r1, r5
10040720:	2b00      	cmp	r3, #0
10040722:	db24      	blt.n	1004076e <__udivmoddi4+0x162>
10040724:	002b      	movs	r3, r5
10040726:	465a      	mov	r2, fp
10040728:	4644      	mov	r4, r8
1004072a:	40d3      	lsrs	r3, r2
1004072c:	002a      	movs	r2, r5
1004072e:	40e2      	lsrs	r2, r4
10040730:	001c      	movs	r4, r3
10040732:	465b      	mov	r3, fp
10040734:	0015      	movs	r5, r2
10040736:	2b00      	cmp	r3, #0
10040738:	db2a      	blt.n	10040790 <__udivmoddi4+0x184>
1004073a:	0026      	movs	r6, r4
1004073c:	409e      	lsls	r6, r3
1004073e:	0033      	movs	r3, r6
10040740:	0026      	movs	r6, r4
10040742:	4647      	mov	r7, r8
10040744:	40be      	lsls	r6, r7
10040746:	0032      	movs	r2, r6
10040748:	1a80      	subs	r0, r0, r2
1004074a:	4199      	sbcs	r1, r3
1004074c:	9000      	str	r0, [sp, #0]
1004074e:	9101      	str	r1, [sp, #4]
10040750:	e79e      	b.n	10040690 <__udivmoddi4+0x84>
10040752:	42a3      	cmp	r3, r4
10040754:	d8bc      	bhi.n	100406d0 <__udivmoddi4+0xc4>
10040756:	e782      	b.n	1004065e <__udivmoddi4+0x52>
10040758:	4642      	mov	r2, r8
1004075a:	2320      	movs	r3, #32
1004075c:	2100      	movs	r1, #0
1004075e:	1a9b      	subs	r3, r3, r2
10040760:	2200      	movs	r2, #0
10040762:	9100      	str	r1, [sp, #0]
10040764:	9201      	str	r2, [sp, #4]
10040766:	2201      	movs	r2, #1
10040768:	40da      	lsrs	r2, r3
1004076a:	9201      	str	r2, [sp, #4]
1004076c:	e785      	b.n	1004067a <__udivmoddi4+0x6e>
1004076e:	4642      	mov	r2, r8
10040770:	2320      	movs	r3, #32
10040772:	1a9b      	subs	r3, r3, r2
10040774:	002a      	movs	r2, r5
10040776:	4646      	mov	r6, r8
10040778:	409a      	lsls	r2, r3
1004077a:	0023      	movs	r3, r4
1004077c:	40f3      	lsrs	r3, r6
1004077e:	4644      	mov	r4, r8
10040780:	4313      	orrs	r3, r2
10040782:	002a      	movs	r2, r5
10040784:	40e2      	lsrs	r2, r4
10040786:	001c      	movs	r4, r3
10040788:	465b      	mov	r3, fp
1004078a:	0015      	movs	r5, r2
1004078c:	2b00      	cmp	r3, #0
1004078e:	dad4      	bge.n	1004073a <__udivmoddi4+0x12e>
10040790:	4642      	mov	r2, r8
10040792:	002f      	movs	r7, r5
10040794:	2320      	movs	r3, #32
10040796:	0026      	movs	r6, r4
10040798:	4097      	lsls	r7, r2
1004079a:	1a9b      	subs	r3, r3, r2
1004079c:	40de      	lsrs	r6, r3
1004079e:	003b      	movs	r3, r7
100407a0:	4333      	orrs	r3, r6
100407a2:	e7cd      	b.n	10040740 <__udivmoddi4+0x134>

100407a4 <__clzdi2>:
100407a4:	b510      	push	{r4, lr}
100407a6:	2900      	cmp	r1, #0
100407a8:	d103      	bne.n	100407b2 <__clzdi2+0xe>
100407aa:	f7ff fec3 	bl	10040534 <__clzsi2>
100407ae:	3020      	adds	r0, #32
100407b0:	e002      	b.n	100407b8 <__clzdi2+0x14>
100407b2:	0008      	movs	r0, r1
100407b4:	f7ff febe 	bl	10040534 <__clzsi2>
100407b8:	bd10      	pop	{r4, pc}
100407ba:	46c0      	nop			@ (mov r8, r8)

100407bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100407bc:	b580      	push	{r7, lr}
100407be:	b082      	sub	sp, #8
100407c0:	af00      	add	r7, sp, #0
100407c2:	0002      	movs	r2, r0
100407c4:	1dfb      	adds	r3, r7, #7
100407c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100407c8:	1dfb      	adds	r3, r7, #7
100407ca:	781b      	ldrb	r3, [r3, #0]
100407cc:	2b7f      	cmp	r3, #127	@ 0x7f
100407ce:	d809      	bhi.n	100407e4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100407d0:	1dfb      	adds	r3, r7, #7
100407d2:	781b      	ldrb	r3, [r3, #0]
100407d4:	001a      	movs	r2, r3
100407d6:	231f      	movs	r3, #31
100407d8:	401a      	ands	r2, r3
100407da:	4b04      	ldr	r3, [pc, #16]	@ (100407ec <__NVIC_EnableIRQ+0x30>)
100407dc:	2101      	movs	r1, #1
100407de:	4091      	lsls	r1, r2
100407e0:	000a      	movs	r2, r1
100407e2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100407e4:	46c0      	nop			@ (mov r8, r8)
100407e6:	46bd      	mov	sp, r7
100407e8:	b002      	add	sp, #8
100407ea:	bd80      	pop	{r7, pc}
100407ec:	e000e100 	.word	0xe000e100

100407f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100407f0:	b590      	push	{r4, r7, lr}
100407f2:	b083      	sub	sp, #12
100407f4:	af00      	add	r7, sp, #0
100407f6:	0002      	movs	r2, r0
100407f8:	6039      	str	r1, [r7, #0]
100407fa:	1dfb      	adds	r3, r7, #7
100407fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100407fe:	1dfb      	adds	r3, r7, #7
10040800:	781b      	ldrb	r3, [r3, #0]
10040802:	2b7f      	cmp	r3, #127	@ 0x7f
10040804:	d828      	bhi.n	10040858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040806:	4a2f      	ldr	r2, [pc, #188]	@ (100408c4 <__NVIC_SetPriority+0xd4>)
10040808:	1dfb      	adds	r3, r7, #7
1004080a:	781b      	ldrb	r3, [r3, #0]
1004080c:	b25b      	sxtb	r3, r3
1004080e:	089b      	lsrs	r3, r3, #2
10040810:	33c0      	adds	r3, #192	@ 0xc0
10040812:	009b      	lsls	r3, r3, #2
10040814:	589b      	ldr	r3, [r3, r2]
10040816:	1dfa      	adds	r2, r7, #7
10040818:	7812      	ldrb	r2, [r2, #0]
1004081a:	0011      	movs	r1, r2
1004081c:	2203      	movs	r2, #3
1004081e:	400a      	ands	r2, r1
10040820:	00d2      	lsls	r2, r2, #3
10040822:	21ff      	movs	r1, #255	@ 0xff
10040824:	4091      	lsls	r1, r2
10040826:	000a      	movs	r2, r1
10040828:	43d2      	mvns	r2, r2
1004082a:	401a      	ands	r2, r3
1004082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004082e:	683b      	ldr	r3, [r7, #0]
10040830:	019b      	lsls	r3, r3, #6
10040832:	22ff      	movs	r2, #255	@ 0xff
10040834:	401a      	ands	r2, r3
10040836:	1dfb      	adds	r3, r7, #7
10040838:	781b      	ldrb	r3, [r3, #0]
1004083a:	0018      	movs	r0, r3
1004083c:	2303      	movs	r3, #3
1004083e:	4003      	ands	r3, r0
10040840:	00db      	lsls	r3, r3, #3
10040842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040844:	481f      	ldr	r0, [pc, #124]	@ (100408c4 <__NVIC_SetPriority+0xd4>)
10040846:	1dfb      	adds	r3, r7, #7
10040848:	781b      	ldrb	r3, [r3, #0]
1004084a:	b25b      	sxtb	r3, r3
1004084c:	089b      	lsrs	r3, r3, #2
1004084e:	430a      	orrs	r2, r1
10040850:	33c0      	adds	r3, #192	@ 0xc0
10040852:	009b      	lsls	r3, r3, #2
10040854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10040856:	e031      	b.n	100408bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040858:	4a1b      	ldr	r2, [pc, #108]	@ (100408c8 <__NVIC_SetPriority+0xd8>)
1004085a:	1dfb      	adds	r3, r7, #7
1004085c:	781b      	ldrb	r3, [r3, #0]
1004085e:	0019      	movs	r1, r3
10040860:	230f      	movs	r3, #15
10040862:	400b      	ands	r3, r1
10040864:	3b08      	subs	r3, #8
10040866:	089b      	lsrs	r3, r3, #2
10040868:	3306      	adds	r3, #6
1004086a:	009b      	lsls	r3, r3, #2
1004086c:	18d3      	adds	r3, r2, r3
1004086e:	3304      	adds	r3, #4
10040870:	681b      	ldr	r3, [r3, #0]
10040872:	1dfa      	adds	r2, r7, #7
10040874:	7812      	ldrb	r2, [r2, #0]
10040876:	0011      	movs	r1, r2
10040878:	2203      	movs	r2, #3
1004087a:	400a      	ands	r2, r1
1004087c:	00d2      	lsls	r2, r2, #3
1004087e:	21ff      	movs	r1, #255	@ 0xff
10040880:	4091      	lsls	r1, r2
10040882:	000a      	movs	r2, r1
10040884:	43d2      	mvns	r2, r2
10040886:	401a      	ands	r2, r3
10040888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004088a:	683b      	ldr	r3, [r7, #0]
1004088c:	019b      	lsls	r3, r3, #6
1004088e:	22ff      	movs	r2, #255	@ 0xff
10040890:	401a      	ands	r2, r3
10040892:	1dfb      	adds	r3, r7, #7
10040894:	781b      	ldrb	r3, [r3, #0]
10040896:	0018      	movs	r0, r3
10040898:	2303      	movs	r3, #3
1004089a:	4003      	ands	r3, r0
1004089c:	00db      	lsls	r3, r3, #3
1004089e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100408a0:	4809      	ldr	r0, [pc, #36]	@ (100408c8 <__NVIC_SetPriority+0xd8>)
100408a2:	1dfb      	adds	r3, r7, #7
100408a4:	781b      	ldrb	r3, [r3, #0]
100408a6:	001c      	movs	r4, r3
100408a8:	230f      	movs	r3, #15
100408aa:	4023      	ands	r3, r4
100408ac:	3b08      	subs	r3, #8
100408ae:	089b      	lsrs	r3, r3, #2
100408b0:	430a      	orrs	r2, r1
100408b2:	3306      	adds	r3, #6
100408b4:	009b      	lsls	r3, r3, #2
100408b6:	18c3      	adds	r3, r0, r3
100408b8:	3304      	adds	r3, #4
100408ba:	601a      	str	r2, [r3, #0]
}
100408bc:	46c0      	nop			@ (mov r8, r8)
100408be:	46bd      	mov	sp, r7
100408c0:	b003      	add	sp, #12
100408c2:	bd90      	pop	{r4, r7, pc}
100408c4:	e000e100 	.word	0xe000e100
100408c8:	e000ed00 	.word	0xe000ed00

100408cc <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
100408cc:	b580      	push	{r7, lr}
100408ce:	b086      	sub	sp, #24
100408d0:	af00      	add	r7, sp, #0
100408d2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100408d4:	f3ef 8310 	mrs	r3, PRIMASK
100408d8:	60bb      	str	r3, [r7, #8]
  return(result);
100408da:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
100408dc:	617b      	str	r3, [r7, #20]
100408de:	2301      	movs	r3, #1
100408e0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100408e2:	68fb      	ldr	r3, [r7, #12]
100408e4:	f383 8810 	msr	PRIMASK, r3
}
100408e8:	46c0      	nop			@ (mov r8, r8)
100408ea:	687b      	ldr	r3, [r7, #4]
100408ec:	681b      	ldr	r3, [r3, #0]
100408ee:	2220      	movs	r2, #32
100408f0:	431a      	orrs	r2, r3
100408f2:	687b      	ldr	r3, [r7, #4]
100408f4:	601a      	str	r2, [r3, #0]
100408f6:	697b      	ldr	r3, [r7, #20]
100408f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100408fa:	693b      	ldr	r3, [r7, #16]
100408fc:	f383 8810 	msr	PRIMASK, r3
}
10040900:	46c0      	nop			@ (mov r8, r8)
}
10040902:	46c0      	nop			@ (mov r8, r8)
10040904:	46bd      	mov	sp, r7
10040906:	b006      	add	sp, #24
10040908:	bd80      	pop	{r7, pc}

1004090a <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
1004090a:	b580      	push	{r7, lr}
1004090c:	b086      	sub	sp, #24
1004090e:	af00      	add	r7, sp, #0
10040910:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
10040912:	2000      	movs	r0, #0
10040914:	f002 f8f9 	bl	10042b0a <APP_DEBUG_SIGNAL_SET>
  UTIL_ADV_TRACE_SetRegion(~0x0);
#endif

  /* USER CODE BEGIN APPE_Init_1 */
#if (CFG_DEBUG_APP_TRACE != 0) && (CFG_DEBUG_APP_ADV_TRACE == 0)
  COM_InitTypeDef COM_Init =
10040918:	2108      	movs	r1, #8
1004091a:	187b      	adds	r3, r7, r1
1004091c:	22e1      	movs	r2, #225	@ 0xe1
1004091e:	0252      	lsls	r2, r2, #9
10040920:	601a      	str	r2, [r3, #0]
10040922:	187b      	adds	r3, r7, r1
10040924:	2200      	movs	r2, #0
10040926:	605a      	str	r2, [r3, #4]
10040928:	187b      	adds	r3, r7, r1
1004092a:	2200      	movs	r2, #0
1004092c:	811a      	strh	r2, [r3, #8]
1004092e:	187b      	adds	r3, r7, r1
10040930:	2200      	movs	r2, #0
10040932:	815a      	strh	r2, [r3, #10]
10040934:	187b      	adds	r3, r7, r1
10040936:	2200      	movs	r2, #0
10040938:	819a      	strh	r2, [r3, #12]
   .WordLength= COM_WORDLENGTH_8B,
   .StopBits = COM_STOPBITS_1,
   .Parity = COM_PARITY_NONE,
   .HwFlowCtl = COM_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &COM_Init);
1004093a:	187b      	adds	r3, r7, r1
1004093c:	0019      	movs	r1, r3
1004093e:	2000      	movs	r0, #0
10040940:	f004 fe6e 	bl	10045620 <BSP_COM_Init>

#endif
  
  RxUART_Init();
10040944:	f000 f822 	bl	1004098c <RxUART_Init>
  
  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
10040948:	f002 fbe0 	bl	1004310c <HW_RNG_Init>
1004094c:	1e03      	subs	r3, r0, #0
1004094e:	d001      	beq.n	10040954 <MX_APPE_Init+0x4a>
  {
    Error_Handler();
10040950:	f000 fad8 	bl	10040f04 <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
10040954:	f002 f93e 	bl	10042bd4 <HW_AES_Init>
  HW_PKA_Init();
10040958:	f002 fa52 	bl	10042e00 <HW_PKA_Init>
  APP_BLE_Init();
1004095c:	f000 fec2 	bl	100416e4 <APP_BLE_Init>

#if (CFG_LPM_SUPPORTED == 1)
  /* Low Power Manager Init */
  UTIL_LPM_Init();
10040960:	f009 fdf2 	bl	1004a548 <UTIL_LPM_Init>
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
10040964:	2000      	movs	r0, #0
10040966:	f002 f8da 	bl	10042b1e <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
1004096a:	2300      	movs	r3, #0
}
1004096c:	0018      	movs	r0, r3
1004096e:	46bd      	mov	sp, r7
10040970:	b006      	add	sp, #24
10040972:	bd80      	pop	{r7, pc}

10040974 <App_PowerSaveLevel_Check>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
#if (CFG_LPM_SUPPORTED == 1)
static PowerSaveLevels App_PowerSaveLevel_Check(void)
{
10040974:	b580      	push	{r7, lr}
10040976:	b082      	sub	sp, #8
10040978:	af00      	add	r7, sp, #0
  PowerSaveLevels output_level = POWER_SAVE_LEVEL_STOP;
1004097a:	1dfb      	adds	r3, r7, #7
1004097c:	2203      	movs	r2, #3
1004097e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN App_PowerSaveLevel_Check_1 */
  
  /* USER CODE END App_PowerSaveLevel_Check_1 */

  return output_level;
10040980:	1dfb      	adds	r3, r7, #7
10040982:	781b      	ldrb	r3, [r3, #0]
}
10040984:	0018      	movs	r0, r3
10040986:	46bd      	mov	sp, r7
10040988:	b002      	add	sp, #8
1004098a:	bd80      	pop	{r7, pc}

1004098c <RxUART_Init>:
#endif

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

static void RxUART_Init(void)
{
1004098c:	b580      	push	{r7, lr}
1004098e:	af00      	add	r7, sp, #0
  /* Enable the RX not empty interrupt */
  LL_USART_EnableIT_RXNE(USART1);
10040990:	4b0a      	ldr	r3, [pc, #40]	@ (100409bc <RxUART_Init+0x30>)
10040992:	0018      	movs	r0, r3
10040994:	f7ff ff9a 	bl	100408cc <LL_USART_EnableIT_RXNE_RXFNE>

  /* Enable the UART IRQ */
  NVIC_SetPriority(USART1_IRQn, IRQ_HIGH_PRIORITY);
10040998:	2101      	movs	r1, #1
1004099a:	2008      	movs	r0, #8
1004099c:	f7ff ff28 	bl	100407f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
100409a0:	2008      	movs	r0, #8
100409a2:	f7ff ff0b 	bl	100407bc <__NVIC_EnableIRQ>
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  setvbuf(stdout, NULL, _IONBF, 0);
100409a6:	4b06      	ldr	r3, [pc, #24]	@ (100409c0 <RxUART_Init+0x34>)
100409a8:	681b      	ldr	r3, [r3, #0]
100409aa:	6898      	ldr	r0, [r3, #8]
100409ac:	2300      	movs	r3, #0
100409ae:	2202      	movs	r2, #2
100409b0:	2100      	movs	r1, #0
100409b2:	f00e f955 	bl	1004ec60 <setvbuf>
#endif
}
100409b6:	46c0      	nop			@ (mov r8, r8)
100409b8:	46bd      	mov	sp, r7
100409ba:	bd80      	pop	{r7, pc}
100409bc:	41004000 	.word	0x41004000
100409c0:	20000d20 	.word	0x20000d20

100409c4 <UartRxCpltCallback>:

void UartRxCpltCallback(uint8_t * pRxDataBuff, uint16_t nDataSize)
{
100409c4:	b580      	push	{r7, lr}
100409c6:	b082      	sub	sp, #8
100409c8:	af00      	add	r7, sp, #0
100409ca:	6078      	str	r0, [r7, #4]
100409cc:	000a      	movs	r2, r1
100409ce:	1cbb      	adds	r3, r7, #2
100409d0:	801a      	strh	r2, [r3, #0]
  // Loop in case nDataSize > 1 (always 1 in current implementation).
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
100409d2:	4b15      	ldr	r3, [pc, #84]	@ (10040a28 <UartRxCpltCallback+0x64>)
100409d4:	881b      	ldrh	r3, [r3, #0]
100409d6:	2bff      	cmp	r3, #255	@ 0xff
100409d8:	d821      	bhi.n	10040a1e <UartRxCpltCallback+0x5a>
  {
    if (*pRxDataBuff == '\r')
100409da:	687b      	ldr	r3, [r7, #4]
100409dc:	781b      	ldrb	r3, [r3, #0]
100409de:	2b0d      	cmp	r3, #13
100409e0:	d112      	bne.n	10040a08 <UartRxCpltCallback+0x44>
    {
      APP_DBG_MSG("received %s\n", CommandString);
100409e2:	4a12      	ldr	r2, [pc, #72]	@ (10040a2c <UartRxCpltCallback+0x68>)
100409e4:	4b12      	ldr	r3, [pc, #72]	@ (10040a30 <UartRxCpltCallback+0x6c>)
100409e6:	0011      	movs	r1, r2
100409e8:	0018      	movs	r0, r3
100409ea:	f00e f8c9 	bl	1004eb80 <iprintf>

      UartCmdExecute();
100409ee:	f000 f821 	bl	10040a34 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
100409f2:	4b0d      	ldr	r3, [pc, #52]	@ (10040a28 <UartRxCpltCallback+0x64>)
100409f4:	2200      	movs	r2, #0
100409f6:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
100409f8:	2380      	movs	r3, #128	@ 0x80
100409fa:	005a      	lsls	r2, r3, #1
100409fc:	4b0b      	ldr	r3, [pc, #44]	@ (10040a2c <UartRxCpltCallback+0x68>)
100409fe:	2100      	movs	r1, #0
10040a00:	0018      	movs	r0, r3
10040a02:	f00e fadd 	bl	1004efc0 <memset>
    else
    {
      CommandString[indexReceiveChar++] = *pRxDataBuff;
    }
  }
}
10040a06:	e00a      	b.n	10040a1e <UartRxCpltCallback+0x5a>
      CommandString[indexReceiveChar++] = *pRxDataBuff;
10040a08:	4b07      	ldr	r3, [pc, #28]	@ (10040a28 <UartRxCpltCallback+0x64>)
10040a0a:	881b      	ldrh	r3, [r3, #0]
10040a0c:	1c5a      	adds	r2, r3, #1
10040a0e:	b291      	uxth	r1, r2
10040a10:	4a05      	ldr	r2, [pc, #20]	@ (10040a28 <UartRxCpltCallback+0x64>)
10040a12:	8011      	strh	r1, [r2, #0]
10040a14:	001a      	movs	r2, r3
10040a16:	687b      	ldr	r3, [r7, #4]
10040a18:	7819      	ldrb	r1, [r3, #0]
10040a1a:	4b04      	ldr	r3, [pc, #16]	@ (10040a2c <UartRxCpltCallback+0x68>)
10040a1c:	5499      	strb	r1, [r3, r2]
}
10040a1e:	46c0      	nop			@ (mov r8, r8)
10040a20:	46bd      	mov	sp, r7
10040a22:	b002      	add	sp, #8
10040a24:	bd80      	pop	{r7, pc}
10040a26:	46c0      	nop			@ (mov r8, r8)
10040a28:	20000294 	.word	0x20000294
10040a2c:	20000194 	.word	0x20000194
10040a30:	1004fae8 	.word	0x1004fae8

10040a34 <UartCmdExecute>:

static void UartCmdExecute(void)
{
10040a34:	b580      	push	{r7, lr}
10040a36:	af00      	add	r7, sp, #0

}
10040a38:	46c0      	nop			@ (mov r8, r8)
10040a3a:	46bd      	mov	sp, r7
10040a3c:	bd80      	pop	{r7, pc}

10040a3e <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10040a3e:	b580      	push	{r7, lr}
10040a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10040a42:	2301      	movs	r3, #1
10040a44:	425b      	negs	r3, r3
10040a46:	0018      	movs	r0, r3
10040a48:	f009 fe24 	bl	1004a694 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10040a4c:	46c0      	nop			@ (mov r8, r8)
10040a4e:	46bd      	mov	sp, r7
10040a50:	bd80      	pop	{r7, pc}

10040a52 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10040a52:	b580      	push	{r7, lr}
10040a54:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10040a56:	46c0      	nop			@ (mov r8, r8)
}
10040a58:	46bd      	mov	sp, r7
10040a5a:	bd80      	pop	{r7, pc}

10040a5c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10040a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10040a5e:	b093      	sub	sp, #76	@ 0x4c
10040a60:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)

  /* Need to consume some CSTACK on WB05, due to bootloader CSTACK usage. */
  volatile uint32_t dummy[15];
  uint8_t i;
  for (i=0; i<10; i++)
10040a62:	2347      	movs	r3, #71	@ 0x47
10040a64:	18fb      	adds	r3, r7, r3
10040a66:	2200      	movs	r2, #0
10040a68:	701a      	strb	r2, [r3, #0]
10040a6a:	e00c      	b.n	10040a86 <UTIL_SEQ_Idle+0x2a>
  {
    dummy[i] = 0;
10040a6c:	2047      	movs	r0, #71	@ 0x47
10040a6e:	183b      	adds	r3, r7, r0
10040a70:	781a      	ldrb	r2, [r3, #0]
10040a72:	1d3b      	adds	r3, r7, #4
10040a74:	0092      	lsls	r2, r2, #2
10040a76:	2100      	movs	r1, #0
10040a78:	50d1      	str	r1, [r2, r3]
    __NOP();
10040a7a:	46c0      	nop			@ (mov r8, r8)
  for (i=0; i<10; i++)
10040a7c:	183b      	adds	r3, r7, r0
10040a7e:	781a      	ldrb	r2, [r3, #0]
10040a80:	183b      	adds	r3, r7, r0
10040a82:	3201      	adds	r2, #1
10040a84:	701a      	strb	r2, [r3, #0]
10040a86:	2347      	movs	r3, #71	@ 0x47
10040a88:	18fb      	adds	r3, r7, r3
10040a8a:	781b      	ldrb	r3, [r3, #0]
10040a8c:	2b09      	cmp	r3, #9
10040a8e:	d9ed      	bls.n	10040a6c <UTIL_SEQ_Idle+0x10>
  }

  PowerSaveLevels app_powerSave_level, vtimer_powerSave_level, final_level, pka_level;

  if ((BLE_STACK_SleepCheck() != POWER_SAVE_LEVEL_RUNNING) &&
10040a90:	f00a fa26 	bl	1004aee0 <BLE_STACK_SleepCheck>
10040a94:	1e03      	subs	r3, r0, #0
10040a96:	d05a      	beq.n	10040b4e <UTIL_SEQ_Idle+0xf2>
      ((app_powerSave_level = App_PowerSaveLevel_Check()) != POWER_SAVE_LEVEL_RUNNING))
10040a98:	2546      	movs	r5, #70	@ 0x46
10040a9a:	197c      	adds	r4, r7, r5
10040a9c:	f7ff ff6a 	bl	10040974 <App_PowerSaveLevel_Check>
10040aa0:	0003      	movs	r3, r0
10040aa2:	7023      	strb	r3, [r4, #0]
  if ((BLE_STACK_SleepCheck() != POWER_SAVE_LEVEL_RUNNING) &&
10040aa4:	197b      	adds	r3, r7, r5
10040aa6:	781b      	ldrb	r3, [r3, #0]
10040aa8:	2b00      	cmp	r3, #0
10040aaa:	d050      	beq.n	10040b4e <UTIL_SEQ_Idle+0xf2>
  {
    vtimer_powerSave_level = HAL_RADIO_TIMER_PowerSaveLevelCheck();
10040aac:	2645      	movs	r6, #69	@ 0x45
10040aae:	19bc      	adds	r4, r7, r6
10040ab0:	f007 f8b8 	bl	10047c24 <HAL_RADIO_TIMER_PowerSaveLevelCheck>
10040ab4:	0003      	movs	r3, r0
10040ab6:	7023      	strb	r3, [r4, #0]
    pka_level = (PowerSaveLevels) HW_PKA_PowerSaveLevelCheck();
10040ab8:	2344      	movs	r3, #68	@ 0x44
10040aba:	18fc      	adds	r4, r7, r3
10040abc:	f002 f9b6 	bl	10042e2c <HW_PKA_PowerSaveLevelCheck>
10040ac0:	0003      	movs	r3, r0
10040ac2:	7023      	strb	r3, [r4, #0]
    final_level = (PowerSaveLevels)MIN(vtimer_powerSave_level, app_powerSave_level);
10040ac4:	2343      	movs	r3, #67	@ 0x43
10040ac6:	18fa      	adds	r2, r7, r3
10040ac8:	197b      	adds	r3, r7, r5
10040aca:	19b9      	adds	r1, r7, r6
10040acc:	780c      	ldrb	r4, [r1, #0]
10040ace:	781b      	ldrb	r3, [r3, #0]
10040ad0:	b2d8      	uxtb	r0, r3
10040ad2:	b2e1      	uxtb	r1, r4
10040ad4:	4288      	cmp	r0, r1
10040ad6:	d900      	bls.n	10040ada <UTIL_SEQ_Idle+0x7e>
10040ad8:	1c23      	adds	r3, r4, #0
10040ada:	7013      	strb	r3, [r2, #0]
    final_level = (PowerSaveLevels)MIN(pka_level, final_level);
10040adc:	2343      	movs	r3, #67	@ 0x43
10040ade:	18fa      	adds	r2, r7, r3
10040ae0:	18fb      	adds	r3, r7, r3
10040ae2:	2144      	movs	r1, #68	@ 0x44
10040ae4:	1879      	adds	r1, r7, r1
10040ae6:	780c      	ldrb	r4, [r1, #0]
10040ae8:	781b      	ldrb	r3, [r3, #0]
10040aea:	b2d8      	uxtb	r0, r3
10040aec:	b2e1      	uxtb	r1, r4
10040aee:	4288      	cmp	r0, r1
10040af0:	d900      	bls.n	10040af4 <UTIL_SEQ_Idle+0x98>
10040af2:	1c23      	adds	r3, r4, #0
10040af4:	7013      	strb	r3, [r2, #0]

    switch(final_level)
10040af6:	2343      	movs	r3, #67	@ 0x43
10040af8:	18fb      	adds	r3, r7, r3
10040afa:	781b      	ldrb	r3, [r3, #0]
10040afc:	2b03      	cmp	r3, #3
10040afe:	d019      	beq.n	10040b34 <UTIL_SEQ_Idle+0xd8>
10040b00:	dc21      	bgt.n	10040b46 <UTIL_SEQ_Idle+0xea>
10040b02:	2b02      	cmp	r3, #2
10040b04:	d00d      	beq.n	10040b22 <UTIL_SEQ_Idle+0xc6>
10040b06:	dc1e      	bgt.n	10040b46 <UTIL_SEQ_Idle+0xea>
10040b08:	2b00      	cmp	r3, #0
10040b0a:	d01f      	beq.n	10040b4c <UTIL_SEQ_Idle+0xf0>
10040b0c:	2b01      	cmp	r3, #1
10040b0e:	d11a      	bne.n	10040b46 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_RUNNING:
      /* Not Power Save device is busy */
      return;
      break;
    case POWER_SAVE_LEVEL_CPU_HALT:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10040b10:	2101      	movs	r1, #1
10040b12:	2001      	movs	r0, #1
10040b14:	f009 fd28 	bl	1004a568 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10040b18:	2101      	movs	r1, #1
10040b1a:	2001      	movs	r0, #1
10040b1c:	f009 fd54 	bl	1004a5c8 <UTIL_LPM_SetOffMode>
      break;
10040b20:	e011      	b.n	10040b46 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10040b22:	2100      	movs	r1, #0
10040b24:	2001      	movs	r0, #1
10040b26:	f009 fd1f 	bl	1004a568 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10040b2a:	2101      	movs	r1, #1
10040b2c:	2001      	movs	r0, #1
10040b2e:	f009 fd4b 	bl	1004a5c8 <UTIL_LPM_SetOffMode>
      break;
10040b32:	e008      	b.n	10040b46 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_STOP:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10040b34:	2100      	movs	r1, #0
10040b36:	2001      	movs	r0, #1
10040b38:	f009 fd16 	bl	1004a568 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10040b3c:	2100      	movs	r1, #0
10040b3e:	2001      	movs	r0, #1
10040b40:	f009 fd42 	bl	1004a5c8 <UTIL_LPM_SetOffMode>
      break;
10040b44:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN UTIL_SEQ_IDLE_BEGIN */

  /* USER CODE END UTIL_SEQ_IDLE_BEGIN */

    UTIL_LPM_EnterLowPower();
10040b46:	f009 fd6f 	bl	1004a628 <UTIL_LPM_EnterLowPower>
10040b4a:	e000      	b.n	10040b4e <UTIL_SEQ_Idle+0xf2>
      return;
10040b4c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10040b4e:	46bd      	mov	sp, r7
10040b50:	b013      	add	sp, #76	@ 0x4c
10040b52:	bdf0      	pop	{r4, r5, r6, r7, pc}

10040b54 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10040b54:	b580      	push	{r7, lr}
10040b56:	b082      	sub	sp, #8
10040b58:	af00      	add	r7, sp, #0
10040b5a:	6078      	str	r0, [r7, #4]
10040b5c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
10040b5e:	687b      	ldr	r3, [r7, #4]
10040b60:	3304      	adds	r3, #4
10040b62:	681a      	ldr	r2, [r3, #0]
10040b64:	683b      	ldr	r3, [r7, #0]
10040b66:	43d9      	mvns	r1, r3
10040b68:	687b      	ldr	r3, [r7, #4]
10040b6a:	3304      	adds	r3, #4
10040b6c:	400a      	ands	r2, r1
10040b6e:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10040b70:	687b      	ldr	r3, [r7, #4]
10040b72:	6819      	ldr	r1, [r3, #0]
10040b74:	687b      	ldr	r3, [r7, #4]
10040b76:	683a      	ldr	r2, [r7, #0]
10040b78:	430a      	orrs	r2, r1
10040b7a:	601a      	str	r2, [r3, #0]
}
10040b7c:	46c0      	nop			@ (mov r8, r8)
10040b7e:	46bd      	mov	sp, r7
10040b80:	b002      	add	sp, #8
10040b82:	bd80      	pop	{r7, pc}

10040b84 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10040b84:	b580      	push	{r7, lr}
10040b86:	b082      	sub	sp, #8
10040b88:	af00      	add	r7, sp, #0
10040b8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10040b8c:	687b      	ldr	r3, [r7, #4]
10040b8e:	691b      	ldr	r3, [r3, #16]
}
10040b90:	0018      	movs	r0, r3
10040b92:	46bd      	mov	sp, r7
10040b94:	b002      	add	sp, #8
10040b96:	bd80      	pop	{r7, pc}

10040b98 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10040b98:	b580      	push	{r7, lr}
10040b9a:	b084      	sub	sp, #16
10040b9c:	af00      	add	r7, sp, #0
10040b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10040ba0:	4b07      	ldr	r3, [pc, #28]	@ (10040bc0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040ba2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040ba4:	4b06      	ldr	r3, [pc, #24]	@ (10040bc0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040ba6:	687a      	ldr	r2, [r7, #4]
10040ba8:	430a      	orrs	r2, r1
10040baa:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040bac:	4b04      	ldr	r3, [pc, #16]	@ (10040bc0 <LL_AHB1_GRP1_EnableClock+0x28>)
10040bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040bb0:	687a      	ldr	r2, [r7, #4]
10040bb2:	4013      	ands	r3, r2
10040bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040bb6:	68fb      	ldr	r3, [r7, #12]
}
10040bb8:	46c0      	nop			@ (mov r8, r8)
10040bba:	46bd      	mov	sp, r7
10040bbc:	b004      	add	sp, #16
10040bbe:	bd80      	pop	{r7, pc}
10040bc0:	48400000 	.word	0x48400000

10040bc4 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10040bc4:	b580      	push	{r7, lr}
10040bc6:	b084      	sub	sp, #16
10040bc8:	af00      	add	r7, sp, #0
10040bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10040bcc:	4b07      	ldr	r3, [pc, #28]	@ (10040bec <LL_APB2_GRP1_EnableClock+0x28>)
10040bce:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10040bd0:	4b06      	ldr	r3, [pc, #24]	@ (10040bec <LL_APB2_GRP1_EnableClock+0x28>)
10040bd2:	687a      	ldr	r2, [r7, #4]
10040bd4:	430a      	orrs	r2, r1
10040bd6:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10040bd8:	4b04      	ldr	r3, [pc, #16]	@ (10040bec <LL_APB2_GRP1_EnableClock+0x28>)
10040bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040bdc:	687a      	ldr	r2, [r7, #4]
10040bde:	4013      	ands	r3, r2
10040be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040be2:	68fb      	ldr	r3, [r7, #12]
}
10040be4:	46c0      	nop			@ (mov r8, r8)
10040be6:	46bd      	mov	sp, r7
10040be8:	b004      	add	sp, #16
10040bea:	bd80      	pop	{r7, pc}
10040bec:	48400000 	.word	0x48400000

10040bf0 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10040bf0:	b580      	push	{r7, lr}
10040bf2:	b082      	sub	sp, #8
10040bf4:	af00      	add	r7, sp, #0
10040bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10040bf8:	4b06      	ldr	r3, [pc, #24]	@ (10040c14 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10040bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040bfc:	687a      	ldr	r2, [r7, #4]
10040bfe:	4013      	ands	r3, r2
10040c00:	687a      	ldr	r2, [r7, #4]
10040c02:	429a      	cmp	r2, r3
10040c04:	d101      	bne.n	10040c0a <LL_APB2_GRP1_IsEnabledClock+0x1a>
10040c06:	2301      	movs	r3, #1
10040c08:	e000      	b.n	10040c0c <LL_APB2_GRP1_IsEnabledClock+0x1c>
10040c0a:	2300      	movs	r3, #0
}
10040c0c:	0018      	movs	r0, r3
10040c0e:	46bd      	mov	sp, r7
10040c10:	b002      	add	sp, #8
10040c12:	bd80      	pop	{r7, pc}
10040c14:	48400000 	.word	0x48400000

10040c18 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10040c18:	b580      	push	{r7, lr}
10040c1a:	b082      	sub	sp, #8
10040c1c:	af00      	add	r7, sp, #0
10040c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10040c20:	4b04      	ldr	r3, [pc, #16]	@ (10040c34 <LL_APB2_GRP1_ForceReset+0x1c>)
10040c22:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10040c24:	4b03      	ldr	r3, [pc, #12]	@ (10040c34 <LL_APB2_GRP1_ForceReset+0x1c>)
10040c26:	687a      	ldr	r2, [r7, #4]
10040c28:	430a      	orrs	r2, r1
10040c2a:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040c2c:	46c0      	nop			@ (mov r8, r8)
10040c2e:	46bd      	mov	sp, r7
10040c30:	b002      	add	sp, #8
10040c32:	bd80      	pop	{r7, pc}
10040c34:	48400000 	.word	0x48400000

10040c38 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10040c38:	b580      	push	{r7, lr}
10040c3a:	b082      	sub	sp, #8
10040c3c:	af00      	add	r7, sp, #0
10040c3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10040c40:	4b05      	ldr	r3, [pc, #20]	@ (10040c58 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040c42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10040c44:	687b      	ldr	r3, [r7, #4]
10040c46:	43d9      	mvns	r1, r3
10040c48:	4b03      	ldr	r3, [pc, #12]	@ (10040c58 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040c4a:	400a      	ands	r2, r1
10040c4c:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040c4e:	46c0      	nop			@ (mov r8, r8)
10040c50:	46bd      	mov	sp, r7
10040c52:	b002      	add	sp, #8
10040c54:	bd80      	pop	{r7, pc}
10040c56:	46c0      	nop			@ (mov r8, r8)
10040c58:	48400000 	.word	0x48400000

10040c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10040c5c:	b580      	push	{r7, lr}
10040c5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10040c60:	f004 ff46 	bl	10045af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
10040c64:	f000 f812 	bl	10040c8c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
10040c68:	f000 f847 	bl	10040cfa <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10040c6c:	f000 f916 	bl	10040e9c <MX_GPIO_Init>
  MX_RADIO_Init();
10040c70:	f000 f874 	bl	10040d5c <MX_RADIO_Init>
  MX_RADIO_TIMER_Init();
10040c74:	f000 f890 	bl	10040d98 <MX_RADIO_TIMER_Init>
  MX_PKA_Init();
10040c78:	f000 f85c 	bl	10040d34 <MX_PKA_Init>
  MX_USART1_UART_Init();
10040c7c:	f000 f8c0 	bl	10040e00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_BLE */
  MX_APPE_Init(NULL);
10040c80:	2000      	movs	r0, #0
10040c82:	f7ff fe42 	bl	1004090a <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
10040c86:	f7ff feda 	bl	10040a3e <MX_APPE_Process>
10040c8a:	e7fc      	b.n	10040c86 <main+0x2a>

10040c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10040c8c:	b590      	push	{r4, r7, lr}
10040c8e:	b089      	sub	sp, #36	@ 0x24
10040c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10040c92:	2408      	movs	r4, #8
10040c94:	193b      	adds	r3, r7, r4
10040c96:	0018      	movs	r0, r3
10040c98:	2318      	movs	r3, #24
10040c9a:	001a      	movs	r2, r3
10040c9c:	2100      	movs	r1, #0
10040c9e:	f00e f98f 	bl	1004efc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10040ca2:	003b      	movs	r3, r7
10040ca4:	0018      	movs	r0, r3
10040ca6:	2308      	movs	r3, #8
10040ca8:	001a      	movs	r2, r3
10040caa:	2100      	movs	r1, #0
10040cac:	f00e f988 	bl	1004efc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
10040cb0:	193b      	adds	r3, r7, r4
10040cb2:	2203      	movs	r2, #3
10040cb4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10040cb6:	193b      	adds	r3, r7, r4
10040cb8:	2280      	movs	r2, #128	@ 0x80
10040cba:	0252      	lsls	r2, r2, #9
10040cbc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10040cbe:	193b      	adds	r3, r7, r4
10040cc0:	2210      	movs	r2, #16
10040cc2:	60da      	str	r2, [r3, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10040cc4:	193b      	adds	r3, r7, r4
10040cc6:	0018      	movs	r0, r3
10040cc8:	f008 fa9e 	bl	10049208 <HAL_RCC_OscConfig>
10040ccc:	1e03      	subs	r3, r0, #0
10040cce:	d001      	beq.n	10040cd4 <SystemClock_Config+0x48>
  {
    Error_Handler();
10040cd0:	f000 f918 	bl	10040f04 <Error_Handler>
  }

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10040cd4:	003b      	movs	r3, r7
10040cd6:	2200      	movs	r2, #0
10040cd8:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV2;
10040cda:	003b      	movs	r3, r7
10040cdc:	2220      	movs	r2, #32
10040cde:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_0) != HAL_OK)
10040ce0:	003b      	movs	r3, r7
10040ce2:	2100      	movs	r1, #0
10040ce4:	0018      	movs	r0, r3
10040ce6:	f008 fbd9 	bl	1004949c <HAL_RCC_ClockConfig>
10040cea:	1e03      	subs	r3, r0, #0
10040cec:	d001      	beq.n	10040cf2 <SystemClock_Config+0x66>
  {
    Error_Handler();
10040cee:	f000 f909 	bl	10040f04 <Error_Handler>
  }
}
10040cf2:	46c0      	nop			@ (mov r8, r8)
10040cf4:	46bd      	mov	sp, r7
10040cf6:	b009      	add	sp, #36	@ 0x24
10040cf8:	bd90      	pop	{r4, r7, pc}

10040cfa <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10040cfa:	b580      	push	{r7, lr}
10040cfc:	b086      	sub	sp, #24
10040cfe:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10040d00:	003b      	movs	r3, r7
10040d02:	0018      	movs	r0, r3
10040d04:	2318      	movs	r3, #24
10040d06:	001a      	movs	r2, r3
10040d08:	2100      	movs	r1, #0
10040d0a:	f00e f959 	bl	1004efc0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10040d0e:	003b      	movs	r3, r7
10040d10:	2202      	movs	r2, #2
10040d12:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10040d14:	003b      	movs	r3, r7
10040d16:	2280      	movs	r2, #128	@ 0x80
10040d18:	0152      	lsls	r2, r2, #5
10040d1a:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10040d1c:	003b      	movs	r3, r7
10040d1e:	0018      	movs	r0, r3
10040d20:	f008 fd52 	bl	100497c8 <HAL_RCCEx_PeriphCLKConfig>
10040d24:	1e03      	subs	r3, r0, #0
10040d26:	d001      	beq.n	10040d2c <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
10040d28:	f000 f8ec 	bl	10040f04 <Error_Handler>
  }
}
10040d2c:	46c0      	nop			@ (mov r8, r8)
10040d2e:	46bd      	mov	sp, r7
10040d30:	b006      	add	sp, #24
10040d32:	bd80      	pop	{r7, pc}

10040d34 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
10040d34:	b580      	push	{r7, lr}
10040d36:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */
  
  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10040d38:	4b06      	ldr	r3, [pc, #24]	@ (10040d54 <MX_PKA_Init+0x20>)
10040d3a:	4a07      	ldr	r2, [pc, #28]	@ (10040d58 <MX_PKA_Init+0x24>)
10040d3c:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
10040d3e:	4b05      	ldr	r3, [pc, #20]	@ (10040d54 <MX_PKA_Init+0x20>)
10040d40:	0018      	movs	r0, r3
10040d42:	f005 fb58 	bl	100463f6 <HAL_PKA_Init>
10040d46:	1e03      	subs	r3, r0, #0
10040d48:	d001      	beq.n	10040d4e <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10040d4a:	f000 f8db 	bl	10040f04 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */
  
  /* USER CODE END PKA_Init 2 */

}
10040d4e:	46c0      	nop			@ (mov r8, r8)
10040d50:	46bd      	mov	sp, r7
10040d52:	bd80      	pop	{r7, pc}
10040d54:	20000298 	.word	0x20000298
10040d58:	48300000 	.word	0x48300000

10040d5c <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10040d5c:	b580      	push	{r7, lr}
10040d5e:	b082      	sub	sp, #8
10040d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */

  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
10040d62:	2300      	movs	r3, #0
10040d64:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */

  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10040d66:	2001      	movs	r0, #1
10040d68:	f7ff ff42 	bl	10040bf0 <LL_APB2_GRP1_IsEnabledClock>
10040d6c:	1e03      	subs	r3, r0, #0
10040d6e:	d108      	bne.n	10040d82 <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10040d70:	2001      	movs	r0, #1
10040d72:	f7ff ff51 	bl	10040c18 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10040d76:	2001      	movs	r0, #1
10040d78:	f7ff ff5e 	bl	10040c38 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10040d7c:	2001      	movs	r0, #1
10040d7e:	f7ff ff21 	bl	10040bc4 <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
10040d82:	23c0      	movs	r3, #192	@ 0xc0
10040d84:	05db      	lsls	r3, r3, #23
10040d86:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
10040d88:	1d3b      	adds	r3, r7, #4
10040d8a:	0018      	movs	r0, r3
10040d8c:	f005 ffde 	bl	10046d4c <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */

  /* USER CODE END RADIO_Init 2 */

}
10040d90:	46c0      	nop			@ (mov r8, r8)
10040d92:	46bd      	mov	sp, r7
10040d94:	b002      	add	sp, #8
10040d96:	bd80      	pop	{r7, pc}

10040d98 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
10040d98:	b580      	push	{r7, lr}
10040d9a:	b082      	sub	sp, #8
10040d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
  
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
10040d9e:	003b      	movs	r3, r7
10040da0:	0018      	movs	r0, r3
10040da2:	2308      	movs	r3, #8
10040da4:	001a      	movs	r2, r3
10040da6:	2100      	movs	r1, #0
10040da8:	f00e f90a 	bl	1004efc0 <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
  
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10040dac:	2001      	movs	r0, #1
10040dae:	f7ff ff1f 	bl	10040bf0 <LL_APB2_GRP1_IsEnabledClock>
10040db2:	1e03      	subs	r3, r0, #0
10040db4:	d108      	bne.n	10040dc8 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10040db6:	2001      	movs	r0, #1
10040db8:	f7ff ff2e 	bl	10040c18 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10040dbc:	2001      	movs	r0, #1
10040dbe:	f7ff ff3b 	bl	10040c38 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10040dc2:	2001      	movs	r0, #1
10040dc4:	f7ff fefe 	bl	10040bc4 <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
10040dc8:	46c0      	nop			@ (mov r8, r8)
10040dca:	4b0c      	ldr	r3, [pc, #48]	@ (10040dfc <MX_RADIO_TIMER_Init+0x64>)
10040dcc:	0018      	movs	r0, r3
10040dce:	f7ff fed9 	bl	10040b84 <LL_RADIO_TIMER_GetAbsoluteTime>
10040dd2:	0003      	movs	r3, r0
10040dd4:	2b0f      	cmp	r3, #15
10040dd6:	d9f8      	bls.n	10040dca <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10040dd8:	003b      	movs	r3, r7
10040dda:	22a0      	movs	r2, #160	@ 0xa0
10040ddc:	0052      	lsls	r2, r2, #1
10040dde:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
10040de0:	003b      	movs	r3, r7
10040de2:	2200      	movs	r2, #0
10040de4:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
10040de6:	003b      	movs	r3, r7
10040de8:	2200      	movs	r2, #0
10040dea:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10040dec:	003b      	movs	r3, r7
10040dee:	0018      	movs	r0, r3
10040df0:	f006 fcbc 	bl	1004776c <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */

  /* USER CODE END RADIO_TIMER_Init 2 */

}
10040df4:	46c0      	nop			@ (mov r8, r8)
10040df6:	46bd      	mov	sp, r7
10040df8:	b002      	add	sp, #8
10040dfa:	bd80      	pop	{r7, pc}
10040dfc:	60001800 	.word	0x60001800

10040e00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
10040e00:	b580      	push	{r7, lr}
10040e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
10040e04:	4b23      	ldr	r3, [pc, #140]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e06:	4a24      	ldr	r2, [pc, #144]	@ (10040e98 <MX_USART1_UART_Init+0x98>)
10040e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
10040e0a:	4b22      	ldr	r3, [pc, #136]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e0c:	22e1      	movs	r2, #225	@ 0xe1
10040e0e:	0252      	lsls	r2, r2, #9
10040e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
10040e12:	4b20      	ldr	r3, [pc, #128]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e14:	2200      	movs	r2, #0
10040e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
10040e18:	4b1e      	ldr	r3, [pc, #120]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e1a:	2200      	movs	r2, #0
10040e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
10040e1e:	4b1d      	ldr	r3, [pc, #116]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e20:	2200      	movs	r2, #0
10040e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
10040e24:	4b1b      	ldr	r3, [pc, #108]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e26:	220c      	movs	r2, #12
10040e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10040e2a:	4b1a      	ldr	r3, [pc, #104]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e2c:	2200      	movs	r2, #0
10040e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
10040e30:	4b18      	ldr	r3, [pc, #96]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e32:	2200      	movs	r2, #0
10040e34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10040e36:	4b17      	ldr	r3, [pc, #92]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e38:	2200      	movs	r2, #0
10040e3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10040e3c:	4b15      	ldr	r3, [pc, #84]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e3e:	2200      	movs	r2, #0
10040e40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10040e42:	4b14      	ldr	r3, [pc, #80]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e44:	2200      	movs	r2, #0
10040e46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
10040e48:	4b12      	ldr	r3, [pc, #72]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e4a:	0018      	movs	r0, r3
10040e4c:	f008 fd94 	bl	10049978 <HAL_UART_Init>
10040e50:	1e03      	subs	r3, r0, #0
10040e52:	d001      	beq.n	10040e58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
10040e54:	f000 f856 	bl	10040f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10040e58:	4b0e      	ldr	r3, [pc, #56]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e5a:	2100      	movs	r1, #0
10040e5c:	0018      	movs	r0, r3
10040e5e:	f009 fa5b 	bl	1004a318 <HAL_UARTEx_SetTxFifoThreshold>
10040e62:	1e03      	subs	r3, r0, #0
10040e64:	d001      	beq.n	10040e6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
10040e66:	f000 f84d 	bl	10040f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10040e6a:	4b0a      	ldr	r3, [pc, #40]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e6c:	2100      	movs	r1, #0
10040e6e:	0018      	movs	r0, r3
10040e70:	f009 fa92 	bl	1004a398 <HAL_UARTEx_SetRxFifoThreshold>
10040e74:	1e03      	subs	r3, r0, #0
10040e76:	d001      	beq.n	10040e7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
10040e78:	f000 f844 	bl	10040f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
10040e7c:	4b05      	ldr	r3, [pc, #20]	@ (10040e94 <MX_USART1_UART_Init+0x94>)
10040e7e:	0018      	movs	r0, r3
10040e80:	f009 fa10 	bl	1004a2a4 <HAL_UARTEx_DisableFifoMode>
10040e84:	1e03      	subs	r3, r0, #0
10040e86:	d001      	beq.n	10040e8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
10040e88:	f000 f83c 	bl	10040f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
10040e8c:	46c0      	nop			@ (mov r8, r8)
10040e8e:	46bd      	mov	sp, r7
10040e90:	bd80      	pop	{r7, pc}
10040e92:	46c0      	nop			@ (mov r8, r8)
10040e94:	200002a4 	.word	0x200002a4
10040e98:	41004000 	.word	0x41004000

10040e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10040e9c:	b580      	push	{r7, lr}
10040e9e:	b086      	sub	sp, #24
10040ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10040ea2:	1d3b      	adds	r3, r7, #4
10040ea4:	0018      	movs	r0, r3
10040ea6:	2314      	movs	r3, #20
10040ea8:	001a      	movs	r2, r3
10040eaa:	2100      	movs	r1, #0
10040eac:	f00e f888 	bl	1004efc0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
10040eb0:	2008      	movs	r0, #8
10040eb2:	f7ff fe71 	bl	10040b98 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
10040eb6:	2004      	movs	r0, #4
10040eb8:	f7ff fe6e 	bl	10040b98 <LL_AHB1_GRP1_EnableClock>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
10040ebc:	1d3b      	adds	r3, r7, #4
10040ebe:	2204      	movs	r2, #4
10040ec0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10040ec2:	1d3b      	adds	r3, r7, #4
10040ec4:	2202      	movs	r2, #2
10040ec6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
10040ec8:	1d3b      	adds	r3, r7, #4
10040eca:	2201      	movs	r2, #1
10040ecc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10040ece:	1d3b      	adds	r3, r7, #4
10040ed0:	2200      	movs	r2, #0
10040ed2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF7_SWDIO;
10040ed4:	1d3b      	adds	r3, r7, #4
10040ed6:	2207      	movs	r2, #7
10040ed8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10040eda:	1d3a      	adds	r2, r7, #4
10040edc:	2390      	movs	r3, #144	@ 0x90
10040ede:	05db      	lsls	r3, r3, #23
10040ee0:	0011      	movs	r1, r2
10040ee2:	0018      	movs	r0, r3
10040ee4:	f005 f8de 	bl	100460a4 <HAL_GPIO_Init>

  /**/
  LL_PWR_EnableGPIOPullUp(LL_PWR_GPIO_A, LL_PWR_GPIO_BIT_2);
10040ee8:	4b05      	ldr	r3, [pc, #20]	@ (10040f00 <MX_GPIO_Init+0x64>)
10040eea:	2104      	movs	r1, #4
10040eec:	0018      	movs	r0, r3
10040eee:	f7ff fe31 	bl	10040b54 <LL_PWR_EnableGPIOPullUp>

  /*RT DEBUG GPIO_Init */
  RT_DEBUG_GPIO_Init();
10040ef2:	f001 fe1e 	bl	10042b32 <RT_DEBUG_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10040ef6:	46c0      	nop			@ (mov r8, r8)
10040ef8:	46bd      	mov	sp, r7
10040efa:	b006      	add	sp, #24
10040efc:	bd80      	pop	{r7, pc}
10040efe:	46c0      	nop			@ (mov r8, r8)
10040f00:	48500020 	.word	0x48500020

10040f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10040f04:	b580      	push	{r7, lr}
10040f06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10040f08:	b672      	cpsid	i
}
10040f0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10040f0c:	e7fe      	b.n	10040f0c <Error_Handler+0x8>
	...

10040f10 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10040f10:	b580      	push	{r7, lr}
10040f12:	b082      	sub	sp, #8
10040f14:	af00      	add	r7, sp, #0
10040f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10040f18:	4b08      	ldr	r3, [pc, #32]	@ (10040f3c <LL_PWR_SetNoPullA+0x2c>)
10040f1a:	6a1a      	ldr	r2, [r3, #32]
10040f1c:	687b      	ldr	r3, [r7, #4]
10040f1e:	43d9      	mvns	r1, r3
10040f20:	4b06      	ldr	r3, [pc, #24]	@ (10040f3c <LL_PWR_SetNoPullA+0x2c>)
10040f22:	400a      	ands	r2, r1
10040f24:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10040f26:	4b05      	ldr	r3, [pc, #20]	@ (10040f3c <LL_PWR_SetNoPullA+0x2c>)
10040f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10040f2a:	687b      	ldr	r3, [r7, #4]
10040f2c:	43d9      	mvns	r1, r3
10040f2e:	4b03      	ldr	r3, [pc, #12]	@ (10040f3c <LL_PWR_SetNoPullA+0x2c>)
10040f30:	400a      	ands	r2, r1
10040f32:	625a      	str	r2, [r3, #36]	@ 0x24
}
10040f34:	46c0      	nop			@ (mov r8, r8)
10040f36:	46bd      	mov	sp, r7
10040f38:	b002      	add	sp, #8
10040f3a:	bd80      	pop	{r7, pc}
10040f3c:	48500000 	.word	0x48500000

10040f40 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10040f40:	b580      	push	{r7, lr}
10040f42:	b082      	sub	sp, #8
10040f44:	af00      	add	r7, sp, #0
10040f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10040f48:	4b08      	ldr	r3, [pc, #32]	@ (10040f6c <LL_PWR_SetNoPullB+0x2c>)
10040f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10040f4c:	687b      	ldr	r3, [r7, #4]
10040f4e:	43d9      	mvns	r1, r3
10040f50:	4b06      	ldr	r3, [pc, #24]	@ (10040f6c <LL_PWR_SetNoPullB+0x2c>)
10040f52:	400a      	ands	r2, r1
10040f54:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10040f56:	4b05      	ldr	r3, [pc, #20]	@ (10040f6c <LL_PWR_SetNoPullB+0x2c>)
10040f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10040f5a:	687b      	ldr	r3, [r7, #4]
10040f5c:	43d9      	mvns	r1, r3
10040f5e:	4b03      	ldr	r3, [pc, #12]	@ (10040f6c <LL_PWR_SetNoPullB+0x2c>)
10040f60:	400a      	ands	r2, r1
10040f62:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10040f64:	46c0      	nop			@ (mov r8, r8)
10040f66:	46bd      	mov	sp, r7
10040f68:	b002      	add	sp, #8
10040f6a:	bd80      	pop	{r7, pc}
10040f6c:	48500000 	.word	0x48500000

10040f70 <LL_AHB1_GRP1_EnableClock>:
{
10040f70:	b580      	push	{r7, lr}
10040f72:	b084      	sub	sp, #16
10040f74:	af00      	add	r7, sp, #0
10040f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10040f78:	4b07      	ldr	r3, [pc, #28]	@ (10040f98 <LL_AHB1_GRP1_EnableClock+0x28>)
10040f7a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040f7c:	4b06      	ldr	r3, [pc, #24]	@ (10040f98 <LL_AHB1_GRP1_EnableClock+0x28>)
10040f7e:	687a      	ldr	r2, [r7, #4]
10040f80:	430a      	orrs	r2, r1
10040f82:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040f84:	4b04      	ldr	r3, [pc, #16]	@ (10040f98 <LL_AHB1_GRP1_EnableClock+0x28>)
10040f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040f88:	687a      	ldr	r2, [r7, #4]
10040f8a:	4013      	ands	r3, r2
10040f8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040f8e:	68fb      	ldr	r3, [r7, #12]
}
10040f90:	46c0      	nop			@ (mov r8, r8)
10040f92:	46bd      	mov	sp, r7
10040f94:	b004      	add	sp, #16
10040f96:	bd80      	pop	{r7, pc}
10040f98:	48400000 	.word	0x48400000

10040f9c <LL_APB0_GRP1_EnableClock>:
{
10040f9c:	b580      	push	{r7, lr}
10040f9e:	b084      	sub	sp, #16
10040fa0:	af00      	add	r7, sp, #0
10040fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10040fa4:	4b07      	ldr	r3, [pc, #28]	@ (10040fc4 <LL_APB0_GRP1_EnableClock+0x28>)
10040fa6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10040fa8:	4b06      	ldr	r3, [pc, #24]	@ (10040fc4 <LL_APB0_GRP1_EnableClock+0x28>)
10040faa:	687a      	ldr	r2, [r7, #4]
10040fac:	430a      	orrs	r2, r1
10040fae:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10040fb0:	4b04      	ldr	r3, [pc, #16]	@ (10040fc4 <LL_APB0_GRP1_EnableClock+0x28>)
10040fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10040fb4:	687a      	ldr	r2, [r7, #4]
10040fb6:	4013      	ands	r3, r2
10040fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040fba:	68fb      	ldr	r3, [r7, #12]
}
10040fbc:	46c0      	nop			@ (mov r8, r8)
10040fbe:	46bd      	mov	sp, r7
10040fc0:	b004      	add	sp, #16
10040fc2:	bd80      	pop	{r7, pc}
10040fc4:	48400000 	.word	0x48400000

10040fc8 <LL_APB1_GRP1_EnableClock>:
{
10040fc8:	b580      	push	{r7, lr}
10040fca:	b084      	sub	sp, #16
10040fcc:	af00      	add	r7, sp, #0
10040fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10040fd0:	4b07      	ldr	r3, [pc, #28]	@ (10040ff0 <LL_APB1_GRP1_EnableClock+0x28>)
10040fd2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10040fd4:	4b06      	ldr	r3, [pc, #24]	@ (10040ff0 <LL_APB1_GRP1_EnableClock+0x28>)
10040fd6:	687a      	ldr	r2, [r7, #4]
10040fd8:	430a      	orrs	r2, r1
10040fda:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10040fdc:	4b04      	ldr	r3, [pc, #16]	@ (10040ff0 <LL_APB1_GRP1_EnableClock+0x28>)
10040fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10040fe0:	687a      	ldr	r2, [r7, #4]
10040fe2:	4013      	ands	r3, r2
10040fe4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040fe6:	68fb      	ldr	r3, [r7, #12]
}
10040fe8:	46c0      	nop			@ (mov r8, r8)
10040fea:	46bd      	mov	sp, r7
10040fec:	b004      	add	sp, #16
10040fee:	bd80      	pop	{r7, pc}
10040ff0:	48400000 	.word	0x48400000

10040ff4 <LL_APB2_GRP1_EnableClock>:
{
10040ff4:	b580      	push	{r7, lr}
10040ff6:	b084      	sub	sp, #16
10040ff8:	af00      	add	r7, sp, #0
10040ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10040ffc:	4b07      	ldr	r3, [pc, #28]	@ (1004101c <LL_APB2_GRP1_EnableClock+0x28>)
10040ffe:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10041000:	4b06      	ldr	r3, [pc, #24]	@ (1004101c <LL_APB2_GRP1_EnableClock+0x28>)
10041002:	687a      	ldr	r2, [r7, #4]
10041004:	430a      	orrs	r2, r1
10041006:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10041008:	4b04      	ldr	r3, [pc, #16]	@ (1004101c <LL_APB2_GRP1_EnableClock+0x28>)
1004100a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004100c:	687a      	ldr	r2, [r7, #4]
1004100e:	4013      	ands	r3, r2
10041010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10041012:	68fb      	ldr	r3, [r7, #12]
}
10041014:	46c0      	nop			@ (mov r8, r8)
10041016:	46bd      	mov	sp, r7
10041018:	b004      	add	sp, #16
1004101a:	bd80      	pop	{r7, pc}
1004101c:	48400000 	.word	0x48400000

10041020 <LL_APB2_GRP1_IsEnabledClock>:
{
10041020:	b580      	push	{r7, lr}
10041022:	b082      	sub	sp, #8
10041024:	af00      	add	r7, sp, #0
10041026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10041028:	4b06      	ldr	r3, [pc, #24]	@ (10041044 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004102a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004102c:	687a      	ldr	r2, [r7, #4]
1004102e:	4013      	ands	r3, r2
10041030:	687a      	ldr	r2, [r7, #4]
10041032:	429a      	cmp	r2, r3
10041034:	d101      	bne.n	1004103a <LL_APB2_GRP1_IsEnabledClock+0x1a>
10041036:	2301      	movs	r3, #1
10041038:	e000      	b.n	1004103c <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004103a:	2300      	movs	r3, #0
}
1004103c:	0018      	movs	r0, r3
1004103e:	46bd      	mov	sp, r7
10041040:	b002      	add	sp, #8
10041042:	bd80      	pop	{r7, pc}
10041044:	48400000 	.word	0x48400000

10041048 <LL_APB2_GRP1_ForceReset>:
{
10041048:	b580      	push	{r7, lr}
1004104a:	b082      	sub	sp, #8
1004104c:	af00      	add	r7, sp, #0
1004104e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10041050:	4b04      	ldr	r3, [pc, #16]	@ (10041064 <LL_APB2_GRP1_ForceReset+0x1c>)
10041052:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10041054:	4b03      	ldr	r3, [pc, #12]	@ (10041064 <LL_APB2_GRP1_ForceReset+0x1c>)
10041056:	687a      	ldr	r2, [r7, #4]
10041058:	430a      	orrs	r2, r1
1004105a:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004105c:	46c0      	nop			@ (mov r8, r8)
1004105e:	46bd      	mov	sp, r7
10041060:	b002      	add	sp, #8
10041062:	bd80      	pop	{r7, pc}
10041064:	48400000 	.word	0x48400000

10041068 <LL_APB2_GRP1_ReleaseReset>:
{
10041068:	b580      	push	{r7, lr}
1004106a:	b082      	sub	sp, #8
1004106c:	af00      	add	r7, sp, #0
1004106e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10041070:	4b05      	ldr	r3, [pc, #20]	@ (10041088 <LL_APB2_GRP1_ReleaseReset+0x20>)
10041072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10041074:	687b      	ldr	r3, [r7, #4]
10041076:	43d9      	mvns	r1, r3
10041078:	4b03      	ldr	r3, [pc, #12]	@ (10041088 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004107a:	400a      	ands	r2, r1
1004107c:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004107e:	46c0      	nop			@ (mov r8, r8)
10041080:	46bd      	mov	sp, r7
10041082:	b002      	add	sp, #8
10041084:	bd80      	pop	{r7, pc}
10041086:	46c0      	nop			@ (mov r8, r8)
10041088:	48400000 	.word	0x48400000

1004108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
1004108c:	b580      	push	{r7, lr}
1004108e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* IOs configuration to have the lowest power consumption in DEEPSTOP */
  lowPowerIOSetup();
10041090:	f000 f8c6 	bl	10041220 <lowPowerIOSetup>

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10041094:	2380      	movs	r3, #128	@ 0x80
10041096:	005b      	lsls	r3, r3, #1
10041098:	0018      	movs	r0, r3
1004109a:	f7ff ff7f 	bl	10040f9c <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1004109e:	46c0      	nop			@ (mov r8, r8)
100410a0:	46bd      	mov	sp, r7
100410a2:	bd80      	pop	{r7, pc}

100410a4 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
100410a4:	b580      	push	{r7, lr}
100410a6:	b082      	sub	sp, #8
100410a8:	af00      	add	r7, sp, #0
100410aa:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
100410ac:	687b      	ldr	r3, [r7, #4]
100410ae:	681b      	ldr	r3, [r3, #0]
100410b0:	4a09      	ldr	r2, [pc, #36]	@ (100410d8 <HAL_PKA_MspInit+0x34>)
100410b2:	4293      	cmp	r3, r2
100410b4:	d10c      	bne.n	100410d0 <HAL_PKA_MspInit+0x2c>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
100410b6:	2380      	movs	r3, #128	@ 0x80
100410b8:	025b      	lsls	r3, r3, #9
100410ba:	0018      	movs	r0, r3
100410bc:	f7ff ff58 	bl	10040f70 <LL_AHB1_GRP1_EnableClock>
    /* PKA interrupt Init */
    HAL_NVIC_SetPriority(PKA_IRQn, 1, 0);
100410c0:	2200      	movs	r2, #0
100410c2:	2101      	movs	r1, #1
100410c4:	200d      	movs	r0, #13
100410c6:	f004 fe61 	bl	10045d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PKA_IRQn);
100410ca:	200d      	movs	r0, #13
100410cc:	f004 fe73 	bl	10045db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END PKA_MspInit 1 */

  }

}
100410d0:	46c0      	nop			@ (mov r8, r8)
100410d2:	46bd      	mov	sp, r7
100410d4:	b002      	add	sp, #8
100410d6:	bd80      	pop	{r7, pc}
100410d8:	48300000 	.word	0x48300000

100410dc <HAL_RADIO_MspInit>:
* This function configures the hardware resources used in this example
* @param hradio: RADIO handle pointer
* @retval None
*/
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
100410dc:	b590      	push	{r4, r7, lr}
100410de:	b089      	sub	sp, #36	@ 0x24
100410e0:	af00      	add	r7, sp, #0
100410e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100410e4:	2408      	movs	r4, #8
100410e6:	193b      	adds	r3, r7, r4
100410e8:	0018      	movs	r0, r3
100410ea:	2318      	movs	r3, #24
100410ec:	001a      	movs	r2, r3
100410ee:	2100      	movs	r1, #0
100410f0:	f00d ff66 	bl	1004efc0 <memset>
  if(hradio->Instance==RADIO)
100410f4:	687b      	ldr	r3, [r7, #4]
100410f6:	681a      	ldr	r2, [r3, #0]
100410f8:	23c0      	movs	r3, #192	@ 0xc0
100410fa:	05db      	lsls	r3, r3, #23
100410fc:	429a      	cmp	r2, r3
100410fe:	d12d      	bne.n	1004115c <HAL_RADIO_MspInit+0x80>

  /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10041100:	193b      	adds	r3, r7, r4
10041102:	2201      	movs	r2, #1
10041104:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
10041106:	193b      	adds	r3, r7, r4
10041108:	2204      	movs	r2, #4
1004110a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
1004110c:	193b      	adds	r3, r7, r4
1004110e:	0018      	movs	r0, r3
10041110:	f008 fb5a 	bl	100497c8 <HAL_RCCEx_PeriphCLKConfig>
10041114:	1e03      	subs	r3, r0, #0
10041116:	d001      	beq.n	1004111c <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10041118:	f7ff fef4 	bl	10040f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
1004111c:	2001      	movs	r0, #1
1004111e:	f7ff ff7f 	bl	10041020 <LL_APB2_GRP1_IsEnabledClock>
10041122:	1e03      	subs	r3, r0, #0
10041124:	d108      	bne.n	10041138 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10041126:	2001      	movs	r0, #1
10041128:	f7ff ff8e 	bl	10041048 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
1004112c:	2001      	movs	r0, #1
1004112e:	f7ff ff9b 	bl	10041068 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
10041132:	2001      	movs	r0, #1
10041134:	f7ff ff5e 	bl	10040ff4 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10041138:	f001 fcfb 	bl	10042b32 <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
1004113c:	2200      	movs	r2, #0
1004113e:	2100      	movs	r1, #0
10041140:	2012      	movs	r0, #18
10041142:	f004 fe23 	bl	10045d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10041146:	2012      	movs	r0, #18
10041148:	f004 fe35 	bl	10045db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
1004114c:	2200      	movs	r2, #0
1004114e:	2100      	movs	r1, #0
10041150:	2019      	movs	r0, #25
10041152:	f004 fe1b 	bl	10045d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10041156:	2019      	movs	r0, #25
10041158:	f004 fe2d 	bl	10045db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RADIO_MspInit 1 */

  }

}
1004115c:	46c0      	nop			@ (mov r8, r8)
1004115e:	46bd      	mov	sp, r7
10041160:	b009      	add	sp, #36	@ 0x24
10041162:	bd90      	pop	{r4, r7, pc}

10041164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10041164:	b590      	push	{r4, r7, lr}
10041166:	b089      	sub	sp, #36	@ 0x24
10041168:	af00      	add	r7, sp, #0
1004116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1004116c:	240c      	movs	r4, #12
1004116e:	193b      	adds	r3, r7, r4
10041170:	0018      	movs	r0, r3
10041172:	2314      	movs	r3, #20
10041174:	001a      	movs	r2, r3
10041176:	2100      	movs	r1, #0
10041178:	f00d ff22 	bl	1004efc0 <memset>
  if(huart->Instance==USART1)
1004117c:	687b      	ldr	r3, [r7, #4]
1004117e:	681b      	ldr	r3, [r3, #0]
10041180:	4a25      	ldr	r2, [pc, #148]	@ (10041218 <HAL_UART_MspInit+0xb4>)
10041182:	4293      	cmp	r3, r2
10041184:	d144      	bne.n	10041210 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
10041186:	2380      	movs	r3, #128	@ 0x80
10041188:	00db      	lsls	r3, r3, #3
1004118a:	0018      	movs	r0, r3
1004118c:	f7ff ff1c 	bl	10040fc8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10041190:	2008      	movs	r0, #8
10041192:	f7ff feed 	bl	10040f70 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
10041196:	2004      	movs	r0, #4
10041198:	f7ff feea 	bl	10040f70 <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB0     ------> USART1_RX
    PA1     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
1004119c:	193b      	adds	r3, r7, r4
1004119e:	2201      	movs	r2, #1
100411a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100411a2:	193b      	adds	r3, r7, r4
100411a4:	2202      	movs	r2, #2
100411a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100411a8:	193b      	adds	r3, r7, r4
100411aa:	2200      	movs	r2, #0
100411ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100411ae:	193b      	adds	r3, r7, r4
100411b0:	2200      	movs	r2, #0
100411b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
100411b4:	193b      	adds	r3, r7, r4
100411b6:	2200      	movs	r2, #0
100411b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100411ba:	193b      	adds	r3, r7, r4
100411bc:	4a17      	ldr	r2, [pc, #92]	@ (1004121c <HAL_UART_MspInit+0xb8>)
100411be:	0019      	movs	r1, r3
100411c0:	0010      	movs	r0, r2
100411c2:	f004 ff6f 	bl	100460a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
100411c6:	0021      	movs	r1, r4
100411c8:	187b      	adds	r3, r7, r1
100411ca:	2202      	movs	r2, #2
100411cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100411ce:	187b      	adds	r3, r7, r1
100411d0:	2202      	movs	r2, #2
100411d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100411d4:	187b      	adds	r3, r7, r1
100411d6:	2200      	movs	r2, #0
100411d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100411da:	187b      	adds	r3, r7, r1
100411dc:	2200      	movs	r2, #0
100411de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART1;
100411e0:	187b      	adds	r3, r7, r1
100411e2:	2202      	movs	r2, #2
100411e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100411e6:	187a      	adds	r2, r7, r1
100411e8:	2390      	movs	r3, #144	@ 0x90
100411ea:	05db      	lsls	r3, r3, #23
100411ec:	0011      	movs	r1, r2
100411ee:	0018      	movs	r0, r3
100411f0:	f004 ff58 	bl	100460a4 <HAL_GPIO_Init>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_0);
100411f4:	2001      	movs	r0, #1
100411f6:	f7ff fea3 	bl	10040f40 <LL_PWR_SetNoPullB>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_1);
100411fa:	2002      	movs	r0, #2
100411fc:	f7ff fe88 	bl	10040f10 <LL_PWR_SetNoPullA>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
10041200:	2200      	movs	r2, #0
10041202:	2101      	movs	r1, #1
10041204:	2008      	movs	r0, #8
10041206:	f004 fdc1 	bl	10045d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
1004120a:	2008      	movs	r0, #8
1004120c:	f004 fdd3 	bl	10045db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
10041210:	46c0      	nop			@ (mov r8, r8)
10041212:	46bd      	mov	sp, r7
10041214:	b009      	add	sp, #36	@ 0x24
10041216:	bd90      	pop	{r4, r7, pc}
10041218:	41004000 	.word	0x41004000
1004121c:	48100000 	.word	0x48100000

10041220 <lowPowerIOSetup>:
  * @brief  Configures the IOs pull resistors to have the optimized power consumption.
  * @param  None
  * @retval None
  */
static void lowPowerIOSetup(void)
{
10041220:	b580      	push	{r7, lr}
10041222:	af00      	add	r7, sp, #0
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_A, 
10041224:	210f      	movs	r1, #15
10041226:	2000      	movs	r0, #0
10041228:	f005 fb76 	bl	10046918 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_0|
                       PWR_GPIO_BIT_1|
                       PWR_GPIO_BIT_2|                         
                       PWR_GPIO_BIT_3);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_A, 
1004122c:	23f0      	movs	r3, #240	@ 0xf0
1004122e:	011b      	lsls	r3, r3, #4
10041230:	0019      	movs	r1, r3
10041232:	2000      	movs	r0, #0
10041234:	f005 fbaa 	bl	1004698c <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_8|
                             PWR_GPIO_BIT_9|
                             PWR_GPIO_BIT_10|
                             PWR_GPIO_BIT_11);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, 
10041238:	4b06      	ldr	r3, [pc, #24]	@ (10041254 <lowPowerIOSetup+0x34>)
1004123a:	0019      	movs	r1, r3
1004123c:	2001      	movs	r0, #1
1004123e:	f005 fba5 	bl	1004698c <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_6|
                             PWR_GPIO_BIT_7|
                             PWR_GPIO_BIT_12|
                             PWR_GPIO_BIT_13);
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_B, 
10041242:	4b05      	ldr	r3, [pc, #20]	@ (10041258 <lowPowerIOSetup+0x38>)
10041244:	0019      	movs	r1, r3
10041246:	2001      	movs	r0, #1
10041248:	f005 fb66 	bl	10046918 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_2|
                       PWR_GPIO_BIT_4|
                       PWR_GPIO_BIT_5|  
                       PWR_GPIO_BIT_14|
                       PWR_GPIO_BIT_15);
}
1004124c:	46c0      	nop			@ (mov r8, r8)
1004124e:	46bd      	mov	sp, r7
10041250:	bd80      	pop	{r7, pc}
10041252:	46c0      	nop			@ (mov r8, r8)
10041254:	000030c9 	.word	0x000030c9
10041258:	0000c036 	.word	0x0000c036

1004125c <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
1004125c:	b580      	push	{r7, lr}
1004125e:	b082      	sub	sp, #8
10041260:	af00      	add	r7, sp, #0
10041262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
10041264:	687b      	ldr	r3, [r7, #4]
10041266:	69db      	ldr	r3, [r3, #28]
10041268:	2220      	movs	r2, #32
1004126a:	4013      	ands	r3, r2
1004126c:	2b20      	cmp	r3, #32
1004126e:	d101      	bne.n	10041274 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
10041270:	2301      	movs	r3, #1
10041272:	e000      	b.n	10041276 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
10041274:	2300      	movs	r3, #0
}
10041276:	0018      	movs	r0, r3
10041278:	46bd      	mov	sp, r7
1004127a:	b002      	add	sp, #8
1004127c:	bd80      	pop	{r7, pc}

1004127e <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
1004127e:	b580      	push	{r7, lr}
10041280:	b082      	sub	sp, #8
10041282:	af00      	add	r7, sp, #0
10041284:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
10041286:	687b      	ldr	r3, [r7, #4]
10041288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004128a:	b2db      	uxtb	r3, r3
}
1004128c:	0018      	movs	r0, r3
1004128e:	46bd      	mov	sp, r7
10041290:	b002      	add	sp, #8
10041292:	bd80      	pop	{r7, pc}

10041294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10041294:	b580      	push	{r7, lr}
10041296:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10041298:	46c0      	nop			@ (mov r8, r8)
1004129a:	46bd      	mov	sp, r7
1004129c:	bd80      	pop	{r7, pc}

1004129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1004129e:	b580      	push	{r7, lr}
100412a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100412a2:	e7fe      	b.n	100412a2 <HardFault_Handler+0x4>

100412a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100412a4:	b580      	push	{r7, lr}
100412a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100412a8:	46c0      	nop			@ (mov r8, r8)
100412aa:	46bd      	mov	sp, r7
100412ac:	bd80      	pop	{r7, pc}

100412ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100412ae:	b580      	push	{r7, lr}
100412b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100412b2:	46c0      	nop			@ (mov r8, r8)
100412b4:	46bd      	mov	sp, r7
100412b6:	bd80      	pop	{r7, pc}

100412b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100412b8:	b580      	push	{r7, lr}
100412ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100412bc:	f004 fc78 	bl	10045bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100412c0:	46c0      	nop			@ (mov r8, r8)
100412c2:	46bd      	mov	sp, r7
100412c4:	bd80      	pop	{r7, pc}
	...

100412c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
100412c8:	b580      	push	{r7, lr}
100412ca:	b082      	sub	sp, #8
100412cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

    uint8_t read_data; 
  
  /* If the RX FIFO is Not Empty */
  if(LL_USART_IsActiveFlag_RXNE(USART1) == 1) {
100412ce:	4b0c      	ldr	r3, [pc, #48]	@ (10041300 <USART1_IRQHandler+0x38>)
100412d0:	0018      	movs	r0, r3
100412d2:	f7ff ffc3 	bl	1004125c <LL_USART_IsActiveFlag_RXNE_RXFNE>
100412d6:	0003      	movs	r3, r0
100412d8:	2b01      	cmp	r3, #1
100412da:	d10c      	bne.n	100412f6 <USART1_IRQHandler+0x2e>
    /* Read a byte from the RX FIFO */
    read_data = LL_USART_ReceiveData8(USART1);
100412dc:	4b08      	ldr	r3, [pc, #32]	@ (10041300 <USART1_IRQHandler+0x38>)
100412de:	0018      	movs	r0, r3
100412e0:	f7ff ffcd 	bl	1004127e <LL_USART_ReceiveData8>
100412e4:	0003      	movs	r3, r0
100412e6:	001a      	movs	r2, r3
100412e8:	1dfb      	adds	r3, r7, #7
100412ea:	701a      	strb	r2, [r3, #0]
    
    /* Send the data received to the user RX callback */
    UartRxCpltCallback(&read_data, 1);
100412ec:	1dfb      	adds	r3, r7, #7
100412ee:	2101      	movs	r1, #1
100412f0:	0018      	movs	r0, r3
100412f2:	f7ff fb67 	bl	100409c4 <UartRxCpltCallback>
  
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
100412f6:	46c0      	nop			@ (mov r8, r8)
100412f8:	46bd      	mov	sp, r7
100412fa:	b002      	add	sp, #8
100412fc:	bd80      	pop	{r7, pc}
100412fe:	46c0      	nop			@ (mov r8, r8)
10041300:	41004000 	.word	0x41004000

10041304 <PKA_IRQHandler>:

/**
  * @brief This function handles PKA global interrupt.
  */
void PKA_IRQHandler(void)
{
10041304:	b580      	push	{r7, lr}
10041306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PKA_IRQn 0 */

  /* USER CODE END PKA_IRQn 0 */
  HAL_PKA_IRQHandler(&hpka);
10041308:	4b03      	ldr	r3, [pc, #12]	@ (10041318 <PKA_IRQHandler+0x14>)
1004130a:	0018      	movs	r0, r3
1004130c:	f005 f8d0 	bl	100464b0 <HAL_PKA_IRQHandler>
  /* USER CODE BEGIN PKA_IRQn 1 */

  /* USER CODE END PKA_IRQn 1 */
}
10041310:	46c0      	nop			@ (mov r8, r8)
10041312:	46bd      	mov	sp, r7
10041314:	bd80      	pop	{r7, pc}
10041316:	46c0      	nop			@ (mov r8, r8)
10041318:	20000298 	.word	0x20000298

1004131c <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004131c:	b580      	push	{r7, lr}
1004131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10041320:	f007 fd7c 	bl	10048e1c <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10041324:	46c0      	nop			@ (mov r8, r8)
10041326:	46bd      	mov	sp, r7
10041328:	bd80      	pop	{r7, pc}

1004132a <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
1004132a:	b580      	push	{r7, lr}
1004132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */
  
  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
1004132e:	f007 fd7e 	bl	10048e2e <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
10041332:	46c0      	nop			@ (mov r8, r8)
10041334:	46bd      	mov	sp, r7
10041336:	bd80      	pop	{r7, pc}

10041338 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10041338:	b580      	push	{r7, lr}
1004133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */
  
  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
1004133c:	f006 f84e 	bl	100473dc <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */
  
  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
10041340:	46c0      	nop			@ (mov r8, r8)
10041342:	46bd      	mov	sp, r7
10041344:	bd80      	pop	{r7, pc}

10041346 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10041346:	b580      	push	{r7, lr}
10041348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
1004134a:	f006 f868 	bl	1004741e <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
1004134e:	46c0      	nop			@ (mov r8, r8)
10041350:	46bd      	mov	sp, r7
10041352:	bd80      	pop	{r7, pc}

10041354 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10041354:	b580      	push	{r7, lr}
10041356:	b086      	sub	sp, #24
10041358:	af00      	add	r7, sp, #0
1004135a:	60f8      	str	r0, [r7, #12]
1004135c:	60b9      	str	r1, [r7, #8]
1004135e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10041360:	2300      	movs	r3, #0
10041362:	617b      	str	r3, [r7, #20]
10041364:	e00a      	b.n	1004137c <_read+0x28>
  {
    *ptr++ = __io_getchar();
10041366:	e000      	b.n	1004136a <_read+0x16>
10041368:	bf00      	nop
1004136a:	0001      	movs	r1, r0
1004136c:	68bb      	ldr	r3, [r7, #8]
1004136e:	1c5a      	adds	r2, r3, #1
10041370:	60ba      	str	r2, [r7, #8]
10041372:	b2ca      	uxtb	r2, r1
10041374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10041376:	697b      	ldr	r3, [r7, #20]
10041378:	3301      	adds	r3, #1
1004137a:	617b      	str	r3, [r7, #20]
1004137c:	697a      	ldr	r2, [r7, #20]
1004137e:	687b      	ldr	r3, [r7, #4]
10041380:	429a      	cmp	r2, r3
10041382:	dbf0      	blt.n	10041366 <_read+0x12>
  }

  return len;
10041384:	687b      	ldr	r3, [r7, #4]
}
10041386:	0018      	movs	r0, r3
10041388:	46bd      	mov	sp, r7
1004138a:	b006      	add	sp, #24
1004138c:	bd80      	pop	{r7, pc}

1004138e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
1004138e:	b580      	push	{r7, lr}
10041390:	b086      	sub	sp, #24
10041392:	af00      	add	r7, sp, #0
10041394:	60f8      	str	r0, [r7, #12]
10041396:	60b9      	str	r1, [r7, #8]
10041398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004139a:	2300      	movs	r3, #0
1004139c:	617b      	str	r3, [r7, #20]
1004139e:	e009      	b.n	100413b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
100413a0:	68bb      	ldr	r3, [r7, #8]
100413a2:	1c5a      	adds	r2, r3, #1
100413a4:	60ba      	str	r2, [r7, #8]
100413a6:	781b      	ldrb	r3, [r3, #0]
100413a8:	0018      	movs	r0, r3
100413aa:	f004 f979 	bl	100456a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100413ae:	697b      	ldr	r3, [r7, #20]
100413b0:	3301      	adds	r3, #1
100413b2:	617b      	str	r3, [r7, #20]
100413b4:	697a      	ldr	r2, [r7, #20]
100413b6:	687b      	ldr	r3, [r7, #4]
100413b8:	429a      	cmp	r2, r3
100413ba:	dbf1      	blt.n	100413a0 <_write+0x12>
  }
  return len;
100413bc:	687b      	ldr	r3, [r7, #4]
}
100413be:	0018      	movs	r0, r3
100413c0:	46bd      	mov	sp, r7
100413c2:	b006      	add	sp, #24
100413c4:	bd80      	pop	{r7, pc}

100413c6 <_close>:

int _close(int file)
{
100413c6:	b580      	push	{r7, lr}
100413c8:	b082      	sub	sp, #8
100413ca:	af00      	add	r7, sp, #0
100413cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
100413ce:	2301      	movs	r3, #1
100413d0:	425b      	negs	r3, r3
}
100413d2:	0018      	movs	r0, r3
100413d4:	46bd      	mov	sp, r7
100413d6:	b002      	add	sp, #8
100413d8:	bd80      	pop	{r7, pc}

100413da <_fstat>:


int _fstat(int file, struct stat *st)
{
100413da:	b580      	push	{r7, lr}
100413dc:	b082      	sub	sp, #8
100413de:	af00      	add	r7, sp, #0
100413e0:	6078      	str	r0, [r7, #4]
100413e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100413e4:	683b      	ldr	r3, [r7, #0]
100413e6:	2280      	movs	r2, #128	@ 0x80
100413e8:	0192      	lsls	r2, r2, #6
100413ea:	605a      	str	r2, [r3, #4]
  return 0;
100413ec:	2300      	movs	r3, #0
}
100413ee:	0018      	movs	r0, r3
100413f0:	46bd      	mov	sp, r7
100413f2:	b002      	add	sp, #8
100413f4:	bd80      	pop	{r7, pc}

100413f6 <_isatty>:

int _isatty(int file)
{
100413f6:	b580      	push	{r7, lr}
100413f8:	b082      	sub	sp, #8
100413fa:	af00      	add	r7, sp, #0
100413fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
100413fe:	2301      	movs	r3, #1
}
10041400:	0018      	movs	r0, r3
10041402:	46bd      	mov	sp, r7
10041404:	b002      	add	sp, #8
10041406:	bd80      	pop	{r7, pc}

10041408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10041408:	b580      	push	{r7, lr}
1004140a:	b084      	sub	sp, #16
1004140c:	af00      	add	r7, sp, #0
1004140e:	60f8      	str	r0, [r7, #12]
10041410:	60b9      	str	r1, [r7, #8]
10041412:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10041414:	2300      	movs	r3, #0
}
10041416:	0018      	movs	r0, r3
10041418:	46bd      	mov	sp, r7
1004141a:	b004      	add	sp, #16
1004141c:	bd80      	pop	{r7, pc}
	...

10041420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10041420:	b580      	push	{r7, lr}
10041422:	b086      	sub	sp, #24
10041424:	af00      	add	r7, sp, #0
10041426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10041428:	4a14      	ldr	r2, [pc, #80]	@ (1004147c <_sbrk+0x5c>)
1004142a:	4b15      	ldr	r3, [pc, #84]	@ (10041480 <_sbrk+0x60>)
1004142c:	1ad3      	subs	r3, r2, r3
1004142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10041430:	697b      	ldr	r3, [r7, #20]
10041432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10041434:	4b13      	ldr	r3, [pc, #76]	@ (10041484 <_sbrk+0x64>)
10041436:	681b      	ldr	r3, [r3, #0]
10041438:	2b00      	cmp	r3, #0
1004143a:	d102      	bne.n	10041442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
1004143c:	4b11      	ldr	r3, [pc, #68]	@ (10041484 <_sbrk+0x64>)
1004143e:	4a12      	ldr	r2, [pc, #72]	@ (10041488 <_sbrk+0x68>)
10041440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10041442:	4b10      	ldr	r3, [pc, #64]	@ (10041484 <_sbrk+0x64>)
10041444:	681a      	ldr	r2, [r3, #0]
10041446:	687b      	ldr	r3, [r7, #4]
10041448:	18d3      	adds	r3, r2, r3
1004144a:	693a      	ldr	r2, [r7, #16]
1004144c:	429a      	cmp	r2, r3
1004144e:	d207      	bcs.n	10041460 <_sbrk+0x40>
  {
    errno = ENOMEM;
10041450:	f00d fe0c 	bl	1004f06c <__errno>
10041454:	0003      	movs	r3, r0
10041456:	220c      	movs	r2, #12
10041458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
1004145a:	2301      	movs	r3, #1
1004145c:	425b      	negs	r3, r3
1004145e:	e009      	b.n	10041474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10041460:	4b08      	ldr	r3, [pc, #32]	@ (10041484 <_sbrk+0x64>)
10041462:	681b      	ldr	r3, [r3, #0]
10041464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10041466:	4b07      	ldr	r3, [pc, #28]	@ (10041484 <_sbrk+0x64>)
10041468:	681a      	ldr	r2, [r3, #0]
1004146a:	687b      	ldr	r3, [r7, #4]
1004146c:	18d2      	adds	r2, r2, r3
1004146e:	4b05      	ldr	r3, [pc, #20]	@ (10041484 <_sbrk+0x64>)
10041470:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
10041472:	68fb      	ldr	r3, [r7, #12]
}
10041474:	0018      	movs	r0, r3
10041476:	46bd      	mov	sp, r7
10041478:	b006      	add	sp, #24
1004147a:	bd80      	pop	{r7, pc}
1004147c:	20010000 	.word	0x20010000
10041480:	00000c00 	.word	0x00000c00
10041484:	20000338 	.word	0x20000338
10041488:	20002520 	.word	0x20002520

1004148c <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
1004148c:	b580      	push	{r7, lr}
1004148e:	af00      	add	r7, sp, #0
  BLENVM_Init();
10041490:	f000 fa52 	bl	10041938 <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
10041494:	f003 fb78 	bl	10044b88 <PKAMGR_Init>
10041498:	0003      	movs	r3, r0
1004149a:	3301      	adds	r3, #1
1004149c:	d101      	bne.n	100414a2 <ModulesInit+0x16>
  {
    Error_Handler();
1004149e:	f7ff fd31 	bl	10040f04 <Error_Handler>
  }
}
100414a2:	46c0      	nop			@ (mov r8, r8)
100414a4:	46bd      	mov	sp, r7
100414a6:	bd80      	pop	{r7, pc}

100414a8 <BLE_Init>:

void BLE_Init(void)
{
100414a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100414aa:	b097      	sub	sp, #92	@ 0x5c
100414ac:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
100414ae:	2347      	movs	r3, #71	@ 0x47
100414b0:	18fb      	adds	r3, r7, r3
100414b2:	2200      	movs	r2, #0
100414b4:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint8_t bd_address[6] = {0};
100414b6:	233c      	movs	r3, #60	@ 0x3c
100414b8:	18fb      	adds	r3, r7, r3
100414ba:	2200      	movs	r2, #0
100414bc:	601a      	str	r2, [r3, #0]
100414be:	2200      	movs	r2, #0
100414c0:	809a      	strh	r2, [r3, #4]
  uint8_t bd_address_len= 6;
100414c2:	233b      	movs	r3, #59	@ 0x3b
100414c4:	18fb      	adds	r3, r7, r3
100414c6:	2206      	movs	r2, #6
100414c8:	701a      	strb	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
100414ca:	1d3a      	adds	r2, r7, #4
100414cc:	4b51      	ldr	r3, [pc, #324]	@ (10041614 <BLE_Init+0x16c>)
100414ce:	0010      	movs	r0, r2
100414d0:	0019      	movs	r1, r3
100414d2:	2334      	movs	r3, #52	@ 0x34
100414d4:	001a      	movs	r2, r3
100414d6:	f00d fdd2 	bl	1004f07e <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
100414da:	2546      	movs	r5, #70	@ 0x46
100414dc:	197c      	adds	r4, r7, r5
100414de:	1d3b      	adds	r3, r7, #4
100414e0:	0018      	movs	r0, r3
100414e2:	f009 fcc7 	bl	1004ae74 <BLE_STACK_Init>
100414e6:	0003      	movs	r3, r0
100414e8:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
100414ea:	197b      	adds	r3, r7, r5
100414ec:	781b      	ldrb	r3, [r3, #0]
100414ee:	2b00      	cmp	r3, #0
100414f0:	d008      	beq.n	10041504 <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
100414f2:	197b      	adds	r3, r7, r5
100414f4:	781a      	ldrb	r2, [r3, #0]
100414f6:	4b48      	ldr	r3, [pc, #288]	@ (10041618 <BLE_Init+0x170>)
100414f8:	0011      	movs	r1, r2
100414fa:	0018      	movs	r0, r3
100414fc:	f00d fb40 	bl	1004eb80 <iprintf>
    Error_Handler();
10041500:	f7ff fd00 	bl	10040f04 <Error_Handler>
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
10041504:	2546      	movs	r5, #70	@ 0x46
10041506:	197c      	adds	r4, r7, r5
10041508:	2118      	movs	r1, #24
1004150a:	2000      	movs	r0, #0
1004150c:	f009 fb44 	bl	1004ab98 <aci_hal_set_tx_power_level>
10041510:	0003      	movs	r3, r0
10041512:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10041514:	002a      	movs	r2, r5
10041516:	18bb      	adds	r3, r7, r2
10041518:	781b      	ldrb	r3, [r3, #0]
1004151a:	2b00      	cmp	r3, #0
1004151c:	d007      	beq.n	1004152e <BLE_Init+0x86>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%02X\n", ret);
1004151e:	18bb      	adds	r3, r7, r2
10041520:	781a      	ldrb	r2, [r3, #0]
10041522:	4b3e      	ldr	r3, [pc, #248]	@ (1004161c <BLE_Init+0x174>)
10041524:	0011      	movs	r1, r2
10041526:	0018      	movs	r0, r3
10041528:	f00d fb2a 	bl	1004eb80 <iprintf>
1004152c:	e003      	b.n	10041536 <BLE_Init+0x8e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
1004152e:	4b3c      	ldr	r3, [pc, #240]	@ (10041620 <BLE_Init+0x178>)
10041530:	0018      	movs	r0, r3
10041532:	f00d fb8b 	bl	1004ec4c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
10041536:	2546      	movs	r5, #70	@ 0x46
10041538:	197c      	adds	r4, r7, r5
1004153a:	2342      	movs	r3, #66	@ 0x42
1004153c:	18fb      	adds	r3, r7, r3
1004153e:	0019      	movs	r1, r3
10041540:	2001      	movs	r0, #1
10041542:	f003 fb72 	bl	10044c2a <aci_gatt_srv_profile_init>
10041546:	0003      	movs	r3, r0
10041548:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004154a:	197b      	adds	r3, r7, r5
1004154c:	781b      	ldrb	r3, [r3, #0]
1004154e:	2b00      	cmp	r3, #0
10041550:	d007      	beq.n	10041562 <BLE_Init+0xba>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_profile_init command, result: 0x%02X\n", ret);
10041552:	197b      	adds	r3, r7, r5
10041554:	781a      	ldrb	r2, [r3, #0]
10041556:	4b33      	ldr	r3, [pc, #204]	@ (10041624 <BLE_Init+0x17c>)
10041558:	0011      	movs	r1, r2
1004155a:	0018      	movs	r0, r3
1004155c:	f00d fb10 	bl	1004eb80 <iprintf>
10041560:	e003      	b.n	1004156a <BLE_Init+0xc2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_profile_init command\n");
10041562:	4b31      	ldr	r3, [pc, #196]	@ (10041628 <BLE_Init+0x180>)
10041564:	0018      	movs	r0, r3
10041566:	f00d fb71 	bl	1004ec4c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
1004156a:	2145      	movs	r1, #69	@ 0x45
1004156c:	187b      	adds	r3, r7, r1
1004156e:	2200      	movs	r2, #0
10041570:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
10041572:	187b      	adds	r3, r7, r1
10041574:	187a      	adds	r2, r7, r1
10041576:	7812      	ldrb	r2, [r2, #0]
10041578:	2101      	movs	r1, #1
1004157a:	430a      	orrs	r2, r1
1004157c:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
1004157e:	2546      	movs	r5, #70	@ 0x46
10041580:	197c      	adds	r4, r7, r5
10041582:	2347      	movs	r3, #71	@ 0x47
10041584:	18fb      	adds	r3, r7, r3
10041586:	781b      	ldrb	r3, [r3, #0]
10041588:	2101      	movs	r1, #1
1004158a:	0018      	movs	r0, r3
1004158c:	f009 fa1e 	bl	1004a9cc <aci_gap_init>
10041590:	0003      	movs	r3, r0
10041592:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10041594:	197b      	adds	r3, r7, r5
10041596:	781b      	ldrb	r3, [r3, #0]
10041598:	2b00      	cmp	r3, #0
1004159a:	d007      	beq.n	100415ac <BLE_Init+0x104>
  {
    APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%02X\n", ret);
1004159c:	197b      	adds	r3, r7, r5
1004159e:	781a      	ldrb	r2, [r3, #0]
100415a0:	4b22      	ldr	r3, [pc, #136]	@ (1004162c <BLE_Init+0x184>)
100415a2:	0011      	movs	r1, r2
100415a4:	0018      	movs	r0, r3
100415a6:	f00d faeb 	bl	1004eb80 <iprintf>
100415aa:	e003      	b.n	100415b4 <BLE_Init+0x10c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
100415ac:	4b20      	ldr	r3, [pc, #128]	@ (10041630 <BLE_Init+0x188>)
100415ae:	0018      	movs	r0, r3
100415b0:	f00d fb4c 	bl	1004ec4c <puts>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_STATIC_RANDOM_ADDR)
  ret = aci_hal_read_config_data(CONFIG_DATA_STORED_STATIC_RANDOM_ADDRESS,
100415b4:	2346      	movs	r3, #70	@ 0x46
100415b6:	18fc      	adds	r4, r7, r3
100415b8:	253c      	movs	r5, #60	@ 0x3c
100415ba:	197a      	adds	r2, r7, r5
100415bc:	233b      	movs	r3, #59	@ 0x3b
100415be:	18fb      	adds	r3, r7, r3
100415c0:	0019      	movs	r1, r3
100415c2:	2080      	movs	r0, #128	@ 0x80
100415c4:	f009 fae4 	bl	1004ab90 <aci_hal_read_config_data>
100415c8:	0003      	movs	r3, r0
100415ca:	7023      	strb	r3, [r4, #0]
                                 &bd_address_len, bd_address);
  APP_DBG_MSG("  Static Random Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
100415cc:	0028      	movs	r0, r5
100415ce:	183b      	adds	r3, r7, r0
100415d0:	795b      	ldrb	r3, [r3, #5]
100415d2:	001c      	movs	r4, r3
100415d4:	183b      	adds	r3, r7, r0
100415d6:	791b      	ldrb	r3, [r3, #4]
100415d8:	001d      	movs	r5, r3
100415da:	183b      	adds	r3, r7, r0
100415dc:	78db      	ldrb	r3, [r3, #3]
100415de:	001e      	movs	r6, r3
100415e0:	183b      	adds	r3, r7, r0
100415e2:	789b      	ldrb	r3, [r3, #2]
100415e4:	001a      	movs	r2, r3
100415e6:	183b      	adds	r3, r7, r0
100415e8:	785b      	ldrb	r3, [r3, #1]
100415ea:	0019      	movs	r1, r3
100415ec:	183b      	adds	r3, r7, r0
100415ee:	781b      	ldrb	r3, [r3, #0]
100415f0:	4810      	ldr	r0, [pc, #64]	@ (10041634 <BLE_Init+0x18c>)
100415f2:	9302      	str	r3, [sp, #8]
100415f4:	9101      	str	r1, [sp, #4]
100415f6:	9200      	str	r2, [sp, #0]
100415f8:	0033      	movs	r3, r6
100415fa:	002a      	movs	r2, r5
100415fc:	0021      	movs	r1, r4
100415fe:	f00d fabf 	bl	1004eb80 <iprintf>
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  APP_DBG_MSG("BLE stack initialized\r\n");
10041602:	4b0d      	ldr	r3, [pc, #52]	@ (10041638 <BLE_Init+0x190>)
10041604:	0018      	movs	r0, r3
10041606:	f00d fb21 	bl	1004ec4c <puts>
}
1004160a:	46c0      	nop			@ (mov r8, r8)
1004160c:	46bd      	mov	sp, r7
1004160e:	b013      	add	sp, #76	@ 0x4c
10041610:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041612:	46c0      	nop			@ (mov r8, r8)
10041614:	1004fcac 	.word	0x1004fcac
10041618:	1004faf8 	.word	0x1004faf8
1004161c:	1004fb1c 	.word	0x1004fb1c
10041620:	1004fb5c 	.word	0x1004fb5c
10041624:	1004fb8c 	.word	0x1004fb8c
10041628:	1004fbcc 	.word	0x1004fbcc
1004162c:	1004fbfc 	.word	0x1004fbfc
10041630:	1004fc30 	.word	0x1004fc30
10041634:	1004fc50 	.word	0x1004fc50
10041638:	1004fc94 	.word	0x1004fc94

1004163c <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
1004163c:	b580      	push	{r7, lr}
1004163e:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
10041640:	2101      	movs	r1, #1
10041642:	2001      	movs	r0, #1
10041644:	f009 f94a 	bl	1004a8dc <UTIL_SEQ_SetTask>
}
10041648:	46c0      	nop			@ (mov r8, r8)
1004164a:	46bd      	mov	sp, r7
1004164c:	bd80      	pop	{r7, pc}

1004164e <BLEStack_Process>:
static void BLEStack_Process(void)
{
1004164e:	b580      	push	{r7, lr}
10041650:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
10041652:	2001      	movs	r0, #1
10041654:	f001 fa59 	bl	10042b0a <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
10041658:	f009 fb28 	bl	1004acac <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
1004165c:	2001      	movs	r0, #1
1004165e:	f001 fa5e 	bl	10042b1e <APP_DEBUG_SIGNAL_RESET>
}
10041662:	46c0      	nop			@ (mov r8, r8)
10041664:	46bd      	mov	sp, r7
10041666:	bd80      	pop	{r7, pc}

10041668 <VTimer_Process>:

void VTimer_Process(void)
{
10041668:	b580      	push	{r7, lr}
1004166a:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
1004166c:	f006 f976 	bl	1004795c <HAL_RADIO_TIMER_Tick>
}
10041670:	46c0      	nop			@ (mov r8, r8)
10041672:	46bd      	mov	sp, r7
10041674:	bd80      	pop	{r7, pc}

10041676 <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
10041676:	b580      	push	{r7, lr}
10041678:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
1004167a:	2100      	movs	r1, #0
1004167c:	2002      	movs	r0, #2
1004167e:	f009 f92d 	bl	1004a8dc <UTIL_SEQ_SetTask>
}
10041682:	46c0      	nop			@ (mov r8, r8)
10041684:	46bd      	mov	sp, r7
10041686:	bd80      	pop	{r7, pc}

10041688 <NVM_Process>:
void NVM_Process(void)
{
10041688:	b580      	push	{r7, lr}
1004168a:	af00      	add	r7, sp, #0
  NVMDB_Tick();
1004168c:	f003 fa02 	bl	10044a94 <NVMDB_Tick>
}
10041690:	46c0      	nop			@ (mov r8, r8)
10041692:	46bd      	mov	sp, r7
10041694:	bd80      	pop	{r7, pc}

10041696 <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
10041696:	b580      	push	{r7, lr}
10041698:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
1004169a:	2101      	movs	r1, #1
1004169c:	2004      	movs	r0, #4
1004169e:	f009 f91d 	bl	1004a8dc <UTIL_SEQ_SetTask>
}
100416a2:	46c0      	nop			@ (mov r8, r8)
100416a4:	46bd      	mov	sp, r7
100416a6:	bd80      	pop	{r7, pc}

100416a8 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
100416a8:	b580      	push	{r7, lr}
100416aa:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
100416ac:	f7ff ffe3 	bl	10041676 <VTimer_Process_Schedule>
}
100416b0:	46c0      	nop			@ (mov r8, r8)
100416b2:	46bd      	mov	sp, r7
100416b4:	bd80      	pop	{r7, pc}

100416b6 <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
100416b6:	b580      	push	{r7, lr}
100416b8:	b082      	sub	sp, #8
100416ba:	af00      	add	r7, sp, #0
100416bc:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
100416be:	687b      	ldr	r3, [r7, #4]
100416c0:	0018      	movs	r0, r3
100416c2:	f00b fd77 	bl	1004d1b4 <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
100416c6:	f7ff ffd6 	bl	10041676 <VTimer_Process_Schedule>
  NVM_Process_Schedule();
100416ca:	f7ff ffe4 	bl	10041696 <NVM_Process_Schedule>
}
100416ce:	46c0      	nop			@ (mov r8, r8)
100416d0:	46bd      	mov	sp, r7
100416d2:	b002      	add	sp, #8
100416d4:	bd80      	pop	{r7, pc}

100416d6 <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
100416d6:	b580      	push	{r7, lr}
100416d8:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
100416da:	f7ff ffaf 	bl	1004163c <BLEStack_Process_Schedule>
}
100416de:	46c0      	nop			@ (mov r8, r8)
100416e0:	46bd      	mov	sp, r7
100416e2:	bd80      	pop	{r7, pc}

100416e4 <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
100416e4:	b580      	push	{r7, lr}
100416e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
100416e8:	4b0f      	ldr	r3, [pc, #60]	@ (10041728 <APP_BLE_Init+0x44>)
100416ea:	001a      	movs	r2, r3
100416ec:	2100      	movs	r1, #0
100416ee:	2001      	movs	r0, #1
100416f0:	f009 f8d0 	bl	1004a894 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
100416f4:	4b0d      	ldr	r3, [pc, #52]	@ (1004172c <APP_BLE_Init+0x48>)
100416f6:	001a      	movs	r2, r3
100416f8:	2100      	movs	r1, #0
100416fa:	2002      	movs	r0, #2
100416fc:	f009 f8ca 	bl	1004a894 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10041700:	4b0b      	ldr	r3, [pc, #44]	@ (10041730 <APP_BLE_Init+0x4c>)
10041702:	001a      	movs	r2, r3
10041704:	2100      	movs	r1, #0
10041706:	2004      	movs	r0, #4
10041708:	f009 f8c4 	bl	1004a894 <UTIL_SEQ_RegTask>
  ModulesInit();
1004170c:	f7ff febe 	bl	1004148c <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10041710:	f7ff feca 	bl	100414a8 <BLE_Init>
    APP_DBG_MSG("Eddystone TLM beacon advertise\n\r");
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
10041714:	4b07      	ldr	r3, [pc, #28]	@ (10041734 <APP_BLE_Init+0x50>)
10041716:	0018      	movs	r0, r3
10041718:	f00d fa32 	bl	1004eb80 <iprintf>
    IBeacon_Process();
1004171c:	f000 f8de 	bl	100418dc <IBeacon_Process>
  }
  
/* USER CODE END APP_BLE_Init_2 */
  return;
10041720:	46c0      	nop			@ (mov r8, r8)
}
10041722:	46bd      	mov	sp, r7
10041724:	bd80      	pop	{r7, pc}
10041726:	46c0      	nop			@ (mov r8, r8)
10041728:	1004164f 	.word	0x1004164f
1004172c:	10041669 	.word	0x10041669
10041730:	10041689 	.word	0x10041689
10041734:	1004fce0 	.word	0x1004fce0

10041738 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
10041738:	b580      	push	{r7, lr}
1004173a:	b082      	sub	sp, #8
1004173c:	af00      	add	r7, sp, #0
1004173e:	6078      	str	r0, [r7, #4]

}
10041740:	46c0      	nop			@ (mov r8, r8)
10041742:	46bd      	mov	sp, r7
10041744:	b002      	add	sp, #8
10041746:	bd80      	pop	{r7, pc}

10041748 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
10041748:	b5b0      	push	{r4, r5, r7, lr}
1004174a:	b092      	sub	sp, #72	@ 0x48
1004174c:	af0c      	add	r7, sp, #48	@ 0x30
1004174e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */

  tBleStatus ret = BLE_STATUS_SUCCESS;
10041750:	2417      	movs	r4, #23
10041752:	193b      	adds	r3, r7, r4
10041754:	2200      	movs	r2, #0
10041756:	701a      	strb	r2, [r3, #0]
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
10041758:	687b      	ldr	r3, [r7, #4]
1004175a:	881b      	ldrh	r3, [r3, #0]
1004175c:	011b      	lsls	r3, r3, #4
1004175e:	210a      	movs	r1, #10
10041760:	0018      	movs	r0, r3
10041762:	f7fe fdef 	bl	10040344 <__divsi3>
10041766:	0003      	movs	r3, r0
10041768:	001a      	movs	r2, r3
1004176a:	2514      	movs	r5, #20
1004176c:	197b      	adds	r3, r7, r5
1004176e:	801a      	strh	r2, [r3, #0]
  Advertising_Set_Parameters_t Advertising_Set_Parameters;
  
  ibeacon_data[0] = 2;                                                                       /*< Length. */
10041770:	4b55      	ldr	r3, [pc, #340]	@ (100418c8 <IBeacon_Init+0x180>)
10041772:	2202      	movs	r2, #2
10041774:	701a      	strb	r2, [r3, #0]
  ibeacon_data[1] = AD_TYPE_FLAGS;                                                           /*< Flags data type value. */
10041776:	4b54      	ldr	r3, [pc, #336]	@ (100418c8 <IBeacon_Init+0x180>)
10041778:	2201      	movs	r2, #1
1004177a:	705a      	strb	r2, [r3, #1]
  ibeacon_data[2] = (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED);  /*< BLE general discoverable, without BR/EDR support. */
1004177c:	4b52      	ldr	r3, [pc, #328]	@ (100418c8 <IBeacon_Init+0x180>)
1004177e:	2206      	movs	r2, #6
10041780:	709a      	strb	r2, [r3, #2]
  ibeacon_data[3] = 26;                                                                      /*< Length. */
10041782:	4b51      	ldr	r3, [pc, #324]	@ (100418c8 <IBeacon_Init+0x180>)
10041784:	221a      	movs	r2, #26
10041786:	70da      	strb	r2, [r3, #3]
  ibeacon_data[4] = AD_TYPE_MANUFACTURER_SPECIFIC_DATA;                                      /*< Manufacturer Specific Data data type value. */
10041788:	4b4f      	ldr	r3, [pc, #316]	@ (100418c8 <IBeacon_Init+0x180>)
1004178a:	22ff      	movs	r2, #255	@ 0xff
1004178c:	711a      	strb	r2, [r3, #4]
  ibeacon_data[5] = 0x4C;
1004178e:	4b4e      	ldr	r3, [pc, #312]	@ (100418c8 <IBeacon_Init+0x180>)
10041790:	224c      	movs	r2, #76	@ 0x4c
10041792:	715a      	strb	r2, [r3, #5]
  ibeacon_data[6] = 0x00;
10041794:	4b4c      	ldr	r3, [pc, #304]	@ (100418c8 <IBeacon_Init+0x180>)
10041796:	2200      	movs	r2, #0
10041798:	719a      	strb	r2, [r3, #6]
  ibeacon_data[7] = 0x02;
1004179a:	4b4b      	ldr	r3, [pc, #300]	@ (100418c8 <IBeacon_Init+0x180>)
1004179c:	2202      	movs	r2, #2
1004179e:	71da      	strb	r2, [r3, #7]
  ibeacon_data[8] = 0x15;                                                  /*< 32-bit Manufacturer Data. */
100417a0:	4b49      	ldr	r3, [pc, #292]	@ (100418c8 <IBeacon_Init+0x180>)
100417a2:	2215      	movs	r2, #21
100417a4:	721a      	strb	r2, [r3, #8]
  memcpy(&ibeacon_data[9], IBeacon_Init->UuID, 16);
100417a6:	687b      	ldr	r3, [r7, #4]
100417a8:	6859      	ldr	r1, [r3, #4]
100417aa:	4b48      	ldr	r3, [pc, #288]	@ (100418cc <IBeacon_Init+0x184>)
100417ac:	2210      	movs	r2, #16
100417ae:	0018      	movs	r0, r3
100417b0:	f00d fc65 	bl	1004f07e <memcpy>
  ibeacon_data[25] = IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
100417b4:	687b      	ldr	r3, [r7, #4]
100417b6:	689b      	ldr	r3, [r3, #8]
100417b8:	781a      	ldrb	r2, [r3, #0]
100417ba:	4b43      	ldr	r3, [pc, #268]	@ (100418c8 <IBeacon_Init+0x180>)
100417bc:	765a      	strb	r2, [r3, #25]
  ibeacon_data[26] = IBeacon_Init->MajorID[1],
100417be:	687b      	ldr	r3, [r7, #4]
100417c0:	689b      	ldr	r3, [r3, #8]
100417c2:	785a      	ldrb	r2, [r3, #1]
100417c4:	4b40      	ldr	r3, [pc, #256]	@ (100418c8 <IBeacon_Init+0x180>)
100417c6:	769a      	strb	r2, [r3, #26]
  ibeacon_data[27] = IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
100417c8:	687b      	ldr	r3, [r7, #4]
100417ca:	68db      	ldr	r3, [r3, #12]
100417cc:	781a      	ldrb	r2, [r3, #0]
100417ce:	4b3e      	ldr	r3, [pc, #248]	@ (100418c8 <IBeacon_Init+0x180>)
100417d0:	76da      	strb	r2, [r3, #27]
  ibeacon_data[28] = IBeacon_Init->MinorID[1],
100417d2:	687b      	ldr	r3, [r7, #4]
100417d4:	68db      	ldr	r3, [r3, #12]
100417d6:	785a      	ldrb	r2, [r3, #1]
100417d8:	4b3b      	ldr	r3, [pc, #236]	@ (100418c8 <IBeacon_Init+0x180>)
100417da:	771a      	strb	r2, [r3, #28]
  ibeacon_data[29] = IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
100417dc:	687b      	ldr	r3, [r7, #4]
100417de:	7c1a      	ldrb	r2, [r3, #16]
100417e0:	4b39      	ldr	r3, [pc, #228]	@ (100418c8 <IBeacon_Init+0x180>)
100417e2:	775a      	strb	r2, [r3, #29]

  /* Set advertising configuration for legacy advertising */  
  ret = aci_gap_set_advertising_configuration(0, 
100417e4:	197b      	adds	r3, r7, r5
100417e6:	881a      	ldrh	r2, [r3, #0]
100417e8:	197b      	adds	r3, r7, r5
100417ea:	881b      	ldrh	r3, [r3, #0]
100417ec:	0025      	movs	r5, r4
100417ee:	193c      	adds	r4, r7, r4
100417f0:	2100      	movs	r1, #0
100417f2:	910a      	str	r1, [sp, #40]	@ 0x28
100417f4:	2100      	movs	r1, #0
100417f6:	9109      	str	r1, [sp, #36]	@ 0x24
100417f8:	2101      	movs	r1, #1
100417fa:	9108      	str	r1, [sp, #32]
100417fc:	2100      	movs	r1, #0
100417fe:	9107      	str	r1, [sp, #28]
10041800:	2101      	movs	r1, #1
10041802:	9106      	str	r1, [sp, #24]
10041804:	2100      	movs	r1, #0
10041806:	9105      	str	r1, [sp, #20]
10041808:	2100      	movs	r1, #0
1004180a:	9104      	str	r1, [sp, #16]
1004180c:	2100      	movs	r1, #0
1004180e:	9103      	str	r1, [sp, #12]
10041810:	2100      	movs	r1, #0
10041812:	9102      	str	r1, [sp, #8]
10041814:	2107      	movs	r1, #7
10041816:	9101      	str	r1, [sp, #4]
10041818:	9300      	str	r3, [sp, #0]
1004181a:	0013      	movs	r3, r2
1004181c:	2210      	movs	r2, #16
1004181e:	2102      	movs	r1, #2
10041820:	2000      	movs	r0, #0
10041822:	f009 f8f7 	bl	1004aa14 <aci_gap_set_advertising_configuration>
10041826:	0003      	movs	r3, r0
10041828:	7023      	strb	r3, [r4, #0]
                                              0, /* 0 skips */
                                              HCI_PHY_LE_1M, /* Secondary advertising PHY. Not used with legacy advertising. */
                                              0, /* SID */
                                              0 /* No scan request notifications */);
  
  if (ret != BLE_STATUS_SUCCESS)
1004182a:	197b      	adds	r3, r7, r5
1004182c:	781b      	ldrb	r3, [r3, #0]
1004182e:	2b00      	cmp	r3, #0
10041830:	d009      	beq.n	10041846 <IBeacon_Init+0xfe>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_configuration() 0x%02x\r\n", ret);
10041832:	197b      	adds	r3, r7, r5
10041834:	781a      	ldrb	r2, [r3, #0]
10041836:	4b26      	ldr	r3, [pc, #152]	@ (100418d0 <IBeacon_Init+0x188>)
10041838:	0011      	movs	r1, r2
1004183a:	0018      	movs	r0, r3
1004183c:	f00d f9a0 	bl	1004eb80 <iprintf>
    return ret;
10041840:	197b      	adds	r3, r7, r5
10041842:	781b      	ldrb	r3, [r3, #0]
10041844:	e03c      	b.n	100418c0 <IBeacon_Init+0x178>
  }
  
  ret = aci_gap_set_advertising_data(0, ADV_COMPLETE_DATA, sizeof(ibeacon_data), ibeacon_data);
10041846:	2517      	movs	r5, #23
10041848:	197c      	adds	r4, r7, r5
1004184a:	4b1f      	ldr	r3, [pc, #124]	@ (100418c8 <IBeacon_Init+0x180>)
1004184c:	221e      	movs	r2, #30
1004184e:	2103      	movs	r1, #3
10041850:	2000      	movs	r0, #0
10041852:	f009 f914 	bl	1004aa7e <aci_gap_set_advertising_data>
10041856:	0003      	movs	r3, r0
10041858:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004185a:	197b      	adds	r3, r7, r5
1004185c:	781b      	ldrb	r3, [r3, #0]
1004185e:	2b00      	cmp	r3, #0
10041860:	d009      	beq.n	10041876 <IBeacon_Init+0x12e>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_data() 0x%02x\r\n", ret);
10041862:	197b      	adds	r3, r7, r5
10041864:	781a      	ldrb	r2, [r3, #0]
10041866:	4b1b      	ldr	r3, [pc, #108]	@ (100418d4 <IBeacon_Init+0x18c>)
10041868:	0011      	movs	r1, r2
1004186a:	0018      	movs	r0, r3
1004186c:	f00d f988 	bl	1004eb80 <iprintf>
    return ret; 
10041870:	197b      	adds	r3, r7, r5
10041872:	781b      	ldrb	r3, [r3, #0]
10041874:	e024      	b.n	100418c0 <IBeacon_Init+0x178>
  }
  
  Advertising_Set_Parameters.Advertising_Handle = 0;
10041876:	210c      	movs	r1, #12
10041878:	187b      	adds	r3, r7, r1
1004187a:	2200      	movs	r2, #0
1004187c:	701a      	strb	r2, [r3, #0]
  Advertising_Set_Parameters.Duration = 0;
1004187e:	187b      	adds	r3, r7, r1
10041880:	2200      	movs	r2, #0
10041882:	805a      	strh	r2, [r3, #2]
  Advertising_Set_Parameters.Max_Extended_Advertising_Events = 0;
10041884:	187b      	adds	r3, r7, r1
10041886:	2200      	movs	r2, #0
10041888:	711a      	strb	r2, [r3, #4]

  /* Enable advertising */
  ret = aci_gap_set_advertising_enable(1, 1, &Advertising_Set_Parameters);
1004188a:	2517      	movs	r5, #23
1004188c:	197c      	adds	r4, r7, r5
1004188e:	187b      	adds	r3, r7, r1
10041890:	001a      	movs	r2, r3
10041892:	2101      	movs	r1, #1
10041894:	2001      	movs	r0, #1
10041896:	f009 f8f6 	bl	1004aa86 <aci_gap_set_advertising_enable>
1004189a:	0003      	movs	r3, r0
1004189c:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1004189e:	197b      	adds	r3, r7, r5
100418a0:	781b      	ldrb	r3, [r3, #0]
100418a2:	2b00      	cmp	r3, #0
100418a4:	d009      	beq.n	100418ba <IBeacon_Init+0x172>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_enable() 0x%02x\r\n", ret);
100418a6:	197b      	adds	r3, r7, r5
100418a8:	781a      	ldrb	r2, [r3, #0]
100418aa:	4b0b      	ldr	r3, [pc, #44]	@ (100418d8 <IBeacon_Init+0x190>)
100418ac:	0011      	movs	r1, r2
100418ae:	0018      	movs	r0, r3
100418b0:	f00d f966 	bl	1004eb80 <iprintf>
    return ret; 
100418b4:	197b      	adds	r3, r7, r5
100418b6:	781b      	ldrb	r3, [r3, #0]
100418b8:	e002      	b.n	100418c0 <IBeacon_Init+0x178>
  }

/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
100418ba:	2317      	movs	r3, #23
100418bc:	18fb      	adds	r3, r7, r3
100418be:	781b      	ldrb	r3, [r3, #0]
}
100418c0:	0018      	movs	r0, r3
100418c2:	46bd      	mov	sp, r7
100418c4:	b006      	add	sp, #24
100418c6:	bdb0      	pop	{r4, r5, r7, pc}
100418c8:	2000033c 	.word	0x2000033c
100418cc:	20000345 	.word	0x20000345
100418d0:	1004fcf4 	.word	0x1004fcf4
100418d4:	1004fd30 	.word	0x1004fd30
100418d8:	1004fd64 	.word	0x1004fd64

100418dc <IBeacon_Process>:

void IBeacon_Process(void)
{
100418dc:	b5b0      	push	{r4, r5, r7, lr}
100418de:	b08c      	sub	sp, #48	@ 0x30
100418e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
100418e2:	2520      	movs	r5, #32
100418e4:	197b      	adds	r3, r7, r5
100418e6:	4a13      	ldr	r2, [pc, #76]	@ (10041934 <IBeacon_Process+0x58>)
100418e8:	ca13      	ldmia	r2!, {r0, r1, r4}
100418ea:	c313      	stmia	r3!, {r0, r1, r4}
100418ec:	6812      	ldr	r2, [r2, #0]
100418ee:	601a      	str	r2, [r3, #0]
  uint8_t MajorID[] = { MAJOR_ID };
100418f0:	211c      	movs	r1, #28
100418f2:	187b      	adds	r3, r7, r1
100418f4:	2280      	movs	r2, #128	@ 0x80
100418f6:	0052      	lsls	r2, r2, #1
100418f8:	801a      	strh	r2, [r3, #0]
  uint8_t MinorID[] = { MINOR_ID };
100418fa:	2018      	movs	r0, #24
100418fc:	183b      	adds	r3, r7, r0
100418fe:	2280      	movs	r2, #128	@ 0x80
10041900:	0052      	lsls	r2, r2, #1
10041902:	801a      	strh	r2, [r3, #0]

  IBeacon_InitTypeDef IBeacon_InitStruct =
10041904:	1d3b      	adds	r3, r7, #4
10041906:	22fa      	movs	r2, #250	@ 0xfa
10041908:	0092      	lsls	r2, r2, #2
1004190a:	801a      	strh	r2, [r3, #0]
1004190c:	1d3b      	adds	r3, r7, #4
1004190e:	197a      	adds	r2, r7, r5
10041910:	605a      	str	r2, [r3, #4]
10041912:	1d3b      	adds	r3, r7, #4
10041914:	187a      	adds	r2, r7, r1
10041916:	609a      	str	r2, [r3, #8]
10041918:	1d3b      	adds	r3, r7, #4
1004191a:	183a      	adds	r2, r7, r0
1004191c:	60da      	str	r2, [r3, #12]
1004191e:	1d3b      	adds	r3, r7, #4
10041920:	22c1      	movs	r2, #193	@ 0xc1
10041922:	741a      	strb	r2, [r3, #16]
    .MajorID             = MajorID,
    .MinorID             = MinorID,
    .CalibratedTxPower   = CALIBRATED_TX_POWER_AT_1_M
  };

  IBeacon_Init(&IBeacon_InitStruct);
10041924:	1d3b      	adds	r3, r7, #4
10041926:	0018      	movs	r0, r3
10041928:	f7ff ff0e 	bl	10041748 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
1004192c:	46c0      	nop			@ (mov r8, r8)
1004192e:	46bd      	mov	sp, r7
10041930:	b00c      	add	sp, #48	@ 0x30
10041932:	bdb0      	pop	{r4, r5, r7, pc}
10041934:	1004fd98 	.word	0x1004fd98

10041938 <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
10041938:	b580      	push	{r7, lr}
1004193a:	af00      	add	r7, sp, #0
  NVMDB_Init();
1004193c:	f002 fe16 	bl	1004456c <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
10041940:	4b07      	ldr	r3, [pc, #28]	@ (10041960 <BLENVM_Init+0x28>)
10041942:	0019      	movs	r1, r3
10041944:	2000      	movs	r0, #0
10041946:	f002 ff6f 	bl	10044828 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
1004194a:	4b06      	ldr	r3, [pc, #24]	@ (10041964 <BLENVM_Init+0x2c>)
1004194c:	0019      	movs	r1, r3
1004194e:	2001      	movs	r0, #1
10041950:	f002 ff6a 	bl	10044828 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
10041954:	4b04      	ldr	r3, [pc, #16]	@ (10041968 <BLENVM_Init+0x30>)
10041956:	4a02      	ldr	r2, [pc, #8]	@ (10041960 <BLENVM_Init+0x28>)
10041958:	601a      	str	r2, [r3, #0]
}
1004195a:	46c0      	nop			@ (mov r8, r8)
1004195c:	46bd      	mov	sp, r7
1004195e:	bd80      	pop	{r7, pc}
10041960:	2000035c 	.word	0x2000035c
10041964:	2000036c 	.word	0x2000036c
10041968:	2000037c 	.word	0x2000037c

1004196c <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
1004196c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004196e:	b089      	sub	sp, #36	@ 0x24
10041970:	af02      	add	r7, sp, #8
10041972:	60b9      	str	r1, [r7, #8]
10041974:	0011      	movs	r1, r2
10041976:	607b      	str	r3, [r7, #4]
10041978:	240f      	movs	r4, #15
1004197a:	193b      	adds	r3, r7, r4
1004197c:	1c02      	adds	r2, r0, #0
1004197e:	701a      	strb	r2, [r3, #0]
10041980:	230c      	movs	r3, #12
10041982:	18fb      	adds	r3, r7, r3
10041984:	1c0a      	adds	r2, r1, #0
10041986:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10041988:	193b      	adds	r3, r7, r4
1004198a:	781b      	ldrb	r3, [r3, #0]
1004198c:	2b02      	cmp	r3, #2
1004198e:	d103      	bne.n	10041998 <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
10041990:	4b1a      	ldr	r3, [pc, #104]	@ (100419fc <BLEPLAT_NvmAdd+0x90>)
10041992:	4a1b      	ldr	r2, [pc, #108]	@ (10041a00 <BLEPLAT_NvmAdd+0x94>)
10041994:	601a      	str	r2, [r3, #0]
10041996:	e002      	b.n	1004199e <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10041998:	4b18      	ldr	r3, [pc, #96]	@ (100419fc <BLEPLAT_NvmAdd+0x90>)
1004199a:	4a1a      	ldr	r2, [pc, #104]	@ (10041a04 <BLEPLAT_NvmAdd+0x98>)
1004199c:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
1004199e:	4b17      	ldr	r3, [pc, #92]	@ (100419fc <BLEPLAT_NvmAdd+0x90>)
100419a0:	6818      	ldr	r0, [r3, #0]
100419a2:	2617      	movs	r6, #23
100419a4:	19bc      	adds	r4, r7, r6
100419a6:	68bd      	ldr	r5, [r7, #8]
100419a8:	230c      	movs	r3, #12
100419aa:	18fb      	adds	r3, r7, r3
100419ac:	881b      	ldrh	r3, [r3, #0]
100419ae:	469c      	mov	ip, r3
100419b0:	230f      	movs	r3, #15
100419b2:	18fb      	adds	r3, r7, r3
100419b4:	7819      	ldrb	r1, [r3, #0]
100419b6:	687b      	ldr	r3, [r7, #4]
100419b8:	9301      	str	r3, [sp, #4]
100419ba:	2328      	movs	r3, #40	@ 0x28
100419bc:	2208      	movs	r2, #8
100419be:	189b      	adds	r3, r3, r2
100419c0:	19db      	adds	r3, r3, r7
100419c2:	881b      	ldrh	r3, [r3, #0]
100419c4:	9300      	str	r3, [sp, #0]
100419c6:	002b      	movs	r3, r5
100419c8:	4662      	mov	r2, ip
100419ca:	f002 ffcf 	bl	1004496c <NVMDB_AppendRecord>
100419ce:	0003      	movs	r3, r0
100419d0:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
100419d2:	19bb      	adds	r3, r7, r6
100419d4:	781b      	ldrb	r3, [r3, #0]
100419d6:	2b00      	cmp	r3, #0
100419d8:	d101      	bne.n	100419de <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
100419da:	2300      	movs	r3, #0
100419dc:	e009      	b.n	100419f2 <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
100419de:	2317      	movs	r3, #23
100419e0:	18fb      	adds	r3, r7, r3
100419e2:	781b      	ldrb	r3, [r3, #0]
100419e4:	2b02      	cmp	r3, #2
100419e6:	d102      	bne.n	100419ee <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
100419e8:	2301      	movs	r3, #1
100419ea:	425b      	negs	r3, r3
100419ec:	e001      	b.n	100419f2 <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
100419ee:	2302      	movs	r3, #2
100419f0:	425b      	negs	r3, r3
}
100419f2:	0018      	movs	r0, r3
100419f4:	46bd      	mov	sp, r7
100419f6:	b007      	add	sp, #28
100419f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100419fa:	46c0      	nop			@ (mov r8, r8)
100419fc:	2000037c 	.word	0x2000037c
10041a00:	2000036c 	.word	0x2000036c
10041a04:	2000035c 	.word	0x2000035c

10041a08 <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
10041a08:	b5b0      	push	{r4, r5, r7, lr}
10041a0a:	b086      	sub	sp, #24
10041a0c:	af02      	add	r7, sp, #8
10041a0e:	0004      	movs	r4, r0
10041a10:	0008      	movs	r0, r1
10041a12:	0011      	movs	r1, r2
10041a14:	603b      	str	r3, [r7, #0]
10041a16:	1dfb      	adds	r3, r7, #7
10041a18:	1c22      	adds	r2, r4, #0
10041a1a:	701a      	strb	r2, [r3, #0]
10041a1c:	1dbb      	adds	r3, r7, #6
10041a1e:	1c02      	adds	r2, r0, #0
10041a20:	701a      	strb	r2, [r3, #0]
10041a22:	1d3b      	adds	r3, r7, #4
10041a24:	1c0a      	adds	r2, r1, #0
10041a26:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10041a28:	1dbb      	adds	r3, r7, #6
10041a2a:	781b      	ldrb	r3, [r3, #0]
10041a2c:	2b02      	cmp	r3, #2
10041a2e:	d107      	bne.n	10041a40 <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
10041a30:	4b2e      	ldr	r3, [pc, #184]	@ (10041aec <BLEPLAT_NvmGet+0xe4>)
10041a32:	4a2f      	ldr	r2, [pc, #188]	@ (10041af0 <BLEPLAT_NvmGet+0xe8>)
10041a34:	601a      	str	r2, [r3, #0]
    db_id = 1;
10041a36:	230e      	movs	r3, #14
10041a38:	18fb      	adds	r3, r7, r3
10041a3a:	2201      	movs	r2, #1
10041a3c:	701a      	strb	r2, [r3, #0]
10041a3e:	e006      	b.n	10041a4e <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10041a40:	4b2a      	ldr	r3, [pc, #168]	@ (10041aec <BLEPLAT_NvmGet+0xe4>)
10041a42:	4a2c      	ldr	r2, [pc, #176]	@ (10041af4 <BLEPLAT_NvmGet+0xec>)
10041a44:	601a      	str	r2, [r3, #0]
    db_id = 0;
10041a46:	230e      	movs	r3, #14
10041a48:	18fb      	adds	r3, r7, r3
10041a4a:	2200      	movs	r2, #0
10041a4c:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
10041a4e:	1dfb      	adds	r3, r7, #7
10041a50:	781b      	ldrb	r3, [r3, #0]
10041a52:	2b02      	cmp	r3, #2
10041a54:	d112      	bne.n	10041a7c <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
10041a56:	4b25      	ldr	r3, [pc, #148]	@ (10041aec <BLEPLAT_NvmGet+0xe4>)
10041a58:	6818      	ldr	r0, [r3, #0]
10041a5a:	230f      	movs	r3, #15
10041a5c:	18fc      	adds	r4, r7, r3
10041a5e:	2320      	movs	r3, #32
10041a60:	18fb      	adds	r3, r7, r3
10041a62:	881d      	ldrh	r5, [r3, #0]
10041a64:	683a      	ldr	r2, [r7, #0]
10041a66:	1d3b      	adds	r3, r7, #4
10041a68:	8819      	ldrh	r1, [r3, #0]
10041a6a:	230c      	movs	r3, #12
10041a6c:	18fb      	adds	r3, r7, r3
10041a6e:	9300      	str	r3, [sp, #0]
10041a70:	002b      	movs	r3, r5
10041a72:	f002 ff47 	bl	10044904 <NVMDB_ReadCurrentRecord>
10041a76:	0003      	movs	r3, r0
10041a78:	7023      	strb	r3, [r4, #0]
10041a7a:	e021      	b.n	10041ac0 <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10041a7c:	1dfb      	adds	r3, r7, #7
10041a7e:	781b      	ldrb	r3, [r3, #0]
10041a80:	2b00      	cmp	r3, #0
10041a82:	d108      	bne.n	10041a96 <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10041a84:	4b19      	ldr	r3, [pc, #100]	@ (10041aec <BLEPLAT_NvmGet+0xe4>)
10041a86:	681a      	ldr	r2, [r3, #0]
10041a88:	230e      	movs	r3, #14
10041a8a:	18fb      	adds	r3, r7, r3
10041a8c:	781b      	ldrb	r3, [r3, #0]
10041a8e:	0011      	movs	r1, r2
10041a90:	0018      	movs	r0, r3
10041a92:	f002 fec9 	bl	10044828 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
10041a96:	4b15      	ldr	r3, [pc, #84]	@ (10041aec <BLEPLAT_NvmGet+0xe4>)
10041a98:	6818      	ldr	r0, [r3, #0]
10041a9a:	230f      	movs	r3, #15
10041a9c:	18fc      	adds	r4, r7, r3
10041a9e:	683d      	ldr	r5, [r7, #0]
10041aa0:	1d3b      	adds	r3, r7, #4
10041aa2:	881a      	ldrh	r2, [r3, #0]
10041aa4:	1dbb      	adds	r3, r7, #6
10041aa6:	7819      	ldrb	r1, [r3, #0]
10041aa8:	230c      	movs	r3, #12
10041aaa:	18fb      	adds	r3, r7, r3
10041aac:	9301      	str	r3, [sp, #4]
10041aae:	2320      	movs	r3, #32
10041ab0:	18fb      	adds	r3, r7, r3
10041ab2:	881b      	ldrh	r3, [r3, #0]
10041ab4:	9300      	str	r3, [sp, #0]
10041ab6:	002b      	movs	r3, r5
10041ab8:	f002 feea 	bl	10044890 <NVMDB_ReadNextRecord>
10041abc:	0003      	movs	r3, r0
10041abe:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
10041ac0:	230f      	movs	r3, #15
10041ac2:	18fb      	adds	r3, r7, r3
10041ac4:	781b      	ldrb	r3, [r3, #0]
10041ac6:	2b00      	cmp	r3, #0
10041ac8:	d101      	bne.n	10041ace <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
10041aca:	2300      	movs	r3, #0
10041acc:	e009      	b.n	10041ae2 <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
10041ace:	230f      	movs	r3, #15
10041ad0:	18fb      	adds	r3, r7, r3
10041ad2:	781b      	ldrb	r3, [r3, #0]
10041ad4:	2b04      	cmp	r3, #4
10041ad6:	d102      	bne.n	10041ade <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
10041ad8:	2303      	movs	r3, #3
10041ada:	425b      	negs	r3, r3
10041adc:	e001      	b.n	10041ae2 <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
10041ade:	2302      	movs	r3, #2
10041ae0:	425b      	negs	r3, r3
}
10041ae2:	0018      	movs	r0, r3
10041ae4:	46bd      	mov	sp, r7
10041ae6:	b004      	add	sp, #16
10041ae8:	bdb0      	pop	{r4, r5, r7, pc}
10041aea:	46c0      	nop			@ (mov r8, r8)
10041aec:	2000037c 	.word	0x2000037c
10041af0:	2000036c 	.word	0x2000036c
10041af4:	2000035c 	.word	0x2000035c

10041af8 <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
10041af8:	b580      	push	{r7, lr}
10041afa:	b084      	sub	sp, #16
10041afc:	af00      	add	r7, sp, #0
10041afe:	60f8      	str	r0, [r7, #12]
10041b00:	60b9      	str	r1, [r7, #8]
10041b02:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10041b04:	687a      	ldr	r2, [r7, #4]
10041b06:	68b9      	ldr	r1, [r7, #8]
10041b08:	68fb      	ldr	r3, [r7, #12]
10041b0a:	0018      	movs	r0, r3
10041b0c:	f7fe fafa 	bl	10040104 <Osal_MemCpy>
}
10041b10:	46c0      	nop			@ (mov r8, r8)
10041b12:	46bd      	mov	sp, r7
10041b14:	b004      	add	sp, #16
10041b16:	bd80      	pop	{r7, pc}

10041b18 <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
10041b18:	b580      	push	{r7, lr}
10041b1a:	b084      	sub	sp, #16
10041b1c:	af00      	add	r7, sp, #0
10041b1e:	60f8      	str	r0, [r7, #12]
10041b20:	60b9      	str	r1, [r7, #8]
10041b22:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10041b24:	687a      	ldr	r2, [r7, #4]
10041b26:	68b9      	ldr	r1, [r7, #8]
10041b28:	68fb      	ldr	r3, [r7, #12]
10041b2a:	0018      	movs	r0, r3
10041b2c:	f00d fa48 	bl	1004efc0 <memset>
}
10041b30:	46c0      	nop			@ (mov r8, r8)
10041b32:	46bd      	mov	sp, r7
10041b34:	b004      	add	sp, #16
10041b36:	bd80      	pop	{r7, pc}

10041b38 <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
10041b38:	b590      	push	{r4, r7, lr}
10041b3a:	b089      	sub	sp, #36	@ 0x24
10041b3c:	af00      	add	r7, sp, #0
10041b3e:	60f8      	str	r0, [r7, #12]
10041b40:	60b9      	str	r1, [r7, #8]
10041b42:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
10041b44:	2410      	movs	r4, #16
10041b46:	193b      	adds	r3, r7, r4
10041b48:	0018      	movs	r0, r3
10041b4a:	f003 f981 	bl	10044e50 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
10041b4e:	0021      	movs	r1, r4
10041b50:	187b      	adds	r3, r7, r1
10041b52:	781a      	ldrb	r2, [r3, #0]
10041b54:	68fb      	ldr	r3, [r7, #12]
10041b56:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
10041b58:	187b      	adds	r3, r7, r1
10041b5a:	785a      	ldrb	r2, [r3, #1]
10041b5c:	68bb      	ldr	r3, [r7, #8]
10041b5e:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
10041b60:	187b      	adds	r3, r7, r1
10041b62:	789a      	ldrb	r2, [r3, #2]
10041b64:	687b      	ldr	r3, [r7, #4]
10041b66:	701a      	strb	r2, [r3, #0]
}
10041b68:	46c0      	nop			@ (mov r8, r8)
10041b6a:	46bd      	mov	sp, r7
10041b6c:	b009      	add	sp, #36	@ 0x24
10041b6e:	bd90      	pop	{r4, r7, pc}

10041b70 <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
10041b70:	b580      	push	{r7, lr}
10041b72:	b084      	sub	sp, #16
10041b74:	af00      	add	r7, sp, #0
10041b76:	60f8      	str	r0, [r7, #12]
10041b78:	60b9      	str	r1, [r7, #8]
10041b7a:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
10041b7c:	687a      	ldr	r2, [r7, #4]
10041b7e:	68b9      	ldr	r1, [r7, #8]
10041b80:	68fb      	ldr	r3, [r7, #12]
10041b82:	0018      	movs	r0, r3
10041b84:	f001 f83a 	bl	10042bfc <HW_AES_Encrypt>
}
10041b88:	46c0      	nop			@ (mov r8, r8)
10041b8a:	46bd      	mov	sp, r7
10041b8c:	b004      	add	sp, #16
10041b8e:	bd80      	pop	{r7, pc}

10041b90 <BLEPLAT_RngGetRandom16>:
{
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
}

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
10041b90:	b580      	push	{r7, lr}
10041b92:	b082      	sub	sp, #8
10041b94:	af00      	add	r7, sp, #0
10041b96:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
10041b98:	687b      	ldr	r3, [r7, #4]
10041b9a:	0018      	movs	r0, r3
10041b9c:	f001 faea 	bl	10043174 <HW_RNG_GetRandom16>
}
10041ba0:	46c0      	nop			@ (mov r8, r8)
10041ba2:	46bd      	mov	sp, r7
10041ba4:	b002      	add	sp, #8
10041ba6:	bd80      	pop	{r7, pc}

10041ba8 <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
10041ba8:	b580      	push	{r7, lr}
10041baa:	b082      	sub	sp, #8
10041bac:	af00      	add	r7, sp, #0
10041bae:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
10041bb0:	687b      	ldr	r3, [r7, #4]
10041bb2:	0018      	movs	r0, r3
10041bb4:	f001 faf8 	bl	100431a8 <HW_RNG_GetRandom32>
}
10041bb8:	46c0      	nop			@ (mov r8, r8)
10041bba:	46bd      	mov	sp, r7
10041bbc:	b002      	add	sp, #8
10041bbe:	bd80      	pop	{r7, pc}

10041bc0 <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
10041bc0:	b580      	push	{r7, lr}
10041bc2:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
10041bc4:	f003 f898 	bl	10044cf8 <RADIO_GetMaxPALevel>
10041bc8:	0003      	movs	r3, r0
}
10041bca:	0018      	movs	r0, r3
10041bcc:	46bd      	mov	sp, r7
10041bce:	bd80      	pop	{r7, pc}

10041bd0 <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
10041bd0:	b580      	push	{r7, lr}
10041bd2:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
10041bd4:	f003 f896 	bl	10044d04 <RADIO_GetDefaultPALevel>
10041bd8:	0003      	movs	r3, r0
}
10041bda:	0018      	movs	r0, r3
10041bdc:	46bd      	mov	sp, r7
10041bde:	bd80      	pop	{r7, pc}

10041be0 <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
10041be0:	b580      	push	{r7, lr}
10041be2:	b082      	sub	sp, #8
10041be4:	af00      	add	r7, sp, #0
10041be6:	0002      	movs	r2, r0
10041be8:	1dfb      	adds	r3, r7, #7
10041bea:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
10041bec:	1dfb      	adds	r3, r7, #7
10041bee:	781b      	ldrb	r3, [r3, #0]
10041bf0:	0018      	movs	r0, r3
10041bf2:	f003 f88d 	bl	10044d10 <RADIO_SetHighPower>
}
10041bf6:	46c0      	nop			@ (mov r8, r8)
10041bf8:	46bd      	mov	sp, r7
10041bfa:	b002      	add	sp, #8
10041bfc:	bd80      	pop	{r7, pc}

10041bfe <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
10041bfe:	b580      	push	{r7, lr}
10041c00:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
10041c02:	f006 f9ef 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10041c06:	0002      	movs	r2, r0
10041c08:	000b      	movs	r3, r1

}
10041c0a:	0010      	movs	r0, r2
10041c0c:	0019      	movs	r1, r3
10041c0e:	46bd      	mov	sp, r7
10041c10:	bd80      	pop	{r7, pc}

10041c12 <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
10041c12:	b580      	push	{r7, lr}
10041c14:	b084      	sub	sp, #16
10041c16:	af00      	add	r7, sp, #0
10041c18:	60f8      	str	r0, [r7, #12]
10041c1a:	603a      	str	r2, [r7, #0]
10041c1c:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
10041c1e:	683a      	ldr	r2, [r7, #0]
10041c20:	687b      	ldr	r3, [r7, #4]
10041c22:	68f9      	ldr	r1, [r7, #12]
10041c24:	0008      	movs	r0, r1
10041c26:	f006 f9ef 	bl	10048008 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
10041c2a:	0003      	movs	r3, r0
}
10041c2c:	0018      	movs	r0, r3
10041c2e:	46bd      	mov	sp, r7
10041c30:	b004      	add	sp, #16
10041c32:	bd80      	pop	{r7, pc}

10041c34 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10041c34:	b580      	push	{r7, lr}
10041c36:	b082      	sub	sp, #8
10041c38:	af00      	add	r7, sp, #0
10041c3a:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
10041c3c:	687b      	ldr	r3, [r7, #4]
10041c3e:	0018      	movs	r0, r3
10041c40:	f006 f9fc 	bl	1004803c <HAL_RADIO_TIMER_StopVirtualTimer>
}
10041c44:	46c0      	nop			@ (mov r8, r8)
10041c46:	46bd      	mov	sp, r7
10041c48:	b002      	add	sp, #8
10041c4a:	bd80      	pop	{r7, pc}

10041c4c <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
10041c4c:	b580      	push	{r7, lr}
10041c4e:	b082      	sub	sp, #8
10041c50:	af00      	add	r7, sp, #0
10041c52:	6078      	str	r0, [r7, #4]
10041c54:	0008      	movs	r0, r1
10041c56:	0011      	movs	r1, r2
10041c58:	1cfb      	adds	r3, r7, #3
10041c5a:	1c02      	adds	r2, r0, #0
10041c5c:	701a      	strb	r2, [r3, #0]
10041c5e:	1cbb      	adds	r3, r7, #2
10041c60:	1c0a      	adds	r2, r1, #0
10041c62:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10041c64:	1cbb      	adds	r3, r7, #2
10041c66:	781a      	ldrb	r2, [r3, #0]
10041c68:	1cfb      	adds	r3, r7, #3
10041c6a:	7819      	ldrb	r1, [r3, #0]
10041c6c:	687b      	ldr	r3, [r7, #4]
10041c6e:	0018      	movs	r0, r3
10041c70:	f006 f8a2 	bl	10047db8 <HAL_RADIO_TIMER_SetRadioTimerValue>
10041c74:	0003      	movs	r3, r0
10041c76:	b2db      	uxtb	r3, r3
}
10041c78:	0018      	movs	r0, r3
10041c7a:	46bd      	mov	sp, r7
10041c7c:	b002      	add	sp, #8
10041c7e:	bd80      	pop	{r7, pc}

10041c80 <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
10041c80:	b580      	push	{r7, lr}
10041c82:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
10041c84:	f006 f8e8 	bl	10047e58 <HAL_RADIO_TIMER_ClearRadioTimerValue>
10041c88:	0003      	movs	r3, r0
10041c8a:	b2db      	uxtb	r3, r3
}
10041c8c:	0018      	movs	r0, r3
10041c8e:	46bd      	mov	sp, r7
10041c90:	bd80      	pop	{r7, pc}

10041c92 <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
10041c92:	b580      	push	{r7, lr}
10041c94:	b082      	sub	sp, #8
10041c96:	af00      	add	r7, sp, #0
10041c98:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
10041c9a:	687b      	ldr	r3, [r7, #4]
10041c9c:	0018      	movs	r0, r3
10041c9e:	f005 ffad 	bl	10047bfc <HAL_RADIO_TIMER_GetAnchorPoint>
10041ca2:	0002      	movs	r2, r0
10041ca4:	000b      	movs	r3, r1
}
10041ca6:	0010      	movs	r0, r2
10041ca8:	0019      	movs	r1, r3
10041caa:	46bd      	mov	sp, r7
10041cac:	b002      	add	sp, #8
10041cae:	bd80      	pop	{r7, pc}

10041cb0 <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
10041cb0:	b580      	push	{r7, lr}
10041cb2:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
10041cb4:	f006 f944 	bl	10047f40 <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
10041cb8:	46c0      	nop			@ (mov r8, r8)
10041cba:	46bd      	mov	sp, r7
10041cbc:	bd80      	pop	{r7, pc}
	...

10041cc0 <LL_RADIO_SetCurrentConnectionMachineNumber>:
  * @rmtoll WORD1          CURSTMACHNUM       LL_RADIO_SetCurrentConnectionMachineNumber
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCurrentConnectionMachineNumber(uint32_t value)
{
10041cc0:	b580      	push	{r7, lr}
10041cc2:	b082      	sub	sp, #8
10041cc4:	af00      	add	r7, sp, #0
10041cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
10041cc8:	4b07      	ldr	r3, [pc, #28]	@ (10041ce8 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10041cca:	685b      	ldr	r3, [r3, #4]
10041ccc:	227f      	movs	r2, #127	@ 0x7f
10041cce:	4393      	bics	r3, r2
10041cd0:	0019      	movs	r1, r3
10041cd2:	687b      	ldr	r3, [r7, #4]
10041cd4:	227f      	movs	r2, #127	@ 0x7f
10041cd6:	401a      	ands	r2, r3
10041cd8:	4b03      	ldr	r3, [pc, #12]	@ (10041ce8 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10041cda:	430a      	orrs	r2, r1
10041cdc:	605a      	str	r2, [r3, #4]
}
10041cde:	46c0      	nop			@ (mov r8, r8)
10041ce0:	46bd      	mov	sp, r7
10041ce2:	b002      	add	sp, #8
10041ce4:	bd80      	pop	{r7, pc}
10041ce6:	46c0      	nop			@ (mov r8, r8)
10041ce8:	200000c0 	.word	0x200000c0

10041cec <LL_RADIO_GlobalEnableBlue>:
  * @brief  RADIO Enable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalEnableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalEnableBlue(void)
{
10041cec:	b580      	push	{r7, lr}
10041cee:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10041cf0:	4b04      	ldr	r3, [pc, #16]	@ (10041d04 <LL_RADIO_GlobalEnableBlue+0x18>)
10041cf2:	685a      	ldr	r2, [r3, #4]
10041cf4:	4b03      	ldr	r3, [pc, #12]	@ (10041d04 <LL_RADIO_GlobalEnableBlue+0x18>)
10041cf6:	2180      	movs	r1, #128	@ 0x80
10041cf8:	430a      	orrs	r2, r1
10041cfa:	605a      	str	r2, [r3, #4]
}
10041cfc:	46c0      	nop			@ (mov r8, r8)
10041cfe:	46bd      	mov	sp, r7
10041d00:	bd80      	pop	{r7, pc}
10041d02:	46c0      	nop			@ (mov r8, r8)
10041d04:	200000c0 	.word	0x200000c0

10041d08 <LL_RADIO_GlobalDisableBlue>:
  * @brief  RADIO Disable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalDisableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalDisableBlue(void)
{
10041d08:	b580      	push	{r7, lr}
10041d0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10041d0c:	4b04      	ldr	r3, [pc, #16]	@ (10041d20 <LL_RADIO_GlobalDisableBlue+0x18>)
10041d0e:	685a      	ldr	r2, [r3, #4]
10041d10:	4b03      	ldr	r3, [pc, #12]	@ (10041d20 <LL_RADIO_GlobalDisableBlue+0x18>)
10041d12:	2180      	movs	r1, #128	@ 0x80
10041d14:	438a      	bics	r2, r1
10041d16:	605a      	str	r2, [r3, #4]
}
10041d18:	46c0      	nop			@ (mov r8, r8)
10041d1a:	46bd      	mov	sp, r7
10041d1c:	bd80      	pop	{r7, pc}
10041d1e:	46c0      	nop			@ (mov r8, r8)
10041d20:	200000c0 	.word	0x200000c0

10041d24 <LL_RADIO_SetReceiveWindowTimeout>:
  * @rmtoll WORD4          RCVTIMEOUT       LL_RADIO_SetReceiveWindowTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceiveWindowTimeout(uint32_t value)
{
10041d24:	b580      	push	{r7, lr}
10041d26:	b082      	sub	sp, #8
10041d28:	af00      	add	r7, sp, #0
10041d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
10041d2c:	4b07      	ldr	r3, [pc, #28]	@ (10041d4c <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10041d2e:	691b      	ldr	r3, [r3, #16]
10041d30:	4a07      	ldr	r2, [pc, #28]	@ (10041d50 <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
10041d32:	4013      	ands	r3, r2
10041d34:	0019      	movs	r1, r3
10041d36:	687b      	ldr	r3, [r7, #4]
10041d38:	021b      	lsls	r3, r3, #8
10041d3a:	4a06      	ldr	r2, [pc, #24]	@ (10041d54 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
10041d3c:	401a      	ands	r2, r3
10041d3e:	4b03      	ldr	r3, [pc, #12]	@ (10041d4c <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10041d40:	430a      	orrs	r2, r1
10041d42:	611a      	str	r2, [r3, #16]
}
10041d44:	46c0      	nop			@ (mov r8, r8)
10041d46:	46bd      	mov	sp, r7
10041d48:	b002      	add	sp, #8
10041d4a:	bd80      	pop	{r7, pc}
10041d4c:	200000c0 	.word	0x200000c0
10041d50:	f00000ff 	.word	0xf00000ff
10041d54:	0fffff00 	.word	0x0fffff00

10041d58 <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
10041d58:	b580      	push	{r7, lr}
10041d5a:	b082      	sub	sp, #8
10041d5c:	af00      	add	r7, sp, #0
10041d5e:	0002      	movs	r2, r0
10041d60:	1dfb      	adds	r3, r7, #7
10041d62:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10041d64:	1dfb      	adds	r3, r7, #7
10041d66:	781b      	ldrb	r3, [r3, #0]
10041d68:	225c      	movs	r2, #92	@ 0x5c
10041d6a:	4353      	muls	r3, r2
10041d6c:	4a08      	ldr	r2, [pc, #32]	@ (10041d90 <LL_RADIO_RadioCommandList_Enable+0x38>)
10041d6e:	4694      	mov	ip, r2
10041d70:	4463      	add	r3, ip
10041d72:	681a      	ldr	r2, [r3, #0]
10041d74:	1dfb      	adds	r3, r7, #7
10041d76:	781b      	ldrb	r3, [r3, #0]
10041d78:	215c      	movs	r1, #92	@ 0x5c
10041d7a:	434b      	muls	r3, r1
10041d7c:	4904      	ldr	r1, [pc, #16]	@ (10041d90 <LL_RADIO_RadioCommandList_Enable+0x38>)
10041d7e:	468c      	mov	ip, r1
10041d80:	4463      	add	r3, ip
10041d82:	2140      	movs	r1, #64	@ 0x40
10041d84:	430a      	orrs	r2, r1
10041d86:	601a      	str	r2, [r3, #0]
}
10041d88:	46c0      	nop			@ (mov r8, r8)
10041d8a:	46bd      	mov	sp, r7
10041d8c:	b002      	add	sp, #8
10041d8e:	bd80      	pop	{r7, pc}
10041d90:	200000dc 	.word	0x200000dc

10041d94 <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
10041d94:	b580      	push	{r7, lr}
10041d96:	b082      	sub	sp, #8
10041d98:	af00      	add	r7, sp, #0
10041d9a:	0002      	movs	r2, r0
10041d9c:	1dfb      	adds	r3, r7, #7
10041d9e:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10041da0:	1dfb      	adds	r3, r7, #7
10041da2:	781b      	ldrb	r3, [r3, #0]
10041da4:	225c      	movs	r2, #92	@ 0x5c
10041da6:	4353      	muls	r3, r2
10041da8:	4a08      	ldr	r2, [pc, #32]	@ (10041dcc <LL_RADIO_RadioCommandList_Disable+0x38>)
10041daa:	4694      	mov	ip, r2
10041dac:	4463      	add	r3, ip
10041dae:	681a      	ldr	r2, [r3, #0]
10041db0:	1dfb      	adds	r3, r7, #7
10041db2:	781b      	ldrb	r3, [r3, #0]
10041db4:	215c      	movs	r1, #92	@ 0x5c
10041db6:	434b      	muls	r3, r1
10041db8:	4904      	ldr	r1, [pc, #16]	@ (10041dcc <LL_RADIO_RadioCommandList_Disable+0x38>)
10041dba:	468c      	mov	ip, r1
10041dbc:	4463      	add	r3, ip
10041dbe:	2140      	movs	r1, #64	@ 0x40
10041dc0:	438a      	bics	r2, r1
10041dc2:	601a      	str	r2, [r3, #0]
}
10041dc4:	46c0      	nop			@ (mov r8, r8)
10041dc6:	46bd      	mov	sp, r7
10041dc8:	b002      	add	sp, #8
10041dca:	bd80      	pop	{r7, pc}
10041dcc:	200000dc 	.word	0x200000dc

10041dd0 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10041dd0:	b580      	push	{r7, lr}
10041dd2:	b082      	sub	sp, #8
10041dd4:	af00      	add	r7, sp, #0
10041dd6:	0002      	movs	r2, r0
10041dd8:	1dfb      	adds	r3, r7, #7
10041dda:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10041ddc:	1dfb      	adds	r3, r7, #7
10041dde:	781b      	ldrb	r3, [r3, #0]
10041de0:	225c      	movs	r2, #92	@ 0x5c
10041de2:	4353      	muls	r3, r2
10041de4:	4a08      	ldr	r2, [pc, #32]	@ (10041e08 <LL_RADIO_TxMode_Enable+0x38>)
10041de6:	4694      	mov	ip, r2
10041de8:	4463      	add	r3, ip
10041dea:	681a      	ldr	r2, [r3, #0]
10041dec:	1dfb      	adds	r3, r7, #7
10041dee:	781b      	ldrb	r3, [r3, #0]
10041df0:	215c      	movs	r1, #92	@ 0x5c
10041df2:	434b      	muls	r3, r1
10041df4:	4904      	ldr	r1, [pc, #16]	@ (10041e08 <LL_RADIO_TxMode_Enable+0x38>)
10041df6:	468c      	mov	ip, r1
10041df8:	4463      	add	r3, ip
10041dfa:	2180      	movs	r1, #128	@ 0x80
10041dfc:	430a      	orrs	r2, r1
10041dfe:	601a      	str	r2, [r3, #0]
}
10041e00:	46c0      	nop			@ (mov r8, r8)
10041e02:	46bd      	mov	sp, r7
10041e04:	b002      	add	sp, #8
10041e06:	bd80      	pop	{r7, pc}
10041e08:	200000dc 	.word	0x200000dc

10041e0c <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10041e0c:	b580      	push	{r7, lr}
10041e0e:	b082      	sub	sp, #8
10041e10:	af00      	add	r7, sp, #0
10041e12:	0002      	movs	r2, r0
10041e14:	1dfb      	adds	r3, r7, #7
10041e16:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10041e18:	1dfb      	adds	r3, r7, #7
10041e1a:	781b      	ldrb	r3, [r3, #0]
10041e1c:	225c      	movs	r2, #92	@ 0x5c
10041e1e:	4353      	muls	r3, r2
10041e20:	4a08      	ldr	r2, [pc, #32]	@ (10041e44 <LL_RADIO_TxMode_Disable+0x38>)
10041e22:	4694      	mov	ip, r2
10041e24:	4463      	add	r3, ip
10041e26:	681a      	ldr	r2, [r3, #0]
10041e28:	1dfb      	adds	r3, r7, #7
10041e2a:	781b      	ldrb	r3, [r3, #0]
10041e2c:	215c      	movs	r1, #92	@ 0x5c
10041e2e:	434b      	muls	r3, r1
10041e30:	4904      	ldr	r1, [pc, #16]	@ (10041e44 <LL_RADIO_TxMode_Disable+0x38>)
10041e32:	468c      	mov	ip, r1
10041e34:	4463      	add	r3, ip
10041e36:	2180      	movs	r1, #128	@ 0x80
10041e38:	438a      	bics	r2, r1
10041e3a:	601a      	str	r2, [r3, #0]
}
10041e3c:	46c0      	nop			@ (mov r8, r8)
10041e3e:	46bd      	mov	sp, r7
10041e40:	b002      	add	sp, #8
10041e42:	bd80      	pop	{r7, pc}
10041e44:	200000dc 	.word	0x200000dc

10041e48 <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
10041e48:	b580      	push	{r7, lr}
10041e4a:	b082      	sub	sp, #8
10041e4c:	af00      	add	r7, sp, #0
10041e4e:	0002      	movs	r2, r0
10041e50:	6039      	str	r1, [r7, #0]
10041e52:	1dfb      	adds	r3, r7, #7
10041e54:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10041e56:	1dfb      	adds	r3, r7, #7
10041e58:	781b      	ldrb	r3, [r3, #0]
10041e5a:	225c      	movs	r2, #92	@ 0x5c
10041e5c:	4353      	muls	r3, r2
10041e5e:	4a0c      	ldr	r2, [pc, #48]	@ (10041e90 <LL_RADIO_SetRemapChannel+0x48>)
10041e60:	4694      	mov	ip, r2
10041e62:	4463      	add	r3, ip
10041e64:	681b      	ldr	r3, [r3, #0]
10041e66:	4a0b      	ldr	r2, [pc, #44]	@ (10041e94 <LL_RADIO_SetRemapChannel+0x4c>)
10041e68:	4013      	ands	r3, r2
10041e6a:	0019      	movs	r1, r3
10041e6c:	683b      	ldr	r3, [r7, #0]
10041e6e:	021a      	lsls	r2, r3, #8
10041e70:	23fc      	movs	r3, #252	@ 0xfc
10041e72:	019b      	lsls	r3, r3, #6
10041e74:	401a      	ands	r2, r3
10041e76:	1dfb      	adds	r3, r7, #7
10041e78:	781b      	ldrb	r3, [r3, #0]
10041e7a:	205c      	movs	r0, #92	@ 0x5c
10041e7c:	4343      	muls	r3, r0
10041e7e:	4804      	ldr	r0, [pc, #16]	@ (10041e90 <LL_RADIO_SetRemapChannel+0x48>)
10041e80:	4684      	mov	ip, r0
10041e82:	4463      	add	r3, ip
10041e84:	430a      	orrs	r2, r1
10041e86:	601a      	str	r2, [r3, #0]
}
10041e88:	46c0      	nop			@ (mov r8, r8)
10041e8a:	46bd      	mov	sp, r7
10041e8c:	b002      	add	sp, #8
10041e8e:	bd80      	pop	{r7, pc}
10041e90:	200000dc 	.word	0x200000dc
10041e94:	ffffc0ff 	.word	0xffffc0ff

10041e98 <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10041e98:	b580      	push	{r7, lr}
10041e9a:	b082      	sub	sp, #8
10041e9c:	af00      	add	r7, sp, #0
10041e9e:	0002      	movs	r2, r0
10041ea0:	6039      	str	r1, [r7, #0]
10041ea2:	1dfb      	adds	r3, r7, #7
10041ea4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10041ea6:	1dfb      	adds	r3, r7, #7
10041ea8:	781b      	ldrb	r3, [r3, #0]
10041eaa:	225c      	movs	r2, #92	@ 0x5c
10041eac:	4353      	muls	r3, r2
10041eae:	4a0c      	ldr	r2, [pc, #48]	@ (10041ee0 <LL_RADIO_SetTransmissionPhy+0x48>)
10041eb0:	4694      	mov	ip, r2
10041eb2:	4463      	add	r3, ip
10041eb4:	681b      	ldr	r3, [r3, #0]
10041eb6:	4a0b      	ldr	r2, [pc, #44]	@ (10041ee4 <LL_RADIO_SetTransmissionPhy+0x4c>)
10041eb8:	4013      	ands	r3, r2
10041eba:	0019      	movs	r1, r3
10041ebc:	683b      	ldr	r3, [r7, #0]
10041ebe:	061a      	lsls	r2, r3, #24
10041ec0:	23e0      	movs	r3, #224	@ 0xe0
10041ec2:	04db      	lsls	r3, r3, #19
10041ec4:	401a      	ands	r2, r3
10041ec6:	1dfb      	adds	r3, r7, #7
10041ec8:	781b      	ldrb	r3, [r3, #0]
10041eca:	205c      	movs	r0, #92	@ 0x5c
10041ecc:	4343      	muls	r3, r0
10041ece:	4804      	ldr	r0, [pc, #16]	@ (10041ee0 <LL_RADIO_SetTransmissionPhy+0x48>)
10041ed0:	4684      	mov	ip, r0
10041ed2:	4463      	add	r3, ip
10041ed4:	430a      	orrs	r2, r1
10041ed6:	601a      	str	r2, [r3, #0]
}
10041ed8:	46c0      	nop			@ (mov r8, r8)
10041eda:	46bd      	mov	sp, r7
10041edc:	b002      	add	sp, #8
10041ede:	bd80      	pop	{r7, pc}
10041ee0:	200000dc 	.word	0x200000dc
10041ee4:	f8ffffff 	.word	0xf8ffffff

10041ee8 <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
10041ee8:	b580      	push	{r7, lr}
10041eea:	b082      	sub	sp, #8
10041eec:	af00      	add	r7, sp, #0
10041eee:	0002      	movs	r2, r0
10041ef0:	6039      	str	r1, [r7, #0]
10041ef2:	1dfb      	adds	r3, r7, #7
10041ef4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
10041ef6:	1dfb      	adds	r3, r7, #7
10041ef8:	781b      	ldrb	r3, [r3, #0]
10041efa:	225c      	movs	r2, #92	@ 0x5c
10041efc:	4353      	muls	r3, r2
10041efe:	4a0c      	ldr	r2, [pc, #48]	@ (10041f30 <LL_RADIO_SetReceptionPhy+0x48>)
10041f00:	4694      	mov	ip, r2
10041f02:	4463      	add	r3, ip
10041f04:	681b      	ldr	r3, [r3, #0]
10041f06:	4a0b      	ldr	r2, [pc, #44]	@ (10041f34 <LL_RADIO_SetReceptionPhy+0x4c>)
10041f08:	4013      	ands	r3, r2
10041f0a:	0019      	movs	r1, r3
10041f0c:	683b      	ldr	r3, [r7, #0]
10041f0e:	071a      	lsls	r2, r3, #28
10041f10:	23e0      	movs	r3, #224	@ 0xe0
10041f12:	05db      	lsls	r3, r3, #23
10041f14:	401a      	ands	r2, r3
10041f16:	1dfb      	adds	r3, r7, #7
10041f18:	781b      	ldrb	r3, [r3, #0]
10041f1a:	205c      	movs	r0, #92	@ 0x5c
10041f1c:	4343      	muls	r3, r0
10041f1e:	4804      	ldr	r0, [pc, #16]	@ (10041f30 <LL_RADIO_SetReceptionPhy+0x48>)
10041f20:	4684      	mov	ip, r0
10041f22:	4463      	add	r3, ip
10041f24:	430a      	orrs	r2, r1
10041f26:	601a      	str	r2, [r3, #0]
}
10041f28:	46c0      	nop			@ (mov r8, r8)
10041f2a:	46bd      	mov	sp, r7
10041f2c:	b002      	add	sp, #8
10041f2e:	bd80      	pop	{r7, pc}
10041f30:	200000dc 	.word	0x200000dc
10041f34:	8fffffff 	.word	0x8fffffff

10041f38 <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10041f38:	b580      	push	{r7, lr}
10041f3a:	b082      	sub	sp, #8
10041f3c:	af00      	add	r7, sp, #0
10041f3e:	0002      	movs	r2, r0
10041f40:	6039      	str	r1, [r7, #0]
10041f42:	1dfb      	adds	r3, r7, #7
10041f44:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10041f46:	1dfb      	adds	r3, r7, #7
10041f48:	781b      	ldrb	r3, [r3, #0]
10041f4a:	225c      	movs	r2, #92	@ 0x5c
10041f4c:	4353      	muls	r3, r2
10041f4e:	4a08      	ldr	r2, [pc, #32]	@ (10041f70 <LL_RADIO_SetTxPoint+0x38>)
10041f50:	4694      	mov	ip, r2
10041f52:	4463      	add	r3, ip
10041f54:	685b      	ldr	r3, [r3, #4]
10041f56:	1dfb      	adds	r3, r7, #7
10041f58:	781b      	ldrb	r3, [r3, #0]
10041f5a:	225c      	movs	r2, #92	@ 0x5c
10041f5c:	4353      	muls	r3, r2
10041f5e:	4a04      	ldr	r2, [pc, #16]	@ (10041f70 <LL_RADIO_SetTxPoint+0x38>)
10041f60:	4694      	mov	ip, r2
10041f62:	4463      	add	r3, ip
10041f64:	683a      	ldr	r2, [r7, #0]
10041f66:	605a      	str	r2, [r3, #4]
}
10041f68:	46c0      	nop			@ (mov r8, r8)
10041f6a:	46bd      	mov	sp, r7
10041f6c:	b002      	add	sp, #8
10041f6e:	bd80      	pop	{r7, pc}
10041f70:	200000dc 	.word	0x200000dc

10041f74 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
10041f74:	b580      	push	{r7, lr}
10041f76:	b082      	sub	sp, #8
10041f78:	af00      	add	r7, sp, #0
10041f7a:	0002      	movs	r2, r0
10041f7c:	6039      	str	r1, [r7, #0]
10041f7e:	1dfb      	adds	r3, r7, #7
10041f80:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
10041f82:	1dfb      	adds	r3, r7, #7
10041f84:	781b      	ldrb	r3, [r3, #0]
10041f86:	225c      	movs	r2, #92	@ 0x5c
10041f88:	4353      	muls	r3, r2
10041f8a:	4a08      	ldr	r2, [pc, #32]	@ (10041fac <LL_RADIO_SetRcvPoint+0x38>)
10041f8c:	4694      	mov	ip, r2
10041f8e:	4463      	add	r3, ip
10041f90:	689b      	ldr	r3, [r3, #8]
10041f92:	1dfb      	adds	r3, r7, #7
10041f94:	781b      	ldrb	r3, [r3, #0]
10041f96:	225c      	movs	r2, #92	@ 0x5c
10041f98:	4353      	muls	r3, r2
10041f9a:	4a04      	ldr	r2, [pc, #16]	@ (10041fac <LL_RADIO_SetRcvPoint+0x38>)
10041f9c:	4694      	mov	ip, r2
10041f9e:	4463      	add	r3, ip
10041fa0:	683a      	ldr	r2, [r7, #0]
10041fa2:	609a      	str	r2, [r3, #8]
}
10041fa4:	46c0      	nop			@ (mov r8, r8)
10041fa6:	46bd      	mov	sp, r7
10041fa8:	b002      	add	sp, #8
10041faa:	bd80      	pop	{r7, pc}
10041fac:	200000dc 	.word	0x200000dc

10041fb0 <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
10041fb0:	b580      	push	{r7, lr}
10041fb2:	b082      	sub	sp, #8
10041fb4:	af00      	add	r7, sp, #0
10041fb6:	0002      	movs	r2, r0
10041fb8:	6039      	str	r1, [r7, #0]
10041fba:	1dfb      	adds	r3, r7, #7
10041fbc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
10041fbe:	1dfb      	adds	r3, r7, #7
10041fc0:	781b      	ldrb	r3, [r3, #0]
10041fc2:	225c      	movs	r2, #92	@ 0x5c
10041fc4:	4353      	muls	r3, r2
10041fc6:	4a08      	ldr	r2, [pc, #32]	@ (10041fe8 <LL_RADIO_SetAccessAddress+0x38>)
10041fc8:	4694      	mov	ip, r2
10041fca:	4463      	add	r3, ip
10041fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10041fce:	1dfb      	adds	r3, r7, #7
10041fd0:	781b      	ldrb	r3, [r3, #0]
10041fd2:	225c      	movs	r2, #92	@ 0x5c
10041fd4:	4353      	muls	r3, r2
10041fd6:	4a04      	ldr	r2, [pc, #16]	@ (10041fe8 <LL_RADIO_SetAccessAddress+0x38>)
10041fd8:	4694      	mov	ip, r2
10041fda:	4463      	add	r3, ip
10041fdc:	683a      	ldr	r2, [r7, #0]
10041fde:	625a      	str	r2, [r3, #36]	@ 0x24
}
10041fe0:	46c0      	nop			@ (mov r8, r8)
10041fe2:	46bd      	mov	sp, r7
10041fe4:	b002      	add	sp, #8
10041fe6:	bd80      	pop	{r7, pc}
10041fe8:	200000dc 	.word	0x200000dc

10041fec <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
10041fec:	b580      	push	{r7, lr}
10041fee:	b082      	sub	sp, #8
10041ff0:	af00      	add	r7, sp, #0
10041ff2:	0002      	movs	r2, r0
10041ff4:	6039      	str	r1, [r7, #0]
10041ff6:	1dfb      	adds	r3, r7, #7
10041ff8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
10041ffa:	1dfb      	adds	r3, r7, #7
10041ffc:	781b      	ldrb	r3, [r3, #0]
10041ffe:	225c      	movs	r2, #92	@ 0x5c
10042000:	4353      	muls	r3, r2
10042002:	4a0b      	ldr	r2, [pc, #44]	@ (10042030 <LL_RADIO_SetCRCInitializationValue+0x44>)
10042004:	4694      	mov	ip, r2
10042006:	4463      	add	r3, ip
10042008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004200a:	0e1b      	lsrs	r3, r3, #24
1004200c:	0619      	lsls	r1, r3, #24
1004200e:	683b      	ldr	r3, [r7, #0]
10042010:	021b      	lsls	r3, r3, #8
10042012:	0a1a      	lsrs	r2, r3, #8
10042014:	1dfb      	adds	r3, r7, #7
10042016:	781b      	ldrb	r3, [r3, #0]
10042018:	205c      	movs	r0, #92	@ 0x5c
1004201a:	4343      	muls	r3, r0
1004201c:	4804      	ldr	r0, [pc, #16]	@ (10042030 <LL_RADIO_SetCRCInitializationValue+0x44>)
1004201e:	4684      	mov	ip, r0
10042020:	4463      	add	r3, ip
10042022:	430a      	orrs	r2, r1
10042024:	629a      	str	r2, [r3, #40]	@ 0x28
}
10042026:	46c0      	nop			@ (mov r8, r8)
10042028:	46bd      	mov	sp, r7
1004202a:	b002      	add	sp, #8
1004202c:	bd80      	pop	{r7, pc}
1004202e:	46c0      	nop			@ (mov r8, r8)
10042030:	200000dc 	.word	0x200000dc

10042034 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
10042034:	b580      	push	{r7, lr}
10042036:	b082      	sub	sp, #8
10042038:	af00      	add	r7, sp, #0
1004203a:	0002      	movs	r2, r0
1004203c:	6039      	str	r1, [r7, #0]
1004203e:	1dfb      	adds	r3, r7, #7
10042040:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
10042042:	1dfb      	adds	r3, r7, #7
10042044:	781b      	ldrb	r3, [r3, #0]
10042046:	225c      	movs	r2, #92	@ 0x5c
10042048:	4353      	muls	r3, r2
1004204a:	4a0a      	ldr	r2, [pc, #40]	@ (10042074 <LL_RADIO_SetMaximumReceiveLength+0x40>)
1004204c:	4694      	mov	ip, r2
1004204e:	4463      	add	r3, ip
10042050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10042052:	021b      	lsls	r3, r3, #8
10042054:	0a19      	lsrs	r1, r3, #8
10042056:	683b      	ldr	r3, [r7, #0]
10042058:	061a      	lsls	r2, r3, #24
1004205a:	1dfb      	adds	r3, r7, #7
1004205c:	781b      	ldrb	r3, [r3, #0]
1004205e:	205c      	movs	r0, #92	@ 0x5c
10042060:	4343      	muls	r3, r0
10042062:	4804      	ldr	r0, [pc, #16]	@ (10042074 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10042064:	4684      	mov	ip, r0
10042066:	4463      	add	r3, ip
10042068:	430a      	orrs	r2, r1
1004206a:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004206c:	46c0      	nop			@ (mov r8, r8)
1004206e:	46bd      	mov	sp, r7
10042070:	b002      	add	sp, #8
10042072:	bd80      	pop	{r7, pc}
10042074:	200000dc 	.word	0x200000dc

10042078 <LL_RADIO_TxHp_Enable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Enable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Enable(uint8_t stateMachineNo)
{
10042078:	b580      	push	{r7, lr}
1004207a:	b082      	sub	sp, #8
1004207c:	af00      	add	r7, sp, #0
1004207e:	0002      	movs	r2, r0
10042080:	1dfb      	adds	r3, r7, #7
10042082:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10042084:	1dfb      	adds	r3, r7, #7
10042086:	781b      	ldrb	r3, [r3, #0]
10042088:	225c      	movs	r2, #92	@ 0x5c
1004208a:	4353      	muls	r3, r2
1004208c:	4a08      	ldr	r2, [pc, #32]	@ (100420b0 <LL_RADIO_TxHp_Enable+0x38>)
1004208e:	4694      	mov	ip, r2
10042090:	4463      	add	r3, ip
10042092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10042094:	1dfb      	adds	r3, r7, #7
10042096:	781b      	ldrb	r3, [r3, #0]
10042098:	215c      	movs	r1, #92	@ 0x5c
1004209a:	434b      	muls	r3, r1
1004209c:	4904      	ldr	r1, [pc, #16]	@ (100420b0 <LL_RADIO_TxHp_Enable+0x38>)
1004209e:	468c      	mov	ip, r1
100420a0:	4463      	add	r3, ip
100420a2:	2180      	movs	r1, #128	@ 0x80
100420a4:	430a      	orrs	r2, r1
100420a6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100420a8:	46c0      	nop			@ (mov r8, r8)
100420aa:	46bd      	mov	sp, r7
100420ac:	b002      	add	sp, #8
100420ae:	bd80      	pop	{r7, pc}
100420b0:	200000dc 	.word	0x200000dc

100420b4 <LL_RADIO_TxHp_Disable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Disable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Disable(uint8_t stateMachineNo)
{
100420b4:	b580      	push	{r7, lr}
100420b6:	b082      	sub	sp, #8
100420b8:	af00      	add	r7, sp, #0
100420ba:	0002      	movs	r2, r0
100420bc:	1dfb      	adds	r3, r7, #7
100420be:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
100420c0:	1dfb      	adds	r3, r7, #7
100420c2:	781b      	ldrb	r3, [r3, #0]
100420c4:	225c      	movs	r2, #92	@ 0x5c
100420c6:	4353      	muls	r3, r2
100420c8:	4a08      	ldr	r2, [pc, #32]	@ (100420ec <LL_RADIO_TxHp_Disable+0x38>)
100420ca:	4694      	mov	ip, r2
100420cc:	4463      	add	r3, ip
100420ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
100420d0:	1dfb      	adds	r3, r7, #7
100420d2:	781b      	ldrb	r3, [r3, #0]
100420d4:	215c      	movs	r1, #92	@ 0x5c
100420d6:	434b      	muls	r3, r1
100420d8:	4904      	ldr	r1, [pc, #16]	@ (100420ec <LL_RADIO_TxHp_Disable+0x38>)
100420da:	468c      	mov	ip, r1
100420dc:	4463      	add	r3, ip
100420de:	2180      	movs	r1, #128	@ 0x80
100420e0:	438a      	bics	r2, r1
100420e2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100420e4:	46c0      	nop			@ (mov r8, r8)
100420e6:	46bd      	mov	sp, r7
100420e8:	b002      	add	sp, #8
100420ea:	bd80      	pop	{r7, pc}
100420ec:	200000dc 	.word	0x200000dc

100420f0 <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
100420f0:	b580      	push	{r7, lr}
100420f2:	b082      	sub	sp, #8
100420f4:	af00      	add	r7, sp, #0
100420f6:	0002      	movs	r2, r0
100420f8:	6039      	str	r1, [r7, #0]
100420fa:	1dfb      	adds	r3, r7, #7
100420fc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
100420fe:	1dfb      	adds	r3, r7, #7
10042100:	781b      	ldrb	r3, [r3, #0]
10042102:	225c      	movs	r2, #92	@ 0x5c
10042104:	4353      	muls	r3, r2
10042106:	4a0b      	ldr	r2, [pc, #44]	@ (10042134 <LL_RADIO_SetPAPower+0x44>)
10042108:	4694      	mov	ip, r2
1004210a:	4463      	add	r3, ip
1004210c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004210e:	221f      	movs	r2, #31
10042110:	4393      	bics	r3, r2
10042112:	0019      	movs	r1, r3
10042114:	683b      	ldr	r3, [r7, #0]
10042116:	221f      	movs	r2, #31
10042118:	401a      	ands	r2, r3
1004211a:	1dfb      	adds	r3, r7, #7
1004211c:	781b      	ldrb	r3, [r3, #0]
1004211e:	205c      	movs	r0, #92	@ 0x5c
10042120:	4343      	muls	r3, r0
10042122:	4804      	ldr	r0, [pc, #16]	@ (10042134 <LL_RADIO_SetPAPower+0x44>)
10042124:	4684      	mov	ip, r0
10042126:	4463      	add	r3, ip
10042128:	430a      	orrs	r2, r1
1004212a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004212c:	46c0      	nop			@ (mov r8, r8)
1004212e:	46bd      	mov	sp, r7
10042130:	b002      	add	sp, #8
10042132:	bd80      	pop	{r7, pc}
10042134:	200000dc 	.word	0x200000dc

10042138 <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
10042138:	b580      	push	{r7, lr}
1004213a:	b082      	sub	sp, #8
1004213c:	af00      	add	r7, sp, #0
1004213e:	0002      	movs	r2, r0
10042140:	6039      	str	r1, [r7, #0]
10042142:	1dfb      	adds	r3, r7, #7
10042144:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
10042146:	1dfb      	adds	r3, r7, #7
10042148:	781b      	ldrb	r3, [r3, #0]
1004214a:	225c      	movs	r2, #92	@ 0x5c
1004214c:	4353      	muls	r3, r2
1004214e:	4a0c      	ldr	r2, [pc, #48]	@ (10042180 <LL_RADIO_SetHopIncrement+0x48>)
10042150:	4694      	mov	ip, r2
10042152:	4463      	add	r3, ip
10042154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10042156:	4a0b      	ldr	r2, [pc, #44]	@ (10042184 <LL_RADIO_SetHopIncrement+0x4c>)
10042158:	4013      	ands	r3, r2
1004215a:	0019      	movs	r1, r3
1004215c:	683b      	ldr	r3, [r7, #0]
1004215e:	021a      	lsls	r2, r3, #8
10042160:	23fc      	movs	r3, #252	@ 0xfc
10042162:	019b      	lsls	r3, r3, #6
10042164:	401a      	ands	r2, r3
10042166:	1dfb      	adds	r3, r7, #7
10042168:	781b      	ldrb	r3, [r3, #0]
1004216a:	205c      	movs	r0, #92	@ 0x5c
1004216c:	4343      	muls	r3, r0
1004216e:	4804      	ldr	r0, [pc, #16]	@ (10042180 <LL_RADIO_SetHopIncrement+0x48>)
10042170:	4684      	mov	ip, r0
10042172:	4463      	add	r3, ip
10042174:	430a      	orrs	r2, r1
10042176:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10042178:	46c0      	nop			@ (mov r8, r8)
1004217a:	46bd      	mov	sp, r7
1004217c:	b002      	add	sp, #8
1004217e:	bd80      	pop	{r7, pc}
10042180:	200000dc 	.word	0x200000dc
10042184:	ffffc0ff 	.word	0xffffc0ff

10042188 <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10042188:	b580      	push	{r7, lr}
1004218a:	b082      	sub	sp, #8
1004218c:	af00      	add	r7, sp, #0
1004218e:	6078      	str	r0, [r7, #4]
10042190:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
10042192:	687b      	ldr	r3, [r7, #4]
10042194:	681b      	ldr	r3, [r3, #0]
10042196:	687b      	ldr	r3, [r7, #4]
10042198:	683a      	ldr	r2, [r7, #0]
1004219a:	601a      	str	r2, [r3, #0]
}
1004219c:	46c0      	nop			@ (mov r8, r8)
1004219e:	46bd      	mov	sp, r7
100421a0:	b002      	add	sp, #8
100421a2:	bd80      	pop	{r7, pc}

100421a4 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100421a4:	b580      	push	{r7, lr}
100421a6:	b082      	sub	sp, #8
100421a8:	af00      	add	r7, sp, #0
100421aa:	6078      	str	r0, [r7, #4]
100421ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
100421ae:	687b      	ldr	r3, [r7, #4]
100421b0:	685b      	ldr	r3, [r3, #4]
100421b2:	2201      	movs	r2, #1
100421b4:	4393      	bics	r3, r2
100421b6:	001a      	movs	r2, r3
100421b8:	683b      	ldr	r3, [r7, #0]
100421ba:	2101      	movs	r1, #1
100421bc:	400b      	ands	r3, r1
100421be:	431a      	orrs	r2, r3
100421c0:	687b      	ldr	r3, [r7, #4]
100421c2:	605a      	str	r2, [r3, #4]
}
100421c4:	46c0      	nop			@ (mov r8, r8)
100421c6:	46bd      	mov	sp, r7
100421c8:	b002      	add	sp, #8
100421ca:	bd80      	pop	{r7, pc}

100421cc <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100421cc:	b580      	push	{r7, lr}
100421ce:	b082      	sub	sp, #8
100421d0:	af00      	add	r7, sp, #0
100421d2:	6078      	str	r0, [r7, #4]
100421d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
100421d6:	687b      	ldr	r3, [r7, #4]
100421d8:	685b      	ldr	r3, [r3, #4]
100421da:	2204      	movs	r2, #4
100421dc:	4393      	bics	r3, r2
100421de:	001a      	movs	r2, r3
100421e0:	683b      	ldr	r3, [r7, #0]
100421e2:	009b      	lsls	r3, r3, #2
100421e4:	2104      	movs	r1, #4
100421e6:	400b      	ands	r3, r1
100421e8:	431a      	orrs	r2, r3
100421ea:	687b      	ldr	r3, [r7, #4]
100421ec:	605a      	str	r2, [r3, #4]
}
100421ee:	46c0      	nop			@ (mov r8, r8)
100421f0:	46bd      	mov	sp, r7
100421f2:	b002      	add	sp, #8
100421f4:	bd80      	pop	{r7, pc}

100421f6 <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
100421f6:	b580      	push	{r7, lr}
100421f8:	b082      	sub	sp, #8
100421fa:	af00      	add	r7, sp, #0
100421fc:	6078      	str	r0, [r7, #4]
100421fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10042200:	687b      	ldr	r3, [r7, #4]
10042202:	685b      	ldr	r3, [r3, #4]
10042204:	2220      	movs	r2, #32
10042206:	4393      	bics	r3, r2
10042208:	001a      	movs	r2, r3
1004220a:	683b      	ldr	r3, [r7, #0]
1004220c:	015b      	lsls	r3, r3, #5
1004220e:	2120      	movs	r1, #32
10042210:	400b      	ands	r3, r1
10042212:	431a      	orrs	r2, r3
10042214:	687b      	ldr	r3, [r7, #4]
10042216:	605a      	str	r2, [r3, #4]
}
10042218:	46c0      	nop			@ (mov r8, r8)
1004221a:	46bd      	mov	sp, r7
1004221c:	b002      	add	sp, #8
1004221e:	bd80      	pop	{r7, pc}

10042220 <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
10042220:	b580      	push	{r7, lr}
10042222:	b082      	sub	sp, #8
10042224:	af00      	add	r7, sp, #0
10042226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
10042228:	687b      	ldr	r3, [r7, #4]
1004222a:	685b      	ldr	r3, [r3, #4]
1004222c:	2280      	movs	r2, #128	@ 0x80
1004222e:	4393      	bics	r3, r2
10042230:	001a      	movs	r2, r3
10042232:	687b      	ldr	r3, [r7, #4]
10042234:	605a      	str	r2, [r3, #4]
}
10042236:	46c0      	nop			@ (mov r8, r8)
10042238:	46bd      	mov	sp, r7
1004223a:	b002      	add	sp, #8
1004223c:	bd80      	pop	{r7, pc}
	...

10042240 <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
10042240:	b580      	push	{r7, lr}
10042242:	b082      	sub	sp, #8
10042244:	af00      	add	r7, sp, #0
10042246:	6078      	str	r0, [r7, #4]
10042248:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
1004224a:	687b      	ldr	r3, [r7, #4]
1004224c:	685b      	ldr	r3, [r3, #4]
1004224e:	4a07      	ldr	r2, [pc, #28]	@ (1004226c <LL_RADIO_SetNextTxMode+0x2c>)
10042250:	401a      	ands	r2, r3
10042252:	683b      	ldr	r3, [r7, #0]
10042254:	0219      	lsls	r1, r3, #8
10042256:	2380      	movs	r3, #128	@ 0x80
10042258:	005b      	lsls	r3, r3, #1
1004225a:	400b      	ands	r3, r1
1004225c:	431a      	orrs	r2, r3
1004225e:	687b      	ldr	r3, [r7, #4]
10042260:	605a      	str	r2, [r3, #4]
}
10042262:	46c0      	nop			@ (mov r8, r8)
10042264:	46bd      	mov	sp, r7
10042266:	b002      	add	sp, #8
10042268:	bd80      	pop	{r7, pc}
1004226a:	46c0      	nop			@ (mov r8, r8)
1004226c:	fffffeff 	.word	0xfffffeff

10042270 <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10042270:	b580      	push	{r7, lr}
10042272:	b082      	sub	sp, #8
10042274:	af00      	add	r7, sp, #0
10042276:	6078      	str	r0, [r7, #4]
10042278:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
1004227a:	687b      	ldr	r3, [r7, #4]
1004227c:	685b      	ldr	r3, [r3, #4]
1004227e:	4a07      	ldr	r2, [pc, #28]	@ (1004229c <LL_RADIO_SetAllTableDataReady+0x2c>)
10042280:	401a      	ands	r2, r3
10042282:	683b      	ldr	r3, [r7, #0]
10042284:	0259      	lsls	r1, r3, #9
10042286:	2380      	movs	r3, #128	@ 0x80
10042288:	009b      	lsls	r3, r3, #2
1004228a:	400b      	ands	r3, r1
1004228c:	431a      	orrs	r2, r3
1004228e:	687b      	ldr	r3, [r7, #4]
10042290:	605a      	str	r2, [r3, #4]
}
10042292:	46c0      	nop			@ (mov r8, r8)
10042294:	46bd      	mov	sp, r7
10042296:	b002      	add	sp, #8
10042298:	bd80      	pop	{r7, pc}
1004229a:	46c0      	nop			@ (mov r8, r8)
1004229c:	fffffdff 	.word	0xfffffdff

100422a0 <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
100422a0:	b580      	push	{r7, lr}
100422a2:	b082      	sub	sp, #8
100422a4:	af00      	add	r7, sp, #0
100422a6:	6078      	str	r0, [r7, #4]
100422a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
100422aa:	687b      	ldr	r3, [r7, #4]
100422ac:	685b      	ldr	r3, [r3, #4]
100422ae:	4a07      	ldr	r2, [pc, #28]	@ (100422cc <LL_RADIO_SetTransmissionDataReady+0x2c>)
100422b0:	401a      	ands	r2, r3
100422b2:	683b      	ldr	r3, [r7, #0]
100422b4:	0299      	lsls	r1, r3, #10
100422b6:	2380      	movs	r3, #128	@ 0x80
100422b8:	00db      	lsls	r3, r3, #3
100422ba:	400b      	ands	r3, r1
100422bc:	431a      	orrs	r2, r3
100422be:	687b      	ldr	r3, [r7, #4]
100422c0:	605a      	str	r2, [r3, #4]
}
100422c2:	46c0      	nop			@ (mov r8, r8)
100422c4:	46bd      	mov	sp, r7
100422c6:	b002      	add	sp, #8
100422c8:	bd80      	pop	{r7, pc}
100422ca:	46c0      	nop			@ (mov r8, r8)
100422cc:	fffffbff 	.word	0xfffffbff

100422d0 <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
100422d0:	b580      	push	{r7, lr}
100422d2:	b082      	sub	sp, #8
100422d4:	af00      	add	r7, sp, #0
100422d6:	6078      	str	r0, [r7, #4]
100422d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
100422da:	687b      	ldr	r3, [r7, #4]
100422dc:	689b      	ldr	r3, [r3, #8]
100422de:	687b      	ldr	r3, [r7, #4]
100422e0:	683a      	ldr	r2, [r7, #0]
100422e2:	609a      	str	r2, [r3, #8]
}
100422e4:	46c0      	nop			@ (mov r8, r8)
100422e6:	46bd      	mov	sp, r7
100422e8:	b002      	add	sp, #8
100422ea:	bd80      	pop	{r7, pc}

100422ec <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
100422ec:	b580      	push	{r7, lr}
100422ee:	b082      	sub	sp, #8
100422f0:	af00      	add	r7, sp, #0
100422f2:	6078      	str	r0, [r7, #4]
100422f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
100422f6:	687b      	ldr	r3, [r7, #4]
100422f8:	68db      	ldr	r3, [r3, #12]
100422fa:	0d1b      	lsrs	r3, r3, #20
100422fc:	051a      	lsls	r2, r3, #20
100422fe:	683b      	ldr	r3, [r7, #0]
10042300:	031b      	lsls	r3, r3, #12
10042302:	0b1b      	lsrs	r3, r3, #12
10042304:	431a      	orrs	r2, r3
10042306:	687b      	ldr	r3, [r7, #4]
10042308:	60da      	str	r2, [r3, #12]
}
1004230a:	46c0      	nop			@ (mov r8, r8)
1004230c:	46bd      	mov	sp, r7
1004230e:	b002      	add	sp, #8
10042310:	bd80      	pop	{r7, pc}

10042312 <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
10042312:	b580      	push	{r7, lr}
10042314:	b082      	sub	sp, #8
10042316:	af00      	add	r7, sp, #0
10042318:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
1004231a:	687b      	ldr	r3, [r7, #4]
1004231c:	68db      	ldr	r3, [r3, #12]
1004231e:	2280      	movs	r2, #128	@ 0x80
10042320:	0352      	lsls	r2, r2, #13
10042322:	431a      	orrs	r2, r3
10042324:	687b      	ldr	r3, [r7, #4]
10042326:	60da      	str	r2, [r3, #12]
}
10042328:	46c0      	nop			@ (mov r8, r8)
1004232a:	46bd      	mov	sp, r7
1004232c:	b002      	add	sp, #8
1004232e:	bd80      	pop	{r7, pc}

10042330 <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
10042330:	b580      	push	{r7, lr}
10042332:	b082      	sub	sp, #8
10042334:	af00      	add	r7, sp, #0
10042336:	6078      	str	r0, [r7, #4]
10042338:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
1004233a:	687b      	ldr	r3, [r7, #4]
1004233c:	68db      	ldr	r3, [r3, #12]
1004233e:	4a07      	ldr	r2, [pc, #28]	@ (1004235c <LL_RADIO_SetTrigRcv+0x2c>)
10042340:	401a      	ands	r2, r3
10042342:	683b      	ldr	r3, [r7, #0]
10042344:	0599      	lsls	r1, r3, #22
10042346:	2380      	movs	r3, #128	@ 0x80
10042348:	03db      	lsls	r3, r3, #15
1004234a:	400b      	ands	r3, r1
1004234c:	431a      	orrs	r2, r3
1004234e:	687b      	ldr	r3, [r7, #4]
10042350:	60da      	str	r2, [r3, #12]
}
10042352:	46c0      	nop			@ (mov r8, r8)
10042354:	46bd      	mov	sp, r7
10042356:	b002      	add	sp, #8
10042358:	bd80      	pop	{r7, pc}
1004235a:	46c0      	nop			@ (mov r8, r8)
1004235c:	ffbfffff 	.word	0xffbfffff

10042360 <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
10042360:	b580      	push	{r7, lr}
10042362:	b082      	sub	sp, #8
10042364:	af00      	add	r7, sp, #0
10042366:	6078      	str	r0, [r7, #4]
10042368:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
1004236a:	687b      	ldr	r3, [r7, #4]
1004236c:	68db      	ldr	r3, [r3, #12]
1004236e:	4a07      	ldr	r2, [pc, #28]	@ (1004238c <LL_RADIO_SetTrigDone+0x2c>)
10042370:	401a      	ands	r2, r3
10042372:	683b      	ldr	r3, [r7, #0]
10042374:	05d9      	lsls	r1, r3, #23
10042376:	2380      	movs	r3, #128	@ 0x80
10042378:	041b      	lsls	r3, r3, #16
1004237a:	400b      	ands	r3, r1
1004237c:	431a      	orrs	r2, r3
1004237e:	687b      	ldr	r3, [r7, #4]
10042380:	60da      	str	r2, [r3, #12]
}
10042382:	46c0      	nop			@ (mov r8, r8)
10042384:	46bd      	mov	sp, r7
10042386:	b002      	add	sp, #8
10042388:	bd80      	pop	{r7, pc}
1004238a:	46c0      	nop			@ (mov r8, r8)
1004238c:	ff7fffff 	.word	0xff7fffff

10042390 <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
10042390:	b580      	push	{r7, lr}
10042392:	b082      	sub	sp, #8
10042394:	af00      	add	r7, sp, #0
10042396:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
10042398:	687b      	ldr	r3, [r7, #4]
1004239a:	68db      	ldr	r3, [r3, #12]
1004239c:	2280      	movs	r2, #128	@ 0x80
1004239e:	0492      	lsls	r2, r2, #18
100423a0:	431a      	orrs	r2, r3
100423a2:	687b      	ldr	r3, [r7, #4]
100423a4:	60da      	str	r2, [r3, #12]
}
100423a6:	46c0      	nop			@ (mov r8, r8)
100423a8:	46bd      	mov	sp, r7
100423aa:	b002      	add	sp, #8
100423ac:	bd80      	pop	{r7, pc}

100423ae <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
100423ae:	b580      	push	{r7, lr}
100423b0:	b082      	sub	sp, #8
100423b2:	af00      	add	r7, sp, #0
100423b4:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
100423b6:	687b      	ldr	r3, [r7, #4]
100423b8:	68db      	ldr	r3, [r3, #12]
100423ba:	2280      	movs	r2, #128	@ 0x80
100423bc:	0612      	lsls	r2, r2, #24
100423be:	431a      	orrs	r2, r3
100423c0:	687b      	ldr	r3, [r7, #4]
100423c2:	60da      	str	r2, [r3, #12]
}
100423c4:	46c0      	nop			@ (mov r8, r8)
100423c6:	46bd      	mov	sp, r7
100423c8:	b002      	add	sp, #8
100423ca:	bd80      	pop	{r7, pc}

100423cc <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
100423cc:	b580      	push	{r7, lr}
100423ce:	b082      	sub	sp, #8
100423d0:	af00      	add	r7, sp, #0
100423d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
100423d4:	23c0      	movs	r3, #192	@ 0xc0
100423d6:	05db      	lsls	r3, r3, #23
100423d8:	685b      	ldr	r3, [r3, #4]
100423da:	4a07      	ldr	r2, [pc, #28]	@ (100423f8 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
100423dc:	4013      	ands	r3, r2
100423de:	0019      	movs	r1, r3
100423e0:	687b      	ldr	r3, [r7, #4]
100423e2:	4a06      	ldr	r2, [pc, #24]	@ (100423fc <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
100423e4:	401a      	ands	r2, r3
100423e6:	23c0      	movs	r3, #192	@ 0xc0
100423e8:	05db      	lsls	r3, r3, #23
100423ea:	430a      	orrs	r2, r1
100423ec:	605a      	str	r2, [r3, #4]
}
100423ee:	46c0      	nop			@ (mov r8, r8)
100423f0:	46bd      	mov	sp, r7
100423f2:	b002      	add	sp, #8
100423f4:	bd80      	pop	{r7, pc}
100423f6:	46c0      	nop			@ (mov r8, r8)
100423f8:	0002004f 	.word	0x0002004f
100423fc:	fffdffb0 	.word	0xfffdffb0

10042400 <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10042400:	b580      	push	{r7, lr}
10042402:	b082      	sub	sp, #8
10042404:	af00      	add	r7, sp, #0
10042406:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10042408:	23c0      	movs	r3, #192	@ 0xc0
1004240a:	05db      	lsls	r3, r3, #23
1004240c:	699b      	ldr	r3, [r3, #24]
1004240e:	2208      	movs	r2, #8
10042410:	4393      	bics	r3, r2
10042412:	0019      	movs	r1, r3
10042414:	687b      	ldr	r3, [r7, #4]
10042416:	00db      	lsls	r3, r3, #3
10042418:	2208      	movs	r2, #8
1004241a:	401a      	ands	r2, r3
1004241c:	23c0      	movs	r3, #192	@ 0xc0
1004241e:	05db      	lsls	r3, r3, #23
10042420:	430a      	orrs	r2, r1
10042422:	619a      	str	r2, [r3, #24]
}
10042424:	46c0      	nop			@ (mov r8, r8)
10042426:	46bd      	mov	sp, r7
10042428:	b002      	add	sp, #8
1004242a:	bd80      	pop	{r7, pc}

1004242c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
1004242c:	b580      	push	{r7, lr}
1004242e:	b088      	sub	sp, #32
10042430:	af00      	add	r7, sp, #0
10042432:	6078      	str	r0, [r7, #4]
10042434:	0008      	movs	r0, r1
10042436:	0011      	movs	r1, r2
10042438:	1cfb      	adds	r3, r7, #3
1004243a:	1c02      	adds	r2, r0, #0
1004243c:	701a      	strb	r2, [r3, #0]
1004243e:	1cbb      	adds	r3, r7, #2
10042440:	1c0a      	adds	r2, r1, #0
10042442:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
10042444:	687b      	ldr	r3, [r7, #4]
10042446:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
10042448:	1cfb      	adds	r3, r7, #3
1004244a:	781b      	ldrb	r3, [r3, #0]
1004244c:	2b01      	cmp	r3, #1
1004244e:	d105      	bne.n	1004245c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 6;
10042450:	2306      	movs	r3, #6
10042452:	60bb      	str	r3, [r7, #8]
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
10042454:	68bb      	ldr	r3, [r7, #8]
10042456:	3302      	adds	r3, #2
10042458:	61fb      	str	r3, [r7, #28]
1004245a:	e015      	b.n	10042488 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
1004245c:	1cfb      	adds	r3, r7, #3
1004245e:	781b      	ldrb	r3, [r3, #0]
10042460:	2b00      	cmp	r3, #0
10042462:	d105      	bne.n	10042470 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 4;
10042464:	2304      	movs	r3, #4
10042466:	60fb      	str	r3, [r7, #12]
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
10042468:	68fb      	ldr	r3, [r7, #12]
1004246a:	3302      	adds	r3, #2
1004246c:	61fb      	str	r3, [r7, #28]
1004246e:	e00b      	b.n	10042488 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10042470:	1cfb      	adds	r3, r7, #3
10042472:	781b      	ldrb	r3, [r3, #0]
10042474:	2b02      	cmp	r3, #2
10042476:	d105      	bne.n	10042484 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
#else
        const int32_t Adjust_Value = 2;
10042478:	2302      	movs	r3, #2
1004247a:	613b      	str	r3, [r7, #16]
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
1004247c:	693b      	ldr	r3, [r7, #16]
1004247e:	3304      	adds	r3, #4
10042480:	61fb      	str	r3, [r7, #28]
10042482:	e001      	b.n	10042488 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
10042484:	2300      	movs	r3, #0
10042486:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
10042488:	1cfb      	adds	r3, r7, #3
1004248a:	781b      	ldrb	r3, [r3, #0]
1004248c:	2b01      	cmp	r3, #1
1004248e:	d003      	beq.n	10042498 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
10042490:	1cfb      	adds	r3, r7, #3
10042492:	781b      	ldrb	r3, [r3, #0]
10042494:	2b02      	cmp	r3, #2
10042496:	d109      	bne.n	100424ac <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
10042498:	1cbb      	adds	r3, r7, #2
1004249a:	781b      	ldrb	r3, [r3, #0]
1004249c:	2b01      	cmp	r3, #1
1004249e:	d102      	bne.n	100424a6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
100424a0:	239b      	movs	r3, #155	@ 0x9b
100424a2:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100424a4:	e013      	b.n	100424ce <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
100424a6:	233d      	movs	r3, #61	@ 0x3d
100424a8:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100424aa:	e010      	b.n	100424ce <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
100424ac:	1cfb      	adds	r3, r7, #3
100424ae:	781b      	ldrb	r3, [r3, #0]
100424b0:	2b00      	cmp	r3, #0
100424b2:	d003      	beq.n	100424bc <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
100424b4:	1cfb      	adds	r3, r7, #3
100424b6:	781b      	ldrb	r3, [r3, #0]
100424b8:	2b03      	cmp	r3, #3
100424ba:	d108      	bne.n	100424ce <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
100424bc:	1cbb      	adds	r3, r7, #2
100424be:	781b      	ldrb	r3, [r3, #0]
100424c0:	2b01      	cmp	r3, #1
100424c2:	d102      	bne.n	100424ca <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
100424c4:	2399      	movs	r3, #153	@ 0x99
100424c6:	61bb      	str	r3, [r7, #24]
100424c8:	e001      	b.n	100424ce <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
100424ca:	233b      	movs	r3, #59	@ 0x3b
100424cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
100424ce:	69ba      	ldr	r2, [r7, #24]
100424d0:	69fb      	ldr	r3, [r7, #28]
100424d2:	18d3      	adds	r3, r2, r3
100424d4:	697a      	ldr	r2, [r7, #20]
100424d6:	1ad3      	subs	r3, r2, r3
100424d8:	617b      	str	r3, [r7, #20]

    return Timeout;
100424da:	697b      	ldr	r3, [r7, #20]
}
100424dc:	0018      	movs	r0, r3
100424de:	46bd      	mov	sp, r7
100424e0:	b008      	add	sp, #32
100424e2:	bd80      	pop	{r7, pc}

100424e4 <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
100424e4:	b580      	push	{r7, lr}
100424e6:	b082      	sub	sp, #8
100424e8:	af00      	add	r7, sp, #0
100424ea:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
100424ec:	687b      	ldr	r3, [r7, #4]
100424ee:	0018      	movs	r0, r3
100424f0:	f7ff ff6c 	bl	100423cc <LL_RADIO_BlueSetInterrupt1RegRegister>
}
100424f4:	46c0      	nop			@ (mov r8, r8)
100424f6:	46bd      	mov	sp, r7
100424f8:	b002      	add	sp, #8
100424fa:	bd80      	pop	{r7, pc}

100424fc <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
100424fc:	b580      	push	{r7, lr}
100424fe:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
10042500:	2001      	movs	r0, #1
10042502:	f7ff ff7d 	bl	10042400 <LL_RADIO_BlueSetClearSemaphoreRequest>
}
10042506:	46c0      	nop			@ (mov r8, r8)
10042508:	46bd      	mov	sp, r7
1004250a:	bd80      	pop	{r7, pc}

1004250c <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
1004250c:	b580      	push	{r7, lr}
1004250e:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
10042510:	f7ff fbfa 	bl	10041d08 <LL_RADIO_GlobalDisableBlue>
}
10042514:	46c0      	nop			@ (mov r8, r8)
10042516:	46bd      	mov	sp, r7
10042518:	bd80      	pop	{r7, pc}

1004251a <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
1004251a:	b580      	push	{r7, lr}
1004251c:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
1004251e:	f7ff fbe5 	bl	10041cec <LL_RADIO_GlobalEnableBlue>
}
10042522:	46c0      	nop			@ (mov r8, r8)
10042524:	46bd      	mov	sp, r7
10042526:	bd80      	pop	{r7, pc}

10042528 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10042528:	b580      	push	{r7, lr}
1004252a:	b082      	sub	sp, #8
1004252c:	af00      	add	r7, sp, #0
1004252e:	0002      	movs	r2, r0
10042530:	1dfb      	adds	r3, r7, #7
10042532:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
10042534:	1dfb      	adds	r3, r7, #7
10042536:	781b      	ldrb	r3, [r3, #0]
10042538:	0018      	movs	r0, r3
1004253a:	f7ff fbc1 	bl	10041cc0 <LL_RADIO_SetCurrentConnectionMachineNumber>
}
1004253e:	46c0      	nop			@ (mov r8, r8)
10042540:	46bd      	mov	sp, r7
10042542:	b002      	add	sp, #8
10042544:	bd80      	pop	{r7, pc}
	...

10042548 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
10042548:	b580      	push	{r7, lr}
1004254a:	b082      	sub	sp, #8
1004254c:	af00      	add	r7, sp, #0
1004254e:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10042550:	687b      	ldr	r3, [r7, #4]
10042552:	4a03      	ldr	r2, [pc, #12]	@ (10042560 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
10042554:	4013      	ands	r3, r2
}
10042556:	0018      	movs	r0, r3
10042558:	46bd      	mov	sp, r7
1004255a:	b002      	add	sp, #8
1004255c:	bd80      	pop	{r7, pc}
1004255e:	46c0      	nop			@ (mov r8, r8)
10042560:	00c9df30 	.word	0x00c9df30

10042564 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
10042564:	b580      	push	{r7, lr}
10042566:	b082      	sub	sp, #8
10042568:	af00      	add	r7, sp, #0
1004256a:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
1004256c:	687a      	ldr	r2, [r7, #4]
1004256e:	2380      	movs	r3, #128	@ 0x80
10042570:	03db      	lsls	r3, r3, #15
10042572:	4013      	ands	r3, r2
}
10042574:	0018      	movs	r0, r3
10042576:	46bd      	mov	sp, r7
10042578:	b002      	add	sp, #8
1004257a:	bd80      	pop	{r7, pc}

1004257c <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
1004257c:	b580      	push	{r7, lr}
1004257e:	b082      	sub	sp, #8
10042580:	af00      	add	r7, sp, #0
10042582:	6078      	str	r0, [r7, #4]
    return 0;
10042584:	2300      	movs	r3, #0
}
10042586:	0018      	movs	r0, r3
10042588:	46bd      	mov	sp, r7
1004258a:	b002      	add	sp, #8
1004258c:	bd80      	pop	{r7, pc}

1004258e <BLEPLAT_CNTR_IntGetIntStatusDone>:
}
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
1004258e:	b580      	push	{r7, lr}
10042590:	b082      	sub	sp, #8
10042592:	af00      	add	r7, sp, #0
10042594:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
10042596:	687a      	ldr	r2, [r7, #4]
10042598:	2380      	movs	r3, #128	@ 0x80
1004259a:	049b      	lsls	r3, r3, #18
1004259c:	4013      	ands	r3, r2
}
1004259e:	0018      	movs	r0, r3
100425a0:	46bd      	mov	sp, r7
100425a2:	b002      	add	sp, #8
100425a4:	bd80      	pop	{r7, pc}

100425a6 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
}
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
100425a6:	b580      	push	{r7, lr}
100425a8:	b082      	sub	sp, #8
100425aa:	af00      	add	r7, sp, #0
100425ac:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
100425ae:	687a      	ldr	r2, [r7, #4]
100425b0:	2380      	movs	r3, #128	@ 0x80
100425b2:	025b      	lsls	r3, r3, #9
100425b4:	4013      	ands	r3, r2
}
100425b6:	0018      	movs	r0, r3
100425b8:	46bd      	mov	sp, r7
100425ba:	b002      	add	sp, #8
100425bc:	bd80      	pop	{r7, pc}

100425be <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
100425be:	b580      	push	{r7, lr}
100425c0:	b082      	sub	sp, #8
100425c2:	af00      	add	r7, sp, #0
100425c4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
100425c6:	687a      	ldr	r2, [r7, #4]
100425c8:	2380      	movs	r3, #128	@ 0x80
100425ca:	039b      	lsls	r3, r3, #14
100425cc:	4013      	ands	r3, r2
}
100425ce:	0018      	movs	r0, r3
100425d0:	46bd      	mov	sp, r7
100425d2:	b002      	add	sp, #8
100425d4:	bd80      	pop	{r7, pc}

100425d6 <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
100425d6:	b580      	push	{r7, lr}
100425d8:	b082      	sub	sp, #8
100425da:	af00      	add	r7, sp, #0
100425dc:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
100425de:	687a      	ldr	r2, [r7, #4]
100425e0:	2380      	movs	r3, #128	@ 0x80
100425e2:	009b      	lsls	r3, r3, #2
100425e4:	4013      	ands	r3, r2
}
100425e6:	0018      	movs	r0, r3
100425e8:	46bd      	mov	sp, r7
100425ea:	b002      	add	sp, #8
100425ec:	bd80      	pop	{r7, pc}

100425ee <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
100425ee:	b580      	push	{r7, lr}
100425f0:	b082      	sub	sp, #8
100425f2:	af00      	add	r7, sp, #0
100425f4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
100425f6:	687a      	ldr	r2, [r7, #4]
100425f8:	2380      	movs	r3, #128	@ 0x80
100425fa:	011b      	lsls	r3, r3, #4
100425fc:	4013      	ands	r3, r2
}
100425fe:	0018      	movs	r0, r3
10042600:	46bd      	mov	sp, r7
10042602:	b002      	add	sp, #8
10042604:	bd80      	pop	{r7, pc}

10042606 <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
10042606:	b580      	push	{r7, lr}
10042608:	b082      	sub	sp, #8
1004260a:	af00      	add	r7, sp, #0
1004260c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
1004260e:	687b      	ldr	r3, [r7, #4]
10042610:	0fdb      	lsrs	r3, r3, #31
10042612:	07db      	lsls	r3, r3, #31
}
10042614:	0018      	movs	r0, r3
10042616:	46bd      	mov	sp, r7
10042618:	b002      	add	sp, #8
1004261a:	bd80      	pop	{r7, pc}

1004261c <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
1004261c:	b580      	push	{r7, lr}
1004261e:	b082      	sub	sp, #8
10042620:	af00      	add	r7, sp, #0
10042622:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
10042624:	687b      	ldr	r3, [r7, #4]
10042626:	2240      	movs	r2, #64	@ 0x40
10042628:	4013      	ands	r3, r2
}
1004262a:	0018      	movs	r0, r3
1004262c:	46bd      	mov	sp, r7
1004262e:	b002      	add	sp, #8
10042630:	bd80      	pop	{r7, pc}

10042632 <BLEPLAT_CNTR_PacketClrIncChan>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042632:	b580      	push	{r7, lr}
10042634:	b082      	sub	sp, #8
10042636:	af00      	add	r7, sp, #0
10042638:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
1004263a:	687b      	ldr	r3, [r7, #4]
1004263c:	0018      	movs	r0, r3
1004263e:	f7ff fdef 	bl	10042220 <LL_RADIO_IncrementerChannel_Disable>
}
10042642:	46c0      	nop			@ (mov r8, r8)
10042644:	46bd      	mov	sp, r7
10042646:	b002      	add	sp, #8
10042648:	bd80      	pop	{r7, pc}

1004264a <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004264a:	b580      	push	{r7, lr}
1004264c:	b082      	sub	sp, #8
1004264e:	af00      	add	r7, sp, #0
10042650:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10042652:	687b      	ldr	r3, [r7, #4]
10042654:	2100      	movs	r1, #0
10042656:	0018      	movs	r0, r3
10042658:	f7ff fda4 	bl	100421a4 <LL_RADIO_SetCalibrationRequest>
}
1004265c:	46c0      	nop			@ (mov r8, r8)
1004265e:	46bd      	mov	sp, r7
10042660:	b002      	add	sp, #8
10042662:	bd80      	pop	{r7, pc}

10042664 <BLEPLAT_CNTR_PacketInitTo0>:
{
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
}

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042664:	b580      	push	{r7, lr}
10042666:	b082      	sub	sp, #8
10042668:	af00      	add	r7, sp, #0
1004266a:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
1004266c:	687b      	ldr	r3, [r7, #4]
1004266e:	2210      	movs	r2, #16
10042670:	2100      	movs	r1, #0
10042672:	0018      	movs	r0, r3
10042674:	f00c fca4 	bl	1004efc0 <memset>
}
10042678:	46c0      	nop			@ (mov r8, r8)
1004267a:	46bd      	mov	sp, r7
1004267c:	b002      	add	sp, #8
1004267e:	bd80      	pop	{r7, pc}

10042680 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042680:	b580      	push	{r7, lr}
10042682:	b082      	sub	sp, #8
10042684:	af00      	add	r7, sp, #0
10042686:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042688:	687b      	ldr	r3, [r7, #4]
1004268a:	2101      	movs	r1, #1
1004268c:	0018      	movs	r0, r3
1004268e:	f7ff fdb2 	bl	100421f6 <LL_RADIO_SetAdvertise>
}
10042692:	46c0      	nop			@ (mov r8, r8)
10042694:	46bd      	mov	sp, r7
10042696:	b002      	add	sp, #8
10042698:	bd80      	pop	{r7, pc}

1004269a <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
1004269a:	b580      	push	{r7, lr}
1004269c:	b082      	sub	sp, #8
1004269e:	af00      	add	r7, sp, #0
100426a0:	6078      	str	r0, [r7, #4]
100426a2:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
100426a4:	683a      	ldr	r2, [r7, #0]
100426a6:	687b      	ldr	r3, [r7, #4]
100426a8:	0011      	movs	r1, r2
100426aa:	0018      	movs	r0, r3
100426ac:	f7ff fe10 	bl	100422d0 <LL_RADIO_SetDataPointer>
}
100426b0:	46c0      	nop			@ (mov r8, r8)
100426b2:	46bd      	mov	sp, r7
100426b4:	b002      	add	sp, #8
100426b6:	bd80      	pop	{r7, pc}

100426b8 <BLEPLAT_CNTR_PacketSetIntDone>:
{
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
}

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100426b8:	b580      	push	{r7, lr}
100426ba:	b082      	sub	sp, #8
100426bc:	af00      	add	r7, sp, #0
100426be:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
100426c0:	687b      	ldr	r3, [r7, #4]
100426c2:	0018      	movs	r0, r3
100426c4:	f7ff fe64 	bl	10042390 <LL_RADIO_IntDone_Enable>
}
100426c8:	46c0      	nop			@ (mov r8, r8)
100426ca:	46bd      	mov	sp, r7
100426cc:	b002      	add	sp, #8
100426ce:	bd80      	pop	{r7, pc}

100426d0 <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100426d0:	b580      	push	{r7, lr}
100426d2:	b082      	sub	sp, #8
100426d4:	af00      	add	r7, sp, #0
100426d6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
100426d8:	687b      	ldr	r3, [r7, #4]
100426da:	0018      	movs	r0, r3
100426dc:	f7ff fe67 	bl	100423ae <LL_RADIO_IntRcvOk_Enable>
}
100426e0:	46c0      	nop			@ (mov r8, r8)
100426e2:	46bd      	mov	sp, r7
100426e4:	b002      	add	sp, #8
100426e6:	bd80      	pop	{r7, pc}

100426e8 <BLEPLAT_CNTR_PacketSetKeepsemareq>:
{
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
}

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100426e8:	b580      	push	{r7, lr}
100426ea:	b082      	sub	sp, #8
100426ec:	af00      	add	r7, sp, #0
100426ee:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100426f0:	687b      	ldr	r3, [r7, #4]
100426f2:	2101      	movs	r1, #1
100426f4:	0018      	movs	r0, r3
100426f6:	f7ff fd69 	bl	100421cc <LL_RADIO_SetKeepSemaRequest>
}
100426fa:	46c0      	nop			@ (mov r8, r8)
100426fc:	46bd      	mov	sp, r7
100426fe:	b002      	add	sp, #8
10042700:	bd80      	pop	{r7, pc}

10042702 <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
10042702:	b580      	push	{r7, lr}
10042704:	b082      	sub	sp, #8
10042706:	af00      	add	r7, sp, #0
10042708:	6078      	str	r0, [r7, #4]
1004270a:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
1004270c:	683a      	ldr	r2, [r7, #0]
1004270e:	687b      	ldr	r3, [r7, #4]
10042710:	0011      	movs	r1, r2
10042712:	0018      	movs	r0, r3
10042714:	f7ff fd38 	bl	10042188 <LL_RADIO_SetNextPointer>
}
10042718:	46c0      	nop			@ (mov r8, r8)
1004271a:	46bd      	mov	sp, r7
1004271c:	b002      	add	sp, #8
1004271e:	bd80      	pop	{r7, pc}

10042720 <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042720:	b580      	push	{r7, lr}
10042722:	b082      	sub	sp, #8
10042724:	af00      	add	r7, sp, #0
10042726:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10042728:	687b      	ldr	r3, [r7, #4]
1004272a:	2100      	movs	r1, #0
1004272c:	0018      	movs	r0, r3
1004272e:	f7ff fd87 	bl	10042240 <LL_RADIO_SetNextTxMode>
}
10042732:	46c0      	nop			@ (mov r8, r8)
10042734:	46bd      	mov	sp, r7
10042736:	b002      	add	sp, #8
10042738:	bd80      	pop	{r7, pc}

1004273a <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
1004273a:	b580      	push	{r7, lr}
1004273c:	b082      	sub	sp, #8
1004273e:	af00      	add	r7, sp, #0
10042740:	6078      	str	r0, [r7, #4]
10042742:	000a      	movs	r2, r1
10042744:	1cfb      	adds	r3, r7, #3
10042746:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
10042748:	46c0      	nop			@ (mov r8, r8)
1004274a:	46bd      	mov	sp, r7
1004274c:	b002      	add	sp, #8
1004274e:	bd80      	pop	{r7, pc}

10042750 <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042750:	b580      	push	{r7, lr}
10042752:	b082      	sub	sp, #8
10042754:	af00      	add	r7, sp, #0
10042756:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042758:	687b      	ldr	r3, [r7, #4]
1004275a:	2101      	movs	r1, #1
1004275c:	0018      	movs	r0, r3
1004275e:	f7ff fd6f 	bl	10042240 <LL_RADIO_SetNextTxMode>
}
10042762:	46c0      	nop			@ (mov r8, r8)
10042764:	46bd      	mov	sp, r7
10042766:	b002      	add	sp, #8
10042768:	bd80      	pop	{r7, pc}

1004276a <BLEPLAT_CNTR_PacketSetPllTrig>:
{
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
}

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004276a:	b580      	push	{r7, lr}
1004276c:	b082      	sub	sp, #8
1004276e:	af00      	add	r7, sp, #0
10042770:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042772:	687b      	ldr	r3, [r7, #4]
10042774:	2101      	movs	r1, #1
10042776:	0018      	movs	r0, r3
10042778:	f7ff fd14 	bl	100421a4 <LL_RADIO_SetCalibrationRequest>
}
1004277c:	46c0      	nop			@ (mov r8, r8)
1004277e:	46bd      	mov	sp, r7
10042780:	b002      	add	sp, #8
10042782:	bd80      	pop	{r7, pc}

10042784 <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042784:	b580      	push	{r7, lr}
10042786:	b082      	sub	sp, #8
10042788:	af00      	add	r7, sp, #0
1004278a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004278c:	687b      	ldr	r3, [r7, #4]
1004278e:	2101      	movs	r1, #1
10042790:	0018      	movs	r0, r3
10042792:	f7ff fd6d 	bl	10042270 <LL_RADIO_SetAllTableDataReady>
}
10042796:	46c0      	nop			@ (mov r8, r8)
10042798:	46bd      	mov	sp, r7
1004279a:	b002      	add	sp, #8
1004279c:	bd80      	pop	{r7, pc}

1004279e <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
1004279e:	b580      	push	{r7, lr}
100427a0:	b082      	sub	sp, #8
100427a2:	af00      	add	r7, sp, #0
100427a4:	6078      	str	r0, [r7, #4]
100427a6:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
100427a8:	683a      	ldr	r2, [r7, #0]
100427aa:	687b      	ldr	r3, [r7, #4]
100427ac:	0011      	movs	r1, r2
100427ae:	0018      	movs	r0, r3
100427b0:	f7ff fd9c 	bl	100422ec <LL_RADIO_SetTimer2Triggering>
}
100427b4:	46c0      	nop			@ (mov r8, r8)
100427b6:	46bd      	mov	sp, r7
100427b8:	b002      	add	sp, #8
100427ba:	bd80      	pop	{r7, pc}

100427bc <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100427bc:	b580      	push	{r7, lr}
100427be:	b082      	sub	sp, #8
100427c0:	af00      	add	r7, sp, #0
100427c2:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
100427c4:	687b      	ldr	r3, [r7, #4]
100427c6:	0018      	movs	r0, r3
100427c8:	f7ff fda3 	bl	10042312 <LL_RADIO_Timer2_Enable>
}
100427cc:	46c0      	nop			@ (mov r8, r8)
100427ce:	46bd      	mov	sp, r7
100427d0:	b002      	add	sp, #8
100427d2:	bd80      	pop	{r7, pc}

100427d4 <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100427d4:	b580      	push	{r7, lr}
100427d6:	b082      	sub	sp, #8
100427d8:	af00      	add	r7, sp, #0
100427da:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100427dc:	687b      	ldr	r3, [r7, #4]
100427de:	2101      	movs	r1, #1
100427e0:	0018      	movs	r0, r3
100427e2:	f7ff fdbd 	bl	10042360 <LL_RADIO_SetTrigDone>
}
100427e6:	46c0      	nop			@ (mov r8, r8)
100427e8:	46bd      	mov	sp, r7
100427ea:	b002      	add	sp, #8
100427ec:	bd80      	pop	{r7, pc}

100427ee <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100427ee:	b580      	push	{r7, lr}
100427f0:	b082      	sub	sp, #8
100427f2:	af00      	add	r7, sp, #0
100427f4:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100427f6:	687b      	ldr	r3, [r7, #4]
100427f8:	2101      	movs	r1, #1
100427fa:	0018      	movs	r0, r3
100427fc:	f7ff fd98 	bl	10042330 <LL_RADIO_SetTrigRcv>
}
10042800:	46c0      	nop			@ (mov r8, r8)
10042802:	46bd      	mov	sp, r7
10042804:	b002      	add	sp, #8
10042806:	bd80      	pop	{r7, pc}

10042808 <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042808:	b580      	push	{r7, lr}
1004280a:	b082      	sub	sp, #8
1004280c:	af00      	add	r7, sp, #0
1004280e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042810:	687b      	ldr	r3, [r7, #4]
10042812:	2101      	movs	r1, #1
10042814:	0018      	movs	r0, r3
10042816:	f7ff fd43 	bl	100422a0 <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004281a:	687b      	ldr	r3, [r7, #4]
1004281c:	2101      	movs	r1, #1
1004281e:	0018      	movs	r0, r3
10042820:	f7ff fd26 	bl	10042270 <LL_RADIO_SetAllTableDataReady>
}
10042824:	46c0      	nop			@ (mov r8, r8)
10042826:	46bd      	mov	sp, r7
10042828:	b002      	add	sp, #8
1004282a:	bd80      	pop	{r7, pc}

1004282c <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
1004282c:	b580      	push	{r7, lr}
1004282e:	b082      	sub	sp, #8
10042830:	af00      	add	r7, sp, #0
10042832:	6078      	str	r0, [r7, #4]
10042834:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
10042836:	683b      	ldr	r3, [r7, #0]
10042838:	031b      	lsls	r3, r3, #12
1004283a:	0b1b      	lsrs	r3, r3, #12
1004283c:	0018      	movs	r0, r3
1004283e:	f7ff fa71 	bl	10041d24 <LL_RADIO_SetReceiveWindowTimeout>
}
10042842:	46c0      	nop			@ (mov r8, r8)
10042844:	46bd      	mov	sp, r7
10042846:	b002      	add	sp, #8
10042848:	bd80      	pop	{r7, pc}

1004284a <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
1004284a:	b580      	push	{r7, lr}
1004284c:	b082      	sub	sp, #8
1004284e:	af00      	add	r7, sp, #0
10042850:	0002      	movs	r2, r0
10042852:	6039      	str	r1, [r7, #0]
10042854:	1dfb      	adds	r3, r7, #7
10042856:	701a      	strb	r2, [r3, #0]
    if(enable)
10042858:	683b      	ldr	r3, [r7, #0]
1004285a:	2b00      	cmp	r3, #0
1004285c:	d005      	beq.n	1004286a <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
1004285e:	1dfb      	adds	r3, r7, #7
10042860:	781b      	ldrb	r3, [r3, #0]
10042862:	0018      	movs	r0, r3
10042864:	f7ff fa78 	bl	10041d58 <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
10042868:	e004      	b.n	10042874 <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
1004286a:	1dfb      	adds	r3, r7, #7
1004286c:	781b      	ldrb	r3, [r3, #0]
1004286e:	0018      	movs	r0, r3
10042870:	f7ff fa90 	bl	10041d94 <LL_RADIO_RadioCommandList_Disable>
}
10042874:	46c0      	nop			@ (mov r8, r8)
10042876:	46bd      	mov	sp, r7
10042878:	b002      	add	sp, #8
1004287a:	bd80      	pop	{r7, pc}

1004287c <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
1004287c:	b580      	push	{r7, lr}
1004287e:	b082      	sub	sp, #8
10042880:	af00      	add	r7, sp, #0
10042882:	0002      	movs	r2, r0
10042884:	1dfb      	adds	r3, r7, #7
10042886:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
10042888:	1dfb      	adds	r3, r7, #7
1004288a:	781b      	ldrb	r3, [r3, #0]
1004288c:	225c      	movs	r2, #92	@ 0x5c
1004288e:	4353      	muls	r3, r2
10042890:	4a08      	ldr	r2, [pc, #32]	@ (100428b4 <BLEPLAT_CNTR_SmInitTo0+0x38>)
10042892:	4694      	mov	ip, r2
10042894:	4463      	add	r3, ip
10042896:	225c      	movs	r2, #92	@ 0x5c
10042898:	2100      	movs	r1, #0
1004289a:	0018      	movs	r0, r3
1004289c:	f00c fb90 	bl	1004efc0 <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
100428a0:	1dfb      	adds	r3, r7, #7
100428a2:	781b      	ldrb	r3, [r3, #0]
100428a4:	2101      	movs	r1, #1
100428a6:	0018      	movs	r0, r3
100428a8:	f7ff ffcf 	bl	1004284a <BLEPLAT_CNTR_SmEnRadioConfig>
}
100428ac:	46c0      	nop			@ (mov r8, r8)
100428ae:	46bd      	mov	sp, r7
100428b0:	b002      	add	sp, #8
100428b2:	bd80      	pop	{r7, pc}
100428b4:	200000dc 	.word	0x200000dc

100428b8 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
100428b8:	b580      	push	{r7, lr}
100428ba:	b082      	sub	sp, #8
100428bc:	af00      	add	r7, sp, #0
100428be:	0002      	movs	r2, r0
100428c0:	6039      	str	r1, [r7, #0]
100428c2:	1dfb      	adds	r3, r7, #7
100428c4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
100428c6:	683a      	ldr	r2, [r7, #0]
100428c8:	1dfb      	adds	r3, r7, #7
100428ca:	781b      	ldrb	r3, [r3, #0]
100428cc:	0011      	movs	r1, r2
100428ce:	0018      	movs	r0, r3
100428d0:	f7ff fb6e 	bl	10041fb0 <LL_RADIO_SetAccessAddress>
}
100428d4:	46c0      	nop			@ (mov r8, r8)
100428d6:	46bd      	mov	sp, r7
100428d8:	b002      	add	sp, #8
100428da:	bd80      	pop	{r7, pc}

100428dc <BLEPLAT_CNTR_SmSetCrcInit>:
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
}

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
100428dc:	b580      	push	{r7, lr}
100428de:	b082      	sub	sp, #8
100428e0:	af00      	add	r7, sp, #0
100428e2:	0002      	movs	r2, r0
100428e4:	6039      	str	r1, [r7, #0]
100428e6:	1dfb      	adds	r3, r7, #7
100428e8:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
100428ea:	683a      	ldr	r2, [r7, #0]
100428ec:	1dfb      	adds	r3, r7, #7
100428ee:	781b      	ldrb	r3, [r3, #0]
100428f0:	0011      	movs	r1, r2
100428f2:	0018      	movs	r0, r3
100428f4:	f7ff fb7a 	bl	10041fec <LL_RADIO_SetCRCInitializationValue>
}
100428f8:	46c0      	nop			@ (mov r8, r8)
100428fa:	46bd      	mov	sp, r7
100428fc:	b002      	add	sp, #8
100428fe:	bd80      	pop	{r7, pc}

10042900 <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
10042900:	b580      	push	{r7, lr}
10042902:	b082      	sub	sp, #8
10042904:	af00      	add	r7, sp, #0
10042906:	0002      	movs	r2, r0
10042908:	1dfb      	adds	r3, r7, #7
1004290a:	701a      	strb	r2, [r3, #0]
1004290c:	1dbb      	adds	r3, r7, #6
1004290e:	1c0a      	adds	r2, r1, #0
10042910:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
10042912:	1dbb      	adds	r3, r7, #6
10042914:	781a      	ldrb	r2, [r3, #0]
10042916:	1dfb      	adds	r3, r7, #7
10042918:	781b      	ldrb	r3, [r3, #0]
1004291a:	0011      	movs	r1, r2
1004291c:	0018      	movs	r0, r3
1004291e:	f7ff fb89 	bl	10042034 <LL_RADIO_SetMaximumReceiveLength>
}
10042922:	46c0      	nop			@ (mov r8, r8)
10042924:	46bd      	mov	sp, r7
10042926:	b002      	add	sp, #8
10042928:	bd80      	pop	{r7, pc}

1004292a <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
1004292a:	b580      	push	{r7, lr}
1004292c:	b082      	sub	sp, #8
1004292e:	af00      	add	r7, sp, #0
10042930:	0002      	movs	r2, r0
10042932:	1dfb      	adds	r3, r7, #7
10042934:	701a      	strb	r2, [r3, #0]
10042936:	1dbb      	adds	r3, r7, #6
10042938:	1c0a      	adds	r2, r1, #0
1004293a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
1004293c:	1dbb      	adds	r3, r7, #6
1004293e:	781a      	ldrb	r2, [r3, #0]
10042940:	1dfb      	adds	r3, r7, #7
10042942:	781b      	ldrb	r3, [r3, #0]
10042944:	0011      	movs	r1, r2
10042946:	0018      	movs	r0, r3
10042948:	f7ff fbf6 	bl	10042138 <LL_RADIO_SetHopIncrement>
}
1004294c:	46c0      	nop			@ (mov r8, r8)
1004294e:	46bd      	mov	sp, r7
10042950:	b002      	add	sp, #8
10042952:	bd80      	pop	{r7, pc}

10042954 <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
10042954:	b580      	push	{r7, lr}
10042956:	b082      	sub	sp, #8
10042958:	af00      	add	r7, sp, #0
1004295a:	0002      	movs	r2, r0
1004295c:	1dfb      	adds	r3, r7, #7
1004295e:	701a      	strb	r2, [r3, #0]
10042960:	1dbb      	adds	r3, r7, #6
10042962:	1c0a      	adds	r2, r1, #0
10042964:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
10042966:	1dbb      	adds	r3, r7, #6
10042968:	781a      	ldrb	r2, [r3, #0]
1004296a:	1dfb      	adds	r3, r7, #7
1004296c:	781b      	ldrb	r3, [r3, #0]
1004296e:	0011      	movs	r1, r2
10042970:	0018      	movs	r0, r3
10042972:	f7ff fa69 	bl	10041e48 <LL_RADIO_SetRemapChannel>
}
10042976:	46c0      	nop			@ (mov r8, r8)
10042978:	46bd      	mov	sp, r7
1004297a:	b002      	add	sp, #8
1004297c:	bd80      	pop	{r7, pc}

1004297e <BLEPLAT_CNTR_SmSetRxMode>:
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
}

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
1004297e:	b580      	push	{r7, lr}
10042980:	b082      	sub	sp, #8
10042982:	af00      	add	r7, sp, #0
10042984:	0002      	movs	r2, r0
10042986:	1dfb      	adds	r3, r7, #7
10042988:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
1004298a:	1dfb      	adds	r3, r7, #7
1004298c:	781b      	ldrb	r3, [r3, #0]
1004298e:	0018      	movs	r0, r3
10042990:	f7ff fa3c 	bl	10041e0c <LL_RADIO_TxMode_Disable>
}
10042994:	46c0      	nop			@ (mov r8, r8)
10042996:	46bd      	mov	sp, r7
10042998:	b002      	add	sp, #8
1004299a:	bd80      	pop	{r7, pc}

1004299c <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004299c:	b580      	push	{r7, lr}
1004299e:	b082      	sub	sp, #8
100429a0:	af00      	add	r7, sp, #0
100429a2:	0002      	movs	r2, r0
100429a4:	6039      	str	r1, [r7, #0]
100429a6:	1dfb      	adds	r3, r7, #7
100429a8:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
100429aa:	683a      	ldr	r2, [r7, #0]
100429ac:	1dfb      	adds	r3, r7, #7
100429ae:	781b      	ldrb	r3, [r3, #0]
100429b0:	0011      	movs	r1, r2
100429b2:	0018      	movs	r0, r3
100429b4:	f7ff fade 	bl	10041f74 <LL_RADIO_SetRcvPoint>
}
100429b8:	46c0      	nop			@ (mov r8, r8)
100429ba:	46bd      	mov	sp, r7
100429bc:	b002      	add	sp, #8
100429be:	bd80      	pop	{r7, pc}

100429c0 <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
100429c0:	b580      	push	{r7, lr}
100429c2:	b082      	sub	sp, #8
100429c4:	af00      	add	r7, sp, #0
100429c6:	0002      	movs	r2, r0
100429c8:	1dfb      	adds	r3, r7, #7
100429ca:	701a      	strb	r2, [r3, #0]
100429cc:	1dbb      	adds	r3, r7, #6
100429ce:	1c0a      	adds	r2, r1, #0
100429d0:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
100429d2:	1dbb      	adds	r3, r7, #6
100429d4:	781a      	ldrb	r2, [r3, #0]
100429d6:	1dfb      	adds	r3, r7, #7
100429d8:	781b      	ldrb	r3, [r3, #0]
100429da:	0011      	movs	r1, r2
100429dc:	0018      	movs	r0, r3
100429de:	f7ff fa83 	bl	10041ee8 <LL_RADIO_SetReceptionPhy>
}
100429e2:	46c0      	nop			@ (mov r8, r8)
100429e4:	46bd      	mov	sp, r7
100429e6:	b002      	add	sp, #8
100429e8:	bd80      	pop	{r7, pc}

100429ea <BLEPLAT_CNTR_SmSetTxMode>:
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
}

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
100429ea:	b580      	push	{r7, lr}
100429ec:	b082      	sub	sp, #8
100429ee:	af00      	add	r7, sp, #0
100429f0:	0002      	movs	r2, r0
100429f2:	1dfb      	adds	r3, r7, #7
100429f4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
100429f6:	1dfb      	adds	r3, r7, #7
100429f8:	781b      	ldrb	r3, [r3, #0]
100429fa:	0018      	movs	r0, r3
100429fc:	f7ff f9e8 	bl	10041dd0 <LL_RADIO_TxMode_Enable>
}
10042a00:	46c0      	nop			@ (mov r8, r8)
10042a02:	46bd      	mov	sp, r7
10042a04:	b002      	add	sp, #8
10042a06:	bd80      	pop	{r7, pc}

10042a08 <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042a08:	b580      	push	{r7, lr}
10042a0a:	b082      	sub	sp, #8
10042a0c:	af00      	add	r7, sp, #0
10042a0e:	0002      	movs	r2, r0
10042a10:	6039      	str	r1, [r7, #0]
10042a12:	1dfb      	adds	r3, r7, #7
10042a14:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10042a16:	683a      	ldr	r2, [r7, #0]
10042a18:	1dfb      	adds	r3, r7, #7
10042a1a:	781b      	ldrb	r3, [r3, #0]
10042a1c:	0011      	movs	r1, r2
10042a1e:	0018      	movs	r0, r3
10042a20:	f7ff fa8a 	bl	10041f38 <LL_RADIO_SetTxPoint>
}
10042a24:	46c0      	nop			@ (mov r8, r8)
10042a26:	46bd      	mov	sp, r7
10042a28:	b002      	add	sp, #8
10042a2a:	bd80      	pop	{r7, pc}

10042a2c <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10042a2c:	b580      	push	{r7, lr}
10042a2e:	b082      	sub	sp, #8
10042a30:	af00      	add	r7, sp, #0
10042a32:	0002      	movs	r2, r0
10042a34:	1dfb      	adds	r3, r7, #7
10042a36:	701a      	strb	r2, [r3, #0]
10042a38:	1dbb      	adds	r3, r7, #6
10042a3a:	1c0a      	adds	r2, r1, #0
10042a3c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10042a3e:	1dbb      	adds	r3, r7, #6
10042a40:	781a      	ldrb	r2, [r3, #0]
10042a42:	1dfb      	adds	r3, r7, #7
10042a44:	781b      	ldrb	r3, [r3, #0]
10042a46:	0011      	movs	r1, r2
10042a48:	0018      	movs	r0, r3
10042a4a:	f7ff fa25 	bl	10041e98 <LL_RADIO_SetTransmissionPhy>
}
10042a4e:	46c0      	nop			@ (mov r8, r8)
10042a50:	46bd      	mov	sp, r7
10042a52:	b002      	add	sp, #8
10042a54:	bd80      	pop	{r7, pc}

10042a56 <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
10042a56:	b580      	push	{r7, lr}
10042a58:	b082      	sub	sp, #8
10042a5a:	af00      	add	r7, sp, #0
10042a5c:	0002      	movs	r2, r0
10042a5e:	1dfb      	adds	r3, r7, #7
10042a60:	701a      	strb	r2, [r3, #0]
10042a62:	1dbb      	adds	r3, r7, #6
10042a64:	1c0a      	adds	r2, r1, #0
10042a66:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  if(paLevel == HP_PA_LEVEL)
10042a68:	1dbb      	adds	r3, r7, #6
10042a6a:	781b      	ldrb	r3, [r3, #0]
10042a6c:	2b20      	cmp	r3, #32
10042a6e:	d108      	bne.n	10042a82 <BLEPLAT_CNTR_SmSetTxPwr+0x2c>
  {
    LL_RADIO_TxHp_Enable(smNo);
10042a70:	1dfb      	adds	r3, r7, #7
10042a72:	781b      	ldrb	r3, [r3, #0]
10042a74:	0018      	movs	r0, r3
10042a76:	f7ff faff 	bl	10042078 <LL_RADIO_TxHp_Enable>
    paLevel = MAX_PA_LEVEL;
10042a7a:	1dbb      	adds	r3, r7, #6
10042a7c:	221f      	movs	r2, #31
10042a7e:	701a      	strb	r2, [r3, #0]
10042a80:	e004      	b.n	10042a8c <BLEPLAT_CNTR_SmSetTxPwr+0x36>
  }
  else
  {
    LL_RADIO_TxHp_Disable(smNo);
10042a82:	1dfb      	adds	r3, r7, #7
10042a84:	781b      	ldrb	r3, [r3, #0]
10042a86:	0018      	movs	r0, r3
10042a88:	f7ff fb14 	bl	100420b4 <LL_RADIO_TxHp_Disable>
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
10042a8c:	1dbb      	adds	r3, r7, #6
10042a8e:	781a      	ldrb	r2, [r3, #0]
10042a90:	1dfb      	adds	r3, r7, #7
10042a92:	781b      	ldrb	r3, [r3, #0]
10042a94:	0011      	movs	r1, r2
10042a96:	0018      	movs	r0, r3
10042a98:	f7ff fb2a 	bl	100420f0 <LL_RADIO_SetPAPower>
}
10042a9c:	46c0      	nop			@ (mov r8, r8)
10042a9e:	46bd      	mov	sp, r7
10042aa0:	b002      	add	sp, #8
10042aa2:	bd80      	pop	{r7, pc}

10042aa4 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10042aa4:	4810      	ldr	r0, [pc, #64]	@ (10042ae8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10042aa6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10042aa8:	f002 ff0c 	bl	100458c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10042aac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10042aae:	e003      	b.n	10042ab8 <LoopCopyDataInit>

10042ab0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10042ab0:	4b0e      	ldr	r3, [pc, #56]	@ (10042aec <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10042ab2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10042ab4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10042ab6:	3104      	adds	r1, #4

10042ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10042ab8:	480d      	ldr	r0, [pc, #52]	@ (10042af0 <LoopForever+0xa>)
  ldr  r3, =_edata
10042aba:	4b0e      	ldr	r3, [pc, #56]	@ (10042af4 <LoopForever+0xe>)
  adds  r2, r0, r1
10042abc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10042abe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10042ac0:	d3f6      	bcc.n	10042ab0 <CopyDataInit>
  ldr  r2, =_sbss
10042ac2:	4a0d      	ldr	r2, [pc, #52]	@ (10042af8 <LoopForever+0x12>)
  b  LoopFillZerobss
10042ac4:	e002      	b.n	10042acc <LoopFillZerobss>

10042ac6 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10042ac6:	2300      	movs	r3, #0
  str  r3, [r2]
10042ac8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10042aca:	3204      	adds	r2, #4

10042acc <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10042acc:	4b0b      	ldr	r3, [pc, #44]	@ (10042afc <LoopForever+0x16>)
  cmp  r2, r3
10042ace:	429a      	cmp	r2, r3
  bcc  FillZerobss
10042ad0:	d3f9      	bcc.n	10042ac6 <FillZerobss>
  ldr  r2, =_sbssblue
10042ad2:	4a0b      	ldr	r2, [pc, #44]	@ (10042b00 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10042ad4:	e002      	b.n	10042adc <LoopFillZeroBlueRam>

10042ad6 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10042ad6:	2300      	movs	r3, #0
  str  r3, [r2]
10042ad8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10042ada:	3204      	adds	r2, #4

10042adc <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10042adc:	4b09      	ldr	r3, [pc, #36]	@ (10042b04 <LoopForever+0x1e>)
  cmp  r2, r3
10042ade:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10042ae0:	d3f9      	bcc.n	10042ad6 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10042ae2:	f7fe f8bb 	bl	10040c5c <main>

10042ae6 <LoopForever>:

LoopForever:
    b LoopForever
10042ae6:	e7fe      	b.n	10042ae6 <LoopForever>
   ldr   r0, =_estack
10042ae8:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
10042aec:	1004ffd4 	.word	0x1004ffd4
  ldr  r0, =_sdata
10042af0:	20000cf4 	.word	0x20000cf4
  ldr  r3, =_edata
10042af4:	20000d70 	.word	0x20000d70
  ldr  r2, =_sbss
10042af8:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10042afc:	20000cf4 	.word	0x20000cf4
  ldr  r2, =_sbssblue
10042b00:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10042b04:	20000194 	.word	0x20000194

10042b08 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10042b08:	e7fe      	b.n	10042b08 <ADC_IRQHandler>

10042b0a <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
10042b0a:	b580      	push	{r7, lr}
10042b0c:	b082      	sub	sp, #8
10042b0e:	af00      	add	r7, sp, #0
10042b10:	0002      	movs	r2, r0
10042b12:	1dfb      	adds	r3, r7, #7
10042b14:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10042b16:	46c0      	nop			@ (mov r8, r8)
10042b18:	46bd      	mov	sp, r7
10042b1a:	b002      	add	sp, #8
10042b1c:	bd80      	pop	{r7, pc}

10042b1e <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10042b1e:	b580      	push	{r7, lr}
10042b20:	b082      	sub	sp, #8
10042b22:	af00      	add	r7, sp, #0
10042b24:	0002      	movs	r2, r0
10042b26:	1dfb      	adds	r3, r7, #7
10042b28:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10042b2a:	46c0      	nop			@ (mov r8, r8)
10042b2c:	46bd      	mov	sp, r7
10042b2e:	b002      	add	sp, #8
10042b30:	bd80      	pop	{r7, pc}

10042b32 <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10042b32:	b580      	push	{r7, lr}
10042b34:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10042b36:	46c0      	nop			@ (mov r8, r8)
10042b38:	46bd      	mov	sp, r7
10042b3a:	bd80      	pop	{r7, pc}

10042b3c <LL_APB2_GRP1_EnableClock>:
{
10042b3c:	b580      	push	{r7, lr}
10042b3e:	b084      	sub	sp, #16
10042b40:	af00      	add	r7, sp, #0
10042b42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10042b44:	4b07      	ldr	r3, [pc, #28]	@ (10042b64 <LL_APB2_GRP1_EnableClock+0x28>)
10042b46:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10042b48:	4b06      	ldr	r3, [pc, #24]	@ (10042b64 <LL_APB2_GRP1_EnableClock+0x28>)
10042b4a:	687a      	ldr	r2, [r7, #4]
10042b4c:	430a      	orrs	r2, r1
10042b4e:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10042b50:	4b04      	ldr	r3, [pc, #16]	@ (10042b64 <LL_APB2_GRP1_EnableClock+0x28>)
10042b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042b54:	687a      	ldr	r2, [r7, #4]
10042b56:	4013      	ands	r3, r2
10042b58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042b5a:	68fb      	ldr	r3, [r7, #12]
}
10042b5c:	46c0      	nop			@ (mov r8, r8)
10042b5e:	46bd      	mov	sp, r7
10042b60:	b004      	add	sp, #16
10042b62:	bd80      	pop	{r7, pc}
10042b64:	48400000 	.word	0x48400000

10042b68 <LL_APB2_GRP1_IsEnabledClock>:
{
10042b68:	b580      	push	{r7, lr}
10042b6a:	b082      	sub	sp, #8
10042b6c:	af00      	add	r7, sp, #0
10042b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10042b70:	4b06      	ldr	r3, [pc, #24]	@ (10042b8c <LL_APB2_GRP1_IsEnabledClock+0x24>)
10042b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042b74:	687a      	ldr	r2, [r7, #4]
10042b76:	4013      	ands	r3, r2
10042b78:	687a      	ldr	r2, [r7, #4]
10042b7a:	429a      	cmp	r2, r3
10042b7c:	d101      	bne.n	10042b82 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10042b7e:	2301      	movs	r3, #1
10042b80:	e000      	b.n	10042b84 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10042b82:	2300      	movs	r3, #0
}
10042b84:	0018      	movs	r0, r3
10042b86:	46bd      	mov	sp, r7
10042b88:	b002      	add	sp, #8
10042b8a:	bd80      	pop	{r7, pc}
10042b8c:	48400000 	.word	0x48400000

10042b90 <LL_APB2_GRP1_ForceReset>:
{
10042b90:	b580      	push	{r7, lr}
10042b92:	b082      	sub	sp, #8
10042b94:	af00      	add	r7, sp, #0
10042b96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10042b98:	4b04      	ldr	r3, [pc, #16]	@ (10042bac <LL_APB2_GRP1_ForceReset+0x1c>)
10042b9a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042b9c:	4b03      	ldr	r3, [pc, #12]	@ (10042bac <LL_APB2_GRP1_ForceReset+0x1c>)
10042b9e:	687a      	ldr	r2, [r7, #4]
10042ba0:	430a      	orrs	r2, r1
10042ba2:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042ba4:	46c0      	nop			@ (mov r8, r8)
10042ba6:	46bd      	mov	sp, r7
10042ba8:	b002      	add	sp, #8
10042baa:	bd80      	pop	{r7, pc}
10042bac:	48400000 	.word	0x48400000

10042bb0 <LL_APB2_GRP1_ReleaseReset>:
{
10042bb0:	b580      	push	{r7, lr}
10042bb2:	b082      	sub	sp, #8
10042bb4:	af00      	add	r7, sp, #0
10042bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10042bb8:	4b05      	ldr	r3, [pc, #20]	@ (10042bd0 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042bbc:	687b      	ldr	r3, [r7, #4]
10042bbe:	43d9      	mvns	r1, r3
10042bc0:	4b03      	ldr	r3, [pc, #12]	@ (10042bd0 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042bc2:	400a      	ands	r2, r1
10042bc4:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042bc6:	46c0      	nop			@ (mov r8, r8)
10042bc8:	46bd      	mov	sp, r7
10042bca:	b002      	add	sp, #8
10042bcc:	bd80      	pop	{r7, pc}
10042bce:	46c0      	nop			@ (mov r8, r8)
10042bd0:	48400000 	.word	0x48400000

10042bd4 <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
10042bd4:	b580      	push	{r7, lr}
10042bd6:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10042bd8:	2001      	movs	r0, #1
10042bda:	f7ff ffc5 	bl	10042b68 <LL_APB2_GRP1_IsEnabledClock>
10042bde:	1e03      	subs	r3, r0, #0
10042be0:	d108      	bne.n	10042bf4 <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
10042be2:	2001      	movs	r0, #1
10042be4:	f7ff ffd4 	bl	10042b90 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
10042be8:	2001      	movs	r0, #1
10042bea:	f7ff ffe1 	bl	10042bb0 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
10042bee:	2001      	movs	r0, #1
10042bf0:	f7ff ffa4 	bl	10042b3c <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
10042bf4:	2300      	movs	r3, #0
}
10042bf6:	0018      	movs	r0, r3
10042bf8:	46bd      	mov	sp, r7
10042bfa:	bd80      	pop	{r7, pc}

10042bfc <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
10042bfc:	b590      	push	{r4, r7, lr}
10042bfe:	b087      	sub	sp, #28
10042c00:	af00      	add	r7, sp, #0
10042c02:	60f8      	str	r0, [r7, #12]
10042c04:	60b9      	str	r1, [r7, #8]
10042c06:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
10042c08:	4b31      	ldr	r3, [pc, #196]	@ (10042cd0 <HW_AES_Encrypt+0xd4>)
10042c0a:	781b      	ldrb	r3, [r3, #0]
10042c0c:	b2db      	uxtb	r3, r3
10042c0e:	3301      	adds	r3, #1
10042c10:	b2da      	uxtb	r2, r3
10042c12:	4b2f      	ldr	r3, [pc, #188]	@ (10042cd0 <HW_AES_Encrypt+0xd4>)
10042c14:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
10042c16:	2417      	movs	r4, #23
10042c18:	193b      	adds	r3, r7, r4
10042c1a:	4a2d      	ldr	r2, [pc, #180]	@ (10042cd0 <HW_AES_Encrypt+0xd4>)
10042c1c:	7812      	ldrb	r2, [r2, #0]
10042c1e:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
10042c20:	23c0      	movs	r3, #192	@ 0xc0
10042c22:	05db      	lsls	r3, r3, #23
10042c24:	68ba      	ldr	r2, [r7, #8]
10042c26:	6812      	ldr	r2, [r2, #0]
10042c28:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
10042c2a:	68bb      	ldr	r3, [r7, #8]
10042c2c:	1d1a      	adds	r2, r3, #4
10042c2e:	23c0      	movs	r3, #192	@ 0xc0
10042c30:	05db      	lsls	r3, r3, #23
10042c32:	6812      	ldr	r2, [r2, #0]
10042c34:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
10042c36:	68bb      	ldr	r3, [r7, #8]
10042c38:	3308      	adds	r3, #8
10042c3a:	001a      	movs	r2, r3
10042c3c:	23c0      	movs	r3, #192	@ 0xc0
10042c3e:	05db      	lsls	r3, r3, #23
10042c40:	6812      	ldr	r2, [r2, #0]
10042c42:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
10042c44:	68bb      	ldr	r3, [r7, #8]
10042c46:	330c      	adds	r3, #12
10042c48:	001a      	movs	r2, r3
10042c4a:	23c0      	movs	r3, #192	@ 0xc0
10042c4c:	05db      	lsls	r3, r3, #23
10042c4e:	6812      	ldr	r2, [r2, #0]
10042c50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
10042c52:	23c0      	movs	r3, #192	@ 0xc0
10042c54:	05db      	lsls	r3, r3, #23
10042c56:	68fa      	ldr	r2, [r7, #12]
10042c58:	6812      	ldr	r2, [r2, #0]
10042c5a:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
10042c5c:	68fb      	ldr	r3, [r7, #12]
10042c5e:	1d1a      	adds	r2, r3, #4
10042c60:	23c0      	movs	r3, #192	@ 0xc0
10042c62:	05db      	lsls	r3, r3, #23
10042c64:	6812      	ldr	r2, [r2, #0]
10042c66:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
10042c68:	68fb      	ldr	r3, [r7, #12]
10042c6a:	3308      	adds	r3, #8
10042c6c:	001a      	movs	r2, r3
10042c6e:	23c0      	movs	r3, #192	@ 0xc0
10042c70:	05db      	lsls	r3, r3, #23
10042c72:	6812      	ldr	r2, [r2, #0]
10042c74:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
10042c76:	68fb      	ldr	r3, [r7, #12]
10042c78:	330c      	adds	r3, #12
10042c7a:	001a      	movs	r2, r3
10042c7c:	23c0      	movs	r3, #192	@ 0xc0
10042c7e:	05db      	lsls	r3, r3, #23
10042c80:	6812      	ldr	r2, [r2, #0]
10042c82:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
10042c84:	f000 f826 	bl	10042cd4 <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
10042c88:	23c0      	movs	r3, #192	@ 0xc0
10042c8a:	05db      	lsls	r3, r3, #23
10042c8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10042c8e:	687b      	ldr	r3, [r7, #4]
10042c90:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
10042c92:	23c0      	movs	r3, #192	@ 0xc0
10042c94:	05da      	lsls	r2, r3, #23
10042c96:	687b      	ldr	r3, [r7, #4]
10042c98:	3304      	adds	r3, #4
10042c9a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
10042c9c:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
10042c9e:	23c0      	movs	r3, #192	@ 0xc0
10042ca0:	05da      	lsls	r2, r3, #23
10042ca2:	687b      	ldr	r3, [r7, #4]
10042ca4:	3308      	adds	r3, #8
10042ca6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10042ca8:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
10042caa:	23c0      	movs	r3, #192	@ 0xc0
10042cac:	05da      	lsls	r2, r3, #23
10042cae:	687b      	ldr	r3, [r7, #4]
10042cb0:	330c      	adds	r3, #12
10042cb2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
10042cb4:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
10042cb6:	4b06      	ldr	r3, [pc, #24]	@ (10042cd0 <HW_AES_Encrypt+0xd4>)
10042cb8:	781b      	ldrb	r3, [r3, #0]
10042cba:	b2db      	uxtb	r3, r3
10042cbc:	193a      	adds	r2, r7, r4
10042cbe:	7812      	ldrb	r2, [r2, #0]
10042cc0:	429a      	cmp	r2, r3
10042cc2:	d1a8      	bne.n	10042c16 <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
10042cc4:	2300      	movs	r3, #0
}
10042cc6:	0018      	movs	r0, r3
10042cc8:	46bd      	mov	sp, r7
10042cca:	b007      	add	sp, #28
10042ccc:	bd90      	pop	{r4, r7, pc}
10042cce:	46c0      	nop			@ (mov r8, r8)
10042cd0:	20000380 	.word	0x20000380

10042cd4 <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
10042cd4:	b580      	push	{r7, lr}
10042cd6:	b082      	sub	sp, #8
10042cd8:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
10042cda:	1dfb      	adds	r3, r7, #7
10042cdc:	2264      	movs	r2, #100	@ 0x64
10042cde:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
10042ce0:	23c0      	movs	r3, #192	@ 0xc0
10042ce2:	05db      	lsls	r3, r3, #23
10042ce4:	0018      	movs	r0, r3
10042ce6:	f000 f81c 	bl	10042d22 <LL_AES_StartManualEncription>
    do
    {
        i--;
10042cea:	1dfb      	adds	r3, r7, #7
10042cec:	781b      	ldrb	r3, [r3, #0]
10042cee:	b2db      	uxtb	r3, r3
10042cf0:	3b01      	subs	r3, #1
10042cf2:	b2da      	uxtb	r2, r3
10042cf4:	1dfb      	adds	r3, r7, #7
10042cf6:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
10042cf8:	23c0      	movs	r3, #192	@ 0xc0
10042cfa:	05db      	lsls	r3, r3, #23
10042cfc:	0018      	movs	r0, r3
10042cfe:	f000 f81e 	bl	10042d3e <LL_AES_IsBusy>
10042d02:	1e03      	subs	r3, r0, #0
10042d04:	d005      	beq.n	10042d12 <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
10042d06:	1dfb      	adds	r3, r7, #7
10042d08:	781b      	ldrb	r3, [r3, #0]
10042d0a:	b2db      	uxtb	r3, r3
10042d0c:	2b00      	cmp	r3, #0
10042d0e:	d1ec      	bne.n	10042cea <HW_AES_Start+0x16>
10042d10:	e000      	b.n	10042d14 <HW_AES_Start+0x40>
            break;
10042d12:	46c0      	nop			@ (mov r8, r8)

    return i;
10042d14:	1dfb      	adds	r3, r7, #7
10042d16:	781b      	ldrb	r3, [r3, #0]
10042d18:	b2db      	uxtb	r3, r3
}
10042d1a:	0018      	movs	r0, r3
10042d1c:	46bd      	mov	sp, r7
10042d1e:	b002      	add	sp, #8
10042d20:	bd80      	pop	{r7, pc}

10042d22 <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
10042d22:	b580      	push	{r7, lr}
10042d24:	b082      	sub	sp, #8
10042d26:	af00      	add	r7, sp, #0
10042d28:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
10042d2a:	687b      	ldr	r3, [r7, #4]
10042d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10042d2e:	2201      	movs	r2, #1
10042d30:	431a      	orrs	r2, r3
10042d32:	687b      	ldr	r3, [r7, #4]
10042d34:	659a      	str	r2, [r3, #88]	@ 0x58
}
10042d36:	46c0      	nop			@ (mov r8, r8)
10042d38:	46bd      	mov	sp, r7
10042d3a:	b002      	add	sp, #8
10042d3c:	bd80      	pop	{r7, pc}

10042d3e <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
10042d3e:	b580      	push	{r7, lr}
10042d40:	b082      	sub	sp, #8
10042d42:	af00      	add	r7, sp, #0
10042d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
10042d46:	687b      	ldr	r3, [r7, #4]
10042d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10042d4a:	2201      	movs	r2, #1
10042d4c:	4013      	ands	r3, r2
10042d4e:	2b01      	cmp	r3, #1
10042d50:	d101      	bne.n	10042d56 <LL_AES_IsBusy+0x18>
10042d52:	2301      	movs	r3, #1
10042d54:	e000      	b.n	10042d58 <LL_AES_IsBusy+0x1a>
10042d56:	2300      	movs	r3, #0
}
10042d58:	0018      	movs	r0, r3
10042d5a:	46bd      	mov	sp, r7
10042d5c:	b002      	add	sp, #8
10042d5e:	bd80      	pop	{r7, pc}

10042d60 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
10042d60:	b580      	push	{r7, lr}
10042d62:	b082      	sub	sp, #8
10042d64:	af00      	add	r7, sp, #0
10042d66:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
10042d68:	687b      	ldr	r3, [r7, #4]
10042d6a:	681b      	ldr	r3, [r3, #0]
10042d6c:	2280      	movs	r2, #128	@ 0x80
10042d6e:	0352      	lsls	r2, r2, #13
10042d70:	431a      	orrs	r2, r3
10042d72:	687b      	ldr	r3, [r7, #4]
10042d74:	601a      	str	r2, [r3, #0]
}
10042d76:	46c0      	nop			@ (mov r8, r8)
10042d78:	46bd      	mov	sp, r7
10042d7a:	b002      	add	sp, #8
10042d7c:	bd80      	pop	{r7, pc}

10042d7e <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
10042d7e:	b580      	push	{r7, lr}
10042d80:	b082      	sub	sp, #8
10042d82:	af00      	add	r7, sp, #0
10042d84:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
10042d86:	687b      	ldr	r3, [r7, #4]
10042d88:	681b      	ldr	r3, [r3, #0]
10042d8a:	2280      	movs	r2, #128	@ 0x80
10042d8c:	0312      	lsls	r2, r2, #12
10042d8e:	431a      	orrs	r2, r3
10042d90:	687b      	ldr	r3, [r7, #4]
10042d92:	601a      	str	r2, [r3, #0]
}
10042d94:	46c0      	nop			@ (mov r8, r8)
10042d96:	46bd      	mov	sp, r7
10042d98:	b002      	add	sp, #8
10042d9a:	bd80      	pop	{r7, pc}

10042d9c <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
10042d9c:	b580      	push	{r7, lr}
10042d9e:	b082      	sub	sp, #8
10042da0:	af00      	add	r7, sp, #0
10042da2:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
10042da4:	687b      	ldr	r3, [r7, #4]
10042da6:	681b      	ldr	r3, [r3, #0]
10042da8:	2280      	movs	r2, #128	@ 0x80
10042daa:	0292      	lsls	r2, r2, #10
10042dac:	431a      	orrs	r2, r3
10042dae:	687b      	ldr	r3, [r7, #4]
10042db0:	601a      	str	r2, [r3, #0]
}
10042db2:	46c0      	nop			@ (mov r8, r8)
10042db4:	46bd      	mov	sp, r7
10042db6:	b002      	add	sp, #8
10042db8:	bd80      	pop	{r7, pc}
	...

10042dbc <HW_PKA_ReadResult>:

#endif

#if defined(STM32WB05) || defined(STM32WB09)
void HW_PKA_ReadResult( uint32_t index, int size, uint32_t* out )
{
10042dbc:	b580      	push	{r7, lr}
10042dbe:	b086      	sub	sp, #24
10042dc0:	af00      	add	r7, sp, #0
10042dc2:	60f8      	str	r0, [r7, #12]
10042dc4:	60b9      	str	r1, [r7, #8]
10042dc6:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
10042dc8:	68fb      	ldr	r3, [r7, #12]
10042dca:	009b      	lsls	r3, r3, #2
10042dcc:	4a0b      	ldr	r2, [pc, #44]	@ (10042dfc <HW_PKA_ReadResult+0x40>)
10042dce:	4694      	mov	ip, r2
10042dd0:	4463      	add	r3, ip
10042dd2:	617b      	str	r3, [r7, #20]
  /* Read from PKA RAM */
  for ( ; size > 0; size-- )
10042dd4:	e00a      	b.n	10042dec <HW_PKA_ReadResult+0x30>
  {
    *out++ = *pka_ram++;
10042dd6:	697a      	ldr	r2, [r7, #20]
10042dd8:	1d13      	adds	r3, r2, #4
10042dda:	617b      	str	r3, [r7, #20]
10042ddc:	687b      	ldr	r3, [r7, #4]
10042dde:	1d19      	adds	r1, r3, #4
10042de0:	6079      	str	r1, [r7, #4]
10042de2:	6812      	ldr	r2, [r2, #0]
10042de4:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
10042de6:	68bb      	ldr	r3, [r7, #8]
10042de8:	3b01      	subs	r3, #1
10042dea:	60bb      	str	r3, [r7, #8]
10042dec:	68bb      	ldr	r3, [r7, #8]
10042dee:	2b00      	cmp	r3, #0
10042df0:	dcf1      	bgt.n	10042dd6 <HW_PKA_ReadResult+0x1a>
  }
}
10042df2:	46c0      	nop			@ (mov r8, r8)
10042df4:	46c0      	nop			@ (mov r8, r8)
10042df6:	46bd      	mov	sp, r7
10042df8:	b006      	add	sp, #24
10042dfa:	bd80      	pop	{r7, pc}
10042dfc:	48300400 	.word	0x48300400

10042e00 <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
10042e00:	b580      	push	{r7, lr}
10042e02:	af00      	add	r7, sp, #0
  PKAMGR_Init();
10042e04:	f001 fec0 	bl	10044b88 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
10042e08:	4b07      	ldr	r3, [pc, #28]	@ (10042e28 <HW_PKA_Init+0x28>)
10042e0a:	0018      	movs	r0, r3
10042e0c:	f7ff ffa8 	bl	10042d60 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
10042e10:	4b05      	ldr	r3, [pc, #20]	@ (10042e28 <HW_PKA_Init+0x28>)
10042e12:	0018      	movs	r0, r3
10042e14:	f7ff ffb3 	bl	10042d7e <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
10042e18:	4b03      	ldr	r3, [pc, #12]	@ (10042e28 <HW_PKA_Init+0x28>)
10042e1a:	0018      	movs	r0, r3
10042e1c:	f7ff ffbe 	bl	10042d9c <LL_PKA_EnableIT_PROCEND>
}
10042e20:	46c0      	nop			@ (mov r8, r8)
10042e22:	46bd      	mov	sp, r7
10042e24:	bd80      	pop	{r7, pc}
10042e26:	46c0      	nop			@ (mov r8, r8)
10042e28:	48300000 	.word	0x48300000

10042e2c <HW_PKA_PowerSaveLevelCheck>:

uint8_t HW_PKA_PowerSaveLevelCheck(void)
{
10042e2c:	b580      	push	{r7, lr}
10042e2e:	af00      	add	r7, sp, #0
  if(PKAMGR_SleepCheck()==PKAMGR_SUCCESS)
10042e30:	f001 feb6 	bl	10044ba0 <PKAMGR_SleepCheck>
10042e34:	1e03      	subs	r3, r0, #0
10042e36:	d101      	bne.n	10042e3c <HW_PKA_PowerSaveLevelCheck+0x10>
  {
    return POWER_SAVE_LEVEL_STOP;
10042e38:	2303      	movs	r3, #3
10042e3a:	e000      	b.n	10042e3e <HW_PKA_PowerSaveLevelCheck+0x12>
  }
  else // PKA on going
  {
    return POWER_SAVE_LEVEL_CPU_HALT;
10042e3c:	2301      	movs	r3, #1
  }
}
10042e3e:	0018      	movs	r0, r3
10042e40:	46bd      	mov	sp, r7
10042e42:	bd80      	pop	{r7, pc}

10042e44 <HW_PKA_ExitWithError>:
  * @param
  * @param
  *
  */
void HW_PKA_ExitWithError(uint32_t errorCode)
{
10042e44:	b580      	push	{r7, lr}
10042e46:	b084      	sub	sp, #16
10042e48:	af00      	add	r7, sp, #0
10042e4a:	6078      	str	r0, [r7, #4]
  internalStateMachine_Operation = 0;
10042e4c:	4b14      	ldr	r3, [pc, #80]	@ (10042ea0 <HW_PKA_ExitWithError+0x5c>)
10042e4e:	2200      	movs	r2, #0
10042e50:	601a      	str	r2, [r3, #0]
  internalStateMachine_Step = 0;
10042e52:	4b14      	ldr	r3, [pc, #80]	@ (10042ea4 <HW_PKA_ExitWithError+0x60>)
10042e54:	2200      	movs	r2, #0
10042e56:	601a      	str	r2, [r3, #0]
  PKAMGR_Unlock();
10042e58:	f001 feb8 	bl	10044bcc <PKAMGR_Unlock>
  ret[0]=errorCode;
10042e5c:	4b12      	ldr	r3, [pc, #72]	@ (10042ea8 <HW_PKA_ExitWithError+0x64>)
10042e5e:	687a      	ldr	r2, [r7, #4]
10042e60:	601a      	str	r2, [r3, #0]
  for(int i=0; i<8; i++)
10042e62:	2300      	movs	r3, #0
10042e64:	60fb      	str	r3, [r7, #12]
10042e66:	e00c      	b.n	10042e82 <HW_PKA_ExitWithError+0x3e>
  {
    ret[i+16] = bufferSecretKey[i];
10042e68:	68fb      	ldr	r3, [r7, #12]
10042e6a:	3310      	adds	r3, #16
10042e6c:	001a      	movs	r2, r3
10042e6e:	4b0f      	ldr	r3, [pc, #60]	@ (10042eac <HW_PKA_ExitWithError+0x68>)
10042e70:	68f9      	ldr	r1, [r7, #12]
10042e72:	0089      	lsls	r1, r1, #2
10042e74:	58c9      	ldr	r1, [r1, r3]
10042e76:	4b0c      	ldr	r3, [pc, #48]	@ (10042ea8 <HW_PKA_ExitWithError+0x64>)
10042e78:	0092      	lsls	r2, r2, #2
10042e7a:	50d1      	str	r1, [r2, r3]
  for(int i=0; i<8; i++)
10042e7c:	68fb      	ldr	r3, [r7, #12]
10042e7e:	3301      	adds	r3, #1
10042e80:	60fb      	str	r3, [r7, #12]
10042e82:	68fb      	ldr	r3, [r7, #12]
10042e84:	2b07      	cmp	r3, #7
10042e86:	ddef      	ble.n	10042e68 <HW_PKA_ExitWithError+0x24>
  }
  HW_PKA_funcCB_LP(PKAMGR_ERROR, ret);
10042e88:	4b09      	ldr	r3, [pc, #36]	@ (10042eb0 <HW_PKA_ExitWithError+0x6c>)
10042e8a:	681b      	ldr	r3, [r3, #0]
10042e8c:	4906      	ldr	r1, [pc, #24]	@ (10042ea8 <HW_PKA_ExitWithError+0x64>)
10042e8e:	2201      	movs	r2, #1
10042e90:	4252      	negs	r2, r2
10042e92:	0010      	movs	r0, r2
10042e94:	4798      	blx	r3
}
10042e96:	46c0      	nop			@ (mov r8, r8)
10042e98:	46bd      	mov	sp, r7
10042e9a:	b004      	add	sp, #16
10042e9c:	bd80      	pop	{r7, pc}
10042e9e:	46c0      	nop			@ (mov r8, r8)
10042ea0:	200003e4 	.word	0x200003e4
10042ea4:	200003e8 	.word	0x200003e8
10042ea8:	20000384 	.word	0x20000384
10042eac:	200003ec 	.word	0x200003ec
10042eb0:	2000040c 	.word	0x2000040c

10042eb4 <HW_PKA_ProcEnd_StateMachine>:
  * @param
  * @param
  *
  */
void HW_PKA_ProcEnd_StateMachine(void)
{
10042eb4:	b580      	push	{r7, lr}
10042eb6:	b082      	sub	sp, #8
10042eb8:	af00      	add	r7, sp, #0
  if(internalStateMachine_Operation == HW_PKA_OPERATION_P256)
10042eba:	4b2f      	ldr	r3, [pc, #188]	@ (10042f78 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10042ebc:	681b      	ldr	r3, [r3, #0]
10042ebe:	2b01      	cmp	r3, #1
10042ec0:	d155      	bne.n	10042f6e <HW_PKA_ProcEnd_StateMachine+0xba>
  {
    switch(internalStateMachine_Step)
10042ec2:	4b2e      	ldr	r3, [pc, #184]	@ (10042f7c <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042ec4:	681b      	ldr	r3, [r3, #0]
10042ec6:	2b0e      	cmp	r3, #14
10042ec8:	d84d      	bhi.n	10042f66 <HW_PKA_ProcEnd_StateMachine+0xb2>
10042eca:	009a      	lsls	r2, r3, #2
10042ecc:	4b2c      	ldr	r3, [pc, #176]	@ (10042f80 <HW_PKA_ProcEnd_StateMachine+0xcc>)
10042ece:	18d3      	adds	r3, r2, r3
10042ed0:	681b      	ldr	r3, [r3, #0]
10042ed2:	469f      	mov	pc, r3
    {
      case HW_PKA_STEP_0:
        internalStateMachine_Step = HW_PKA_STEP_1;
10042ed4:	4b29      	ldr	r3, [pc, #164]	@ (10042f7c <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042ed6:	2201      	movs	r2, #1
10042ed8:	601a      	str	r2, [r3, #0]

      break;
10042eda:	e048      	b.n	10042f6e <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_1:
        internalStateMachine_Step = HW_PKA_STEP_2;
10042edc:	4b27      	ldr	r3, [pc, #156]	@ (10042f7c <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042ede:	2202      	movs	r2, #2
10042ee0:	601a      	str	r2, [r3, #0]
        break;
10042ee2:	e044      	b.n	10042f6e <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_2:
          internalStateMachine_Step = HW_PKA_STEP_3;
10042ee4:	4b25      	ldr	r3, [pc, #148]	@ (10042f7c <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042ee6:	2203      	movs	r2, #3
10042ee8:	601a      	str	r2, [r3, #0]
          break;
10042eea:	e040      	b.n	10042f6e <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_3:
            /* Read the PKA scalar multiplication result which is the DH key */
            for(int i=0;i<8;i++)
10042eec:	2300      	movs	r3, #0
10042eee:	607b      	str	r3, [r7, #4]
10042ef0:	e00a      	b.n	10042f08 <HW_PKA_ProcEnd_StateMachine+0x54>
              ret[i] = bufferSecretKey[i];
10042ef2:	4b24      	ldr	r3, [pc, #144]	@ (10042f84 <HW_PKA_ProcEnd_StateMachine+0xd0>)
10042ef4:	687a      	ldr	r2, [r7, #4]
10042ef6:	0092      	lsls	r2, r2, #2
10042ef8:	58d1      	ldr	r1, [r2, r3]
10042efa:	4b23      	ldr	r3, [pc, #140]	@ (10042f88 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042efc:	687a      	ldr	r2, [r7, #4]
10042efe:	0092      	lsls	r2, r2, #2
10042f00:	50d1      	str	r1, [r2, r3]
            for(int i=0;i<8;i++)
10042f02:	687b      	ldr	r3, [r7, #4]
10042f04:	3301      	adds	r3, #1
10042f06:	607b      	str	r3, [r7, #4]
10042f08:	687b      	ldr	r3, [r7, #4]
10042f0a:	2b07      	cmp	r3, #7
10042f0c:	ddf1      	ble.n	10042ef2 <HW_PKA_ProcEnd_StateMachine+0x3e>
            HW_PKA_P256_ReadEccScalarMul( (uint32_t *)&ret[8], (uint32_t *)&ret[16] );
10042f0e:	4a1f      	ldr	r2, [pc, #124]	@ (10042f8c <HW_PKA_ProcEnd_StateMachine+0xd8>)
10042f10:	4b1f      	ldr	r3, [pc, #124]	@ (10042f90 <HW_PKA_ProcEnd_StateMachine+0xdc>)
10042f12:	0011      	movs	r1, r2
10042f14:	0018      	movs	r0, r3
10042f16:	f000 f85a 	bl	10042fce <HW_PKA_P256_ReadEccScalarMul>
#ifdef STM32WB09
            internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
10042f1a:	4b18      	ldr	r3, [pc, #96]	@ (10042f7c <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042f1c:	220e      	movs	r2, #14
10042f1e:	601a      	str	r2, [r3, #0]
            HW_PKA_ProcEnd_StateMachine();
10042f20:	f7ff ffc8 	bl	10042eb4 <HW_PKA_ProcEnd_StateMachine>
         {
           internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
           HW_PKA_ProcEnd_StateMachine();
         }
#endif /* STM32WB05 */
          break;
10042f24:	e023      	b.n	10042f6e <HW_PKA_ProcEnd_StateMachine+0xba>
       case HW_PKA_STEP_END_SUCCESS:
          internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
10042f26:	4b14      	ldr	r3, [pc, #80]	@ (10042f78 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10042f28:	2200      	movs	r2, #0
10042f2a:	601a      	str	r2, [r3, #0]
          internalStateMachine_Step = HW_PKA_STEP_0;
10042f2c:	4b13      	ldr	r3, [pc, #76]	@ (10042f7c <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042f2e:	2200      	movs	r2, #0
10042f30:	601a      	str	r2, [r3, #0]
          PKAMGR_Unlock();
10042f32:	f001 fe4b 	bl	10044bcc <PKAMGR_Unlock>
          for(int i=0;i<8;i++)
10042f36:	2300      	movs	r3, #0
10042f38:	603b      	str	r3, [r7, #0]
10042f3a:	e00a      	b.n	10042f52 <HW_PKA_ProcEnd_StateMachine+0x9e>
            ret[i] = bufferSecretKey[i];
10042f3c:	4b11      	ldr	r3, [pc, #68]	@ (10042f84 <HW_PKA_ProcEnd_StateMachine+0xd0>)
10042f3e:	683a      	ldr	r2, [r7, #0]
10042f40:	0092      	lsls	r2, r2, #2
10042f42:	58d1      	ldr	r1, [r2, r3]
10042f44:	4b10      	ldr	r3, [pc, #64]	@ (10042f88 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042f46:	683a      	ldr	r2, [r7, #0]
10042f48:	0092      	lsls	r2, r2, #2
10042f4a:	50d1      	str	r1, [r2, r3]
          for(int i=0;i<8;i++)
10042f4c:	683b      	ldr	r3, [r7, #0]
10042f4e:	3301      	adds	r3, #1
10042f50:	603b      	str	r3, [r7, #0]
10042f52:	683b      	ldr	r3, [r7, #0]
10042f54:	2b07      	cmp	r3, #7
10042f56:	ddf1      	ble.n	10042f3c <HW_PKA_ProcEnd_StateMachine+0x88>
          HW_PKA_funcCB_LP(PKAMGR_SUCCESS, ret);
10042f58:	4b0e      	ldr	r3, [pc, #56]	@ (10042f94 <HW_PKA_ProcEnd_StateMachine+0xe0>)
10042f5a:	681b      	ldr	r3, [r3, #0]
10042f5c:	4a0a      	ldr	r2, [pc, #40]	@ (10042f88 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042f5e:	0011      	movs	r1, r2
10042f60:	2000      	movs	r0, #0
10042f62:	4798      	blx	r3
          break;
10042f64:	e003      	b.n	10042f6e <HW_PKA_ProcEnd_StateMachine+0xba>
       default:
          HW_PKA_ExitWithError(0xA0);
10042f66:	20a0      	movs	r0, #160	@ 0xa0
10042f68:	f7ff ff6c 	bl	10042e44 <HW_PKA_ExitWithError>
    }
  }
}
10042f6c:	e7ff      	b.n	10042f6e <HW_PKA_ProcEnd_StateMachine+0xba>
10042f6e:	46c0      	nop			@ (mov r8, r8)
10042f70:	46bd      	mov	sp, r7
10042f72:	b002      	add	sp, #8
10042f74:	bd80      	pop	{r7, pc}
10042f76:	46c0      	nop			@ (mov r8, r8)
10042f78:	200003e4 	.word	0x200003e4
10042f7c:	200003e8 	.word	0x200003e8
10042f80:	1004fdcc 	.word	0x1004fdcc
10042f84:	200003ec 	.word	0x200003ec
10042f88:	20000384 	.word	0x20000384
10042f8c:	200003c4 	.word	0x200003c4
10042f90:	200003a4 	.word	0x200003a4
10042f94:	2000040c 	.word	0x2000040c

10042f98 <HAL_PKA_OperationCpltCallback>:
    HW_PKA_ProcEnd_StateMachine();
  }
}

void HAL_PKA_OperationCpltCallback(PKA_HandleTypeDef *hpka)
{
10042f98:	b580      	push	{r7, lr}
10042f9a:	b082      	sub	sp, #8
10042f9c:	af00      	add	r7, sp, #0
10042f9e:	6078      	str	r0, [r7, #4]
  HW_PKA_ProcEnd_StateMachine();
10042fa0:	f7ff ff88 	bl	10042eb4 <HW_PKA_ProcEnd_StateMachine>
  PKAMGR_IRQCallback();
10042fa4:	f001 fe3c 	bl	10044c20 <PKAMGR_IRQCallback>
}
10042fa8:	46c0      	nop			@ (mov r8, r8)
10042faa:	46bd      	mov	sp, r7
10042fac:	b002      	add	sp, #8
10042fae:	bd80      	pop	{r7, pc}

10042fb0 <HAL_PKA_ErrorCallback>:

void HAL_PKA_ErrorCallback(PKA_HandleTypeDef *hpka)
{
10042fb0:	b580      	push	{r7, lr}
10042fb2:	b082      	sub	sp, #8
10042fb4:	af00      	add	r7, sp, #0
10042fb6:	6078      	str	r0, [r7, #4]
  HW_PKA_ExitWithError(hpka->ErrorCode);
10042fb8:	687b      	ldr	r3, [r7, #4]
10042fba:	689b      	ldr	r3, [r3, #8]
10042fbc:	0018      	movs	r0, r3
10042fbe:	f7ff ff41 	bl	10042e44 <HW_PKA_ExitWithError>
  PKAMGR_IRQCallback();
10042fc2:	f001 fe2d 	bl	10044c20 <PKAMGR_IRQCallback>
}
10042fc6:	46c0      	nop			@ (mov r8, r8)
10042fc8:	46bd      	mov	sp, r7
10042fca:	b002      	add	sp, #8
10042fcc:	bd80      	pop	{r7, pc}

10042fce <HW_PKA_P256_ReadEccScalarMul>:
  * @param
  * @param
  *
  */
void HW_PKA_P256_ReadEccScalarMul( uint32_t* pX, uint32_t* pY )
{
10042fce:	b580      	push	{r7, lr}
10042fd0:	b082      	sub	sp, #8
10042fd2:	af00      	add	r7, sp, #0
10042fd4:	6078      	str	r0, [r7, #4]
10042fd6:	6039      	str	r1, [r7, #0]
#ifdef STM32WB09
  /* Read the output point X */
  if( pX )
10042fd8:	687b      	ldr	r3, [r7, #4]
10042fda:	2b00      	cmp	r3, #0
10042fdc:	d005      	beq.n	10042fea <HW_PKA_P256_ReadEccScalarMul+0x1c>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_X, 8, pX );
10042fde:	687b      	ldr	r3, [r7, #4]
10042fe0:	001a      	movs	r2, r3
10042fe2:	2108      	movs	r1, #8
10042fe4:	205e      	movs	r0, #94	@ 0x5e
10042fe6:	f7ff fee9 	bl	10042dbc <HW_PKA_ReadResult>
  }
  /* Read the output point Y as the second half of the result */
  if( pY )
10042fea:	683b      	ldr	r3, [r7, #0]
10042fec:	2b00      	cmp	r3, #0
10042fee:	d005      	beq.n	10042ffc <HW_PKA_P256_ReadEccScalarMul+0x2e>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_Y, 8, pY );
10042ff0:	683b      	ldr	r3, [r7, #0]
10042ff2:	001a      	movs	r2, r3
10042ff4:	2108      	movs	r1, #8
10042ff6:	2074      	movs	r0, #116	@ 0x74
10042ff8:	f7ff fee0 	bl	10042dbc <HW_PKA_ReadResult>
  if( pY )
  {
    HW_PKA_ReadResult( 108, 8, pY );
  }
#endif /* STM32WB05 */
}
10042ffc:	46c0      	nop			@ (mov r8, r8)
10042ffe:	46bd      	mov	sp, r7
10043000:	b002      	add	sp, #8
10043002:	bd80      	pop	{r7, pc}

10043004 <LL_AHB1_GRP1_EnableClock>:
{
10043004:	b580      	push	{r7, lr}
10043006:	b084      	sub	sp, #16
10043008:	af00      	add	r7, sp, #0
1004300a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004300c:	4b07      	ldr	r3, [pc, #28]	@ (1004302c <LL_AHB1_GRP1_EnableClock+0x28>)
1004300e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10043010:	4b06      	ldr	r3, [pc, #24]	@ (1004302c <LL_AHB1_GRP1_EnableClock+0x28>)
10043012:	687a      	ldr	r2, [r7, #4]
10043014:	430a      	orrs	r2, r1
10043016:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10043018:	4b04      	ldr	r3, [pc, #16]	@ (1004302c <LL_AHB1_GRP1_EnableClock+0x28>)
1004301a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004301c:	687a      	ldr	r2, [r7, #4]
1004301e:	4013      	ands	r3, r2
10043020:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043022:	68fb      	ldr	r3, [r7, #12]
}
10043024:	46c0      	nop			@ (mov r8, r8)
10043026:	46bd      	mov	sp, r7
10043028:	b004      	add	sp, #16
1004302a:	bd80      	pop	{r7, pc}
1004302c:	48400000 	.word	0x48400000

10043030 <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
10043030:	b580      	push	{r7, lr}
10043032:	b082      	sub	sp, #8
10043034:	af00      	add	r7, sp, #0
10043036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RNGx->CR, RNG_CR_DISABLE, LL_RNG_CR_DISABLE_0);
10043038:	687b      	ldr	r3, [r7, #4]
1004303a:	681b      	ldr	r3, [r3, #0]
1004303c:	2201      	movs	r2, #1
1004303e:	4393      	bics	r3, r2
10043040:	001a      	movs	r2, r3
10043042:	687b      	ldr	r3, [r7, #4]
10043044:	601a      	str	r2, [r3, #0]
}
10043046:	46c0      	nop			@ (mov r8, r8)
10043048:	46bd      	mov	sp, r7
1004304a:	b002      	add	sp, #8
1004304c:	bd80      	pop	{r7, pc}
	...

10043050 <LL_RNG_SetSamplingClockEnableDivider>:
  * @param  RNGx RNG Instance
  * @param  value parameter must be a number between 0 and 65535 (form 0x0 to 0xffff)
  * @retval None
  */
__STATIC_INLINE void LL_RNG_SetSamplingClockEnableDivider(RNG_TypeDef *RNGx, uint32_t value)
{
10043050:	b580      	push	{r7, lr}
10043052:	b082      	sub	sp, #8
10043054:	af00      	add	r7, sp, #0
10043056:	6078      	str	r0, [r7, #4]
10043058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RNGx->CR, RNG_CR_CLKDIV_15_0, value << RNG_CR_CLKDIV_15_0_Pos);
1004305a:	687b      	ldr	r3, [r7, #4]
1004305c:	681b      	ldr	r3, [r3, #0]
1004305e:	4a05      	ldr	r2, [pc, #20]	@ (10043074 <LL_RNG_SetSamplingClockEnableDivider+0x24>)
10043060:	401a      	ands	r2, r3
10043062:	683b      	ldr	r3, [r7, #0]
10043064:	021b      	lsls	r3, r3, #8
10043066:	431a      	orrs	r2, r3
10043068:	687b      	ldr	r3, [r7, #4]
1004306a:	601a      	str	r2, [r3, #0]
}
1004306c:	46c0      	nop			@ (mov r8, r8)
1004306e:	46bd      	mov	sp, r7
10043070:	b002      	add	sp, #8
10043072:	bd80      	pop	{r7, pc}
10043074:	ff0000ff 	.word	0xff0000ff

10043078 <LL_RNG_GetSamplingClockEnableDivider>:
    @note   dividing by a factor equal to CLKDIV[15:0] + 1, values being in the range of 0 to 65535
  * @rmtoll CR          CLKDIV_15_0       LL_RNG_GetSamplingClockEnableDivider
  * @retval can be one of the following values
  */
__STATIC_INLINE uint32_t LL_RNG_GetSamplingClockEnableDivider(RNG_TypeDef *RNGx)
{
10043078:	b580      	push	{r7, lr}
1004307a:	b082      	sub	sp, #8
1004307c:	af00      	add	r7, sp, #0
1004307e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->CR, RNG_CR_CLKDIV_15_0) >> RNG_CR_CLKDIV_15_0_Pos);
10043080:	687b      	ldr	r3, [r7, #4]
10043082:	681b      	ldr	r3, [r3, #0]
10043084:	0a1b      	lsrs	r3, r3, #8
10043086:	041b      	lsls	r3, r3, #16
10043088:	0c1b      	lsrs	r3, r3, #16
}
1004308a:	0018      	movs	r0, r3
1004308c:	46bd      	mov	sp, r7
1004308e:	b002      	add	sp, #8
10043090:	bd80      	pop	{r7, pc}

10043092 <LL_RNG_IsActiveFlag_DISABLED>:
  * @rmtoll SR          DISABLED            LL_RNG_IsActiveFlag_DISABLED
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_DISABLED(RNG_TypeDef *RNGx)
{
10043092:	b580      	push	{r7, lr}
10043094:	b082      	sub	sp, #8
10043096:	af00      	add	r7, sp, #0
10043098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_DISABLED) == (RNG_SR_DISABLED)) ? 1U : 0U);
1004309a:	687b      	ldr	r3, [r7, #4]
1004309c:	685b      	ldr	r3, [r3, #4]
1004309e:	2201      	movs	r2, #1
100430a0:	4013      	ands	r3, r2
100430a2:	2b01      	cmp	r3, #1
100430a4:	d101      	bne.n	100430aa <LL_RNG_IsActiveFlag_DISABLED+0x18>
100430a6:	2301      	movs	r3, #1
100430a8:	e000      	b.n	100430ac <LL_RNG_IsActiveFlag_DISABLED+0x1a>
100430aa:	2300      	movs	r3, #0
}
100430ac:	0018      	movs	r0, r3
100430ae:	46bd      	mov	sp, r7
100430b0:	b002      	add	sp, #8
100430b2:	bd80      	pop	{r7, pc}

100430b4 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>:
  * @rmtoll SR          REVEAL_CLK_ERR            LL_RNG_IsActiveFlag_REVEAL_CLK_ERR
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG_TypeDef *RNGx)
{
100430b4:	b580      	push	{r7, lr}
100430b6:	b082      	sub	sp, #8
100430b8:	af00      	add	r7, sp, #0
100430ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_REVEAL_CLK_ERR) == (RNG_SR_REVEAL_CLK_ERR)) ? 1U : 0U);
100430bc:	687b      	ldr	r3, [r7, #4]
100430be:	685b      	ldr	r3, [r3, #4]
100430c0:	2204      	movs	r2, #4
100430c2:	4013      	ands	r3, r2
100430c4:	2b04      	cmp	r3, #4
100430c6:	d101      	bne.n	100430cc <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x18>
100430c8:	2301      	movs	r3, #1
100430ca:	e000      	b.n	100430ce <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x1a>
100430cc:	2300      	movs	r3, #0
}
100430ce:	0018      	movs	r0, r3
100430d0:	46bd      	mov	sp, r7
100430d2:	b002      	add	sp, #8
100430d4:	bd80      	pop	{r7, pc}

100430d6 <LL_RNG_IsActiveFlag_VAL_READY>:
  * @rmtoll SR          VAL_READY            LL_RNG_IsActiveFlag_VAL_READY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_VAL_READY(RNG_TypeDef *RNGx)
{
100430d6:	b580      	push	{r7, lr}
100430d8:	b082      	sub	sp, #8
100430da:	af00      	add	r7, sp, #0
100430dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_VAL_READY) == (RNG_SR_VAL_READY)) ? 1U : 0U);
100430de:	687b      	ldr	r3, [r7, #4]
100430e0:	685b      	ldr	r3, [r3, #4]
100430e2:	2210      	movs	r2, #16
100430e4:	4013      	ands	r3, r2
100430e6:	2b10      	cmp	r3, #16
100430e8:	d101      	bne.n	100430ee <LL_RNG_IsActiveFlag_VAL_READY+0x18>
100430ea:	2301      	movs	r3, #1
100430ec:	e000      	b.n	100430f0 <LL_RNG_IsActiveFlag_VAL_READY+0x1a>
100430ee:	2300      	movs	r3, #0
}
100430f0:	0018      	movs	r0, r3
100430f2:	46bd      	mov	sp, r7
100430f4:	b002      	add	sp, #8
100430f6:	bd80      	pop	{r7, pc}

100430f8 <LL_RNG_GetRndVal>:
  available in FIFO by ready VAL_READY flag before starting a read otherwise a null value will be returned
  * @rmtoll VAL          RND_VAL       LL_RNG_GetRndVal
  * @retval a 32-bit Random Value
  */
__STATIC_INLINE uint32_t LL_RNG_GetRndVal(RNG_TypeDef *RNGx)
{
100430f8:	b580      	push	{r7, lr}
100430fa:	b082      	sub	sp, #8
100430fc:	af00      	add	r7, sp, #0
100430fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->VAL, RNG_VAL_RND_VAL) >> RNG_VAL_RND_VAL_Pos);
10043100:	687b      	ldr	r3, [r7, #4]
10043102:	689b      	ldr	r3, [r3, #8]
}
10043104:	0018      	movs	r0, r3
10043106:	46bd      	mov	sp, r7
10043108:	b002      	add	sp, #8
1004310a:	bd80      	pop	{r7, pc}

1004310c <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
1004310c:	b580      	push	{r7, lr}
1004310e:	b082      	sub	sp, #8
10043110:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
10043112:	2380      	movs	r3, #128	@ 0x80
10043114:	02db      	lsls	r3, r3, #11
10043116:	0018      	movs	r0, r3
10043118:	f7ff ff74 	bl	10043004 <LL_AHB1_GRP1_EnableClock>

  uint32_t SamplingClockDivider = 0;
1004311c:	2300      	movs	r3, #0
1004311e:	607b      	str	r3, [r7, #4]

  /* Check that the divider value is equal to the one to configure. If not, it must redo the write and checking. */
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
10043120:	e005      	b.n	1004312e <HW_RNG_Init+0x22>
  {
     /* While the new divider value is being resynchronized with the TRNG core clock domain, it is not possible to write another new value. */
     LL_RNG_SetSamplingClockEnableDivider(RNG, SamplingClockDivider);
10043122:	687b      	ldr	r3, [r7, #4]
10043124:	4a12      	ldr	r2, [pc, #72]	@ (10043170 <HW_RNG_Init+0x64>)
10043126:	0019      	movs	r1, r3
10043128:	0010      	movs	r0, r2
1004312a:	f7ff ff91 	bl	10043050 <LL_RNG_SetSamplingClockEnableDivider>
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
1004312e:	4b10      	ldr	r3, [pc, #64]	@ (10043170 <HW_RNG_Init+0x64>)
10043130:	0018      	movs	r0, r3
10043132:	f7ff ffa1 	bl	10043078 <LL_RNG_GetSamplingClockEnableDivider>
10043136:	0002      	movs	r2, r0
10043138:	687b      	ldr	r3, [r7, #4]
1004313a:	4293      	cmp	r3, r2
1004313c:	d1f1      	bne.n	10043122 <HW_RNG_Init+0x16>
  }

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
1004313e:	4b0c      	ldr	r3, [pc, #48]	@ (10043170 <HW_RNG_Init+0x64>)
10043140:	0018      	movs	r0, r3
10043142:	f7ff ff75 	bl	10043030 <LL_RNG_Enable>

  /* Wait for RNG enable operation */
  while (LL_RNG_IsActiveFlag_DISABLED(RNG));
10043146:	46c0      	nop			@ (mov r8, r8)
10043148:	4b09      	ldr	r3, [pc, #36]	@ (10043170 <HW_RNG_Init+0x64>)
1004314a:	0018      	movs	r0, r3
1004314c:	f7ff ffa1 	bl	10043092 <LL_RNG_IsActiveFlag_DISABLED>
10043150:	1e03      	subs	r3, r0, #0
10043152:	d1f9      	bne.n	10043148 <HW_RNG_Init+0x3c>

  /* Check if internal clock error occurs */
  if (LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG))
10043154:	4b06      	ldr	r3, [pc, #24]	@ (10043170 <HW_RNG_Init+0x64>)
10043156:	0018      	movs	r0, r3
10043158:	f7ff ffac 	bl	100430b4 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>
1004315c:	1e03      	subs	r3, r0, #0
1004315e:	d001      	beq.n	10043164 <HW_RNG_Init+0x58>
  {
    return HW_RNG_ERROR;
10043160:	2301      	movs	r3, #1
10043162:	e000      	b.n	10043166 <HW_RNG_Init+0x5a>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
10043164:	2300      	movs	r3, #0
}
10043166:	0018      	movs	r0, r3
10043168:	46bd      	mov	sp, r7
1004316a:	b002      	add	sp, #8
1004316c:	bd80      	pop	{r7, pc}
1004316e:	46c0      	nop			@ (mov r8, r8)
10043170:	48600000 	.word	0x48600000

10043174 <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
10043174:	b580      	push	{r7, lr}
10043176:	b082      	sub	sp, #8
10043178:	af00      	add	r7, sp, #0
1004317a:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
1004317c:	46c0      	nop			@ (mov r8, r8)
1004317e:	4b09      	ldr	r3, [pc, #36]	@ (100431a4 <HW_RNG_GetRandom16+0x30>)
10043180:	0018      	movs	r0, r3
10043182:	f7ff ffa8 	bl	100430d6 <LL_RNG_IsActiveFlag_VAL_READY>
10043186:	1e03      	subs	r3, r0, #0
10043188:	d0f9      	beq.n	1004317e <HW_RNG_GetRandom16+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
1004318a:	4b06      	ldr	r3, [pc, #24]	@ (100431a4 <HW_RNG_GetRandom16+0x30>)
1004318c:	0018      	movs	r0, r3
1004318e:	f7ff ffb3 	bl	100430f8 <LL_RNG_GetRndVal>
10043192:	0003      	movs	r3, r0
10043194:	b29a      	uxth	r2, r3
10043196:	687b      	ldr	r3, [r7, #4]
10043198:	801a      	strh	r2, [r3, #0]

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004319a:	2300      	movs	r3, #0
}
1004319c:	0018      	movs	r0, r3
1004319e:	46bd      	mov	sp, r7
100431a0:	b002      	add	sp, #8
100431a2:	bd80      	pop	{r7, pc}
100431a4:	48600000 	.word	0x48600000

100431a8 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
100431a8:	b580      	push	{r7, lr}
100431aa:	b082      	sub	sp, #8
100431ac:	af00      	add	r7, sp, #0
100431ae:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
100431b0:	46c0      	nop			@ (mov r8, r8)
100431b2:	4b09      	ldr	r3, [pc, #36]	@ (100431d8 <HW_RNG_GetRandom32+0x30>)
100431b4:	0018      	movs	r0, r3
100431b6:	f7ff ff8e 	bl	100430d6 <LL_RNG_IsActiveFlag_VAL_READY>
100431ba:	1e03      	subs	r3, r0, #0
100431bc:	d0f9      	beq.n	100431b2 <HW_RNG_GetRandom32+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
100431be:	4b06      	ldr	r3, [pc, #24]	@ (100431d8 <HW_RNG_GetRandom32+0x30>)
100431c0:	0018      	movs	r0, r3
100431c2:	f7ff ff99 	bl	100430f8 <LL_RNG_GetRndVal>
100431c6:	0002      	movs	r2, r0
100431c8:	687b      	ldr	r3, [r7, #4]
100431ca:	601a      	str	r2, [r3, #0]
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
100431cc:	2300      	movs	r3, #0
}
100431ce:	0018      	movs	r0, r3
100431d0:	46bd      	mov	sp, r7
100431d2:	b002      	add	sp, #8
100431d4:	bd80      	pop	{r7, pc}
100431d6:	46c0      	nop			@ (mov r8, r8)
100431d8:	48600000 	.word	0x48600000

100431dc <LL_PWR_SetPowerMode>:
{
100431dc:	b580      	push	{r7, lr}
100431de:	b082      	sub	sp, #8
100431e0:	af00      	add	r7, sp, #0
100431e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
100431e4:	4b06      	ldr	r3, [pc, #24]	@ (10043200 <LL_PWR_SetPowerMode+0x24>)
100431e6:	681b      	ldr	r3, [r3, #0]
100431e8:	2201      	movs	r2, #1
100431ea:	4393      	bics	r3, r2
100431ec:	0019      	movs	r1, r3
100431ee:	4b04      	ldr	r3, [pc, #16]	@ (10043200 <LL_PWR_SetPowerMode+0x24>)
100431f0:	687a      	ldr	r2, [r7, #4]
100431f2:	430a      	orrs	r2, r1
100431f4:	601a      	str	r2, [r3, #0]
}
100431f6:	46c0      	nop			@ (mov r8, r8)
100431f8:	46bd      	mov	sp, r7
100431fa:	b002      	add	sp, #8
100431fc:	bd80      	pop	{r7, pc}
100431fe:	46c0      	nop			@ (mov r8, r8)
10043200:	48500000 	.word	0x48500000

10043204 <LL_PWR_DisableGPIORET>:
{
10043204:	b580      	push	{r7, lr}
10043206:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10043208:	4b04      	ldr	r3, [pc, #16]	@ (1004321c <LL_PWR_DisableGPIORET+0x18>)
1004320a:	685a      	ldr	r2, [r3, #4]
1004320c:	4b03      	ldr	r3, [pc, #12]	@ (1004321c <LL_PWR_DisableGPIORET+0x18>)
1004320e:	4904      	ldr	r1, [pc, #16]	@ (10043220 <LL_PWR_DisableGPIORET+0x1c>)
10043210:	400a      	ands	r2, r1
10043212:	605a      	str	r2, [r3, #4]
}
10043214:	46c0      	nop			@ (mov r8, r8)
10043216:	46bd      	mov	sp, r7
10043218:	bd80      	pop	{r7, pc}
1004321a:	46c0      	nop			@ (mov r8, r8)
1004321c:	48500000 	.word	0x48500000
10043220:	fffffeff 	.word	0xfffffeff

10043224 <LL_PWR_ClearWakeupSource>:
{
10043224:	b580      	push	{r7, lr}
10043226:	b082      	sub	sp, #8
10043228:	af00      	add	r7, sp, #0
1004322a:	6078      	str	r0, [r7, #4]
  WRITE_REG(PWR->SR1, (source & 0x0000FFFF));
1004322c:	4b06      	ldr	r3, [pc, #24]	@ (10043248 <LL_PWR_ClearWakeupSource+0x24>)
1004322e:	687a      	ldr	r2, [r7, #4]
10043230:	0412      	lsls	r2, r2, #16
10043232:	0c12      	lsrs	r2, r2, #16
10043234:	611a      	str	r2, [r3, #16]
  WRITE_REG(PWR->SR3, (source >> 16));
10043236:	4b04      	ldr	r3, [pc, #16]	@ (10043248 <LL_PWR_ClearWakeupSource+0x24>)
10043238:	687a      	ldr	r2, [r7, #4]
1004323a:	0c12      	lsrs	r2, r2, #16
1004323c:	639a      	str	r2, [r3, #56]	@ 0x38
}
1004323e:	46c0      	nop			@ (mov r8, r8)
10043240:	46bd      	mov	sp, r7
10043242:	b002      	add	sp, #8
10043244:	bd80      	pop	{r7, pc}
10043246:	46c0      	nop			@ (mov r8, r8)
10043248:	48500000 	.word	0x48500000

1004324c <LL_PWR_SetNoPullB>:
{
1004324c:	b580      	push	{r7, lr}
1004324e:	b082      	sub	sp, #8
10043250:	af00      	add	r7, sp, #0
10043252:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10043254:	4b08      	ldr	r3, [pc, #32]	@ (10043278 <LL_PWR_SetNoPullB+0x2c>)
10043256:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10043258:	687b      	ldr	r3, [r7, #4]
1004325a:	43d9      	mvns	r1, r3
1004325c:	4b06      	ldr	r3, [pc, #24]	@ (10043278 <LL_PWR_SetNoPullB+0x2c>)
1004325e:	400a      	ands	r2, r1
10043260:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10043262:	4b05      	ldr	r3, [pc, #20]	@ (10043278 <LL_PWR_SetNoPullB+0x2c>)
10043264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10043266:	687b      	ldr	r3, [r7, #4]
10043268:	43d9      	mvns	r1, r3
1004326a:	4b03      	ldr	r3, [pc, #12]	@ (10043278 <LL_PWR_SetNoPullB+0x2c>)
1004326c:	400a      	ands	r2, r1
1004326e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10043270:	46c0      	nop			@ (mov r8, r8)
10043272:	46bd      	mov	sp, r7
10043274:	b002      	add	sp, #8
10043276:	bd80      	pop	{r7, pc}
10043278:	48500000 	.word	0x48500000

1004327c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004327c:	b580      	push	{r7, lr}
1004327e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10043280:	4b07      	ldr	r3, [pc, #28]	@ (100432a0 <LL_RCC_HSE_IsReady+0x24>)
10043282:	681a      	ldr	r2, [r3, #0]
10043284:	2380      	movs	r3, #128	@ 0x80
10043286:	029b      	lsls	r3, r3, #10
10043288:	401a      	ands	r2, r3
1004328a:	2380      	movs	r3, #128	@ 0x80
1004328c:	029b      	lsls	r3, r3, #10
1004328e:	429a      	cmp	r2, r3
10043290:	d101      	bne.n	10043296 <LL_RCC_HSE_IsReady+0x1a>
10043292:	2301      	movs	r3, #1
10043294:	e000      	b.n	10043298 <LL_RCC_HSE_IsReady+0x1c>
10043296:	2300      	movs	r3, #0
}
10043298:	0018      	movs	r0, r3
1004329a:	46bd      	mov	sp, r7
1004329c:	bd80      	pop	{r7, pc}
1004329e:	46c0      	nop			@ (mov r8, r8)
100432a0:	48400000 	.word	0x48400000

100432a4 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
100432a4:	b580      	push	{r7, lr}
100432a6:	b082      	sub	sp, #8
100432a8:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
100432aa:	46c0      	nop			@ (mov r8, r8)
100432ac:	4b0f      	ldr	r3, [pc, #60]	@ (100432ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
100432ae:	681a      	ldr	r2, [r3, #0]
100432b0:	2380      	movs	r3, #128	@ 0x80
100432b2:	029b      	lsls	r3, r3, #10
100432b4:	4013      	ands	r3, r2
100432b6:	d0f9      	beq.n	100432ac <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100432b8:	4b0c      	ldr	r3, [pc, #48]	@ (100432ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
100432ba:	689a      	ldr	r2, [r3, #8]
100432bc:	4b0b      	ldr	r3, [pc, #44]	@ (100432ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
100432be:	2102      	movs	r1, #2
100432c0:	430a      	orrs	r2, r1
100432c2:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
100432c4:	2300      	movs	r3, #0
100432c6:	607b      	str	r3, [r7, #4]
100432c8:	e003      	b.n	100432d2 <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
100432ca:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100432cc:	687b      	ldr	r3, [r7, #4]
100432ce:	3301      	adds	r3, #1
100432d0:	607b      	str	r3, [r7, #4]
100432d2:	687b      	ldr	r3, [r7, #4]
100432d4:	2b05      	cmp	r3, #5
100432d6:	ddf8      	ble.n	100432ca <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100432d8:	4b04      	ldr	r3, [pc, #16]	@ (100432ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
100432da:	689a      	ldr	r2, [r3, #8]
100432dc:	4b03      	ldr	r3, [pc, #12]	@ (100432ec <LL_RCC_DIRECT_HSE_Enable+0x48>)
100432de:	2104      	movs	r1, #4
100432e0:	430a      	orrs	r2, r1
100432e2:	609a      	str	r2, [r3, #8]
}
100432e4:	46c0      	nop			@ (mov r8, r8)
100432e6:	46bd      	mov	sp, r7
100432e8:	b002      	add	sp, #8
100432ea:	bd80      	pop	{r7, pc}
100432ec:	48400000 	.word	0x48400000

100432f0 <LL_RCC_DIRECT_HSE_IsEnabled>:
  * @brief  Check if DIRECT_HSE mode is ready
  * @rmtoll CFGR           HSESEL/STOPHSI  LL_RCC_DIRECT_HSE_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_DIRECT_HSE_IsEnabled(void)
{
100432f0:	b580      	push	{r7, lr}
100432f2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR_HSESEL_STATUS)
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
100432f4:	4b05      	ldr	r3, [pc, #20]	@ (1004330c <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
100432f6:	689b      	ldr	r3, [r3, #8]
100432f8:	2208      	movs	r2, #8
100432fa:	4013      	ands	r3, r2
100432fc:	2b08      	cmp	r3, #8
100432fe:	d101      	bne.n	10043304 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10043300:	2301      	movs	r3, #1
10043302:	e000      	b.n	10043306 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10043304:	2300      	movs	r3, #0
#else
  return (((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL) == (RCC_CFGR_HSESEL)) && (READ_BIT(RCC->CFGR, RCC_CFGR_STOPHSI) == (RCC_CFGR_STOPHSI))) ? 1UL : 0UL);
#endif
}
10043306:	0018      	movs	r0, r3
10043308:	46bd      	mov	sp, r7
1004330a:	bd80      	pop	{r7, pc}
1004330c:	48400000 	.word	0x48400000

10043310 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10043310:	b580      	push	{r7, lr}
10043312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10043314:	4b04      	ldr	r3, [pc, #16]	@ (10043328 <LL_RCC_LSE_Enable+0x18>)
10043316:	681a      	ldr	r2, [r3, #0]
10043318:	4b03      	ldr	r3, [pc, #12]	@ (10043328 <LL_RCC_LSE_Enable+0x18>)
1004331a:	2110      	movs	r1, #16
1004331c:	430a      	orrs	r2, r1
1004331e:	601a      	str	r2, [r3, #0]
}
10043320:	46c0      	nop			@ (mov r8, r8)
10043322:	46bd      	mov	sp, r7
10043324:	bd80      	pop	{r7, pc}
10043326:	46c0      	nop			@ (mov r8, r8)
10043328:	48400000 	.word	0x48400000

1004332c <LL_RCC_LSE_IsEnabled>:
  * @brief  Check if Low Speed External (LSE) crystal has been enabled or not
  * @rmtoll CR         LSEON         LL_RCC_LSE_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsEnabled(void)
{
1004332c:	b580      	push	{r7, lr}
1004332e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEON) == (RCC_CR_LSEON)) ? 1UL : 0UL);
10043330:	4b05      	ldr	r3, [pc, #20]	@ (10043348 <LL_RCC_LSE_IsEnabled+0x1c>)
10043332:	681b      	ldr	r3, [r3, #0]
10043334:	2210      	movs	r2, #16
10043336:	4013      	ands	r3, r2
10043338:	2b10      	cmp	r3, #16
1004333a:	d101      	bne.n	10043340 <LL_RCC_LSE_IsEnabled+0x14>
1004333c:	2301      	movs	r3, #1
1004333e:	e000      	b.n	10043342 <LL_RCC_LSE_IsEnabled+0x16>
10043340:	2300      	movs	r3, #0
}
10043342:	0018      	movs	r0, r3
10043344:	46bd      	mov	sp, r7
10043346:	bd80      	pop	{r7, pc}
10043348:	48400000 	.word	0x48400000

1004334c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
1004334c:	b580      	push	{r7, lr}
1004334e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10043350:	4b05      	ldr	r3, [pc, #20]	@ (10043368 <LL_RCC_LSE_IsReady+0x1c>)
10043352:	681b      	ldr	r3, [r3, #0]
10043354:	2220      	movs	r2, #32
10043356:	4013      	ands	r3, r2
10043358:	2b20      	cmp	r3, #32
1004335a:	d101      	bne.n	10043360 <LL_RCC_LSE_IsReady+0x14>
1004335c:	2301      	movs	r3, #1
1004335e:	e000      	b.n	10043362 <LL_RCC_LSE_IsReady+0x16>
10043360:	2300      	movs	r3, #0
}
10043362:	0018      	movs	r0, r3
10043364:	46bd      	mov	sp, r7
10043366:	bd80      	pop	{r7, pc}
10043368:	48400000 	.word	0x48400000

1004336c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
1004336c:	b580      	push	{r7, lr}
1004336e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10043370:	4b04      	ldr	r3, [pc, #16]	@ (10043384 <LL_RCC_LSI_Enable+0x18>)
10043372:	681a      	ldr	r2, [r3, #0]
10043374:	4b03      	ldr	r3, [pc, #12]	@ (10043384 <LL_RCC_LSI_Enable+0x18>)
10043376:	2104      	movs	r1, #4
10043378:	430a      	orrs	r2, r1
1004337a:	601a      	str	r2, [r3, #0]
}
1004337c:	46c0      	nop			@ (mov r8, r8)
1004337e:	46bd      	mov	sp, r7
10043380:	bd80      	pop	{r7, pc}
10043382:	46c0      	nop			@ (mov r8, r8)
10043384:	48400000 	.word	0x48400000

10043388 <LL_RCC_LSI_IsEnabled>:
  * @brief  Check if LSI crystal oscillator is enabled.
  * @rmtoll CR         LSION        LL_RCC_LSI_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsEnabled(void)
{
10043388:	b580      	push	{r7, lr}
1004338a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSION) == (RCC_CR_LSION)) ? 1UL : 0UL);
1004338c:	4b05      	ldr	r3, [pc, #20]	@ (100433a4 <LL_RCC_LSI_IsEnabled+0x1c>)
1004338e:	681b      	ldr	r3, [r3, #0]
10043390:	2204      	movs	r2, #4
10043392:	4013      	ands	r3, r2
10043394:	2b04      	cmp	r3, #4
10043396:	d101      	bne.n	1004339c <LL_RCC_LSI_IsEnabled+0x14>
10043398:	2301      	movs	r3, #1
1004339a:	e000      	b.n	1004339e <LL_RCC_LSI_IsEnabled+0x16>
1004339c:	2300      	movs	r3, #0
}
1004339e:	0018      	movs	r0, r3
100433a0:	46bd      	mov	sp, r7
100433a2:	bd80      	pop	{r7, pc}
100433a4:	48400000 	.word	0x48400000

100433a8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
100433a8:	b580      	push	{r7, lr}
100433aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
100433ac:	4b05      	ldr	r3, [pc, #20]	@ (100433c4 <LL_RCC_LSI_IsReady+0x1c>)
100433ae:	681b      	ldr	r3, [r3, #0]
100433b0:	2208      	movs	r2, #8
100433b2:	4013      	ands	r3, r2
100433b4:	2b08      	cmp	r3, #8
100433b6:	d101      	bne.n	100433bc <LL_RCC_LSI_IsReady+0x14>
100433b8:	2301      	movs	r3, #1
100433ba:	e000      	b.n	100433be <LL_RCC_LSI_IsReady+0x16>
100433bc:	2300      	movs	r3, #0
}
100433be:	0018      	movs	r0, r3
100433c0:	46bd      	mov	sp, r7
100433c2:	bd80      	pop	{r7, pc}
100433c4:	48400000 	.word	0x48400000

100433c8 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
100433c8:	b580      	push	{r7, lr}
100433ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
100433cc:	4b04      	ldr	r3, [pc, #16]	@ (100433e0 <LL_RCC_RC64MPLL_Disable+0x18>)
100433ce:	681a      	ldr	r2, [r3, #0]
100433d0:	4b03      	ldr	r3, [pc, #12]	@ (100433e0 <LL_RCC_RC64MPLL_Disable+0x18>)
100433d2:	4904      	ldr	r1, [pc, #16]	@ (100433e4 <LL_RCC_RC64MPLL_Disable+0x1c>)
100433d4:	400a      	ands	r2, r1
100433d6:	601a      	str	r2, [r3, #0]
}
100433d8:	46c0      	nop			@ (mov r8, r8)
100433da:	46bd      	mov	sp, r7
100433dc:	bd80      	pop	{r7, pc}
100433de:	46c0      	nop			@ (mov r8, r8)
100433e0:	48400000 	.word	0x48400000
100433e4:	ffffdfff 	.word	0xffffdfff

100433e8 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
100433e8:	b580      	push	{r7, lr}
100433ea:	b082      	sub	sp, #8
100433ec:	af00      	add	r7, sp, #0
100433ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
100433f0:	4b06      	ldr	r3, [pc, #24]	@ (1004340c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100433f2:	689b      	ldr	r3, [r3, #8]
100433f4:	22e0      	movs	r2, #224	@ 0xe0
100433f6:	4393      	bics	r3, r2
100433f8:	0019      	movs	r1, r3
100433fa:	4b04      	ldr	r3, [pc, #16]	@ (1004340c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100433fc:	687a      	ldr	r2, [r7, #4]
100433fe:	430a      	orrs	r2, r1
10043400:	609a      	str	r2, [r3, #8]
}
10043402:	46c0      	nop			@ (mov r8, r8)
10043404:	46bd      	mov	sp, r7
10043406:	b002      	add	sp, #8
10043408:	bd80      	pop	{r7, pc}
1004340a:	46c0      	nop			@ (mov r8, r8)
1004340c:	48400000 	.word	0x48400000

10043410 <LL_RCC_GetCLKSYSPrescalerStatus>:
  *         @arg @ref LL_RCC_DIRECT_HSE_DIV_8
  *         @arg @ref LL_RCC_DIRECT_HSE_DIV_16
  *         @arg @ref LL_RCC_DIRECT_HSE_DIV_32
  */
__STATIC_INLINE uint32_t LL_RCC_GetCLKSYSPrescalerStatus(void)
{
10043410:	b580      	push	{r7, lr}
10043412:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->CFGR, RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos) << RCC_CFGR_CLKSYSDIV_Pos);
10043414:	4b04      	ldr	r3, [pc, #16]	@ (10043428 <LL_RCC_GetCLKSYSPrescalerStatus+0x18>)
10043416:	689b      	ldr	r3, [r3, #8]
10043418:	0a1b      	lsrs	r3, r3, #8
1004341a:	015b      	lsls	r3, r3, #5
1004341c:	22e0      	movs	r2, #224	@ 0xe0
1004341e:	4013      	ands	r3, r2
}
10043420:	0018      	movs	r0, r3
10043422:	46bd      	mov	sp, r7
10043424:	bd80      	pop	{r7, pc}
10043426:	46c0      	nop			@ (mov r8, r8)
10043428:	48400000 	.word	0x48400000

1004342c <LL_APB2_GRP1_IsEnabledClock>:
{
1004342c:	b580      	push	{r7, lr}
1004342e:	b082      	sub	sp, #8
10043430:	af00      	add	r7, sp, #0
10043432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10043434:	4b06      	ldr	r3, [pc, #24]	@ (10043450 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10043436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043438:	687a      	ldr	r2, [r7, #4]
1004343a:	4013      	ands	r3, r2
1004343c:	687a      	ldr	r2, [r7, #4]
1004343e:	429a      	cmp	r2, r3
10043440:	d101      	bne.n	10043446 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10043442:	2301      	movs	r3, #1
10043444:	e000      	b.n	10043448 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10043446:	2300      	movs	r3, #0
}
10043448:	0018      	movs	r0, r3
1004344a:	46bd      	mov	sp, r7
1004344c:	b002      	add	sp, #8
1004344e:	bd80      	pop	{r7, pc}
10043450:	48400000 	.word	0x48400000

10043454 <PWR_EnterOffMode>:
/** @addtogroup TINY_LPM_IF_Exported_functions
 * @{
 */

void PWR_EnterOffMode( void )
{
10043454:	b590      	push	{r4, r7, lr}
10043456:	b085      	sub	sp, #20
10043458:	af02      	add	r7, sp, #8
  PWR_DEEPSTOPTypeDef configDS;

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_ENTER);
1004345a:	2003      	movs	r0, #3
1004345c:	f001 fca5 	bl	10044daa <SYSTEM_DEBUG_SIGNAL_SET>
  /* USER CODE BEGIN PWR_EnterOffMode_1 */

  /* USER CODE END PWR_EnterOffMode_1 */

  /* Save the clock configuration */
  clockContext.directHSEenabled = FALSE;
10043460:	4b32      	ldr	r3, [pc, #200]	@ (1004352c <PWR_EnterOffMode+0xd8>)
10043462:	2200      	movs	r2, #0
10043464:	701a      	strb	r2, [r3, #0]
  clockContext.LSEenabled = FALSE;
10043466:	4b31      	ldr	r3, [pc, #196]	@ (1004352c <PWR_EnterOffMode+0xd8>)
10043468:	2200      	movs	r2, #0
1004346a:	705a      	strb	r2, [r3, #1]
  clockContext.LSIenabled = FALSE;
1004346c:	4b2f      	ldr	r3, [pc, #188]	@ (1004352c <PWR_EnterOffMode+0xd8>)
1004346e:	2200      	movs	r2, #0
10043470:	709a      	strb	r2, [r3, #2]
  if (LL_RCC_DIRECT_HSE_IsEnabled())
10043472:	f7ff ff3d 	bl	100432f0 <LL_RCC_DIRECT_HSE_IsEnabled>
10043476:	1e03      	subs	r3, r0, #0
10043478:	d002      	beq.n	10043480 <PWR_EnterOffMode+0x2c>
  {
    clockContext.directHSEenabled = TRUE;
1004347a:	4b2c      	ldr	r3, [pc, #176]	@ (1004352c <PWR_EnterOffMode+0xd8>)
1004347c:	2201      	movs	r2, #1
1004347e:	701a      	strb	r2, [r3, #0]
  }
#if defined(STM32WB07)
  clockContext.clkDiv =  LL_RCC_GetRC64MPLLPrescaler();
#else
  clockContext.clkDiv = LL_RCC_GetCLKSYSPrescalerStatus();
10043480:	f7ff ffc6 	bl	10043410 <LL_RCC_GetCLKSYSPrescalerStatus>
10043484:	0002      	movs	r2, r0
10043486:	4b29      	ldr	r3, [pc, #164]	@ (1004352c <PWR_EnterOffMode+0xd8>)
10043488:	605a      	str	r2, [r3, #4]
#endif
  if (LL_RCC_LSE_IsEnabled())
1004348a:	f7ff ff4f 	bl	1004332c <LL_RCC_LSE_IsEnabled>
1004348e:	1e03      	subs	r3, r0, #0
10043490:	d00e      	beq.n	100434b0 <PWR_EnterOffMode+0x5c>
  {
    clockContext.LSEenabled = TRUE;
10043492:	4b26      	ldr	r3, [pc, #152]	@ (1004352c <PWR_EnterOffMode+0xd8>)
10043494:	2201      	movs	r2, #1
10043496:	705a      	strb	r2, [r3, #1]
    /* Enable pull down for LSE pins */
    HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_12);
10043498:	2380      	movs	r3, #128	@ 0x80
1004349a:	015b      	lsls	r3, r3, #5
1004349c:	0019      	movs	r1, r3
1004349e:	2001      	movs	r0, #1
100434a0:	f003 fa74 	bl	1004698c <HAL_PWREx_EnableGPIOPullDown>
    HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_13);
100434a4:	2380      	movs	r3, #128	@ 0x80
100434a6:	019b      	lsls	r3, r3, #6
100434a8:	0019      	movs	r1, r3
100434aa:	2001      	movs	r0, #1
100434ac:	f003 fa6e 	bl	1004698c <HAL_PWREx_EnableGPIOPullDown>
  }
  if (LL_RCC_LSI_IsEnabled())
100434b0:	f7ff ff6a 	bl	10043388 <LL_RCC_LSI_IsEnabled>
100434b4:	1e03      	subs	r3, r0, #0
100434b6:	d002      	beq.n	100434be <PWR_EnterOffMode+0x6a>
  {
    clockContext.LSIenabled = TRUE;
100434b8:	4b1c      	ldr	r3, [pc, #112]	@ (1004352c <PWR_EnterOffMode+0xd8>)
100434ba:	2201      	movs	r2, #1
100434bc:	709a      	strb	r2, [r3, #2]
  }

  /* This signal cannot be reset later otherwise the GPIO output will be
     automatically restored to high at wakeup. */
  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_ENTER);
100434be:	2003      	movs	r0, #3
100434c0:	f001 fc7d 	bl	10044dbe <SYSTEM_DEBUG_SIGNAL_RESET>

  /* Save all the peripheral registers and CPU peripipheral configuration */
  apb0.deepstop_wdg_state = ENABLE;
100434c4:	4a1a      	ldr	r2, [pc, #104]	@ (10043530 <PWR_EnterOffMode+0xdc>)
100434c6:	23ba      	movs	r3, #186	@ 0xba
100434c8:	005b      	lsls	r3, r3, #1
100434ca:	2101      	movs	r1, #1
100434cc:	50d1      	str	r1, [r2, r3]
  prepareDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
100434ce:	4c19      	ldr	r4, [pc, #100]	@ (10043534 <PWR_EnterOffMode+0xe0>)
100434d0:	4a19      	ldr	r2, [pc, #100]	@ (10043538 <PWR_EnterOffMode+0xe4>)
100434d2:	491a      	ldr	r1, [pc, #104]	@ (1004353c <PWR_EnterOffMode+0xe8>)
100434d4:	4816      	ldr	r0, [pc, #88]	@ (10043530 <PWR_EnterOffMode+0xdc>)
100434d6:	4b1a      	ldr	r3, [pc, #104]	@ (10043540 <PWR_EnterOffMode+0xec>)
100434d8:	9301      	str	r3, [sp, #4]
100434da:	4b1a      	ldr	r3, [pc, #104]	@ (10043544 <PWR_EnterOffMode+0xf0>)
100434dc:	9300      	str	r3, [sp, #0]
100434de:	0023      	movs	r3, r4
100434e0:	f002 f804 	bl	100454ec <prepareDeviceLowPower>

  /* DEEPSTOP configuration */
  configDS.deepStopMode = PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF;
100434e4:	2300      	movs	r3, #0
100434e6:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigDEEPSTOP(&configDS);
100434e8:	1d3b      	adds	r3, r7, #4
100434ea:	0018      	movs	r0, r3
100434ec:	f003 f9a6 	bl	1004683c <HAL_PWR_ConfigDEEPSTOP>

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(LL_PWR_WAKEUP_ALL);
100434f0:	4b15      	ldr	r3, [pc, #84]	@ (10043548 <PWR_EnterOffMode+0xf4>)
100434f2:	0018      	movs	r0, r3
100434f4:	f7ff fe96 	bl	10043224 <LL_PWR_ClearWakeupSource>

  /* Enable the device DEEPSTOP configuration */
  LL_PWR_SetPowerMode(LL_PWR_MODE_DEEPSTOP);
100434f8:	2000      	movs	r0, #0
100434fa:	f7ff fe6f 	bl	100431dc <LL_PWR_SetPowerMode>

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
100434fe:	4b13      	ldr	r3, [pc, #76]	@ (1004354c <PWR_EnterOffMode+0xf8>)
10043500:	691a      	ldr	r2, [r3, #16]
10043502:	4b12      	ldr	r3, [pc, #72]	@ (1004354c <PWR_EnterOffMode+0xf8>)
10043504:	2104      	movs	r1, #4
10043506:	430a      	orrs	r2, r1
10043508:	611a      	str	r2, [r3, #16]

  /* Setup the SYS CLK DIV with the reset value */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
1004350a:	4b08      	ldr	r3, [pc, #32]	@ (1004352c <PWR_EnterOffMode+0xd8>)
1004350c:	685b      	ldr	r3, [r3, #4]
1004350e:	2b00      	cmp	r3, #0
10043510:	d102      	bne.n	10043518 <PWR_EnterOffMode+0xc4>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_4);
10043512:	2040      	movs	r0, #64	@ 0x40
10043514:	f7ff ff68 	bl	100433e8 <LL_RCC_SetRC64MPLLPrescaler>
  }

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_ACTIVE);
10043518:	2005      	movs	r0, #5
1004351a:	f001 fc46 	bl	10044daa <SYSTEM_DEBUG_SIGNAL_SET>

  /* Save the CPU context & Wait for Interrupt Request to enter in DEEPSTOP */
  CPUcontextSave();
1004351e:	f7fc fe49 	bl	100401b4 <CPUcontextSave>

  /* USER CODE BEGIN PWR_EnterOffMode_2 */

  /* USER CODE END PWR_EnterOffMode_2 */
}
10043522:	46c0      	nop			@ (mov r8, r8)
10043524:	46bd      	mov	sp, r7
10043526:	b003      	add	sp, #12
10043528:	bd90      	pop	{r4, r7, pc}
1004352a:	46c0      	nop			@ (mov r8, r8)
1004352c:	200008e8 	.word	0x200008e8
10043530:	20000410 	.word	0x20000410
10043534:	20000694 	.word	0x20000694
10043538:	20000690 	.word	0x20000690
1004353c:	20000588 	.word	0x20000588
10043540:	20000898 	.word	0x20000898
10043544:	20000864 	.word	0x20000864
10043548:	00ffffff 	.word	0x00ffffff
1004354c:	e000ed00 	.word	0xe000ed00

10043550 <PWR_ExitOffMode>:

void PWR_ExitOffMode( void )
{
10043550:	b590      	push	{r4, r7, lr}
10043552:	b083      	sub	sp, #12
10043554:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN PWR_ExitOffMode_1 */

  /* USER CODE END PWR_ExitOffMode_1 */

  /* Restore low speed clock configuration */
  if (clockContext.LSEenabled == TRUE)
10043556:	4b33      	ldr	r3, [pc, #204]	@ (10043624 <PWR_ExitOffMode+0xd4>)
10043558:	785b      	ldrb	r3, [r3, #1]
1004355a:	2b01      	cmp	r3, #1
1004355c:	d106      	bne.n	1004356c <PWR_ExitOffMode+0x1c>
  {
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 | LL_PWR_GPIO_BIT_13);
1004355e:	23c0      	movs	r3, #192	@ 0xc0
10043560:	019b      	lsls	r3, r3, #6
10043562:	0018      	movs	r0, r3
10043564:	f7ff fe72 	bl	1004324c <LL_PWR_SetNoPullB>
    LL_RCC_LSE_Enable();
10043568:	f7ff fed2 	bl	10043310 <LL_RCC_LSE_Enable>
  }
  if (clockContext.LSIenabled == TRUE)
1004356c:	4b2d      	ldr	r3, [pc, #180]	@ (10043624 <PWR_ExitOffMode+0xd4>)
1004356e:	789b      	ldrb	r3, [r3, #2]
10043570:	2b01      	cmp	r3, #1
10043572:	d101      	bne.n	10043578 <PWR_ExitOffMode+0x28>
  {
    LL_RCC_LSI_Enable();
10043574:	f7ff fefa 	bl	1004336c <LL_RCC_LSI_Enable>
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10043578:	4b2b      	ldr	r3, [pc, #172]	@ (10043628 <PWR_ExitOffMode+0xd8>)
1004357a:	691a      	ldr	r2, [r3, #16]
1004357c:	4b2a      	ldr	r3, [pc, #168]	@ (10043628 <PWR_ExitOffMode+0xd8>)
1004357e:	2104      	movs	r1, #4
10043580:	438a      	bics	r2, r1
10043582:	611a      	str	r2, [r3, #16]

  /* Restore all the peripheral registers and CPU peripipheral configuration */
  restoreDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
10043584:	4c29      	ldr	r4, [pc, #164]	@ (1004362c <PWR_ExitOffMode+0xdc>)
10043586:	4a2a      	ldr	r2, [pc, #168]	@ (10043630 <PWR_ExitOffMode+0xe0>)
10043588:	492a      	ldr	r1, [pc, #168]	@ (10043634 <PWR_ExitOffMode+0xe4>)
1004358a:	482b      	ldr	r0, [pc, #172]	@ (10043638 <PWR_ExitOffMode+0xe8>)
1004358c:	4b2b      	ldr	r3, [pc, #172]	@ (1004363c <PWR_ExitOffMode+0xec>)
1004358e:	9301      	str	r3, [sp, #4]
10043590:	4b2b      	ldr	r3, [pc, #172]	@ (10043640 <PWR_ExitOffMode+0xf0>)
10043592:	9300      	str	r3, [sp, #0]
10043594:	0023      	movs	r3, r4
10043596:	f001 ffc5 	bl	10045524 <restoreDeviceLowPower>

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_ACTIVE);
1004359a:	2005      	movs	r0, #5
1004359c:	f001 fc0f 	bl	10044dbe <SYSTEM_DEBUG_SIGNAL_RESET>
  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_EXIT);
100435a0:	2004      	movs	r0, #4
100435a2:	f001 fc02 	bl	10044daa <SYSTEM_DEBUG_SIGNAL_SET>

#if defined(PWR_CR2_GPIORET)
  /* Disable the GPIO retention at wake DEEPSTOP configuration */
  LL_PWR_DisableGPIORET();
100435a6:	f7ff fe2d 	bl	10043204 <LL_PWR_DisableGPIORET>
#endif

  /* Restore the CLK SYS DIV */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
100435aa:	4b1e      	ldr	r3, [pc, #120]	@ (10043624 <PWR_ExitOffMode+0xd4>)
100435ac:	685b      	ldr	r3, [r3, #4]
100435ae:	2b00      	cmp	r3, #0
100435b0:	d102      	bne.n	100435b8 <PWR_ExitOffMode+0x68>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_1);
100435b2:	2000      	movs	r0, #0
100435b4:	f7ff ff18 	bl	100433e8 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* Wait until the HSE is ready */
  while(LL_RCC_HSE_IsReady() == 0U);
100435b8:	46c0      	nop			@ (mov r8, r8)
100435ba:	f7ff fe5f 	bl	1004327c <LL_RCC_HSE_IsReady>
100435be:	1e03      	subs	r3, r0, #0
100435c0:	d0fb      	beq.n	100435ba <PWR_ExitOffMode+0x6a>

  /* Restore the DIRECT_HSE configuration */
  if (clockContext.directHSEenabled == TRUE)
100435c2:	4b18      	ldr	r3, [pc, #96]	@ (10043624 <PWR_ExitOffMode+0xd4>)
100435c4:	781b      	ldrb	r3, [r3, #0]
100435c6:	2b01      	cmp	r3, #1
100435c8:	d103      	bne.n	100435d2 <PWR_ExitOffMode+0x82>
  {
    LL_RCC_DIRECT_HSE_Enable();
100435ca:	f7ff fe6b 	bl	100432a4 <LL_RCC_DIRECT_HSE_Enable>
    LL_RCC_RC64MPLL_Disable();
100435ce:	f7ff fefb 	bl	100433c8 <LL_RCC_RC64MPLL_Disable>
  }
  if (clockContext.LSEenabled == TRUE)
100435d2:	4b14      	ldr	r3, [pc, #80]	@ (10043624 <PWR_ExitOffMode+0xd4>)
100435d4:	785b      	ldrb	r3, [r3, #1]
100435d6:	2b01      	cmp	r3, #1
100435d8:	d104      	bne.n	100435e4 <PWR_ExitOffMode+0x94>
  {
    /* Wait until the LSE is ready */
    while(LL_RCC_LSE_IsReady() == 0U);
100435da:	46c0      	nop			@ (mov r8, r8)
100435dc:	f7ff feb6 	bl	1004334c <LL_RCC_LSE_IsReady>
100435e0:	1e03      	subs	r3, r0, #0
100435e2:	d0fb      	beq.n	100435dc <PWR_ExitOffMode+0x8c>
  }
  if (clockContext.LSIenabled == TRUE)
100435e4:	4b0f      	ldr	r3, [pc, #60]	@ (10043624 <PWR_ExitOffMode+0xd4>)
100435e6:	789b      	ldrb	r3, [r3, #2]
100435e8:	2b01      	cmp	r3, #1
100435ea:	d104      	bne.n	100435f6 <PWR_ExitOffMode+0xa6>
  {
    /* Wait until the LSI is ready */
    while(LL_RCC_LSI_IsReady() == 0U);
100435ec:	46c0      	nop			@ (mov r8, r8)
100435ee:	f7ff fedb 	bl	100433a8 <LL_RCC_LSI_IsReady>
100435f2:	1e03      	subs	r3, r0, #0
100435f4:	d0fb      	beq.n	100435ee <PWR_ExitOffMode+0x9e>
  }
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
100435f6:	2001      	movs	r0, #1
100435f8:	f7ff ff18 	bl	1004342c <LL_APB2_GRP1_IsEnabledClock>
100435fc:	1e03      	subs	r3, r0, #0
100435fe:	d004      	beq.n	1004360a <PWR_ExitOffMode+0xba>
  {
    /* Wait untile the ABSOLUTE TIME clock correctly */
    while(WAKEUP->ABSOLUTE_TIME == 0xF);
10043600:	46c0      	nop			@ (mov r8, r8)
10043602:	4b10      	ldr	r3, [pc, #64]	@ (10043644 <PWR_ExitOffMode+0xf4>)
10043604:	691b      	ldr	r3, [r3, #16]
10043606:	2b0f      	cmp	r3, #15
10043608:	d0fb      	beq.n	10043602 <PWR_ExitOffMode+0xb2>
  }

  if(RAM_VR.WakeupFromSleepFlag)
1004360a:	4b0f      	ldr	r3, [pc, #60]	@ (10043648 <PWR_ExitOffMode+0xf8>)
1004360c:	689b      	ldr	r3, [r3, #8]
1004360e:	2b00      	cmp	r3, #0
10043610:	d001      	beq.n	10043616 <PWR_ExitOffMode+0xc6>
  {
    /* Handler to manage the IOs IRQ if needed */
    HAL_PWR_WKUP_IRQHandler();
10043612:	f003 f967 	bl	100468e4 <HAL_PWR_WKUP_IRQHandler>

  /* USER CODE BEGIN PWR_ExitOffMode_2 */

  /* USER CODE END PWR_ExitOffMode_2 */

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_EXIT);
10043616:	2004      	movs	r0, #4
10043618:	f001 fbd1 	bl	10044dbe <SYSTEM_DEBUG_SIGNAL_RESET>
}
1004361c:	46c0      	nop			@ (mov r8, r8)
1004361e:	46bd      	mov	sp, r7
10043620:	b001      	add	sp, #4
10043622:	bd90      	pop	{r4, r7, pc}
10043624:	200008e8 	.word	0x200008e8
10043628:	e000ed00 	.word	0xe000ed00
1004362c:	20000694 	.word	0x20000694
10043630:	20000690 	.word	0x20000690
10043634:	20000588 	.word	0x20000588
10043638:	20000410 	.word	0x20000410
1004363c:	20000898 	.word	0x20000898
10043640:	20000864 	.word	0x20000864
10043644:	60001800 	.word	0x60001800
10043648:	20000004 	.word	0x20000004

1004364c <PWR_EnterStopMode>:

void PWR_EnterStopMode( void )
{
1004364c:	b590      	push	{r4, r7, lr}
1004364e:	b085      	sub	sp, #20
10043650:	af02      	add	r7, sp, #8
  PWR_DEEPSTOPTypeDef configDS;

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_ENTER);
10043652:	2000      	movs	r0, #0
10043654:	f001 fba9 	bl	10044daa <SYSTEM_DEBUG_SIGNAL_SET>
  /* USER CODE BEGIN PWR_EnterStopMode_1 */

  /* USER CODE END PWR_EnterStopMode_1 */

  /* Save the clock configuration */
  clockContext.directHSEenabled = FALSE;
10043658:	4b29      	ldr	r3, [pc, #164]	@ (10043700 <PWR_EnterStopMode+0xb4>)
1004365a:	2200      	movs	r2, #0
1004365c:	701a      	strb	r2, [r3, #0]
  clockContext.LSEenabled = FALSE;
1004365e:	4b28      	ldr	r3, [pc, #160]	@ (10043700 <PWR_EnterStopMode+0xb4>)
10043660:	2200      	movs	r2, #0
10043662:	705a      	strb	r2, [r3, #1]
  clockContext.LSIenabled = FALSE;
10043664:	4b26      	ldr	r3, [pc, #152]	@ (10043700 <PWR_EnterStopMode+0xb4>)
10043666:	2200      	movs	r2, #0
10043668:	709a      	strb	r2, [r3, #2]
  if (LL_RCC_DIRECT_HSE_IsEnabled())
1004366a:	f7ff fe41 	bl	100432f0 <LL_RCC_DIRECT_HSE_IsEnabled>
1004366e:	1e03      	subs	r3, r0, #0
10043670:	d002      	beq.n	10043678 <PWR_EnterStopMode+0x2c>
  {
    clockContext.directHSEenabled = TRUE;
10043672:	4b23      	ldr	r3, [pc, #140]	@ (10043700 <PWR_EnterStopMode+0xb4>)
10043674:	2201      	movs	r2, #1
10043676:	701a      	strb	r2, [r3, #0]
  }
#if defined(STM32WB07)
  clockContext.clkDiv =  LL_RCC_GetRC64MPLLPrescaler();
#else
  clockContext.clkDiv = LL_RCC_GetCLKSYSPrescalerStatus();
10043678:	f7ff feca 	bl	10043410 <LL_RCC_GetCLKSYSPrescalerStatus>
1004367c:	0002      	movs	r2, r0
1004367e:	4b20      	ldr	r3, [pc, #128]	@ (10043700 <PWR_EnterStopMode+0xb4>)
10043680:	605a      	str	r2, [r3, #4]
#endif

  /* Setup the wakeup sources */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_BLEHOST|PWR_WAKEUP_BLE, 0);
10043682:	23c0      	movs	r3, #192	@ 0xc0
10043684:	019b      	lsls	r3, r3, #6
10043686:	2100      	movs	r1, #0
10043688:	0018      	movs	r0, r3
1004368a:	f003 f87b 	bl	10046784 <HAL_PWR_EnableWakeUpPin>

  /* This signal cannot be reset later otherwise the GPIO output will be
     automatically restored to high at wakeup. */
  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_ENTER);
1004368e:	2000      	movs	r0, #0
10043690:	f001 fb95 	bl	10044dbe <SYSTEM_DEBUG_SIGNAL_RESET>

  /* Save all the peripheral registers and CPU peripipheral configuration */
  apb0.deepstop_wdg_state = ENABLE;
10043694:	4a1b      	ldr	r2, [pc, #108]	@ (10043704 <PWR_EnterStopMode+0xb8>)
10043696:	23ba      	movs	r3, #186	@ 0xba
10043698:	005b      	lsls	r3, r3, #1
1004369a:	2101      	movs	r1, #1
1004369c:	50d1      	str	r1, [r2, r3]
  prepareDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
1004369e:	4c1a      	ldr	r4, [pc, #104]	@ (10043708 <PWR_EnterStopMode+0xbc>)
100436a0:	4a1a      	ldr	r2, [pc, #104]	@ (1004370c <PWR_EnterStopMode+0xc0>)
100436a2:	491b      	ldr	r1, [pc, #108]	@ (10043710 <PWR_EnterStopMode+0xc4>)
100436a4:	4817      	ldr	r0, [pc, #92]	@ (10043704 <PWR_EnterStopMode+0xb8>)
100436a6:	4b1b      	ldr	r3, [pc, #108]	@ (10043714 <PWR_EnterStopMode+0xc8>)
100436a8:	9301      	str	r3, [sp, #4]
100436aa:	4b1b      	ldr	r3, [pc, #108]	@ (10043718 <PWR_EnterStopMode+0xcc>)
100436ac:	9300      	str	r3, [sp, #0]
100436ae:	0023      	movs	r3, r4
100436b0:	f001 ff1c 	bl	100454ec <prepareDeviceLowPower>

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(LL_PWR_WAKEUP_ALL);
100436b4:	4b19      	ldr	r3, [pc, #100]	@ (1004371c <PWR_EnterStopMode+0xd0>)
100436b6:	0018      	movs	r0, r3
100436b8:	f7ff fdb4 	bl	10043224 <LL_PWR_ClearWakeupSource>

  /* DEEPSTOP configuration */
  configDS.deepStopMode = PWR_DEEPSTOP_WITH_SLOW_CLOCK_ON;
100436bc:	2301      	movs	r3, #1
100436be:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigDEEPSTOP(&configDS);
100436c0:	1d3b      	adds	r3, r7, #4
100436c2:	0018      	movs	r0, r3
100436c4:	f003 f8ba 	bl	1004683c <HAL_PWR_ConfigDEEPSTOP>

  /* Enable the device DEEPSTOP configuration */
  LL_PWR_SetPowerMode(LL_PWR_MODE_DEEPSTOP);
100436c8:	2000      	movs	r0, #0
100436ca:	f7ff fd87 	bl	100431dc <LL_PWR_SetPowerMode>

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
100436ce:	4b14      	ldr	r3, [pc, #80]	@ (10043720 <PWR_EnterStopMode+0xd4>)
100436d0:	691a      	ldr	r2, [r3, #16]
100436d2:	4b13      	ldr	r3, [pc, #76]	@ (10043720 <PWR_EnterStopMode+0xd4>)
100436d4:	2104      	movs	r1, #4
100436d6:	430a      	orrs	r2, r1
100436d8:	611a      	str	r2, [r3, #16]

  /* Setup the SYS CLK DIV with the reset value */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
100436da:	4b09      	ldr	r3, [pc, #36]	@ (10043700 <PWR_EnterStopMode+0xb4>)
100436dc:	685b      	ldr	r3, [r3, #4]
100436de:	2b00      	cmp	r3, #0
100436e0:	d102      	bne.n	100436e8 <PWR_EnterStopMode+0x9c>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_4);
100436e2:	2040      	movs	r0, #64	@ 0x40
100436e4:	f7ff fe80 	bl	100433e8 <LL_RCC_SetRC64MPLLPrescaler>
  }

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_ACTIVE);
100436e8:	2002      	movs	r0, #2
100436ea:	f001 fb5e 	bl	10044daa <SYSTEM_DEBUG_SIGNAL_SET>

  /* Save the CPU context & Wait for Interrupt Request to enter in DEEPSTOP */
  CPUcontextSave();
100436ee:	f7fc fd61 	bl	100401b4 <CPUcontextSave>

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_ACTIVE);
100436f2:	2002      	movs	r0, #2
100436f4:	f001 fb63 	bl	10044dbe <SYSTEM_DEBUG_SIGNAL_RESET>

  /* USER CODE BEGIN PWR_EnterStopMode_2 */

  /* USER CODE END PWR_EnterStopMode_2 */
}
100436f8:	46c0      	nop			@ (mov r8, r8)
100436fa:	46bd      	mov	sp, r7
100436fc:	b003      	add	sp, #12
100436fe:	bd90      	pop	{r4, r7, pc}
10043700:	200008e8 	.word	0x200008e8
10043704:	20000410 	.word	0x20000410
10043708:	20000694 	.word	0x20000694
1004370c:	20000690 	.word	0x20000690
10043710:	20000588 	.word	0x20000588
10043714:	20000898 	.word	0x20000898
10043718:	20000864 	.word	0x20000864
1004371c:	00ffffff 	.word	0x00ffffff
10043720:	e000ed00 	.word	0xe000ed00

10043724 <PWR_ExitStopMode>:

void PWR_ExitStopMode( void )
{
10043724:	b590      	push	{r4, r7, lr}
10043726:	b083      	sub	sp, #12
10043728:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN PWR_ExitStopMode_1 */

  /* USER CODE END PWR_ExitStopMode_1 */

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
1004372a:	4b1b      	ldr	r3, [pc, #108]	@ (10043798 <PWR_ExitStopMode+0x74>)
1004372c:	691a      	ldr	r2, [r3, #16]
1004372e:	4b1a      	ldr	r3, [pc, #104]	@ (10043798 <PWR_ExitStopMode+0x74>)
10043730:	2104      	movs	r1, #4
10043732:	438a      	bics	r2, r1
10043734:	611a      	str	r2, [r3, #16]

  /* Restore all the peripheral registers and CPU peripipheral configuration */
  restoreDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
10043736:	4c19      	ldr	r4, [pc, #100]	@ (1004379c <PWR_ExitStopMode+0x78>)
10043738:	4a19      	ldr	r2, [pc, #100]	@ (100437a0 <PWR_ExitStopMode+0x7c>)
1004373a:	491a      	ldr	r1, [pc, #104]	@ (100437a4 <PWR_ExitStopMode+0x80>)
1004373c:	481a      	ldr	r0, [pc, #104]	@ (100437a8 <PWR_ExitStopMode+0x84>)
1004373e:	4b1b      	ldr	r3, [pc, #108]	@ (100437ac <PWR_ExitStopMode+0x88>)
10043740:	9301      	str	r3, [sp, #4]
10043742:	4b1b      	ldr	r3, [pc, #108]	@ (100437b0 <PWR_ExitStopMode+0x8c>)
10043744:	9300      	str	r3, [sp, #0]
10043746:	0023      	movs	r3, r4
10043748:	f001 feec 	bl	10045524 <restoreDeviceLowPower>

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_EXIT);
1004374c:	2001      	movs	r0, #1
1004374e:	f001 fb2c 	bl	10044daa <SYSTEM_DEBUG_SIGNAL_SET>

#if defined(PWR_CR2_GPIORET)
  /* Disable the GPIO retention at wake DEEPSTOP configuration */
  LL_PWR_DisableGPIORET();
10043752:	f7ff fd57 	bl	10043204 <LL_PWR_DisableGPIORET>
#endif

  /* Restore the CLK SYS DIV */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
10043756:	4b17      	ldr	r3, [pc, #92]	@ (100437b4 <PWR_ExitStopMode+0x90>)
10043758:	685b      	ldr	r3, [r3, #4]
1004375a:	2b00      	cmp	r3, #0
1004375c:	d102      	bne.n	10043764 <PWR_ExitStopMode+0x40>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_1);
1004375e:	2000      	movs	r0, #0
10043760:	f7ff fe42 	bl	100433e8 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* Wait until the HSE is ready */
  while(LL_RCC_HSE_IsReady() == 0U);
10043764:	46c0      	nop			@ (mov r8, r8)
10043766:	f7ff fd89 	bl	1004327c <LL_RCC_HSE_IsReady>
1004376a:	1e03      	subs	r3, r0, #0
1004376c:	d0fb      	beq.n	10043766 <PWR_ExitStopMode+0x42>

  /* Restore the DIRECT_HSE configuration */
  if (clockContext.directHSEenabled == TRUE)
1004376e:	4b11      	ldr	r3, [pc, #68]	@ (100437b4 <PWR_ExitStopMode+0x90>)
10043770:	781b      	ldrb	r3, [r3, #0]
10043772:	2b01      	cmp	r3, #1
10043774:	d103      	bne.n	1004377e <PWR_ExitStopMode+0x5a>
  {
    LL_RCC_DIRECT_HSE_Enable();
10043776:	f7ff fd95 	bl	100432a4 <LL_RCC_DIRECT_HSE_Enable>
    LL_RCC_RC64MPLL_Disable();
1004377a:	f7ff fe25 	bl	100433c8 <LL_RCC_RC64MPLL_Disable>
  }

  if(RAM_VR.WakeupFromSleepFlag)
1004377e:	4b0e      	ldr	r3, [pc, #56]	@ (100437b8 <PWR_ExitStopMode+0x94>)
10043780:	689b      	ldr	r3, [r3, #8]
10043782:	2b00      	cmp	r3, #0
10043784:	d001      	beq.n	1004378a <PWR_ExitStopMode+0x66>
  {
    /* Handler to manage the IOs IRQ if needed */
    HAL_PWR_WKUP_IRQHandler();
10043786:	f003 f8ad 	bl	100468e4 <HAL_PWR_WKUP_IRQHandler>

  /* USER CODE BEGIN PWR_ExitStopMode_2 */

  /* USER CODE END PWR_ExitStopMode_2 */

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_EXIT);
1004378a:	2001      	movs	r0, #1
1004378c:	f001 fb17 	bl	10044dbe <SYSTEM_DEBUG_SIGNAL_RESET>
}
10043790:	46c0      	nop			@ (mov r8, r8)
10043792:	46bd      	mov	sp, r7
10043794:	b001      	add	sp, #4
10043796:	bd90      	pop	{r4, r7, pc}
10043798:	e000ed00 	.word	0xe000ed00
1004379c:	20000694 	.word	0x20000694
100437a0:	20000690 	.word	0x20000690
100437a4:	20000588 	.word	0x20000588
100437a8:	20000410 	.word	0x20000410
100437ac:	20000898 	.word	0x20000898
100437b0:	20000864 	.word	0x20000864
100437b4:	200008e8 	.word	0x200008e8
100437b8:	20000004 	.word	0x20000004

100437bc <PWR_EnterSleepMode>:

void PWR_EnterSleepMode( void )
{
100437bc:	b580      	push	{r7, lr}
100437be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_EnterSleepMode */
  HAL_SuspendTick();
100437c0:	f002 fa1c 	bl	10045bfc <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode();
100437c4:	f003 f82c 	bl	10046820 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE END PWR_EnterSleepMode */
}
100437c8:	46c0      	nop			@ (mov r8, r8)
100437ca:	46bd      	mov	sp, r7
100437cc:	bd80      	pop	{r7, pc}

100437ce <PWR_ExitSleepMode>:

void PWR_ExitSleepMode( void )
{
100437ce:	b580      	push	{r7, lr}
100437d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_ExitSleepMode */
  HAL_ResumeTick();
100437d2:	f002 fa21 	bl	10045c18 <HAL_ResumeTick>
  /* USER CODE END PWR_ExitSleepMode */
}
100437d6:	46c0      	nop			@ (mov r8, r8)
100437d8:	46bd      	mov	sp, r7
100437da:	bd80      	pop	{r7, pc}

100437dc <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
100437dc:	b580      	push	{r7, lr}
100437de:	b084      	sub	sp, #16
100437e0:	af00      	add	r7, sp, #0
100437e2:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
100437e4:	687b      	ldr	r3, [r7, #4]
100437e6:	681b      	ldr	r3, [r3, #0]
100437e8:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
100437ea:	687b      	ldr	r3, [r7, #4]
100437ec:	2200      	movs	r2, #0
100437ee:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
100437f0:	687b      	ldr	r3, [r7, #4]
100437f2:	2200      	movs	r2, #0
100437f4:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
100437f6:	687b      	ldr	r3, [r7, #4]
100437f8:	2200      	movs	r2, #0
100437fa:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
100437fc:	687b      	ldr	r3, [r7, #4]
100437fe:	2200      	movs	r2, #0
10043800:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
10043802:	68fb      	ldr	r3, [r7, #12]
10043804:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
10043806:	68bb      	ldr	r3, [r7, #8]
10043808:	781b      	ldrb	r3, [r3, #0]
1004380a:	2bff      	cmp	r3, #255	@ 0xff
1004380c:	d10c      	bne.n	10043828 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
1004380e:	687b      	ldr	r3, [r7, #4]
10043810:	685b      	ldr	r3, [r3, #4]
10043812:	b29a      	uxth	r2, r3
10043814:	68fb      	ldr	r3, [r7, #12]
10043816:	b29b      	uxth	r3, r3
10043818:	1ad3      	subs	r3, r2, r3
1004381a:	b29b      	uxth	r3, r3
1004381c:	3b04      	subs	r3, #4
1004381e:	b29a      	uxth	r2, r3
10043820:	687b      	ldr	r3, [r7, #4]
10043822:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
10043824:	2300      	movs	r3, #0
10043826:	e028      	b.n	1004387a <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
10043828:	68bb      	ldr	r3, [r7, #8]
1004382a:	781b      	ldrb	r3, [r3, #0]
1004382c:	2bfe      	cmp	r3, #254	@ 0xfe
1004382e:	d106      	bne.n	1004383e <NVMDB_get_info+0x62>
    {
      info->valid_records++;
10043830:	687b      	ldr	r3, [r7, #4]
10043832:	891b      	ldrh	r3, [r3, #8]
10043834:	3301      	adds	r3, #1
10043836:	b29a      	uxth	r2, r3
10043838:	687b      	ldr	r3, [r7, #4]
1004383a:	811a      	strh	r2, [r3, #8]
1004383c:	e00c      	b.n	10043858 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
1004383e:	68bb      	ldr	r3, [r7, #8]
10043840:	781b      	ldrb	r3, [r3, #0]
10043842:	2b00      	cmp	r3, #0
10043844:	d106      	bne.n	10043854 <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
10043846:	687b      	ldr	r3, [r7, #4]
10043848:	895b      	ldrh	r3, [r3, #10]
1004384a:	3301      	adds	r3, #1
1004384c:	b29a      	uxth	r2, r3
1004384e:	687b      	ldr	r3, [r7, #4]
10043850:	815a      	strh	r2, [r3, #10]
10043852:	e001      	b.n	10043858 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
10043854:	2303      	movs	r3, #3
10043856:	e010      	b.n	1004387a <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10043858:	68bb      	ldr	r3, [r7, #8]
1004385a:	885b      	ldrh	r3, [r3, #2]
1004385c:	3303      	adds	r3, #3
1004385e:	2203      	movs	r2, #3
10043860:	4313      	orrs	r3, r2
10043862:	001a      	movs	r2, r3
10043864:	68fb      	ldr	r3, [r7, #12]
10043866:	18d3      	adds	r3, r2, r3
10043868:	3301      	adds	r3, #1
1004386a:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
1004386c:	68fb      	ldr	r3, [r7, #12]
1004386e:	1d5a      	adds	r2, r3, #5
10043870:	687b      	ldr	r3, [r7, #4]
10043872:	685b      	ldr	r3, [r3, #4]
10043874:	429a      	cmp	r2, r3
10043876:	d3c4      	bcc.n	10043802 <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
10043878:	2300      	movs	r3, #0
    }
  }
}
1004387a:	0018      	movs	r0, r3
1004387c:	46bd      	mov	sp, r7
1004387e:	b004      	add	sp, #16
10043880:	bd80      	pop	{r7, pc}

10043882 <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
10043882:	b580      	push	{r7, lr}
10043884:	b086      	sub	sp, #24
10043886:	af00      	add	r7, sp, #0
10043888:	60f8      	str	r0, [r7, #12]
1004388a:	607a      	str	r2, [r7, #4]
1004388c:	603b      	str	r3, [r7, #0]
1004388e:	230b      	movs	r3, #11
10043890:	18fb      	adds	r3, r7, r3
10043892:	1c0a      	adds	r2, r1, #0
10043894:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
10043896:	2020      	movs	r0, #32
10043898:	183b      	adds	r3, r7, r0
1004389a:	881b      	ldrh	r3, [r3, #0]
1004389c:	2b00      	cmp	r3, #0
1004389e:	d00a      	beq.n	100438b6 <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
100438a0:	2110      	movs	r1, #16
100438a2:	187a      	adds	r2, r7, r1
100438a4:	183b      	adds	r3, r7, r0
100438a6:	881b      	ldrh	r3, [r3, #0]
100438a8:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
100438aa:	187b      	adds	r3, r7, r1
100438ac:	22fe      	movs	r2, #254	@ 0xfe
100438ae:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
100438b0:	187b      	adds	r3, r7, r1
100438b2:	617b      	str	r3, [r7, #20]
100438b4:	e002      	b.n	100438bc <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
100438b6:	68fb      	ldr	r3, [r7, #12]
100438b8:	685b      	ldr	r3, [r3, #4]
100438ba:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100438bc:	68fb      	ldr	r3, [r7, #12]
100438be:	685a      	ldr	r2, [r3, #4]
100438c0:	68fb      	ldr	r3, [r7, #12]
100438c2:	689b      	ldr	r3, [r3, #8]
100438c4:	429a      	cmp	r2, r3
100438c6:	d203      	bcs.n	100438d0 <NextRecordNoLock+0x4e>
100438c8:	697b      	ldr	r3, [r7, #20]
100438ca:	781b      	ldrb	r3, [r3, #0]
100438cc:	2bff      	cmp	r3, #255	@ 0xff
100438ce:	d101      	bne.n	100438d4 <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
100438d0:	2304      	movs	r3, #4
100438d2:	e04b      	b.n	1004396c <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
100438d4:	68fb      	ldr	r3, [r7, #12]
100438d6:	7b1b      	ldrb	r3, [r3, #12]
100438d8:	2b00      	cmp	r3, #0
100438da:	d003      	beq.n	100438e4 <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
100438dc:	68fb      	ldr	r3, [r7, #12]
100438de:	2200      	movs	r2, #0
100438e0:	731a      	strb	r2, [r3, #12]
100438e2:	e019      	b.n	10043918 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
100438e4:	68fb      	ldr	r3, [r7, #12]
100438e6:	685b      	ldr	r3, [r3, #4]
100438e8:	697a      	ldr	r2, [r7, #20]
100438ea:	8852      	ldrh	r2, [r2, #2]
100438ec:	3203      	adds	r2, #3
100438ee:	2103      	movs	r1, #3
100438f0:	430a      	orrs	r2, r1
100438f2:	189b      	adds	r3, r3, r2
100438f4:	1c5a      	adds	r2, r3, #1
100438f6:	68fb      	ldr	r3, [r7, #12]
100438f8:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
100438fa:	68fb      	ldr	r3, [r7, #12]
100438fc:	685b      	ldr	r3, [r3, #4]
100438fe:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10043900:	68fb      	ldr	r3, [r7, #12]
10043902:	685a      	ldr	r2, [r3, #4]
10043904:	68fb      	ldr	r3, [r7, #12]
10043906:	689b      	ldr	r3, [r3, #8]
10043908:	429a      	cmp	r2, r3
1004390a:	d203      	bcs.n	10043914 <NextRecordNoLock+0x92>
1004390c:	697b      	ldr	r3, [r7, #20]
1004390e:	781b      	ldrb	r3, [r3, #0]
10043910:	2bff      	cmp	r3, #255	@ 0xff
10043912:	d101      	bne.n	10043918 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
10043914:	2304      	movs	r3, #4
10043916:	e029      	b.n	1004396c <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
10043918:	697b      	ldr	r3, [r7, #20]
1004391a:	781b      	ldrb	r3, [r3, #0]
1004391c:	2b00      	cmp	r3, #0
1004391e:	d023      	beq.n	10043968 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
10043920:	697b      	ldr	r3, [r7, #20]
10043922:	781b      	ldrb	r3, [r3, #0]
10043924:	2bfe      	cmp	r3, #254	@ 0xfe
10043926:	d001      	beq.n	1004392c <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
10043928:	2303      	movs	r3, #3
1004392a:	e01f      	b.n	1004396c <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
1004392c:	220b      	movs	r2, #11
1004392e:	18bb      	adds	r3, r7, r2
10043930:	781b      	ldrb	r3, [r3, #0]
10043932:	2bff      	cmp	r3, #255	@ 0xff
10043934:	d005      	beq.n	10043942 <NextRecordNoLock+0xc0>
10043936:	697b      	ldr	r3, [r7, #20]
10043938:	785b      	ldrb	r3, [r3, #1]
1004393a:	18ba      	adds	r2, r7, r2
1004393c:	7812      	ldrb	r2, [r2, #0]
1004393e:	429a      	cmp	r2, r3
10043940:	d1c8      	bne.n	100438d4 <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
10043942:	68fb      	ldr	r3, [r7, #12]
10043944:	685b      	ldr	r3, [r3, #4]
10043946:	3304      	adds	r3, #4
10043948:	001a      	movs	r2, r3
1004394a:	687b      	ldr	r3, [r7, #4]
1004394c:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
1004394e:	697b      	ldr	r3, [r7, #20]
10043950:	885a      	ldrh	r2, [r3, #2]
10043952:	683b      	ldr	r3, [r7, #0]
10043954:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
10043956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043958:	2b00      	cmp	r3, #0
1004395a:	d003      	beq.n	10043964 <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
1004395c:	697b      	ldr	r3, [r7, #20]
1004395e:	785a      	ldrb	r2, [r3, #1]
10043960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043962:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
10043964:	2300      	movs	r3, #0
10043966:	e001      	b.n	1004396c <NextRecordNoLock+0xea>
      continue;
10043968:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
1004396a:	e7b3      	b.n	100438d4 <NextRecordNoLock+0x52>
    }
  }
}
1004396c:	0018      	movs	r0, r3
1004396e:	46bd      	mov	sp, r7
10043970:	b006      	add	sp, #24
10043972:	bd80      	pop	{r7, pc}

10043974 <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
10043974:	b5f0      	push	{r4, r5, r6, r7, lr}
10043976:	b08b      	sub	sp, #44	@ 0x2c
10043978:	af02      	add	r7, sp, #8
1004397a:	60f8      	str	r0, [r7, #12]
1004397c:	0008      	movs	r0, r1
1004397e:	0011      	movs	r1, r2
10043980:	607b      	str	r3, [r7, #4]
10043982:	230b      	movs	r3, #11
10043984:	18fb      	adds	r3, r7, r3
10043986:	1c02      	adds	r2, r0, #0
10043988:	701a      	strb	r2, [r3, #0]
1004398a:	2208      	movs	r2, #8
1004398c:	0010      	movs	r0, r2
1004398e:	18bb      	adds	r3, r7, r2
10043990:	1c0a      	adds	r2, r1, #0
10043992:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
10043994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10043996:	2200      	movs	r2, #0
10043998:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
1004399a:	261f      	movs	r6, #31
1004399c:	19bc      	adds	r4, r7, r6
1004399e:	2216      	movs	r2, #22
100439a0:	18bd      	adds	r5, r7, r2
100439a2:	2218      	movs	r2, #24
100439a4:	18ba      	adds	r2, r7, r2
100439a6:	230b      	movs	r3, #11
100439a8:	18fb      	adds	r3, r7, r3
100439aa:	7819      	ldrb	r1, [r3, #0]
100439ac:	68fb      	ldr	r3, [r7, #12]
100439ae:	469c      	mov	ip, r3
100439b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100439b2:	9301      	str	r3, [sp, #4]
100439b4:	2338      	movs	r3, #56	@ 0x38
100439b6:	181b      	adds	r3, r3, r0
100439b8:	19db      	adds	r3, r3, r7
100439ba:	881b      	ldrh	r3, [r3, #0]
100439bc:	9300      	str	r3, [sp, #0]
100439be:	002b      	movs	r3, r5
100439c0:	4660      	mov	r0, ip
100439c2:	f7ff ff5e 	bl	10043882 <NextRecordNoLock>
100439c6:	0003      	movs	r3, r0
100439c8:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
100439ca:	19bb      	adds	r3, r7, r6
100439cc:	781b      	ldrb	r3, [r3, #0]
100439ce:	2b00      	cmp	r3, #0
100439d0:	d002      	beq.n	100439d8 <ReadNextRecordNoLock+0x64>
  {
    return status;
100439d2:	19bb      	adds	r3, r7, r6
100439d4:	781b      	ldrb	r3, [r3, #0]
100439d6:	e027      	b.n	10043a28 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
100439d8:	2316      	movs	r3, #22
100439da:	18fb      	adds	r3, r7, r3
100439dc:	881b      	ldrh	r3, [r3, #0]
100439de:	2208      	movs	r2, #8
100439e0:	18ba      	adds	r2, r7, r2
100439e2:	8812      	ldrh	r2, [r2, #0]
100439e4:	429a      	cmp	r2, r3
100439e6:	d301      	bcc.n	100439ec <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
100439e8:	2306      	movs	r3, #6
100439ea:	e01d      	b.n	10043a28 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
100439ec:	69ba      	ldr	r2, [r7, #24]
100439ee:	2408      	movs	r4, #8
100439f0:	193b      	adds	r3, r7, r4
100439f2:	881b      	ldrh	r3, [r3, #0]
100439f4:	18d1      	adds	r1, r2, r3
100439f6:	2330      	movs	r3, #48	@ 0x30
100439f8:	2208      	movs	r2, #8
100439fa:	189b      	adds	r3, r3, r2
100439fc:	19db      	adds	r3, r3, r7
100439fe:	881a      	ldrh	r2, [r3, #0]
10043a00:	2316      	movs	r3, #22
10043a02:	18fb      	adds	r3, r7, r3
10043a04:	881b      	ldrh	r3, [r3, #0]
10043a06:	0018      	movs	r0, r3
10043a08:	193b      	adds	r3, r7, r4
10043a0a:	881b      	ldrh	r3, [r3, #0]
10043a0c:	1ac3      	subs	r3, r0, r3
10043a0e:	429a      	cmp	r2, r3
10043a10:	dd00      	ble.n	10043a14 <ReadNextRecordNoLock+0xa0>
10043a12:	001a      	movs	r2, r3
10043a14:	687b      	ldr	r3, [r7, #4]
10043a16:	0018      	movs	r0, r3
10043a18:	f00b fb31 	bl	1004f07e <memcpy>
  *size_p = data_len;
10043a1c:	2316      	movs	r3, #22
10043a1e:	18fb      	adds	r3, r7, r3
10043a20:	881a      	ldrh	r2, [r3, #0]
10043a22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10043a24:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10043a26:	2300      	movs	r3, #0
}
10043a28:	0018      	movs	r0, r3
10043a2a:	46bd      	mov	sp, r7
10043a2c:	b009      	add	sp, #36	@ 0x24
10043a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043a30 <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
10043a30:	b590      	push	{r4, r7, lr}
10043a32:	b089      	sub	sp, #36	@ 0x24
10043a34:	af00      	add	r7, sp, #0
10043a36:	60f8      	str	r0, [r7, #12]
10043a38:	607a      	str	r2, [r7, #4]
10043a3a:	200a      	movs	r0, #10
10043a3c:	183b      	adds	r3, r7, r0
10043a3e:	1c0a      	adds	r2, r1, #0
10043a40:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
10043a42:	687b      	ldr	r3, [r7, #4]
10043a44:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
10043a46:	0001      	movs	r1, r0
10043a48:	187b      	adds	r3, r7, r1
10043a4a:	881b      	ldrh	r3, [r3, #0]
10043a4c:	089b      	lsrs	r3, r3, #2
10043a4e:	b29a      	uxth	r2, r3
10043a50:	2016      	movs	r0, #22
10043a52:	183b      	adds	r3, r7, r0
10043a54:	0092      	lsls	r2, r2, #2
10043a56:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
10043a58:	187b      	adds	r3, r7, r1
10043a5a:	881b      	ldrh	r3, [r3, #0]
10043a5c:	b2d9      	uxtb	r1, r3
10043a5e:	183b      	adds	r3, r7, r0
10043a60:	881b      	ldrh	r3, [r3, #0]
10043a62:	b2da      	uxtb	r2, r3
10043a64:	2315      	movs	r3, #21
10043a66:	18fb      	adds	r3, r7, r3
10043a68:	1a8a      	subs	r2, r1, r2
10043a6a:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
10043a6c:	2300      	movs	r3, #0
10043a6e:	61fb      	str	r3, [r7, #28]
10043a70:	e013      	b.n	10043a9a <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
10043a72:	69fb      	ldr	r3, [r7, #28]
10043a74:	69ba      	ldr	r2, [r7, #24]
10043a76:	18d1      	adds	r1, r2, r3
10043a78:	2310      	movs	r3, #16
10043a7a:	18fb      	adds	r3, r7, r3
10043a7c:	2204      	movs	r2, #4
10043a7e:	0018      	movs	r0, r3
10043a80:	f00b fafd 	bl	1004f07e <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
10043a84:	69fa      	ldr	r2, [r7, #28]
10043a86:	68fb      	ldr	r3, [r7, #12]
10043a88:	18d3      	adds	r3, r2, r3
10043a8a:	693a      	ldr	r2, [r7, #16]
10043a8c:	0019      	movs	r1, r3
10043a8e:	2000      	movs	r0, #0
10043a90:	f002 f9ae 	bl	10045df0 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
10043a94:	69fb      	ldr	r3, [r7, #28]
10043a96:	3304      	adds	r3, #4
10043a98:	61fb      	str	r3, [r7, #28]
10043a9a:	2416      	movs	r4, #22
10043a9c:	193b      	adds	r3, r7, r4
10043a9e:	881b      	ldrh	r3, [r3, #0]
10043aa0:	69fa      	ldr	r2, [r7, #28]
10043aa2:	429a      	cmp	r2, r3
10043aa4:	dbe5      	blt.n	10043a72 <write_data+0x42>
  }
  word = 0xFFFFFFFF;
10043aa6:	2301      	movs	r3, #1
10043aa8:	425b      	negs	r3, r3
10043aaa:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
10043aac:	193b      	adds	r3, r7, r4
10043aae:	881b      	ldrh	r3, [r3, #0]
10043ab0:	69ba      	ldr	r2, [r7, #24]
10043ab2:	18d1      	adds	r1, r2, r3
10043ab4:	2315      	movs	r3, #21
10043ab6:	18fb      	adds	r3, r7, r3
10043ab8:	781a      	ldrb	r2, [r3, #0]
10043aba:	2310      	movs	r3, #16
10043abc:	18fb      	adds	r3, r7, r3
10043abe:	0018      	movs	r0, r3
10043ac0:	f00b fadd 	bl	1004f07e <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
10043ac4:	193b      	adds	r3, r7, r4
10043ac6:	881a      	ldrh	r2, [r3, #0]
10043ac8:	68fb      	ldr	r3, [r7, #12]
10043aca:	18d3      	adds	r3, r2, r3
10043acc:	693a      	ldr	r2, [r7, #16]
10043ace:	0019      	movs	r1, r3
10043ad0:	2000      	movs	r0, #0
10043ad2:	f002 f98d 	bl	10045df0 <HAL_FLASH_Program>
}
10043ad6:	46c0      	nop			@ (mov r8, r8)
10043ad8:	46bd      	mov	sp, r7
10043ada:	b009      	add	sp, #36	@ 0x24
10043adc:	bd90      	pop	{r4, r7, pc}

10043ade <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
10043ade:	b5f0      	push	{r4, r5, r6, r7, lr}
10043ae0:	b087      	sub	sp, #28
10043ae2:	af00      	add	r7, sp, #0
10043ae4:	60f8      	str	r0, [r7, #12]
10043ae6:	0008      	movs	r0, r1
10043ae8:	0011      	movs	r1, r2
10043aea:	607b      	str	r3, [r7, #4]
10043aec:	250b      	movs	r5, #11
10043aee:	197b      	adds	r3, r7, r5
10043af0:	1c02      	adds	r2, r0, #0
10043af2:	701a      	strb	r2, [r3, #0]
10043af4:	2408      	movs	r4, #8
10043af6:	193b      	adds	r3, r7, r4
10043af8:	1c0a      	adds	r2, r1, #0
10043afa:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
10043afc:	2310      	movs	r3, #16
10043afe:	18fb      	adds	r3, r7, r3
10043b00:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
10043b02:	193b      	adds	r3, r7, r4
10043b04:	881b      	ldrh	r3, [r3, #0]
10043b06:	3b01      	subs	r3, #1
10043b08:	b29b      	uxth	r3, r3
10043b0a:	b21b      	sxth	r3, r3
10043b0c:	2203      	movs	r2, #3
10043b0e:	4313      	orrs	r3, r2
10043b10:	b21b      	sxth	r3, r3
10043b12:	b29a      	uxth	r2, r3
10043b14:	193b      	adds	r3, r7, r4
10043b16:	3201      	adds	r2, #1
10043b18:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
10043b1a:	697b      	ldr	r3, [r7, #20]
10043b1c:	22fe      	movs	r2, #254	@ 0xfe
10043b1e:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
10043b20:	697b      	ldr	r3, [r7, #20]
10043b22:	197a      	adds	r2, r7, r5
10043b24:	7812      	ldrb	r2, [r2, #0]
10043b26:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
10043b28:	193a      	adds	r2, r7, r4
10043b2a:	2520      	movs	r5, #32
10043b2c:	2608      	movs	r6, #8
10043b2e:	19ab      	adds	r3, r5, r6
10043b30:	2108      	movs	r1, #8
10043b32:	468c      	mov	ip, r1
10043b34:	44bc      	add	ip, r7
10043b36:	4463      	add	r3, ip
10043b38:	8812      	ldrh	r2, [r2, #0]
10043b3a:	881b      	ldrh	r3, [r3, #0]
10043b3c:	18d3      	adds	r3, r2, r3
10043b3e:	b29a      	uxth	r2, r3
10043b40:	697b      	ldr	r3, [r7, #20]
10043b42:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
10043b44:	693a      	ldr	r2, [r7, #16]
10043b46:	68fb      	ldr	r3, [r7, #12]
10043b48:	0019      	movs	r1, r3
10043b4a:	2000      	movs	r0, #0
10043b4c:	f002 f950 	bl	10045df0 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
10043b50:	68fb      	ldr	r3, [r7, #12]
10043b52:	1d18      	adds	r0, r3, #4
10043b54:	687a      	ldr	r2, [r7, #4]
10043b56:	193b      	adds	r3, r7, r4
10043b58:	881b      	ldrh	r3, [r3, #0]
10043b5a:	0019      	movs	r1, r3
10043b5c:	f7ff ff68 	bl	10043a30 <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
10043b60:	193b      	adds	r3, r7, r4
10043b62:	881a      	ldrh	r2, [r3, #0]
10043b64:	68fb      	ldr	r3, [r7, #12]
10043b66:	18d3      	adds	r3, r2, r3
10043b68:	1d18      	adds	r0, r3, #4
10043b6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10043b6c:	19ab      	adds	r3, r5, r6
10043b6e:	2108      	movs	r1, #8
10043b70:	468c      	mov	ip, r1
10043b72:	44bc      	add	ip, r7
10043b74:	4463      	add	r3, ip
10043b76:	881b      	ldrh	r3, [r3, #0]
10043b78:	0019      	movs	r1, r3
10043b7a:	f7ff ff59 	bl	10043a30 <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
10043b7e:	2300      	movs	r3, #0
}
10043b80:	0018      	movs	r0, r3
10043b82:	46bd      	mov	sp, r7
10043b84:	b007      	add	sp, #28
10043b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043b88 <ReadCurrentRecordNoLock>:
    return -1;
  }
}

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
10043b88:	b590      	push	{r4, r7, lr}
10043b8a:	b087      	sub	sp, #28
10043b8c:	af00      	add	r7, sp, #0
10043b8e:	60f8      	str	r0, [r7, #12]
10043b90:	0008      	movs	r0, r1
10043b92:	607a      	str	r2, [r7, #4]
10043b94:	0019      	movs	r1, r3
10043b96:	230a      	movs	r3, #10
10043b98:	18fb      	adds	r3, r7, r3
10043b9a:	1c02      	adds	r2, r0, #0
10043b9c:	801a      	strh	r2, [r3, #0]
10043b9e:	2308      	movs	r3, #8
10043ba0:	0018      	movs	r0, r3
10043ba2:	18fb      	adds	r3, r7, r3
10043ba4:	1c0a      	adds	r2, r1, #0
10043ba6:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
10043ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10043baa:	2200      	movs	r2, #0
10043bac:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
10043bae:	2224      	movs	r2, #36	@ 0x24
10043bb0:	1813      	adds	r3, r2, r0
10043bb2:	19db      	adds	r3, r3, r7
10043bb4:	881b      	ldrh	r3, [r3, #0]
10043bb6:	2b00      	cmp	r3, #0
10043bb8:	d00b      	beq.n	10043bd2 <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
10043bba:	2110      	movs	r1, #16
10043bbc:	187b      	adds	r3, r7, r1
10043bbe:	1812      	adds	r2, r2, r0
10043bc0:	19d2      	adds	r2, r2, r7
10043bc2:	8812      	ldrh	r2, [r2, #0]
10043bc4:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
10043bc6:	187b      	adds	r3, r7, r1
10043bc8:	22fe      	movs	r2, #254	@ 0xfe
10043bca:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
10043bcc:	187b      	adds	r3, r7, r1
10043bce:	617b      	str	r3, [r7, #20]
10043bd0:	e002      	b.n	10043bd8 <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10043bd2:	68fb      	ldr	r3, [r7, #12]
10043bd4:	685b      	ldr	r3, [r3, #4]
10043bd6:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10043bd8:	68fb      	ldr	r3, [r7, #12]
10043bda:	685a      	ldr	r2, [r3, #4]
10043bdc:	68fb      	ldr	r3, [r7, #12]
10043bde:	689b      	ldr	r3, [r3, #8]
10043be0:	429a      	cmp	r2, r3
10043be2:	d203      	bcs.n	10043bec <ReadCurrentRecordNoLock+0x64>
10043be4:	697b      	ldr	r3, [r7, #20]
10043be6:	781b      	ldrb	r3, [r3, #0]
10043be8:	2bff      	cmp	r3, #255	@ 0xff
10043bea:	d101      	bne.n	10043bf0 <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
10043bec:	2304      	movs	r3, #4
10043bee:	e033      	b.n	10043c58 <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
10043bf0:	68fb      	ldr	r3, [r7, #12]
10043bf2:	7b1b      	ldrb	r3, [r3, #12]
10043bf4:	2b00      	cmp	r3, #0
10043bf6:	d103      	bne.n	10043c00 <ReadCurrentRecordNoLock+0x78>
10043bf8:	697b      	ldr	r3, [r7, #20]
10043bfa:	781b      	ldrb	r3, [r3, #0]
10043bfc:	2bfe      	cmp	r3, #254	@ 0xfe
10043bfe:	d001      	beq.n	10043c04 <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
10043c00:	2305      	movs	r3, #5
10043c02:	e029      	b.n	10043c58 <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
10043c04:	697b      	ldr	r3, [r7, #20]
10043c06:	885b      	ldrh	r3, [r3, #2]
10043c08:	220a      	movs	r2, #10
10043c0a:	18ba      	adds	r2, r7, r2
10043c0c:	8812      	ldrh	r2, [r2, #0]
10043c0e:	429a      	cmp	r2, r3
10043c10:	d301      	bcc.n	10043c16 <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10043c12:	2306      	movs	r3, #6
10043c14:	e020      	b.n	10043c58 <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
10043c16:	68fb      	ldr	r3, [r7, #12]
10043c18:	2200      	movs	r2, #0
10043c1a:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
10043c1c:	240a      	movs	r4, #10
10043c1e:	193b      	adds	r3, r7, r4
10043c20:	881a      	ldrh	r2, [r3, #0]
10043c22:	68fb      	ldr	r3, [r7, #12]
10043c24:	685b      	ldr	r3, [r3, #4]
10043c26:	18d3      	adds	r3, r2, r3
10043c28:	3304      	adds	r3, #4
10043c2a:	0018      	movs	r0, r3
10043c2c:	2308      	movs	r3, #8
10043c2e:	18fb      	adds	r3, r7, r3
10043c30:	881a      	ldrh	r2, [r3, #0]
10043c32:	697b      	ldr	r3, [r7, #20]
10043c34:	885b      	ldrh	r3, [r3, #2]
10043c36:	0019      	movs	r1, r3
10043c38:	193b      	adds	r3, r7, r4
10043c3a:	881b      	ldrh	r3, [r3, #0]
10043c3c:	1acb      	subs	r3, r1, r3
10043c3e:	429a      	cmp	r2, r3
10043c40:	dd00      	ble.n	10043c44 <ReadCurrentRecordNoLock+0xbc>
10043c42:	001a      	movs	r2, r3
10043c44:	687b      	ldr	r3, [r7, #4]
10043c46:	0001      	movs	r1, r0
10043c48:	0018      	movs	r0, r3
10043c4a:	f00b fa18 	bl	1004f07e <memcpy>
  *size_p = record_p->header.length;
10043c4e:	697b      	ldr	r3, [r7, #20]
10043c50:	885a      	ldrh	r2, [r3, #2]
10043c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10043c54:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10043c56:	2300      	movs	r3, #0
}
10043c58:	0018      	movs	r0, r3
10043c5a:	46bd      	mov	sp, r7
10043c5c:	b007      	add	sp, #28
10043c5e:	bd90      	pop	{r4, r7, pc}

10043c60 <ErasePage>:
    return NVMDB_STATUS_INVALID_RECORD;
  }
}

static void ErasePage(uint32_t address, uint8_t num_pages)
{
10043c60:	b580      	push	{r7, lr}
10043c62:	b088      	sub	sp, #32
10043c64:	af00      	add	r7, sp, #0
10043c66:	6078      	str	r0, [r7, #4]
10043c68:	000a      	movs	r2, r1
10043c6a:	1cfb      	adds	r3, r7, #3
10043c6c:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10043c6e:	687b      	ldr	r3, [r7, #4]
10043c70:	4a0d      	ldr	r2, [pc, #52]	@ (10043ca8 <ErasePage+0x48>)
10043c72:	4694      	mov	ip, r2
10043c74:	4463      	add	r3, ip
10043c76:	0adb      	lsrs	r3, r3, #11
10043c78:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
10043c7a:	2110      	movs	r1, #16
10043c7c:	187b      	adds	r3, r7, r1
10043c7e:	2200      	movs	r2, #0
10043c80:	601a      	str	r2, [r3, #0]
10043c82:	69fa      	ldr	r2, [r7, #28]
10043c84:	187b      	adds	r3, r7, r1
10043c86:	605a      	str	r2, [r3, #4]
10043c88:	1cfb      	adds	r3, r7, #3
10043c8a:	781a      	ldrb	r2, [r3, #0]
10043c8c:	187b      	adds	r3, r7, r1
10043c8e:	609a      	str	r2, [r3, #8]
10043c90:	230c      	movs	r3, #12
10043c92:	18fa      	adds	r2, r7, r3
10043c94:	187b      	adds	r3, r7, r1
10043c96:	0011      	movs	r1, r2
10043c98:	0018      	movs	r0, r3
10043c9a:	f002 f983 	bl	10045fa4 <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
10043c9e:	46c0      	nop			@ (mov r8, r8)
10043ca0:	46bd      	mov	sp, r7
10043ca2:	b008      	add	sp, #32
10043ca4:	bd80      	pop	{r7, pc}
10043ca6:	46c0      	nop			@ (mov r8, r8)
10043ca8:	effc0000 	.word	0xeffc0000

10043cac <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
10043cac:	b580      	push	{r7, lr}
10043cae:	b086      	sub	sp, #24
10043cb0:	af00      	add	r7, sp, #0
10043cb2:	60f8      	str	r0, [r7, #12]
10043cb4:	60b9      	str	r1, [r7, #8]
10043cb6:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
10043cb8:	687b      	ldr	r3, [r7, #4]
10043cba:	055b      	lsls	r3, r3, #21
10043cbc:	0d5b      	lsrs	r3, r3, #21
10043cbe:	d107      	bne.n	10043cd0 <WriteBufferToFlash+0x24>
10043cc0:	68fb      	ldr	r3, [r7, #12]
10043cc2:	687a      	ldr	r2, [r7, #4]
10043cc4:	68b9      	ldr	r1, [r7, #8]
10043cc6:	0018      	movs	r0, r3
10043cc8:	f00b f96c 	bl	1004efa4 <memcmp>
10043ccc:	1e03      	subs	r3, r0, #0
10043cce:	d026      	beq.n	10043d1e <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
10043cd0:	687b      	ldr	r3, [r7, #4]
10043cd2:	3b01      	subs	r3, #1
10043cd4:	4a14      	ldr	r2, [pc, #80]	@ (10043d28 <WriteBufferToFlash+0x7c>)
10043cd6:	4313      	orrs	r3, r2
10043cd8:	3301      	adds	r3, #1
10043cda:	0adb      	lsrs	r3, r3, #11
10043cdc:	b2da      	uxtb	r2, r3
10043cde:	68fb      	ldr	r3, [r7, #12]
10043ce0:	0011      	movs	r1, r2
10043ce2:	0018      	movs	r0, r3
10043ce4:	f7ff ffbc 	bl	10043c60 <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
10043ce8:	2300      	movs	r3, #0
10043cea:	617b      	str	r3, [r7, #20]
10043cec:	e012      	b.n	10043d14 <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
10043cee:	697a      	ldr	r2, [r7, #20]
10043cf0:	68fb      	ldr	r3, [r7, #12]
10043cf2:	18d1      	adds	r1, r2, r3
10043cf4:	697b      	ldr	r3, [r7, #20]
10043cf6:	2b00      	cmp	r3, #0
10043cf8:	da00      	bge.n	10043cfc <WriteBufferToFlash+0x50>
10043cfa:	3303      	adds	r3, #3
10043cfc:	109b      	asrs	r3, r3, #2
10043cfe:	009b      	lsls	r3, r3, #2
10043d00:	68ba      	ldr	r2, [r7, #8]
10043d02:	18d3      	adds	r3, r2, r3
10043d04:	681b      	ldr	r3, [r3, #0]
10043d06:	001a      	movs	r2, r3
10043d08:	2000      	movs	r0, #0
10043d0a:	f002 f871 	bl	10045df0 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
10043d0e:	697b      	ldr	r3, [r7, #20]
10043d10:	3304      	adds	r3, #4
10043d12:	617b      	str	r3, [r7, #20]
10043d14:	697b      	ldr	r3, [r7, #20]
10043d16:	687a      	ldr	r2, [r7, #4]
10043d18:	429a      	cmp	r2, r3
10043d1a:	d8e8      	bhi.n	10043cee <WriteBufferToFlash+0x42>
10043d1c:	e000      	b.n	10043d20 <WriteBufferToFlash+0x74>
    return;
10043d1e:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
10043d20:	46bd      	mov	sp, r7
10043d22:	b006      	add	sp, #24
10043d24:	bd80      	pop	{r7, pc}
10043d26:	46c0      	nop			@ (mov r8, r8)
10043d28:	000007ff 	.word	0x000007ff

10043d2c <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
10043d2c:	b580      	push	{r7, lr}
10043d2e:	b082      	sub	sp, #8
10043d30:	af00      	add	r7, sp, #0
10043d32:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
10043d34:	687b      	ldr	r3, [r7, #4]
10043d36:	2201      	movs	r2, #1
10043d38:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
10043d3a:	687b      	ldr	r3, [r7, #4]
10043d3c:	2200      	movs	r2, #0
10043d3e:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
10043d40:	687b      	ldr	r3, [r7, #4]
10043d42:	2200      	movs	r2, #0
10043d44:	809a      	strh	r2, [r3, #4]
}
10043d46:	46c0      	nop			@ (mov r8, r8)
10043d48:	46bd      	mov	sp, r7
10043d4a:	b002      	add	sp, #8
10043d4c:	bd80      	pop	{r7, pc}

10043d4e <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
10043d4e:	b5f0      	push	{r4, r5, r6, r7, lr}
10043d50:	b08d      	sub	sp, #52	@ 0x34
10043d52:	af04      	add	r7, sp, #16
10043d54:	60f8      	str	r0, [r7, #12]
10043d56:	60b9      	str	r1, [r7, #8]
10043d58:	603b      	str	r3, [r7, #0]
10043d5a:	1dbb      	adds	r3, r7, #6
10043d5c:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
10043d5e:	231e      	movs	r3, #30
10043d60:	18fb      	adds	r3, r7, r3
10043d62:	2200      	movs	r2, #0
10043d64:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
10043d66:	1dbb      	adds	r3, r7, #6
10043d68:	881a      	ldrh	r2, [r3, #0]
10043d6a:	68bb      	ldr	r3, [r7, #8]
10043d6c:	21ff      	movs	r1, #255	@ 0xff
10043d6e:	0018      	movs	r0, r3
10043d70:	f00b f926 	bl	1004efc0 <memset>

  header.valid_flag = VALID_RECORD;
10043d74:	2310      	movs	r3, #16
10043d76:	18fb      	adds	r3, r7, r3
10043d78:	22fe      	movs	r2, #254	@ 0xfe
10043d7a:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10043d7c:	1dba      	adds	r2, r7, #6
10043d7e:	251e      	movs	r5, #30
10043d80:	197b      	adds	r3, r7, r5
10043d82:	8812      	ldrh	r2, [r2, #0]
10043d84:	881b      	ldrh	r3, [r3, #0]
10043d86:	1ad3      	subs	r3, r2, r3
10043d88:	b29a      	uxth	r2, r3
10043d8a:	231c      	movs	r3, #28
10043d8c:	18fb      	adds	r3, r7, r3
10043d8e:	3a04      	subs	r2, #4
10043d90:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
10043d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043d94:	781b      	ldrb	r3, [r3, #0]
10043d96:	2b00      	cmp	r3, #0
10043d98:	d04e      	beq.n	10043e38 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
10043d9a:	197b      	adds	r3, r7, r5
10043d9c:	881b      	ldrh	r3, [r3, #0]
10043d9e:	3304      	adds	r3, #4
10043da0:	68ba      	ldr	r2, [r7, #8]
10043da2:	18d1      	adds	r1, r2, r3
10043da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043da6:	889b      	ldrh	r3, [r3, #4]
10043da8:	261b      	movs	r6, #27
10043daa:	19bc      	adds	r4, r7, r6
10043dac:	68f8      	ldr	r0, [r7, #12]
10043dae:	2210      	movs	r2, #16
10043db0:	18ba      	adds	r2, r7, r2
10043db2:	3201      	adds	r2, #1
10043db4:	9203      	str	r2, [sp, #12]
10043db6:	9302      	str	r3, [sp, #8]
10043db8:	2216      	movs	r2, #22
10043dba:	18bb      	adds	r3, r7, r2
10043dbc:	9301      	str	r3, [sp, #4]
10043dbe:	231c      	movs	r3, #28
10043dc0:	18fb      	adds	r3, r7, r3
10043dc2:	881b      	ldrh	r3, [r3, #0]
10043dc4:	9300      	str	r3, [sp, #0]
10043dc6:	000b      	movs	r3, r1
10043dc8:	2200      	movs	r2, #0
10043dca:	21ff      	movs	r1, #255	@ 0xff
10043dcc:	f7ff fdd2 	bl	10043974 <ReadNextRecordNoLock>
10043dd0:	0003      	movs	r3, r0
10043dd2:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
10043dd4:	2216      	movs	r2, #22
10043dd6:	18bb      	adds	r3, r7, r2
10043dd8:	881a      	ldrh	r2, [r3, #0]
10043dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043ddc:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
10043dde:	19bb      	adds	r3, r7, r6
10043de0:	781b      	ldrb	r3, [r3, #0]
10043de2:	2b00      	cmp	r3, #0
10043de4:	d006      	beq.n	10043df4 <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
10043de6:	683b      	ldr	r3, [r7, #0]
10043de8:	197a      	adds	r2, r7, r5
10043dea:	8812      	ldrh	r2, [r2, #0]
10043dec:	801a      	strh	r2, [r3, #0]
        return status;
10043dee:	19bb      	adds	r3, r7, r6
10043df0:	781b      	ldrb	r3, [r3, #0]
10043df2:	e0a1      	b.n	10043f38 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
10043df4:	2316      	movs	r3, #22
10043df6:	18fb      	adds	r3, r7, r3
10043df8:	881a      	ldrh	r2, [r3, #0]
10043dfa:	2110      	movs	r1, #16
10043dfc:	187b      	adds	r3, r7, r1
10043dfe:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
10043e00:	251e      	movs	r5, #30
10043e02:	197b      	adds	r3, r7, r5
10043e04:	881b      	ldrh	r3, [r3, #0]
10043e06:	68ba      	ldr	r2, [r7, #8]
10043e08:	18d3      	adds	r3, r2, r3
10043e0a:	000c      	movs	r4, r1
10043e0c:	1879      	adds	r1, r7, r1
10043e0e:	2204      	movs	r2, #4
10043e10:	0018      	movs	r0, r3
10043e12:	f00b f934 	bl	1004f07e <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
10043e16:	193b      	adds	r3, r7, r4
10043e18:	885b      	ldrh	r3, [r3, #2]
10043e1a:	3303      	adds	r3, #3
10043e1c:	b29b      	uxth	r3, r3
10043e1e:	b21b      	sxth	r3, r3
10043e20:	2203      	movs	r2, #3
10043e22:	4313      	orrs	r3, r2
10043e24:	b21b      	sxth	r3, r3
10043e26:	b29a      	uxth	r2, r3
10043e28:	197b      	adds	r3, r7, r5
10043e2a:	881b      	ldrh	r3, [r3, #0]
10043e2c:	18d3      	adds	r3, r2, r3
10043e2e:	b29a      	uxth	r2, r3
10043e30:	197b      	adds	r3, r7, r5
10043e32:	3201      	adds	r2, #1
10043e34:	801a      	strh	r2, [r3, #0]
10043e36:	e031      	b.n	10043e9c <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
10043e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043e3a:	8859      	ldrh	r1, [r3, #2]
10043e3c:	231e      	movs	r3, #30
10043e3e:	18fb      	adds	r3, r7, r3
10043e40:	881b      	ldrh	r3, [r3, #0]
10043e42:	68ba      	ldr	r2, [r7, #8]
10043e44:	18d5      	adds	r5, r2, r3
10043e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043e48:	889b      	ldrh	r3, [r3, #4]
10043e4a:	261b      	movs	r6, #27
10043e4c:	19bc      	adds	r4, r7, r6
10043e4e:	221c      	movs	r2, #28
10043e50:	18ba      	adds	r2, r7, r2
10043e52:	8812      	ldrh	r2, [r2, #0]
10043e54:	68f8      	ldr	r0, [r7, #12]
10043e56:	9301      	str	r3, [sp, #4]
10043e58:	2316      	movs	r3, #22
10043e5a:	18fb      	adds	r3, r7, r3
10043e5c:	9300      	str	r3, [sp, #0]
10043e5e:	0013      	movs	r3, r2
10043e60:	002a      	movs	r2, r5
10043e62:	f7ff fe91 	bl	10043b88 <ReadCurrentRecordNoLock>
10043e66:	0003      	movs	r3, r0
10043e68:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
10043e6a:	19bb      	adds	r3, r7, r6
10043e6c:	781b      	ldrb	r3, [r3, #0]
10043e6e:	2b00      	cmp	r3, #0
10043e70:	d002      	beq.n	10043e78 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
10043e72:	19bb      	adds	r3, r7, r6
10043e74:	781b      	ldrb	r3, [r3, #0]
10043e76:	e05f      	b.n	10043f38 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
10043e78:	2316      	movs	r3, #22
10043e7a:	18fb      	adds	r3, r7, r3
10043e7c:	881a      	ldrh	r2, [r3, #0]
10043e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043e80:	885b      	ldrh	r3, [r3, #2]
10043e82:	1ad3      	subs	r3, r2, r3
10043e84:	b29b      	uxth	r3, r3
10043e86:	3b01      	subs	r3, #1
10043e88:	b29b      	uxth	r3, r3
10043e8a:	b21b      	sxth	r3, r3
10043e8c:	2203      	movs	r2, #3
10043e8e:	4313      	orrs	r3, r2
10043e90:	b21b      	sxth	r3, r3
10043e92:	b29a      	uxth	r2, r3
10043e94:	231e      	movs	r3, #30
10043e96:	18fb      	adds	r3, r7, r3
10043e98:	3201      	adds	r2, #1
10043e9a:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
10043e9c:	2316      	movs	r3, #22
10043e9e:	18fb      	adds	r3, r7, r3
10043ea0:	881a      	ldrh	r2, [r3, #0]
10043ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043ea4:	885b      	ldrh	r3, [r3, #2]
10043ea6:	1ad3      	subs	r3, r2, r3
10043ea8:	b29b      	uxth	r3, r3
10043eaa:	3b01      	subs	r3, #1
10043eac:	b29b      	uxth	r3, r3
10043eae:	b21b      	sxth	r3, r3
10043eb0:	2203      	movs	r2, #3
10043eb2:	4313      	orrs	r3, r2
10043eb4:	b21b      	sxth	r3, r3
10043eb6:	b29a      	uxth	r2, r3
10043eb8:	2118      	movs	r1, #24
10043eba:	187b      	adds	r3, r7, r1
10043ebc:	3201      	adds	r2, #1
10043ebe:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
10043ec0:	187a      	adds	r2, r7, r1
10043ec2:	211c      	movs	r1, #28
10043ec4:	187b      	adds	r3, r7, r1
10043ec6:	8812      	ldrh	r2, [r2, #0]
10043ec8:	881b      	ldrh	r3, [r3, #0]
10043eca:	429a      	cmp	r2, r3
10043ecc:	d910      	bls.n	10043ef0 <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
10043ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043ed0:	2200      	movs	r2, #0
10043ed2:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
10043ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043ed6:	885a      	ldrh	r2, [r3, #2]
10043ed8:	187b      	adds	r3, r7, r1
10043eda:	881b      	ldrh	r3, [r3, #0]
10043edc:	18d3      	adds	r3, r2, r3
10043ede:	b29a      	uxth	r2, r3
10043ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043ee2:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
10043ee4:	683b      	ldr	r3, [r7, #0]
10043ee6:	1dba      	adds	r2, r7, #6
10043ee8:	8812      	ldrh	r2, [r2, #0]
10043eea:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
10043eec:	2300      	movs	r3, #0
10043eee:	e023      	b.n	10043f38 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
10043ef0:	2318      	movs	r3, #24
10043ef2:	18fa      	adds	r2, r7, r3
10043ef4:	231c      	movs	r3, #28
10043ef6:	18fb      	adds	r3, r7, r3
10043ef8:	8812      	ldrh	r2, [r2, #0]
10043efa:	881b      	ldrh	r3, [r3, #0]
10043efc:	429a      	cmp	r2, r3
10043efe:	d10b      	bne.n	10043f18 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
10043f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043f02:	2201      	movs	r2, #1
10043f04:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
10043f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043f08:	2200      	movs	r2, #0
10043f0a:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
10043f0c:	683b      	ldr	r3, [r7, #0]
10043f0e:	1dba      	adds	r2, r7, #6
10043f10:	8812      	ldrh	r2, [r2, #0]
10043f12:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
10043f14:	2300      	movs	r3, #0
10043f16:	e00f      	b.n	10043f38 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
10043f18:	2318      	movs	r3, #24
10043f1a:	18fa      	adds	r2, r7, r3
10043f1c:	231c      	movs	r3, #28
10043f1e:	18fb      	adds	r3, r7, r3
10043f20:	8812      	ldrh	r2, [r2, #0]
10043f22:	881b      	ldrh	r3, [r3, #0]
10043f24:	429a      	cmp	r2, r3
10043f26:	d300      	bcc.n	10043f2a <LoadDBToRAM+0x1dc>
10043f28:	e728      	b.n	10043d7c <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
10043f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043f2c:	2201      	movs	r2, #1
10043f2e:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
10043f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043f32:	2200      	movs	r2, #0
10043f34:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10043f36:	e721      	b.n	10043d7c <LoadDBToRAM+0x2e>
    }
  }
}
10043f38:	0018      	movs	r0, r3
10043f3a:	46bd      	mov	sp, r7
10043f3c:	b009      	add	sp, #36	@ 0x24
10043f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043f40 <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
10043f40:	b5f0      	push	{r4, r5, r6, r7, lr}
10043f42:	4c60      	ldr	r4, [pc, #384]	@ (100440c4 <CleanLargeDB+0x184>)
10043f44:	44a5      	add	sp, r4
10043f46:	af02      	add	r7, sp, #8
10043f48:	0002      	movs	r2, r0
10043f4a:	4b5f      	ldr	r3, [pc, #380]	@ (100440c8 <CleanLargeDB+0x188>)
10043f4c:	2184      	movs	r1, #132	@ 0x84
10043f4e:	0109      	lsls	r1, r1, #4
10043f50:	185b      	adds	r3, r3, r1
10043f52:	19db      	adds	r3, r3, r7
10043f54:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
10043f56:	4b5c      	ldr	r3, [pc, #368]	@ (100440c8 <CleanLargeDB+0x188>)
10043f58:	185b      	adds	r3, r3, r1
10043f5a:	19db      	adds	r3, r3, r7
10043f5c:	781a      	ldrb	r2, [r3, #0]
10043f5e:	495b      	ldr	r1, [pc, #364]	@ (100440cc <CleanLargeDB+0x18c>)
10043f60:	0013      	movs	r3, r2
10043f62:	009b      	lsls	r3, r3, #2
10043f64:	189b      	adds	r3, r3, r2
10043f66:	009b      	lsls	r3, r3, #2
10043f68:	18cb      	adds	r3, r1, r3
10043f6a:	330a      	adds	r3, #10
10043f6c:	881b      	ldrh	r3, [r3, #0]
10043f6e:	2b00      	cmp	r3, #0
10043f70:	d101      	bne.n	10043f76 <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
10043f72:	2300      	movs	r3, #0
10043f74:	e0a0      	b.n	100440b8 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
10043f76:	4b56      	ldr	r3, [pc, #344]	@ (100440d0 <CleanLargeDB+0x190>)
10043f78:	18fc      	adds	r4, r7, r3
10043f7a:	4d56      	ldr	r5, [pc, #344]	@ (100440d4 <CleanLargeDB+0x194>)
10043f7c:	197a      	adds	r2, r7, r5
10043f7e:	4b52      	ldr	r3, [pc, #328]	@ (100440c8 <CleanLargeDB+0x188>)
10043f80:	2184      	movs	r1, #132	@ 0x84
10043f82:	0109      	lsls	r1, r1, #4
10043f84:	185b      	adds	r3, r3, r1
10043f86:	19db      	adds	r3, r3, r7
10043f88:	781b      	ldrb	r3, [r3, #0]
10043f8a:	0011      	movs	r1, r2
10043f8c:	0018      	movs	r0, r3
10043f8e:	f000 fc4b 	bl	10044828 <NVMDB_HandleInit>
10043f92:	0003      	movs	r3, r0
10043f94:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
10043f96:	197b      	adds	r3, r7, r5
10043f98:	685b      	ldr	r3, [r3, #4]
10043f9a:	4a4f      	ldr	r2, [pc, #316]	@ (100440d8 <CleanLargeDB+0x198>)
10043f9c:	18ba      	adds	r2, r7, r2
10043f9e:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
10043fa0:	4b4e      	ldr	r3, [pc, #312]	@ (100440dc <CleanLargeDB+0x19c>)
10043fa2:	18fb      	adds	r3, r7, r3
10043fa4:	0018      	movs	r0, r3
10043fa6:	f7ff fec1 	bl	10043d2c <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
10043faa:	4e49      	ldr	r6, [pc, #292]	@ (100440d0 <CleanLargeDB+0x190>)
10043fac:	19bc      	adds	r4, r7, r6
10043fae:	4b4c      	ldr	r3, [pc, #304]	@ (100440e0 <CleanLargeDB+0x1a0>)
10043fb0:	18fd      	adds	r5, r7, r3
10043fb2:	2380      	movs	r3, #128	@ 0x80
10043fb4:	011a      	lsls	r2, r3, #4
10043fb6:	230c      	movs	r3, #12
10043fb8:	18f9      	adds	r1, r7, r3
10043fba:	4b46      	ldr	r3, [pc, #280]	@ (100440d4 <CleanLargeDB+0x194>)
10043fbc:	18f8      	adds	r0, r7, r3
10043fbe:	4b47      	ldr	r3, [pc, #284]	@ (100440dc <CleanLargeDB+0x19c>)
10043fc0:	18fb      	adds	r3, r7, r3
10043fc2:	9300      	str	r3, [sp, #0]
10043fc4:	002b      	movs	r3, r5
10043fc6:	f7ff fec2 	bl	10043d4e <LoadDBToRAM>
10043fca:	0003      	movs	r3, r0
10043fcc:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
10043fce:	19bb      	adds	r3, r7, r6
10043fd0:	781b      	ldrb	r3, [r3, #0]
10043fd2:	2b04      	cmp	r3, #4
10043fd4:	d006      	beq.n	10043fe4 <CleanLargeDB+0xa4>
10043fd6:	19bb      	adds	r3, r7, r6
10043fd8:	781b      	ldrb	r3, [r3, #0]
10043fda:	2b00      	cmp	r3, #0
10043fdc:	d002      	beq.n	10043fe4 <CleanLargeDB+0xa4>
    {
      return status;
10043fde:	19bb      	adds	r3, r7, r6
10043fe0:	781b      	ldrb	r3, [r3, #0]
10043fe2:	e069      	b.n	100440b8 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
10043fe4:	4b3e      	ldr	r3, [pc, #248]	@ (100440e0 <CleanLargeDB+0x1a0>)
10043fe6:	18fb      	adds	r3, r7, r3
10043fe8:	881a      	ldrh	r2, [r3, #0]
10043fea:	2380      	movs	r3, #128	@ 0x80
10043fec:	011b      	lsls	r3, r3, #4
10043fee:	429a      	cmp	r2, r3
10043ff0:	d004      	beq.n	10043ffc <CleanLargeDB+0xbc>
10043ff2:	4b37      	ldr	r3, [pc, #220]	@ (100440d0 <CleanLargeDB+0x190>)
10043ff4:	18fb      	adds	r3, r7, r3
10043ff6:	781b      	ldrb	r3, [r3, #0]
10043ff8:	2b00      	cmp	r3, #0
10043ffa:	d0d6      	beq.n	10043faa <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
10043ffc:	4a38      	ldr	r2, [pc, #224]	@ (100440e0 <CleanLargeDB+0x1a0>)
10043ffe:	18bb      	adds	r3, r7, r2
10044000:	881b      	ldrh	r3, [r3, #0]
10044002:	2b00      	cmp	r3, #0
10044004:	d019      	beq.n	1004403a <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
10044006:	18bb      	adds	r3, r7, r2
10044008:	881b      	ldrh	r3, [r3, #0]
1004400a:	001a      	movs	r2, r3
1004400c:	230c      	movs	r3, #12
1004400e:	18f9      	adds	r1, r7, r3
10044010:	4c31      	ldr	r4, [pc, #196]	@ (100440d8 <CleanLargeDB+0x198>)
10044012:	193b      	adds	r3, r7, r4
10044014:	681b      	ldr	r3, [r3, #0]
10044016:	0018      	movs	r0, r3
10044018:	f7ff fe48 	bl	10043cac <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
1004401c:	0022      	movs	r2, r4
1004401e:	18bb      	adds	r3, r7, r2
10044020:	681b      	ldr	r3, [r3, #0]
10044022:	2180      	movs	r1, #128	@ 0x80
10044024:	0109      	lsls	r1, r1, #4
10044026:	468c      	mov	ip, r1
10044028:	4463      	add	r3, ip
1004402a:	18ba      	adds	r2, r7, r2
1004402c:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
1004402e:	4b28      	ldr	r3, [pc, #160]	@ (100440d0 <CleanLargeDB+0x190>)
10044030:	18fb      	adds	r3, r7, r3
10044032:	781b      	ldrb	r3, [r3, #0]
10044034:	2b00      	cmp	r3, #0
10044036:	d102      	bne.n	1004403e <CleanLargeDB+0xfe>
  {
10044038:	e7b7      	b.n	10043faa <CleanLargeDB+0x6a>
        break;
1004403a:	46c0      	nop			@ (mov r8, r8)
1004403c:	e000      	b.n	10044040 <CleanLargeDB+0x100>
      {
        break;
1004403e:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
10044040:	4b24      	ldr	r3, [pc, #144]	@ (100440d4 <CleanLargeDB+0x194>)
10044042:	18fb      	adds	r3, r7, r3
10044044:	689b      	ldr	r3, [r3, #8]
10044046:	3b01      	subs	r3, #1
10044048:	4a26      	ldr	r2, [pc, #152]	@ (100440e4 <CleanLargeDB+0x1a4>)
1004404a:	431a      	orrs	r2, r3
1004404c:	4922      	ldr	r1, [pc, #136]	@ (100440d8 <CleanLargeDB+0x198>)
1004404e:	187b      	adds	r3, r7, r1
10044050:	681b      	ldr	r3, [r3, #0]
10044052:	1ad3      	subs	r3, r2, r3
10044054:	3301      	adds	r3, #1
10044056:	0ada      	lsrs	r2, r3, #11
10044058:	4823      	ldr	r0, [pc, #140]	@ (100440e8 <CleanLargeDB+0x1a8>)
1004405a:	183b      	adds	r3, r7, r0
1004405c:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004405e:	187b      	adds	r3, r7, r1
10044060:	681b      	ldr	r3, [r3, #0]
10044062:	4a22      	ldr	r2, [pc, #136]	@ (100440ec <CleanLargeDB+0x1ac>)
10044064:	4694      	mov	ip, r2
10044066:	4463      	add	r3, ip
10044068:	0ada      	lsrs	r2, r3, #11
1004406a:	4c21      	ldr	r4, [pc, #132]	@ (100440f0 <CleanLargeDB+0x1b0>)
1004406c:	193b      	adds	r3, r7, r4
1004406e:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10044070:	2181      	movs	r1, #129	@ 0x81
10044072:	0109      	lsls	r1, r1, #4
10044074:	187b      	adds	r3, r7, r1
10044076:	2200      	movs	r2, #0
10044078:	601a      	str	r2, [r3, #0]
1004407a:	193b      	adds	r3, r7, r4
1004407c:	781a      	ldrb	r2, [r3, #0]
1004407e:	187b      	adds	r3, r7, r1
10044080:	605a      	str	r2, [r3, #4]
10044082:	183b      	adds	r3, r7, r0
10044084:	781a      	ldrb	r2, [r3, #0]
10044086:	187b      	adds	r3, r7, r1
10044088:	609a      	str	r2, [r3, #8]
1004408a:	4b1a      	ldr	r3, [pc, #104]	@ (100440f4 <CleanLargeDB+0x1b4>)
1004408c:	18fa      	adds	r2, r7, r3
1004408e:	187b      	adds	r3, r7, r1
10044090:	0011      	movs	r1, r2
10044092:	0018      	movs	r0, r3
10044094:	f001 ff86 	bl	10045fa4 <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
10044098:	4b0b      	ldr	r3, [pc, #44]	@ (100440c8 <CleanLargeDB+0x188>)
1004409a:	2284      	movs	r2, #132	@ 0x84
1004409c:	0112      	lsls	r2, r2, #4
1004409e:	189b      	adds	r3, r3, r2
100440a0:	19db      	adds	r3, r3, r7
100440a2:	781a      	ldrb	r2, [r3, #0]
100440a4:	0013      	movs	r3, r2
100440a6:	009b      	lsls	r3, r3, #2
100440a8:	189b      	adds	r3, r3, r2
100440aa:	009b      	lsls	r3, r3, #2
100440ac:	4a07      	ldr	r2, [pc, #28]	@ (100440cc <CleanLargeDB+0x18c>)
100440ae:	189b      	adds	r3, r3, r2
100440b0:	0018      	movs	r0, r3
100440b2:	f7ff fb93 	bl	100437dc <NVMDB_get_info>
100440b6:	0003      	movs	r3, r0
}
100440b8:	0018      	movs	r0, r3
100440ba:	46bd      	mov	sp, r7
100440bc:	4b0e      	ldr	r3, [pc, #56]	@ (100440f8 <CleanLargeDB+0x1b8>)
100440be:	449d      	add	sp, r3
100440c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100440c2:	46c0      	nop			@ (mov r8, r8)
100440c4:	fffff7b4 	.word	0xfffff7b4
100440c8:	fffff7c7 	.word	0xfffff7c7
100440cc:	200008f0 	.word	0x200008f0
100440d0:	0000083b 	.word	0x0000083b
100440d4:	00000824 	.word	0x00000824
100440d8:	0000083c 	.word	0x0000083c
100440dc:	0000081c 	.word	0x0000081c
100440e0:	00000836 	.word	0x00000836
100440e4:	000007ff 	.word	0x000007ff
100440e8:	0000083a 	.word	0x0000083a
100440ec:	effc0000 	.word	0xeffc0000
100440f0:	00000839 	.word	0x00000839
100440f4:	0000080c 	.word	0x0000080c
100440f8:	00000844 	.word	0x00000844

100440fc <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100440fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100440fe:	4c7a      	ldr	r4, [pc, #488]	@ (100442e8 <CleanPage+0x1ec>)
10044100:	44a5      	add	sp, r4
10044102:	af02      	add	r7, sp, #8
10044104:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
10044106:	4b79      	ldr	r3, [pc, #484]	@ (100442ec <CleanPage+0x1f0>)
10044108:	18fb      	adds	r3, r7, r3
1004410a:	2200      	movs	r2, #0
1004410c:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
1004410e:	4b78      	ldr	r3, [pc, #480]	@ (100442f0 <CleanPage+0x1f4>)
10044110:	18fb      	adds	r3, r7, r3
10044112:	2200      	movs	r2, #0
10044114:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10044116:	2300      	movs	r3, #0
10044118:	4a76      	ldr	r2, [pc, #472]	@ (100442f4 <CleanPage+0x1f8>)
1004411a:	18ba      	adds	r2, r7, r2
1004411c:	6013      	str	r3, [r2, #0]
1004411e:	e023      	b.n	10044168 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10044120:	687b      	ldr	r3, [r7, #4]
10044122:	6899      	ldr	r1, [r3, #8]
10044124:	4b73      	ldr	r3, [pc, #460]	@ (100442f4 <CleanPage+0x1f8>)
10044126:	18fb      	adds	r3, r7, r3
10044128:	681a      	ldr	r2, [r3, #0]
1004412a:	0013      	movs	r3, r2
1004412c:	005b      	lsls	r3, r3, #1
1004412e:	189b      	adds	r3, r3, r2
10044130:	009b      	lsls	r3, r3, #2
10044132:	18ca      	adds	r2, r1, r3
10044134:	4970      	ldr	r1, [pc, #448]	@ (100442f8 <CleanPage+0x1fc>)
10044136:	187b      	adds	r3, r7, r1
10044138:	7812      	ldrb	r2, [r2, #0]
1004413a:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
1004413c:	187b      	adds	r3, r7, r1
1004413e:	781a      	ldrb	r2, [r3, #0]
10044140:	496e      	ldr	r1, [pc, #440]	@ (100442fc <CleanPage+0x200>)
10044142:	0013      	movs	r3, r2
10044144:	009b      	lsls	r3, r3, #2
10044146:	189b      	adds	r3, r3, r2
10044148:	009b      	lsls	r3, r3, #2
1004414a:	18cb      	adds	r3, r1, r3
1004414c:	330a      	adds	r3, #10
1004414e:	881b      	ldrh	r3, [r3, #0]
10044150:	2b00      	cmp	r3, #0
10044152:	d003      	beq.n	1004415c <CleanPage+0x60>
    {
      found = TRUE;
10044154:	4b66      	ldr	r3, [pc, #408]	@ (100442f0 <CleanPage+0x1f4>)
10044156:	18fb      	adds	r3, r7, r3
10044158:	2201      	movs	r2, #1
1004415a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004415c:	4a65      	ldr	r2, [pc, #404]	@ (100442f4 <CleanPage+0x1f8>)
1004415e:	18bb      	adds	r3, r7, r2
10044160:	681b      	ldr	r3, [r3, #0]
10044162:	3301      	adds	r3, #1
10044164:	18ba      	adds	r2, r7, r2
10044166:	6013      	str	r3, [r2, #0]
10044168:	687b      	ldr	r3, [r7, #4]
1004416a:	791b      	ldrb	r3, [r3, #4]
1004416c:	001a      	movs	r2, r3
1004416e:	4b61      	ldr	r3, [pc, #388]	@ (100442f4 <CleanPage+0x1f8>)
10044170:	18fb      	adds	r3, r7, r3
10044172:	681b      	ldr	r3, [r3, #0]
10044174:	4293      	cmp	r3, r2
10044176:	dbd3      	blt.n	10044120 <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
10044178:	4b5d      	ldr	r3, [pc, #372]	@ (100442f0 <CleanPage+0x1f4>)
1004417a:	18fb      	adds	r3, r7, r3
1004417c:	781b      	ldrb	r3, [r3, #0]
1004417e:	2b00      	cmp	r3, #0
10044180:	d101      	bne.n	10044186 <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
10044182:	2300      	movs	r3, #0
10044184:	e0ab      	b.n	100442de <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
10044186:	2380      	movs	r3, #128	@ 0x80
10044188:	011a      	lsls	r2, r3, #4
1004418a:	2308      	movs	r3, #8
1004418c:	18fb      	adds	r3, r7, r3
1004418e:	21ff      	movs	r1, #255	@ 0xff
10044190:	0018      	movs	r0, r3
10044192:	f00a ff15 	bl	1004efc0 <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10044196:	2300      	movs	r3, #0
10044198:	4a56      	ldr	r2, [pc, #344]	@ (100442f4 <CleanPage+0x1f8>)
1004419a:	18ba      	adds	r2, r7, r2
1004419c:	6013      	str	r3, [r2, #0]
1004419e:	e051      	b.n	10044244 <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
100441a0:	687b      	ldr	r3, [r7, #4]
100441a2:	6899      	ldr	r1, [r3, #8]
100441a4:	4853      	ldr	r0, [pc, #332]	@ (100442f4 <CleanPage+0x1f8>)
100441a6:	183b      	adds	r3, r7, r0
100441a8:	681a      	ldr	r2, [r3, #0]
100441aa:	0013      	movs	r3, r2
100441ac:	005b      	lsls	r3, r3, #1
100441ae:	189b      	adds	r3, r3, r2
100441b0:	009b      	lsls	r3, r3, #2
100441b2:	18ca      	adds	r2, r1, r3
100441b4:	4d50      	ldr	r5, [pc, #320]	@ (100442f8 <CleanPage+0x1fc>)
100441b6:	197b      	adds	r3, r7, r5
100441b8:	7812      	ldrb	r2, [r2, #0]
100441ba:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
100441bc:	687b      	ldr	r3, [r7, #4]
100441be:	6899      	ldr	r1, [r3, #8]
100441c0:	183b      	adds	r3, r7, r0
100441c2:	681a      	ldr	r2, [r3, #0]
100441c4:	0013      	movs	r3, r2
100441c6:	005b      	lsls	r3, r3, #1
100441c8:	189b      	adds	r3, r3, r2
100441ca:	009b      	lsls	r3, r3, #2
100441cc:	18cb      	adds	r3, r1, r3
100441ce:	685b      	ldr	r3, [r3, #4]
100441d0:	2282      	movs	r2, #130	@ 0x82
100441d2:	0112      	lsls	r2, r2, #4
100441d4:	18ba      	adds	r2, r7, r2
100441d6:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
100441d8:	4e49      	ldr	r6, [pc, #292]	@ (10044300 <CleanPage+0x204>)
100441da:	19bc      	adds	r4, r7, r6
100441dc:	2381      	movs	r3, #129	@ 0x81
100441de:	011b      	lsls	r3, r3, #4
100441e0:	18fa      	adds	r2, r7, r3
100441e2:	197b      	adds	r3, r7, r5
100441e4:	781b      	ldrb	r3, [r3, #0]
100441e6:	0011      	movs	r1, r2
100441e8:	0018      	movs	r0, r3
100441ea:	f000 fb1d 	bl	10044828 <NVMDB_HandleInit>
100441ee:	0003      	movs	r3, r0
100441f0:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
100441f2:	19bb      	adds	r3, r7, r6
100441f4:	781b      	ldrb	r3, [r3, #0]
100441f6:	2b00      	cmp	r3, #0
100441f8:	d001      	beq.n	100441fe <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
100441fa:	2300      	movs	r3, #0
100441fc:	e06f      	b.n	100442de <CleanPage+0x1e2>
    }

    InitReadState(&state);
100441fe:	4d41      	ldr	r5, [pc, #260]	@ (10044304 <CleanPage+0x208>)
10044200:	197b      	adds	r3, r7, r5
10044202:	0018      	movs	r0, r3
10044204:	f7ff fd92 	bl	10043d2c <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
10044208:	2308      	movs	r3, #8
1004420a:	18fa      	adds	r2, r7, r3
1004420c:	2082      	movs	r0, #130	@ 0x82
1004420e:	0100      	lsls	r0, r0, #4
10044210:	183b      	adds	r3, r7, r0
10044212:	681b      	ldr	r3, [r3, #0]
10044214:	18d1      	adds	r1, r2, r3
10044216:	183b      	adds	r3, r7, r0
10044218:	681b      	ldr	r3, [r3, #0]
1004421a:	b29b      	uxth	r3, r3
1004421c:	2280      	movs	r2, #128	@ 0x80
1004421e:	0112      	lsls	r2, r2, #4
10044220:	1ad3      	subs	r3, r2, r3
10044222:	b29a      	uxth	r2, r3
10044224:	4b38      	ldr	r3, [pc, #224]	@ (10044308 <CleanPage+0x20c>)
10044226:	18fc      	adds	r4, r7, r3
10044228:	2381      	movs	r3, #129	@ 0x81
1004422a:	011b      	lsls	r3, r3, #4
1004422c:	18f8      	adds	r0, r7, r3
1004422e:	197b      	adds	r3, r7, r5
10044230:	9300      	str	r3, [sp, #0]
10044232:	0023      	movs	r3, r4
10044234:	f7ff fd8b 	bl	10043d4e <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10044238:	4a2e      	ldr	r2, [pc, #184]	@ (100442f4 <CleanPage+0x1f8>)
1004423a:	18bb      	adds	r3, r7, r2
1004423c:	681b      	ldr	r3, [r3, #0]
1004423e:	3301      	adds	r3, #1
10044240:	18ba      	adds	r2, r7, r2
10044242:	6013      	str	r3, [r2, #0]
10044244:	687b      	ldr	r3, [r7, #4]
10044246:	791b      	ldrb	r3, [r3, #4]
10044248:	001a      	movs	r2, r3
1004424a:	4c2a      	ldr	r4, [pc, #168]	@ (100442f4 <CleanPage+0x1f8>)
1004424c:	193b      	adds	r3, r7, r4
1004424e:	681b      	ldr	r3, [r3, #0]
10044250:	4293      	cmp	r3, r2
10044252:	dba5      	blt.n	100441a0 <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
10044254:	687b      	ldr	r3, [r7, #4]
10044256:	681b      	ldr	r3, [r3, #0]
10044258:	2280      	movs	r2, #128	@ 0x80
1004425a:	0112      	lsls	r2, r2, #4
1004425c:	2108      	movs	r1, #8
1004425e:	1879      	adds	r1, r7, r1
10044260:	0018      	movs	r0, r3
10044262:	f7ff fd23 	bl	10043cac <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10044266:	2300      	movs	r3, #0
10044268:	193a      	adds	r2, r7, r4
1004426a:	6013      	str	r3, [r2, #0]
1004426c:	e02c      	b.n	100442c8 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1004426e:	687b      	ldr	r3, [r7, #4]
10044270:	6899      	ldr	r1, [r3, #8]
10044272:	4b20      	ldr	r3, [pc, #128]	@ (100442f4 <CleanPage+0x1f8>)
10044274:	18fb      	adds	r3, r7, r3
10044276:	681a      	ldr	r2, [r3, #0]
10044278:	0013      	movs	r3, r2
1004427a:	005b      	lsls	r3, r3, #1
1004427c:	189b      	adds	r3, r3, r2
1004427e:	009b      	lsls	r3, r3, #2
10044280:	18ca      	adds	r2, r1, r3
10044282:	491d      	ldr	r1, [pc, #116]	@ (100442f8 <CleanPage+0x1fc>)
10044284:	187b      	adds	r3, r7, r1
10044286:	7812      	ldrb	r2, [r2, #0]
10044288:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
1004428a:	187b      	adds	r3, r7, r1
1004428c:	781a      	ldrb	r2, [r3, #0]
1004428e:	0013      	movs	r3, r2
10044290:	009b      	lsls	r3, r3, #2
10044292:	189b      	adds	r3, r3, r2
10044294:	009b      	lsls	r3, r3, #2
10044296:	4a19      	ldr	r2, [pc, #100]	@ (100442fc <CleanPage+0x200>)
10044298:	189b      	adds	r3, r3, r2
1004429a:	4d19      	ldr	r5, [pc, #100]	@ (10044300 <CleanPage+0x204>)
1004429c:	197c      	adds	r4, r7, r5
1004429e:	0018      	movs	r0, r3
100442a0:	f7ff fa9c 	bl	100437dc <NVMDB_get_info>
100442a4:	0003      	movs	r3, r0
100442a6:	7023      	strb	r3, [r4, #0]
    if(status)
100442a8:	002a      	movs	r2, r5
100442aa:	18bb      	adds	r3, r7, r2
100442ac:	781b      	ldrb	r3, [r3, #0]
100442ae:	2b00      	cmp	r3, #0
100442b0:	d004      	beq.n	100442bc <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
100442b2:	4b0e      	ldr	r3, [pc, #56]	@ (100442ec <CleanPage+0x1f0>)
100442b4:	18fb      	adds	r3, r7, r3
100442b6:	18ba      	adds	r2, r7, r2
100442b8:	7812      	ldrb	r2, [r2, #0]
100442ba:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
100442bc:	4a0d      	ldr	r2, [pc, #52]	@ (100442f4 <CleanPage+0x1f8>)
100442be:	18bb      	adds	r3, r7, r2
100442c0:	681b      	ldr	r3, [r3, #0]
100442c2:	3301      	adds	r3, #1
100442c4:	18ba      	adds	r2, r7, r2
100442c6:	6013      	str	r3, [r2, #0]
100442c8:	687b      	ldr	r3, [r7, #4]
100442ca:	791b      	ldrb	r3, [r3, #4]
100442cc:	001a      	movs	r2, r3
100442ce:	4b09      	ldr	r3, [pc, #36]	@ (100442f4 <CleanPage+0x1f8>)
100442d0:	18fb      	adds	r3, r7, r3
100442d2:	681b      	ldr	r3, [r3, #0]
100442d4:	4293      	cmp	r3, r2
100442d6:	dbca      	blt.n	1004426e <CleanPage+0x172>
    }
  }

  return ret;
100442d8:	4b04      	ldr	r3, [pc, #16]	@ (100442ec <CleanPage+0x1f0>)
100442da:	18fb      	adds	r3, r7, r3
100442dc:	781b      	ldrb	r3, [r3, #0]
}
100442de:	0018      	movs	r0, r3
100442e0:	46bd      	mov	sp, r7
100442e2:	4b0a      	ldr	r3, [pc, #40]	@ (1004430c <CleanPage+0x210>)
100442e4:	449d      	add	sp, r3
100442e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100442e8:	fffff7c4 	.word	0xfffff7c4
100442ec:	0000082f 	.word	0x0000082f
100442f0:	00000827 	.word	0x00000827
100442f4:	00000828 	.word	0x00000828
100442f8:	00000826 	.word	0x00000826
100442fc:	200008f0 	.word	0x200008f0
10044300:	00000825 	.word	0x00000825
10044304:	00000808 	.word	0x00000808
10044308:	0000080e 	.word	0x0000080e
1004430c:	00000834 	.word	0x00000834

10044310 <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
10044310:	b590      	push	{r4, r7, lr}
10044312:	b087      	sub	sp, #28
10044314:	af00      	add	r7, sp, #0
10044316:	0002      	movs	r2, r0
10044318:	6039      	str	r1, [r7, #0]
1004431a:	1dfb      	adds	r3, r7, #7
1004431c:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004431e:	2300      	movs	r3, #0
10044320:	617b      	str	r3, [r7, #20]
10044322:	e016      	b.n	10044352 <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
10044324:	240b      	movs	r4, #11
10044326:	1939      	adds	r1, r7, r4
10044328:	482e      	ldr	r0, [pc, #184]	@ (100443e4 <GetDBType+0xd4>)
1004432a:	697a      	ldr	r2, [r7, #20]
1004432c:	0013      	movs	r3, r2
1004432e:	005b      	lsls	r3, r3, #1
10044330:	189b      	adds	r3, r3, r2
10044332:	009b      	lsls	r3, r3, #2
10044334:	18c3      	adds	r3, r0, r3
10044336:	3306      	adds	r3, #6
10044338:	781b      	ldrb	r3, [r3, #0]
1004433a:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
1004433c:	193a      	adds	r2, r7, r4
1004433e:	1dfb      	adds	r3, r7, #7
10044340:	7812      	ldrb	r2, [r2, #0]
10044342:	781b      	ldrb	r3, [r3, #0]
10044344:	429a      	cmp	r2, r3
10044346:	d101      	bne.n	1004434c <GetDBType+0x3c>
    {
      return LARGE_DB;
10044348:	2302      	movs	r3, #2
1004434a:	e046      	b.n	100443da <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004434c:	697b      	ldr	r3, [r7, #20]
1004434e:	3301      	adds	r3, #1
10044350:	617b      	str	r3, [r7, #20]
10044352:	697b      	ldr	r3, [r7, #20]
10044354:	2b01      	cmp	r3, #1
10044356:	dde5      	ble.n	10044324 <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10044358:	2300      	movs	r3, #0
1004435a:	613b      	str	r3, [r7, #16]
1004435c:	e039      	b.n	100443d2 <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1004435e:	2300      	movs	r3, #0
10044360:	60fb      	str	r3, [r7, #12]
10044362:	e026      	b.n	100443b2 <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10044364:	4920      	ldr	r1, [pc, #128]	@ (100443e8 <GetDBType+0xd8>)
10044366:	693a      	ldr	r2, [r7, #16]
10044368:	0013      	movs	r3, r2
1004436a:	005b      	lsls	r3, r3, #1
1004436c:	189b      	adds	r3, r3, r2
1004436e:	009b      	lsls	r3, r3, #2
10044370:	18cb      	adds	r3, r1, r3
10044372:	3308      	adds	r3, #8
10044374:	6819      	ldr	r1, [r3, #0]
10044376:	68fa      	ldr	r2, [r7, #12]
10044378:	0013      	movs	r3, r2
1004437a:	005b      	lsls	r3, r3, #1
1004437c:	189b      	adds	r3, r3, r2
1004437e:	009b      	lsls	r3, r3, #2
10044380:	18ca      	adds	r2, r1, r3
10044382:	210b      	movs	r1, #11
10044384:	187b      	adds	r3, r7, r1
10044386:	7812      	ldrb	r2, [r2, #0]
10044388:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
1004438a:	187a      	adds	r2, r7, r1
1004438c:	1dfb      	adds	r3, r7, #7
1004438e:	7812      	ldrb	r2, [r2, #0]
10044390:	781b      	ldrb	r3, [r3, #0]
10044392:	429a      	cmp	r2, r3
10044394:	d10a      	bne.n	100443ac <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
10044396:	693a      	ldr	r2, [r7, #16]
10044398:	0013      	movs	r3, r2
1004439a:	005b      	lsls	r3, r3, #1
1004439c:	189b      	adds	r3, r3, r2
1004439e:	009b      	lsls	r3, r3, #2
100443a0:	4a11      	ldr	r2, [pc, #68]	@ (100443e8 <GetDBType+0xd8>)
100443a2:	189a      	adds	r2, r3, r2
100443a4:	683b      	ldr	r3, [r7, #0]
100443a6:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
100443a8:	2301      	movs	r3, #1
100443aa:	e016      	b.n	100443da <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
100443ac:	68fb      	ldr	r3, [r7, #12]
100443ae:	3301      	adds	r3, #1
100443b0:	60fb      	str	r3, [r7, #12]
100443b2:	490d      	ldr	r1, [pc, #52]	@ (100443e8 <GetDBType+0xd8>)
100443b4:	693a      	ldr	r2, [r7, #16]
100443b6:	0013      	movs	r3, r2
100443b8:	005b      	lsls	r3, r3, #1
100443ba:	189b      	adds	r3, r3, r2
100443bc:	009b      	lsls	r3, r3, #2
100443be:	18cb      	adds	r3, r1, r3
100443c0:	3304      	adds	r3, #4
100443c2:	781b      	ldrb	r3, [r3, #0]
100443c4:	001a      	movs	r2, r3
100443c6:	68fb      	ldr	r3, [r7, #12]
100443c8:	4293      	cmp	r3, r2
100443ca:	dbcb      	blt.n	10044364 <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
100443cc:	693b      	ldr	r3, [r7, #16]
100443ce:	3301      	adds	r3, #1
100443d0:	613b      	str	r3, [r7, #16]
100443d2:	693b      	ldr	r3, [r7, #16]
100443d4:	2b00      	cmp	r3, #0
100443d6:	dbc2      	blt.n	1004435e <GetDBType+0x4e>
      }
    }
  }

  return 0;
100443d8:	2300      	movs	r3, #0
}
100443da:	0018      	movs	r0, r3
100443dc:	46bd      	mov	sp, r7
100443de:	b007      	add	sp, #28
100443e0:	bd90      	pop	{r4, r7, pc}
100443e2:	46c0      	nop			@ (mov r8, r8)
100443e4:	1004fe20 	.word	0x1004fe20
100443e8:	2000091c 	.word	0x2000091c

100443ec <NVMDB_AppendRecordNoCache>:

  return NVMDB_STATUS_OK;
}

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
100443ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100443ee:	b089      	sub	sp, #36	@ 0x24
100443f0:	af02      	add	r7, sp, #8
100443f2:	60f8      	str	r0, [r7, #12]
100443f4:	0008      	movs	r0, r1
100443f6:	0011      	movs	r1, r2
100443f8:	607b      	str	r3, [r7, #4]
100443fa:	230b      	movs	r3, #11
100443fc:	18fb      	adds	r3, r7, r3
100443fe:	1c02      	adds	r2, r0, #0
10044400:	701a      	strb	r2, [r3, #0]
10044402:	2008      	movs	r0, #8
10044404:	183b      	adds	r3, r7, r0
10044406:	1c0a      	adds	r2, r1, #0
10044408:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
1004440a:	0001      	movs	r1, r0
1004440c:	187b      	adds	r3, r7, r1
1004440e:	881b      	ldrh	r3, [r3, #0]
10044410:	3b01      	subs	r3, #1
10044412:	b29b      	uxth	r3, r3
10044414:	b21b      	sxth	r3, r3
10044416:	2203      	movs	r2, #3
10044418:	4313      	orrs	r3, r2
1004441a:	b21b      	sxth	r3, r3
1004441c:	b29a      	uxth	r2, r3
1004441e:	187b      	adds	r3, r7, r1
10044420:	3201      	adds	r2, #1
10044422:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10044424:	68fb      	ldr	r3, [r7, #12]
10044426:	685b      	ldr	r3, [r3, #4]
10044428:	1d5a      	adds	r2, r3, #5
1004442a:	68fb      	ldr	r3, [r7, #12]
1004442c:	689b      	ldr	r3, [r3, #8]
1004442e:	429a      	cmp	r2, r3
10044430:	d310      	bcc.n	10044454 <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
10044432:	68fb      	ldr	r3, [r7, #12]
10044434:	781b      	ldrb	r3, [r3, #0]
10044436:	0019      	movs	r1, r3
10044438:	4a4a      	ldr	r2, [pc, #296]	@ (10044564 <NVMDB_AppendRecordNoCache+0x178>)
1004443a:	000b      	movs	r3, r1
1004443c:	009b      	lsls	r3, r3, #2
1004443e:	185b      	adds	r3, r3, r1
10044440:	009b      	lsls	r3, r3, #2
10044442:	18d3      	adds	r3, r2, r3
10044444:	330a      	adds	r3, #10
10044446:	881b      	ldrh	r3, [r3, #0]
10044448:	2b00      	cmp	r3, #0
1004444a:	d001      	beq.n	10044450 <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
1004444c:	230b      	movs	r3, #11
1004444e:	e084      	b.n	1004455a <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
10044450:	2302      	movs	r3, #2
10044452:	e082      	b.n	1004455a <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10044454:	68fb      	ldr	r3, [r7, #12]
10044456:	685b      	ldr	r3, [r3, #4]
10044458:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
1004445a:	697b      	ldr	r3, [r7, #20]
1004445c:	781b      	ldrb	r3, [r3, #0]
1004445e:	2bff      	cmp	r3, #255	@ 0xff
10044460:	d11c      	bne.n	1004449c <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
10044462:	68fb      	ldr	r3, [r7, #12]
10044464:	689a      	ldr	r2, [r3, #8]
10044466:	68fb      	ldr	r3, [r7, #12]
10044468:	685b      	ldr	r3, [r3, #4]
1004446a:	1ad3      	subs	r3, r2, r3
1004446c:	2280      	movs	r2, #128	@ 0x80
1004446e:	0252      	lsls	r2, r2, #9
10044470:	4293      	cmp	r3, r2
10044472:	d300      	bcc.n	10044476 <NVMDB_AppendRecordNoCache+0x8a>
10044474:	4b3c      	ldr	r3, [pc, #240]	@ (10044568 <NVMDB_AppendRecordNoCache+0x17c>)
10044476:	2112      	movs	r1, #18
10044478:	187a      	adds	r2, r7, r1
1004447a:	8013      	strh	r3, [r2, #0]
      break;
1004447c:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
1004447e:	2308      	movs	r3, #8
10044480:	0018      	movs	r0, r3
10044482:	18fb      	adds	r3, r7, r3
10044484:	881a      	ldrh	r2, [r3, #0]
10044486:	2328      	movs	r3, #40	@ 0x28
10044488:	181b      	adds	r3, r3, r0
1004448a:	19db      	adds	r3, r3, r7
1004448c:	881b      	ldrh	r3, [r3, #0]
1004448e:	18d3      	adds	r3, r2, r3
10044490:	1cda      	adds	r2, r3, #3
10044492:	187b      	adds	r3, r7, r1
10044494:	881b      	ldrh	r3, [r3, #0]
10044496:	429a      	cmp	r2, r3
10044498:	db27      	blt.n	100444ea <NVMDB_AppendRecordNoCache+0xfe>
1004449a:	e015      	b.n	100444c8 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
1004449c:	697b      	ldr	r3, [r7, #20]
1004449e:	781b      	ldrb	r3, [r3, #0]
100444a0:	2bfe      	cmp	r3, #254	@ 0xfe
100444a2:	d005      	beq.n	100444b0 <NVMDB_AppendRecordNoCache+0xc4>
100444a4:	697b      	ldr	r3, [r7, #20]
100444a6:	781b      	ldrb	r3, [r3, #0]
100444a8:	2b00      	cmp	r3, #0
100444aa:	d001      	beq.n	100444b0 <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
100444ac:	2303      	movs	r3, #3
100444ae:	e054      	b.n	1004455a <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
100444b0:	68fb      	ldr	r3, [r7, #12]
100444b2:	685b      	ldr	r3, [r3, #4]
100444b4:	697a      	ldr	r2, [r7, #20]
100444b6:	8852      	ldrh	r2, [r2, #2]
100444b8:	3203      	adds	r2, #3
100444ba:	2103      	movs	r1, #3
100444bc:	430a      	orrs	r2, r1
100444be:	189b      	adds	r3, r3, r2
100444c0:	1c5a      	adds	r2, r3, #1
100444c2:	68fb      	ldr	r3, [r7, #12]
100444c4:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
100444c6:	e7ad      	b.n	10044424 <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
100444c8:	68fb      	ldr	r3, [r7, #12]
100444ca:	781b      	ldrb	r3, [r3, #0]
100444cc:	0019      	movs	r1, r3
100444ce:	4a25      	ldr	r2, [pc, #148]	@ (10044564 <NVMDB_AppendRecordNoCache+0x178>)
100444d0:	000b      	movs	r3, r1
100444d2:	009b      	lsls	r3, r3, #2
100444d4:	185b      	adds	r3, r3, r1
100444d6:	009b      	lsls	r3, r3, #2
100444d8:	18d3      	adds	r3, r2, r3
100444da:	330a      	adds	r3, #10
100444dc:	881b      	ldrh	r3, [r3, #0]
100444de:	2b00      	cmp	r3, #0
100444e0:	d001      	beq.n	100444e6 <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
100444e2:	230b      	movs	r3, #11
100444e4:	e039      	b.n	1004455a <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
100444e6:	2302      	movs	r3, #2
100444e8:	e037      	b.n	1004455a <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
100444ea:	68fb      	ldr	r3, [r7, #12]
100444ec:	6858      	ldr	r0, [r3, #4]
100444ee:	2611      	movs	r6, #17
100444f0:	19bc      	adds	r4, r7, r6
100444f2:	687d      	ldr	r5, [r7, #4]
100444f4:	2308      	movs	r3, #8
100444f6:	001a      	movs	r2, r3
100444f8:	18fb      	adds	r3, r7, r3
100444fa:	881b      	ldrh	r3, [r3, #0]
100444fc:	469c      	mov	ip, r3
100444fe:	230b      	movs	r3, #11
10044500:	18fb      	adds	r3, r7, r3
10044502:	7819      	ldrb	r1, [r3, #0]
10044504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044506:	9301      	str	r3, [sp, #4]
10044508:	2328      	movs	r3, #40	@ 0x28
1004450a:	189b      	adds	r3, r3, r2
1004450c:	19db      	adds	r3, r3, r7
1004450e:	881b      	ldrh	r3, [r3, #0]
10044510:	9300      	str	r3, [sp, #0]
10044512:	002b      	movs	r3, r5
10044514:	4662      	mov	r2, ip
10044516:	f7ff fae2 	bl	10043ade <WriteRecord>
1004451a:	0003      	movs	r3, r0
1004451c:	7023      	strb	r3, [r4, #0]
  if(status)
1004451e:	19bb      	adds	r3, r7, r6
10044520:	781b      	ldrb	r3, [r3, #0]
10044522:	2b00      	cmp	r3, #0
10044524:	d002      	beq.n	1004452c <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
10044526:	19bb      	adds	r3, r7, r6
10044528:	781b      	ldrb	r3, [r3, #0]
1004452a:	e016      	b.n	1004455a <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
1004452c:	68fb      	ldr	r3, [r7, #12]
1004452e:	781b      	ldrb	r3, [r3, #0]
10044530:	001a      	movs	r2, r3
10044532:	490c      	ldr	r1, [pc, #48]	@ (10044564 <NVMDB_AppendRecordNoCache+0x178>)
10044534:	0013      	movs	r3, r2
10044536:	009b      	lsls	r3, r3, #2
10044538:	189b      	adds	r3, r3, r2
1004453a:	009b      	lsls	r3, r3, #2
1004453c:	18cb      	adds	r3, r1, r3
1004453e:	3308      	adds	r3, #8
10044540:	881b      	ldrh	r3, [r3, #0]
10044542:	3301      	adds	r3, #1
10044544:	b298      	uxth	r0, r3
10044546:	4907      	ldr	r1, [pc, #28]	@ (10044564 <NVMDB_AppendRecordNoCache+0x178>)
10044548:	0013      	movs	r3, r2
1004454a:	009b      	lsls	r3, r3, #2
1004454c:	189b      	adds	r3, r3, r2
1004454e:	009b      	lsls	r3, r3, #2
10044550:	18cb      	adds	r3, r1, r3
10044552:	3308      	adds	r3, #8
10044554:	1c02      	adds	r2, r0, #0
10044556:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10044558:	2300      	movs	r3, #0
}
1004455a:	0018      	movs	r0, r3
1004455c:	46bd      	mov	sp, r7
1004455e:	b007      	add	sp, #28
10044560:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044562:	46c0      	nop			@ (mov r8, r8)
10044564:	200008f0 	.word	0x200008f0
10044568:	0000ffff 	.word	0x0000ffff

1004456c <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
1004456c:	b5b0      	push	{r4, r5, r7, lr}
1004456e:	b088      	sub	sp, #32
10044570:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10044572:	2300      	movs	r3, #0
10044574:	61fb      	str	r3, [r7, #28]
10044576:	e0cd      	b.n	10044714 <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
10044578:	49a8      	ldr	r1, [pc, #672]	@ (1004481c <NVMDB_Init+0x2b0>)
1004457a:	69fa      	ldr	r2, [r7, #28]
1004457c:	0013      	movs	r3, r2
1004457e:	005b      	lsls	r3, r3, #1
10044580:	189b      	adds	r3, r3, r2
10044582:	009b      	lsls	r3, r3, #2
10044584:	585b      	ldr	r3, [r3, r1]
10044586:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10044588:	2300      	movs	r3, #0
1004458a:	61bb      	str	r3, [r7, #24]
1004458c:	e0b1      	b.n	100446f2 <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1004458e:	49a3      	ldr	r1, [pc, #652]	@ (1004481c <NVMDB_Init+0x2b0>)
10044590:	69fa      	ldr	r2, [r7, #28]
10044592:	0013      	movs	r3, r2
10044594:	005b      	lsls	r3, r3, #1
10044596:	189b      	adds	r3, r3, r2
10044598:	009b      	lsls	r3, r3, #2
1004459a:	18cb      	adds	r3, r1, r3
1004459c:	3308      	adds	r3, #8
1004459e:	6819      	ldr	r1, [r3, #0]
100445a0:	69ba      	ldr	r2, [r7, #24]
100445a2:	0013      	movs	r3, r2
100445a4:	005b      	lsls	r3, r3, #1
100445a6:	189b      	adds	r3, r3, r2
100445a8:	009b      	lsls	r3, r3, #2
100445aa:	18ca      	adds	r2, r1, r3
100445ac:	2013      	movs	r0, #19
100445ae:	183b      	adds	r3, r7, r0
100445b0:	7812      	ldrb	r2, [r2, #0]
100445b2:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
100445b4:	4999      	ldr	r1, [pc, #612]	@ (1004481c <NVMDB_Init+0x2b0>)
100445b6:	69fa      	ldr	r2, [r7, #28]
100445b8:	0013      	movs	r3, r2
100445ba:	005b      	lsls	r3, r3, #1
100445bc:	189b      	adds	r3, r3, r2
100445be:	009b      	lsls	r3, r3, #2
100445c0:	18cb      	adds	r3, r1, r3
100445c2:	3308      	adds	r3, #8
100445c4:	6819      	ldr	r1, [r3, #0]
100445c6:	69ba      	ldr	r2, [r7, #24]
100445c8:	0013      	movs	r3, r2
100445ca:	005b      	lsls	r3, r3, #1
100445cc:	189b      	adds	r3, r3, r2
100445ce:	009b      	lsls	r3, r3, #2
100445d0:	18cb      	adds	r3, r1, r3
100445d2:	685b      	ldr	r3, [r3, #4]
100445d4:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
100445d6:	4991      	ldr	r1, [pc, #580]	@ (1004481c <NVMDB_Init+0x2b0>)
100445d8:	69fa      	ldr	r2, [r7, #28]
100445da:	0013      	movs	r3, r2
100445dc:	005b      	lsls	r3, r3, #1
100445de:	189b      	adds	r3, r3, r2
100445e0:	009b      	lsls	r3, r3, #2
100445e2:	18cb      	adds	r3, r1, r3
100445e4:	3308      	adds	r3, #8
100445e6:	6819      	ldr	r1, [r3, #0]
100445e8:	69ba      	ldr	r2, [r7, #24]
100445ea:	0013      	movs	r3, r2
100445ec:	005b      	lsls	r3, r3, #1
100445ee:	189b      	adds	r3, r3, r2
100445f0:	009b      	lsls	r3, r3, #2
100445f2:	18ca      	adds	r2, r1, r3
100445f4:	1dbb      	adds	r3, r7, #6
100445f6:	8912      	ldrh	r2, [r2, #8]
100445f8:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
100445fa:	183b      	adds	r3, r7, r0
100445fc:	781a      	ldrb	r2, [r3, #0]
100445fe:	4988      	ldr	r1, [pc, #544]	@ (10044820 <NVMDB_Init+0x2b4>)
10044600:	0013      	movs	r3, r2
10044602:	009b      	lsls	r3, r3, #2
10044604:	189b      	adds	r3, r3, r2
10044606:	009b      	lsls	r3, r3, #2
10044608:	585b      	ldr	r3, [r3, r1]
1004460a:	2b00      	cmp	r3, #0
1004460c:	d103      	bne.n	10044616 <NVMDB_Init+0xaa>
1004460e:	183b      	adds	r3, r7, r0
10044610:	781b      	ldrb	r3, [r3, #0]
10044612:	2b01      	cmp	r3, #1
10044614:	d901      	bls.n	1004461a <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
10044616:	2301      	movs	r3, #1
10044618:	e0fc      	b.n	10044814 <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
1004461a:	2413      	movs	r4, #19
1004461c:	193b      	adds	r3, r7, r4
1004461e:	781a      	ldrb	r2, [r3, #0]
10044620:	68f9      	ldr	r1, [r7, #12]
10044622:	68bb      	ldr	r3, [r7, #8]
10044624:	18c8      	adds	r0, r1, r3
10044626:	497e      	ldr	r1, [pc, #504]	@ (10044820 <NVMDB_Init+0x2b4>)
10044628:	0013      	movs	r3, r2
1004462a:	009b      	lsls	r3, r3, #2
1004462c:	189b      	adds	r3, r3, r2
1004462e:	009b      	lsls	r3, r3, #2
10044630:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
10044632:	497a      	ldr	r1, [pc, #488]	@ (1004481c <NVMDB_Init+0x2b0>)
10044634:	69fa      	ldr	r2, [r7, #28]
10044636:	0013      	movs	r3, r2
10044638:	005b      	lsls	r3, r3, #1
1004463a:	189b      	adds	r3, r3, r2
1004463c:	009b      	lsls	r3, r3, #2
1004463e:	18cb      	adds	r3, r1, r3
10044640:	3304      	adds	r3, #4
10044642:	781b      	ldrb	r3, [r3, #0]
10044644:	3b01      	subs	r3, #1
10044646:	69ba      	ldr	r2, [r7, #24]
10044648:	429a      	cmp	r2, r3
1004464a:	d10e      	bne.n	1004466a <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
1004464c:	193b      	adds	r3, r7, r4
1004464e:	781a      	ldrb	r2, [r3, #0]
10044650:	68fb      	ldr	r3, [r7, #12]
10044652:	2180      	movs	r1, #128	@ 0x80
10044654:	0109      	lsls	r1, r1, #4
10044656:	1859      	adds	r1, r3, r1
10044658:	4871      	ldr	r0, [pc, #452]	@ (10044820 <NVMDB_Init+0x2b4>)
1004465a:	0013      	movs	r3, r2
1004465c:	009b      	lsls	r3, r3, #2
1004465e:	189b      	adds	r3, r3, r2
10044660:	009b      	lsls	r3, r3, #2
10044662:	18c3      	adds	r3, r0, r3
10044664:	3304      	adds	r3, #4
10044666:	6019      	str	r1, [r3, #0]
10044668:	e01d      	b.n	100446a6 <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
1004466a:	496c      	ldr	r1, [pc, #432]	@ (1004481c <NVMDB_Init+0x2b0>)
1004466c:	69fa      	ldr	r2, [r7, #28]
1004466e:	0013      	movs	r3, r2
10044670:	005b      	lsls	r3, r3, #1
10044672:	189b      	adds	r3, r3, r2
10044674:	009b      	lsls	r3, r3, #2
10044676:	18cb      	adds	r3, r1, r3
10044678:	3308      	adds	r3, #8
1004467a:	6819      	ldr	r1, [r3, #0]
1004467c:	69bb      	ldr	r3, [r7, #24]
1004467e:	1c5a      	adds	r2, r3, #1
10044680:	0013      	movs	r3, r2
10044682:	005b      	lsls	r3, r3, #1
10044684:	189b      	adds	r3, r3, r2
10044686:	009b      	lsls	r3, r3, #2
10044688:	18cb      	adds	r3, r1, r3
1004468a:	6859      	ldr	r1, [r3, #4]
1004468c:	2313      	movs	r3, #19
1004468e:	18fb      	adds	r3, r7, r3
10044690:	781a      	ldrb	r2, [r3, #0]
10044692:	68fb      	ldr	r3, [r7, #12]
10044694:	18c9      	adds	r1, r1, r3
10044696:	4862      	ldr	r0, [pc, #392]	@ (10044820 <NVMDB_Init+0x2b4>)
10044698:	0013      	movs	r3, r2
1004469a:	009b      	lsls	r3, r3, #2
1004469c:	189b      	adds	r3, r3, r2
1004469e:	009b      	lsls	r3, r3, #2
100446a0:	18c3      	adds	r3, r0, r3
100446a2:	3304      	adds	r3, #4
100446a4:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
100446a6:	2013      	movs	r0, #19
100446a8:	183b      	adds	r3, r7, r0
100446aa:	781a      	ldrb	r2, [r3, #0]
100446ac:	495c      	ldr	r1, [pc, #368]	@ (10044820 <NVMDB_Init+0x2b4>)
100446ae:	0013      	movs	r3, r2
100446b0:	009b      	lsls	r3, r3, #2
100446b2:	189b      	adds	r3, r3, r2
100446b4:	009b      	lsls	r3, r3, #2
100446b6:	18cb      	adds	r3, r1, r3
100446b8:	3310      	adds	r3, #16
100446ba:	1dba      	adds	r2, r7, #6
100446bc:	8812      	ldrh	r2, [r2, #0]
100446be:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
100446c0:	183b      	adds	r3, r7, r0
100446c2:	781a      	ldrb	r2, [r3, #0]
100446c4:	0013      	movs	r3, r2
100446c6:	009b      	lsls	r3, r3, #2
100446c8:	189b      	adds	r3, r3, r2
100446ca:	009b      	lsls	r3, r3, #2
100446cc:	4a54      	ldr	r2, [pc, #336]	@ (10044820 <NVMDB_Init+0x2b4>)
100446ce:	189b      	adds	r3, r3, r2
100446d0:	2512      	movs	r5, #18
100446d2:	197c      	adds	r4, r7, r5
100446d4:	0018      	movs	r0, r3
100446d6:	f7ff f881 	bl	100437dc <NVMDB_get_info>
100446da:	0003      	movs	r3, r0
100446dc:	7023      	strb	r3, [r4, #0]
      if(status)
100446de:	197b      	adds	r3, r7, r5
100446e0:	781b      	ldrb	r3, [r3, #0]
100446e2:	2b00      	cmp	r3, #0
100446e4:	d002      	beq.n	100446ec <NVMDB_Init+0x180>
      {
        return status;
100446e6:	197b      	adds	r3, r7, r5
100446e8:	781b      	ldrb	r3, [r3, #0]
100446ea:	e093      	b.n	10044814 <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
100446ec:	69bb      	ldr	r3, [r7, #24]
100446ee:	3301      	adds	r3, #1
100446f0:	61bb      	str	r3, [r7, #24]
100446f2:	494a      	ldr	r1, [pc, #296]	@ (1004481c <NVMDB_Init+0x2b0>)
100446f4:	69fa      	ldr	r2, [r7, #28]
100446f6:	0013      	movs	r3, r2
100446f8:	005b      	lsls	r3, r3, #1
100446fa:	189b      	adds	r3, r3, r2
100446fc:	009b      	lsls	r3, r3, #2
100446fe:	18cb      	adds	r3, r1, r3
10044700:	3304      	adds	r3, #4
10044702:	781b      	ldrb	r3, [r3, #0]
10044704:	001a      	movs	r2, r3
10044706:	69bb      	ldr	r3, [r7, #24]
10044708:	4293      	cmp	r3, r2
1004470a:	da00      	bge.n	1004470e <NVMDB_Init+0x1a2>
1004470c:	e73f      	b.n	1004458e <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004470e:	69fb      	ldr	r3, [r7, #28]
10044710:	3301      	adds	r3, #1
10044712:	61fb      	str	r3, [r7, #28]
10044714:	69fb      	ldr	r3, [r7, #28]
10044716:	2b00      	cmp	r3, #0
10044718:	da00      	bge.n	1004471c <NVMDB_Init+0x1b0>
1004471a:	e72d      	b.n	10044578 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004471c:	2300      	movs	r3, #0
1004471e:	617b      	str	r3, [r7, #20]
10044720:	e074      	b.n	1004480c <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
10044722:	2413      	movs	r4, #19
10044724:	1939      	adds	r1, r7, r4
10044726:	483f      	ldr	r0, [pc, #252]	@ (10044824 <NVMDB_Init+0x2b8>)
10044728:	697a      	ldr	r2, [r7, #20]
1004472a:	0013      	movs	r3, r2
1004472c:	005b      	lsls	r3, r3, #1
1004472e:	189b      	adds	r3, r3, r2
10044730:	009b      	lsls	r3, r3, #2
10044732:	18c3      	adds	r3, r0, r3
10044734:	3306      	adds	r3, #6
10044736:	781b      	ldrb	r3, [r3, #0]
10044738:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
1004473a:	193b      	adds	r3, r7, r4
1004473c:	781a      	ldrb	r2, [r3, #0]
1004473e:	4938      	ldr	r1, [pc, #224]	@ (10044820 <NVMDB_Init+0x2b4>)
10044740:	0013      	movs	r3, r2
10044742:	009b      	lsls	r3, r3, #2
10044744:	189b      	adds	r3, r3, r2
10044746:	009b      	lsls	r3, r3, #2
10044748:	585b      	ldr	r3, [r3, r1]
1004474a:	2b00      	cmp	r3, #0
1004474c:	d103      	bne.n	10044756 <NVMDB_Init+0x1ea>
1004474e:	193b      	adds	r3, r7, r4
10044750:	781b      	ldrb	r3, [r3, #0]
10044752:	2b01      	cmp	r3, #1
10044754:	d901      	bls.n	1004475a <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
10044756:	2301      	movs	r3, #1
10044758:	e05c      	b.n	10044814 <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
1004475a:	2413      	movs	r4, #19
1004475c:	193b      	adds	r3, r7, r4
1004475e:	781a      	ldrb	r2, [r3, #0]
10044760:	4830      	ldr	r0, [pc, #192]	@ (10044824 <NVMDB_Init+0x2b8>)
10044762:	6979      	ldr	r1, [r7, #20]
10044764:	000b      	movs	r3, r1
10044766:	005b      	lsls	r3, r3, #1
10044768:	185b      	adds	r3, r3, r1
1004476a:	009b      	lsls	r3, r3, #2
1004476c:	5818      	ldr	r0, [r3, r0]
1004476e:	492c      	ldr	r1, [pc, #176]	@ (10044820 <NVMDB_Init+0x2b4>)
10044770:	0013      	movs	r3, r2
10044772:	009b      	lsls	r3, r3, #2
10044774:	189b      	adds	r3, r3, r2
10044776:	009b      	lsls	r3, r3, #2
10044778:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
1004477a:	492a      	ldr	r1, [pc, #168]	@ (10044824 <NVMDB_Init+0x2b8>)
1004477c:	697a      	ldr	r2, [r7, #20]
1004477e:	0013      	movs	r3, r2
10044780:	005b      	lsls	r3, r3, #1
10044782:	189b      	adds	r3, r3, r2
10044784:	009b      	lsls	r3, r3, #2
10044786:	5859      	ldr	r1, [r3, r1]
10044788:	4826      	ldr	r0, [pc, #152]	@ (10044824 <NVMDB_Init+0x2b8>)
1004478a:	697a      	ldr	r2, [r7, #20]
1004478c:	0013      	movs	r3, r2
1004478e:	005b      	lsls	r3, r3, #1
10044790:	189b      	adds	r3, r3, r2
10044792:	009b      	lsls	r3, r3, #2
10044794:	18c3      	adds	r3, r0, r3
10044796:	3304      	adds	r3, #4
10044798:	881b      	ldrh	r3, [r3, #0]
1004479a:	0018      	movs	r0, r3
1004479c:	193b      	adds	r3, r7, r4
1004479e:	781a      	ldrb	r2, [r3, #0]
100447a0:	1809      	adds	r1, r1, r0
100447a2:	481f      	ldr	r0, [pc, #124]	@ (10044820 <NVMDB_Init+0x2b4>)
100447a4:	0013      	movs	r3, r2
100447a6:	009b      	lsls	r3, r3, #2
100447a8:	189b      	adds	r3, r3, r2
100447aa:	009b      	lsls	r3, r3, #2
100447ac:	18c3      	adds	r3, r0, r3
100447ae:	3304      	adds	r3, #4
100447b0:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
100447b2:	193b      	adds	r3, r7, r4
100447b4:	781a      	ldrb	r2, [r3, #0]
100447b6:	481b      	ldr	r0, [pc, #108]	@ (10044824 <NVMDB_Init+0x2b8>)
100447b8:	6979      	ldr	r1, [r7, #20]
100447ba:	000b      	movs	r3, r1
100447bc:	005b      	lsls	r3, r3, #1
100447be:	185b      	adds	r3, r3, r1
100447c0:	009b      	lsls	r3, r3, #2
100447c2:	18c3      	adds	r3, r0, r3
100447c4:	3308      	adds	r3, #8
100447c6:	8818      	ldrh	r0, [r3, #0]
100447c8:	4915      	ldr	r1, [pc, #84]	@ (10044820 <NVMDB_Init+0x2b4>)
100447ca:	0013      	movs	r3, r2
100447cc:	009b      	lsls	r3, r3, #2
100447ce:	189b      	adds	r3, r3, r2
100447d0:	009b      	lsls	r3, r3, #2
100447d2:	18cb      	adds	r3, r1, r3
100447d4:	3310      	adds	r3, #16
100447d6:	1c02      	adds	r2, r0, #0
100447d8:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
100447da:	193b      	adds	r3, r7, r4
100447dc:	781a      	ldrb	r2, [r3, #0]
100447de:	0013      	movs	r3, r2
100447e0:	009b      	lsls	r3, r3, #2
100447e2:	189b      	adds	r3, r3, r2
100447e4:	009b      	lsls	r3, r3, #2
100447e6:	4a0e      	ldr	r2, [pc, #56]	@ (10044820 <NVMDB_Init+0x2b4>)
100447e8:	189b      	adds	r3, r3, r2
100447ea:	2512      	movs	r5, #18
100447ec:	197c      	adds	r4, r7, r5
100447ee:	0018      	movs	r0, r3
100447f0:	f7fe fff4 	bl	100437dc <NVMDB_get_info>
100447f4:	0003      	movs	r3, r0
100447f6:	7023      	strb	r3, [r4, #0]
    if(status)
100447f8:	197b      	adds	r3, r7, r5
100447fa:	781b      	ldrb	r3, [r3, #0]
100447fc:	2b00      	cmp	r3, #0
100447fe:	d002      	beq.n	10044806 <NVMDB_Init+0x29a>
    {
      return status;
10044800:	197b      	adds	r3, r7, r5
10044802:	781b      	ldrb	r3, [r3, #0]
10044804:	e006      	b.n	10044814 <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10044806:	697b      	ldr	r3, [r7, #20]
10044808:	3301      	adds	r3, #1
1004480a:	617b      	str	r3, [r7, #20]
1004480c:	697b      	ldr	r3, [r7, #20]
1004480e:	2b01      	cmp	r3, #1
10044810:	dd87      	ble.n	10044722 <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
10044812:	2300      	movs	r3, #0
}
10044814:	0018      	movs	r0, r3
10044816:	46bd      	mov	sp, r7
10044818:	b008      	add	sp, #32
1004481a:	bdb0      	pop	{r4, r5, r7, pc}
1004481c:	2000091c 	.word	0x2000091c
10044820:	200008f0 	.word	0x200008f0
10044824:	1004fe20 	.word	0x1004fe20

10044828 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
10044828:	b580      	push	{r7, lr}
1004482a:	b082      	sub	sp, #8
1004482c:	af00      	add	r7, sp, #0
1004482e:	0002      	movs	r2, r0
10044830:	6039      	str	r1, [r7, #0]
10044832:	1dfb      	adds	r3, r7, #7
10044834:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
10044836:	1dfb      	adds	r3, r7, #7
10044838:	781b      	ldrb	r3, [r3, #0]
1004483a:	2b01      	cmp	r3, #1
1004483c:	d901      	bls.n	10044842 <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
1004483e:	2301      	movs	r3, #1
10044840:	e020      	b.n	10044884 <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
10044842:	1dfb      	adds	r3, r7, #7
10044844:	781a      	ldrb	r2, [r3, #0]
10044846:	4911      	ldr	r1, [pc, #68]	@ (1004488c <NVMDB_HandleInit+0x64>)
10044848:	0013      	movs	r3, r2
1004484a:	009b      	lsls	r3, r3, #2
1004484c:	189b      	adds	r3, r3, r2
1004484e:	009b      	lsls	r3, r3, #2
10044850:	585a      	ldr	r2, [r3, r1]
10044852:	683b      	ldr	r3, [r7, #0]
10044854:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
10044856:	1dfb      	adds	r3, r7, #7
10044858:	781a      	ldrb	r2, [r3, #0]
1004485a:	490c      	ldr	r1, [pc, #48]	@ (1004488c <NVMDB_HandleInit+0x64>)
1004485c:	0013      	movs	r3, r2
1004485e:	009b      	lsls	r3, r3, #2
10044860:	189b      	adds	r3, r3, r2
10044862:	009b      	lsls	r3, r3, #2
10044864:	18cb      	adds	r3, r1, r3
10044866:	3304      	adds	r3, #4
10044868:	681a      	ldr	r2, [r3, #0]
1004486a:	683b      	ldr	r3, [r7, #0]
1004486c:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
1004486e:	683b      	ldr	r3, [r7, #0]
10044870:	2201      	movs	r2, #1
10044872:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
10044874:	683b      	ldr	r3, [r7, #0]
10044876:	1dfa      	adds	r2, r7, #7
10044878:	7812      	ldrb	r2, [r2, #0]
1004487a:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
1004487c:	683b      	ldr	r3, [r7, #0]
1004487e:	2200      	movs	r2, #0
10044880:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
10044882:	2300      	movs	r3, #0
}
10044884:	0018      	movs	r0, r3
10044886:	46bd      	mov	sp, r7
10044888:	b002      	add	sp, #8
1004488a:	bd80      	pop	{r7, pc}
1004488c:	200008f0 	.word	0x200008f0

10044890 <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
10044890:	b590      	push	{r4, r7, lr}
10044892:	b089      	sub	sp, #36	@ 0x24
10044894:	af04      	add	r7, sp, #16
10044896:	60f8      	str	r0, [r7, #12]
10044898:	0008      	movs	r0, r1
1004489a:	0011      	movs	r1, r2
1004489c:	607b      	str	r3, [r7, #4]
1004489e:	230b      	movs	r3, #11
100448a0:	18fb      	adds	r3, r7, r3
100448a2:	1c02      	adds	r2, r0, #0
100448a4:	701a      	strb	r2, [r3, #0]
100448a6:	2308      	movs	r3, #8
100448a8:	18fb      	adds	r3, r7, r3
100448aa:	1c0a      	adds	r2, r1, #0
100448ac:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
100448ae:	68fb      	ldr	r3, [r7, #12]
100448b0:	781b      	ldrb	r3, [r3, #0]
100448b2:	0019      	movs	r1, r3
100448b4:	4a12      	ldr	r2, [pc, #72]	@ (10044900 <NVMDB_ReadNextRecord+0x70>)
100448b6:	000b      	movs	r3, r1
100448b8:	009b      	lsls	r3, r3, #2
100448ba:	185b      	adds	r3, r3, r1
100448bc:	009b      	lsls	r3, r3, #2
100448be:	18d3      	adds	r3, r2, r3
100448c0:	330e      	adds	r3, #14
100448c2:	781b      	ldrb	r3, [r3, #0]
100448c4:	2b00      	cmp	r3, #0
100448c6:	d001      	beq.n	100448cc <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
100448c8:	230a      	movs	r3, #10
100448ca:	e015      	b.n	100448f8 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
100448cc:	687c      	ldr	r4, [r7, #4]
100448ce:	2308      	movs	r3, #8
100448d0:	18fb      	adds	r3, r7, r3
100448d2:	881a      	ldrh	r2, [r3, #0]
100448d4:	230b      	movs	r3, #11
100448d6:	18fb      	adds	r3, r7, r3
100448d8:	7819      	ldrb	r1, [r3, #0]
100448da:	68f8      	ldr	r0, [r7, #12]
100448dc:	2300      	movs	r3, #0
100448de:	9303      	str	r3, [sp, #12]
100448e0:	2300      	movs	r3, #0
100448e2:	9302      	str	r3, [sp, #8]
100448e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100448e6:	9301      	str	r3, [sp, #4]
100448e8:	2320      	movs	r3, #32
100448ea:	18fb      	adds	r3, r7, r3
100448ec:	881b      	ldrh	r3, [r3, #0]
100448ee:	9300      	str	r3, [sp, #0]
100448f0:	0023      	movs	r3, r4
100448f2:	f7ff f83f 	bl	10043974 <ReadNextRecordNoLock>
100448f6:	0003      	movs	r3, r0
}
100448f8:	0018      	movs	r0, r3
100448fa:	46bd      	mov	sp, r7
100448fc:	b005      	add	sp, #20
100448fe:	bd90      	pop	{r4, r7, pc}
10044900:	200008f0 	.word	0x200008f0

10044904 <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
10044904:	b590      	push	{r4, r7, lr}
10044906:	b087      	sub	sp, #28
10044908:	af02      	add	r7, sp, #8
1004490a:	60f8      	str	r0, [r7, #12]
1004490c:	0008      	movs	r0, r1
1004490e:	607a      	str	r2, [r7, #4]
10044910:	0019      	movs	r1, r3
10044912:	230a      	movs	r3, #10
10044914:	18fb      	adds	r3, r7, r3
10044916:	1c02      	adds	r2, r0, #0
10044918:	801a      	strh	r2, [r3, #0]
1004491a:	2308      	movs	r3, #8
1004491c:	18fb      	adds	r3, r7, r3
1004491e:	1c0a      	adds	r2, r1, #0
10044920:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
10044922:	68fb      	ldr	r3, [r7, #12]
10044924:	781b      	ldrb	r3, [r3, #0]
10044926:	0019      	movs	r1, r3
10044928:	4a0f      	ldr	r2, [pc, #60]	@ (10044968 <NVMDB_ReadCurrentRecord+0x64>)
1004492a:	000b      	movs	r3, r1
1004492c:	009b      	lsls	r3, r3, #2
1004492e:	185b      	adds	r3, r3, r1
10044930:	009b      	lsls	r3, r3, #2
10044932:	18d3      	adds	r3, r2, r3
10044934:	330e      	adds	r3, #14
10044936:	781b      	ldrb	r3, [r3, #0]
10044938:	2b00      	cmp	r3, #0
1004493a:	d001      	beq.n	10044940 <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
1004493c:	230a      	movs	r3, #10
1004493e:	e00f      	b.n	10044960 <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
10044940:	2308      	movs	r3, #8
10044942:	18fb      	adds	r3, r7, r3
10044944:	881c      	ldrh	r4, [r3, #0]
10044946:	687a      	ldr	r2, [r7, #4]
10044948:	230a      	movs	r3, #10
1004494a:	18fb      	adds	r3, r7, r3
1004494c:	8819      	ldrh	r1, [r3, #0]
1004494e:	68f8      	ldr	r0, [r7, #12]
10044950:	2300      	movs	r3, #0
10044952:	9301      	str	r3, [sp, #4]
10044954:	6a3b      	ldr	r3, [r7, #32]
10044956:	9300      	str	r3, [sp, #0]
10044958:	0023      	movs	r3, r4
1004495a:	f7ff f915 	bl	10043b88 <ReadCurrentRecordNoLock>
1004495e:	0003      	movs	r3, r0
}
10044960:	0018      	movs	r0, r3
10044962:	46bd      	mov	sp, r7
10044964:	b005      	add	sp, #20
10044966:	bd90      	pop	{r4, r7, pc}
10044968:	200008f0 	.word	0x200008f0

1004496c <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
1004496c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004496e:	46c6      	mov	lr, r8
10044970:	b500      	push	{lr}
10044972:	b088      	sub	sp, #32
10044974:	af02      	add	r7, sp, #8
10044976:	60f8      	str	r0, [r7, #12]
10044978:	0008      	movs	r0, r1
1004497a:	0011      	movs	r1, r2
1004497c:	607b      	str	r3, [r7, #4]
1004497e:	230b      	movs	r3, #11
10044980:	001c      	movs	r4, r3
10044982:	18fb      	adds	r3, r7, r3
10044984:	1c02      	adds	r2, r0, #0
10044986:	701a      	strb	r2, [r3, #0]
10044988:	2008      	movs	r0, #8
1004498a:	183b      	adds	r3, r7, r0
1004498c:	1c0a      	adds	r2, r1, #0
1004498e:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
10044990:	2617      	movs	r6, #23
10044992:	46b0      	mov	r8, r6
10044994:	44b8      	add	r8, r7
10044996:	687d      	ldr	r5, [r7, #4]
10044998:	183b      	adds	r3, r7, r0
1004499a:	881a      	ldrh	r2, [r3, #0]
1004499c:	0023      	movs	r3, r4
1004499e:	18fb      	adds	r3, r7, r3
100449a0:	7819      	ldrb	r1, [r3, #0]
100449a2:	68f8      	ldr	r0, [r7, #12]
100449a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100449a6:	9301      	str	r3, [sp, #4]
100449a8:	2328      	movs	r3, #40	@ 0x28
100449aa:	2408      	movs	r4, #8
100449ac:	191b      	adds	r3, r3, r4
100449ae:	19db      	adds	r3, r3, r7
100449b0:	881b      	ldrh	r3, [r3, #0]
100449b2:	9300      	str	r3, [sp, #0]
100449b4:	002b      	movs	r3, r5
100449b6:	f7ff fd19 	bl	100443ec <NVMDB_AppendRecordNoCache>
100449ba:	0003      	movs	r3, r0
100449bc:	4642      	mov	r2, r8
100449be:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
100449c0:	19bb      	adds	r3, r7, r6
100449c2:	781b      	ldrb	r3, [r3, #0]
100449c4:	2b00      	cmp	r3, #0
100449c6:	d002      	beq.n	100449ce <NVMDB_AppendRecord+0x62>
  {
    return status;
100449c8:	19bb      	adds	r3, r7, r6
100449ca:	781b      	ldrb	r3, [r3, #0]
100449cc:	e02c      	b.n	10044a28 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
100449ce:	68fb      	ldr	r3, [r7, #12]
100449d0:	781b      	ldrb	r3, [r3, #0]
100449d2:	0019      	movs	r1, r3
100449d4:	4a17      	ldr	r2, [pc, #92]	@ (10044a34 <NVMDB_AppendRecord+0xc8>)
100449d6:	000b      	movs	r3, r1
100449d8:	009b      	lsls	r3, r3, #2
100449da:	185b      	adds	r3, r3, r1
100449dc:	009b      	lsls	r3, r3, #2
100449de:	18d3      	adds	r3, r2, r3
100449e0:	330c      	adds	r3, #12
100449e2:	881a      	ldrh	r2, [r3, #0]
100449e4:	2308      	movs	r3, #8
100449e6:	0018      	movs	r0, r3
100449e8:	18f9      	adds	r1, r7, r3
100449ea:	2328      	movs	r3, #40	@ 0x28
100449ec:	181b      	adds	r3, r3, r0
100449ee:	19db      	adds	r3, r3, r7
100449f0:	8809      	ldrh	r1, [r1, #0]
100449f2:	881b      	ldrh	r3, [r3, #0]
100449f4:	18cb      	adds	r3, r1, r3
100449f6:	b29b      	uxth	r3, r3
100449f8:	3b01      	subs	r3, #1
100449fa:	b29b      	uxth	r3, r3
100449fc:	b21b      	sxth	r3, r3
100449fe:	2103      	movs	r1, #3
10044a00:	430b      	orrs	r3, r1
10044a02:	b21b      	sxth	r3, r3
10044a04:	b29b      	uxth	r3, r3
10044a06:	1ad3      	subs	r3, r2, r3
10044a08:	b29b      	uxth	r3, r3
10044a0a:	68fa      	ldr	r2, [r7, #12]
10044a0c:	7812      	ldrb	r2, [r2, #0]
10044a0e:	0011      	movs	r1, r2
10044a10:	3b05      	subs	r3, #5
10044a12:	b298      	uxth	r0, r3
10044a14:	4a07      	ldr	r2, [pc, #28]	@ (10044a34 <NVMDB_AppendRecord+0xc8>)
10044a16:	000b      	movs	r3, r1
10044a18:	009b      	lsls	r3, r3, #2
10044a1a:	185b      	adds	r3, r3, r1
10044a1c:	009b      	lsls	r3, r3, #2
10044a1e:	18d3      	adds	r3, r2, r3
10044a20:	330c      	adds	r3, #12
10044a22:	1c02      	adds	r2, r0, #0
10044a24:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10044a26:	2300      	movs	r3, #0
}
10044a28:	0018      	movs	r0, r3
10044a2a:	46bd      	mov	sp, r7
10044a2c:	b006      	add	sp, #24
10044a2e:	bc80      	pop	{r7}
10044a30:	46b8      	mov	r8, r7
10044a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044a34:	200008f0 	.word	0x200008f0

10044a38 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
10044a38:	b5b0      	push	{r4, r5, r7, lr}
10044a3a:	b084      	sub	sp, #16
10044a3c:	af00      	add	r7, sp, #0
10044a3e:	0002      	movs	r2, r0
10044a40:	1dfb      	adds	r3, r7, #7
10044a42:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
10044a44:	250f      	movs	r5, #15
10044a46:	197c      	adds	r4, r7, r5
10044a48:	2308      	movs	r3, #8
10044a4a:	18fa      	adds	r2, r7, r3
10044a4c:	1dfb      	adds	r3, r7, #7
10044a4e:	781b      	ldrb	r3, [r3, #0]
10044a50:	0011      	movs	r1, r2
10044a52:	0018      	movs	r0, r3
10044a54:	f7ff fc5c 	bl	10044310 <GetDBType>
10044a58:	0003      	movs	r3, r0
10044a5a:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
10044a5c:	197b      	adds	r3, r7, r5
10044a5e:	781b      	ldrb	r3, [r3, #0]
10044a60:	2b02      	cmp	r3, #2
10044a62:	d106      	bne.n	10044a72 <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
10044a64:	1dfb      	adds	r3, r7, #7
10044a66:	781b      	ldrb	r3, [r3, #0]
10044a68:	0018      	movs	r0, r3
10044a6a:	f7ff fa69 	bl	10043f40 <CleanLargeDB>
10044a6e:	0003      	movs	r3, r0
10044a70:	e00b      	b.n	10044a8a <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
10044a72:	230f      	movs	r3, #15
10044a74:	18fb      	adds	r3, r7, r3
10044a76:	781b      	ldrb	r3, [r3, #0]
10044a78:	2b01      	cmp	r3, #1
10044a7a:	d105      	bne.n	10044a88 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
10044a7c:	68bb      	ldr	r3, [r7, #8]
10044a7e:	0018      	movs	r0, r3
10044a80:	f7ff fb3c 	bl	100440fc <CleanPage>
10044a84:	0003      	movs	r3, r0
10044a86:	e000      	b.n	10044a8a <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
10044a88:	2301      	movs	r3, #1
}
10044a8a:	0018      	movs	r0, r3
10044a8c:	46bd      	mov	sp, r7
10044a8e:	b004      	add	sp, #16
10044a90:	bdb0      	pop	{r4, r5, r7, pc}
	...

10044a94 <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
10044a94:	b590      	push	{r4, r7, lr}
10044a96:	b083      	sub	sp, #12
10044a98:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
10044a9a:	1dfc      	adds	r4, r7, #7
10044a9c:	f000 f816 	bl	10044acc <NVMDB_CleanCheck>
10044aa0:	0003      	movs	r3, r0
10044aa2:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
10044aa4:	1dfb      	adds	r3, r7, #7
10044aa6:	781b      	ldrb	r3, [r3, #0]
10044aa8:	2b7f      	cmp	r3, #127	@ 0x7f
10044aaa:	d808      	bhi.n	10044abe <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
10044aac:	1dfb      	adds	r3, r7, #7
10044aae:	781b      	ldrb	r3, [r3, #0]
10044ab0:	0018      	movs	r0, r3
10044ab2:	f7ff ffc1 	bl	10044a38 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
10044ab6:	4b04      	ldr	r3, [pc, #16]	@ (10044ac8 <NVMDB_Tick+0x34>)
10044ab8:	0018      	movs	r0, r3
10044aba:	f00a f8c7 	bl	1004ec4c <puts>
  }
#endif

  return NVMDB_STATUS_OK;
10044abe:	2300      	movs	r3, #0
}
10044ac0:	0018      	movs	r0, r3
10044ac2:	46bd      	mov	sp, r7
10044ac4:	b003      	add	sp, #12
10044ac6:	bd90      	pop	{r4, r7, pc}
10044ac8:	1004fda8 	.word	0x1004fda8

10044acc <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
10044acc:	b580      	push	{r7, lr}
10044ace:	b082      	sub	sp, #8
10044ad0:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
10044ad2:	4b2b      	ldr	r3, [pc, #172]	@ (10044b80 <NVMDB_CleanCheck+0xb4>)
10044ad4:	2200      	movs	r2, #0
10044ad6:	569a      	ldrsb	r2, [r3, r2]
10044ad8:	1dfb      	adds	r3, r7, #7
10044ada:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
10044adc:	1dfb      	adds	r3, r7, #7
10044ade:	781a      	ldrb	r2, [r3, #0]
10044ae0:	4928      	ldr	r1, [pc, #160]	@ (10044b84 <NVMDB_CleanCheck+0xb8>)
10044ae2:	0013      	movs	r3, r2
10044ae4:	009b      	lsls	r3, r3, #2
10044ae6:	189b      	adds	r3, r3, r2
10044ae8:	009b      	lsls	r3, r3, #2
10044aea:	18cb      	adds	r3, r1, r3
10044aec:	330a      	adds	r3, #10
10044aee:	881b      	ldrh	r3, [r3, #0]
10044af0:	2b00      	cmp	r3, #0
10044af2:	d028      	beq.n	10044b46 <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
10044af4:	1dfb      	adds	r3, r7, #7
10044af6:	781a      	ldrb	r2, [r3, #0]
10044af8:	4922      	ldr	r1, [pc, #136]	@ (10044b84 <NVMDB_CleanCheck+0xb8>)
10044afa:	0013      	movs	r3, r2
10044afc:	009b      	lsls	r3, r3, #2
10044afe:	189b      	adds	r3, r3, r2
10044b00:	009b      	lsls	r3, r3, #2
10044b02:	18cb      	adds	r3, r1, r3
10044b04:	330c      	adds	r3, #12
10044b06:	8819      	ldrh	r1, [r3, #0]
10044b08:	1dfb      	adds	r3, r7, #7
10044b0a:	781a      	ldrb	r2, [r3, #0]
10044b0c:	481d      	ldr	r0, [pc, #116]	@ (10044b84 <NVMDB_CleanCheck+0xb8>)
10044b0e:	0013      	movs	r3, r2
10044b10:	009b      	lsls	r3, r3, #2
10044b12:	189b      	adds	r3, r3, r2
10044b14:	009b      	lsls	r3, r3, #2
10044b16:	18c3      	adds	r3, r0, r3
10044b18:	3310      	adds	r3, #16
10044b1a:	881b      	ldrh	r3, [r3, #0]
10044b1c:	4299      	cmp	r1, r3
10044b1e:	d212      	bcs.n	10044b46 <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
10044b20:	1dfb      	adds	r3, r7, #7
10044b22:	781b      	ldrb	r3, [r3, #0]
10044b24:	3301      	adds	r3, #1
10044b26:	b2db      	uxtb	r3, r3
10044b28:	b25a      	sxtb	r2, r3
10044b2a:	4b15      	ldr	r3, [pc, #84]	@ (10044b80 <NVMDB_CleanCheck+0xb4>)
10044b2c:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
10044b2e:	4b14      	ldr	r3, [pc, #80]	@ (10044b80 <NVMDB_CleanCheck+0xb4>)
10044b30:	781b      	ldrb	r3, [r3, #0]
10044b32:	b25b      	sxtb	r3, r3
10044b34:	2b02      	cmp	r3, #2
10044b36:	d102      	bne.n	10044b3e <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
10044b38:	4b11      	ldr	r3, [pc, #68]	@ (10044b80 <NVMDB_CleanCheck+0xb4>)
10044b3a:	2200      	movs	r2, #0
10044b3c:	701a      	strb	r2, [r3, #0]
        }
        return i;
10044b3e:	1dfb      	adds	r3, r7, #7
10044b40:	781b      	ldrb	r3, [r3, #0]
10044b42:	b25b      	sxtb	r3, r3
10044b44:	e017      	b.n	10044b76 <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
10044b46:	1dfb      	adds	r3, r7, #7
10044b48:	781a      	ldrb	r2, [r3, #0]
10044b4a:	1dfb      	adds	r3, r7, #7
10044b4c:	3201      	adds	r2, #1
10044b4e:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
10044b50:	1dfb      	adds	r3, r7, #7
10044b52:	781b      	ldrb	r3, [r3, #0]
10044b54:	2b02      	cmp	r3, #2
10044b56:	d102      	bne.n	10044b5e <NVMDB_CleanCheck+0x92>
    {
      i = 0;
10044b58:	1dfb      	adds	r3, r7, #7
10044b5a:	2200      	movs	r2, #0
10044b5c:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
10044b5e:	1dfb      	adds	r3, r7, #7
10044b60:	781b      	ldrb	r3, [r3, #0]
10044b62:	4a07      	ldr	r2, [pc, #28]	@ (10044b80 <NVMDB_CleanCheck+0xb4>)
10044b64:	7812      	ldrb	r2, [r2, #0]
10044b66:	b252      	sxtb	r2, r2
10044b68:	4293      	cmp	r3, r2
10044b6a:	d1b7      	bne.n	10044adc <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
10044b6c:	4b04      	ldr	r3, [pc, #16]	@ (10044b80 <NVMDB_CleanCheck+0xb4>)
10044b6e:	2200      	movs	r2, #0
10044b70:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
10044b72:	2301      	movs	r3, #1
10044b74:	425b      	negs	r3, r3
}
10044b76:	0018      	movs	r0, r3
10044b78:	46bd      	mov	sp, r7
10044b7a:	b002      	add	sp, #8
10044b7c:	bd80      	pop	{r7, pc}
10044b7e:	46c0      	nop			@ (mov r8, r8)
10044b80:	20000918 	.word	0x20000918
10044b84:	200008f0 	.word	0x200008f0

10044b88 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
10044b88:	b580      	push	{r7, lr}
10044b8a:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
10044b8c:	4b03      	ldr	r3, [pc, #12]	@ (10044b9c <PKAMGR_Init+0x14>)
10044b8e:	2201      	movs	r2, #1
10044b90:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
10044b92:	2300      	movs	r3, #0
}
10044b94:	0018      	movs	r0, r3
10044b96:	46bd      	mov	sp, r7
10044b98:	bd80      	pop	{r7, pc}
10044b9a:	46c0      	nop			@ (mov r8, r8)
10044b9c:	20000cf4 	.word	0x20000cf4

10044ba0 <PKAMGR_SleepCheck>:

  return PKAMGR_SUCCESS;
}

PKAMGR_ResultStatus PKAMGR_SleepCheck(void)
{
10044ba0:	b580      	push	{r7, lr}
10044ba2:	b082      	sub	sp, #8
10044ba4:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_ERR_BUSY;
10044ba6:	1dfb      	adds	r3, r7, #7
10044ba8:	22fe      	movs	r2, #254	@ 0xfe
10044baa:	701a      	strb	r2, [r3, #0]

  if(internalState == PKAMGR_STATE_IDLE)
10044bac:	4b06      	ldr	r3, [pc, #24]	@ (10044bc8 <PKAMGR_SleepCheck+0x28>)
10044bae:	681b      	ldr	r3, [r3, #0]
10044bb0:	2b01      	cmp	r3, #1
10044bb2:	d102      	bne.n	10044bba <PKAMGR_SleepCheck+0x1a>
    return_value = PKAMGR_SUCCESS;
10044bb4:	1dfb      	adds	r3, r7, #7
10044bb6:	2200      	movs	r2, #0
10044bb8:	701a      	strb	r2, [r3, #0]

  return return_value;
10044bba:	1dfb      	adds	r3, r7, #7
10044bbc:	781b      	ldrb	r3, [r3, #0]
10044bbe:	b25b      	sxtb	r3, r3
}
10044bc0:	0018      	movs	r0, r3
10044bc2:	46bd      	mov	sp, r7
10044bc4:	b002      	add	sp, #8
10044bc6:	bd80      	pop	{r7, pc}
10044bc8:	20000cf4 	.word	0x20000cf4

10044bcc <PKAMGR_Unlock>:

  return return_value;
}

PKAMGR_ResultStatus PKAMGR_Unlock()
{
10044bcc:	b580      	push	{r7, lr}
10044bce:	b084      	sub	sp, #16
10044bd0:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_SUCCESS;
10044bd2:	210f      	movs	r1, #15
10044bd4:	187b      	adds	r3, r7, r1
10044bd6:	2200      	movs	r2, #0
10044bd8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10044bda:	f3ef 8310 	mrs	r3, PRIMASK
10044bde:	607b      	str	r3, [r7, #4]
  return(result);
10044be0:	687b      	ldr	r3, [r7, #4]

  /* Only one consumer (Application layer or Stack) can use the PKA at the time */
  ATOMIC_SECTION_BEGIN();
10044be2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
10044be4:	b672      	cpsid	i
}
10044be6:	46c0      	nop			@ (mov r8, r8)
  if(internalState != PKAMGR_STATE_BUSY)
10044be8:	4b0c      	ldr	r3, [pc, #48]	@ (10044c1c <PKAMGR_Unlock+0x50>)
10044bea:	681b      	ldr	r3, [r3, #0]
10044bec:	2b03      	cmp	r3, #3
10044bee:	d003      	beq.n	10044bf8 <PKAMGR_Unlock+0x2c>
  {
    return_value = PKAMGR_ERR_BUSY;
10044bf0:	187b      	adds	r3, r7, r1
10044bf2:	22fe      	movs	r2, #254	@ 0xfe
10044bf4:	701a      	strb	r2, [r3, #0]
10044bf6:	e002      	b.n	10044bfe <PKAMGR_Unlock+0x32>
  }
  else
  {
    /* Unlock mechanism to access concurrently at the PKA resource */
    internalState = PKAMGR_STATE_IDLE;
10044bf8:	4b08      	ldr	r3, [pc, #32]	@ (10044c1c <PKAMGR_Unlock+0x50>)
10044bfa:	2201      	movs	r2, #1
10044bfc:	601a      	str	r2, [r3, #0]
10044bfe:	68bb      	ldr	r3, [r7, #8]
10044c00:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044c02:	683b      	ldr	r3, [r7, #0]
10044c04:	f383 8810 	msr	PRIMASK, r3
}
10044c08:	46c0      	nop			@ (mov r8, r8)
  }
  ATOMIC_SECTION_END();

  return return_value;
10044c0a:	230f      	movs	r3, #15
10044c0c:	18fb      	adds	r3, r7, r3
10044c0e:	781b      	ldrb	r3, [r3, #0]
10044c10:	b25b      	sxtb	r3, r3
}
10044c12:	0018      	movs	r0, r3
10044c14:	46bd      	mov	sp, r7
10044c16:	b004      	add	sp, #16
10044c18:	bd80      	pop	{r7, pc}
10044c1a:	46c0      	nop			@ (mov r8, r8)
10044c1c:	20000cf4 	.word	0x20000cf4

10044c20 <PKAMGR_IRQCallback>:
{
  return HW_PKA_StartP256DHkeyGeneration(privateKey, (uint32_t *)&PKAStartPoint[0], funcCB);
}

__weak void PKAMGR_IRQCallback(void)
{
10044c20:	b580      	push	{r7, lr}
10044c22:	af00      	add	r7, sp, #0
}
10044c24:	46c0      	nop			@ (mov r8, r8)
10044c26:	46bd      	mov	sp, r7
10044c28:	bd80      	pop	{r7, pc}

10044c2a <aci_gatt_srv_profile_init>:

#else /* (CFG_BLE_CONNECTION_ENABLED == 0) */

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
10044c2a:	b580      	push	{r7, lr}
10044c2c:	b082      	sub	sp, #8
10044c2e:	af00      	add	r7, sp, #0
10044c30:	0002      	movs	r2, r0
10044c32:	6039      	str	r1, [r7, #0]
10044c34:	1dfb      	adds	r3, r7, #7
10044c36:	701a      	strb	r2, [r3, #0]
  return BLE_ERROR_UNSUPPORTED_FEATURE;
10044c38:	2311      	movs	r3, #17
}
10044c3a:	0018      	movs	r0, r3
10044c3c:	46bd      	mov	sp, r7
10044c3e:	b002      	add	sp, #8
10044c40:	bd80      	pop	{r7, pc}
	...

10044c44 <LL_PWR_IsSMPSReady>:
{
10044c44:	b580      	push	{r7, lr}
10044c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
10044c48:	4b05      	ldr	r3, [pc, #20]	@ (10044c60 <LL_PWR_IsSMPSReady+0x1c>)
10044c4a:	695b      	ldr	r3, [r3, #20]
10044c4c:	2204      	movs	r2, #4
10044c4e:	4013      	ands	r3, r2
10044c50:	2b04      	cmp	r3, #4
10044c52:	d101      	bne.n	10044c58 <LL_PWR_IsSMPSReady+0x14>
10044c54:	2301      	movs	r3, #1
10044c56:	e000      	b.n	10044c5a <LL_PWR_IsSMPSReady+0x16>
10044c58:	2300      	movs	r3, #0
}
10044c5a:	0018      	movs	r0, r3
10044c5c:	46bd      	mov	sp, r7
10044c5e:	bd80      	pop	{r7, pc}
10044c60:	48500000 	.word	0x48500000

10044c64 <LL_PWR_GetSMPSMode>:
{
10044c64:	b580      	push	{r7, lr}
10044c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
10044c68:	4b03      	ldr	r3, [pc, #12]	@ (10044c78 <LL_PWR_GetSMPSMode+0x14>)
10044c6a:	69da      	ldr	r2, [r3, #28]
10044c6c:	2380      	movs	r3, #128	@ 0x80
10044c6e:	00db      	lsls	r3, r3, #3
10044c70:	4013      	ands	r3, r2
}
10044c72:	0018      	movs	r0, r3
10044c74:	46bd      	mov	sp, r7
10044c76:	bd80      	pop	{r7, pc}
10044c78:	48500000 	.word	0x48500000

10044c7c <LL_PWR_SetSMPSPrechargeMode>:
{
10044c7c:	b580      	push	{r7, lr}
10044c7e:	b082      	sub	sp, #8
10044c80:	af00      	add	r7, sp, #0
10044c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
10044c84:	4b06      	ldr	r3, [pc, #24]	@ (10044ca0 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10044c86:	69db      	ldr	r3, [r3, #28]
10044c88:	4a06      	ldr	r2, [pc, #24]	@ (10044ca4 <LL_PWR_SetSMPSPrechargeMode+0x28>)
10044c8a:	4013      	ands	r3, r2
10044c8c:	0019      	movs	r1, r3
10044c8e:	4b04      	ldr	r3, [pc, #16]	@ (10044ca0 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10044c90:	687a      	ldr	r2, [r7, #4]
10044c92:	430a      	orrs	r2, r1
10044c94:	61da      	str	r2, [r3, #28]
}
10044c96:	46c0      	nop			@ (mov r8, r8)
10044c98:	46bd      	mov	sp, r7
10044c9a:	b002      	add	sp, #8
10044c9c:	bd80      	pop	{r7, pc}
10044c9e:	46c0      	nop			@ (mov r8, r8)
10044ca0:	48500000 	.word	0x48500000
10044ca4:	fffffdff 	.word	0xfffffdff

10044ca8 <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
10044ca8:	b580      	push	{r7, lr}
10044caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
10044cac:	4b07      	ldr	r3, [pc, #28]	@ (10044ccc <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
10044cae:	69da      	ldr	r2, [r3, #28]
10044cb0:	2380      	movs	r3, #128	@ 0x80
10044cb2:	009b      	lsls	r3, r3, #2
10044cb4:	401a      	ands	r2, r3
10044cb6:	2380      	movs	r3, #128	@ 0x80
10044cb8:	009b      	lsls	r3, r3, #2
10044cba:	429a      	cmp	r2, r3
10044cbc:	d101      	bne.n	10044cc2 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
10044cbe:	2301      	movs	r3, #1
10044cc0:	e000      	b.n	10044cc4 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
10044cc2:	2300      	movs	r3, #0
}
10044cc4:	0018      	movs	r0, r3
10044cc6:	46bd      	mov	sp, r7
10044cc8:	bd80      	pop	{r7, pc}
10044cca:	46c0      	nop			@ (mov r8, r8)
10044ccc:	48500000 	.word	0x48500000

10044cd0 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
10044cd0:	b580      	push	{r7, lr}
10044cd2:	b082      	sub	sp, #8
10044cd4:	af00      	add	r7, sp, #0
10044cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
10044cd8:	4b06      	ldr	r3, [pc, #24]	@ (10044cf4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
10044cda:	69db      	ldr	r3, [r3, #28]
10044cdc:	220f      	movs	r2, #15
10044cde:	4393      	bics	r3, r2
10044ce0:	0019      	movs	r1, r3
10044ce2:	4b04      	ldr	r3, [pc, #16]	@ (10044cf4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
10044ce4:	687a      	ldr	r2, [r7, #4]
10044ce6:	430a      	orrs	r2, r1
10044ce8:	61da      	str	r2, [r3, #28]
}
10044cea:	46c0      	nop			@ (mov r8, r8)
10044cec:	46bd      	mov	sp, r7
10044cee:	b002      	add	sp, #8
10044cf0:	bd80      	pop	{r7, pc}
10044cf2:	46c0      	nop			@ (mov r8, r8)
10044cf4:	48500000 	.word	0x48500000

10044cf8 <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
10044cf8:	b580      	push	{r7, lr}
10044cfa:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
10044cfc:	2320      	movs	r3, #32
}
10044cfe:	0018      	movs	r0, r3
10044d00:	46bd      	mov	sp, r7
10044d02:	bd80      	pop	{r7, pc}

10044d04 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
10044d04:	b580      	push	{r7, lr}
10044d06:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
10044d08:	231f      	movs	r3, #31
}
10044d0a:	0018      	movs	r0, r3
10044d0c:	46bd      	mov	sp, r7
10044d0e:	bd80      	pop	{r7, pc}

10044d10 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
10044d10:	b580      	push	{r7, lr}
10044d12:	b082      	sub	sp, #8
10044d14:	af00      	add	r7, sp, #0
10044d16:	0002      	movs	r2, r0
10044d18:	1dfb      	adds	r3, r7, #7
10044d1a:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
10044d1c:	1dfb      	adds	r3, r7, #7
10044d1e:	781b      	ldrb	r3, [r3, #0]
10044d20:	2b00      	cmp	r3, #0
10044d22:	d007      	beq.n	10044d34 <RADIO_SetHighPower+0x24>
  {
    if(high_power == FALSE)
10044d24:	4b1d      	ldr	r3, [pc, #116]	@ (10044d9c <RADIO_SetHighPower+0x8c>)
10044d26:	781b      	ldrb	r3, [r3, #0]
10044d28:	2b00      	cmp	r3, #0
10044d2a:	d10a      	bne.n	10044d42 <RADIO_SetHighPower+0x32>
    {
      high_power = TRUE;
10044d2c:	4b1b      	ldr	r3, [pc, #108]	@ (10044d9c <RADIO_SetHighPower+0x8c>)
10044d2e:	2201      	movs	r2, #1
10044d30:	701a      	strb	r2, [r3, #0]
10044d32:	e006      	b.n	10044d42 <RADIO_SetHighPower+0x32>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
10044d34:	4b19      	ldr	r3, [pc, #100]	@ (10044d9c <RADIO_SetHighPower+0x8c>)
10044d36:	781b      	ldrb	r3, [r3, #0]
10044d38:	2b01      	cmp	r3, #1
10044d3a:	d102      	bne.n	10044d42 <RADIO_SetHighPower+0x32>
    {
      high_power = FALSE;
10044d3c:	4b17      	ldr	r3, [pc, #92]	@ (10044d9c <RADIO_SetHighPower+0x8c>)
10044d3e:	2200      	movs	r2, #0
10044d40:	701a      	strb	r2, [r3, #0]
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
10044d42:	f7ff ffb1 	bl	10044ca8 <LL_PWR_IsEnabledSMPSPrechargeMode>
10044d46:	1e03      	subs	r3, r0, #0
10044d48:	d124      	bne.n	10044d94 <RADIO_SetHighPower+0x84>
10044d4a:	f7ff ff8b 	bl	10044c64 <LL_PWR_GetSMPSMode>
10044d4e:	0002      	movs	r2, r0
10044d50:	2380      	movs	r3, #128	@ 0x80
10044d52:	00db      	lsls	r3, r3, #3
10044d54:	429a      	cmp	r2, r3
10044d56:	d01d      	beq.n	10044d94 <RADIO_SetHighPower+0x84>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
10044d58:	2380      	movs	r3, #128	@ 0x80
10044d5a:	009b      	lsls	r3, r3, #2
10044d5c:	0018      	movs	r0, r3
10044d5e:	f7ff ff8d 	bl	10044c7c <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
10044d62:	46c0      	nop			@ (mov r8, r8)
10044d64:	f7ff ff6e 	bl	10044c44 <LL_PWR_IsSMPSReady>
10044d68:	1e03      	subs	r3, r0, #0
10044d6a:	d1fb      	bne.n	10044d64 <RADIO_SetHighPower+0x54>
  /* Change level */
  if(state != DISABLE)
10044d6c:	1dfb      	adds	r3, r7, #7
10044d6e:	781b      	ldrb	r3, [r3, #0]
10044d70:	2b00      	cmp	r3, #0
10044d72:	d003      	beq.n	10044d7c <RADIO_SetHighPower+0x6c>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
10044d74:	200e      	movs	r0, #14
10044d76:	f7ff ffab 	bl	10044cd0 <LL_PWR_SMPS_SetOutputVoltageLevel>
10044d7a:	e002      	b.n	10044d82 <RADIO_SetHighPower+0x72>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
10044d7c:	2004      	movs	r0, #4
10044d7e:	f7ff ffa7 	bl	10044cd0 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
10044d82:	2000      	movs	r0, #0
10044d84:	f7ff ff7a 	bl	10044c7c <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
10044d88:	46c0      	nop			@ (mov r8, r8)
10044d8a:	f7ff ff5b 	bl	10044c44 <LL_PWR_IsSMPSReady>
10044d8e:	1e03      	subs	r3, r0, #0
10044d90:	d0fb      	beq.n	10044d8a <RADIO_SetHighPower+0x7a>
10044d92:	e000      	b.n	10044d96 <RADIO_SetHighPower+0x86>
    return;
10044d94:	46c0      	nop			@ (mov r8, r8)
}
10044d96:	46bd      	mov	sp, r7
10044d98:	b002      	add	sp, #8
10044d9a:	bd80      	pop	{r7, pc}
10044d9c:	20000920 	.word	0x20000920

10044da0 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
10044da0:	b580      	push	{r7, lr}
10044da2:	af00      	add	r7, sp, #0
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
  }
#endif
}
10044da4:	46c0      	nop			@ (mov r8, r8)
10044da6:	46bd      	mov	sp, r7
10044da8:	bd80      	pop	{r7, pc}

10044daa <SYSTEM_DEBUG_SIGNAL_SET>:
/***********************/
/** System debug APIs **/
/***********************/

void SYSTEM_DEBUG_SIGNAL_SET(system_debug_signal_t signal)
{
10044daa:	b580      	push	{r7, lr}
10044dac:	b082      	sub	sp, #8
10044dae:	af00      	add	r7, sp, #0
10044db0:	0002      	movs	r2, r0
10044db2:	1dfb      	adds	r3, r7, #7
10044db4:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, system_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10044db6:	46c0      	nop			@ (mov r8, r8)
10044db8:	46bd      	mov	sp, r7
10044dba:	b002      	add	sp, #8
10044dbc:	bd80      	pop	{r7, pc}

10044dbe <SYSTEM_DEBUG_SIGNAL_RESET>:

void SYSTEM_DEBUG_SIGNAL_RESET(system_debug_signal_t signal)
{
10044dbe:	b580      	push	{r7, lr}
10044dc0:	b082      	sub	sp, #8
10044dc2:	af00      	add	r7, sp, #0
10044dc4:	0002      	movs	r2, r0
10044dc6:	1dfb      	adds	r3, r7, #7
10044dc8:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, system_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10044dca:	46c0      	nop			@ (mov r8, r8)
10044dcc:	46bd      	mov	sp, r7
10044dce:	b002      	add	sp, #8
10044dd0:	bd80      	pop	{r7, pc}

10044dd2 <LL_SYSCFG_GetDeviceRevision>:
  * @brief  Get the device cut revision (metal fix) information.
  * @rmtoll DIE_ID REVISION   LL_SYSCFG_GetDeviceRevision
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceRevision(void)
{
10044dd2:	b580      	push	{r7, lr}
10044dd4:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
10044dd6:	2380      	movs	r3, #128	@ 0x80
10044dd8:	05db      	lsls	r3, r3, #23
10044dda:	681b      	ldr	r3, [r3, #0]
10044ddc:	220f      	movs	r2, #15
10044dde:	4013      	ands	r3, r2
}
10044de0:	0018      	movs	r0, r3
10044de2:	46bd      	mov	sp, r7
10044de4:	bd80      	pop	{r7, pc}

10044de6 <LL_SYSCFG_GetDeviceVersion>:
  * @brief  Get the device cut version information.
  * @rmtoll DIE_ID VERSION   LL_SYSCFG_GetDeviceVersion
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceVersion(void)
{
10044de6:	b580      	push	{r7, lr}
10044de8:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
10044dea:	2380      	movs	r3, #128	@ 0x80
10044dec:	05db      	lsls	r3, r3, #23
10044dee:	681b      	ldr	r3, [r3, #0]
10044df0:	091b      	lsrs	r3, r3, #4
10044df2:	220f      	movs	r2, #15
10044df4:	4013      	ands	r3, r2
}
10044df6:	0018      	movs	r0, r3
10044df8:	46bd      	mov	sp, r7
10044dfa:	bd80      	pop	{r7, pc}

10044dfc <LL_SYSCFG_GetDeviceJTAG_ID>:
  * @brief  Get the JTAG_ID device information.
  * @rmtoll JTAG_ID    LL_SYSCFG_GetDeviceJTAG_ID
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceJTAG_ID(void)
{
10044dfc:	b580      	push	{r7, lr}
10044dfe:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
10044e00:	2380      	movs	r3, #128	@ 0x80
10044e02:	05db      	lsls	r3, r3, #23
10044e04:	685b      	ldr	r3, [r3, #4]
}
10044e06:	0018      	movs	r0, r3
10044e08:	46bd      	mov	sp, r7
10044e0a:	bd80      	pop	{r7, pc}

10044e0c <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
10044e0c:	b580      	push	{r7, lr}
10044e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
10044e10:	4b03      	ldr	r3, [pc, #12]	@ (10044e20 <LL_GetFlashSize+0x14>)
10044e12:	681b      	ldr	r3, [r3, #0]
10044e14:	041b      	lsls	r3, r3, #16
10044e16:	0c1b      	lsrs	r3, r3, #16
}
10044e18:	0018      	movs	r0, r3
10044e1a:	46bd      	mov	sp, r7
10044e1c:	bd80      	pop	{r7, pc}
10044e1e:	46c0      	nop			@ (mov r8, r8)
10044e20:	40001014 	.word	0x40001014

10044e24 <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
10044e24:	b580      	push	{r7, lr}
10044e26:	b082      	sub	sp, #8
10044e28:	af00      	add	r7, sp, #0
    __IOM uint32_t tmpreg;
#if defined(FLASH_FLASH_SIZE_RAM_SIZE)
    tmpreg = (READ_REG(*((uint32_t *)RAMSIZE_BASE_ADDRESS)) & FLASH_FLASH_SIZE_RAM_SIZE) >> FLASH_FLASH_SIZE_RAM_SIZE_Pos;
10044e2a:	4b08      	ldr	r3, [pc, #32]	@ (10044e4c <LL_GetRAMSize+0x28>)
10044e2c:	681b      	ldr	r3, [r3, #0]
10044e2e:	0c5b      	lsrs	r3, r3, #17
10044e30:	2203      	movs	r2, #3
10044e32:	4013      	ands	r3, r2
10044e34:	607b      	str	r3, [r7, #4]

    if (tmpreg == 0) {
10044e36:	687b      	ldr	r3, [r7, #4]
10044e38:	2b00      	cmp	r3, #0
10044e3a:	d101      	bne.n	10044e40 <LL_GetRAMSize+0x1c>
      tmpreg = LL_UTILS_RAMSIZE_32K;
10044e3c:	2301      	movs	r3, #1
10044e3e:	607b      	str	r3, [r7, #4]
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
#endif
    
    return tmpreg;
10044e40:	687b      	ldr	r3, [r7, #4]
  }
10044e42:	0018      	movs	r0, r3
10044e44:	46bd      	mov	sp, r7
10044e46:	b002      	add	sp, #8
10044e48:	bd80      	pop	{r7, pc}
10044e4a:	46c0      	nop			@ (mov r8, r8)
10044e4c:	40001014 	.word	0x40001014

10044e50 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
10044e50:	b580      	push	{r7, lr}
10044e52:	b084      	sub	sp, #16
10044e54:	af00      	add	r7, sp, #0
10044e56:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
10044e58:	687b      	ldr	r3, [r7, #4]
10044e5a:	22ff      	movs	r2, #255	@ 0xff
10044e5c:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
10044e5e:	f7ff ffcd 	bl	10044dfc <LL_SYSCFG_GetDeviceJTAG_ID>
10044e62:	0003      	movs	r3, r0
10044e64:	60fb      	str	r3, [r7, #12]

#if defined(STM32WB09)
  if(jtag_id == JTAG_ID_CODE_STM32WB09XX)
10044e66:	68fb      	ldr	r3, [r7, #12]
10044e68:	4a18      	ldr	r2, [pc, #96]	@ (10044ecc <GetPartInfo+0x7c>)
10044e6a:	4293      	cmp	r3, r2
10044e6c:	d102      	bne.n	10044e74 <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB09XX;
10044e6e:	687b      	ldr	r3, [r7, #4]
10044e70:	2206      	movs	r2, #6
10044e72:	701a      	strb	r2, [r3, #0]
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
10044e74:	f7ff ffb7 	bl	10044de6 <LL_SYSCFG_GetDeviceVersion>
10044e78:	0003      	movs	r3, r0
10044e7a:	b2da      	uxtb	r2, r3
10044e7c:	687b      	ldr	r3, [r7, #4]
10044e7e:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
10044e80:	f7ff ffa7 	bl	10044dd2 <LL_SYSCFG_GetDeviceRevision>
10044e84:	0003      	movs	r3, r0
10044e86:	b2da      	uxtb	r2, r3
10044e88:	687b      	ldr	r3, [r7, #4]
10044e8a:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
10044e8c:	f7ff ffb6 	bl	10044dfc <LL_SYSCFG_GetDeviceJTAG_ID>
10044e90:	0002      	movs	r2, r0
10044e92:	687b      	ldr	r3, [r7, #4]
10044e94:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
10044e96:	f7ff ffb9 	bl	10044e0c <LL_GetFlashSize>
10044e9a:	0003      	movs	r3, r0
10044e9c:	3301      	adds	r3, #1
10044e9e:	009a      	lsls	r2, r3, #2
10044ea0:	687b      	ldr	r3, [r7, #4]
10044ea2:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
10044ea4:	f7ff ffbe 	bl	10044e24 <LL_GetRAMSize>
10044ea8:	1e03      	subs	r3, r0, #0
10044eaa:	d007      	beq.n	10044ebc <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
10044eac:	f7ff ffba 	bl	10044e24 <LL_GetRAMSize>
10044eb0:	0003      	movs	r3, r0
10044eb2:	3301      	adds	r3, #1
10044eb4:	039a      	lsls	r2, r3, #14
10044eb6:	687b      	ldr	r3, [r7, #4]
10044eb8:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
10044eba:	e003      	b.n	10044ec4 <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
10044ebc:	687b      	ldr	r3, [r7, #4]
10044ebe:	22c0      	movs	r2, #192	@ 0xc0
10044ec0:	01d2      	lsls	r2, r2, #7
10044ec2:	60da      	str	r2, [r3, #12]
}
10044ec4:	46c0      	nop			@ (mov r8, r8)
10044ec6:	46bd      	mov	sp, r7
10044ec8:	b004      	add	sp, #16
10044eca:	bd80      	pop	{r7, pc}
10044ecc:	02032041 	.word	0x02032041

10044ed0 <Osal_MemCpy4>:
 * A version of the memcpy that only uses 32-bit accesses.
 * dest and src must be 32-bit aligned and size must be a multiple of 4.
 */
void Osal_MemCpy4(uint32_t *dest, const uint32_t *src, unsigned int size)
{
    for (unsigned int i = 0; i < size/4; i++)
10044ed0:	2300      	movs	r3, #0
{
10044ed2:	b510      	push	{r4, lr}
    for (unsigned int i = 0; i < size/4; i++)
10044ed4:	0892      	lsrs	r2, r2, #2
10044ed6:	0092      	lsls	r2, r2, #2
10044ed8:	4293      	cmp	r3, r2
10044eda:	d100      	bne.n	10044ede <Osal_MemCpy4+0xe>
        dest[i] = src[i];
}
10044edc:	bd10      	pop	{r4, pc}
        dest[i] = src[i];
10044ede:	58cc      	ldr	r4, [r1, r3]
10044ee0:	50c4      	str	r4, [r0, r3]
    for (unsigned int i = 0; i < size/4; i++)
10044ee2:	3304      	adds	r3, #4
10044ee4:	e7f8      	b.n	10044ed8 <Osal_MemCpy4+0x8>
	...

10044ee8 <LL_RCC_GetLPUARTClockSource>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10044ee8:	4b02      	ldr	r3, [pc, #8]	@ (10044ef4 <LL_RCC_GetLPUARTClockSource+0xc>)
10044eea:	6898      	ldr	r0, [r3, #8]
10044eec:	2380      	movs	r3, #128	@ 0x80
10044eee:	019b      	lsls	r3, r3, #6
10044ef0:	4018      	ands	r0, r3
}
10044ef2:	4770      	bx	lr
10044ef4:	48400000 	.word	0x48400000

10044ef8 <LL_AHB1_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->AHBENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10044ef8:	4b03      	ldr	r3, [pc, #12]	@ (10044f08 <LL_AHB1_GRP1_IsEnabledClock+0x10>)
10044efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10044efc:	4003      	ands	r3, r0
10044efe:	1a18      	subs	r0, r3, r0
10044f00:	4243      	negs	r3, r0
10044f02:	4158      	adcs	r0, r3
}
10044f04:	4770      	bx	lr
10044f06:	46c0      	nop			@ (mov r8, r8)
10044f08:	48400000 	.word	0x48400000

10044f0c <LL_APB0_GRP1_EnableClock>:
  SET_BIT(RCC->APB0ENR, Periphs);
10044f0c:	4b05      	ldr	r3, [pc, #20]	@ (10044f24 <LL_APB0_GRP1_EnableClock+0x18>)
{
10044f0e:	b082      	sub	sp, #8
  SET_BIT(RCC->APB0ENR, Periphs);
10044f10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
10044f12:	4302      	orrs	r2, r0
10044f14:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10044f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10044f18:	4018      	ands	r0, r3
10044f1a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
10044f1c:	9b01      	ldr	r3, [sp, #4]
}
10044f1e:	b002      	add	sp, #8
10044f20:	4770      	bx	lr
10044f22:	46c0      	nop			@ (mov r8, r8)
10044f24:	48400000 	.word	0x48400000

10044f28 <LL_APB0_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB0ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10044f28:	4b03      	ldr	r3, [pc, #12]	@ (10044f38 <LL_APB0_GRP1_IsEnabledClock+0x10>)
10044f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10044f2c:	4003      	ands	r3, r0
10044f2e:	1a18      	subs	r0, r3, r0
10044f30:	4243      	negs	r3, r0
10044f32:	4158      	adcs	r0, r3
}
10044f34:	4770      	bx	lr
10044f36:	46c0      	nop			@ (mov r8, r8)
10044f38:	48400000 	.word	0x48400000

10044f3c <LL_APB0_GRP1_DisableClock>:
  CLEAR_BIT(RCC->APB0ENR, Periphs);
10044f3c:	4a02      	ldr	r2, [pc, #8]	@ (10044f48 <LL_APB0_GRP1_DisableClock+0xc>)
10044f3e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
10044f40:	4383      	bics	r3, r0
10044f42:	6553      	str	r3, [r2, #84]	@ 0x54
}
10044f44:	4770      	bx	lr
10044f46:	46c0      	nop			@ (mov r8, r8)
10044f48:	48400000 	.word	0x48400000

10044f4c <LL_APB1_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB1ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10044f4c:	4b03      	ldr	r3, [pc, #12]	@ (10044f5c <LL_APB1_GRP1_IsEnabledClock+0x10>)
10044f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10044f50:	4003      	ands	r3, r0
10044f52:	1a18      	subs	r0, r3, r0
10044f54:	4243      	negs	r3, r0
10044f56:	4158      	adcs	r0, r3
}
10044f58:	4770      	bx	lr
10044f5a:	46c0      	nop			@ (mov r8, r8)
10044f5c:	48400000 	.word	0x48400000

10044f60 <LL_APB2_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10044f60:	4b03      	ldr	r3, [pc, #12]	@ (10044f70 <LL_APB2_GRP1_IsEnabledClock+0x10>)
10044f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10044f64:	4003      	ands	r3, r0
10044f66:	1a18      	subs	r0, r3, r0
10044f68:	4243      	negs	r3, r0
10044f6a:	4158      	adcs	r0, r3
}
10044f6c:	4770      	bx	lr
10044f6e:	46c0      	nop			@ (mov r8, r8)
10044f70:	48400000 	.word	0x48400000

10044f74 <APB0periphContextSave>:
  * @brief  Save the APB0 peripheral registers content.
  * @param  apb0 Pointer to a APB0 structure
  * @retval None
  */
static void APB0periphContextSave(apb0PeriphT *apb0)
{
10044f74:	b510      	push	{r4, lr}
10044f76:	0004      	movs	r4, r0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_SYSCFG))
10044f78:	2080      	movs	r0, #128	@ 0x80
10044f7a:	0040      	lsls	r0, r0, #1
10044f7c:	f7ff ffd4 	bl	10044f28 <LL_APB0_GRP1_IsEnabledClock>
10044f80:	2800      	cmp	r0, #0
10044f82:	d005      	beq.n	10044f90 <APB0periphContextSave+0x1c>
  {
    Osal_MemCpy4((uint32_t *)&apb0->SYSCFG_vr, (uint32_t *)SYSCFG, sizeof(SYSCFG_TypeDef));
10044f84:	2180      	movs	r1, #128	@ 0x80
10044f86:	2240      	movs	r2, #64	@ 0x40
10044f88:	0020      	movs	r0, r4
10044f8a:	05c9      	lsls	r1, r1, #23
10044f8c:	f7ff ffa0 	bl	10044ed0 <Osal_MemCpy4>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM1_vr, (uint32_t *)TIM1, sizeof(TIM_TypeDef));
  }
#endif
#if defined(TIM2)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM2))
10044f90:	2001      	movs	r0, #1
10044f92:	f7ff ffc9 	bl	10044f28 <LL_APB0_GRP1_IsEnabledClock>
10044f96:	2800      	cmp	r0, #0
10044f98:	d005      	beq.n	10044fa6 <APB0periphContextSave+0x32>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM2_vr, (uint32_t *)TIM2, sizeof(TIM_TypeDef));
10044f9a:	0020      	movs	r0, r4
10044f9c:	2264      	movs	r2, #100	@ 0x64
10044f9e:	4919      	ldr	r1, [pc, #100]	@ (10045004 <APB0periphContextSave+0x90>)
10044fa0:	3044      	adds	r0, #68	@ 0x44
10044fa2:	f7ff ff95 	bl	10044ed0 <Osal_MemCpy4>
  }
#endif
#if defined(TIM16)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM16))
10044fa6:	2002      	movs	r0, #2
10044fa8:	f7ff ffbe 	bl	10044f28 <LL_APB0_GRP1_IsEnabledClock>
10044fac:	2800      	cmp	r0, #0
10044fae:	d005      	beq.n	10044fbc <APB0periphContextSave+0x48>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM16_vr, (uint32_t *)TIM16, sizeof(TIM_TypeDef));
10044fb0:	0020      	movs	r0, r4
10044fb2:	2264      	movs	r2, #100	@ 0x64
10044fb4:	4914      	ldr	r1, [pc, #80]	@ (10045008 <APB0periphContextSave+0x94>)
10044fb6:	30a8      	adds	r0, #168	@ 0xa8
10044fb8:	f7ff ff8a 	bl	10044ed0 <Osal_MemCpy4>
  }
#endif
#if defined(TIM17)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM17))
10044fbc:	2004      	movs	r0, #4
10044fbe:	f7ff ffb3 	bl	10044f28 <LL_APB0_GRP1_IsEnabledClock>
10044fc2:	2800      	cmp	r0, #0
10044fc4:	d006      	beq.n	10044fd4 <APB0periphContextSave+0x60>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM17_vr, (uint32_t *)TIM17, sizeof(TIM_TypeDef));
10044fc6:	0020      	movs	r0, r4
10044fc8:	300d      	adds	r0, #13
10044fca:	2264      	movs	r2, #100	@ 0x64
10044fcc:	490f      	ldr	r1, [pc, #60]	@ (1004500c <APB0periphContextSave+0x98>)
10044fce:	30ff      	adds	r0, #255	@ 0xff
10044fd0:	f7ff ff7e 	bl	10044ed0 <Osal_MemCpy4>
  }
#endif

  apb0->wdg_to_be_enabled = FALSE;
10044fd4:	0022      	movs	r2, r4
10044fd6:	2300      	movs	r3, #0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_WDG))
10044fd8:	2080      	movs	r0, #128	@ 0x80
  apb0->wdg_to_be_enabled = FALSE;
10044fda:	32fc      	adds	r2, #252	@ 0xfc
10044fdc:	6753      	str	r3, [r2, #116]	@ 0x74
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_WDG))
10044fde:	01c0      	lsls	r0, r0, #7
10044fe0:	f7ff ffa2 	bl	10044f28 <LL_APB0_GRP1_IsEnabledClock>
10044fe4:	2800      	cmp	r0, #0
10044fe6:	d008      	beq.n	10044ffa <APB0periphContextSave+0x86>
  {
    if (apb0->deepstop_wdg_state == DISABLE)
10044fe8:	6f93      	ldr	r3, [r2, #120]	@ 0x78
10044fea:	2b00      	cmp	r3, #0
10044fec:	d105      	bne.n	10044ffa <APB0periphContextSave+0x86>
    {
      apb0->wdg_to_be_enabled = TRUE;
      LL_APB0_GRP1_DisableClock(LL_APB0_GRP1_PERIPH_WDG);
10044fee:	2080      	movs	r0, #128	@ 0x80
      apb0->wdg_to_be_enabled = TRUE;
10044ff0:	3301      	adds	r3, #1
10044ff2:	6753      	str	r3, [r2, #116]	@ 0x74
      LL_APB0_GRP1_DisableClock(LL_APB0_GRP1_PERIPH_WDG);
10044ff4:	01c0      	lsls	r0, r0, #7
10044ff6:	f7ff ffa1 	bl	10044f3c <LL_APB0_GRP1_DisableClock>
    }
  }

  apb0->FLASH_CONFIG_vr = FLASH->CONFIG;
10044ffa:	4b05      	ldr	r3, [pc, #20]	@ (10045010 <APB0periphContextSave+0x9c>)
10044ffc:	685b      	ldr	r3, [r3, #4]
10044ffe:	6423      	str	r3, [r4, #64]	@ 0x40
}
10045000:	bd10      	pop	{r4, pc}
10045002:	46c0      	nop			@ (mov r8, r8)
10045004:	40002000 	.word	0x40002000
10045008:	40005000 	.word	0x40005000
1004500c:	40006000 	.word	0x40006000
10045010:	40001000 	.word	0x40001000

10045014 <APB1periphContextSave>:
  * @brief  Save the APB1 peripheral registers content.
  * @param  apb1 Pointer to a APB1 structure
  * @retval None
  */
static void APB1periphContextSave(apb1PeriphT *apb1)
{
10045014:	b510      	push	{r4, lr}
10045016:	0004      	movs	r4, r0
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI2))
  {
    Osal_MemCpy4((uint32_t *)&apb1->SPI2_vr, (uint32_t *)SPI2, sizeof(SPI_TypeDef));
  }
#endif
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI3))
10045018:	2080      	movs	r0, #128	@ 0x80
1004501a:	01c0      	lsls	r0, r0, #7
1004501c:	f7ff ff96 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
10045020:	2800      	cmp	r0, #0
10045022:	d005      	beq.n	10045030 <APB1periphContextSave+0x1c>
  {
    Osal_MemCpy4((uint32_t *)&apb1->SPI3_vr, (uint32_t *)SPI3, sizeof(SPI_TypeDef));
10045024:	0020      	movs	r0, r4
10045026:	2224      	movs	r2, #36	@ 0x24
10045028:	491b      	ldr	r1, [pc, #108]	@ (10045098 <APB1periphContextSave+0x84>)
1004502a:	30e4      	adds	r0, #228	@ 0xe4
1004502c:	f7ff ff50 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_ADCDIG))
10045030:	2010      	movs	r0, #16
10045032:	f7ff ff8b 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
10045036:	2800      	cmp	r0, #0
10045038:	d005      	beq.n	10045046 <APB1periphContextSave+0x32>
  {
    Osal_MemCpy4((uint32_t *)&apb1->ADC_vr, (uint32_t *)ADC1, sizeof(ADC_TypeDef));
1004503a:	0020      	movs	r0, r4
1004503c:	2258      	movs	r2, #88	@ 0x58
1004503e:	4917      	ldr	r1, [pc, #92]	@ (1004509c <APB1periphContextSave+0x88>)
10045040:	308c      	adds	r0, #140	@ 0x8c
10045042:	f7ff ff45 	bl	10044ed0 <Osal_MemCpy4>
  }

#if defined(STM32WB06) || defined(STM32WB07)
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1))
#else
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
10045046:	2080      	movs	r0, #128	@ 0x80
10045048:	0040      	lsls	r0, r0, #1
1004504a:	f7ff ff7f 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
1004504e:	2800      	cmp	r0, #0
10045050:	d009      	beq.n	10045066 <APB1periphContextSave+0x52>
     (LL_RCC_GetLPUARTClockSource() == LL_RCC_LPUCLKSEL_CLK16M))
10045052:	f7ff ff49 	bl	10044ee8 <LL_RCC_GetLPUARTClockSource>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
10045056:	2800      	cmp	r0, #0
10045058:	d105      	bne.n	10045066 <APB1periphContextSave+0x52>
#endif
  {
    Osal_MemCpy4((uint32_t *)&apb1->LPUART_vr, (uint32_t *)LPUART1, sizeof(USART_TypeDef));
1004505a:	0020      	movs	r0, r4
1004505c:	2230      	movs	r2, #48	@ 0x30
1004505e:	4910      	ldr	r1, [pc, #64]	@ (100450a0 <APB1periphContextSave+0x8c>)
10045060:	305c      	adds	r0, #92	@ 0x5c
10045062:	f7ff ff35 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_USART1))
10045066:	2080      	movs	r0, #128	@ 0x80
10045068:	00c0      	lsls	r0, r0, #3
1004506a:	f7ff ff6f 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
1004506e:	2800      	cmp	r0, #0
10045070:	d005      	beq.n	1004507e <APB1periphContextSave+0x6a>
  {
    Osal_MemCpy4((uint32_t *)&apb1->USART_vr, (uint32_t *)USART1, sizeof(USART_TypeDef));
10045072:	0020      	movs	r0, r4
10045074:	2230      	movs	r2, #48	@ 0x30
10045076:	490b      	ldr	r1, [pc, #44]	@ (100450a4 <APB1periphContextSave+0x90>)
10045078:	302c      	adds	r0, #44	@ 0x2c
1004507a:	f7ff ff29 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C1))
1004507e:	2080      	movs	r0, #128	@ 0x80
10045080:	0380      	lsls	r0, r0, #14
10045082:	f7ff ff63 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
10045086:	2800      	cmp	r0, #0
10045088:	d005      	beq.n	10045096 <APB1periphContextSave+0x82>
  {
    Osal_MemCpy4((uint32_t *)&apb1->I2C1_vr, (uint32_t *)I2C1, sizeof(I2C_TypeDef));
1004508a:	2182      	movs	r1, #130	@ 0x82
1004508c:	222c      	movs	r2, #44	@ 0x2c
1004508e:	0020      	movs	r0, r4
10045090:	05c9      	lsls	r1, r1, #23
10045092:	f7ff ff1d 	bl	10044ed0 <Osal_MemCpy4>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C2))
  {
    Osal_MemCpy4((uint32_t *)&apb1->I2C2_vr, (uint32_t *)I2C2, sizeof(I2C_TypeDef));
  }
#endif
}
10045096:	bd10      	pop	{r4, pc}
10045098:	41007000 	.word	0x41007000
1004509c:	41006000 	.word	0x41006000
100450a0:	41005000 	.word	0x41005000
100450a4:	41004000 	.word	0x41004000

100450a8 <APB2periphContextSave>:
  * @brief  Save the APB2 peripheral registers content.
  * @param  apb2 Pointer to a APB2 structure
  * @retval None
  */
static void APB2periphContextSave(apb2PeriphT *apb2)
{
100450a8:	b510      	push	{r4, lr}
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
100450aa:	2001      	movs	r0, #1
100450ac:	f7ff ff58 	bl	10044f60 <LL_APB2_GRP1_IsEnabledClock>
  {
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
    apb2->LDO_TRANSFO_vr = READ_BIT(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS);
#endif
  }
}
100450b0:	bd10      	pop	{r4, pc}
	...

100450b4 <AHB0periphContextSave>:
  * @brief  Save the AHB0 peripheral registers content.
  * @param  ahb0 Pointer to a AHB0 structure
  * @retval None
  */
static void AHB0periphContextSave(ahb0PeriphT *ahb0)
{
100450b4:	b510      	push	{r4, lr}
100450b6:	0004      	movs	r4, r0
  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
100450b8:	2001      	movs	r0, #1
100450ba:	f7ff ff1d 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
100450be:	2800      	cmp	r0, #0
100450c0:	d00d      	beq.n	100450de <AHB0periphContextSave+0x2a>
    Osal_MemCpy4((uint32_t *)ahb0->DMAMUX_vr, (uint32_t *)DMAMUX1, 8*sizeof(DMAMUX_Channel_TypeDef));
100450c2:	0020      	movs	r0, r4
100450c4:	2191      	movs	r1, #145	@ 0x91
100450c6:	309d      	adds	r0, #157	@ 0x9d
100450c8:	2220      	movs	r2, #32
100450ca:	05c9      	lsls	r1, r1, #23
100450cc:	30ff      	adds	r0, #255	@ 0xff
100450ce:	f7ff feff 	bl	10044ed0 <Osal_MemCpy4>
    Osal_MemCpy4((uint32_t *)ahb0->DMA_vr, (uint32_t *)DMA1, 8*sizeof(DMA_Channel_TypeDef));
100450d2:	0020      	movs	r0, r4
100450d4:	22a0      	movs	r2, #160	@ 0xa0
100450d6:	4925      	ldr	r1, [pc, #148]	@ (1004516c <AHB0periphContextSave+0xb8>)
100450d8:	30fc      	adds	r0, #252	@ 0xfc
100450da:	f7ff fef9 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_RNG)) {
100450de:	2080      	movs	r0, #128	@ 0x80
100450e0:	02c0      	lsls	r0, r0, #11
100450e2:	f7ff ff09 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
100450e6:	2800      	cmp	r0, #0
100450e8:	d005      	beq.n	100450f6 <AHB0periphContextSave+0x42>
    Osal_MemCpy4((uint32_t *)&ahb0->RNG_vr, (uint32_t *)RNG, sizeof(RNG_TypeDef));
100450ea:	0020      	movs	r0, r4
100450ec:	2288      	movs	r2, #136	@ 0x88
100450ee:	4920      	ldr	r1, [pc, #128]	@ (10045170 <AHB0periphContextSave+0xbc>)
100450f0:	3074      	adds	r0, #116	@ 0x74
100450f2:	f7ff feed 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_PKA)) {
100450f6:	2080      	movs	r0, #128	@ 0x80
100450f8:	0240      	lsls	r0, r0, #9
100450fa:	f7ff fefd 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
100450fe:	2800      	cmp	r0, #0
10045100:	d002      	beq.n	10045108 <AHB0periphContextSave+0x54>
#if defined(STM32WB06) || defined(STM32WB07)
    ahb0->PKA_CSR_vr = PKA->CSR;
    ahb0->PKA_ISR_vr = PKA->ISR;
    ahb0->PKA_IEN_vr = PKA->IEN;
#else
    ahb0->PKA_CR_vr = PKA->CR;
10045102:	4b1c      	ldr	r3, [pc, #112]	@ (10045174 <AHB0periphContextSave+0xc0>)
10045104:	681b      	ldr	r3, [r3, #0]
10045106:	6723      	str	r3, [r4, #112]	@ 0x70
#endif
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_CRC)) {
10045108:	2080      	movs	r0, #128	@ 0x80
1004510a:	0140      	lsls	r0, r0, #5
1004510c:	f7ff fef4 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
10045110:	2800      	cmp	r0, #0
10045112:	d005      	beq.n	10045120 <AHB0periphContextSave+0x6c>
    Osal_MemCpy4((uint32_t *)&ahb0->CRC_vr, (uint32_t *)CRC, sizeof(CRC_TypeDef));
10045114:	0020      	movs	r0, r4
10045116:	2218      	movs	r2, #24
10045118:	4917      	ldr	r1, [pc, #92]	@ (10045178 <AHB0periphContextSave+0xc4>)
1004511a:	3058      	adds	r0, #88	@ 0x58
1004511c:	f7ff fed8 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOA)) {
10045120:	2004      	movs	r0, #4
10045122:	f7ff fee9 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
10045126:	2800      	cmp	r0, #0
10045128:	d005      	beq.n	10045136 <AHB0periphContextSave+0x82>
    Osal_MemCpy4((uint32_t *)&ahb0->GPIOA_vr, (uint32_t *)GPIOA, sizeof(GPIO_TypeDef));
1004512a:	2190      	movs	r1, #144	@ 0x90
1004512c:	222c      	movs	r2, #44	@ 0x2c
1004512e:	0020      	movs	r0, r4
10045130:	05c9      	lsls	r1, r1, #23
10045132:	f7ff fecd 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOB)) {
10045136:	2008      	movs	r0, #8
10045138:	f7ff fede 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
1004513c:	2800      	cmp	r0, #0
1004513e:	d004      	beq.n	1004514a <AHB0periphContextSave+0x96>
    Osal_MemCpy4((uint32_t *)&ahb0->GPIOB_vr, (uint32_t *)GPIOB, sizeof(GPIO_TypeDef));
10045140:	222c      	movs	r2, #44	@ 0x2c
10045142:	490e      	ldr	r1, [pc, #56]	@ (1004517c <AHB0periphContextSave+0xc8>)
10045144:	18a0      	adds	r0, r4, r2
10045146:	f7ff fec3 	bl	10044ed0 <Osal_MemCpy4>
  }

  ahb0->RCC_AHBRSTR_vr  = RCC->AHBRSTR;
1004514a:	22de      	movs	r2, #222	@ 0xde
1004514c:	4b0c      	ldr	r3, [pc, #48]	@ (10045180 <AHB0periphContextSave+0xcc>)
1004514e:	0052      	lsls	r2, r2, #1
10045150:	6b19      	ldr	r1, [r3, #48]	@ 0x30
10045152:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_APB1RSTR_vr = RCC->APB1RSTR;
10045154:	6b99      	ldr	r1, [r3, #56]	@ 0x38
10045156:	3204      	adds	r2, #4
10045158:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_AHBENR_vr   = RCC->AHBENR;
1004515a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004515c:	3204      	adds	r2, #4
1004515e:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_APB1ENR_vr  = RCC->APB1ENR;
10045160:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10045162:	23e4      	movs	r3, #228	@ 0xe4
10045164:	005b      	lsls	r3, r3, #1
10045166:	50e2      	str	r2, [r4, r3]
}
10045168:	bd10      	pop	{r4, pc}
1004516a:	46c0      	nop			@ (mov r8, r8)
1004516c:	48700000 	.word	0x48700000
10045170:	48600000 	.word	0x48600000
10045174:	48300000 	.word	0x48300000
10045178:	48200000 	.word	0x48200000
1004517c:	48100000 	.word	0x48100000
10045180:	48400000 	.word	0x48400000

10045184 <cstackContextSave>:
{
  uint8_t i;
  volatile uint32_t *ptr;

  i = 0;
  ptr = __vector_table[0].__ptr ;
10045184:	4b04      	ldr	r3, [pc, #16]	@ (10045198 <cstackContextSave+0x14>)
10045186:	681a      	ldr	r2, [r3, #0]
  ptr -= CSTACK_PREAMBLE_NUMBER;
10045188:	0013      	movs	r3, r2
1004518a:	3b50      	subs	r3, #80	@ 0x50
  do
  {
    cStackPreamble[i] = *ptr;
1004518c:	cb02      	ldmia	r3!, {r1}
1004518e:	c002      	stmia	r0!, {r1}
    i++;
    ptr++;
  } while (i < CSTACK_PREAMBLE_NUMBER);
10045190:	429a      	cmp	r2, r3
10045192:	d1fb      	bne.n	1004518c <cstackContextSave+0x8>

}
10045194:	4770      	bx	lr
10045196:	46c0      	nop			@ (mov r8, r8)
10045198:	10040000 	.word	0x10040000

1004519c <cpuPeriphContextSave>:
  */
static void cpuPeriphContextSave(cpuPeriphT *cpuPeriph)
{
  uint8_t i;

  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
1004519c:	4b0d      	ldr	r3, [pc, #52]	@ (100451d4 <cpuPeriphContextSave+0x38>)
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
1004519e:	490e      	ldr	r1, [pc, #56]	@ (100451d8 <cpuPeriphContextSave+0x3c>)
  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
100451a0:	689b      	ldr	r3, [r3, #8]
{
100451a2:	b530      	push	{r4, r5, lr}
  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
100451a4:	6003      	str	r3, [r0, #0]
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
100451a6:	680b      	ldr	r3, [r1, #0]
  for (i=0; i<8; i++)
  {
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
100451a8:	0004      	movs	r4, r0
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
100451aa:	6043      	str	r3, [r0, #4]
100451ac:	2300      	movs	r3, #0
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
100451ae:	3408      	adds	r4, #8
100451b0:	001a      	movs	r2, r3
100451b2:	32c0      	adds	r2, #192	@ 0xc0
100451b4:	0092      	lsls	r2, r2, #2
100451b6:	588d      	ldr	r5, [r1, r2]
100451b8:	009a      	lsls	r2, r3, #2
  for (i=0; i<8; i++)
100451ba:	3301      	adds	r3, #1
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
100451bc:	50a5      	str	r5, [r4, r2]
  for (i=0; i<8; i++)
100451be:	2b08      	cmp	r3, #8
100451c0:	d1f6      	bne.n	100451b0 <cpuPeriphContextSave+0x14>
  }
  cpuPeriph->SYSTICK_IPR_vr = *(volatile uint32_t *)SHPR3_REG;
100451c2:	4b06      	ldr	r3, [pc, #24]	@ (100451dc <cpuPeriphContextSave+0x40>)
100451c4:	681b      	ldr	r3, [r3, #0]
100451c6:	6283      	str	r3, [r0, #40]	@ 0x28
  cpuPeriph->SYST_CSR_vr = SysTick->CTRL;
100451c8:	4b05      	ldr	r3, [pc, #20]	@ (100451e0 <cpuPeriphContextSave+0x44>)
100451ca:	681a      	ldr	r2, [r3, #0]
100451cc:	62c2      	str	r2, [r0, #44]	@ 0x2c
  cpuPeriph->SYST_RVR_vr = SysTick->LOAD;
100451ce:	685b      	ldr	r3, [r3, #4]
100451d0:	6303      	str	r3, [r0, #48]	@ 0x30
}
100451d2:	bd30      	pop	{r4, r5, pc}
100451d4:	e000ed00 	.word	0xe000ed00
100451d8:	e000e100 	.word	0xe000e100
100451dc:	e000ed20 	.word	0xe000ed20
100451e0:	e000e010 	.word	0xe000e010

100451e4 <APB0periphContextRestore>:
  * @brief  Restore the APB0 peripheral registers content.
  * @param  apb0 Pointer to a APB0 structure
  * @retval None
  */
static void APB0periphContextRestore(apb0PeriphT *apb0)
{
100451e4:	b570      	push	{r4, r5, r6, lr}
100451e6:	0004      	movs	r4, r0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_SYSCFG))
100451e8:	2080      	movs	r0, #128	@ 0x80
100451ea:	0040      	lsls	r0, r0, #1
100451ec:	f7ff fe9c 	bl	10044f28 <LL_APB0_GRP1_IsEnabledClock>
100451f0:	2800      	cmp	r0, #0
100451f2:	d005      	beq.n	10045200 <APB0periphContextRestore+0x1c>
  {
    Osal_MemCpy4((uint32_t *)SYSCFG, (uint32_t *)&apb0->SYSCFG_vr, sizeof(SYSCFG_TypeDef));
100451f4:	2080      	movs	r0, #128	@ 0x80
100451f6:	2240      	movs	r2, #64	@ 0x40
100451f8:	0021      	movs	r1, r4
100451fa:	05c0      	lsls	r0, r0, #23
100451fc:	f7ff fe68 	bl	10044ed0 <Osal_MemCpy4>
    TIM1->CR1 = app;
  }
#endif

#if defined(TIM2)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM2))
10045200:	2001      	movs	r0, #1
10045202:	f7ff fe91 	bl	10044f28 <LL_APB0_GRP1_IsEnabledClock>
10045206:	2800      	cmp	r0, #0
10045208:	d00c      	beq.n	10045224 <APB0periphContextRestore+0x40>
  {
    uint32_t app;
    app = apb0->TIM2_vr.CR1;
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004520a:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004520c:	0021      	movs	r1, r4
    app = apb0->TIM2_vr.CR1;
1004520e:	6c66      	ldr	r6, [r4, #68]	@ 0x44
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
10045210:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
10045212:	4d1a      	ldr	r5, [pc, #104]	@ (1004527c <APB0periphContextRestore+0x98>)
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
10045214:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
10045216:	0028      	movs	r0, r5
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
10045218:	6463      	str	r3, [r4, #68]	@ 0x44
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004521a:	3263      	adds	r2, #99	@ 0x63
1004521c:	3144      	adds	r1, #68	@ 0x44
1004521e:	f7ff fe57 	bl	10044ed0 <Osal_MemCpy4>
    TIM2->CR1 = app;
10045222:	602e      	str	r6, [r5, #0]
  }
#endif

#if defined(TIM16)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM16))
10045224:	2002      	movs	r0, #2
10045226:	f7ff fe7f 	bl	10044f28 <LL_APB0_GRP1_IsEnabledClock>
1004522a:	2800      	cmp	r0, #0
1004522c:	d00c      	beq.n	10045248 <APB0periphContextRestore+0x64>
  {
    uint32_t app;
    app = apb0->TIM16_vr.CR1;
1004522e:	0021      	movs	r1, r4
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
10045230:	2201      	movs	r2, #1
    app = apb0->TIM16_vr.CR1;
10045232:	31a8      	adds	r1, #168	@ 0xa8
10045234:	680e      	ldr	r6, [r1, #0]
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
10045236:	680b      	ldr	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
10045238:	4d11      	ldr	r5, [pc, #68]	@ (10045280 <APB0periphContextRestore+0x9c>)
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004523a:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
1004523c:	0028      	movs	r0, r5
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004523e:	600b      	str	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
10045240:	3263      	adds	r2, #99	@ 0x63
10045242:	f7ff fe45 	bl	10044ed0 <Osal_MemCpy4>
    TIM16->CR1 = app;
10045246:	602e      	str	r6, [r5, #0]
  }
#endif

#if defined(TIM17)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM17))
10045248:	2004      	movs	r0, #4
1004524a:	f7ff fe6d 	bl	10044f28 <LL_APB0_GRP1_IsEnabledClock>
1004524e:	2800      	cmp	r0, #0
10045250:	d00f      	beq.n	10045272 <APB0periphContextRestore+0x8e>
  {
    uint32_t app;
    app = apb0->TIM17_vr.CR1;
10045252:	0023      	movs	r3, r4
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
10045254:	2101      	movs	r1, #1
    app = apb0->TIM17_vr.CR1;
10045256:	33fc      	adds	r3, #252	@ 0xfc
10045258:	691e      	ldr	r6, [r3, #16]
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004525a:	691a      	ldr	r2, [r3, #16]
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
1004525c:	4d09      	ldr	r5, [pc, #36]	@ (10045284 <APB0periphContextRestore+0xa0>)
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004525e:	438a      	bics	r2, r1
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
10045260:	0021      	movs	r1, r4
10045262:	310d      	adds	r1, #13
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
10045264:	611a      	str	r2, [r3, #16]
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
10045266:	0028      	movs	r0, r5
10045268:	2264      	movs	r2, #100	@ 0x64
1004526a:	31ff      	adds	r1, #255	@ 0xff
1004526c:	f7ff fe30 	bl	10044ed0 <Osal_MemCpy4>
    TIM17->CR1 = app;
10045270:	602e      	str	r6, [r5, #0]
  }
#endif

  FLASH->CONFIG = apb0->FLASH_CONFIG_vr;
10045272:	6c22      	ldr	r2, [r4, #64]	@ 0x40
10045274:	4b04      	ldr	r3, [pc, #16]	@ (10045288 <APB0periphContextRestore+0xa4>)
10045276:	605a      	str	r2, [r3, #4]
}
10045278:	bd70      	pop	{r4, r5, r6, pc}
1004527a:	46c0      	nop			@ (mov r8, r8)
1004527c:	40002000 	.word	0x40002000
10045280:	40005000 	.word	0x40005000
10045284:	40006000 	.word	0x40006000
10045288:	40001000 	.word	0x40001000

1004528c <APB1periphContextRestore>:
  * @brief  Restore the APB1 peripheral registers content.
  * @param  apb1 Pointer to a APB1 structure
  * @retval None
  */
static void APB1periphContextRestore(apb1PeriphT *apb1)
{
1004528c:	b570      	push	{r4, r5, r6, lr}
1004528e:	0004      	movs	r4, r0
    Osal_MemCpy4((uint32_t *)SPI2, (uint32_t *)&apb1->SPI2_vr, 12); /* Skip DR */
    Osal_MemCpy4((uint32_t *)(&(SPI2->CRCPR)), (uint32_t *)(&apb1->SPI2_vr.CRCPR), 20);
    SPI2->CR1 = app;
  }
#endif
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI3))
10045290:	2080      	movs	r0, #128	@ 0x80
10045292:	01c0      	lsls	r0, r0, #7
10045294:	f7ff fe5a 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
10045298:	2800      	cmp	r0, #0
1004529a:	d012      	beq.n	100452c2 <APB1periphContextRestore+0x36>
  {
    uint32_t app;
    app = apb1->SPI3_vr.CR1;
1004529c:	0021      	movs	r1, r4
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
1004529e:	2240      	movs	r2, #64	@ 0x40
    app = apb1->SPI3_vr.CR1;
100452a0:	31e4      	adds	r1, #228	@ 0xe4
100452a2:	680e      	ldr	r6, [r1, #0]
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
100452a4:	680b      	ldr	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)SPI3, (uint32_t *)&apb1->SPI3_vr, 12); /* Skip DR */
100452a6:	4d2e      	ldr	r5, [pc, #184]	@ (10045360 <APB1periphContextRestore+0xd4>)
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
100452a8:	4393      	bics	r3, r2
100452aa:	600b      	str	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)SPI3, (uint32_t *)&apb1->SPI3_vr, 12); /* Skip DR */
100452ac:	0028      	movs	r0, r5
100452ae:	3a34      	subs	r2, #52	@ 0x34
100452b0:	f7ff fe0e 	bl	10044ed0 <Osal_MemCpy4>
    Osal_MemCpy4((uint32_t *)(&(SPI3->CRCPR)), (uint32_t *)(&apb1->SPI3_vr.CRCPR), 20);
100452b4:	0021      	movs	r1, r4
100452b6:	2214      	movs	r2, #20
100452b8:	482a      	ldr	r0, [pc, #168]	@ (10045364 <APB1periphContextRestore+0xd8>)
100452ba:	31f4      	adds	r1, #244	@ 0xf4
100452bc:	f7ff fe08 	bl	10044ed0 <Osal_MemCpy4>
    SPI3->CR1 = app;
100452c0:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_ADCDIG))
100452c2:	2010      	movs	r0, #16
100452c4:	f7ff fe42 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
100452c8:	2800      	cmp	r0, #0
100452ca:	d005      	beq.n	100452d8 <APB1periphContextRestore+0x4c>
  {
    Osal_MemCpy4((uint32_t *)ADC1, (uint32_t *)&apb1->ADC_vr, sizeof(ADC_TypeDef));
100452cc:	0021      	movs	r1, r4
100452ce:	2258      	movs	r2, #88	@ 0x58
100452d0:	4825      	ldr	r0, [pc, #148]	@ (10045368 <APB1periphContextRestore+0xdc>)
100452d2:	318c      	adds	r1, #140	@ 0x8c
100452d4:	f7ff fdfc 	bl	10044ed0 <Osal_MemCpy4>
  }

#if defined(STM32WB06) || defined(STM32WB07)
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1))
#else
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
100452d8:	2080      	movs	r0, #128	@ 0x80
100452da:	0040      	lsls	r0, r0, #1
100452dc:	f7ff fe36 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
100452e0:	2800      	cmp	r0, #0
100452e2:	d014      	beq.n	1004530e <APB1periphContextRestore+0x82>
     (LL_RCC_GetLPUARTClockSource() == LL_RCC_LPUCLKSEL_CLK16M))
100452e4:	f7ff fe00 	bl	10044ee8 <LL_RCC_GetLPUARTClockSource>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
100452e8:	2800      	cmp	r0, #0
100452ea:	d110      	bne.n	1004530e <APB1periphContextRestore+0x82>
#endif
  {
    uint32_t app;
    app = apb1->LPUART_vr.CR1;
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
100452ec:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
100452ee:	0021      	movs	r1, r4
    app = apb1->LPUART_vr.CR1;
100452f0:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
100452f2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
100452f4:	4d1d      	ldr	r5, [pc, #116]	@ (1004536c <APB1periphContextRestore+0xe0>)
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
100452f6:	4393      	bics	r3, r2
100452f8:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
100452fa:	0028      	movs	r0, r5
100452fc:	3223      	adds	r2, #35	@ 0x23
100452fe:	315c      	adds	r1, #92	@ 0x5c
10045300:	f7ff fde6 	bl	10044ed0 <Osal_MemCpy4>
    LPUART1->PRESC = apb1->LPUART_vr.PRESC;
10045304:	0023      	movs	r3, r4
10045306:	3388      	adds	r3, #136	@ 0x88
10045308:	681b      	ldr	r3, [r3, #0]
1004530a:	62eb      	str	r3, [r5, #44]	@ 0x2c
    LPUART1->CR1 = app;
1004530c:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_USART1))
1004530e:	2080      	movs	r0, #128	@ 0x80
10045310:	00c0      	lsls	r0, r0, #3
10045312:	f7ff fe1b 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
10045316:	2800      	cmp	r0, #0
10045318:	d00e      	beq.n	10045338 <APB1periphContextRestore+0xac>
  {
    uint32_t app;
    app = apb1->USART_vr.CR1;
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
1004531a:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
1004531c:	0021      	movs	r1, r4
    app = apb1->USART_vr.CR1;
1004531e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
10045320:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
10045322:	4d13      	ldr	r5, [pc, #76]	@ (10045370 <APB1periphContextRestore+0xe4>)
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
10045324:	4393      	bics	r3, r2
10045326:	62e3      	str	r3, [r4, #44]	@ 0x2c
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
10045328:	0028      	movs	r0, r5
1004532a:	3223      	adds	r2, #35	@ 0x23
1004532c:	312c      	adds	r1, #44	@ 0x2c
1004532e:	f7ff fdcf 	bl	10044ed0 <Osal_MemCpy4>
    USART1->PRESC = apb1->USART_vr.PRESC;
10045332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
10045334:	62eb      	str	r3, [r5, #44]	@ 0x2c
    USART1->CR1 = app;
10045336:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C1))
10045338:	2080      	movs	r0, #128	@ 0x80
1004533a:	0380      	lsls	r0, r0, #14
1004533c:	f7ff fe06 	bl	10044f4c <LL_APB1_GRP1_IsEnabledClock>
10045340:	2800      	cmp	r0, #0
10045342:	d00c      	beq.n	1004535e <APB1periphContextRestore+0xd2>
  {
    uint32_t app;
    app = apb1->I2C1_vr.CR1;
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
10045344:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
10045346:	2582      	movs	r5, #130	@ 0x82
    app = apb1->I2C1_vr.CR1;
10045348:	6826      	ldr	r6, [r4, #0]
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004534a:	6823      	ldr	r3, [r4, #0]
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004534c:	05ed      	lsls	r5, r5, #23
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004534e:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
10045350:	0021      	movs	r1, r4
10045352:	0028      	movs	r0, r5
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
10045354:	6023      	str	r3, [r4, #0]
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
10045356:	321f      	adds	r2, #31
10045358:	f7ff fdba 	bl	10044ed0 <Osal_MemCpy4>
    I2C1->CR1 = app;
1004535c:	602e      	str	r6, [r5, #0]
    apb1->I2C2_vr.CR1 &= ~I2C_CR1_PE;
    Osal_MemCpy4((uint32_t *)I2C2, (uint32_t *)&apb1->I2C2_vr, 32); /* Skip PECR, RDR and TDR */
    I2C2->CR1 = app;
  }
#endif
}
1004535e:	bd70      	pop	{r4, r5, r6, pc}
10045360:	41007000 	.word	0x41007000
10045364:	41007010 	.word	0x41007010
10045368:	41006000 	.word	0x41006000
1004536c:	41005000 	.word	0x41005000
10045370:	41004000 	.word	0x41004000

10045374 <APB2periphContextRestore>:
  * @brief  Restore the APB2 peripheral registers content.
  * @param  apb2 Pointer to a APB2 structure
  * @retval None
  */
static void APB2periphContextRestore(apb2PeriphT *apb2)
{
10045374:	b510      	push	{r4, lr}
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10045376:	2001      	movs	r0, #1
10045378:	f7ff fdf2 	bl	10044f60 <LL_APB2_GRP1_IsEnabledClock>
      {
        SET_BIT(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS);
      }
#endif
  }
}
1004537c:	bd10      	pop	{r4, pc}
	...

10045380 <AHB0periphContextRestore>:
  * @param  ahb0 Pointer to a AHB0 structure
  * @retval None
  */
static void AHB0periphContextRestore(ahb0PeriphT *ahb0)
{
  RCC->AHBRSTR = ahb0->RCC_AHBRSTR_vr;
10045380:	23de      	movs	r3, #222	@ 0xde
10045382:	005b      	lsls	r3, r3, #1
10045384:	58c2      	ldr	r2, [r0, r3]
10045386:	4b3a      	ldr	r3, [pc, #232]	@ (10045470 <AHB0periphContextRestore+0xf0>)
{
10045388:	b510      	push	{r4, lr}
  RCC->AHBRSTR = ahb0->RCC_AHBRSTR_vr;
1004538a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->APB1RSTR = ahb0->RCC_APB1RSTR_vr;
1004538c:	22e0      	movs	r2, #224	@ 0xe0
1004538e:	0052      	lsls	r2, r2, #1
10045390:	5882      	ldr	r2, [r0, r2]
{
10045392:	0004      	movs	r4, r0
  RCC->APB1RSTR = ahb0->RCC_APB1RSTR_vr;
10045394:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->AHBENR = ahb0->RCC_AHBENR_vr;
10045396:	22e2      	movs	r2, #226	@ 0xe2
10045398:	0052      	lsls	r2, r2, #1
1004539a:	5882      	ldr	r2, [r0, r2]
1004539c:	651a      	str	r2, [r3, #80]	@ 0x50
  RCC->APB1ENR = ahb0->RCC_APB1ENR_vr;
1004539e:	22e4      	movs	r2, #228	@ 0xe4
100453a0:	0052      	lsls	r2, r2, #1
100453a2:	5882      	ldr	r2, [r0, r2]

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
100453a4:	2001      	movs	r0, #1
  RCC->APB1ENR = ahb0->RCC_APB1ENR_vr;
100453a6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
100453a8:	f7ff fda6 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
100453ac:	2800      	cmp	r0, #0
100453ae:	d018      	beq.n	100453e2 <AHB0periphContextRestore+0x62>
    Osal_MemCpy4((uint32_t *)DMAMUX1, (uint32_t *)ahb0->DMAMUX_vr, 8*sizeof(DMAMUX_Channel_TypeDef));
100453b0:	0021      	movs	r1, r4
100453b2:	2091      	movs	r0, #145	@ 0x91
100453b4:	319d      	adds	r1, #157	@ 0x9d
100453b6:	2220      	movs	r2, #32
100453b8:	31ff      	adds	r1, #255	@ 0xff
100453ba:	05c0      	lsls	r0, r0, #23
100453bc:	f7ff fd88 	bl	10044ed0 <Osal_MemCpy4>
    ahb0->DMA_vr[0].CNDTR = 0;
100453c0:	0021      	movs	r1, r4
    ahb0->DMA_vr[2].CNDTR = 0;
    ahb0->DMA_vr[3].CNDTR = 0;
    ahb0->DMA_vr[4].CNDTR = 0;
    ahb0->DMA_vr[5].CNDTR = 0;
    ahb0->DMA_vr[6].CNDTR = 0;
    ahb0->DMA_vr[7].CNDTR = 0;
100453c2:	22c6      	movs	r2, #198	@ 0xc6
    ahb0->DMA_vr[0].CNDTR = 0;
100453c4:	2300      	movs	r3, #0
100453c6:	31fc      	adds	r1, #252	@ 0xfc
    ahb0->DMA_vr[7].CNDTR = 0;
100453c8:	0052      	lsls	r2, r2, #1
    ahb0->DMA_vr[0].CNDTR = 0;
100453ca:	604b      	str	r3, [r1, #4]
    Osal_MemCpy4((uint32_t *)DMA1, (uint32_t *)ahb0->DMA_vr, 8*sizeof(DMA_Channel_TypeDef));
100453cc:	4829      	ldr	r0, [pc, #164]	@ (10045474 <AHB0periphContextRestore+0xf4>)
    ahb0->DMA_vr[1].CNDTR = 0;
100453ce:	618b      	str	r3, [r1, #24]
    ahb0->DMA_vr[2].CNDTR = 0;
100453d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
    ahb0->DMA_vr[3].CNDTR = 0;
100453d2:	640b      	str	r3, [r1, #64]	@ 0x40
    ahb0->DMA_vr[4].CNDTR = 0;
100453d4:	654b      	str	r3, [r1, #84]	@ 0x54
    ahb0->DMA_vr[5].CNDTR = 0;
100453d6:	668b      	str	r3, [r1, #104]	@ 0x68
    ahb0->DMA_vr[6].CNDTR = 0;
100453d8:	67cb      	str	r3, [r1, #124]	@ 0x7c
    ahb0->DMA_vr[7].CNDTR = 0;
100453da:	50a3      	str	r3, [r4, r2]
    Osal_MemCpy4((uint32_t *)DMA1, (uint32_t *)ahb0->DMA_vr, 8*sizeof(DMA_Channel_TypeDef));
100453dc:	3aec      	subs	r2, #236	@ 0xec
100453de:	f7ff fd77 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_RNG)) {
100453e2:	2080      	movs	r0, #128	@ 0x80
100453e4:	02c0      	lsls	r0, r0, #11
100453e6:	f7ff fd87 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
100453ea:	2800      	cmp	r0, #0
100453ec:	d005      	beq.n	100453fa <AHB0periphContextRestore+0x7a>
    Osal_MemCpy4((uint32_t *)RNG, (uint32_t *)&ahb0->RNG_vr, sizeof(RNG_TypeDef));
100453ee:	0021      	movs	r1, r4
100453f0:	2288      	movs	r2, #136	@ 0x88
100453f2:	4821      	ldr	r0, [pc, #132]	@ (10045478 <AHB0periphContextRestore+0xf8>)
100453f4:	3174      	adds	r1, #116	@ 0x74
100453f6:	f7ff fd6b 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_PKA)) {
100453fa:	2080      	movs	r0, #128	@ 0x80
100453fc:	0240      	lsls	r0, r0, #9
100453fe:	f7ff fd7b 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
10045402:	2800      	cmp	r0, #0
10045404:	d005      	beq.n	10045412 <AHB0periphContextRestore+0x92>
#if defined(STM32WB06) || defined(STM32WB07)
    PKA->CSR = ahb0->PKA_CSR_vr;
    PKA->ISR = ahb0->PKA_ISR_vr;
    PKA->IEN = ahb0->PKA_IEN_vr;
#else
    PKA->CLRFR = 0x1A0000;
10045406:	22d0      	movs	r2, #208	@ 0xd0
10045408:	4b1c      	ldr	r3, [pc, #112]	@ (1004547c <AHB0periphContextRestore+0xfc>)
1004540a:	0352      	lsls	r2, r2, #13
1004540c:	609a      	str	r2, [r3, #8]
    PKA->CR = ahb0->PKA_CR_vr;
1004540e:	6f22      	ldr	r2, [r4, #112]	@ 0x70
10045410:	601a      	str	r2, [r3, #0]
#endif
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_CRC)) {
10045412:	2080      	movs	r0, #128	@ 0x80
10045414:	0140      	lsls	r0, r0, #5
10045416:	f7ff fd6f 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
1004541a:	2800      	cmp	r0, #0
1004541c:	d005      	beq.n	1004542a <AHB0periphContextRestore+0xaa>
    Osal_MemCpy4((uint32_t *)CRC, (uint32_t *)&ahb0->CRC_vr, sizeof(CRC_TypeDef));
1004541e:	0021      	movs	r1, r4
10045420:	2218      	movs	r2, #24
10045422:	4817      	ldr	r0, [pc, #92]	@ (10045480 <AHB0periphContextRestore+0x100>)
10045424:	3158      	adds	r1, #88	@ 0x58
10045426:	f7ff fd53 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOA)) {
1004542a:	2004      	movs	r0, #4
1004542c:	f7ff fd64 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
10045430:	2800      	cmp	r0, #0
10045432:	d00b      	beq.n	1004544c <AHB0periphContextRestore+0xcc>
    GPIOA->AFR[0] = ahb0->GPIOA_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
10045434:	2090      	movs	r0, #144	@ 0x90
10045436:	6a23      	ldr	r3, [r4, #32]
10045438:	05c0      	lsls	r0, r0, #23
1004543a:	6203      	str	r3, [r0, #32]
    GPIOA->AFR[1] = ahb0->GPIOA_vr.AFR[1];
1004543c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
1004543e:	222c      	movs	r2, #44	@ 0x2c
    GPIOA->AFR[1] = ahb0->GPIOA_vr.AFR[1];
10045440:	6243      	str	r3, [r0, #36]	@ 0x24
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
10045442:	6963      	ldr	r3, [r4, #20]
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
10045444:	0021      	movs	r1, r4
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
10045446:	6143      	str	r3, [r0, #20]
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
10045448:	f7ff fd42 	bl	10044ed0 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOB)) {
1004544c:	2008      	movs	r0, #8
1004544e:	f7ff fd53 	bl	10044ef8 <LL_AHB1_GRP1_IsEnabledClock>
10045452:	2800      	cmp	r0, #0
10045454:	d00b      	beq.n	1004546e <AHB0periphContextRestore+0xee>
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
    GPIOB->ODR = ahb0->GPIOB_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
10045456:	0021      	movs	r1, r4
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
10045458:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
1004545a:	480a      	ldr	r0, [pc, #40]	@ (10045484 <AHB0periphContextRestore+0x104>)
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004545c:	222c      	movs	r2, #44	@ 0x2c
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
1004545e:	6203      	str	r3, [r0, #32]
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
10045460:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
10045462:	312c      	adds	r1, #44	@ 0x2c
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
10045464:	6243      	str	r3, [r0, #36]	@ 0x24
    GPIOB->ODR = ahb0->GPIOB_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
10045466:	6c23      	ldr	r3, [r4, #64]	@ 0x40
10045468:	6143      	str	r3, [r0, #20]
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004546a:	f7ff fd31 	bl	10044ed0 <Osal_MemCpy4>
  }
}
1004546e:	bd10      	pop	{r4, pc}
10045470:	48400000 	.word	0x48400000
10045474:	48700000 	.word	0x48700000
10045478:	48600000 	.word	0x48600000
1004547c:	48300000 	.word	0x48300000
10045480:	48200000 	.word	0x48200000
10045484:	48100000 	.word	0x48100000

10045488 <cstackContextRestore>:
{
  uint8_t i;
  volatile uint32_t *ptr;

  i = 0;
  ptr = __vector_table[0].__ptr ;
10045488:	4b04      	ldr	r3, [pc, #16]	@ (1004549c <cstackContextRestore+0x14>)
1004548a:	681a      	ldr	r2, [r3, #0]
  ptr -= CSTACK_PREAMBLE_NUMBER;
1004548c:	0013      	movs	r3, r2
1004548e:	3b50      	subs	r3, #80	@ 0x50
  do
  {
    *ptr = cStackPreamble[i];
10045490:	c802      	ldmia	r0!, {r1}
10045492:	c302      	stmia	r3!, {r1}
    i++;
    ptr++;
  } while (i < CSTACK_PREAMBLE_NUMBER);
10045494:	429a      	cmp	r2, r3
10045496:	d1fb      	bne.n	10045490 <cstackContextRestore+0x8>

}
10045498:	4770      	bx	lr
1004549a:	46c0      	nop			@ (mov r8, r8)
1004549c:	10040000 	.word	0x10040000

100454a0 <cpuPeriphContextRestore>:
  */
static void cpuPeriphContextRestore(cpuPeriphT *cpuPeriph)
{
  uint8_t i;

  SCB->VTOR = cpuPeriph->SCB_VTOR_vr;
100454a0:	6802      	ldr	r2, [r0, #0]
100454a2:	4b0e      	ldr	r3, [pc, #56]	@ (100454dc <cpuPeriphContextRestore+0x3c>)
{
100454a4:	b530      	push	{r4, r5, lr}
  SCB->VTOR = cpuPeriph->SCB_VTOR_vr;
100454a6:	609a      	str	r2, [r3, #8]
  NVIC->ISER[0] = cpuPeriph->NVIC_ISER_vr;
100454a8:	6843      	ldr	r3, [r0, #4]
100454aa:	490d      	ldr	r1, [pc, #52]	@ (100454e0 <cpuPeriphContextRestore+0x40>)
  for (i=0; i<8; i++)
  {
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
100454ac:	0005      	movs	r5, r0
  NVIC->ISER[0] = cpuPeriph->NVIC_ISER_vr;
100454ae:	600b      	str	r3, [r1, #0]
100454b0:	2300      	movs	r3, #0
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
100454b2:	3508      	adds	r5, #8
100454b4:	009a      	lsls	r2, r3, #2
100454b6:	58ac      	ldr	r4, [r5, r2]
100454b8:	001a      	movs	r2, r3
100454ba:	32c0      	adds	r2, #192	@ 0xc0
100454bc:	0092      	lsls	r2, r2, #2
  for (i=0; i<8; i++)
100454be:	3301      	adds	r3, #1
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
100454c0:	508c      	str	r4, [r1, r2]
  for (i=0; i<8; i++)
100454c2:	2b08      	cmp	r3, #8
100454c4:	d1f6      	bne.n	100454b4 <cpuPeriphContextRestore+0x14>
  }
  *(volatile uint32_t *)SHPR3_REG = cpuPeriph->SYSTICK_IPR_vr;
100454c6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
100454c8:	4b06      	ldr	r3, [pc, #24]	@ (100454e4 <cpuPeriphContextRestore+0x44>)
100454ca:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = cpuPeriph->SYST_RVR_vr;
100454cc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
100454ce:	4b06      	ldr	r3, [pc, #24]	@ (100454e8 <cpuPeriphContextRestore+0x48>)
100454d0:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
100454d2:	2200      	movs	r2, #0
100454d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = cpuPeriph->SYST_CSR_vr;
100454d6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
100454d8:	601a      	str	r2, [r3, #0]
}
100454da:	bd30      	pop	{r4, r5, pc}
100454dc:	e000ed00 	.word	0xe000ed00
100454e0:	e000e100 	.word	0xe000e100
100454e4:	e000ed20 	.word	0xe000ed20
100454e8:	e000e010 	.word	0xe000e010

100454ec <prepareDeviceLowPower>:
  * @retval None
  */
void prepareDeviceLowPower(apb0PeriphT *apb0, apb1PeriphT *apb1,
                           apb2PeriphT *apb2, ahb0PeriphT *ahb0,
                           cpuPeriphT *cpuPeriph, uint32_t *cStackPreamble)
{
100454ec:	b570      	push	{r4, r5, r6, lr}
100454ee:	000e      	movs	r6, r1
100454f0:	0015      	movs	r5, r2
  /* Reset the wakeup flag before the low power mode */
  RAM_VR.WakeupFromSleepFlag = 0;
100454f2:	2200      	movs	r2, #0
{
100454f4:	001c      	movs	r4, r3
  RAM_VR.WakeupFromSleepFlag = 0;
100454f6:	4b0a      	ldr	r3, [pc, #40]	@ (10045520 <prepareDeviceLowPower+0x34>)
100454f8:	609a      	str	r2, [r3, #8]

  /* Save the APB0 peripheral configuration */
  APB0periphContextSave(apb0);
100454fa:	f7ff fd3b 	bl	10044f74 <APB0periphContextSave>

  /* Save the APB1 peripheral configuration */
  APB1periphContextSave(apb1);
100454fe:	0030      	movs	r0, r6
10045500:	f7ff fd88 	bl	10045014 <APB1periphContextSave>

  /* Save the APB2 peripheral configuration */
  APB2periphContextSave(apb2);
10045504:	0028      	movs	r0, r5
10045506:	f7ff fdcf 	bl	100450a8 <APB2periphContextSave>

  /* Save the AHB0 peripheral configuration */
  AHB0periphContextSave(ahb0);
1004550a:	0020      	movs	r0, r4
1004550c:	f7ff fdd2 	bl	100450b4 <AHB0periphContextSave>

  /* Save the first N c-stack location that will be restored at wakeup reset */
  cstackContextSave(cStackPreamble);
10045510:	9805      	ldr	r0, [sp, #20]
10045512:	f7ff fe37 	bl	10045184 <cstackContextSave>

  /* Save the CPU peripheral configuration (NVIC, SysTick, Vector Table) */
  cpuPeriphContextSave(cpuPeriph);
10045516:	9804      	ldr	r0, [sp, #16]
10045518:	f7ff fe40 	bl	1004519c <cpuPeriphContextSave>
}
1004551c:	bd70      	pop	{r4, r5, r6, pc}
1004551e:	46c0      	nop			@ (mov r8, r8)
10045520:	20000004 	.word	0x20000004

10045524 <restoreDeviceLowPower>:
  * @retval None
  */
void restoreDeviceLowPower(apb0PeriphT *apb0, apb1PeriphT *apb1,
                           apb2PeriphT *apb2, ahb0PeriphT *ahb0,
                           cpuPeriphT *cpuPeriph, uint32_t *cStackPreamble)
{
10045524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10045526:	001f      	movs	r7, r3
  /* Enable Watchdog IP if previous disabled */
  if (apb0->wdg_to_be_enabled)
10045528:	0003      	movs	r3, r0
1004552a:	33fc      	adds	r3, #252	@ 0xfc
{
1004552c:	0015      	movs	r5, r2
  if (apb0->wdg_to_be_enabled)
1004552e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
{
10045530:	0004      	movs	r4, r0
10045532:	000e      	movs	r6, r1
  if (apb0->wdg_to_be_enabled)
10045534:	2a00      	cmp	r2, #0
10045536:	d005      	beq.n	10045544 <restoreDeviceLowPower+0x20>
  {
    apb0->wdg_to_be_enabled = FALSE;
10045538:	2200      	movs	r2, #0
    LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_WDG);
1004553a:	2080      	movs	r0, #128	@ 0x80
    apb0->wdg_to_be_enabled = FALSE;
1004553c:	675a      	str	r2, [r3, #116]	@ 0x74
    LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_WDG);
1004553e:	01c0      	lsls	r0, r0, #7
10045540:	f7ff fce4 	bl	10044f0c <LL_APB0_GRP1_EnableClock>
  }

  /* No Wakeup from DEEPSTOP, so the peripehral configuration is not lost */
  if (RAM_VR.WakeupFromSleepFlag == 0)
10045544:	4b0b      	ldr	r3, [pc, #44]	@ (10045574 <restoreDeviceLowPower+0x50>)
10045546:	689b      	ldr	r3, [r3, #8]
10045548:	2b00      	cmp	r3, #0
1004554a:	d011      	beq.n	10045570 <restoreDeviceLowPower+0x4c>
  {
    return;
  }

  /* Restore the first N c-stack location that will be restored at wakeup reset */
  cstackContextRestore(cStackPreamble);
1004554c:	9807      	ldr	r0, [sp, #28]
1004554e:	f7ff ff9b 	bl	10045488 <cstackContextRestore>

  /* Restore the CPU peripheral configuration (NVIC, SysTick, Vector Table) */
  cpuPeriphContextRestore(cpuPeriph);
10045552:	9806      	ldr	r0, [sp, #24]
10045554:	f7ff ffa4 	bl	100454a0 <cpuPeriphContextRestore>

  /* Restore the AHB0 peripheral configuration */
  AHB0periphContextRestore(ahb0);
10045558:	0038      	movs	r0, r7
1004555a:	f7ff ff11 	bl	10045380 <AHB0periphContextRestore>

  /* Restore the APB0 peripheral configuration */
  APB0periphContextRestore(apb0);
1004555e:	0020      	movs	r0, r4
10045560:	f7ff fe40 	bl	100451e4 <APB0periphContextRestore>

  /* Restore the APB1 peripheral configuration */
  APB1periphContextRestore(apb1);
10045564:	0030      	movs	r0, r6
10045566:	f7ff fe91 	bl	1004528c <APB1periphContextRestore>

  /* Restore the APB2 peripheral configuration */
  APB2periphContextRestore(apb2);
1004556a:	0028      	movs	r0, r5
1004556c:	f7ff ff02 	bl	10045374 <APB2periphContextRestore>
}
10045570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10045572:	46c0      	nop			@ (mov r8, r8)
10045574:	20000004 	.word	0x20000004

10045578 <LL_PWR_IsEnabledPUPDCfg>:
{
10045578:	b580      	push	{r7, lr}
1004557a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
1004557c:	4b05      	ldr	r3, [pc, #20]	@ (10045594 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
1004557e:	681b      	ldr	r3, [r3, #0]
10045580:	2210      	movs	r2, #16
10045582:	4013      	ands	r3, r2
10045584:	2b10      	cmp	r3, #16
10045586:	d101      	bne.n	1004558c <LL_PWR_IsEnabledPUPDCfg+0x14>
10045588:	2301      	movs	r3, #1
1004558a:	e000      	b.n	1004558e <LL_PWR_IsEnabledPUPDCfg+0x16>
1004558c:	2300      	movs	r3, #0
}
1004558e:	0018      	movs	r0, r3
10045590:	46bd      	mov	sp, r7
10045592:	bd80      	pop	{r7, pc}
10045594:	48500000 	.word	0x48500000

10045598 <LL_PWR_EnableGPIOPullUp>:
{
10045598:	b580      	push	{r7, lr}
1004559a:	b082      	sub	sp, #8
1004559c:	af00      	add	r7, sp, #0
1004559e:	6078      	str	r0, [r7, #4]
100455a0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
100455a2:	687b      	ldr	r3, [r7, #4]
100455a4:	3304      	adds	r3, #4
100455a6:	681a      	ldr	r2, [r3, #0]
100455a8:	683b      	ldr	r3, [r7, #0]
100455aa:	43d9      	mvns	r1, r3
100455ac:	687b      	ldr	r3, [r7, #4]
100455ae:	3304      	adds	r3, #4
100455b0:	400a      	ands	r2, r1
100455b2:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
100455b4:	687b      	ldr	r3, [r7, #4]
100455b6:	6819      	ldr	r1, [r3, #0]
100455b8:	687b      	ldr	r3, [r7, #4]
100455ba:	683a      	ldr	r2, [r7, #0]
100455bc:	430a      	orrs	r2, r1
100455be:	601a      	str	r2, [r3, #0]
}
100455c0:	46c0      	nop			@ (mov r8, r8)
100455c2:	46bd      	mov	sp, r7
100455c4:	b002      	add	sp, #8
100455c6:	bd80      	pop	{r7, pc}

100455c8 <LL_AHB1_GRP1_EnableClock>:
{
100455c8:	b580      	push	{r7, lr}
100455ca:	b084      	sub	sp, #16
100455cc:	af00      	add	r7, sp, #0
100455ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100455d0:	4b07      	ldr	r3, [pc, #28]	@ (100455f0 <LL_AHB1_GRP1_EnableClock+0x28>)
100455d2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100455d4:	4b06      	ldr	r3, [pc, #24]	@ (100455f0 <LL_AHB1_GRP1_EnableClock+0x28>)
100455d6:	687a      	ldr	r2, [r7, #4]
100455d8:	430a      	orrs	r2, r1
100455da:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100455dc:	4b04      	ldr	r3, [pc, #16]	@ (100455f0 <LL_AHB1_GRP1_EnableClock+0x28>)
100455de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100455e0:	687a      	ldr	r2, [r7, #4]
100455e2:	4013      	ands	r3, r2
100455e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100455e6:	68fb      	ldr	r3, [r7, #12]
}
100455e8:	46c0      	nop			@ (mov r8, r8)
100455ea:	46bd      	mov	sp, r7
100455ec:	b004      	add	sp, #16
100455ee:	bd80      	pop	{r7, pc}
100455f0:	48400000 	.word	0x48400000

100455f4 <LL_APB1_GRP1_EnableClock>:
{
100455f4:	b580      	push	{r7, lr}
100455f6:	b084      	sub	sp, #16
100455f8:	af00      	add	r7, sp, #0
100455fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
100455fc:	4b07      	ldr	r3, [pc, #28]	@ (1004561c <LL_APB1_GRP1_EnableClock+0x28>)
100455fe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10045600:	4b06      	ldr	r3, [pc, #24]	@ (1004561c <LL_APB1_GRP1_EnableClock+0x28>)
10045602:	687a      	ldr	r2, [r7, #4]
10045604:	430a      	orrs	r2, r1
10045606:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10045608:	4b04      	ldr	r3, [pc, #16]	@ (1004561c <LL_APB1_GRP1_EnableClock+0x28>)
1004560a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004560c:	687a      	ldr	r2, [r7, #4]
1004560e:	4013      	ands	r3, r2
10045610:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10045612:	68fb      	ldr	r3, [r7, #12]
}
10045614:	46c0      	nop			@ (mov r8, r8)
10045616:	46bd      	mov	sp, r7
10045618:	b004      	add	sp, #16
1004561a:	bd80      	pop	{r7, pc}
1004561c:	48400000 	.word	0x48400000

10045620 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
10045620:	b580      	push	{r7, lr}
10045622:	b084      	sub	sp, #16
10045624:	af00      	add	r7, sp, #0
10045626:	0002      	movs	r2, r0
10045628:	6039      	str	r1, [r7, #0]
1004562a:	1dfb      	adds	r3, r7, #7
1004562c:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
1004562e:	2300      	movs	r3, #0
10045630:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
10045632:	683b      	ldr	r3, [r7, #0]
10045634:	2b00      	cmp	r3, #0
10045636:	d103      	bne.n	10045640 <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
10045638:	2302      	movs	r3, #2
1004563a:	425b      	negs	r3, r3
1004563c:	60fb      	str	r3, [r7, #12]
1004563e:	e026      	b.n	1004568e <BSP_COM_Init+0x6e>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
10045640:	1dfb      	adds	r3, r7, #7
10045642:	7819      	ldrb	r1, [r3, #0]
10045644:	1dfb      	adds	r3, r7, #7
10045646:	781a      	ldrb	r2, [r3, #0]
10045648:	4b13      	ldr	r3, [pc, #76]	@ (10045698 <BSP_COM_Init+0x78>)
1004564a:	0089      	lsls	r1, r1, #2
1004564c:	58c9      	ldr	r1, [r1, r3]
1004564e:	4b13      	ldr	r3, [pc, #76]	@ (1004569c <BSP_COM_Init+0x7c>)
10045650:	2094      	movs	r0, #148	@ 0x94
10045652:	4342      	muls	r2, r0
10045654:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
10045656:	1dfb      	adds	r3, r7, #7
10045658:	781b      	ldrb	r3, [r3, #0]
1004565a:	2294      	movs	r2, #148	@ 0x94
1004565c:	435a      	muls	r2, r3
1004565e:	4b0f      	ldr	r3, [pc, #60]	@ (1004569c <BSP_COM_Init+0x7c>)
10045660:	18d3      	adds	r3, r2, r3
10045662:	0018      	movs	r0, r3
10045664:	f000 f868 	bl	10045738 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
10045668:	68fb      	ldr	r3, [r7, #12]
1004566a:	2b00      	cmp	r3, #0
1004566c:	d10f      	bne.n	1004568e <BSP_COM_Init+0x6e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
1004566e:	1dfb      	adds	r3, r7, #7
10045670:	781b      	ldrb	r3, [r3, #0]
10045672:	2294      	movs	r2, #148	@ 0x94
10045674:	435a      	muls	r2, r3
10045676:	4b09      	ldr	r3, [pc, #36]	@ (1004569c <BSP_COM_Init+0x7c>)
10045678:	18d3      	adds	r3, r2, r3
1004567a:	683a      	ldr	r2, [r7, #0]
1004567c:	0011      	movs	r1, r2
1004567e:	0018      	movs	r0, r3
10045680:	f000 f828 	bl	100456d4 <MX_USART1_Init>
10045684:	1e03      	subs	r3, r0, #0
10045686:	d002      	beq.n	1004568e <BSP_COM_Init+0x6e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
10045688:	2304      	movs	r3, #4
1004568a:	425b      	negs	r3, r3
1004568c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
1004568e:	68fb      	ldr	r3, [r7, #12]
}
10045690:	0018      	movs	r0, r3
10045692:	46bd      	mov	sp, r7
10045694:	b004      	add	sp, #16
10045696:	bd80      	pop	{r7, pc}
10045698:	20000cf8 	.word	0x20000cf8
1004569c:	20000924 	.word	0x20000924

100456a0 <__io_putchar>:
  return 1;
}

#elif defined(__GNUC__)
int __io_putchar(int ch)
{
100456a0:	b580      	push	{r7, lr}
100456a2:	b082      	sub	sp, #8
100456a4:	af00      	add	r7, sp, #0
100456a6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
100456a8:	4b08      	ldr	r3, [pc, #32]	@ (100456cc <__io_putchar+0x2c>)
100456aa:	781b      	ldrb	r3, [r3, #0]
100456ac:	001a      	movs	r2, r3
100456ae:	2394      	movs	r3, #148	@ 0x94
100456b0:	435a      	muls	r2, r3
100456b2:	4b07      	ldr	r3, [pc, #28]	@ (100456d0 <__io_putchar+0x30>)
100456b4:	18d0      	adds	r0, r2, r3
100456b6:	23fa      	movs	r3, #250	@ 0xfa
100456b8:	009b      	lsls	r3, r3, #2
100456ba:	1d39      	adds	r1, r7, #4
100456bc:	2201      	movs	r2, #1
100456be:	f004 f9b1 	bl	10049a24 <HAL_UART_Transmit>
  return ch;
100456c2:	687b      	ldr	r3, [r7, #4]
}
100456c4:	0018      	movs	r0, r3
100456c6:	46bd      	mov	sp, r7
100456c8:	b002      	add	sp, #8
100456ca:	bd80      	pop	{r7, pc}
100456cc:	200009b8 	.word	0x200009b8
100456d0:	20000924 	.word	0x20000924

100456d4 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
100456d4:	b580      	push	{r7, lr}
100456d6:	b082      	sub	sp, #8
100456d8:	af00      	add	r7, sp, #0
100456da:	6078      	str	r0, [r7, #4]
100456dc:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
100456de:	683b      	ldr	r3, [r7, #0]
100456e0:	681a      	ldr	r2, [r3, #0]
100456e2:	687b      	ldr	r3, [r7, #4]
100456e4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
100456e6:	683b      	ldr	r3, [r7, #0]
100456e8:	685a      	ldr	r2, [r3, #4]
100456ea:	687b      	ldr	r3, [r7, #4]
100456ec:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
100456ee:	683b      	ldr	r3, [r7, #0]
100456f0:	891b      	ldrh	r3, [r3, #8]
100456f2:	001a      	movs	r2, r3
100456f4:	687b      	ldr	r3, [r7, #4]
100456f6:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
100456f8:	683b      	ldr	r3, [r7, #0]
100456fa:	895b      	ldrh	r3, [r3, #10]
100456fc:	001a      	movs	r2, r3
100456fe:	687b      	ldr	r3, [r7, #4]
10045700:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
10045702:	687b      	ldr	r3, [r7, #4]
10045704:	220c      	movs	r2, #12
10045706:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
10045708:	683b      	ldr	r3, [r7, #0]
1004570a:	899b      	ldrh	r3, [r3, #12]
1004570c:	001a      	movs	r2, r3
1004570e:	687b      	ldr	r3, [r7, #4]
10045710:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
10045712:	687b      	ldr	r3, [r7, #4]
10045714:	2280      	movs	r2, #128	@ 0x80
10045716:	0212      	lsls	r2, r2, #8
10045718:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
1004571a:	687b      	ldr	r3, [r7, #4]
1004571c:	2200      	movs	r2, #0
1004571e:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
10045720:	687b      	ldr	r3, [r7, #4]
10045722:	2200      	movs	r2, #0
10045724:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
10045726:	687b      	ldr	r3, [r7, #4]
10045728:	0018      	movs	r0, r3
1004572a:	f004 f925 	bl	10049978 <HAL_UART_Init>
1004572e:	0003      	movs	r3, r0
}
10045730:	0018      	movs	r0, r3
10045732:	46bd      	mov	sp, r7
10045734:	b002      	add	sp, #8
10045736:	bd80      	pop	{r7, pc}

10045738 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
10045738:	b590      	push	{r4, r7, lr}
1004573a:	b089      	sub	sp, #36	@ 0x24
1004573c:	af00      	add	r7, sp, #0
1004573e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
10045740:	2004      	movs	r0, #4
10045742:	f7ff ff41 	bl	100455c8 <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
10045746:	2008      	movs	r0, #8
10045748:	f7ff ff3e 	bl	100455c8 <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
1004574c:	2380      	movs	r3, #128	@ 0x80
1004574e:	00db      	lsls	r3, r3, #3
10045750:	0018      	movs	r0, r3
10045752:	f7ff ff4f 	bl	100455f4 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
10045756:	240c      	movs	r4, #12
10045758:	193b      	adds	r3, r7, r4
1004575a:	2202      	movs	r2, #2
1004575c:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
1004575e:	193b      	adds	r3, r7, r4
10045760:	2202      	movs	r2, #2
10045762:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
10045764:	193b      	adds	r3, r7, r4
10045766:	2202      	movs	r2, #2
10045768:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
1004576a:	193b      	adds	r3, r7, r4
1004576c:	2201      	movs	r2, #1
1004576e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
10045770:	193b      	adds	r3, r7, r4
10045772:	2202      	movs	r2, #2
10045774:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
10045776:	193a      	adds	r2, r7, r4
10045778:	2390      	movs	r3, #144	@ 0x90
1004577a:	05db      	lsls	r3, r3, #23
1004577c:	0011      	movs	r1, r2
1004577e:	0018      	movs	r0, r3
10045780:	f000 fc90 	bl	100460a4 <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10045784:	f7ff fef8 	bl	10045578 <LL_PWR_IsEnabledPUPDCfg>
10045788:	1e03      	subs	r3, r0, #0
1004578a:	d006      	beq.n	1004579a <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
1004578c:	193b      	adds	r3, r7, r4
1004578e:	681b      	ldr	r3, [r3, #0]
10045790:	4a0a      	ldr	r2, [pc, #40]	@ (100457bc <UART_MspInit+0x84>)
10045792:	0019      	movs	r1, r3
10045794:	0010      	movs	r0, r2
10045796:	f7ff feff 	bl	10045598 <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
1004579a:	210c      	movs	r1, #12
1004579c:	187b      	adds	r3, r7, r1
1004579e:	2201      	movs	r2, #1
100457a0:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
100457a2:	187b      	adds	r3, r7, r1
100457a4:	2200      	movs	r2, #0
100457a6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
100457a8:	187b      	adds	r3, r7, r1
100457aa:	4a05      	ldr	r2, [pc, #20]	@ (100457c0 <UART_MspInit+0x88>)
100457ac:	0019      	movs	r1, r3
100457ae:	0010      	movs	r0, r2
100457b0:	f000 fc78 	bl	100460a4 <HAL_GPIO_Init>
}
100457b4:	46c0      	nop			@ (mov r8, r8)
100457b6:	46bd      	mov	sp, r7
100457b8:	b009      	add	sp, #36	@ 0x24
100457ba:	bd90      	pop	{r4, r7, pc}
100457bc:	48500020 	.word	0x48500020
100457c0:	48100000 	.word	0x48100000

100457c4 <__NVIC_SetPriority>:
{
100457c4:	b590      	push	{r4, r7, lr}
100457c6:	b083      	sub	sp, #12
100457c8:	af00      	add	r7, sp, #0
100457ca:	0002      	movs	r2, r0
100457cc:	6039      	str	r1, [r7, #0]
100457ce:	1dfb      	adds	r3, r7, #7
100457d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100457d2:	1dfb      	adds	r3, r7, #7
100457d4:	781b      	ldrb	r3, [r3, #0]
100457d6:	2b7f      	cmp	r3, #127	@ 0x7f
100457d8:	d828      	bhi.n	1004582c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100457da:	4a2f      	ldr	r2, [pc, #188]	@ (10045898 <__NVIC_SetPriority+0xd4>)
100457dc:	1dfb      	adds	r3, r7, #7
100457de:	781b      	ldrb	r3, [r3, #0]
100457e0:	b25b      	sxtb	r3, r3
100457e2:	089b      	lsrs	r3, r3, #2
100457e4:	33c0      	adds	r3, #192	@ 0xc0
100457e6:	009b      	lsls	r3, r3, #2
100457e8:	589b      	ldr	r3, [r3, r2]
100457ea:	1dfa      	adds	r2, r7, #7
100457ec:	7812      	ldrb	r2, [r2, #0]
100457ee:	0011      	movs	r1, r2
100457f0:	2203      	movs	r2, #3
100457f2:	400a      	ands	r2, r1
100457f4:	00d2      	lsls	r2, r2, #3
100457f6:	21ff      	movs	r1, #255	@ 0xff
100457f8:	4091      	lsls	r1, r2
100457fa:	000a      	movs	r2, r1
100457fc:	43d2      	mvns	r2, r2
100457fe:	401a      	ands	r2, r3
10045800:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10045802:	683b      	ldr	r3, [r7, #0]
10045804:	019b      	lsls	r3, r3, #6
10045806:	22ff      	movs	r2, #255	@ 0xff
10045808:	401a      	ands	r2, r3
1004580a:	1dfb      	adds	r3, r7, #7
1004580c:	781b      	ldrb	r3, [r3, #0]
1004580e:	0018      	movs	r0, r3
10045810:	2303      	movs	r3, #3
10045812:	4003      	ands	r3, r0
10045814:	00db      	lsls	r3, r3, #3
10045816:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045818:	481f      	ldr	r0, [pc, #124]	@ (10045898 <__NVIC_SetPriority+0xd4>)
1004581a:	1dfb      	adds	r3, r7, #7
1004581c:	781b      	ldrb	r3, [r3, #0]
1004581e:	b25b      	sxtb	r3, r3
10045820:	089b      	lsrs	r3, r3, #2
10045822:	430a      	orrs	r2, r1
10045824:	33c0      	adds	r3, #192	@ 0xc0
10045826:	009b      	lsls	r3, r3, #2
10045828:	501a      	str	r2, [r3, r0]
}
1004582a:	e031      	b.n	10045890 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004582c:	4a1b      	ldr	r2, [pc, #108]	@ (1004589c <__NVIC_SetPriority+0xd8>)
1004582e:	1dfb      	adds	r3, r7, #7
10045830:	781b      	ldrb	r3, [r3, #0]
10045832:	0019      	movs	r1, r3
10045834:	230f      	movs	r3, #15
10045836:	400b      	ands	r3, r1
10045838:	3b08      	subs	r3, #8
1004583a:	089b      	lsrs	r3, r3, #2
1004583c:	3306      	adds	r3, #6
1004583e:	009b      	lsls	r3, r3, #2
10045840:	18d3      	adds	r3, r2, r3
10045842:	3304      	adds	r3, #4
10045844:	681b      	ldr	r3, [r3, #0]
10045846:	1dfa      	adds	r2, r7, #7
10045848:	7812      	ldrb	r2, [r2, #0]
1004584a:	0011      	movs	r1, r2
1004584c:	2203      	movs	r2, #3
1004584e:	400a      	ands	r2, r1
10045850:	00d2      	lsls	r2, r2, #3
10045852:	21ff      	movs	r1, #255	@ 0xff
10045854:	4091      	lsls	r1, r2
10045856:	000a      	movs	r2, r1
10045858:	43d2      	mvns	r2, r2
1004585a:	401a      	ands	r2, r3
1004585c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004585e:	683b      	ldr	r3, [r7, #0]
10045860:	019b      	lsls	r3, r3, #6
10045862:	22ff      	movs	r2, #255	@ 0xff
10045864:	401a      	ands	r2, r3
10045866:	1dfb      	adds	r3, r7, #7
10045868:	781b      	ldrb	r3, [r3, #0]
1004586a:	0018      	movs	r0, r3
1004586c:	2303      	movs	r3, #3
1004586e:	4003      	ands	r3, r0
10045870:	00db      	lsls	r3, r3, #3
10045872:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045874:	4809      	ldr	r0, [pc, #36]	@ (1004589c <__NVIC_SetPriority+0xd8>)
10045876:	1dfb      	adds	r3, r7, #7
10045878:	781b      	ldrb	r3, [r3, #0]
1004587a:	001c      	movs	r4, r3
1004587c:	230f      	movs	r3, #15
1004587e:	4023      	ands	r3, r4
10045880:	3b08      	subs	r3, #8
10045882:	089b      	lsrs	r3, r3, #2
10045884:	430a      	orrs	r2, r1
10045886:	3306      	adds	r3, #6
10045888:	009b      	lsls	r3, r3, #2
1004588a:	18c3      	adds	r3, r0, r3
1004588c:	3304      	adds	r3, #4
1004588e:	601a      	str	r2, [r3, #0]
}
10045890:	46c0      	nop			@ (mov r8, r8)
10045892:	46bd      	mov	sp, r7
10045894:	b003      	add	sp, #12
10045896:	bd90      	pop	{r4, r7, pc}
10045898:	e000e100 	.word	0xe000e100
1004589c:	e000ed00 	.word	0xe000ed00

100458a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
100458a0:	b580      	push	{r7, lr}
100458a2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
100458a4:	f3bf 8f4f 	dsb	sy
}
100458a8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100458aa:	4b04      	ldr	r3, [pc, #16]	@ (100458bc <__NVIC_SystemReset+0x1c>)
100458ac:	4a04      	ldr	r2, [pc, #16]	@ (100458c0 <__NVIC_SystemReset+0x20>)
100458ae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100458b0:	f3bf 8f4f 	dsb	sy
}
100458b4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100458b6:	46c0      	nop			@ (mov r8, r8)
100458b8:	e7fd      	b.n	100458b6 <__NVIC_SystemReset+0x16>
100458ba:	46c0      	nop			@ (mov r8, r8)
100458bc:	e000ed00 	.word	0xe000ed00
100458c0:	05fa0004 	.word	0x05fa0004

100458c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
100458c4:	b590      	push	{r4, r7, lr}
100458c6:	b087      	sub	sp, #28
100458c8:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
100458ca:	4a64      	ldr	r2, [pc, #400]	@ (10045a5c <SystemInit+0x198>)
100458cc:	2394      	movs	r3, #148	@ 0x94
100458ce:	58d3      	ldr	r3, [r2, r3]
100458d0:	2b00      	cmp	r3, #0
100458d2:	d10e      	bne.n	100458f2 <SystemInit+0x2e>
100458d4:	4b62      	ldr	r3, [pc, #392]	@ (10045a60 <SystemInit+0x19c>)
100458d6:	691b      	ldr	r3, [r3, #16]
100458d8:	2b00      	cmp	r3, #0
100458da:	d103      	bne.n	100458e4 <SystemInit+0x20>
100458dc:	4b60      	ldr	r3, [pc, #384]	@ (10045a60 <SystemInit+0x19c>)
100458de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100458e0:	2b00      	cmp	r3, #0
100458e2:	d006      	beq.n	100458f2 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
100458e4:	4b5f      	ldr	r3, [pc, #380]	@ (10045a64 <SystemInit+0x1a0>)
100458e6:	2201      	movs	r2, #1
100458e8:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
100458ea:	f7fa fc7d 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
100458ee:	f7ff ffd7 	bl	100458a0 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
100458f2:	4b5d      	ldr	r3, [pc, #372]	@ (10045a68 <SystemInit+0x1a4>)
100458f4:	4a5d      	ldr	r2, [pc, #372]	@ (10045a6c <SystemInit+0x1a8>)
100458f6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
100458f8:	4b5b      	ldr	r3, [pc, #364]	@ (10045a68 <SystemInit+0x1a4>)
100458fa:	689a      	ldr	r2, [r3, #8]
100458fc:	4b59      	ldr	r3, [pc, #356]	@ (10045a64 <SystemInit+0x1a0>)
100458fe:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10045900:	4b57      	ldr	r3, [pc, #348]	@ (10045a60 <SystemInit+0x19c>)
10045902:	685a      	ldr	r2, [r3, #4]
10045904:	4b56      	ldr	r3, [pc, #344]	@ (10045a60 <SystemInit+0x19c>)
10045906:	2120      	movs	r1, #32
10045908:	430a      	orrs	r2, r1
1004590a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
1004590c:	4b54      	ldr	r3, [pc, #336]	@ (10045a60 <SystemInit+0x19c>)
1004590e:	685a      	ldr	r2, [r3, #4]
10045910:	4b53      	ldr	r3, [pc, #332]	@ (10045a60 <SystemInit+0x19c>)
10045912:	2140      	movs	r1, #64	@ 0x40
10045914:	430a      	orrs	r2, r1
10045916:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
10045918:	4b51      	ldr	r3, [pc, #324]	@ (10045a60 <SystemInit+0x19c>)
1004591a:	685a      	ldr	r2, [r3, #4]
1004591c:	4b50      	ldr	r3, [pc, #320]	@ (10045a60 <SystemInit+0x19c>)
1004591e:	2180      	movs	r1, #128	@ 0x80
10045920:	430a      	orrs	r2, r1
10045922:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10045924:	4b4e      	ldr	r3, [pc, #312]	@ (10045a60 <SystemInit+0x19c>)
10045926:	685a      	ldr	r2, [r3, #4]
10045928:	4b4d      	ldr	r3, [pc, #308]	@ (10045a60 <SystemInit+0x19c>)
1004592a:	4951      	ldr	r1, [pc, #324]	@ (10045a70 <SystemInit+0x1ac>)
1004592c:	400a      	ands	r2, r1
1004592e:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10045930:	46c0      	nop			@ (mov r8, r8)
10045932:	4b4b      	ldr	r3, [pc, #300]	@ (10045a60 <SystemInit+0x19c>)
10045934:	695b      	ldr	r3, [r3, #20]
10045936:	2204      	movs	r2, #4
10045938:	4013      	ands	r3, r2
1004593a:	2b04      	cmp	r3, #4
1004593c:	d1f9      	bne.n	10045932 <SystemInit+0x6e>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
1004593e:	4b48      	ldr	r3, [pc, #288]	@ (10045a60 <SystemInit+0x19c>)
10045940:	69db      	ldr	r3, [r3, #28]
10045942:	2230      	movs	r2, #48	@ 0x30
10045944:	4393      	bics	r3, r2
10045946:	001a      	movs	r2, r3
10045948:	4b45      	ldr	r3, [pc, #276]	@ (10045a60 <SystemInit+0x19c>)
1004594a:	2120      	movs	r1, #32
1004594c:	430a      	orrs	r2, r1
1004594e:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10045950:	4b43      	ldr	r3, [pc, #268]	@ (10045a60 <SystemInit+0x19c>)
10045952:	69da      	ldr	r2, [r3, #28]
10045954:	4b42      	ldr	r3, [pc, #264]	@ (10045a60 <SystemInit+0x19c>)
10045956:	4947      	ldr	r1, [pc, #284]	@ (10045a74 <SystemInit+0x1b0>)
10045958:	400a      	ands	r2, r1
1004595a:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
1004595c:	4b40      	ldr	r3, [pc, #256]	@ (10045a60 <SystemInit+0x19c>)
1004595e:	69da      	ldr	r2, [r3, #28]
10045960:	4b3f      	ldr	r3, [pc, #252]	@ (10045a60 <SystemInit+0x19c>)
10045962:	2180      	movs	r1, #128	@ 0x80
10045964:	0049      	lsls	r1, r1, #1
10045966:	430a      	orrs	r2, r1
10045968:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
1004596a:	4b43      	ldr	r3, [pc, #268]	@ (10045a78 <SystemInit+0x1b4>)
1004596c:	681b      	ldr	r3, [r3, #0]
1004596e:	4a43      	ldr	r2, [pc, #268]	@ (10045a7c <SystemInit+0x1b8>)
10045970:	4293      	cmp	r3, r2
10045972:	d055      	beq.n	10045a20 <SystemInit+0x15c>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10045974:	231f      	movs	r3, #31
10045976:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10045978:	2308      	movs	r3, #8
1004597a:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
1004597c:	230a      	movs	r3, #10
1004597e:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10045980:	2303      	movs	r3, #3
10045982:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10045984:	4b35      	ldr	r3, [pc, #212]	@ (10045a5c <SystemInit+0x198>)
10045986:	68db      	ldr	r3, [r3, #12]
10045988:	221e      	movs	r2, #30
1004598a:	4393      	bics	r3, r2
1004598c:	0019      	movs	r1, r3
1004598e:	68fb      	ldr	r3, [r7, #12]
10045990:	005a      	lsls	r2, r3, #1
10045992:	4b32      	ldr	r3, [pc, #200]	@ (10045a5c <SystemInit+0x198>)
10045994:	430a      	orrs	r2, r1
10045996:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10045998:	4b30      	ldr	r3, [pc, #192]	@ (10045a5c <SystemInit+0x198>)
1004599a:	68da      	ldr	r2, [r3, #12]
1004599c:	4b2f      	ldr	r3, [pc, #188]	@ (10045a5c <SystemInit+0x198>)
1004599e:	2101      	movs	r1, #1
100459a0:	430a      	orrs	r2, r1
100459a2:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
100459a4:	4b2d      	ldr	r3, [pc, #180]	@ (10045a5c <SystemInit+0x198>)
100459a6:	68db      	ldr	r3, [r3, #12]
100459a8:	4a35      	ldr	r2, [pc, #212]	@ (10045a80 <SystemInit+0x1bc>)
100459aa:	4013      	ands	r3, r2
100459ac:	0019      	movs	r1, r3
100459ae:	693b      	ldr	r3, [r7, #16]
100459b0:	061a      	lsls	r2, r3, #24
100459b2:	4b2a      	ldr	r3, [pc, #168]	@ (10045a5c <SystemInit+0x198>)
100459b4:	430a      	orrs	r2, r1
100459b6:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
100459b8:	4b28      	ldr	r3, [pc, #160]	@ (10045a5c <SystemInit+0x198>)
100459ba:	68da      	ldr	r2, [r3, #12]
100459bc:	4b27      	ldr	r3, [pc, #156]	@ (10045a5c <SystemInit+0x198>)
100459be:	2180      	movs	r1, #128	@ 0x80
100459c0:	0409      	lsls	r1, r1, #16
100459c2:	430a      	orrs	r2, r1
100459c4:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
100459c6:	4a26      	ldr	r2, [pc, #152]	@ (10045a60 <SystemInit+0x19c>)
100459c8:	2394      	movs	r3, #148	@ 0x94
100459ca:	58d3      	ldr	r3, [r2, r3]
100459cc:	4a2d      	ldr	r2, [pc, #180]	@ (10045a84 <SystemInit+0x1c0>)
100459ce:	401a      	ands	r2, r3
100459d0:	68bb      	ldr	r3, [r7, #8]
100459d2:	0199      	lsls	r1, r3, #6
100459d4:	23f0      	movs	r3, #240	@ 0xf0
100459d6:	009b      	lsls	r3, r3, #2
100459d8:	400b      	ands	r3, r1
100459da:	4921      	ldr	r1, [pc, #132]	@ (10045a60 <SystemInit+0x19c>)
100459dc:	4313      	orrs	r3, r2
100459de:	2294      	movs	r2, #148	@ 0x94
100459e0:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
100459e2:	4a1f      	ldr	r2, [pc, #124]	@ (10045a60 <SystemInit+0x19c>)
100459e4:	2394      	movs	r3, #148	@ 0x94
100459e6:	58d3      	ldr	r3, [r2, r3]
100459e8:	491d      	ldr	r1, [pc, #116]	@ (10045a60 <SystemInit+0x19c>)
100459ea:	2220      	movs	r2, #32
100459ec:	4313      	orrs	r3, r2
100459ee:	2294      	movs	r2, #148	@ 0x94
100459f0:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
100459f2:	4a1b      	ldr	r2, [pc, #108]	@ (10045a60 <SystemInit+0x19c>)
100459f4:	2394      	movs	r3, #148	@ 0x94
100459f6:	58d3      	ldr	r3, [r2, r3]
100459f8:	4a23      	ldr	r2, [pc, #140]	@ (10045a88 <SystemInit+0x1c4>)
100459fa:	401a      	ands	r2, r3
100459fc:	687b      	ldr	r3, [r7, #4]
100459fe:	02d9      	lsls	r1, r3, #11
10045a00:	23e0      	movs	r3, #224	@ 0xe0
10045a02:	019b      	lsls	r3, r3, #6
10045a04:	400b      	ands	r3, r1
10045a06:	4916      	ldr	r1, [pc, #88]	@ (10045a60 <SystemInit+0x19c>)
10045a08:	4313      	orrs	r3, r2
10045a0a:	2294      	movs	r2, #148	@ 0x94
10045a0c:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10045a0e:	4a14      	ldr	r2, [pc, #80]	@ (10045a60 <SystemInit+0x19c>)
10045a10:	2394      	movs	r3, #148	@ 0x94
10045a12:	58d3      	ldr	r3, [r2, r3]
10045a14:	4912      	ldr	r1, [pc, #72]	@ (10045a60 <SystemInit+0x19c>)
10045a16:	2280      	movs	r2, #128	@ 0x80
10045a18:	00d2      	lsls	r2, r2, #3
10045a1a:	4313      	orrs	r3, r2
10045a1c:	2294      	movs	r2, #148	@ 0x94
10045a1e:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10045a20:	2317      	movs	r3, #23
10045a22:	18fb      	adds	r3, r7, r3
10045a24:	2200      	movs	r2, #0
10045a26:	701a      	strb	r2, [r3, #0]
10045a28:	e00d      	b.n	10045a46 <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10045a2a:	2417      	movs	r4, #23
10045a2c:	193b      	adds	r3, r7, r4
10045a2e:	781b      	ldrb	r3, [r3, #0]
10045a30:	b25b      	sxtb	r3, r3
10045a32:	2103      	movs	r1, #3
10045a34:	0018      	movs	r0, r3
10045a36:	f7ff fec5 	bl	100457c4 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10045a3a:	0021      	movs	r1, r4
10045a3c:	187b      	adds	r3, r7, r1
10045a3e:	781a      	ldrb	r2, [r3, #0]
10045a40:	187b      	adds	r3, r7, r1
10045a42:	3201      	adds	r2, #1
10045a44:	701a      	strb	r2, [r3, #0]
10045a46:	2317      	movs	r3, #23
10045a48:	18fb      	adds	r3, r7, r3
10045a4a:	781b      	ldrb	r3, [r3, #0]
10045a4c:	2b1f      	cmp	r3, #31
10045a4e:	d9ec      	bls.n	10045a2a <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
10045a50:	b662      	cpsie	i
}
10045a52:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10045a54:	46c0      	nop			@ (mov r8, r8)
10045a56:	46bd      	mov	sp, r7
10045a58:	b007      	add	sp, #28
10045a5a:	bd90      	pop	{r4, r7, pc}
10045a5c:	48400000 	.word	0x48400000
10045a60:	48500000 	.word	0x48500000
10045a64:	20000004 	.word	0x20000004
10045a68:	e000ed00 	.word	0xe000ed00
10045a6c:	10040000 	.word	0x10040000
10045a70:	fffffeff 	.word	0xfffffeff
10045a74:	fffffbff 	.word	0xfffffbff
10045a78:	10001ef8 	.word	0x10001ef8
10045a7c:	fcbceccc 	.word	0xfcbceccc
10045a80:	c0ffffff 	.word	0xc0ffffff
10045a84:	fffffc3f 	.word	0xfffffc3f
10045a88:	ffffc7ff 	.word	0xffffc7ff

10045a8c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10045a8c:	b580      	push	{r7, lr}
10045a8e:	b082      	sub	sp, #8
10045a90:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10045a92:	4b13      	ldr	r3, [pc, #76]	@ (10045ae0 <SystemCoreClockUpdate+0x54>)
10045a94:	689b      	ldr	r3, [r3, #8]
10045a96:	085b      	lsrs	r3, r3, #1
10045a98:	b2da      	uxtb	r2, r3
10045a9a:	1dfb      	adds	r3, r7, #7
10045a9c:	2101      	movs	r1, #1
10045a9e:	400a      	ands	r2, r1
10045aa0:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10045aa2:	4b0f      	ldr	r3, [pc, #60]	@ (10045ae0 <SystemCoreClockUpdate+0x54>)
10045aa4:	689b      	ldr	r3, [r3, #8]
10045aa6:	0a1b      	lsrs	r3, r3, #8
10045aa8:	b2da      	uxtb	r2, r3
10045aaa:	1dbb      	adds	r3, r7, #6
10045aac:	2107      	movs	r1, #7
10045aae:	400a      	ands	r2, r1
10045ab0:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10045ab2:	1dfb      	adds	r3, r7, #7
10045ab4:	781b      	ldrb	r3, [r3, #0]
10045ab6:	2b00      	cmp	r3, #0
10045ab8:	d007      	beq.n	10045aca <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10045aba:	1dbb      	adds	r3, r7, #6
10045abc:	781b      	ldrb	r3, [r3, #0]
10045abe:	3b01      	subs	r3, #1
10045ac0:	4a08      	ldr	r2, [pc, #32]	@ (10045ae4 <SystemCoreClockUpdate+0x58>)
10045ac2:	40da      	lsrs	r2, r3
10045ac4:	4b08      	ldr	r3, [pc, #32]	@ (10045ae8 <SystemCoreClockUpdate+0x5c>)
10045ac6:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10045ac8:	e005      	b.n	10045ad6 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10045aca:	1dbb      	adds	r3, r7, #6
10045acc:	781b      	ldrb	r3, [r3, #0]
10045ace:	4a07      	ldr	r2, [pc, #28]	@ (10045aec <SystemCoreClockUpdate+0x60>)
10045ad0:	40da      	lsrs	r2, r3
10045ad2:	4b05      	ldr	r3, [pc, #20]	@ (10045ae8 <SystemCoreClockUpdate+0x5c>)
10045ad4:	601a      	str	r2, [r3, #0]
}
10045ad6:	46c0      	nop			@ (mov r8, r8)
10045ad8:	46bd      	mov	sp, r7
10045ada:	b002      	add	sp, #8
10045adc:	bd80      	pop	{r7, pc}
10045ade:	46c0      	nop			@ (mov r8, r8)
10045ae0:	48400000 	.word	0x48400000
10045ae4:	01e84800 	.word	0x01e84800
10045ae8:	20000cfc 	.word	0x20000cfc
10045aec:	03d09000 	.word	0x03d09000

10045af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10045af0:	b580      	push	{r7, lr}
10045af2:	b082      	sub	sp, #8
10045af4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10045af6:	1dfb      	adds	r3, r7, #7
10045af8:	2200      	movs	r2, #0
10045afa:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10045afc:	2003      	movs	r0, #3
10045afe:	f000 f80f 	bl	10045b20 <HAL_InitTick>
10045b02:	1e03      	subs	r3, r0, #0
10045b04:	d003      	beq.n	10045b0e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10045b06:	1dfb      	adds	r3, r7, #7
10045b08:	2201      	movs	r2, #1
10045b0a:	701a      	strb	r2, [r3, #0]
10045b0c:	e001      	b.n	10045b12 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10045b0e:	f7fb fabd 	bl	1004108c <HAL_MspInit>
  }

  /* Return function status */
  return status;
10045b12:	1dfb      	adds	r3, r7, #7
10045b14:	781b      	ldrb	r3, [r3, #0]
}
10045b16:	0018      	movs	r0, r3
10045b18:	46bd      	mov	sp, r7
10045b1a:	b002      	add	sp, #8
10045b1c:	bd80      	pop	{r7, pc}
	...

10045b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10045b20:	b590      	push	{r4, r7, lr}
10045b22:	b085      	sub	sp, #20
10045b24:	af00      	add	r7, sp, #0
10045b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10045b28:	230f      	movs	r3, #15
10045b2a:	18fb      	adds	r3, r7, r3
10045b2c:	2200      	movs	r2, #0
10045b2e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10045b30:	4b1d      	ldr	r3, [pc, #116]	@ (10045ba8 <HAL_InitTick+0x88>)
10045b32:	781b      	ldrb	r3, [r3, #0]
10045b34:	2b00      	cmp	r3, #0
10045b36:	d02c      	beq.n	10045b92 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10045b38:	f003 fd5c 	bl	100495f4 <HAL_RCC_GetSysClockFreq>
10045b3c:	0004      	movs	r4, r0
10045b3e:	4b1a      	ldr	r3, [pc, #104]	@ (10045ba8 <HAL_InitTick+0x88>)
10045b40:	781b      	ldrb	r3, [r3, #0]
10045b42:	0019      	movs	r1, r3
10045b44:	23fa      	movs	r3, #250	@ 0xfa
10045b46:	0098      	lsls	r0, r3, #2
10045b48:	f7fa fb72 	bl	10040230 <__udivsi3>
10045b4c:	0003      	movs	r3, r0
10045b4e:	0019      	movs	r1, r3
10045b50:	0020      	movs	r0, r4
10045b52:	f7fa fb6d 	bl	10040230 <__udivsi3>
10045b56:	0003      	movs	r3, r0
10045b58:	0018      	movs	r0, r3
10045b5a:	f000 f93c 	bl	10045dd6 <HAL_SYSTICK_Config>
10045b5e:	1e03      	subs	r3, r0, #0
10045b60:	d112      	bne.n	10045b88 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10045b62:	687b      	ldr	r3, [r7, #4]
10045b64:	2b03      	cmp	r3, #3
10045b66:	d80a      	bhi.n	10045b7e <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10045b68:	6879      	ldr	r1, [r7, #4]
10045b6a:	2301      	movs	r3, #1
10045b6c:	425b      	negs	r3, r3
10045b6e:	2200      	movs	r2, #0
10045b70:	0018      	movs	r0, r3
10045b72:	f000 f90b 	bl	10045d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10045b76:	4b0d      	ldr	r3, [pc, #52]	@ (10045bac <HAL_InitTick+0x8c>)
10045b78:	687a      	ldr	r2, [r7, #4]
10045b7a:	601a      	str	r2, [r3, #0]
10045b7c:	e00d      	b.n	10045b9a <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10045b7e:	230f      	movs	r3, #15
10045b80:	18fb      	adds	r3, r7, r3
10045b82:	2201      	movs	r2, #1
10045b84:	701a      	strb	r2, [r3, #0]
10045b86:	e008      	b.n	10045b9a <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10045b88:	230f      	movs	r3, #15
10045b8a:	18fb      	adds	r3, r7, r3
10045b8c:	2201      	movs	r2, #1
10045b8e:	701a      	strb	r2, [r3, #0]
10045b90:	e003      	b.n	10045b9a <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10045b92:	230f      	movs	r3, #15
10045b94:	18fb      	adds	r3, r7, r3
10045b96:	2201      	movs	r2, #1
10045b98:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10045b9a:	230f      	movs	r3, #15
10045b9c:	18fb      	adds	r3, r7, r3
10045b9e:	781b      	ldrb	r3, [r3, #0]
}
10045ba0:	0018      	movs	r0, r3
10045ba2:	46bd      	mov	sp, r7
10045ba4:	b005      	add	sp, #20
10045ba6:	bd90      	pop	{r4, r7, pc}
10045ba8:	20000d04 	.word	0x20000d04
10045bac:	20000d00 	.word	0x20000d00

10045bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10045bb0:	b580      	push	{r7, lr}
10045bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10045bb4:	4b05      	ldr	r3, [pc, #20]	@ (10045bcc <HAL_IncTick+0x1c>)
10045bb6:	781b      	ldrb	r3, [r3, #0]
10045bb8:	001a      	movs	r2, r3
10045bba:	4b05      	ldr	r3, [pc, #20]	@ (10045bd0 <HAL_IncTick+0x20>)
10045bbc:	681b      	ldr	r3, [r3, #0]
10045bbe:	18d2      	adds	r2, r2, r3
10045bc0:	4b03      	ldr	r3, [pc, #12]	@ (10045bd0 <HAL_IncTick+0x20>)
10045bc2:	601a      	str	r2, [r3, #0]
}
10045bc4:	46c0      	nop			@ (mov r8, r8)
10045bc6:	46bd      	mov	sp, r7
10045bc8:	bd80      	pop	{r7, pc}
10045bca:	46c0      	nop			@ (mov r8, r8)
10045bcc:	20000d04 	.word	0x20000d04
10045bd0:	200009bc 	.word	0x200009bc

10045bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10045bd4:	b580      	push	{r7, lr}
10045bd6:	af00      	add	r7, sp, #0
  return uwTick;
10045bd8:	4b02      	ldr	r3, [pc, #8]	@ (10045be4 <HAL_GetTick+0x10>)
10045bda:	681b      	ldr	r3, [r3, #0]
}
10045bdc:	0018      	movs	r0, r3
10045bde:	46bd      	mov	sp, r7
10045be0:	bd80      	pop	{r7, pc}
10045be2:	46c0      	nop			@ (mov r8, r8)
10045be4:	200009bc 	.word	0x200009bc

10045be8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10045be8:	b580      	push	{r7, lr}
10045bea:	af00      	add	r7, sp, #0
  return uwTickPrio;
10045bec:	4b02      	ldr	r3, [pc, #8]	@ (10045bf8 <HAL_GetTickPrio+0x10>)
10045bee:	681b      	ldr	r3, [r3, #0]
}
10045bf0:	0018      	movs	r0, r3
10045bf2:	46bd      	mov	sp, r7
10045bf4:	bd80      	pop	{r7, pc}
10045bf6:	46c0      	nop			@ (mov r8, r8)
10045bf8:	20000d00 	.word	0x20000d00

10045bfc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
10045bfc:	b580      	push	{r7, lr}
10045bfe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
10045c00:	4b04      	ldr	r3, [pc, #16]	@ (10045c14 <HAL_SuspendTick+0x18>)
10045c02:	681a      	ldr	r2, [r3, #0]
10045c04:	4b03      	ldr	r3, [pc, #12]	@ (10045c14 <HAL_SuspendTick+0x18>)
10045c06:	2102      	movs	r1, #2
10045c08:	438a      	bics	r2, r1
10045c0a:	601a      	str	r2, [r3, #0]
}
10045c0c:	46c0      	nop			@ (mov r8, r8)
10045c0e:	46bd      	mov	sp, r7
10045c10:	bd80      	pop	{r7, pc}
10045c12:	46c0      	nop			@ (mov r8, r8)
10045c14:	e000e010 	.word	0xe000e010

10045c18 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
10045c18:	b580      	push	{r7, lr}
10045c1a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
10045c1c:	4b04      	ldr	r3, [pc, #16]	@ (10045c30 <HAL_ResumeTick+0x18>)
10045c1e:	681a      	ldr	r2, [r3, #0]
10045c20:	4b03      	ldr	r3, [pc, #12]	@ (10045c30 <HAL_ResumeTick+0x18>)
10045c22:	2102      	movs	r1, #2
10045c24:	430a      	orrs	r2, r1
10045c26:	601a      	str	r2, [r3, #0]
}
10045c28:	46c0      	nop			@ (mov r8, r8)
10045c2a:	46bd      	mov	sp, r7
10045c2c:	bd80      	pop	{r7, pc}
10045c2e:	46c0      	nop			@ (mov r8, r8)
10045c30:	e000e010 	.word	0xe000e010

10045c34 <__NVIC_EnableIRQ>:
{
10045c34:	b580      	push	{r7, lr}
10045c36:	b082      	sub	sp, #8
10045c38:	af00      	add	r7, sp, #0
10045c3a:	0002      	movs	r2, r0
10045c3c:	1dfb      	adds	r3, r7, #7
10045c3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10045c40:	1dfb      	adds	r3, r7, #7
10045c42:	781b      	ldrb	r3, [r3, #0]
10045c44:	2b7f      	cmp	r3, #127	@ 0x7f
10045c46:	d809      	bhi.n	10045c5c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10045c48:	1dfb      	adds	r3, r7, #7
10045c4a:	781b      	ldrb	r3, [r3, #0]
10045c4c:	001a      	movs	r2, r3
10045c4e:	231f      	movs	r3, #31
10045c50:	401a      	ands	r2, r3
10045c52:	4b04      	ldr	r3, [pc, #16]	@ (10045c64 <__NVIC_EnableIRQ+0x30>)
10045c54:	2101      	movs	r1, #1
10045c56:	4091      	lsls	r1, r2
10045c58:	000a      	movs	r2, r1
10045c5a:	601a      	str	r2, [r3, #0]
}
10045c5c:	46c0      	nop			@ (mov r8, r8)
10045c5e:	46bd      	mov	sp, r7
10045c60:	b002      	add	sp, #8
10045c62:	bd80      	pop	{r7, pc}
10045c64:	e000e100 	.word	0xe000e100

10045c68 <__NVIC_SetPriority>:
{
10045c68:	b590      	push	{r4, r7, lr}
10045c6a:	b083      	sub	sp, #12
10045c6c:	af00      	add	r7, sp, #0
10045c6e:	0002      	movs	r2, r0
10045c70:	6039      	str	r1, [r7, #0]
10045c72:	1dfb      	adds	r3, r7, #7
10045c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10045c76:	1dfb      	adds	r3, r7, #7
10045c78:	781b      	ldrb	r3, [r3, #0]
10045c7a:	2b7f      	cmp	r3, #127	@ 0x7f
10045c7c:	d828      	bhi.n	10045cd0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045c7e:	4a2f      	ldr	r2, [pc, #188]	@ (10045d3c <__NVIC_SetPriority+0xd4>)
10045c80:	1dfb      	adds	r3, r7, #7
10045c82:	781b      	ldrb	r3, [r3, #0]
10045c84:	b25b      	sxtb	r3, r3
10045c86:	089b      	lsrs	r3, r3, #2
10045c88:	33c0      	adds	r3, #192	@ 0xc0
10045c8a:	009b      	lsls	r3, r3, #2
10045c8c:	589b      	ldr	r3, [r3, r2]
10045c8e:	1dfa      	adds	r2, r7, #7
10045c90:	7812      	ldrb	r2, [r2, #0]
10045c92:	0011      	movs	r1, r2
10045c94:	2203      	movs	r2, #3
10045c96:	400a      	ands	r2, r1
10045c98:	00d2      	lsls	r2, r2, #3
10045c9a:	21ff      	movs	r1, #255	@ 0xff
10045c9c:	4091      	lsls	r1, r2
10045c9e:	000a      	movs	r2, r1
10045ca0:	43d2      	mvns	r2, r2
10045ca2:	401a      	ands	r2, r3
10045ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10045ca6:	683b      	ldr	r3, [r7, #0]
10045ca8:	019b      	lsls	r3, r3, #6
10045caa:	22ff      	movs	r2, #255	@ 0xff
10045cac:	401a      	ands	r2, r3
10045cae:	1dfb      	adds	r3, r7, #7
10045cb0:	781b      	ldrb	r3, [r3, #0]
10045cb2:	0018      	movs	r0, r3
10045cb4:	2303      	movs	r3, #3
10045cb6:	4003      	ands	r3, r0
10045cb8:	00db      	lsls	r3, r3, #3
10045cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045cbc:	481f      	ldr	r0, [pc, #124]	@ (10045d3c <__NVIC_SetPriority+0xd4>)
10045cbe:	1dfb      	adds	r3, r7, #7
10045cc0:	781b      	ldrb	r3, [r3, #0]
10045cc2:	b25b      	sxtb	r3, r3
10045cc4:	089b      	lsrs	r3, r3, #2
10045cc6:	430a      	orrs	r2, r1
10045cc8:	33c0      	adds	r3, #192	@ 0xc0
10045cca:	009b      	lsls	r3, r3, #2
10045ccc:	501a      	str	r2, [r3, r0]
}
10045cce:	e031      	b.n	10045d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045cd0:	4a1b      	ldr	r2, [pc, #108]	@ (10045d40 <__NVIC_SetPriority+0xd8>)
10045cd2:	1dfb      	adds	r3, r7, #7
10045cd4:	781b      	ldrb	r3, [r3, #0]
10045cd6:	0019      	movs	r1, r3
10045cd8:	230f      	movs	r3, #15
10045cda:	400b      	ands	r3, r1
10045cdc:	3b08      	subs	r3, #8
10045cde:	089b      	lsrs	r3, r3, #2
10045ce0:	3306      	adds	r3, #6
10045ce2:	009b      	lsls	r3, r3, #2
10045ce4:	18d3      	adds	r3, r2, r3
10045ce6:	3304      	adds	r3, #4
10045ce8:	681b      	ldr	r3, [r3, #0]
10045cea:	1dfa      	adds	r2, r7, #7
10045cec:	7812      	ldrb	r2, [r2, #0]
10045cee:	0011      	movs	r1, r2
10045cf0:	2203      	movs	r2, #3
10045cf2:	400a      	ands	r2, r1
10045cf4:	00d2      	lsls	r2, r2, #3
10045cf6:	21ff      	movs	r1, #255	@ 0xff
10045cf8:	4091      	lsls	r1, r2
10045cfa:	000a      	movs	r2, r1
10045cfc:	43d2      	mvns	r2, r2
10045cfe:	401a      	ands	r2, r3
10045d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10045d02:	683b      	ldr	r3, [r7, #0]
10045d04:	019b      	lsls	r3, r3, #6
10045d06:	22ff      	movs	r2, #255	@ 0xff
10045d08:	401a      	ands	r2, r3
10045d0a:	1dfb      	adds	r3, r7, #7
10045d0c:	781b      	ldrb	r3, [r3, #0]
10045d0e:	0018      	movs	r0, r3
10045d10:	2303      	movs	r3, #3
10045d12:	4003      	ands	r3, r0
10045d14:	00db      	lsls	r3, r3, #3
10045d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045d18:	4809      	ldr	r0, [pc, #36]	@ (10045d40 <__NVIC_SetPriority+0xd8>)
10045d1a:	1dfb      	adds	r3, r7, #7
10045d1c:	781b      	ldrb	r3, [r3, #0]
10045d1e:	001c      	movs	r4, r3
10045d20:	230f      	movs	r3, #15
10045d22:	4023      	ands	r3, r4
10045d24:	3b08      	subs	r3, #8
10045d26:	089b      	lsrs	r3, r3, #2
10045d28:	430a      	orrs	r2, r1
10045d2a:	3306      	adds	r3, #6
10045d2c:	009b      	lsls	r3, r3, #2
10045d2e:	18c3      	adds	r3, r0, r3
10045d30:	3304      	adds	r3, #4
10045d32:	601a      	str	r2, [r3, #0]
}
10045d34:	46c0      	nop			@ (mov r8, r8)
10045d36:	46bd      	mov	sp, r7
10045d38:	b003      	add	sp, #12
10045d3a:	bd90      	pop	{r4, r7, pc}
10045d3c:	e000e100 	.word	0xe000e100
10045d40:	e000ed00 	.word	0xe000ed00

10045d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10045d44:	b580      	push	{r7, lr}
10045d46:	b082      	sub	sp, #8
10045d48:	af00      	add	r7, sp, #0
10045d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10045d4c:	687b      	ldr	r3, [r7, #4]
10045d4e:	1e5a      	subs	r2, r3, #1
10045d50:	2380      	movs	r3, #128	@ 0x80
10045d52:	045b      	lsls	r3, r3, #17
10045d54:	429a      	cmp	r2, r3
10045d56:	d301      	bcc.n	10045d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10045d58:	2301      	movs	r3, #1
10045d5a:	e010      	b.n	10045d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10045d5c:	4b0a      	ldr	r3, [pc, #40]	@ (10045d88 <SysTick_Config+0x44>)
10045d5e:	687a      	ldr	r2, [r7, #4]
10045d60:	3a01      	subs	r2, #1
10045d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10045d64:	2301      	movs	r3, #1
10045d66:	425b      	negs	r3, r3
10045d68:	2103      	movs	r1, #3
10045d6a:	0018      	movs	r0, r3
10045d6c:	f7ff ff7c 	bl	10045c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10045d70:	4b05      	ldr	r3, [pc, #20]	@ (10045d88 <SysTick_Config+0x44>)
10045d72:	2200      	movs	r2, #0
10045d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10045d76:	4b04      	ldr	r3, [pc, #16]	@ (10045d88 <SysTick_Config+0x44>)
10045d78:	2207      	movs	r2, #7
10045d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10045d7c:	2300      	movs	r3, #0
}
10045d7e:	0018      	movs	r0, r3
10045d80:	46bd      	mov	sp, r7
10045d82:	b002      	add	sp, #8
10045d84:	bd80      	pop	{r7, pc}
10045d86:	46c0      	nop			@ (mov r8, r8)
10045d88:	e000e010 	.word	0xe000e010

10045d8c <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10045d8c:	b580      	push	{r7, lr}
10045d8e:	b084      	sub	sp, #16
10045d90:	af00      	add	r7, sp, #0
10045d92:	60b9      	str	r1, [r7, #8]
10045d94:	607a      	str	r2, [r7, #4]
10045d96:	210f      	movs	r1, #15
10045d98:	187b      	adds	r3, r7, r1
10045d9a:	1c02      	adds	r2, r0, #0
10045d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10045d9e:	68ba      	ldr	r2, [r7, #8]
10045da0:	187b      	adds	r3, r7, r1
10045da2:	781b      	ldrb	r3, [r3, #0]
10045da4:	b25b      	sxtb	r3, r3
10045da6:	0011      	movs	r1, r2
10045da8:	0018      	movs	r0, r3
10045daa:	f7ff ff5d 	bl	10045c68 <__NVIC_SetPriority>
}
10045dae:	46c0      	nop			@ (mov r8, r8)
10045db0:	46bd      	mov	sp, r7
10045db2:	b004      	add	sp, #16
10045db4:	bd80      	pop	{r7, pc}

10045db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10045db6:	b580      	push	{r7, lr}
10045db8:	b082      	sub	sp, #8
10045dba:	af00      	add	r7, sp, #0
10045dbc:	0002      	movs	r2, r0
10045dbe:	1dfb      	adds	r3, r7, #7
10045dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10045dc2:	1dfb      	adds	r3, r7, #7
10045dc4:	781b      	ldrb	r3, [r3, #0]
10045dc6:	b25b      	sxtb	r3, r3
10045dc8:	0018      	movs	r0, r3
10045dca:	f7ff ff33 	bl	10045c34 <__NVIC_EnableIRQ>
}
10045dce:	46c0      	nop			@ (mov r8, r8)
10045dd0:	46bd      	mov	sp, r7
10045dd2:	b002      	add	sp, #8
10045dd4:	bd80      	pop	{r7, pc}

10045dd6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10045dd6:	b580      	push	{r7, lr}
10045dd8:	b082      	sub	sp, #8
10045dda:	af00      	add	r7, sp, #0
10045ddc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10045dde:	687b      	ldr	r3, [r7, #4]
10045de0:	0018      	movs	r0, r3
10045de2:	f7ff ffaf 	bl	10045d44 <SysTick_Config>
10045de6:	0003      	movs	r3, r0
}
10045de8:	0018      	movs	r0, r3
10045dea:	46bd      	mov	sp, r7
10045dec:	b002      	add	sp, #8
10045dee:	bd80      	pop	{r7, pc}

10045df0 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
10045df0:	b5b0      	push	{r4, r5, r7, lr}
10045df2:	b086      	sub	sp, #24
10045df4:	af00      	add	r7, sp, #0
10045df6:	60f8      	str	r0, [r7, #12]
10045df8:	60b9      	str	r1, [r7, #8]
10045dfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10045dfc:	4b1d      	ldr	r3, [pc, #116]	@ (10045e74 <HAL_FLASH_Program+0x84>)
10045dfe:	781b      	ldrb	r3, [r3, #0]
10045e00:	2b01      	cmp	r3, #1
10045e02:	d101      	bne.n	10045e08 <HAL_FLASH_Program+0x18>
10045e04:	2302      	movs	r3, #2
10045e06:	e031      	b.n	10045e6c <HAL_FLASH_Program+0x7c>
10045e08:	4b1a      	ldr	r3, [pc, #104]	@ (10045e74 <HAL_FLASH_Program+0x84>)
10045e0a:	2201      	movs	r2, #1
10045e0c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10045e0e:	4b19      	ldr	r3, [pc, #100]	@ (10045e74 <HAL_FLASH_Program+0x84>)
10045e10:	2200      	movs	r2, #0
10045e12:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10045e14:	2517      	movs	r5, #23
10045e16:	197c      	adds	r4, r7, r5
10045e18:	23fa      	movs	r3, #250	@ 0xfa
10045e1a:	009b      	lsls	r3, r3, #2
10045e1c:	0018      	movs	r0, r3
10045e1e:	f000 f82b 	bl	10045e78 <FLASH_WaitForLastOperation>
10045e22:	0003      	movs	r3, r0
10045e24:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
10045e26:	197b      	adds	r3, r7, r5
10045e28:	781b      	ldrb	r3, [r3, #0]
10045e2a:	2b00      	cmp	r3, #0
10045e2c:	d118      	bne.n	10045e60 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
10045e2e:	68fb      	ldr	r3, [r7, #12]
10045e30:	2b00      	cmp	r3, #0
10045e32:	d106      	bne.n	10045e42 <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
10045e34:	687a      	ldr	r2, [r7, #4]
10045e36:	68bb      	ldr	r3, [r7, #8]
10045e38:	0011      	movs	r1, r2
10045e3a:	0018      	movs	r0, r3
10045e3c:	f000 f856 	bl	10045eec <FLASH_Program_Word>
10045e40:	e005      	b.n	10045e4e <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
10045e42:	687a      	ldr	r2, [r7, #4]
10045e44:	68bb      	ldr	r3, [r7, #8]
10045e46:	0011      	movs	r1, r2
10045e48:	0018      	movs	r0, r3
10045e4a:	f000 f871 	bl	10045f30 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10045e4e:	2317      	movs	r3, #23
10045e50:	18fc      	adds	r4, r7, r3
10045e52:	23fa      	movs	r3, #250	@ 0xfa
10045e54:	009b      	lsls	r3, r3, #2
10045e56:	0018      	movs	r0, r3
10045e58:	f000 f80e 	bl	10045e78 <FLASH_WaitForLastOperation>
10045e5c:	0003      	movs	r3, r0
10045e5e:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10045e60:	4b04      	ldr	r3, [pc, #16]	@ (10045e74 <HAL_FLASH_Program+0x84>)
10045e62:	2200      	movs	r2, #0
10045e64:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
10045e66:	2317      	movs	r3, #23
10045e68:	18fb      	adds	r3, r7, r3
10045e6a:	781b      	ldrb	r3, [r3, #0]
}
10045e6c:	0018      	movs	r0, r3
10045e6e:	46bd      	mov	sp, r7
10045e70:	b006      	add	sp, #24
10045e72:	bdb0      	pop	{r4, r5, r7, pc}
10045e74:	200009c0 	.word	0x200009c0

10045e78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
10045e78:	b580      	push	{r7, lr}
10045e7a:	b084      	sub	sp, #16
10045e7c:	af00      	add	r7, sp, #0
10045e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10045e80:	f7ff fea8 	bl	10045bd4 <HAL_GetTick>
10045e84:	0003      	movs	r3, r0
10045e86:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10045e88:	e00c      	b.n	10045ea4 <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
10045e8a:	687b      	ldr	r3, [r7, #4]
10045e8c:	3301      	adds	r3, #1
10045e8e:	d009      	beq.n	10045ea4 <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
10045e90:	f7ff fea0 	bl	10045bd4 <HAL_GetTick>
10045e94:	0002      	movs	r2, r0
10045e96:	68fb      	ldr	r3, [r7, #12]
10045e98:	1ad3      	subs	r3, r2, r3
10045e9a:	687a      	ldr	r2, [r7, #4]
10045e9c:	429a      	cmp	r2, r3
10045e9e:	d801      	bhi.n	10045ea4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
10045ea0:	2303      	movs	r3, #3
10045ea2:	e01b      	b.n	10045edc <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10045ea4:	4b0f      	ldr	r3, [pc, #60]	@ (10045ee4 <FLASH_WaitForLastOperation+0x6c>)
10045ea6:	691b      	ldr	r3, [r3, #16]
10045ea8:	2201      	movs	r2, #1
10045eaa:	4013      	ands	r3, r2
10045eac:	2b01      	cmp	r3, #1
10045eae:	d1ec      	bne.n	10045e8a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
10045eb0:	4b0c      	ldr	r3, [pc, #48]	@ (10045ee4 <FLASH_WaitForLastOperation+0x6c>)
10045eb2:	691b      	ldr	r3, [r3, #16]
10045eb4:	220c      	movs	r2, #12
10045eb6:	4013      	ands	r3, r2
10045eb8:	2b0c      	cmp	r3, #12
10045eba:	d10e      	bne.n	10045eda <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
10045ebc:	4b09      	ldr	r3, [pc, #36]	@ (10045ee4 <FLASH_WaitForLastOperation+0x6c>)
10045ebe:	689a      	ldr	r2, [r3, #8]
10045ec0:	4b09      	ldr	r3, [pc, #36]	@ (10045ee8 <FLASH_WaitForLastOperation+0x70>)
10045ec2:	685b      	ldr	r3, [r3, #4]
10045ec4:	431a      	orrs	r2, r3
10045ec6:	4b08      	ldr	r3, [pc, #32]	@ (10045ee8 <FLASH_WaitForLastOperation+0x70>)
10045ec8:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
10045eca:	4b06      	ldr	r3, [pc, #24]	@ (10045ee4 <FLASH_WaitForLastOperation+0x6c>)
10045ecc:	691a      	ldr	r2, [r3, #16]
10045ece:	4b05      	ldr	r3, [pc, #20]	@ (10045ee4 <FLASH_WaitForLastOperation+0x6c>)
10045ed0:	210c      	movs	r1, #12
10045ed2:	430a      	orrs	r2, r1
10045ed4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
10045ed6:	2301      	movs	r3, #1
10045ed8:	e000      	b.n	10045edc <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
10045eda:	2300      	movs	r3, #0
}
10045edc:	0018      	movs	r0, r3
10045ede:	46bd      	mov	sp, r7
10045ee0:	b004      	add	sp, #16
10045ee2:	bd80      	pop	{r7, pc}
10045ee4:	40001000 	.word	0x40001000
10045ee8:	200009c0 	.word	0x200009c0

10045eec <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
10045eec:	b580      	push	{r7, lr}
10045eee:	b082      	sub	sp, #8
10045ef0:	af00      	add	r7, sp, #0
10045ef2:	6078      	str	r0, [r7, #4]
10045ef4:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10045ef6:	4b0c      	ldr	r3, [pc, #48]	@ (10045f28 <FLASH_Program_Word+0x3c>)
10045ef8:	691a      	ldr	r2, [r3, #16]
10045efa:	4b0b      	ldr	r3, [pc, #44]	@ (10045f28 <FLASH_Program_Word+0x3c>)
10045efc:	210f      	movs	r1, #15
10045efe:	430a      	orrs	r2, r1
10045f00:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10045f02:	687b      	ldr	r3, [r7, #4]
10045f04:	4a09      	ldr	r2, [pc, #36]	@ (10045f2c <FLASH_Program_Word+0x40>)
10045f06:	4694      	mov	ip, r2
10045f08:	4463      	add	r3, ip
10045f0a:	089a      	lsrs	r2, r3, #2
10045f0c:	4b06      	ldr	r3, [pc, #24]	@ (10045f28 <FLASH_Program_Word+0x3c>)
10045f0e:	03d2      	lsls	r2, r2, #15
10045f10:	0bd2      	lsrs	r2, r2, #15
10045f12:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
10045f14:	4b04      	ldr	r3, [pc, #16]	@ (10045f28 <FLASH_Program_Word+0x3c>)
10045f16:	683a      	ldr	r2, [r7, #0]
10045f18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
10045f1a:	4b03      	ldr	r3, [pc, #12]	@ (10045f28 <FLASH_Program_Word+0x3c>)
10045f1c:	2233      	movs	r2, #51	@ 0x33
10045f1e:	601a      	str	r2, [r3, #0]
}
10045f20:	46c0      	nop			@ (mov r8, r8)
10045f22:	46bd      	mov	sp, r7
10045f24:	b002      	add	sp, #8
10045f26:	bd80      	pop	{r7, pc}
10045f28:	40001000 	.word	0x40001000
10045f2c:	effc0000 	.word	0xeffc0000

10045f30 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
10045f30:	b580      	push	{r7, lr}
10045f32:	b084      	sub	sp, #16
10045f34:	af00      	add	r7, sp, #0
10045f36:	6078      	str	r0, [r7, #4]
10045f38:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
10045f3a:	683b      	ldr	r3, [r7, #0]
10045f3c:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10045f3e:	4b17      	ldr	r3, [pc, #92]	@ (10045f9c <FLASH_Program_Burst+0x6c>)
10045f40:	691a      	ldr	r2, [r3, #16]
10045f42:	4b16      	ldr	r3, [pc, #88]	@ (10045f9c <FLASH_Program_Burst+0x6c>)
10045f44:	210f      	movs	r1, #15
10045f46:	430a      	orrs	r2, r1
10045f48:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10045f4a:	687b      	ldr	r3, [r7, #4]
10045f4c:	4a14      	ldr	r2, [pc, #80]	@ (10045fa0 <FLASH_Program_Burst+0x70>)
10045f4e:	4694      	mov	ip, r2
10045f50:	4463      	add	r3, ip
10045f52:	089a      	lsrs	r2, r3, #2
10045f54:	4b11      	ldr	r3, [pc, #68]	@ (10045f9c <FLASH_Program_Burst+0x6c>)
10045f56:	03d2      	lsls	r2, r2, #15
10045f58:	0bd2      	lsrs	r2, r2, #15
10045f5a:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
10045f5c:	4a0f      	ldr	r2, [pc, #60]	@ (10045f9c <FLASH_Program_Burst+0x6c>)
10045f5e:	68fb      	ldr	r3, [r7, #12]
10045f60:	681b      	ldr	r3, [r3, #0]
10045f62:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
10045f64:	68fb      	ldr	r3, [r7, #12]
10045f66:	3304      	adds	r3, #4
10045f68:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
10045f6a:	4a0c      	ldr	r2, [pc, #48]	@ (10045f9c <FLASH_Program_Burst+0x6c>)
10045f6c:	68fb      	ldr	r3, [r7, #12]
10045f6e:	681b      	ldr	r3, [r3, #0]
10045f70:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
10045f72:	68fb      	ldr	r3, [r7, #12]
10045f74:	3304      	adds	r3, #4
10045f76:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
10045f78:	4a08      	ldr	r2, [pc, #32]	@ (10045f9c <FLASH_Program_Burst+0x6c>)
10045f7a:	68fb      	ldr	r3, [r7, #12]
10045f7c:	681b      	ldr	r3, [r3, #0]
10045f7e:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
10045f80:	68fb      	ldr	r3, [r7, #12]
10045f82:	3304      	adds	r3, #4
10045f84:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
10045f86:	4a05      	ldr	r2, [pc, #20]	@ (10045f9c <FLASH_Program_Burst+0x6c>)
10045f88:	68fb      	ldr	r3, [r7, #12]
10045f8a:	681b      	ldr	r3, [r3, #0]
10045f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
10045f8e:	4b03      	ldr	r3, [pc, #12]	@ (10045f9c <FLASH_Program_Burst+0x6c>)
10045f90:	22cc      	movs	r2, #204	@ 0xcc
10045f92:	601a      	str	r2, [r3, #0]
}
10045f94:	46c0      	nop			@ (mov r8, r8)
10045f96:	46bd      	mov	sp, r7
10045f98:	b004      	add	sp, #16
10045f9a:	bd80      	pop	{r7, pc}
10045f9c:	40001000 	.word	0x40001000
10045fa0:	effc0000 	.word	0xeffc0000

10045fa4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
10045fa4:	b5b0      	push	{r4, r5, r7, lr}
10045fa6:	b084      	sub	sp, #16
10045fa8:	af00      	add	r7, sp, #0
10045faa:	6078      	str	r0, [r7, #4]
10045fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10045fae:	4b27      	ldr	r3, [pc, #156]	@ (1004604c <HAL_FLASHEx_Erase+0xa8>)
10045fb0:	781b      	ldrb	r3, [r3, #0]
10045fb2:	2b01      	cmp	r3, #1
10045fb4:	d101      	bne.n	10045fba <HAL_FLASHEx_Erase+0x16>
10045fb6:	2302      	movs	r3, #2
10045fb8:	e043      	b.n	10046042 <HAL_FLASHEx_Erase+0x9e>
10045fba:	4b24      	ldr	r3, [pc, #144]	@ (1004604c <HAL_FLASHEx_Erase+0xa8>)
10045fbc:	2201      	movs	r2, #1
10045fbe:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10045fc0:	4b22      	ldr	r3, [pc, #136]	@ (1004604c <HAL_FLASHEx_Erase+0xa8>)
10045fc2:	2200      	movs	r2, #0
10045fc4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
10045fc6:	687b      	ldr	r3, [r7, #4]
10045fc8:	681b      	ldr	r3, [r3, #0]
10045fca:	2bff      	cmp	r3, #255	@ 0xff
10045fcc:	d10b      	bne.n	10045fe6 <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
10045fce:	f000 f83f 	bl	10046050 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10045fd2:	230f      	movs	r3, #15
10045fd4:	18fc      	adds	r4, r7, r3
10045fd6:	23fa      	movs	r3, #250	@ 0xfa
10045fd8:	009b      	lsls	r3, r3, #2
10045fda:	0018      	movs	r0, r3
10045fdc:	f7ff ff4c 	bl	10045e78 <FLASH_WaitForLastOperation>
10045fe0:	0003      	movs	r3, r0
10045fe2:	7023      	strb	r3, [r4, #0]
10045fe4:	e027      	b.n	10046036 <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
10045fe6:	683b      	ldr	r3, [r7, #0]
10045fe8:	2201      	movs	r2, #1
10045fea:	4252      	negs	r2, r2
10045fec:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10045fee:	687b      	ldr	r3, [r7, #4]
10045ff0:	685b      	ldr	r3, [r3, #4]
10045ff2:	60bb      	str	r3, [r7, #8]
10045ff4:	e017      	b.n	10046026 <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
10045ff6:	68bb      	ldr	r3, [r7, #8]
10045ff8:	0018      	movs	r0, r3
10045ffa:	f000 f839 	bl	10046070 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10045ffe:	250f      	movs	r5, #15
10046000:	197c      	adds	r4, r7, r5
10046002:	23fa      	movs	r3, #250	@ 0xfa
10046004:	009b      	lsls	r3, r3, #2
10046006:	0018      	movs	r0, r3
10046008:	f7ff ff36 	bl	10045e78 <FLASH_WaitForLastOperation>
1004600c:	0003      	movs	r3, r0
1004600e:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
10046010:	197b      	adds	r3, r7, r5
10046012:	781b      	ldrb	r3, [r3, #0]
10046014:	2b00      	cmp	r3, #0
10046016:	d003      	beq.n	10046020 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
10046018:	683b      	ldr	r3, [r7, #0]
1004601a:	68ba      	ldr	r2, [r7, #8]
1004601c:	601a      	str	r2, [r3, #0]
        break;
1004601e:	e00a      	b.n	10046036 <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10046020:	68bb      	ldr	r3, [r7, #8]
10046022:	3301      	adds	r3, #1
10046024:	60bb      	str	r3, [r7, #8]
10046026:	687b      	ldr	r3, [r7, #4]
10046028:	685a      	ldr	r2, [r3, #4]
1004602a:	687b      	ldr	r3, [r7, #4]
1004602c:	689b      	ldr	r3, [r3, #8]
1004602e:	18d3      	adds	r3, r2, r3
10046030:	68ba      	ldr	r2, [r7, #8]
10046032:	429a      	cmp	r2, r3
10046034:	d3df      	bcc.n	10045ff6 <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10046036:	4b05      	ldr	r3, [pc, #20]	@ (1004604c <HAL_FLASHEx_Erase+0xa8>)
10046038:	2200      	movs	r2, #0
1004603a:	701a      	strb	r2, [r3, #0]

  return status;
1004603c:	230f      	movs	r3, #15
1004603e:	18fb      	adds	r3, r7, r3
10046040:	781b      	ldrb	r3, [r3, #0]
}
10046042:	0018      	movs	r0, r3
10046044:	46bd      	mov	sp, r7
10046046:	b004      	add	sp, #16
10046048:	bdb0      	pop	{r4, r5, r7, pc}
1004604a:	46c0      	nop			@ (mov r8, r8)
1004604c:	200009c0 	.word	0x200009c0

10046050 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
10046050:	b580      	push	{r7, lr}
10046052:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10046054:	4b05      	ldr	r3, [pc, #20]	@ (1004606c <FLASH_MassErase+0x1c>)
10046056:	691a      	ldr	r2, [r3, #16]
10046058:	4b04      	ldr	r3, [pc, #16]	@ (1004606c <FLASH_MassErase+0x1c>)
1004605a:	210f      	movs	r1, #15
1004605c:	430a      	orrs	r2, r1
1004605e:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
10046060:	4b02      	ldr	r3, [pc, #8]	@ (1004606c <FLASH_MassErase+0x1c>)
10046062:	2222      	movs	r2, #34	@ 0x22
10046064:	601a      	str	r2, [r3, #0]
}
10046066:	46c0      	nop			@ (mov r8, r8)
10046068:	46bd      	mov	sp, r7
1004606a:	bd80      	pop	{r7, pc}
1004606c:	40001000 	.word	0x40001000

10046070 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
10046070:	b580      	push	{r7, lr}
10046072:	b082      	sub	sp, #8
10046074:	af00      	add	r7, sp, #0
10046076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10046078:	4b09      	ldr	r3, [pc, #36]	@ (100460a0 <FLASH_PageErase+0x30>)
1004607a:	691a      	ldr	r2, [r3, #16]
1004607c:	4b08      	ldr	r3, [pc, #32]	@ (100460a0 <FLASH_PageErase+0x30>)
1004607e:	210f      	movs	r1, #15
10046080:	430a      	orrs	r2, r1
10046082:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
10046084:	687b      	ldr	r3, [r7, #4]
10046086:	02db      	lsls	r3, r3, #11
10046088:	089a      	lsrs	r2, r3, #2
1004608a:	4b05      	ldr	r3, [pc, #20]	@ (100460a0 <FLASH_PageErase+0x30>)
1004608c:	03d2      	lsls	r2, r2, #15
1004608e:	0bd2      	lsrs	r2, r2, #15
10046090:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
10046092:	4b03      	ldr	r3, [pc, #12]	@ (100460a0 <FLASH_PageErase+0x30>)
10046094:	2211      	movs	r2, #17
10046096:	601a      	str	r2, [r3, #0]
}
10046098:	46c0      	nop			@ (mov r8, r8)
1004609a:	46bd      	mov	sp, r7
1004609c:	b002      	add	sp, #8
1004609e:	bd80      	pop	{r7, pc}
100460a0:	40001000 	.word	0x40001000

100460a4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100460a4:	b580      	push	{r7, lr}
100460a6:	b086      	sub	sp, #24
100460a8:	af00      	add	r7, sp, #0
100460aa:	6078      	str	r0, [r7, #4]
100460ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
100460ae:	2300      	movs	r3, #0
100460b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100460b2:	e194      	b.n	100463de <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
100460b4:	683b      	ldr	r3, [r7, #0]
100460b6:	681b      	ldr	r3, [r3, #0]
100460b8:	2101      	movs	r1, #1
100460ba:	697a      	ldr	r2, [r7, #20]
100460bc:	4091      	lsls	r1, r2
100460be:	000a      	movs	r2, r1
100460c0:	4013      	ands	r3, r2
100460c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
100460c4:	68fb      	ldr	r3, [r7, #12]
100460c6:	2b00      	cmp	r3, #0
100460c8:	d100      	bne.n	100460cc <HAL_GPIO_Init+0x28>
100460ca:	e185      	b.n	100463d8 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
100460cc:	683b      	ldr	r3, [r7, #0]
100460ce:	685b      	ldr	r3, [r3, #4]
100460d0:	2203      	movs	r2, #3
100460d2:	4013      	ands	r3, r2
100460d4:	2b01      	cmp	r3, #1
100460d6:	d005      	beq.n	100460e4 <HAL_GPIO_Init+0x40>
100460d8:	683b      	ldr	r3, [r7, #0]
100460da:	685b      	ldr	r3, [r3, #4]
100460dc:	2203      	movs	r2, #3
100460de:	4013      	ands	r3, r2
100460e0:	2b02      	cmp	r3, #2
100460e2:	d130      	bne.n	10046146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
100460e4:	687b      	ldr	r3, [r7, #4]
100460e6:	689b      	ldr	r3, [r3, #8]
100460e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
100460ea:	697b      	ldr	r3, [r7, #20]
100460ec:	005b      	lsls	r3, r3, #1
100460ee:	2203      	movs	r2, #3
100460f0:	409a      	lsls	r2, r3
100460f2:	0013      	movs	r3, r2
100460f4:	43da      	mvns	r2, r3
100460f6:	693b      	ldr	r3, [r7, #16]
100460f8:	4013      	ands	r3, r2
100460fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
100460fc:	683b      	ldr	r3, [r7, #0]
100460fe:	68da      	ldr	r2, [r3, #12]
10046100:	697b      	ldr	r3, [r7, #20]
10046102:	005b      	lsls	r3, r3, #1
10046104:	409a      	lsls	r2, r3
10046106:	0013      	movs	r3, r2
10046108:	693a      	ldr	r2, [r7, #16]
1004610a:	4313      	orrs	r3, r2
1004610c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004610e:	687b      	ldr	r3, [r7, #4]
10046110:	693a      	ldr	r2, [r7, #16]
10046112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10046114:	687b      	ldr	r3, [r7, #4]
10046116:	685b      	ldr	r3, [r3, #4]
10046118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
1004611a:	2201      	movs	r2, #1
1004611c:	697b      	ldr	r3, [r7, #20]
1004611e:	409a      	lsls	r2, r3
10046120:	0013      	movs	r3, r2
10046122:	43da      	mvns	r2, r3
10046124:	693b      	ldr	r3, [r7, #16]
10046126:	4013      	ands	r3, r2
10046128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
1004612a:	683b      	ldr	r3, [r7, #0]
1004612c:	685b      	ldr	r3, [r3, #4]
1004612e:	091b      	lsrs	r3, r3, #4
10046130:	2201      	movs	r2, #1
10046132:	401a      	ands	r2, r3
10046134:	697b      	ldr	r3, [r7, #20]
10046136:	409a      	lsls	r2, r3
10046138:	0013      	movs	r3, r2
1004613a:	693a      	ldr	r2, [r7, #16]
1004613c:	4313      	orrs	r3, r2
1004613e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10046140:	687b      	ldr	r3, [r7, #4]
10046142:	693a      	ldr	r2, [r7, #16]
10046144:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10046146:	683b      	ldr	r3, [r7, #0]
10046148:	685b      	ldr	r3, [r3, #4]
1004614a:	2203      	movs	r2, #3
1004614c:	4013      	ands	r3, r2
1004614e:	2b03      	cmp	r3, #3
10046150:	d017      	beq.n	10046182 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10046152:	687b      	ldr	r3, [r7, #4]
10046154:	68db      	ldr	r3, [r3, #12]
10046156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10046158:	697b      	ldr	r3, [r7, #20]
1004615a:	005b      	lsls	r3, r3, #1
1004615c:	2203      	movs	r2, #3
1004615e:	409a      	lsls	r2, r3
10046160:	0013      	movs	r3, r2
10046162:	43da      	mvns	r2, r3
10046164:	693b      	ldr	r3, [r7, #16]
10046166:	4013      	ands	r3, r2
10046168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
1004616a:	683b      	ldr	r3, [r7, #0]
1004616c:	689a      	ldr	r2, [r3, #8]
1004616e:	697b      	ldr	r3, [r7, #20]
10046170:	005b      	lsls	r3, r3, #1
10046172:	409a      	lsls	r2, r3
10046174:	0013      	movs	r3, r2
10046176:	693a      	ldr	r2, [r7, #16]
10046178:	4313      	orrs	r3, r2
1004617a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
1004617c:	687b      	ldr	r3, [r7, #4]
1004617e:	693a      	ldr	r2, [r7, #16]
10046180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
10046182:	683b      	ldr	r3, [r7, #0]
10046184:	685b      	ldr	r3, [r3, #4]
10046186:	2203      	movs	r2, #3
10046188:	4013      	ands	r3, r2
1004618a:	2b02      	cmp	r3, #2
1004618c:	d123      	bne.n	100461d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
1004618e:	697b      	ldr	r3, [r7, #20]
10046190:	08da      	lsrs	r2, r3, #3
10046192:	687b      	ldr	r3, [r7, #4]
10046194:	3208      	adds	r2, #8
10046196:	0092      	lsls	r2, r2, #2
10046198:	58d3      	ldr	r3, [r2, r3]
1004619a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
1004619c:	697b      	ldr	r3, [r7, #20]
1004619e:	2207      	movs	r2, #7
100461a0:	4013      	ands	r3, r2
100461a2:	009b      	lsls	r3, r3, #2
100461a4:	220f      	movs	r2, #15
100461a6:	409a      	lsls	r2, r3
100461a8:	0013      	movs	r3, r2
100461aa:	43da      	mvns	r2, r3
100461ac:	693b      	ldr	r3, [r7, #16]
100461ae:	4013      	ands	r3, r2
100461b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100461b2:	683b      	ldr	r3, [r7, #0]
100461b4:	691a      	ldr	r2, [r3, #16]
100461b6:	697b      	ldr	r3, [r7, #20]
100461b8:	2107      	movs	r1, #7
100461ba:	400b      	ands	r3, r1
100461bc:	009b      	lsls	r3, r3, #2
100461be:	409a      	lsls	r2, r3
100461c0:	0013      	movs	r3, r2
100461c2:	693a      	ldr	r2, [r7, #16]
100461c4:	4313      	orrs	r3, r2
100461c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
100461c8:	697b      	ldr	r3, [r7, #20]
100461ca:	08da      	lsrs	r2, r3, #3
100461cc:	687b      	ldr	r3, [r7, #4]
100461ce:	3208      	adds	r2, #8
100461d0:	0092      	lsls	r2, r2, #2
100461d2:	6939      	ldr	r1, [r7, #16]
100461d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100461d6:	687b      	ldr	r3, [r7, #4]
100461d8:	681b      	ldr	r3, [r3, #0]
100461da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
100461dc:	697b      	ldr	r3, [r7, #20]
100461de:	005b      	lsls	r3, r3, #1
100461e0:	2203      	movs	r2, #3
100461e2:	409a      	lsls	r2, r3
100461e4:	0013      	movs	r3, r2
100461e6:	43da      	mvns	r2, r3
100461e8:	693b      	ldr	r3, [r7, #16]
100461ea:	4013      	ands	r3, r2
100461ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
100461ee:	683b      	ldr	r3, [r7, #0]
100461f0:	685b      	ldr	r3, [r3, #4]
100461f2:	2203      	movs	r2, #3
100461f4:	401a      	ands	r2, r3
100461f6:	697b      	ldr	r3, [r7, #20]
100461f8:	005b      	lsls	r3, r3, #1
100461fa:	409a      	lsls	r2, r3
100461fc:	0013      	movs	r3, r2
100461fe:	693a      	ldr	r2, [r7, #16]
10046200:	4313      	orrs	r3, r2
10046202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10046204:	687b      	ldr	r3, [r7, #4]
10046206:	693a      	ldr	r2, [r7, #16]
10046208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
1004620a:	683b      	ldr	r3, [r7, #0]
1004620c:	685a      	ldr	r2, [r3, #4]
1004620e:	23c0      	movs	r3, #192	@ 0xc0
10046210:	029b      	lsls	r3, r3, #10
10046212:	4013      	ands	r3, r2
10046214:	d100      	bne.n	10046218 <HAL_GPIO_Init+0x174>
10046216:	e0df      	b.n	100463d8 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10046218:	683b      	ldr	r3, [r7, #0]
1004621a:	685a      	ldr	r2, [r3, #4]
1004621c:	2380      	movs	r3, #128	@ 0x80
1004621e:	02db      	lsls	r3, r3, #11
10046220:	4013      	ands	r3, r2
10046222:	d031      	beq.n	10046288 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
10046224:	2380      	movs	r3, #128	@ 0x80
10046226:	05db      	lsls	r3, r3, #23
10046228:	68db      	ldr	r3, [r3, #12]
1004622a:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
1004622c:	687a      	ldr	r2, [r7, #4]
1004622e:	2390      	movs	r3, #144	@ 0x90
10046230:	05db      	lsls	r3, r3, #23
10046232:	429a      	cmp	r2, r3
10046234:	d111      	bne.n	1004625a <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10046236:	2201      	movs	r2, #1
10046238:	697b      	ldr	r3, [r7, #20]
1004623a:	409a      	lsls	r2, r3
1004623c:	0013      	movs	r3, r2
1004623e:	43db      	mvns	r3, r3
10046240:	001a      	movs	r2, r3
10046242:	693b      	ldr	r3, [r7, #16]
10046244:	4013      	ands	r3, r2
10046246:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10046248:	2201      	movs	r2, #1
1004624a:	697b      	ldr	r3, [r7, #20]
1004624c:	409a      	lsls	r2, r3
1004624e:	0013      	movs	r3, r2
10046250:	001a      	movs	r2, r3
10046252:	693b      	ldr	r3, [r7, #16]
10046254:	4313      	orrs	r3, r2
10046256:	613b      	str	r3, [r7, #16]
10046258:	e012      	b.n	10046280 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004625a:	2201      	movs	r2, #1
1004625c:	697b      	ldr	r3, [r7, #20]
1004625e:	409a      	lsls	r2, r3
10046260:	0013      	movs	r3, r2
10046262:	041b      	lsls	r3, r3, #16
10046264:	43db      	mvns	r3, r3
10046266:	001a      	movs	r2, r3
10046268:	693b      	ldr	r3, [r7, #16]
1004626a:	4013      	ands	r3, r2
1004626c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004626e:	2201      	movs	r2, #1
10046270:	697b      	ldr	r3, [r7, #20]
10046272:	409a      	lsls	r2, r3
10046274:	0013      	movs	r3, r2
10046276:	041b      	lsls	r3, r3, #16
10046278:	001a      	movs	r2, r3
1004627a:	693b      	ldr	r3, [r7, #16]
1004627c:	4313      	orrs	r3, r2
1004627e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10046280:	2380      	movs	r3, #128	@ 0x80
10046282:	05db      	lsls	r3, r3, #23
10046284:	693a      	ldr	r2, [r7, #16]
10046286:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
10046288:	683b      	ldr	r3, [r7, #0]
1004628a:	685a      	ldr	r2, [r3, #4]
1004628c:	2380      	movs	r3, #128	@ 0x80
1004628e:	035b      	lsls	r3, r3, #13
10046290:	4013      	ands	r3, r2
10046292:	d031      	beq.n	100462f8 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
10046294:	2380      	movs	r3, #128	@ 0x80
10046296:	05db      	lsls	r3, r3, #23
10046298:	691b      	ldr	r3, [r3, #16]
1004629a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004629c:	687a      	ldr	r2, [r7, #4]
1004629e:	2390      	movs	r3, #144	@ 0x90
100462a0:	05db      	lsls	r3, r3, #23
100462a2:	429a      	cmp	r2, r3
100462a4:	d111      	bne.n	100462ca <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
100462a6:	2201      	movs	r2, #1
100462a8:	697b      	ldr	r3, [r7, #20]
100462aa:	409a      	lsls	r2, r3
100462ac:	0013      	movs	r3, r2
100462ae:	43db      	mvns	r3, r3
100462b0:	001a      	movs	r2, r3
100462b2:	693b      	ldr	r3, [r7, #16]
100462b4:	4013      	ands	r3, r2
100462b6:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100462b8:	2201      	movs	r2, #1
100462ba:	697b      	ldr	r3, [r7, #20]
100462bc:	409a      	lsls	r2, r3
100462be:	0013      	movs	r3, r2
100462c0:	001a      	movs	r2, r3
100462c2:	693b      	ldr	r3, [r7, #16]
100462c4:	4313      	orrs	r3, r2
100462c6:	613b      	str	r3, [r7, #16]
100462c8:	e012      	b.n	100462f0 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100462ca:	2201      	movs	r2, #1
100462cc:	697b      	ldr	r3, [r7, #20]
100462ce:	409a      	lsls	r2, r3
100462d0:	0013      	movs	r3, r2
100462d2:	041b      	lsls	r3, r3, #16
100462d4:	43db      	mvns	r3, r3
100462d6:	001a      	movs	r2, r3
100462d8:	693b      	ldr	r3, [r7, #16]
100462da:	4013      	ands	r3, r2
100462dc:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100462de:	2201      	movs	r2, #1
100462e0:	697b      	ldr	r3, [r7, #20]
100462e2:	409a      	lsls	r2, r3
100462e4:	0013      	movs	r3, r2
100462e6:	041b      	lsls	r3, r3, #16
100462e8:	001a      	movs	r2, r3
100462ea:	693b      	ldr	r3, [r7, #16]
100462ec:	4313      	orrs	r3, r2
100462ee:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
100462f0:	2380      	movs	r3, #128	@ 0x80
100462f2:	05db      	lsls	r3, r3, #23
100462f4:	693a      	ldr	r2, [r7, #16]
100462f6:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
100462f8:	683b      	ldr	r3, [r7, #0]
100462fa:	685a      	ldr	r2, [r3, #4]
100462fc:	2380      	movs	r3, #128	@ 0x80
100462fe:	03db      	lsls	r3, r3, #15
10046300:	4013      	ands	r3, r2
10046302:	d031      	beq.n	10046368 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
10046304:	2380      	movs	r3, #128	@ 0x80
10046306:	05db      	lsls	r3, r3, #23
10046308:	695b      	ldr	r3, [r3, #20]
1004630a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004630c:	687a      	ldr	r2, [r7, #4]
1004630e:	2390      	movs	r3, #144	@ 0x90
10046310:	05db      	lsls	r3, r3, #23
10046312:	429a      	cmp	r2, r3
10046314:	d111      	bne.n	1004633a <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
10046316:	2201      	movs	r2, #1
10046318:	697b      	ldr	r3, [r7, #20]
1004631a:	409a      	lsls	r2, r3
1004631c:	0013      	movs	r3, r2
1004631e:	43db      	mvns	r3, r3
10046320:	001a      	movs	r2, r3
10046322:	693b      	ldr	r3, [r7, #16]
10046324:	4013      	ands	r3, r2
10046326:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10046328:	2201      	movs	r2, #1
1004632a:	697b      	ldr	r3, [r7, #20]
1004632c:	409a      	lsls	r2, r3
1004632e:	0013      	movs	r3, r2
10046330:	001a      	movs	r2, r3
10046332:	693b      	ldr	r3, [r7, #16]
10046334:	4313      	orrs	r3, r2
10046336:	613b      	str	r3, [r7, #16]
10046338:	e012      	b.n	10046360 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004633a:	2201      	movs	r2, #1
1004633c:	697b      	ldr	r3, [r7, #20]
1004633e:	409a      	lsls	r2, r3
10046340:	0013      	movs	r3, r2
10046342:	041b      	lsls	r3, r3, #16
10046344:	43db      	mvns	r3, r3
10046346:	001a      	movs	r2, r3
10046348:	693b      	ldr	r3, [r7, #16]
1004634a:	4013      	ands	r3, r2
1004634c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004634e:	2201      	movs	r2, #1
10046350:	697b      	ldr	r3, [r7, #20]
10046352:	409a      	lsls	r2, r3
10046354:	0013      	movs	r3, r2
10046356:	041b      	lsls	r3, r3, #16
10046358:	001a      	movs	r2, r3
1004635a:	693b      	ldr	r3, [r7, #16]
1004635c:	4313      	orrs	r3, r2
1004635e:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10046360:	2380      	movs	r3, #128	@ 0x80
10046362:	05db      	lsls	r3, r3, #23
10046364:	693a      	ldr	r2, [r7, #16]
10046366:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10046368:	683b      	ldr	r3, [r7, #0]
1004636a:	685a      	ldr	r2, [r3, #4]
1004636c:	2380      	movs	r3, #128	@ 0x80
1004636e:	025b      	lsls	r3, r3, #9
10046370:	4013      	ands	r3, r2
10046372:	d031      	beq.n	100463d8 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
10046374:	2380      	movs	r3, #128	@ 0x80
10046376:	05db      	lsls	r3, r3, #23
10046378:	699b      	ldr	r3, [r3, #24]
1004637a:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
1004637c:	687a      	ldr	r2, [r7, #4]
1004637e:	2390      	movs	r3, #144	@ 0x90
10046380:	05db      	lsls	r3, r3, #23
10046382:	429a      	cmp	r2, r3
10046384:	d111      	bne.n	100463aa <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
10046386:	2201      	movs	r2, #1
10046388:	697b      	ldr	r3, [r7, #20]
1004638a:	409a      	lsls	r2, r3
1004638c:	0013      	movs	r3, r2
1004638e:	43db      	mvns	r3, r3
10046390:	001a      	movs	r2, r3
10046392:	693b      	ldr	r3, [r7, #16]
10046394:	4013      	ands	r3, r2
10046396:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10046398:	2201      	movs	r2, #1
1004639a:	697b      	ldr	r3, [r7, #20]
1004639c:	409a      	lsls	r2, r3
1004639e:	0013      	movs	r3, r2
100463a0:	001a      	movs	r2, r3
100463a2:	693b      	ldr	r3, [r7, #16]
100463a4:	4313      	orrs	r3, r2
100463a6:	613b      	str	r3, [r7, #16]
100463a8:	e012      	b.n	100463d0 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100463aa:	2201      	movs	r2, #1
100463ac:	697b      	ldr	r3, [r7, #20]
100463ae:	409a      	lsls	r2, r3
100463b0:	0013      	movs	r3, r2
100463b2:	041b      	lsls	r3, r3, #16
100463b4:	43db      	mvns	r3, r3
100463b6:	001a      	movs	r2, r3
100463b8:	693b      	ldr	r3, [r7, #16]
100463ba:	4013      	ands	r3, r2
100463bc:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100463be:	2201      	movs	r2, #1
100463c0:	697b      	ldr	r3, [r7, #20]
100463c2:	409a      	lsls	r2, r3
100463c4:	0013      	movs	r3, r2
100463c6:	041b      	lsls	r3, r3, #16
100463c8:	001a      	movs	r2, r3
100463ca:	693b      	ldr	r3, [r7, #16]
100463cc:	4313      	orrs	r3, r2
100463ce:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
100463d0:	2380      	movs	r3, #128	@ 0x80
100463d2:	05db      	lsls	r3, r3, #23
100463d4:	693a      	ldr	r2, [r7, #16]
100463d6:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
100463d8:	697b      	ldr	r3, [r7, #20]
100463da:	3301      	adds	r3, #1
100463dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100463de:	683b      	ldr	r3, [r7, #0]
100463e0:	681a      	ldr	r2, [r3, #0]
100463e2:	697b      	ldr	r3, [r7, #20]
100463e4:	40da      	lsrs	r2, r3
100463e6:	1e13      	subs	r3, r2, #0
100463e8:	d000      	beq.n	100463ec <HAL_GPIO_Init+0x348>
100463ea:	e663      	b.n	100460b4 <HAL_GPIO_Init+0x10>
  }
}
100463ec:	46c0      	nop			@ (mov r8, r8)
100463ee:	46c0      	nop			@ (mov r8, r8)
100463f0:	46bd      	mov	sp, r7
100463f2:	b006      	add	sp, #24
100463f4:	bd80      	pop	{r7, pc}

100463f6 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
100463f6:	b580      	push	{r7, lr}
100463f8:	b084      	sub	sp, #16
100463fa:	af00      	add	r7, sp, #0
100463fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
100463fe:	230f      	movs	r3, #15
10046400:	18fb      	adds	r3, r7, r3
10046402:	2200      	movs	r2, #0
10046404:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
10046406:	687b      	ldr	r3, [r7, #4]
10046408:	2b00      	cmp	r3, #0
1004640a:	d045      	beq.n	10046498 <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
1004640c:	687b      	ldr	r3, [r7, #4]
1004640e:	791b      	ldrb	r3, [r3, #4]
10046410:	b2db      	uxtb	r3, r3
10046412:	2b00      	cmp	r3, #0
10046414:	d103      	bne.n	1004641e <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
10046416:	687b      	ldr	r3, [r7, #4]
10046418:	0018      	movs	r0, r3
1004641a:	f7fa fe43 	bl	100410a4 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
1004641e:	f7ff fbd9 	bl	10045bd4 <HAL_GetTick>
10046422:	0003      	movs	r3, r0
10046424:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
10046426:	687b      	ldr	r3, [r7, #4]
10046428:	2202      	movs	r2, #2
1004642a:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004642c:	e011      	b.n	10046452 <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
1004642e:	687b      	ldr	r3, [r7, #4]
10046430:	681b      	ldr	r3, [r3, #0]
10046432:	2201      	movs	r2, #1
10046434:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
10046436:	f7ff fbcd 	bl	10045bd4 <HAL_GetTick>
1004643a:	0002      	movs	r2, r0
1004643c:	68bb      	ldr	r3, [r7, #8]
1004643e:	1ad2      	subs	r2, r2, r3
10046440:	23fa      	movs	r3, #250	@ 0xfa
10046442:	009b      	lsls	r3, r3, #2
10046444:	429a      	cmp	r2, r3
10046446:	d904      	bls.n	10046452 <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
10046448:	230f      	movs	r3, #15
1004644a:	18fb      	adds	r3, r7, r3
1004644c:	2203      	movs	r2, #3
1004644e:	701a      	strb	r2, [r3, #0]
        break;
10046450:	e006      	b.n	10046460 <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
10046452:	687b      	ldr	r3, [r7, #4]
10046454:	681b      	ldr	r3, [r3, #0]
10046456:	681b      	ldr	r3, [r3, #0]
10046458:	2201      	movs	r2, #1
1004645a:	4013      	ands	r3, r2
1004645c:	2b01      	cmp	r3, #1
1004645e:	d1e6      	bne.n	1004642e <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
10046460:	230f      	movs	r3, #15
10046462:	18fb      	adds	r3, r7, r3
10046464:	781b      	ldrb	r3, [r3, #0]
10046466:	2b00      	cmp	r3, #0
10046468:	d10f      	bne.n	1004648a <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
1004646a:	687b      	ldr	r3, [r7, #4]
1004646c:	681b      	ldr	r3, [r3, #0]
1004646e:	689a      	ldr	r2, [r3, #8]
10046470:	687b      	ldr	r3, [r7, #4]
10046472:	681b      	ldr	r3, [r3, #0]
10046474:	21d0      	movs	r1, #208	@ 0xd0
10046476:	0349      	lsls	r1, r1, #13
10046478:	430a      	orrs	r2, r1
1004647a:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
1004647c:	687b      	ldr	r3, [r7, #4]
1004647e:	2200      	movs	r2, #0
10046480:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
10046482:	687b      	ldr	r3, [r7, #4]
10046484:	2201      	movs	r2, #1
10046486:	711a      	strb	r2, [r3, #4]
10046488:	e00a      	b.n	100464a0 <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
1004648a:	687b      	ldr	r3, [r7, #4]
1004648c:	2204      	movs	r2, #4
1004648e:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
10046490:	687b      	ldr	r3, [r7, #4]
10046492:	2203      	movs	r2, #3
10046494:	711a      	strb	r2, [r3, #4]
10046496:	e003      	b.n	100464a0 <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
10046498:	230f      	movs	r3, #15
1004649a:	18fb      	adds	r3, r7, r3
1004649c:	2201      	movs	r2, #1
1004649e:	701a      	strb	r2, [r3, #0]
  }

  return err;
100464a0:	230f      	movs	r3, #15
100464a2:	18fb      	adds	r3, r7, r3
100464a4:	781b      	ldrb	r3, [r3, #0]
}
100464a6:	0018      	movs	r0, r3
100464a8:	46bd      	mov	sp, r7
100464aa:	b004      	add	sp, #16
100464ac:	bd80      	pop	{r7, pc}
	...

100464b0 <HAL_PKA_IRQHandler>:
  * @brief  This function handles PKA event interrupt request.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_IRQHandler(PKA_HandleTypeDef *hpka)
{
100464b0:	b580      	push	{r7, lr}
100464b2:	b086      	sub	sp, #24
100464b4:	af00      	add	r7, sp, #0
100464b6:	6078      	str	r0, [r7, #4]
#if defined (STM32WB06) || defined(STM32WB07)
  uint32_t itsource = READ_REG(hpka->Instance->IEN);
  uint32_t flag  =    READ_REG(hpka->Instance->ISR);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t mode = PKA_GetMode(hpka);
100464b8:	687b      	ldr	r3, [r7, #4]
100464ba:	0018      	movs	r0, r3
100464bc:	f000 f86a 	bl	10046594 <PKA_GetMode>
100464c0:	0003      	movs	r3, r0
100464c2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hpka->Instance->CR);
100464c4:	687b      	ldr	r3, [r7, #4]
100464c6:	681b      	ldr	r3, [r3, #0]
100464c8:	681b      	ldr	r3, [r3, #0]
100464ca:	613b      	str	r3, [r7, #16]
  uint32_t flag  =   READ_REG(hpka->Instance->SR);
100464cc:	687b      	ldr	r3, [r7, #4]
100464ce:	681b      	ldr	r3, [r3, #0]
100464d0:	685b      	ldr	r3, [r3, #4]
100464d2:	60fb      	str	r3, [r7, #12]
#endif /* STM32WB05 || STM32WB09 */

  /* Address error interrupt occurred */
  if (((itsource & PKA_IT_ADDRERR) == PKA_IT_ADDRERR) && ((flag & PKA_FLAG_ADDRERR) == PKA_FLAG_ADDRERR))
100464d4:	693a      	ldr	r2, [r7, #16]
100464d6:	2380      	movs	r3, #128	@ 0x80
100464d8:	035b      	lsls	r3, r3, #13
100464da:	4013      	ands	r3, r2
100464dc:	d00f      	beq.n	100464fe <HAL_PKA_IRQHandler+0x4e>
100464de:	68fa      	ldr	r2, [r7, #12]
100464e0:	2380      	movs	r3, #128	@ 0x80
100464e2:	035b      	lsls	r3, r3, #13
100464e4:	4013      	ands	r3, r2
100464e6:	d00a      	beq.n	100464fe <HAL_PKA_IRQHandler+0x4e>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_ADDRERR;
100464e8:	687b      	ldr	r3, [r7, #4]
100464ea:	689b      	ldr	r3, [r3, #8]
100464ec:	2201      	movs	r2, #1
100464ee:	431a      	orrs	r2, r3
100464f0:	687b      	ldr	r3, [r7, #4]
100464f2:	609a      	str	r2, [r3, #8]

    /* Clear ADDRERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_ADDRERR);
100464f4:	687b      	ldr	r3, [r7, #4]
100464f6:	681b      	ldr	r3, [r3, #0]
100464f8:	2280      	movs	r2, #128	@ 0x80
100464fa:	0352      	lsls	r2, r2, #13
100464fc:	609a      	str	r2, [r3, #8]
  }

  /* RAM access error interrupt occurred */
  if (((itsource & PKA_IT_RAMERR) == PKA_IT_RAMERR) && ((flag & PKA_FLAG_RAMERR) == PKA_FLAG_RAMERR))
100464fe:	693a      	ldr	r2, [r7, #16]
10046500:	2380      	movs	r3, #128	@ 0x80
10046502:	031b      	lsls	r3, r3, #12
10046504:	4013      	ands	r3, r2
10046506:	d00f      	beq.n	10046528 <HAL_PKA_IRQHandler+0x78>
10046508:	68fa      	ldr	r2, [r7, #12]
1004650a:	2380      	movs	r3, #128	@ 0x80
1004650c:	031b      	lsls	r3, r3, #12
1004650e:	4013      	ands	r3, r2
10046510:	d00a      	beq.n	10046528 <HAL_PKA_IRQHandler+0x78>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_RAMERR;
10046512:	687b      	ldr	r3, [r7, #4]
10046514:	689b      	ldr	r3, [r3, #8]
10046516:	2202      	movs	r2, #2
10046518:	431a      	orrs	r2, r3
1004651a:	687b      	ldr	r3, [r7, #4]
1004651c:	609a      	str	r2, [r3, #8]

    /* Clear RAMERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_RAMERR);
1004651e:	687b      	ldr	r3, [r7, #4]
10046520:	681b      	ldr	r3, [r3, #0]
10046522:	2280      	movs	r2, #128	@ 0x80
10046524:	0312      	lsls	r2, r2, #12
10046526:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB05 */
#if defined (STM32WB09)
  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
10046528:	697b      	ldr	r3, [r7, #20]
1004652a:	2b24      	cmp	r3, #36	@ 0x24
1004652c:	d10d      	bne.n	1004654a <HAL_PKA_IRQHandler+0x9a>
  {
    /* If error output result is different from 0xD60D, ecdsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != 0xD60DUL)
1004652e:	687b      	ldr	r3, [r7, #4]
10046530:	681a      	ldr	r2, [r3, #0]
10046532:	23f8      	movs	r3, #248	@ 0xf8
10046534:	011b      	lsls	r3, r3, #4
10046536:	58d3      	ldr	r3, [r2, r3]
10046538:	4a15      	ldr	r2, [pc, #84]	@ (10046590 <HAL_PKA_IRQHandler+0xe0>)
1004653a:	4293      	cmp	r3, r2
1004653c:	d005      	beq.n	1004654a <HAL_PKA_IRQHandler+0x9a>
    {
      hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
1004653e:	687b      	ldr	r3, [r7, #4]
10046540:	689b      	ldr	r3, [r3, #8]
10046542:	2208      	movs	r2, #8
10046544:	431a      	orrs	r2, r3
10046546:	687b      	ldr	r3, [r7, #4]
10046548:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB09 */

  /* Trigger the error callback if an error is present */
  if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
1004654a:	687b      	ldr	r3, [r7, #4]
1004654c:	689b      	ldr	r3, [r3, #8]
1004654e:	2b00      	cmp	r3, #0
10046550:	d003      	beq.n	1004655a <HAL_PKA_IRQHandler+0xaa>
  {
#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->ErrorCallback(hpka);
#else
    HAL_PKA_ErrorCallback(hpka);
10046552:	687b      	ldr	r3, [r7, #4]
10046554:	0018      	movs	r0, r3
10046556:	f7fc fd2b 	bl	10042fb0 <HAL_PKA_ErrorCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }

  /* End Of Operation interrupt occurred */
  if (((itsource & PKA_IT_PROCEND) == PKA_IT_PROCEND) && ((flag & PKA_FLAG_PROCEND) == PKA_FLAG_PROCEND))
1004655a:	693a      	ldr	r2, [r7, #16]
1004655c:	2380      	movs	r3, #128	@ 0x80
1004655e:	029b      	lsls	r3, r3, #10
10046560:	4013      	ands	r3, r2
10046562:	d010      	beq.n	10046586 <HAL_PKA_IRQHandler+0xd6>
10046564:	68fa      	ldr	r2, [r7, #12]
10046566:	2380      	movs	r3, #128	@ 0x80
10046568:	029b      	lsls	r3, r3, #10
1004656a:	4013      	ands	r3, r2
1004656c:	d00b      	beq.n	10046586 <HAL_PKA_IRQHandler+0xd6>
  {
    /* Clear PROCEND flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_PROCEND);
1004656e:	687b      	ldr	r3, [r7, #4]
10046570:	681b      	ldr	r3, [r3, #0]
10046572:	2280      	movs	r2, #128	@ 0x80
10046574:	0292      	lsls	r2, r2, #10
10046576:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
10046578:	687b      	ldr	r3, [r7, #4]
1004657a:	2201      	movs	r2, #1
1004657c:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->OperationCpltCallback(hpka);
#else
    HAL_PKA_OperationCpltCallback(hpka);
1004657e:	687b      	ldr	r3, [r7, #4]
10046580:	0018      	movs	r0, r3
10046582:	f7fc fd09 	bl	10042f98 <HAL_PKA_OperationCpltCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }
}
10046586:	46c0      	nop			@ (mov r8, r8)
10046588:	46bd      	mov	sp, r7
1004658a:	b006      	add	sp, #24
1004658c:	bd80      	pop	{r7, pc}
1004658e:	46c0      	nop			@ (mov r8, r8)
10046590:	0000d60d 	.word	0x0000d60d

10046594 <PKA_GetMode>:
  * @brief  Get PKA operating mode.
  * @param  hpka PKA handle
  * @retval Return the current mode
  */
uint32_t PKA_GetMode(const PKA_HandleTypeDef *hpka)
{
10046594:	b580      	push	{r7, lr}
10046596:	b082      	sub	sp, #8
10046598:	af00      	add	r7, sp, #0
1004659a:	6078      	str	r0, [r7, #4]
  /* return the shifted PKA_CR_MODE value */
  return (uint32_t)(READ_BIT(hpka->Instance->CR, PKA_CR_MODE) >> PKA_CR_MODE_Pos);
1004659c:	687b      	ldr	r3, [r7, #4]
1004659e:	681b      	ldr	r3, [r3, #0]
100465a0:	681b      	ldr	r3, [r3, #0]
100465a2:	0a1b      	lsrs	r3, r3, #8
100465a4:	223f      	movs	r2, #63	@ 0x3f
100465a6:	4013      	ands	r3, r2
}
100465a8:	0018      	movs	r0, r3
100465aa:	46bd      	mov	sp, r7
100465ac:	b002      	add	sp, #8
100465ae:	bd80      	pop	{r7, pc}

100465b0 <LL_PWR_EnableGPIORET>:
{
100465b0:	b580      	push	{r7, lr}
100465b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_GPIORET);
100465b4:	4b04      	ldr	r3, [pc, #16]	@ (100465c8 <LL_PWR_EnableGPIORET+0x18>)
100465b6:	685a      	ldr	r2, [r3, #4]
100465b8:	4b03      	ldr	r3, [pc, #12]	@ (100465c8 <LL_PWR_EnableGPIORET+0x18>)
100465ba:	2180      	movs	r1, #128	@ 0x80
100465bc:	0049      	lsls	r1, r1, #1
100465be:	430a      	orrs	r2, r1
100465c0:	605a      	str	r2, [r3, #4]
}
100465c2:	46c0      	nop			@ (mov r8, r8)
100465c4:	46bd      	mov	sp, r7
100465c6:	bd80      	pop	{r7, pc}
100465c8:	48500000 	.word	0x48500000

100465cc <LL_PWR_GetWakeupSource>:
{
100465cc:	b580      	push	{r7, lr}
100465ce:	b082      	sub	sp, #8
100465d0:	af00      	add	r7, sp, #0
  wakeup_source = READ_REG(PWR->SR1) & 0x0000FFFF;
100465d2:	4b07      	ldr	r3, [pc, #28]	@ (100465f0 <LL_PWR_GetWakeupSource+0x24>)
100465d4:	691b      	ldr	r3, [r3, #16]
100465d6:	041b      	lsls	r3, r3, #16
100465d8:	0c1b      	lsrs	r3, r3, #16
100465da:	607b      	str	r3, [r7, #4]
  return (uint32_t)(wakeup_source | (READ_REG(PWR->SR3) << 16));
100465dc:	4b04      	ldr	r3, [pc, #16]	@ (100465f0 <LL_PWR_GetWakeupSource+0x24>)
100465de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100465e0:	041a      	lsls	r2, r3, #16
100465e2:	687b      	ldr	r3, [r7, #4]
100465e4:	4313      	orrs	r3, r2
}
100465e6:	0018      	movs	r0, r3
100465e8:	46bd      	mov	sp, r7
100465ea:	b002      	add	sp, #8
100465ec:	bd80      	pop	{r7, pc}
100465ee:	46c0      	nop			@ (mov r8, r8)
100465f0:	48500000 	.word	0x48500000

100465f4 <LL_PWR_ClearWakeupSource>:
{
100465f4:	b580      	push	{r7, lr}
100465f6:	b082      	sub	sp, #8
100465f8:	af00      	add	r7, sp, #0
100465fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(PWR->SR1, (source & 0x0000FFFF));
100465fc:	4b06      	ldr	r3, [pc, #24]	@ (10046618 <LL_PWR_ClearWakeupSource+0x24>)
100465fe:	687a      	ldr	r2, [r7, #4]
10046600:	0412      	lsls	r2, r2, #16
10046602:	0c12      	lsrs	r2, r2, #16
10046604:	611a      	str	r2, [r3, #16]
  WRITE_REG(PWR->SR3, (source >> 16));
10046606:	4b04      	ldr	r3, [pc, #16]	@ (10046618 <LL_PWR_ClearWakeupSource+0x24>)
10046608:	687a      	ldr	r2, [r7, #4]
1004660a:	0c12      	lsrs	r2, r2, #16
1004660c:	639a      	str	r2, [r3, #56]	@ 0x38
}
1004660e:	46c0      	nop			@ (mov r8, r8)
10046610:	46bd      	mov	sp, r7
10046612:	b002      	add	sp, #8
10046614:	bd80      	pop	{r7, pc}
10046616:	46c0      	nop			@ (mov r8, r8)
10046618:	48500000 	.word	0x48500000

1004661c <LL_RCC_HSI_IsReady>:
{
1004661c:	b580      	push	{r7, lr}
1004661e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10046620:	4b07      	ldr	r3, [pc, #28]	@ (10046640 <LL_RCC_HSI_IsReady+0x24>)
10046622:	681a      	ldr	r2, [r3, #0]
10046624:	2380      	movs	r3, #128	@ 0x80
10046626:	00db      	lsls	r3, r3, #3
10046628:	401a      	ands	r2, r3
1004662a:	2380      	movs	r3, #128	@ 0x80
1004662c:	00db      	lsls	r3, r3, #3
1004662e:	429a      	cmp	r2, r3
10046630:	d101      	bne.n	10046636 <LL_RCC_HSI_IsReady+0x1a>
10046632:	2301      	movs	r3, #1
10046634:	e000      	b.n	10046638 <LL_RCC_HSI_IsReady+0x1c>
10046636:	2300      	movs	r3, #0
}
10046638:	0018      	movs	r0, r3
1004663a:	46bd      	mov	sp, r7
1004663c:	bd80      	pop	{r7, pc}
1004663e:	46c0      	nop			@ (mov r8, r8)
10046640:	48400000 	.word	0x48400000

10046644 <LL_RCC_DIRECT_HSE_Disable>:
{
10046644:	b580      	push	{r7, lr}
10046646:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10046648:	4b09      	ldr	r3, [pc, #36]	@ (10046670 <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004664a:	689a      	ldr	r2, [r3, #8]
1004664c:	4b08      	ldr	r3, [pc, #32]	@ (10046670 <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004664e:	2104      	movs	r1, #4
10046650:	438a      	bics	r2, r1
10046652:	609a      	str	r2, [r3, #8]
  while (LL_RCC_HSI_IsReady() == 0);
10046654:	46c0      	nop			@ (mov r8, r8)
10046656:	f7ff ffe1 	bl	1004661c <LL_RCC_HSI_IsReady>
1004665a:	1e03      	subs	r3, r0, #0
1004665c:	d0fb      	beq.n	10046656 <LL_RCC_DIRECT_HSE_Disable+0x12>
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004665e:	4b04      	ldr	r3, [pc, #16]	@ (10046670 <LL_RCC_DIRECT_HSE_Disable+0x2c>)
10046660:	689a      	ldr	r2, [r3, #8]
10046662:	4b03      	ldr	r3, [pc, #12]	@ (10046670 <LL_RCC_DIRECT_HSE_Disable+0x2c>)
10046664:	2102      	movs	r1, #2
10046666:	438a      	bics	r2, r1
10046668:	609a      	str	r2, [r3, #8]
}
1004666a:	46c0      	nop			@ (mov r8, r8)
1004666c:	46bd      	mov	sp, r7
1004666e:	bd80      	pop	{r7, pc}
10046670:	48400000 	.word	0x48400000

10046674 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
10046674:	b580      	push	{r7, lr}
10046676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10046678:	4b05      	ldr	r3, [pc, #20]	@ (10046690 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004667a:	689b      	ldr	r3, [r3, #8]
1004667c:	2208      	movs	r2, #8
1004667e:	4013      	ands	r3, r2
10046680:	2b08      	cmp	r3, #8
10046682:	d101      	bne.n	10046688 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10046684:	2301      	movs	r3, #1
10046686:	e000      	b.n	1004668a <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10046688:	2300      	movs	r3, #0
}
1004668a:	0018      	movs	r0, r3
1004668c:	46bd      	mov	sp, r7
1004668e:	bd80      	pop	{r7, pc}
10046690:	48400000 	.word	0x48400000

10046694 <LL_RCC_LSE_Disable>:
{
10046694:	b580      	push	{r7, lr}
10046696:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10046698:	4b04      	ldr	r3, [pc, #16]	@ (100466ac <LL_RCC_LSE_Disable+0x18>)
1004669a:	681a      	ldr	r2, [r3, #0]
1004669c:	4b03      	ldr	r3, [pc, #12]	@ (100466ac <LL_RCC_LSE_Disable+0x18>)
1004669e:	2110      	movs	r1, #16
100466a0:	438a      	bics	r2, r1
100466a2:	601a      	str	r2, [r3, #0]
}
100466a4:	46c0      	nop			@ (mov r8, r8)
100466a6:	46bd      	mov	sp, r7
100466a8:	bd80      	pop	{r7, pc}
100466aa:	46c0      	nop			@ (mov r8, r8)
100466ac:	48400000 	.word	0x48400000

100466b0 <LL_RCC_LSE_IsReady>:
{
100466b0:	b580      	push	{r7, lr}
100466b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
100466b4:	4b05      	ldr	r3, [pc, #20]	@ (100466cc <LL_RCC_LSE_IsReady+0x1c>)
100466b6:	681b      	ldr	r3, [r3, #0]
100466b8:	2220      	movs	r2, #32
100466ba:	4013      	ands	r3, r2
100466bc:	2b20      	cmp	r3, #32
100466be:	d101      	bne.n	100466c4 <LL_RCC_LSE_IsReady+0x14>
100466c0:	2301      	movs	r3, #1
100466c2:	e000      	b.n	100466c6 <LL_RCC_LSE_IsReady+0x16>
100466c4:	2300      	movs	r3, #0
}
100466c6:	0018      	movs	r0, r3
100466c8:	46bd      	mov	sp, r7
100466ca:	bd80      	pop	{r7, pc}
100466cc:	48400000 	.word	0x48400000

100466d0 <LL_RCC_LSI_Disable>:
{
100466d0:	b580      	push	{r7, lr}
100466d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
100466d4:	4b04      	ldr	r3, [pc, #16]	@ (100466e8 <LL_RCC_LSI_Disable+0x18>)
100466d6:	681a      	ldr	r2, [r3, #0]
100466d8:	4b03      	ldr	r3, [pc, #12]	@ (100466e8 <LL_RCC_LSI_Disable+0x18>)
100466da:	2104      	movs	r1, #4
100466dc:	438a      	bics	r2, r1
100466de:	601a      	str	r2, [r3, #0]
}
100466e0:	46c0      	nop			@ (mov r8, r8)
100466e2:	46bd      	mov	sp, r7
100466e4:	bd80      	pop	{r7, pc}
100466e6:	46c0      	nop			@ (mov r8, r8)
100466e8:	48400000 	.word	0x48400000

100466ec <LL_RCC_LSI_IsReady>:
{
100466ec:	b580      	push	{r7, lr}
100466ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
100466f0:	4b05      	ldr	r3, [pc, #20]	@ (10046708 <LL_RCC_LSI_IsReady+0x1c>)
100466f2:	681b      	ldr	r3, [r3, #0]
100466f4:	2208      	movs	r2, #8
100466f6:	4013      	ands	r3, r2
100466f8:	2b08      	cmp	r3, #8
100466fa:	d101      	bne.n	10046700 <LL_RCC_LSI_IsReady+0x14>
100466fc:	2301      	movs	r3, #1
100466fe:	e000      	b.n	10046702 <LL_RCC_LSI_IsReady+0x16>
10046700:	2300      	movs	r3, #0
}
10046702:	0018      	movs	r0, r3
10046704:	46bd      	mov	sp, r7
10046706:	bd80      	pop	{r7, pc}
10046708:	48400000 	.word	0x48400000

1004670c <LL_APB2_GRP1_EnableClock>:
{
1004670c:	b580      	push	{r7, lr}
1004670e:	b084      	sub	sp, #16
10046710:	af00      	add	r7, sp, #0
10046712:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10046714:	4b07      	ldr	r3, [pc, #28]	@ (10046734 <LL_APB2_GRP1_EnableClock+0x28>)
10046716:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10046718:	4b06      	ldr	r3, [pc, #24]	@ (10046734 <LL_APB2_GRP1_EnableClock+0x28>)
1004671a:	687a      	ldr	r2, [r7, #4]
1004671c:	430a      	orrs	r2, r1
1004671e:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10046720:	4b04      	ldr	r3, [pc, #16]	@ (10046734 <LL_APB2_GRP1_EnableClock+0x28>)
10046722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10046724:	687a      	ldr	r2, [r7, #4]
10046726:	4013      	ands	r3, r2
10046728:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004672a:	68fb      	ldr	r3, [r7, #12]
}
1004672c:	46c0      	nop			@ (mov r8, r8)
1004672e:	46bd      	mov	sp, r7
10046730:	b004      	add	sp, #16
10046732:	bd80      	pop	{r7, pc}
10046734:	48400000 	.word	0x48400000

10046738 <LL_APB2_GRP1_IsEnabledClock>:
{
10046738:	b580      	push	{r7, lr}
1004673a:	b082      	sub	sp, #8
1004673c:	af00      	add	r7, sp, #0
1004673e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10046740:	4b06      	ldr	r3, [pc, #24]	@ (1004675c <LL_APB2_GRP1_IsEnabledClock+0x24>)
10046742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10046744:	687a      	ldr	r2, [r7, #4]
10046746:	4013      	ands	r3, r2
10046748:	687a      	ldr	r2, [r7, #4]
1004674a:	429a      	cmp	r2, r3
1004674c:	d101      	bne.n	10046752 <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004674e:	2301      	movs	r3, #1
10046750:	e000      	b.n	10046754 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10046752:	2300      	movs	r3, #0
}
10046754:	0018      	movs	r0, r3
10046756:	46bd      	mov	sp, r7
10046758:	b002      	add	sp, #8
1004675a:	bd80      	pop	{r7, pc}
1004675c:	48400000 	.word	0x48400000

10046760 <LL_APB2_GRP1_DisableClock>:
{
10046760:	b580      	push	{r7, lr}
10046762:	b082      	sub	sp, #8
10046764:	af00      	add	r7, sp, #0
10046766:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
10046768:	4b05      	ldr	r3, [pc, #20]	@ (10046780 <LL_APB2_GRP1_DisableClock+0x20>)
1004676a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
1004676c:	687b      	ldr	r3, [r7, #4]
1004676e:	43d9      	mvns	r1, r3
10046770:	4b03      	ldr	r3, [pc, #12]	@ (10046780 <LL_APB2_GRP1_DisableClock+0x20>)
10046772:	400a      	ands	r2, r1
10046774:	661a      	str	r2, [r3, #96]	@ 0x60
}
10046776:	46c0      	nop			@ (mov r8, r8)
10046778:	46bd      	mov	sp, r7
1004677a:	b002      	add	sp, #8
1004677c:	bd80      	pop	{r7, pc}
1004677e:	46c0      	nop			@ (mov r8, r8)
10046780:	48400000 	.word	0x48400000

10046784 <HAL_PWR_EnableWakeUpPin>:
  *        @arg @ref PWR_WUP_FALLEDG
  *
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPin, uint32_t WakeUpPolarity)
{
10046784:	b580      	push	{r7, lr}
10046786:	b082      	sub	sp, #8
10046788:	af00      	add	r7, sp, #0
1004678a:	6078      	str	r0, [r7, #4]
1004678c:	6039      	str	r1, [r7, #0]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));
  assert_param(IS_PWR_WAKEUP_PIN_POLARITY(WakeUpPolarity));

  /* Specifies the wake up line polarity for the event detection (rising or falling edge) */
  if (WakeUpPolarity == PWR_WUP_FALLEDG)
1004678e:	683b      	ldr	r3, [r7, #0]
10046790:	2b01      	cmp	r3, #1
10046792:	d10f      	bne.n	100467b4 <HAL_PWR_EnableWakeUpPin+0x30>
  {
    SET_BIT(PWR->CR4, (WakeUpPin & 0x0000FFFF));
10046794:	4b19      	ldr	r3, [pc, #100]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
10046796:	68d9      	ldr	r1, [r3, #12]
10046798:	687b      	ldr	r3, [r7, #4]
1004679a:	041b      	lsls	r3, r3, #16
1004679c:	0c1a      	lsrs	r2, r3, #16
1004679e:	4b17      	ldr	r3, [pc, #92]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467a0:	430a      	orrs	r2, r1
100467a2:	60da      	str	r2, [r3, #12]
    SET_BIT(PWR->CR7, (WakeUpPin >> 16));
100467a4:	4b15      	ldr	r3, [pc, #84]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
100467a8:	687b      	ldr	r3, [r7, #4]
100467aa:	0c1a      	lsrs	r2, r3, #16
100467ac:	4b13      	ldr	r3, [pc, #76]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467ae:	430a      	orrs	r2, r1
100467b0:	635a      	str	r2, [r3, #52]	@ 0x34
100467b2:	e010      	b.n	100467d6 <HAL_PWR_EnableWakeUpPin+0x52>
  }
  else
  {
    CLEAR_BIT(PWR->CR4, (WakeUpPin & 0x0000FFFF));
100467b4:	4b11      	ldr	r3, [pc, #68]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467b6:	68da      	ldr	r2, [r3, #12]
100467b8:	687b      	ldr	r3, [r7, #4]
100467ba:	041b      	lsls	r3, r3, #16
100467bc:	0c1b      	lsrs	r3, r3, #16
100467be:	43d9      	mvns	r1, r3
100467c0:	4b0e      	ldr	r3, [pc, #56]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467c2:	400a      	ands	r2, r1
100467c4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(PWR->CR7, (WakeUpPin >> 16));
100467c6:	4b0d      	ldr	r3, [pc, #52]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100467ca:	687b      	ldr	r3, [r7, #4]
100467cc:	0c1b      	lsrs	r3, r3, #16
100467ce:	43d9      	mvns	r1, r3
100467d0:	4b0a      	ldr	r3, [pc, #40]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467d2:	400a      	ands	r2, r1
100467d4:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  /* Enable wake-up line */
  SET_BIT(PWR->CR3, (WakeUpPin & 0x0000FFFF));
100467d6:	4b09      	ldr	r3, [pc, #36]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467d8:	6899      	ldr	r1, [r3, #8]
100467da:	687b      	ldr	r3, [r7, #4]
100467dc:	041b      	lsls	r3, r3, #16
100467de:	0c1a      	lsrs	r2, r3, #16
100467e0:	4b06      	ldr	r3, [pc, #24]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467e2:	430a      	orrs	r2, r1
100467e4:	609a      	str	r2, [r3, #8]
  SET_BIT(PWR->CR6, (WakeUpPin >> 16));
100467e6:	4b05      	ldr	r3, [pc, #20]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
100467ea:	687b      	ldr	r3, [r7, #4]
100467ec:	0c1a      	lsrs	r2, r3, #16
100467ee:	4b03      	ldr	r3, [pc, #12]	@ (100467fc <HAL_PWR_EnableWakeUpPin+0x78>)
100467f0:	430a      	orrs	r2, r1
100467f2:	631a      	str	r2, [r3, #48]	@ 0x30

}
100467f4:	46c0      	nop			@ (mov r8, r8)
100467f6:	46bd      	mov	sp, r7
100467f8:	b002      	add	sp, #8
100467fa:	bd80      	pop	{r7, pc}
100467fc:	48500000 	.word	0x48500000

10046800 <HAL_PWR_GetClearWakeupSource>:
  * @brief  Get and Clear Wake-up source.
  * @retval WakeUpPin : This parameter can be a combination of
  *                     @ref PWREx_WakeUp_Pins define group
  */
uint32_t HAL_PWR_GetClearWakeupSource(void)
{
10046800:	b580      	push	{r7, lr}
10046802:	b082      	sub	sp, #8
10046804:	af00      	add	r7, sp, #0
  uint32_t wakeuppin;

  /* Get all wake-up pins */
  wakeuppin = LL_PWR_GetWakeupSource();
10046806:	f7ff fee1 	bl	100465cc <LL_PWR_GetWakeupSource>
1004680a:	0003      	movs	r3, r0
1004680c:	607b      	str	r3, [r7, #4]

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(wakeuppin);
1004680e:	687b      	ldr	r3, [r7, #4]
10046810:	0018      	movs	r0, r3
10046812:	f7ff feef 	bl	100465f4 <LL_PWR_ClearWakeupSource>

  return wakeuppin;
10046816:	687b      	ldr	r3, [r7, #4]
}
10046818:	0018      	movs	r0, r3
1004681a:	46bd      	mov	sp, r7
1004681c:	b002      	add	sp, #8
1004681e:	bd80      	pop	{r7, pc}

10046820 <HAL_PWR_EnterSLEEPMode>:
  *         as NVIC and SysTick can run and wake up the CPU when an interrupt
  *         or an event occurs.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode(void)
{
10046820:	b580      	push	{r7, lr}
10046822:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10046824:	4b04      	ldr	r3, [pc, #16]	@ (10046838 <HAL_PWR_EnterSLEEPMode+0x18>)
10046826:	691a      	ldr	r2, [r3, #16]
10046828:	4b03      	ldr	r3, [pc, #12]	@ (10046838 <HAL_PWR_EnterSLEEPMode+0x18>)
1004682a:	2104      	movs	r1, #4
1004682c:	438a      	bics	r2, r1
1004682e:	611a      	str	r2, [r3, #16]

  /* Wait For Interrupt Request */
  __WFI();
10046830:	bf30      	wfi

}
10046832:	46c0      	nop			@ (mov r8, r8)
10046834:	46bd      	mov	sp, r7
10046836:	bd80      	pop	{r7, pc}
10046838:	e000ed00 	.word	0xe000ed00

1004683c <HAL_PWR_ConfigDEEPSTOP>:
  * @param  sConfigDEEPSTOP : Pointer to a @ref PWR_DEEPSTOPTypeDef structure that
  *                           contains the DEEPSTOP configuration information.
  * @retval None.
  */
HAL_StatusTypeDef HAL_PWR_ConfigDEEPSTOP(PWR_DEEPSTOPTypeDef *sConfigDEEPSTOP)
{
1004683c:	b580      	push	{r7, lr}
1004683e:	b084      	sub	sp, #16
10046840:	af00      	add	r7, sp, #0
10046842:	6078      	str	r0, [r7, #4]
  uint8_t radio_disabled = FALSE;
10046844:	230f      	movs	r3, #15
10046846:	18fb      	adds	r3, r7, r3
10046848:	2200      	movs	r2, #0
1004684a:	701a      	strb	r2, [r3, #0]

  /* Disable the low speed clock if requested */
  if (sConfigDEEPSTOP->deepStopMode == PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF)
1004684c:	687b      	ldr	r3, [r7, #4]
1004684e:	681b      	ldr	r3, [r3, #0]
10046850:	2b00      	cmp	r3, #0
10046852:	d103      	bne.n	1004685c <HAL_PWR_ConfigDEEPSTOP+0x20>
  {
    LL_RCC_LSE_Disable();
10046854:	f7ff ff1e 	bl	10046694 <LL_RCC_LSE_Disable>
    LL_RCC_LSI_Disable();
10046858:	f7ff ff3a 	bl	100466d0 <LL_RCC_LSI_Disable>
  }

  /* If the radio IP is not used at all by the SoC (or not yet started), the
    following steps need to be done after any reset to allow DEEPSTOP mode */
  if (!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004685c:	2001      	movs	r0, #1
1004685e:	f7ff ff6b 	bl	10046738 <LL_APB2_GRP1_IsEnabledClock>
10046862:	1e03      	subs	r3, r0, #0
10046864:	d106      	bne.n	10046874 <HAL_PWR_ConfigDEEPSTOP+0x38>
  {
    radio_disabled = TRUE;
10046866:	230f      	movs	r3, #15
10046868:	18fb      	adds	r3, r7, r3
1004686a:	2201      	movs	r2, #1
1004686c:	701a      	strb	r2, [r3, #0]
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004686e:	2001      	movs	r0, #1
10046870:	f7ff ff4c 	bl	1004670c <LL_APB2_GRP1_EnableClock>
  }
  if ((READ_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN) == 0) &&
10046874:	4b1a      	ldr	r3, [pc, #104]	@ (100468e0 <HAL_PWR_ConfigDEEPSTOP+0xa4>)
10046876:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046878:	2380      	movs	r3, #128	@ 0x80
1004687a:	059b      	lsls	r3, r3, #22
1004687c:	4013      	ands	r3, r2
1004687e:	d10c      	bne.n	1004689a <HAL_PWR_ConfigDEEPSTOP+0x5e>
      (READ_BIT(WAKEUP->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN) == 0))
10046880:	4b17      	ldr	r3, [pc, #92]	@ (100468e0 <HAL_PWR_ConfigDEEPSTOP+0xa4>)
10046882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10046884:	2380      	movs	r3, #128	@ 0x80
10046886:	05db      	lsls	r3, r3, #23
10046888:	4013      	ands	r3, r2
  if ((READ_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN) == 0) &&
1004688a:	d106      	bne.n	1004689a <HAL_PWR_ConfigDEEPSTOP+0x5e>
  {
    SET_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_FORCE_SLEEPING);
1004688c:	4b14      	ldr	r3, [pc, #80]	@ (100468e0 <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004688e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046890:	4b13      	ldr	r3, [pc, #76]	@ (100468e0 <HAL_PWR_ConfigDEEPSTOP+0xa4>)
10046892:	2180      	movs	r1, #128	@ 0x80
10046894:	0609      	lsls	r1, r1, #24
10046896:	430a      	orrs	r2, r1
10046898:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (radio_disabled)
1004689a:	230f      	movs	r3, #15
1004689c:	18fb      	adds	r3, r7, r3
1004689e:	781b      	ldrb	r3, [r3, #0]
100468a0:	2b00      	cmp	r3, #0
100468a2:	d002      	beq.n	100468aa <HAL_PWR_ConfigDEEPSTOP+0x6e>
  {
    LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_MRBLE);
100468a4:	2001      	movs	r0, #1
100468a6:	f7ff ff5b 	bl	10046760 <LL_APB2_GRP1_DisableClock>
  }

#if defined(PWR_CR2_GPIORET)
  /* Enable the GPIO retention in DEEPSTOP configuration */
  LL_PWR_EnableGPIORET();
100468aa:	f7ff fe81 	bl	100465b0 <LL_PWR_EnableGPIORET>
#endif /* PWR_CR2_GPIORET */

  /* Disable DIRECT HSE configuration to allow DEEPSTOP request */
  if (LL_RCC_DIRECT_HSE_IsEnabled())
100468ae:	f7ff fee1 	bl	10046674 <LL_RCC_DIRECT_HSE_IsEnabled>
100468b2:	1e03      	subs	r3, r0, #0
100468b4:	d001      	beq.n	100468ba <HAL_PWR_ConfigDEEPSTOP+0x7e>
  {
    LL_RCC_DIRECT_HSE_Disable();
100468b6:	f7ff fec5 	bl	10046644 <LL_RCC_DIRECT_HSE_Disable>
  }

  /* Wait until  the low speed clock if OFF */
  if (sConfigDEEPSTOP->deepStopMode == PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF)
100468ba:	687b      	ldr	r3, [r7, #4]
100468bc:	681b      	ldr	r3, [r3, #0]
100468be:	2b00      	cmp	r3, #0
100468c0:	d108      	bne.n	100468d4 <HAL_PWR_ConfigDEEPSTOP+0x98>
  {
    while (LL_RCC_LSE_IsReady() || LL_RCC_LSI_IsReady()) {}
100468c2:	46c0      	nop			@ (mov r8, r8)
100468c4:	f7ff fef4 	bl	100466b0 <LL_RCC_LSE_IsReady>
100468c8:	1e03      	subs	r3, r0, #0
100468ca:	d1fb      	bne.n	100468c4 <HAL_PWR_ConfigDEEPSTOP+0x88>
100468cc:	f7ff ff0e 	bl	100466ec <LL_RCC_LSI_IsReady>
100468d0:	1e03      	subs	r3, r0, #0
100468d2:	d1f7      	bne.n	100468c4 <HAL_PWR_ConfigDEEPSTOP+0x88>
  }

  return HAL_OK;
100468d4:	2300      	movs	r3, #0
}
100468d6:	0018      	movs	r0, r3
100468d8:	46bd      	mov	sp, r7
100468da:	b004      	add	sp, #16
100468dc:	bd80      	pop	{r7, pc}
100468de:	46c0      	nop			@ (mov r8, r8)
100468e0:	60001800 	.word	0x60001800

100468e4 <HAL_PWR_WKUP_IRQHandler>:
  * @brief This function handles the PWR WAKEUP interrupt request.
  * @note   This API should be called under the WKUP_IRQHandler().
  * @retval None.
  */
void HAL_PWR_WKUP_IRQHandler(void)
{
100468e4:	b580      	push	{r7, lr}
100468e6:	b082      	sub	sp, #8
100468e8:	af00      	add	r7, sp, #0
  uint32_t wakeuppin;

  wakeuppin = HAL_PWR_GetClearWakeupSource();
100468ea:	f7ff ff89 	bl	10046800 <HAL_PWR_GetClearWakeupSource>
100468ee:	0003      	movs	r3, r0
100468f0:	607b      	str	r3, [r7, #4]

  /* Wakeup pin line interrupt detected */
  if (wakeuppin != 0U)
100468f2:	687b      	ldr	r3, [r7, #4]
100468f4:	2b00      	cmp	r3, #0
100468f6:	d003      	beq.n	10046900 <HAL_PWR_WKUP_IRQHandler+0x1c>
  {
    HAL_PWR_WKUPx_Callback(wakeuppin);
100468f8:	687b      	ldr	r3, [r7, #4]
100468fa:	0018      	movs	r0, r3
100468fc:	f000 f804 	bl	10046908 <HAL_PWR_WKUPx_Callback>
  }
}
10046900:	46c0      	nop			@ (mov r8, r8)
10046902:	46bd      	mov	sp, r7
10046904:	b002      	add	sp, #8
10046906:	bd80      	pop	{r7, pc}

10046908 <HAL_PWR_WKUPx_Callback>:
  * @brief PWR WKUPx interrupt callback.
  * @param WakeupIOs IO wakeup line
  * @retval None.
  */
__weak void HAL_PWR_WKUPx_Callback(uint32_t WakeupIOs)
{
10046908:	b580      	push	{r7, lr}
1004690a:	b082      	sub	sp, #8
1004690c:	af00      	add	r7, sp, #0
1004690e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_WKUPxCallback can be implemented in the user file
  */
}
10046910:	46c0      	nop			@ (mov r8, r8)
10046912:	46bd      	mov	sp, r7
10046914:	b002      	add	sp, #8
10046916:	bd80      	pop	{r7, pc}

10046918 <HAL_PWREx_EnableGPIOPullUp>:
  *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 or the logical OR
  *         of several of them to setseveral bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10046918:	b580      	push	{r7, lr}
1004691a:	b084      	sub	sp, #16
1004691c:	af00      	add	r7, sp, #0
1004691e:	6078      	str	r0, [r7, #4]
10046920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10046922:	230f      	movs	r3, #15
10046924:	18fb      	adds	r3, r7, r3
10046926:	2200      	movs	r2, #0
10046928:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004692a:	687b      	ldr	r3, [r7, #4]
1004692c:	2b00      	cmp	r3, #0
1004692e:	d003      	beq.n	10046938 <HAL_PWREx_EnableGPIOPullUp+0x20>
10046930:	687b      	ldr	r3, [r7, #4]
10046932:	2b01      	cmp	r3, #1
10046934:	d00e      	beq.n	10046954 <HAL_PWREx_EnableGPIOPullUp+0x3c>
10046936:	e01b      	b.n	10046970 <HAL_PWREx_EnableGPIOPullUp+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PUCRA, GPIONumber);
10046938:	4b13      	ldr	r3, [pc, #76]	@ (10046988 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004693a:	6a19      	ldr	r1, [r3, #32]
1004693c:	4b12      	ldr	r3, [pc, #72]	@ (10046988 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004693e:	683a      	ldr	r2, [r7, #0]
10046940:	430a      	orrs	r2, r1
10046942:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
10046944:	4b10      	ldr	r3, [pc, #64]	@ (10046988 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10046946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10046948:	683b      	ldr	r3, [r7, #0]
1004694a:	43d9      	mvns	r1, r3
1004694c:	4b0e      	ldr	r3, [pc, #56]	@ (10046988 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004694e:	400a      	ands	r2, r1
10046950:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
10046952:	e012      	b.n	1004697a <HAL_PWREx_EnableGPIOPullUp+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PUCRB, GPIONumber);
10046954:	4b0c      	ldr	r3, [pc, #48]	@ (10046988 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10046956:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10046958:	4b0b      	ldr	r3, [pc, #44]	@ (10046988 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004695a:	683a      	ldr	r2, [r7, #0]
1004695c:	430a      	orrs	r2, r1
1004695e:	629a      	str	r2, [r3, #40]	@ 0x28
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
10046960:	4b09      	ldr	r3, [pc, #36]	@ (10046988 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10046962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10046964:	683b      	ldr	r3, [r7, #0]
10046966:	43d9      	mvns	r1, r3
10046968:	4b07      	ldr	r3, [pc, #28]	@ (10046988 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004696a:	400a      	ands	r2, r1
1004696c:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
1004696e:	e004      	b.n	1004697a <HAL_PWREx_EnableGPIOPullUp+0x62>
    default:
      status = HAL_ERROR;
10046970:	230f      	movs	r3, #15
10046972:	18fb      	adds	r3, r7, r3
10046974:	2201      	movs	r2, #1
10046976:	701a      	strb	r2, [r3, #0]
      break;
10046978:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004697a:	230f      	movs	r3, #15
1004697c:	18fb      	adds	r3, r7, r3
1004697e:	781b      	ldrb	r3, [r3, #0]
}
10046980:	0018      	movs	r0, r3
10046982:	46bd      	mov	sp, r7
10046984:	b004      	add	sp, #16
10046986:	bd80      	pop	{r7, pc}
10046988:	48500000 	.word	0x48500000

1004698c <HAL_PWREx_EnableGPIOPullDown>:
  *         or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
1004698c:	b580      	push	{r7, lr}
1004698e:	b084      	sub	sp, #16
10046990:	af00      	add	r7, sp, #0
10046992:	6078      	str	r0, [r7, #4]
10046994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10046996:	230f      	movs	r3, #15
10046998:	18fb      	adds	r3, r7, r3
1004699a:	2200      	movs	r2, #0
1004699c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004699e:	687b      	ldr	r3, [r7, #4]
100469a0:	2b00      	cmp	r3, #0
100469a2:	d003      	beq.n	100469ac <HAL_PWREx_EnableGPIOPullDown+0x20>
100469a4:	687b      	ldr	r3, [r7, #4]
100469a6:	2b01      	cmp	r3, #1
100469a8:	d00e      	beq.n	100469c8 <HAL_PWREx_EnableGPIOPullDown+0x3c>
100469aa:	e01b      	b.n	100469e4 <HAL_PWREx_EnableGPIOPullDown+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PDCRA, GPIONumber);
100469ac:	4b13      	ldr	r3, [pc, #76]	@ (100469fc <HAL_PWREx_EnableGPIOPullDown+0x70>)
100469ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
100469b0:	4b12      	ldr	r3, [pc, #72]	@ (100469fc <HAL_PWREx_EnableGPIOPullDown+0x70>)
100469b2:	683a      	ldr	r2, [r7, #0]
100469b4:	430a      	orrs	r2, r1
100469b6:	625a      	str	r2, [r3, #36]	@ 0x24
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
100469b8:	4b10      	ldr	r3, [pc, #64]	@ (100469fc <HAL_PWREx_EnableGPIOPullDown+0x70>)
100469ba:	6a1a      	ldr	r2, [r3, #32]
100469bc:	683b      	ldr	r3, [r7, #0]
100469be:	43d9      	mvns	r1, r3
100469c0:	4b0e      	ldr	r3, [pc, #56]	@ (100469fc <HAL_PWREx_EnableGPIOPullDown+0x70>)
100469c2:	400a      	ands	r2, r1
100469c4:	621a      	str	r2, [r3, #32]
      break;
100469c6:	e012      	b.n	100469ee <HAL_PWREx_EnableGPIOPullDown+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PDCRB, GPIONumber);
100469c8:	4b0c      	ldr	r3, [pc, #48]	@ (100469fc <HAL_PWREx_EnableGPIOPullDown+0x70>)
100469ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100469cc:	4b0b      	ldr	r3, [pc, #44]	@ (100469fc <HAL_PWREx_EnableGPIOPullDown+0x70>)
100469ce:	683a      	ldr	r2, [r7, #0]
100469d0:	430a      	orrs	r2, r1
100469d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
100469d4:	4b09      	ldr	r3, [pc, #36]	@ (100469fc <HAL_PWREx_EnableGPIOPullDown+0x70>)
100469d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100469d8:	683b      	ldr	r3, [r7, #0]
100469da:	43d9      	mvns	r1, r3
100469dc:	4b07      	ldr	r3, [pc, #28]	@ (100469fc <HAL_PWREx_EnableGPIOPullDown+0x70>)
100469de:	400a      	ands	r2, r1
100469e0:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
100469e2:	e004      	b.n	100469ee <HAL_PWREx_EnableGPIOPullDown+0x62>
    default:
      status = HAL_ERROR;
100469e4:	230f      	movs	r3, #15
100469e6:	18fb      	adds	r3, r7, r3
100469e8:	2201      	movs	r2, #1
100469ea:	701a      	strb	r2, [r3, #0]
      break;
100469ec:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
100469ee:	230f      	movs	r3, #15
100469f0:	18fb      	adds	r3, r7, r3
100469f2:	781b      	ldrb	r3, [r3, #0]
}
100469f4:	0018      	movs	r0, r3
100469f6:	46bd      	mov	sp, r7
100469f8:	b004      	add	sp, #16
100469fa:	bd80      	pop	{r7, pc}
100469fc:	48500000 	.word	0x48500000

10046a00 <LL_RADIO_SetRadioConfigurationAddressPointer>:
{
10046a00:	b580      	push	{r7, lr}
10046a02:	b082      	sub	sp, #8
10046a04:	af00      	add	r7, sp, #0
10046a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10046a08:	4b04      	ldr	r3, [pc, #16]	@ (10046a1c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10046a0a:	681b      	ldr	r3, [r3, #0]
10046a0c:	4b03      	ldr	r3, [pc, #12]	@ (10046a1c <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10046a0e:	687a      	ldr	r2, [r7, #4]
10046a10:	601a      	str	r2, [r3, #0]
}
10046a12:	46c0      	nop			@ (mov r8, r8)
10046a14:	46bd      	mov	sp, r7
10046a16:	b002      	add	sp, #8
10046a18:	bd80      	pop	{r7, pc}
10046a1a:	46c0      	nop			@ (mov r8, r8)
10046a1c:	200000c0 	.word	0x200000c0

10046a20 <LL_RADIO_SetWakeupInitDelay>:
{
10046a20:	b580      	push	{r7, lr}
10046a22:	b082      	sub	sp, #8
10046a24:	af00      	add	r7, sp, #0
10046a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10046a28:	4b07      	ldr	r3, [pc, #28]	@ (10046a48 <LL_RADIO_SetWakeupInitDelay+0x28>)
10046a2a:	685b      	ldr	r3, [r3, #4]
10046a2c:	4a07      	ldr	r2, [pc, #28]	@ (10046a4c <LL_RADIO_SetWakeupInitDelay+0x2c>)
10046a2e:	4013      	ands	r3, r2
10046a30:	0019      	movs	r1, r3
10046a32:	687b      	ldr	r3, [r7, #4]
10046a34:	021b      	lsls	r3, r3, #8
10046a36:	041b      	lsls	r3, r3, #16
10046a38:	0c1a      	lsrs	r2, r3, #16
10046a3a:	4b03      	ldr	r3, [pc, #12]	@ (10046a48 <LL_RADIO_SetWakeupInitDelay+0x28>)
10046a3c:	430a      	orrs	r2, r1
10046a3e:	605a      	str	r2, [r3, #4]
}
10046a40:	46c0      	nop			@ (mov r8, r8)
10046a42:	46bd      	mov	sp, r7
10046a44:	b002      	add	sp, #8
10046a46:	bd80      	pop	{r7, pc}
10046a48:	200000c0 	.word	0x200000c0
10046a4c:	ffff00ff 	.word	0xffff00ff

10046a50 <LL_RADIO_SetTimer12InitDelayCal>:
{
10046a50:	b580      	push	{r7, lr}
10046a52:	b082      	sub	sp, #8
10046a54:	af00      	add	r7, sp, #0
10046a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
10046a58:	4b08      	ldr	r3, [pc, #32]	@ (10046a7c <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10046a5a:	685b      	ldr	r3, [r3, #4]
10046a5c:	4a08      	ldr	r2, [pc, #32]	@ (10046a80 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10046a5e:	4013      	ands	r3, r2
10046a60:	0019      	movs	r1, r3
10046a62:	687b      	ldr	r3, [r7, #4]
10046a64:	041a      	lsls	r2, r3, #16
10046a66:	23ff      	movs	r3, #255	@ 0xff
10046a68:	041b      	lsls	r3, r3, #16
10046a6a:	401a      	ands	r2, r3
10046a6c:	4b03      	ldr	r3, [pc, #12]	@ (10046a7c <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10046a6e:	430a      	orrs	r2, r1
10046a70:	605a      	str	r2, [r3, #4]
}
10046a72:	46c0      	nop			@ (mov r8, r8)
10046a74:	46bd      	mov	sp, r7
10046a76:	b002      	add	sp, #8
10046a78:	bd80      	pop	{r7, pc}
10046a7a:	46c0      	nop			@ (mov r8, r8)
10046a7c:	200000c0 	.word	0x200000c0
10046a80:	ff00ffff 	.word	0xff00ffff

10046a84 <LL_RADIO_SetTimer12InitDelayNoCal>:
{
10046a84:	b580      	push	{r7, lr}
10046a86:	b082      	sub	sp, #8
10046a88:	af00      	add	r7, sp, #0
10046a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
10046a8c:	4b06      	ldr	r3, [pc, #24]	@ (10046aa8 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10046a8e:	685b      	ldr	r3, [r3, #4]
10046a90:	021b      	lsls	r3, r3, #8
10046a92:	0a19      	lsrs	r1, r3, #8
10046a94:	687b      	ldr	r3, [r7, #4]
10046a96:	061a      	lsls	r2, r3, #24
10046a98:	4b03      	ldr	r3, [pc, #12]	@ (10046aa8 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10046a9a:	430a      	orrs	r2, r1
10046a9c:	605a      	str	r2, [r3, #4]
}
10046a9e:	46c0      	nop			@ (mov r8, r8)
10046aa0:	46bd      	mov	sp, r7
10046aa2:	b002      	add	sp, #8
10046aa4:	bd80      	pop	{r7, pc}
10046aa6:	46c0      	nop			@ (mov r8, r8)
10046aa8:	200000c0 	.word	0x200000c0

10046aac <LL_RADIO_SetTransmitCalDelayChk>:
{
10046aac:	b580      	push	{r7, lr}
10046aae:	b082      	sub	sp, #8
10046ab0:	af00      	add	r7, sp, #0
10046ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
10046ab4:	4b07      	ldr	r3, [pc, #28]	@ (10046ad4 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10046ab6:	689b      	ldr	r3, [r3, #8]
10046ab8:	22ff      	movs	r2, #255	@ 0xff
10046aba:	4393      	bics	r3, r2
10046abc:	0019      	movs	r1, r3
10046abe:	687b      	ldr	r3, [r7, #4]
10046ac0:	22ff      	movs	r2, #255	@ 0xff
10046ac2:	401a      	ands	r2, r3
10046ac4:	4b03      	ldr	r3, [pc, #12]	@ (10046ad4 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10046ac6:	430a      	orrs	r2, r1
10046ac8:	609a      	str	r2, [r3, #8]
}
10046aca:	46c0      	nop			@ (mov r8, r8)
10046acc:	46bd      	mov	sp, r7
10046ace:	b002      	add	sp, #8
10046ad0:	bd80      	pop	{r7, pc}
10046ad2:	46c0      	nop			@ (mov r8, r8)
10046ad4:	200000c0 	.word	0x200000c0

10046ad8 <LL_RADIO_SetTransmitNoCalDelayChk>:
{
10046ad8:	b580      	push	{r7, lr}
10046ada:	b082      	sub	sp, #8
10046adc:	af00      	add	r7, sp, #0
10046ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
10046ae0:	4b07      	ldr	r3, [pc, #28]	@ (10046b00 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10046ae2:	689b      	ldr	r3, [r3, #8]
10046ae4:	4a07      	ldr	r2, [pc, #28]	@ (10046b04 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
10046ae6:	4013      	ands	r3, r2
10046ae8:	0019      	movs	r1, r3
10046aea:	687b      	ldr	r3, [r7, #4]
10046aec:	021b      	lsls	r3, r3, #8
10046aee:	041b      	lsls	r3, r3, #16
10046af0:	0c1a      	lsrs	r2, r3, #16
10046af2:	4b03      	ldr	r3, [pc, #12]	@ (10046b00 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10046af4:	430a      	orrs	r2, r1
10046af6:	609a      	str	r2, [r3, #8]
}
10046af8:	46c0      	nop			@ (mov r8, r8)
10046afa:	46bd      	mov	sp, r7
10046afc:	b002      	add	sp, #8
10046afe:	bd80      	pop	{r7, pc}
10046b00:	200000c0 	.word	0x200000c0
10046b04:	ffff00ff 	.word	0xffff00ff

10046b08 <LL_RADIO_SetReceivedCalDelayChk>:
{
10046b08:	b580      	push	{r7, lr}
10046b0a:	b082      	sub	sp, #8
10046b0c:	af00      	add	r7, sp, #0
10046b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10046b10:	4b08      	ldr	r3, [pc, #32]	@ (10046b34 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10046b12:	689b      	ldr	r3, [r3, #8]
10046b14:	4a08      	ldr	r2, [pc, #32]	@ (10046b38 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10046b16:	4013      	ands	r3, r2
10046b18:	0019      	movs	r1, r3
10046b1a:	687b      	ldr	r3, [r7, #4]
10046b1c:	041a      	lsls	r2, r3, #16
10046b1e:	23ff      	movs	r3, #255	@ 0xff
10046b20:	041b      	lsls	r3, r3, #16
10046b22:	401a      	ands	r2, r3
10046b24:	4b03      	ldr	r3, [pc, #12]	@ (10046b34 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10046b26:	430a      	orrs	r2, r1
10046b28:	609a      	str	r2, [r3, #8]
}
10046b2a:	46c0      	nop			@ (mov r8, r8)
10046b2c:	46bd      	mov	sp, r7
10046b2e:	b002      	add	sp, #8
10046b30:	bd80      	pop	{r7, pc}
10046b32:	46c0      	nop			@ (mov r8, r8)
10046b34:	200000c0 	.word	0x200000c0
10046b38:	ff00ffff 	.word	0xff00ffff

10046b3c <LL_RADIO_SetReceivedNoCalDelayChk>:
{
10046b3c:	b580      	push	{r7, lr}
10046b3e:	b082      	sub	sp, #8
10046b40:	af00      	add	r7, sp, #0
10046b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
10046b44:	4b06      	ldr	r3, [pc, #24]	@ (10046b60 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10046b46:	689b      	ldr	r3, [r3, #8]
10046b48:	021b      	lsls	r3, r3, #8
10046b4a:	0a19      	lsrs	r1, r3, #8
10046b4c:	687b      	ldr	r3, [r7, #4]
10046b4e:	061a      	lsls	r2, r3, #24
10046b50:	4b03      	ldr	r3, [pc, #12]	@ (10046b60 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10046b52:	430a      	orrs	r2, r1
10046b54:	609a      	str	r2, [r3, #8]
}
10046b56:	46c0      	nop			@ (mov r8, r8)
10046b58:	46bd      	mov	sp, r7
10046b5a:	b002      	add	sp, #8
10046b5c:	bd80      	pop	{r7, pc}
10046b5e:	46c0      	nop			@ (mov r8, r8)
10046b60:	200000c0 	.word	0x200000c0

10046b64 <LL_RADIO_SetConfigurationEndDuration>:
{
10046b64:	b580      	push	{r7, lr}
10046b66:	b082      	sub	sp, #8
10046b68:	af00      	add	r7, sp, #0
10046b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
10046b6c:	4b07      	ldr	r3, [pc, #28]	@ (10046b8c <LL_RADIO_SetConfigurationEndDuration+0x28>)
10046b6e:	68db      	ldr	r3, [r3, #12]
10046b70:	22ff      	movs	r2, #255	@ 0xff
10046b72:	4393      	bics	r3, r2
10046b74:	0019      	movs	r1, r3
10046b76:	687b      	ldr	r3, [r7, #4]
10046b78:	22ff      	movs	r2, #255	@ 0xff
10046b7a:	401a      	ands	r2, r3
10046b7c:	4b03      	ldr	r3, [pc, #12]	@ (10046b8c <LL_RADIO_SetConfigurationEndDuration+0x28>)
10046b7e:	430a      	orrs	r2, r1
10046b80:	60da      	str	r2, [r3, #12]
}
10046b82:	46c0      	nop			@ (mov r8, r8)
10046b84:	46bd      	mov	sp, r7
10046b86:	b002      	add	sp, #8
10046b88:	bd80      	pop	{r7, pc}
10046b8a:	46c0      	nop			@ (mov r8, r8)
10046b8c:	200000c0 	.word	0x200000c0

10046b90 <LL_RADIO_SetTxDataReadyCheck>:
{
10046b90:	b580      	push	{r7, lr}
10046b92:	b082      	sub	sp, #8
10046b94:	af00      	add	r7, sp, #0
10046b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
10046b98:	4b07      	ldr	r3, [pc, #28]	@ (10046bb8 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10046b9a:	68db      	ldr	r3, [r3, #12]
10046b9c:	4a07      	ldr	r2, [pc, #28]	@ (10046bbc <LL_RADIO_SetTxDataReadyCheck+0x2c>)
10046b9e:	4013      	ands	r3, r2
10046ba0:	0019      	movs	r1, r3
10046ba2:	687b      	ldr	r3, [r7, #4]
10046ba4:	021b      	lsls	r3, r3, #8
10046ba6:	041b      	lsls	r3, r3, #16
10046ba8:	0c1a      	lsrs	r2, r3, #16
10046baa:	4b03      	ldr	r3, [pc, #12]	@ (10046bb8 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10046bac:	430a      	orrs	r2, r1
10046bae:	60da      	str	r2, [r3, #12]
}
10046bb0:	46c0      	nop			@ (mov r8, r8)
10046bb2:	46bd      	mov	sp, r7
10046bb4:	b002      	add	sp, #8
10046bb6:	bd80      	pop	{r7, pc}
10046bb8:	200000c0 	.word	0x200000c0
10046bbc:	ffff00ff 	.word	0xffff00ff

10046bc0 <LL_RADIO_SetTxDelayStart>:
{
10046bc0:	b580      	push	{r7, lr}
10046bc2:	b082      	sub	sp, #8
10046bc4:	af00      	add	r7, sp, #0
10046bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
10046bc8:	4b08      	ldr	r3, [pc, #32]	@ (10046bec <LL_RADIO_SetTxDelayStart+0x2c>)
10046bca:	68db      	ldr	r3, [r3, #12]
10046bcc:	4a08      	ldr	r2, [pc, #32]	@ (10046bf0 <LL_RADIO_SetTxDelayStart+0x30>)
10046bce:	4013      	ands	r3, r2
10046bd0:	0019      	movs	r1, r3
10046bd2:	687b      	ldr	r3, [r7, #4]
10046bd4:	041a      	lsls	r2, r3, #16
10046bd6:	23ff      	movs	r3, #255	@ 0xff
10046bd8:	041b      	lsls	r3, r3, #16
10046bda:	401a      	ands	r2, r3
10046bdc:	4b03      	ldr	r3, [pc, #12]	@ (10046bec <LL_RADIO_SetTxDelayStart+0x2c>)
10046bde:	430a      	orrs	r2, r1
10046be0:	60da      	str	r2, [r3, #12]
}
10046be2:	46c0      	nop			@ (mov r8, r8)
10046be4:	46bd      	mov	sp, r7
10046be6:	b002      	add	sp, #8
10046be8:	bd80      	pop	{r7, pc}
10046bea:	46c0      	nop			@ (mov r8, r8)
10046bec:	200000c0 	.word	0x200000c0
10046bf0:	ff00ffff 	.word	0xff00ffff

10046bf4 <LL_RADIO_SetTxDelayEnd>:
{
10046bf4:	b580      	push	{r7, lr}
10046bf6:	b082      	sub	sp, #8
10046bf8:	af00      	add	r7, sp, #0
10046bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
10046bfc:	4b08      	ldr	r3, [pc, #32]	@ (10046c20 <LL_RADIO_SetTxDelayEnd+0x2c>)
10046bfe:	68db      	ldr	r3, [r3, #12]
10046c00:	4a08      	ldr	r2, [pc, #32]	@ (10046c24 <LL_RADIO_SetTxDelayEnd+0x30>)
10046c02:	4013      	ands	r3, r2
10046c04:	0019      	movs	r1, r3
10046c06:	687b      	ldr	r3, [r7, #4]
10046c08:	061a      	lsls	r2, r3, #24
10046c0a:	23fc      	movs	r3, #252	@ 0xfc
10046c0c:	059b      	lsls	r3, r3, #22
10046c0e:	401a      	ands	r2, r3
10046c10:	4b03      	ldr	r3, [pc, #12]	@ (10046c20 <LL_RADIO_SetTxDelayEnd+0x2c>)
10046c12:	430a      	orrs	r2, r1
10046c14:	60da      	str	r2, [r3, #12]
}
10046c16:	46c0      	nop			@ (mov r8, r8)
10046c18:	46bd      	mov	sp, r7
10046c1a:	b002      	add	sp, #8
10046c1c:	bd80      	pop	{r7, pc}
10046c1e:	46c0      	nop			@ (mov r8, r8)
10046c20:	200000c0 	.word	0x200000c0
10046c24:	c0ffffff 	.word	0xc0ffffff

10046c28 <LL_RADIO_SetTransmissionReadyTimeout>:
{
10046c28:	b580      	push	{r7, lr}
10046c2a:	b082      	sub	sp, #8
10046c2c:	af00      	add	r7, sp, #0
10046c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
10046c30:	4b07      	ldr	r3, [pc, #28]	@ (10046c50 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10046c32:	691b      	ldr	r3, [r3, #16]
10046c34:	22ff      	movs	r2, #255	@ 0xff
10046c36:	4393      	bics	r3, r2
10046c38:	0019      	movs	r1, r3
10046c3a:	687b      	ldr	r3, [r7, #4]
10046c3c:	22ff      	movs	r2, #255	@ 0xff
10046c3e:	401a      	ands	r2, r3
10046c40:	4b03      	ldr	r3, [pc, #12]	@ (10046c50 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10046c42:	430a      	orrs	r2, r1
10046c44:	611a      	str	r2, [r3, #16]
}
10046c46:	46c0      	nop			@ (mov r8, r8)
10046c48:	46bd      	mov	sp, r7
10046c4a:	b002      	add	sp, #8
10046c4c:	bd80      	pop	{r7, pc}
10046c4e:	46c0      	nop			@ (mov r8, r8)
10046c50:	200000c0 	.word	0x200000c0

10046c54 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
{
10046c54:	b580      	push	{r7, lr}
10046c56:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
10046c58:	4b04      	ldr	r3, [pc, #16]	@ (10046c6c <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10046c5a:	695a      	ldr	r2, [r3, #20]
10046c5c:	4b03      	ldr	r3, [pc, #12]	@ (10046c6c <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10046c5e:	2104      	movs	r1, #4
10046c60:	430a      	orrs	r2, r1
10046c62:	615a      	str	r2, [r3, #20]
}
10046c64:	46c0      	nop			@ (mov r8, r8)
10046c66:	46bd      	mov	sp, r7
10046c68:	bd80      	pop	{r7, pc}
10046c6a:	46c0      	nop			@ (mov r8, r8)
10046c6c:	200000c0 	.word	0x200000c0

10046c70 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
{
10046c70:	b580      	push	{r7, lr}
10046c72:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
10046c74:	4b04      	ldr	r3, [pc, #16]	@ (10046c88 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10046c76:	695a      	ldr	r2, [r3, #20]
10046c78:	4b03      	ldr	r3, [pc, #12]	@ (10046c88 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10046c7a:	2180      	movs	r1, #128	@ 0x80
10046c7c:	0409      	lsls	r1, r1, #16
10046c7e:	430a      	orrs	r2, r1
10046c80:	615a      	str	r2, [r3, #20]
}
10046c82:	46c0      	nop			@ (mov r8, r8)
10046c84:	46bd      	mov	sp, r7
10046c86:	bd80      	pop	{r7, pc}
10046c88:	200000c0 	.word	0x200000c0

10046c8c <LL_RADIO_TxRxSkipInterrupt_Enable>:
{
10046c8c:	b580      	push	{r7, lr}
10046c8e:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
10046c90:	4b04      	ldr	r3, [pc, #16]	@ (10046ca4 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10046c92:	695a      	ldr	r2, [r3, #20]
10046c94:	4b03      	ldr	r3, [pc, #12]	@ (10046ca4 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10046c96:	2180      	movs	r1, #128	@ 0x80
10046c98:	0589      	lsls	r1, r1, #22
10046c9a:	430a      	orrs	r2, r1
10046c9c:	615a      	str	r2, [r3, #20]
}
10046c9e:	46c0      	nop			@ (mov r8, r8)
10046ca0:	46bd      	mov	sp, r7
10046ca2:	bd80      	pop	{r7, pc}
10046ca4:	200000c0 	.word	0x200000c0

10046ca8 <LL_RADIO_Active2ErrorInterrupt_Enable>:
{
10046ca8:	b580      	push	{r7, lr}
10046caa:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
10046cac:	4b04      	ldr	r3, [pc, #16]	@ (10046cc0 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10046cae:	695a      	ldr	r2, [r3, #20]
10046cb0:	4b03      	ldr	r3, [pc, #12]	@ (10046cc0 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10046cb2:	2180      	movs	r1, #128	@ 0x80
10046cb4:	05c9      	lsls	r1, r1, #23
10046cb6:	430a      	orrs	r2, r1
10046cb8:	615a      	str	r2, [r3, #20]
}
10046cba:	46c0      	nop			@ (mov r8, r8)
10046cbc:	46bd      	mov	sp, r7
10046cbe:	bd80      	pop	{r7, pc}
10046cc0:	200000c0 	.word	0x200000c0

10046cc4 <LL_RADIO_SetDefaultAntennaID>:
{
10046cc4:	b580      	push	{r7, lr}
10046cc6:	b082      	sub	sp, #8
10046cc8:	af00      	add	r7, sp, #0
10046cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
10046ccc:	4b07      	ldr	r3, [pc, #28]	@ (10046cec <LL_RADIO_SetDefaultAntennaID+0x28>)
10046cce:	699b      	ldr	r3, [r3, #24]
10046cd0:	227f      	movs	r2, #127	@ 0x7f
10046cd2:	4393      	bics	r3, r2
10046cd4:	0019      	movs	r1, r3
10046cd6:	687b      	ldr	r3, [r7, #4]
10046cd8:	227f      	movs	r2, #127	@ 0x7f
10046cda:	401a      	ands	r2, r3
10046cdc:	4b03      	ldr	r3, [pc, #12]	@ (10046cec <LL_RADIO_SetDefaultAntennaID+0x28>)
10046cde:	430a      	orrs	r2, r1
10046ce0:	619a      	str	r2, [r3, #24]
}
10046ce2:	46c0      	nop			@ (mov r8, r8)
10046ce4:	46bd      	mov	sp, r7
10046ce6:	b002      	add	sp, #8
10046ce8:	bd80      	pop	{r7, pc}
10046cea:	46c0      	nop			@ (mov r8, r8)
10046cec:	200000c0 	.word	0x200000c0

10046cf0 <LL_RADIO_TIMER_DisableTimer1>:
{
10046cf0:	b580      	push	{r7, lr}
10046cf2:	b082      	sub	sp, #8
10046cf4:	af00      	add	r7, sp, #0
10046cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10046cf8:	687b      	ldr	r3, [r7, #4]
10046cfa:	68db      	ldr	r3, [r3, #12]
10046cfc:	2203      	movs	r2, #3
10046cfe:	4393      	bics	r3, r2
10046d00:	001a      	movs	r2, r3
10046d02:	687b      	ldr	r3, [r7, #4]
10046d04:	60da      	str	r2, [r3, #12]
}
10046d06:	46c0      	nop			@ (mov r8, r8)
10046d08:	46bd      	mov	sp, r7
10046d0a:	b002      	add	sp, #8
10046d0c:	bd80      	pop	{r7, pc}

10046d0e <LL_RADIO_TIMER_DisableTimer2>:
{
10046d0e:	b580      	push	{r7, lr}
10046d10:	b082      	sub	sp, #8
10046d12:	af00      	add	r7, sp, #0
10046d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10046d16:	687b      	ldr	r3, [r7, #4]
10046d18:	68db      	ldr	r3, [r3, #12]
10046d1a:	2203      	movs	r2, #3
10046d1c:	4393      	bics	r3, r2
10046d1e:	001a      	movs	r2, r3
10046d20:	687b      	ldr	r3, [r7, #4]
10046d22:	60da      	str	r2, [r3, #12]
}
10046d24:	46c0      	nop			@ (mov r8, r8)
10046d26:	46bd      	mov	sp, r7
10046d28:	b002      	add	sp, #8
10046d2a:	bd80      	pop	{r7, pc}

10046d2c <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10046d2c:	b580      	push	{r7, lr}
10046d2e:	b082      	sub	sp, #8
10046d30:	af00      	add	r7, sp, #0
10046d32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10046d34:	687b      	ldr	r3, [r7, #4]
10046d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046d38:	4a03      	ldr	r2, [pc, #12]	@ (10046d48 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10046d3a:	401a      	ands	r2, r3
10046d3c:	687b      	ldr	r3, [r7, #4]
10046d3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046d40:	46c0      	nop			@ (mov r8, r8)
10046d42:	46bd      	mov	sp, r7
10046d44:	b002      	add	sp, #8
10046d46:	bd80      	pop	{r7, pc}
10046d48:	bfffffff 	.word	0xbfffffff

10046d4c <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
10046d4c:	b590      	push	{r4, r7, lr}
10046d4e:	b08d      	sub	sp, #52	@ 0x34
10046d50:	af00      	add	r7, sp, #0
10046d52:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
10046d54:	4b14      	ldr	r3, [pc, #80]	@ (10046da8 <HAL_RADIO_Init+0x5c>)
10046d56:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
10046d58:	4b14      	ldr	r3, [pc, #80]	@ (10046dac <HAL_RADIO_Init+0x60>)
10046d5a:	681b      	ldr	r3, [r3, #0]
10046d5c:	4a14      	ldr	r2, [pc, #80]	@ (10046db0 <HAL_RADIO_Init+0x64>)
10046d5e:	4293      	cmp	r3, r2
10046d60:	d12a      	bne.n	10046db8 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
10046d62:	4b14      	ldr	r3, [pc, #80]	@ (10046db4 <HAL_RADIO_Init+0x68>)
10046d64:	681b      	ldr	r3, [r3, #0]
10046d66:	0a1b      	lsrs	r3, r3, #8
10046d68:	220f      	movs	r2, #15
10046d6a:	4013      	ands	r3, r2
10046d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
10046d6e:	4b11      	ldr	r3, [pc, #68]	@ (10046db4 <HAL_RADIO_Init+0x68>)
10046d70:	681b      	ldr	r3, [r3, #0]
10046d72:	0b1b      	lsrs	r3, r3, #12
10046d74:	220f      	movs	r2, #15
10046d76:	4013      	ands	r3, r2
10046d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
10046d7a:	4b0e      	ldr	r3, [pc, #56]	@ (10046db4 <HAL_RADIO_Init+0x68>)
10046d7c:	681b      	ldr	r3, [r3, #0]
10046d7e:	0c1b      	lsrs	r3, r3, #16
10046d80:	220f      	movs	r2, #15
10046d82:	4013      	ands	r3, r2
10046d84:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
10046d86:	4b0b      	ldr	r3, [pc, #44]	@ (10046db4 <HAL_RADIO_Init+0x68>)
10046d88:	681b      	ldr	r3, [r3, #0]
10046d8a:	0d1b      	lsrs	r3, r3, #20
10046d8c:	2207      	movs	r2, #7
10046d8e:	4013      	ands	r3, r2
10046d90:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
10046d92:	4b08      	ldr	r3, [pc, #32]	@ (10046db4 <HAL_RADIO_Init+0x68>)
10046d94:	681b      	ldr	r3, [r3, #0]
10046d96:	0e1b      	lsrs	r3, r3, #24
10046d98:	2207      	movs	r2, #7
10046d9a:	4013      	ands	r3, r2
10046d9c:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10046d9e:	231b      	movs	r3, #27
10046da0:	18fb      	adds	r3, r7, r3
10046da2:	2201      	movs	r2, #1
10046da4:	701a      	strb	r2, [r3, #0]
10046da6:	e018      	b.n	10046dda <HAL_RADIO_Init+0x8e>
10046da8:	200009e8 	.word	0x200009e8
10046dac:	10001ef8 	.word	0x10001ef8
10046db0:	fcbceccc 	.word	0xfcbceccc
10046db4:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
10046db8:	2308      	movs	r3, #8
10046dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
10046dbc:	2307      	movs	r3, #7
10046dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
10046dc0:	2308      	movs	r3, #8
10046dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
10046dc4:	211b      	movs	r1, #27
10046dc6:	187b      	adds	r3, r7, r1
10046dc8:	2200      	movs	r2, #0
10046dca:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
10046dcc:	2303      	movs	r3, #3
10046dce:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
10046dd0:	2303      	movs	r3, #3
10046dd2:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10046dd4:	187b      	adds	r3, r7, r1
10046dd6:	2201      	movs	r2, #1
10046dd8:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
10046dda:	4bfc      	ldr	r3, [pc, #1008]	@ (100471cc <HAL_RADIO_Init+0x480>)
10046ddc:	2200      	movs	r2, #0
10046dde:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
10046de0:	687b      	ldr	r3, [r7, #4]
10046de2:	2b00      	cmp	r3, #0
10046de4:	d003      	beq.n	10046dee <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
10046de6:	687b      	ldr	r3, [r7, #4]
10046de8:	0018      	movs	r0, r3
10046dea:	f7fa f977 	bl	100410dc <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10046dee:	23c0      	movs	r3, #192	@ 0xc0
10046df0:	05db      	lsls	r3, r3, #23
10046df2:	0018      	movs	r0, r3
10046df4:	f7ff ff7c 	bl	10046cf0 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10046df8:	23c0      	movs	r3, #192	@ 0xc0
10046dfa:	05db      	lsls	r3, r3, #23
10046dfc:	0018      	movs	r0, r3
10046dfe:	f7ff ff86 	bl	10046d0e <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10046e02:	4bf3      	ldr	r3, [pc, #972]	@ (100471d0 <HAL_RADIO_Init+0x484>)
10046e04:	0018      	movs	r0, r3
10046e06:	f7ff ff91 	bl	10046d2c <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
10046e0a:	4af2      	ldr	r2, [pc, #968]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046e0c:	239e      	movs	r3, #158	@ 0x9e
10046e0e:	009b      	lsls	r3, r3, #2
10046e10:	58d3      	ldr	r3, [r2, r3]
10046e12:	220f      	movs	r2, #15
10046e14:	4393      	bics	r3, r2
10046e16:	001a      	movs	r2, r3
10046e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046e1a:	210f      	movs	r1, #15
10046e1c:	400b      	ands	r3, r1
10046e1e:	49ed      	ldr	r1, [pc, #948]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046e20:	431a      	orrs	r2, r3
10046e22:	239e      	movs	r3, #158	@ 0x9e
10046e24:	009b      	lsls	r3, r3, #2
10046e26:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
10046e28:	4aea      	ldr	r2, [pc, #936]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046e2a:	239d      	movs	r3, #157	@ 0x9d
10046e2c:	009b      	lsls	r3, r3, #2
10046e2e:	58d3      	ldr	r3, [r2, r3]
10046e30:	22f0      	movs	r2, #240	@ 0xf0
10046e32:	4393      	bics	r3, r2
10046e34:	001a      	movs	r2, r3
10046e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10046e38:	011b      	lsls	r3, r3, #4
10046e3a:	21ff      	movs	r1, #255	@ 0xff
10046e3c:	400b      	ands	r3, r1
10046e3e:	49e5      	ldr	r1, [pc, #916]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046e40:	431a      	orrs	r2, r3
10046e42:	239d      	movs	r3, #157	@ 0x9d
10046e44:	009b      	lsls	r3, r3, #2
10046e46:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
10046e48:	4ae2      	ldr	r2, [pc, #904]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046e4a:	239d      	movs	r3, #157	@ 0x9d
10046e4c:	009b      	lsls	r3, r3, #2
10046e4e:	58d3      	ldr	r3, [r2, r3]
10046e50:	220f      	movs	r2, #15
10046e52:	4393      	bics	r3, r2
10046e54:	001a      	movs	r2, r3
10046e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046e58:	210f      	movs	r1, #15
10046e5a:	400b      	ands	r3, r1
10046e5c:	49dd      	ldr	r1, [pc, #884]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046e5e:	431a      	orrs	r2, r3
10046e60:	239d      	movs	r3, #157	@ 0x9d
10046e62:	009b      	lsls	r3, r3, #2
10046e64:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
10046e66:	231b      	movs	r3, #27
10046e68:	18fb      	adds	r3, r7, r3
10046e6a:	781b      	ldrb	r3, [r3, #0]
10046e6c:	2b00      	cmp	r3, #0
10046e6e:	d01e      	beq.n	10046eae <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
10046e70:	4ad8      	ldr	r2, [pc, #864]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046e72:	2392      	movs	r3, #146	@ 0x92
10046e74:	009b      	lsls	r3, r3, #2
10046e76:	58d3      	ldr	r3, [r2, r3]
10046e78:	2207      	movs	r2, #7
10046e7a:	4393      	bics	r3, r2
10046e7c:	001a      	movs	r2, r3
10046e7e:	6a3b      	ldr	r3, [r7, #32]
10046e80:	2107      	movs	r1, #7
10046e82:	400b      	ands	r3, r1
10046e84:	49d3      	ldr	r1, [pc, #844]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046e86:	431a      	orrs	r2, r3
10046e88:	2392      	movs	r3, #146	@ 0x92
10046e8a:	009b      	lsls	r3, r3, #2
10046e8c:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
10046e8e:	4ad1      	ldr	r2, [pc, #836]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046e90:	2392      	movs	r3, #146	@ 0x92
10046e92:	009b      	lsls	r3, r3, #2
10046e94:	58d3      	ldr	r3, [r2, r3]
10046e96:	2238      	movs	r2, #56	@ 0x38
10046e98:	4393      	bics	r3, r2
10046e9a:	001a      	movs	r2, r3
10046e9c:	69fb      	ldr	r3, [r7, #28]
10046e9e:	00db      	lsls	r3, r3, #3
10046ea0:	2138      	movs	r1, #56	@ 0x38
10046ea2:	400b      	ands	r3, r1
10046ea4:	49cb      	ldr	r1, [pc, #812]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046ea6:	431a      	orrs	r2, r3
10046ea8:	2392      	movs	r3, #146	@ 0x92
10046eaa:	009b      	lsls	r3, r3, #2
10046eac:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
10046eae:	4ac9      	ldr	r2, [pc, #804]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046eb0:	23a4      	movs	r3, #164	@ 0xa4
10046eb2:	005b      	lsls	r3, r3, #1
10046eb4:	58d3      	ldr	r3, [r2, r3]
10046eb6:	22ff      	movs	r2, #255	@ 0xff
10046eb8:	4393      	bics	r3, r2
10046eba:	49c6      	ldr	r1, [pc, #792]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046ebc:	2255      	movs	r2, #85	@ 0x55
10046ebe:	431a      	orrs	r2, r3
10046ec0:	23a4      	movs	r3, #164	@ 0xa4
10046ec2:	005b      	lsls	r3, r3, #1
10046ec4:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
10046ec6:	4ac3      	ldr	r2, [pc, #780]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046ec8:	23aa      	movs	r3, #170	@ 0xaa
10046eca:	005b      	lsls	r3, r3, #1
10046ecc:	58d3      	ldr	r3, [r2, r3]
10046ece:	22ff      	movs	r2, #255	@ 0xff
10046ed0:	4393      	bics	r3, r2
10046ed2:	49c0      	ldr	r1, [pc, #768]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046ed4:	2266      	movs	r2, #102	@ 0x66
10046ed6:	431a      	orrs	r2, r3
10046ed8:	23aa      	movs	r3, #170	@ 0xaa
10046eda:	005b      	lsls	r3, r3, #1
10046edc:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
10046ede:	4abd      	ldr	r2, [pc, #756]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046ee0:	23b4      	movs	r3, #180	@ 0xb4
10046ee2:	005b      	lsls	r3, r3, #1
10046ee4:	58d3      	ldr	r3, [r2, r3]
10046ee6:	22ff      	movs	r2, #255	@ 0xff
10046ee8:	4393      	bics	r3, r2
10046eea:	49ba      	ldr	r1, [pc, #744]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046eec:	2255      	movs	r2, #85	@ 0x55
10046eee:	431a      	orrs	r2, r3
10046ef0:	23b4      	movs	r3, #180	@ 0xb4
10046ef2:	005b      	lsls	r3, r3, #1
10046ef4:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
10046ef6:	4ab7      	ldr	r2, [pc, #732]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046ef8:	23c4      	movs	r3, #196	@ 0xc4
10046efa:	005b      	lsls	r3, r3, #1
10046efc:	58d3      	ldr	r3, [r2, r3]
10046efe:	22ff      	movs	r2, #255	@ 0xff
10046f00:	4393      	bics	r3, r2
10046f02:	49b4      	ldr	r1, [pc, #720]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f04:	221d      	movs	r2, #29
10046f06:	431a      	orrs	r2, r3
10046f08:	23c4      	movs	r3, #196	@ 0xc4
10046f0a:	005b      	lsls	r3, r3, #1
10046f0c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
10046f0e:	4ab1      	ldr	r2, [pc, #708]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f10:	23c2      	movs	r3, #194	@ 0xc2
10046f12:	005b      	lsls	r3, r3, #1
10046f14:	58d3      	ldr	r3, [r2, r3]
10046f16:	22ff      	movs	r2, #255	@ 0xff
10046f18:	4393      	bics	r3, r2
10046f1a:	49ae      	ldr	r1, [pc, #696]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f1c:	2259      	movs	r2, #89	@ 0x59
10046f1e:	431a      	orrs	r2, r3
10046f20:	23c2      	movs	r3, #194	@ 0xc2
10046f22:	005b      	lsls	r3, r3, #1
10046f24:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
10046f26:	4aab      	ldr	r2, [pc, #684]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f28:	23c6      	movs	r3, #198	@ 0xc6
10046f2a:	005b      	lsls	r3, r3, #1
10046f2c:	58d3      	ldr	r3, [r2, r3]
10046f2e:	22ff      	movs	r2, #255	@ 0xff
10046f30:	4393      	bics	r3, r2
10046f32:	49a8      	ldr	r1, [pc, #672]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f34:	2232      	movs	r2, #50	@ 0x32
10046f36:	431a      	orrs	r2, r3
10046f38:	23c6      	movs	r3, #198	@ 0xc6
10046f3a:	005b      	lsls	r3, r3, #1
10046f3c:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
10046f3e:	4aa5      	ldr	r2, [pc, #660]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f40:	23b6      	movs	r3, #182	@ 0xb6
10046f42:	005b      	lsls	r3, r3, #1
10046f44:	58d3      	ldr	r3, [r2, r3]
10046f46:	49a3      	ldr	r1, [pc, #652]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f48:	2201      	movs	r2, #1
10046f4a:	431a      	orrs	r2, r3
10046f4c:	23b6      	movs	r3, #182	@ 0xb6
10046f4e:	005b      	lsls	r3, r3, #1
10046f50:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
10046f52:	4aa0      	ldr	r2, [pc, #640]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f54:	23d0      	movs	r3, #208	@ 0xd0
10046f56:	009b      	lsls	r3, r3, #2
10046f58:	58d3      	ldr	r3, [r2, r3]
10046f5a:	227f      	movs	r2, #127	@ 0x7f
10046f5c:	4393      	bics	r3, r2
10046f5e:	499d      	ldr	r1, [pc, #628]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f60:	221f      	movs	r2, #31
10046f62:	431a      	orrs	r2, r3
10046f64:	23d0      	movs	r3, #208	@ 0xd0
10046f66:	009b      	lsls	r3, r3, #2
10046f68:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
10046f6a:	4a9a      	ldr	r2, [pc, #616]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f6c:	23d1      	movs	r3, #209	@ 0xd1
10046f6e:	009b      	lsls	r3, r3, #2
10046f70:	58d3      	ldr	r3, [r2, r3]
10046f72:	223f      	movs	r2, #63	@ 0x3f
10046f74:	4393      	bics	r3, r2
10046f76:	4997      	ldr	r1, [pc, #604]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10046f78:	2209      	movs	r2, #9
10046f7a:	431a      	orrs	r2, r3
10046f7c:	23d1      	movs	r3, #209	@ 0xd1
10046f7e:	009b      	lsls	r3, r3, #2
10046f80:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
10046f82:	2040      	movs	r0, #64	@ 0x40
10046f84:	f7ff fd4c 	bl	10046a20 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
10046f88:	203f      	movs	r0, #63	@ 0x3f
10046f8a:	f7ff fd61 	bl	10046a50 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
10046f8e:	2009      	movs	r0, #9
10046f90:	f7ff fd78 	bl	10046a84 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
10046f94:	205a      	movs	r0, #90	@ 0x5a
10046f96:	f7ff fdb7 	bl	10046b08 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
10046f9a:	2032      	movs	r0, #50	@ 0x32
10046f9c:	f7ff fdce 	bl	10046b3c <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
10046fa0:	205a      	movs	r0, #90	@ 0x5a
10046fa2:	f7ff fd83 	bl	10046aac <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
10046fa6:	2032      	movs	r0, #50	@ 0x32
10046fa8:	f7ff fd96 	bl	10046ad8 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
10046fac:	2010      	movs	r0, #16
10046fae:	f7ff fe07 	bl	10046bc0 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
10046fb2:	2010      	movs	r0, #16
10046fb4:	f7ff fe1e 	bl	10046bf4 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
10046fb8:	2004      	movs	r0, #4
10046fba:	f7ff fe35 	bl	10046c28 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
10046fbe:	2014      	movs	r0, #20
10046fc0:	f7ff fdd0 	bl	10046b64 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
10046fc4:	2005      	movs	r0, #5
10046fc6:	f7ff fde3 	bl	10046b90 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
10046fca:	f7ff fe43 	bl	10046c54 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
10046fce:	f7ff fe4f 	bl	10046c70 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
10046fd2:	f7ff fe5b 	bl	10046c8c <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
10046fd6:	2000      	movs	r0, #0
10046fd8:	f7ff fe74 	bl	10046cc4 <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
10046fdc:	2013      	movs	r0, #19
10046fde:	183b      	adds	r3, r7, r0
10046fe0:	2200      	movs	r2, #0
10046fe2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10046fe4:	183b      	adds	r3, r7, r0
10046fe6:	781b      	ldrb	r3, [r3, #0]
10046fe8:	183a      	adds	r2, r7, r0
10046fea:	1c59      	adds	r1, r3, #1
10046fec:	7011      	strb	r1, [r2, #0]
10046fee:	001a      	movs	r2, r3
10046ff0:	697b      	ldr	r3, [r7, #20]
10046ff2:	189b      	adds	r3, r3, r2
10046ff4:	2201      	movs	r2, #1
10046ff6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
10046ff8:	183b      	adds	r3, r7, r0
10046ffa:	781b      	ldrb	r3, [r3, #0]
10046ffc:	183a      	adds	r2, r7, r0
10046ffe:	1c59      	adds	r1, r3, #1
10047000:	7011      	strb	r1, [r2, #0]
10047002:	001a      	movs	r2, r3
10047004:	697b      	ldr	r3, [r7, #20]
10047006:	189b      	adds	r3, r3, r2
10047008:	225e      	movs	r2, #94	@ 0x5e
1004700a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
1004700c:	4a71      	ldr	r2, [pc, #452]	@ (100471d4 <HAL_RADIO_Init+0x488>)
1004700e:	239e      	movs	r3, #158	@ 0x9e
10047010:	009b      	lsls	r3, r3, #2
10047012:	58d1      	ldr	r1, [r2, r3]
10047014:	183b      	adds	r3, r7, r0
10047016:	781b      	ldrb	r3, [r3, #0]
10047018:	0004      	movs	r4, r0
1004701a:	183a      	adds	r2, r7, r0
1004701c:	1c58      	adds	r0, r3, #1
1004701e:	7010      	strb	r0, [r2, #0]
10047020:	001a      	movs	r2, r3
10047022:	697b      	ldr	r3, [r7, #20]
10047024:	189b      	adds	r3, r3, r2
10047026:	b2ca      	uxtb	r2, r1
10047028:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004702a:	0020      	movs	r0, r4
1004702c:	183b      	adds	r3, r7, r0
1004702e:	781b      	ldrb	r3, [r3, #0]
10047030:	183a      	adds	r2, r7, r0
10047032:	1c59      	adds	r1, r3, #1
10047034:	7011      	strb	r1, [r2, #0]
10047036:	001a      	movs	r2, r3
10047038:	697b      	ldr	r3, [r7, #20]
1004703a:	189b      	adds	r3, r3, r2
1004703c:	2201      	movs	r2, #1
1004703e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
10047040:	183b      	adds	r3, r7, r0
10047042:	781b      	ldrb	r3, [r3, #0]
10047044:	183a      	adds	r2, r7, r0
10047046:	1c59      	adds	r1, r3, #1
10047048:	7011      	strb	r1, [r2, #0]
1004704a:	001a      	movs	r2, r3
1004704c:	697b      	ldr	r3, [r7, #20]
1004704e:	189b      	adds	r3, r3, r2
10047050:	225d      	movs	r2, #93	@ 0x5d
10047052:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
10047054:	4a5f      	ldr	r2, [pc, #380]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10047056:	239d      	movs	r3, #157	@ 0x9d
10047058:	009b      	lsls	r3, r3, #2
1004705a:	58d1      	ldr	r1, [r2, r3]
1004705c:	183b      	adds	r3, r7, r0
1004705e:	781b      	ldrb	r3, [r3, #0]
10047060:	0004      	movs	r4, r0
10047062:	183a      	adds	r2, r7, r0
10047064:	1c58      	adds	r0, r3, #1
10047066:	7010      	strb	r0, [r2, #0]
10047068:	001a      	movs	r2, r3
1004706a:	697b      	ldr	r3, [r7, #20]
1004706c:	189b      	adds	r3, r3, r2
1004706e:	b2ca      	uxtb	r2, r1
10047070:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10047072:	0020      	movs	r0, r4
10047074:	183b      	adds	r3, r7, r0
10047076:	781b      	ldrb	r3, [r3, #0]
10047078:	183a      	adds	r2, r7, r0
1004707a:	1c59      	adds	r1, r3, #1
1004707c:	7011      	strb	r1, [r2, #0]
1004707e:	001a      	movs	r2, r3
10047080:	697b      	ldr	r3, [r7, #20]
10047082:	189b      	adds	r3, r3, r2
10047084:	2201      	movs	r2, #1
10047086:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
10047088:	183b      	adds	r3, r7, r0
1004708a:	781b      	ldrb	r3, [r3, #0]
1004708c:	183a      	adds	r2, r7, r0
1004708e:	1c59      	adds	r1, r3, #1
10047090:	7011      	strb	r1, [r2, #0]
10047092:	001a      	movs	r2, r3
10047094:	697b      	ldr	r3, [r7, #20]
10047096:	189b      	adds	r3, r3, r2
10047098:	2252      	movs	r2, #82	@ 0x52
1004709a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
1004709c:	4a4d      	ldr	r2, [pc, #308]	@ (100471d4 <HAL_RADIO_Init+0x488>)
1004709e:	2392      	movs	r3, #146	@ 0x92
100470a0:	009b      	lsls	r3, r3, #2
100470a2:	58d1      	ldr	r1, [r2, r3]
100470a4:	183b      	adds	r3, r7, r0
100470a6:	781b      	ldrb	r3, [r3, #0]
100470a8:	0004      	movs	r4, r0
100470aa:	183a      	adds	r2, r7, r0
100470ac:	1c58      	adds	r0, r3, #1
100470ae:	7010      	strb	r0, [r2, #0]
100470b0:	001a      	movs	r2, r3
100470b2:	697b      	ldr	r3, [r7, #20]
100470b4:	189b      	adds	r3, r3, r2
100470b6:	b2ca      	uxtb	r2, r1
100470b8:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
100470ba:	0020      	movs	r0, r4
100470bc:	183b      	adds	r3, r7, r0
100470be:	781b      	ldrb	r3, [r3, #0]
100470c0:	183a      	adds	r2, r7, r0
100470c2:	1c59      	adds	r1, r3, #1
100470c4:	7011      	strb	r1, [r2, #0]
100470c6:	001a      	movs	r2, r3
100470c8:	697b      	ldr	r3, [r7, #20]
100470ca:	189b      	adds	r3, r3, r2
100470cc:	2201      	movs	r2, #1
100470ce:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
100470d0:	183b      	adds	r3, r7, r0
100470d2:	781b      	ldrb	r3, [r3, #0]
100470d4:	183a      	adds	r2, r7, r0
100470d6:	1c59      	adds	r1, r3, #1
100470d8:	7011      	strb	r1, [r2, #0]
100470da:	001a      	movs	r2, r3
100470dc:	697b      	ldr	r3, [r7, #20]
100470de:	189b      	adds	r3, r3, r2
100470e0:	2212      	movs	r2, #18
100470e2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
100470e4:	4a3b      	ldr	r2, [pc, #236]	@ (100471d4 <HAL_RADIO_Init+0x488>)
100470e6:	23a4      	movs	r3, #164	@ 0xa4
100470e8:	005b      	lsls	r3, r3, #1
100470ea:	58d1      	ldr	r1, [r2, r3]
100470ec:	183b      	adds	r3, r7, r0
100470ee:	781b      	ldrb	r3, [r3, #0]
100470f0:	0004      	movs	r4, r0
100470f2:	183a      	adds	r2, r7, r0
100470f4:	1c58      	adds	r0, r3, #1
100470f6:	7010      	strb	r0, [r2, #0]
100470f8:	001a      	movs	r2, r3
100470fa:	697b      	ldr	r3, [r7, #20]
100470fc:	189b      	adds	r3, r3, r2
100470fe:	b2ca      	uxtb	r2, r1
10047100:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047102:	0020      	movs	r0, r4
10047104:	183b      	adds	r3, r7, r0
10047106:	781b      	ldrb	r3, [r3, #0]
10047108:	183a      	adds	r2, r7, r0
1004710a:	1c59      	adds	r1, r3, #1
1004710c:	7011      	strb	r1, [r2, #0]
1004710e:	001a      	movs	r2, r3
10047110:	697b      	ldr	r3, [r7, #20]
10047112:	189b      	adds	r3, r3, r2
10047114:	2201      	movs	r2, #1
10047116:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
10047118:	183b      	adds	r3, r7, r0
1004711a:	781b      	ldrb	r3, [r3, #0]
1004711c:	183a      	adds	r2, r7, r0
1004711e:	1c59      	adds	r1, r3, #1
10047120:	7011      	strb	r1, [r2, #0]
10047122:	001a      	movs	r2, r3
10047124:	697b      	ldr	r3, [r7, #20]
10047126:	189b      	adds	r3, r3, r2
10047128:	2215      	movs	r2, #21
1004712a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
1004712c:	4a29      	ldr	r2, [pc, #164]	@ (100471d4 <HAL_RADIO_Init+0x488>)
1004712e:	23aa      	movs	r3, #170	@ 0xaa
10047130:	005b      	lsls	r3, r3, #1
10047132:	58d1      	ldr	r1, [r2, r3]
10047134:	183b      	adds	r3, r7, r0
10047136:	781b      	ldrb	r3, [r3, #0]
10047138:	0004      	movs	r4, r0
1004713a:	183a      	adds	r2, r7, r0
1004713c:	1c58      	adds	r0, r3, #1
1004713e:	7010      	strb	r0, [r2, #0]
10047140:	001a      	movs	r2, r3
10047142:	697b      	ldr	r3, [r7, #20]
10047144:	189b      	adds	r3, r3, r2
10047146:	b2ca      	uxtb	r2, r1
10047148:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004714a:	0020      	movs	r0, r4
1004714c:	183b      	adds	r3, r7, r0
1004714e:	781b      	ldrb	r3, [r3, #0]
10047150:	183a      	adds	r2, r7, r0
10047152:	1c59      	adds	r1, r3, #1
10047154:	7011      	strb	r1, [r2, #0]
10047156:	001a      	movs	r2, r3
10047158:	697b      	ldr	r3, [r7, #20]
1004715a:	189b      	adds	r3, r3, r2
1004715c:	2201      	movs	r2, #1
1004715e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
10047160:	183b      	adds	r3, r7, r0
10047162:	781b      	ldrb	r3, [r3, #0]
10047164:	183a      	adds	r2, r7, r0
10047166:	1c59      	adds	r1, r3, #1
10047168:	7011      	strb	r1, [r2, #0]
1004716a:	001a      	movs	r2, r3
1004716c:	697b      	ldr	r3, [r7, #20]
1004716e:	189b      	adds	r3, r3, r2
10047170:	221a      	movs	r2, #26
10047172:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
10047174:	4a17      	ldr	r2, [pc, #92]	@ (100471d4 <HAL_RADIO_Init+0x488>)
10047176:	23b4      	movs	r3, #180	@ 0xb4
10047178:	005b      	lsls	r3, r3, #1
1004717a:	58d1      	ldr	r1, [r2, r3]
1004717c:	183b      	adds	r3, r7, r0
1004717e:	781b      	ldrb	r3, [r3, #0]
10047180:	0004      	movs	r4, r0
10047182:	183a      	adds	r2, r7, r0
10047184:	1c58      	adds	r0, r3, #1
10047186:	7010      	strb	r0, [r2, #0]
10047188:	001a      	movs	r2, r3
1004718a:	697b      	ldr	r3, [r7, #20]
1004718c:	189b      	adds	r3, r3, r2
1004718e:	b2ca      	uxtb	r2, r1
10047190:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047192:	0020      	movs	r0, r4
10047194:	183b      	adds	r3, r7, r0
10047196:	781b      	ldrb	r3, [r3, #0]
10047198:	183a      	adds	r2, r7, r0
1004719a:	1c59      	adds	r1, r3, #1
1004719c:	7011      	strb	r1, [r2, #0]
1004719e:	001a      	movs	r2, r3
100471a0:	697b      	ldr	r3, [r7, #20]
100471a2:	189b      	adds	r3, r3, r2
100471a4:	2201      	movs	r2, #1
100471a6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
100471a8:	183b      	adds	r3, r7, r0
100471aa:	781b      	ldrb	r3, [r3, #0]
100471ac:	183a      	adds	r2, r7, r0
100471ae:	1c59      	adds	r1, r3, #1
100471b0:	7011      	strb	r1, [r2, #0]
100471b2:	001a      	movs	r2, r3
100471b4:	697b      	ldr	r3, [r7, #20]
100471b6:	189b      	adds	r3, r3, r2
100471b8:	2222      	movs	r2, #34	@ 0x22
100471ba:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
100471bc:	4a05      	ldr	r2, [pc, #20]	@ (100471d4 <HAL_RADIO_Init+0x488>)
100471be:	23c4      	movs	r3, #196	@ 0xc4
100471c0:	005b      	lsls	r3, r3, #1
100471c2:	58d1      	ldr	r1, [r2, r3]
100471c4:	183b      	adds	r3, r7, r0
100471c6:	781b      	ldrb	r3, [r3, #0]
100471c8:	0004      	movs	r4, r0
100471ca:	e005      	b.n	100471d8 <HAL_RADIO_Init+0x48c>
100471cc:	200000c0 	.word	0x200000c0
100471d0:	60001800 	.word	0x60001800
100471d4:	60001400 	.word	0x60001400
100471d8:	183a      	adds	r2, r7, r0
100471da:	1c58      	adds	r0, r3, #1
100471dc:	7010      	strb	r0, [r2, #0]
100471de:	001a      	movs	r2, r3
100471e0:	697b      	ldr	r3, [r7, #20]
100471e2:	189b      	adds	r3, r3, r2
100471e4:	b2ca      	uxtb	r2, r1
100471e6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100471e8:	0020      	movs	r0, r4
100471ea:	183b      	adds	r3, r7, r0
100471ec:	781b      	ldrb	r3, [r3, #0]
100471ee:	183a      	adds	r2, r7, r0
100471f0:	1c59      	adds	r1, r3, #1
100471f2:	7011      	strb	r1, [r2, #0]
100471f4:	001a      	movs	r2, r3
100471f6:	697b      	ldr	r3, [r7, #20]
100471f8:	189b      	adds	r3, r3, r2
100471fa:	2201      	movs	r2, #1
100471fc:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
100471fe:	183b      	adds	r3, r7, r0
10047200:	781b      	ldrb	r3, [r3, #0]
10047202:	183a      	adds	r2, r7, r0
10047204:	1c59      	adds	r1, r3, #1
10047206:	7011      	strb	r1, [r2, #0]
10047208:	001a      	movs	r2, r3
1004720a:	697b      	ldr	r3, [r7, #20]
1004720c:	189b      	adds	r3, r3, r2
1004720e:	2221      	movs	r2, #33	@ 0x21
10047210:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
10047212:	4a6d      	ldr	r2, [pc, #436]	@ (100473c8 <HAL_RADIO_Init+0x67c>)
10047214:	23c2      	movs	r3, #194	@ 0xc2
10047216:	005b      	lsls	r3, r3, #1
10047218:	58d1      	ldr	r1, [r2, r3]
1004721a:	183b      	adds	r3, r7, r0
1004721c:	781b      	ldrb	r3, [r3, #0]
1004721e:	0004      	movs	r4, r0
10047220:	183a      	adds	r2, r7, r0
10047222:	1c58      	adds	r0, r3, #1
10047224:	7010      	strb	r0, [r2, #0]
10047226:	001a      	movs	r2, r3
10047228:	697b      	ldr	r3, [r7, #20]
1004722a:	189b      	adds	r3, r3, r2
1004722c:	b2ca      	uxtb	r2, r1
1004722e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047230:	0020      	movs	r0, r4
10047232:	183b      	adds	r3, r7, r0
10047234:	781b      	ldrb	r3, [r3, #0]
10047236:	183a      	adds	r2, r7, r0
10047238:	1c59      	adds	r1, r3, #1
1004723a:	7011      	strb	r1, [r2, #0]
1004723c:	001a      	movs	r2, r3
1004723e:	697b      	ldr	r3, [r7, #20]
10047240:	189b      	adds	r3, r3, r2
10047242:	2201      	movs	r2, #1
10047244:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
10047246:	183b      	adds	r3, r7, r0
10047248:	781b      	ldrb	r3, [r3, #0]
1004724a:	183a      	adds	r2, r7, r0
1004724c:	1c59      	adds	r1, r3, #1
1004724e:	7011      	strb	r1, [r2, #0]
10047250:	001a      	movs	r2, r3
10047252:	697b      	ldr	r3, [r7, #20]
10047254:	189b      	adds	r3, r3, r2
10047256:	2223      	movs	r2, #35	@ 0x23
10047258:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
1004725a:	4a5b      	ldr	r2, [pc, #364]	@ (100473c8 <HAL_RADIO_Init+0x67c>)
1004725c:	23c6      	movs	r3, #198	@ 0xc6
1004725e:	005b      	lsls	r3, r3, #1
10047260:	58d1      	ldr	r1, [r2, r3]
10047262:	183b      	adds	r3, r7, r0
10047264:	781b      	ldrb	r3, [r3, #0]
10047266:	0004      	movs	r4, r0
10047268:	183a      	adds	r2, r7, r0
1004726a:	1c58      	adds	r0, r3, #1
1004726c:	7010      	strb	r0, [r2, #0]
1004726e:	001a      	movs	r2, r3
10047270:	697b      	ldr	r3, [r7, #20]
10047272:	189b      	adds	r3, r3, r2
10047274:	b2ca      	uxtb	r2, r1
10047276:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047278:	0020      	movs	r0, r4
1004727a:	183b      	adds	r3, r7, r0
1004727c:	781b      	ldrb	r3, [r3, #0]
1004727e:	183a      	adds	r2, r7, r0
10047280:	1c59      	adds	r1, r3, #1
10047282:	7011      	strb	r1, [r2, #0]
10047284:	001a      	movs	r2, r3
10047286:	697b      	ldr	r3, [r7, #20]
10047288:	189b      	adds	r3, r3, r2
1004728a:	2201      	movs	r2, #1
1004728c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
1004728e:	183b      	adds	r3, r7, r0
10047290:	781b      	ldrb	r3, [r3, #0]
10047292:	183a      	adds	r2, r7, r0
10047294:	1c59      	adds	r1, r3, #1
10047296:	7011      	strb	r1, [r2, #0]
10047298:	001a      	movs	r2, r3
1004729a:	697b      	ldr	r3, [r7, #20]
1004729c:	189b      	adds	r3, r3, r2
1004729e:	221b      	movs	r2, #27
100472a0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
100472a2:	4a49      	ldr	r2, [pc, #292]	@ (100473c8 <HAL_RADIO_Init+0x67c>)
100472a4:	23b6      	movs	r3, #182	@ 0xb6
100472a6:	005b      	lsls	r3, r3, #1
100472a8:	58d1      	ldr	r1, [r2, r3]
100472aa:	183b      	adds	r3, r7, r0
100472ac:	781b      	ldrb	r3, [r3, #0]
100472ae:	0004      	movs	r4, r0
100472b0:	183a      	adds	r2, r7, r0
100472b2:	1c58      	adds	r0, r3, #1
100472b4:	7010      	strb	r0, [r2, #0]
100472b6:	001a      	movs	r2, r3
100472b8:	697b      	ldr	r3, [r7, #20]
100472ba:	189b      	adds	r3, r3, r2
100472bc:	b2ca      	uxtb	r2, r1
100472be:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
100472c0:	0020      	movs	r0, r4
100472c2:	183b      	adds	r3, r7, r0
100472c4:	781b      	ldrb	r3, [r3, #0]
100472c6:	183a      	adds	r2, r7, r0
100472c8:	1c59      	adds	r1, r3, #1
100472ca:	7011      	strb	r1, [r2, #0]
100472cc:	001a      	movs	r2, r3
100472ce:	697b      	ldr	r3, [r7, #20]
100472d0:	189b      	adds	r3, r3, r2
100472d2:	2201      	movs	r2, #1
100472d4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
100472d6:	183b      	adds	r3, r7, r0
100472d8:	781b      	ldrb	r3, [r3, #0]
100472da:	183a      	adds	r2, r7, r0
100472dc:	1c59      	adds	r1, r3, #1
100472de:	7011      	strb	r1, [r2, #0]
100472e0:	001a      	movs	r2, r3
100472e2:	697b      	ldr	r3, [r7, #20]
100472e4:	189b      	adds	r3, r3, r2
100472e6:	2290      	movs	r2, #144	@ 0x90
100472e8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
100472ea:	4a37      	ldr	r2, [pc, #220]	@ (100473c8 <HAL_RADIO_Init+0x67c>)
100472ec:	23d0      	movs	r3, #208	@ 0xd0
100472ee:	009b      	lsls	r3, r3, #2
100472f0:	58d1      	ldr	r1, [r2, r3]
100472f2:	183b      	adds	r3, r7, r0
100472f4:	781b      	ldrb	r3, [r3, #0]
100472f6:	0004      	movs	r4, r0
100472f8:	183a      	adds	r2, r7, r0
100472fa:	1c58      	adds	r0, r3, #1
100472fc:	7010      	strb	r0, [r2, #0]
100472fe:	001a      	movs	r2, r3
10047300:	697b      	ldr	r3, [r7, #20]
10047302:	189b      	adds	r3, r3, r2
10047304:	b2ca      	uxtb	r2, r1
10047306:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047308:	0020      	movs	r0, r4
1004730a:	183b      	adds	r3, r7, r0
1004730c:	781b      	ldrb	r3, [r3, #0]
1004730e:	183a      	adds	r2, r7, r0
10047310:	1c59      	adds	r1, r3, #1
10047312:	7011      	strb	r1, [r2, #0]
10047314:	001a      	movs	r2, r3
10047316:	697b      	ldr	r3, [r7, #20]
10047318:	189b      	adds	r3, r3, r2
1004731a:	2201      	movs	r2, #1
1004731c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
1004731e:	183b      	adds	r3, r7, r0
10047320:	781b      	ldrb	r3, [r3, #0]
10047322:	183a      	adds	r2, r7, r0
10047324:	1c59      	adds	r1, r3, #1
10047326:	7011      	strb	r1, [r2, #0]
10047328:	001a      	movs	r2, r3
1004732a:	697b      	ldr	r3, [r7, #20]
1004732c:	189b      	adds	r3, r3, r2
1004732e:	2291      	movs	r2, #145	@ 0x91
10047330:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
10047332:	4a25      	ldr	r2, [pc, #148]	@ (100473c8 <HAL_RADIO_Init+0x67c>)
10047334:	23d1      	movs	r3, #209	@ 0xd1
10047336:	009b      	lsls	r3, r3, #2
10047338:	58d1      	ldr	r1, [r2, r3]
1004733a:	183b      	adds	r3, r7, r0
1004733c:	781b      	ldrb	r3, [r3, #0]
1004733e:	0004      	movs	r4, r0
10047340:	183a      	adds	r2, r7, r0
10047342:	1c58      	adds	r0, r3, #1
10047344:	7010      	strb	r0, [r2, #0]
10047346:	001a      	movs	r2, r3
10047348:	697b      	ldr	r3, [r7, #20]
1004734a:	189b      	adds	r3, r3, r2
1004734c:	b2ca      	uxtb	r2, r1
1004734e:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
10047350:	193b      	adds	r3, r7, r4
10047352:	781b      	ldrb	r3, [r3, #0]
10047354:	193a      	adds	r2, r7, r4
10047356:	1c59      	adds	r1, r3, #1
10047358:	7011      	strb	r1, [r2, #0]
1004735a:	001a      	movs	r2, r3
1004735c:	697b      	ldr	r3, [r7, #20]
1004735e:	189b      	adds	r3, r3, r2
10047360:	2200      	movs	r2, #0
10047362:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
10047364:	4a19      	ldr	r2, [pc, #100]	@ (100473cc <HAL_RADIO_Init+0x680>)
10047366:	4b1a      	ldr	r3, [pc, #104]	@ (100473d0 <HAL_RADIO_Init+0x684>)
10047368:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
1004736a:	4a18      	ldr	r2, [pc, #96]	@ (100473cc <HAL_RADIO_Init+0x680>)
1004736c:	4b18      	ldr	r3, [pc, #96]	@ (100473d0 <HAL_RADIO_Init+0x684>)
1004736e:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
10047370:	4a18      	ldr	r2, [pc, #96]	@ (100473d4 <HAL_RADIO_Init+0x688>)
10047372:	4b17      	ldr	r3, [pc, #92]	@ (100473d0 <HAL_RADIO_Init+0x684>)
10047374:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
10047376:	4b16      	ldr	r3, [pc, #88]	@ (100473d0 <HAL_RADIO_Init+0x684>)
10047378:	2200      	movs	r2, #0
1004737a:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
1004737c:	4b14      	ldr	r3, [pc, #80]	@ (100473d0 <HAL_RADIO_Init+0x684>)
1004737e:	681b      	ldr	r3, [r3, #0]
10047380:	0018      	movs	r0, r3
10047382:	f7ff fb3d 	bl	10046a00 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
10047386:	4b10      	ldr	r3, [pc, #64]	@ (100473c8 <HAL_RADIO_Init+0x67c>)
10047388:	2201      	movs	r2, #1
1004738a:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
1004738c:	f7ff fc8c 	bl	10046ca8 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
10047390:	23c0      	movs	r3, #192	@ 0xc0
10047392:	05db      	lsls	r3, r3, #23
10047394:	685b      	ldr	r3, [r3, #4]
10047396:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
10047398:	23c0      	movs	r3, #192	@ 0xc0
1004739a:	05db      	lsls	r3, r3, #23
1004739c:	68fa      	ldr	r2, [r7, #12]
1004739e:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
100473a0:	4b0d      	ldr	r3, [pc, #52]	@ (100473d8 <HAL_RADIO_Init+0x68c>)
100473a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100473a4:	4b0c      	ldr	r3, [pc, #48]	@ (100473d8 <HAL_RADIO_Init+0x68c>)
100473a6:	2101      	movs	r1, #1
100473a8:	430a      	orrs	r2, r1
100473aa:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
100473ac:	4b0a      	ldr	r3, [pc, #40]	@ (100473d8 <HAL_RADIO_Init+0x68c>)
100473ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100473b0:	4b09      	ldr	r3, [pc, #36]	@ (100473d8 <HAL_RADIO_Init+0x68c>)
100473b2:	2101      	movs	r1, #1
100473b4:	430a      	orrs	r2, r1
100473b6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
100473b8:	23c0      	movs	r3, #192	@ 0xc0
100473ba:	05db      	lsls	r3, r3, #23
100473bc:	685b      	ldr	r3, [r3, #4]
100473be:	60fb      	str	r3, [r7, #12]

  return;
100473c0:	46c0      	nop			@ (mov r8, r8)
}
100473c2:	46bd      	mov	sp, r7
100473c4:	b00d      	add	sp, #52	@ 0x34
100473c6:	bd90      	pop	{r4, r7, pc}
100473c8:	60001400 	.word	0x60001400
100473cc:	200009e8 	.word	0x200009e8
100473d0:	200009d8 	.word	0x200009d8
100473d4:	200009e4 	.word	0x200009e4
100473d8:	60001800 	.word	0x60001800

100473dc <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
100473dc:	b580      	push	{r7, lr}
100473de:	b082      	sub	sp, #8
100473e0:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
100473e2:	23c0      	movs	r3, #192	@ 0xc0
100473e4:	05db      	lsls	r3, r3, #23
100473e6:	69db      	ldr	r3, [r3, #28]
100473e8:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
100473ea:	23c0      	movs	r3, #192	@ 0xc0
100473ec:	05db      	lsls	r3, r3, #23
100473ee:	685b      	ldr	r3, [r3, #4]
100473f0:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
100473f2:	23c0      	movs	r3, #192	@ 0xc0
100473f4:	05db      	lsls	r3, r3, #23
100473f6:	683a      	ldr	r2, [r7, #0]
100473f8:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
100473fa:	f000 fdd1 	bl	10047fa0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
100473fe:	687a      	ldr	r2, [r7, #4]
10047400:	683b      	ldr	r3, [r7, #0]
10047402:	4313      	orrs	r3, r2
10047404:	0018      	movs	r0, r3
10047406:	f7fa f956 	bl	100416b6 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
1004740a:	f000 fdc3 	bl	10047f94 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
1004740e:	23c0      	movs	r3, #192	@ 0xc0
10047410:	05db      	lsls	r3, r3, #23
10047412:	685b      	ldr	r3, [r3, #4]
10047414:	603b      	str	r3, [r7, #0]
}
10047416:	46c0      	nop			@ (mov r8, r8)
10047418:	46bd      	mov	sp, r7
1004741a:	b002      	add	sp, #8
1004741c:	bd80      	pop	{r7, pc}

1004741e <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
1004741e:	b580      	push	{r7, lr}
10047420:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
10047422:	f7fd fcbd 	bl	10044da0 <HAL_RADIO_TxRxSeqCallback>
}
10047426:	46c0      	nop			@ (mov r8, r8)
10047428:	46bd      	mov	sp, r7
1004742a:	bd80      	pop	{r7, pc}

1004742c <__NVIC_EnableIRQ>:
{
1004742c:	b580      	push	{r7, lr}
1004742e:	b082      	sub	sp, #8
10047430:	af00      	add	r7, sp, #0
10047432:	0002      	movs	r2, r0
10047434:	1dfb      	adds	r3, r7, #7
10047436:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10047438:	1dfb      	adds	r3, r7, #7
1004743a:	781b      	ldrb	r3, [r3, #0]
1004743c:	2b7f      	cmp	r3, #127	@ 0x7f
1004743e:	d809      	bhi.n	10047454 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10047440:	1dfb      	adds	r3, r7, #7
10047442:	781b      	ldrb	r3, [r3, #0]
10047444:	001a      	movs	r2, r3
10047446:	231f      	movs	r3, #31
10047448:	401a      	ands	r2, r3
1004744a:	4b04      	ldr	r3, [pc, #16]	@ (1004745c <__NVIC_EnableIRQ+0x30>)
1004744c:	2101      	movs	r1, #1
1004744e:	4091      	lsls	r1, r2
10047450:	000a      	movs	r2, r1
10047452:	601a      	str	r2, [r3, #0]
}
10047454:	46c0      	nop			@ (mov r8, r8)
10047456:	46bd      	mov	sp, r7
10047458:	b002      	add	sp, #8
1004745a:	bd80      	pop	{r7, pc}
1004745c:	e000e100 	.word	0xe000e100

10047460 <LL_RADIO_TIMER_EnableTimer1>:
{
10047460:	b580      	push	{r7, lr}
10047462:	b082      	sub	sp, #8
10047464:	af00      	add	r7, sp, #0
10047466:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
10047468:	687b      	ldr	r3, [r7, #4]
1004746a:	68db      	ldr	r3, [r3, #12]
1004746c:	2203      	movs	r2, #3
1004746e:	4393      	bics	r3, r2
10047470:	2202      	movs	r2, #2
10047472:	431a      	orrs	r2, r3
10047474:	687b      	ldr	r3, [r7, #4]
10047476:	60da      	str	r2, [r3, #12]
}
10047478:	46c0      	nop			@ (mov r8, r8)
1004747a:	46bd      	mov	sp, r7
1004747c:	b002      	add	sp, #8
1004747e:	bd80      	pop	{r7, pc}

10047480 <LL_RADIO_TIMER_DisableTimer1>:
{
10047480:	b580      	push	{r7, lr}
10047482:	b082      	sub	sp, #8
10047484:	af00      	add	r7, sp, #0
10047486:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10047488:	687b      	ldr	r3, [r7, #4]
1004748a:	68db      	ldr	r3, [r3, #12]
1004748c:	2203      	movs	r2, #3
1004748e:	4393      	bics	r3, r2
10047490:	001a      	movs	r2, r3
10047492:	687b      	ldr	r3, [r7, #4]
10047494:	60da      	str	r2, [r3, #12]
}
10047496:	46c0      	nop			@ (mov r8, r8)
10047498:	46bd      	mov	sp, r7
1004749a:	b002      	add	sp, #8
1004749c:	bd80      	pop	{r7, pc}

1004749e <LL_RADIO_TIMER_IsEnabledTimer1>:
{
1004749e:	b580      	push	{r7, lr}
100474a0:	b082      	sub	sp, #8
100474a2:	af00      	add	r7, sp, #0
100474a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_1)) ? 1UL : 0UL);
100474a6:	687b      	ldr	r3, [r7, #4]
100474a8:	68db      	ldr	r3, [r3, #12]
100474aa:	2203      	movs	r2, #3
100474ac:	4013      	ands	r3, r2
100474ae:	2b02      	cmp	r3, #2
100474b0:	d101      	bne.n	100474b6 <LL_RADIO_TIMER_IsEnabledTimer1+0x18>
100474b2:	2301      	movs	r3, #1
100474b4:	e000      	b.n	100474b8 <LL_RADIO_TIMER_IsEnabledTimer1+0x1a>
100474b6:	2300      	movs	r3, #0
}
100474b8:	0018      	movs	r0, r3
100474ba:	46bd      	mov	sp, r7
100474bc:	b002      	add	sp, #8
100474be:	bd80      	pop	{r7, pc}

100474c0 <LL_RADIO_TIMER_DisableTimer2>:
{
100474c0:	b580      	push	{r7, lr}
100474c2:	b082      	sub	sp, #8
100474c4:	af00      	add	r7, sp, #0
100474c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100474c8:	687b      	ldr	r3, [r7, #4]
100474ca:	68db      	ldr	r3, [r3, #12]
100474cc:	2203      	movs	r2, #3
100474ce:	4393      	bics	r3, r2
100474d0:	001a      	movs	r2, r3
100474d2:	687b      	ldr	r3, [r7, #4]
100474d4:	60da      	str	r2, [r3, #12]
}
100474d6:	46c0      	nop			@ (mov r8, r8)
100474d8:	46bd      	mov	sp, r7
100474da:	b002      	add	sp, #8
100474dc:	bd80      	pop	{r7, pc}

100474de <LL_RADIO_TIMER_IsEnabledTimer2>:
{
100474de:	b580      	push	{r7, lr}
100474e0:	b082      	sub	sp, #8
100474e2:	af00      	add	r7, sp, #0
100474e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_2)) ? 1UL : 0UL);
100474e6:	687b      	ldr	r3, [r7, #4]
100474e8:	68db      	ldr	r3, [r3, #12]
100474ea:	2203      	movs	r2, #3
100474ec:	4013      	ands	r3, r2
100474ee:	2b03      	cmp	r3, #3
100474f0:	d101      	bne.n	100474f6 <LL_RADIO_TIMER_IsEnabledTimer2+0x18>
100474f2:	2301      	movs	r3, #1
100474f4:	e000      	b.n	100474f8 <LL_RADIO_TIMER_IsEnabledTimer2+0x1a>
100474f6:	2300      	movs	r3, #0
}
100474f8:	0018      	movs	r0, r3
100474fa:	46bd      	mov	sp, r7
100474fc:	b002      	add	sp, #8
100474fe:	bd80      	pop	{r7, pc}

10047500 <LL_RADIO_TIMER_SetTimeout>:
{
10047500:	b580      	push	{r7, lr}
10047502:	b082      	sub	sp, #8
10047504:	af00      	add	r7, sp, #0
10047506:	6078      	str	r0, [r7, #4]
10047508:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
1004750a:	687b      	ldr	r3, [r7, #4]
1004750c:	683a      	ldr	r2, [r7, #0]
1004750e:	611a      	str	r2, [r3, #16]
}
10047510:	46c0      	nop			@ (mov r8, r8)
10047512:	46bd      	mov	sp, r7
10047514:	b002      	add	sp, #8
10047516:	bd80      	pop	{r7, pc}

10047518 <LL_RADIO_TIMER_GetTimeout>:
{
10047518:	b580      	push	{r7, lr}
1004751a:	b082      	sub	sp, #8
1004751c:	af00      	add	r7, sp, #0
1004751e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(BLUEx->TIMEOUTREG));
10047520:	687b      	ldr	r3, [r7, #4]
10047522:	691b      	ldr	r3, [r3, #16]
}
10047524:	0018      	movs	r0, r3
10047526:	46bd      	mov	sp, r7
10047528:	b002      	add	sp, #8
1004752a:	bd80      	pop	{r7, pc}

1004752c <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
1004752c:	b580      	push	{r7, lr}
1004752e:	b082      	sub	sp, #8
10047530:	af00      	add	r7, sp, #0
10047532:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10047534:	687b      	ldr	r3, [r7, #4]
10047536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10047538:	2280      	movs	r2, #128	@ 0x80
1004753a:	05d2      	lsls	r2, r2, #23
1004753c:	431a      	orrs	r2, r3
1004753e:	687b      	ldr	r3, [r7, #4]
10047540:	629a      	str	r2, [r3, #40]	@ 0x28
}
10047542:	46c0      	nop			@ (mov r8, r8)
10047544:	46bd      	mov	sp, r7
10047546:	b002      	add	sp, #8
10047548:	bd80      	pop	{r7, pc}
	...

1004754c <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004754c:	b580      	push	{r7, lr}
1004754e:	b082      	sub	sp, #8
10047550:	af00      	add	r7, sp, #0
10047552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10047554:	687b      	ldr	r3, [r7, #4]
10047556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10047558:	4a03      	ldr	r2, [pc, #12]	@ (10047568 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004755a:	401a      	ands	r2, r3
1004755c:	687b      	ldr	r3, [r7, #4]
1004755e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10047560:	46c0      	nop			@ (mov r8, r8)
10047562:	46bd      	mov	sp, r7
10047564:	b002      	add	sp, #8
10047566:	bd80      	pop	{r7, pc}
10047568:	bfffffff 	.word	0xbfffffff

1004756c <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>:
{
1004756c:	b580      	push	{r7, lr}
1004756e:	b082      	sub	sp, #8
10047570:	af00      	add	r7, sp, #0
10047572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN) == (WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN)) ? 1UL : 0UL);
10047574:	687b      	ldr	r3, [r7, #4]
10047576:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047578:	2380      	movs	r3, #128	@ 0x80
1004757a:	05db      	lsls	r3, r3, #23
1004757c:	401a      	ands	r2, r3
1004757e:	2380      	movs	r3, #128	@ 0x80
10047580:	05db      	lsls	r3, r3, #23
10047582:	429a      	cmp	r2, r3
10047584:	d101      	bne.n	1004758a <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x1e>
10047586:	2301      	movs	r3, #1
10047588:	e000      	b.n	1004758c <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x20>
1004758a:	2300      	movs	r3, #0
}
1004758c:	0018      	movs	r0, r3
1004758e:	46bd      	mov	sp, r7
10047590:	b002      	add	sp, #8
10047592:	bd80      	pop	{r7, pc}

10047594 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
10047594:	b580      	push	{r7, lr}
10047596:	b082      	sub	sp, #8
10047598:	af00      	add	r7, sp, #0
1004759a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004759c:	687b      	ldr	r3, [r7, #4]
1004759e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100475a0:	2280      	movs	r2, #128	@ 0x80
100475a2:	05d2      	lsls	r2, r2, #23
100475a4:	431a      	orrs	r2, r3
100475a6:	687b      	ldr	r3, [r7, #4]
100475a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
100475aa:	46c0      	nop			@ (mov r8, r8)
100475ac:	46bd      	mov	sp, r7
100475ae:	b002      	add	sp, #8
100475b0:	bd80      	pop	{r7, pc}
	...

100475b4 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
100475b4:	b580      	push	{r7, lr}
100475b6:	b082      	sub	sp, #8
100475b8:	af00      	add	r7, sp, #0
100475ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
100475bc:	687b      	ldr	r3, [r7, #4]
100475be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100475c0:	4a03      	ldr	r2, [pc, #12]	@ (100475d0 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
100475c2:	401a      	ands	r2, r3
100475c4:	687b      	ldr	r3, [r7, #4]
100475c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
100475c8:	46c0      	nop			@ (mov r8, r8)
100475ca:	46bd      	mov	sp, r7
100475cc:	b002      	add	sp, #8
100475ce:	bd80      	pop	{r7, pc}
100475d0:	bfffffff 	.word	0xbfffffff

100475d4 <LL_RADIO_TIMER_SetWakeupOffset>:
{
100475d4:	b580      	push	{r7, lr}
100475d6:	b082      	sub	sp, #8
100475d8:	af00      	add	r7, sp, #0
100475da:	6078      	str	r0, [r7, #4]
100475dc:	000a      	movs	r2, r1
100475de:	1cfb      	adds	r3, r7, #3
100475e0:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
100475e2:	1cfb      	adds	r3, r7, #3
100475e4:	781a      	ldrb	r2, [r3, #0]
100475e6:	687b      	ldr	r3, [r7, #4]
100475e8:	609a      	str	r2, [r3, #8]
}
100475ea:	46c0      	nop			@ (mov r8, r8)
100475ec:	46bd      	mov	sp, r7
100475ee:	b002      	add	sp, #8
100475f0:	bd80      	pop	{r7, pc}

100475f2 <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
100475f2:	b580      	push	{r7, lr}
100475f4:	b082      	sub	sp, #8
100475f6:	af00      	add	r7, sp, #0
100475f8:	6078      	str	r0, [r7, #4]
100475fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
100475fc:	687b      	ldr	r3, [r7, #4]
100475fe:	683a      	ldr	r2, [r7, #0]
10047600:	625a      	str	r2, [r3, #36]	@ 0x24
}
10047602:	46c0      	nop			@ (mov r8, r8)
10047604:	46bd      	mov	sp, r7
10047606:	b002      	add	sp, #8
10047608:	bd80      	pop	{r7, pc}

1004760a <LL_RADIO_TIMER_GetBLEWakeupTime>:
{
1004760a:	b580      	push	{r7, lr}
1004760c:	b082      	sub	sp, #8
1004760e:	af00      	add	r7, sp, #0
10047610:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->BLUE_WAKEUP_TIME));
10047612:	687b      	ldr	r3, [r7, #4]
10047614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
10047616:	0018      	movs	r0, r3
10047618:	46bd      	mov	sp, r7
1004761a:	b002      	add	sp, #8
1004761c:	bd80      	pop	{r7, pc}

1004761e <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004761e:	b580      	push	{r7, lr}
10047620:	b082      	sub	sp, #8
10047622:	af00      	add	r7, sp, #0
10047624:	6078      	str	r0, [r7, #4]
10047626:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
10047628:	687b      	ldr	r3, [r7, #4]
1004762a:	683a      	ldr	r2, [r7, #0]
1004762c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004762e:	46c0      	nop			@ (mov r8, r8)
10047630:	46bd      	mov	sp, r7
10047632:	b002      	add	sp, #8
10047634:	bd80      	pop	{r7, pc}

10047636 <LL_RADIO_TIMER_GetAbsoluteTime>:
{
10047636:	b580      	push	{r7, lr}
10047638:	b082      	sub	sp, #8
1004763a:	af00      	add	r7, sp, #0
1004763c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004763e:	687b      	ldr	r3, [r7, #4]
10047640:	691b      	ldr	r3, [r3, #16]
}
10047642:	0018      	movs	r0, r3
10047644:	46bd      	mov	sp, r7
10047646:	b002      	add	sp, #8
10047648:	bd80      	pop	{r7, pc}

1004764a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004764a:	b580      	push	{r7, lr}
1004764c:	b082      	sub	sp, #8
1004764e:	af00      	add	r7, sp, #0
10047650:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
10047652:	687b      	ldr	r3, [r7, #4]
10047654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10047656:	2280      	movs	r2, #128	@ 0x80
10047658:	0592      	lsls	r2, r2, #22
1004765a:	431a      	orrs	r2, r3
1004765c:	687b      	ldr	r3, [r7, #4]
1004765e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10047660:	46c0      	nop			@ (mov r8, r8)
10047662:	46bd      	mov	sp, r7
10047664:	b002      	add	sp, #8
10047666:	bd80      	pop	{r7, pc}

10047668 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
10047668:	b580      	push	{r7, lr}
1004766a:	b082      	sub	sp, #8
1004766c:	af00      	add	r7, sp, #0
1004766e:	6078      	str	r0, [r7, #4]
10047670:	000a      	movs	r2, r1
10047672:	1cfb      	adds	r3, r7, #3
10047674:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
10047676:	46c0      	nop			@ (mov r8, r8)
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
#endif
}
10047678:	46bd      	mov	sp, r7
1004767a:	b002      	add	sp, #8
1004767c:	bd80      	pop	{r7, pc}

1004767e <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004767e:	b580      	push	{r7, lr}
10047680:	b082      	sub	sp, #8
10047682:	af00      	add	r7, sp, #0
10047684:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
10047686:	687b      	ldr	r3, [r7, #4]
10047688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004768a:	2201      	movs	r2, #1
1004768c:	431a      	orrs	r2, r3
1004768e:	687b      	ldr	r3, [r7, #4]
10047690:	649a      	str	r2, [r3, #72]	@ 0x48
}
10047692:	46c0      	nop			@ (mov r8, r8)
10047694:	46bd      	mov	sp, r7
10047696:	b002      	add	sp, #8
10047698:	bd80      	pop	{r7, pc}

1004769a <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004769a:	b580      	push	{r7, lr}
1004769c:	b082      	sub	sp, #8
1004769e:	af00      	add	r7, sp, #0
100476a0:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
100476a2:	687b      	ldr	r3, [r7, #4]
100476a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100476a6:	2201      	movs	r2, #1
100476a8:	431a      	orrs	r2, r3
100476aa:	687b      	ldr	r3, [r7, #4]
100476ac:	64da      	str	r2, [r3, #76]	@ 0x4c
}
100476ae:	46c0      	nop			@ (mov r8, r8)
100476b0:	46bd      	mov	sp, r7
100476b2:	b002      	add	sp, #8
100476b4:	bd80      	pop	{r7, pc}

100476b6 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
100476b6:	b580      	push	{r7, lr}
100476b8:	b082      	sub	sp, #8
100476ba:	af00      	add	r7, sp, #0
100476bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
100476be:	687b      	ldr	r3, [r7, #4]
100476c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100476c2:	2201      	movs	r2, #1
100476c4:	4013      	ands	r3, r2
100476c6:	2b01      	cmp	r3, #1
100476c8:	d101      	bne.n	100476ce <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
100476ca:	2301      	movs	r3, #1
100476cc:	e000      	b.n	100476d0 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
100476ce:	2300      	movs	r3, #0
}
100476d0:	0018      	movs	r0, r3
100476d2:	46bd      	mov	sp, r7
100476d4:	b002      	add	sp, #8
100476d6:	bd80      	pop	{r7, pc}

100476d8 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
100476d8:	b580      	push	{r7, lr}
100476da:	b082      	sub	sp, #8
100476dc:	af00      	add	r7, sp, #0
100476de:	6078      	str	r0, [r7, #4]
100476e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
100476e2:	687b      	ldr	r3, [r7, #4]
100476e4:	683a      	ldr	r2, [r7, #0]
100476e6:	605a      	str	r2, [r3, #4]
}
100476e8:	46c0      	nop			@ (mov r8, r8)
100476ea:	46bd      	mov	sp, r7
100476ec:	b002      	add	sp, #8
100476ee:	bd80      	pop	{r7, pc}

100476f0 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
100476f0:	b580      	push	{r7, lr}
100476f2:	b082      	sub	sp, #8
100476f4:	af00      	add	r7, sp, #0
100476f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
100476f8:	687b      	ldr	r3, [r7, #4]
100476fa:	2200      	movs	r2, #0
100476fc:	609a      	str	r2, [r3, #8]
}
100476fe:	46c0      	nop			@ (mov r8, r8)
10047700:	46bd      	mov	sp, r7
10047702:	b002      	add	sp, #8
10047704:	bd80      	pop	{r7, pc}

10047706 <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10047706:	b580      	push	{r7, lr}
10047708:	b082      	sub	sp, #8
1004770a:	af00      	add	r7, sp, #0
1004770c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
1004770e:	687b      	ldr	r3, [r7, #4]
10047710:	689b      	ldr	r3, [r3, #8]
}
10047712:	0018      	movs	r0, r3
10047714:	46bd      	mov	sp, r7
10047716:	b002      	add	sp, #8
10047718:	bd80      	pop	{r7, pc}

1004771a <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004771a:	b580      	push	{r7, lr}
1004771c:	b082      	sub	sp, #8
1004771e:	af00      	add	r7, sp, #0
10047720:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
10047722:	687b      	ldr	r3, [r7, #4]
10047724:	68db      	ldr	r3, [r3, #12]
}
10047726:	0018      	movs	r0, r3
10047728:	46bd      	mov	sp, r7
1004772a:	b002      	add	sp, #8
1004772c:	bd80      	pop	{r7, pc}

1004772e <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004772e:	b580      	push	{r7, lr}
10047730:	b082      	sub	sp, #8
10047732:	af00      	add	r7, sp, #0
10047734:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
10047736:	687b      	ldr	r3, [r7, #4]
10047738:	691b      	ldr	r3, [r3, #16]
1004773a:	2201      	movs	r2, #1
1004773c:	431a      	orrs	r2, r3
1004773e:	687b      	ldr	r3, [r7, #4]
10047740:	611a      	str	r2, [r3, #16]
}
10047742:	46c0      	nop			@ (mov r8, r8)
10047744:	46bd      	mov	sp, r7
10047746:	b002      	add	sp, #8
10047748:	bd80      	pop	{r7, pc}

1004774a <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004774a:	b580      	push	{r7, lr}
1004774c:	b082      	sub	sp, #8
1004774e:	af00      	add	r7, sp, #0
10047750:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
10047752:	687b      	ldr	r3, [r7, #4]
10047754:	691b      	ldr	r3, [r3, #16]
10047756:	2201      	movs	r2, #1
10047758:	4013      	ands	r3, r2
1004775a:	2b01      	cmp	r3, #1
1004775c:	d101      	bne.n	10047762 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004775e:	2301      	movs	r3, #1
10047760:	e000      	b.n	10047764 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
10047762:	2300      	movs	r3, #0
}
10047764:	0018      	movs	r0, r3
10047766:	46bd      	mov	sp, r7
10047768:	b002      	add	sp, #8
1004776a:	bd80      	pop	{r7, pc}

1004776c <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
1004776c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004776e:	b083      	sub	sp, #12
10047770:	af00      	add	r7, sp, #0
10047772:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10047774:	4b70      	ldr	r3, [pc, #448]	@ (10047938 <HAL_RADIO_TIMER_Init+0x1cc>)
10047776:	0018      	movs	r0, r3
10047778:	f7ff ff8f 	bl	1004769a <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
1004777c:	4b6e      	ldr	r3, [pc, #440]	@ (10047938 <HAL_RADIO_TIMER_Init+0x1cc>)
1004777e:	0018      	movs	r0, r3
10047780:	f7ff ff7d 	bl	1004767e <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
10047784:	2017      	movs	r0, #23
10047786:	f7ff fe51 	bl	1004742c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004778a:	2014      	movs	r0, #20
1004778c:	f7ff fe4e 	bl	1004742c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
10047790:	687b      	ldr	r3, [r7, #4]
10047792:	685b      	ldr	r3, [r3, #4]
10047794:	1e5a      	subs	r2, r3, #1
10047796:	4193      	sbcs	r3, r2
10047798:	b2db      	uxtb	r3, r3
1004779a:	001a      	movs	r2, r3
1004779c:	4b67      	ldr	r3, [pc, #412]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
1004779e:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
100477a0:	4b66      	ldr	r3, [pc, #408]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100477a2:	781b      	ldrb	r3, [r3, #0]
100477a4:	2b00      	cmp	r3, #0
100477a6:	d103      	bne.n	100477b0 <HAL_RADIO_TIMER_Init+0x44>
100477a8:	687b      	ldr	r3, [r7, #4]
100477aa:	789b      	ldrb	r3, [r3, #2]
100477ac:	2b00      	cmp	r3, #0
100477ae:	d002      	beq.n	100477b6 <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
100477b0:	f000 fcce 	bl	10048150 <_calibrationProcedure>
100477b4:	e010      	b.n	100477d8 <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
100477b6:	4b61      	ldr	r3, [pc, #388]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100477b8:	22c8      	movs	r2, #200	@ 0xc8
100477ba:	0352      	lsls	r2, r2, #13
100477bc:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
100477be:	4b5f      	ldr	r3, [pc, #380]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100477c0:	22c8      	movs	r2, #200	@ 0xc8
100477c2:	0352      	lsls	r2, r2, #13
100477c4:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
100477c6:	4b5d      	ldr	r3, [pc, #372]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100477c8:	4a5d      	ldr	r2, [pc, #372]	@ (10047940 <HAL_RADIO_TIMER_Init+0x1d4>)
100477ca:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
100477cc:	4b5b      	ldr	r3, [pc, #364]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100477ce:	4a5d      	ldr	r2, [pc, #372]	@ (10047944 <HAL_RADIO_TIMER_Init+0x1d8>)
100477d0:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
100477d2:	4b5a      	ldr	r3, [pc, #360]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100477d4:	4a5c      	ldr	r2, [pc, #368]	@ (10047948 <HAL_RADIO_TIMER_Init+0x1dc>)
100477d6:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
100477d8:	687b      	ldr	r3, [r7, #4]
100477da:	685b      	ldr	r3, [r3, #4]
100477dc:	2b00      	cmp	r3, #0
100477de:	d108      	bne.n	100477f2 <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
100477e0:	23a0      	movs	r3, #160	@ 0xa0
100477e2:	05db      	lsls	r3, r3, #23
100477e4:	0018      	movs	r0, r3
100477e6:	f000 fbe7 	bl	10047fb8 <HAL_RADIO_TIMER_MachineTimeToSysTime>
100477ea:	0002      	movs	r2, r0
100477ec:	4b53      	ldr	r3, [pc, #332]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100477ee:	605a      	str	r2, [r3, #4]
100477f0:	e01d      	b.n	1004782e <HAL_RADIO_TIMER_Init+0xc2>
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
100477f2:	687b      	ldr	r3, [r7, #4]
100477f4:	685b      	ldr	r3, [r3, #4]
100477f6:	031b      	lsls	r3, r3, #12
100477f8:	210a      	movs	r1, #10
100477fa:	0018      	movs	r0, r3
100477fc:	f7f8 fd18 	bl	10040230 <__udivsi3>
10047800:	0003      	movs	r3, r0
10047802:	001a      	movs	r2, r3
10047804:	4b4d      	ldr	r3, [pc, #308]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047806:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10047808:	4b4c      	ldr	r3, [pc, #304]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
1004780a:	685e      	ldr	r6, [r3, #4]
1004780c:	4b4f      	ldr	r3, [pc, #316]	@ (1004794c <HAL_RADIO_TIMER_Init+0x1e0>)
1004780e:	0018      	movs	r0, r3
10047810:	f000 fbd2 	bl	10047fb8 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10047814:	0003      	movs	r3, r0
10047816:	429e      	cmp	r6, r3
10047818:	d202      	bcs.n	10047820 <HAL_RADIO_TIMER_Init+0xb4>
1004781a:	4b48      	ldr	r3, [pc, #288]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
1004781c:	685a      	ldr	r2, [r3, #4]
1004781e:	e004      	b.n	1004782a <HAL_RADIO_TIMER_Init+0xbe>
10047820:	4b4a      	ldr	r3, [pc, #296]	@ (1004794c <HAL_RADIO_TIMER_Init+0x1e0>)
10047822:	0018      	movs	r0, r3
10047824:	f000 fbc8 	bl	10047fb8 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10047828:	0002      	movs	r2, r0
1004782a:	4b44      	ldr	r3, [pc, #272]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
1004782c:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004782e:	4b43      	ldr	r3, [pc, #268]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047830:	2200      	movs	r2, #0
10047832:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
10047834:	687b      	ldr	r3, [r7, #4]
10047836:	881b      	ldrh	r3, [r3, #0]
10047838:	001a      	movs	r2, r3
1004783a:	4b40      	ldr	r3, [pc, #256]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
1004783c:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004783e:	4b3f      	ldr	r3, [pc, #252]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
10047842:	b29a      	uxth	r2, r3
10047844:	4b3d      	ldr	r3, [pc, #244]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047846:	699b      	ldr	r3, [r3, #24]
10047848:	0019      	movs	r1, r3
1004784a:	0010      	movs	r0, r2
1004784c:	f000 fdf4 	bl	10048438 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
10047850:	4b3a      	ldr	r3, [pc, #232]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047852:	2284      	movs	r2, #132	@ 0x84
10047854:	2100      	movs	r1, #0
10047856:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
10047858:	4938      	ldr	r1, [pc, #224]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
1004785a:	2200      	movs	r2, #0
1004785c:	2300      	movs	r3, #0
1004785e:	670a      	str	r2, [r1, #112]	@ 0x70
10047860:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047862:	4b35      	ldr	r3, [pc, #212]	@ (10047938 <HAL_RADIO_TIMER_Init+0x1cc>)
10047864:	0018      	movs	r0, r3
10047866:	f7ff fee6 	bl	10047636 <LL_RADIO_TIMER_GetAbsoluteTime>
1004786a:	0002      	movs	r2, r0
1004786c:	4b33      	ldr	r3, [pc, #204]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
1004786e:	2180      	movs	r1, #128	@ 0x80
10047870:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
10047872:	4932      	ldr	r1, [pc, #200]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047874:	2200      	movs	r2, #0
10047876:	2300      	movs	r3, #0
10047878:	678a      	str	r2, [r1, #120]	@ 0x78
1004787a:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
1004787c:	492f      	ldr	r1, [pc, #188]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
1004787e:	2200      	movs	r2, #0
10047880:	2300      	movs	r3, #0
10047882:	628a      	str	r2, [r1, #40]	@ 0x28
10047884:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
10047886:	4b2d      	ldr	r3, [pc, #180]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047888:	2234      	movs	r2, #52	@ 0x34
1004788a:	2100      	movs	r1, #0
1004788c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004788e:	4b2b      	ldr	r3, [pc, #172]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047890:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10047892:	4b2a      	ldr	r3, [pc, #168]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047894:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10047896:	0019      	movs	r1, r3
10047898:	4b2d      	ldr	r3, [pc, #180]	@ (10047950 <HAL_RADIO_TIMER_Init+0x1e4>)
1004789a:	001a      	movs	r2, r3
1004789c:	f7f8 fc10 	bl	100400c0 <blue_unit_conversion>
100478a0:	0002      	movs	r2, r0
100478a2:	4b26      	ldr	r3, [pc, #152]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478a4:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
100478a6:	4b25      	ldr	r3, [pc, #148]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478a8:	7819      	ldrb	r1, [r3, #0]
100478aa:	4b24      	ldr	r3, [pc, #144]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478ac:	2294      	movs	r2, #148	@ 0x94
100478ae:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
100478b0:	4b22      	ldr	r3, [pc, #136]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478b2:	228c      	movs	r2, #140	@ 0x8c
100478b4:	2100      	movs	r1, #0
100478b6:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
100478b8:	4b20      	ldr	r3, [pc, #128]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478ba:	2290      	movs	r2, #144	@ 0x90
100478bc:	2101      	movs	r1, #1
100478be:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
100478c0:	4b1e      	ldr	r3, [pc, #120]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478c2:	2293      	movs	r2, #147	@ 0x93
100478c4:	2100      	movs	r1, #0
100478c6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
100478c8:	4b1c      	ldr	r3, [pc, #112]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478ca:	2291      	movs	r2, #145	@ 0x91
100478cc:	2100      	movs	r1, #0
100478ce:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
100478d0:	4b1a      	ldr	r3, [pc, #104]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478d2:	2292      	movs	r2, #146	@ 0x92
100478d4:	2100      	movs	r1, #0
100478d6:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
100478d8:	4b18      	ldr	r3, [pc, #96]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478da:	2261      	movs	r2, #97	@ 0x61
100478dc:	2100      	movs	r1, #0
100478de:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
100478e0:	4b16      	ldr	r3, [pc, #88]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478e2:	2262      	movs	r2, #98	@ 0x62
100478e4:	2100      	movs	r1, #0
100478e6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
100478e8:	4b14      	ldr	r3, [pc, #80]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478ea:	2263      	movs	r2, #99	@ 0x63
100478ec:	2100      	movs	r1, #0
100478ee:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
100478f0:	4912      	ldr	r1, [pc, #72]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478f2:	2200      	movs	r2, #0
100478f4:	2300      	movs	r3, #0
100478f6:	658a      	str	r2, [r1, #88]	@ 0x58
100478f8:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
100478fa:	4b10      	ldr	r3, [pc, #64]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
100478fc:	4a15      	ldr	r2, [pc, #84]	@ (10047954 <HAL_RADIO_TIMER_Init+0x1e8>)
100478fe:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
10047900:	4b0e      	ldr	r3, [pc, #56]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047902:	2200      	movs	r2, #0
10047904:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10047906:	f000 fb6d 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004790a:	0002      	movs	r2, r0
1004790c:	000b      	movs	r3, r1
1004790e:	490b      	ldr	r1, [pc, #44]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047910:	6849      	ldr	r1, [r1, #4]
10047912:	000c      	movs	r4, r1
10047914:	2100      	movs	r1, #0
10047916:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10047918:	1912      	adds	r2, r2, r4
1004791a:	416b      	adcs	r3, r5
1004791c:	490e      	ldr	r1, [pc, #56]	@ (10047958 <HAL_RADIO_TIMER_Init+0x1ec>)
1004791e:	0008      	movs	r0, r1
10047920:	f000 fdcc 	bl	100484bc <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
10047924:	4b05      	ldr	r3, [pc, #20]	@ (1004793c <HAL_RADIO_TIMER_Init+0x1d0>)
10047926:	2101      	movs	r1, #1
10047928:	0018      	movs	r0, r3
1004792a:	f000 fcc1 	bl	100482b0 <_configureTxRxDelay>
}
1004792e:	46c0      	nop			@ (mov r8, r8)
10047930:	46bd      	mov	sp, r7
10047932:	b003      	add	sp, #12
10047934:	bdf0      	pop	{r4, r5, r6, r7, pc}
10047936:	46c0      	nop			@ (mov r8, r8)
10047938:	60001800 	.word	0x60001800
1004793c:	20000a10 	.word	0x20000a10
10047940:	0028f5c2 	.word	0x0028f5c2
10047944:	00005b8d 	.word	0x00005b8d
10047948:	0165ebec 	.word	0x0165ebec
1004794c:	ffffefff 	.word	0xffffefff
10047950:	00000326 	.word	0x00000326
10047954:	10048495 	.word	0x10048495
10047958:	20000a50 	.word	0x20000a50

1004795c <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
1004795c:	b5b0      	push	{r4, r5, r7, lr}
1004795e:	b090      	sub	sp, #64	@ 0x40
10047960:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
10047962:	230f      	movs	r3, #15
10047964:	18fb      	adds	r3, r7, r3
10047966:	2200      	movs	r2, #0
10047968:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004796a:	f3ef 8310 	mrs	r3, PRIMASK
1004796e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10047970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
10047972:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
10047974:	b672      	cpsid	i
}
10047976:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
10047978:	4b9c      	ldr	r3, [pc, #624]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
1004797a:	2261      	movs	r2, #97	@ 0x61
1004797c:	5c9b      	ldrb	r3, [r3, r2]
1004797e:	2b00      	cmp	r3, #0
10047980:	d00f      	beq.n	100479a2 <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
10047982:	4b9a      	ldr	r3, [pc, #616]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047984:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
10047986:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
10047988:	f000 fb2c 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004798c:	0002      	movs	r2, r0
1004798e:	000b      	movs	r3, r1
10047990:	42ab      	cmp	r3, r5
10047992:	d802      	bhi.n	1004799a <HAL_RADIO_TIMER_Tick+0x3e>
10047994:	d105      	bne.n	100479a2 <HAL_RADIO_TIMER_Tick+0x46>
10047996:	42a2      	cmp	r2, r4
10047998:	d903      	bls.n	100479a2 <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
1004799a:	4b94      	ldr	r3, [pc, #592]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
1004799c:	2261      	movs	r2, #97	@ 0x61
1004799e:	2100      	movs	r1, #0
100479a0:	5499      	strb	r1, [r3, r2]
100479a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100479a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100479a6:	6a3b      	ldr	r3, [r7, #32]
100479a8:	f383 8810 	msr	PRIMASK, r3
}
100479ac:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
100479ae:	e06e      	b.n	10047a8e <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
100479b0:	4b8e      	ldr	r3, [pc, #568]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
100479b2:	2291      	movs	r2, #145	@ 0x91
100479b4:	5c99      	ldrb	r1, [r3, r2]
100479b6:	4b8d      	ldr	r3, [pc, #564]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
100479b8:	2292      	movs	r2, #146	@ 0x92
100479ba:	5c9a      	ldrb	r2, [r3, r2]
100479bc:	232b      	movs	r3, #43	@ 0x2b
100479be:	2008      	movs	r0, #8
100479c0:	181b      	adds	r3, r3, r0
100479c2:	19db      	adds	r3, r3, r7
100479c4:	1a8a      	subs	r2, r1, r2
100479c6:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
100479c8:	4b88      	ldr	r3, [pc, #544]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
100479ca:	228c      	movs	r2, #140	@ 0x8c
100479cc:	589b      	ldr	r3, [r3, r2]
100479ce:	183a      	adds	r2, r7, r0
100479d0:	0011      	movs	r1, r2
100479d2:	0018      	movs	r0, r3
100479d4:	f000 ff48 	bl	10048868 <_check_callbacks>
100479d8:	0002      	movs	r2, r0
100479da:	4b84      	ldr	r3, [pc, #528]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
100479dc:	218c      	movs	r1, #140	@ 0x8c
100479de:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
100479e0:	68bb      	ldr	r3, [r7, #8]
100479e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
100479e4:	e010      	b.n	10047a08 <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
100479e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100479e8:	691b      	ldr	r3, [r3, #16]
100479ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
100479ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100479ee:	2200      	movs	r2, #0
100479f0:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
100479f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100479f4:	689b      	ldr	r3, [r3, #8]
100479f6:	2b00      	cmp	r3, #0
100479f8:	d004      	beq.n	10047a04 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
100479fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100479fc:	689b      	ldr	r3, [r3, #8]
100479fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10047a00:	0010      	movs	r0, r2
10047a02:	4798      	blx	r3
      }
      curr = next;
10047a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10047a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
10047a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10047a0a:	2b00      	cmp	r3, #0
10047a0c:	d1eb      	bne.n	100479e6 <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10047a0e:	4b77      	ldr	r3, [pc, #476]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a10:	228c      	movs	r2, #140	@ 0x8c
10047a12:	589b      	ldr	r3, [r3, r2]
10047a14:	240f      	movs	r4, #15
10047a16:	193a      	adds	r2, r7, r4
10047a18:	0011      	movs	r1, r2
10047a1a:	0018      	movs	r0, r3
10047a1c:	f000 fe14 	bl	10048648 <_update_user_timeout>
10047a20:	0002      	movs	r2, r0
10047a22:	4b72      	ldr	r3, [pc, #456]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a24:	218c      	movs	r1, #140	@ 0x8c
10047a26:	505a      	str	r2, [r3, r1]
    if (expired == 1)
10047a28:	193b      	adds	r3, r7, r4
10047a2a:	781b      	ldrb	r3, [r3, #0]
10047a2c:	2b01      	cmp	r3, #1
10047a2e:	d121      	bne.n	10047a74 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047a30:	f3ef 8310 	mrs	r3, PRIMASK
10047a34:	61fb      	str	r3, [r7, #28]
  return(result);
10047a36:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10047a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
10047a3a:	b672      	cpsid	i
}
10047a3c:	46c0      	nop			@ (mov r8, r8)
10047a3e:	4b6b      	ldr	r3, [pc, #428]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a40:	2291      	movs	r2, #145	@ 0x91
10047a42:	5c9b      	ldrb	r3, [r3, r2]
10047a44:	3301      	adds	r3, #1
10047a46:	4a69      	ldr	r2, [pc, #420]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a48:	2192      	movs	r1, #146	@ 0x92
10047a4a:	5c52      	ldrb	r2, [r2, r1]
10047a4c:	4293      	cmp	r3, r2
10047a4e:	d103      	bne.n	10047a58 <HAL_RADIO_TIMER_Tick+0xfc>
10047a50:	4b66      	ldr	r3, [pc, #408]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a52:	2291      	movs	r2, #145	@ 0x91
10047a54:	5c9b      	ldrb	r3, [r3, r2]
10047a56:	e004      	b.n	10047a62 <HAL_RADIO_TIMER_Tick+0x106>
10047a58:	4b64      	ldr	r3, [pc, #400]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a5a:	2291      	movs	r2, #145	@ 0x91
10047a5c:	5c9b      	ldrb	r3, [r3, r2]
10047a5e:	3301      	adds	r3, #1
10047a60:	b2db      	uxtb	r3, r3
10047a62:	4a62      	ldr	r2, [pc, #392]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a64:	2191      	movs	r1, #145	@ 0x91
10047a66:	5453      	strb	r3, [r2, r1]
10047a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10047a6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047a6c:	69bb      	ldr	r3, [r7, #24]
10047a6e:	f383 8810 	msr	PRIMASK, r3
}
10047a72:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
10047a74:	4b5d      	ldr	r3, [pc, #372]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a76:	2292      	movs	r2, #146	@ 0x92
10047a78:	5c9a      	ldrb	r2, [r3, r2]
10047a7a:	232b      	movs	r3, #43	@ 0x2b
10047a7c:	2108      	movs	r1, #8
10047a7e:	185b      	adds	r3, r3, r1
10047a80:	19db      	adds	r3, r3, r7
10047a82:	781b      	ldrb	r3, [r3, #0]
10047a84:	18d3      	adds	r3, r2, r3
10047a86:	b2d9      	uxtb	r1, r3
10047a88:	4b58      	ldr	r3, [pc, #352]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a8a:	2292      	movs	r2, #146	@ 0x92
10047a8c:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
10047a8e:	4b57      	ldr	r3, [pc, #348]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a90:	2291      	movs	r2, #145	@ 0x91
10047a92:	5c9a      	ldrb	r2, [r3, r2]
10047a94:	4b55      	ldr	r3, [pc, #340]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047a96:	2192      	movs	r1, #146	@ 0x92
10047a98:	5c5b      	ldrb	r3, [r3, r1]
10047a9a:	429a      	cmp	r2, r3
10047a9c:	d30a      	bcc.n	10047ab4 <HAL_RADIO_TIMER_Tick+0x158>
10047a9e:	4b53      	ldr	r3, [pc, #332]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047aa0:	2291      	movs	r2, #145	@ 0x91
10047aa2:	5c9a      	ldrb	r2, [r3, r2]
10047aa4:	4b51      	ldr	r3, [pc, #324]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047aa6:	2192      	movs	r1, #146	@ 0x92
10047aa8:	5c5b      	ldrb	r3, [r3, r1]
10047aaa:	1ad3      	subs	r3, r2, r3
10047aac:	1e5a      	subs	r2, r3, #1
10047aae:	4193      	sbcs	r3, r2
10047ab0:	b2db      	uxtb	r3, r3
10047ab2:	e00c      	b.n	10047ace <HAL_RADIO_TIMER_Tick+0x172>
10047ab4:	4b4d      	ldr	r3, [pc, #308]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047ab6:	2291      	movs	r2, #145	@ 0x91
10047ab8:	5c9b      	ldrb	r3, [r3, r2]
10047aba:	0019      	movs	r1, r3
10047abc:	4b4b      	ldr	r3, [pc, #300]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047abe:	2292      	movs	r2, #146	@ 0x92
10047ac0:	5c9b      	ldrb	r3, [r3, r2]
10047ac2:	1acb      	subs	r3, r1, r3
10047ac4:	3301      	adds	r3, #1
10047ac6:	33ff      	adds	r3, #255	@ 0xff
10047ac8:	1e5a      	subs	r2, r3, #1
10047aca:	4193      	sbcs	r3, r2
10047acc:	b2db      	uxtb	r3, r3
10047ace:	2b00      	cmp	r3, #0
10047ad0:	d000      	beq.n	10047ad4 <HAL_RADIO_TIMER_Tick+0x178>
10047ad2:	e76d      	b.n	100479b0 <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
10047ad4:	4b45      	ldr	r3, [pc, #276]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047ad6:	7a1b      	ldrb	r3, [r3, #8]
10047ad8:	2b00      	cmp	r3, #0
10047ada:	d06a      	beq.n	10047bb2 <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
10047adc:	4b44      	ldr	r3, [pc, #272]	@ (10047bf0 <HAL_RADIO_TIMER_Tick+0x294>)
10047ade:	0018      	movs	r0, r3
10047ae0:	f7ff fe33 	bl	1004774a <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10047ae4:	1e03      	subs	r3, r0, #0
10047ae6:	d100      	bne.n	10047aea <HAL_RADIO_TIMER_Tick+0x18e>
10047ae8:	e07b      	b.n	10047be2 <HAL_RADIO_TIMER_Tick+0x286>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
10047aea:	4b40      	ldr	r3, [pc, #256]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047aec:	2200      	movs	r2, #0
10047aee:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
10047af0:	4b3e      	ldr	r3, [pc, #248]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047af2:	2294      	movs	r2, #148	@ 0x94
10047af4:	5c9b      	ldrb	r3, [r3, r2]
10047af6:	2b00      	cmp	r3, #0
10047af8:	d109      	bne.n	10047b0e <HAL_RADIO_TIMER_Tick+0x1b2>
10047afa:	4b3c      	ldr	r3, [pc, #240]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047afc:	2293      	movs	r2, #147	@ 0x93
10047afe:	5c9b      	ldrb	r3, [r3, r2]
10047b00:	2b00      	cmp	r3, #0
10047b02:	d004      	beq.n	10047b0e <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
10047b04:	4b39      	ldr	r3, [pc, #228]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047b06:	2293      	movs	r2, #147	@ 0x93
10047b08:	2100      	movs	r1, #0
10047b0a:	5499      	strb	r1, [r3, r2]
10047b0c:	e034      	b.n	10047b78 <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
10047b0e:	f000 fef5 	bl	100488fc <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10047b12:	4b36      	ldr	r3, [pc, #216]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047b14:	228c      	movs	r2, #140	@ 0x8c
10047b16:	589b      	ldr	r3, [r3, r2]
10047b18:	240f      	movs	r4, #15
10047b1a:	193a      	adds	r2, r7, r4
10047b1c:	0011      	movs	r1, r2
10047b1e:	0018      	movs	r0, r3
10047b20:	f000 fd92 	bl	10048648 <_update_user_timeout>
10047b24:	0002      	movs	r2, r0
10047b26:	4b31      	ldr	r3, [pc, #196]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047b28:	218c      	movs	r1, #140	@ 0x8c
10047b2a:	505a      	str	r2, [r3, r1]
        if (expired == 1)
10047b2c:	193b      	adds	r3, r7, r4
10047b2e:	781b      	ldrb	r3, [r3, #0]
10047b30:	2b01      	cmp	r3, #1
10047b32:	d121      	bne.n	10047b78 <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047b34:	f3ef 8310 	mrs	r3, PRIMASK
10047b38:	617b      	str	r3, [r7, #20]
  return(result);
10047b3a:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
10047b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
10047b3e:	b672      	cpsid	i
}
10047b40:	46c0      	nop			@ (mov r8, r8)
10047b42:	4b2a      	ldr	r3, [pc, #168]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047b44:	2291      	movs	r2, #145	@ 0x91
10047b46:	5c9b      	ldrb	r3, [r3, r2]
10047b48:	3301      	adds	r3, #1
10047b4a:	4a28      	ldr	r2, [pc, #160]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047b4c:	2192      	movs	r1, #146	@ 0x92
10047b4e:	5c52      	ldrb	r2, [r2, r1]
10047b50:	4293      	cmp	r3, r2
10047b52:	d103      	bne.n	10047b5c <HAL_RADIO_TIMER_Tick+0x200>
10047b54:	4b25      	ldr	r3, [pc, #148]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047b56:	2291      	movs	r2, #145	@ 0x91
10047b58:	5c9b      	ldrb	r3, [r3, r2]
10047b5a:	e004      	b.n	10047b66 <HAL_RADIO_TIMER_Tick+0x20a>
10047b5c:	4b23      	ldr	r3, [pc, #140]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047b5e:	2291      	movs	r2, #145	@ 0x91
10047b60:	5c9b      	ldrb	r3, [r3, r2]
10047b62:	3301      	adds	r3, #1
10047b64:	b2db      	uxtb	r3, r3
10047b66:	4a21      	ldr	r2, [pc, #132]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047b68:	2191      	movs	r1, #145	@ 0x91
10047b6a:	5453      	strb	r3, [r2, r1]
10047b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10047b6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047b70:	693b      	ldr	r3, [r7, #16]
10047b72:	f383 8810 	msr	PRIMASK, r3
}
10047b76:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
10047b78:	230f      	movs	r3, #15
10047b7a:	18fa      	adds	r2, r7, r3
10047b7c:	4b1d      	ldr	r3, [pc, #116]	@ (10047bf4 <HAL_RADIO_TIMER_Tick+0x298>)
10047b7e:	0011      	movs	r1, r2
10047b80:	0018      	movs	r0, r3
10047b82:	f000 ff4f 	bl	10048a24 <_check_radio_activity>
#endif

      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10047b86:	4b1c      	ldr	r3, [pc, #112]	@ (10047bf8 <HAL_RADIO_TIMER_Tick+0x29c>)
10047b88:	0018      	movs	r0, r3
10047b8a:	f000 fa57 	bl	1004803c <HAL_RADIO_TIMER_StopVirtualTimer>
      /* Schedule next calibration event */
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10047b8e:	f000 fa29 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10047b92:	0002      	movs	r2, r0
10047b94:	000b      	movs	r3, r1
10047b96:	4915      	ldr	r1, [pc, #84]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047b98:	6849      	ldr	r1, [r1, #4]
10047b9a:	6039      	str	r1, [r7, #0]
10047b9c:	2100      	movs	r1, #0
10047b9e:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10047ba0:	6838      	ldr	r0, [r7, #0]
10047ba2:	6879      	ldr	r1, [r7, #4]
10047ba4:	1812      	adds	r2, r2, r0
10047ba6:	414b      	adcs	r3, r1
10047ba8:	4913      	ldr	r1, [pc, #76]	@ (10047bf8 <HAL_RADIO_TIMER_Tick+0x29c>)
10047baa:	0008      	movs	r0, r1
10047bac:	f000 fc86 	bl	100484bc <_start_timer>
      {
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
10047bb0:	e017      	b.n	10047be2 <HAL_RADIO_TIMER_Tick+0x286>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10047bb2:	4b0e      	ldr	r3, [pc, #56]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047bb4:	781b      	ldrb	r3, [r3, #0]
10047bb6:	2b00      	cmp	r3, #0
10047bb8:	d013      	beq.n	10047be2 <HAL_RADIO_TIMER_Tick+0x286>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
10047bba:	f000 fa13 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10047bbe:	4b0b      	ldr	r3, [pc, #44]	@ (10047bec <HAL_RADIO_TIMER_Tick+0x290>)
10047bc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10047bc4:	24fa      	movs	r4, #250	@ 0xfa
10047bc6:	0364      	lsls	r4, r4, #13
10047bc8:	2500      	movs	r5, #0
10047bca:	1912      	adds	r2, r2, r4
10047bcc:	416b      	adcs	r3, r5
10047bce:	4299      	cmp	r1, r3
10047bd0:	d803      	bhi.n	10047bda <HAL_RADIO_TIMER_Tick+0x27e>
10047bd2:	d106      	bne.n	10047be2 <HAL_RADIO_TIMER_Tick+0x286>
10047bd4:	4290      	cmp	r0, r2
10047bd6:	d800      	bhi.n	10047bda <HAL_RADIO_TIMER_Tick+0x27e>
}
10047bd8:	e003      	b.n	10047be2 <HAL_RADIO_TIMER_Tick+0x286>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10047bda:	4b07      	ldr	r3, [pc, #28]	@ (10047bf8 <HAL_RADIO_TIMER_Tick+0x29c>)
10047bdc:	0018      	movs	r0, r3
10047bde:	f000 fc59 	bl	10048494 <_calibration_callback>
}
10047be2:	46c0      	nop			@ (mov r8, r8)
10047be4:	46bd      	mov	sp, r7
10047be6:	b010      	add	sp, #64	@ 0x40
10047be8:	bdb0      	pop	{r4, r5, r7, pc}
10047bea:	46c0      	nop			@ (mov r8, r8)
10047bec:	20000a10 	.word	0x20000a10
10047bf0:	60001000 	.word	0x60001000
10047bf4:	20000a68 	.word	0x20000a68
10047bf8:	20000a50 	.word	0x20000a50

10047bfc <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10047bfc:	b580      	push	{r7, lr}
10047bfe:	b082      	sub	sp, #8
10047c00:	af00      	add	r7, sp, #0
10047c02:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10047c04:	23c0      	movs	r3, #192	@ 0xc0
10047c06:	05db      	lsls	r3, r3, #23
10047c08:	695b      	ldr	r3, [r3, #20]
10047c0a:	687a      	ldr	r2, [r7, #4]
10047c0c:	0011      	movs	r1, r2
10047c0e:	0018      	movs	r0, r3
10047c10:	f001 f87a 	bl	10048d08 <TIMER_GetPastSysTime>
10047c14:	0002      	movs	r2, r0
10047c16:	000b      	movs	r3, r1
}
10047c18:	0010      	movs	r0, r2
10047c1a:	0019      	movs	r1, r3
10047c1c:	46bd      	mov	sp, r7
10047c1e:	b002      	add	sp, #8
10047c20:	bd80      	pop	{r7, pc}
	...

10047c24 <HAL_RADIO_TIMER_PowerSaveLevelCheck>:
/**
  * @brief  Returns the admitted low power mode according to the next timer activity.
  * @return Low Power mode
  */
PowerSaveLevels HAL_RADIO_TIMER_PowerSaveLevelCheck(void)
{
10047c24:	b5f0      	push	{r4, r5, r6, r7, lr}
10047c26:	b08b      	sub	sp, #44	@ 0x2c
10047c28:	af00      	add	r7, sp, #0
  uint32_t nextRadioActivity;
  uint8_t timerState;
  uint64_t current_time;
  PowerSaveLevels level;

  if (TIMER_SleepCheck() == FALSE)
10047c2a:	f001 f89d 	bl	10048d68 <TIMER_SleepCheck>
10047c2e:	0003      	movs	r3, r0
10047c30:	001a      	movs	r2, r3
10047c32:	2301      	movs	r3, #1
10047c34:	4053      	eors	r3, r2
10047c36:	b2db      	uxtb	r3, r3
10047c38:	2b00      	cmp	r3, #0
10047c3a:	d001      	beq.n	10047c40 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x1c>
  {
    return POWER_SAVE_LEVEL_RUNNING;
10047c3c:	2300      	movs	r3, #0
10047c3e:	e0b1      	b.n	10047da4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
  }

  level = POWER_SAVE_LEVEL_STOP;
10047c40:	2317      	movs	r3, #23
10047c42:	2210      	movs	r2, #16
10047c44:	189b      	adds	r3, r3, r2
10047c46:	19db      	adds	r3, r3, r7
10047c48:	2203      	movs	r2, #3
10047c4a:	701a      	strb	r2, [r3, #0]

  current_time = HAL_RADIO_TIMER_GetCurrentSysTime();
10047c4c:	f000 f9ca 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10047c50:	0002      	movs	r2, r0
10047c52:	000b      	movs	r3, r1
10047c54:	61ba      	str	r2, [r7, #24]
10047c56:	61fb      	str	r3, [r7, #28]
  timerState = TIMER_GetRadioTimerValue(&nextRadioActivity);
10047c58:	2317      	movs	r3, #23
10047c5a:	18fe      	adds	r6, r7, r3
10047c5c:	2310      	movs	r3, #16
10047c5e:	18fb      	adds	r3, r7, r3
10047c60:	0018      	movs	r0, r3
10047c62:	f001 f89f 	bl	10048da4 <TIMER_GetRadioTimerValue>
10047c66:	0003      	movs	r3, r0
10047c68:	7033      	strb	r3, [r6, #0]

  /*Timer1 and wakeup timer are programmed only through the timer module*/
  if (((RADIO_TIMER_Context.radioTimer.active || RADIO_TIMER_Context.radioTimer.pending)
10047c6a:	4b50      	ldr	r3, [pc, #320]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c6c:	2261      	movs	r2, #97	@ 0x61
10047c6e:	5c9b      	ldrb	r3, [r3, r2]
10047c70:	2b00      	cmp	r3, #0
10047c72:	d104      	bne.n	10047c7e <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x5a>
10047c74:	4b4d      	ldr	r3, [pc, #308]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c76:	2262      	movs	r2, #98	@ 0x62
10047c78:	5c9b      	ldrb	r3, [r3, r2]
10047c7a:	2b00      	cmp	r3, #0
10047c7c:	d004      	beq.n	10047c88 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x64>
       && !(timerState == RADIO_TIMER1_BUSY)) || RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served)
10047c7e:	2317      	movs	r3, #23
10047c80:	18fb      	adds	r3, r7, r3
10047c82:	781b      	ldrb	r3, [r3, #0]
10047c84:	2b01      	cmp	r3, #1
10047c86:	d104      	bne.n	10047c92 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x6e>
10047c88:	4b48      	ldr	r3, [pc, #288]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c8a:	2263      	movs	r2, #99	@ 0x63
10047c8c:	5c9b      	ldrb	r3, [r3, r2]
10047c8e:	2b00      	cmp	r3, #0
10047c90:	d029      	beq.n	10047ce6 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xc2>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
10047c92:	4b46      	ldr	r3, [pc, #280]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10047c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                                                     RADIO_TIMER_Context.last_setup_time + \
10047c98:	4944      	ldr	r1, [pc, #272]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c9a:	2084      	movs	r0, #132	@ 0x84
10047c9c:	5c09      	ldrb	r1, [r1, r0]
10047c9e:	000c      	movs	r4, r1
10047ca0:	2100      	movs	r1, #0
10047ca2:	000d      	movs	r5, r1
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
10047ca4:	69b8      	ldr	r0, [r7, #24]
10047ca6:	69f9      	ldr	r1, [r7, #28]
10047ca8:	1824      	adds	r4, r4, r0
10047caa:	414d      	adcs	r5, r1
10047cac:	0020      	movs	r0, r4
10047cae:	0029      	movs	r1, r5
                                                     RADIO_TIMER_Context.hs_startup_time + \
10047cb0:	4e3e      	ldr	r6, [pc, #248]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047cb2:	6eb6      	ldr	r6, [r6, #104]	@ 0x68
10047cb4:	60be      	str	r6, [r7, #8]
10047cb6:	2600      	movs	r6, #0
10047cb8:	60fe      	str	r6, [r7, #12]
                                                     RADIO_TIMER_Context.last_setup_time + \
10047cba:	68bc      	ldr	r4, [r7, #8]
10047cbc:	68fd      	ldr	r5, [r7, #12]
10047cbe:	1900      	adds	r0, r0, r4
10047cc0:	4169      	adcs	r1, r5
                                                     RADIO_TIMER_Context.hs_startup_time + \
10047cc2:	2452      	movs	r4, #82	@ 0x52
10047cc4:	2500      	movs	r5, #0
10047cc6:	1900      	adds	r0, r0, r4
10047cc8:	4169      	adcs	r1, r5
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
10047cca:	4299      	cmp	r1, r3
10047ccc:	d802      	bhi.n	10047cd4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb0>
10047cce:	d103      	bne.n	10047cd8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb4>
10047cd0:	4290      	cmp	r0, r2
10047cd2:	d901      	bls.n	10047cd8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb4>
                                                     LOW_POWER_THR))
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
10047cd4:	2301      	movs	r3, #1
10047cd6:	e065      	b.n	10047da4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }

    level = POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON;
10047cd8:	2317      	movs	r3, #23
10047cda:	2210      	movs	r2, #16
10047cdc:	189b      	adds	r3, r3, r2
10047cde:	19db      	adds	r3, r3, r7
10047ce0:	2202      	movs	r2, #2
10047ce2:	701a      	strb	r2, [r3, #0]
10047ce4:	e00b      	b.n	10047cfe <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xda>
  }
  else
  {
    if ((timerState == RADIO_TIMER2_BUSY) || (timerState == RADIO_TIMER1_BUSY))
10047ce6:	2317      	movs	r3, #23
10047ce8:	18fb      	adds	r3, r7, r3
10047cea:	781b      	ldrb	r3, [r3, #0]
10047cec:	2b02      	cmp	r3, #2
10047cee:	d004      	beq.n	10047cfa <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xd6>
10047cf0:	2317      	movs	r3, #23
10047cf2:	18fb      	adds	r3, r7, r3
10047cf4:	781b      	ldrb	r3, [r3, #0]
10047cf6:	2b01      	cmp	r3, #1
10047cf8:	d101      	bne.n	10047cfe <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xda>
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
10047cfa:	2301      	movs	r3, #1
10047cfc:	e052      	b.n	10047da4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }
  }

  if (RADIO_TIMER_Context.rootNode != NULL && RADIO_TIMER_Context.rootNode->active)
10047cfe:	4b2b      	ldr	r3, [pc, #172]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047d00:	228c      	movs	r2, #140	@ 0x8c
10047d02:	589b      	ldr	r3, [r3, r2]
10047d04:	2b00      	cmp	r3, #0
10047d06:	d048      	beq.n	10047d9a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x176>
10047d08:	4b28      	ldr	r3, [pc, #160]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047d0a:	228c      	movs	r2, #140	@ 0x8c
10047d0c:	589b      	ldr	r3, [r3, r2]
10047d0e:	7b1b      	ldrb	r3, [r3, #12]
10047d10:	2b00      	cmp	r3, #0
10047d12:	d042      	beq.n	10047d9a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x176>
  {
    if (RADIO_TIMER_Context.rootNode->expiryTime < (current_time + LOW_POWER_THR + RADIO_TIMER_Context.hs_startup_time))
10047d14:	4b25      	ldr	r3, [pc, #148]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047d16:	228c      	movs	r2, #140	@ 0x8c
10047d18:	589b      	ldr	r3, [r3, r2]
10047d1a:	681a      	ldr	r2, [r3, #0]
10047d1c:	685b      	ldr	r3, [r3, #4]
10047d1e:	4923      	ldr	r1, [pc, #140]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047d20:	6e89      	ldr	r1, [r1, #104]	@ 0x68
10047d22:	6039      	str	r1, [r7, #0]
10047d24:	2100      	movs	r1, #0
10047d26:	6079      	str	r1, [r7, #4]
10047d28:	69b8      	ldr	r0, [r7, #24]
10047d2a:	69f9      	ldr	r1, [r7, #28]
10047d2c:	683c      	ldr	r4, [r7, #0]
10047d2e:	687d      	ldr	r5, [r7, #4]
10047d30:	1824      	adds	r4, r4, r0
10047d32:	414d      	adcs	r5, r1
10047d34:	0020      	movs	r0, r4
10047d36:	0029      	movs	r1, r5
10047d38:	2452      	movs	r4, #82	@ 0x52
10047d3a:	2500      	movs	r5, #0
10047d3c:	1900      	adds	r0, r0, r4
10047d3e:	4169      	adcs	r1, r5
10047d40:	4299      	cmp	r1, r3
10047d42:	d802      	bhi.n	10047d4a <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x126>
10047d44:	d103      	bne.n	10047d4e <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x12a>
10047d46:	4290      	cmp	r0, r2
10047d48:	d901      	bls.n	10047d4e <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x12a>
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
10047d4a:	2301      	movs	r3, #1
10047d4c:	e02a      	b.n	10047da4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }

    if (level == POWER_SAVE_LEVEL_STOP)
10047d4e:	2317      	movs	r3, #23
10047d50:	2210      	movs	r2, #16
10047d52:	189b      	adds	r3, r3, r2
10047d54:	19db      	adds	r3, r3, r7
10047d56:	781b      	ldrb	r3, [r3, #0]
10047d58:	2b03      	cmp	r3, #3
10047d5a:	d118      	bne.n	10047d8e <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
    {
      if ((RADIO_TIMER_Context.rootNode->next == NULL)
10047d5c:	4b13      	ldr	r3, [pc, #76]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047d5e:	228c      	movs	r2, #140	@ 0x8c
10047d60:	589b      	ldr	r3, [r3, r2]
10047d62:	691b      	ldr	r3, [r3, #16]
10047d64:	2b00      	cmp	r3, #0
10047d66:	d112      	bne.n	10047d8e <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
          && (RADIO_TIMER_Context.rootNode == &RADIO_TIMER_Context.calibrationTimer))
10047d68:	4b10      	ldr	r3, [pc, #64]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047d6a:	228c      	movs	r2, #140	@ 0x8c
10047d6c:	589a      	ldr	r2, [r3, r2]
10047d6e:	4b10      	ldr	r3, [pc, #64]	@ (10047db0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x18c>)
10047d70:	429a      	cmp	r2, r3
10047d72:	d10c      	bne.n	10047d8e <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
      {
        RADIO_TIMER_Context.stop_notimer_action = TRUE;
10047d74:	4b0d      	ldr	r3, [pc, #52]	@ (10047dac <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047d76:	2293      	movs	r2, #147	@ 0x93
10047d78:	2101      	movs	r1, #1
10047d7a:	5499      	strb	r1, [r3, r2]
        _virtualTimeBaseEnable(DISABLE);
10047d7c:	2000      	movs	r0, #0
10047d7e:	f000 fd1b 	bl	100487b8 <_virtualTimeBaseEnable>
        LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10047d82:	4b0c      	ldr	r3, [pc, #48]	@ (10047db4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x190>)
10047d84:	0018      	movs	r0, r3
10047d86:	f7ff fc15 	bl	100475b4 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
        return POWER_SAVE_LEVEL_STOP;
10047d8a:	2303      	movs	r3, #3
10047d8c:	e00a      	b.n	10047da4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
      }
    }
    level = POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON;
10047d8e:	2317      	movs	r3, #23
10047d90:	2210      	movs	r2, #16
10047d92:	189b      	adds	r3, r3, r2
10047d94:	19db      	adds	r3, r3, r7
10047d96:	2202      	movs	r2, #2
10047d98:	701a      	strb	r2, [r3, #0]
  }

  return level;
10047d9a:	2317      	movs	r3, #23
10047d9c:	2210      	movs	r2, #16
10047d9e:	189b      	adds	r3, r3, r2
10047da0:	19db      	adds	r3, r3, r7
10047da2:	781b      	ldrb	r3, [r3, #0]
}
10047da4:	0018      	movs	r0, r3
10047da6:	46bd      	mov	sp, r7
10047da8:	b00b      	add	sp, #44	@ 0x2c
10047daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
10047dac:	20000a10 	.word	0x20000a10
10047db0:	20000a50 	.word	0x20000a50
10047db4:	60001800 	.word	0x60001800

10047db8 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10047db8:	b5f0      	push	{r4, r5, r6, r7, lr}
10047dba:	b085      	sub	sp, #20
10047dbc:	af00      	add	r7, sp, #0
10047dbe:	6078      	str	r0, [r7, #4]
10047dc0:	0008      	movs	r0, r1
10047dc2:	0011      	movs	r1, r2
10047dc4:	1cfb      	adds	r3, r7, #3
10047dc6:	1c02      	adds	r2, r0, #0
10047dc8:	701a      	strb	r2, [r3, #0]
10047dca:	1cbb      	adds	r3, r7, #2
10047dcc:	1c0a      	adds	r2, r1, #0
10047dce:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10047dd0:	260f      	movs	r6, #15
10047dd2:	19bb      	adds	r3, r7, r6
10047dd4:	2200      	movs	r2, #0
10047dd6:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10047dd8:	1cfb      	adds	r3, r7, #3
10047dda:	781b      	ldrb	r3, [r3, #0]
10047ddc:	1e5a      	subs	r2, r3, #1
10047dde:	4193      	sbcs	r3, r2
10047de0:	b2d9      	uxtb	r1, r3
10047de2:	4b1b      	ldr	r3, [pc, #108]	@ (10047e50 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047de4:	2264      	movs	r2, #100	@ 0x64
10047de6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10047de8:	1cbb      	adds	r3, r7, #2
10047dea:	781b      	ldrb	r3, [r3, #0]
10047dec:	1e5a      	subs	r2, r3, #1
10047dee:	4193      	sbcs	r3, r2
10047df0:	b2d9      	uxtb	r1, r3
10047df2:	4b17      	ldr	r3, [pc, #92]	@ (10047e50 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047df4:	2260      	movs	r2, #96	@ 0x60
10047df6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10047df8:	4b15      	ldr	r3, [pc, #84]	@ (10047e50 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047dfa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10047dfe:	4914      	ldr	r1, [pc, #80]	@ (10047e50 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047e00:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10047e02:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10047e04:	6879      	ldr	r1, [r7, #4]
10047e06:	1a09      	subs	r1, r1, r0
10047e08:	000c      	movs	r4, r1
10047e0a:	2100      	movs	r1, #0
10047e0c:	000d      	movs	r5, r1
10047e0e:	1912      	adds	r2, r2, r4
10047e10:	416b      	adcs	r3, r5
10047e12:	490f      	ldr	r1, [pc, #60]	@ (10047e50 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047e14:	658a      	str	r2, [r1, #88]	@ 0x58
10047e16:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10047e18:	4b0d      	ldr	r3, [pc, #52]	@ (10047e50 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047e1a:	2261      	movs	r2, #97	@ 0x61
10047e1c:	2100      	movs	r1, #0
10047e1e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10047e20:	4b0b      	ldr	r3, [pc, #44]	@ (10047e50 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047e22:	2263      	movs	r2, #99	@ 0x63
10047e24:	2100      	movs	r1, #0
10047e26:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10047e28:	4b09      	ldr	r3, [pc, #36]	@ (10047e50 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047e2a:	2262      	movs	r2, #98	@ 0x62
10047e2c:	2101      	movs	r1, #1
10047e2e:	5499      	strb	r1, [r3, r2]
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10047e30:	19ba      	adds	r2, r7, r6
10047e32:	4b08      	ldr	r3, [pc, #32]	@ (10047e54 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
10047e34:	0011      	movs	r1, r2
10047e36:	0018      	movs	r0, r3
10047e38:	f000 fdf4 	bl	10048a24 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
10047e3c:	2001      	movs	r0, #1
10047e3e:	f000 fcbb 	bl	100487b8 <_virtualTimeBaseEnable>

  return retVal;
10047e42:	19bb      	adds	r3, r7, r6
10047e44:	781b      	ldrb	r3, [r3, #0]
}
10047e46:	0018      	movs	r0, r3
10047e48:	46bd      	mov	sp, r7
10047e4a:	b005      	add	sp, #20
10047e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10047e4e:	46c0      	nop			@ (mov r8, r8)
10047e50:	20000a10 	.word	0x20000a10
10047e54:	20000a68 	.word	0x20000a68

10047e58 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
10047e58:	b5b0      	push	{r4, r5, r7, lr}
10047e5a:	b088      	sub	sp, #32
10047e5c:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10047e5e:	23c0      	movs	r3, #192	@ 0xc0
10047e60:	05db      	lsls	r3, r3, #23
10047e62:	0018      	movs	r0, r3
10047e64:	f7ff fb0c 	bl	10047480 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10047e68:	23c0      	movs	r3, #192	@ 0xc0
10047e6a:	05db      	lsls	r3, r3, #23
10047e6c:	0018      	movs	r0, r3
10047e6e:	f7ff fb27 	bl	100474c0 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047e72:	4b31      	ldr	r3, [pc, #196]	@ (10047f38 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
10047e74:	0018      	movs	r0, r3
10047e76:	f7ff fb69 	bl	1004754c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10047e7a:	4b30      	ldr	r3, [pc, #192]	@ (10047f3c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047e7c:	2261      	movs	r2, #97	@ 0x61
10047e7e:	2100      	movs	r1, #0
10047e80:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
10047e82:	4b2e      	ldr	r3, [pc, #184]	@ (10047f3c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047e84:	2262      	movs	r2, #98	@ 0x62
10047e86:	2100      	movs	r1, #0
10047e88:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10047e8a:	4b2c      	ldr	r3, [pc, #176]	@ (10047f3c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047e8c:	2263      	movs	r2, #99	@ 0x63
10047e8e:	2100      	movs	r1, #0
10047e90:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047e92:	f3ef 8310 	mrs	r3, PRIMASK
10047e96:	60bb      	str	r3, [r7, #8]
  return(result);
10047e98:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
10047e9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10047e9c:	b672      	cpsid	i
}
10047e9e:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
10047ea0:	4b26      	ldr	r3, [pc, #152]	@ (10047f3c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047ea2:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
10047ea4:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
10047ea6:	f000 f89d 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10047eaa:	0002      	movs	r2, r0
10047eac:	000b      	movs	r3, r1
10047eae:	1aa4      	subs	r4, r4, r2
10047eb0:	419d      	sbcs	r5, r3
10047eb2:	0022      	movs	r2, r4
10047eb4:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
10047eb6:	4921      	ldr	r1, [pc, #132]	@ (10047f3c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047eb8:	2084      	movs	r0, #132	@ 0x84
10047eba:	5c09      	ldrb	r1, [r1, r0]
10047ebc:	6039      	str	r1, [r7, #0]
10047ebe:	2100      	movs	r1, #0
10047ec0:	6079      	str	r1, [r7, #4]
10047ec2:	6838      	ldr	r0, [r7, #0]
10047ec4:	6879      	ldr	r1, [r7, #4]
10047ec6:	1a12      	subs	r2, r2, r0
10047ec8:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
10047eca:	613a      	str	r2, [r7, #16]
10047ecc:	617b      	str	r3, [r7, #20]
10047ece:	69bb      	ldr	r3, [r7, #24]
10047ed0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047ed2:	68fb      	ldr	r3, [r7, #12]
10047ed4:	f383 8810 	msr	PRIMASK, r3
}
10047ed8:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
10047eda:	697b      	ldr	r3, [r7, #20]
10047edc:	2b00      	cmp	r3, #0
10047ede:	dc0c      	bgt.n	10047efa <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
10047ee0:	697b      	ldr	r3, [r7, #20]
10047ee2:	2b00      	cmp	r3, #0
10047ee4:	d102      	bne.n	10047eec <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
10047ee6:	693b      	ldr	r3, [r7, #16]
10047ee8:	2b00      	cmp	r3, #0
10047eea:	d106      	bne.n	10047efa <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
10047eec:	2317      	movs	r3, #23
10047eee:	2208      	movs	r2, #8
10047ef0:	189b      	adds	r3, r3, r2
10047ef2:	19db      	adds	r3, r3, r7
10047ef4:	2201      	movs	r2, #1
10047ef6:	701a      	strb	r2, [r3, #0]
10047ef8:	e015      	b.n	10047f26 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
10047efa:	697b      	ldr	r3, [r7, #20]
10047efc:	2b00      	cmp	r3, #0
10047efe:	dc0c      	bgt.n	10047f1a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
10047f00:	697b      	ldr	r3, [r7, #20]
10047f02:	2b00      	cmp	r3, #0
10047f04:	d102      	bne.n	10047f0c <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
10047f06:	693b      	ldr	r3, [r7, #16]
10047f08:	2b0e      	cmp	r3, #14
10047f0a:	d806      	bhi.n	10047f1a <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
10047f0c:	2317      	movs	r3, #23
10047f0e:	2208      	movs	r2, #8
10047f10:	189b      	adds	r3, r3, r2
10047f12:	19db      	adds	r3, r3, r7
10047f14:	2202      	movs	r2, #2
10047f16:	701a      	strb	r2, [r3, #0]
10047f18:	e005      	b.n	10047f26 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
10047f1a:	2317      	movs	r3, #23
10047f1c:	2208      	movs	r2, #8
10047f1e:	189b      	adds	r3, r3, r2
10047f20:	19db      	adds	r3, r3, r7
10047f22:	2200      	movs	r2, #0
10047f24:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
10047f26:	2317      	movs	r3, #23
10047f28:	2208      	movs	r2, #8
10047f2a:	189b      	adds	r3, r3, r2
10047f2c:	19db      	adds	r3, r3, r7
10047f2e:	781b      	ldrb	r3, [r3, #0]
}
10047f30:	0018      	movs	r0, r3
10047f32:	46bd      	mov	sp, r7
10047f34:	b008      	add	sp, #32
10047f36:	bdb0      	pop	{r4, r5, r7, pc}
10047f38:	60001800 	.word	0x60001800
10047f3c:	20000a10 	.word	0x20000a10

10047f40 <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
10047f40:	b580      	push	{r7, lr}
10047f42:	b084      	sub	sp, #16
10047f44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047f46:	f3ef 8310 	mrs	r3, PRIMASK
10047f4a:	603b      	str	r3, [r7, #0]
  return(result);
10047f4c:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
10047f4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10047f50:	b672      	cpsid	i
}
10047f52:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047f54:	4b0e      	ldr	r3, [pc, #56]	@ (10047f90 <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
10047f56:	0018      	movs	r0, r3
10047f58:	f7ff fb6d 	bl	10047636 <LL_RADIO_TIMER_GetAbsoluteTime>
10047f5c:	0003      	movs	r3, r0
10047f5e:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
10047f60:	68bb      	ldr	r3, [r7, #8]
10047f62:	1c9a      	adds	r2, r3, #2
10047f64:	23c0      	movs	r3, #192	@ 0xc0
10047f66:	05db      	lsls	r3, r3, #23
10047f68:	0011      	movs	r1, r2
10047f6a:	0018      	movs	r0, r3
10047f6c:	f7ff fac8 	bl	10047500 <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
10047f70:	23c0      	movs	r3, #192	@ 0xc0
10047f72:	05db      	lsls	r3, r3, #23
10047f74:	0018      	movs	r0, r3
10047f76:	f7ff fa73 	bl	10047460 <LL_RADIO_TIMER_EnableTimer1>
10047f7a:	68fb      	ldr	r3, [r7, #12]
10047f7c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047f7e:	687b      	ldr	r3, [r7, #4]
10047f80:	f383 8810 	msr	PRIMASK, r3
}
10047f84:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10047f86:	46c0      	nop			@ (mov r8, r8)
10047f88:	46bd      	mov	sp, r7
10047f8a:	b004      	add	sp, #16
10047f8c:	bd80      	pop	{r7, pc}
10047f8e:	46c0      	nop			@ (mov r8, r8)
10047f90:	60001800 	.word	0x60001800

10047f94 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10047f94:	b580      	push	{r7, lr}
10047f96:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
10047f98:	46c0      	nop			@ (mov r8, r8)
10047f9a:	46bd      	mov	sp, r7
10047f9c:	bd80      	pop	{r7, pc}
	...

10047fa0 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10047fa0:	b580      	push	{r7, lr}
10047fa2:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10047fa4:	4b03      	ldr	r3, [pc, #12]	@ (10047fb4 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10047fa6:	2263      	movs	r2, #99	@ 0x63
10047fa8:	2100      	movs	r1, #0
10047faa:	5499      	strb	r1, [r3, r2]
}
10047fac:	46c0      	nop			@ (mov r8, r8)
10047fae:	46bd      	mov	sp, r7
10047fb0:	bd80      	pop	{r7, pc}
10047fb2:	46c0      	nop			@ (mov r8, r8)
10047fb4:	20000a10 	.word	0x20000a10

10047fb8 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
10047fb8:	b580      	push	{r7, lr}
10047fba:	b082      	sub	sp, #8
10047fbc:	af00      	add	r7, sp, #0
10047fbe:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047fc0:	4b06      	ldr	r3, [pc, #24]	@ (10047fdc <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
10047fc2:	69db      	ldr	r3, [r3, #28]
10047fc4:	0019      	movs	r1, r3
10047fc6:	4a06      	ldr	r2, [pc, #24]	@ (10047fe0 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
10047fc8:	687b      	ldr	r3, [r7, #4]
10047fca:	0018      	movs	r0, r3
10047fcc:	f7f8 f878 	bl	100400c0 <blue_unit_conversion>
10047fd0:	0003      	movs	r3, r0
}
10047fd2:	0018      	movs	r0, r3
10047fd4:	46bd      	mov	sp, r7
10047fd6:	b002      	add	sp, #8
10047fd8:	bd80      	pop	{r7, pc}
10047fda:	46c0      	nop			@ (mov r8, r8)
10047fdc:	20000a10 	.word	0x20000a10
10047fe0:	00000635 	.word	0x00000635

10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10047fe4:	b580      	push	{r7, lr}
10047fe6:	b082      	sub	sp, #8
10047fe8:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10047fea:	1d3a      	adds	r2, r7, #4
10047fec:	4b05      	ldr	r3, [pc, #20]	@ (10048004 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10047fee:	0011      	movs	r1, r2
10047ff0:	0018      	movs	r0, r3
10047ff2:	f000 fac1 	bl	10048578 <_get_system_time_and_machine>
10047ff6:	0002      	movs	r2, r0
10047ff8:	000b      	movs	r3, r1
}
10047ffa:	0010      	movs	r0, r2
10047ffc:	0019      	movs	r1, r3
10047ffe:	46bd      	mov	sp, r7
10048000:	b002      	add	sp, #8
10048002:	bd80      	pop	{r7, pc}
10048004:	20000a10 	.word	0x20000a10

10048008 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
10048008:	b590      	push	{r4, r7, lr}
1004800a:	b087      	sub	sp, #28
1004800c:	af00      	add	r7, sp, #0
1004800e:	60f8      	str	r0, [r7, #12]
10048010:	603a      	str	r2, [r7, #0]
10048012:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
10048014:	683a      	ldr	r2, [r7, #0]
10048016:	687b      	ldr	r3, [r7, #4]
10048018:	68f9      	ldr	r1, [r7, #12]
1004801a:	0008      	movs	r0, r1
1004801c:	f000 fa4e 	bl	100484bc <_start_timer>
10048020:	0002      	movs	r2, r0
10048022:	2417      	movs	r4, #23
10048024:	193b      	adds	r3, r7, r4
10048026:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
10048028:	2001      	movs	r0, #1
1004802a:	f000 fbc5 	bl	100487b8 <_virtualTimeBaseEnable>

  return retVal;
1004802e:	193b      	adds	r3, r7, r4
10048030:	781b      	ldrb	r3, [r3, #0]
}
10048032:	0018      	movs	r0, r3
10048034:	46bd      	mov	sp, r7
10048036:	b007      	add	sp, #28
10048038:	bd90      	pop	{r4, r7, pc}
	...

1004803c <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
1004803c:	b590      	push	{r4, r7, lr}
1004803e:	b089      	sub	sp, #36	@ 0x24
10048040:	af00      	add	r7, sp, #0
10048042:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10048044:	4b28      	ldr	r3, [pc, #160]	@ (100480e8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10048046:	228c      	movs	r2, #140	@ 0x8c
10048048:	589b      	ldr	r3, [r3, r2]
1004804a:	687a      	ldr	r2, [r7, #4]
1004804c:	0011      	movs	r1, r2
1004804e:	0018      	movs	r0, r3
10048050:	f000 fbde 	bl	10048810 <_remove_timer_in_queue>
10048054:	0003      	movs	r3, r0
10048056:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10048058:	210f      	movs	r1, #15
1004805a:	187b      	adds	r3, r7, r1
1004805c:	2200      	movs	r2, #0
1004805e:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10048060:	687b      	ldr	r3, [r7, #4]
10048062:	2200      	movs	r2, #0
10048064:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10048066:	4b20      	ldr	r3, [pc, #128]	@ (100480e8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10048068:	228c      	movs	r2, #140	@ 0x8c
1004806a:	589b      	ldr	r3, [r3, r2]
1004806c:	69fa      	ldr	r2, [r7, #28]
1004806e:	429a      	cmp	r2, r3
10048070:	d031      	beq.n	100480d6 <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10048072:	000c      	movs	r4, r1
10048074:	187a      	adds	r2, r7, r1
10048076:	69fb      	ldr	r3, [r7, #28]
10048078:	0011      	movs	r1, r2
1004807a:	0018      	movs	r0, r3
1004807c:	f000 fae4 	bl	10048648 <_update_user_timeout>
10048080:	0002      	movs	r2, r0
10048082:	4b19      	ldr	r3, [pc, #100]	@ (100480e8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10048084:	218c      	movs	r1, #140	@ 0x8c
10048086:	505a      	str	r2, [r3, r1]
    if (expired)
10048088:	193b      	adds	r3, r7, r4
1004808a:	781b      	ldrb	r3, [r3, #0]
1004808c:	2b00      	cmp	r3, #0
1004808e:	d026      	beq.n	100480de <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048090:	f3ef 8310 	mrs	r3, PRIMASK
10048094:	617b      	str	r3, [r7, #20]
  return(result);
10048096:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10048098:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004809a:	b672      	cpsid	i
}
1004809c:	46c0      	nop			@ (mov r8, r8)
1004809e:	4b12      	ldr	r3, [pc, #72]	@ (100480e8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100480a0:	2291      	movs	r2, #145	@ 0x91
100480a2:	5c9b      	ldrb	r3, [r3, r2]
100480a4:	3301      	adds	r3, #1
100480a6:	4a10      	ldr	r2, [pc, #64]	@ (100480e8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100480a8:	2192      	movs	r1, #146	@ 0x92
100480aa:	5c52      	ldrb	r2, [r2, r1]
100480ac:	4293      	cmp	r3, r2
100480ae:	d103      	bne.n	100480b8 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
100480b0:	4b0d      	ldr	r3, [pc, #52]	@ (100480e8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100480b2:	2291      	movs	r2, #145	@ 0x91
100480b4:	5c9b      	ldrb	r3, [r3, r2]
100480b6:	e004      	b.n	100480c2 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
100480b8:	4b0b      	ldr	r3, [pc, #44]	@ (100480e8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100480ba:	2291      	movs	r2, #145	@ 0x91
100480bc:	5c9b      	ldrb	r3, [r3, r2]
100480be:	3301      	adds	r3, #1
100480c0:	b2db      	uxtb	r3, r3
100480c2:	4a09      	ldr	r2, [pc, #36]	@ (100480e8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100480c4:	2191      	movs	r1, #145	@ 0x91
100480c6:	5453      	strb	r3, [r2, r1]
100480c8:	69bb      	ldr	r3, [r7, #24]
100480ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100480cc:	693b      	ldr	r3, [r7, #16]
100480ce:	f383 8810 	msr	PRIMASK, r3
}
100480d2:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
100480d4:	e003      	b.n	100480de <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
100480d6:	4b04      	ldr	r3, [pc, #16]	@ (100480e8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
100480d8:	218c      	movs	r1, #140	@ 0x8c
100480da:	69fa      	ldr	r2, [r7, #28]
100480dc:	505a      	str	r2, [r3, r1]
}
100480de:	46c0      	nop			@ (mov r8, r8)
100480e0:	46bd      	mov	sp, r7
100480e2:	b009      	add	sp, #36	@ 0x24
100480e4:	bd90      	pop	{r4, r7, pc}
100480e6:	46c0      	nop			@ (mov r8, r8)
100480e8:	20000a10 	.word	0x20000a10

100480ec <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
100480ec:	b580      	push	{r7, lr}
100480ee:	b082      	sub	sp, #8
100480f0:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
100480f2:	2300      	movs	r3, #0
100480f4:	607b      	str	r3, [r7, #4]
  UNUSED(status);
100480f6:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
100480f8:	4b13      	ldr	r3, [pc, #76]	@ (10048148 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
100480fa:	0018      	movs	r0, r3
100480fc:	f7ff fa5a 	bl	100475b4 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10048100:	4b12      	ldr	r3, [pc, #72]	@ (1004814c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10048102:	2291      	movs	r2, #145	@ 0x91
10048104:	5c9b      	ldrb	r3, [r3, r2]
10048106:	3301      	adds	r3, #1
10048108:	4a10      	ldr	r2, [pc, #64]	@ (1004814c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004810a:	2192      	movs	r1, #146	@ 0x92
1004810c:	5c52      	ldrb	r2, [r2, r1]
1004810e:	4293      	cmp	r3, r2
10048110:	d103      	bne.n	1004811a <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
10048112:	4b0e      	ldr	r3, [pc, #56]	@ (1004814c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10048114:	2291      	movs	r2, #145	@ 0x91
10048116:	5c9b      	ldrb	r3, [r3, r2]
10048118:	e004      	b.n	10048124 <HAL_RADIO_TIMER_TimeoutCallback+0x38>
1004811a:	4b0c      	ldr	r3, [pc, #48]	@ (1004814c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004811c:	2291      	movs	r2, #145	@ 0x91
1004811e:	5c9b      	ldrb	r3, [r3, r2]
10048120:	3301      	adds	r3, #1
10048122:	b2db      	uxtb	r3, r3
10048124:	4a09      	ldr	r2, [pc, #36]	@ (1004814c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10048126:	2191      	movs	r1, #145	@ 0x91
10048128:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004812a:	4b07      	ldr	r3, [pc, #28]	@ (10048148 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004812c:	0018      	movs	r0, r3
1004812e:	f7ff fab4 	bl	1004769a <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
10048132:	4b05      	ldr	r3, [pc, #20]	@ (10048148 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10048134:	0018      	movs	r0, r3
10048136:	f7ff fabe 	bl	100476b6 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
1004813a:	0003      	movs	r3, r0
1004813c:	607b      	str	r3, [r7, #4]
}
1004813e:	46c0      	nop			@ (mov r8, r8)
10048140:	46bd      	mov	sp, r7
10048142:	b002      	add	sp, #8
10048144:	bd80      	pop	{r7, pc}
10048146:	46c0      	nop			@ (mov r8, r8)
10048148:	60001800 	.word	0x60001800
1004814c:	20000a10 	.word	0x20000a10

10048150 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
10048150:	b580      	push	{r7, lr}
10048152:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
10048154:	46c0      	nop			@ (mov r8, r8)
10048156:	4b0b      	ldr	r3, [pc, #44]	@ (10048184 <_calibrationProcedure+0x34>)
10048158:	0018      	movs	r0, r3
1004815a:	f7ff faf6 	bl	1004774a <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004815e:	1e03      	subs	r3, r0, #0
10048160:	d0f9      	beq.n	10048156 <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
10048162:	4b08      	ldr	r3, [pc, #32]	@ (10048184 <_calibrationProcedure+0x34>)
10048164:	2117      	movs	r1, #23
10048166:	0018      	movs	r0, r3
10048168:	f7ff fab6 	bl	100476d8 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
1004816c:	4b06      	ldr	r3, [pc, #24]	@ (10048188 <_calibrationProcedure+0x38>)
1004816e:	0018      	movs	r0, r3
10048170:	f000 f81e 	bl	100481b0 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
10048174:	4b05      	ldr	r3, [pc, #20]	@ (1004818c <_calibrationProcedure+0x3c>)
10048176:	69da      	ldr	r2, [r3, #28]
10048178:	4b04      	ldr	r3, [pc, #16]	@ (1004818c <_calibrationProcedure+0x3c>)
1004817a:	621a      	str	r2, [r3, #32]

}
1004817c:	46c0      	nop			@ (mov r8, r8)
1004817e:	46bd      	mov	sp, r7
10048180:	bd80      	pop	{r7, pc}
10048182:	46c0      	nop			@ (mov r8, r8)
10048184:	60001000 	.word	0x60001000
10048188:	20000a20 	.word	0x20000a20
1004818c:	20000a10 	.word	0x20000a10

10048190 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
10048190:	b580      	push	{r7, lr}
10048192:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
10048194:	4b05      	ldr	r3, [pc, #20]	@ (100481ac <_timer_start_calibration+0x1c>)
10048196:	0018      	movs	r0, r3
10048198:	f7ff fac9 	bl	1004772e <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
1004819c:	4b03      	ldr	r3, [pc, #12]	@ (100481ac <_timer_start_calibration+0x1c>)
1004819e:	0018      	movs	r0, r3
100481a0:	f7ff faa6 	bl	100476f0 <LL_RADIO_TIMER_StartLSICalibration>
}
100481a4:	46c0      	nop			@ (mov r8, r8)
100481a6:	46bd      	mov	sp, r7
100481a8:	bd80      	pop	{r7, pc}
100481aa:	46c0      	nop			@ (mov r8, r8)
100481ac:	60001000 	.word	0x60001000

100481b0 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
100481b0:	b580      	push	{r7, lr}
100481b2:	b082      	sub	sp, #8
100481b4:	af00      	add	r7, sp, #0
100481b6:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
100481b8:	f7ff ffea 	bl	10048190 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
100481bc:	46c0      	nop			@ (mov r8, r8)
100481be:	4b07      	ldr	r3, [pc, #28]	@ (100481dc <_timer_calibrate+0x2c>)
100481c0:	0018      	movs	r0, r3
100481c2:	f7ff fac2 	bl	1004774a <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
100481c6:	1e03      	subs	r3, r0, #0
100481c8:	d0f9      	beq.n	100481be <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
100481ca:	687b      	ldr	r3, [r7, #4]
100481cc:	0018      	movs	r0, r3
100481ce:	f000 f807 	bl	100481e0 <_get_calibration_data>
}
100481d2:	46c0      	nop			@ (mov r8, r8)
100481d4:	46bd      	mov	sp, r7
100481d6:	b002      	add	sp, #8
100481d8:	bd80      	pop	{r7, pc}
100481da:	46c0      	nop			@ (mov r8, r8)
100481dc:	60001000 	.word	0x60001000

100481e0 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
100481e0:	b580      	push	{r7, lr}
100481e2:	b08a      	sub	sp, #40	@ 0x28
100481e4:	af00      	add	r7, sp, #0
100481e6:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
100481e8:	4b2e      	ldr	r3, [pc, #184]	@ (100482a4 <_get_calibration_data+0xc4>)
100481ea:	0018      	movs	r0, r3
100481ec:	f7ff fa8b 	bl	10047706 <LL_RADIO_TIMER_GetLSIPeriod>
100481f0:	0003      	movs	r3, r0
100481f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
100481f4:	e005      	b.n	10048202 <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
100481f6:	4b2b      	ldr	r3, [pc, #172]	@ (100482a4 <_get_calibration_data+0xc4>)
100481f8:	0018      	movs	r0, r3
100481fa:	f7ff fa84 	bl	10047706 <LL_RADIO_TIMER_GetLSIPeriod>
100481fe:	0003      	movs	r3, r0
10048200:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
10048202:	4b28      	ldr	r3, [pc, #160]	@ (100482a4 <_get_calibration_data+0xc4>)
10048204:	0018      	movs	r0, r3
10048206:	f7ff fa7e 	bl	10047706 <LL_RADIO_TIMER_GetLSIPeriod>
1004820a:	0002      	movs	r2, r0
1004820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004820e:	429a      	cmp	r2, r3
10048210:	d1f1      	bne.n	100481f6 <_get_calibration_data+0x16>
10048212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048214:	2b00      	cmp	r3, #0
10048216:	d0ee      	beq.n	100481f6 <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
10048218:	4b23      	ldr	r3, [pc, #140]	@ (100482a8 <_get_calibration_data+0xc8>)
1004821a:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
1004821c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004821e:	121b      	asrs	r3, r3, #8
10048220:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
10048222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048224:	22ff      	movs	r2, #255	@ 0xff
10048226:	4013      	ands	r3, r2
10048228:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004822a:	69fb      	ldr	r3, [r7, #28]
1004822c:	69ba      	ldr	r2, [r7, #24]
1004822e:	435a      	muls	r2, r3
10048230:	697b      	ldr	r3, [r7, #20]
10048232:	69f9      	ldr	r1, [r7, #28]
10048234:	434b      	muls	r3, r1
10048236:	121b      	asrs	r3, r3, #8
10048238:	18d3      	adds	r3, r2, r3
1004823a:	3310      	adds	r3, #16
1004823c:	115a      	asrs	r2, r3, #5
1004823e:	687b      	ldr	r3, [r7, #4]
10048240:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
10048242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10048244:	687b      	ldr	r3, [r7, #4]
10048246:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
10048248:	4b18      	ldr	r3, [pc, #96]	@ (100482ac <_get_calibration_data+0xcc>)
1004824a:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004824c:	4b15      	ldr	r3, [pc, #84]	@ (100482a4 <_get_calibration_data+0xc4>)
1004824e:	0018      	movs	r0, r3
10048250:	f7ff fa63 	bl	1004771a <LL_RADIO_TIMER_GetLSIFrequency>
10048254:	0003      	movs	r3, r0
10048256:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10048258:	e005      	b.n	10048266 <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004825a:	4b12      	ldr	r3, [pc, #72]	@ (100482a4 <_get_calibration_data+0xc4>)
1004825c:	0018      	movs	r0, r3
1004825e:	f7ff fa5c 	bl	1004771a <LL_RADIO_TIMER_GetLSIFrequency>
10048262:	0003      	movs	r3, r0
10048264:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10048266:	4b0f      	ldr	r3, [pc, #60]	@ (100482a4 <_get_calibration_data+0xc4>)
10048268:	0018      	movs	r0, r3
1004826a:	f7ff fa56 	bl	1004771a <LL_RADIO_TIMER_GetLSIFrequency>
1004826e:	0002      	movs	r2, r0
10048270:	6a3b      	ldr	r3, [r7, #32]
10048272:	429a      	cmp	r2, r3
10048274:	d1f1      	bne.n	1004825a <_get_calibration_data+0x7a>
10048276:	6a3b      	ldr	r3, [r7, #32]
10048278:	2b00      	cmp	r3, #0
1004827a:	d0ee      	beq.n	1004825a <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
1004827c:	6a3b      	ldr	r3, [r7, #32]
1004827e:	119b      	asrs	r3, r3, #6
10048280:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
10048282:	68fb      	ldr	r3, [r7, #12]
10048284:	693a      	ldr	r2, [r7, #16]
10048286:	4353      	muls	r3, r2
10048288:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
1004828a:	68bb      	ldr	r3, [r7, #8]
1004828c:	3380      	adds	r3, #128	@ 0x80
1004828e:	121a      	asrs	r2, r3, #8
10048290:	687b      	ldr	r3, [r7, #4]
10048292:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
10048294:	6a3a      	ldr	r2, [r7, #32]
10048296:	687b      	ldr	r3, [r7, #4]
10048298:	605a      	str	r2, [r3, #4]
}
1004829a:	46c0      	nop			@ (mov r8, r8)
1004829c:	46bd      	mov	sp, r7
1004829e:	b00a      	add	sp, #40	@ 0x28
100482a0:	bd80      	pop	{r7, pc}
100482a2:	46c0      	nop			@ (mov r8, r8)
100482a4:	60001000 	.word	0x60001000
100482a8:	0008bcf6 	.word	0x0008bcf6
100482ac:	00000753 	.word	0x00000753

100482b0 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
100482b0:	b590      	push	{r4, r7, lr}
100482b2:	b085      	sub	sp, #20
100482b4:	af00      	add	r7, sp, #0
100482b6:	6078      	str	r0, [r7, #4]
100482b8:	000a      	movs	r2, r1
100482ba:	1cfb      	adds	r3, r7, #3
100482bc:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
100482be:	4b38      	ldr	r3, [pc, #224]	@ (100483a0 <_configureTxRxDelay+0xf0>)
100482c0:	7b9b      	ldrb	r3, [r3, #14]
100482c2:	b2db      	uxtb	r3, r3
100482c4:	2b00      	cmp	r3, #0
100482c6:	da00      	bge.n	100482ca <_configureTxRxDelay+0x1a>
100482c8:	3307      	adds	r3, #7
100482ca:	10db      	asrs	r3, r3, #3
100482cc:	b2da      	uxtb	r2, r3
100482ce:	240f      	movs	r4, #15
100482d0:	193b      	adds	r3, r7, r4
100482d2:	3201      	adds	r2, #1
100482d4:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
100482d6:	687b      	ldr	r3, [r7, #4]
100482d8:	699b      	ldr	r3, [r3, #24]
100482da:	0019      	movs	r1, r3
100482dc:	4b31      	ldr	r3, [pc, #196]	@ (100483a4 <_configureTxRxDelay+0xf4>)
100482de:	001a      	movs	r2, r3
100482e0:	201b      	movs	r0, #27
100482e2:	f7f7 feed 	bl	100400c0 <blue_unit_conversion>
100482e6:	0002      	movs	r2, r0
100482e8:	4b2d      	ldr	r3, [pc, #180]	@ (100483a0 <_configureTxRxDelay+0xf0>)
100482ea:	b2d2      	uxtb	r2, r2
100482ec:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
100482ee:	4b2c      	ldr	r3, [pc, #176]	@ (100483a0 <_configureTxRxDelay+0xf0>)
100482f0:	799b      	ldrb	r3, [r3, #6]
100482f2:	b2db      	uxtb	r3, r3
100482f4:	0018      	movs	r0, r3
100482f6:	f000 f86d 	bl	100483d4 <_us_to_machinetime>
100482fa:	0003      	movs	r3, r0
100482fc:	b2d9      	uxtb	r1, r3
100482fe:	687b      	ldr	r3, [r7, #4]
10048300:	223d      	movs	r2, #61	@ 0x3d
10048302:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
10048304:	4b26      	ldr	r3, [pc, #152]	@ (100483a0 <_configureTxRxDelay+0xf0>)
10048306:	7a1b      	ldrb	r3, [r3, #8]
10048308:	b2db      	uxtb	r3, r3
1004830a:	001a      	movs	r2, r3
1004830c:	193b      	adds	r3, r7, r4
1004830e:	781b      	ldrb	r3, [r3, #0]
10048310:	18d3      	adds	r3, r2, r3
10048312:	0018      	movs	r0, r3
10048314:	f000 f85e 	bl	100483d4 <_us_to_machinetime>
10048318:	0003      	movs	r3, r0
1004831a:	b2d9      	uxtb	r1, r3
1004831c:	687b      	ldr	r3, [r7, #4]
1004831e:	2238      	movs	r2, #56	@ 0x38
10048320:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
10048322:	4b1f      	ldr	r3, [pc, #124]	@ (100483a0 <_configureTxRxDelay+0xf0>)
10048324:	7a5b      	ldrb	r3, [r3, #9]
10048326:	b2db      	uxtb	r3, r3
10048328:	001a      	movs	r2, r3
1004832a:	193b      	adds	r3, r7, r4
1004832c:	781b      	ldrb	r3, [r3, #0]
1004832e:	18d3      	adds	r3, r2, r3
10048330:	0018      	movs	r0, r3
10048332:	f000 f84f 	bl	100483d4 <_us_to_machinetime>
10048336:	0003      	movs	r3, r0
10048338:	b2d9      	uxtb	r1, r3
1004833a:	687b      	ldr	r3, [r7, #4]
1004833c:	2239      	movs	r2, #57	@ 0x39
1004833e:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
10048340:	4b17      	ldr	r3, [pc, #92]	@ (100483a0 <_configureTxRxDelay+0xf0>)
10048342:	7a9b      	ldrb	r3, [r3, #10]
10048344:	b2db      	uxtb	r3, r3
10048346:	0018      	movs	r0, r3
10048348:	f000 f844 	bl	100483d4 <_us_to_machinetime>
1004834c:	0003      	movs	r3, r0
1004834e:	b2d9      	uxtb	r1, r3
10048350:	687b      	ldr	r3, [r7, #4]
10048352:	223a      	movs	r2, #58	@ 0x3a
10048354:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
10048356:	4b12      	ldr	r3, [pc, #72]	@ (100483a0 <_configureTxRxDelay+0xf0>)
10048358:	7adb      	ldrb	r3, [r3, #11]
1004835a:	b2db      	uxtb	r3, r3
1004835c:	0018      	movs	r0, r3
1004835e:	f000 f839 	bl	100483d4 <_us_to_machinetime>
10048362:	0003      	movs	r3, r0
10048364:	b2d9      	uxtb	r1, r3
10048366:	687b      	ldr	r3, [r7, #4]
10048368:	223b      	movs	r2, #59	@ 0x3b
1004836a:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004836c:	1cfb      	adds	r3, r7, #3
1004836e:	781b      	ldrb	r3, [r3, #0]
10048370:	2b00      	cmp	r3, #0
10048372:	d010      	beq.n	10048396 <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
10048374:	4b0a      	ldr	r3, [pc, #40]	@ (100483a0 <_configureTxRxDelay+0xf0>)
10048376:	7a1b      	ldrb	r3, [r3, #8]
10048378:	b2db      	uxtb	r3, r3
1004837a:	001a      	movs	r2, r3
1004837c:	193b      	adds	r3, r7, r4
1004837e:	781b      	ldrb	r3, [r3, #0]
10048380:	18d3      	adds	r3, r2, r3
10048382:	0018      	movs	r0, r3
10048384:	f000 f810 	bl	100483a8 <_us_to_systime>
10048388:	0003      	movs	r3, r0
1004838a:	b2db      	uxtb	r3, r3
1004838c:	331b      	adds	r3, #27
1004838e:	b2d9      	uxtb	r1, r3
10048390:	687b      	ldr	r3, [r7, #4]
10048392:	223c      	movs	r2, #60	@ 0x3c
10048394:	5499      	strb	r1, [r3, r2]
  }

}
10048396:	46c0      	nop			@ (mov r8, r8)
10048398:	46bd      	mov	sp, r7
1004839a:	b005      	add	sp, #20
1004839c:	bd90      	pop	{r4, r7, pc}
1004839e:	46c0      	nop			@ (mov r8, r8)
100483a0:	200000c0 	.word	0x200000c0
100483a4:	00000326 	.word	0x00000326

100483a8 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
100483a8:	b580      	push	{r7, lr}
100483aa:	b084      	sub	sp, #16
100483ac:	af00      	add	r7, sp, #0
100483ae:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
100483b0:	687b      	ldr	r3, [r7, #4]
100483b2:	2268      	movs	r2, #104	@ 0x68
100483b4:	4353      	muls	r3, r2
100483b6:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
100483b8:	687b      	ldr	r3, [r7, #4]
100483ba:	22db      	movs	r2, #219	@ 0xdb
100483bc:	4353      	muls	r3, r2
100483be:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
100483c0:	68fb      	ldr	r3, [r7, #12]
100483c2:	0a1a      	lsrs	r2, r3, #8
100483c4:	68bb      	ldr	r3, [r7, #8]
100483c6:	0c1b      	lsrs	r3, r3, #16
100483c8:	18d3      	adds	r3, r2, r3
}
100483ca:	0018      	movs	r0, r3
100483cc:	46bd      	mov	sp, r7
100483ce:	b004      	add	sp, #16
100483d0:	bd80      	pop	{r7, pc}
	...

100483d4 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
100483d4:	b5b0      	push	{r4, r5, r7, lr}
100483d6:	b088      	sub	sp, #32
100483d8:	af00      	add	r7, sp, #0
100483da:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
100483dc:	4915      	ldr	r1, [pc, #84]	@ (10048434 <_us_to_machinetime+0x60>)
100483de:	6949      	ldr	r1, [r1, #20]
100483e0:	6039      	str	r1, [r7, #0]
100483e2:	2100      	movs	r1, #0
100483e4:	6079      	str	r1, [r7, #4]
100483e6:	68f9      	ldr	r1, [r7, #12]
100483e8:	000a      	movs	r2, r1
100483ea:	2100      	movs	r1, #0
100483ec:	000b      	movs	r3, r1
100483ee:	6838      	ldr	r0, [r7, #0]
100483f0:	6879      	ldr	r1, [r7, #4]
100483f2:	f7f8 f8dd 	bl	100405b0 <__aeabi_lmul>
100483f6:	0002      	movs	r2, r0
100483f8:	000b      	movs	r3, r1
100483fa:	0010      	movs	r0, r2
100483fc:	0019      	movs	r1, r3
100483fe:	0002      	movs	r2, r0
10048400:	000b      	movs	r3, r1
10048402:	1892      	adds	r2, r2, r2
10048404:	415b      	adcs	r3, r3
10048406:	1812      	adds	r2, r2, r0
10048408:	414b      	adcs	r3, r1
1004840a:	61ba      	str	r2, [r7, #24]
1004840c:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004840e:	69ba      	ldr	r2, [r7, #24]
10048410:	69fb      	ldr	r3, [r7, #28]
10048412:	2080      	movs	r0, #128	@ 0x80
10048414:	04c0      	lsls	r0, r0, #19
10048416:	2100      	movs	r1, #0
10048418:	1812      	adds	r2, r2, r0
1004841a:	414b      	adcs	r3, r1
1004841c:	0159      	lsls	r1, r3, #5
1004841e:	0ed4      	lsrs	r4, r2, #27
10048420:	430c      	orrs	r4, r1
10048422:	0edd      	lsrs	r5, r3, #27
10048424:	0023      	movs	r3, r4
10048426:	617b      	str	r3, [r7, #20]

  return time_mt;
10048428:	697b      	ldr	r3, [r7, #20]
}
1004842a:	0018      	movs	r0, r3
1004842c:	46bd      	mov	sp, r7
1004842e:	b008      	add	sp, #32
10048430:	bdb0      	pop	{r4, r5, r7, pc}
10048432:	46c0      	nop			@ (mov r8, r8)
10048434:	20000a10 	.word	0x20000a10

10048438 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
10048438:	b580      	push	{r7, lr}
1004843a:	b084      	sub	sp, #16
1004843c:	af00      	add	r7, sp, #0
1004843e:	0002      	movs	r2, r0
10048440:	6039      	str	r1, [r7, #0]
10048442:	1dbb      	adds	r3, r7, #6
10048444:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
10048446:	1dbb      	adds	r3, r7, #6
10048448:	881b      	ldrh	r3, [r3, #0]
1004844a:	6839      	ldr	r1, [r7, #0]
1004844c:	4a0e      	ldr	r2, [pc, #56]	@ (10048488 <_update_xtal_startup_time+0x50>)
1004844e:	0018      	movs	r0, r3
10048450:	f7f7 fe36 	bl	100400c0 <blue_unit_conversion>
10048454:	0003      	movs	r3, r0
10048456:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
10048458:	68fa      	ldr	r2, [r7, #12]
1004845a:	2380      	movs	r3, #128	@ 0x80
1004845c:	015b      	lsls	r3, r3, #5
1004845e:	429a      	cmp	r2, r3
10048460:	db01      	blt.n	10048466 <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
10048462:	4b0a      	ldr	r3, [pc, #40]	@ (1004848c <_update_xtal_startup_time+0x54>)
10048464:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
10048466:	68fb      	ldr	r3, [r7, #12]
10048468:	2b0f      	cmp	r3, #15
1004846a:	dc01      	bgt.n	10048470 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004846c:	2310      	movs	r3, #16
1004846e:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
10048470:	68fb      	ldr	r3, [r7, #12]
10048472:	111b      	asrs	r3, r3, #4
10048474:	b2db      	uxtb	r3, r3
10048476:	4a06      	ldr	r2, [pc, #24]	@ (10048490 <_update_xtal_startup_time+0x58>)
10048478:	0019      	movs	r1, r3
1004847a:	0010      	movs	r0, r2
1004847c:	f7ff f8aa 	bl	100475d4 <LL_RADIO_TIMER_SetWakeupOffset>
}
10048480:	46c0      	nop			@ (mov r8, r8)
10048482:	46bd      	mov	sp, r7
10048484:	b004      	add	sp, #16
10048486:	bd80      	pop	{r7, pc}
10048488:	00000326 	.word	0x00000326
1004848c:	00000fff 	.word	0x00000fff
10048490:	60001800 	.word	0x60001800

10048494 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
10048494:	b580      	push	{r7, lr}
10048496:	b082      	sub	sp, #8
10048498:	af00      	add	r7, sp, #0
1004849a:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004849c:	4b06      	ldr	r3, [pc, #24]	@ (100484b8 <_calibration_callback+0x24>)
1004849e:	781b      	ldrb	r3, [r3, #0]
100484a0:	2b00      	cmp	r3, #0
100484a2:	d001      	beq.n	100484a8 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
100484a4:	f7ff fe74 	bl	10048190 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
100484a8:	4b03      	ldr	r3, [pc, #12]	@ (100484b8 <_calibration_callback+0x24>)
100484aa:	2201      	movs	r2, #1
100484ac:	721a      	strb	r2, [r3, #8]
}
100484ae:	46c0      	nop			@ (mov r8, r8)
100484b0:	46bd      	mov	sp, r7
100484b2:	b002      	add	sp, #8
100484b4:	bd80      	pop	{r7, pc}
100484b6:	46c0      	nop			@ (mov r8, r8)
100484b8:	20000a10 	.word	0x20000a10

100484bc <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
100484bc:	b590      	push	{r4, r7, lr}
100484be:	b089      	sub	sp, #36	@ 0x24
100484c0:	af00      	add	r7, sp, #0
100484c2:	60f8      	str	r0, [r7, #12]
100484c4:	603a      	str	r2, [r7, #0]
100484c6:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
100484c8:	2313      	movs	r3, #19
100484ca:	18fb      	adds	r3, r7, r3
100484cc:	2200      	movs	r2, #0
100484ce:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
100484d0:	68fb      	ldr	r3, [r7, #12]
100484d2:	7b1b      	ldrb	r3, [r3, #12]
100484d4:	2b00      	cmp	r3, #0
100484d6:	d001      	beq.n	100484dc <_start_timer+0x20>
  {
    return 1;
100484d8:	2301      	movs	r3, #1
100484da:	e047      	b.n	1004856c <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
100484dc:	68f9      	ldr	r1, [r7, #12]
100484de:	683a      	ldr	r2, [r7, #0]
100484e0:	687b      	ldr	r3, [r7, #4]
100484e2:	600a      	str	r2, [r1, #0]
100484e4:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
100484e6:	68fb      	ldr	r3, [r7, #12]
100484e8:	2201      	movs	r2, #1
100484ea:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
100484ec:	4b21      	ldr	r3, [pc, #132]	@ (10048574 <_start_timer+0xb8>)
100484ee:	228c      	movs	r2, #140	@ 0x8c
100484f0:	589b      	ldr	r3, [r3, r2]
100484f2:	68fa      	ldr	r2, [r7, #12]
100484f4:	0011      	movs	r1, r2
100484f6:	0018      	movs	r0, r3
100484f8:	f000 f92e 	bl	10048758 <_insert_timer_in_queue>
100484fc:	0002      	movs	r2, r0
100484fe:	68fb      	ldr	r3, [r7, #12]
10048500:	4293      	cmp	r3, r2
10048502:	d130      	bne.n	10048566 <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
10048504:	2413      	movs	r4, #19
10048506:	193a      	adds	r2, r7, r4
10048508:	68fb      	ldr	r3, [r7, #12]
1004850a:	0011      	movs	r1, r2
1004850c:	0018      	movs	r0, r3
1004850e:	f000 f89b 	bl	10048648 <_update_user_timeout>
10048512:	0002      	movs	r2, r0
10048514:	4b17      	ldr	r3, [pc, #92]	@ (10048574 <_start_timer+0xb8>)
10048516:	218c      	movs	r1, #140	@ 0x8c
10048518:	505a      	str	r2, [r3, r1]
    if (expired)
1004851a:	193b      	adds	r3, r7, r4
1004851c:	781b      	ldrb	r3, [r3, #0]
1004851e:	2b00      	cmp	r3, #0
10048520:	d021      	beq.n	10048566 <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048522:	f3ef 8310 	mrs	r3, PRIMASK
10048526:	61bb      	str	r3, [r7, #24]
  return(result);
10048528:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004852a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004852c:	b672      	cpsid	i
}
1004852e:	46c0      	nop			@ (mov r8, r8)
10048530:	4b10      	ldr	r3, [pc, #64]	@ (10048574 <_start_timer+0xb8>)
10048532:	2291      	movs	r2, #145	@ 0x91
10048534:	5c9b      	ldrb	r3, [r3, r2]
10048536:	3301      	adds	r3, #1
10048538:	4a0e      	ldr	r2, [pc, #56]	@ (10048574 <_start_timer+0xb8>)
1004853a:	2192      	movs	r1, #146	@ 0x92
1004853c:	5c52      	ldrb	r2, [r2, r1]
1004853e:	4293      	cmp	r3, r2
10048540:	d103      	bne.n	1004854a <_start_timer+0x8e>
10048542:	4b0c      	ldr	r3, [pc, #48]	@ (10048574 <_start_timer+0xb8>)
10048544:	2291      	movs	r2, #145	@ 0x91
10048546:	5c9b      	ldrb	r3, [r3, r2]
10048548:	e004      	b.n	10048554 <_start_timer+0x98>
1004854a:	4b0a      	ldr	r3, [pc, #40]	@ (10048574 <_start_timer+0xb8>)
1004854c:	2291      	movs	r2, #145	@ 0x91
1004854e:	5c9b      	ldrb	r3, [r3, r2]
10048550:	3301      	adds	r3, #1
10048552:	b2db      	uxtb	r3, r3
10048554:	4a07      	ldr	r2, [pc, #28]	@ (10048574 <_start_timer+0xb8>)
10048556:	2191      	movs	r1, #145	@ 0x91
10048558:	5453      	strb	r3, [r2, r1]
1004855a:	69fb      	ldr	r3, [r7, #28]
1004855c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004855e:	697b      	ldr	r3, [r7, #20]
10048560:	f383 8810 	msr	PRIMASK, r3
}
10048564:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return expired;
10048566:	2313      	movs	r3, #19
10048568:	18fb      	adds	r3, r7, r3
1004856a:	781b      	ldrb	r3, [r3, #0]
}
1004856c:	0018      	movs	r0, r3
1004856e:	46bd      	mov	sp, r7
10048570:	b009      	add	sp, #36	@ 0x24
10048572:	bd90      	pop	{r4, r7, pc}
10048574:	20000a10 	.word	0x20000a10

10048578 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
10048578:	b5b0      	push	{r4, r5, r7, lr}
1004857a:	b08a      	sub	sp, #40	@ 0x28
1004857c:	af00      	add	r7, sp, #0
1004857e:	60f8      	str	r0, [r7, #12]
10048580:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048582:	f3ef 8310 	mrs	r3, PRIMASK
10048586:	617b      	str	r3, [r7, #20]
  return(result);
10048588:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004858a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004858c:	b672      	cpsid	i
}
1004858e:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
10048590:	68fb      	ldr	r3, [r7, #12]
10048592:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10048594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10048596:	623a      	str	r2, [r7, #32]
10048598:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004859a:	4b29      	ldr	r3, [pc, #164]	@ (10048640 <_get_system_time_and_machine+0xc8>)
1004859c:	0018      	movs	r0, r3
1004859e:	f7ff f84a 	bl	10047636 <LL_RADIO_TIMER_GetAbsoluteTime>
100485a2:	0002      	movs	r2, r0
100485a4:	68bb      	ldr	r3, [r7, #8]
100485a6:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
100485a8:	68bb      	ldr	r3, [r7, #8]
100485aa:	681a      	ldr	r2, [r3, #0]
100485ac:	68fb      	ldr	r3, [r7, #12]
100485ae:	2180      	movs	r1, #128	@ 0x80
100485b0:	585b      	ldr	r3, [r3, r1]
100485b2:	1ad3      	subs	r3, r2, r3
100485b4:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
100485b6:	68fb      	ldr	r3, [r7, #12]
100485b8:	69db      	ldr	r3, [r3, #28]
100485ba:	0019      	movs	r1, r3
100485bc:	4a21      	ldr	r2, [pc, #132]	@ (10048644 <_get_system_time_and_machine+0xcc>)
100485be:	69bb      	ldr	r3, [r7, #24]
100485c0:	0018      	movs	r0, r3
100485c2:	f7f7 fd7d 	bl	100400c0 <blue_unit_conversion>
100485c6:	0003      	movs	r3, r0
100485c8:	603b      	str	r3, [r7, #0]
100485ca:	2300      	movs	r3, #0
100485cc:	607b      	str	r3, [r7, #4]
100485ce:	6a3a      	ldr	r2, [r7, #32]
100485d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100485d2:	6838      	ldr	r0, [r7, #0]
100485d4:	6879      	ldr	r1, [r7, #4]
100485d6:	1812      	adds	r2, r2, r0
100485d8:	414b      	adcs	r3, r1
100485da:	623a      	str	r2, [r7, #32]
100485dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
100485de:	68fb      	ldr	r3, [r7, #12]
100485e0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
100485e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100485e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100485e6:	4299      	cmp	r1, r3
100485e8:	d305      	bcc.n	100485f6 <_get_system_time_and_machine+0x7e>
100485ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100485ec:	4299      	cmp	r1, r3
100485ee:	d115      	bne.n	1004861c <_get_system_time_and_machine+0xa4>
100485f0:	6a39      	ldr	r1, [r7, #32]
100485f2:	4291      	cmp	r1, r2
100485f4:	d212      	bcs.n	1004861c <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
100485f6:	68fb      	ldr	r3, [r7, #12]
100485f8:	69db      	ldr	r3, [r3, #28]
100485fa:	0019      	movs	r1, r3
100485fc:	4a11      	ldr	r2, [pc, #68]	@ (10048644 <_get_system_time_and_machine+0xcc>)
100485fe:	2301      	movs	r3, #1
10048600:	425b      	negs	r3, r3
10048602:	0018      	movs	r0, r3
10048604:	f7f7 fd5c 	bl	100400c0 <blue_unit_conversion>
10048608:	0003      	movs	r3, r0
1004860a:	001c      	movs	r4, r3
1004860c:	2300      	movs	r3, #0
1004860e:	001d      	movs	r5, r3
10048610:	6a3a      	ldr	r2, [r7, #32]
10048612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048614:	1912      	adds	r2, r2, r4
10048616:	416b      	adcs	r3, r5
10048618:	623a      	str	r2, [r7, #32]
1004861a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004861c:	68f9      	ldr	r1, [r7, #12]
1004861e:	6a3a      	ldr	r2, [r7, #32]
10048620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048622:	678a      	str	r2, [r1, #120]	@ 0x78
10048624:	67cb      	str	r3, [r1, #124]	@ 0x7c
10048626:	69fb      	ldr	r3, [r7, #28]
10048628:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004862a:	693b      	ldr	r3, [r7, #16]
1004862c:	f383 8810 	msr	PRIMASK, r3
}
10048630:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
10048632:	6a3a      	ldr	r2, [r7, #32]
10048634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10048636:	0010      	movs	r0, r2
10048638:	0019      	movs	r1, r3
1004863a:	46bd      	mov	sp, r7
1004863c:	b00a      	add	sp, #40	@ 0x28
1004863e:	bdb0      	pop	{r4, r5, r7, pc}
10048640:	60001800 	.word	0x60001800
10048644:	00000635 	.word	0x00000635

10048648 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10048648:	b5b0      	push	{r4, r5, r7, lr}
1004864a:	b08a      	sub	sp, #40	@ 0x28
1004864c:	af00      	add	r7, sp, #0
1004864e:	6078      	str	r0, [r7, #4]
10048650:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
10048652:	687b      	ldr	r3, [r7, #4]
10048654:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
10048656:	687b      	ldr	r3, [r7, #4]
10048658:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004865a:	683b      	ldr	r3, [r7, #0]
1004865c:	2200      	movs	r2, #0
1004865e:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
10048660:	e033      	b.n	100486ca <_update_user_timeout+0x82>
  {
    if (curr->active)
10048662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048664:	7b1b      	ldrb	r3, [r3, #12]
10048666:	2b00      	cmp	r3, #0
10048668:	d02c      	beq.n	100486c4 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004866a:	f3ef 8310 	mrs	r3, PRIMASK
1004866e:	60fb      	str	r3, [r7, #12]
  return(result);
10048670:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
10048672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10048674:	b672      	cpsid	i
}
10048676:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10048678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004867a:	681c      	ldr	r4, [r3, #0]
1004867c:	685d      	ldr	r5, [r3, #4]
1004867e:	f7ff fcb1 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10048682:	0002      	movs	r2, r0
10048684:	000b      	movs	r3, r1
10048686:	1aa4      	subs	r4, r4, r2
10048688:	419d      	sbcs	r5, r3
1004868a:	0022      	movs	r2, r4
1004868c:	002b      	movs	r3, r5
1004868e:	613a      	str	r2, [r7, #16]
10048690:	617b      	str	r3, [r7, #20]
      if (delay > 0)
10048692:	697b      	ldr	r3, [r7, #20]
10048694:	2b00      	cmp	r3, #0
10048696:	dc05      	bgt.n	100486a4 <_update_user_timeout+0x5c>
10048698:	697b      	ldr	r3, [r7, #20]
1004869a:	2b00      	cmp	r3, #0
1004869c:	d108      	bne.n	100486b0 <_update_user_timeout+0x68>
1004869e:	693b      	ldr	r3, [r7, #16]
100486a0:	2b00      	cmp	r3, #0
100486a2:	d005      	beq.n	100486b0 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
100486a4:	693b      	ldr	r3, [r7, #16]
100486a6:	2101      	movs	r1, #1
100486a8:	0018      	movs	r0, r3
100486aa:	f000 f81d 	bl	100486e8 <VTIMER_SetWakeupTime>
100486ae:	e002      	b.n	100486b6 <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
100486b0:	683b      	ldr	r3, [r7, #0]
100486b2:	2201      	movs	r2, #1
100486b4:	701a      	strb	r2, [r3, #0]
100486b6:	69fb      	ldr	r3, [r7, #28]
100486b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100486ba:	68bb      	ldr	r3, [r7, #8]
100486bc:	f383 8810 	msr	PRIMASK, r3
}
100486c0:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
100486c2:	e005      	b.n	100486d0 <_update_user_timeout+0x88>
    }
    curr = curr->next;
100486c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100486c6:	691b      	ldr	r3, [r3, #16]
100486c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
100486ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100486cc:	2b00      	cmp	r3, #0
100486ce:	d1c8      	bne.n	10048662 <_update_user_timeout+0x1a>
  }
  if (*expired)
100486d0:	683b      	ldr	r3, [r7, #0]
100486d2:	781b      	ldrb	r3, [r3, #0]
100486d4:	2b00      	cmp	r3, #0
100486d6:	d001      	beq.n	100486dc <_update_user_timeout+0x94>
  {
    return rootOrig;
100486d8:	6a3b      	ldr	r3, [r7, #32]
100486da:	e000      	b.n	100486de <_update_user_timeout+0x96>
  }

  return curr;
100486dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
100486de:	0018      	movs	r0, r3
100486e0:	46bd      	mov	sp, r7
100486e2:	b00a      	add	sp, #40	@ 0x28
100486e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

100486e8 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
100486e8:	b580      	push	{r7, lr}
100486ea:	b084      	sub	sp, #16
100486ec:	af00      	add	r7, sp, #0
100486ee:	6078      	str	r0, [r7, #4]
100486f0:	000a      	movs	r2, r1
100486f2:	1cfb      	adds	r3, r7, #3
100486f4:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
100486f6:	4b15      	ldr	r3, [pc, #84]	@ (1004874c <VTIMER_SetWakeupTime+0x64>)
100486f8:	699b      	ldr	r3, [r3, #24]
100486fa:	0019      	movs	r1, r3
100486fc:	4a14      	ldr	r2, [pc, #80]	@ (10048750 <VTIMER_SetWakeupTime+0x68>)
100486fe:	687b      	ldr	r3, [r7, #4]
10048700:	0018      	movs	r0, r3
10048702:	f7f7 fcdd 	bl	100400c0 <blue_unit_conversion>
10048706:	0003      	movs	r3, r0
10048708:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004870a:	687b      	ldr	r3, [r7, #4]
1004870c:	2b20      	cmp	r3, #32
1004870e:	d200      	bcs.n	10048712 <VTIMER_SetWakeupTime+0x2a>
10048710:	2320      	movs	r3, #32
10048712:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10048714:	4b0f      	ldr	r3, [pc, #60]	@ (10048754 <VTIMER_SetWakeupTime+0x6c>)
10048716:	0018      	movs	r0, r3
10048718:	f7fe ff8d 	bl	10047636 <LL_RADIO_TIMER_GetAbsoluteTime>
1004871c:	0003      	movs	r3, r0
1004871e:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10048720:	687a      	ldr	r2, [r7, #4]
10048722:	68fb      	ldr	r3, [r7, #12]
10048724:	18d3      	adds	r3, r2, r3
10048726:	3308      	adds	r3, #8
10048728:	4a0a      	ldr	r2, [pc, #40]	@ (10048754 <VTIMER_SetWakeupTime+0x6c>)
1004872a:	0019      	movs	r1, r3
1004872c:	0010      	movs	r0, r2
1004872e:	f7fe ff76 	bl	1004761e <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10048732:	4b08      	ldr	r3, [pc, #32]	@ (10048754 <VTIMER_SetWakeupTime+0x6c>)
10048734:	0018      	movs	r0, r3
10048736:	f7fe ff88 	bl	1004764a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004873a:	4b06      	ldr	r3, [pc, #24]	@ (10048754 <VTIMER_SetWakeupTime+0x6c>)
1004873c:	0018      	movs	r0, r3
1004873e:	f7fe ff29 	bl	10047594 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
10048742:	68fb      	ldr	r3, [r7, #12]
}
10048744:	0018      	movs	r0, r3
10048746:	46bd      	mov	sp, r7
10048748:	b004      	add	sp, #16
1004874a:	bd80      	pop	{r7, pc}
1004874c:	20000a10 	.word	0x20000a10
10048750:	00000326 	.word	0x00000326
10048754:	60001800 	.word	0x60001800

10048758 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10048758:	b580      	push	{r7, lr}
1004875a:	b086      	sub	sp, #24
1004875c:	af00      	add	r7, sp, #0
1004875e:	6078      	str	r0, [r7, #4]
10048760:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
10048762:	687b      	ldr	r3, [r7, #4]
10048764:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
10048766:	2300      	movs	r3, #0
10048768:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004876a:	687b      	ldr	r3, [r7, #4]
1004876c:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004876e:	e004      	b.n	1004877a <_insert_timer_in_queue+0x22>
  {
    prev = current;
10048770:	697b      	ldr	r3, [r7, #20]
10048772:	613b      	str	r3, [r7, #16]
    current = current->next;
10048774:	697b      	ldr	r3, [r7, #20]
10048776:	691b      	ldr	r3, [r3, #16]
10048778:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004877a:	697b      	ldr	r3, [r7, #20]
1004877c:	2b00      	cmp	r3, #0
1004877e:	d00a      	beq.n	10048796 <_insert_timer_in_queue+0x3e>
10048780:	697b      	ldr	r3, [r7, #20]
10048782:	681a      	ldr	r2, [r3, #0]
10048784:	685b      	ldr	r3, [r3, #4]
10048786:	6839      	ldr	r1, [r7, #0]
10048788:	6808      	ldr	r0, [r1, #0]
1004878a:	6849      	ldr	r1, [r1, #4]
1004878c:	4299      	cmp	r1, r3
1004878e:	d8ef      	bhi.n	10048770 <_insert_timer_in_queue+0x18>
10048790:	d101      	bne.n	10048796 <_insert_timer_in_queue+0x3e>
10048792:	4290      	cmp	r0, r2
10048794:	d8ec      	bhi.n	10048770 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
10048796:	683b      	ldr	r3, [r7, #0]
10048798:	697a      	ldr	r2, [r7, #20]
1004879a:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
1004879c:	693b      	ldr	r3, [r7, #16]
1004879e:	2b00      	cmp	r3, #0
100487a0:	d102      	bne.n	100487a8 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
100487a2:	683b      	ldr	r3, [r7, #0]
100487a4:	60fb      	str	r3, [r7, #12]
100487a6:	e002      	b.n	100487ae <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
100487a8:	693b      	ldr	r3, [r7, #16]
100487aa:	683a      	ldr	r2, [r7, #0]
100487ac:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
100487ae:	68fb      	ldr	r3, [r7, #12]
}
100487b0:	0018      	movs	r0, r3
100487b2:	46bd      	mov	sp, r7
100487b4:	b006      	add	sp, #24
100487b6:	bd80      	pop	{r7, pc}

100487b8 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
100487b8:	b580      	push	{r7, lr}
100487ba:	b082      	sub	sp, #8
100487bc:	af00      	add	r7, sp, #0
100487be:	0002      	movs	r2, r0
100487c0:	1dfb      	adds	r3, r7, #7
100487c2:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
100487c4:	1dfb      	adds	r3, r7, #7
100487c6:	781b      	ldrb	r3, [r3, #0]
100487c8:	2b00      	cmp	r3, #0
100487ca:	d010      	beq.n	100487ee <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
100487cc:	4b0e      	ldr	r3, [pc, #56]	@ (10048808 <_virtualTimeBaseEnable+0x50>)
100487ce:	2290      	movs	r2, #144	@ 0x90
100487d0:	5c9b      	ldrb	r3, [r3, r2]
100487d2:	2201      	movs	r2, #1
100487d4:	4053      	eors	r3, r2
100487d6:	b2db      	uxtb	r3, r3
100487d8:	2b00      	cmp	r3, #0
100487da:	d010      	beq.n	100487fe <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
100487dc:	4b0b      	ldr	r3, [pc, #44]	@ (1004880c <_virtualTimeBaseEnable+0x54>)
100487de:	0018      	movs	r0, r3
100487e0:	f7ff fe58 	bl	10048494 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
100487e4:	4b08      	ldr	r3, [pc, #32]	@ (10048808 <_virtualTimeBaseEnable+0x50>)
100487e6:	2290      	movs	r2, #144	@ 0x90
100487e8:	2101      	movs	r1, #1
100487ea:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
100487ec:	e007      	b.n	100487fe <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
100487ee:	4b07      	ldr	r3, [pc, #28]	@ (1004880c <_virtualTimeBaseEnable+0x54>)
100487f0:	0018      	movs	r0, r3
100487f2:	f7ff fc23 	bl	1004803c <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
100487f6:	4b04      	ldr	r3, [pc, #16]	@ (10048808 <_virtualTimeBaseEnable+0x50>)
100487f8:	2290      	movs	r2, #144	@ 0x90
100487fa:	2100      	movs	r1, #0
100487fc:	5499      	strb	r1, [r3, r2]
}
100487fe:	46c0      	nop			@ (mov r8, r8)
10048800:	46bd      	mov	sp, r7
10048802:	b002      	add	sp, #8
10048804:	bd80      	pop	{r7, pc}
10048806:	46c0      	nop			@ (mov r8, r8)
10048808:	20000a10 	.word	0x20000a10
1004880c:	20000a50 	.word	0x20000a50

10048810 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10048810:	b580      	push	{r7, lr}
10048812:	b086      	sub	sp, #24
10048814:	af00      	add	r7, sp, #0
10048816:	6078      	str	r0, [r7, #4]
10048818:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004881a:	687b      	ldr	r3, [r7, #4]
1004881c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004881e:	2300      	movs	r3, #0
10048820:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
10048822:	687b      	ldr	r3, [r7, #4]
10048824:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
10048826:	e004      	b.n	10048832 <_remove_timer_in_queue+0x22>
  {
    prev = current;
10048828:	697b      	ldr	r3, [r7, #20]
1004882a:	613b      	str	r3, [r7, #16]
    current = current->next;
1004882c:	697b      	ldr	r3, [r7, #20]
1004882e:	691b      	ldr	r3, [r3, #16]
10048830:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
10048832:	697b      	ldr	r3, [r7, #20]
10048834:	2b00      	cmp	r3, #0
10048836:	d003      	beq.n	10048840 <_remove_timer_in_queue+0x30>
10048838:	697a      	ldr	r2, [r7, #20]
1004883a:	683b      	ldr	r3, [r7, #0]
1004883c:	429a      	cmp	r2, r3
1004883e:	d1f3      	bne.n	10048828 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
10048840:	697b      	ldr	r3, [r7, #20]
10048842:	2b00      	cmp	r3, #0
10048844:	d00b      	beq.n	1004885e <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
10048846:	697a      	ldr	r2, [r7, #20]
10048848:	687b      	ldr	r3, [r7, #4]
1004884a:	429a      	cmp	r2, r3
1004884c:	d103      	bne.n	10048856 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004884e:	697b      	ldr	r3, [r7, #20]
10048850:	691b      	ldr	r3, [r3, #16]
10048852:	60fb      	str	r3, [r7, #12]
10048854:	e003      	b.n	1004885e <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
10048856:	697b      	ldr	r3, [r7, #20]
10048858:	691a      	ldr	r2, [r3, #16]
1004885a:	693b      	ldr	r3, [r7, #16]
1004885c:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004885e:	68fb      	ldr	r3, [r7, #12]
}
10048860:	0018      	movs	r0, r3
10048862:	46bd      	mov	sp, r7
10048864:	b006      	add	sp, #24
10048866:	bd80      	pop	{r7, pc}

10048868 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
10048868:	b5b0      	push	{r4, r5, r7, lr}
1004886a:	b088      	sub	sp, #32
1004886c:	af00      	add	r7, sp, #0
1004886e:	6078      	str	r0, [r7, #4]
10048870:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
10048872:	687b      	ldr	r3, [r7, #4]
10048874:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
10048876:	2300      	movs	r3, #0
10048878:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004887a:	687b      	ldr	r3, [r7, #4]
1004887c:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004887e:	683b      	ldr	r3, [r7, #0]
10048880:	687a      	ldr	r2, [r7, #4]
10048882:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
10048884:	2300      	movs	r3, #0
10048886:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
10048888:	e021      	b.n	100488ce <_check_callbacks+0x66>
  {

    if (curr->active)
1004888a:	69fb      	ldr	r3, [r7, #28]
1004888c:	7b1b      	ldrb	r3, [r3, #12]
1004888e:	2b00      	cmp	r3, #0
10048890:	d015      	beq.n	100488be <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10048892:	69fb      	ldr	r3, [r7, #28]
10048894:	681c      	ldr	r4, [r3, #0]
10048896:	685d      	ldr	r5, [r3, #4]
10048898:	f7ff fba4 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004889c:	0002      	movs	r2, r0
1004889e:	000b      	movs	r3, r1
100488a0:	1aa4      	subs	r4, r4, r2
100488a2:	419d      	sbcs	r5, r3
100488a4:	0022      	movs	r2, r4
100488a6:	002b      	movs	r3, r5
100488a8:	60ba      	str	r2, [r7, #8]
100488aa:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
100488ac:	68fb      	ldr	r3, [r7, #12]
100488ae:	2b00      	cmp	r3, #0
100488b0:	dc11      	bgt.n	100488d6 <_check_callbacks+0x6e>
100488b2:	68fb      	ldr	r3, [r7, #12]
100488b4:	2b00      	cmp	r3, #0
100488b6:	d102      	bne.n	100488be <_check_callbacks+0x56>
100488b8:	68bb      	ldr	r3, [r7, #8]
100488ba:	2b05      	cmp	r3, #5
100488bc:	d80b      	bhi.n	100488d6 <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
100488be:	69fb      	ldr	r3, [r7, #28]
100488c0:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
100488c2:	69fb      	ldr	r3, [r7, #28]
100488c4:	691b      	ldr	r3, [r3, #16]
100488c6:	61fb      	str	r3, [r7, #28]
    expiredCount++;
100488c8:	693b      	ldr	r3, [r7, #16]
100488ca:	3301      	adds	r3, #1
100488cc:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
100488ce:	69fb      	ldr	r3, [r7, #28]
100488d0:	2b00      	cmp	r3, #0
100488d2:	d1da      	bne.n	1004888a <_check_callbacks+0x22>
100488d4:	e000      	b.n	100488d8 <_check_callbacks+0x70>
        break;
100488d6:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
100488d8:	693b      	ldr	r3, [r7, #16]
100488da:	2b00      	cmp	r3, #0
100488dc:	d005      	beq.n	100488ea <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
100488de:	69bb      	ldr	r3, [r7, #24]
100488e0:	2200      	movs	r2, #0
100488e2:	611a      	str	r2, [r3, #16]
    returnValue = curr;
100488e4:	69fb      	ldr	r3, [r7, #28]
100488e6:	617b      	str	r3, [r7, #20]
100488e8:	e002      	b.n	100488f0 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
100488ea:	683b      	ldr	r3, [r7, #0]
100488ec:	2200      	movs	r2, #0
100488ee:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
100488f0:	697b      	ldr	r3, [r7, #20]
}
100488f2:	0018      	movs	r0, r3
100488f4:	46bd      	mov	sp, r7
100488f6:	b008      	add	sp, #32
100488f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

100488fc <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
100488fc:	b580      	push	{r7, lr}
100488fe:	b084      	sub	sp, #16
10048900:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10048902:	4b17      	ldr	r3, [pc, #92]	@ (10048960 <_updateCalibrationData+0x64>)
10048904:	781b      	ldrb	r3, [r3, #0]
10048906:	2b00      	cmp	r3, #0
10048908:	d015      	beq.n	10048936 <_updateCalibrationData+0x3a>
  {
    _get_calibration_data(&RADIO_TIMER_Context.calibrationData);
1004890a:	4b16      	ldr	r3, [pc, #88]	@ (10048964 <_updateCalibrationData+0x68>)
1004890c:	0018      	movs	r0, r3
1004890e:	f7ff fc67 	bl	100481e0 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
10048912:	4b13      	ldr	r3, [pc, #76]	@ (10048960 <_updateCalibrationData+0x64>)
10048914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
10048916:	b29a      	uxth	r2, r3
10048918:	4b11      	ldr	r3, [pc, #68]	@ (10048960 <_updateCalibrationData+0x64>)
1004891a:	699b      	ldr	r3, [r3, #24]
1004891c:	0019      	movs	r1, r3
1004891e:	0010      	movs	r0, r2
10048920:	f7ff fd8a 	bl	10048438 <_update_xtal_startup_time>
    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
10048924:	4b0e      	ldr	r3, [pc, #56]	@ (10048960 <_updateCalibrationData+0x64>)
10048926:	2100      	movs	r1, #0
10048928:	0018      	movs	r0, r3
1004892a:	f7ff fcc1 	bl	100482b0 <_configureTxRxDelay>
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004892e:	4b0c      	ldr	r3, [pc, #48]	@ (10048960 <_updateCalibrationData+0x64>)
10048930:	2234      	movs	r2, #52	@ 0x34
10048932:	2101      	movs	r1, #1
10048934:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048936:	f3ef 8310 	mrs	r3, PRIMASK
1004893a:	607b      	str	r3, [r7, #4]
  return(result);
1004893c:	687b      	ldr	r3, [r7, #4]
  }
  ATOMIC_SECTION_BEGIN();
1004893e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10048940:	b672      	cpsid	i
}
10048942:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
10048944:	4b06      	ldr	r3, [pc, #24]	@ (10048960 <_updateCalibrationData+0x64>)
10048946:	0018      	movs	r0, r3
10048948:	f000 f80e 	bl	10048968 <_update_system_time>
1004894c:	68fb      	ldr	r3, [r7, #12]
1004894e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048950:	68bb      	ldr	r3, [r7, #8]
10048952:	f383 8810 	msr	PRIMASK, r3
}
10048956:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10048958:	46c0      	nop			@ (mov r8, r8)
1004895a:	46bd      	mov	sp, r7
1004895c:	b004      	add	sp, #16
1004895e:	bd80      	pop	{r7, pc}
10048960:	20000a10 	.word	0x20000a10
10048964:	20000a20 	.word	0x20000a20

10048968 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
10048968:	b5b0      	push	{r4, r5, r7, lr}
1004896a:	b088      	sub	sp, #32
1004896c:	af00      	add	r7, sp, #0
1004896e:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10048970:	4b2a      	ldr	r3, [pc, #168]	@ (10048a1c <_update_system_time+0xb4>)
10048972:	0018      	movs	r0, r3
10048974:	f7fe fe5f 	bl	10047636 <LL_RADIO_TIMER_GetAbsoluteTime>
10048978:	0003      	movs	r3, r0
1004897a:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
1004897c:	697b      	ldr	r3, [r7, #20]
1004897e:	6a1b      	ldr	r3, [r3, #32]
10048980:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
10048982:	697b      	ldr	r3, [r7, #20]
10048984:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
10048986:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
10048988:	697b      	ldr	r3, [r7, #20]
1004898a:	2280      	movs	r2, #128	@ 0x80
1004898c:	589b      	ldr	r3, [r3, r2]
1004898e:	69fa      	ldr	r2, [r7, #28]
10048990:	1ad3      	subs	r3, r2, r3
10048992:	4a23      	ldr	r2, [pc, #140]	@ (10048a20 <_update_system_time+0xb8>)
10048994:	69b9      	ldr	r1, [r7, #24]
10048996:	0018      	movs	r0, r3
10048998:	f7f7 fb92 	bl	100400c0 <blue_unit_conversion>
1004899c:	0003      	movs	r3, r0
1004899e:	60bb      	str	r3, [r7, #8]
100489a0:	2300      	movs	r3, #0
100489a2:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
100489a4:	68ba      	ldr	r2, [r7, #8]
100489a6:	68fb      	ldr	r3, [r7, #12]
100489a8:	1912      	adds	r2, r2, r4
100489aa:	416b      	adcs	r3, r5
100489ac:	6979      	ldr	r1, [r7, #20]
100489ae:	670a      	str	r2, [r1, #112]	@ 0x70
100489b0:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
100489b2:	697b      	ldr	r3, [r7, #20]
100489b4:	781b      	ldrb	r3, [r3, #0]
100489b6:	2b00      	cmp	r3, #0
100489b8:	d11d      	bne.n	100489f6 <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
100489ba:	697b      	ldr	r3, [r7, #20]
100489bc:	2280      	movs	r2, #128	@ 0x80
100489be:	589b      	ldr	r3, [r3, r2]
100489c0:	69fa      	ldr	r2, [r7, #28]
100489c2:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
100489c4:	697b      	ldr	r3, [r7, #20]
100489c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
100489c8:	429a      	cmp	r2, r3
100489ca:	d214      	bcs.n	100489f6 <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
100489cc:	4a14      	ldr	r2, [pc, #80]	@ (10048a20 <_update_system_time+0xb8>)
100489ce:	69b9      	ldr	r1, [r7, #24]
100489d0:	2301      	movs	r3, #1
100489d2:	425b      	negs	r3, r3
100489d4:	0018      	movs	r0, r3
100489d6:	f7f7 fb73 	bl	100400c0 <blue_unit_conversion>
100489da:	0001      	movs	r1, r0
100489dc:	697b      	ldr	r3, [r7, #20]
100489de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100489e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100489e2:	6039      	str	r1, [r7, #0]
100489e4:	2100      	movs	r1, #0
100489e6:	6079      	str	r1, [r7, #4]
100489e8:	6838      	ldr	r0, [r7, #0]
100489ea:	6879      	ldr	r1, [r7, #4]
100489ec:	1812      	adds	r2, r2, r0
100489ee:	414b      	adcs	r3, r1
100489f0:	6979      	ldr	r1, [r7, #20]
100489f2:	670a      	str	r2, [r1, #112]	@ 0x70
100489f4:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
100489f6:	697b      	ldr	r3, [r7, #20]
100489f8:	2180      	movs	r1, #128	@ 0x80
100489fa:	69fa      	ldr	r2, [r7, #28]
100489fc:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
100489fe:	697b      	ldr	r3, [r7, #20]
10048a00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
10048a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10048a04:	6979      	ldr	r1, [r7, #20]
10048a06:	628a      	str	r2, [r1, #40]	@ 0x28
10048a08:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
10048a0a:	697b      	ldr	r3, [r7, #20]
10048a0c:	69da      	ldr	r2, [r3, #28]
10048a0e:	697b      	ldr	r3, [r7, #20]
10048a10:	621a      	str	r2, [r3, #32]
}
10048a12:	46c0      	nop			@ (mov r8, r8)
10048a14:	46bd      	mov	sp, r7
10048a16:	b008      	add	sp, #32
10048a18:	bdb0      	pop	{r4, r5, r7, pc}
10048a1a:	46c0      	nop			@ (mov r8, r8)
10048a1c:	60001800 	.word	0x60001800
10048a20:	00000635 	.word	0x00000635

10048a24 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
10048a24:	b5b0      	push	{r4, r5, r7, lr}
10048a26:	b08a      	sub	sp, #40	@ 0x28
10048a28:	af00      	add	r7, sp, #0
10048a2a:	6078      	str	r0, [r7, #4]
10048a2c:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
10048a2e:	683b      	ldr	r3, [r7, #0]
10048a30:	2200      	movs	r2, #0
10048a32:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
10048a34:	687b      	ldr	r3, [r7, #4]
10048a36:	7a9b      	ldrb	r3, [r3, #10]
10048a38:	2b00      	cmp	r3, #0
10048a3a:	d100      	bne.n	10048a3e <_check_radio_activity+0x1a>
10048a3c:	e070      	b.n	10048b20 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10048a3e:	4b3a      	ldr	r3, [pc, #232]	@ (10048b28 <_check_radio_activity+0x104>)
10048a40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10048a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
10048a44:	4938      	ldr	r1, [pc, #224]	@ (10048b28 <_check_radio_activity+0x104>)
10048a46:	6849      	ldr	r1, [r1, #4]
10048a48:	000c      	movs	r4, r1
10048a4a:	2100      	movs	r1, #0
10048a4c:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10048a4e:	1912      	adds	r2, r2, r4
10048a50:	416b      	adcs	r3, r5
10048a52:	623a      	str	r2, [r7, #32]
10048a54:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048a56:	f3ef 8310 	mrs	r3, PRIMASK
10048a5a:	60fb      	str	r3, [r7, #12]
  return(result);
10048a5c:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
10048a5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10048a60:	b672      	cpsid	i
}
10048a62:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
10048a64:	f7ff fabe 	bl	10047fe4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10048a68:	0002      	movs	r2, r0
10048a6a:	000b      	movs	r3, r1
10048a6c:	613a      	str	r2, [r7, #16]
10048a6e:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10048a70:	687b      	ldr	r3, [r7, #4]
10048a72:	681a      	ldr	r2, [r3, #0]
10048a74:	685b      	ldr	r3, [r3, #4]
10048a76:	6a38      	ldr	r0, [r7, #32]
10048a78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10048a7a:	24c8      	movs	r4, #200	@ 0xc8
10048a7c:	02a4      	lsls	r4, r4, #10
10048a7e:	2500      	movs	r5, #0
10048a80:	1900      	adds	r0, r0, r4
10048a82:	4169      	adcs	r1, r5
10048a84:	4299      	cmp	r1, r3
10048a86:	d812      	bhi.n	10048aae <_check_radio_activity+0x8a>
10048a88:	d101      	bne.n	10048a8e <_check_radio_activity+0x6a>
10048a8a:	4290      	cmp	r0, r2
10048a8c:	d80f      	bhi.n	10048aae <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
10048a8e:	6a3a      	ldr	r2, [r7, #32]
10048a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048a92:	20b9      	movs	r0, #185	@ 0xb9
10048a94:	0040      	lsls	r0, r0, #1
10048a96:	2100      	movs	r1, #0
10048a98:	1812      	adds	r2, r2, r0
10048a9a:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10048a9c:	6979      	ldr	r1, [r7, #20]
10048a9e:	4299      	cmp	r1, r3
10048aa0:	d805      	bhi.n	10048aae <_check_radio_activity+0x8a>
10048aa2:	6979      	ldr	r1, [r7, #20]
10048aa4:	4299      	cmp	r1, r3
10048aa6:	d135      	bne.n	10048b14 <_check_radio_activity+0xf0>
10048aa8:	6939      	ldr	r1, [r7, #16]
10048aaa:	4291      	cmp	r1, r2
10048aac:	d932      	bls.n	10048b14 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
10048aae:	687b      	ldr	r3, [r7, #4]
10048ab0:	681a      	ldr	r2, [r3, #0]
10048ab2:	685b      	ldr	r3, [r3, #4]
10048ab4:	204c      	movs	r0, #76	@ 0x4c
10048ab6:	4240      	negs	r0, r0
10048ab8:	17c1      	asrs	r1, r0, #31
10048aba:	1880      	adds	r0, r0, r2
10048abc:	4159      	adcs	r1, r3
10048abe:	693a      	ldr	r2, [r7, #16]
10048ac0:	697b      	ldr	r3, [r7, #20]
10048ac2:	240a      	movs	r4, #10
10048ac4:	2500      	movs	r5, #0
10048ac6:	1912      	adds	r2, r2, r4
10048ac8:	416b      	adcs	r3, r5
10048aca:	4299      	cmp	r1, r3
10048acc:	d802      	bhi.n	10048ad4 <_check_radio_activity+0xb0>
10048ace:	d11a      	bne.n	10048b06 <_check_radio_activity+0xe2>
10048ad0:	4290      	cmp	r0, r2
10048ad2:	d918      	bls.n	10048b06 <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
10048ad4:	687b      	ldr	r3, [r7, #4]
10048ad6:	681a      	ldr	r2, [r3, #0]
10048ad8:	685b      	ldr	r3, [r3, #4]
10048ada:	0010      	movs	r0, r2
10048adc:	687b      	ldr	r3, [r7, #4]
10048ade:	7b19      	ldrb	r1, [r3, #12]
10048ae0:	687b      	ldr	r3, [r7, #4]
10048ae2:	7a1b      	ldrb	r3, [r3, #8]
10048ae4:	001a      	movs	r2, r3
10048ae6:	f000 f821 	bl	10048b2c <TIMER_SetRadioTimerValue>
10048aea:	0003      	movs	r3, r0
10048aec:	001a      	movs	r2, r3
10048aee:	683b      	ldr	r3, [r7, #0]
10048af0:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
10048af2:	687b      	ldr	r3, [r7, #4]
10048af4:	2200      	movs	r2, #0
10048af6:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10048af8:	687b      	ldr	r3, [r7, #4]
10048afa:	2201      	movs	r2, #1
10048afc:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
10048afe:	687b      	ldr	r3, [r7, #4]
10048b00:	2201      	movs	r2, #1
10048b02:	72da      	strb	r2, [r3, #11]
10048b04:	e006      	b.n	10048b14 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
10048b06:	4b08      	ldr	r3, [pc, #32]	@ (10048b28 <_check_radio_activity+0x104>)
10048b08:	2262      	movs	r2, #98	@ 0x62
10048b0a:	2100      	movs	r1, #0
10048b0c:	5499      	strb	r1, [r3, r2]
        *expired = 1;
10048b0e:	683b      	ldr	r3, [r7, #0]
10048b10:	2201      	movs	r2, #1
10048b12:	701a      	strb	r2, [r3, #0]
10048b14:	69fb      	ldr	r3, [r7, #28]
10048b16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048b18:	68bb      	ldr	r3, [r7, #8]
10048b1a:	f383 8810 	msr	PRIMASK, r3
}
10048b1e:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
10048b20:	46c0      	nop			@ (mov r8, r8)
10048b22:	46bd      	mov	sp, r7
10048b24:	b00a      	add	sp, #40	@ 0x28
10048b26:	bdb0      	pop	{r4, r5, r7, pc}
10048b28:	20000a10 	.word	0x20000a10

10048b2c <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
10048b2c:	b580      	push	{r7, lr}
10048b2e:	b08a      	sub	sp, #40	@ 0x28
10048b30:	af00      	add	r7, sp, #0
10048b32:	6078      	str	r0, [r7, #4]
10048b34:	0008      	movs	r0, r1
10048b36:	0011      	movs	r1, r2
10048b38:	1cfb      	adds	r3, r7, #3
10048b3a:	1c02      	adds	r2, r0, #0
10048b3c:	701a      	strb	r2, [r3, #0]
10048b3e:	1cbb      	adds	r3, r7, #2
10048b40:	1c0a      	adds	r2, r1, #0
10048b42:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
10048b44:	1cfb      	adds	r3, r7, #3
10048b46:	781b      	ldrb	r3, [r3, #0]
10048b48:	2b00      	cmp	r3, #0
10048b4a:	d015      	beq.n	10048b78 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
10048b4c:	1cbb      	adds	r3, r7, #2
10048b4e:	781b      	ldrb	r3, [r3, #0]
10048b50:	2b00      	cmp	r3, #0
10048b52:	d008      	beq.n	10048b66 <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
10048b54:	4b67      	ldr	r3, [pc, #412]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048b56:	2238      	movs	r2, #56	@ 0x38
10048b58:	5c9b      	ldrb	r3, [r3, r2]
10048b5a:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10048b5c:	4b65      	ldr	r3, [pc, #404]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048b5e:	223c      	movs	r2, #60	@ 0x3c
10048b60:	5c9b      	ldrb	r3, [r3, r2]
10048b62:	61fb      	str	r3, [r7, #28]
10048b64:	e01d      	b.n	10048ba2 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
10048b66:	4b63      	ldr	r3, [pc, #396]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048b68:	2239      	movs	r2, #57	@ 0x39
10048b6a:	5c9b      	ldrb	r3, [r3, r2]
10048b6c:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10048b6e:	4b61      	ldr	r3, [pc, #388]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048b70:	223c      	movs	r2, #60	@ 0x3c
10048b72:	5c9b      	ldrb	r3, [r3, r2]
10048b74:	61fb      	str	r3, [r7, #28]
10048b76:	e014      	b.n	10048ba2 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
10048b78:	1cbb      	adds	r3, r7, #2
10048b7a:	781b      	ldrb	r3, [r3, #0]
10048b7c:	2b00      	cmp	r3, #0
10048b7e:	d008      	beq.n	10048b92 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
10048b80:	4b5c      	ldr	r3, [pc, #368]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048b82:	223a      	movs	r2, #58	@ 0x3a
10048b84:	5c9b      	ldrb	r3, [r3, r2]
10048b86:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10048b88:	4b5a      	ldr	r3, [pc, #360]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048b8a:	223c      	movs	r2, #60	@ 0x3c
10048b8c:	5c9b      	ldrb	r3, [r3, r2]
10048b8e:	61fb      	str	r3, [r7, #28]
10048b90:	e007      	b.n	10048ba2 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
10048b92:	4b58      	ldr	r3, [pc, #352]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048b94:	223b      	movs	r2, #59	@ 0x3b
10048b96:	5c9b      	ldrb	r3, [r3, r2]
10048b98:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10048b9a:	4b56      	ldr	r3, [pc, #344]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048b9c:	223c      	movs	r2, #60	@ 0x3c
10048b9e:	5c9b      	ldrb	r3, [r3, r2]
10048ba0:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
10048ba2:	230c      	movs	r3, #12
10048ba4:	18fa      	adds	r2, r7, r3
10048ba6:	4b53      	ldr	r3, [pc, #332]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048ba8:	0011      	movs	r1, r2
10048baa:	0018      	movs	r0, r3
10048bac:	f7ff fce4 	bl	10048578 <_get_system_time_and_machine>
10048bb0:	0002      	movs	r2, r0
10048bb2:	000b      	movs	r3, r1
10048bb4:	687b      	ldr	r3, [r7, #4]
10048bb6:	1a9b      	subs	r3, r3, r2
10048bb8:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10048bba:	4b4e      	ldr	r3, [pc, #312]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048bbc:	699b      	ldr	r3, [r3, #24]
10048bbe:	0019      	movs	r1, r3
10048bc0:	4a4d      	ldr	r2, [pc, #308]	@ (10048cf8 <TIMER_SetRadioTimerValue+0x1cc>)
10048bc2:	697b      	ldr	r3, [r7, #20]
10048bc4:	0018      	movs	r0, r3
10048bc6:	f7f7 fa7b 	bl	100400c0 <blue_unit_conversion>
10048bca:	0003      	movs	r3, r0
10048bcc:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
10048bce:	4b49      	ldr	r3, [pc, #292]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048bd0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
10048bd2:	69fb      	ldr	r3, [r7, #28]
10048bd4:	18d3      	adds	r3, r2, r3
10048bd6:	33c8      	adds	r3, #200	@ 0xc8
10048bd8:	697a      	ldr	r2, [r7, #20]
10048bda:	429a      	cmp	r2, r3
10048bdc:	d92f      	bls.n	10048c3e <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
10048bde:	4b47      	ldr	r3, [pc, #284]	@ (10048cfc <TIMER_SetRadioTimerValue+0x1d0>)
10048be0:	795b      	ldrb	r3, [r3, #5]
10048be2:	b2db      	uxtb	r3, r3
10048be4:	001a      	movs	r2, r3
10048be6:	693b      	ldr	r3, [r7, #16]
10048be8:	1a9a      	subs	r2, r3, r2
10048bea:	6a3b      	ldr	r3, [r7, #32]
10048bec:	1ad3      	subs	r3, r2, r3
10048bee:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10048bf0:	68fa      	ldr	r2, [r7, #12]
10048bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048bf4:	18d3      	adds	r3, r2, r3
10048bf6:	4a42      	ldr	r2, [pc, #264]	@ (10048d00 <TIMER_SetRadioTimerValue+0x1d4>)
10048bf8:	0019      	movs	r1, r3
10048bfa:	0010      	movs	r0, r2
10048bfc:	f7fe fcf9 	bl	100475f2 <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10048c00:	4b3f      	ldr	r3, [pc, #252]	@ (10048d00 <TIMER_SetRadioTimerValue+0x1d4>)
10048c02:	2100      	movs	r1, #0
10048c04:	0018      	movs	r0, r3
10048c06:	f7fe fd2f 	bl	10047668 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10048c0a:	23c0      	movs	r3, #192	@ 0xc0
10048c0c:	05db      	lsls	r3, r3, #23
10048c0e:	0018      	movs	r0, r3
10048c10:	f7fe fc36 	bl	10047480 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10048c14:	23c0      	movs	r3, #192	@ 0xc0
10048c16:	05db      	lsls	r3, r3, #23
10048c18:	0018      	movs	r0, r3
10048c1a:	f7fe fc51 	bl	100474c0 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10048c1e:	4b38      	ldr	r3, [pc, #224]	@ (10048d00 <TIMER_SetRadioTimerValue+0x1d4>)
10048c20:	0018      	movs	r0, r3
10048c22:	f7fe fc83 	bl	1004752c <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10048c26:	4b36      	ldr	r3, [pc, #216]	@ (10048d00 <TIMER_SetRadioTimerValue+0x1d4>)
10048c28:	0018      	movs	r0, r3
10048c2a:	f7fe fd0e 	bl	1004764a <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10048c2e:	4b33      	ldr	r3, [pc, #204]	@ (10048cfc <TIMER_SetRadioTimerValue+0x1d0>)
10048c30:	795b      	ldrb	r3, [r3, #5]
10048c32:	b2db      	uxtb	r3, r3
10048c34:	001a      	movs	r2, r3
10048c36:	6a3b      	ldr	r3, [r7, #32]
10048c38:	189b      	adds	r3, r3, r2
10048c3a:	623b      	str	r3, [r7, #32]
10048c3c:	e021      	b.n	10048c82 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10048c3e:	4b2d      	ldr	r3, [pc, #180]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048c40:	223d      	movs	r2, #61	@ 0x3d
10048c42:	5c9b      	ldrb	r3, [r3, r2]
10048c44:	001a      	movs	r2, r3
10048c46:	693b      	ldr	r3, [r7, #16]
10048c48:	1a9a      	subs	r2, r3, r2
10048c4a:	6a3b      	ldr	r3, [r7, #32]
10048c4c:	1ad3      	subs	r3, r2, r3
10048c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10048c50:	68fa      	ldr	r2, [r7, #12]
10048c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048c54:	18d2      	adds	r2, r2, r3
10048c56:	23c0      	movs	r3, #192	@ 0xc0
10048c58:	05db      	lsls	r3, r3, #23
10048c5a:	0011      	movs	r1, r2
10048c5c:	0018      	movs	r0, r3
10048c5e:	f7fe fc4f 	bl	10047500 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10048c62:	4b27      	ldr	r3, [pc, #156]	@ (10048d00 <TIMER_SetRadioTimerValue+0x1d4>)
10048c64:	0018      	movs	r0, r3
10048c66:	f7fe fc71 	bl	1004754c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
10048c6a:	23c0      	movs	r3, #192	@ 0xc0
10048c6c:	05db      	lsls	r3, r3, #23
10048c6e:	0018      	movs	r0, r3
10048c70:	f7fe fbf6 	bl	10047460 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
10048c74:	4b1f      	ldr	r3, [pc, #124]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048c76:	223d      	movs	r2, #61	@ 0x3d
10048c78:	5c9b      	ldrb	r3, [r3, r2]
10048c7a:	001a      	movs	r2, r3
10048c7c:	6a3b      	ldr	r3, [r7, #32]
10048c7e:	189b      	adds	r3, r3, r2
10048c80:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
10048c82:	68fa      	ldr	r2, [r7, #12]
10048c84:	693b      	ldr	r3, [r7, #16]
10048c86:	18d2      	adds	r2, r2, r3
10048c88:	4b1a      	ldr	r3, [pc, #104]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048c8a:	2188      	movs	r1, #136	@ 0x88
10048c8c:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
10048c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10048c90:	6a3b      	ldr	r3, [r7, #32]
10048c92:	18d2      	adds	r2, r2, r3
10048c94:	6a3b      	ldr	r3, [r7, #32]
10048c96:	3305      	adds	r3, #5
10048c98:	429a      	cmp	r2, r3
10048c9a:	d212      	bcs.n	10048cc2 <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10048c9c:	23c0      	movs	r3, #192	@ 0xc0
10048c9e:	05db      	lsls	r3, r3, #23
10048ca0:	0018      	movs	r0, r3
10048ca2:	f7fe fbed 	bl	10047480 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10048ca6:	23c0      	movs	r3, #192	@ 0xc0
10048ca8:	05db      	lsls	r3, r3, #23
10048caa:	0018      	movs	r0, r3
10048cac:	f7fe fc08 	bl	100474c0 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10048cb0:	4b13      	ldr	r3, [pc, #76]	@ (10048d00 <TIMER_SetRadioTimerValue+0x1d4>)
10048cb2:	0018      	movs	r0, r3
10048cb4:	f7fe fc4a 	bl	1004754c <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
10048cb8:	231b      	movs	r3, #27
10048cba:	18fb      	adds	r3, r7, r3
10048cbc:	2201      	movs	r2, #1
10048cbe:	701a      	strb	r2, [r3, #0]
10048cc0:	e010      	b.n	10048ce4 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10048cc2:	4b0c      	ldr	r3, [pc, #48]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048cc4:	69db      	ldr	r3, [r3, #28]
10048cc6:	0019      	movs	r1, r3
10048cc8:	4a0e      	ldr	r2, [pc, #56]	@ (10048d04 <TIMER_SetRadioTimerValue+0x1d8>)
10048cca:	6a3b      	ldr	r3, [r7, #32]
10048ccc:	0018      	movs	r0, r3
10048cce:	f7f7 f9f7 	bl	100400c0 <blue_unit_conversion>
10048cd2:	0003      	movs	r3, r0
10048cd4:	b2d9      	uxtb	r1, r3
10048cd6:	4b07      	ldr	r3, [pc, #28]	@ (10048cf4 <TIMER_SetRadioTimerValue+0x1c8>)
10048cd8:	2284      	movs	r2, #132	@ 0x84
10048cda:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
10048cdc:	231b      	movs	r3, #27
10048cde:	18fb      	adds	r3, r7, r3
10048ce0:	2200      	movs	r2, #0
10048ce2:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
10048ce4:	231b      	movs	r3, #27
10048ce6:	18fb      	adds	r3, r7, r3
10048ce8:	781b      	ldrb	r3, [r3, #0]
}
10048cea:	0018      	movs	r0, r3
10048cec:	46bd      	mov	sp, r7
10048cee:	b00a      	add	sp, #40	@ 0x28
10048cf0:	bd80      	pop	{r7, pc}
10048cf2:	46c0      	nop			@ (mov r8, r8)
10048cf4:	20000a10 	.word	0x20000a10
10048cf8:	00000326 	.word	0x00000326
10048cfc:	200000c0 	.word	0x200000c0
10048d00:	60001800 	.word	0x60001800
10048d04:	00000635 	.word	0x00000635

10048d08 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10048d08:	b5b0      	push	{r4, r5, r7, lr}
10048d0a:	b084      	sub	sp, #16
10048d0c:	af00      	add	r7, sp, #0
10048d0e:	6078      	str	r0, [r7, #4]
10048d10:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10048d12:	2308      	movs	r3, #8
10048d14:	18fa      	adds	r2, r7, r3
10048d16:	4b12      	ldr	r3, [pc, #72]	@ (10048d60 <TIMER_GetPastSysTime+0x58>)
10048d18:	0011      	movs	r1, r2
10048d1a:	0018      	movs	r0, r3
10048d1c:	f7ff fc2c 	bl	10048578 <_get_system_time_and_machine>
10048d20:	0002      	movs	r2, r0
10048d22:	000b      	movs	r3, r1
10048d24:	6839      	ldr	r1, [r7, #0]
10048d26:	600a      	str	r2, [r1, #0]
10048d28:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10048d2a:	68ba      	ldr	r2, [r7, #8]
10048d2c:	687b      	ldr	r3, [r7, #4]
10048d2e:	1ad0      	subs	r0, r2, r3
10048d30:	4b0b      	ldr	r3, [pc, #44]	@ (10048d60 <TIMER_GetPastSysTime+0x58>)
10048d32:	69db      	ldr	r3, [r3, #28]
10048d34:	0019      	movs	r1, r3
10048d36:	4b0b      	ldr	r3, [pc, #44]	@ (10048d64 <TIMER_GetPastSysTime+0x5c>)
10048d38:	001a      	movs	r2, r3
10048d3a:	f7f7 f9c1 	bl	100400c0 <blue_unit_conversion>
10048d3e:	0003      	movs	r3, r0
10048d40:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
10048d42:	683b      	ldr	r3, [r7, #0]
10048d44:	681a      	ldr	r2, [r3, #0]
10048d46:	685b      	ldr	r3, [r3, #4]
10048d48:	68f9      	ldr	r1, [r7, #12]
10048d4a:	000c      	movs	r4, r1
10048d4c:	2100      	movs	r1, #0
10048d4e:	000d      	movs	r5, r1
10048d50:	1b12      	subs	r2, r2, r4
10048d52:	41ab      	sbcs	r3, r5
}
10048d54:	0010      	movs	r0, r2
10048d56:	0019      	movs	r1, r3
10048d58:	46bd      	mov	sp, r7
10048d5a:	b004      	add	sp, #16
10048d5c:	bdb0      	pop	{r4, r5, r7, pc}
10048d5e:	46c0      	nop			@ (mov r8, r8)
10048d60:	20000a10 	.word	0x20000a10
10048d64:	00000635 	.word	0x00000635

10048d68 <TIMER_SleepCheck>:
  * @brief  Return the consensus of the Virtual timer management to go in sleep.
  * @retval TRUE if all vtimers have been served and the calibration procedure has already finished.
  * @retval FALSE if the vtimer Tick is still busy.
  */
static bool TIMER_SleepCheck(void)
{
10048d68:	b580      	push	{r7, lr}
10048d6a:	af00      	add	r7, sp, #0
  return ((RADIO_TIMER_Context.expired_count == RADIO_TIMER_Context.served_count) && (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE));
10048d6c:	4b0c      	ldr	r3, [pc, #48]	@ (10048da0 <TIMER_SleepCheck+0x38>)
10048d6e:	2291      	movs	r2, #145	@ 0x91
10048d70:	5c9a      	ldrb	r2, [r3, r2]
10048d72:	4b0b      	ldr	r3, [pc, #44]	@ (10048da0 <TIMER_SleepCheck+0x38>)
10048d74:	2192      	movs	r1, #146	@ 0x92
10048d76:	5c5b      	ldrb	r3, [r3, r1]
10048d78:	429a      	cmp	r2, r3
10048d7a:	d108      	bne.n	10048d8e <TIMER_SleepCheck+0x26>
10048d7c:	4b08      	ldr	r3, [pc, #32]	@ (10048da0 <TIMER_SleepCheck+0x38>)
10048d7e:	7a1b      	ldrb	r3, [r3, #8]
10048d80:	2201      	movs	r2, #1
10048d82:	4053      	eors	r3, r2
10048d84:	b2db      	uxtb	r3, r3
10048d86:	2b00      	cmp	r3, #0
10048d88:	d001      	beq.n	10048d8e <TIMER_SleepCheck+0x26>
10048d8a:	2301      	movs	r3, #1
10048d8c:	e000      	b.n	10048d90 <TIMER_SleepCheck+0x28>
10048d8e:	2300      	movs	r3, #0
10048d90:	1c1a      	adds	r2, r3, #0
10048d92:	2301      	movs	r3, #1
10048d94:	4013      	ands	r3, r2
10048d96:	b2db      	uxtb	r3, r3
}
10048d98:	0018      	movs	r0, r3
10048d9a:	46bd      	mov	sp, r7
10048d9c:	bd80      	pop	{r7, pc}
10048d9e:	46c0      	nop			@ (mov r8, r8)
10048da0:	20000a10 	.word	0x20000a10

10048da4 <TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
static uint8_t TIMER_GetRadioTimerValue(uint32_t *time)
{
10048da4:	b580      	push	{r7, lr}
10048da6:	b082      	sub	sp, #8
10048da8:	af00      	add	r7, sp, #0
10048daa:	6078      	str	r0, [r7, #4]
  if (LL_RADIO_TIMER_IsEnabledBLEWakeupTimer(WAKEUP))
10048dac:	4b1a      	ldr	r3, [pc, #104]	@ (10048e18 <TIMER_GetRadioTimerValue+0x74>)
10048dae:	0018      	movs	r0, r3
10048db0:	f7fe fbdc 	bl	1004756c <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>
10048db4:	1e03      	subs	r3, r0, #0
10048db6:	d008      	beq.n	10048dca <TIMER_GetRadioTimerValue+0x26>
  {
    *time = LL_RADIO_TIMER_GetBLEWakeupTime(WAKEUP);
10048db8:	4b17      	ldr	r3, [pc, #92]	@ (10048e18 <TIMER_GetRadioTimerValue+0x74>)
10048dba:	0018      	movs	r0, r3
10048dbc:	f7fe fc25 	bl	1004760a <LL_RADIO_TIMER_GetBLEWakeupTime>
10048dc0:	0002      	movs	r2, r0
10048dc2:	687b      	ldr	r3, [r7, #4]
10048dc4:	601a      	str	r2, [r3, #0]
    return WAKEUP_RADIO_TIMER_BUSY;
10048dc6:	2303      	movs	r3, #3
10048dc8:	e022      	b.n	10048e10 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer1(BLUE))
10048dca:	23c0      	movs	r3, #192	@ 0xc0
10048dcc:	05db      	lsls	r3, r3, #23
10048dce:	0018      	movs	r0, r3
10048dd0:	f7fe fb65 	bl	1004749e <LL_RADIO_TIMER_IsEnabledTimer1>
10048dd4:	1e03      	subs	r3, r0, #0
10048dd6:	d009      	beq.n	10048dec <TIMER_GetRadioTimerValue+0x48>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10048dd8:	23c0      	movs	r3, #192	@ 0xc0
10048dda:	05db      	lsls	r3, r3, #23
10048ddc:	0018      	movs	r0, r3
10048dde:	f7fe fb9b 	bl	10047518 <LL_RADIO_TIMER_GetTimeout>
10048de2:	0002      	movs	r2, r0
10048de4:	687b      	ldr	r3, [r7, #4]
10048de6:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER1_BUSY;
10048de8:	2301      	movs	r3, #1
10048dea:	e011      	b.n	10048e10 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer2(BLUE))
10048dec:	23c0      	movs	r3, #192	@ 0xc0
10048dee:	05db      	lsls	r3, r3, #23
10048df0:	0018      	movs	r0, r3
10048df2:	f7fe fb74 	bl	100474de <LL_RADIO_TIMER_IsEnabledTimer2>
10048df6:	1e03      	subs	r3, r0, #0
10048df8:	d009      	beq.n	10048e0e <TIMER_GetRadioTimerValue+0x6a>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10048dfa:	23c0      	movs	r3, #192	@ 0xc0
10048dfc:	05db      	lsls	r3, r3, #23
10048dfe:	0018      	movs	r0, r3
10048e00:	f7fe fb8a 	bl	10047518 <LL_RADIO_TIMER_GetTimeout>
10048e04:	0002      	movs	r2, r0
10048e06:	687b      	ldr	r3, [r7, #4]
10048e08:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER2_BUSY;
10048e0a:	2302      	movs	r3, #2
10048e0c:	e000      	b.n	10048e10 <TIMER_GetRadioTimerValue+0x6c>
  }
  else
  {
    return 0;
10048e0e:	2300      	movs	r3, #0
  }
}
10048e10:	0018      	movs	r0, r3
10048e12:	46bd      	mov	sp, r7
10048e14:	b002      	add	sp, #8
10048e16:	bd80      	pop	{r7, pc}
10048e18:	60001800 	.word	0x60001800

10048e1c <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10048e1c:	b580      	push	{r7, lr}
10048e1e:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
10048e20:	f7ff f964 	bl	100480ec <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
10048e24:	f7f8 fc40 	bl	100416a8 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
10048e28:	46c0      	nop			@ (mov r8, r8)
10048e2a:	46bd      	mov	sp, r7
10048e2c:	bd80      	pop	{r7, pc}

10048e2e <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
10048e2e:	b580      	push	{r7, lr}
10048e30:	b082      	sub	sp, #8
10048e32:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
10048e34:	2300      	movs	r3, #0
10048e36:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
10048e38:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
10048e3a:	23c0      	movs	r3, #192	@ 0xc0
10048e3c:	05db      	lsls	r3, r3, #23
10048e3e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
10048e40:	23c0      	movs	r3, #192	@ 0xc0
10048e42:	05db      	lsls	r3, r3, #23
10048e44:	2101      	movs	r1, #1
10048e46:	430a      	orrs	r2, r1
10048e48:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10048e4a:	23c0      	movs	r3, #192	@ 0xc0
10048e4c:	05db      	lsls	r3, r3, #23
10048e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10048e50:	607b      	str	r3, [r7, #4]
}
10048e52:	46c0      	nop			@ (mov r8, r8)
10048e54:	46bd      	mov	sp, r7
10048e56:	b002      	add	sp, #8
10048e58:	bd80      	pop	{r7, pc}
	...

10048e5c <LL_PWR_SetNoPullB>:
{
10048e5c:	b580      	push	{r7, lr}
10048e5e:	b082      	sub	sp, #8
10048e60:	af00      	add	r7, sp, #0
10048e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10048e64:	4b08      	ldr	r3, [pc, #32]	@ (10048e88 <LL_PWR_SetNoPullB+0x2c>)
10048e66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10048e68:	687b      	ldr	r3, [r7, #4]
10048e6a:	43d9      	mvns	r1, r3
10048e6c:	4b06      	ldr	r3, [pc, #24]	@ (10048e88 <LL_PWR_SetNoPullB+0x2c>)
10048e6e:	400a      	ands	r2, r1
10048e70:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10048e72:	4b05      	ldr	r3, [pc, #20]	@ (10048e88 <LL_PWR_SetNoPullB+0x2c>)
10048e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048e76:	687b      	ldr	r3, [r7, #4]
10048e78:	43d9      	mvns	r1, r3
10048e7a:	4b03      	ldr	r3, [pc, #12]	@ (10048e88 <LL_PWR_SetNoPullB+0x2c>)
10048e7c:	400a      	ands	r2, r1
10048e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10048e80:	46c0      	nop			@ (mov r8, r8)
10048e82:	46bd      	mov	sp, r7
10048e84:	b002      	add	sp, #8
10048e86:	bd80      	pop	{r7, pc}
10048e88:	48500000 	.word	0x48500000

10048e8c <LL_RCC_HSE_Enable>:
{
10048e8c:	b580      	push	{r7, lr}
10048e8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
10048e90:	4b04      	ldr	r3, [pc, #16]	@ (10048ea4 <LL_RCC_HSE_Enable+0x18>)
10048e92:	681a      	ldr	r2, [r3, #0]
10048e94:	4b03      	ldr	r3, [pc, #12]	@ (10048ea4 <LL_RCC_HSE_Enable+0x18>)
10048e96:	2180      	movs	r1, #128	@ 0x80
10048e98:	0249      	lsls	r1, r1, #9
10048e9a:	430a      	orrs	r2, r1
10048e9c:	601a      	str	r2, [r3, #0]
}
10048e9e:	46c0      	nop			@ (mov r8, r8)
10048ea0:	46bd      	mov	sp, r7
10048ea2:	bd80      	pop	{r7, pc}
10048ea4:	48400000 	.word	0x48400000

10048ea8 <LL_RCC_HSE_Disable>:
{
10048ea8:	b580      	push	{r7, lr}
10048eaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10048eac:	4b04      	ldr	r3, [pc, #16]	@ (10048ec0 <LL_RCC_HSE_Disable+0x18>)
10048eae:	681a      	ldr	r2, [r3, #0]
10048eb0:	4b03      	ldr	r3, [pc, #12]	@ (10048ec0 <LL_RCC_HSE_Disable+0x18>)
10048eb2:	4904      	ldr	r1, [pc, #16]	@ (10048ec4 <LL_RCC_HSE_Disable+0x1c>)
10048eb4:	400a      	ands	r2, r1
10048eb6:	601a      	str	r2, [r3, #0]
}
10048eb8:	46c0      	nop			@ (mov r8, r8)
10048eba:	46bd      	mov	sp, r7
10048ebc:	bd80      	pop	{r7, pc}
10048ebe:	46c0      	nop			@ (mov r8, r8)
10048ec0:	48400000 	.word	0x48400000
10048ec4:	fffeffff 	.word	0xfffeffff

10048ec8 <LL_RCC_HSE_IsReady>:
{
10048ec8:	b580      	push	{r7, lr}
10048eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10048ecc:	4b07      	ldr	r3, [pc, #28]	@ (10048eec <LL_RCC_HSE_IsReady+0x24>)
10048ece:	681a      	ldr	r2, [r3, #0]
10048ed0:	2380      	movs	r3, #128	@ 0x80
10048ed2:	029b      	lsls	r3, r3, #10
10048ed4:	401a      	ands	r2, r3
10048ed6:	2380      	movs	r3, #128	@ 0x80
10048ed8:	029b      	lsls	r3, r3, #10
10048eda:	429a      	cmp	r2, r3
10048edc:	d101      	bne.n	10048ee2 <LL_RCC_HSE_IsReady+0x1a>
10048ede:	2301      	movs	r3, #1
10048ee0:	e000      	b.n	10048ee4 <LL_RCC_HSE_IsReady+0x1c>
10048ee2:	2300      	movs	r3, #0
}
10048ee4:	0018      	movs	r0, r3
10048ee6:	46bd      	mov	sp, r7
10048ee8:	bd80      	pop	{r7, pc}
10048eea:	46c0      	nop			@ (mov r8, r8)
10048eec:	48400000 	.word	0x48400000

10048ef0 <LL_RCC_HSE_SetCapacitorTuning>:
{
10048ef0:	b580      	push	{r7, lr}
10048ef2:	b082      	sub	sp, #8
10048ef4:	af00      	add	r7, sp, #0
10048ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
10048ef8:	4a0b      	ldr	r2, [pc, #44]	@ (10048f28 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048efa:	2398      	movs	r3, #152	@ 0x98
10048efc:	58d3      	ldr	r3, [r2, r3]
10048efe:	4a0b      	ldr	r2, [pc, #44]	@ (10048f2c <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
10048f00:	401a      	ands	r2, r3
10048f02:	687b      	ldr	r3, [r7, #4]
10048f04:	021b      	lsls	r3, r3, #8
10048f06:	4908      	ldr	r1, [pc, #32]	@ (10048f28 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048f08:	4313      	orrs	r3, r2
10048f0a:	2298      	movs	r2, #152	@ 0x98
10048f0c:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
10048f0e:	4a06      	ldr	r2, [pc, #24]	@ (10048f28 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048f10:	2398      	movs	r3, #152	@ 0x98
10048f12:	58d3      	ldr	r3, [r2, r3]
10048f14:	4904      	ldr	r1, [pc, #16]	@ (10048f28 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048f16:	2280      	movs	r2, #128	@ 0x80
10048f18:	4313      	orrs	r3, r2
10048f1a:	2298      	movs	r2, #152	@ 0x98
10048f1c:	508b      	str	r3, [r1, r2]
}
10048f1e:	46c0      	nop			@ (mov r8, r8)
10048f20:	46bd      	mov	sp, r7
10048f22:	b002      	add	sp, #8
10048f24:	bd80      	pop	{r7, pc}
10048f26:	46c0      	nop			@ (mov r8, r8)
10048f28:	48400000 	.word	0x48400000
10048f2c:	ffffc0ff 	.word	0xffffc0ff

10048f30 <LL_RCC_HSE_SetCurrentControl>:
{
10048f30:	b580      	push	{r7, lr}
10048f32:	b082      	sub	sp, #8
10048f34:	af00      	add	r7, sp, #0
10048f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
10048f38:	4a07      	ldr	r2, [pc, #28]	@ (10048f58 <LL_RCC_HSE_SetCurrentControl+0x28>)
10048f3a:	2398      	movs	r3, #152	@ 0x98
10048f3c:	58d3      	ldr	r3, [r2, r3]
10048f3e:	2270      	movs	r2, #112	@ 0x70
10048f40:	4393      	bics	r3, r2
10048f42:	001a      	movs	r2, r3
10048f44:	4904      	ldr	r1, [pc, #16]	@ (10048f58 <LL_RCC_HSE_SetCurrentControl+0x28>)
10048f46:	687b      	ldr	r3, [r7, #4]
10048f48:	4313      	orrs	r3, r2
10048f4a:	2298      	movs	r2, #152	@ 0x98
10048f4c:	508b      	str	r3, [r1, r2]
}
10048f4e:	46c0      	nop			@ (mov r8, r8)
10048f50:	46bd      	mov	sp, r7
10048f52:	b002      	add	sp, #8
10048f54:	bd80      	pop	{r7, pc}
10048f56:	46c0      	nop			@ (mov r8, r8)
10048f58:	48400000 	.word	0x48400000

10048f5c <LL_RCC_HSI_Enable>:
{
10048f5c:	b580      	push	{r7, lr}
10048f5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10048f60:	4b07      	ldr	r3, [pc, #28]	@ (10048f80 <LL_RCC_HSI_Enable+0x24>)
10048f62:	689a      	ldr	r2, [r3, #8]
10048f64:	4b06      	ldr	r3, [pc, #24]	@ (10048f80 <LL_RCC_HSI_Enable+0x24>)
10048f66:	2104      	movs	r1, #4
10048f68:	438a      	bics	r2, r1
10048f6a:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048f6c:	4b04      	ldr	r3, [pc, #16]	@ (10048f80 <LL_RCC_HSI_Enable+0x24>)
10048f6e:	689a      	ldr	r2, [r3, #8]
10048f70:	4b03      	ldr	r3, [pc, #12]	@ (10048f80 <LL_RCC_HSI_Enable+0x24>)
10048f72:	2102      	movs	r1, #2
10048f74:	438a      	bics	r2, r1
10048f76:	609a      	str	r2, [r3, #8]
}
10048f78:	46c0      	nop			@ (mov r8, r8)
10048f7a:	46bd      	mov	sp, r7
10048f7c:	bd80      	pop	{r7, pc}
10048f7e:	46c0      	nop			@ (mov r8, r8)
10048f80:	48400000 	.word	0x48400000

10048f84 <LL_RCC_HSI_Disable>:
{
10048f84:	b580      	push	{r7, lr}
10048f86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048f88:	4b07      	ldr	r3, [pc, #28]	@ (10048fa8 <LL_RCC_HSI_Disable+0x24>)
10048f8a:	689a      	ldr	r2, [r3, #8]
10048f8c:	4b06      	ldr	r3, [pc, #24]	@ (10048fa8 <LL_RCC_HSI_Disable+0x24>)
10048f8e:	2102      	movs	r1, #2
10048f90:	430a      	orrs	r2, r1
10048f92:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10048f94:	4b04      	ldr	r3, [pc, #16]	@ (10048fa8 <LL_RCC_HSI_Disable+0x24>)
10048f96:	689a      	ldr	r2, [r3, #8]
10048f98:	4b03      	ldr	r3, [pc, #12]	@ (10048fa8 <LL_RCC_HSI_Disable+0x24>)
10048f9a:	2104      	movs	r1, #4
10048f9c:	430a      	orrs	r2, r1
10048f9e:	609a      	str	r2, [r3, #8]
}
10048fa0:	46c0      	nop			@ (mov r8, r8)
10048fa2:	46bd      	mov	sp, r7
10048fa4:	bd80      	pop	{r7, pc}
10048fa6:	46c0      	nop			@ (mov r8, r8)
10048fa8:	48400000 	.word	0x48400000

10048fac <LL_RCC_HSI_IsReady>:
{
10048fac:	b580      	push	{r7, lr}
10048fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10048fb0:	4b07      	ldr	r3, [pc, #28]	@ (10048fd0 <LL_RCC_HSI_IsReady+0x24>)
10048fb2:	681a      	ldr	r2, [r3, #0]
10048fb4:	2380      	movs	r3, #128	@ 0x80
10048fb6:	00db      	lsls	r3, r3, #3
10048fb8:	401a      	ands	r2, r3
10048fba:	2380      	movs	r3, #128	@ 0x80
10048fbc:	00db      	lsls	r3, r3, #3
10048fbe:	429a      	cmp	r2, r3
10048fc0:	d101      	bne.n	10048fc6 <LL_RCC_HSI_IsReady+0x1a>
10048fc2:	2301      	movs	r3, #1
10048fc4:	e000      	b.n	10048fc8 <LL_RCC_HSI_IsReady+0x1c>
10048fc6:	2300      	movs	r3, #0
}
10048fc8:	0018      	movs	r0, r3
10048fca:	46bd      	mov	sp, r7
10048fcc:	bd80      	pop	{r7, pc}
10048fce:	46c0      	nop			@ (mov r8, r8)
10048fd0:	48400000 	.word	0x48400000

10048fd4 <LL_RCC_DIRECT_HSE_Enable>:
{
10048fd4:	b580      	push	{r7, lr}
10048fd6:	b082      	sub	sp, #8
10048fd8:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10048fda:	46c0      	nop			@ (mov r8, r8)
10048fdc:	4b0f      	ldr	r3, [pc, #60]	@ (1004901c <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048fde:	681a      	ldr	r2, [r3, #0]
10048fe0:	2380      	movs	r3, #128	@ 0x80
10048fe2:	029b      	lsls	r3, r3, #10
10048fe4:	4013      	ands	r3, r2
10048fe6:	d0f9      	beq.n	10048fdc <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048fe8:	4b0c      	ldr	r3, [pc, #48]	@ (1004901c <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048fea:	689a      	ldr	r2, [r3, #8]
10048fec:	4b0b      	ldr	r3, [pc, #44]	@ (1004901c <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048fee:	2102      	movs	r1, #2
10048ff0:	430a      	orrs	r2, r1
10048ff2:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10048ff4:	2300      	movs	r3, #0
10048ff6:	607b      	str	r3, [r7, #4]
10048ff8:	e003      	b.n	10049002 <LL_RCC_DIRECT_HSE_Enable+0x2e>
    __asm("NOP");
10048ffa:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10048ffc:	687b      	ldr	r3, [r7, #4]
10048ffe:	3301      	adds	r3, #1
10049000:	607b      	str	r3, [r7, #4]
10049002:	687b      	ldr	r3, [r7, #4]
10049004:	2b05      	cmp	r3, #5
10049006:	ddf8      	ble.n	10048ffa <LL_RCC_DIRECT_HSE_Enable+0x26>
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10049008:	4b04      	ldr	r3, [pc, #16]	@ (1004901c <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004900a:	689a      	ldr	r2, [r3, #8]
1004900c:	4b03      	ldr	r3, [pc, #12]	@ (1004901c <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004900e:	2104      	movs	r1, #4
10049010:	430a      	orrs	r2, r1
10049012:	609a      	str	r2, [r3, #8]
}
10049014:	46c0      	nop			@ (mov r8, r8)
10049016:	46bd      	mov	sp, r7
10049018:	b002      	add	sp, #8
1004901a:	bd80      	pop	{r7, pc}
1004901c:	48400000 	.word	0x48400000

10049020 <LL_RCC_LSCO_SetSource>:
{
10049020:	b580      	push	{r7, lr}
10049022:	b082      	sub	sp, #8
10049024:	af00      	add	r7, sp, #0
10049026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10049028:	4b06      	ldr	r3, [pc, #24]	@ (10049044 <LL_RCC_LSCO_SetSource+0x24>)
1004902a:	689b      	ldr	r3, [r3, #8]
1004902c:	4a06      	ldr	r2, [pc, #24]	@ (10049048 <LL_RCC_LSCO_SetSource+0x28>)
1004902e:	4013      	ands	r3, r2
10049030:	0019      	movs	r1, r3
10049032:	4b04      	ldr	r3, [pc, #16]	@ (10049044 <LL_RCC_LSCO_SetSource+0x24>)
10049034:	687a      	ldr	r2, [r7, #4]
10049036:	430a      	orrs	r2, r1
10049038:	609a      	str	r2, [r3, #8]
}
1004903a:	46c0      	nop			@ (mov r8, r8)
1004903c:	46bd      	mov	sp, r7
1004903e:	b002      	add	sp, #8
10049040:	bd80      	pop	{r7, pc}
10049042:	46c0      	nop			@ (mov r8, r8)
10049044:	48400000 	.word	0x48400000
10049048:	fffe7fff 	.word	0xfffe7fff

1004904c <LL_RCC_LSE_Enable>:
{
1004904c:	b580      	push	{r7, lr}
1004904e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10049050:	4b04      	ldr	r3, [pc, #16]	@ (10049064 <LL_RCC_LSE_Enable+0x18>)
10049052:	681a      	ldr	r2, [r3, #0]
10049054:	4b03      	ldr	r3, [pc, #12]	@ (10049064 <LL_RCC_LSE_Enable+0x18>)
10049056:	2110      	movs	r1, #16
10049058:	430a      	orrs	r2, r1
1004905a:	601a      	str	r2, [r3, #0]
}
1004905c:	46c0      	nop			@ (mov r8, r8)
1004905e:	46bd      	mov	sp, r7
10049060:	bd80      	pop	{r7, pc}
10049062:	46c0      	nop			@ (mov r8, r8)
10049064:	48400000 	.word	0x48400000

10049068 <LL_RCC_LSE_Disable>:
{
10049068:	b580      	push	{r7, lr}
1004906a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
1004906c:	4b04      	ldr	r3, [pc, #16]	@ (10049080 <LL_RCC_LSE_Disable+0x18>)
1004906e:	681a      	ldr	r2, [r3, #0]
10049070:	4b03      	ldr	r3, [pc, #12]	@ (10049080 <LL_RCC_LSE_Disable+0x18>)
10049072:	2110      	movs	r1, #16
10049074:	438a      	bics	r2, r1
10049076:	601a      	str	r2, [r3, #0]
}
10049078:	46c0      	nop			@ (mov r8, r8)
1004907a:	46bd      	mov	sp, r7
1004907c:	bd80      	pop	{r7, pc}
1004907e:	46c0      	nop			@ (mov r8, r8)
10049080:	48400000 	.word	0x48400000

10049084 <LL_RCC_LSE_IsReady>:
{
10049084:	b580      	push	{r7, lr}
10049086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10049088:	4b05      	ldr	r3, [pc, #20]	@ (100490a0 <LL_RCC_LSE_IsReady+0x1c>)
1004908a:	681b      	ldr	r3, [r3, #0]
1004908c:	2220      	movs	r2, #32
1004908e:	4013      	ands	r3, r2
10049090:	2b20      	cmp	r3, #32
10049092:	d101      	bne.n	10049098 <LL_RCC_LSE_IsReady+0x14>
10049094:	2301      	movs	r3, #1
10049096:	e000      	b.n	1004909a <LL_RCC_LSE_IsReady+0x16>
10049098:	2300      	movs	r3, #0
}
1004909a:	0018      	movs	r0, r3
1004909c:	46bd      	mov	sp, r7
1004909e:	bd80      	pop	{r7, pc}
100490a0:	48400000 	.word	0x48400000

100490a4 <LL_RCC_LSE_EnableBypass>:
{
100490a4:	b580      	push	{r7, lr}
100490a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
100490a8:	4b04      	ldr	r3, [pc, #16]	@ (100490bc <LL_RCC_LSE_EnableBypass+0x18>)
100490aa:	681a      	ldr	r2, [r3, #0]
100490ac:	4b03      	ldr	r3, [pc, #12]	@ (100490bc <LL_RCC_LSE_EnableBypass+0x18>)
100490ae:	2140      	movs	r1, #64	@ 0x40
100490b0:	430a      	orrs	r2, r1
100490b2:	601a      	str	r2, [r3, #0]
}
100490b4:	46c0      	nop			@ (mov r8, r8)
100490b6:	46bd      	mov	sp, r7
100490b8:	bd80      	pop	{r7, pc}
100490ba:	46c0      	nop			@ (mov r8, r8)
100490bc:	48400000 	.word	0x48400000

100490c0 <LL_RCC_LSE_DisableBypass>:
{
100490c0:	b580      	push	{r7, lr}
100490c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
100490c4:	4b04      	ldr	r3, [pc, #16]	@ (100490d8 <LL_RCC_LSE_DisableBypass+0x18>)
100490c6:	681a      	ldr	r2, [r3, #0]
100490c8:	4b03      	ldr	r3, [pc, #12]	@ (100490d8 <LL_RCC_LSE_DisableBypass+0x18>)
100490ca:	2140      	movs	r1, #64	@ 0x40
100490cc:	438a      	bics	r2, r1
100490ce:	601a      	str	r2, [r3, #0]
}
100490d0:	46c0      	nop			@ (mov r8, r8)
100490d2:	46bd      	mov	sp, r7
100490d4:	bd80      	pop	{r7, pc}
100490d6:	46c0      	nop			@ (mov r8, r8)
100490d8:	48400000 	.word	0x48400000

100490dc <LL_RCC_LSE_IsBypassEnabled>:
{
100490dc:	b580      	push	{r7, lr}
100490de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
100490e0:	4b05      	ldr	r3, [pc, #20]	@ (100490f8 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
100490e2:	681b      	ldr	r3, [r3, #0]
100490e4:	2240      	movs	r2, #64	@ 0x40
100490e6:	4013      	ands	r3, r2
100490e8:	2b40      	cmp	r3, #64	@ 0x40
100490ea:	d101      	bne.n	100490f0 <LL_RCC_LSE_IsBypassEnabled+0x14>
100490ec:	2301      	movs	r3, #1
100490ee:	e000      	b.n	100490f2 <LL_RCC_LSE_IsBypassEnabled+0x16>
100490f0:	2300      	movs	r3, #0
}
100490f2:	0018      	movs	r0, r3
100490f4:	46bd      	mov	sp, r7
100490f6:	bd80      	pop	{r7, pc}
100490f8:	48400000 	.word	0x48400000

100490fc <LL_RCC_LSE_SetDriveCapability>:
{
100490fc:	b580      	push	{r7, lr}
100490fe:	b082      	sub	sp, #8
10049100:	af00      	add	r7, sp, #0
10049102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
10049104:	4b06      	ldr	r3, [pc, #24]	@ (10049120 <LL_RCC_LSE_SetDriveCapability+0x24>)
10049106:	68db      	ldr	r3, [r3, #12]
10049108:	2260      	movs	r2, #96	@ 0x60
1004910a:	4393      	bics	r3, r2
1004910c:	0019      	movs	r1, r3
1004910e:	4b04      	ldr	r3, [pc, #16]	@ (10049120 <LL_RCC_LSE_SetDriveCapability+0x24>)
10049110:	687a      	ldr	r2, [r7, #4]
10049112:	430a      	orrs	r2, r1
10049114:	60da      	str	r2, [r3, #12]
}
10049116:	46c0      	nop			@ (mov r8, r8)
10049118:	46bd      	mov	sp, r7
1004911a:	b002      	add	sp, #8
1004911c:	bd80      	pop	{r7, pc}
1004911e:	46c0      	nop			@ (mov r8, r8)
10049120:	48400000 	.word	0x48400000

10049124 <LL_RCC_LSI_Enable>:
{
10049124:	b580      	push	{r7, lr}
10049126:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10049128:	4b04      	ldr	r3, [pc, #16]	@ (1004913c <LL_RCC_LSI_Enable+0x18>)
1004912a:	681a      	ldr	r2, [r3, #0]
1004912c:	4b03      	ldr	r3, [pc, #12]	@ (1004913c <LL_RCC_LSI_Enable+0x18>)
1004912e:	2104      	movs	r1, #4
10049130:	430a      	orrs	r2, r1
10049132:	601a      	str	r2, [r3, #0]
}
10049134:	46c0      	nop			@ (mov r8, r8)
10049136:	46bd      	mov	sp, r7
10049138:	bd80      	pop	{r7, pc}
1004913a:	46c0      	nop			@ (mov r8, r8)
1004913c:	48400000 	.word	0x48400000

10049140 <LL_RCC_LSI_Disable>:
{
10049140:	b580      	push	{r7, lr}
10049142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
10049144:	4b04      	ldr	r3, [pc, #16]	@ (10049158 <LL_RCC_LSI_Disable+0x18>)
10049146:	681a      	ldr	r2, [r3, #0]
10049148:	4b03      	ldr	r3, [pc, #12]	@ (10049158 <LL_RCC_LSI_Disable+0x18>)
1004914a:	2104      	movs	r1, #4
1004914c:	438a      	bics	r2, r1
1004914e:	601a      	str	r2, [r3, #0]
}
10049150:	46c0      	nop			@ (mov r8, r8)
10049152:	46bd      	mov	sp, r7
10049154:	bd80      	pop	{r7, pc}
10049156:	46c0      	nop			@ (mov r8, r8)
10049158:	48400000 	.word	0x48400000

1004915c <LL_RCC_LSI_IsReady>:
{
1004915c:	b580      	push	{r7, lr}
1004915e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10049160:	4b05      	ldr	r3, [pc, #20]	@ (10049178 <LL_RCC_LSI_IsReady+0x1c>)
10049162:	681b      	ldr	r3, [r3, #0]
10049164:	2208      	movs	r2, #8
10049166:	4013      	ands	r3, r2
10049168:	2b08      	cmp	r3, #8
1004916a:	d101      	bne.n	10049170 <LL_RCC_LSI_IsReady+0x14>
1004916c:	2301      	movs	r3, #1
1004916e:	e000      	b.n	10049172 <LL_RCC_LSI_IsReady+0x16>
10049170:	2300      	movs	r3, #0
}
10049172:	0018      	movs	r0, r3
10049174:	46bd      	mov	sp, r7
10049176:	bd80      	pop	{r7, pc}
10049178:	48400000 	.word	0x48400000

1004917c <LL_RCC_RC64MPLL_Enable>:
{
1004917c:	b580      	push	{r7, lr}
1004917e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10049180:	4b04      	ldr	r3, [pc, #16]	@ (10049194 <LL_RCC_RC64MPLL_Enable+0x18>)
10049182:	681a      	ldr	r2, [r3, #0]
10049184:	4b03      	ldr	r3, [pc, #12]	@ (10049194 <LL_RCC_RC64MPLL_Enable+0x18>)
10049186:	2180      	movs	r1, #128	@ 0x80
10049188:	0189      	lsls	r1, r1, #6
1004918a:	430a      	orrs	r2, r1
1004918c:	601a      	str	r2, [r3, #0]
}
1004918e:	46c0      	nop			@ (mov r8, r8)
10049190:	46bd      	mov	sp, r7
10049192:	bd80      	pop	{r7, pc}
10049194:	48400000 	.word	0x48400000

10049198 <LL_RCC_RC64MPLL_Disable>:
{
10049198:	b580      	push	{r7, lr}
1004919a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004919c:	4b04      	ldr	r3, [pc, #16]	@ (100491b0 <LL_RCC_RC64MPLL_Disable+0x18>)
1004919e:	681a      	ldr	r2, [r3, #0]
100491a0:	4b03      	ldr	r3, [pc, #12]	@ (100491b0 <LL_RCC_RC64MPLL_Disable+0x18>)
100491a2:	4904      	ldr	r1, [pc, #16]	@ (100491b4 <LL_RCC_RC64MPLL_Disable+0x1c>)
100491a4:	400a      	ands	r2, r1
100491a6:	601a      	str	r2, [r3, #0]
}
100491a8:	46c0      	nop			@ (mov r8, r8)
100491aa:	46bd      	mov	sp, r7
100491ac:	bd80      	pop	{r7, pc}
100491ae:	46c0      	nop			@ (mov r8, r8)
100491b0:	48400000 	.word	0x48400000
100491b4:	ffffdfff 	.word	0xffffdfff

100491b8 <LL_RCC_RC64MPLL_IsReady>:
{
100491b8:	b580      	push	{r7, lr}
100491ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
100491bc:	4b07      	ldr	r3, [pc, #28]	@ (100491dc <LL_RCC_RC64MPLL_IsReady+0x24>)
100491be:	681a      	ldr	r2, [r3, #0]
100491c0:	2380      	movs	r3, #128	@ 0x80
100491c2:	01db      	lsls	r3, r3, #7
100491c4:	401a      	ands	r2, r3
100491c6:	2380      	movs	r3, #128	@ 0x80
100491c8:	01db      	lsls	r3, r3, #7
100491ca:	429a      	cmp	r2, r3
100491cc:	d101      	bne.n	100491d2 <LL_RCC_RC64MPLL_IsReady+0x1a>
100491ce:	2301      	movs	r3, #1
100491d0:	e000      	b.n	100491d4 <LL_RCC_RC64MPLL_IsReady+0x1c>
100491d2:	2300      	movs	r3, #0
}
100491d4:	0018      	movs	r0, r3
100491d6:	46bd      	mov	sp, r7
100491d8:	bd80      	pop	{r7, pc}
100491da:	46c0      	nop			@ (mov r8, r8)
100491dc:	48400000 	.word	0x48400000

100491e0 <LL_RCC_SetRC64MPLLPrescaler>:
{
100491e0:	b580      	push	{r7, lr}
100491e2:	b082      	sub	sp, #8
100491e4:	af00      	add	r7, sp, #0
100491e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
100491e8:	4b06      	ldr	r3, [pc, #24]	@ (10049204 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100491ea:	689b      	ldr	r3, [r3, #8]
100491ec:	22e0      	movs	r2, #224	@ 0xe0
100491ee:	4393      	bics	r3, r2
100491f0:	0019      	movs	r1, r3
100491f2:	4b04      	ldr	r3, [pc, #16]	@ (10049204 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
100491f4:	687a      	ldr	r2, [r7, #4]
100491f6:	430a      	orrs	r2, r1
100491f8:	609a      	str	r2, [r3, #8]
}
100491fa:	46c0      	nop			@ (mov r8, r8)
100491fc:	46bd      	mov	sp, r7
100491fe:	b002      	add	sp, #8
10049200:	bd80      	pop	{r7, pc}
10049202:	46c0      	nop			@ (mov r8, r8)
10049204:	48400000 	.word	0x48400000

10049208 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10049208:	b580      	push	{r7, lr}
1004920a:	b084      	sub	sp, #16
1004920c:	af00      	add	r7, sp, #0
1004920e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10049210:	687b      	ldr	r3, [r7, #4]
10049212:	2b00      	cmp	r3, #0
10049214:	d101      	bne.n	1004921a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
10049216:	2301      	movs	r3, #1
10049218:	e13c      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1004921a:	687b      	ldr	r3, [r7, #4]
1004921c:	681b      	ldr	r3, [r3, #0]
1004921e:	2210      	movs	r2, #16
10049220:	4013      	ands	r3, r2
10049222:	d033      	beq.n	1004928c <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
10049224:	687b      	ldr	r3, [r7, #4]
10049226:	689b      	ldr	r3, [r3, #8]
10049228:	2b00      	cmp	r3, #0
1004922a:	d102      	bne.n	10049232 <HAL_RCC_OscConfig+0x2a>
1004922c:	f7ff fe96 	bl	10048f5c <LL_RCC_HSI_Enable>
10049230:	e001      	b.n	10049236 <HAL_RCC_OscConfig+0x2e>
10049232:	f7ff fea7 	bl	10048f84 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
10049236:	687b      	ldr	r3, [r7, #4]
10049238:	689b      	ldr	r3, [r3, #8]
1004923a:	2b04      	cmp	r3, #4
1004923c:	d113      	bne.n	10049266 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004923e:	f7fc fcc9 	bl	10045bd4 <HAL_GetTick>
10049242:	0003      	movs	r3, r0
10049244:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
10049246:	e008      	b.n	1004925a <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10049248:	f7fc fcc4 	bl	10045bd4 <HAL_GetTick>
1004924c:	0002      	movs	r2, r0
1004924e:	68fb      	ldr	r3, [r7, #12]
10049250:	1ad3      	subs	r3, r2, r3
10049252:	2b64      	cmp	r3, #100	@ 0x64
10049254:	d901      	bls.n	1004925a <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
10049256:	2303      	movs	r3, #3
10049258:	e11c      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
1004925a:	f7ff fea7 	bl	10048fac <LL_RCC_HSI_IsReady>
1004925e:	0003      	movs	r3, r0
10049260:	2b01      	cmp	r3, #1
10049262:	d0f1      	beq.n	10049248 <HAL_RCC_OscConfig+0x40>
10049264:	e012      	b.n	1004928c <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049266:	f7fc fcb5 	bl	10045bd4 <HAL_GetTick>
1004926a:	0003      	movs	r3, r0
1004926c:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004926e:	e008      	b.n	10049282 <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10049270:	f7fc fcb0 	bl	10045bd4 <HAL_GetTick>
10049274:	0002      	movs	r2, r0
10049276:	68fb      	ldr	r3, [r7, #12]
10049278:	1ad3      	subs	r3, r2, r3
1004927a:	2b64      	cmp	r3, #100	@ 0x64
1004927c:	d901      	bls.n	10049282 <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
1004927e:	2303      	movs	r3, #3
10049280:	e108      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
10049282:	f7ff fe93 	bl	10048fac <LL_RCC_HSI_IsReady>
10049286:	0003      	movs	r3, r0
10049288:	2b01      	cmp	r3, #1
1004928a:	d1f1      	bne.n	10049270 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1004928c:	687b      	ldr	r3, [r7, #4]
1004928e:	681b      	ldr	r3, [r3, #0]
10049290:	2201      	movs	r2, #1
10049292:	4013      	ands	r3, r2
10049294:	d039      	beq.n	1004930a <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
10049296:	2020      	movs	r0, #32
10049298:	f7ff fe2a 	bl	10048ef0 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
1004929c:	2030      	movs	r0, #48	@ 0x30
1004929e:	f7ff fe47 	bl	10048f30 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
100492a2:	687b      	ldr	r3, [r7, #4]
100492a4:	685a      	ldr	r2, [r3, #4]
100492a6:	2380      	movs	r3, #128	@ 0x80
100492a8:	025b      	lsls	r3, r3, #9
100492aa:	429a      	cmp	r2, r3
100492ac:	d102      	bne.n	100492b4 <HAL_RCC_OscConfig+0xac>
100492ae:	f7ff fded 	bl	10048e8c <LL_RCC_HSE_Enable>
100492b2:	e001      	b.n	100492b8 <HAL_RCC_OscConfig+0xb0>
100492b4:	f7ff fdf8 	bl	10048ea8 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
100492b8:	687b      	ldr	r3, [r7, #4]
100492ba:	685b      	ldr	r3, [r3, #4]
100492bc:	2b00      	cmp	r3, #0
100492be:	d012      	beq.n	100492e6 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100492c0:	f7fc fc88 	bl	10045bd4 <HAL_GetTick>
100492c4:	0003      	movs	r3, r0
100492c6:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
100492c8:	e008      	b.n	100492dc <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100492ca:	f7fc fc83 	bl	10045bd4 <HAL_GetTick>
100492ce:	0002      	movs	r2, r0
100492d0:	68fb      	ldr	r3, [r7, #12]
100492d2:	1ad3      	subs	r3, r2, r3
100492d4:	2b64      	cmp	r3, #100	@ 0x64
100492d6:	d901      	bls.n	100492dc <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
100492d8:	2303      	movs	r3, #3
100492da:	e0db      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
100492dc:	f7ff fdf4 	bl	10048ec8 <LL_RCC_HSE_IsReady>
100492e0:	1e03      	subs	r3, r0, #0
100492e2:	d0f2      	beq.n	100492ca <HAL_RCC_OscConfig+0xc2>
100492e4:	e011      	b.n	1004930a <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100492e6:	f7fc fc75 	bl	10045bd4 <HAL_GetTick>
100492ea:	0003      	movs	r3, r0
100492ec:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
100492ee:	e008      	b.n	10049302 <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100492f0:	f7fc fc70 	bl	10045bd4 <HAL_GetTick>
100492f4:	0002      	movs	r2, r0
100492f6:	68fb      	ldr	r3, [r7, #12]
100492f8:	1ad3      	subs	r3, r2, r3
100492fa:	2b64      	cmp	r3, #100	@ 0x64
100492fc:	d901      	bls.n	10049302 <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
100492fe:	2303      	movs	r3, #3
10049300:	e0c8      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
10049302:	f7ff fde1 	bl	10048ec8 <LL_RCC_HSE_IsReady>
10049306:	1e03      	subs	r3, r0, #0
10049308:	d1f2      	bne.n	100492f0 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1004930a:	687b      	ldr	r3, [r7, #4]
1004930c:	681b      	ldr	r3, [r3, #0]
1004930e:	2204      	movs	r2, #4
10049310:	4013      	ands	r3, r2
10049312:	d03a      	beq.n	1004938a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
10049314:	687b      	ldr	r3, [r7, #4]
10049316:	691b      	ldr	r3, [r3, #16]
10049318:	2b00      	cmp	r3, #0
1004931a:	d022      	beq.n	10049362 <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
1004931c:	f7ff ff10 	bl	10049140 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
10049320:	46c0      	nop			@ (mov r8, r8)
10049322:	f7ff ff1b 	bl	1004915c <LL_RCC_LSI_IsReady>
10049326:	1e03      	subs	r3, r0, #0
10049328:	d1fb      	bne.n	10049322 <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004932a:	f7ff fe9d 	bl	10049068 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004932e:	2380      	movs	r3, #128	@ 0x80
10049330:	025b      	lsls	r3, r3, #9
10049332:	0018      	movs	r0, r3
10049334:	f7ff fe74 	bl	10049020 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10049338:	f7ff fef4 	bl	10049124 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004933c:	f7fc fc4a 	bl	10045bd4 <HAL_GetTick>
10049340:	0003      	movs	r3, r0
10049342:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10049344:	e008      	b.n	10049358 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10049346:	f7fc fc45 	bl	10045bd4 <HAL_GetTick>
1004934a:	0002      	movs	r2, r0
1004934c:	68fb      	ldr	r3, [r7, #12]
1004934e:	1ad3      	subs	r3, r2, r3
10049350:	2b02      	cmp	r3, #2
10049352:	d901      	bls.n	10049358 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
10049354:	2303      	movs	r3, #3
10049356:	e09d      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10049358:	f7ff ff00 	bl	1004915c <LL_RCC_LSI_IsReady>
1004935c:	1e03      	subs	r3, r0, #0
1004935e:	d0f2      	beq.n	10049346 <HAL_RCC_OscConfig+0x13e>
10049360:	e013      	b.n	1004938a <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10049362:	f7ff feed 	bl	10049140 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049366:	f7fc fc35 	bl	10045bd4 <HAL_GetTick>
1004936a:	0003      	movs	r3, r0
1004936c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004936e:	e008      	b.n	10049382 <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10049370:	f7fc fc30 	bl	10045bd4 <HAL_GetTick>
10049374:	0002      	movs	r2, r0
10049376:	68fb      	ldr	r3, [r7, #12]
10049378:	1ad3      	subs	r3, r2, r3
1004937a:	2b02      	cmp	r3, #2
1004937c:	d901      	bls.n	10049382 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
1004937e:	2303      	movs	r3, #3
10049380:	e088      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10049382:	f7ff feeb 	bl	1004915c <LL_RCC_LSI_IsReady>
10049386:	1e03      	subs	r3, r0, #0
10049388:	d1f2      	bne.n	10049370 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004938a:	687b      	ldr	r3, [r7, #4]
1004938c:	681b      	ldr	r3, [r3, #0]
1004938e:	2202      	movs	r2, #2
10049390:	4013      	ands	r3, r2
10049392:	d047      	beq.n	10049424 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
10049394:	f7ff fed4 	bl	10049140 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10049398:	f7ff fe66 	bl	10049068 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
1004939c:	46c0      	nop			@ (mov r8, r8)
1004939e:	f7ff fe71 	bl	10049084 <LL_RCC_LSE_IsReady>
100493a2:	1e03      	subs	r3, r0, #0
100493a4:	d1fb      	bne.n	1004939e <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
100493a6:	23c0      	movs	r3, #192	@ 0xc0
100493a8:	019b      	lsls	r3, r3, #6
100493aa:	0018      	movs	r0, r3
100493ac:	f7ff fd56 	bl	10048e5c <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
100493b0:	2380      	movs	r3, #128	@ 0x80
100493b2:	021b      	lsls	r3, r3, #8
100493b4:	0018      	movs	r0, r3
100493b6:	f7ff fe33 	bl	10049020 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
100493ba:	2020      	movs	r0, #32
100493bc:	f7ff fe9e 	bl	100490fc <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
100493c0:	687b      	ldr	r3, [r7, #4]
100493c2:	68db      	ldr	r3, [r3, #12]
100493c4:	2b10      	cmp	r3, #16
100493c6:	d102      	bne.n	100493ce <HAL_RCC_OscConfig+0x1c6>
100493c8:	f7ff fe40 	bl	1004904c <LL_RCC_LSE_Enable>
100493cc:	e001      	b.n	100493d2 <HAL_RCC_OscConfig+0x1ca>
100493ce:	f7ff fe4b 	bl	10049068 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
100493d2:	687b      	ldr	r3, [r7, #4]
100493d4:	68db      	ldr	r3, [r3, #12]
100493d6:	2b00      	cmp	r3, #0
100493d8:	d012      	beq.n	10049400 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100493da:	f7fc fbfb 	bl	10045bd4 <HAL_GetTick>
100493de:	0003      	movs	r3, r0
100493e0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
100493e2:	e008      	b.n	100493f6 <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100493e4:	f7fc fbf6 	bl	10045bd4 <HAL_GetTick>
100493e8:	0002      	movs	r2, r0
100493ea:	68fb      	ldr	r3, [r7, #12]
100493ec:	1ad3      	subs	r3, r2, r3
100493ee:	2b64      	cmp	r3, #100	@ 0x64
100493f0:	d901      	bls.n	100493f6 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
100493f2:	2303      	movs	r3, #3
100493f4:	e04e      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
100493f6:	f7ff fe45 	bl	10049084 <LL_RCC_LSE_IsReady>
100493fa:	1e03      	subs	r3, r0, #0
100493fc:	d0f2      	beq.n	100493e4 <HAL_RCC_OscConfig+0x1dc>
100493fe:	e011      	b.n	10049424 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049400:	f7fc fbe8 	bl	10045bd4 <HAL_GetTick>
10049404:	0003      	movs	r3, r0
10049406:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10049408:	e008      	b.n	1004941c <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004940a:	f7fc fbe3 	bl	10045bd4 <HAL_GetTick>
1004940e:	0002      	movs	r2, r0
10049410:	68fb      	ldr	r3, [r7, #12]
10049412:	1ad3      	subs	r3, r2, r3
10049414:	2b64      	cmp	r3, #100	@ 0x64
10049416:	d901      	bls.n	1004941c <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
10049418:	2303      	movs	r3, #3
1004941a:	e03b      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004941c:	f7ff fe32 	bl	10049084 <LL_RCC_LSE_IsReady>
10049420:	1e03      	subs	r3, r0, #0
10049422:	d1f2      	bne.n	1004940a <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
10049424:	687b      	ldr	r3, [r7, #4]
10049426:	681b      	ldr	r3, [r3, #0]
10049428:	2208      	movs	r2, #8
1004942a:	4013      	ands	r3, r2
1004942c:	d031      	beq.n	10049492 <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004942e:	687b      	ldr	r3, [r7, #4]
10049430:	695b      	ldr	r3, [r3, #20]
10049432:	2b40      	cmp	r3, #64	@ 0x40
10049434:	d102      	bne.n	1004943c <HAL_RCC_OscConfig+0x234>
10049436:	f7ff fe35 	bl	100490a4 <LL_RCC_LSE_EnableBypass>
1004943a:	e001      	b.n	10049440 <HAL_RCC_OscConfig+0x238>
1004943c:	f7ff fe40 	bl	100490c0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
10049440:	687b      	ldr	r3, [r7, #4]
10049442:	695b      	ldr	r3, [r3, #20]
10049444:	2b00      	cmp	r3, #0
10049446:	d012      	beq.n	1004946e <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049448:	f7fc fbc4 	bl	10045bd4 <HAL_GetTick>
1004944c:	0003      	movs	r3, r0
1004944e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10049450:	e008      	b.n	10049464 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10049452:	f7fc fbbf 	bl	10045bd4 <HAL_GetTick>
10049456:	0002      	movs	r2, r0
10049458:	68fb      	ldr	r3, [r7, #12]
1004945a:	1ad3      	subs	r3, r2, r3
1004945c:	2b64      	cmp	r3, #100	@ 0x64
1004945e:	d901      	bls.n	10049464 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
10049460:	2303      	movs	r3, #3
10049462:	e017      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10049464:	f7ff fe3a 	bl	100490dc <LL_RCC_LSE_IsBypassEnabled>
10049468:	1e03      	subs	r3, r0, #0
1004946a:	d0f2      	beq.n	10049452 <HAL_RCC_OscConfig+0x24a>
1004946c:	e011      	b.n	10049492 <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004946e:	f7fc fbb1 	bl	10045bd4 <HAL_GetTick>
10049472:	0003      	movs	r3, r0
10049474:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
10049476:	e008      	b.n	1004948a <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10049478:	f7fc fbac 	bl	10045bd4 <HAL_GetTick>
1004947c:	0002      	movs	r2, r0
1004947e:	68fb      	ldr	r3, [r7, #12]
10049480:	1ad3      	subs	r3, r2, r3
10049482:	2b64      	cmp	r3, #100	@ 0x64
10049484:	d901      	bls.n	1004948a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
10049486:	2303      	movs	r3, #3
10049488:	e004      	b.n	10049494 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004948a:	f7ff fe27 	bl	100490dc <LL_RCC_LSE_IsBypassEnabled>
1004948e:	1e03      	subs	r3, r0, #0
10049490:	d1f2      	bne.n	10049478 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
10049492:	2300      	movs	r3, #0
}
10049494:	0018      	movs	r0, r3
10049496:	46bd      	mov	sp, r7
10049498:	b004      	add	sp, #16
1004949a:	bd80      	pop	{r7, pc}

1004949c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
1004949c:	b580      	push	{r7, lr}
1004949e:	b084      	sub	sp, #16
100494a0:	af00      	add	r7, sp, #0
100494a2:	6078      	str	r0, [r7, #4]
100494a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100494a6:	687b      	ldr	r3, [r7, #4]
100494a8:	2b00      	cmp	r3, #0
100494aa:	d101      	bne.n	100494b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
100494ac:	2301      	movs	r3, #1
100494ae:	e098      	b.n	100495e2 <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
100494b0:	4b4e      	ldr	r3, [pc, #312]	@ (100495ec <HAL_RCC_ClockConfig+0x150>)
100494b2:	685b      	ldr	r3, [r3, #4]
100494b4:	2230      	movs	r2, #48	@ 0x30
100494b6:	4393      	bics	r3, r2
100494b8:	0019      	movs	r1, r3
100494ba:	4b4c      	ldr	r3, [pc, #304]	@ (100495ec <HAL_RCC_ClockConfig+0x150>)
100494bc:	683a      	ldr	r2, [r7, #0]
100494be:	430a      	orrs	r2, r1
100494c0:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
100494c2:	687b      	ldr	r3, [r7, #4]
100494c4:	681b      	ldr	r3, [r3, #0]
100494c6:	2b02      	cmp	r3, #2
100494c8:	d10e      	bne.n	100494e8 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
100494ca:	f7ff fd47 	bl	10048f5c <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100494ce:	f7ff fd6d 	bl	10048fac <LL_RCC_HSI_IsReady>
100494d2:	1e03      	subs	r3, r0, #0
100494d4:	d101      	bne.n	100494da <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
100494d6:	2301      	movs	r3, #1
100494d8:	e083      	b.n	100495e2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
100494da:	f7ff fe5d 	bl	10049198 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100494de:	687b      	ldr	r3, [r7, #4]
100494e0:	685b      	ldr	r3, [r3, #4]
100494e2:	0018      	movs	r0, r3
100494e4:	f7ff fe7c 	bl	100491e0 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
100494e8:	687b      	ldr	r3, [r7, #4]
100494ea:	681b      	ldr	r3, [r3, #0]
100494ec:	2b00      	cmp	r3, #0
100494ee:	d124      	bne.n	1004953a <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100494f0:	f7ff fd5c 	bl	10048fac <LL_RCC_HSI_IsReady>
100494f4:	1e03      	subs	r3, r0, #0
100494f6:	d101      	bne.n	100494fc <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
100494f8:	2301      	movs	r3, #1
100494fa:	e072      	b.n	100495e2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
100494fc:	f7ff fce4 	bl	10048ec8 <LL_RCC_HSE_IsReady>
10049500:	1e03      	subs	r3, r0, #0
10049502:	d101      	bne.n	10049508 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
10049504:	2301      	movs	r3, #1
10049506:	e06c      	b.n	100495e2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10049508:	f7ff fe38 	bl	1004917c <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004950c:	f7fc fb62 	bl	10045bd4 <HAL_GetTick>
10049510:	0003      	movs	r3, r0
10049512:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10049514:	e008      	b.n	10049528 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10049516:	f7fc fb5d 	bl	10045bd4 <HAL_GetTick>
1004951a:	0002      	movs	r2, r0
1004951c:	68fb      	ldr	r3, [r7, #12]
1004951e:	1ad3      	subs	r3, r2, r3
10049520:	2b02      	cmp	r3, #2
10049522:	d901      	bls.n	10049528 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
10049524:	2303      	movs	r3, #3
10049526:	e05c      	b.n	100495e2 <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10049528:	f7ff fe46 	bl	100491b8 <LL_RCC_RC64MPLL_IsReady>
1004952c:	1e03      	subs	r3, r0, #0
1004952e:	d0f2      	beq.n	10049516 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10049530:	687b      	ldr	r3, [r7, #4]
10049532:	685b      	ldr	r3, [r3, #4]
10049534:	0018      	movs	r0, r3
10049536:	f7ff fe53 	bl	100491e0 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004953a:	687b      	ldr	r3, [r7, #4]
1004953c:	681b      	ldr	r3, [r3, #0]
1004953e:	2b01      	cmp	r3, #1
10049540:	d117      	bne.n	10049572 <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
10049542:	f7ff fd47 	bl	10048fd4 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
10049546:	f7ff fd31 	bl	10048fac <LL_RCC_HSI_IsReady>
1004954a:	1e03      	subs	r3, r0, #0
1004954c:	d001      	beq.n	10049552 <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
1004954e:	2301      	movs	r3, #1
10049550:	e047      	b.n	100495e2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10049552:	f7ff fcb9 	bl	10048ec8 <LL_RCC_HSE_IsReady>
10049556:	1e03      	subs	r3, r0, #0
10049558:	d101      	bne.n	1004955e <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
1004955a:	2301      	movs	r3, #1
1004955c:	e041      	b.n	100495e2 <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004955e:	4b24      	ldr	r3, [pc, #144]	@ (100495f0 <HAL_RCC_ClockConfig+0x154>)
10049560:	689b      	ldr	r3, [r3, #8]
10049562:	22e0      	movs	r2, #224	@ 0xe0
10049564:	4393      	bics	r3, r2
10049566:	0019      	movs	r1, r3
10049568:	687b      	ldr	r3, [r7, #4]
1004956a:	685a      	ldr	r2, [r3, #4]
1004956c:	4b20      	ldr	r3, [pc, #128]	@ (100495f0 <HAL_RCC_ClockConfig+0x154>)
1004956e:	430a      	orrs	r2, r1
10049570:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
10049572:	4b1e      	ldr	r3, [pc, #120]	@ (100495ec <HAL_RCC_ClockConfig+0x150>)
10049574:	685b      	ldr	r3, [r3, #4]
10049576:	2230      	movs	r2, #48	@ 0x30
10049578:	4013      	ands	r3, r2
1004957a:	683a      	ldr	r2, [r7, #0]
1004957c:	429a      	cmp	r2, r3
1004957e:	d01d      	beq.n	100495bc <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10049580:	4b1a      	ldr	r3, [pc, #104]	@ (100495ec <HAL_RCC_ClockConfig+0x150>)
10049582:	685b      	ldr	r3, [r3, #4]
10049584:	2230      	movs	r2, #48	@ 0x30
10049586:	4393      	bics	r3, r2
10049588:	0019      	movs	r1, r3
1004958a:	4b18      	ldr	r3, [pc, #96]	@ (100495ec <HAL_RCC_ClockConfig+0x150>)
1004958c:	683a      	ldr	r2, [r7, #0]
1004958e:	430a      	orrs	r2, r1
10049590:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10049592:	f7fc fb1f 	bl	10045bd4 <HAL_GetTick>
10049596:	0003      	movs	r3, r0
10049598:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004959a:	e008      	b.n	100495ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
1004959c:	f7fc fb1a 	bl	10045bd4 <HAL_GetTick>
100495a0:	0002      	movs	r2, r0
100495a2:	68fb      	ldr	r3, [r7, #12]
100495a4:	1ad3      	subs	r3, r2, r3
100495a6:	2b02      	cmp	r3, #2
100495a8:	d901      	bls.n	100495ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
100495aa:	2303      	movs	r3, #3
100495ac:	e019      	b.n	100495e2 <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100495ae:	4b0f      	ldr	r3, [pc, #60]	@ (100495ec <HAL_RCC_ClockConfig+0x150>)
100495b0:	685b      	ldr	r3, [r3, #4]
100495b2:	2230      	movs	r2, #48	@ 0x30
100495b4:	4013      	ands	r3, r2
100495b6:	683a      	ldr	r2, [r7, #0]
100495b8:	429a      	cmp	r2, r3
100495ba:	d1ef      	bne.n	1004959c <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
100495bc:	2300      	movs	r3, #0
100495be:	60bb      	str	r3, [r7, #8]
100495c0:	e003      	b.n	100495ca <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
100495c2:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100495c4:	68bb      	ldr	r3, [r7, #8]
100495c6:	3301      	adds	r3, #1
100495c8:	60bb      	str	r3, [r7, #8]
100495ca:	68bb      	ldr	r3, [r7, #8]
100495cc:	2b05      	cmp	r3, #5
100495ce:	ddf8      	ble.n	100495c2 <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
100495d0:	f7fc fa5c 	bl	10045a8c <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
100495d4:	f7fc fb08 	bl	10045be8 <HAL_GetTickPrio>
100495d8:	0003      	movs	r3, r0
100495da:	0018      	movs	r0, r3
100495dc:	f7fc faa0 	bl	10045b20 <HAL_InitTick>
100495e0:	0003      	movs	r3, r0
}
100495e2:	0018      	movs	r0, r3
100495e4:	46bd      	mov	sp, r7
100495e6:	b004      	add	sp, #16
100495e8:	bd80      	pop	{r7, pc}
100495ea:	46c0      	nop			@ (mov r8, r8)
100495ec:	40001000 	.word	0x40001000
100495f0:	48400000 	.word	0x48400000

100495f4 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
100495f4:	b580      	push	{r7, lr}
100495f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
100495f8:	4b02      	ldr	r3, [pc, #8]	@ (10049604 <HAL_RCC_GetSysClockFreq+0x10>)
100495fa:	681b      	ldr	r3, [r3, #0]
}
100495fc:	0018      	movs	r0, r3
100495fe:	46bd      	mov	sp, r7
10049600:	bd80      	pop	{r7, pc}
10049602:	46c0      	nop			@ (mov r8, r8)
10049604:	20000cfc 	.word	0x20000cfc

10049608 <LL_RCC_HSE_IsReady>:
{
10049608:	b580      	push	{r7, lr}
1004960a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004960c:	4b07      	ldr	r3, [pc, #28]	@ (1004962c <LL_RCC_HSE_IsReady+0x24>)
1004960e:	681a      	ldr	r2, [r3, #0]
10049610:	2380      	movs	r3, #128	@ 0x80
10049612:	029b      	lsls	r3, r3, #10
10049614:	401a      	ands	r2, r3
10049616:	2380      	movs	r3, #128	@ 0x80
10049618:	029b      	lsls	r3, r3, #10
1004961a:	429a      	cmp	r2, r3
1004961c:	d101      	bne.n	10049622 <LL_RCC_HSE_IsReady+0x1a>
1004961e:	2301      	movs	r3, #1
10049620:	e000      	b.n	10049624 <LL_RCC_HSE_IsReady+0x1c>
10049622:	2300      	movs	r3, #0
}
10049624:	0018      	movs	r0, r3
10049626:	46bd      	mov	sp, r7
10049628:	bd80      	pop	{r7, pc}
1004962a:	46c0      	nop			@ (mov r8, r8)
1004962c:	48400000 	.word	0x48400000

10049630 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
10049630:	b580      	push	{r7, lr}
10049632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10049634:	4b05      	ldr	r3, [pc, #20]	@ (1004964c <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10049636:	689b      	ldr	r3, [r3, #8]
10049638:	2208      	movs	r2, #8
1004963a:	4013      	ands	r3, r2
1004963c:	2b08      	cmp	r3, #8
1004963e:	d101      	bne.n	10049644 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10049640:	2301      	movs	r3, #1
10049642:	e000      	b.n	10049646 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
10049644:	2300      	movs	r3, #0
}
10049646:	0018      	movs	r0, r3
10049648:	46bd      	mov	sp, r7
1004964a:	bd80      	pop	{r7, pc}
1004964c:	48400000 	.word	0x48400000

10049650 <LL_RCC_LSCO_SetSource>:
{
10049650:	b580      	push	{r7, lr}
10049652:	b082      	sub	sp, #8
10049654:	af00      	add	r7, sp, #0
10049656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10049658:	4b06      	ldr	r3, [pc, #24]	@ (10049674 <LL_RCC_LSCO_SetSource+0x24>)
1004965a:	689b      	ldr	r3, [r3, #8]
1004965c:	4a06      	ldr	r2, [pc, #24]	@ (10049678 <LL_RCC_LSCO_SetSource+0x28>)
1004965e:	4013      	ands	r3, r2
10049660:	0019      	movs	r1, r3
10049662:	4b04      	ldr	r3, [pc, #16]	@ (10049674 <LL_RCC_LSCO_SetSource+0x24>)
10049664:	687a      	ldr	r2, [r7, #4]
10049666:	430a      	orrs	r2, r1
10049668:	609a      	str	r2, [r3, #8]
}
1004966a:	46c0      	nop			@ (mov r8, r8)
1004966c:	46bd      	mov	sp, r7
1004966e:	b002      	add	sp, #8
10049670:	bd80      	pop	{r7, pc}
10049672:	46c0      	nop			@ (mov r8, r8)
10049674:	48400000 	.word	0x48400000
10049678:	fffe7fff 	.word	0xfffe7fff

1004967c <LL_RCC_LSCO_GetSource>:
{
1004967c:	b580      	push	{r7, lr}
1004967e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10049680:	4b03      	ldr	r3, [pc, #12]	@ (10049690 <LL_RCC_LSCO_GetSource+0x14>)
10049682:	689a      	ldr	r2, [r3, #8]
10049684:	23c0      	movs	r3, #192	@ 0xc0
10049686:	025b      	lsls	r3, r3, #9
10049688:	4013      	ands	r3, r2
}
1004968a:	0018      	movs	r0, r3
1004968c:	46bd      	mov	sp, r7
1004968e:	bd80      	pop	{r7, pc}
10049690:	48400000 	.word	0x48400000

10049694 <LL_RCC_SetRFClock>:
{
10049694:	b580      	push	{r7, lr}
10049696:	b082      	sub	sp, #8
10049698:	af00      	add	r7, sp, #0
1004969a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
1004969c:	4b06      	ldr	r3, [pc, #24]	@ (100496b8 <LL_RCC_SetRFClock+0x24>)
1004969e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100496a0:	2204      	movs	r2, #4
100496a2:	4393      	bics	r3, r2
100496a4:	0019      	movs	r1, r3
100496a6:	4b04      	ldr	r3, [pc, #16]	@ (100496b8 <LL_RCC_SetRFClock+0x24>)
100496a8:	687a      	ldr	r2, [r7, #4]
100496aa:	430a      	orrs	r2, r1
100496ac:	661a      	str	r2, [r3, #96]	@ 0x60
}
100496ae:	46c0      	nop			@ (mov r8, r8)
100496b0:	46bd      	mov	sp, r7
100496b2:	b002      	add	sp, #8
100496b4:	bd80      	pop	{r7, pc}
100496b6:	46c0      	nop			@ (mov r8, r8)
100496b8:	48400000 	.word	0x48400000

100496bc <LL_RCC_GetRFClock>:
{
100496bc:	b580      	push	{r7, lr}
100496be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
100496c0:	4b03      	ldr	r3, [pc, #12]	@ (100496d0 <LL_RCC_GetRFClock+0x14>)
100496c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100496c4:	2204      	movs	r2, #4
100496c6:	4013      	ands	r3, r2
}
100496c8:	0018      	movs	r0, r3
100496ca:	46bd      	mov	sp, r7
100496cc:	bd80      	pop	{r7, pc}
100496ce:	46c0      	nop			@ (mov r8, r8)
100496d0:	48400000 	.word	0x48400000

100496d4 <LL_RCC_SetSMPSPrescaler>:
{
100496d4:	b580      	push	{r7, lr}
100496d6:	b082      	sub	sp, #8
100496d8:	af00      	add	r7, sp, #0
100496da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
100496dc:	4b06      	ldr	r3, [pc, #24]	@ (100496f8 <LL_RCC_SetSMPSPrescaler+0x24>)
100496de:	689b      	ldr	r3, [r3, #8]
100496e0:	4a06      	ldr	r2, [pc, #24]	@ (100496fc <LL_RCC_SetSMPSPrescaler+0x28>)
100496e2:	4013      	ands	r3, r2
100496e4:	0019      	movs	r1, r3
100496e6:	4b04      	ldr	r3, [pc, #16]	@ (100496f8 <LL_RCC_SetSMPSPrescaler+0x24>)
100496e8:	687a      	ldr	r2, [r7, #4]
100496ea:	430a      	orrs	r2, r1
100496ec:	609a      	str	r2, [r3, #8]
}
100496ee:	46c0      	nop			@ (mov r8, r8)
100496f0:	46bd      	mov	sp, r7
100496f2:	b002      	add	sp, #8
100496f4:	bd80      	pop	{r7, pc}
100496f6:	46c0      	nop			@ (mov r8, r8)
100496f8:	48400000 	.word	0x48400000
100496fc:	ffffefff 	.word	0xffffefff

10049700 <LL_RCC_GetSMPSPrescaler>:
{
10049700:	b580      	push	{r7, lr}
10049702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
10049704:	4b03      	ldr	r3, [pc, #12]	@ (10049714 <LL_RCC_GetSMPSPrescaler+0x14>)
10049706:	689a      	ldr	r2, [r3, #8]
10049708:	2380      	movs	r3, #128	@ 0x80
1004970a:	015b      	lsls	r3, r3, #5
1004970c:	4013      	ands	r3, r2
}
1004970e:	0018      	movs	r0, r3
10049710:	46bd      	mov	sp, r7
10049712:	bd80      	pop	{r7, pc}
10049714:	48400000 	.word	0x48400000

10049718 <LL_RCC_SetLPUARTClockSource>:
{
10049718:	b580      	push	{r7, lr}
1004971a:	b082      	sub	sp, #8
1004971c:	af00      	add	r7, sp, #0
1004971e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
10049720:	4b06      	ldr	r3, [pc, #24]	@ (1004973c <LL_RCC_SetLPUARTClockSource+0x24>)
10049722:	689b      	ldr	r3, [r3, #8]
10049724:	4a06      	ldr	r2, [pc, #24]	@ (10049740 <LL_RCC_SetLPUARTClockSource+0x28>)
10049726:	4013      	ands	r3, r2
10049728:	0019      	movs	r1, r3
1004972a:	4b04      	ldr	r3, [pc, #16]	@ (1004973c <LL_RCC_SetLPUARTClockSource+0x24>)
1004972c:	687a      	ldr	r2, [r7, #4]
1004972e:	430a      	orrs	r2, r1
10049730:	609a      	str	r2, [r3, #8]
}
10049732:	46c0      	nop			@ (mov r8, r8)
10049734:	46bd      	mov	sp, r7
10049736:	b002      	add	sp, #8
10049738:	bd80      	pop	{r7, pc}
1004973a:	46c0      	nop			@ (mov r8, r8)
1004973c:	48400000 	.word	0x48400000
10049740:	ffffdfff 	.word	0xffffdfff

10049744 <LL_RCC_GetLPUARTClockSource>:
{
10049744:	b580      	push	{r7, lr}
10049746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10049748:	4b03      	ldr	r3, [pc, #12]	@ (10049758 <LL_RCC_GetLPUARTClockSource+0x14>)
1004974a:	689a      	ldr	r2, [r3, #8]
1004974c:	2380      	movs	r3, #128	@ 0x80
1004974e:	019b      	lsls	r3, r3, #6
10049750:	4013      	ands	r3, r2
}
10049752:	0018      	movs	r0, r3
10049754:	46bd      	mov	sp, r7
10049756:	bd80      	pop	{r7, pc}
10049758:	48400000 	.word	0x48400000

1004975c <LL_RCC_SetSPI3I2SClockSource>:
{
1004975c:	b580      	push	{r7, lr}
1004975e:	b082      	sub	sp, #8
10049760:	af00      	add	r7, sp, #0
10049762:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
10049764:	4b06      	ldr	r3, [pc, #24]	@ (10049780 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10049766:	689b      	ldr	r3, [r3, #8]
10049768:	4a06      	ldr	r2, [pc, #24]	@ (10049784 <LL_RCC_SetSPI3I2SClockSource+0x28>)
1004976a:	4013      	ands	r3, r2
1004976c:	0019      	movs	r1, r3
1004976e:	4b04      	ldr	r3, [pc, #16]	@ (10049780 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10049770:	687a      	ldr	r2, [r7, #4]
10049772:	430a      	orrs	r2, r1
10049774:	609a      	str	r2, [r3, #8]
}
10049776:	46c0      	nop			@ (mov r8, r8)
10049778:	46bd      	mov	sp, r7
1004977a:	b002      	add	sp, #8
1004977c:	bd80      	pop	{r7, pc}
1004977e:	46c0      	nop			@ (mov r8, r8)
10049780:	48400000 	.word	0x48400000
10049784:	ff3fffff 	.word	0xff3fffff

10049788 <LL_RCC_GetSPI3I2SClockSource>:
{
10049788:	b580      	push	{r7, lr}
1004978a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
1004978c:	4b03      	ldr	r3, [pc, #12]	@ (1004979c <LL_RCC_GetSPI3I2SClockSource+0x14>)
1004978e:	689a      	ldr	r2, [r3, #8]
10049790:	23c0      	movs	r3, #192	@ 0xc0
10049792:	041b      	lsls	r3, r3, #16
10049794:	4013      	ands	r3, r2
}
10049796:	0018      	movs	r0, r3
10049798:	46bd      	mov	sp, r7
1004979a:	bd80      	pop	{r7, pc}
1004979c:	48400000 	.word	0x48400000

100497a0 <LL_RCC_RC64MPLL_IsReady>:
{
100497a0:	b580      	push	{r7, lr}
100497a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
100497a4:	4b07      	ldr	r3, [pc, #28]	@ (100497c4 <LL_RCC_RC64MPLL_IsReady+0x24>)
100497a6:	681a      	ldr	r2, [r3, #0]
100497a8:	2380      	movs	r3, #128	@ 0x80
100497aa:	01db      	lsls	r3, r3, #7
100497ac:	401a      	ands	r2, r3
100497ae:	2380      	movs	r3, #128	@ 0x80
100497b0:	01db      	lsls	r3, r3, #7
100497b2:	429a      	cmp	r2, r3
100497b4:	d101      	bne.n	100497ba <LL_RCC_RC64MPLL_IsReady+0x1a>
100497b6:	2301      	movs	r3, #1
100497b8:	e000      	b.n	100497bc <LL_RCC_RC64MPLL_IsReady+0x1c>
100497ba:	2300      	movs	r3, #0
}
100497bc:	0018      	movs	r0, r3
100497be:	46bd      	mov	sp, r7
100497c0:	bd80      	pop	{r7, pc}
100497c2:	46c0      	nop			@ (mov r8, r8)
100497c4:	48400000 	.word	0x48400000

100497c8 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
100497c8:	b580      	push	{r7, lr}
100497ca:	b082      	sub	sp, #8
100497cc:	af00      	add	r7, sp, #0
100497ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
100497d0:	687b      	ldr	r3, [r7, #4]
100497d2:	681b      	ldr	r3, [r3, #0]
100497d4:	2201      	movs	r2, #1
100497d6:	4013      	ands	r3, r2
100497d8:	d004      	beq.n	100497e4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
100497da:	687b      	ldr	r3, [r7, #4]
100497dc:	691b      	ldr	r3, [r3, #16]
100497de:	0018      	movs	r0, r3
100497e0:	f7ff ff58 	bl	10049694 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
100497e4:	687b      	ldr	r3, [r7, #4]
100497e6:	681b      	ldr	r3, [r3, #0]
100497e8:	2202      	movs	r2, #2
100497ea:	4013      	ands	r3, r2
100497ec:	d004      	beq.n	100497f8 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
100497ee:	687b      	ldr	r3, [r7, #4]
100497f0:	695b      	ldr	r3, [r3, #20]
100497f2:	0018      	movs	r0, r3
100497f4:	f7ff ff6e 	bl	100496d4 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
100497f8:	687b      	ldr	r3, [r7, #4]
100497fa:	681b      	ldr	r3, [r3, #0]
100497fc:	2208      	movs	r2, #8
100497fe:	4013      	ands	r3, r2
10049800:	d004      	beq.n	1004980c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
10049802:	687b      	ldr	r3, [r7, #4]
10049804:	685b      	ldr	r3, [r3, #4]
10049806:	0018      	movs	r0, r3
10049808:	f7ff ffa8 	bl	1004975c <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
1004980c:	687b      	ldr	r3, [r7, #4]
1004980e:	681b      	ldr	r3, [r3, #0]
10049810:	2210      	movs	r2, #16
10049812:	4013      	ands	r3, r2
10049814:	d004      	beq.n	10049820 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
10049816:	687b      	ldr	r3, [r7, #4]
10049818:	68db      	ldr	r3, [r3, #12]
1004981a:	0018      	movs	r0, r3
1004981c:	f7ff ff7c 	bl	10049718 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10049820:	687b      	ldr	r3, [r7, #4]
10049822:	689b      	ldr	r3, [r3, #8]
10049824:	2220      	movs	r2, #32
10049826:	4013      	ands	r3, r2
10049828:	d004      	beq.n	10049834 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004982a:	687b      	ldr	r3, [r7, #4]
1004982c:	689b      	ldr	r3, [r3, #8]
1004982e:	0018      	movs	r0, r3
10049830:	f7ff ff0e 	bl	10049650 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
10049834:	2300      	movs	r3, #0
}
10049836:	0018      	movs	r0, r3
10049838:	46bd      	mov	sp, r7
1004983a:	b002      	add	sp, #8
1004983c:	bd80      	pop	{r7, pc}
	...

10049840 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
10049840:	b580      	push	{r7, lr}
10049842:	b084      	sub	sp, #16
10049844:	af00      	add	r7, sp, #0
10049846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
10049848:	2300      	movs	r3, #0
1004984a:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
1004984c:	687b      	ldr	r3, [r7, #4]
1004984e:	2b20      	cmp	r3, #32
10049850:	d900      	bls.n	10049854 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
10049852:	e07b      	b.n	1004994c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
10049854:	687b      	ldr	r3, [r7, #4]
10049856:	009a      	lsls	r2, r3, #2
10049858:	4b40      	ldr	r3, [pc, #256]	@ (1004995c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
1004985a:	18d3      	adds	r3, r2, r3
1004985c:	681b      	ldr	r3, [r3, #0]
1004985e:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
10049860:	f7ff ff2c 	bl	100496bc <LL_RCC_GetRFClock>
10049864:	1e03      	subs	r3, r0, #0
10049866:	d002      	beq.n	1004986e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
10049868:	2b04      	cmp	r3, #4
1004986a:	d003      	beq.n	10049874 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
1004986c:	e071      	b.n	10049952 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
1004986e:	4b3c      	ldr	r3, [pc, #240]	@ (10049960 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10049870:	60fb      	str	r3, [r7, #12]
          break;
10049872:	e002      	b.n	1004987a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
10049874:	4b3b      	ldr	r3, [pc, #236]	@ (10049964 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10049876:	60fb      	str	r3, [r7, #12]
          break;
10049878:	46c0      	nop			@ (mov r8, r8)
      break;
1004987a:	e06a      	b.n	10049952 <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
1004987c:	f7ff ff40 	bl	10049700 <LL_RCC_GetSMPSPrescaler>
10049880:	1e03      	subs	r3, r0, #0
10049882:	d004      	beq.n	1004988e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
10049884:	2280      	movs	r2, #128	@ 0x80
10049886:	0152      	lsls	r2, r2, #5
10049888:	4293      	cmp	r3, r2
1004988a:	d003      	beq.n	10049894 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
1004988c:	e061      	b.n	10049952 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
1004988e:	4b36      	ldr	r3, [pc, #216]	@ (10049968 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
10049890:	60fb      	str	r3, [r7, #12]
          break;
10049892:	e002      	b.n	1004989a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
10049894:	4b35      	ldr	r3, [pc, #212]	@ (1004996c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
10049896:	60fb      	str	r3, [r7, #12]
          break;
10049898:	46c0      	nop			@ (mov r8, r8)
      break;
1004989a:	e05a      	b.n	10049952 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004989c:	f7ff fec8 	bl	10049630 <LL_RCC_DIRECT_HSE_IsEnabled>
100498a0:	1e03      	subs	r3, r0, #0
100498a2:	d005      	beq.n	100498b0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
100498a4:	f7ff feb0 	bl	10049608 <LL_RCC_HSE_IsReady>
100498a8:	1e03      	subs	r3, r0, #0
100498aa:	d107      	bne.n	100498bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
100498ac:	2300      	movs	r3, #0
100498ae:	e051      	b.n	10049954 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
100498b0:	f7ff ff76 	bl	100497a0 <LL_RCC_RC64MPLL_IsReady>
100498b4:	1e03      	subs	r3, r0, #0
100498b6:	d101      	bne.n	100498bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
100498b8:	2300      	movs	r3, #0
100498ba:	e04b      	b.n	10049954 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
100498bc:	f7ff ff64 	bl	10049788 <LL_RCC_GetSPI3I2SClockSource>
100498c0:	0003      	movs	r3, r0
100498c2:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
100498c4:	68bb      	ldr	r3, [r7, #8]
100498c6:	2b00      	cmp	r3, #0
100498c8:	d101      	bne.n	100498ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
100498ca:	4b26      	ldr	r3, [pc, #152]	@ (10049964 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
100498cc:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
100498ce:	68ba      	ldr	r2, [r7, #8]
100498d0:	2380      	movs	r3, #128	@ 0x80
100498d2:	03db      	lsls	r3, r3, #15
100498d4:	429a      	cmp	r2, r3
100498d6:	d101      	bne.n	100498dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
100498d8:	4b21      	ldr	r3, [pc, #132]	@ (10049960 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
100498da:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
100498dc:	68ba      	ldr	r2, [r7, #8]
100498de:	2380      	movs	r3, #128	@ 0x80
100498e0:	041b      	lsls	r3, r3, #16
100498e2:	429a      	cmp	r2, r3
100498e4:	d134      	bne.n	10049950 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
100498e6:	4b22      	ldr	r3, [pc, #136]	@ (10049970 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
100498e8:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
100498ea:	e031      	b.n	10049950 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
100498ec:	f7ff ff2a 	bl	10049744 <LL_RCC_GetLPUARTClockSource>
100498f0:	0002      	movs	r2, r0
100498f2:	2380      	movs	r3, #128	@ 0x80
100498f4:	019b      	lsls	r3, r3, #6
100498f6:	429a      	cmp	r2, r3
100498f8:	d103      	bne.n	10049902 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
100498fa:	2380      	movs	r3, #128	@ 0x80
100498fc:	021b      	lsls	r3, r3, #8
100498fe:	60fb      	str	r3, [r7, #12]
          break;
10049900:	e002      	b.n	10049908 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
10049902:	4b18      	ldr	r3, [pc, #96]	@ (10049964 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
10049904:	60fb      	str	r3, [r7, #12]
          break;
10049906:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10049908:	e023      	b.n	10049952 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
1004990a:	f7ff feb7 	bl	1004967c <LL_RCC_LSCO_GetSource>
1004990e:	0003      	movs	r3, r0
10049910:	22c0      	movs	r2, #192	@ 0xc0
10049912:	0252      	lsls	r2, r2, #9
10049914:	4293      	cmp	r3, r2
10049916:	d014      	beq.n	10049942 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
10049918:	22c0      	movs	r2, #192	@ 0xc0
1004991a:	0252      	lsls	r2, r2, #9
1004991c:	4293      	cmp	r3, r2
1004991e:	d813      	bhi.n	10049948 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
10049920:	2280      	movs	r2, #128	@ 0x80
10049922:	0212      	lsls	r2, r2, #8
10049924:	4293      	cmp	r3, r2
10049926:	d004      	beq.n	10049932 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
10049928:	2280      	movs	r2, #128	@ 0x80
1004992a:	0252      	lsls	r2, r2, #9
1004992c:	4293      	cmp	r3, r2
1004992e:	d004      	beq.n	1004993a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
10049930:	e00a      	b.n	10049948 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
10049932:	2380      	movs	r3, #128	@ 0x80
10049934:	021b      	lsls	r3, r3, #8
10049936:	60fb      	str	r3, [r7, #12]
          break;
10049938:	e007      	b.n	1004994a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
1004993a:	23fa      	movs	r3, #250	@ 0xfa
1004993c:	01db      	lsls	r3, r3, #7
1004993e:	60fb      	str	r3, [r7, #12]
          break;
10049940:	e003      	b.n	1004994a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
10049942:	4b0c      	ldr	r3, [pc, #48]	@ (10049974 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
10049944:	60fb      	str	r3, [r7, #12]
          break;
10049946:	e000      	b.n	1004994a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
10049948:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004994a:	e002      	b.n	10049952 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
1004994c:	46c0      	nop			@ (mov r8, r8)
1004994e:	e000      	b.n	10049952 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
10049950:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
10049952:	68fb      	ldr	r3, [r7, #12]
}
10049954:	0018      	movs	r0, r3
10049956:	46bd      	mov	sp, r7
10049958:	b004      	add	sp, #16
1004995a:	bd80      	pop	{r7, pc}
1004995c:	1004fe38 	.word	0x1004fe38
10049960:	01e84800 	.word	0x01e84800
10049964:	00f42400 	.word	0x00f42400
10049968:	007a1200 	.word	0x007a1200
1004996c:	003d0900 	.word	0x003d0900
10049970:	03d09000 	.word	0x03d09000
10049974:	00007a12 	.word	0x00007a12

10049978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10049978:	b580      	push	{r7, lr}
1004997a:	b082      	sub	sp, #8
1004997c:	af00      	add	r7, sp, #0
1004997e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10049980:	687b      	ldr	r3, [r7, #4]
10049982:	2b00      	cmp	r3, #0
10049984:	d101      	bne.n	1004998a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10049986:	2301      	movs	r3, #1
10049988:	e046      	b.n	10049a18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
1004998a:	687b      	ldr	r3, [r7, #4]
1004998c:	2288      	movs	r2, #136	@ 0x88
1004998e:	589b      	ldr	r3, [r3, r2]
10049990:	2b00      	cmp	r3, #0
10049992:	d107      	bne.n	100499a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10049994:	687b      	ldr	r3, [r7, #4]
10049996:	2284      	movs	r2, #132	@ 0x84
10049998:	2100      	movs	r1, #0
1004999a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
1004999c:	687b      	ldr	r3, [r7, #4]
1004999e:	0018      	movs	r0, r3
100499a0:	f7f7 fbe0 	bl	10041164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
100499a4:	687b      	ldr	r3, [r7, #4]
100499a6:	2288      	movs	r2, #136	@ 0x88
100499a8:	2124      	movs	r1, #36	@ 0x24
100499aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
100499ac:	687b      	ldr	r3, [r7, #4]
100499ae:	681b      	ldr	r3, [r3, #0]
100499b0:	681a      	ldr	r2, [r3, #0]
100499b2:	687b      	ldr	r3, [r7, #4]
100499b4:	681b      	ldr	r3, [r3, #0]
100499b6:	2101      	movs	r1, #1
100499b8:	438a      	bics	r2, r1
100499ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
100499bc:	687b      	ldr	r3, [r7, #4]
100499be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100499c0:	2b00      	cmp	r3, #0
100499c2:	d003      	beq.n	100499cc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
100499c4:	687b      	ldr	r3, [r7, #4]
100499c6:	0018      	movs	r0, r3
100499c8:	f000 fa38 	bl	10049e3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
100499cc:	687b      	ldr	r3, [r7, #4]
100499ce:	0018      	movs	r0, r3
100499d0:	f000 f8cc 	bl	10049b6c <UART_SetConfig>
100499d4:	0003      	movs	r3, r0
100499d6:	2b01      	cmp	r3, #1
100499d8:	d101      	bne.n	100499de <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
100499da:	2301      	movs	r3, #1
100499dc:	e01c      	b.n	10049a18 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
100499de:	687b      	ldr	r3, [r7, #4]
100499e0:	681b      	ldr	r3, [r3, #0]
100499e2:	685a      	ldr	r2, [r3, #4]
100499e4:	687b      	ldr	r3, [r7, #4]
100499e6:	681b      	ldr	r3, [r3, #0]
100499e8:	490d      	ldr	r1, [pc, #52]	@ (10049a20 <HAL_UART_Init+0xa8>)
100499ea:	400a      	ands	r2, r1
100499ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
100499ee:	687b      	ldr	r3, [r7, #4]
100499f0:	681b      	ldr	r3, [r3, #0]
100499f2:	689a      	ldr	r2, [r3, #8]
100499f4:	687b      	ldr	r3, [r7, #4]
100499f6:	681b      	ldr	r3, [r3, #0]
100499f8:	212a      	movs	r1, #42	@ 0x2a
100499fa:	438a      	bics	r2, r1
100499fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
100499fe:	687b      	ldr	r3, [r7, #4]
10049a00:	681b      	ldr	r3, [r3, #0]
10049a02:	681a      	ldr	r2, [r3, #0]
10049a04:	687b      	ldr	r3, [r7, #4]
10049a06:	681b      	ldr	r3, [r3, #0]
10049a08:	2101      	movs	r1, #1
10049a0a:	430a      	orrs	r2, r1
10049a0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10049a0e:	687b      	ldr	r3, [r7, #4]
10049a10:	0018      	movs	r0, r3
10049a12:	f000 fac7 	bl	10049fa4 <UART_CheckIdleState>
10049a16:	0003      	movs	r3, r0
}
10049a18:	0018      	movs	r0, r3
10049a1a:	46bd      	mov	sp, r7
10049a1c:	b002      	add	sp, #8
10049a1e:	bd80      	pop	{r7, pc}
10049a20:	ffffb7ff 	.word	0xffffb7ff

10049a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10049a24:	b580      	push	{r7, lr}
10049a26:	b08a      	sub	sp, #40	@ 0x28
10049a28:	af02      	add	r7, sp, #8
10049a2a:	60f8      	str	r0, [r7, #12]
10049a2c:	60b9      	str	r1, [r7, #8]
10049a2e:	603b      	str	r3, [r7, #0]
10049a30:	1dbb      	adds	r3, r7, #6
10049a32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10049a34:	68fb      	ldr	r3, [r7, #12]
10049a36:	2288      	movs	r2, #136	@ 0x88
10049a38:	589b      	ldr	r3, [r3, r2]
10049a3a:	2b20      	cmp	r3, #32
10049a3c:	d000      	beq.n	10049a40 <HAL_UART_Transmit+0x1c>
10049a3e:	e090      	b.n	10049b62 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
10049a40:	68bb      	ldr	r3, [r7, #8]
10049a42:	2b00      	cmp	r3, #0
10049a44:	d003      	beq.n	10049a4e <HAL_UART_Transmit+0x2a>
10049a46:	1dbb      	adds	r3, r7, #6
10049a48:	881b      	ldrh	r3, [r3, #0]
10049a4a:	2b00      	cmp	r3, #0
10049a4c:	d101      	bne.n	10049a52 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
10049a4e:	2301      	movs	r3, #1
10049a50:	e088      	b.n	10049b64 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10049a52:	68fb      	ldr	r3, [r7, #12]
10049a54:	689a      	ldr	r2, [r3, #8]
10049a56:	2380      	movs	r3, #128	@ 0x80
10049a58:	015b      	lsls	r3, r3, #5
10049a5a:	429a      	cmp	r2, r3
10049a5c:	d109      	bne.n	10049a72 <HAL_UART_Transmit+0x4e>
10049a5e:	68fb      	ldr	r3, [r7, #12]
10049a60:	691b      	ldr	r3, [r3, #16]
10049a62:	2b00      	cmp	r3, #0
10049a64:	d105      	bne.n	10049a72 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
10049a66:	68bb      	ldr	r3, [r7, #8]
10049a68:	2201      	movs	r2, #1
10049a6a:	4013      	ands	r3, r2
10049a6c:	d001      	beq.n	10049a72 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
10049a6e:	2301      	movs	r3, #1
10049a70:	e078      	b.n	10049b64 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10049a72:	68fb      	ldr	r3, [r7, #12]
10049a74:	2290      	movs	r2, #144	@ 0x90
10049a76:	2100      	movs	r1, #0
10049a78:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
10049a7a:	68fb      	ldr	r3, [r7, #12]
10049a7c:	2288      	movs	r2, #136	@ 0x88
10049a7e:	2121      	movs	r1, #33	@ 0x21
10049a80:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
10049a82:	f7fc f8a7 	bl	10045bd4 <HAL_GetTick>
10049a86:	0003      	movs	r3, r0
10049a88:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
10049a8a:	68fb      	ldr	r3, [r7, #12]
10049a8c:	1dba      	adds	r2, r7, #6
10049a8e:	2154      	movs	r1, #84	@ 0x54
10049a90:	8812      	ldrh	r2, [r2, #0]
10049a92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
10049a94:	68fb      	ldr	r3, [r7, #12]
10049a96:	1dba      	adds	r2, r7, #6
10049a98:	2156      	movs	r1, #86	@ 0x56
10049a9a:	8812      	ldrh	r2, [r2, #0]
10049a9c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10049a9e:	68fb      	ldr	r3, [r7, #12]
10049aa0:	689a      	ldr	r2, [r3, #8]
10049aa2:	2380      	movs	r3, #128	@ 0x80
10049aa4:	015b      	lsls	r3, r3, #5
10049aa6:	429a      	cmp	r2, r3
10049aa8:	d108      	bne.n	10049abc <HAL_UART_Transmit+0x98>
10049aaa:	68fb      	ldr	r3, [r7, #12]
10049aac:	691b      	ldr	r3, [r3, #16]
10049aae:	2b00      	cmp	r3, #0
10049ab0:	d104      	bne.n	10049abc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
10049ab2:	2300      	movs	r3, #0
10049ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
10049ab6:	68bb      	ldr	r3, [r7, #8]
10049ab8:	61bb      	str	r3, [r7, #24]
10049aba:	e003      	b.n	10049ac4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
10049abc:	68bb      	ldr	r3, [r7, #8]
10049abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10049ac0:	2300      	movs	r3, #0
10049ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
10049ac4:	e030      	b.n	10049b28 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10049ac6:	697a      	ldr	r2, [r7, #20]
10049ac8:	68f8      	ldr	r0, [r7, #12]
10049aca:	683b      	ldr	r3, [r7, #0]
10049acc:	9300      	str	r3, [sp, #0]
10049ace:	0013      	movs	r3, r2
10049ad0:	2200      	movs	r2, #0
10049ad2:	2180      	movs	r1, #128	@ 0x80
10049ad4:	f000 fb10 	bl	1004a0f8 <UART_WaitOnFlagUntilTimeout>
10049ad8:	1e03      	subs	r3, r0, #0
10049ada:	d005      	beq.n	10049ae8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
10049adc:	68fb      	ldr	r3, [r7, #12]
10049ade:	2288      	movs	r2, #136	@ 0x88
10049ae0:	2120      	movs	r1, #32
10049ae2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
10049ae4:	2303      	movs	r3, #3
10049ae6:	e03d      	b.n	10049b64 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
10049ae8:	69fb      	ldr	r3, [r7, #28]
10049aea:	2b00      	cmp	r3, #0
10049aec:	d10b      	bne.n	10049b06 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10049aee:	69bb      	ldr	r3, [r7, #24]
10049af0:	881b      	ldrh	r3, [r3, #0]
10049af2:	001a      	movs	r2, r3
10049af4:	68fb      	ldr	r3, [r7, #12]
10049af6:	681b      	ldr	r3, [r3, #0]
10049af8:	05d2      	lsls	r2, r2, #23
10049afa:	0dd2      	lsrs	r2, r2, #23
10049afc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
10049afe:	69bb      	ldr	r3, [r7, #24]
10049b00:	3302      	adds	r3, #2
10049b02:	61bb      	str	r3, [r7, #24]
10049b04:	e007      	b.n	10049b16 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10049b06:	69fb      	ldr	r3, [r7, #28]
10049b08:	781a      	ldrb	r2, [r3, #0]
10049b0a:	68fb      	ldr	r3, [r7, #12]
10049b0c:	681b      	ldr	r3, [r3, #0]
10049b0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
10049b10:	69fb      	ldr	r3, [r7, #28]
10049b12:	3301      	adds	r3, #1
10049b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10049b16:	68fb      	ldr	r3, [r7, #12]
10049b18:	2256      	movs	r2, #86	@ 0x56
10049b1a:	5a9b      	ldrh	r3, [r3, r2]
10049b1c:	b29b      	uxth	r3, r3
10049b1e:	3b01      	subs	r3, #1
10049b20:	b299      	uxth	r1, r3
10049b22:	68fb      	ldr	r3, [r7, #12]
10049b24:	2256      	movs	r2, #86	@ 0x56
10049b26:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
10049b28:	68fb      	ldr	r3, [r7, #12]
10049b2a:	2256      	movs	r2, #86	@ 0x56
10049b2c:	5a9b      	ldrh	r3, [r3, r2]
10049b2e:	b29b      	uxth	r3, r3
10049b30:	2b00      	cmp	r3, #0
10049b32:	d1c8      	bne.n	10049ac6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10049b34:	697a      	ldr	r2, [r7, #20]
10049b36:	68f8      	ldr	r0, [r7, #12]
10049b38:	683b      	ldr	r3, [r7, #0]
10049b3a:	9300      	str	r3, [sp, #0]
10049b3c:	0013      	movs	r3, r2
10049b3e:	2200      	movs	r2, #0
10049b40:	2140      	movs	r1, #64	@ 0x40
10049b42:	f000 fad9 	bl	1004a0f8 <UART_WaitOnFlagUntilTimeout>
10049b46:	1e03      	subs	r3, r0, #0
10049b48:	d005      	beq.n	10049b56 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
10049b4a:	68fb      	ldr	r3, [r7, #12]
10049b4c:	2288      	movs	r2, #136	@ 0x88
10049b4e:	2120      	movs	r1, #32
10049b50:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
10049b52:	2303      	movs	r3, #3
10049b54:	e006      	b.n	10049b64 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10049b56:	68fb      	ldr	r3, [r7, #12]
10049b58:	2288      	movs	r2, #136	@ 0x88
10049b5a:	2120      	movs	r1, #32
10049b5c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
10049b5e:	2300      	movs	r3, #0
10049b60:	e000      	b.n	10049b64 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
10049b62:	2302      	movs	r3, #2
  }
}
10049b64:	0018      	movs	r0, r3
10049b66:	46bd      	mov	sp, r7
10049b68:	b008      	add	sp, #32
10049b6a:	bd80      	pop	{r7, pc}

10049b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10049b6c:	b5b0      	push	{r4, r5, r7, lr}
10049b6e:	b090      	sub	sp, #64	@ 0x40
10049b70:	af00      	add	r7, sp, #0
10049b72:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10049b74:	231b      	movs	r3, #27
10049b76:	2220      	movs	r2, #32
10049b78:	189b      	adds	r3, r3, r2
10049b7a:	19db      	adds	r3, r3, r7
10049b7c:	2200      	movs	r2, #0
10049b7e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10049b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b82:	689a      	ldr	r2, [r3, #8]
10049b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b86:	691b      	ldr	r3, [r3, #16]
10049b88:	431a      	orrs	r2, r3
10049b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b8c:	695b      	ldr	r3, [r3, #20]
10049b8e:	431a      	orrs	r2, r3
10049b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b92:	69db      	ldr	r3, [r3, #28]
10049b94:	4313      	orrs	r3, r2
10049b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10049b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b9a:	681b      	ldr	r3, [r3, #0]
10049b9c:	681b      	ldr	r3, [r3, #0]
10049b9e:	4aa1      	ldr	r2, [pc, #644]	@ (10049e24 <UART_SetConfig+0x2b8>)
10049ba0:	4013      	ands	r3, r2
10049ba2:	0019      	movs	r1, r3
10049ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049ba6:	681a      	ldr	r2, [r3, #0]
10049ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049baa:	430b      	orrs	r3, r1
10049bac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10049bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bb0:	681b      	ldr	r3, [r3, #0]
10049bb2:	685b      	ldr	r3, [r3, #4]
10049bb4:	4a9c      	ldr	r2, [pc, #624]	@ (10049e28 <UART_SetConfig+0x2bc>)
10049bb6:	4013      	ands	r3, r2
10049bb8:	0018      	movs	r0, r3
10049bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bbc:	68d9      	ldr	r1, [r3, #12]
10049bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bc0:	681a      	ldr	r2, [r3, #0]
10049bc2:	0003      	movs	r3, r0
10049bc4:	430b      	orrs	r3, r1
10049bc6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10049bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bca:	699b      	ldr	r3, [r3, #24]
10049bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10049bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bd0:	681b      	ldr	r3, [r3, #0]
10049bd2:	4a96      	ldr	r2, [pc, #600]	@ (10049e2c <UART_SetConfig+0x2c0>)
10049bd4:	4293      	cmp	r3, r2
10049bd6:	d004      	beq.n	10049be2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10049bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bda:	6a1b      	ldr	r3, [r3, #32]
10049bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10049bde:	4313      	orrs	r3, r2
10049be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10049be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049be4:	681b      	ldr	r3, [r3, #0]
10049be6:	689b      	ldr	r3, [r3, #8]
10049be8:	4a91      	ldr	r2, [pc, #580]	@ (10049e30 <UART_SetConfig+0x2c4>)
10049bea:	4013      	ands	r3, r2
10049bec:	0019      	movs	r1, r3
10049bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bf0:	681a      	ldr	r2, [r3, #0]
10049bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049bf4:	430b      	orrs	r3, r1
10049bf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10049bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bfa:	681b      	ldr	r3, [r3, #0]
10049bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049bfe:	220f      	movs	r2, #15
10049c00:	4393      	bics	r3, r2
10049c02:	0018      	movs	r0, r3
10049c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c06:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10049c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c0a:	681a      	ldr	r2, [r3, #0]
10049c0c:	0003      	movs	r3, r0
10049c0e:	430b      	orrs	r3, r1
10049c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10049c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c14:	681b      	ldr	r3, [r3, #0]
10049c16:	4a85      	ldr	r2, [pc, #532]	@ (10049e2c <UART_SetConfig+0x2c0>)
10049c18:	4293      	cmp	r3, r2
10049c1a:	d16d      	bne.n	10049cf8 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
10049c1c:	2010      	movs	r0, #16
10049c1e:	f7ff fe0f 	bl	10049840 <HAL_RCCEx_GetPeriphCLKFreq>
10049c22:	0003      	movs	r3, r0
10049c24:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10049c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049c28:	2b00      	cmp	r3, #0
10049c2a:	d100      	bne.n	10049c2e <UART_SetConfig+0xc2>
10049c2c:	e0e3      	b.n	10049df6 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10049c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049c32:	4b80      	ldr	r3, [pc, #512]	@ (10049e34 <UART_SetConfig+0x2c8>)
10049c34:	0052      	lsls	r2, r2, #1
10049c36:	5ad3      	ldrh	r3, [r2, r3]
10049c38:	0019      	movs	r1, r3
10049c3a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10049c3c:	f7f6 faf8 	bl	10040230 <__udivsi3>
10049c40:	0003      	movs	r3, r0
10049c42:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10049c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c46:	685a      	ldr	r2, [r3, #4]
10049c48:	0013      	movs	r3, r2
10049c4a:	005b      	lsls	r3, r3, #1
10049c4c:	189b      	adds	r3, r3, r2
10049c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10049c50:	429a      	cmp	r2, r3
10049c52:	d305      	bcc.n	10049c60 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10049c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c56:	685b      	ldr	r3, [r3, #4]
10049c58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10049c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10049c5c:	429a      	cmp	r2, r3
10049c5e:	d906      	bls.n	10049c6e <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
10049c60:	231b      	movs	r3, #27
10049c62:	2220      	movs	r2, #32
10049c64:	189b      	adds	r3, r3, r2
10049c66:	19db      	adds	r3, r3, r7
10049c68:	2201      	movs	r2, #1
10049c6a:	701a      	strb	r2, [r3, #0]
10049c6c:	e0c3      	b.n	10049df6 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10049c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049c70:	61bb      	str	r3, [r7, #24]
10049c72:	2300      	movs	r3, #0
10049c74:	61fb      	str	r3, [r7, #28]
10049c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049c7a:	4b6e      	ldr	r3, [pc, #440]	@ (10049e34 <UART_SetConfig+0x2c8>)
10049c7c:	0052      	lsls	r2, r2, #1
10049c7e:	5ad3      	ldrh	r3, [r2, r3]
10049c80:	613b      	str	r3, [r7, #16]
10049c82:	2300      	movs	r3, #0
10049c84:	617b      	str	r3, [r7, #20]
10049c86:	693a      	ldr	r2, [r7, #16]
10049c88:	697b      	ldr	r3, [r7, #20]
10049c8a:	69b8      	ldr	r0, [r7, #24]
10049c8c:	69f9      	ldr	r1, [r7, #28]
10049c8e:	f7f6 fc6f 	bl	10040570 <__aeabi_uldivmod>
10049c92:	0002      	movs	r2, r0
10049c94:	000b      	movs	r3, r1
10049c96:	0e11      	lsrs	r1, r2, #24
10049c98:	021d      	lsls	r5, r3, #8
10049c9a:	430d      	orrs	r5, r1
10049c9c:	0214      	lsls	r4, r2, #8
10049c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049ca0:	685b      	ldr	r3, [r3, #4]
10049ca2:	085b      	lsrs	r3, r3, #1
10049ca4:	60bb      	str	r3, [r7, #8]
10049ca6:	2300      	movs	r3, #0
10049ca8:	60fb      	str	r3, [r7, #12]
10049caa:	68b8      	ldr	r0, [r7, #8]
10049cac:	68f9      	ldr	r1, [r7, #12]
10049cae:	1900      	adds	r0, r0, r4
10049cb0:	4169      	adcs	r1, r5
10049cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049cb4:	685b      	ldr	r3, [r3, #4]
10049cb6:	603b      	str	r3, [r7, #0]
10049cb8:	2300      	movs	r3, #0
10049cba:	607b      	str	r3, [r7, #4]
10049cbc:	683a      	ldr	r2, [r7, #0]
10049cbe:	687b      	ldr	r3, [r7, #4]
10049cc0:	f7f6 fc56 	bl	10040570 <__aeabi_uldivmod>
10049cc4:	0002      	movs	r2, r0
10049cc6:	000b      	movs	r3, r1
10049cc8:	0013      	movs	r3, r2
10049cca:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10049ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049cce:	23c0      	movs	r3, #192	@ 0xc0
10049cd0:	009b      	lsls	r3, r3, #2
10049cd2:	429a      	cmp	r2, r3
10049cd4:	d309      	bcc.n	10049cea <UART_SetConfig+0x17e>
10049cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049cd8:	2380      	movs	r3, #128	@ 0x80
10049cda:	035b      	lsls	r3, r3, #13
10049cdc:	429a      	cmp	r2, r3
10049cde:	d204      	bcs.n	10049cea <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
10049ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049ce2:	681b      	ldr	r3, [r3, #0]
10049ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049ce6:	60da      	str	r2, [r3, #12]
10049ce8:	e085      	b.n	10049df6 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
10049cea:	231b      	movs	r3, #27
10049cec:	2220      	movs	r2, #32
10049cee:	189b      	adds	r3, r3, r2
10049cf0:	19db      	adds	r3, r3, r7
10049cf2:	2201      	movs	r2, #1
10049cf4:	701a      	strb	r2, [r3, #0]
10049cf6:	e07e      	b.n	10049df6 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10049cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049cfa:	69da      	ldr	r2, [r3, #28]
10049cfc:	2380      	movs	r3, #128	@ 0x80
10049cfe:	021b      	lsls	r3, r3, #8
10049d00:	429a      	cmp	r2, r3
10049d02:	d148      	bne.n	10049d96 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
10049d04:	4b4c      	ldr	r3, [pc, #304]	@ (10049e38 <UART_SetConfig+0x2cc>)
10049d06:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10049d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049d0a:	2b00      	cmp	r3, #0
10049d0c:	d100      	bne.n	10049d10 <UART_SetConfig+0x1a4>
10049d0e:	e072      	b.n	10049df6 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10049d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049d12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049d14:	4b47      	ldr	r3, [pc, #284]	@ (10049e34 <UART_SetConfig+0x2c8>)
10049d16:	0052      	lsls	r2, r2, #1
10049d18:	5ad3      	ldrh	r3, [r2, r3]
10049d1a:	0019      	movs	r1, r3
10049d1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10049d1e:	f7f6 fa87 	bl	10040230 <__udivsi3>
10049d22:	0003      	movs	r3, r0
10049d24:	005a      	lsls	r2, r3, #1
10049d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049d28:	685b      	ldr	r3, [r3, #4]
10049d2a:	085b      	lsrs	r3, r3, #1
10049d2c:	18d2      	adds	r2, r2, r3
10049d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049d30:	685b      	ldr	r3, [r3, #4]
10049d32:	0019      	movs	r1, r3
10049d34:	0010      	movs	r0, r2
10049d36:	f7f6 fa7b 	bl	10040230 <__udivsi3>
10049d3a:	0003      	movs	r3, r0
10049d3c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10049d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049d40:	2b0f      	cmp	r3, #15
10049d42:	d921      	bls.n	10049d88 <UART_SetConfig+0x21c>
10049d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049d46:	2380      	movs	r3, #128	@ 0x80
10049d48:	025b      	lsls	r3, r3, #9
10049d4a:	429a      	cmp	r2, r3
10049d4c:	d21c      	bcs.n	10049d88 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10049d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049d50:	b29a      	uxth	r2, r3
10049d52:	200e      	movs	r0, #14
10049d54:	2420      	movs	r4, #32
10049d56:	1903      	adds	r3, r0, r4
10049d58:	19db      	adds	r3, r3, r7
10049d5a:	210f      	movs	r1, #15
10049d5c:	438a      	bics	r2, r1
10049d5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10049d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049d62:	085b      	lsrs	r3, r3, #1
10049d64:	b29b      	uxth	r3, r3
10049d66:	2207      	movs	r2, #7
10049d68:	4013      	ands	r3, r2
10049d6a:	b299      	uxth	r1, r3
10049d6c:	1903      	adds	r3, r0, r4
10049d6e:	19db      	adds	r3, r3, r7
10049d70:	1902      	adds	r2, r0, r4
10049d72:	19d2      	adds	r2, r2, r7
10049d74:	8812      	ldrh	r2, [r2, #0]
10049d76:	430a      	orrs	r2, r1
10049d78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10049d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049d7c:	681b      	ldr	r3, [r3, #0]
10049d7e:	1902      	adds	r2, r0, r4
10049d80:	19d2      	adds	r2, r2, r7
10049d82:	8812      	ldrh	r2, [r2, #0]
10049d84:	60da      	str	r2, [r3, #12]
10049d86:	e036      	b.n	10049df6 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10049d88:	231b      	movs	r3, #27
10049d8a:	2220      	movs	r2, #32
10049d8c:	189b      	adds	r3, r3, r2
10049d8e:	19db      	adds	r3, r3, r7
10049d90:	2201      	movs	r2, #1
10049d92:	701a      	strb	r2, [r3, #0]
10049d94:	e02f      	b.n	10049df6 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10049d96:	4b28      	ldr	r3, [pc, #160]	@ (10049e38 <UART_SetConfig+0x2cc>)
10049d98:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10049d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049d9c:	2b00      	cmp	r3, #0
10049d9e:	d02a      	beq.n	10049df6 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10049da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049da4:	4b23      	ldr	r3, [pc, #140]	@ (10049e34 <UART_SetConfig+0x2c8>)
10049da6:	0052      	lsls	r2, r2, #1
10049da8:	5ad3      	ldrh	r3, [r2, r3]
10049daa:	0019      	movs	r1, r3
10049dac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10049dae:	f7f6 fa3f 	bl	10040230 <__udivsi3>
10049db2:	0003      	movs	r3, r0
10049db4:	001a      	movs	r2, r3
10049db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049db8:	685b      	ldr	r3, [r3, #4]
10049dba:	085b      	lsrs	r3, r3, #1
10049dbc:	18d2      	adds	r2, r2, r3
10049dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049dc0:	685b      	ldr	r3, [r3, #4]
10049dc2:	0019      	movs	r1, r3
10049dc4:	0010      	movs	r0, r2
10049dc6:	f7f6 fa33 	bl	10040230 <__udivsi3>
10049dca:	0003      	movs	r3, r0
10049dcc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10049dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049dd0:	2b0f      	cmp	r3, #15
10049dd2:	d90a      	bls.n	10049dea <UART_SetConfig+0x27e>
10049dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049dd6:	2380      	movs	r3, #128	@ 0x80
10049dd8:	025b      	lsls	r3, r3, #9
10049dda:	429a      	cmp	r2, r3
10049ddc:	d205      	bcs.n	10049dea <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10049dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049de0:	b29a      	uxth	r2, r3
10049de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049de4:	681b      	ldr	r3, [r3, #0]
10049de6:	60da      	str	r2, [r3, #12]
10049de8:	e005      	b.n	10049df6 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10049dea:	231b      	movs	r3, #27
10049dec:	2220      	movs	r2, #32
10049dee:	189b      	adds	r3, r3, r2
10049df0:	19db      	adds	r3, r3, r7
10049df2:	2201      	movs	r2, #1
10049df4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10049df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049df8:	226a      	movs	r2, #106	@ 0x6a
10049dfa:	2101      	movs	r1, #1
10049dfc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10049dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049e00:	2268      	movs	r2, #104	@ 0x68
10049e02:	2101      	movs	r1, #1
10049e04:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10049e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049e08:	2200      	movs	r2, #0
10049e0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10049e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049e0e:	2200      	movs	r2, #0
10049e10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10049e12:	231b      	movs	r3, #27
10049e14:	2220      	movs	r2, #32
10049e16:	189b      	adds	r3, r3, r2
10049e18:	19db      	adds	r3, r3, r7
10049e1a:	781b      	ldrb	r3, [r3, #0]
}
10049e1c:	0018      	movs	r0, r3
10049e1e:	46bd      	mov	sp, r7
10049e20:	b010      	add	sp, #64	@ 0x40
10049e22:	bdb0      	pop	{r4, r5, r7, pc}
10049e24:	cfff69f3 	.word	0xcfff69f3
10049e28:	ffffcfff 	.word	0xffffcfff
10049e2c:	41005000 	.word	0x41005000
10049e30:	11fff4ff 	.word	0x11fff4ff
10049e34:	1004febc 	.word	0x1004febc
10049e38:	00f42400 	.word	0x00f42400

10049e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10049e3c:	b580      	push	{r7, lr}
10049e3e:	b082      	sub	sp, #8
10049e40:	af00      	add	r7, sp, #0
10049e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10049e44:	687b      	ldr	r3, [r7, #4]
10049e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049e48:	2208      	movs	r2, #8
10049e4a:	4013      	ands	r3, r2
10049e4c:	d00b      	beq.n	10049e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10049e4e:	687b      	ldr	r3, [r7, #4]
10049e50:	681b      	ldr	r3, [r3, #0]
10049e52:	685b      	ldr	r3, [r3, #4]
10049e54:	4a4a      	ldr	r2, [pc, #296]	@ (10049f80 <UART_AdvFeatureConfig+0x144>)
10049e56:	4013      	ands	r3, r2
10049e58:	0019      	movs	r1, r3
10049e5a:	687b      	ldr	r3, [r7, #4]
10049e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10049e5e:	687b      	ldr	r3, [r7, #4]
10049e60:	681b      	ldr	r3, [r3, #0]
10049e62:	430a      	orrs	r2, r1
10049e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10049e66:	687b      	ldr	r3, [r7, #4]
10049e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049e6a:	2201      	movs	r2, #1
10049e6c:	4013      	ands	r3, r2
10049e6e:	d00b      	beq.n	10049e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10049e70:	687b      	ldr	r3, [r7, #4]
10049e72:	681b      	ldr	r3, [r3, #0]
10049e74:	685b      	ldr	r3, [r3, #4]
10049e76:	4a43      	ldr	r2, [pc, #268]	@ (10049f84 <UART_AdvFeatureConfig+0x148>)
10049e78:	4013      	ands	r3, r2
10049e7a:	0019      	movs	r1, r3
10049e7c:	687b      	ldr	r3, [r7, #4]
10049e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10049e80:	687b      	ldr	r3, [r7, #4]
10049e82:	681b      	ldr	r3, [r3, #0]
10049e84:	430a      	orrs	r2, r1
10049e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10049e88:	687b      	ldr	r3, [r7, #4]
10049e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049e8c:	2202      	movs	r2, #2
10049e8e:	4013      	ands	r3, r2
10049e90:	d00b      	beq.n	10049eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10049e92:	687b      	ldr	r3, [r7, #4]
10049e94:	681b      	ldr	r3, [r3, #0]
10049e96:	685b      	ldr	r3, [r3, #4]
10049e98:	4a3b      	ldr	r2, [pc, #236]	@ (10049f88 <UART_AdvFeatureConfig+0x14c>)
10049e9a:	4013      	ands	r3, r2
10049e9c:	0019      	movs	r1, r3
10049e9e:	687b      	ldr	r3, [r7, #4]
10049ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10049ea2:	687b      	ldr	r3, [r7, #4]
10049ea4:	681b      	ldr	r3, [r3, #0]
10049ea6:	430a      	orrs	r2, r1
10049ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10049eaa:	687b      	ldr	r3, [r7, #4]
10049eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049eae:	2204      	movs	r2, #4
10049eb0:	4013      	ands	r3, r2
10049eb2:	d00b      	beq.n	10049ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10049eb4:	687b      	ldr	r3, [r7, #4]
10049eb6:	681b      	ldr	r3, [r3, #0]
10049eb8:	685b      	ldr	r3, [r3, #4]
10049eba:	4a34      	ldr	r2, [pc, #208]	@ (10049f8c <UART_AdvFeatureConfig+0x150>)
10049ebc:	4013      	ands	r3, r2
10049ebe:	0019      	movs	r1, r3
10049ec0:	687b      	ldr	r3, [r7, #4]
10049ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10049ec4:	687b      	ldr	r3, [r7, #4]
10049ec6:	681b      	ldr	r3, [r3, #0]
10049ec8:	430a      	orrs	r2, r1
10049eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10049ecc:	687b      	ldr	r3, [r7, #4]
10049ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049ed0:	2210      	movs	r2, #16
10049ed2:	4013      	ands	r3, r2
10049ed4:	d00b      	beq.n	10049eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10049ed6:	687b      	ldr	r3, [r7, #4]
10049ed8:	681b      	ldr	r3, [r3, #0]
10049eda:	689b      	ldr	r3, [r3, #8]
10049edc:	4a2c      	ldr	r2, [pc, #176]	@ (10049f90 <UART_AdvFeatureConfig+0x154>)
10049ede:	4013      	ands	r3, r2
10049ee0:	0019      	movs	r1, r3
10049ee2:	687b      	ldr	r3, [r7, #4]
10049ee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10049ee6:	687b      	ldr	r3, [r7, #4]
10049ee8:	681b      	ldr	r3, [r3, #0]
10049eea:	430a      	orrs	r2, r1
10049eec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10049eee:	687b      	ldr	r3, [r7, #4]
10049ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049ef2:	2220      	movs	r2, #32
10049ef4:	4013      	ands	r3, r2
10049ef6:	d00b      	beq.n	10049f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10049ef8:	687b      	ldr	r3, [r7, #4]
10049efa:	681b      	ldr	r3, [r3, #0]
10049efc:	689b      	ldr	r3, [r3, #8]
10049efe:	4a25      	ldr	r2, [pc, #148]	@ (10049f94 <UART_AdvFeatureConfig+0x158>)
10049f00:	4013      	ands	r3, r2
10049f02:	0019      	movs	r1, r3
10049f04:	687b      	ldr	r3, [r7, #4]
10049f06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10049f08:	687b      	ldr	r3, [r7, #4]
10049f0a:	681b      	ldr	r3, [r3, #0]
10049f0c:	430a      	orrs	r2, r1
10049f0e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10049f10:	687b      	ldr	r3, [r7, #4]
10049f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049f14:	2240      	movs	r2, #64	@ 0x40
10049f16:	4013      	ands	r3, r2
10049f18:	d01d      	beq.n	10049f56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10049f1a:	687b      	ldr	r3, [r7, #4]
10049f1c:	681b      	ldr	r3, [r3, #0]
10049f1e:	685b      	ldr	r3, [r3, #4]
10049f20:	4a1d      	ldr	r2, [pc, #116]	@ (10049f98 <UART_AdvFeatureConfig+0x15c>)
10049f22:	4013      	ands	r3, r2
10049f24:	0019      	movs	r1, r3
10049f26:	687b      	ldr	r3, [r7, #4]
10049f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049f2a:	687b      	ldr	r3, [r7, #4]
10049f2c:	681b      	ldr	r3, [r3, #0]
10049f2e:	430a      	orrs	r2, r1
10049f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10049f32:	687b      	ldr	r3, [r7, #4]
10049f34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049f36:	2380      	movs	r3, #128	@ 0x80
10049f38:	035b      	lsls	r3, r3, #13
10049f3a:	429a      	cmp	r2, r3
10049f3c:	d10b      	bne.n	10049f56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10049f3e:	687b      	ldr	r3, [r7, #4]
10049f40:	681b      	ldr	r3, [r3, #0]
10049f42:	685b      	ldr	r3, [r3, #4]
10049f44:	4a15      	ldr	r2, [pc, #84]	@ (10049f9c <UART_AdvFeatureConfig+0x160>)
10049f46:	4013      	ands	r3, r2
10049f48:	0019      	movs	r1, r3
10049f4a:	687b      	ldr	r3, [r7, #4]
10049f4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10049f4e:	687b      	ldr	r3, [r7, #4]
10049f50:	681b      	ldr	r3, [r3, #0]
10049f52:	430a      	orrs	r2, r1
10049f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10049f56:	687b      	ldr	r3, [r7, #4]
10049f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049f5a:	2280      	movs	r2, #128	@ 0x80
10049f5c:	4013      	ands	r3, r2
10049f5e:	d00b      	beq.n	10049f78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10049f60:	687b      	ldr	r3, [r7, #4]
10049f62:	681b      	ldr	r3, [r3, #0]
10049f64:	685b      	ldr	r3, [r3, #4]
10049f66:	4a0e      	ldr	r2, [pc, #56]	@ (10049fa0 <UART_AdvFeatureConfig+0x164>)
10049f68:	4013      	ands	r3, r2
10049f6a:	0019      	movs	r1, r3
10049f6c:	687b      	ldr	r3, [r7, #4]
10049f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10049f70:	687b      	ldr	r3, [r7, #4]
10049f72:	681b      	ldr	r3, [r3, #0]
10049f74:	430a      	orrs	r2, r1
10049f76:	605a      	str	r2, [r3, #4]
  }
}
10049f78:	46c0      	nop			@ (mov r8, r8)
10049f7a:	46bd      	mov	sp, r7
10049f7c:	b002      	add	sp, #8
10049f7e:	bd80      	pop	{r7, pc}
10049f80:	ffff7fff 	.word	0xffff7fff
10049f84:	fffdffff 	.word	0xfffdffff
10049f88:	fffeffff 	.word	0xfffeffff
10049f8c:	fffbffff 	.word	0xfffbffff
10049f90:	ffffefff 	.word	0xffffefff
10049f94:	ffffdfff 	.word	0xffffdfff
10049f98:	ffefffff 	.word	0xffefffff
10049f9c:	ff9fffff 	.word	0xff9fffff
10049fa0:	fff7ffff 	.word	0xfff7ffff

10049fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10049fa4:	b580      	push	{r7, lr}
10049fa6:	b092      	sub	sp, #72	@ 0x48
10049fa8:	af02      	add	r7, sp, #8
10049faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10049fac:	687b      	ldr	r3, [r7, #4]
10049fae:	2290      	movs	r2, #144	@ 0x90
10049fb0:	2100      	movs	r1, #0
10049fb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10049fb4:	f7fb fe0e 	bl	10045bd4 <HAL_GetTick>
10049fb8:	0003      	movs	r3, r0
10049fba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10049fbc:	687b      	ldr	r3, [r7, #4]
10049fbe:	681b      	ldr	r3, [r3, #0]
10049fc0:	681b      	ldr	r3, [r3, #0]
10049fc2:	2208      	movs	r2, #8
10049fc4:	4013      	ands	r3, r2
10049fc6:	2b08      	cmp	r3, #8
10049fc8:	d12d      	bne.n	1004a026 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10049fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049fcc:	2280      	movs	r2, #128	@ 0x80
10049fce:	0391      	lsls	r1, r2, #14
10049fd0:	6878      	ldr	r0, [r7, #4]
10049fd2:	4a47      	ldr	r2, [pc, #284]	@ (1004a0f0 <UART_CheckIdleState+0x14c>)
10049fd4:	9200      	str	r2, [sp, #0]
10049fd6:	2200      	movs	r2, #0
10049fd8:	f000 f88e 	bl	1004a0f8 <UART_WaitOnFlagUntilTimeout>
10049fdc:	1e03      	subs	r3, r0, #0
10049fde:	d022      	beq.n	1004a026 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049fe0:	f3ef 8310 	mrs	r3, PRIMASK
10049fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10049fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10049fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
10049fea:	2301      	movs	r3, #1
10049fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049ff0:	f383 8810 	msr	PRIMASK, r3
}
10049ff4:	46c0      	nop			@ (mov r8, r8)
10049ff6:	687b      	ldr	r3, [r7, #4]
10049ff8:	681b      	ldr	r3, [r3, #0]
10049ffa:	681a      	ldr	r2, [r3, #0]
10049ffc:	687b      	ldr	r3, [r7, #4]
10049ffe:	681b      	ldr	r3, [r3, #0]
1004a000:	2180      	movs	r1, #128	@ 0x80
1004a002:	438a      	bics	r2, r1
1004a004:	601a      	str	r2, [r3, #0]
1004a006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004a00c:	f383 8810 	msr	PRIMASK, r3
}
1004a010:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
1004a012:	687b      	ldr	r3, [r7, #4]
1004a014:	2288      	movs	r2, #136	@ 0x88
1004a016:	2120      	movs	r1, #32
1004a018:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004a01a:	687b      	ldr	r3, [r7, #4]
1004a01c:	2284      	movs	r2, #132	@ 0x84
1004a01e:	2100      	movs	r1, #0
1004a020:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004a022:	2303      	movs	r3, #3
1004a024:	e060      	b.n	1004a0e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1004a026:	687b      	ldr	r3, [r7, #4]
1004a028:	681b      	ldr	r3, [r3, #0]
1004a02a:	681b      	ldr	r3, [r3, #0]
1004a02c:	2204      	movs	r2, #4
1004a02e:	4013      	ands	r3, r2
1004a030:	2b04      	cmp	r3, #4
1004a032:	d146      	bne.n	1004a0c2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004a034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a036:	2280      	movs	r2, #128	@ 0x80
1004a038:	03d1      	lsls	r1, r2, #15
1004a03a:	6878      	ldr	r0, [r7, #4]
1004a03c:	4a2c      	ldr	r2, [pc, #176]	@ (1004a0f0 <UART_CheckIdleState+0x14c>)
1004a03e:	9200      	str	r2, [sp, #0]
1004a040:	2200      	movs	r2, #0
1004a042:	f000 f859 	bl	1004a0f8 <UART_WaitOnFlagUntilTimeout>
1004a046:	1e03      	subs	r3, r0, #0
1004a048:	d03b      	beq.n	1004a0c2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a04a:	f3ef 8310 	mrs	r3, PRIMASK
1004a04e:	60fb      	str	r3, [r7, #12]
  return(result);
1004a050:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004a052:	637b      	str	r3, [r7, #52]	@ 0x34
1004a054:	2301      	movs	r3, #1
1004a056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a058:	693b      	ldr	r3, [r7, #16]
1004a05a:	f383 8810 	msr	PRIMASK, r3
}
1004a05e:	46c0      	nop			@ (mov r8, r8)
1004a060:	687b      	ldr	r3, [r7, #4]
1004a062:	681b      	ldr	r3, [r3, #0]
1004a064:	681a      	ldr	r2, [r3, #0]
1004a066:	687b      	ldr	r3, [r7, #4]
1004a068:	681b      	ldr	r3, [r3, #0]
1004a06a:	4922      	ldr	r1, [pc, #136]	@ (1004a0f4 <UART_CheckIdleState+0x150>)
1004a06c:	400a      	ands	r2, r1
1004a06e:	601a      	str	r2, [r3, #0]
1004a070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004a072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a074:	697b      	ldr	r3, [r7, #20]
1004a076:	f383 8810 	msr	PRIMASK, r3
}
1004a07a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a07c:	f3ef 8310 	mrs	r3, PRIMASK
1004a080:	61bb      	str	r3, [r7, #24]
  return(result);
1004a082:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1004a084:	633b      	str	r3, [r7, #48]	@ 0x30
1004a086:	2301      	movs	r3, #1
1004a088:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a08a:	69fb      	ldr	r3, [r7, #28]
1004a08c:	f383 8810 	msr	PRIMASK, r3
}
1004a090:	46c0      	nop			@ (mov r8, r8)
1004a092:	687b      	ldr	r3, [r7, #4]
1004a094:	681b      	ldr	r3, [r3, #0]
1004a096:	689a      	ldr	r2, [r3, #8]
1004a098:	687b      	ldr	r3, [r7, #4]
1004a09a:	681b      	ldr	r3, [r3, #0]
1004a09c:	2101      	movs	r1, #1
1004a09e:	438a      	bics	r2, r1
1004a0a0:	609a      	str	r2, [r3, #8]
1004a0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004a0a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a0a6:	6a3b      	ldr	r3, [r7, #32]
1004a0a8:	f383 8810 	msr	PRIMASK, r3
}
1004a0ac:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
1004a0ae:	687b      	ldr	r3, [r7, #4]
1004a0b0:	228c      	movs	r2, #140	@ 0x8c
1004a0b2:	2120      	movs	r1, #32
1004a0b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004a0b6:	687b      	ldr	r3, [r7, #4]
1004a0b8:	2284      	movs	r2, #132	@ 0x84
1004a0ba:	2100      	movs	r1, #0
1004a0bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004a0be:	2303      	movs	r3, #3
1004a0c0:	e012      	b.n	1004a0e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1004a0c2:	687b      	ldr	r3, [r7, #4]
1004a0c4:	2288      	movs	r2, #136	@ 0x88
1004a0c6:	2120      	movs	r1, #32
1004a0c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
1004a0ca:	687b      	ldr	r3, [r7, #4]
1004a0cc:	228c      	movs	r2, #140	@ 0x8c
1004a0ce:	2120      	movs	r1, #32
1004a0d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004a0d2:	687b      	ldr	r3, [r7, #4]
1004a0d4:	2200      	movs	r2, #0
1004a0d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
1004a0d8:	687b      	ldr	r3, [r7, #4]
1004a0da:	2200      	movs	r2, #0
1004a0dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
1004a0de:	687b      	ldr	r3, [r7, #4]
1004a0e0:	2284      	movs	r2, #132	@ 0x84
1004a0e2:	2100      	movs	r1, #0
1004a0e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004a0e6:	2300      	movs	r3, #0
}
1004a0e8:	0018      	movs	r0, r3
1004a0ea:	46bd      	mov	sp, r7
1004a0ec:	b010      	add	sp, #64	@ 0x40
1004a0ee:	bd80      	pop	{r7, pc}
1004a0f0:	01ffffff 	.word	0x01ffffff
1004a0f4:	fffffedf 	.word	0xfffffedf

1004a0f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1004a0f8:	b580      	push	{r7, lr}
1004a0fa:	b084      	sub	sp, #16
1004a0fc:	af00      	add	r7, sp, #0
1004a0fe:	60f8      	str	r0, [r7, #12]
1004a100:	60b9      	str	r1, [r7, #8]
1004a102:	603b      	str	r3, [r7, #0]
1004a104:	1dfb      	adds	r3, r7, #7
1004a106:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004a108:	e051      	b.n	1004a1ae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1004a10a:	69bb      	ldr	r3, [r7, #24]
1004a10c:	3301      	adds	r3, #1
1004a10e:	d04e      	beq.n	1004a1ae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1004a110:	f7fb fd60 	bl	10045bd4 <HAL_GetTick>
1004a114:	0002      	movs	r2, r0
1004a116:	683b      	ldr	r3, [r7, #0]
1004a118:	1ad3      	subs	r3, r2, r3
1004a11a:	69ba      	ldr	r2, [r7, #24]
1004a11c:	429a      	cmp	r2, r3
1004a11e:	d302      	bcc.n	1004a126 <UART_WaitOnFlagUntilTimeout+0x2e>
1004a120:	69bb      	ldr	r3, [r7, #24]
1004a122:	2b00      	cmp	r3, #0
1004a124:	d101      	bne.n	1004a12a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1004a126:	2303      	movs	r3, #3
1004a128:	e051      	b.n	1004a1ce <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004a12a:	68fb      	ldr	r3, [r7, #12]
1004a12c:	681b      	ldr	r3, [r3, #0]
1004a12e:	681b      	ldr	r3, [r3, #0]
1004a130:	2204      	movs	r2, #4
1004a132:	4013      	ands	r3, r2
1004a134:	d03b      	beq.n	1004a1ae <UART_WaitOnFlagUntilTimeout+0xb6>
1004a136:	68bb      	ldr	r3, [r7, #8]
1004a138:	2b80      	cmp	r3, #128	@ 0x80
1004a13a:	d038      	beq.n	1004a1ae <UART_WaitOnFlagUntilTimeout+0xb6>
1004a13c:	68bb      	ldr	r3, [r7, #8]
1004a13e:	2b40      	cmp	r3, #64	@ 0x40
1004a140:	d035      	beq.n	1004a1ae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004a142:	68fb      	ldr	r3, [r7, #12]
1004a144:	681b      	ldr	r3, [r3, #0]
1004a146:	69db      	ldr	r3, [r3, #28]
1004a148:	2208      	movs	r2, #8
1004a14a:	4013      	ands	r3, r2
1004a14c:	2b08      	cmp	r3, #8
1004a14e:	d111      	bne.n	1004a174 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004a150:	68fb      	ldr	r3, [r7, #12]
1004a152:	681b      	ldr	r3, [r3, #0]
1004a154:	2208      	movs	r2, #8
1004a156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004a158:	68fb      	ldr	r3, [r7, #12]
1004a15a:	0018      	movs	r0, r3
1004a15c:	f000 f83c 	bl	1004a1d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004a160:	68fb      	ldr	r3, [r7, #12]
1004a162:	2290      	movs	r2, #144	@ 0x90
1004a164:	2108      	movs	r1, #8
1004a166:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004a168:	68fb      	ldr	r3, [r7, #12]
1004a16a:	2284      	movs	r2, #132	@ 0x84
1004a16c:	2100      	movs	r1, #0
1004a16e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
1004a170:	2301      	movs	r3, #1
1004a172:	e02c      	b.n	1004a1ce <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1004a174:	68fb      	ldr	r3, [r7, #12]
1004a176:	681b      	ldr	r3, [r3, #0]
1004a178:	69da      	ldr	r2, [r3, #28]
1004a17a:	2380      	movs	r3, #128	@ 0x80
1004a17c:	011b      	lsls	r3, r3, #4
1004a17e:	401a      	ands	r2, r3
1004a180:	2380      	movs	r3, #128	@ 0x80
1004a182:	011b      	lsls	r3, r3, #4
1004a184:	429a      	cmp	r2, r3
1004a186:	d112      	bne.n	1004a1ae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004a188:	68fb      	ldr	r3, [r7, #12]
1004a18a:	681b      	ldr	r3, [r3, #0]
1004a18c:	2280      	movs	r2, #128	@ 0x80
1004a18e:	0112      	lsls	r2, r2, #4
1004a190:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004a192:	68fb      	ldr	r3, [r7, #12]
1004a194:	0018      	movs	r0, r3
1004a196:	f000 f81f 	bl	1004a1d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004a19a:	68fb      	ldr	r3, [r7, #12]
1004a19c:	2290      	movs	r2, #144	@ 0x90
1004a19e:	2120      	movs	r1, #32
1004a1a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004a1a2:	68fb      	ldr	r3, [r7, #12]
1004a1a4:	2284      	movs	r2, #132	@ 0x84
1004a1a6:	2100      	movs	r1, #0
1004a1a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004a1aa:	2303      	movs	r3, #3
1004a1ac:	e00f      	b.n	1004a1ce <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004a1ae:	68fb      	ldr	r3, [r7, #12]
1004a1b0:	681b      	ldr	r3, [r3, #0]
1004a1b2:	69db      	ldr	r3, [r3, #28]
1004a1b4:	68ba      	ldr	r2, [r7, #8]
1004a1b6:	4013      	ands	r3, r2
1004a1b8:	68ba      	ldr	r2, [r7, #8]
1004a1ba:	1ad3      	subs	r3, r2, r3
1004a1bc:	425a      	negs	r2, r3
1004a1be:	4153      	adcs	r3, r2
1004a1c0:	b2db      	uxtb	r3, r3
1004a1c2:	001a      	movs	r2, r3
1004a1c4:	1dfb      	adds	r3, r7, #7
1004a1c6:	781b      	ldrb	r3, [r3, #0]
1004a1c8:	429a      	cmp	r2, r3
1004a1ca:	d09e      	beq.n	1004a10a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004a1cc:	2300      	movs	r3, #0
}
1004a1ce:	0018      	movs	r0, r3
1004a1d0:	46bd      	mov	sp, r7
1004a1d2:	b004      	add	sp, #16
1004a1d4:	bd80      	pop	{r7, pc}
	...

1004a1d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004a1d8:	b580      	push	{r7, lr}
1004a1da:	b08e      	sub	sp, #56	@ 0x38
1004a1dc:	af00      	add	r7, sp, #0
1004a1de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a1e0:	f3ef 8310 	mrs	r3, PRIMASK
1004a1e4:	617b      	str	r3, [r7, #20]
  return(result);
1004a1e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004a1e8:	637b      	str	r3, [r7, #52]	@ 0x34
1004a1ea:	2301      	movs	r3, #1
1004a1ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a1ee:	69bb      	ldr	r3, [r7, #24]
1004a1f0:	f383 8810 	msr	PRIMASK, r3
}
1004a1f4:	46c0      	nop			@ (mov r8, r8)
1004a1f6:	687b      	ldr	r3, [r7, #4]
1004a1f8:	681b      	ldr	r3, [r3, #0]
1004a1fa:	681a      	ldr	r2, [r3, #0]
1004a1fc:	687b      	ldr	r3, [r7, #4]
1004a1fe:	681b      	ldr	r3, [r3, #0]
1004a200:	4926      	ldr	r1, [pc, #152]	@ (1004a29c <UART_EndRxTransfer+0xc4>)
1004a202:	400a      	ands	r2, r1
1004a204:	601a      	str	r2, [r3, #0]
1004a206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004a208:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a20a:	69fb      	ldr	r3, [r7, #28]
1004a20c:	f383 8810 	msr	PRIMASK, r3
}
1004a210:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a212:	f3ef 8310 	mrs	r3, PRIMASK
1004a216:	623b      	str	r3, [r7, #32]
  return(result);
1004a218:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004a21a:	633b      	str	r3, [r7, #48]	@ 0x30
1004a21c:	2301      	movs	r3, #1
1004a21e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a222:	f383 8810 	msr	PRIMASK, r3
}
1004a226:	46c0      	nop			@ (mov r8, r8)
1004a228:	687b      	ldr	r3, [r7, #4]
1004a22a:	681b      	ldr	r3, [r3, #0]
1004a22c:	689a      	ldr	r2, [r3, #8]
1004a22e:	687b      	ldr	r3, [r7, #4]
1004a230:	681b      	ldr	r3, [r3, #0]
1004a232:	491b      	ldr	r1, [pc, #108]	@ (1004a2a0 <UART_EndRxTransfer+0xc8>)
1004a234:	400a      	ands	r2, r1
1004a236:	609a      	str	r2, [r3, #8]
1004a238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004a23a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004a23e:	f383 8810 	msr	PRIMASK, r3
}
1004a242:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004a244:	687b      	ldr	r3, [r7, #4]
1004a246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004a248:	2b01      	cmp	r3, #1
1004a24a:	d118      	bne.n	1004a27e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a24c:	f3ef 8310 	mrs	r3, PRIMASK
1004a250:	60bb      	str	r3, [r7, #8]
  return(result);
1004a252:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004a254:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004a256:	2301      	movs	r3, #1
1004a258:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a25a:	68fb      	ldr	r3, [r7, #12]
1004a25c:	f383 8810 	msr	PRIMASK, r3
}
1004a260:	46c0      	nop			@ (mov r8, r8)
1004a262:	687b      	ldr	r3, [r7, #4]
1004a264:	681b      	ldr	r3, [r3, #0]
1004a266:	681a      	ldr	r2, [r3, #0]
1004a268:	687b      	ldr	r3, [r7, #4]
1004a26a:	681b      	ldr	r3, [r3, #0]
1004a26c:	2110      	movs	r1, #16
1004a26e:	438a      	bics	r2, r1
1004a270:	601a      	str	r2, [r3, #0]
1004a272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004a274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a276:	693b      	ldr	r3, [r7, #16]
1004a278:	f383 8810 	msr	PRIMASK, r3
}
1004a27c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004a27e:	687b      	ldr	r3, [r7, #4]
1004a280:	228c      	movs	r2, #140	@ 0x8c
1004a282:	2120      	movs	r1, #32
1004a284:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004a286:	687b      	ldr	r3, [r7, #4]
1004a288:	2200      	movs	r2, #0
1004a28a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004a28c:	687b      	ldr	r3, [r7, #4]
1004a28e:	2200      	movs	r2, #0
1004a290:	675a      	str	r2, [r3, #116]	@ 0x74
}
1004a292:	46c0      	nop			@ (mov r8, r8)
1004a294:	46bd      	mov	sp, r7
1004a296:	b00e      	add	sp, #56	@ 0x38
1004a298:	bd80      	pop	{r7, pc}
1004a29a:	46c0      	nop			@ (mov r8, r8)
1004a29c:	fffffedf 	.word	0xfffffedf
1004a2a0:	effffffe 	.word	0xeffffffe

1004a2a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
1004a2a4:	b580      	push	{r7, lr}
1004a2a6:	b084      	sub	sp, #16
1004a2a8:	af00      	add	r7, sp, #0
1004a2aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1004a2ac:	687b      	ldr	r3, [r7, #4]
1004a2ae:	2284      	movs	r2, #132	@ 0x84
1004a2b0:	5c9b      	ldrb	r3, [r3, r2]
1004a2b2:	2b01      	cmp	r3, #1
1004a2b4:	d101      	bne.n	1004a2ba <HAL_UARTEx_DisableFifoMode+0x16>
1004a2b6:	2302      	movs	r3, #2
1004a2b8:	e027      	b.n	1004a30a <HAL_UARTEx_DisableFifoMode+0x66>
1004a2ba:	687b      	ldr	r3, [r7, #4]
1004a2bc:	2284      	movs	r2, #132	@ 0x84
1004a2be:	2101      	movs	r1, #1
1004a2c0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004a2c2:	687b      	ldr	r3, [r7, #4]
1004a2c4:	2288      	movs	r2, #136	@ 0x88
1004a2c6:	2124      	movs	r1, #36	@ 0x24
1004a2c8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004a2ca:	687b      	ldr	r3, [r7, #4]
1004a2cc:	681b      	ldr	r3, [r3, #0]
1004a2ce:	681b      	ldr	r3, [r3, #0]
1004a2d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004a2d2:	687b      	ldr	r3, [r7, #4]
1004a2d4:	681b      	ldr	r3, [r3, #0]
1004a2d6:	681a      	ldr	r2, [r3, #0]
1004a2d8:	687b      	ldr	r3, [r7, #4]
1004a2da:	681b      	ldr	r3, [r3, #0]
1004a2dc:	2101      	movs	r1, #1
1004a2de:	438a      	bics	r2, r1
1004a2e0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1004a2e2:	68fb      	ldr	r3, [r7, #12]
1004a2e4:	4a0b      	ldr	r2, [pc, #44]	@ (1004a314 <HAL_UARTEx_DisableFifoMode+0x70>)
1004a2e6:	4013      	ands	r3, r2
1004a2e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1004a2ea:	687b      	ldr	r3, [r7, #4]
1004a2ec:	2200      	movs	r2, #0
1004a2ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004a2f0:	687b      	ldr	r3, [r7, #4]
1004a2f2:	681b      	ldr	r3, [r3, #0]
1004a2f4:	68fa      	ldr	r2, [r7, #12]
1004a2f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004a2f8:	687b      	ldr	r3, [r7, #4]
1004a2fa:	2288      	movs	r2, #136	@ 0x88
1004a2fc:	2120      	movs	r1, #32
1004a2fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004a300:	687b      	ldr	r3, [r7, #4]
1004a302:	2284      	movs	r2, #132	@ 0x84
1004a304:	2100      	movs	r1, #0
1004a306:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004a308:	2300      	movs	r3, #0
}
1004a30a:	0018      	movs	r0, r3
1004a30c:	46bd      	mov	sp, r7
1004a30e:	b004      	add	sp, #16
1004a310:	bd80      	pop	{r7, pc}
1004a312:	46c0      	nop			@ (mov r8, r8)
1004a314:	dfffffff 	.word	0xdfffffff

1004a318 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004a318:	b580      	push	{r7, lr}
1004a31a:	b084      	sub	sp, #16
1004a31c:	af00      	add	r7, sp, #0
1004a31e:	6078      	str	r0, [r7, #4]
1004a320:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004a322:	687b      	ldr	r3, [r7, #4]
1004a324:	2284      	movs	r2, #132	@ 0x84
1004a326:	5c9b      	ldrb	r3, [r3, r2]
1004a328:	2b01      	cmp	r3, #1
1004a32a:	d101      	bne.n	1004a330 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004a32c:	2302      	movs	r3, #2
1004a32e:	e02e      	b.n	1004a38e <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004a330:	687b      	ldr	r3, [r7, #4]
1004a332:	2284      	movs	r2, #132	@ 0x84
1004a334:	2101      	movs	r1, #1
1004a336:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004a338:	687b      	ldr	r3, [r7, #4]
1004a33a:	2288      	movs	r2, #136	@ 0x88
1004a33c:	2124      	movs	r1, #36	@ 0x24
1004a33e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004a340:	687b      	ldr	r3, [r7, #4]
1004a342:	681b      	ldr	r3, [r3, #0]
1004a344:	681b      	ldr	r3, [r3, #0]
1004a346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004a348:	687b      	ldr	r3, [r7, #4]
1004a34a:	681b      	ldr	r3, [r3, #0]
1004a34c:	681a      	ldr	r2, [r3, #0]
1004a34e:	687b      	ldr	r3, [r7, #4]
1004a350:	681b      	ldr	r3, [r3, #0]
1004a352:	2101      	movs	r1, #1
1004a354:	438a      	bics	r2, r1
1004a356:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1004a358:	687b      	ldr	r3, [r7, #4]
1004a35a:	681b      	ldr	r3, [r3, #0]
1004a35c:	689b      	ldr	r3, [r3, #8]
1004a35e:	00db      	lsls	r3, r3, #3
1004a360:	08d9      	lsrs	r1, r3, #3
1004a362:	687b      	ldr	r3, [r7, #4]
1004a364:	681b      	ldr	r3, [r3, #0]
1004a366:	683a      	ldr	r2, [r7, #0]
1004a368:	430a      	orrs	r2, r1
1004a36a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004a36c:	687b      	ldr	r3, [r7, #4]
1004a36e:	0018      	movs	r0, r3
1004a370:	f000 f854 	bl	1004a41c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004a374:	687b      	ldr	r3, [r7, #4]
1004a376:	681b      	ldr	r3, [r3, #0]
1004a378:	68fa      	ldr	r2, [r7, #12]
1004a37a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004a37c:	687b      	ldr	r3, [r7, #4]
1004a37e:	2288      	movs	r2, #136	@ 0x88
1004a380:	2120      	movs	r1, #32
1004a382:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004a384:	687b      	ldr	r3, [r7, #4]
1004a386:	2284      	movs	r2, #132	@ 0x84
1004a388:	2100      	movs	r1, #0
1004a38a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004a38c:	2300      	movs	r3, #0
}
1004a38e:	0018      	movs	r0, r3
1004a390:	46bd      	mov	sp, r7
1004a392:	b004      	add	sp, #16
1004a394:	bd80      	pop	{r7, pc}
	...

1004a398 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004a398:	b580      	push	{r7, lr}
1004a39a:	b084      	sub	sp, #16
1004a39c:	af00      	add	r7, sp, #0
1004a39e:	6078      	str	r0, [r7, #4]
1004a3a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004a3a2:	687b      	ldr	r3, [r7, #4]
1004a3a4:	2284      	movs	r2, #132	@ 0x84
1004a3a6:	5c9b      	ldrb	r3, [r3, r2]
1004a3a8:	2b01      	cmp	r3, #1
1004a3aa:	d101      	bne.n	1004a3b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1004a3ac:	2302      	movs	r3, #2
1004a3ae:	e02f      	b.n	1004a410 <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004a3b0:	687b      	ldr	r3, [r7, #4]
1004a3b2:	2284      	movs	r2, #132	@ 0x84
1004a3b4:	2101      	movs	r1, #1
1004a3b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004a3b8:	687b      	ldr	r3, [r7, #4]
1004a3ba:	2288      	movs	r2, #136	@ 0x88
1004a3bc:	2124      	movs	r1, #36	@ 0x24
1004a3be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004a3c0:	687b      	ldr	r3, [r7, #4]
1004a3c2:	681b      	ldr	r3, [r3, #0]
1004a3c4:	681b      	ldr	r3, [r3, #0]
1004a3c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004a3c8:	687b      	ldr	r3, [r7, #4]
1004a3ca:	681b      	ldr	r3, [r3, #0]
1004a3cc:	681a      	ldr	r2, [r3, #0]
1004a3ce:	687b      	ldr	r3, [r7, #4]
1004a3d0:	681b      	ldr	r3, [r3, #0]
1004a3d2:	2101      	movs	r1, #1
1004a3d4:	438a      	bics	r2, r1
1004a3d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1004a3d8:	687b      	ldr	r3, [r7, #4]
1004a3da:	681b      	ldr	r3, [r3, #0]
1004a3dc:	689b      	ldr	r3, [r3, #8]
1004a3de:	4a0e      	ldr	r2, [pc, #56]	@ (1004a418 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004a3e0:	4013      	ands	r3, r2
1004a3e2:	0019      	movs	r1, r3
1004a3e4:	687b      	ldr	r3, [r7, #4]
1004a3e6:	681b      	ldr	r3, [r3, #0]
1004a3e8:	683a      	ldr	r2, [r7, #0]
1004a3ea:	430a      	orrs	r2, r1
1004a3ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004a3ee:	687b      	ldr	r3, [r7, #4]
1004a3f0:	0018      	movs	r0, r3
1004a3f2:	f000 f813 	bl	1004a41c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004a3f6:	687b      	ldr	r3, [r7, #4]
1004a3f8:	681b      	ldr	r3, [r3, #0]
1004a3fa:	68fa      	ldr	r2, [r7, #12]
1004a3fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004a3fe:	687b      	ldr	r3, [r7, #4]
1004a400:	2288      	movs	r2, #136	@ 0x88
1004a402:	2120      	movs	r1, #32
1004a404:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004a406:	687b      	ldr	r3, [r7, #4]
1004a408:	2284      	movs	r2, #132	@ 0x84
1004a40a:	2100      	movs	r1, #0
1004a40c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004a40e:	2300      	movs	r3, #0
}
1004a410:	0018      	movs	r0, r3
1004a412:	46bd      	mov	sp, r7
1004a414:	b004      	add	sp, #16
1004a416:	bd80      	pop	{r7, pc}
1004a418:	f1ffffff 	.word	0xf1ffffff

1004a41c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1004a41c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a41e:	b085      	sub	sp, #20
1004a420:	af00      	add	r7, sp, #0
1004a422:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004a424:	687b      	ldr	r3, [r7, #4]
1004a426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1004a428:	2b00      	cmp	r3, #0
1004a42a:	d108      	bne.n	1004a43e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
1004a42c:	687b      	ldr	r3, [r7, #4]
1004a42e:	226a      	movs	r2, #106	@ 0x6a
1004a430:	2101      	movs	r1, #1
1004a432:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004a434:	687b      	ldr	r3, [r7, #4]
1004a436:	2268      	movs	r2, #104	@ 0x68
1004a438:	2101      	movs	r1, #1
1004a43a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
1004a43c:	e043      	b.n	1004a4c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004a43e:	260f      	movs	r6, #15
1004a440:	19bb      	adds	r3, r7, r6
1004a442:	2208      	movs	r2, #8
1004a444:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
1004a446:	200e      	movs	r0, #14
1004a448:	183b      	adds	r3, r7, r0
1004a44a:	2208      	movs	r2, #8
1004a44c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004a44e:	687b      	ldr	r3, [r7, #4]
1004a450:	681b      	ldr	r3, [r3, #0]
1004a452:	689b      	ldr	r3, [r3, #8]
1004a454:	0e5b      	lsrs	r3, r3, #25
1004a456:	b2da      	uxtb	r2, r3
1004a458:	240d      	movs	r4, #13
1004a45a:	193b      	adds	r3, r7, r4
1004a45c:	2107      	movs	r1, #7
1004a45e:	400a      	ands	r2, r1
1004a460:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004a462:	687b      	ldr	r3, [r7, #4]
1004a464:	681b      	ldr	r3, [r3, #0]
1004a466:	689b      	ldr	r3, [r3, #8]
1004a468:	0f5b      	lsrs	r3, r3, #29
1004a46a:	b2da      	uxtb	r2, r3
1004a46c:	250c      	movs	r5, #12
1004a46e:	197b      	adds	r3, r7, r5
1004a470:	2107      	movs	r1, #7
1004a472:	400a      	ands	r2, r1
1004a474:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004a476:	183b      	adds	r3, r7, r0
1004a478:	781b      	ldrb	r3, [r3, #0]
1004a47a:	197a      	adds	r2, r7, r5
1004a47c:	7812      	ldrb	r2, [r2, #0]
1004a47e:	4914      	ldr	r1, [pc, #80]	@ (1004a4d0 <UARTEx_SetNbDataToProcess+0xb4>)
1004a480:	5c8a      	ldrb	r2, [r1, r2]
1004a482:	435a      	muls	r2, r3
1004a484:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
1004a486:	197b      	adds	r3, r7, r5
1004a488:	781b      	ldrb	r3, [r3, #0]
1004a48a:	4a12      	ldr	r2, [pc, #72]	@ (1004a4d4 <UARTEx_SetNbDataToProcess+0xb8>)
1004a48c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004a48e:	0019      	movs	r1, r3
1004a490:	f7f5 ff58 	bl	10040344 <__divsi3>
1004a494:	0003      	movs	r3, r0
1004a496:	b299      	uxth	r1, r3
1004a498:	687b      	ldr	r3, [r7, #4]
1004a49a:	226a      	movs	r2, #106	@ 0x6a
1004a49c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004a49e:	19bb      	adds	r3, r7, r6
1004a4a0:	781b      	ldrb	r3, [r3, #0]
1004a4a2:	193a      	adds	r2, r7, r4
1004a4a4:	7812      	ldrb	r2, [r2, #0]
1004a4a6:	490a      	ldr	r1, [pc, #40]	@ (1004a4d0 <UARTEx_SetNbDataToProcess+0xb4>)
1004a4a8:	5c8a      	ldrb	r2, [r1, r2]
1004a4aa:	435a      	muls	r2, r3
1004a4ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004a4ae:	193b      	adds	r3, r7, r4
1004a4b0:	781b      	ldrb	r3, [r3, #0]
1004a4b2:	4a08      	ldr	r2, [pc, #32]	@ (1004a4d4 <UARTEx_SetNbDataToProcess+0xb8>)
1004a4b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004a4b6:	0019      	movs	r1, r3
1004a4b8:	f7f5 ff44 	bl	10040344 <__divsi3>
1004a4bc:	0003      	movs	r3, r0
1004a4be:	b299      	uxth	r1, r3
1004a4c0:	687b      	ldr	r3, [r7, #4]
1004a4c2:	2268      	movs	r2, #104	@ 0x68
1004a4c4:	5299      	strh	r1, [r3, r2]
}
1004a4c6:	46c0      	nop			@ (mov r8, r8)
1004a4c8:	46bd      	mov	sp, r7
1004a4ca:	b005      	add	sp, #20
1004a4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a4ce:	46c0      	nop			@ (mov r8, r8)
1004a4d0:	1004fed4 	.word	0x1004fed4
1004a4d4:	1004fedc 	.word	0x1004fedc

1004a4d8 <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
1004a4d8:	b580      	push	{r7, lr}
1004a4da:	b088      	sub	sp, #32
1004a4dc:	af00      	add	r7, sp, #0
1004a4de:	6078      	str	r0, [r7, #4]
1004a4e0:	000a      	movs	r2, r1
1004a4e2:	1cbb      	adds	r3, r7, #2
1004a4e4:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
1004a4e6:	231b      	movs	r3, #27
1004a4e8:	18fb      	adds	r3, r7, r3
1004a4ea:	2200      	movs	r2, #0
1004a4ec:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
1004a4ee:	687b      	ldr	r3, [r7, #4]
1004a4f0:	781b      	ldrb	r3, [r3, #0]
1004a4f2:	2b04      	cmp	r3, #4
1004a4f4:	d003      	beq.n	1004a4fe <BLE_STACK_Event+0x26>
1004a4f6:	687b      	ldr	r3, [r7, #4]
1004a4f8:	781b      	ldrb	r3, [r3, #0]
1004a4fa:	2b82      	cmp	r3, #130	@ 0x82
1004a4fc:	d116      	bne.n	1004a52c <BLE_STACK_Event+0x54>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
1004a4fe:	687b      	ldr	r3, [r7, #4]
1004a500:	3301      	adds	r3, #1
1004a502:	617b      	str	r3, [r7, #20]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
1004a504:	687b      	ldr	r3, [r7, #4]
1004a506:	781b      	ldrb	r3, [r3, #0]
1004a508:	2b04      	cmp	r3, #4
1004a50a:	d103      	bne.n	1004a514 <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
1004a50c:	697b      	ldr	r3, [r7, #20]
1004a50e:	3302      	adds	r3, #2
1004a510:	61fb      	str	r3, [r7, #28]
1004a512:	e005      	b.n	1004a520 <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1004a514:	687b      	ldr	r3, [r7, #4]
1004a516:	3301      	adds	r3, #1
1004a518:	613b      	str	r3, [r7, #16]
      data = event_pckt->data;
1004a51a:	693b      	ldr	r3, [r7, #16]
1004a51c:	3303      	adds	r3, #3
1004a51e:	61fb      	str	r3, [r7, #28]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
1004a520:	697b      	ldr	r3, [r7, #20]
1004a522:	781b      	ldrb	r3, [r3, #0]
1004a524:	2bff      	cmp	r3, #255	@ 0xff
1004a526:	d101      	bne.n	1004a52c <BLE_STACK_Event+0x54>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
1004a528:	69fb      	ldr	r3, [r7, #28]
1004a52a:	60fb      	str	r3, [r7, #12]
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
1004a52c:	231b      	movs	r3, #27
1004a52e:	18fb      	adds	r3, r7, r3
1004a530:	781b      	ldrb	r3, [r3, #0]
1004a532:	2b00      	cmp	r3, #0
1004a534:	d103      	bne.n	1004a53e <BLE_STACK_Event+0x66>
  {
    BLEEVT_App_Notification(hci_pckt);
1004a536:	687b      	ldr	r3, [r7, #4]
1004a538:	0018      	movs	r0, r3
1004a53a:	f7f7 f8fd 	bl	10041738 <BLEEVT_App_Notification>
  }
}
1004a53e:	46c0      	nop			@ (mov r8, r8)
1004a540:	46bd      	mov	sp, r7
1004a542:	b008      	add	sp, #32
1004a544:	bd80      	pop	{r7, pc}
	...

1004a548 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
1004a548:	b580      	push	{r7, lr}
1004a54a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
1004a54c:	4b04      	ldr	r3, [pc, #16]	@ (1004a560 <UTIL_LPM_Init+0x18>)
1004a54e:	2200      	movs	r2, #0
1004a550:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
1004a552:	4b04      	ldr	r3, [pc, #16]	@ (1004a564 <UTIL_LPM_Init+0x1c>)
1004a554:	2200      	movs	r2, #0
1004a556:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
1004a558:	46c0      	nop			@ (mov r8, r8)
1004a55a:	46bd      	mov	sp, r7
1004a55c:	bd80      	pop	{r7, pc}
1004a55e:	46c0      	nop			@ (mov r8, r8)
1004a560:	20000aa8 	.word	0x20000aa8
1004a564:	20000aac 	.word	0x20000aac

1004a568 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
1004a568:	b580      	push	{r7, lr}
1004a56a:	b086      	sub	sp, #24
1004a56c:	af00      	add	r7, sp, #0
1004a56e:	6078      	str	r0, [r7, #4]
1004a570:	000a      	movs	r2, r1
1004a572:	1cfb      	adds	r3, r7, #3
1004a574:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a576:	f3ef 8310 	mrs	r3, PRIMASK
1004a57a:	613b      	str	r3, [r7, #16]
  return(result);
1004a57c:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
1004a57e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1004a580:	b672      	cpsid	i
}
1004a582:	46c0      	nop			@ (mov r8, r8)
  
  switch( state )
1004a584:	1cfb      	adds	r3, r7, #3
1004a586:	781b      	ldrb	r3, [r3, #0]
1004a588:	2b00      	cmp	r3, #0
1004a58a:	d008      	beq.n	1004a59e <UTIL_LPM_SetStopMode+0x36>
1004a58c:	2b01      	cmp	r3, #1
1004a58e:	d10e      	bne.n	1004a5ae <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
1004a590:	4b0c      	ldr	r3, [pc, #48]	@ (1004a5c4 <UTIL_LPM_SetStopMode+0x5c>)
1004a592:	681a      	ldr	r2, [r3, #0]
1004a594:	687b      	ldr	r3, [r7, #4]
1004a596:	431a      	orrs	r2, r3
1004a598:	4b0a      	ldr	r3, [pc, #40]	@ (1004a5c4 <UTIL_LPM_SetStopMode+0x5c>)
1004a59a:	601a      	str	r2, [r3, #0]
      break;
1004a59c:	e008      	b.n	1004a5b0 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
1004a59e:	687b      	ldr	r3, [r7, #4]
1004a5a0:	43da      	mvns	r2, r3
1004a5a2:	4b08      	ldr	r3, [pc, #32]	@ (1004a5c4 <UTIL_LPM_SetStopMode+0x5c>)
1004a5a4:	681b      	ldr	r3, [r3, #0]
1004a5a6:	401a      	ands	r2, r3
1004a5a8:	4b06      	ldr	r3, [pc, #24]	@ (1004a5c4 <UTIL_LPM_SetStopMode+0x5c>)
1004a5aa:	601a      	str	r2, [r3, #0]
      break;
1004a5ac:	e000      	b.n	1004a5b0 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
1004a5ae:	46c0      	nop			@ (mov r8, r8)
1004a5b0:	697b      	ldr	r3, [r7, #20]
1004a5b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a5b4:	68fb      	ldr	r3, [r7, #12]
1004a5b6:	f383 8810 	msr	PRIMASK, r3
}
1004a5ba:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
1004a5bc:	46c0      	nop			@ (mov r8, r8)
1004a5be:	46bd      	mov	sp, r7
1004a5c0:	b006      	add	sp, #24
1004a5c2:	bd80      	pop	{r7, pc}
1004a5c4:	20000aa8 	.word	0x20000aa8

1004a5c8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
1004a5c8:	b580      	push	{r7, lr}
1004a5ca:	b086      	sub	sp, #24
1004a5cc:	af00      	add	r7, sp, #0
1004a5ce:	6078      	str	r0, [r7, #4]
1004a5d0:	000a      	movs	r2, r1
1004a5d2:	1cfb      	adds	r3, r7, #3
1004a5d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a5d6:	f3ef 8310 	mrs	r3, PRIMASK
1004a5da:	613b      	str	r3, [r7, #16]
  return(result);
1004a5dc:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
1004a5de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1004a5e0:	b672      	cpsid	i
}
1004a5e2:	46c0      	nop			@ (mov r8, r8)
  
  switch(state)
1004a5e4:	1cfb      	adds	r3, r7, #3
1004a5e6:	781b      	ldrb	r3, [r3, #0]
1004a5e8:	2b00      	cmp	r3, #0
1004a5ea:	d008      	beq.n	1004a5fe <UTIL_LPM_SetOffMode+0x36>
1004a5ec:	2b01      	cmp	r3, #1
1004a5ee:	d10e      	bne.n	1004a60e <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
1004a5f0:	4b0c      	ldr	r3, [pc, #48]	@ (1004a624 <UTIL_LPM_SetOffMode+0x5c>)
1004a5f2:	681a      	ldr	r2, [r3, #0]
1004a5f4:	687b      	ldr	r3, [r7, #4]
1004a5f6:	431a      	orrs	r2, r3
1004a5f8:	4b0a      	ldr	r3, [pc, #40]	@ (1004a624 <UTIL_LPM_SetOffMode+0x5c>)
1004a5fa:	601a      	str	r2, [r3, #0]
      break;
1004a5fc:	e008      	b.n	1004a610 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
1004a5fe:	687b      	ldr	r3, [r7, #4]
1004a600:	43da      	mvns	r2, r3
1004a602:	4b08      	ldr	r3, [pc, #32]	@ (1004a624 <UTIL_LPM_SetOffMode+0x5c>)
1004a604:	681b      	ldr	r3, [r3, #0]
1004a606:	401a      	ands	r2, r3
1004a608:	4b06      	ldr	r3, [pc, #24]	@ (1004a624 <UTIL_LPM_SetOffMode+0x5c>)
1004a60a:	601a      	str	r2, [r3, #0]
      break;
1004a60c:	e000      	b.n	1004a610 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
1004a60e:	46c0      	nop			@ (mov r8, r8)
1004a610:	697b      	ldr	r3, [r7, #20]
1004a612:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a614:	68fb      	ldr	r3, [r7, #12]
1004a616:	f383 8810 	msr	PRIMASK, r3
}
1004a61a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
1004a61c:	46c0      	nop			@ (mov r8, r8)
1004a61e:	46bd      	mov	sp, r7
1004a620:	b006      	add	sp, #24
1004a622:	bd80      	pop	{r7, pc}
1004a624:	20000aac 	.word	0x20000aac

1004a628 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
1004a628:	b580      	push	{r7, lr}
1004a62a:	b084      	sub	sp, #16
1004a62c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a62e:	f3ef 8310 	mrs	r3, PRIMASK
1004a632:	60bb      	str	r3, [r7, #8]
  return(result);
1004a634:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
1004a636:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004a638:	b672      	cpsid	i
}
1004a63a:	46c0      	nop			@ (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
1004a63c:	4b12      	ldr	r3, [pc, #72]	@ (1004a688 <UTIL_LPM_EnterLowPower+0x60>)
1004a63e:	681b      	ldr	r3, [r3, #0]
1004a640:	2b00      	cmp	r3, #0
1004a642:	d006      	beq.n	1004a652 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
1004a644:	4b11      	ldr	r3, [pc, #68]	@ (1004a68c <UTIL_LPM_EnterLowPower+0x64>)
1004a646:	681b      	ldr	r3, [r3, #0]
1004a648:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
1004a64a:	4b10      	ldr	r3, [pc, #64]	@ (1004a68c <UTIL_LPM_EnterLowPower+0x64>)
1004a64c:	685b      	ldr	r3, [r3, #4]
1004a64e:	4798      	blx	r3
1004a650:	e010      	b.n	1004a674 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
1004a652:	4b0f      	ldr	r3, [pc, #60]	@ (1004a690 <UTIL_LPM_EnterLowPower+0x68>)
1004a654:	681b      	ldr	r3, [r3, #0]
1004a656:	2b00      	cmp	r3, #0
1004a658:	d006      	beq.n	1004a668 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
1004a65a:	4b0c      	ldr	r3, [pc, #48]	@ (1004a68c <UTIL_LPM_EnterLowPower+0x64>)
1004a65c:	689b      	ldr	r3, [r3, #8]
1004a65e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
1004a660:	4b0a      	ldr	r3, [pc, #40]	@ (1004a68c <UTIL_LPM_EnterLowPower+0x64>)
1004a662:	68db      	ldr	r3, [r3, #12]
1004a664:	4798      	blx	r3
1004a666:	e005      	b.n	1004a674 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
1004a668:	4b08      	ldr	r3, [pc, #32]	@ (1004a68c <UTIL_LPM_EnterLowPower+0x64>)
1004a66a:	691b      	ldr	r3, [r3, #16]
1004a66c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
1004a66e:	4b07      	ldr	r3, [pc, #28]	@ (1004a68c <UTIL_LPM_EnterLowPower+0x64>)
1004a670:	695b      	ldr	r3, [r3, #20]
1004a672:	4798      	blx	r3
1004a674:	68fb      	ldr	r3, [r7, #12]
1004a676:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a678:	687b      	ldr	r3, [r7, #4]
1004a67a:	f383 8810 	msr	PRIMASK, r3
}
1004a67e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
1004a680:	46c0      	nop			@ (mov r8, r8)
1004a682:	46bd      	mov	sp, r7
1004a684:	b004      	add	sp, #16
1004a686:	bd80      	pop	{r7, pc}
1004a688:	20000aa8 	.word	0x20000aa8
1004a68c:	1004fe08 	.word	0x1004fe08
1004a690:	20000aac 	.word	0x20000aac

1004a694 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
1004a694:	b580      	push	{r7, lr}
1004a696:	b090      	sub	sp, #64	@ 0x40
1004a698:	af00      	add	r7, sp, #0
1004a69a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
1004a69c:	4b75      	ldr	r3, [pc, #468]	@ (1004a874 <UTIL_SEQ_Run+0x1e0>)
1004a69e:	681b      	ldr	r3, [r3, #0]
1004a6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
1004a6a2:	4b74      	ldr	r3, [pc, #464]	@ (1004a874 <UTIL_SEQ_Run+0x1e0>)
1004a6a4:	681b      	ldr	r3, [r3, #0]
1004a6a6:	687a      	ldr	r2, [r7, #4]
1004a6a8:	401a      	ands	r2, r3
1004a6aa:	4b72      	ldr	r3, [pc, #456]	@ (1004a874 <UTIL_SEQ_Run+0x1e0>)
1004a6ac:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
1004a6ae:	4b72      	ldr	r3, [pc, #456]	@ (1004a878 <UTIL_SEQ_Run+0x1e4>)
1004a6b0:	681b      	ldr	r3, [r3, #0]
1004a6b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
1004a6b4:	4b71      	ldr	r3, [pc, #452]	@ (1004a87c <UTIL_SEQ_Run+0x1e8>)
1004a6b6:	681b      	ldr	r3, [r3, #0]
1004a6b8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
1004a6ba:	4b71      	ldr	r3, [pc, #452]	@ (1004a880 <UTIL_SEQ_Run+0x1ec>)
1004a6bc:	681b      	ldr	r3, [r3, #0]
1004a6be:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
1004a6c0:	4b70      	ldr	r3, [pc, #448]	@ (1004a884 <UTIL_SEQ_Run+0x1f0>)
1004a6c2:	681b      	ldr	r3, [r3, #0]
1004a6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
1004a6c6:	e090      	b.n	1004a7ea <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
1004a6c8:	2300      	movs	r3, #0
1004a6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
1004a6cc:	e002      	b.n	1004a6d4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
1004a6ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a6d0:	3301      	adds	r3, #1
1004a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
1004a6d4:	4b6c      	ldr	r3, [pc, #432]	@ (1004a888 <UTIL_SEQ_Run+0x1f4>)
1004a6d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004a6d8:	00d2      	lsls	r2, r2, #3
1004a6da:	58d3      	ldr	r3, [r2, r3]
1004a6dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004a6de:	401a      	ands	r2, r3
1004a6e0:	4b64      	ldr	r3, [pc, #400]	@ (1004a874 <UTIL_SEQ_Run+0x1e0>)
1004a6e2:	681b      	ldr	r3, [r3, #0]
1004a6e4:	4013      	ands	r3, r2
1004a6e6:	d0f2      	beq.n	1004a6ce <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
1004a6e8:	4b67      	ldr	r3, [pc, #412]	@ (1004a888 <UTIL_SEQ_Run+0x1f4>)
1004a6ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004a6ec:	00d2      	lsls	r2, r2, #3
1004a6ee:	58d3      	ldr	r3, [r2, r3]
1004a6f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004a6f2:	401a      	ands	r2, r3
1004a6f4:	4b5f      	ldr	r3, [pc, #380]	@ (1004a874 <UTIL_SEQ_Run+0x1e0>)
1004a6f6:	681b      	ldr	r3, [r3, #0]
1004a6f8:	4013      	ands	r3, r2
1004a6fa:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
1004a6fc:	4a62      	ldr	r2, [pc, #392]	@ (1004a888 <UTIL_SEQ_Run+0x1f4>)
1004a6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a700:	00db      	lsls	r3, r3, #3
1004a702:	18d3      	adds	r3, r2, r3
1004a704:	3304      	adds	r3, #4
1004a706:	681b      	ldr	r3, [r3, #0]
1004a708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004a70a:	4013      	ands	r3, r2
1004a70c:	d107      	bne.n	1004a71e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
1004a70e:	4a5e      	ldr	r2, [pc, #376]	@ (1004a888 <UTIL_SEQ_Run+0x1f4>)
1004a710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a712:	00db      	lsls	r3, r3, #3
1004a714:	18d3      	adds	r3, r2, r3
1004a716:	3304      	adds	r3, #4
1004a718:	2201      	movs	r2, #1
1004a71a:	4252      	negs	r2, r2
1004a71c:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
1004a71e:	4a5a      	ldr	r2, [pc, #360]	@ (1004a888 <UTIL_SEQ_Run+0x1f4>)
1004a720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a722:	00db      	lsls	r3, r3, #3
1004a724:	18d3      	adds	r3, r2, r3
1004a726:	3304      	adds	r3, #4
1004a728:	681b      	ldr	r3, [r3, #0]
1004a72a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004a72c:	4013      	ands	r3, r2
1004a72e:	0018      	movs	r0, r3
1004a730:	f000 f906 	bl	1004a940 <SEQ_BitPosition>
1004a734:	0003      	movs	r3, r0
1004a736:	001a      	movs	r2, r3
1004a738:	4b54      	ldr	r3, [pc, #336]	@ (1004a88c <UTIL_SEQ_Run+0x1f8>)
1004a73a:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
1004a73c:	4a52      	ldr	r2, [pc, #328]	@ (1004a888 <UTIL_SEQ_Run+0x1f4>)
1004a73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a740:	00db      	lsls	r3, r3, #3
1004a742:	18d3      	adds	r3, r2, r3
1004a744:	3304      	adds	r3, #4
1004a746:	681a      	ldr	r2, [r3, #0]
1004a748:	4b50      	ldr	r3, [pc, #320]	@ (1004a88c <UTIL_SEQ_Run+0x1f8>)
1004a74a:	681b      	ldr	r3, [r3, #0]
1004a74c:	2101      	movs	r1, #1
1004a74e:	4099      	lsls	r1, r3
1004a750:	000b      	movs	r3, r1
1004a752:	43db      	mvns	r3, r3
1004a754:	401a      	ands	r2, r3
1004a756:	494c      	ldr	r1, [pc, #304]	@ (1004a888 <UTIL_SEQ_Run+0x1f4>)
1004a758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a75a:	00db      	lsls	r3, r3, #3
1004a75c:	18cb      	adds	r3, r1, r3
1004a75e:	3304      	adds	r3, #4
1004a760:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a762:	f3ef 8310 	mrs	r3, PRIMASK
1004a766:	61bb      	str	r3, [r7, #24]
  return(result);
1004a768:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1004a76a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
1004a76c:	b672      	cpsid	i
}
1004a76e:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
1004a770:	4b46      	ldr	r3, [pc, #280]	@ (1004a88c <UTIL_SEQ_Run+0x1f8>)
1004a772:	681b      	ldr	r3, [r3, #0]
1004a774:	2201      	movs	r2, #1
1004a776:	409a      	lsls	r2, r3
1004a778:	0013      	movs	r3, r2
1004a77a:	43da      	mvns	r2, r3
1004a77c:	4b3e      	ldr	r3, [pc, #248]	@ (1004a878 <UTIL_SEQ_Run+0x1e4>)
1004a77e:	681b      	ldr	r3, [r3, #0]
1004a780:	401a      	ands	r2, r3
1004a782:	4b3d      	ldr	r3, [pc, #244]	@ (1004a878 <UTIL_SEQ_Run+0x1e4>)
1004a784:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1004a786:	2302      	movs	r3, #2
1004a788:	63fb      	str	r3, [r7, #60]	@ 0x3c
1004a78a:	e013      	b.n	1004a7b4 <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
1004a78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a78e:	1e5a      	subs	r2, r3, #1
1004a790:	4b3d      	ldr	r3, [pc, #244]	@ (1004a888 <UTIL_SEQ_Run+0x1f4>)
1004a792:	00d2      	lsls	r2, r2, #3
1004a794:	58d1      	ldr	r1, [r2, r3]
1004a796:	4b3d      	ldr	r3, [pc, #244]	@ (1004a88c <UTIL_SEQ_Run+0x1f8>)
1004a798:	681b      	ldr	r3, [r3, #0]
1004a79a:	2201      	movs	r2, #1
1004a79c:	409a      	lsls	r2, r3
1004a79e:	0013      	movs	r3, r2
1004a7a0:	43db      	mvns	r3, r3
1004a7a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004a7a4:	3a01      	subs	r2, #1
1004a7a6:	4019      	ands	r1, r3
1004a7a8:	4b37      	ldr	r3, [pc, #220]	@ (1004a888 <UTIL_SEQ_Run+0x1f4>)
1004a7aa:	00d2      	lsls	r2, r2, #3
1004a7ac:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1004a7ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a7b0:	3b01      	subs	r3, #1
1004a7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
1004a7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a7b6:	2b00      	cmp	r3, #0
1004a7b8:	d1e8      	bne.n	1004a78c <UTIL_SEQ_Run+0xf8>
1004a7ba:	6a3b      	ldr	r3, [r7, #32]
1004a7bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a7be:	697b      	ldr	r3, [r7, #20]
1004a7c0:	f383 8810 	msr	PRIMASK, r3
}
1004a7c4:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
1004a7c6:	4b31      	ldr	r3, [pc, #196]	@ (1004a88c <UTIL_SEQ_Run+0x1f8>)
1004a7c8:	681a      	ldr	r2, [r3, #0]
1004a7ca:	4b31      	ldr	r3, [pc, #196]	@ (1004a890 <UTIL_SEQ_Run+0x1fc>)
1004a7cc:	0092      	lsls	r2, r2, #2
1004a7ce:	58d3      	ldr	r3, [r2, r3]
1004a7d0:	4798      	blx	r3

    local_taskset = TaskSet;
1004a7d2:	4b29      	ldr	r3, [pc, #164]	@ (1004a878 <UTIL_SEQ_Run+0x1e4>)
1004a7d4:	681b      	ldr	r3, [r3, #0]
1004a7d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
1004a7d8:	4b28      	ldr	r3, [pc, #160]	@ (1004a87c <UTIL_SEQ_Run+0x1e8>)
1004a7da:	681b      	ldr	r3, [r3, #0]
1004a7dc:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
1004a7de:	4b28      	ldr	r3, [pc, #160]	@ (1004a880 <UTIL_SEQ_Run+0x1ec>)
1004a7e0:	681b      	ldr	r3, [r3, #0]
1004a7e2:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
1004a7e4:	4b27      	ldr	r3, [pc, #156]	@ (1004a884 <UTIL_SEQ_Run+0x1f0>)
1004a7e6:	681b      	ldr	r3, [r3, #0]
1004a7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
1004a7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a7ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004a7ee:	401a      	ands	r2, r3
1004a7f0:	4b20      	ldr	r3, [pc, #128]	@ (1004a874 <UTIL_SEQ_Run+0x1e0>)
1004a7f2:	681b      	ldr	r3, [r3, #0]
1004a7f4:	4013      	ands	r3, r2
1004a7f6:	d004      	beq.n	1004a802 <UTIL_SEQ_Run+0x16e>
1004a7f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004a7fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1004a7fc:	4013      	ands	r3, r2
1004a7fe:	d100      	bne.n	1004a802 <UTIL_SEQ_Run+0x16e>
1004a800:	e762      	b.n	1004a6c8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
1004a802:	4b22      	ldr	r3, [pc, #136]	@ (1004a88c <UTIL_SEQ_Run+0x1f8>)
1004a804:	2201      	movs	r2, #1
1004a806:	4252      	negs	r2, r2
1004a808:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
1004a80a:	4b1e      	ldr	r3, [pc, #120]	@ (1004a884 <UTIL_SEQ_Run+0x1f0>)
1004a80c:	681b      	ldr	r3, [r3, #0]
1004a80e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1004a810:	4013      	ands	r3, r2
1004a812:	d127      	bne.n	1004a864 <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
1004a814:	f7f6 f91d 	bl	10040a52 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a818:	f3ef 8310 	mrs	r3, PRIMASK
1004a81c:	613b      	str	r3, [r7, #16]
  return(result);
1004a81e:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
1004a820:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004a822:	b672      	cpsid	i
}
1004a824:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
1004a826:	4b14      	ldr	r3, [pc, #80]	@ (1004a878 <UTIL_SEQ_Run+0x1e4>)
1004a828:	681b      	ldr	r3, [r3, #0]
1004a82a:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
1004a82c:	4b13      	ldr	r3, [pc, #76]	@ (1004a87c <UTIL_SEQ_Run+0x1e8>)
1004a82e:	681b      	ldr	r3, [r3, #0]
1004a830:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
1004a832:	4b13      	ldr	r3, [pc, #76]	@ (1004a880 <UTIL_SEQ_Run+0x1ec>)
1004a834:	681b      	ldr	r3, [r3, #0]
1004a836:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
1004a838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a83a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004a83c:	401a      	ands	r2, r3
1004a83e:	4b0d      	ldr	r3, [pc, #52]	@ (1004a874 <UTIL_SEQ_Run+0x1e0>)
1004a840:	681b      	ldr	r3, [r3, #0]
1004a842:	4013      	ands	r3, r2
1004a844:	d106      	bne.n	1004a854 <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
1004a846:	4b0f      	ldr	r3, [pc, #60]	@ (1004a884 <UTIL_SEQ_Run+0x1f0>)
1004a848:	681b      	ldr	r3, [r3, #0]
1004a84a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1004a84c:	4013      	ands	r3, r2
1004a84e:	d101      	bne.n	1004a854 <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
1004a850:	f7f6 f904 	bl	10040a5c <UTIL_SEQ_Idle>
1004a854:	69fb      	ldr	r3, [r7, #28]
1004a856:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a858:	68fb      	ldr	r3, [r7, #12]
1004a85a:	f383 8810 	msr	PRIMASK, r3
}
1004a85e:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
1004a860:	f000 f868 	bl	1004a934 <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
1004a864:	4b03      	ldr	r3, [pc, #12]	@ (1004a874 <UTIL_SEQ_Run+0x1e0>)
1004a866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004a868:	601a      	str	r2, [r3, #0]

  return;
1004a86a:	46c0      	nop			@ (mov r8, r8)
}
1004a86c:	46bd      	mov	sp, r7
1004a86e:	b010      	add	sp, #64	@ 0x40
1004a870:	bd80      	pop	{r7, pc}
1004a872:	46c0      	nop			@ (mov r8, r8)
1004a874:	20000d0c 	.word	0x20000d0c
1004a878:	20000ab0 	.word	0x20000ab0
1004a87c:	20000ab4 	.word	0x20000ab4
1004a880:	20000d08 	.word	0x20000d08
1004a884:	20000ab8 	.word	0x20000ab8
1004a888:	20000b40 	.word	0x20000b40
1004a88c:	20000abc 	.word	0x20000abc
1004a890:	20000ac0 	.word	0x20000ac0

1004a894 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
1004a894:	b580      	push	{r7, lr}
1004a896:	b088      	sub	sp, #32
1004a898:	af00      	add	r7, sp, #0
1004a89a:	60f8      	str	r0, [r7, #12]
1004a89c:	60b9      	str	r1, [r7, #8]
1004a89e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a8a0:	f3ef 8310 	mrs	r3, PRIMASK
1004a8a4:	617b      	str	r3, [r7, #20]
  return(result);
1004a8a6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
1004a8a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004a8aa:	b672      	cpsid	i
}
1004a8ac:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
1004a8ae:	68fb      	ldr	r3, [r7, #12]
1004a8b0:	0018      	movs	r0, r3
1004a8b2:	f000 f845 	bl	1004a940 <SEQ_BitPosition>
1004a8b6:	0003      	movs	r3, r0
1004a8b8:	001a      	movs	r2, r3
1004a8ba:	4b07      	ldr	r3, [pc, #28]	@ (1004a8d8 <UTIL_SEQ_RegTask+0x44>)
1004a8bc:	0092      	lsls	r2, r2, #2
1004a8be:	6879      	ldr	r1, [r7, #4]
1004a8c0:	50d1      	str	r1, [r2, r3]
1004a8c2:	69fb      	ldr	r3, [r7, #28]
1004a8c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a8c6:	69bb      	ldr	r3, [r7, #24]
1004a8c8:	f383 8810 	msr	PRIMASK, r3
}
1004a8cc:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
1004a8ce:	46c0      	nop			@ (mov r8, r8)
}
1004a8d0:	46bd      	mov	sp, r7
1004a8d2:	b008      	add	sp, #32
1004a8d4:	bd80      	pop	{r7, pc}
1004a8d6:	46c0      	nop			@ (mov r8, r8)
1004a8d8:	20000ac0 	.word	0x20000ac0

1004a8dc <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
1004a8dc:	b580      	push	{r7, lr}
1004a8de:	b086      	sub	sp, #24
1004a8e0:	af00      	add	r7, sp, #0
1004a8e2:	6078      	str	r0, [r7, #4]
1004a8e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a8e6:	f3ef 8310 	mrs	r3, PRIMASK
1004a8ea:	60fb      	str	r3, [r7, #12]
  return(result);
1004a8ec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1004a8ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1004a8f0:	b672      	cpsid	i
}
1004a8f2:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
1004a8f4:	4b0d      	ldr	r3, [pc, #52]	@ (1004a92c <UTIL_SEQ_SetTask+0x50>)
1004a8f6:	681a      	ldr	r2, [r3, #0]
1004a8f8:	687b      	ldr	r3, [r7, #4]
1004a8fa:	431a      	orrs	r2, r3
1004a8fc:	4b0b      	ldr	r3, [pc, #44]	@ (1004a92c <UTIL_SEQ_SetTask+0x50>)
1004a8fe:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
1004a900:	4b0b      	ldr	r3, [pc, #44]	@ (1004a930 <UTIL_SEQ_SetTask+0x54>)
1004a902:	683a      	ldr	r2, [r7, #0]
1004a904:	00d2      	lsls	r2, r2, #3
1004a906:	58d2      	ldr	r2, [r2, r3]
1004a908:	687b      	ldr	r3, [r7, #4]
1004a90a:	431a      	orrs	r2, r3
1004a90c:	0011      	movs	r1, r2
1004a90e:	4b08      	ldr	r3, [pc, #32]	@ (1004a930 <UTIL_SEQ_SetTask+0x54>)
1004a910:	683a      	ldr	r2, [r7, #0]
1004a912:	00d2      	lsls	r2, r2, #3
1004a914:	50d1      	str	r1, [r2, r3]
1004a916:	697b      	ldr	r3, [r7, #20]
1004a918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a91a:	693b      	ldr	r3, [r7, #16]
1004a91c:	f383 8810 	msr	PRIMASK, r3
}
1004a920:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
1004a922:	46c0      	nop			@ (mov r8, r8)
}
1004a924:	46bd      	mov	sp, r7
1004a926:	b006      	add	sp, #24
1004a928:	bd80      	pop	{r7, pc}
1004a92a:	46c0      	nop			@ (mov r8, r8)
1004a92c:	20000ab0 	.word	0x20000ab0
1004a930:	20000b40 	.word	0x20000b40

1004a934 <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
1004a934:	b580      	push	{r7, lr}
1004a936:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
1004a938:	46c0      	nop			@ (mov r8, r8)
}
1004a93a:	46bd      	mov	sp, r7
1004a93c:	bd80      	pop	{r7, pc}
	...

1004a940 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
1004a940:	b580      	push	{r7, lr}
1004a942:	b084      	sub	sp, #16
1004a944:	af00      	add	r7, sp, #0
1004a946:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
1004a948:	210f      	movs	r1, #15
1004a94a:	187b      	adds	r3, r7, r1
1004a94c:	2200      	movs	r2, #0
1004a94e:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
1004a950:	687b      	ldr	r3, [r7, #4]
1004a952:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
1004a954:	68ba      	ldr	r2, [r7, #8]
1004a956:	2380      	movs	r3, #128	@ 0x80
1004a958:	025b      	lsls	r3, r3, #9
1004a95a:	429a      	cmp	r2, r3
1004a95c:	d205      	bcs.n	1004a96a <SEQ_BitPosition+0x2a>
1004a95e:	187b      	adds	r3, r7, r1
1004a960:	2210      	movs	r2, #16
1004a962:	701a      	strb	r2, [r3, #0]
1004a964:	68bb      	ldr	r3, [r7, #8]
1004a966:	041b      	lsls	r3, r3, #16
1004a968:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
1004a96a:	68ba      	ldr	r2, [r7, #8]
1004a96c:	2380      	movs	r3, #128	@ 0x80
1004a96e:	045b      	lsls	r3, r3, #17
1004a970:	429a      	cmp	r2, r3
1004a972:	d208      	bcs.n	1004a986 <SEQ_BitPosition+0x46>
1004a974:	220f      	movs	r2, #15
1004a976:	18bb      	adds	r3, r7, r2
1004a978:	18ba      	adds	r2, r7, r2
1004a97a:	7812      	ldrb	r2, [r2, #0]
1004a97c:	3208      	adds	r2, #8
1004a97e:	701a      	strb	r2, [r3, #0]
1004a980:	68bb      	ldr	r3, [r7, #8]
1004a982:	021b      	lsls	r3, r3, #8
1004a984:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
1004a986:	68ba      	ldr	r2, [r7, #8]
1004a988:	2380      	movs	r3, #128	@ 0x80
1004a98a:	055b      	lsls	r3, r3, #21
1004a98c:	429a      	cmp	r2, r3
1004a98e:	d208      	bcs.n	1004a9a2 <SEQ_BitPosition+0x62>
1004a990:	220f      	movs	r2, #15
1004a992:	18bb      	adds	r3, r7, r2
1004a994:	18ba      	adds	r2, r7, r2
1004a996:	7812      	ldrb	r2, [r2, #0]
1004a998:	3204      	adds	r2, #4
1004a99a:	701a      	strb	r2, [r3, #0]
1004a99c:	68bb      	ldr	r3, [r7, #8]
1004a99e:	011b      	lsls	r3, r3, #4
1004a9a0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
1004a9a2:	68bb      	ldr	r3, [r7, #8]
1004a9a4:	0f1b      	lsrs	r3, r3, #28
1004a9a6:	4a08      	ldr	r2, [pc, #32]	@ (1004a9c8 <SEQ_BitPosition+0x88>)
1004a9a8:	5cd1      	ldrb	r1, [r2, r3]
1004a9aa:	200f      	movs	r0, #15
1004a9ac:	183b      	adds	r3, r7, r0
1004a9ae:	183a      	adds	r2, r7, r0
1004a9b0:	7812      	ldrb	r2, [r2, #0]
1004a9b2:	188a      	adds	r2, r1, r2
1004a9b4:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
1004a9b6:	183b      	adds	r3, r7, r0
1004a9b8:	781b      	ldrb	r3, [r3, #0]
1004a9ba:	221f      	movs	r2, #31
1004a9bc:	1ad3      	subs	r3, r2, r3
1004a9be:	b2db      	uxtb	r3, r3
}
1004a9c0:	0018      	movs	r0, r3
1004a9c2:	46bd      	mov	sp, r7
1004a9c4:	b004      	add	sp, #16
1004a9c6:	bd80      	pop	{r7, pc}
1004a9c8:	1004fee4 	.word	0x1004fee4

1004a9cc <aci_gap_init>:
1004a9cc:	b580      	push	{r7, lr}
1004a9ce:	2802      	cmp	r0, #2
1004a9d0:	d901      	bls.n	1004a9d6 <aci_gap_init+0xa>
1004a9d2:	2012      	movs	r0, #18
1004a9d4:	bd80      	pop	{r7, pc}
1004a9d6:	f000 fda1 	bl	1004b51c <GAP_Init>
1004a9da:	bd80      	pop	{r7, pc}

1004a9dc <GAP_set_advertising_configuration_ucfg_weak>:
1004a9dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004a9de:	461c      	mov	r4, r3
1004a9e0:	4608      	mov	r0, r1
1004a9e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004a9e4:	9103      	str	r1, [sp, #12]
1004a9e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004a9e8:	9102      	str	r1, [sp, #8]
1004a9ea:	9908      	ldr	r1, [sp, #32]
1004a9ec:	9101      	str	r1, [sp, #4]
1004a9ee:	9907      	ldr	r1, [sp, #28]
1004a9f0:	9100      	str	r1, [sp, #0]
1004a9f2:	9b06      	ldr	r3, [sp, #24]
1004a9f4:	4611      	mov	r1, r2
1004a9f6:	4622      	mov	r2, r4
1004a9f8:	f000 feb4 	bl	1004b764 <GAP_set_legacy_advertising_configuration>
1004a9fc:	b004      	add	sp, #16
1004a9fe:	bd10      	pop	{r4, pc}

1004aa00 <GAP_set_advertising_data_ucfg_weak>:
1004aa00:	b580      	push	{r7, lr}
1004aa02:	4619      	mov	r1, r3
1004aa04:	4610      	mov	r0, r2
1004aa06:	f001 f807 	bl	1004ba18 <GAP_set_legacy_advertising_data>
1004aa0a:	bd80      	pop	{r7, pc}

1004aa0c <GAP_set_advertising_enable_ucfg_weak>:
1004aa0c:	b580      	push	{r7, lr}
1004aa0e:	f000 fefd 	bl	1004b80c <GAP_set_legacy_advertising_enable>
1004aa12:	bd80      	pop	{r7, pc}

1004aa14 <aci_gap_set_advertising_configuration>:
1004aa14:	b5f0      	push	{r4, r5, r6, r7, lr}
1004aa16:	b093      	sub	sp, #76	@ 0x4c
1004aa18:	461f      	mov	r7, r3
1004aa1a:	4615      	mov	r5, r2
1004aa1c:	460e      	mov	r6, r1
1004aa1e:	9012      	str	r0, [sp, #72]	@ 0x48
1004aa20:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1004aa22:	4608      	mov	r0, r1
1004aa24:	4611      	mov	r1, r2
1004aa26:	4622      	mov	r2, r4
1004aa28:	f000 fe6e 	bl	1004b708 <GAP_check_discoverability_mode>
1004aa2c:	2800      	cmp	r0, #0
1004aa2e:	d124      	bne.n	1004aa7a <aci_gap_set_advertising_configuration+0x66>
1004aa30:	9822      	ldr	r0, [sp, #136]	@ 0x88
1004aa32:	900d      	str	r0, [sp, #52]	@ 0x34
1004aa34:	ab1f      	add	r3, sp, #124	@ 0x7c
1004aa36:	cb0d      	ldmia	r3, {r0, r2, r3}
1004aa38:	9011      	str	r0, [sp, #68]	@ 0x44
1004aa3a:	981e      	ldr	r0, [sp, #120]	@ 0x78
1004aa3c:	900f      	str	r0, [sp, #60]	@ 0x3c
1004aa3e:	981d      	ldr	r0, [sp, #116]	@ 0x74
1004aa40:	900e      	str	r0, [sp, #56]	@ 0x38
1004aa42:	981b      	ldr	r0, [sp, #108]	@ 0x6c
1004aa44:	900c      	str	r0, [sp, #48]	@ 0x30
1004aa46:	991a      	ldr	r1, [sp, #104]	@ 0x68
1004aa48:	9819      	ldr	r0, [sp, #100]	@ 0x64
1004aa4a:	9710      	str	r7, [sp, #64]	@ 0x40
1004aa4c:	9f18      	ldr	r7, [sp, #96]	@ 0x60
1004aa4e:	9208      	str	r2, [sp, #32]
1004aa50:	9309      	str	r3, [sp, #36]	@ 0x24
1004aa52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004aa54:	920a      	str	r2, [sp, #40]	@ 0x28
1004aa56:	9700      	str	r7, [sp, #0]
1004aa58:	9001      	str	r0, [sp, #4]
1004aa5a:	9102      	str	r1, [sp, #8]
1004aa5c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004aa5e:	9003      	str	r0, [sp, #12]
1004aa60:	9404      	str	r4, [sp, #16]
1004aa62:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004aa64:	9005      	str	r0, [sp, #20]
1004aa66:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1004aa68:	9006      	str	r0, [sp, #24]
1004aa6a:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004aa6c:	9007      	str	r0, [sp, #28]
1004aa6e:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004aa70:	4631      	mov	r1, r6
1004aa72:	462a      	mov	r2, r5
1004aa74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004aa76:	f7ff ffb1 	bl	1004a9dc <GAP_set_advertising_configuration_ucfg_weak>
1004aa7a:	b013      	add	sp, #76	@ 0x4c
1004aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004aa7e <aci_gap_set_advertising_data>:
1004aa7e:	b580      	push	{r7, lr}
1004aa80:	f7ff ffbe 	bl	1004aa00 <GAP_set_advertising_data_ucfg_weak>
1004aa84:	bd80      	pop	{r7, pc}

1004aa86 <aci_gap_set_advertising_enable>:
1004aa86:	b580      	push	{r7, lr}
1004aa88:	f7ff ffc0 	bl	1004aa0c <GAP_set_advertising_enable_ucfg_weak>
1004aa8c:	bd80      	pop	{r7, pc}

1004aa8e <configBitmapGet>:
1004aa8e:	2000      	movs	r0, #0
1004aa90:	4770      	bx	lr
	...

1004aa94 <HAL_Read_ConfigData>:
1004aa94:	b5f0      	push	{r4, r5, r6, r7, lr}
1004aa96:	b08b      	sub	sp, #44	@ 0x2c
1004aa98:	4615      	mov	r5, r2
1004aa9a:	460c      	mov	r4, r1
1004aa9c:	493a      	ldr	r1, [pc, #232]	@ (1004ab88 <__arm_cp.5_0>)
1004aa9e:	680b      	ldr	r3, [r1, #0]
1004aaa0:	4606      	mov	r6, r0
1004aaa2:	3e28      	subs	r6, #40	@ 0x28
1004aaa4:	2206      	movs	r2, #6
1004aaa6:	2112      	movs	r1, #18
1004aaa8:	2e0b      	cmp	r6, #11
1004aaaa:	d910      	bls.n	1004aace <HAL_Read_ConfigData+0x3a>
1004aaac:	2800      	cmp	r0, #0
1004aaae:	d01c      	beq.n	1004aaea <HAL_Read_ConfigData+0x56>
1004aab0:	28ff      	cmp	r0, #255	@ 0xff
1004aab2:	d035      	beq.n	1004ab20 <HAL_Read_ConfigData+0x8c>
1004aab4:	2808      	cmp	r0, #8
1004aab6:	d017      	beq.n	1004aae8 <HAL_Read_ConfigData+0x54>
1004aab8:	2818      	cmp	r0, #24
1004aaba:	d015      	beq.n	1004aae8 <HAL_Read_ConfigData+0x54>
1004aabc:	2880      	cmp	r0, #128	@ 0x80
1004aabe:	d03c      	beq.n	1004ab3a <HAL_Read_ConfigData+0xa6>
1004aac0:	2881      	cmp	r0, #129	@ 0x81
1004aac2:	d047      	beq.n	1004ab54 <HAL_Read_ConfigData+0xc0>
1004aac4:	28fe      	cmp	r0, #254	@ 0xfe
1004aac6:	d04b      	beq.n	1004ab60 <HAL_Read_ConfigData+0xcc>
1004aac8:	2806      	cmp	r0, #6
1004aaca:	d00b      	beq.n	1004aae4 <HAL_Read_ConfigData+0x50>
1004aacc:	e013      	b.n	1004aaf6 <HAL_Read_ConfigData+0x62>
1004aace:	46c0      	nop			@ (mov r8, r8)
1004aad0:	447e      	add	r6, pc
1004aad2:	7936      	ldrb	r6, [r6, #4]
1004aad4:	0076      	lsls	r6, r6, #1
1004aad6:	44b7      	add	pc, r6
1004aad8:	0e050e05 	.word	0x0e050e05
1004aadc:	0e080e11 	.word	0x0e080e11
1004aae0:	180e0e0e 	.word	0x180e0e0e
1004aae4:	2202      	movs	r2, #2
1004aae6:	e000      	b.n	1004aaea <HAL_Read_ConfigData+0x56>
1004aae8:	2210      	movs	r2, #16
1004aaea:	7022      	strb	r2, [r4, #0]
1004aaec:	1819      	adds	r1, r3, r0
1004aaee:	4628      	mov	r0, r5
1004aaf0:	f7f7 f802 	bl	10041af8 <BLEPLAT_MemCpy>
1004aaf4:	2100      	movs	r1, #0
1004aaf6:	4608      	mov	r0, r1
1004aaf8:	b00b      	add	sp, #44	@ 0x2c
1004aafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004aafc:	2001      	movs	r0, #1
1004aafe:	7020      	strb	r0, [r4, #0]
1004ab00:	212c      	movs	r1, #44	@ 0x2c
1004ab02:	5c59      	ldrb	r1, [r3, r1]
1004ab04:	4001      	ands	r1, r0
1004ab06:	7029      	strb	r1, [r5, #0]
1004ab08:	e7f4      	b.n	1004aaf4 <HAL_Read_ConfigData+0x60>
1004ab0a:	f000 fdf5 	bl	1004b6f8 <GAP_is_rpa_change_at_timeout_enabled>
1004ab0e:	a901      	add	r1, sp, #4
1004ab10:	7008      	strb	r0, [r1, #0]
1004ab12:	2601      	movs	r6, #1
1004ab14:	4628      	mov	r0, r5
1004ab16:	4632      	mov	r2, r6
1004ab18:	f7f6 ffee 	bl	10041af8 <BLEPLAT_MemCpy>
1004ab1c:	7026      	strb	r6, [r4, #0]
1004ab1e:	e7e9      	b.n	1004aaf4 <HAL_Read_ConfigData+0x60>
1004ab20:	a801      	add	r0, sp, #4
1004ab22:	f7ff ffb4 	bl	1004aa8e <configBitmapGet>
1004ab26:	2800      	cmp	r0, #0
1004ab28:	d026      	beq.n	1004ab78 <HAL_Read_ConfigData+0xe4>
1004ab2a:	a901      	add	r1, sp, #4
1004ab2c:	2604      	movs	r6, #4
1004ab2e:	4628      	mov	r0, r5
1004ab30:	4632      	mov	r2, r6
1004ab32:	f7f6 ffe1 	bl	10041af8 <BLEPLAT_MemCpy>
1004ab36:	2100      	movs	r1, #0
1004ab38:	e020      	b.n	1004ab7c <HAL_Read_ConfigData+0xe8>
1004ab3a:	2006      	movs	r0, #6
1004ab3c:	7020      	strb	r0, [r4, #0]
1004ab3e:	a801      	add	r0, sp, #4
1004ab40:	f003 fb19 	bl	1004e176 <nvm_dev_id_data_get_record>
1004ab44:	2800      	cmp	r0, #0
1004ab46:	d01b      	beq.n	1004ab80 <HAL_Read_ConfigData+0xec>
1004ab48:	7822      	ldrb	r2, [r4, #0]
1004ab4a:	21ff      	movs	r1, #255	@ 0xff
1004ab4c:	4628      	mov	r0, r5
1004ab4e:	f7f6 ffe3 	bl	10041b18 <BLEPLAT_MemSet>
1004ab52:	e7cf      	b.n	1004aaf4 <HAL_Read_ConfigData+0x60>
1004ab54:	2206      	movs	r2, #6
1004ab56:	7022      	strb	r2, [r4, #0]
1004ab58:	480c      	ldr	r0, [pc, #48]	@ (1004ab8c <__arm_cp.5_1>)
1004ab5a:	6801      	ldr	r1, [r0, #0]
1004ab5c:	3166      	adds	r1, #102	@ 0x66
1004ab5e:	e7c6      	b.n	1004aaee <HAL_Read_ConfigData+0x5a>
1004ab60:	ae01      	add	r6, sp, #4
1004ab62:	4630      	mov	r0, r6
1004ab64:	f000 f9cc 	bl	1004af00 <log_verbosity_get_ucfg_weak>
1004ab68:	2705      	movs	r7, #5
1004ab6a:	4628      	mov	r0, r5
1004ab6c:	4631      	mov	r1, r6
1004ab6e:	463a      	mov	r2, r7
1004ab70:	f7f6 ffc2 	bl	10041af8 <BLEPLAT_MemCpy>
1004ab74:	7027      	strb	r7, [r4, #0]
1004ab76:	e7bd      	b.n	1004aaf4 <HAL_Read_ConfigData+0x60>
1004ab78:	2112      	movs	r1, #18
1004ab7a:	2600      	movs	r6, #0
1004ab7c:	7026      	strb	r6, [r4, #0]
1004ab7e:	e7ba      	b.n	1004aaf6 <HAL_Read_ConfigData+0x62>
1004ab80:	7822      	ldrb	r2, [r4, #0]
1004ab82:	a901      	add	r1, sp, #4
1004ab84:	3120      	adds	r1, #32
1004ab86:	e7b2      	b.n	1004aaee <HAL_Read_ConfigData+0x5a>

1004ab88 <__arm_cp.5_0>:
1004ab88:	20000b50 	.word	0x20000b50

1004ab8c <__arm_cp.5_1>:
1004ab8c:	20000b58 	.word	0x20000b58

1004ab90 <aci_hal_read_config_data>:
1004ab90:	b580      	push	{r7, lr}
1004ab92:	f7ff ff7f 	bl	1004aa94 <HAL_Read_ConfigData>
1004ab96:	bd80      	pop	{r7, pc}

1004ab98 <aci_hal_set_tx_power_level>:
1004ab98:	b580      	push	{r7, lr}
1004ab9a:	f000 f801 	bl	1004aba0 <HAL_Set_TX_Power_Level>
1004ab9e:	bd80      	pop	{r7, pc}

1004aba0 <HAL_Set_TX_Power_Level>:
1004aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004aba2:	460e      	mov	r6, r1
1004aba4:	4605      	mov	r5, r0
1004aba6:	2412      	movs	r4, #18
1004aba8:	f7f7 f80a 	bl	10041bc0 <BLEPLAT_GetMaxPALevel>
1004abac:	42b0      	cmp	r0, r6
1004abae:	d317      	bcc.n	1004abe0 <HAL_Set_TX_Power_Level+0x40>
1004abb0:	2d01      	cmp	r5, #1
1004abb2:	d815      	bhi.n	1004abe0 <HAL_Set_TX_Power_Level+0x40>
1004abb4:	480b      	ldr	r0, [pc, #44]	@ (1004abe4 <__arm_cp.11_0>)
1004abb6:	6800      	ldr	r0, [r0, #0]
1004abb8:	7a81      	ldrb	r1, [r0, #10]
1004abba:	9100      	str	r1, [sp, #0]
1004abbc:	7285      	strb	r5, [r0, #10]
1004abbe:	7a47      	ldrb	r7, [r0, #9]
1004abc0:	7246      	strb	r6, [r0, #9]
1004abc2:	4628      	mov	r0, r5
1004abc4:	f7f7 f80c 	bl	10041be0 <BLEPLAT_SetHighPower>
1004abc8:	2400      	movs	r4, #0
1004abca:	42b7      	cmp	r7, r6
1004abcc:	d102      	bne.n	1004abd4 <HAL_Set_TX_Power_Level+0x34>
1004abce:	9800      	ldr	r0, [sp, #0]
1004abd0:	42a8      	cmp	r0, r5
1004abd2:	d005      	beq.n	1004abe0 <HAL_Set_TX_Power_Level+0x40>
1004abd4:	20ff      	movs	r0, #255	@ 0xff
1004abd6:	227f      	movs	r2, #127	@ 0x7f
1004abd8:	2101      	movs	r1, #1
1004abda:	460b      	mov	r3, r1
1004abdc:	f001 faca 	bl	1004c174 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
1004abe0:	4620      	mov	r0, r4
1004abe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004abe4 <__arm_cp.11_0>:
1004abe4:	20000b60 	.word	0x20000b60

1004abe8 <ble_HAL_Init>:
1004abe8:	b580      	push	{r7, lr}
1004abea:	4804      	ldr	r0, [pc, #16]	@ (1004abfc <__arm_cp.17_0>)
1004abec:	6800      	ldr	r0, [r0, #0]
1004abee:	3060      	adds	r0, #96	@ 0x60
1004abf0:	2100      	movs	r1, #0
1004abf2:	2204      	movs	r2, #4
1004abf4:	f7f6 ff90 	bl	10041b18 <BLEPLAT_MemSet>
1004abf8:	bd80      	pop	{r7, pc}
1004abfa:	46c0      	nop			@ (mov r8, r8)

1004abfc <__arm_cp.17_0>:
1004abfc:	20000b60 	.word	0x20000b60

1004ac00 <hal_read_radio_activity_state>:
1004ac00:	b570      	push	{r4, r5, r6, lr}
1004ac02:	4603      	mov	r3, r0
1004ac04:	480a      	ldr	r0, [pc, #40]	@ (1004ac30 <__arm_cp.18_0>)
1004ac06:	6804      	ldr	r4, [r0, #0]
1004ac08:	f3ef 8010 	mrs	r0, PRIMASK
1004ac0c:	b672      	cpsid	i
1004ac0e:	7d20      	ldrb	r0, [r4, #20]
1004ac10:	2500      	movs	r5, #0
1004ac12:	7525      	strb	r5, [r4, #20]
1004ac14:	7c25      	ldrb	r5, [r4, #16]
1004ac16:	260f      	movs	r6, #15
1004ac18:	402e      	ands	r6, r5
1004ac1a:	701e      	strb	r6, [r3, #0]
1004ac1c:	7c23      	ldrb	r3, [r4, #16]
1004ac1e:	091b      	lsrs	r3, r3, #4
1004ac20:	700b      	strb	r3, [r1, #0]
1004ac22:	68e1      	ldr	r1, [r4, #12]
1004ac24:	6011      	str	r1, [r2, #0]
1004ac26:	1e41      	subs	r1, r0, #1
1004ac28:	4188      	sbcs	r0, r1
1004ac2a:	b662      	cpsie	i
1004ac2c:	bd70      	pop	{r4, r5, r6, pc}
1004ac2e:	46c0      	nop			@ (mov r8, r8)

1004ac30 <__arm_cp.18_0>:
1004ac30:	20000b60 	.word	0x20000b60

1004ac34 <hal_radio_activity_state_init>:
1004ac34:	4803      	ldr	r0, [pc, #12]	@ (1004ac44 <__arm_cp.20_0>)
1004ac36:	6800      	ldr	r0, [r0, #0]
1004ac38:	2100      	movs	r1, #0
1004ac3a:	7501      	strb	r1, [r0, #20]
1004ac3c:	8241      	strh	r1, [r0, #18]
1004ac3e:	7401      	strb	r1, [r0, #16]
1004ac40:	4770      	bx	lr
1004ac42:	46c0      	nop			@ (mov r8, r8)

1004ac44 <__arm_cp.20_0>:
1004ac44:	20000b60 	.word	0x20000b60

1004ac48 <hal_radio_activity_state_cb_check>:
1004ac48:	b510      	push	{r4, lr}
1004ac4a:	b086      	sub	sp, #24
1004ac4c:	4815      	ldr	r0, [pc, #84]	@ (1004aca4 <__arm_cp.22_0>)
1004ac4e:	6804      	ldr	r4, [r0, #0]
1004ac50:	a802      	add	r0, sp, #8
1004ac52:	a901      	add	r1, sp, #4
1004ac54:	466a      	mov	r2, sp
1004ac56:	f7ff ffd3 	bl	1004ac00 <hal_read_radio_activity_state>
1004ac5a:	2800      	cmp	r0, #0
1004ac5c:	d01f      	beq.n	1004ac9e <hal_radio_activity_state_cb_check+0x56>
1004ac5e:	a802      	add	r0, sp, #8
1004ac60:	7801      	ldrb	r1, [r0, #0]
1004ac62:	8a60      	ldrh	r0, [r4, #18]
1004ac64:	40c8      	lsrs	r0, r1
1004ac66:	07c0      	lsls	r0, r0, #31
1004ac68:	d019      	beq.n	1004ac9e <hal_radio_activity_state_cb_check+0x56>
1004ac6a:	9a01      	ldr	r2, [sp, #4]
1004ac6c:	9b00      	ldr	r3, [sp, #0]
1004ac6e:	a803      	add	r0, sp, #12
1004ac70:	2408      	movs	r4, #8
1004ac72:	7084      	strb	r4, [r0, #2]
1004ac74:	0e1c      	lsrs	r4, r3, #24
1004ac76:	72c4      	strb	r4, [r0, #11]
1004ac78:	0c1c      	lsrs	r4, r3, #16
1004ac7a:	7284      	strb	r4, [r0, #10]
1004ac7c:	0a1c      	lsrs	r4, r3, #8
1004ac7e:	7244      	strb	r4, [r0, #9]
1004ac80:	7203      	strb	r3, [r0, #8]
1004ac82:	71c2      	strb	r2, [r0, #7]
1004ac84:	7181      	strb	r1, [r0, #6]
1004ac86:	21ff      	movs	r1, #255	@ 0xff
1004ac88:	7041      	strb	r1, [r0, #1]
1004ac8a:	2182      	movs	r1, #130	@ 0x82
1004ac8c:	7001      	strb	r1, [r0, #0]
1004ac8e:	2100      	movs	r1, #0
1004ac90:	7141      	strb	r1, [r0, #5]
1004ac92:	2204      	movs	r2, #4
1004ac94:	7102      	strb	r2, [r0, #4]
1004ac96:	70c1      	strb	r1, [r0, #3]
1004ac98:	210c      	movs	r1, #12
1004ac9a:	f7ff fc1d 	bl	1004a4d8 <BLE_STACK_Event>
1004ac9e:	b006      	add	sp, #24
1004aca0:	bd10      	pop	{r4, pc}
1004aca2:	46c0      	nop			@ (mov r8, r8)

1004aca4 <__arm_cp.22_0>:
1004aca4:	20000b60 	.word	0x20000b60

1004aca8 <ACL_pkt_init_ucfg_weak>:
1004aca8:	2000      	movs	r0, #0
1004acaa:	4770      	bx	lr

1004acac <BLE_STACK_Tick>:
1004acac:	b580      	push	{r7, lr}
1004acae:	f003 fa85 	bl	1004e1bc <tsk_scheduler>
1004acb2:	bd80      	pop	{r7, pc}

1004acb4 <BlueNRG_Stack_Initialize_Layers>:
1004acb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004acb6:	b08f      	sub	sp, #60	@ 0x3c
1004acb8:	9309      	str	r3, [sp, #36]	@ 0x24
1004acba:	920b      	str	r2, [sp, #44]	@ 0x2c
1004acbc:	910a      	str	r1, [sp, #40]	@ 0x28
1004acbe:	9008      	str	r0, [sp, #32]
1004acc0:	f002 ff94 	bl	1004dbec <csmem_init>
1004acc4:	2401      	movs	r4, #1
1004acc6:	2138      	movs	r1, #56	@ 0x38
1004acc8:	4620      	mov	r0, r4
1004acca:	f002 ffa7 	bl	1004dc1c <csmem_mem_0_assign>
1004acce:	4933      	ldr	r1, [pc, #204]	@ (1004ad9c <__arm_cp.1_0>)
1004acd0:	7ac9      	ldrb	r1, [r1, #11]
1004acd2:	2234      	movs	r2, #52	@ 0x34
1004acd4:	5481      	strb	r1, [r0, r2]
1004acd6:	4e32      	ldr	r6, [pc, #200]	@ (1004ada0 <__arm_cp.1_1>)
1004acd8:	6030      	str	r0, [r6, #0]
1004acda:	2700      	movs	r7, #0
1004acdc:	7007      	strb	r7, [r0, #0]
1004acde:	6830      	ldr	r0, [r6, #0]
1004ace0:	7047      	strb	r7, [r0, #1]
1004ace2:	6830      	ldr	r0, [r6, #0]
1004ace4:	7087      	strb	r7, [r0, #2]
1004ace6:	6830      	ldr	r0, [r6, #0]
1004ace8:	21e1      	movs	r1, #225	@ 0xe1
1004acea:	70c1      	strb	r1, [r0, #3]
1004acec:	2005      	movs	r0, #5
1004acee:	01c0      	lsls	r0, r0, #7
1004acf0:	6831      	ldr	r1, [r6, #0]
1004acf2:	8088      	strh	r0, [r1, #4]
1004acf4:	2030      	movs	r0, #48	@ 0x30
1004acf6:	8508      	strh	r0, [r1, #40]	@ 0x28
1004acf8:	ad0e      	add	r5, sp, #56	@ 0x38
1004acfa:	a90d      	add	r1, sp, #52	@ 0x34
1004acfc:	aa0c      	add	r2, sp, #48	@ 0x30
1004acfe:	4628      	mov	r0, r5
1004ad00:	f7f6 ff1a 	bl	10041b38 <BLEPLAT_GetPartInfo>
1004ad04:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004ad06:	0200      	lsls	r0, r0, #8
1004ad08:	7829      	ldrb	r1, [r5, #0]
1004ad0a:	0109      	lsls	r1, r1, #4
1004ad0c:	4301      	orrs	r1, r0
1004ad0e:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004ad10:	0300      	lsls	r0, r0, #12
1004ad12:	4308      	orrs	r0, r1
1004ad14:	1d00      	adds	r0, r0, #4
1004ad16:	6831      	ldr	r1, [r6, #0]
1004ad18:	8548      	strh	r0, [r1, #42]	@ 0x2a
1004ad1a:	2118      	movs	r1, #24
1004ad1c:	4620      	mov	r0, r4
1004ad1e:	f002 ff7d 	bl	1004dc1c <csmem_mem_0_assign>
1004ad22:	4920      	ldr	r1, [pc, #128]	@ (1004ada4 <__arm_cp.1_2>)
1004ad24:	6008      	str	r0, [r1, #0]
1004ad26:	7507      	strb	r7, [r0, #20]
1004ad28:	f003 fa3e 	bl	1004e1a8 <tsk_init>
1004ad2c:	981c      	ldr	r0, [sp, #112]	@ 0x70
1004ad2e:	9006      	str	r0, [sp, #24]
1004ad30:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
1004ad32:	9405      	str	r4, [sp, #20]
1004ad34:	981a      	ldr	r0, [sp, #104]	@ 0x68
1004ad36:	9004      	str	r0, [sp, #16]
1004ad38:	9819      	ldr	r0, [sp, #100]	@ 0x64
1004ad3a:	9003      	str	r0, [sp, #12]
1004ad3c:	9818      	ldr	r0, [sp, #96]	@ 0x60
1004ad3e:	9002      	str	r0, [sp, #8]
1004ad40:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1004ad42:	9001      	str	r0, [sp, #4]
1004ad44:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004ad46:	9500      	str	r5, [sp, #0]
1004ad48:	9808      	ldr	r0, [sp, #32]
1004ad4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004ad4c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004ad4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004ad50:	f002 fadc 	bl	1004d30c <LL_init_ucfg_weak>
1004ad54:	f002 ff48 	bl	1004dbe8 <MBM_init_ucfg_weak>
1004ad58:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
1004ad5a:	2c01      	cmp	r4, #1
1004ad5c:	d101      	bne.n	1004ad62 <BlueNRG_Stack_Initialize_Layers+0xae>
1004ad5e:	f7ff ffa3 	bl	1004aca8 <ACL_pkt_init_ucfg_weak>
1004ad62:	f000 f999 	bl	1004b098 <Events_Process_init>
1004ad66:	2f01      	cmp	r7, #1
1004ad68:	d101      	bne.n	1004ad6e <BlueNRG_Stack_Initialize_Layers+0xba>
1004ad6a:	f000 f8ca 	bl	1004af02 <log_init_ucfg_weak>
1004ad6e:	6830      	ldr	r0, [r6, #0]
1004ad70:	212c      	movs	r1, #44	@ 0x2c
1004ad72:	5c40      	ldrb	r0, [r0, r1]
1004ad74:	07c0      	lsls	r0, r0, #31
1004ad76:	d10e      	bne.n	1004ad96 <BlueNRG_Stack_Initialize_Layers+0xe2>
1004ad78:	2c01      	cmp	r4, #1
1004ad7a:	d106      	bne.n	1004ad8a <BlueNRG_Stack_Initialize_Layers+0xd6>
1004ad7c:	9816      	ldr	r0, [sp, #88]	@ 0x58
1004ad7e:	f000 ffbb 	bl	1004bcf8 <L2C_init_ucfg_weak>
1004ad82:	f003 f9f5 	bl	1004e170 <smp_init_ucfg_weak>
1004ad86:	f000 feb6 	bl	1004baf6 <GAT_att_cmn_init_ucfg_weak>
1004ad8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004ad8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004ad8e:	462a      	mov	r2, r5
1004ad90:	4623      	mov	r3, r4
1004ad92:	f000 fb27 	bl	1004b3e4 <GAP_init_context>
1004ad96:	b00f      	add	sp, #60	@ 0x3c
1004ad98:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ad9a:	46c0      	nop			@ (mov r8, r8)

1004ad9c <__arm_cp.1_0>:
1004ad9c:	20000b70 	.word	0x20000b70

1004ada0 <__arm_cp.1_1>:
1004ada0:	20000b50 	.word	0x20000b50

1004ada4 <__arm_cp.1_2>:
1004ada4:	20000ba4 	.word	0x20000ba4

1004ada8 <_BlueNRG_Stack_Initialization>:
1004ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004adaa:	b095      	sub	sp, #84	@ 0x54
1004adac:	2001      	movs	r0, #1
1004adae:	0481      	lsls	r1, r0, #18
1004adb0:	9114      	str	r1, [sp, #80]	@ 0x50
1004adb2:	482e      	ldr	r0, [pc, #184]	@ (1004ae6c <__arm_cp.2_0>)
1004adb4:	6001      	str	r1, [r0, #0]
1004adb6:	f3bf 8f4f 	dsb	sy
1004adba:	f3bf 8f6f 	isb	sy
1004adbe:	f7f7 fba5 	bl	1004250c <BLEPLAT_CNTR_GlobDisableBlue>
1004adc2:	f7f6 ff5d 	bl	10041c80 <BLEPLAT_ClearRadioTimerValue>
1004adc6:	2000      	movs	r0, #0
1004adc8:	9012      	str	r0, [sp, #72]	@ 0x48
1004adca:	43c0      	mvns	r0, r0
1004adcc:	f7f7 fb8a 	bl	100424e4 <BLEPLAT_CNTR_ClearInterrupt>
1004add0:	f000 ff85 	bl	1004bcde <data_length_extension_csr_ucfg_weak>
1004add4:	9013      	str	r0, [sp, #76]	@ 0x4c
1004add6:	f000 ff86 	bl	1004bce6 <phy_upd_csr_ucfg_weak>
1004adda:	9011      	str	r0, [sp, #68]	@ 0x44
1004addc:	f002 f9e7 	bl	1004d1ae <ext_adv_scan_enabled_ucfg_weak>
1004ade0:	9010      	str	r0, [sp, #64]	@ 0x40
1004ade2:	f001 f9a3 	bl	1004c12c <llc_priv_controller_privacy_csr_ucfg_weak>
1004ade6:	900f      	str	r0, [sp, #60]	@ 0x3c
1004ade8:	f003 f9c3 	bl	1004e172 <secure_connections_csr_ucfg_weak>
1004adec:	f000 ff7d 	bl	1004bcea <scan_csr_ucfg_weak>
1004adf0:	900e      	str	r0, [sp, #56]	@ 0x38
1004adf2:	f000 ff7e 	bl	1004bcf2 <l2c_cos_csr_ucfg_weak>
1004adf6:	900d      	str	r0, [sp, #52]	@ 0x34
1004adf8:	f001 f990 	bl	1004c11c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004adfc:	900c      	str	r0, [sp, #48]	@ 0x30
1004adfe:	f001 f98f 	bl	1004c120 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004ae02:	900b      	str	r0, [sp, #44]	@ 0x2c
1004ae04:	f000 ff67 	bl	1004bcd6 <cte_csr_ucfg_weak>
1004ae08:	4604      	mov	r4, r0
1004ae0a:	f000 ff6a 	bl	1004bce2 <pcl_csr_ucfg_weak>
1004ae0e:	4605      	mov	r5, r0
1004ae10:	f000 ff6d 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004ae14:	4606      	mov	r6, r0
1004ae16:	f000 fee5 	bl	1004bbe4 <chc_csr_ucfg_weak>
1004ae1a:	4607      	mov	r7, r0
1004ae1c:	f000 f873 	bl	1004af06 <log_csr_ucfg_weak>
1004ae20:	b2c0      	uxtb	r0, r0
1004ae22:	b2f9      	uxtb	r1, r7
1004ae24:	9108      	str	r1, [sp, #32]
1004ae26:	9009      	str	r0, [sp, #36]	@ 0x24
1004ae28:	b2f0      	uxtb	r0, r6
1004ae2a:	b2e9      	uxtb	r1, r5
1004ae2c:	b2e2      	uxtb	r2, r4
1004ae2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004ae30:	b2db      	uxtb	r3, r3
1004ae32:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1004ae34:	b2e4      	uxtb	r4, r4
1004ae36:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1004ae38:	b2ed      	uxtb	r5, r5
1004ae3a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
1004ae3c:	b2f6      	uxtb	r6, r6
1004ae3e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
1004ae40:	9700      	str	r7, [sp, #0]
1004ae42:	9601      	str	r6, [sp, #4]
1004ae44:	9502      	str	r5, [sp, #8]
1004ae46:	9403      	str	r4, [sp, #12]
1004ae48:	9304      	str	r3, [sp, #16]
1004ae4a:	9205      	str	r2, [sp, #20]
1004ae4c:	9106      	str	r1, [sp, #24]
1004ae4e:	9007      	str	r0, [sp, #28]
1004ae50:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1004ae52:	b2c0      	uxtb	r0, r0
1004ae54:	9911      	ldr	r1, [sp, #68]	@ 0x44
1004ae56:	b2c9      	uxtb	r1, r1
1004ae58:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1004ae5a:	b2d3      	uxtb	r3, r2
1004ae5c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1004ae5e:	f7ff ff29 	bl	1004acb4 <BlueNRG_Stack_Initialize_Layers>
1004ae62:	4803      	ldr	r0, [pc, #12]	@ (1004ae70 <__arm_cp.2_1>)
1004ae64:	9914      	ldr	r1, [sp, #80]	@ 0x50
1004ae66:	6001      	str	r1, [r0, #0]
1004ae68:	b015      	add	sp, #84	@ 0x54
1004ae6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004ae6c <__arm_cp.2_0>:
1004ae6c:	e000e180 	.word	0xe000e180

1004ae70 <__arm_cp.2_1>:
1004ae70:	e000e100 	.word	0xe000e100

1004ae74 <BLE_STACK_Init>:
1004ae74:	b5b0      	push	{r4, r5, r7, lr}
1004ae76:	4605      	mov	r5, r0
1004ae78:	7ac0      	ldrb	r0, [r0, #11]
1004ae7a:	2412      	movs	r4, #18
1004ae7c:	2880      	cmp	r0, #128	@ 0x80
1004ae7e:	d829      	bhi.n	1004aed4 <BLE_STACK_Init+0x60>
1004ae80:	8c29      	ldrh	r1, [r5, #32]
1004ae82:	2917      	cmp	r1, #23
1004ae84:	d326      	bcc.n	1004aed4 <BLE_STACK_Init+0x60>
1004ae86:	4814      	ldr	r0, [pc, #80]	@ (1004aed8 <__arm_cp.3_0>)
1004ae88:	1d82      	adds	r2, r0, #6
1004ae8a:	4291      	cmp	r1, r2
1004ae8c:	d822      	bhi.n	1004aed4 <BLE_STACK_Init+0x60>
1004ae8e:	8a29      	ldrh	r1, [r5, #16]
1004ae90:	2917      	cmp	r1, #23
1004ae92:	d31f      	bcc.n	1004aed4 <BLE_STACK_Init+0x60>
1004ae94:	4281      	cmp	r1, r0
1004ae96:	d81d      	bhi.n	1004aed4 <BLE_STACK_Init+0x60>
1004ae98:	7ea8      	ldrb	r0, [r5, #26]
1004ae9a:	2800      	cmp	r0, #0
1004ae9c:	d01a      	beq.n	1004aed4 <BLE_STACK_Init+0x60>
1004ae9e:	f001 f93f 	bl	1004c120 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004aea2:	2800      	cmp	r0, #0
1004aea4:	d008      	beq.n	1004aeb8 <BLE_STACK_Init+0x44>
1004aea6:	7ee8      	ldrb	r0, [r5, #27]
1004aea8:	2800      	cmp	r0, #0
1004aeaa:	d013      	beq.n	1004aed4 <BLE_STACK_Init+0x60>
1004aeac:	2880      	cmp	r0, #128	@ 0x80
1004aeae:	d811      	bhi.n	1004aed4 <BLE_STACK_Init+0x60>
1004aeb0:	7f28      	ldrb	r0, [r5, #28]
1004aeb2:	1e40      	subs	r0, r0, #1
1004aeb4:	280e      	cmp	r0, #14
1004aeb6:	d80d      	bhi.n	1004aed4 <BLE_STACK_Init+0x60>
1004aeb8:	4808      	ldr	r0, [pc, #32]	@ (1004aedc <__arm_cp.3_1>)
1004aeba:	2234      	movs	r2, #52	@ 0x34
1004aebc:	4629      	mov	r1, r5
1004aebe:	f7f6 fe1b 	bl	10041af8 <BLEPLAT_MemCpy>
1004aec2:	f002 feb5 	bl	1004dc30 <BlueNRG_Stack_Initialize_RAM_check>
1004aec6:	2800      	cmp	r0, #0
1004aec8:	d403      	bmi.n	1004aed2 <BLE_STACK_Init+0x5e>
1004aeca:	f7ff ff6d 	bl	1004ada8 <_BlueNRG_Stack_Initialization>
1004aece:	2400      	movs	r4, #0
1004aed0:	e000      	b.n	1004aed4 <BLE_STACK_Init+0x60>
1004aed2:	2487      	movs	r4, #135	@ 0x87
1004aed4:	4620      	mov	r0, r4
1004aed6:	bdb0      	pop	{r4, r5, r7, pc}

1004aed8 <__arm_cp.3_0>:
1004aed8:	000003fa 	.word	0x000003fa

1004aedc <__arm_cp.3_1>:
1004aedc:	20000b70 	.word	0x20000b70

1004aee0 <BLE_STACK_SleepCheck>:
1004aee0:	b580      	push	{r7, lr}
1004aee2:	f003 f99f 	bl	1004e224 <tsk_no_idle_check>
1004aee6:	2800      	cmp	r0, #0
1004aee8:	d104      	bne.n	1004aef4 <BLE_STACK_SleepCheck+0x14>
1004aeea:	4804      	ldr	r0, [pc, #16]	@ (1004aefc <__arm_cp.4_0>)
1004aeec:	6800      	ldr	r0, [r0, #0]
1004aeee:	7ac0      	ldrb	r0, [r0, #11]
1004aef0:	2800      	cmp	r0, #0
1004aef2:	d001      	beq.n	1004aef8 <BLE_STACK_SleepCheck+0x18>
1004aef4:	2000      	movs	r0, #0
1004aef6:	bd80      	pop	{r7, pc}
1004aef8:	2003      	movs	r0, #3
1004aefa:	bd80      	pop	{r7, pc}

1004aefc <__arm_cp.4_0>:
1004aefc:	20000b60 	.word	0x20000b60

1004af00 <log_verbosity_get_ucfg_weak>:
1004af00:	4770      	bx	lr

1004af02 <log_init_ucfg_weak>:
1004af02:	4770      	bx	lr

1004af04 <log_notify_us_flush_ucfg_weak>:
1004af04:	4770      	bx	lr

1004af06 <log_csr_ucfg_weak>:
1004af06:	2000      	movs	r0, #0
1004af08:	4770      	bx	lr
	...

1004af0c <aci_event_fifo_push_header>:
1004af0c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004af0e:	4615      	mov	r5, r2
1004af10:	460c      	mov	r4, r1
1004af12:	4606      	mov	r6, r0
1004af14:	0608      	lsls	r0, r1, #24
1004af16:	d414      	bmi.n	1004af42 <aci_event_fifo_push_header+0x36>
1004af18:	aa02      	add	r2, sp, #8
1004af1a:	af01      	add	r7, sp, #4
1004af1c:	4630      	mov	r0, r6
1004af1e:	4619      	mov	r1, r3
1004af20:	463b      	mov	r3, r7
1004af22:	f000 f853 	bl	1004afcc <fifoBuf_getFreeHeader>
1004af26:	2800      	cmp	r0, #0
1004af28:	d021      	beq.n	1004af6e <aci_event_fifo_push_header+0x62>
1004af2a:	0660      	lsls	r0, r4, #25
1004af2c:	d438      	bmi.n	1004afa0 <aci_event_fifo_push_header+0x94>
1004af2e:	9802      	ldr	r0, [sp, #8]
1004af30:	7881      	ldrb	r1, [r0, #2]
1004af32:	22fc      	movs	r2, #252	@ 0xfc
1004af34:	400a      	ands	r2, r1
1004af36:	7082      	strb	r2, [r0, #2]
1004af38:	9901      	ldr	r1, [sp, #4]
1004af3a:	8001      	strh	r1, [r0, #0]
1004af3c:	8071      	strh	r1, [r6, #2]
1004af3e:	2701      	movs	r7, #1
1004af40:	e02f      	b.n	1004afa2 <aci_event_fifo_push_header+0x96>
1004af42:	f3ef 8010 	mrs	r0, PRIMASK
1004af46:	b672      	cpsid	i
1004af48:	aa02      	add	r2, sp, #8
1004af4a:	af01      	add	r7, sp, #4
1004af4c:	4630      	mov	r0, r6
1004af4e:	4619      	mov	r1, r3
1004af50:	463b      	mov	r3, r7
1004af52:	f000 f83b 	bl	1004afcc <fifoBuf_getFreeHeader>
1004af56:	2800      	cmp	r0, #0
1004af58:	d00b      	beq.n	1004af72 <aci_event_fifo_push_header+0x66>
1004af5a:	9902      	ldr	r1, [sp, #8]
1004af5c:	788a      	ldrb	r2, [r1, #2]
1004af5e:	23fc      	movs	r3, #252	@ 0xfc
1004af60:	4013      	ands	r3, r2
1004af62:	708b      	strb	r3, [r1, #2]
1004af64:	9a01      	ldr	r2, [sp, #4]
1004af66:	800a      	strh	r2, [r1, #0]
1004af68:	8072      	strh	r2, [r6, #2]
1004af6a:	2701      	movs	r7, #1
1004af6c:	e002      	b.n	1004af74 <aci_event_fifo_push_header+0x68>
1004af6e:	2700      	movs	r7, #0
1004af70:	e003      	b.n	1004af7a <aci_event_fifo_push_header+0x6e>
1004af72:	2700      	movs	r7, #0
1004af74:	b662      	cpsie	i
1004af76:	2800      	cmp	r0, #0
1004af78:	d113      	bne.n	1004afa2 <aci_event_fifo_push_header+0x96>
1004af7a:	f3ef 8010 	mrs	r0, PRIMASK
1004af7e:	b672      	cpsid	i
1004af80:	06a0      	lsls	r0, r4, #26
1004af82:	d40a      	bmi.n	1004af9a <aci_event_fifo_push_header+0x8e>
1004af84:	4810      	ldr	r0, [pc, #64]	@ (1004afc8 <__arm_cp.0_0>)
1004af86:	6800      	ldr	r0, [r0, #0]
1004af88:	6801      	ldr	r1, [r0, #0]
1004af8a:	2208      	movs	r2, #8
1004af8c:	430a      	orrs	r2, r1
1004af8e:	6002      	str	r2, [r0, #0]
1004af90:	2000      	movs	r0, #0
1004af92:	f003 f951 	bl	1004e238 <tsk_notify_idx>
1004af96:	f7f6 fb9e 	bl	100416d6 <BLE_STACK_ProcessRequest>
1004af9a:	b662      	cpsie	i
1004af9c:	2600      	movs	r6, #0
1004af9e:	e00a      	b.n	1004afb6 <aci_event_fifo_push_header+0xaa>
1004afa0:	2700      	movs	r7, #0
1004afa2:	9e02      	ldr	r6, [sp, #8]
1004afa4:	70f5      	strb	r5, [r6, #3]
1004afa6:	00a0      	lsls	r0, r4, #2
1004afa8:	2160      	movs	r1, #96	@ 0x60
1004afaa:	4001      	ands	r1, r0
1004afac:	78b0      	ldrb	r0, [r6, #2]
1004afae:	2203      	movs	r2, #3
1004afb0:	4002      	ands	r2, r0
1004afb2:	1850      	adds	r0, r2, r1
1004afb4:	70b0      	strb	r0, [r6, #2]
1004afb6:	2f00      	cmp	r7, #0
1004afb8:	d004      	beq.n	1004afc4 <aci_event_fifo_push_header+0xb8>
1004afba:	2000      	movs	r0, #0
1004afbc:	f003 f93c 	bl	1004e238 <tsk_notify_idx>
1004afc0:	f7f6 fb89 	bl	100416d6 <BLE_STACK_ProcessRequest>
1004afc4:	4630      	mov	r0, r6
1004afc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004afc8 <__arm_cp.0_0>:
1004afc8:	20000b54 	.word	0x20000b54

1004afcc <fifoBuf_getFreeHeader>:
1004afcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004afce:	9200      	str	r2, [sp, #0]
1004afd0:	8845      	ldrh	r5, [r0, #2]
1004afd2:	08ac      	lsrs	r4, r5, #2
1004afd4:	801c      	strh	r4, [r3, #0]
1004afd6:	1c49      	adds	r1, r1, #1
1004afd8:	b28a      	uxth	r2, r1
1004afda:	18a6      	adds	r6, r4, r2
1004afdc:	8887      	ldrh	r7, [r0, #4]
1004afde:	42be      	cmp	r6, r7
1004afe0:	d900      	bls.n	1004afe4 <fifoBuf_getFreeHeader+0x18>
1004afe2:	1b09      	subs	r1, r1, r4
1004afe4:	190a      	adds	r2, r1, r4
1004afe6:	0092      	lsls	r2, r2, #2
1004afe8:	42be      	cmp	r6, r7
1004afea:	d900      	bls.n	1004afee <fifoBuf_getFreeHeader+0x22>
1004afec:	1c6d      	adds	r5, r5, #1
1004afee:	2603      	movs	r6, #3
1004aff0:	4035      	ands	r5, r6
1004aff2:	1952      	adds	r2, r2, r5
1004aff4:	801a      	strh	r2, [r3, #0]
1004aff6:	00a3      	lsls	r3, r4, #2
1004aff8:	181b      	adds	r3, r3, r0
1004affa:	3308      	adds	r3, #8
1004affc:	9c00      	ldr	r4, [sp, #0]
1004affe:	6023      	str	r3, [r4, #0]
1004b000:	b292      	uxth	r2, r2
1004b002:	8805      	ldrh	r5, [r0, #0]
1004b004:	1b52      	subs	r2, r2, r5
1004b006:	4617      	mov	r7, r2
1004b008:	4037      	ands	r7, r6
1004b00a:	8884      	ldrh	r4, [r0, #4]
1004b00c:	4367      	muls	r7, r4
1004b00e:	4035      	ands	r5, r6
1004b010:	1952      	adds	r2, r2, r5
1004b012:	0892      	lsrs	r2, r2, #2
1004b014:	19d2      	adds	r2, r2, r7
1004b016:	b295      	uxth	r5, r2
1004b018:	88c6      	ldrh	r6, [r0, #6]
1004b01a:	42b5      	cmp	r5, r6
1004b01c:	d900      	bls.n	1004b020 <fifoBuf_getFreeHeader+0x54>
1004b01e:	80c2      	strh	r2, [r0, #6]
1004b020:	42a5      	cmp	r5, r4
1004b022:	d80a      	bhi.n	1004b03a <fifoBuf_getFreeHeader+0x6e>
1004b024:	b209      	sxth	r1, r1
1004b026:	2900      	cmp	r1, #0
1004b028:	d507      	bpl.n	1004b03a <fifoBuf_getFreeHeader+0x6e>
1004b02a:	7899      	ldrb	r1, [r3, #2]
1004b02c:	22fc      	movs	r2, #252	@ 0xfc
1004b02e:	400a      	ands	r2, r1
1004b030:	1c51      	adds	r1, r2, #1
1004b032:	7099      	strb	r1, [r3, #2]
1004b034:	3008      	adds	r0, #8
1004b036:	9900      	ldr	r1, [sp, #0]
1004b038:	6008      	str	r0, [r1, #0]
1004b03a:	42a5      	cmp	r5, r4
1004b03c:	d901      	bls.n	1004b042 <fifoBuf_getFreeHeader+0x76>
1004b03e:	2000      	movs	r0, #0
1004b040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b042:	2001      	movs	r0, #1
1004b044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004b046 <aci_event_fifo_push>:
1004b046:	b580      	push	{r7, lr}
1004b048:	0640      	lsls	r0, r0, #25
1004b04a:	d405      	bmi.n	1004b058 <aci_event_fifo_push+0x12>
1004b04c:	7888      	ldrb	r0, [r1, #2]
1004b04e:	22fc      	movs	r2, #252	@ 0xfc
1004b050:	4002      	ands	r2, r0
1004b052:	1c90      	adds	r0, r2, #2
1004b054:	7088      	strb	r0, [r1, #2]
1004b056:	bd80      	pop	{r7, pc}
1004b058:	4608      	mov	r0, r1
1004b05a:	f000 f801 	bl	1004b060 <event_notify_cb>
1004b05e:	bd80      	pop	{r7, pc}

1004b060 <event_notify_cb>:
1004b060:	b580      	push	{r7, lr}
1004b062:	1d01      	adds	r1, r0, #4
1004b064:	78c2      	ldrb	r2, [r0, #3]
1004b066:	2a14      	cmp	r2, #20
1004b068:	d804      	bhi.n	1004b074 <event_notify_cb+0x14>
1004b06a:	6842      	ldr	r2, [r0, #4]
1004b06c:	7880      	ldrb	r0, [r0, #2]
1004b06e:	0880      	lsrs	r0, r0, #2
1004b070:	4790      	blx	r2
1004b072:	bd80      	pop	{r7, pc}
1004b074:	2a3d      	cmp	r2, #61	@ 0x3d
1004b076:	d803      	bhi.n	1004b080 <event_notify_cb+0x20>
1004b078:	2000      	movs	r0, #0
1004b07a:	f000 f8e9 	bl	1004b250 <hci_event_notify_cb>
1004b07e:	bd80      	pop	{r7, pc}
1004b080:	2a3f      	cmp	r2, #63	@ 0x3f
1004b082:	d803      	bhi.n	1004b08c <event_notify_cb+0x2c>
1004b084:	2000      	movs	r0, #0
1004b086:	f000 f8f5 	bl	1004b274 <hci_rx_data_notify_cb>
1004b08a:	bd80      	pop	{r7, pc}
1004b08c:	2a60      	cmp	r2, #96	@ 0x60
1004b08e:	d802      	bhi.n	1004b096 <event_notify_cb+0x36>
1004b090:	2000      	movs	r0, #0
1004b092:	f000 f8e4 	bl	1004b25e <hci_aci_event_notify_cb>
1004b096:	bd80      	pop	{r7, pc}

1004b098 <Events_Process_init>:
1004b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b09a:	2001      	movs	r0, #1
1004b09c:	211c      	movs	r1, #28
1004b09e:	4a29      	ldr	r2, [pc, #164]	@ (1004b144 <__arm_cp.7_0>)
1004b0a0:	4790      	blx	r2
1004b0a2:	4f29      	ldr	r7, [pc, #164]	@ (1004b148 <__arm_cp.7_1>)
1004b0a4:	6038      	str	r0, [r7, #0]
1004b0a6:	4d29      	ldr	r5, [pc, #164]	@ (1004b14c <__arm_cp.7_2>)
1004b0a8:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
1004b0aa:	1e40      	subs	r0, r0, #1
1004b0ac:	2603      	movs	r6, #3
1004b0ae:	4330      	orrs	r0, r6
1004b0b0:	1c40      	adds	r0, r0, #1
1004b0b2:	0880      	lsrs	r0, r0, #2
1004b0b4:	1cc0      	adds	r0, r0, #3
1004b0b6:	2404      	movs	r4, #4
1004b0b8:	4621      	mov	r1, r4
1004b0ba:	4a22      	ldr	r2, [pc, #136]	@ (1004b144 <__arm_cp.7_0>)
1004b0bc:	4790      	blx	r2
1004b0be:	6839      	ldr	r1, [r7, #0]
1004b0c0:	6048      	str	r0, [r1, #4]
1004b0c2:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
1004b0c4:	1e40      	subs	r0, r0, #1
1004b0c6:	4330      	orrs	r0, r6
1004b0c8:	1c40      	adds	r0, r0, #1
1004b0ca:	0880      	lsrs	r0, r0, #2
1004b0cc:	1cc0      	adds	r0, r0, #3
1004b0ce:	4621      	mov	r1, r4
1004b0d0:	4d1c      	ldr	r5, [pc, #112]	@ (1004b144 <__arm_cp.7_0>)
1004b0d2:	47a8      	blx	r5
1004b0d4:	462a      	mov	r2, r5
1004b0d6:	6839      	ldr	r1, [r7, #0]
1004b0d8:	6088      	str	r0, [r1, #8]
1004b0da:	4d1c      	ldr	r5, [pc, #112]	@ (1004b14c <__arm_cp.7_2>)
1004b0dc:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
1004b0de:	1e40      	subs	r0, r0, #1
1004b0e0:	4330      	orrs	r0, r6
1004b0e2:	1c40      	adds	r0, r0, #1
1004b0e4:	0880      	lsrs	r0, r0, #2
1004b0e6:	1cc0      	adds	r0, r0, #3
1004b0e8:	4621      	mov	r1, r4
1004b0ea:	4790      	blx	r2
1004b0ec:	6839      	ldr	r1, [r7, #0]
1004b0ee:	60c8      	str	r0, [r1, #12]
1004b0f0:	f7ff fda0 	bl	1004ac34 <hal_radio_activity_state_init>
1004b0f4:	6838      	ldr	r0, [r7, #0]
1004b0f6:	6842      	ldr	r2, [r0, #4]
1004b0f8:	2100      	movs	r1, #0
1004b0fa:	8011      	strh	r1, [r2, #0]
1004b0fc:	8051      	strh	r1, [r2, #2]
1004b0fe:	6883      	ldr	r3, [r0, #8]
1004b100:	8019      	strh	r1, [r3, #0]
1004b102:	80d1      	strh	r1, [r2, #6]
1004b104:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
1004b106:	1e7f      	subs	r7, r7, #1
1004b108:	4337      	orrs	r7, r6
1004b10a:	1c7f      	adds	r7, r7, #1
1004b10c:	08bf      	lsrs	r7, r7, #2
1004b10e:	8097      	strh	r7, [r2, #4]
1004b110:	8059      	strh	r1, [r3, #2]
1004b112:	80d9      	strh	r1, [r3, #6]
1004b114:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
1004b116:	1e7f      	subs	r7, r7, #1
1004b118:	4337      	orrs	r7, r6
1004b11a:	1c7f      	adds	r7, r7, #1
1004b11c:	08bf      	lsrs	r7, r7, #2
1004b11e:	809f      	strh	r7, [r3, #4]
1004b120:	68c7      	ldr	r7, [r0, #12]
1004b122:	8039      	strh	r1, [r7, #0]
1004b124:	6102      	str	r2, [r0, #16]
1004b126:	6143      	str	r3, [r0, #20]
1004b128:	80f9      	strh	r1, [r7, #6]
1004b12a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
1004b12c:	1e52      	subs	r2, r2, #1
1004b12e:	4332      	orrs	r2, r6
1004b130:	1c52      	adds	r2, r2, #1
1004b132:	0892      	lsrs	r2, r2, #2
1004b134:	80ba      	strh	r2, [r7, #4]
1004b136:	8079      	strh	r1, [r7, #2]
1004b138:	6187      	str	r7, [r0, #24]
1004b13a:	4622      	mov	r2, r4
1004b13c:	f7f6 fcec 	bl	10041b18 <BLEPLAT_MemSet>
1004b140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b142:	46c0      	nop			@ (mov r8, r8)

1004b144 <__arm_cp.7_0>:
1004b144:	1004dc1d 	.word	0x1004dc1d

1004b148 <__arm_cp.7_1>:
1004b148:	20000b54 	.word	0x20000b54

1004b14c <__arm_cp.7_2>:
1004b14c:	20000b70 	.word	0x20000b70

1004b150 <Events_Process_Q>:
1004b150:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004b152:	4d3d      	ldr	r5, [pc, #244]	@ (1004b248 <__arm_cp.8_0>)
1004b154:	6828      	ldr	r0, [r5, #0]
1004b156:	3010      	adds	r0, #16
1004b158:	2100      	movs	r1, #0
1004b15a:	2906      	cmp	r1, #6
1004b15c:	d005      	beq.n	1004b16a <Events_Process_Q+0x1a>
1004b15e:	c804      	ldmia	r0!, {r2}
1004b160:	8852      	ldrh	r2, [r2, #2]
1004b162:	ab01      	add	r3, sp, #4
1004b164:	525a      	strh	r2, [r3, r1]
1004b166:	1c89      	adds	r1, r1, #2
1004b168:	e7f7      	b.n	1004b15a <Events_Process_Q+0xa>
1004b16a:	f3ef 8010 	mrs	r0, PRIMASK
1004b16e:	b672      	cpsid	i
1004b170:	6828      	ldr	r0, [r5, #0]
1004b172:	6804      	ldr	r4, [r0, #0]
1004b174:	2700      	movs	r7, #0
1004b176:	6007      	str	r7, [r0, #0]
1004b178:	b662      	cpsie	i
1004b17a:	07e0      	lsls	r0, r4, #31
1004b17c:	d002      	beq.n	1004b184 <Events_Process_Q+0x34>
1004b17e:	2000      	movs	r0, #0
1004b180:	f000 f89f 	bl	1004b2c2 <hci_hardware_error_event_cb>
1004b184:	07a0      	lsls	r0, r4, #30
1004b186:	d502      	bpl.n	1004b18e <Events_Process_Q+0x3e>
1004b188:	2001      	movs	r0, #1
1004b18a:	f000 f89a 	bl	1004b2c2 <hci_hardware_error_event_cb>
1004b18e:	0760      	lsls	r0, r4, #29
1004b190:	d502      	bpl.n	1004b198 <Events_Process_Q+0x48>
1004b192:	2002      	movs	r0, #2
1004b194:	f000 f895 	bl	1004b2c2 <hci_hardware_error_event_cb>
1004b198:	0720      	lsls	r0, r4, #28
1004b19a:	d502      	bpl.n	1004b1a2 <Events_Process_Q+0x52>
1004b19c:	2003      	movs	r0, #3
1004b19e:	f000 f890 	bl	1004b2c2 <hci_hardware_error_event_cb>
1004b1a2:	06e0      	lsls	r0, r4, #27
1004b1a4:	d54a      	bpl.n	1004b23c <Events_Process_Q+0xec>
1004b1a6:	2004      	movs	r0, #4
1004b1a8:	f000 f88b 	bl	1004b2c2 <hci_hardware_error_event_cb>
1004b1ac:	e046      	b.n	1004b23c <Events_Process_Q+0xec>
1004b1ae:	0078      	lsls	r0, r7, #1
1004b1b0:	a901      	add	r1, sp, #4
1004b1b2:	5a0e      	ldrh	r6, [r1, r0]
1004b1b4:	9700      	str	r7, [sp, #0]
1004b1b6:	00bf      	lsls	r7, r7, #2
1004b1b8:	6828      	ldr	r0, [r5, #0]
1004b1ba:	19c0      	adds	r0, r0, r7
1004b1bc:	6900      	ldr	r0, [r0, #16]
1004b1be:	8801      	ldrh	r1, [r0, #0]
1004b1c0:	8802      	ldrh	r2, [r0, #0]
1004b1c2:	42b2      	cmp	r2, r6
1004b1c4:	d02a      	beq.n	1004b21c <Events_Process_Q+0xcc>
1004b1c6:	0889      	lsrs	r1, r1, #2
1004b1c8:	1c89      	adds	r1, r1, #2
1004b1ca:	0089      	lsls	r1, r1, #2
1004b1cc:	1844      	adds	r4, r0, r1
1004b1ce:	78a1      	ldrb	r1, [r4, #2]
1004b1d0:	2203      	movs	r2, #3
1004b1d2:	400a      	ands	r2, r1
1004b1d4:	2a01      	cmp	r2, #1
1004b1d6:	d002      	beq.n	1004b1de <Events_Process_Q+0x8e>
1004b1d8:	2a00      	cmp	r2, #0
1004b1da:	d103      	bne.n	1004b1e4 <Events_Process_Q+0x94>
1004b1dc:	e01e      	b.n	1004b21c <Events_Process_Q+0xcc>
1004b1de:	7a81      	ldrb	r1, [r0, #10]
1004b1e0:	3008      	adds	r0, #8
1004b1e2:	4604      	mov	r4, r0
1004b1e4:	0648      	lsls	r0, r1, #25
1004b1e6:	d403      	bmi.n	1004b1f0 <Events_Process_Q+0xa0>
1004b1e8:	4620      	mov	r0, r4
1004b1ea:	f7ff ff39 	bl	1004b060 <event_notify_cb>
1004b1ee:	e00a      	b.n	1004b206 <Events_Process_Q+0xb6>
1004b1f0:	78e0      	ldrb	r0, [r4, #3]
1004b1f2:	2813      	cmp	r0, #19
1004b1f4:	d207      	bcs.n	1004b206 <Events_Process_Q+0xb6>
1004b1f6:	0080      	lsls	r0, r0, #2
1004b1f8:	4914      	ldr	r1, [pc, #80]	@ (1004b24c <__arm_cp.8_1>)
1004b1fa:	580a      	ldr	r2, [r1, r0]
1004b1fc:	1d21      	adds	r1, r4, #4
1004b1fe:	4620      	mov	r0, r4
1004b200:	4790      	blx	r2
1004b202:	2800      	cmp	r0, #0
1004b204:	d105      	bne.n	1004b212 <Events_Process_Q+0xc2>
1004b206:	6828      	ldr	r0, [r5, #0]
1004b208:	19c0      	adds	r0, r0, r7
1004b20a:	6900      	ldr	r0, [r0, #16]
1004b20c:	8821      	ldrh	r1, [r4, #0]
1004b20e:	8001      	strh	r1, [r0, #0]
1004b210:	e7d5      	b.n	1004b1be <Events_Process_Q+0x6e>
1004b212:	2000      	movs	r0, #0
1004b214:	f003 f810 	bl	1004e238 <tsk_notify_idx>
1004b218:	f7f6 fa5d 	bl	100416d6 <BLE_STACK_ProcessRequest>
1004b21c:	f3ef 8010 	mrs	r0, PRIMASK
1004b220:	b672      	cpsid	i
1004b222:	6828      	ldr	r0, [r5, #0]
1004b224:	19c0      	adds	r0, r0, r7
1004b226:	6900      	ldr	r0, [r0, #16]
1004b228:	8841      	ldrh	r1, [r0, #2]
1004b22a:	8802      	ldrh	r2, [r0, #0]
1004b22c:	4291      	cmp	r1, r2
1004b22e:	d102      	bne.n	1004b236 <Events_Process_Q+0xe6>
1004b230:	2100      	movs	r1, #0
1004b232:	8001      	strh	r1, [r0, #0]
1004b234:	8041      	strh	r1, [r0, #2]
1004b236:	b662      	cpsie	i
1004b238:	9f00      	ldr	r7, [sp, #0]
1004b23a:	1c7f      	adds	r7, r7, #1
1004b23c:	2f03      	cmp	r7, #3
1004b23e:	d1b6      	bne.n	1004b1ae <Events_Process_Q+0x5e>
1004b240:	f7ff fd02 	bl	1004ac48 <hal_radio_activity_state_cb_check>
1004b244:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b246:	46c0      	nop			@ (mov r8, r8)

1004b248 <__arm_cp.8_0>:
1004b248:	20000b54 	.word	0x20000b54

1004b24c <__arm_cp.8_1>:
1004b24c:	1004fef4 	.word	0x1004fef4

1004b250 <hci_event_notify_cb>:
1004b250:	b580      	push	{r7, lr}
1004b252:	4608      	mov	r0, r1
1004b254:	7889      	ldrb	r1, [r1, #2]
1004b256:	1cc9      	adds	r1, r1, #3
1004b258:	f7ff f93e 	bl	1004a4d8 <BLE_STACK_Event>
1004b25c:	bd80      	pop	{r7, pc}

1004b25e <hci_aci_event_notify_cb>:
1004b25e:	b580      	push	{r7, lr}
1004b260:	4608      	mov	r0, r1
1004b262:	7889      	ldrb	r1, [r1, #2]
1004b264:	78c2      	ldrb	r2, [r0, #3]
1004b266:	0212      	lsls	r2, r2, #8
1004b268:	1851      	adds	r1, r2, r1
1004b26a:	1d09      	adds	r1, r1, #4
1004b26c:	b289      	uxth	r1, r1
1004b26e:	f7ff f933 	bl	1004a4d8 <BLE_STACK_Event>
1004b272:	bd80      	pop	{r7, pc}

1004b274 <hci_rx_data_notify_cb>:
1004b274:	b580      	push	{r7, lr}
1004b276:	4608      	mov	r0, r1
1004b278:	78c9      	ldrb	r1, [r1, #3]
1004b27a:	7902      	ldrb	r2, [r0, #4]
1004b27c:	0212      	lsls	r2, r2, #8
1004b27e:	1851      	adds	r1, r2, r1
1004b280:	1d49      	adds	r1, r1, #5
1004b282:	b289      	uxth	r1, r1
1004b284:	f7ff f928 	bl	1004a4d8 <BLE_STACK_Event>
1004b288:	bd80      	pop	{r7, pc}

1004b28a <hci_disconnection_complete_event_int_cb_ucfg_weak>:
1004b28a:	2000      	movs	r0, #0
1004b28c:	4770      	bx	lr

1004b28e <hci_encryption_change_event_int_cb_ucfg_weak>:
1004b28e:	2000      	movs	r0, #0
1004b290:	4770      	bx	lr

1004b292 <hci_encryption_key_refresh_complete_event_int_cb_ucfg_weak>:
1004b292:	2000      	movs	r0, #0
1004b294:	4770      	bx	lr

1004b296 <hci_le_connection_complete_event_int_cb_ucfg_weak>:
1004b296:	2000      	movs	r0, #0
1004b298:	4770      	bx	lr

1004b29a <hci_le_enhanced_connection_complete_event_int_cb_ucfg_weak>:
1004b29a:	2000      	movs	r0, #0
1004b29c:	4770      	bx	lr

1004b29e <hci_le_long_term_key_request_event_int_cb_ucfg_weak>:
1004b29e:	2000      	movs	r0, #0
1004b2a0:	4770      	bx	lr

1004b2a2 <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg_weak>:
1004b2a2:	2000      	movs	r0, #0
1004b2a4:	4770      	bx	lr

1004b2a6 <hci_le_generate_dhkey_complete_event_int_cb_ucfg_weak>:
1004b2a6:	2000      	movs	r0, #0
1004b2a8:	4770      	bx	lr

1004b2aa <hci_le_advertising_report_event_int_cb_ucfg_weak>:
1004b2aa:	2000      	movs	r0, #0
1004b2ac:	4770      	bx	lr

1004b2ae <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
1004b2ae:	2000      	movs	r0, #0
1004b2b0:	4770      	bx	lr

1004b2b2 <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
1004b2b2:	2000      	movs	r0, #0
1004b2b4:	4770      	bx	lr

1004b2b6 <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
1004b2b6:	2000      	movs	r0, #0
1004b2b8:	4770      	bx	lr

1004b2ba <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
1004b2ba:	2000      	movs	r0, #0
1004b2bc:	4770      	bx	lr

1004b2be <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
1004b2be:	2000      	movs	r0, #0
1004b2c0:	4770      	bx	lr

1004b2c2 <hci_hardware_error_event_cb>:
1004b2c2:	b5e0      	push	{r5, r6, r7, lr}
1004b2c4:	aa01      	add	r2, sp, #4
1004b2c6:	70d0      	strb	r0, [r2, #3]
1004b2c8:	2001      	movs	r0, #1
1004b2ca:	7090      	strb	r0, [r2, #2]
1004b2cc:	2010      	movs	r0, #16
1004b2ce:	7050      	strb	r0, [r2, #1]
1004b2d0:	2104      	movs	r1, #4
1004b2d2:	7011      	strb	r1, [r2, #0]
1004b2d4:	4610      	mov	r0, r2
1004b2d6:	f7ff f8ff 	bl	1004a4d8 <BLE_STACK_Event>
1004b2da:	bd8c      	pop	{r2, r3, r7, pc}

1004b2dc <gap_timers_callback_wrapper>:
1004b2dc:	b580      	push	{r7, lr}
1004b2de:	6940      	ldr	r0, [r0, #20]
1004b2e0:	4901      	ldr	r1, [pc, #4]	@ (1004b2e8 <__arm_cp.0_0>)
1004b2e2:	f003 f8b6 	bl	1004e452 <cst_sharedCallback>
1004b2e6:	bd80      	pop	{r7, pc}

1004b2e8 <__arm_cp.0_0>:
1004b2e8:	1004b2ed 	.word	0x1004b2ed

1004b2ec <gap_timers_callback>:
1004b2ec:	b580      	push	{r7, lr}
1004b2ee:	2802      	cmp	r0, #2
1004b2f0:	d007      	beq.n	1004b302 <gap_timers_callback+0x16>
1004b2f2:	2801      	cmp	r0, #1
1004b2f4:	d009      	beq.n	1004b30a <gap_timers_callback+0x1e>
1004b2f6:	2800      	cmp	r0, #0
1004b2f8:	d106      	bne.n	1004b308 <gap_timers_callback+0x1c>
1004b2fa:	2000      	movs	r0, #0
1004b2fc:	f000 f97a 	bl	1004b5f4 <GAP_LimDiscTimeoutcb_ucfg_weak>
1004b300:	bd80      	pop	{r7, pc}
1004b302:	2000      	movs	r0, #0
1004b304:	f003 fa59 	bl	1004e7ba <GAP_DiscProcTimeoutcb_ucfg_weak>
1004b308:	bd80      	pop	{r7, pc}
1004b30a:	2000      	movs	r0, #0
1004b30c:	f000 f802 	bl	1004b314 <GAP_PrivateAddrTimercb>
1004b310:	bd80      	pop	{r7, pc}
	...

1004b314 <GAP_PrivateAddrTimercb>:
1004b314:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b316:	b087      	sub	sp, #28
1004b318:	4831      	ldr	r0, [pc, #196]	@ (1004b3e0 <__arm_cp.2_0>)
1004b31a:	6804      	ldr	r4, [r0, #0]
1004b31c:	a906      	add	r1, sp, #24
1004b31e:	9104      	str	r1, [sp, #16]
1004b320:	2000      	movs	r0, #0
1004b322:	9001      	str	r0, [sp, #4]
1004b324:	7008      	strb	r0, [r1, #0]
1004b326:	ae05      	add	r6, sp, #20
1004b328:	2001      	movs	r0, #1
1004b32a:	7030      	strb	r0, [r6, #0]
1004b32c:	f000 f952 	bl	1004b5d4 <GAP_reset_privacy_timer>
1004b330:	205d      	movs	r0, #93	@ 0x5d
1004b332:	9403      	str	r4, [sp, #12]
1004b334:	5c27      	ldrb	r7, [r4, r0]
1004b336:	1e78      	subs	r0, r7, #1
1004b338:	463d      	mov	r5, r7
1004b33a:	4185      	sbcs	r5, r0
1004b33c:	2020      	movs	r0, #32
1004b33e:	4038      	ands	r0, r7
1004b340:	4244      	negs	r4, r0
1004b342:	9002      	str	r0, [sp, #8]
1004b344:	4144      	adcs	r4, r0
1004b346:	9804      	ldr	r0, [sp, #16]
1004b348:	4631      	mov	r1, r6
1004b34a:	f000 fb8f 	bl	1004ba6c <GAP_check_adv_status>
1004b34e:	2f00      	cmp	r7, #0
1004b350:	d101      	bne.n	1004b356 <GAP_PrivateAddrTimercb+0x42>
1004b352:	2801      	cmp	r0, #1
1004b354:	d13e      	bne.n	1004b3d4 <GAP_PrivateAddrTimercb+0xc0>
1004b356:	402c      	ands	r4, r5
1004b358:	d138      	bne.n	1004b3cc <GAP_PrivateAddrTimercb+0xb8>
1004b35a:	a805      	add	r0, sp, #20
1004b35c:	7800      	ldrb	r0, [r0, #0]
1004b35e:	2800      	cmp	r0, #0
1004b360:	d034      	beq.n	1004b3cc <GAP_PrivateAddrTimercb+0xb8>
1004b362:	9c03      	ldr	r4, [sp, #12]
1004b364:	4620      	mov	r0, r4
1004b366:	305d      	adds	r0, #93	@ 0x5d
1004b368:	7bc0      	ldrb	r0, [r0, #15]
1004b36a:	2800      	cmp	r0, #0
1004b36c:	d034      	beq.n	1004b3d8 <GAP_PrivateAddrTimercb+0xc4>
1004b36e:	3428      	adds	r4, #40	@ 0x28
1004b370:	9d02      	ldr	r5, [sp, #8]
1004b372:	2d00      	cmp	r5, #0
1004b374:	d003      	beq.n	1004b37e <GAP_PrivateAddrTimercb+0x6a>
1004b376:	7821      	ldrb	r1, [r4, #0]
1004b378:	2000      	movs	r0, #0
1004b37a:	f003 fa1b 	bl	1004e7b4 <GAP_enable_disable_scan_ucfg_weak>
1004b37e:	a806      	add	r0, sp, #24
1004b380:	7800      	ldrb	r0, [r0, #0]
1004b382:	2801      	cmp	r0, #1
1004b384:	d102      	bne.n	1004b38c <GAP_PrivateAddrTimercb+0x78>
1004b386:	2000      	movs	r0, #0
1004b388:	f000 fb34 	bl	1004b9f4 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
1004b38c:	f000 f996 	bl	1004b6bc <GAP_generate_new_rpa>
1004b390:	2800      	cmp	r0, #0
1004b392:	d104      	bne.n	1004b39e <GAP_PrivateAddrTimercb+0x8a>
1004b394:	2000      	movs	r0, #0
1004b396:	2101      	movs	r1, #1
1004b398:	f000 f968 	bl	1004b66c <GAP_start_privacy_timer>
1004b39c:	9001      	str	r0, [sp, #4]
1004b39e:	2d00      	cmp	r5, #0
1004b3a0:	d00a      	beq.n	1004b3b8 <GAP_PrivateAddrTimercb+0xa4>
1004b3a2:	7821      	ldrb	r1, [r4, #0]
1004b3a4:	2001      	movs	r0, #1
1004b3a6:	f003 fa05 	bl	1004e7b4 <GAP_enable_disable_scan_ucfg_weak>
1004b3aa:	2800      	cmp	r0, #0
1004b3ac:	d004      	beq.n	1004b3b8 <GAP_PrivateAddrTimercb+0xa4>
1004b3ae:	9801      	ldr	r0, [sp, #4]
1004b3b0:	2800      	cmp	r0, #0
1004b3b2:	d001      	beq.n	1004b3b8 <GAP_PrivateAddrTimercb+0xa4>
1004b3b4:	f000 f920 	bl	1004b5f8 <GAP_stop_privacy_timer>
1004b3b8:	a806      	add	r0, sp, #24
1004b3ba:	7800      	ldrb	r0, [r0, #0]
1004b3bc:	2801      	cmp	r0, #1
1004b3be:	d109      	bne.n	1004b3d4 <GAP_PrivateAddrTimercb+0xc0>
1004b3c0:	2006      	movs	r0, #6
1004b3c2:	f002 ff39 	bl	1004e238 <tsk_notify_idx>
1004b3c6:	f7f6 f986 	bl	100416d6 <BLE_STACK_ProcessRequest>
1004b3ca:	e003      	b.n	1004b3d4 <GAP_PrivateAddrTimercb+0xc0>
1004b3cc:	2001      	movs	r0, #1
1004b3ce:	4601      	mov	r1, r0
1004b3d0:	f000 f94c 	bl	1004b66c <GAP_start_privacy_timer>
1004b3d4:	b007      	add	sp, #28
1004b3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b3d8:	2000      	movs	r0, #0
1004b3da:	2101      	movs	r1, #1
1004b3dc:	e7f8      	b.n	1004b3d0 <GAP_PrivateAddrTimercb+0xbc>
1004b3de:	46c0      	nop			@ (mov r8, r8)

1004b3e0 <__arm_cp.2_0>:
1004b3e0:	20000b58 	.word	0x20000b58

1004b3e4 <GAP_init_context>:
1004b3e4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004b3e6:	461f      	mov	r7, r3
1004b3e8:	9201      	str	r2, [sp, #4]
1004b3ea:	9102      	str	r1, [sp, #8]
1004b3ec:	4605      	mov	r5, r0
1004b3ee:	2401      	movs	r4, #1
1004b3f0:	2178      	movs	r1, #120	@ 0x78
1004b3f2:	4620      	mov	r0, r4
1004b3f4:	f002 fc12 	bl	1004dc1c <csmem_mem_0_assign>
1004b3f8:	21e1      	movs	r1, #225	@ 0xe1
1004b3fa:	0089      	lsls	r1, r1, #2
1004b3fc:	225a      	movs	r2, #90	@ 0x5a
1004b3fe:	5281      	strh	r1, [r0, r2]
1004b400:	4e24      	ldr	r6, [pc, #144]	@ (1004b494 <__arm_cp.3_0>)
1004b402:	6030      	str	r0, [r6, #0]
1004b404:	2d01      	cmp	r5, #1
1004b406:	d117      	bne.n	1004b438 <GAP_init_context+0x54>
1004b408:	2001      	movs	r0, #1
1004b40a:	2106      	movs	r1, #6
1004b40c:	f002 fc06 	bl	1004dc1c <csmem_mem_0_assign>
1004b410:	4601      	mov	r1, r0
1004b412:	6830      	ldr	r0, [r6, #0]
1004b414:	6381      	str	r1, [r0, #56]	@ 0x38
1004b416:	2f01      	cmp	r7, #1
1004b418:	d10e      	bne.n	1004b438 <GAP_init_context+0x54>
1004b41a:	2501      	movs	r5, #1
1004b41c:	270e      	movs	r7, #14
1004b41e:	4628      	mov	r0, r5
1004b420:	4639      	mov	r1, r7
1004b422:	f002 fbfb 	bl	1004dc1c <csmem_mem_0_assign>
1004b426:	6831      	ldr	r1, [r6, #0]
1004b428:	64c8      	str	r0, [r1, #76]	@ 0x4c
1004b42a:	4628      	mov	r0, r5
1004b42c:	4639      	mov	r1, r7
1004b42e:	f002 fbf5 	bl	1004dc1c <csmem_mem_0_assign>
1004b432:	4601      	mov	r1, r0
1004b434:	6830      	ldr	r0, [r6, #0]
1004b436:	6501      	str	r1, [r0, #80]	@ 0x50
1004b438:	9902      	ldr	r1, [sp, #8]
1004b43a:	2901      	cmp	r1, #1
1004b43c:	d10b      	bne.n	1004b456 <GAP_init_context+0x72>
1004b43e:	9801      	ldr	r0, [sp, #4]
1004b440:	2801      	cmp	r0, #1
1004b442:	d105      	bne.n	1004b450 <GAP_init_context+0x6c>
1004b444:	201c      	movs	r0, #28
1004b446:	2101      	movs	r1, #1
1004b448:	f002 fbe8 	bl	1004dc1c <csmem_mem_0_assign>
1004b44c:	6831      	ldr	r1, [r6, #0]
1004b44e:	62c8      	str	r0, [r1, #44]	@ 0x2c
1004b450:	4811      	ldr	r0, [pc, #68]	@ (1004b498 <__arm_cp.3_1>)
1004b452:	7e84      	ldrb	r4, [r0, #26]
1004b454:	e001      	b.n	1004b45a <GAP_init_context+0x76>
1004b456:	2100      	movs	r1, #0
1004b458:	62c1      	str	r1, [r0, #44]	@ 0x2c
1004b45a:	2114      	movs	r1, #20
1004b45c:	4620      	mov	r0, r4
1004b45e:	f002 fbdd 	bl	1004dc1c <csmem_mem_0_assign>
1004b462:	6831      	ldr	r1, [r6, #0]
1004b464:	6548      	str	r0, [r1, #84]	@ 0x54
1004b466:	4c0d      	ldr	r4, [pc, #52]	@ (1004b49c <__arm_cp.3_2>)
1004b468:	2104      	movs	r1, #4
1004b46a:	2201      	movs	r2, #1
1004b46c:	4620      	mov	r0, r4
1004b46e:	f002 fbc3 	bl	1004dbf8 <csmem_mem_assign>
1004b472:	6831      	ldr	r1, [r6, #0]
1004b474:	6208      	str	r0, [r1, #32]
1004b476:	2503      	movs	r5, #3
1004b478:	2202      	movs	r2, #2
1004b47a:	4620      	mov	r0, r4
1004b47c:	4629      	mov	r1, r5
1004b47e:	f002 fbbb 	bl	1004dbf8 <csmem_mem_assign>
1004b482:	6831      	ldr	r1, [r6, #0]
1004b484:	6248      	str	r0, [r1, #36]	@ 0x24
1004b486:	4a06      	ldr	r2, [pc, #24]	@ (1004b4a0 <__arm_cp.3_3>)
1004b488:	2307      	movs	r3, #7
1004b48a:	4608      	mov	r0, r1
1004b48c:	4629      	mov	r1, r5
1004b48e:	f002 ff07 	bl	1004e2a0 <CST_init>
1004b492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004b494 <__arm_cp.3_0>:
1004b494:	20000b58 	.word	0x20000b58

1004b498 <__arm_cp.3_1>:
1004b498:	20000b70 	.word	0x20000b70

1004b49c <__arm_cp.3_2>:
1004b49c:	20000b6c 	.word	0x20000b6c

1004b4a0 <__arm_cp.3_3>:
1004b4a0:	1004b2dd 	.word	0x1004b2dd

1004b4a4 <GAP_get_default_le_event_mask>:
1004b4a4:	b5b0      	push	{r4, r5, r7, lr}
1004b4a6:	4604      	mov	r4, r0
1004b4a8:	2100      	movs	r1, #0
1004b4aa:	2508      	movs	r5, #8
1004b4ac:	462a      	mov	r2, r5
1004b4ae:	f7f6 fb33 	bl	10041b18 <BLEPLAT_MemSet>
1004b4b2:	7820      	ldrb	r0, [r4, #0]
1004b4b4:	21df      	movs	r1, #223	@ 0xdf
1004b4b6:	4301      	orrs	r1, r0
1004b4b8:	7021      	strb	r1, [r4, #0]
1004b4ba:	7860      	ldrb	r0, [r4, #1]
1004b4bc:	2109      	movs	r1, #9
1004b4be:	4301      	orrs	r1, r0
1004b4c0:	7061      	strb	r1, [r4, #1]
1004b4c2:	78a1      	ldrb	r1, [r4, #2]
1004b4c4:	4329      	orrs	r1, r5
1004b4c6:	70a1      	strb	r1, [r4, #2]
1004b4c8:	4911      	ldr	r1, [pc, #68]	@ (1004b510 <__arm_cp.4_0>)
1004b4ca:	6809      	ldr	r1, [r1, #0]
1004b4cc:	225c      	movs	r2, #92	@ 0x5c
1004b4ce:	5c89      	ldrb	r1, [r1, r2]
1004b4d0:	0689      	lsls	r1, r1, #26
1004b4d2:	d502      	bpl.n	1004b4da <GAP_get_default_le_event_mask+0x36>
1004b4d4:	210f      	movs	r1, #15
1004b4d6:	4308      	orrs	r0, r1
1004b4d8:	7060      	strb	r0, [r4, #1]
1004b4da:	f001 fe68 	bl	1004d1ae <ext_adv_scan_enabled_ucfg_weak>
1004b4de:	2801      	cmp	r0, #1
1004b4e0:	d107      	bne.n	1004b4f2 <GAP_get_default_le_event_mask+0x4e>
1004b4e2:	7860      	ldrb	r0, [r4, #1]
1004b4e4:	2112      	movs	r1, #18
1004b4e6:	4301      	orrs	r1, r0
1004b4e8:	7061      	strb	r1, [r4, #1]
1004b4ea:	78a0      	ldrb	r0, [r4, #2]
1004b4ec:	2107      	movs	r1, #7
1004b4ee:	4301      	orrs	r1, r0
1004b4f0:	70a1      	strb	r1, [r4, #2]
1004b4f2:	f000 fe13 	bl	1004c11c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004b4f6:	b2c0      	uxtb	r0, r0
1004b4f8:	2801      	cmp	r0, #1
1004b4fa:	d107      	bne.n	1004b50c <GAP_get_default_le_event_mask+0x68>
1004b4fc:	7860      	ldrb	r0, [r4, #1]
1004b4fe:	21e0      	movs	r1, #224	@ 0xe0
1004b500:	4301      	orrs	r1, r0
1004b502:	7061      	strb	r1, [r4, #1]
1004b504:	78a0      	ldrb	r0, [r4, #2]
1004b506:	2180      	movs	r1, #128	@ 0x80
1004b508:	4301      	orrs	r1, r0
1004b50a:	70a1      	strb	r1, [r4, #2]
1004b50c:	bdb0      	pop	{r4, r5, r7, pc}
1004b50e:	46c0      	nop			@ (mov r8, r8)

1004b510 <__arm_cp.4_0>:
1004b510:	20000b58 	.word	0x20000b58

1004b514 <gap_extended_adv_scan_supported>:
1004b514:	b580      	push	{r7, lr}
1004b516:	f001 fe4a 	bl	1004d1ae <ext_adv_scan_enabled_ucfg_weak>
1004b51a:	bd80      	pop	{r7, pc}

1004b51c <GAP_Init>:
1004b51c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b51e:	b087      	sub	sp, #28
1004b520:	4606      	mov	r6, r0
1004b522:	a806      	add	r0, sp, #24
1004b524:	2700      	movs	r7, #0
1004b526:	7007      	strb	r7, [r0, #0]
1004b528:	2412      	movs	r4, #18
1004b52a:	2901      	cmp	r1, #1
1004b52c:	d901      	bls.n	1004b532 <GAP_Init+0x16>
1004b52e:	4620      	mov	r0, r4
1004b530:	e04a      	b.n	1004b5c8 <GAP_Init+0xac>
1004b532:	460d      	mov	r5, r1
1004b534:	4825      	ldr	r0, [pc, #148]	@ (1004b5cc <__arm_cp.7_0>)
1004b536:	6800      	ldr	r0, [r0, #0]
1004b538:	9002      	str	r0, [sp, #8]
1004b53a:	f003 f849 	bl	1004e5d0 <IDD_Initialize_Device_IDs>
1004b53e:	2800      	cmp	r0, #0
1004b540:	d142      	bne.n	1004b5c8 <GAP_Init+0xac>
1004b542:	9902      	ldr	r1, [sp, #8]
1004b544:	315c      	adds	r1, #92	@ 0x5c
1004b546:	7808      	ldrb	r0, [r1, #0]
1004b548:	07c0      	lsls	r0, r0, #31
1004b54a:	d111      	bne.n	1004b570 <GAP_Init+0x54>
1004b54c:	78c8      	ldrb	r0, [r1, #3]
1004b54e:	4328      	orrs	r0, r5
1004b550:	9101      	str	r1, [sp, #4]
1004b552:	70c8      	strb	r0, [r1, #3]
1004b554:	a805      	add	r0, sp, #20
1004b556:	2107      	movs	r1, #7
1004b558:	7001      	strb	r1, [r0, #0]
1004b55a:	2e00      	cmp	r6, #0
1004b55c:	d012      	beq.n	1004b584 <GAP_Init+0x68>
1004b55e:	2e02      	cmp	r6, #2
1004b560:	d008      	beq.n	1004b574 <GAP_Init+0x58>
1004b562:	2e01      	cmp	r6, #1
1004b564:	4620      	mov	r0, r4
1004b566:	d12f      	bne.n	1004b5c8 <GAP_Init+0xac>
1004b568:	a806      	add	r0, sp, #24
1004b56a:	2110      	movs	r1, #16
1004b56c:	7001      	strb	r1, [r0, #0]
1004b56e:	e009      	b.n	1004b584 <GAP_Init+0x68>
1004b570:	200c      	movs	r0, #12
1004b572:	e029      	b.n	1004b5c8 <GAP_Init+0xac>
1004b574:	a806      	add	r0, sp, #24
1004b576:	2120      	movs	r1, #32
1004b578:	7001      	strb	r1, [r0, #0]
1004b57a:	a905      	add	r1, sp, #20
1004b57c:	f000 f86e 	bl	1004b65c <GAP_enable_controller_privacy_ucfg_weak>
1004b580:	2800      	cmp	r0, #0
1004b582:	d121      	bne.n	1004b5c8 <GAP_Init+0xac>
1004b584:	4628      	mov	r0, r5
1004b586:	f000 f86f 	bl	1004b668 <GAP_init_advertising_sets_ucfg_weak>
1004b58a:	2800      	cmp	r0, #0
1004b58c:	d11c      	bne.n	1004b5c8 <GAP_Init+0xac>
1004b58e:	9802      	ldr	r0, [sp, #8]
1004b590:	3060      	adds	r0, #96	@ 0x60
1004b592:	f000 f865 	bl	1004b660 <GAP_set_controller_random_address_ucfg_weak>
1004b596:	2800      	cmp	r0, #0
1004b598:	d116      	bne.n	1004b5c8 <GAP_Init+0xac>
1004b59a:	9806      	ldr	r0, [sp, #24]
1004b59c:	2101      	movs	r1, #1
1004b59e:	9a01      	ldr	r2, [sp, #4]
1004b5a0:	7411      	strb	r1, [r2, #16]
1004b5a2:	4308      	orrs	r0, r1
1004b5a4:	7010      	strb	r0, [r2, #0]
1004b5a6:	f000 f815 	bl	1004b5d4 <GAP_reset_privacy_timer>
1004b5aa:	ac03      	add	r4, sp, #12
1004b5ac:	4620      	mov	r0, r4
1004b5ae:	f7ff ff79 	bl	1004b4a4 <GAP_get_default_le_event_mask>
1004b5b2:	4620      	mov	r0, r4
1004b5b4:	f000 fb66 	bl	1004bc84 <hci_le_set_event_mask>
1004b5b8:	43f8      	mvns	r0, r7
1004b5ba:	9003      	str	r0, [sp, #12]
1004b5bc:	4804      	ldr	r0, [pc, #16]	@ (1004b5d0 <__arm_cp.7_1>)
1004b5be:	9004      	str	r0, [sp, #16]
1004b5c0:	4620      	mov	r0, r4
1004b5c2:	f000 fb4f 	bl	1004bc64 <hci_set_event_mask>
1004b5c6:	4638      	mov	r0, r7
1004b5c8:	b007      	add	sp, #28
1004b5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004b5cc <__arm_cp.7_0>:
1004b5cc:	20000b58 	.word	0x20000b58

1004b5d0 <__arm_cp.7_1>:
1004b5d0:	20009fff 	.word	0x20009fff

1004b5d4 <GAP_reset_privacy_timer>:
1004b5d4:	4806      	ldr	r0, [pc, #24]	@ (1004b5f0 <__arm_cp.8_0>)
1004b5d6:	6800      	ldr	r0, [r0, #0]
1004b5d8:	215c      	movs	r1, #92	@ 0x5c
1004b5da:	5c41      	ldrb	r1, [r0, r1]
1004b5dc:	0689      	lsls	r1, r1, #26
1004b5de:	0f89      	lsrs	r1, r1, #30
1004b5e0:	d004      	beq.n	1004b5ec <GAP_reset_privacy_timer+0x18>
1004b5e2:	305c      	adds	r0, #92	@ 0x5c
1004b5e4:	78c1      	ldrb	r1, [r0, #3]
1004b5e6:	2202      	movs	r2, #2
1004b5e8:	430a      	orrs	r2, r1
1004b5ea:	70c2      	strb	r2, [r0, #3]
1004b5ec:	4770      	bx	lr
1004b5ee:	46c0      	nop			@ (mov r8, r8)

1004b5f0 <__arm_cp.8_0>:
1004b5f0:	20000b58 	.word	0x20000b58

1004b5f4 <GAP_LimDiscTimeoutcb_ucfg_weak>:
1004b5f4:	4770      	bx	lr
	...

1004b5f8 <GAP_stop_privacy_timer>:
1004b5f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1004b5fa:	4c0d      	ldr	r4, [pc, #52]	@ (1004b630 <__arm_cp.19_0>)
1004b5fc:	6825      	ldr	r5, [r4, #0]
1004b5fe:	205c      	movs	r0, #92	@ 0x5c
1004b600:	5c28      	ldrb	r0, [r5, r0]
1004b602:	0680      	lsls	r0, r0, #26
1004b604:	0f80      	lsrs	r0, r0, #30
1004b606:	d012      	beq.n	1004b62e <GAP_stop_privacy_timer+0x36>
1004b608:	355c      	adds	r5, #92	@ 0x5c
1004b60a:	78e8      	ldrb	r0, [r5, #3]
1004b60c:	2602      	movs	r6, #2
1004b60e:	4030      	ands	r0, r6
1004b610:	d10d      	bne.n	1004b62e <GAP_stop_privacy_timer+0x36>
1004b612:	a801      	add	r0, sp, #4
1004b614:	4669      	mov	r1, sp
1004b616:	f000 fa29 	bl	1004ba6c <GAP_check_adv_status>
1004b61a:	7869      	ldrb	r1, [r5, #1]
1004b61c:	4301      	orrs	r1, r0
1004b61e:	d106      	bne.n	1004b62e <GAP_stop_privacy_timer+0x36>
1004b620:	78e8      	ldrb	r0, [r5, #3]
1004b622:	4330      	orrs	r0, r6
1004b624:	70e8      	strb	r0, [r5, #3]
1004b626:	6820      	ldr	r0, [r4, #0]
1004b628:	2101      	movs	r1, #1
1004b62a:	f002 fe4e 	bl	1004e2ca <CST_stop>
1004b62e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1004b630 <__arm_cp.19_0>:
1004b630:	20000b58 	.word	0x20000b58

1004b634 <GAP_get_own_address_type>:
1004b634:	4808      	ldr	r0, [pc, #32]	@ (1004b658 <__arm_cp.29_0>)
1004b636:	6800      	ldr	r0, [r0, #0]
1004b638:	215c      	movs	r1, #92	@ 0x5c
1004b63a:	5c41      	ldrb	r1, [r0, r1]
1004b63c:	06ca      	lsls	r2, r1, #27
1004b63e:	d406      	bmi.n	1004b64e <GAP_get_own_address_type+0x1a>
1004b640:	0689      	lsls	r1, r1, #26
1004b642:	d406      	bmi.n	1004b652 <GAP_get_own_address_type+0x1e>
1004b644:	305c      	adds	r0, #92	@ 0x5c
1004b646:	78c1      	ldrb	r1, [r0, #3]
1004b648:	2001      	movs	r0, #1
1004b64a:	4008      	ands	r0, r1
1004b64c:	4770      	bx	lr
1004b64e:	2001      	movs	r0, #1
1004b650:	4770      	bx	lr
1004b652:	2003      	movs	r0, #3
1004b654:	4770      	bx	lr
1004b656:	46c0      	nop			@ (mov r8, r8)

1004b658 <__arm_cp.29_0>:
1004b658:	20000b58 	.word	0x20000b58

1004b65c <GAP_enable_controller_privacy_ucfg_weak>:
1004b65c:	2012      	movs	r0, #18
1004b65e:	4770      	bx	lr

1004b660 <GAP_set_controller_random_address_ucfg_weak>:
1004b660:	b580      	push	{r7, lr}
1004b662:	f000 fafa 	bl	1004bc5a <hci_le_set_random_address>
1004b666:	bd80      	pop	{r7, pc}

1004b668 <GAP_init_advertising_sets_ucfg_weak>:
1004b668:	2000      	movs	r0, #0
1004b66a:	4770      	bx	lr

1004b66c <GAP_start_privacy_timer>:
1004b66c:	b5b0      	push	{r4, r5, r7, lr}
1004b66e:	4602      	mov	r2, r0
1004b670:	4810      	ldr	r0, [pc, #64]	@ (1004b6b4 <__arm_cp.47_0>)
1004b672:	6800      	ldr	r0, [r0, #0]
1004b674:	4605      	mov	r5, r0
1004b676:	355a      	adds	r5, #90	@ 0x5a
1004b678:	2900      	cmp	r1, #0
1004b67a:	d108      	bne.n	1004b68e <GAP_start_privacy_timer+0x22>
1004b67c:	78a9      	ldrb	r1, [r5, #2]
1004b67e:	0689      	lsls	r1, r1, #26
1004b680:	2400      	movs	r4, #0
1004b682:	0f89      	lsrs	r1, r1, #30
1004b684:	d014      	beq.n	1004b6b0 <GAP_start_privacy_timer+0x44>
1004b686:	7969      	ldrb	r1, [r5, #5]
1004b688:	2302      	movs	r3, #2
1004b68a:	400b      	ands	r3, r1
1004b68c:	d010      	beq.n	1004b6b0 <GAP_start_privacy_timer+0x44>
1004b68e:	2a00      	cmp	r2, #0
1004b690:	d001      	beq.n	1004b696 <GAP_start_privacy_timer+0x2a>
1004b692:	4b09      	ldr	r3, [pc, #36]	@ (1004b6b8 <__arm_cp.47_1>)
1004b694:	e003      	b.n	1004b69e <GAP_start_privacy_timer+0x32>
1004b696:	217d      	movs	r1, #125	@ 0x7d
1004b698:	00c9      	lsls	r1, r1, #3
1004b69a:	882b      	ldrh	r3, [r5, #0]
1004b69c:	434b      	muls	r3, r1
1004b69e:	2401      	movs	r4, #1
1004b6a0:	4621      	mov	r1, r4
1004b6a2:	4622      	mov	r2, r4
1004b6a4:	f002 fe47 	bl	1004e336 <CST_start>
1004b6a8:	7968      	ldrb	r0, [r5, #5]
1004b6aa:	21fd      	movs	r1, #253	@ 0xfd
1004b6ac:	4001      	ands	r1, r0
1004b6ae:	7169      	strb	r1, [r5, #5]
1004b6b0:	4620      	mov	r0, r4
1004b6b2:	bdb0      	pop	{r4, r5, r7, pc}

1004b6b4 <__arm_cp.47_0>:
1004b6b4:	20000b58 	.word	0x20000b58

1004b6b8 <__arm_cp.47_1>:
1004b6b8:	00007530 	.word	0x00007530

1004b6bc <GAP_generate_new_rpa>:
1004b6bc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1004b6be:	4d0d      	ldr	r5, [pc, #52]	@ (1004b6f4 <__arm_cp.48_0>)
1004b6c0:	6828      	ldr	r0, [r5, #0]
1004b6c2:	215f      	movs	r1, #95	@ 0x5f
1004b6c4:	5c40      	ldrb	r0, [r0, r1]
1004b6c6:	0780      	lsls	r0, r0, #30
1004b6c8:	d401      	bmi.n	1004b6ce <GAP_generate_new_rpa+0x12>
1004b6ca:	240c      	movs	r4, #12
1004b6cc:	e00f      	b.n	1004b6ee <GAP_generate_new_rpa+0x32>
1004b6ce:	466c      	mov	r4, sp
1004b6d0:	4620      	mov	r0, r4
1004b6d2:	f002 fd05 	bl	1004e0e0 <smp_sap_crt_generate_rpa>
1004b6d6:	4620      	mov	r0, r4
1004b6d8:	f7ff ffc2 	bl	1004b660 <GAP_set_controller_random_address_ucfg_weak>
1004b6dc:	4604      	mov	r4, r0
1004b6de:	2800      	cmp	r0, #0
1004b6e0:	d105      	bne.n	1004b6ee <GAP_generate_new_rpa+0x32>
1004b6e2:	6828      	ldr	r0, [r5, #0]
1004b6e4:	3066      	adds	r0, #102	@ 0x66
1004b6e6:	4669      	mov	r1, sp
1004b6e8:	2206      	movs	r2, #6
1004b6ea:	f7f6 fa05 	bl	10041af8 <BLEPLAT_MemCpy>
1004b6ee:	4620      	mov	r0, r4
1004b6f0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1004b6f2:	46c0      	nop			@ (mov r8, r8)

1004b6f4 <__arm_cp.48_0>:
1004b6f4:	20000b58 	.word	0x20000b58

1004b6f8 <GAP_is_rpa_change_at_timeout_enabled>:
1004b6f8:	4802      	ldr	r0, [pc, #8]	@ (1004b704 <__arm_cp.54_0>)
1004b6fa:	6800      	ldr	r0, [r0, #0]
1004b6fc:	216c      	movs	r1, #108	@ 0x6c
1004b6fe:	5c40      	ldrb	r0, [r0, r1]
1004b700:	4770      	bx	lr
1004b702:	46c0      	nop			@ (mov r8, r8)

1004b704 <__arm_cp.54_0>:
1004b704:	20000b58 	.word	0x20000b58

1004b708 <GAP_check_discoverability_mode>:
1004b708:	1e43      	subs	r3, r0, #1
1004b70a:	2b02      	cmp	r3, #2
1004b70c:	d309      	bcc.n	1004b722 <GAP_check_discoverability_mode+0x1a>
1004b70e:	2800      	cmp	r0, #0
1004b710:	d00c      	beq.n	1004b72c <GAP_check_discoverability_mode+0x24>
1004b712:	2803      	cmp	r0, #3
1004b714:	d109      	bne.n	1004b72a <GAP_check_discoverability_mode+0x22>
1004b716:	2001      	movs	r0, #1
1004b718:	4001      	ands	r1, r0
1004b71a:	4249      	negs	r1, r1
1004b71c:	2012      	movs	r0, #18
1004b71e:	4008      	ands	r0, r1
1004b720:	4770      	bx	lr
1004b722:	2a00      	cmp	r2, #0
1004b724:	d101      	bne.n	1004b72a <GAP_check_discoverability_mode+0x22>
1004b726:	4610      	mov	r0, r2
1004b728:	4770      	bx	lr
1004b72a:	2012      	movs	r0, #18
1004b72c:	4770      	bx	lr
	...

1004b730 <GAP_advEvtProp_to_advType>:
1004b730:	4601      	mov	r1, r0
1004b732:	3910      	subs	r1, #16
1004b734:	2905      	cmp	r1, #5
1004b736:	d80a      	bhi.n	1004b74e <GAP_advEvtProp_to_advType+0x1e>
1004b738:	2000      	movs	r0, #0
1004b73a:	46c0      	nop			@ (mov r8, r8)
1004b73c:	4479      	add	r1, pc
1004b73e:	7909      	ldrb	r1, [r1, #4]
1004b740:	0049      	lsls	r1, r1, #1
1004b742:	448f      	add	pc, r1
1004b744:	090a0802 	.word	0x090a0802
1004b748:	0c08      	.short	0x0c08
1004b74a:	2003      	movs	r0, #3
1004b74c:	4770      	bx	lr
1004b74e:	281d      	cmp	r0, #29
1004b750:	d101      	bne.n	1004b756 <GAP_advEvtProp_to_advType+0x26>
1004b752:	2001      	movs	r0, #1
1004b754:	4770      	bx	lr
1004b756:	2005      	movs	r0, #5
1004b758:	4770      	bx	lr
1004b75a:	2002      	movs	r0, #2
1004b75c:	4770      	bx	lr
1004b75e:	2004      	movs	r0, #4
1004b760:	4770      	bx	lr
	...

1004b764 <GAP_set_legacy_advertising_configuration>:
1004b764:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b766:	b08d      	sub	sp, #52	@ 0x34
1004b768:	4615      	mov	r5, r2
1004b76a:	460f      	mov	r7, r1
1004b76c:	4601      	mov	r1, r0
1004b76e:	06fa      	lsls	r2, r7, #27
1004b770:	2012      	movs	r0, #18
1004b772:	2a00      	cmp	r2, #0
1004b774:	d542      	bpl.n	1004b7fc <GAP_set_legacy_advertising_configuration+0x98>
1004b776:	461c      	mov	r4, r3
1004b778:	2301      	movs	r3, #1
1004b77a:	039a      	lsls	r2, r3, #14
1004b77c:	4295      	cmp	r5, r2
1004b77e:	d83d      	bhi.n	1004b7fc <GAP_set_legacy_advertising_configuration+0x98>
1004b780:	4294      	cmp	r4, r2
1004b782:	d83b      	bhi.n	1004b7fc <GAP_set_legacy_advertising_configuration+0x98>
1004b784:	930c      	str	r3, [sp, #48]	@ 0x30
1004b786:	481e      	ldr	r0, [pc, #120]	@ (1004b800 <__arm_cp.2_0>)
1004b788:	6806      	ldr	r6, [r0, #0]
1004b78a:	9815      	ldr	r0, [sp, #84]	@ 0x54
1004b78c:	900b      	str	r0, [sp, #44]	@ 0x2c
1004b78e:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004b790:	900a      	str	r0, [sp, #40]	@ 0x28
1004b792:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1004b794:	9008      	str	r0, [sp, #32]
1004b796:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004b798:	9009      	str	r0, [sp, #36]	@ 0x24
1004b79a:	6d70      	ldr	r0, [r6, #84]	@ 0x54
1004b79c:	2200      	movs	r2, #0
1004b79e:	9205      	str	r2, [sp, #20]
1004b7a0:	7042      	strb	r2, [r0, #1]
1004b7a2:	7001      	strb	r1, [r0, #0]
1004b7a4:	f7ff ff46 	bl	1004b634 <GAP_get_own_address_type>
1004b7a8:	9007      	str	r0, [sp, #28]
1004b7aa:	4638      	mov	r0, r7
1004b7ac:	f7ff ffc0 	bl	1004b730 <GAP_advEvtProp_to_advType>
1004b7b0:	4602      	mov	r2, r0
1004b7b2:	9606      	str	r6, [sp, #24]
1004b7b4:	6d70      	ldr	r0, [r6, #84]	@ 0x54
1004b7b6:	7841      	ldrb	r1, [r0, #1]
1004b7b8:	2320      	movs	r3, #32
1004b7ba:	430b      	orrs	r3, r1
1004b7bc:	7043      	strb	r3, [r0, #1]
1004b7be:	2a04      	cmp	r2, #4
1004b7c0:	d808      	bhi.n	1004b7d4 <GAP_set_legacy_advertising_configuration+0x70>
1004b7c2:	2317      	movs	r3, #23
1004b7c4:	40d3      	lsrs	r3, r2
1004b7c6:	07db      	lsls	r3, r3, #31
1004b7c8:	d004      	beq.n	1004b7d4 <GAP_set_legacy_advertising_configuration+0x70>
1004b7ca:	b253      	sxtb	r3, r2
1004b7cc:	a70d      	add	r7, pc, #52	@ (adr r7, 1004b804 <__arm_cp.2_0+0x4>)
1004b7ce:	5cfb      	ldrb	r3, [r7, r3]
1004b7d0:	4319      	orrs	r1, r3
1004b7d2:	7041      	strb	r1, [r0, #1]
1004b7d4:	9808      	ldr	r0, [sp, #32]
1004b7d6:	9000      	str	r0, [sp, #0]
1004b7d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004b7da:	9001      	str	r0, [sp, #4]
1004b7dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004b7de:	9002      	str	r0, [sp, #8]
1004b7e0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004b7e2:	9003      	str	r0, [sp, #12]
1004b7e4:	b2a8      	uxth	r0, r5
1004b7e6:	b2a1      	uxth	r1, r4
1004b7e8:	9b07      	ldr	r3, [sp, #28]
1004b7ea:	f000 f98a 	bl	1004bb02 <hci_le_set_advertising_parameters>
1004b7ee:	2800      	cmp	r0, #0
1004b7f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004b7f2:	d103      	bne.n	1004b7fc <GAP_set_legacy_advertising_configuration+0x98>
1004b7f4:	9806      	ldr	r0, [sp, #24]
1004b7f6:	6d40      	ldr	r0, [r0, #84]	@ 0x54
1004b7f8:	7481      	strb	r1, [r0, #18]
1004b7fa:	9805      	ldr	r0, [sp, #20]
1004b7fc:	b00d      	add	sp, #52	@ 0x34
1004b7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004b800 <__arm_cp.2_0>:
1004b800:	20000b58 	.word	0x20000b58
1004b804:	70287028 	.word	0x70287028
1004b808:	00000030 	.word	0x00000030

1004b80c <GAP_set_legacy_advertising_enable>:
1004b80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b80e:	4604      	mov	r4, r0
1004b810:	481a      	ldr	r0, [pc, #104]	@ (1004b87c <__arm_cp.4_0>)
1004b812:	6807      	ldr	r7, [r0, #0]
1004b814:	2c00      	cmp	r4, #0
1004b816:	d00e      	beq.n	1004b836 <GAP_set_legacy_advertising_enable+0x2a>
1004b818:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1004b81a:	7c80      	ldrb	r0, [r0, #18]
1004b81c:	2801      	cmp	r0, #1
1004b81e:	d124      	bne.n	1004b86a <GAP_set_legacy_advertising_enable+0x5e>
1004b820:	2000      	movs	r0, #0
1004b822:	4601      	mov	r1, r0
1004b824:	f000 f82c 	bl	1004b880 <GAP_check_flags>
1004b828:	4605      	mov	r5, r0
1004b82a:	2800      	cmp	r0, #0
1004b82c:	d11e      	bne.n	1004b86c <GAP_set_legacy_advertising_enable+0x60>
1004b82e:	f7ff ff45 	bl	1004b6bc <GAP_generate_new_rpa>
1004b832:	4606      	mov	r6, r0
1004b834:	e000      	b.n	1004b838 <GAP_set_legacy_advertising_enable+0x2c>
1004b836:	260c      	movs	r6, #12
1004b838:	4620      	mov	r0, r4
1004b83a:	f000 f9c2 	bl	1004bbc2 <hci_le_set_advertising_enable>
1004b83e:	4605      	mov	r5, r0
1004b840:	2800      	cmp	r0, #0
1004b842:	d113      	bne.n	1004b86c <GAP_set_legacy_advertising_enable+0x60>
1004b844:	2500      	movs	r5, #0
1004b846:	4620      	mov	r0, r4
1004b848:	4629      	mov	r1, r5
1004b84a:	462a      	mov	r2, r5
1004b84c:	f000 f872 	bl	1004b934 <GAP_set_discoverability_mode>
1004b850:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1004b852:	2c00      	cmp	r4, #0
1004b854:	d00c      	beq.n	1004b870 <GAP_set_legacy_advertising_enable+0x64>
1004b856:	2101      	movs	r1, #1
1004b858:	74c1      	strb	r1, [r0, #19]
1004b85a:	2e00      	cmp	r6, #0
1004b85c:	d106      	bne.n	1004b86c <GAP_set_legacy_advertising_enable+0x60>
1004b85e:	2500      	movs	r5, #0
1004b860:	4628      	mov	r0, r5
1004b862:	4629      	mov	r1, r5
1004b864:	f7ff ff02 	bl	1004b66c <GAP_start_privacy_timer>
1004b868:	e000      	b.n	1004b86c <GAP_set_legacy_advertising_enable+0x60>
1004b86a:	25d3      	movs	r5, #211	@ 0xd3
1004b86c:	4628      	mov	r0, r5
1004b86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b870:	2500      	movs	r5, #0
1004b872:	74c5      	strb	r5, [r0, #19]
1004b874:	f7ff fec0 	bl	1004b5f8 <GAP_stop_privacy_timer>
1004b878:	e7f8      	b.n	1004b86c <GAP_set_legacy_advertising_enable+0x60>
1004b87a:	46c0      	nop			@ (mov r8, r8)

1004b87c <__arm_cp.4_0>:
1004b87c:	20000b58 	.word	0x20000b58

1004b880 <GAP_check_flags>:
1004b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b882:	4a28      	ldr	r2, [pc, #160]	@ (1004b924 <__arm_cp.5_0>)
1004b884:	7e92      	ldrb	r2, [r2, #26]
1004b886:	2512      	movs	r5, #18
1004b888:	428a      	cmp	r2, r1
1004b88a:	d925      	bls.n	1004b8d8 <GAP_check_flags+0x58>
1004b88c:	2800      	cmp	r0, #0
1004b88e:	d100      	bne.n	1004b892 <GAP_check_flags+0x12>
1004b890:	4601      	mov	r1, r0
1004b892:	2214      	movs	r2, #20
1004b894:	434a      	muls	r2, r1
1004b896:	4824      	ldr	r0, [pc, #144]	@ (1004b928 <__arm_cp.5_1>)
1004b898:	6800      	ldr	r0, [r0, #0]
1004b89a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
1004b89c:	1899      	adds	r1, r3, r2
1004b89e:	784c      	ldrb	r4, [r1, #1]
1004b8a0:	06a0      	lsls	r0, r4, #26
1004b8a2:	0fc6      	lsrs	r6, r0, #31
1004b8a4:	2000      	movs	r0, #0
1004b8a6:	2e00      	cmp	r6, #0
1004b8a8:	d002      	beq.n	1004b8b0 <GAP_check_flags+0x30>
1004b8aa:	2710      	movs	r7, #16
1004b8ac:	4027      	ands	r7, r4
1004b8ae:	d114      	bne.n	1004b8da <GAP_check_flags+0x5a>
1004b8b0:	2e00      	cmp	r6, #0
1004b8b2:	d102      	bne.n	1004b8ba <GAP_check_flags+0x3a>
1004b8b4:	2608      	movs	r6, #8
1004b8b6:	4034      	ands	r4, r6
1004b8b8:	d10f      	bne.n	1004b8da <GAP_check_flags+0x5a>
1004b8ba:	5c9e      	ldrb	r6, [r3, r2]
1004b8bc:	684c      	ldr	r4, [r1, #4]
1004b8be:	8908      	ldrh	r0, [r1, #8]
1004b8c0:	4621      	mov	r1, r4
1004b8c2:	f000 f8bb 	bl	1004ba3c <GAP_search_flags_index>
1004b8c6:	4919      	ldr	r1, [pc, #100]	@ (1004b92c <__arm_cp.5_2>)
1004b8c8:	4288      	cmp	r0, r1
1004b8ca:	d008      	beq.n	1004b8de <GAP_check_flags+0x5e>
1004b8cc:	1900      	adds	r0, r0, r4
1004b8ce:	7881      	ldrb	r1, [r0, #2]
1004b8d0:	0748      	lsls	r0, r1, #29
1004b8d2:	d40b      	bmi.n	1004b8ec <GAP_check_flags+0x6c>
1004b8d4:	20d4      	movs	r0, #212	@ 0xd4
1004b8d6:	e000      	b.n	1004b8da <GAP_check_flags+0x5a>
1004b8d8:	4628      	mov	r0, r5
1004b8da:	b2c0      	uxtb	r0, r0
1004b8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b8de:	2e03      	cmp	r6, #3
1004b8e0:	4628      	mov	r0, r5
1004b8e2:	d8fa      	bhi.n	1004b8da <GAP_check_flags+0x5a>
1004b8e4:	00f1      	lsls	r1, r6, #3
1004b8e6:	4812      	ldr	r0, [pc, #72]	@ (1004b930 <__arm_cp.5_3>)
1004b8e8:	40c8      	lsrs	r0, r1
1004b8ea:	e7f6      	b.n	1004b8da <GAP_check_flags+0x5a>
1004b8ec:	2e03      	cmp	r6, #3
1004b8ee:	4628      	mov	r0, r5
1004b8f0:	d8f3      	bhi.n	1004b8da <GAP_check_flags+0x5a>
1004b8f2:	46c0      	nop			@ (mov r8, r8)
1004b8f4:	447e      	add	r6, pc
1004b8f6:	7936      	ldrb	r6, [r6, #4]
1004b8f8:	0076      	lsls	r6, r6, #1
1004b8fa:	44b7      	add	pc, r6
1004b8fc:	010d0601 	.word	0x010d0601
1004b900:	2003      	movs	r0, #3
1004b902:	4001      	ands	r1, r0
1004b904:	d105      	bne.n	1004b912 <GAP_check_flags+0x92>
1004b906:	4608      	mov	r0, r1
1004b908:	e7e7      	b.n	1004b8da <GAP_check_flags+0x5a>
1004b90a:	2003      	movs	r0, #3
1004b90c:	4001      	ands	r1, r0
1004b90e:	2901      	cmp	r1, #1
1004b910:	d006      	beq.n	1004b920 <GAP_check_flags+0xa0>
1004b912:	202b      	movs	r0, #43	@ 0x2b
1004b914:	43c0      	mvns	r0, r0
1004b916:	e7e0      	b.n	1004b8da <GAP_check_flags+0x5a>
1004b918:	2003      	movs	r0, #3
1004b91a:	4001      	ands	r1, r0
1004b91c:	2902      	cmp	r1, #2
1004b91e:	d1f8      	bne.n	1004b912 <GAP_check_flags+0x92>
1004b920:	2000      	movs	r0, #0
1004b922:	e7da      	b.n	1004b8da <GAP_check_flags+0x5a>

1004b924 <__arm_cp.5_0>:
1004b924:	20000b70 	.word	0x20000b70

1004b928 <__arm_cp.5_1>:
1004b928:	20000b58 	.word	0x20000b58

1004b92c <__arm_cp.5_2>:
1004b92c:	0000ffff 	.word	0x0000ffff

1004b930 <__arm_cp.5_3>:
1004b930:	00d4d400 	.word	0x00d4d400

1004b934 <GAP_set_discoverability_mode>:
1004b934:	b570      	push	{r4, r5, r6, lr}
1004b936:	4603      	mov	r3, r0
1004b938:	2900      	cmp	r1, #0
1004b93a:	d100      	bne.n	1004b93e <GAP_set_discoverability_mode+0xa>
1004b93c:	460a      	mov	r2, r1
1004b93e:	4829      	ldr	r0, [pc, #164]	@ (1004b9e4 <__arm_cp.6_0>)
1004b940:	6800      	ldr	r0, [r0, #0]
1004b942:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1004b944:	2b01      	cmp	r3, #1
1004b946:	d10c      	bne.n	1004b962 <GAP_set_discoverability_mode+0x2e>
1004b948:	2314      	movs	r3, #20
1004b94a:	4353      	muls	r3, r2
1004b94c:	5cca      	ldrb	r2, [r1, r3]
1004b94e:	2a01      	cmp	r2, #1
1004b950:	d033      	beq.n	1004b9ba <GAP_set_discoverability_mode+0x86>
1004b952:	2a02      	cmp	r2, #2
1004b954:	d13e      	bne.n	1004b9d4 <GAP_set_discoverability_mode+0xa0>
1004b956:	18ca      	adds	r2, r1, r3
1004b958:	7894      	ldrb	r4, [r2, #2]
1004b95a:	2004      	movs	r0, #4
1004b95c:	4320      	orrs	r0, r4
1004b95e:	7090      	strb	r0, [r2, #2]
1004b960:	e03a      	b.n	1004b9d8 <GAP_set_discoverability_mode+0xa4>
1004b962:	2314      	movs	r3, #20
1004b964:	4353      	muls	r3, r2
1004b966:	18c9      	adds	r1, r1, r3
1004b968:	1c8e      	adds	r6, r1, #2
1004b96a:	7889      	ldrb	r1, [r1, #2]
1004b96c:	0789      	lsls	r1, r1, #30
1004b96e:	d521      	bpl.n	1004b9b4 <GAP_set_discoverability_mode+0x80>
1004b970:	2400      	movs	r4, #0
1004b972:	4621      	mov	r1, r4
1004b974:	f002 fca9 	bl	1004e2ca <CST_stop>
1004b978:	481b      	ldr	r0, [pc, #108]	@ (1004b9e8 <__arm_cp.6_1>)
1004b97a:	6800      	ldr	r0, [r0, #0]
1004b97c:	214e      	movs	r1, #78	@ 0x4e
1004b97e:	5c40      	ldrb	r0, [r0, r1]
1004b980:	07c0      	lsls	r0, r0, #31
1004b982:	d017      	beq.n	1004b9b4 <GAP_set_discoverability_mode+0x80>
1004b984:	4819      	ldr	r0, [pc, #100]	@ (1004b9ec <__arm_cp.6_2>)
1004b986:	6800      	ldr	r0, [r0, #0]
1004b988:	6980      	ldr	r0, [r0, #24]
1004b98a:	2244      	movs	r2, #68	@ 0x44
1004b98c:	2502      	movs	r5, #2
1004b98e:	4629      	mov	r1, r5
1004b990:	462b      	mov	r3, r5
1004b992:	f7ff fabb 	bl	1004af0c <aci_event_fifo_push_header>
1004b996:	2800      	cmp	r0, #0
1004b998:	d00c      	beq.n	1004b9b4 <GAP_set_discoverability_mode+0x80>
1004b99a:	4601      	mov	r1, r0
1004b99c:	7185      	strb	r5, [r0, #6]
1004b99e:	71c4      	strb	r4, [r0, #7]
1004b9a0:	7204      	strb	r4, [r0, #8]
1004b9a2:	20ff      	movs	r0, #255	@ 0xff
1004b9a4:	7148      	strb	r0, [r1, #5]
1004b9a6:	2082      	movs	r0, #130	@ 0x82
1004b9a8:	7108      	strb	r0, [r1, #4]
1004b9aa:	2004      	movs	r0, #4
1004b9ac:	7248      	strb	r0, [r1, #9]
1004b9ae:	4628      	mov	r0, r5
1004b9b0:	f7ff fb49 	bl	1004b046 <aci_event_fifo_push>
1004b9b4:	2000      	movs	r0, #0
1004b9b6:	7030      	strb	r0, [r6, #0]
1004b9b8:	bd70      	pop	{r4, r5, r6, pc}
1004b9ba:	18c9      	adds	r1, r1, r3
1004b9bc:	784a      	ldrb	r2, [r1, #1]
1004b9be:	788b      	ldrb	r3, [r1, #2]
1004b9c0:	4313      	orrs	r3, r2
1004b9c2:	2202      	movs	r2, #2
1004b9c4:	431a      	orrs	r2, r3
1004b9c6:	708a      	strb	r2, [r1, #2]
1004b9c8:	2100      	movs	r1, #0
1004b9ca:	2201      	movs	r2, #1
1004b9cc:	4b08      	ldr	r3, [pc, #32]	@ (1004b9f0 <__arm_cp.6_3>)
1004b9ce:	f002 fcb2 	bl	1004e336 <CST_start>
1004b9d2:	bd70      	pop	{r4, r5, r6, pc}
1004b9d4:	18c8      	adds	r0, r1, r3
1004b9d6:	7880      	ldrb	r0, [r0, #2]
1004b9d8:	18c9      	adds	r1, r1, r3
1004b9da:	784a      	ldrb	r2, [r1, #1]
1004b9dc:	4302      	orrs	r2, r0
1004b9de:	708a      	strb	r2, [r1, #2]
1004b9e0:	bd70      	pop	{r4, r5, r6, pc}
1004b9e2:	46c0      	nop			@ (mov r8, r8)

1004b9e4 <__arm_cp.6_0>:
1004b9e4:	20000b58 	.word	0x20000b58

1004b9e8 <__arm_cp.6_1>:
1004b9e8:	20000b60 	.word	0x20000b60

1004b9ec <__arm_cp.6_2>:
1004b9ec:	20000b54 	.word	0x20000b54

1004b9f0 <__arm_cp.6_3>:
1004b9f0:	0002bf20 	.word	0x0002bf20

1004b9f4 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
1004b9f4:	b580      	push	{r7, lr}
1004b9f6:	f000 f801 	bl	1004b9fc <GAP_suspend_resume_active_advertising_sets_legacy>
1004b9fa:	bd80      	pop	{r7, pc}

1004b9fc <GAP_suspend_resume_active_advertising_sets_legacy>:
1004b9fc:	b580      	push	{r7, lr}
1004b9fe:	4905      	ldr	r1, [pc, #20]	@ (1004ba14 <__arm_cp.10_0>)
1004ba00:	6809      	ldr	r1, [r1, #0]
1004ba02:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1004ba04:	7cc9      	ldrb	r1, [r1, #19]
1004ba06:	2901      	cmp	r1, #1
1004ba08:	d102      	bne.n	1004ba10 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
1004ba0a:	f000 f8da 	bl	1004bbc2 <hci_le_set_advertising_enable>
1004ba0e:	bd80      	pop	{r7, pc}
1004ba10:	2000      	movs	r0, #0
1004ba12:	bd80      	pop	{r7, pc}

1004ba14 <__arm_cp.10_0>:
1004ba14:	20000b58 	.word	0x20000b58

1004ba18 <GAP_set_legacy_advertising_data>:
1004ba18:	b5b0      	push	{r4, r5, r7, lr}
1004ba1a:	460c      	mov	r4, r1
1004ba1c:	4605      	mov	r5, r0
1004ba1e:	b2c0      	uxtb	r0, r0
1004ba20:	f001 f830 	bl	1004ca84 <ll_set_legacy_advertising_data_ptr>
1004ba24:	2800      	cmp	r0, #0
1004ba26:	d000      	beq.n	1004ba2a <GAP_set_legacy_advertising_data+0x12>
1004ba28:	bdb0      	pop	{r4, r5, r7, pc}
1004ba2a:	4903      	ldr	r1, [pc, #12]	@ (1004ba38 <__arm_cp.11_0>)
1004ba2c:	6809      	ldr	r1, [r1, #0]
1004ba2e:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1004ba30:	810d      	strh	r5, [r1, #8]
1004ba32:	604c      	str	r4, [r1, #4]
1004ba34:	bdb0      	pop	{r4, r5, r7, pc}
1004ba36:	46c0      	nop			@ (mov r8, r8)

1004ba38 <__arm_cp.11_0>:
1004ba38:	20000b58 	.word	0x20000b58

1004ba3c <GAP_search_flags_index>:
1004ba3c:	b5b0      	push	{r4, r5, r7, lr}
1004ba3e:	4a0a      	ldr	r2, [pc, #40]	@ (1004ba68 <__arm_cp.15_0>)
1004ba40:	2803      	cmp	r0, #3
1004ba42:	d30f      	bcc.n	1004ba64 <GAP_search_flags_index+0x28>
1004ba44:	2300      	movs	r3, #0
1004ba46:	b29d      	uxth	r5, r3
1004ba48:	5d4c      	ldrb	r4, [r1, r5]
1004ba4a:	2c02      	cmp	r4, #2
1004ba4c:	d103      	bne.n	1004ba56 <GAP_search_flags_index+0x1a>
1004ba4e:	186d      	adds	r5, r5, r1
1004ba50:	786d      	ldrb	r5, [r5, #1]
1004ba52:	2d01      	cmp	r5, #1
1004ba54:	d005      	beq.n	1004ba62 <GAP_search_flags_index+0x26>
1004ba56:	191b      	adds	r3, r3, r4
1004ba58:	1c5b      	adds	r3, r3, #1
1004ba5a:	b29c      	uxth	r4, r3
1004ba5c:	4284      	cmp	r4, r0
1004ba5e:	d3f2      	bcc.n	1004ba46 <GAP_search_flags_index+0xa>
1004ba60:	e000      	b.n	1004ba64 <GAP_search_flags_index+0x28>
1004ba62:	461a      	mov	r2, r3
1004ba64:	b290      	uxth	r0, r2
1004ba66:	bdb0      	pop	{r4, r5, r7, pc}

1004ba68 <__arm_cp.15_0>:
1004ba68:	0000ffff 	.word	0x0000ffff

1004ba6c <GAP_check_adv_status>:
1004ba6c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004ba6e:	460c      	mov	r4, r1
1004ba70:	4605      	mov	r5, r0
1004ba72:	481c      	ldr	r0, [pc, #112]	@ (1004bae4 <__arm_cp.16_0>)
1004ba74:	6806      	ldr	r6, [r0, #0]
1004ba76:	f7ff fd4d 	bl	1004b514 <gap_extended_adv_scan_supported>
1004ba7a:	491b      	ldr	r1, [pc, #108]	@ (1004bae8 <__arm_cp.16_1>)
1004ba7c:	7e8a      	ldrb	r2, [r1, #26]
1004ba7e:	2100      	movs	r1, #0
1004ba80:	9501      	str	r5, [sp, #4]
1004ba82:	7029      	strb	r1, [r5, #0]
1004ba84:	2301      	movs	r3, #1
1004ba86:	9402      	str	r4, [sp, #8]
1004ba88:	7023      	strb	r3, [r4, #0]
1004ba8a:	2800      	cmp	r0, #0
1004ba8c:	d000      	beq.n	1004ba90 <GAP_check_adv_status+0x24>
1004ba8e:	4613      	mov	r3, r2
1004ba90:	b2d8      	uxtb	r0, r3
1004ba92:	2714      	movs	r7, #20
1004ba94:	4347      	muls	r7, r0
1004ba96:	4608      	mov	r0, r1
1004ba98:	460b      	mov	r3, r1
1004ba9a:	460a      	mov	r2, r1
1004ba9c:	428f      	cmp	r7, r1
1004ba9e:	d011      	beq.n	1004bac4 <GAP_check_adv_status+0x58>
1004baa0:	6d74      	ldr	r4, [r6, #84]	@ 0x54
1004baa2:	1864      	adds	r4, r4, r1
1004baa4:	7ca5      	ldrb	r5, [r4, #18]
1004baa6:	2d01      	cmp	r5, #1
1004baa8:	d10a      	bne.n	1004bac0 <GAP_check_adv_status+0x54>
1004baaa:	7ce5      	ldrb	r5, [r4, #19]
1004baac:	2d00      	cmp	r5, #0
1004baae:	d007      	beq.n	1004bac0 <GAP_check_adv_status+0x54>
1004bab0:	2d02      	cmp	r5, #2
1004bab2:	d100      	bne.n	1004bab6 <GAP_check_adv_status+0x4a>
1004bab4:	2301      	movs	r3, #1
1004bab6:	78a4      	ldrb	r4, [r4, #2]
1004bab8:	2001      	movs	r0, #1
1004baba:	07a4      	lsls	r4, r4, #30
1004babc:	d500      	bpl.n	1004bac0 <GAP_check_adv_status+0x54>
1004babe:	4602      	mov	r2, r0
1004bac0:	3114      	adds	r1, #20
1004bac2:	e7eb      	b.n	1004ba9c <GAP_check_adv_status+0x30>
1004bac4:	2801      	cmp	r0, #1
1004bac6:	d102      	bne.n	1004bace <GAP_check_adv_status+0x62>
1004bac8:	2101      	movs	r1, #1
1004baca:	9c01      	ldr	r4, [sp, #4]
1004bacc:	7021      	strb	r1, [r4, #0]
1004bace:	2b01      	cmp	r3, #1
1004bad0:	d002      	beq.n	1004bad8 <GAP_check_adv_status+0x6c>
1004bad2:	b2d1      	uxtb	r1, r2
1004bad4:	2901      	cmp	r1, #1
1004bad6:	d102      	bne.n	1004bade <GAP_check_adv_status+0x72>
1004bad8:	2100      	movs	r1, #0
1004bada:	9a02      	ldr	r2, [sp, #8]
1004badc:	7011      	strb	r1, [r2, #0]
1004bade:	b2c0      	uxtb	r0, r0
1004bae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004bae2:	46c0      	nop			@ (mov r8, r8)

1004bae4 <__arm_cp.16_0>:
1004bae4:	20000b58 	.word	0x20000b58

1004bae8 <__arm_cp.16_1>:
1004bae8:	20000b70 	.word	0x20000b70

1004baec <GAP_ResumeAdvertising_ucfg_weak>:
1004baec:	b580      	push	{r7, lr}
1004baee:	2001      	movs	r0, #1
1004baf0:	f7ff ff84 	bl	1004b9fc <GAP_suspend_resume_active_advertising_sets_legacy>
1004baf4:	bd80      	pop	{r7, pc}

1004baf6 <GAT_att_cmn_init_ucfg_weak>:
1004baf6:	4770      	bx	lr

1004baf8 <GAT_att_cmn_timer_expire_tsk_ucfg_weak>:
1004baf8:	4770      	bx	lr

1004bafa <GAT_att_cmn_tx_pool_evt_tsk_ucfg_weak>:
1004bafa:	4770      	bx	lr

1004bafc <GAT_att_srv_process_rx_pckt_tsk_ucfg_weak>:
1004bafc:	4770      	bx	lr

1004bafe <GAT_srv_db_hash_tsk_ucfg_weak>:
1004bafe:	4770      	bx	lr

1004bb00 <GAT_srv_send_srv_change_tsk_ucfg_weak>:
1004bb00:	4770      	bx	lr

1004bb02 <hci_le_set_advertising_parameters>:
1004bb02:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bb04:	b089      	sub	sp, #36	@ 0x24
1004bb06:	461d      	mov	r5, r3
1004bb08:	4616      	mov	r6, r2
1004bb0a:	460f      	mov	r7, r1
1004bb0c:	9004      	str	r0, [sp, #16]
1004bb0e:	2002      	movs	r0, #2
1004bb10:	2401      	movs	r4, #1
1004bb12:	4621      	mov	r1, r4
1004bb14:	f000 f8c6 	bl	1004bca4 <hci_get_set_legacy_ext_flag>
1004bb18:	2800      	cmp	r0, #0
1004bb1a:	d150      	bne.n	1004bbbe <hci_le_set_advertising_parameters+0xbc>
1004bb1c:	9703      	str	r7, [sp, #12]
1004bb1e:	2012      	movs	r0, #18
1004bb20:	2e04      	cmp	r6, #4
1004bb22:	d84c      	bhi.n	1004bbbe <hci_le_set_advertising_parameters+0xbc>
1004bb24:	9002      	str	r0, [sp, #8]
1004bb26:	f000 f8e2 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004bb2a:	2e01      	cmp	r6, #1
1004bb2c:	d803      	bhi.n	1004bb36 <hci_le_set_advertising_parameters+0x34>
1004bb2e:	2800      	cmp	r0, #0
1004bb30:	d101      	bne.n	1004bb36 <hci_le_set_advertising_parameters+0x34>
1004bb32:	2011      	movs	r0, #17
1004bb34:	e043      	b.n	1004bbbe <hci_le_set_advertising_parameters+0xbc>
1004bb36:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004bb38:	9000      	str	r0, [sp, #0]
1004bb3a:	9810      	ldr	r0, [sp, #64]	@ 0x40
1004bb3c:	9001      	str	r0, [sp, #4]
1004bb3e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1004bb40:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004bb42:	af05      	add	r7, sp, #20
1004bb44:	7238      	strb	r0, [r7, #8]
1004bb46:	71fd      	strb	r5, [r7, #7]
1004bb48:	713e      	strb	r6, [r7, #4]
1004bb4a:	9803      	ldr	r0, [sp, #12]
1004bb4c:	8078      	strh	r0, [r7, #2]
1004bb4e:	9804      	ldr	r0, [sp, #16]
1004bb50:	8038      	strh	r0, [r7, #0]
1004bb52:	4638      	mov	r0, r7
1004bb54:	3009      	adds	r0, #9
1004bb56:	2206      	movs	r2, #6
1004bb58:	f7f5 ffce 	bl	10041af8 <BLEPLAT_MemCpy>
1004bb5c:	9900      	ldr	r1, [sp, #0]
1004bb5e:	71b9      	strb	r1, [r7, #6]
1004bb60:	9801      	ldr	r0, [sp, #4]
1004bb62:	7178      	strb	r0, [r7, #5]
1004bb64:	7938      	ldrb	r0, [r7, #4]
1004bb66:	2804      	cmp	r0, #4
1004bb68:	d001      	beq.n	1004bb6e <hci_le_set_advertising_parameters+0x6c>
1004bb6a:	2801      	cmp	r0, #1
1004bb6c:	d104      	bne.n	1004bb78 <hci_le_set_advertising_parameters+0x76>
1004bb6e:	a905      	add	r1, sp, #20
1004bb70:	7a09      	ldrb	r1, [r1, #8]
1004bb72:	2902      	cmp	r1, #2
1004bb74:	d302      	bcc.n	1004bb7c <hci_le_set_advertising_parameters+0x7a>
1004bb76:	e021      	b.n	1004bbbc <hci_le_set_advertising_parameters+0xba>
1004bb78:	2903      	cmp	r1, #3
1004bb7a:	d81f      	bhi.n	1004bbbc <hci_le_set_advertising_parameters+0xba>
1004bb7c:	2801      	cmp	r0, #1
1004bb7e:	d10e      	bne.n	1004bb9e <hci_le_set_advertising_parameters+0x9c>
1004bb80:	f000 f8ab 	bl	1004bcda <hci_le_check_own_address_type_max_value_ucfg_weak>
1004bb84:	a905      	add	r1, sp, #20
1004bb86:	79c9      	ldrb	r1, [r1, #7]
1004bb88:	4281      	cmp	r1, r0
1004bb8a:	d817      	bhi.n	1004bbbc <hci_le_set_advertising_parameters+0xba>
1004bb8c:	a805      	add	r0, sp, #20
1004bb8e:	7940      	ldrb	r0, [r0, #5]
1004bb90:	0740      	lsls	r0, r0, #29
1004bb92:	9802      	ldr	r0, [sp, #8]
1004bb94:	d013      	beq.n	1004bbbe <hci_le_set_advertising_parameters+0xbc>
1004bb96:	a805      	add	r0, sp, #20
1004bb98:	f000 fc52 	bl	1004c440 <LL_LE_Set_Advertising_Parameters>
1004bb9c:	e00f      	b.n	1004bbbe <hci_le_set_advertising_parameters+0xbc>
1004bb9e:	a805      	add	r0, sp, #20
1004bba0:	8800      	ldrh	r0, [r0, #0]
1004bba2:	2820      	cmp	r0, #32
1004bba4:	d30a      	bcc.n	1004bbbc <hci_le_set_advertising_parameters+0xba>
1004bba6:	03a1      	lsls	r1, r4, #14
1004bba8:	4288      	cmp	r0, r1
1004bbaa:	d807      	bhi.n	1004bbbc <hci_le_set_advertising_parameters+0xba>
1004bbac:	aa05      	add	r2, sp, #20
1004bbae:	8852      	ldrh	r2, [r2, #2]
1004bbb0:	2a20      	cmp	r2, #32
1004bbb2:	d303      	bcc.n	1004bbbc <hci_le_set_advertising_parameters+0xba>
1004bbb4:	428a      	cmp	r2, r1
1004bbb6:	d801      	bhi.n	1004bbbc <hci_le_set_advertising_parameters+0xba>
1004bbb8:	4290      	cmp	r0, r2
1004bbba:	d9e1      	bls.n	1004bb80 <hci_le_set_advertising_parameters+0x7e>
1004bbbc:	9802      	ldr	r0, [sp, #8]
1004bbbe:	b009      	add	sp, #36	@ 0x24
1004bbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004bbc2 <hci_le_set_advertising_enable>:
1004bbc2:	b510      	push	{r4, lr}
1004bbc4:	4604      	mov	r4, r0
1004bbc6:	2002      	movs	r0, #2
1004bbc8:	2101      	movs	r1, #1
1004bbca:	f000 f86b 	bl	1004bca4 <hci_get_set_legacy_ext_flag>
1004bbce:	2800      	cmp	r0, #0
1004bbd0:	d000      	beq.n	1004bbd4 <hci_le_set_advertising_enable+0x12>
1004bbd2:	bd10      	pop	{r4, pc}
1004bbd4:	2c01      	cmp	r4, #1
1004bbd6:	d803      	bhi.n	1004bbe0 <hci_le_set_advertising_enable+0x1e>
1004bbd8:	4620      	mov	r0, r4
1004bbda:	f000 fcb5 	bl	1004c548 <LL_LE_Set_Advertise_Enable>
1004bbde:	bd10      	pop	{r4, pc}
1004bbe0:	2012      	movs	r0, #18
1004bbe2:	bd10      	pop	{r4, pc}

1004bbe4 <chc_csr_ucfg_weak>:
1004bbe4:	2000      	movs	r0, #0
1004bbe6:	4770      	bx	lr

1004bbe8 <HCI_Init>:
1004bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004bbea:	4917      	ldr	r1, [pc, #92]	@ (1004bc48 <__arm_cp.0_0>)
1004bbec:	6808      	ldr	r0, [r1, #0]
1004bbee:	460d      	mov	r5, r1
1004bbf0:	2124      	movs	r1, #36	@ 0x24
1004bbf2:	2400      	movs	r4, #0
1004bbf4:	5444      	strb	r4, [r0, r1]
1004bbf6:	3025      	adds	r0, #37	@ 0x25
1004bbf8:	2211      	movs	r2, #17
1004bbfa:	4f14      	ldr	r7, [pc, #80]	@ (1004bc4c <__arm_cp.0_1>)
1004bbfc:	4621      	mov	r1, r4
1004bbfe:	47b8      	blx	r7
1004bc00:	6828      	ldr	r0, [r5, #0]
1004bc02:	3036      	adds	r0, #54	@ 0x36
1004bc04:	26ff      	movs	r6, #255	@ 0xff
1004bc06:	2205      	movs	r2, #5
1004bc08:	4631      	mov	r1, r6
1004bc0a:	47b8      	blx	r7
1004bc0c:	6829      	ldr	r1, [r5, #0]
1004bc0e:	203b      	movs	r0, #59	@ 0x3b
1004bc10:	231f      	movs	r3, #31
1004bc12:	540b      	strb	r3, [r1, r0]
1004bc14:	2201      	movs	r2, #1
1004bc16:	0355      	lsls	r5, r2, #13
1004bc18:	4608      	mov	r0, r1
1004bc1a:	303b      	adds	r0, #59	@ 0x3b
1004bc1c:	5285      	strh	r5, [r0, r2]
1004bc1e:	72c3      	strb	r3, [r0, #11]
1004bc20:	3147      	adds	r1, #71	@ 0x47
1004bc22:	2207      	movs	r2, #7
1004bc24:	4608      	mov	r0, r1
1004bc26:	4621      	mov	r1, r4
1004bc28:	47b8      	blx	r7
1004bc2a:	4d07      	ldr	r5, [pc, #28]	@ (1004bc48 <__arm_cp.0_0>)
1004bc2c:	6828      	ldr	r0, [r5, #0]
1004bc2e:	304e      	adds	r0, #78	@ 0x4e
1004bc30:	2208      	movs	r2, #8
1004bc32:	4631      	mov	r1, r6
1004bc34:	47b8      	blx	r7
1004bc36:	4806      	ldr	r0, [pc, #24]	@ (1004bc50 <__arm_cp.0_2>)
1004bc38:	6800      	ldr	r0, [r0, #0]
1004bc3a:	2135      	movs	r1, #53	@ 0x35
1004bc3c:	5444      	strb	r4, [r0, r1]
1004bc3e:	6828      	ldr	r0, [r5, #0]
1004bc40:	4904      	ldr	r1, [pc, #16]	@ (1004bc54 <__arm_cp.0_3>)
1004bc42:	6201      	str	r1, [r0, #32]
1004bc44:	65c4      	str	r4, [r0, #92]	@ 0x5c
1004bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004bc48 <__arm_cp.0_0>:
1004bc48:	20000b60 	.word	0x20000b60

1004bc4c <__arm_cp.0_1>:
1004bc4c:	10041b19 	.word	0x10041b19

1004bc50 <__arm_cp.0_2>:
1004bc50:	20000b50 	.word	0x20000b50

1004bc54 <__arm_cp.0_3>:
1004bc54:	fffffdbe 	.word	0xfffffdbe

1004bc58 <Controller_Process_Q_ucfg_weak>:
1004bc58:	4770      	bx	lr

1004bc5a <hci_le_set_random_address>:
1004bc5a:	b580      	push	{r7, lr}
1004bc5c:	f000 fe84 	bl	1004c968 <LL_Set_Advertising_Set_Random_Address>
1004bc60:	bd80      	pop	{r7, pc}
	...

1004bc64 <hci_set_event_mask>:
1004bc64:	b510      	push	{r4, lr}
1004bc66:	2136      	movs	r1, #54	@ 0x36
1004bc68:	4a05      	ldr	r2, [pc, #20]	@ (1004bc80 <__arm_cp.14_0>)
1004bc6a:	293e      	cmp	r1, #62	@ 0x3e
1004bc6c:	d006      	beq.n	1004bc7c <hci_set_event_mask+0x18>
1004bc6e:	1843      	adds	r3, r0, r1
1004bc70:	3b36      	subs	r3, #54	@ 0x36
1004bc72:	781b      	ldrb	r3, [r3, #0]
1004bc74:	6814      	ldr	r4, [r2, #0]
1004bc76:	5463      	strb	r3, [r4, r1]
1004bc78:	1c49      	adds	r1, r1, #1
1004bc7a:	e7f6      	b.n	1004bc6a <hci_set_event_mask+0x6>
1004bc7c:	2000      	movs	r0, #0
1004bc7e:	bd10      	pop	{r4, pc}

1004bc80 <__arm_cp.14_0>:
1004bc80:	20000b60 	.word	0x20000b60

1004bc84 <hci_le_set_event_mask>:
1004bc84:	b510      	push	{r4, lr}
1004bc86:	2146      	movs	r1, #70	@ 0x46
1004bc88:	4a05      	ldr	r2, [pc, #20]	@ (1004bca0 <__arm_cp.16_0>)
1004bc8a:	294e      	cmp	r1, #78	@ 0x4e
1004bc8c:	d006      	beq.n	1004bc9c <hci_le_set_event_mask+0x18>
1004bc8e:	1843      	adds	r3, r0, r1
1004bc90:	3b46      	subs	r3, #70	@ 0x46
1004bc92:	781b      	ldrb	r3, [r3, #0]
1004bc94:	6814      	ldr	r4, [r2, #0]
1004bc96:	5463      	strb	r3, [r4, r1]
1004bc98:	1c49      	adds	r1, r1, #1
1004bc9a:	e7f6      	b.n	1004bc8a <hci_le_set_event_mask+0x6>
1004bc9c:	2000      	movs	r0, #0
1004bc9e:	bd10      	pop	{r4, pc}

1004bca0 <__arm_cp.16_0>:
1004bca0:	20000b60 	.word	0x20000b60

1004bca4 <hci_get_set_legacy_ext_flag>:
1004bca4:	4a05      	ldr	r2, [pc, #20]	@ (1004bcbc <__arm_cp.18_0>)
1004bca6:	6812      	ldr	r2, [r2, #0]
1004bca8:	2335      	movs	r3, #53	@ 0x35
1004bcaa:	5cd3      	ldrb	r3, [r2, r3]
1004bcac:	4203      	tst	r3, r0
1004bcae:	d001      	beq.n	1004bcb4 <hci_get_set_legacy_ext_flag+0x10>
1004bcb0:	200c      	movs	r0, #12
1004bcb2:	4770      	bx	lr
1004bcb4:	3235      	adds	r2, #53	@ 0x35
1004bcb6:	7011      	strb	r1, [r2, #0]
1004bcb8:	2000      	movs	r0, #0
1004bcba:	4770      	bx	lr

1004bcbc <__arm_cp.18_0>:
1004bcbc:	20000b50 	.word	0x20000b50

1004bcc0 <hci_check_legacy_ext_flag>:
1004bcc0:	4903      	ldr	r1, [pc, #12]	@ (1004bcd0 <__arm_cp.25_0>)
1004bcc2:	6809      	ldr	r1, [r1, #0]
1004bcc4:	2235      	movs	r2, #53	@ 0x35
1004bcc6:	5c89      	ldrb	r1, [r1, r2]
1004bcc8:	4008      	ands	r0, r1
1004bcca:	1e41      	subs	r1, r0, #1
1004bccc:	4188      	sbcs	r0, r1
1004bcce:	4770      	bx	lr

1004bcd0 <__arm_cp.25_0>:
1004bcd0:	20000b50 	.word	0x20000b50

1004bcd4 <LLC_offline_control_procedures_processing_ucfg_weak>:
1004bcd4:	4770      	bx	lr

1004bcd6 <cte_csr_ucfg_weak>:
1004bcd6:	2000      	movs	r0, #0
1004bcd8:	4770      	bx	lr

1004bcda <hci_le_check_own_address_type_max_value_ucfg_weak>:
1004bcda:	2001      	movs	r0, #1
1004bcdc:	4770      	bx	lr

1004bcde <data_length_extension_csr_ucfg_weak>:
1004bcde:	2000      	movs	r0, #0
1004bce0:	4770      	bx	lr

1004bce2 <pcl_csr_ucfg_weak>:
1004bce2:	2000      	movs	r0, #0
1004bce4:	4770      	bx	lr

1004bce6 <phy_upd_csr_ucfg_weak>:
1004bce6:	2000      	movs	r0, #0
1004bce8:	4770      	bx	lr

1004bcea <scan_csr_ucfg_weak>:
1004bcea:	2000      	movs	r0, #0
1004bcec:	4770      	bx	lr

1004bcee <conn_supp_csr_ucfg_weak>:
1004bcee:	2000      	movs	r0, #0
1004bcf0:	4770      	bx	lr

1004bcf2 <l2c_cos_csr_ucfg_weak>:
1004bcf2:	2000      	movs	r0, #0
1004bcf4:	4770      	bx	lr

1004bcf6 <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
1004bcf6:	4770      	bx	lr

1004bcf8 <L2C_init_ucfg_weak>:
1004bcf8:	2000      	movs	r0, #0
1004bcfa:	4770      	bx	lr

1004bcfc <llc_conn_get_cntxt_p>:
1004bcfc:	4803      	ldr	r0, [pc, #12]	@ (1004bd0c <__arm_cp.0_0>)
1004bcfe:	6800      	ldr	r0, [r0, #0]
1004bd00:	219c      	movs	r1, #156	@ 0x9c
1004bd02:	5840      	ldr	r0, [r0, r1]
1004bd04:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004bd06:	6800      	ldr	r0, [r0, #0]
1004bd08:	4770      	bx	lr
1004bd0a:	46c0      	nop			@ (mov r8, r8)

1004bd0c <__arm_cp.0_0>:
1004bd0c:	20000b60 	.word	0x20000b60

1004bd10 <llc_conn_get_cntxt_per_p>:
1004bd10:	214d      	movs	r1, #77	@ 0x4d
1004bd12:	0089      	lsls	r1, r1, #2
1004bd14:	4341      	muls	r1, r0
1004bd16:	4804      	ldr	r0, [pc, #16]	@ (1004bd28 <__arm_cp.1_0>)
1004bd18:	6800      	ldr	r0, [r0, #0]
1004bd1a:	229c      	movs	r2, #156	@ 0x9c
1004bd1c:	5880      	ldr	r0, [r0, r2]
1004bd1e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004bd20:	6840      	ldr	r0, [r0, #4]
1004bd22:	1840      	adds	r0, r0, r1
1004bd24:	4770      	bx	lr
1004bd26:	46c0      	nop			@ (mov r8, r8)

1004bd28 <__arm_cp.1_0>:
1004bd28:	20000b60 	.word	0x20000b60

1004bd2c <llc_conn_mem_allocate>:
1004bd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bd2e:	b085      	sub	sp, #20
1004bd30:	2b01      	cmp	r3, #1
1004bd32:	d000      	beq.n	1004bd36 <llc_conn_mem_allocate+0xa>
1004bd34:	e082      	b.n	1004be3c <llc_conn_mem_allocate+0x110>
1004bd36:	ab02      	add	r3, sp, #8
1004bd38:	c307      	stmia	r3!, {r0, r1, r2}
1004bd3a:	4841      	ldr	r0, [pc, #260]	@ (1004be40 <__arm_cp.10_0>)
1004bd3c:	7fc1      	ldrb	r1, [r0, #31]
1004bd3e:	9101      	str	r1, [sp, #4]
1004bd40:	7ac4      	ldrb	r4, [r0, #11]
1004bd42:	9400      	str	r4, [sp, #0]
1004bd44:	2601      	movs	r6, #1
1004bd46:	2124      	movs	r1, #36	@ 0x24
1004bd48:	4a3e      	ldr	r2, [pc, #248]	@ (1004be44 <__arm_cp.10_1>)
1004bd4a:	4630      	mov	r0, r6
1004bd4c:	4790      	blx	r2
1004bd4e:	493e      	ldr	r1, [pc, #248]	@ (1004be48 <__arm_cp.10_2>)
1004bd50:	6809      	ldr	r1, [r1, #0]
1004bd52:	279c      	movs	r7, #156	@ 0x9c
1004bd54:	59c9      	ldr	r1, [r1, r7]
1004bd56:	63c8      	str	r0, [r1, #60]	@ 0x3c
1004bd58:	2538      	movs	r5, #56	@ 0x38
1004bd5a:	4630      	mov	r0, r6
1004bd5c:	4629      	mov	r1, r5
1004bd5e:	4a39      	ldr	r2, [pc, #228]	@ (1004be44 <__arm_cp.10_1>)
1004bd60:	4790      	blx	r2
1004bd62:	4939      	ldr	r1, [pc, #228]	@ (1004be48 <__arm_cp.10_2>)
1004bd64:	6809      	ldr	r1, [r1, #0]
1004bd66:	59c9      	ldr	r1, [r1, r7]
1004bd68:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bd6a:	6008      	str	r0, [r1, #0]
1004bd6c:	204d      	movs	r0, #77	@ 0x4d
1004bd6e:	0081      	lsls	r1, r0, #2
1004bd70:	4620      	mov	r0, r4
1004bd72:	4c34      	ldr	r4, [pc, #208]	@ (1004be44 <__arm_cp.10_1>)
1004bd74:	47a0      	blx	r4
1004bd76:	4934      	ldr	r1, [pc, #208]	@ (1004be48 <__arm_cp.10_2>)
1004bd78:	6809      	ldr	r1, [r1, #0]
1004bd7a:	59c9      	ldr	r1, [r1, r7]
1004bd7c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bd7e:	6048      	str	r0, [r1, #4]
1004bd80:	9801      	ldr	r0, [sp, #4]
1004bd82:	4086      	lsls	r6, r0
1004bd84:	b2f0      	uxtb	r0, r6
1004bd86:	2108      	movs	r1, #8
1004bd88:	47a0      	blx	r4
1004bd8a:	492f      	ldr	r1, [pc, #188]	@ (1004be48 <__arm_cp.10_2>)
1004bd8c:	6809      	ldr	r1, [r1, #0]
1004bd8e:	59c9      	ldr	r1, [r1, r7]
1004bd90:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bd92:	6809      	ldr	r1, [r1, #0]
1004bd94:	2228      	movs	r2, #40	@ 0x28
1004bd96:	2300      	movs	r3, #0
1004bd98:	548b      	strb	r3, [r1, r2]
1004bd9a:	6248      	str	r0, [r1, #36]	@ 0x24
1004bd9c:	3128      	adds	r1, #40	@ 0x28
1004bd9e:	704e      	strb	r6, [r1, #1]
1004bda0:	9c00      	ldr	r4, [sp, #0]
1004bda2:	2013      	movs	r0, #19
1004bda4:	2104      	movs	r1, #4
1004bda6:	4e27      	ldr	r6, [pc, #156]	@ (1004be44 <__arm_cp.10_1>)
1004bda8:	47b0      	blx	r6
1004bdaa:	4927      	ldr	r1, [pc, #156]	@ (1004be48 <__arm_cp.10_2>)
1004bdac:	6809      	ldr	r1, [r1, #0]
1004bdae:	59c9      	ldr	r1, [r1, r7]
1004bdb0:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bdb2:	6108      	str	r0, [r1, #16]
1004bdb4:	4620      	mov	r0, r4
1004bdb6:	4629      	mov	r1, r5
1004bdb8:	47b0      	blx	r6
1004bdba:	4633      	mov	r3, r6
1004bdbc:	4a22      	ldr	r2, [pc, #136]	@ (1004be48 <__arm_cp.10_2>)
1004bdbe:	6811      	ldr	r1, [r2, #0]
1004bdc0:	59c9      	ldr	r1, [r1, r7]
1004bdc2:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bdc4:	6088      	str	r0, [r1, #8]
1004bdc6:	4626      	mov	r6, r4
1004bdc8:	4620      	mov	r0, r4
1004bdca:	4629      	mov	r1, r5
1004bdcc:	4615      	mov	r5, r2
1004bdce:	4798      	blx	r3
1004bdd0:	6829      	ldr	r1, [r5, #0]
1004bdd2:	59c9      	ldr	r1, [r1, r7]
1004bdd4:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bdd6:	60c8      	str	r0, [r1, #12]
1004bdd8:	9802      	ldr	r0, [sp, #8]
1004bdda:	2801      	cmp	r0, #1
1004bddc:	d107      	bne.n	1004bdee <llc_conn_mem_allocate+0xc2>
1004bdde:	210e      	movs	r1, #14
1004bde0:	4630      	mov	r0, r6
1004bde2:	f001 ff1b 	bl	1004dc1c <csmem_mem_0_assign>
1004bde6:	6829      	ldr	r1, [r5, #0]
1004bde8:	59c9      	ldr	r1, [r1, r7]
1004bdea:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bdec:	6148      	str	r0, [r1, #20]
1004bdee:	9803      	ldr	r0, [sp, #12]
1004bdf0:	2801      	cmp	r0, #1
1004bdf2:	d107      	bne.n	1004be04 <llc_conn_mem_allocate+0xd8>
1004bdf4:	2108      	movs	r1, #8
1004bdf6:	4630      	mov	r0, r6
1004bdf8:	f001 ff10 	bl	1004dc1c <csmem_mem_0_assign>
1004bdfc:	6829      	ldr	r1, [r5, #0]
1004bdfe:	59c9      	ldr	r1, [r1, r7]
1004be00:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004be02:	6188      	str	r0, [r1, #24]
1004be04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1004be06:	9804      	ldr	r0, [sp, #16]
1004be08:	2801      	cmp	r0, #1
1004be0a:	d10d      	bne.n	1004be28 <llc_conn_mem_allocate+0xfc>
1004be0c:	2120      	movs	r1, #32
1004be0e:	4630      	mov	r0, r6
1004be10:	f001 ff04 	bl	1004dc1c <csmem_mem_0_assign>
1004be14:	6829      	ldr	r1, [r5, #0]
1004be16:	59c9      	ldr	r1, [r1, r7]
1004be18:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004be1a:	61c8      	str	r0, [r1, #28]
1004be1c:	2001      	movs	r0, #1
1004be1e:	2111      	movs	r1, #17
1004be20:	f001 fefc 	bl	1004dc1c <csmem_mem_0_assign>
1004be24:	6829      	ldr	r1, [r5, #0]
1004be26:	6648      	str	r0, [r1, #100]	@ 0x64
1004be28:	2c01      	cmp	r4, #1
1004be2a:	d107      	bne.n	1004be3c <llc_conn_mem_allocate+0x110>
1004be2c:	211c      	movs	r1, #28
1004be2e:	4630      	mov	r0, r6
1004be30:	f001 fef4 	bl	1004dc1c <csmem_mem_0_assign>
1004be34:	6829      	ldr	r1, [r5, #0]
1004be36:	59c9      	ldr	r1, [r1, r7]
1004be38:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004be3a:	6208      	str	r0, [r1, #32]
1004be3c:	b005      	add	sp, #20
1004be3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004be40 <__arm_cp.10_0>:
1004be40:	20000b70 	.word	0x20000b70

1004be44 <__arm_cp.10_1>:
1004be44:	1004dc1d 	.word	0x1004dc1d

1004be48 <__arm_cp.10_2>:
1004be48:	20000b60 	.word	0x20000b60

1004be4c <llc_conn_list_search_address>:
1004be4c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1004be4e:	460c      	mov	r4, r1
1004be50:	4605      	mov	r5, r0
1004be52:	f7ff ff53 	bl	1004bcfc <llc_conn_get_cntxt_p>
1004be56:	2136      	movs	r1, #54	@ 0x36
1004be58:	5c40      	ldrb	r0, [r0, r1]
1004be5a:	2800      	cmp	r0, #0
1004be5c:	d001      	beq.n	1004be62 <llc_conn_list_search_address+0x16>
1004be5e:	2000      	movs	r0, #0
1004be60:	e011      	b.n	1004be86 <llc_conn_list_search_address+0x3a>
1004be62:	480a      	ldr	r0, [pc, #40]	@ (1004be8c <__arm_cp.26_0>)
1004be64:	6800      	ldr	r0, [r0, #0]
1004be66:	219c      	movs	r1, #156	@ 0x9c
1004be68:	5840      	ldr	r0, [r0, r1]
1004be6a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004be6c:	6801      	ldr	r1, [r0, #0]
1004be6e:	6a48      	ldr	r0, [r1, #36]	@ 0x24
1004be70:	6a89      	ldr	r1, [r1, #40]	@ 0x28
1004be72:	aa03      	add	r2, sp, #12
1004be74:	2300      	movs	r3, #0
1004be76:	9300      	str	r3, [sp, #0]
1004be78:	9201      	str	r2, [sp, #4]
1004be7a:	22fe      	movs	r2, #254	@ 0xfe
1004be7c:	4395      	bics	r5, r2
1004be7e:	462a      	mov	r2, r5
1004be80:	4623      	mov	r3, r4
1004be82:	f002 fb35 	bl	1004e4f0 <addr8_list_search>
1004be86:	b004      	add	sp, #16
1004be88:	bdb0      	pop	{r4, r5, r7, pc}
1004be8a:	46c0      	nop			@ (mov r8, r8)

1004be8c <__arm_cp.26_0>:
1004be8c:	20000b60 	.word	0x20000b60

1004be90 <llc_conn_push_connection_complete_event>:
1004be90:	b5f0      	push	{r4, r5, r6, r7, lr}
1004be92:	b08d      	sub	sp, #52	@ 0x34
1004be94:	4604      	mov	r4, r0
1004be96:	4895      	ldr	r0, [pc, #596]	@ (1004c0ec <__arm_cp.28_0>)
1004be98:	6800      	ldr	r0, [r0, #0]
1004be9a:	212c      	movs	r1, #44	@ 0x2c
1004be9c:	5c40      	ldrb	r0, [r0, r1]
1004be9e:	07c0      	lsls	r0, r0, #31
1004bea0:	0ec5      	lsrs	r5, r0, #27
1004bea2:	206f      	movs	r0, #111	@ 0x6f
1004bea4:	43c6      	mvns	r6, r0
1004bea6:	406e      	eors	r6, r5
1004bea8:	f000 f93a 	bl	1004c120 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004beac:	4990      	ldr	r1, [pc, #576]	@ (1004c0f0 <__arm_cp.28_1>)
1004beae:	6809      	ldr	r1, [r1, #0]
1004beb0:	223d      	movs	r2, #61	@ 0x3d
1004beb2:	5c8b      	ldrb	r3, [r1, r2]
1004beb4:	2220      	movs	r2, #32
1004beb6:	4013      	ands	r3, r2
1004beb8:	313d      	adds	r1, #61	@ 0x3d
1004beba:	2800      	cmp	r0, #0
1004bebc:	d066      	beq.n	1004bf8c <llc_conn_push_connection_complete_event+0xfc>
1004bebe:	2b00      	cmp	r3, #0
1004bec0:	d100      	bne.n	1004bec4 <llc_conn_push_connection_complete_event+0x34>
1004bec2:	e110      	b.n	1004c0e6 <llc_conn_push_connection_complete_event+0x256>
1004bec4:	7b88      	ldrb	r0, [r1, #14]
1004bec6:	07c0      	lsls	r0, r0, #31
1004bec8:	d063      	beq.n	1004bf92 <llc_conn_push_connection_complete_event+0x102>
1004beca:	2d00      	cmp	r5, #0
1004becc:	d100      	bne.n	1004bed0 <llc_conn_push_connection_complete_event+0x40>
1004bece:	2212      	movs	r2, #18
1004bed0:	8aa0      	ldrh	r0, [r4, #20]
1004bed2:	900c      	str	r0, [sp, #48]	@ 0x30
1004bed4:	7da7      	ldrb	r7, [r4, #22]
1004bed6:	7de0      	ldrb	r0, [r4, #23]
1004bed8:	9008      	str	r0, [sp, #32]
1004beda:	8a60      	ldrh	r0, [r4, #18]
1004bedc:	900b      	str	r0, [sp, #44]	@ 0x2c
1004bede:	8a20      	ldrh	r0, [r4, #16]
1004bee0:	9009      	str	r0, [sp, #36]	@ 0x24
1004bee2:	89a0      	ldrh	r0, [r4, #12]
1004bee4:	900a      	str	r0, [sp, #40]	@ 0x28
1004bee6:	6820      	ldr	r0, [r4, #0]
1004bee8:	9005      	str	r0, [sp, #20]
1004beea:	6860      	ldr	r0, [r4, #4]
1004beec:	9007      	str	r0, [sp, #28]
1004beee:	68a0      	ldr	r0, [r4, #8]
1004bef0:	9006      	str	r0, [sp, #24]
1004bef2:	7e20      	ldrb	r0, [r4, #24]
1004bef4:	9003      	str	r0, [sp, #12]
1004bef6:	7e60      	ldrb	r0, [r4, #25]
1004bef8:	9004      	str	r0, [sp, #16]
1004befa:	89e5      	ldrh	r5, [r4, #14]
1004befc:	7ea0      	ldrb	r0, [r4, #26]
1004befe:	9002      	str	r0, [sp, #8]
1004bf00:	487c      	ldr	r0, [pc, #496]	@ (1004c0f4 <__arm_cp.28_2>)
1004bf02:	6800      	ldr	r0, [r0, #0]
1004bf04:	6900      	ldr	r0, [r0, #16]
1004bf06:	b2f1      	uxtb	r1, r6
1004bf08:	230a      	movs	r3, #10
1004bf0a:	f7fe ffff 	bl	1004af0c <aci_event_fifo_push_header>
1004bf0e:	2800      	cmp	r0, #0
1004bf10:	d100      	bne.n	1004bf14 <llc_conn_push_connection_complete_event+0x84>
1004bf12:	e0e8      	b.n	1004c0e6 <llc_conn_push_connection_complete_event+0x256>
1004bf14:	4604      	mov	r4, r0
1004bf16:	9701      	str	r7, [sp, #4]
1004bf18:	4607      	mov	r7, r0
1004bf1a:	371f      	adds	r7, #31
1004bf1c:	7245      	strb	r5, [r0, #9]
1004bf1e:	9803      	ldr	r0, [sp, #12]
1004bf20:	7320      	strb	r0, [r4, #12]
1004bf22:	9804      	ldr	r0, [sp, #16]
1004bf24:	72e0      	strb	r0, [r4, #11]
1004bf26:	9802      	ldr	r0, [sp, #8]
1004bf28:	7220      	strb	r0, [r4, #8]
1004bf2a:	0a28      	lsrs	r0, r5, #8
1004bf2c:	72a0      	strb	r0, [r4, #10]
1004bf2e:	4620      	mov	r0, r4
1004bf30:	300d      	adds	r0, #13
1004bf32:	2506      	movs	r5, #6
1004bf34:	9905      	ldr	r1, [sp, #20]
1004bf36:	462a      	mov	r2, r5
1004bf38:	4b6f      	ldr	r3, [pc, #444]	@ (1004c0f8 <__arm_cp.28_3>)
1004bf3a:	4798      	blx	r3
1004bf3c:	4620      	mov	r0, r4
1004bf3e:	3013      	adds	r0, #19
1004bf40:	9906      	ldr	r1, [sp, #24]
1004bf42:	462a      	mov	r2, r5
1004bf44:	4b6c      	ldr	r3, [pc, #432]	@ (1004c0f8 <__arm_cp.28_3>)
1004bf46:	4798      	blx	r3
1004bf48:	4b6b      	ldr	r3, [pc, #428]	@ (1004c0f8 <__arm_cp.28_3>)
1004bf4a:	4620      	mov	r0, r4
1004bf4c:	3019      	adds	r0, #25
1004bf4e:	9907      	ldr	r1, [sp, #28]
1004bf50:	462a      	mov	r2, r5
1004bf52:	4798      	blx	r3
1004bf54:	2021      	movs	r0, #33	@ 0x21
1004bf56:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004bf58:	5421      	strb	r1, [r4, r0]
1004bf5a:	2025      	movs	r0, #37	@ 0x25
1004bf5c:	9a08      	ldr	r2, [sp, #32]
1004bf5e:	5422      	strb	r2, [r4, r0]
1004bf60:	4620      	mov	r0, r4
1004bf62:	3021      	adds	r0, #33	@ 0x21
1004bf64:	0a09      	lsrs	r1, r1, #8
1004bf66:	7041      	strb	r1, [r0, #1]
1004bf68:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004bf6a:	0a08      	lsrs	r0, r1, #8
1004bf6c:	7078      	strb	r0, [r7, #1]
1004bf6e:	7039      	strb	r1, [r7, #0]
1004bf70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004bf72:	0a08      	lsrs	r0, r1, #8
1004bf74:	7178      	strb	r0, [r7, #5]
1004bf76:	7139      	strb	r1, [r7, #4]
1004bf78:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004bf7a:	0a08      	lsrs	r0, r1, #8
1004bf7c:	7278      	strb	r0, [r7, #9]
1004bf7e:	7239      	strb	r1, [r7, #8]
1004bf80:	9801      	ldr	r0, [sp, #4]
1004bf82:	71f8      	strb	r0, [r7, #7]
1004bf84:	1d20      	adds	r0, r4, #4
1004bf86:	2129      	movs	r1, #41	@ 0x29
1004bf88:	2222      	movs	r2, #34	@ 0x22
1004bf8a:	e0a2      	b.n	1004c0d2 <llc_conn_push_connection_complete_event+0x242>
1004bf8c:	2b00      	cmp	r3, #0
1004bf8e:	d100      	bne.n	1004bf92 <llc_conn_push_connection_complete_event+0x102>
1004bf90:	e0a9      	b.n	1004c0e6 <llc_conn_push_connection_complete_event+0x256>
1004bf92:	7a88      	ldrb	r0, [r1, #10]
1004bf94:	0780      	lsls	r0, r0, #30
1004bf96:	d445      	bmi.n	1004c024 <llc_conn_push_connection_complete_event+0x194>
1004bf98:	7a48      	ldrb	r0, [r1, #9]
1004bf9a:	07c0      	lsls	r0, r0, #31
1004bf9c:	d100      	bne.n	1004bfa0 <llc_conn_push_connection_complete_event+0x110>
1004bf9e:	e0a2      	b.n	1004c0e6 <llc_conn_push_connection_complete_event+0x256>
1004bfa0:	2008      	movs	r0, #8
1004bfa2:	4305      	orrs	r5, r0
1004bfa4:	7de0      	ldrb	r0, [r4, #23]
1004bfa6:	900c      	str	r0, [sp, #48]	@ 0x30
1004bfa8:	8a60      	ldrh	r0, [r4, #18]
1004bfaa:	900b      	str	r0, [sp, #44]	@ 0x2c
1004bfac:	8a20      	ldrh	r0, [r4, #16]
1004bfae:	9009      	str	r0, [sp, #36]	@ 0x24
1004bfb0:	89a0      	ldrh	r0, [r4, #12]
1004bfb2:	900a      	str	r0, [sp, #40]	@ 0x28
1004bfb4:	6820      	ldr	r0, [r4, #0]
1004bfb6:	9008      	str	r0, [sp, #32]
1004bfb8:	7e20      	ldrb	r0, [r4, #24]
1004bfba:	9006      	str	r0, [sp, #24]
1004bfbc:	7e60      	ldrb	r0, [r4, #25]
1004bfbe:	9007      	str	r0, [sp, #28]
1004bfc0:	89e7      	ldrh	r7, [r4, #14]
1004bfc2:	7ea0      	ldrb	r0, [r4, #26]
1004bfc4:	9005      	str	r0, [sp, #20]
1004bfc6:	484b      	ldr	r0, [pc, #300]	@ (1004c0f4 <__arm_cp.28_2>)
1004bfc8:	6800      	ldr	r0, [r0, #0]
1004bfca:	6900      	ldr	r0, [r0, #16]
1004bfcc:	b2f1      	uxtb	r1, r6
1004bfce:	2306      	movs	r3, #6
1004bfd0:	462a      	mov	r2, r5
1004bfd2:	f7fe ff9b 	bl	1004af0c <aci_event_fifo_push_header>
1004bfd6:	2800      	cmp	r0, #0
1004bfd8:	d100      	bne.n	1004bfdc <llc_conn_push_connection_complete_event+0x14c>
1004bfda:	e084      	b.n	1004c0e6 <llc_conn_push_connection_complete_event+0x256>
1004bfdc:	4604      	mov	r4, r0
1004bfde:	4605      	mov	r5, r0
1004bfe0:	3513      	adds	r5, #19
1004bfe2:	7247      	strb	r7, [r0, #9]
1004bfe4:	9806      	ldr	r0, [sp, #24]
1004bfe6:	7320      	strb	r0, [r4, #12]
1004bfe8:	9807      	ldr	r0, [sp, #28]
1004bfea:	72e0      	strb	r0, [r4, #11]
1004bfec:	9805      	ldr	r0, [sp, #20]
1004bfee:	7220      	strb	r0, [r4, #8]
1004bff0:	0a38      	lsrs	r0, r7, #8
1004bff2:	72a0      	strb	r0, [r4, #10]
1004bff4:	4620      	mov	r0, r4
1004bff6:	300d      	adds	r0, #13
1004bff8:	2206      	movs	r2, #6
1004bffa:	9908      	ldr	r1, [sp, #32]
1004bffc:	f7f5 fd7c 	bl	10041af8 <BLEPLAT_MemCpy>
1004c000:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004c002:	0a08      	lsrs	r0, r1, #8
1004c004:	75a0      	strb	r0, [r4, #22]
1004c006:	7561      	strb	r1, [r4, #21]
1004c008:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004c00a:	0a08      	lsrs	r0, r1, #8
1004c00c:	7068      	strb	r0, [r5, #1]
1004c00e:	7029      	strb	r1, [r5, #0]
1004c010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004c012:	0a08      	lsrs	r0, r1, #8
1004c014:	7168      	strb	r0, [r5, #5]
1004c016:	7129      	strb	r1, [r5, #4]
1004c018:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004c01a:	7660      	strb	r0, [r4, #25]
1004c01c:	1d20      	adds	r0, r4, #4
1004c01e:	2101      	movs	r1, #1
1004c020:	2213      	movs	r2, #19
1004c022:	e056      	b.n	1004c0d2 <llc_conn_push_connection_complete_event+0x242>
1004c024:	2d00      	cmp	r5, #0
1004c026:	d001      	beq.n	1004c02c <llc_conn_push_connection_complete_event+0x19c>
1004c028:	221c      	movs	r2, #28
1004c02a:	e000      	b.n	1004c02e <llc_conn_push_connection_complete_event+0x19e>
1004c02c:	220d      	movs	r2, #13
1004c02e:	7de0      	ldrb	r0, [r4, #23]
1004c030:	900a      	str	r0, [sp, #40]	@ 0x28
1004c032:	8a67      	ldrh	r7, [r4, #18]
1004c034:	8a20      	ldrh	r0, [r4, #16]
1004c036:	900b      	str	r0, [sp, #44]	@ 0x2c
1004c038:	89a0      	ldrh	r0, [r4, #12]
1004c03a:	900c      	str	r0, [sp, #48]	@ 0x30
1004c03c:	6820      	ldr	r0, [r4, #0]
1004c03e:	9007      	str	r0, [sp, #28]
1004c040:	6860      	ldr	r0, [r4, #4]
1004c042:	9009      	str	r0, [sp, #36]	@ 0x24
1004c044:	68a0      	ldr	r0, [r4, #8]
1004c046:	9008      	str	r0, [sp, #32]
1004c048:	7e20      	ldrb	r0, [r4, #24]
1004c04a:	9005      	str	r0, [sp, #20]
1004c04c:	7e60      	ldrb	r0, [r4, #25]
1004c04e:	9006      	str	r0, [sp, #24]
1004c050:	89e5      	ldrh	r5, [r4, #14]
1004c052:	7ea0      	ldrb	r0, [r4, #26]
1004c054:	9004      	str	r0, [sp, #16]
1004c056:	4827      	ldr	r0, [pc, #156]	@ (1004c0f4 <__arm_cp.28_2>)
1004c058:	6800      	ldr	r0, [r0, #0]
1004c05a:	6900      	ldr	r0, [r0, #16]
1004c05c:	b2f1      	uxtb	r1, r6
1004c05e:	2309      	movs	r3, #9
1004c060:	f7fe ff54 	bl	1004af0c <aci_event_fifo_push_header>
1004c064:	2800      	cmp	r0, #0
1004c066:	d03e      	beq.n	1004c0e6 <llc_conn_push_connection_complete_event+0x256>
1004c068:	4604      	mov	r4, r0
1004c06a:	9703      	str	r7, [sp, #12]
1004c06c:	4607      	mov	r7, r0
1004c06e:	371f      	adds	r7, #31
1004c070:	7245      	strb	r5, [r0, #9]
1004c072:	9805      	ldr	r0, [sp, #20]
1004c074:	7320      	strb	r0, [r4, #12]
1004c076:	9806      	ldr	r0, [sp, #24]
1004c078:	72e0      	strb	r0, [r4, #11]
1004c07a:	9804      	ldr	r0, [sp, #16]
1004c07c:	7220      	strb	r0, [r4, #8]
1004c07e:	0a28      	lsrs	r0, r5, #8
1004c080:	72a0      	strb	r0, [r4, #10]
1004c082:	4620      	mov	r0, r4
1004c084:	300d      	adds	r0, #13
1004c086:	2506      	movs	r5, #6
1004c088:	9907      	ldr	r1, [sp, #28]
1004c08a:	462a      	mov	r2, r5
1004c08c:	4b1a      	ldr	r3, [pc, #104]	@ (1004c0f8 <__arm_cp.28_3>)
1004c08e:	4798      	blx	r3
1004c090:	4620      	mov	r0, r4
1004c092:	3013      	adds	r0, #19
1004c094:	9908      	ldr	r1, [sp, #32]
1004c096:	462a      	mov	r2, r5
1004c098:	4b17      	ldr	r3, [pc, #92]	@ (1004c0f8 <__arm_cp.28_3>)
1004c09a:	4798      	blx	r3
1004c09c:	4b16      	ldr	r3, [pc, #88]	@ (1004c0f8 <__arm_cp.28_3>)
1004c09e:	4620      	mov	r0, r4
1004c0a0:	3019      	adds	r0, #25
1004c0a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004c0a4:	462a      	mov	r2, r5
1004c0a6:	4798      	blx	r3
1004c0a8:	2021      	movs	r0, #33	@ 0x21
1004c0aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004c0ac:	5422      	strb	r2, [r4, r0]
1004c0ae:	2025      	movs	r0, #37	@ 0x25
1004c0b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004c0b2:	5421      	strb	r1, [r4, r0]
1004c0b4:	1d20      	adds	r0, r4, #4
1004c0b6:	4621      	mov	r1, r4
1004c0b8:	3121      	adds	r1, #33	@ 0x21
1004c0ba:	0a12      	lsrs	r2, r2, #8
1004c0bc:	704a      	strb	r2, [r1, #1]
1004c0be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004c0c0:	0a11      	lsrs	r1, r2, #8
1004c0c2:	7079      	strb	r1, [r7, #1]
1004c0c4:	703a      	strb	r2, [r7, #0]
1004c0c6:	9a03      	ldr	r2, [sp, #12]
1004c0c8:	0a11      	lsrs	r1, r2, #8
1004c0ca:	7179      	strb	r1, [r7, #5]
1004c0cc:	713a      	strb	r2, [r7, #4]
1004c0ce:	210a      	movs	r1, #10
1004c0d0:	221f      	movs	r2, #31
1004c0d2:	2304      	movs	r3, #4
1004c0d4:	7123      	strb	r3, [r4, #4]
1004c0d6:	233e      	movs	r3, #62	@ 0x3e
1004c0d8:	7043      	strb	r3, [r0, #1]
1004c0da:	71e1      	strb	r1, [r4, #7]
1004c0dc:	71a2      	strb	r2, [r4, #6]
1004c0de:	b2f0      	uxtb	r0, r6
1004c0e0:	4621      	mov	r1, r4
1004c0e2:	f7fe ffb0 	bl	1004b046 <aci_event_fifo_push>
1004c0e6:	b00d      	add	sp, #52	@ 0x34
1004c0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c0ea:	46c0      	nop			@ (mov r8, r8)

1004c0ec <__arm_cp.28_0>:
1004c0ec:	20000b50 	.word	0x20000b50

1004c0f0 <__arm_cp.28_1>:
1004c0f0:	20000b60 	.word	0x20000b60

1004c0f4 <__arm_cp.28_2>:
1004c0f4:	20000b54 	.word	0x20000b54

1004c0f8 <__arm_cp.28_3>:
1004c0f8:	10041af9 	.word	0x10041af9

1004c0fc <llc_conn_release_conn_idx>:
1004c0fc:	b580      	push	{r7, lr}
1004c0fe:	f7ff fe07 	bl	1004bd10 <llc_conn_get_cntxt_per_p>
1004c102:	212c      	movs	r1, #44	@ 0x2c
1004c104:	2200      	movs	r2, #0
1004c106:	5442      	strb	r2, [r0, r1]
1004c108:	bd80      	pop	{r7, pc}

1004c10a <llc_conn_peripheral_roll_back_params_tsk_ucfg_weak>:
1004c10a:	4770      	bx	lr

1004c10c <llc_isoal_mem_alloc_ucfg_weak>:
1004c10c:	4770      	bx	lr

1004c10e <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1004c10e:	2000      	movs	r0, #0
1004c110:	4770      	bx	lr

1004c112 <iso_terminate_event_int_cb_ucfg_weak>:
1004c112:	2000      	movs	r0, #0
1004c114:	4770      	bx	lr

1004c116 <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1004c116:	2000      	movs	r0, #0
1004c118:	4770      	bx	lr

1004c11a <llc_iso_cmn_mem_alloc_ucfg_weak>:
1004c11a:	4770      	bx	lr

1004c11c <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1004c11c:	2000      	movs	r0, #0
1004c11e:	4770      	bx	lr

1004c120 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1004c120:	2000      	movs	r0, #0
1004c122:	4770      	bx	lr

1004c124 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1004c124:	4770      	bx	lr

1004c126 <llc_priv_init_ucfg_weak>:
1004c126:	4770      	bx	lr

1004c128 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1004c128:	4770      	bx	lr

1004c12a <llc_priv_offline_rpa_resolution_ucfg_weak>:
1004c12a:	4770      	bx	lr

1004c12c <llc_priv_controller_privacy_csr_ucfg_weak>:
1004c12c:	2000      	movs	r0, #0
1004c12e:	4770      	bx	lr

1004c130 <llc_priv_start_privacy_timer_ucfg_weak>:
1004c130:	4770      	bx	lr

1004c132 <llc_priv_stop_privacy_timer_ucfg_weak>:
1004c132:	4770      	bx	lr

1004c134 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1004c134:	4770      	bx	lr
	...

1004c138 <llc_scan_get_cntxt_p>:
1004c138:	4802      	ldr	r0, [pc, #8]	@ (1004c144 <__arm_cp.0_0>)
1004c13a:	6800      	ldr	r0, [r0, #0]
1004c13c:	219c      	movs	r1, #156	@ 0x9c
1004c13e:	5840      	ldr	r0, [r0, r1]
1004c140:	6840      	ldr	r0, [r0, #4]
1004c142:	4770      	bx	lr

1004c144 <__arm_cp.0_0>:
1004c144:	20000b60 	.word	0x20000b60

1004c148 <llc_scan_init_ucfg_weak>:
1004c148:	4770      	bx	lr

1004c14a <llc_scan_mem_allocate_ucfg_weak>:
1004c14a:	4770      	bx	lr

1004c14c <llc_scan_stop_ucfg_weak>:
1004c14c:	2000      	movs	r0, #0
1004c14e:	4770      	bx	lr

1004c150 <llc_convert_hci_phy_enum_to_hw_phy>:
1004c150:	1e80      	subs	r0, r0, #2
1004c152:	b2c0      	uxtb	r0, r0
1004c154:	2803      	cmp	r0, #3
1004c156:	d301      	bcc.n	1004c15c <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1004c158:	2000      	movs	r0, #0
1004c15a:	e002      	b.n	1004c162 <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1004c15c:	00c1      	lsls	r1, r0, #3
1004c15e:	4802      	ldr	r0, [pc, #8]	@ (1004c168 <__arm_cp.4_0>)
1004c160:	40c8      	lsrs	r0, r1
1004c162:	b2c0      	uxtb	r0, r0
1004c164:	4770      	bx	lr
1004c166:	46c0      	nop			@ (mov r8, r8)

1004c168 <__arm_cp.4_0>:
1004c168:	00060401 	.word	0x00060401

1004c16c <LL_cpf_cis_processing_ucfg_weak>:
1004c16c:	4770      	bx	lr

1004c16e <LLC_authenticated_payload_timeout_processing_ucfg_weak>:
1004c16e:	4770      	bx	lr

1004c170 <llc_past_mem_allocate_ucfg_weak>:
1004c170:	4770      	bx	lr

1004c172 <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1004c172:	4770      	bx	lr

1004c174 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1004c174:	4770      	bx	lr
	...

1004c178 <llc_cte_get_ctxt>:
1004c178:	4802      	ldr	r0, [pc, #8]	@ (1004c184 <__arm_cp.2_0>)
1004c17a:	6800      	ldr	r0, [r0, #0]
1004c17c:	219c      	movs	r1, #156	@ 0x9c
1004c17e:	5840      	ldr	r0, [r0, r1]
1004c180:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1004c182:	4770      	bx	lr

1004c184 <__arm_cp.2_0>:
1004c184:	20000b60 	.word	0x20000b60

1004c188 <llc_cte_init_ucfg_weak>:
1004c188:	4770      	bx	lr

1004c18a <llc_cte_mem_allocate_ucfg_weak>:
1004c18a:	4770      	bx	lr

1004c18c <llc_cte_timer_error_ucfg_weak>:
1004c18c:	4770      	bx	lr

1004c18e <llc_cte_timer_stop_ucfg_weak>:
1004c18e:	2000      	movs	r0, #0
1004c190:	4770      	bx	lr
	...

1004c194 <LL_dtm_init>:
1004c194:	b5b0      	push	{r4, r5, r7, lr}
1004c196:	480e      	ldr	r0, [pc, #56]	@ (1004c1d0 <__arm_cp.0_0>)
1004c198:	6800      	ldr	r0, [r0, #0]
1004c19a:	21ac      	movs	r1, #172	@ 0xac
1004c19c:	5844      	ldr	r4, [r0, r1]
1004c19e:	20ff      	movs	r0, #255	@ 0xff
1004c1a0:	77a0      	strb	r0, [r4, #30]
1004c1a2:	2500      	movs	r5, #0
1004c1a4:	77e5      	strb	r5, [r4, #31]
1004c1a6:	f7ff fd96 	bl	1004bcd6 <cte_csr_ucfg_weak>
1004c1aa:	2801      	cmp	r0, #1
1004c1ac:	d10f      	bne.n	1004c1ce <LL_dtm_init+0x3a>
1004c1ae:	f7ff ffe3 	bl	1004c178 <llc_cte_get_ctxt>
1004c1b2:	2224      	movs	r2, #36	@ 0x24
1004c1b4:	4907      	ldr	r1, [pc, #28]	@ (1004c1d4 <__arm_cp.0_1>)
1004c1b6:	5c8a      	ldrb	r2, [r1, r2]
1004c1b8:	2a00      	cmp	r2, #0
1004c1ba:	462a      	mov	r2, r5
1004c1bc:	d000      	beq.n	1004c1c0 <LL_dtm_init+0x2c>
1004c1be:	6802      	ldr	r2, [r0, #0]
1004c1c0:	62a2      	str	r2, [r4, #40]	@ 0x28
1004c1c2:	2223      	movs	r2, #35	@ 0x23
1004c1c4:	5c89      	ldrb	r1, [r1, r2]
1004c1c6:	2900      	cmp	r1, #0
1004c1c8:	d000      	beq.n	1004c1cc <LL_dtm_init+0x38>
1004c1ca:	6845      	ldr	r5, [r0, #4]
1004c1cc:	62e5      	str	r5, [r4, #44]	@ 0x2c
1004c1ce:	bdb0      	pop	{r4, r5, r7, pc}

1004c1d0 <__arm_cp.0_0>:
1004c1d0:	20000b60 	.word	0x20000b60

1004c1d4 <__arm_cp.0_1>:
1004c1d4:	20000b70 	.word	0x20000b70

1004c1d8 <LL_eadv_switchbackupdata_data_struc>:
1004c1d8:	b510      	push	{r4, lr}
1004c1da:	7c01      	ldrb	r1, [r0, #16]
1004c1dc:	2902      	cmp	r1, #2
1004c1de:	d109      	bne.n	1004c1f4 <LL_eadv_switchbackupdata_data_struc+0x1c>
1004c1e0:	2401      	movs	r4, #1
1004c1e2:	7404      	strb	r4, [r0, #16]
1004c1e4:	6801      	ldr	r1, [r0, #0]
1004c1e6:	6882      	ldr	r2, [r0, #8]
1004c1e8:	68c3      	ldr	r3, [r0, #12]
1004c1ea:	c00c      	stmia	r0!, {r2, r3}
1004c1ec:	20a1      	movs	r0, #161	@ 0xa1
1004c1ee:	f002 faa7 	bl	1004e740 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1004c1f2:	e000      	b.n	1004c1f6 <LL_eadv_switchbackupdata_data_struc+0x1e>
1004c1f4:	2400      	movs	r4, #0
1004c1f6:	4620      	mov	r0, r4
1004c1f8:	bd10      	pop	{r4, pc}

1004c1fa <LL_eadv_Blue_Tx>:
1004c1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c1fc:	461e      	mov	r6, r3
1004c1fe:	4617      	mov	r7, r2
1004c200:	460d      	mov	r5, r1
1004c202:	4604      	mov	r4, r0
1004c204:	f7f6 fa2e 	bl	10042664 <BLEPLAT_CNTR_PacketInitTo0>
1004c208:	4620      	mov	r0, r4
1004c20a:	f7f6 fa39 	bl	10042680 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1004c20e:	4620      	mov	r0, r4
1004c210:	f7f6 fa6a 	bl	100426e8 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1004c214:	4620      	mov	r0, r4
1004c216:	4621      	mov	r1, r4
1004c218:	f7f6 fa73 	bl	10042702 <BLEPLAT_CNTR_PacketSetNextPtr>
1004c21c:	4620      	mov	r0, r4
1004c21e:	4639      	mov	r1, r7
1004c220:	f7f6 fa3b 	bl	1004269a <BLEPLAT_CNTR_PacketSetDataPtr>
1004c224:	4620      	mov	r0, r4
1004c226:	4631      	mov	r1, r6
1004c228:	f7f6 fab9 	bl	1004279e <BLEPLAT_CNTR_PacketSetTimeout>
1004c22c:	9f06      	ldr	r7, [sp, #24]
1004c22e:	2e00      	cmp	r6, #0
1004c230:	d002      	beq.n	1004c238 <LL_eadv_Blue_Tx+0x3e>
1004c232:	4620      	mov	r0, r4
1004c234:	f7f6 fac2 	bl	100427bc <BLEPLAT_CNTR_PacketSetTimer2Active>
1004c238:	4620      	mov	r0, r4
1004c23a:	f7f6 f9fa 	bl	10042632 <BLEPLAT_CNTR_PacketClrIncChan>
1004c23e:	4620      	mov	r0, r4
1004c240:	f7f6 fa3a 	bl	100426b8 <BLEPLAT_CNTR_PacketSetIntDone>
1004c244:	4620      	mov	r0, r4
1004c246:	f7f6 fadf 	bl	10042808 <BLEPLAT_CNTR_PacketSetTxReady>
1004c24a:	4620      	mov	r0, r4
1004c24c:	2f81      	cmp	r7, #129	@ 0x81
1004c24e:	d109      	bne.n	1004c264 <LL_eadv_Blue_Tx+0x6a>
1004c250:	4629      	mov	r1, r5
1004c252:	f7f6 fa72 	bl	1004273a <BLEPLAT_CNTR_PacketSetNextSlot>
1004c256:	4620      	mov	r0, r4
1004c258:	f7f6 fa87 	bl	1004276a <BLEPLAT_CNTR_PacketSetPllTrig>
1004c25c:	4620      	mov	r0, r4
1004c25e:	f7f6 fab9 	bl	100427d4 <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1004c262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c264:	f7f6 fac3 	bl	100427ee <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1004c268:	4620      	mov	r0, r4
1004c26a:	f7f6 fa59 	bl	10042720 <BLEPLAT_CNTR_PacketSetNextRxMode>
1004c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004c270 <LL_eadv_Blue_Rx>:
1004c270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c272:	461e      	mov	r6, r3
1004c274:	4617      	mov	r7, r2
1004c276:	460d      	mov	r5, r1
1004c278:	4604      	mov	r4, r0
1004c27a:	f7f6 f9f3 	bl	10042664 <BLEPLAT_CNTR_PacketInitTo0>
1004c27e:	4620      	mov	r0, r4
1004c280:	f7f6 f9fe 	bl	10042680 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1004c284:	4620      	mov	r0, r4
1004c286:	f7f6 fa2f 	bl	100426e8 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1004c28a:	4620      	mov	r0, r4
1004c28c:	4621      	mov	r1, r4
1004c28e:	f7f6 fa38 	bl	10042702 <BLEPLAT_CNTR_PacketSetNextPtr>
1004c292:	4620      	mov	r0, r4
1004c294:	4639      	mov	r1, r7
1004c296:	f7f6 fa00 	bl	1004269a <BLEPLAT_CNTR_PacketSetDataPtr>
1004c29a:	4620      	mov	r0, r4
1004c29c:	4631      	mov	r1, r6
1004c29e:	f7f6 fa7e 	bl	1004279e <BLEPLAT_CNTR_PacketSetTimeout>
1004c2a2:	9f07      	ldr	r7, [sp, #28]
1004c2a4:	2e00      	cmp	r6, #0
1004c2a6:	d002      	beq.n	1004c2ae <LL_eadv_Blue_Rx+0x3e>
1004c2a8:	4620      	mov	r0, r4
1004c2aa:	f7f6 fa87 	bl	100427bc <BLEPLAT_CNTR_PacketSetTimer2Active>
1004c2ae:	4620      	mov	r0, r4
1004c2b0:	f7f6 fa4e 	bl	10042750 <BLEPLAT_CNTR_PacketSetNextTxMode>
1004c2b4:	4620      	mov	r0, r4
1004c2b6:	f7f6 f9bc 	bl	10042632 <BLEPLAT_CNTR_PacketClrIncChan>
1004c2ba:	4620      	mov	r0, r4
1004c2bc:	f7f6 f9fc 	bl	100426b8 <BLEPLAT_CNTR_PacketSetIntDone>
1004c2c0:	4620      	mov	r0, r4
1004c2c2:	f7f6 fa94 	bl	100427ee <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1004c2c6:	4620      	mov	r0, r4
1004c2c8:	f7f6 fa02 	bl	100426d0 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1004c2cc:	4620      	mov	r0, r4
1004c2ce:	f7f6 fa59 	bl	10042784 <BLEPLAT_CNTR_PacketSetRxReady>
1004c2d2:	2f81      	cmp	r7, #129	@ 0x81
1004c2d4:	d107      	bne.n	1004c2e6 <LL_eadv_Blue_Rx+0x76>
1004c2d6:	4620      	mov	r0, r4
1004c2d8:	4629      	mov	r1, r5
1004c2da:	f7f6 fa2e 	bl	1004273a <BLEPLAT_CNTR_PacketSetNextSlot>
1004c2de:	4620      	mov	r0, r4
1004c2e0:	f7f6 f9b3 	bl	1004264a <BLEPLAT_CNTR_PacketClrPllTrig>
1004c2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c2e6:	4620      	mov	r0, r4
1004c2e8:	f7f6 fa3f 	bl	1004276a <BLEPLAT_CNTR_PacketSetPllTrig>
1004c2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1004c2f0 <LL_eadv_BLUE_SM>:
1004c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c2f2:	461d      	mov	r5, r3
1004c2f4:	4616      	mov	r6, r2
1004c2f6:	460f      	mov	r7, r1
1004c2f8:	4604      	mov	r4, r0
1004c2fa:	f7f6 fabf 	bl	1004287c <BLEPLAT_CNTR_SmInitTo0>
1004c2fe:	4911      	ldr	r1, [pc, #68]	@ (1004c344 <__arm_cp.10_0>)
1004c300:	4620      	mov	r0, r4
1004c302:	f7f6 fad9 	bl	100428b8 <BLEPLAT_CNTR_SmSetAccessAddr>
1004c306:	4910      	ldr	r1, [pc, #64]	@ (1004c348 <__arm_cp.10_1>)
1004c308:	4620      	mov	r0, r4
1004c30a:	f7f6 fae7 	bl	100428dc <BLEPLAT_CNTR_SmSetCrcInit>
1004c30e:	4620      	mov	r0, r4
1004c310:	4639      	mov	r1, r7
1004c312:	f7f6 fba0 	bl	10042a56 <BLEPLAT_CNTR_SmSetTxPwr>
1004c316:	4620      	mov	r0, r4
1004c318:	4631      	mov	r1, r6
1004c31a:	f7f6 fb75 	bl	10042a08 <BLEPLAT_CNTR_SmSetTxPacketPtr>
1004c31e:	4620      	mov	r0, r4
1004c320:	4629      	mov	r1, r5
1004c322:	f7f6 fb3b 	bl	1004299c <BLEPLAT_CNTR_SmSetRxPacketPtr>
1004c326:	9806      	ldr	r0, [sp, #24]
1004c328:	2881      	cmp	r0, #129	@ 0x81
1004c32a:	d103      	bne.n	1004c334 <LL_eadv_BLUE_SM+0x44>
1004c32c:	4620      	mov	r0, r4
1004c32e:	f7f6 fb5c 	bl	100429ea <BLEPLAT_CNTR_SmSetTxMode>
1004c332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c334:	4620      	mov	r0, r4
1004c336:	f7f6 fb22 	bl	1004297e <BLEPLAT_CNTR_SmSetRxMode>
1004c33a:	2101      	movs	r1, #1
1004c33c:	4620      	mov	r0, r4
1004c33e:	f7f6 faf4 	bl	1004292a <BLEPLAT_CNTR_SmSetHopIncr>
1004c342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004c344 <__arm_cp.10_0>:
1004c344:	8e89bed6 	.word	0x8e89bed6

1004c348 <__arm_cp.10_1>:
1004c348:	00555555 	.word	0x00555555

1004c34c <llc_get_advertising_set_index>:
1004c34c:	b570      	push	{r4, r5, r6, lr}
1004c34e:	4604      	mov	r4, r0
1004c350:	f001 f96c 	bl	1004d62c <llc_get_linkms_cntxt_p>
1004c354:	214d      	movs	r1, #77	@ 0x4d
1004c356:	5c41      	ldrb	r1, [r0, r1]
1004c358:	4d09      	ldr	r5, [pc, #36]	@ (1004c380 <__arm_cp.12_0>)
1004c35a:	2200      	movs	r2, #0
1004c35c:	23be      	movs	r3, #190	@ 0xbe
1004c35e:	4291      	cmp	r1, r2
1004c360:	d00b      	beq.n	1004c37a <llc_get_advertising_set_index+0x2e>
1004c362:	6806      	ldr	r6, [r0, #0]
1004c364:	5af6      	ldrh	r6, [r6, r3]
1004c366:	42a6      	cmp	r6, r4
1004c368:	4616      	mov	r6, r2
1004c36a:	d000      	beq.n	1004c36e <llc_get_advertising_set_index+0x22>
1004c36c:	462e      	mov	r6, r5
1004c36e:	2501      	movs	r5, #1
1004c370:	022d      	lsls	r5, r5, #8
1004c372:	195b      	adds	r3, r3, r5
1004c374:	1c52      	adds	r2, r2, #1
1004c376:	4635      	mov	r5, r6
1004c378:	e7f1      	b.n	1004c35e <llc_get_advertising_set_index+0x12>
1004c37a:	b2a8      	uxth	r0, r5
1004c37c:	bd70      	pop	{r4, r5, r6, pc}
1004c37e:	46c0      	nop			@ (mov r8, r8)

1004c380 <__arm_cp.12_0>:
1004c380:	0000ffff 	.word	0x0000ffff

1004c384 <llc_eadv_generate_new_rpa_for_one_adv_set>:
1004c384:	b5b0      	push	{r4, r5, r7, lr}
1004c386:	4604      	mov	r4, r0
1004c388:	20d6      	movs	r0, #214	@ 0xd6
1004c38a:	5c20      	ldrb	r0, [r4, r0]
1004c38c:	0780      	lsls	r0, r0, #30
1004c38e:	d401      	bmi.n	1004c394 <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1004c390:	2000      	movs	r0, #0
1004c392:	bdb0      	pop	{r4, r5, r7, pc}
1004c394:	4625      	mov	r5, r4
1004c396:	3584      	adds	r5, #132	@ 0x84
1004c398:	4628      	mov	r0, r5
1004c39a:	f7ff fecb 	bl	1004c134 <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1004c39e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1004c3a0:	4628      	mov	r0, r5
1004c3a2:	f7ff fec1 	bl	1004c128 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1004c3a6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1004c3a8:	3008      	adds	r0, #8
1004c3aa:	2100      	movs	r1, #0
1004c3ac:	f7ff feba 	bl	1004c124 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1004c3b0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1004c3b2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1004c3b4:	6761      	str	r1, [r4, #116]	@ 0x74
1004c3b6:	67a0      	str	r0, [r4, #120]	@ 0x78
1004c3b8:	2001      	movs	r0, #1
1004c3ba:	bdb0      	pop	{r4, r5, r7, pc}

1004c3bc <EADV_init>:
1004c3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c3be:	b085      	sub	sp, #20
1004c3c0:	9204      	str	r2, [sp, #16]
1004c3c2:	460e      	mov	r6, r1
1004c3c4:	4605      	mov	r5, r0
1004c3c6:	244d      	movs	r4, #77	@ 0x4d
1004c3c8:	f001 f930 	bl	1004d62c <llc_get_linkms_cntxt_p>
1004c3cc:	5505      	strb	r5, [r0, r4]
1004c3ce:	6006      	str	r6, [r0, #0]
1004c3d0:	9003      	str	r0, [sp, #12]
1004c3d2:	304d      	adds	r0, #77	@ 0x4d
1004c3d4:	2101      	movs	r1, #1
1004c3d6:	9002      	str	r0, [sp, #8]
1004c3d8:	7041      	strb	r1, [r0, #1]
1004c3da:	9101      	str	r1, [sp, #4]
1004c3dc:	04cb      	lsls	r3, r1, #19
1004c3de:	2600      	movs	r6, #0
1004c3e0:	277c      	movs	r7, #124	@ 0x7c
1004c3e2:	9a04      	ldr	r2, [sp, #16]
1004c3e4:	b2e8      	uxtb	r0, r5
1004c3e6:	4286      	cmp	r6, r0
1004c3e8:	d226      	bcs.n	1004c438 <EADV_init+0x7c>
1004c3ea:	9803      	ldr	r0, [sp, #12]
1004c3ec:	6800      	ldr	r0, [r0, #0]
1004c3ee:	51c3      	str	r3, [r0, r7]
1004c3f0:	19c5      	adds	r5, r0, r7
1004c3f2:	2054      	movs	r0, #84	@ 0x54
1004c3f4:	4911      	ldr	r1, [pc, #68]	@ (1004c43c <__arm_cp.19_0>)
1004c3f6:	5229      	strh	r1, [r5, r0]
1004c3f8:	2452      	movs	r4, #82	@ 0x52
1004c3fa:	2000      	movs	r0, #0
1004c3fc:	5328      	strh	r0, [r5, r4]
1004c3fe:	2442      	movs	r4, #66	@ 0x42
1004c400:	5329      	strh	r1, [r5, r4]
1004c402:	245e      	movs	r4, #94	@ 0x5e
1004c404:	5528      	strb	r0, [r5, r4]
1004c406:	245c      	movs	r4, #92	@ 0x5c
1004c408:	21ff      	movs	r1, #255	@ 0xff
1004c40a:	5529      	strb	r1, [r5, r4]
1004c40c:	215a      	movs	r1, #90	@ 0x5a
1004c40e:	5468      	strb	r0, [r5, r1]
1004c410:	2146      	movs	r1, #70	@ 0x46
1004c412:	2407      	movs	r4, #7
1004c414:	526c      	strh	r4, [r5, r1]
1004c416:	6128      	str	r0, [r5, #16]
1004c418:	6168      	str	r0, [r5, #20]
1004c41a:	606b      	str	r3, [r5, #4]
1004c41c:	9904      	ldr	r1, [sp, #16]
1004c41e:	2900      	cmp	r1, #0
1004c420:	d002      	beq.n	1004c428 <EADV_init+0x6c>
1004c422:	6550      	str	r0, [r2, #84]	@ 0x54
1004c424:	3d2c      	subs	r5, #44	@ 0x2c
1004c426:	602a      	str	r2, [r5, #0]
1004c428:	9801      	ldr	r0, [sp, #4]
1004c42a:	0200      	lsls	r0, r0, #8
1004c42c:	183f      	adds	r7, r7, r0
1004c42e:	325c      	adds	r2, #92	@ 0x5c
1004c430:	9802      	ldr	r0, [sp, #8]
1004c432:	7805      	ldrb	r5, [r0, #0]
1004c434:	1c76      	adds	r6, r6, #1
1004c436:	e7d5      	b.n	1004c3e4 <EADV_init+0x28>
1004c438:	b005      	add	sp, #20
1004c43a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004c43c <__arm_cp.19_0>:
1004c43c:	0000ffff 	.word	0x0000ffff

1004c440 <LL_LE_Set_Advertising_Parameters>:
1004c440:	b570      	push	{r4, r5, r6, lr}
1004c442:	4604      	mov	r4, r0
1004c444:	f001 f8f2 	bl	1004d62c <llc_get_linkms_cntxt_p>
1004c448:	4605      	mov	r5, r0
1004c44a:	4e30      	ldr	r6, [pc, #192]	@ (1004c50c <__arm_cp.20_0>)
1004c44c:	4630      	mov	r0, r6
1004c44e:	f7ff ff7d 	bl	1004c34c <llc_get_advertising_set_index>
1004c452:	492f      	ldr	r1, [pc, #188]	@ (1004c510 <__arm_cp.20_1>)
1004c454:	4288      	cmp	r0, r1
1004c456:	d112      	bne.n	1004c47e <LL_LE_Set_Advertising_Parameters+0x3e>
1004c458:	f000 f860 	bl	1004c51c <LL_Context_ReturnFree>
1004c45c:	28ff      	cmp	r0, #255	@ 0xff
1004c45e:	d034      	beq.n	1004c4ca <LL_LE_Set_Advertising_Parameters+0x8a>
1004c460:	0200      	lsls	r0, r0, #8
1004c462:	6829      	ldr	r1, [r5, #0]
1004c464:	1808      	adds	r0, r1, r0
1004c466:	21be      	movs	r1, #190	@ 0xbe
1004c468:	5246      	strh	r6, [r0, r1]
1004c46a:	214c      	movs	r1, #76	@ 0x4c
1004c46c:	2200      	movs	r2, #0
1004c46e:	5442      	strb	r2, [r0, r1]
1004c470:	2138      	movs	r1, #56	@ 0x38
1004c472:	5442      	strb	r2, [r0, r1]
1004c474:	63c2      	str	r2, [r0, #60]	@ 0x3c
1004c476:	6402      	str	r2, [r0, #64]	@ 0x40
1004c478:	6282      	str	r2, [r0, #40]	@ 0x28
1004c47a:	62c2      	str	r2, [r0, #44]	@ 0x2c
1004c47c:	e008      	b.n	1004c490 <LL_LE_Set_Advertising_Parameters+0x50>
1004c47e:	0200      	lsls	r0, r0, #8
1004c480:	6829      	ldr	r1, [r5, #0]
1004c482:	1808      	adds	r0, r1, r0
1004c484:	21ce      	movs	r1, #206	@ 0xce
1004c486:	5c41      	ldrb	r1, [r0, r1]
1004c488:	2901      	cmp	r1, #1
1004c48a:	d101      	bne.n	1004c490 <LL_LE_Set_Advertising_Parameters+0x50>
1004c48c:	250c      	movs	r5, #12
1004c48e:	e03a      	b.n	1004c506 <LL_LE_Set_Advertising_Parameters+0xc6>
1004c490:	7961      	ldrb	r1, [r4, #5]
1004c492:	22c2      	movs	r2, #194	@ 0xc2
1004c494:	5481      	strb	r1, [r0, r2]
1004c496:	4606      	mov	r6, r0
1004c498:	36c2      	adds	r6, #194	@ 0xc2
1004c49a:	2500      	movs	r5, #0
1004c49c:	72f5      	strb	r5, [r6, #11]
1004c49e:	2101      	movs	r1, #1
1004c4a0:	70f1      	strb	r1, [r6, #3]
1004c4a2:	79a1      	ldrb	r1, [r4, #6]
1004c4a4:	7071      	strb	r1, [r6, #1]
1004c4a6:	8821      	ldrh	r1, [r4, #0]
1004c4a8:	0209      	lsls	r1, r1, #8
1004c4aa:	67c1      	str	r1, [r0, #124]	@ 0x7c
1004c4ac:	4601      	mov	r1, r0
1004c4ae:	3184      	adds	r1, #132	@ 0x84
1004c4b0:	7922      	ldrb	r2, [r4, #4]
1004c4b2:	2a04      	cmp	r2, #4
1004c4b4:	d815      	bhi.n	1004c4e2 <LL_LE_Set_Advertising_Parameters+0xa2>
1004c4b6:	46c0      	nop			@ (mov r8, r8)
1004c4b8:	447a      	add	r2, pc
1004c4ba:	7912      	ldrb	r2, [r2, #4]
1004c4bc:	0052      	lsls	r2, r2, #1
1004c4be:	4497      	add	pc, r2
1004c4c0:	0c0a0602 	.word	0x0c0a0602
1004c4c4:	000e      	.short	0x000e
1004c4c6:	20f3      	movs	r0, #243	@ 0xf3
1004c4c8:	e00a      	b.n	1004c4e0 <LL_LE_Set_Advertising_Parameters+0xa0>
1004c4ca:	2507      	movs	r5, #7
1004c4cc:	e01b      	b.n	1004c506 <LL_LE_Set_Advertising_Parameters+0xc6>
1004c4ce:	4a11      	ldr	r2, [pc, #68]	@ (1004c514 <__arm_cp.20_2>)
1004c4d0:	67c2      	str	r2, [r0, #124]	@ 0x7c
1004c4d2:	20fd      	movs	r0, #253	@ 0xfd
1004c4d4:	e004      	b.n	1004c4e0 <LL_LE_Set_Advertising_Parameters+0xa0>
1004c4d6:	20f2      	movs	r0, #242	@ 0xf2
1004c4d8:	e002      	b.n	1004c4e0 <LL_LE_Set_Advertising_Parameters+0xa0>
1004c4da:	20f0      	movs	r0, #240	@ 0xf0
1004c4dc:	e000      	b.n	1004c4e0 <LL_LE_Set_Advertising_Parameters+0xa0>
1004c4de:	20f5      	movs	r0, #245	@ 0xf5
1004c4e0:	8688      	strh	r0, [r1, #52]	@ 0x34
1004c4e2:	7a20      	ldrb	r0, [r4, #8]
1004c4e4:	79e2      	ldrb	r2, [r4, #7]
1004c4e6:	600d      	str	r5, [r1, #0]
1004c4e8:	604d      	str	r5, [r1, #4]
1004c4ea:	7532      	strb	r2, [r6, #20]
1004c4ec:	7570      	strb	r0, [r6, #21]
1004c4ee:	7a20      	ldrb	r0, [r4, #8]
1004c4f0:	7008      	strb	r0, [r1, #0]
1004c4f2:	1c48      	adds	r0, r1, #1
1004c4f4:	3409      	adds	r4, #9
1004c4f6:	2206      	movs	r2, #6
1004c4f8:	4621      	mov	r1, r4
1004c4fa:	f7f5 fafd 	bl	10041af8 <BLEPLAT_MemCpy>
1004c4fe:	4806      	ldr	r0, [pc, #24]	@ (1004c518 <__arm_cp.20_3>)
1004c500:	6800      	ldr	r0, [r0, #0]
1004c502:	7a40      	ldrb	r0, [r0, #9]
1004c504:	70b0      	strb	r0, [r6, #2]
1004c506:	4628      	mov	r0, r5
1004c508:	bd70      	pop	{r4, r5, r6, pc}
1004c50a:	46c0      	nop			@ (mov r8, r8)

1004c50c <__arm_cp.20_0>:
1004c50c:	0000fffc 	.word	0x0000fffc

1004c510 <__arm_cp.20_1>:
1004c510:	0000ffff 	.word	0x0000ffff

1004c514 <__arm_cp.20_2>:
1004c514:	000005dc 	.word	0x000005dc

1004c518 <__arm_cp.20_3>:
1004c518:	20000b60 	.word	0x20000b60

1004c51c <LL_Context_ReturnFree>:
1004c51c:	b510      	push	{r4, lr}
1004c51e:	f001 f885 	bl	1004d62c <llc_get_linkms_cntxt_p>
1004c522:	214d      	movs	r1, #77	@ 0x4d
1004c524:	5c42      	ldrb	r2, [r0, r1]
1004c526:	2100      	movs	r1, #0
1004c528:	23be      	movs	r3, #190	@ 0xbe
1004c52a:	428a      	cmp	r2, r1
1004c52c:	d008      	beq.n	1004c540 <LL_Context_ReturnFree+0x24>
1004c52e:	6804      	ldr	r4, [r0, #0]
1004c530:	5ae4      	ldrh	r4, [r4, r3]
1004c532:	0b24      	lsrs	r4, r4, #12
1004c534:	d105      	bne.n	1004c542 <LL_Context_ReturnFree+0x26>
1004c536:	2401      	movs	r4, #1
1004c538:	0224      	lsls	r4, r4, #8
1004c53a:	191b      	adds	r3, r3, r4
1004c53c:	1c49      	adds	r1, r1, #1
1004c53e:	e7f4      	b.n	1004c52a <LL_Context_ReturnFree+0xe>
1004c540:	21ff      	movs	r1, #255	@ 0xff
1004c542:	b2c8      	uxtb	r0, r1
1004c544:	bd10      	pop	{r4, pc}
	...

1004c548 <LL_LE_Set_Advertise_Enable>:
1004c548:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1004c54a:	4604      	mov	r4, r0
1004c54c:	f000 f816 	bl	1004c57c <LL_LE_Set_Advertising_Parameters_Default>
1004c550:	2300      	movs	r3, #0
1004c552:	9300      	str	r3, [sp, #0]
1004c554:	2101      	movs	r1, #1
1004c556:	4d07      	ldr	r5, [pc, #28]	@ (1004c574 <__arm_cp.22_0>)
1004c558:	4620      	mov	r0, r4
1004c55a:	462a      	mov	r2, r5
1004c55c:	f000 f82c 	bl	1004c5b8 <LL_Set_Extented_Advertising_Enable>
1004c560:	4604      	mov	r4, r0
1004c562:	4805      	ldr	r0, [pc, #20]	@ (1004c578 <__arm_cp.22_1>)
1004c564:	6801      	ldr	r1, [r0, #0]
1004c566:	3156      	adds	r1, #86	@ 0x56
1004c568:	4628      	mov	r0, r5
1004c56a:	f000 f98f 	bl	1004c88c <LL_Set_Extented_Advertising_Set_Random_Address>
1004c56e:	4620      	mov	r0, r4
1004c570:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1004c572:	46c0      	nop			@ (mov r8, r8)

1004c574 <__arm_cp.22_0>:
1004c574:	0000fffc 	.word	0x0000fffc

1004c578 <__arm_cp.22_1>:
1004c578:	20000b60 	.word	0x20000b60

1004c57c <LL_LE_Set_Advertising_Parameters_Default>:
1004c57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004c57e:	480c      	ldr	r0, [pc, #48]	@ (1004c5b0 <__arm_cp.23_0>)
1004c580:	f7ff fee4 	bl	1004c34c <llc_get_advertising_set_index>
1004c584:	490b      	ldr	r1, [pc, #44]	@ (1004c5b4 <__arm_cp.23_1>)
1004c586:	4288      	cmp	r0, r1
1004c588:	d110      	bne.n	1004c5ac <LL_LE_Set_Advertising_Parameters_Default+0x30>
1004c58a:	466c      	mov	r4, sp
1004c58c:	2100      	movs	r1, #0
1004c58e:	7221      	strb	r1, [r4, #8]
1004c590:	2001      	movs	r0, #1
1004c592:	02c0      	lsls	r0, r0, #11
1004c594:	8020      	strh	r0, [r4, #0]
1004c596:	2007      	movs	r0, #7
1004c598:	0200      	lsls	r0, r0, #8
1004c59a:	9001      	str	r0, [sp, #4]
1004c59c:	4620      	mov	r0, r4
1004c59e:	3009      	adds	r0, #9
1004c5a0:	2206      	movs	r2, #6
1004c5a2:	f7f5 fab9 	bl	10041b18 <BLEPLAT_MemSet>
1004c5a6:	4620      	mov	r0, r4
1004c5a8:	f7ff ff4a 	bl	1004c440 <LL_LE_Set_Advertising_Parameters>
1004c5ac:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1004c5ae:	46c0      	nop			@ (mov r8, r8)

1004c5b0 <__arm_cp.23_0>:
1004c5b0:	0000fffc 	.word	0x0000fffc

1004c5b4 <__arm_cp.23_1>:
1004c5b4:	0000ffff 	.word	0x0000ffff

1004c5b8 <LL_Set_Extented_Advertising_Enable>:
1004c5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c5ba:	b08f      	sub	sp, #60	@ 0x3c
1004c5bc:	930e      	str	r3, [sp, #56]	@ 0x38
1004c5be:	4617      	mov	r7, r2
1004c5c0:	460d      	mov	r5, r1
1004c5c2:	4606      	mov	r6, r0
1004c5c4:	4305      	orrs	r5, r0
1004c5c6:	f001 f831 	bl	1004d62c <llc_get_linkms_cntxt_p>
1004c5ca:	4604      	mov	r4, r0
1004c5cc:	2d00      	cmp	r5, #0
1004c5ce:	d007      	beq.n	1004c5e0 <LL_Set_Extented_Advertising_Enable+0x28>
1004c5d0:	4638      	mov	r0, r7
1004c5d2:	f7ff febb 	bl	1004c34c <llc_get_advertising_set_index>
1004c5d6:	49a7      	ldr	r1, [pc, #668]	@ (1004c874 <__arm_cp.24_1>)
1004c5d8:	4288      	cmp	r0, r1
1004c5da:	d118      	bne.n	1004c60e <LL_Set_Extented_Advertising_Enable+0x56>
1004c5dc:	2042      	movs	r0, #66	@ 0x42
1004c5de:	e04a      	b.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c5e0:	4625      	mov	r5, r4
1004c5e2:	354d      	adds	r5, #77	@ 0x4d
1004c5e4:	2600      	movs	r6, #0
1004c5e6:	4637      	mov	r7, r6
1004c5e8:	960e      	str	r6, [sp, #56]	@ 0x38
1004c5ea:	7828      	ldrb	r0, [r5, #0]
1004c5ec:	4286      	cmp	r6, r0
1004c5ee:	d20c      	bcs.n	1004c60a <LL_Set_Extented_Advertising_Enable+0x52>
1004c5f0:	6820      	ldr	r0, [r4, #0]
1004c5f2:	19c0      	adds	r0, r0, r7
1004c5f4:	21ce      	movs	r1, #206	@ 0xce
1004c5f6:	5c41      	ldrb	r1, [r0, r1]
1004c5f8:	2901      	cmp	r1, #1
1004c5fa:	d101      	bne.n	1004c600 <LL_Set_Extented_Advertising_Enable+0x48>
1004c5fc:	f000 f992 	bl	1004c924 <EADV_stop>
1004c600:	2001      	movs	r0, #1
1004c602:	0200      	lsls	r0, r0, #8
1004c604:	183f      	adds	r7, r7, r0
1004c606:	1c76      	adds	r6, r6, #1
1004c608:	e7ef      	b.n	1004c5ea <LL_Set_Extented_Advertising_Enable+0x32>
1004c60a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c60c:	e033      	b.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c60e:	0201      	lsls	r1, r0, #8
1004c610:	6822      	ldr	r2, [r4, #0]
1004c612:	1854      	adds	r4, r2, r1
1004c614:	21ce      	movs	r1, #206	@ 0xce
1004c616:	5c61      	ldrb	r1, [r4, r1]
1004c618:	2e01      	cmp	r6, #1
1004c61a:	d124      	bne.n	1004c666 <LL_Set_Extented_Advertising_Enable+0xae>
1004c61c:	0200      	lsls	r0, r0, #8
1004c61e:	1815      	adds	r5, r2, r0
1004c620:	20d6      	movs	r0, #214	@ 0xd6
1004c622:	5c28      	ldrb	r0, [r5, r0]
1004c624:	2701      	movs	r7, #1
1004c626:	4038      	ands	r0, r7
1004c628:	2900      	cmp	r1, #0
1004c62a:	d026      	beq.n	1004c67a <LL_Set_Extented_Advertising_Enable+0xc2>
1004c62c:	2800      	cmp	r0, #0
1004c62e:	d00a      	beq.n	1004c646 <LL_Set_Extented_Advertising_Enable+0x8e>
1004c630:	208c      	movs	r0, #140	@ 0x8c
1004c632:	5828      	ldr	r0, [r5, r0]
1004c634:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1004c636:	462a      	mov	r2, r5
1004c638:	328c      	adds	r2, #140	@ 0x8c
1004c63a:	6852      	ldr	r2, [r2, #4]
1004c63c:	c105      	stmia	r1!, {r0, r2}
1004c63e:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1004c640:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1004c642:	6769      	str	r1, [r5, #116]	@ 0x74
1004c644:	67a8      	str	r0, [r5, #120]	@ 0x78
1004c646:	2094      	movs	r0, #148	@ 0x94
1004c648:	5828      	ldr	r0, [r5, r0]
1004c64a:	2600      	movs	r6, #0
1004c64c:	2800      	cmp	r0, #0
1004c64e:	d008      	beq.n	1004c662 <LL_Set_Extented_Advertising_Enable+0xaa>
1004c650:	3594      	adds	r5, #148	@ 0x94
1004c652:	207d      	movs	r0, #125	@ 0x7d
1004c654:	0144      	lsls	r4, r0, #5
1004c656:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c658:	4344      	muls	r4, r0
1004c65a:	f7f5 fad0 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004c65e:	1820      	adds	r0, r4, r0
1004c660:	6028      	str	r0, [r5, #0]
1004c662:	4630      	mov	r0, r6
1004c664:	e007      	b.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c666:	2000      	movs	r0, #0
1004c668:	2901      	cmp	r1, #1
1004c66a:	d104      	bne.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c66c:	4605      	mov	r5, r0
1004c66e:	4620      	mov	r0, r4
1004c670:	f000 f958 	bl	1004c924 <EADV_stop>
1004c674:	4628      	mov	r0, r5
1004c676:	b00f      	add	sp, #60	@ 0x3c
1004c678:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c67a:	2800      	cmp	r0, #0
1004c67c:	d007      	beq.n	1004c68e <LL_Set_Extented_Advertising_Enable+0xd6>
1004c67e:	208c      	movs	r0, #140	@ 0x8c
1004c680:	5828      	ldr	r0, [r5, r0]
1004c682:	2800      	cmp	r0, #0
1004c684:	d103      	bne.n	1004c68e <LL_Set_Extented_Advertising_Enable+0xd6>
1004c686:	2090      	movs	r0, #144	@ 0x90
1004c688:	5828      	ldr	r0, [r5, r0]
1004c68a:	2800      	cmp	r0, #0
1004c68c:	d006      	beq.n	1004c69c <LL_Set_Extented_Advertising_Enable+0xe4>
1004c68e:	20b8      	movs	r0, #184	@ 0xb8
1004c690:	5a28      	ldrh	r0, [r5, r0]
1004c692:	07c1      	lsls	r1, r0, #31
1004c694:	d004      	beq.n	1004c6a0 <LL_Set_Extented_Advertising_Enable+0xe8>
1004c696:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1004c698:	29f5      	cmp	r1, #245	@ 0xf5
1004c69a:	d901      	bls.n	1004c6a0 <LL_Set_Extented_Advertising_Enable+0xe8>
1004c69c:	2012      	movs	r0, #18
1004c69e:	e7ea      	b.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c6a0:	2312      	movs	r3, #18
1004c6a2:	4601      	mov	r1, r0
1004c6a4:	461a      	mov	r2, r3
1004c6a6:	4019      	ands	r1, r3
1004c6a8:	2902      	cmp	r1, #2
1004c6aa:	d103      	bne.n	1004c6b4 <LL_Set_Extented_Advertising_Enable+0xfc>
1004c6ac:	2142      	movs	r1, #66	@ 0x42
1004c6ae:	5a69      	ldrh	r1, [r5, r1]
1004c6b0:	2900      	cmp	r1, #0
1004c6b2:	d040      	beq.n	1004c736 <LL_Set_Extented_Advertising_Enable+0x17e>
1004c6b4:	0700      	lsls	r0, r0, #28
1004c6b6:	d50f      	bpl.n	1004c6d8 <LL_Set_Extented_Advertising_Enable+0x120>
1004c6b8:	486d      	ldr	r0, [pc, #436]	@ (1004c870 <__arm_cp.24_0>)
1004c6ba:	21be      	movs	r1, #190	@ 0xbe
1004c6bc:	5a69      	ldrh	r1, [r5, r1]
1004c6be:	4281      	cmp	r1, r0
1004c6c0:	d001      	beq.n	1004c6c6 <LL_Set_Extented_Advertising_Enable+0x10e>
1004c6c2:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c6c4:	e000      	b.n	1004c6c8 <LL_Set_Extented_Advertising_Enable+0x110>
1004c6c6:	2080      	movs	r0, #128	@ 0x80
1004c6c8:	2880      	cmp	r0, #128	@ 0x80
1004c6ca:	d901      	bls.n	1004c6d0 <LL_Set_Extented_Advertising_Enable+0x118>
1004c6cc:	4610      	mov	r0, r2
1004c6ce:	e7d2      	b.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c6d0:	900e      	str	r0, [sp, #56]	@ 0x38
1004c6d2:	2800      	cmp	r0, #0
1004c6d4:	4610      	mov	r0, r2
1004c6d6:	d0ce      	beq.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c6d8:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004c6da:	21ba      	movs	r1, #186	@ 0xba
1004c6dc:	5268      	strh	r0, [r5, r1]
1004c6de:	267d      	movs	r6, #125	@ 0x7d
1004c6e0:	0171      	lsls	r1, r6, #5
1004c6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c6e4:	4351      	muls	r1, r2
1004c6e6:	2294      	movs	r2, #148	@ 0x94
1004c6e8:	50a9      	str	r1, [r5, r2]
1004c6ea:	2800      	cmp	r0, #0
1004c6ec:	d001      	beq.n	1004c6f2 <LL_Set_Extented_Advertising_Enable+0x13a>
1004c6ee:	21cf      	movs	r1, #207	@ 0xcf
1004c6f0:	546f      	strb	r7, [r5, r1]
1004c6f2:	21bc      	movs	r1, #188	@ 0xbc
1004c6f4:	5268      	strh	r0, [r5, r1]
1004c6f6:	4620      	mov	r0, r4
1004c6f8:	f000 fd34 	bl	1004d164 <EADV_start_request_radio_tasks_ucfg_weak>
1004c6fc:	2800      	cmp	r0, #0
1004c6fe:	d1ba      	bne.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c700:	4629      	mov	r1, r5
1004c702:	31d6      	adds	r1, #214	@ 0xd6
1004c704:	4628      	mov	r0, r5
1004c706:	3064      	adds	r0, #100	@ 0x64
1004c708:	462a      	mov	r2, r5
1004c70a:	3254      	adds	r2, #84	@ 0x54
1004c70c:	676a      	str	r2, [r5, #116]	@ 0x74
1004c70e:	67a8      	str	r0, [r5, #120]	@ 0x78
1004c710:	462b      	mov	r3, r5
1004c712:	3378      	adds	r3, #120	@ 0x78
1004c714:	7809      	ldrb	r1, [r1, #0]
1004c716:	07c9      	lsls	r1, r1, #31
1004c718:	930d      	str	r3, [sp, #52]	@ 0x34
1004c71a:	d10e      	bne.n	1004c73a <LL_Set_Extented_Advertising_Enable+0x182>
1004c71c:	2100      	movs	r1, #0
1004c71e:	6001      	str	r1, [r0, #0]
1004c720:	66a9      	str	r1, [r5, #104]	@ 0x68
1004c722:	4855      	ldr	r0, [pc, #340]	@ (1004c878 <__arm_cp.24_2>)
1004c724:	6801      	ldr	r1, [r0, #0]
1004c726:	4620      	mov	r0, r4
1004c728:	3065      	adds	r0, #101	@ 0x65
1004c72a:	2206      	movs	r2, #6
1004c72c:	f7f5 f9e4 	bl	10041af8 <BLEPLAT_MemCpy>
1004c730:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c732:	6800      	ldr	r0, [r0, #0]
1004c734:	e008      	b.n	1004c748 <LL_Set_Extented_Advertising_Enable+0x190>
1004c736:	200c      	movs	r0, #12
1004c738:	e79d      	b.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c73a:	218c      	movs	r1, #140	@ 0x8c
1004c73c:	5869      	ldr	r1, [r5, r1]
1004c73e:	462a      	mov	r2, r5
1004c740:	328c      	adds	r2, #140	@ 0x8c
1004c742:	6852      	ldr	r2, [r2, #4]
1004c744:	c006      	stmia	r0!, {r1, r2}
1004c746:	3808      	subs	r0, #8
1004c748:	4629      	mov	r1, r5
1004c74a:	3194      	adds	r1, #148	@ 0x94
1004c74c:	910e      	str	r1, [sp, #56]	@ 0x38
1004c74e:	2184      	movs	r1, #132	@ 0x84
1004c750:	5869      	ldr	r1, [r5, r1]
1004c752:	462a      	mov	r2, r5
1004c754:	3284      	adds	r2, #132	@ 0x84
1004c756:	6852      	ldr	r2, [r2, #4]
1004c758:	6081      	str	r1, [r0, #8]
1004c75a:	60c2      	str	r2, [r0, #12]
1004c75c:	4620      	mov	r0, r4
1004c75e:	f7ff fe11 	bl	1004c384 <llc_eadv_generate_new_rpa_for_one_adv_set>
1004c762:	2800      	cmp	r0, #0
1004c764:	960c      	str	r6, [sp, #48]	@ 0x30
1004c766:	d002      	beq.n	1004c76e <LL_Set_Extented_Advertising_Enable+0x1b6>
1004c768:	f7ff fce2 	bl	1004c130 <llc_priv_start_privacy_timer_ucfg_weak>
1004c76c:	e006      	b.n	1004c77c <LL_Set_Extented_Advertising_Enable+0x1c4>
1004c76e:	4628      	mov	r0, r5
1004c770:	3074      	adds	r0, #116	@ 0x74
1004c772:	6801      	ldr	r1, [r0, #0]
1004c774:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004c776:	681a      	ldr	r2, [r3, #0]
1004c778:	6002      	str	r2, [r0, #0]
1004c77a:	6019      	str	r1, [r3, #0]
1004c77c:	990e      	ldr	r1, [sp, #56]	@ 0x38
1004c77e:	4626      	mov	r6, r4
1004c780:	36ce      	adds	r6, #206	@ 0xce
1004c782:	4628      	mov	r0, r5
1004c784:	30b8      	adds	r0, #184	@ 0xb8
1004c786:	900d      	str	r0, [sp, #52]	@ 0x34
1004c788:	6808      	ldr	r0, [r1, #0]
1004c78a:	2800      	cmp	r0, #0
1004c78c:	d005      	beq.n	1004c79a <LL_Set_Extented_Advertising_Enable+0x1e2>
1004c78e:	f7f5 fa36 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004c792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c794:	6811      	ldr	r1, [r2, #0]
1004c796:	1808      	adds	r0, r1, r0
1004c798:	6010      	str	r0, [r2, #0]
1004c79a:	7037      	strb	r7, [r6, #0]
1004c79c:	20c4      	movs	r0, #196	@ 0xc4
1004c79e:	5c29      	ldrb	r1, [r5, r0]
1004c7a0:	27d0      	movs	r7, #208	@ 0xd0
1004c7a2:	5de8      	ldrb	r0, [r5, r7]
1004c7a4:	2281      	movs	r2, #129	@ 0x81
1004c7a6:	920e      	str	r2, [sp, #56]	@ 0x38
1004c7a8:	9200      	str	r2, [sp, #0]
1004c7aa:	462e      	mov	r6, r5
1004c7ac:	3614      	adds	r6, #20
1004c7ae:	4622      	mov	r2, r4
1004c7b0:	4633      	mov	r3, r6
1004c7b2:	f7ff fd9d 	bl	1004c2f0 <LL_eadv_BLUE_SM>
1004c7b6:	5de8      	ldrb	r0, [r5, r7]
1004c7b8:	2125      	movs	r1, #37	@ 0x25
1004c7ba:	f7f6 f8a1 	bl	10042900 <BLEPLAT_CNTR_SmSetDataLength>
1004c7be:	462f      	mov	r7, r5
1004c7c0:	37d0      	adds	r7, #208	@ 0xd0
1004c7c2:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c7c4:	8800      	ldrh	r0, [r0, #0]
1004c7c6:	06c0      	lsls	r0, r0, #27
1004c7c8:	d403      	bmi.n	1004c7d2 <LL_Set_Extented_Advertising_Enable+0x21a>
1004c7ca:	4620      	mov	r0, r4
1004c7cc:	f000 fcee 	bl	1004d1ac <LL_eadv_start_extended_ucfg_weak>
1004c7d0:	e042      	b.n	1004c858 <LL_Set_Extented_Advertising_Enable+0x2a0>
1004c7d2:	f7f5 fa14 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004c7d6:	219c      	movs	r1, #156	@ 0x9c
1004c7d8:	910b      	str	r1, [sp, #44]	@ 0x2c
1004c7da:	5068      	str	r0, [r5, r1]
1004c7dc:	f000 ff16 	bl	1004d60c <LL_get_tx_common_buffer_p>
1004c7e0:	9009      	str	r0, [sp, #36]	@ 0x24
1004c7e2:	f000 ff1b 	bl	1004d61c <LL_get_rx_common_buffer_p>
1004c7e6:	900a      	str	r0, [sp, #40]	@ 0x28
1004c7e8:	7838      	ldrb	r0, [r7, #0]
1004c7ea:	9008      	str	r0, [sp, #32]
1004c7ec:	2094      	movs	r0, #148	@ 0x94
1004c7ee:	2100      	movs	r1, #0
1004c7f0:	910d      	str	r1, [sp, #52]	@ 0x34
1004c7f2:	460a      	mov	r2, r1
1004c7f4:	f7f5 fe1a 	bl	1004242c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1004c7f8:	4603      	mov	r3, r0
1004c7fa:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c7fc:	9000      	str	r0, [sp, #0]
1004c7fe:	4620      	mov	r0, r4
1004c800:	9908      	ldr	r1, [sp, #32]
1004c802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004c804:	f7ff fcf9 	bl	1004c1fa <LL_eadv_Blue_Tx>
1004c808:	7838      	ldrb	r0, [r7, #0]
1004c80a:	9009      	str	r0, [sp, #36]	@ 0x24
1004c80c:	2096      	movs	r0, #150	@ 0x96
1004c80e:	2101      	movs	r1, #1
1004c810:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004c812:	f7f5 fe0b 	bl	1004242c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1004c816:	4603      	mov	r3, r0
1004c818:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c81a:	9000      	str	r0, [sp, #0]
1004c81c:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c81e:	9001      	str	r0, [sp, #4]
1004c820:	4630      	mov	r0, r6
1004c822:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004c824:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004c826:	f7ff fd23 	bl	1004c270 <LL_eadv_Blue_Rx>
1004c82a:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1004c82c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c82e:	582a      	ldr	r2, [r5, r0]
1004c830:	7838      	ldrb	r0, [r7, #0]
1004c832:	4b12      	ldr	r3, [pc, #72]	@ (1004c87c <__arm_cp.24_3>)
1004c834:	9307      	str	r3, [sp, #28]
1004c836:	4b12      	ldr	r3, [pc, #72]	@ (1004c880 <__arm_cp.24_4>)
1004c838:	9306      	str	r3, [sp, #24]
1004c83a:	4b12      	ldr	r3, [pc, #72]	@ (1004c884 <__arm_cp.24_5>)
1004c83c:	9305      	str	r3, [sp, #20]
1004c83e:	4b12      	ldr	r3, [pc, #72]	@ (1004c888 <__arm_cp.24_6>)
1004c840:	9304      	str	r3, [sp, #16]
1004c842:	2314      	movs	r3, #20
1004c844:	9303      	str	r3, [sp, #12]
1004c846:	231f      	movs	r3, #31
1004c848:	ae00      	add	r6, sp, #0
1004c84a:	c60e      	stmia	r6!, {r1, r2, r3}
1004c84c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004c84e:	00cb      	lsls	r3, r1, #3
1004c850:	4621      	mov	r1, r4
1004c852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c854:	f000 ff30 	bl	1004d6b8 <LL_sched_enable_taskslot>
1004c858:	249c      	movs	r4, #156	@ 0x9c
1004c85a:	5929      	ldr	r1, [r5, r4]
1004c85c:	7838      	ldrb	r0, [r7, #0]
1004c85e:	f000 ff11 	bl	1004d684 <LL_sched_set_anchor>
1004c862:	5928      	ldr	r0, [r5, r4]
1004c864:	7839      	ldrb	r1, [r7, #0]
1004c866:	f001 f97f 	bl	1004db68 <LL_sched_check_and_call_sched>
1004c86a:	2000      	movs	r0, #0
1004c86c:	e703      	b.n	1004c676 <LL_Set_Extented_Advertising_Enable+0xbe>
1004c86e:	46c0      	nop			@ (mov r8, r8)

1004c870 <__arm_cp.24_0>:
1004c870:	0000fffc 	.word	0x0000fffc

1004c874 <__arm_cp.24_1>:
1004c874:	0000ffff 	.word	0x0000ffff

1004c878 <__arm_cp.24_2>:
1004c878:	20000b50 	.word	0x20000b50

1004c87c <__arm_cp.24_3>:
1004c87c:	1004cad1 	.word	0x1004cad1

1004c880 <__arm_cp.24_4>:
1004c880:	1004cec9 	.word	0x1004cec9

1004c884 <__arm_cp.24_5>:
1004c884:	1004cda5 	.word	0x1004cda5

1004c888 <__arm_cp.24_6>:
1004c888:	1004cad9 	.word	0x1004cad9

1004c88c <LL_Set_Extented_Advertising_Set_Random_Address>:
1004c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c88e:	460c      	mov	r4, r1
1004c890:	4606      	mov	r6, r0
1004c892:	f000 fecb 	bl	1004d62c <llc_get_linkms_cntxt_p>
1004c896:	4607      	mov	r7, r0
1004c898:	4630      	mov	r0, r6
1004c89a:	f7ff fd57 	bl	1004c34c <llc_get_advertising_set_index>
1004c89e:	4605      	mov	r5, r0
1004c8a0:	4816      	ldr	r0, [pc, #88]	@ (1004c8fc <__arm_cp.25_0>)
1004c8a2:	4285      	cmp	r5, r0
1004c8a4:	d027      	beq.n	1004c8f6 <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1004c8a6:	0228      	lsls	r0, r5, #8
1004c8a8:	683f      	ldr	r7, [r7, #0]
1004c8aa:	1838      	adds	r0, r7, r0
1004c8ac:	21be      	movs	r1, #190	@ 0xbe
1004c8ae:	5246      	strh	r6, [r0, r1]
1004c8b0:	21b8      	movs	r1, #184	@ 0xb8
1004c8b2:	5c40      	ldrb	r0, [r0, r1]
1004c8b4:	07c0      	lsls	r0, r0, #31
1004c8b6:	d007      	beq.n	1004c8c8 <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1004c8b8:	0228      	lsls	r0, r5, #8
1004c8ba:	1838      	adds	r0, r7, r0
1004c8bc:	21ce      	movs	r1, #206	@ 0xce
1004c8be:	5c40      	ldrb	r0, [r0, r1]
1004c8c0:	2801      	cmp	r0, #1
1004c8c2:	d101      	bne.n	1004c8c8 <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1004c8c4:	250c      	movs	r5, #12
1004c8c6:	e017      	b.n	1004c8f8 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1004c8c8:	480d      	ldr	r0, [pc, #52]	@ (1004c900 <__arm_cp.25_1>)
1004c8ca:	6800      	ldr	r0, [r0, #0]
1004c8cc:	3056      	adds	r0, #86	@ 0x56
1004c8ce:	2606      	movs	r6, #6
1004c8d0:	4621      	mov	r1, r4
1004c8d2:	4632      	mov	r2, r6
1004c8d4:	f7f5 f910 	bl	10041af8 <BLEPLAT_MemCpy>
1004c8d8:	0228      	lsls	r0, r5, #8
1004c8da:	1838      	adds	r0, r7, r0
1004c8dc:	218c      	movs	r1, #140	@ 0x8c
1004c8de:	2201      	movs	r2, #1
1004c8e0:	5042      	str	r2, [r0, r1]
1004c8e2:	4601      	mov	r1, r0
1004c8e4:	318c      	adds	r1, #140	@ 0x8c
1004c8e6:	2500      	movs	r5, #0
1004c8e8:	604d      	str	r5, [r1, #4]
1004c8ea:	308d      	adds	r0, #141	@ 0x8d
1004c8ec:	4621      	mov	r1, r4
1004c8ee:	4632      	mov	r2, r6
1004c8f0:	f7f5 f902 	bl	10041af8 <BLEPLAT_MemCpy>
1004c8f4:	e000      	b.n	1004c8f8 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1004c8f6:	2512      	movs	r5, #18
1004c8f8:	4628      	mov	r0, r5
1004c8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004c8fc <__arm_cp.25_0>:
1004c8fc:	0000ffff 	.word	0x0000ffff

1004c900 <__arm_cp.25_1>:
1004c900:	20000b60 	.word	0x20000b60

1004c904 <LL_eadv_update_did>:
1004c904:	b510      	push	{r4, lr}
1004c906:	4604      	mov	r4, r0
1004c908:	2000      	movs	r0, #0
1004c90a:	f001 fe3c 	bl	1004e586 <Hal_Get_Random_Number>
1004c90e:	4904      	ldr	r1, [pc, #16]	@ (1004c920 <__arm_cp.27_0>)
1004c910:	4001      	ands	r1, r0
1004c912:	8820      	ldrh	r0, [r4, #0]
1004c914:	1a40      	subs	r0, r0, r1
1004c916:	4242      	negs	r2, r0
1004c918:	4142      	adcs	r2, r0
1004c91a:	404a      	eors	r2, r1
1004c91c:	8022      	strh	r2, [r4, #0]
1004c91e:	bd10      	pop	{r4, pc}

1004c920 <__arm_cp.27_0>:
1004c920:	00000fff 	.word	0x00000fff

1004c924 <EADV_stop>:
1004c924:	b5b0      	push	{r4, r5, r7, lr}
1004c926:	4604      	mov	r4, r0
1004c928:	f3ef 8010 	mrs	r0, PRIMASK
1004c92c:	b672      	cpsid	i
1004c92e:	4625      	mov	r5, r4
1004c930:	35ce      	adds	r5, #206	@ 0xce
1004c932:	78a8      	ldrb	r0, [r5, #2]
1004c934:	f000 feae 	bl	1004d694 <LL_sched_set_cancel_request>
1004c938:	20d1      	movs	r0, #209	@ 0xd1
1004c93a:	5c20      	ldrb	r0, [r4, r0]
1004c93c:	f000 feaa 	bl	1004d694 <LL_sched_set_cancel_request>
1004c940:	b662      	cpsie	i
1004c942:	78a8      	ldrb	r0, [r5, #2]
1004c944:	f001 f920 	bl	1004db88 <LL_sched_check_and_wait_sched>
1004c948:	20ce      	movs	r0, #206	@ 0xce
1004c94a:	2100      	movs	r1, #0
1004c94c:	5221      	strh	r1, [r4, r0]
1004c94e:	7aa8      	ldrb	r0, [r5, #10]
1004c950:	28ff      	cmp	r0, #255	@ 0xff
1004c952:	d001      	beq.n	1004c958 <EADV_stop+0x34>
1004c954:	f7ff fbd2 	bl	1004c0fc <llc_conn_release_conn_idx>
1004c958:	20ff      	movs	r0, #255	@ 0xff
1004c95a:	72a8      	strb	r0, [r5, #10]
1004c95c:	7a28      	ldrb	r0, [r5, #8]
1004c95e:	0780      	lsls	r0, r0, #30
1004c960:	d501      	bpl.n	1004c966 <EADV_stop+0x42>
1004c962:	f7ff fbe6 	bl	1004c132 <llc_priv_stop_privacy_timer_ucfg_weak>
1004c966:	bdb0      	pop	{r4, r5, r7, pc}

1004c968 <LL_Set_Advertising_Set_Random_Address>:
1004c968:	b510      	push	{r4, lr}
1004c96a:	4604      	mov	r4, r0
1004c96c:	f7ff f9bd 	bl	1004bcea <scan_csr_ucfg_weak>
1004c970:	2801      	cmp	r0, #1
1004c972:	d105      	bne.n	1004c980 <LL_Set_Advertising_Set_Random_Address+0x18>
1004c974:	f7ff fbe0 	bl	1004c138 <llc_scan_get_cntxt_p>
1004c978:	21eb      	movs	r1, #235	@ 0xeb
1004c97a:	5c40      	ldrb	r0, [r0, r1]
1004c97c:	07c0      	lsls	r0, r0, #31
1004c97e:	d106      	bne.n	1004c98e <LL_Set_Advertising_Set_Random_Address+0x26>
1004c980:	f7ff fdfc 	bl	1004c57c <LL_LE_Set_Advertising_Parameters_Default>
1004c984:	4803      	ldr	r0, [pc, #12]	@ (1004c994 <__arm_cp.29_0>)
1004c986:	4621      	mov	r1, r4
1004c988:	f7ff ff80 	bl	1004c88c <LL_Set_Extented_Advertising_Set_Random_Address>
1004c98c:	bd10      	pop	{r4, pc}
1004c98e:	200c      	movs	r0, #12
1004c990:	bd10      	pop	{r4, pc}
1004c992:	46c0      	nop			@ (mov r8, r8)

1004c994 <__arm_cp.29_0>:
1004c994:	0000fffc 	.word	0x0000fffc

1004c998 <ll_set_advertising_data_ptr>:
1004c998:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004c99a:	9301      	str	r3, [sp, #4]
1004c99c:	4614      	mov	r4, r2
1004c99e:	9102      	str	r1, [sp, #8]
1004c9a0:	4605      	mov	r5, r0
1004c9a2:	f000 fe43 	bl	1004d62c <llc_get_linkms_cntxt_p>
1004c9a6:	4607      	mov	r7, r0
1004c9a8:	4834      	ldr	r0, [pc, #208]	@ (1004ca7c <__arm_cp.33_0>)
1004c9aa:	4285      	cmp	r5, r0
1004c9ac:	d101      	bne.n	1004c9b2 <ll_set_advertising_data_ptr+0x1a>
1004c9ae:	201f      	movs	r0, #31
1004c9b0:	e007      	b.n	1004c9c2 <ll_set_advertising_data_ptr+0x2a>
1004c9b2:	2001      	movs	r0, #1
1004c9b4:	2102      	movs	r1, #2
1004c9b6:	f7ff f975 	bl	1004bca4 <hci_get_set_legacy_ext_flag>
1004c9ba:	4606      	mov	r6, r0
1004c9bc:	2800      	cmp	r0, #0
1004c9be:	d111      	bne.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004c9c0:	482f      	ldr	r0, [pc, #188]	@ (1004ca80 <__arm_cp.33_1>)
1004c9c2:	2612      	movs	r6, #18
1004c9c4:	42a0      	cmp	r0, r4
1004c9c6:	d30d      	bcc.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004c9c8:	9600      	str	r6, [sp, #0]
1004c9ca:	4628      	mov	r0, r5
1004c9cc:	f7ff fcbe 	bl	1004c34c <llc_get_advertising_set_index>
1004c9d0:	0200      	lsls	r0, r0, #8
1004c9d2:	6839      	ldr	r1, [r7, #0]
1004c9d4:	180f      	adds	r7, r1, r0
1004c9d6:	4620      	mov	r0, r4
1004c9d8:	4639      	mov	r1, r7
1004c9da:	f000 fbe5 	bl	1004d1a8 <llc_eadv_max_supported_data_check_ucfg_weak>
1004c9de:	4606      	mov	r6, r0
1004c9e0:	2800      	cmp	r0, #0
1004c9e2:	d001      	beq.n	1004c9e8 <ll_set_advertising_data_ptr+0x50>
1004c9e4:	4630      	mov	r0, r6
1004c9e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004c9e8:	20ce      	movs	r0, #206	@ 0xce
1004c9ea:	5c39      	ldrb	r1, [r7, r0]
1004c9ec:	2038      	movs	r0, #56	@ 0x38
1004c9ee:	5c38      	ldrb	r0, [r7, r0]
1004c9f0:	9a02      	ldr	r2, [sp, #8]
1004c9f2:	2a04      	cmp	r2, #4
1004c9f4:	d111      	bne.n	1004ca1a <ll_set_advertising_data_ptr+0x82>
1004c9f6:	2900      	cmp	r1, #0
1004c9f8:	d03d      	beq.n	1004ca76 <ll_set_advertising_data_ptr+0xde>
1004c9fa:	2800      	cmp	r0, #0
1004c9fc:	9e00      	ldr	r6, [sp, #0]
1004c9fe:	d0f1      	beq.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004ca00:	481e      	ldr	r0, [pc, #120]	@ (1004ca7c <__arm_cp.33_0>)
1004ca02:	4285      	cmp	r5, r0
1004ca04:	d1ee      	bne.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004ca06:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
1004ca08:	2800      	cmp	r0, #0
1004ca0a:	d0eb      	beq.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004ca0c:	20b8      	movs	r0, #184	@ 0xb8
1004ca0e:	5a38      	ldrh	r0, [r7, r0]
1004ca10:	2110      	movs	r1, #16
1004ca12:	4001      	ands	r1, r0
1004ca14:	4321      	orrs	r1, r4
1004ca16:	d1e5      	bne.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004ca18:	e00d      	b.n	1004ca36 <ll_set_advertising_data_ptr+0x9e>
1004ca1a:	463d      	mov	r5, r7
1004ca1c:	3538      	adds	r5, #56	@ 0x38
1004ca1e:	2900      	cmp	r1, #0
1004ca20:	d016      	beq.n	1004ca50 <ll_set_advertising_data_ptr+0xb8>
1004ca22:	2a03      	cmp	r2, #3
1004ca24:	d107      	bne.n	1004ca36 <ll_set_advertising_data_ptr+0x9e>
1004ca26:	2002      	movs	r0, #2
1004ca28:	7028      	strb	r0, [r5, #0]
1004ca2a:	86fc      	strh	r4, [r7, #54]	@ 0x36
1004ca2c:	2000      	movs	r0, #0
1004ca2e:	86b8      	strh	r0, [r7, #52]	@ 0x34
1004ca30:	9801      	ldr	r0, [sp, #4]
1004ca32:	6338      	str	r0, [r7, #48]	@ 0x30
1004ca34:	e003      	b.n	1004ca3e <ll_set_advertising_data_ptr+0xa6>
1004ca36:	4638      	mov	r0, r7
1004ca38:	30b6      	adds	r0, #182	@ 0xb6
1004ca3a:	f7ff ff63 	bl	1004c904 <LL_eadv_update_did>
1004ca3e:	20da      	movs	r0, #218	@ 0xda
1004ca40:	5c38      	ldrb	r0, [r7, r0]
1004ca42:	2600      	movs	r6, #0
1004ca44:	07c0      	lsls	r0, r0, #31
1004ca46:	d0cd      	beq.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004ca48:	4638      	mov	r0, r7
1004ca4a:	f7ff fc9b 	bl	1004c384 <llc_eadv_generate_new_rpa_for_one_adv_set>
1004ca4e:	e7c9      	b.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004ca50:	9702      	str	r7, [sp, #8]
1004ca52:	463e      	mov	r6, r7
1004ca54:	3628      	adds	r6, #40	@ 0x28
1004ca56:	2800      	cmp	r0, #0
1004ca58:	9f01      	ldr	r7, [sp, #4]
1004ca5a:	d004      	beq.n	1004ca66 <ll_set_advertising_data_ptr+0xce>
1004ca5c:	6831      	ldr	r1, [r6, #0]
1004ca5e:	20a1      	movs	r0, #161	@ 0xa1
1004ca60:	463a      	mov	r2, r7
1004ca62:	f001 fe6d 	bl	1004e740 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1004ca66:	6037      	str	r7, [r6, #0]
1004ca68:	2001      	movs	r0, #1
1004ca6a:	7028      	strb	r0, [r5, #0]
1004ca6c:	9802      	ldr	r0, [sp, #8]
1004ca6e:	85c4      	strh	r4, [r0, #46]	@ 0x2e
1004ca70:	2600      	movs	r6, #0
1004ca72:	8586      	strh	r6, [r0, #44]	@ 0x2c
1004ca74:	e7b6      	b.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004ca76:	9e00      	ldr	r6, [sp, #0]
1004ca78:	e7b4      	b.n	1004c9e4 <ll_set_advertising_data_ptr+0x4c>
1004ca7a:	46c0      	nop			@ (mov r8, r8)

1004ca7c <__arm_cp.33_0>:
1004ca7c:	0000fffc 	.word	0x0000fffc

1004ca80 <__arm_cp.33_1>:
1004ca80:	00000672 	.word	0x00000672

1004ca84 <ll_set_legacy_advertising_data_ptr>:
1004ca84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ca86:	460c      	mov	r4, r1
1004ca88:	4605      	mov	r5, r0
1004ca8a:	f000 fdcf 	bl	1004d62c <llc_get_linkms_cntxt_p>
1004ca8e:	4607      	mov	r7, r0
1004ca90:	f7ff fd74 	bl	1004c57c <LL_LE_Set_Advertising_Parameters_Default>
1004ca94:	4e0c      	ldr	r6, [pc, #48]	@ (1004cac8 <__arm_cp.36_0>)
1004ca96:	4630      	mov	r0, r6
1004ca98:	f7ff fc58 	bl	1004c34c <llc_get_advertising_set_index>
1004ca9c:	490b      	ldr	r1, [pc, #44]	@ (1004cacc <__arm_cp.36_1>)
1004ca9e:	4288      	cmp	r0, r1
1004caa0:	d108      	bne.n	1004cab4 <ll_set_legacy_advertising_data_ptr+0x30>
1004caa2:	f7ff fd3b 	bl	1004c51c <LL_Context_ReturnFree>
1004caa6:	28ff      	cmp	r0, #255	@ 0xff
1004caa8:	d00b      	beq.n	1004cac2 <ll_set_legacy_advertising_data_ptr+0x3e>
1004caaa:	0200      	lsls	r0, r0, #8
1004caac:	6839      	ldr	r1, [r7, #0]
1004caae:	1808      	adds	r0, r1, r0
1004cab0:	21be      	movs	r1, #190	@ 0xbe
1004cab2:	5246      	strh	r6, [r0, r1]
1004cab4:	2103      	movs	r1, #3
1004cab6:	4630      	mov	r0, r6
1004cab8:	462a      	mov	r2, r5
1004caba:	4623      	mov	r3, r4
1004cabc:	f7ff ff6c 	bl	1004c998 <ll_set_advertising_data_ptr>
1004cac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004cac2:	2001      	movs	r0, #1
1004cac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004cac6:	46c0      	nop			@ (mov r8, r8)

1004cac8 <__arm_cp.36_0>:
1004cac8:	0000fffc 	.word	0x0000fffc

1004cacc <__arm_cp.36_1>:
1004cacc:	0000ffff 	.word	0x0000ffff

1004cad0 <ADV_cancelslot>:
1004cad0:	21d0      	movs	r1, #208	@ 0xd0
1004cad2:	22ff      	movs	r2, #255	@ 0xff
1004cad4:	5442      	strb	r2, [r0, r1]
1004cad6:	4770      	bx	lr

1004cad8 <ADV_skiproutine>:
1004cad8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004cada:	b08d      	sub	sp, #52	@ 0x34
1004cadc:	4607      	mov	r7, r0
1004cade:	20d0      	movs	r0, #208	@ 0xd0
1004cae0:	5c38      	ldrb	r0, [r7, r0]
1004cae2:	232c      	movs	r3, #44	@ 0x2c
1004cae4:	4358      	muls	r0, r3
1004cae6:	4a5f      	ldr	r2, [pc, #380]	@ (1004cc64 <__arm_cp.40_0>)
1004cae8:	6812      	ldr	r2, [r2, #0]
1004caea:	1810      	adds	r0, r2, r0
1004caec:	7d80      	ldrb	r0, [r0, #22]
1004caee:	463c      	mov	r4, r7
1004caf0:	3494      	adds	r4, #148	@ 0x94
1004caf2:	463a      	mov	r2, r7
1004caf4:	32b4      	adds	r2, #180	@ 0xb4
1004caf6:	9203      	str	r2, [sp, #12]
1004caf8:	463a      	mov	r2, r7
1004cafa:	32d6      	adds	r2, #214	@ 0xd6
1004cafc:	9202      	str	r2, [sp, #8]
1004cafe:	2814      	cmp	r0, #20
1004cb00:	9301      	str	r3, [sp, #4]
1004cb02:	d10a      	bne.n	1004cb1a <ADV_skiproutine+0x42>
1004cb04:	f7f5 f87b 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004cb08:	4605      	mov	r5, r0
1004cb0a:	f000 fd9b 	bl	1004d644 <LL_sched_engine_return_actual_scheduler_margin>
1004cb0e:	9b03      	ldr	r3, [sp, #12]
1004cb10:	1828      	adds	r0, r5, r0
1004cb12:	3032      	adds	r0, #50	@ 0x32
1004cb14:	60a0      	str	r0, [r4, #8]
1004cb16:	2501      	movs	r5, #1
1004cb18:	e01b      	b.n	1004cb52 <ADV_skiproutine+0x7a>
1004cb1a:	68a2      	ldr	r2, [r4, #8]
1004cb1c:	1856      	adds	r6, r2, r1
1004cb1e:	2500      	movs	r5, #0
1004cb20:	4630      	mov	r0, r6
1004cb22:	4611      	mov	r1, r2
1004cb24:	f000 fd8a 	bl	1004d63c <LL_sched_time_t1_ge_t2>
1004cb28:	2800      	cmp	r0, #0
1004cb2a:	d005      	beq.n	1004cb38 <ADV_skiproutine+0x60>
1004cb2c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1004cb2e:	68a1      	ldr	r1, [r4, #8]
1004cb30:	180a      	adds	r2, r1, r0
1004cb32:	60a2      	str	r2, [r4, #8]
1004cb34:	1c6d      	adds	r5, r5, #1
1004cb36:	e7f3      	b.n	1004cb20 <ADV_skiproutine+0x48>
1004cb38:	9b03      	ldr	r3, [sp, #12]
1004cb3a:	8898      	ldrh	r0, [r3, #4]
1004cb3c:	0700      	lsls	r0, r0, #28
1004cb3e:	d408      	bmi.n	1004cb52 <ADV_skiproutine+0x7a>
1004cb40:	2001      	movs	r0, #1
1004cb42:	f001 fd27 	bl	1004e594 <Hal_Get_Random_Number32>
1004cb46:	9b03      	ldr	r3, [sp, #12]
1004cb48:	4947      	ldr	r1, [pc, #284]	@ (1004cc68 <__arm_cp.40_1>)
1004cb4a:	4001      	ands	r1, r0
1004cb4c:	68a0      	ldr	r0, [r4, #8]
1004cb4e:	1840      	adds	r0, r0, r1
1004cb50:	60a0      	str	r0, [r4, #8]
1004cb52:	8898      	ldrh	r0, [r3, #4]
1004cb54:	2103      	movs	r1, #3
1004cb56:	4001      	ands	r1, r0
1004cb58:	1e48      	subs	r0, r1, #1
1004cb5a:	4181      	sbcs	r1, r0
1004cb5c:	0048      	lsls	r0, r1, #1
1004cb5e:	8018      	strh	r0, [r3, #0]
1004cb60:	7b98      	ldrb	r0, [r3, #14]
1004cb62:	2201      	movs	r2, #1
1004cb64:	4601      	mov	r1, r0
1004cb66:	9200      	str	r2, [sp, #0]
1004cb68:	4011      	ands	r1, r2
1004cb6a:	0782      	lsls	r2, r0, #30
1004cb6c:	0fd2      	lsrs	r2, r2, #31
1004cb6e:	1889      	adds	r1, r1, r2
1004cb70:	0740      	lsls	r0, r0, #29
1004cb72:	0fc0      	lsrs	r0, r0, #31
1004cb74:	1808      	adds	r0, r1, r0
1004cb76:	1e40      	subs	r0, r0, #1
1004cb78:	7798      	strb	r0, [r3, #30]
1004cb7a:	4638      	mov	r0, r7
1004cb7c:	f000 f87a 	bl	1004cc74 <UTIL_u8GetNextAdvChannel>
1004cb80:	4601      	mov	r1, r0
1004cb82:	9803      	ldr	r0, [sp, #12]
1004cb84:	7f00      	ldrb	r0, [r0, #28]
1004cb86:	f7f5 fee5 	bl	10042954 <BLEPLAT_CNTR_SmSetRemapChan>
1004cb8a:	9803      	ldr	r0, [sp, #12]
1004cb8c:	7f00      	ldrb	r0, [r0, #28]
1004cb8e:	f7f5 ff2c 	bl	100429ea <BLEPLAT_CNTR_SmSetTxMode>
1004cb92:	2600      	movs	r6, #0
1004cb94:	9802      	ldr	r0, [sp, #8]
1004cb96:	7146      	strb	r6, [r0, #5]
1004cb98:	4638      	mov	r0, r7
1004cb9a:	3028      	adds	r0, #40	@ 0x28
1004cb9c:	f7ff fb1c 	bl	1004c1d8 <LL_eadv_switchbackupdata_data_struc>
1004cba0:	4638      	mov	r0, r7
1004cba2:	303c      	adds	r0, #60	@ 0x3c
1004cba4:	f7ff fb18 	bl	1004c1d8 <LL_eadv_switchbackupdata_data_struc>
1004cba8:	9b03      	ldr	r3, [sp, #12]
1004cbaa:	68a1      	ldr	r1, [r4, #8]
1004cbac:	6820      	ldr	r0, [r4, #0]
1004cbae:	88da      	ldrh	r2, [r3, #6]
1004cbb0:	2a00      	cmp	r2, #0
1004cbb2:	d102      	bne.n	1004cbba <ADV_skiproutine+0xe2>
1004cbb4:	7eda      	ldrb	r2, [r3, #27]
1004cbb6:	2a01      	cmp	r2, #1
1004cbb8:	d003      	beq.n	1004cbc2 <ADV_skiproutine+0xea>
1004cbba:	4288      	cmp	r0, r1
1004cbbc:	da4a      	bge.n	1004cc54 <ADV_skiproutine+0x17c>
1004cbbe:	2800      	cmp	r0, #0
1004cbc0:	d048      	beq.n	1004cc54 <ADV_skiproutine+0x17c>
1004cbc2:	7e98      	ldrb	r0, [r3, #26]
1004cbc4:	2800      	cmp	r0, #0
1004cbc6:	d045      	beq.n	1004cc54 <ADV_skiproutine+0x17c>
1004cbc8:	8898      	ldrh	r0, [r3, #4]
1004cbca:	0700      	lsls	r0, r0, #28
1004cbcc:	d51e      	bpl.n	1004cc0c <ADV_skiproutine+0x134>
1004cbce:	a90b      	add	r1, sp, #44	@ 0x2c
1004cbd0:	808e      	strh	r6, [r1, #4]
1004cbd2:	960b      	str	r6, [sp, #44]	@ 0x2c
1004cbd4:	a804      	add	r0, sp, #16
1004cbd6:	9a00      	ldr	r2, [sp, #0]
1004cbd8:	7642      	strb	r2, [r0, #25]
1004cbda:	223c      	movs	r2, #60	@ 0x3c
1004cbdc:	7682      	strb	r2, [r0, #26]
1004cbde:	22ff      	movs	r2, #255	@ 0xff
1004cbe0:	7582      	strb	r2, [r0, #22]
1004cbe2:	81c6      	strh	r6, [r0, #14]
1004cbe4:	4a21      	ldr	r2, [pc, #132]	@ (1004cc6c <__arm_cp.40_2>)
1004cbe6:	8282      	strh	r2, [r0, #20]
1004cbe8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1004cbea:	7a13      	ldrb	r3, [r2, #8]
1004cbec:	7603      	strb	r3, [r0, #24]
1004cbee:	8186      	strh	r6, [r0, #12]
1004cbf0:	75c6      	strb	r6, [r0, #23]
1004cbf2:	9105      	str	r1, [sp, #20]
1004cbf4:	3209      	adds	r2, #9
1004cbf6:	9204      	str	r2, [sp, #16]
1004cbf8:	9608      	str	r6, [sp, #32]
1004cbfa:	9106      	str	r1, [sp, #24]
1004cbfc:	f7ff f948 	bl	1004be90 <llc_conn_push_connection_complete_event>
1004cc00:	9802      	ldr	r0, [sp, #8]
1004cc02:	7800      	ldrb	r0, [r0, #0]
1004cc04:	0780      	lsls	r0, r0, #30
1004cc06:	d501      	bpl.n	1004cc0c <ADV_skiproutine+0x134>
1004cc08:	f7ff fa93 	bl	1004c132 <llc_priv_stop_privacy_timer_ucfg_weak>
1004cc0c:	2002      	movs	r0, #2
1004cc0e:	f7ff f857 	bl	1004bcc0 <hci_check_legacy_ext_flag>
1004cc12:	2801      	cmp	r0, #1
1004cc14:	d119      	bne.n	1004cc4a <ADV_skiproutine+0x172>
1004cc16:	9b03      	ldr	r3, [sp, #12]
1004cc18:	88da      	ldrh	r2, [r3, #6]
1004cc1a:	2a00      	cmp	r2, #0
1004cc1c:	d001      	beq.n	1004cc22 <ADV_skiproutine+0x14a>
1004cc1e:	203c      	movs	r0, #60	@ 0x3c
1004cc20:	e000      	b.n	1004cc24 <ADV_skiproutine+0x14c>
1004cc22:	2043      	movs	r0, #67	@ 0x43
1004cc24:	9000      	str	r0, [sp, #0]
1004cc26:	4812      	ldr	r0, [pc, #72]	@ (1004cc70 <__arm_cp.40_3>)
1004cc28:	6800      	ldr	r0, [r0, #0]
1004cc2a:	9901      	ldr	r1, [sp, #4]
1004cc2c:	5c40      	ldrb	r0, [r0, r1]
1004cc2e:	0100      	lsls	r0, r0, #4
1004cc30:	43c0      	mvns	r0, r0
1004cc32:	4619      	mov	r1, r3
1004cc34:	23a1      	movs	r3, #161	@ 0xa1
1004cc36:	4303      	orrs	r3, r0
1004cc38:	20b1      	movs	r0, #177	@ 0xb1
1004cc3a:	4018      	ands	r0, r3
1004cc3c:	7a0b      	ldrb	r3, [r1, #8]
1004cc3e:	1a9a      	subs	r2, r3, r2
1004cc40:	b2d3      	uxtb	r3, r2
1004cc42:	7a8a      	ldrb	r2, [r1, #10]
1004cc44:	9900      	ldr	r1, [sp, #0]
1004cc46:	f000 f85d 	bl	1004cd04 <hci_le_advertising_set_terminated_event_push>
1004cc4a:	4638      	mov	r0, r7
1004cc4c:	f000 f894 	bl	1004cd78 <EADV_stop_isr>
1004cc50:	68a1      	ldr	r1, [r4, #8]
1004cc52:	9b03      	ldr	r3, [sp, #12]
1004cc54:	7f18      	ldrb	r0, [r3, #28]
1004cc56:	f000 fd15 	bl	1004d684 <LL_sched_set_anchor>
1004cc5a:	9802      	ldr	r0, [sp, #8]
1004cc5c:	7146      	strb	r6, [r0, #5]
1004cc5e:	4628      	mov	r0, r5
1004cc60:	b00d      	add	sp, #52	@ 0x34
1004cc62:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004cc64 <__arm_cp.40_0>:
1004cc64:	20000b68 	.word	0x20000b68

1004cc68 <__arm_cp.40_1>:
1004cc68:	00000fff 	.word	0x00000fff

1004cc6c <__arm_cp.40_2>:
1004cc6c:	0000ffff 	.word	0x0000ffff

1004cc70 <__arm_cp.40_3>:
1004cc70:	20000b50 	.word	0x20000b50

1004cc74 <UTIL_u8GetNextAdvChannel>:
1004cc74:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004cc76:	4604      	mov	r4, r0
1004cc78:	20c2      	movs	r0, #194	@ 0xc2
1004cc7a:	5c27      	ldrb	r7, [r4, r0]
1004cc7c:	2501      	movs	r5, #1
1004cc7e:	403d      	ands	r5, r7
1004cc80:	07ba      	lsls	r2, r7, #30
1004cc82:	0fd0      	lsrs	r0, r2, #31
1004cc84:	1828      	adds	r0, r5, r0
1004cc86:	0779      	lsls	r1, r7, #29
1004cc88:	0fc9      	lsrs	r1, r1, #31
1004cc8a:	1840      	adds	r0, r0, r1
1004cc8c:	1e40      	subs	r0, r0, #1
1004cc8e:	b2c0      	uxtb	r0, r0
1004cc90:	34c2      	adds	r4, #194	@ 0xc2
1004cc92:	7c26      	ldrb	r6, [r4, #16]
1004cc94:	42b0      	cmp	r0, r6
1004cc96:	d10f      	bne.n	1004ccb8 <UTIL_u8GetNextAdvChannel+0x44>
1004cc98:	9201      	str	r2, [sp, #4]
1004cc9a:	2001      	movs	r0, #1
1004cc9c:	9002      	str	r0, [sp, #8]
1004cc9e:	f001 fc72 	bl	1004e586 <Hal_Get_Random_Number>
1004cca2:	2e01      	cmp	r6, #1
1004cca4:	d00a      	beq.n	1004ccbc <UTIL_u8GetNextAdvChannel+0x48>
1004cca6:	2e02      	cmp	r6, #2
1004cca8:	d10e      	bne.n	1004ccc8 <UTIL_u8GetNextAdvChannel+0x54>
1004ccaa:	b2c0      	uxtb	r0, r0
1004ccac:	2106      	movs	r1, #6
1004ccae:	f7f3 fb45 	bl	1004033c <__aeabi_uidivmod>
1004ccb2:	a012      	add	r0, pc, #72	@ (adr r0, 1004ccfc <UTIL_u8GetNextAdvChannel+0x88>)
1004ccb4:	5c40      	ldrb	r0, [r0, r1]
1004ccb6:	e012      	b.n	1004ccde <UTIL_u8GetNextAdvChannel+0x6a>
1004ccb8:	7c60      	ldrb	r0, [r4, #17]
1004ccba:	e011      	b.n	1004cce0 <UTIL_u8GetNextAdvChannel+0x6c>
1004ccbc:	9902      	ldr	r1, [sp, #8]
1004ccbe:	4008      	ands	r0, r1
1004ccc0:	2d00      	cmp	r5, #0
1004ccc2:	d104      	bne.n	1004ccce <UTIL_u8GetNextAdvChannel+0x5a>
1004ccc4:	a10c      	add	r1, pc, #48	@ (adr r1, 1004ccf8 <UTIL_u8GetNextAdvChannel+0x84>)
1004ccc6:	e008      	b.n	1004ccda <UTIL_u8GetNextAdvChannel+0x66>
1004ccc8:	08b8      	lsrs	r0, r7, #2
1004ccca:	1a38      	subs	r0, r7, r0
1004cccc:	e007      	b.n	1004ccde <UTIL_u8GetNextAdvChannel+0x6a>
1004ccce:	9901      	ldr	r1, [sp, #4]
1004ccd0:	2900      	cmp	r1, #0
1004ccd2:	d401      	bmi.n	1004ccd8 <UTIL_u8GetNextAdvChannel+0x64>
1004ccd4:	a107      	add	r1, pc, #28	@ (adr r1, 1004ccf4 <UTIL_u8GetNextAdvChannel+0x80>)
1004ccd6:	e000      	b.n	1004ccda <UTIL_u8GetNextAdvChannel+0x66>
1004ccd8:	a105      	add	r1, pc, #20	@ (adr r1, 1004ccf0 <UTIL_u8GetNextAdvChannel+0x7c>)
1004ccda:	1808      	adds	r0, r1, r0
1004ccdc:	7800      	ldrb	r0, [r0, #0]
1004ccde:	7460      	strb	r0, [r4, #17]
1004cce0:	0071      	lsls	r1, r6, #1
1004cce2:	b2c2      	uxtb	r2, r0
1004cce4:	40ca      	lsrs	r2, r1
1004cce6:	2003      	movs	r0, #3
1004cce8:	4010      	ands	r0, r2
1004ccea:	3024      	adds	r0, #36	@ 0x24
1004ccec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004ccee:	46c0      	nop			@ (mov r8, r8)
1004ccf0:	00000906 	.word	0x00000906
1004ccf4:	00000d07 	.word	0x00000d07
1004ccf8:	00000e0b 	.word	0x00000e0b
1004ccfc:	2d271e1b 	.word	0x2d271e1b
1004cd00:	00003936 	.word	0x00003936

1004cd04 <hci_le_advertising_set_terminated_event_push>:
1004cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004cd06:	461f      	mov	r7, r3
1004cd08:	4616      	mov	r6, r2
1004cd0a:	460d      	mov	r5, r1
1004cd0c:	4604      	mov	r4, r0
1004cd0e:	06c0      	lsls	r0, r0, #27
1004cd10:	d40b      	bmi.n	1004cd2a <hci_le_advertising_set_terminated_event_push+0x26>
1004cd12:	4817      	ldr	r0, [pc, #92]	@ (1004cd70 <__arm_cp.42_0>)
1004cd14:	6800      	ldr	r0, [r0, #0]
1004cd16:	213d      	movs	r1, #61	@ 0x3d
1004cd18:	5c41      	ldrb	r1, [r0, r1]
1004cd1a:	0689      	lsls	r1, r1, #26
1004cd1c:	d527      	bpl.n	1004cd6e <hci_le_advertising_set_terminated_event_push+0x6a>
1004cd1e:	303d      	adds	r0, #61	@ 0x3d
1004cd20:	7ac0      	ldrb	r0, [r0, #11]
1004cd22:	0780      	lsls	r0, r0, #30
1004cd24:	d523      	bpl.n	1004cd6e <hci_le_advertising_set_terminated_event_push+0x6a>
1004cd26:	221f      	movs	r2, #31
1004cd28:	e002      	b.n	1004cd30 <hci_le_advertising_set_terminated_event_push+0x2c>
1004cd2a:	20bf      	movs	r0, #191	@ 0xbf
1004cd2c:	4004      	ands	r4, r0
1004cd2e:	2211      	movs	r2, #17
1004cd30:	4810      	ldr	r0, [pc, #64]	@ (1004cd74 <__arm_cp.42_1>)
1004cd32:	6800      	ldr	r0, [r0, #0]
1004cd34:	0761      	lsls	r1, r4, #29
1004cd36:	0ec9      	lsrs	r1, r1, #27
1004cd38:	1840      	adds	r0, r0, r1
1004cd3a:	6900      	ldr	r0, [r0, #16]
1004cd3c:	2303      	movs	r3, #3
1004cd3e:	4621      	mov	r1, r4
1004cd40:	f7fe f8e4 	bl	1004af0c <aci_event_fifo_push_header>
1004cd44:	2800      	cmp	r0, #0
1004cd46:	d012      	beq.n	1004cd6e <hci_le_advertising_set_terminated_event_push+0x6a>
1004cd48:	4601      	mov	r1, r0
1004cd4a:	200f      	movs	r0, #15
1004cd4c:	72c8      	strb	r0, [r1, #11]
1004cd4e:	20ff      	movs	r0, #255	@ 0xff
1004cd50:	7288      	strb	r0, [r1, #10]
1004cd52:	730f      	strb	r7, [r1, #12]
1004cd54:	724e      	strb	r6, [r1, #9]
1004cd56:	720d      	strb	r5, [r1, #8]
1004cd58:	2012      	movs	r0, #18
1004cd5a:	71c8      	strb	r0, [r1, #7]
1004cd5c:	2006      	movs	r0, #6
1004cd5e:	7188      	strb	r0, [r1, #6]
1004cd60:	203e      	movs	r0, #62	@ 0x3e
1004cd62:	7148      	strb	r0, [r1, #5]
1004cd64:	2004      	movs	r0, #4
1004cd66:	7108      	strb	r0, [r1, #4]
1004cd68:	4620      	mov	r0, r4
1004cd6a:	f7fe f96c 	bl	1004b046 <aci_event_fifo_push>
1004cd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004cd70 <__arm_cp.42_0>:
1004cd70:	20000b60 	.word	0x20000b60

1004cd74 <__arm_cp.42_1>:
1004cd74:	20000b54 	.word	0x20000b54

1004cd78 <EADV_stop_isr>:
1004cd78:	b5b0      	push	{r4, r5, r7, lr}
1004cd7a:	4604      	mov	r4, r0
1004cd7c:	20d1      	movs	r0, #209	@ 0xd1
1004cd7e:	5c20      	ldrb	r0, [r4, r0]
1004cd80:	f000 fc88 	bl	1004d694 <LL_sched_set_cancel_request>
1004cd84:	4625      	mov	r5, r4
1004cd86:	35ce      	adds	r5, #206	@ 0xce
1004cd88:	78a8      	ldrb	r0, [r5, #2]
1004cd8a:	f000 fc83 	bl	1004d694 <LL_sched_set_cancel_request>
1004cd8e:	20ce      	movs	r0, #206	@ 0xce
1004cd90:	2100      	movs	r1, #0
1004cd92:	5221      	strh	r1, [r4, r0]
1004cd94:	7aa8      	ldrb	r0, [r5, #10]
1004cd96:	28ff      	cmp	r0, #255	@ 0xff
1004cd98:	d001      	beq.n	1004cd9e <EADV_stop_isr+0x26>
1004cd9a:	f7ff f9af 	bl	1004c0fc <llc_conn_release_conn_idx>
1004cd9e:	20ff      	movs	r0, #255	@ 0xff
1004cda0:	72a8      	strb	r0, [r5, #10]
1004cda2:	bdb0      	pop	{r4, r5, r7, pc}

1004cda4 <ADV_createslot>:
1004cda4:	b570      	push	{r4, r5, r6, lr}
1004cda6:	4604      	mov	r4, r0
1004cda8:	20c5      	movs	r0, #197	@ 0xc5
1004cdaa:	5c20      	ldrb	r0, [r4, r0]
1004cdac:	f7ff f9d0 	bl	1004c150 <llc_convert_hci_phy_enum_to_hw_phy>
1004cdb0:	4605      	mov	r5, r0
1004cdb2:	4626      	mov	r6, r4
1004cdb4:	36c5      	adds	r6, #197	@ 0xc5
1004cdb6:	7af0      	ldrb	r0, [r6, #11]
1004cdb8:	4629      	mov	r1, r5
1004cdba:	f7f5 fe37 	bl	10042a2c <BLEPLAT_CNTR_SmSetTxPhy>
1004cdbe:	7af0      	ldrb	r0, [r6, #11]
1004cdc0:	4629      	mov	r1, r5
1004cdc2:	f7f5 fdfd 	bl	100429c0 <BLEPLAT_CNTR_SmSetRxPhy>
1004cdc6:	f7f5 fba8 	bl	1004251a <BLEPLAT_CNTR_GlobEnableBlue>
1004cdca:	f000 fc1f 	bl	1004d60c <LL_get_tx_common_buffer_p>
1004cdce:	4602      	mov	r2, r0
1004cdd0:	7db0      	ldrb	r0, [r6, #22]
1004cdd2:	4621      	mov	r1, r4
1004cdd4:	f000 f801 	bl	1004cdda <EADV_vPrepareAdvOrRspLegacyPacket>
1004cdd8:	bd70      	pop	{r4, r5, r6, pc}

1004cdda <EADV_vPrepareAdvOrRspLegacyPacket>:
1004cdda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004cddc:	4614      	mov	r4, r2
1004cdde:	460d      	mov	r5, r1
1004cde0:	4606      	mov	r6, r0
1004cde2:	460f      	mov	r7, r1
1004cde4:	37b8      	adds	r7, #184	@ 0xb8
1004cde6:	2004      	movs	r0, #4
1004cde8:	2e00      	cmp	r6, #0
1004cdea:	4601      	mov	r1, r0
1004cdec:	d10d      	bne.n	1004ce0a <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004cdee:	8839      	ldrh	r1, [r7, #0]
1004cdf0:	074a      	lsls	r2, r1, #29
1004cdf2:	d407      	bmi.n	1004ce04 <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1004cdf4:	2203      	movs	r2, #3
1004cdf6:	4011      	ands	r1, r2
1004cdf8:	424a      	negs	r2, r1
1004cdfa:	414a      	adcs	r2, r1
1004cdfc:	2902      	cmp	r1, #2
1004cdfe:	d003      	beq.n	1004ce08 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1004ce00:	0051      	lsls	r1, r2, #1
1004ce02:	e002      	b.n	1004ce0a <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004ce04:	2101      	movs	r1, #1
1004ce06:	e000      	b.n	1004ce0a <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004ce08:	2106      	movs	r1, #6
1004ce0a:	7021      	strb	r1, [r4, #0]
1004ce0c:	2e00      	cmp	r6, #0
1004ce0e:	d107      	bne.n	1004ce20 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1004ce10:	8839      	ldrh	r1, [r7, #0]
1004ce12:	4001      	ands	r1, r0
1004ce14:	d104      	bne.n	1004ce20 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1004ce16:	202e      	movs	r0, #46	@ 0x2e
1004ce18:	5c28      	ldrb	r0, [r5, r0]
1004ce1a:	1d80      	adds	r0, r0, #6
1004ce1c:	7060      	strb	r0, [r4, #1]
1004ce1e:	e00f      	b.n	1004ce40 <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1004ce20:	2e00      	cmp	r6, #0
1004ce22:	d004      	beq.n	1004ce2e <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1004ce24:	4628      	mov	r0, r5
1004ce26:	3042      	adds	r0, #66	@ 0x42
1004ce28:	7800      	ldrb	r0, [r0, #0]
1004ce2a:	1d80      	adds	r0, r0, #6
1004ce2c:	e000      	b.n	1004ce30 <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1004ce2e:	200c      	movs	r0, #12
1004ce30:	7060      	strb	r0, [r4, #1]
1004ce32:	4620      	mov	r0, r4
1004ce34:	3008      	adds	r0, #8
1004ce36:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004ce38:	3109      	adds	r1, #9
1004ce3a:	2206      	movs	r2, #6
1004ce3c:	f7f4 fe5c 	bl	10041af8 <BLEPLAT_MemCpy>
1004ce40:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004ce42:	1ca0      	adds	r0, r4, #2
1004ce44:	1c49      	adds	r1, r1, #1
1004ce46:	2206      	movs	r2, #6
1004ce48:	f7f4 fe56 	bl	10041af8 <BLEPLAT_MemCpy>
1004ce4c:	7820      	ldrb	r0, [r4, #0]
1004ce4e:	212f      	movs	r1, #47	@ 0x2f
1004ce50:	4001      	ands	r1, r0
1004ce52:	7021      	strb	r1, [r4, #0]
1004ce54:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1004ce56:	7800      	ldrb	r0, [r0, #0]
1004ce58:	07c0      	lsls	r0, r0, #31
1004ce5a:	0e40      	lsrs	r0, r0, #25
1004ce5c:	1840      	adds	r0, r0, r1
1004ce5e:	7020      	strb	r0, [r4, #0]
1004ce60:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004ce62:	7a09      	ldrb	r1, [r1, #8]
1004ce64:	01c9      	lsls	r1, r1, #7
1004ce66:	1808      	adds	r0, r1, r0
1004ce68:	7020      	strb	r0, [r4, #0]
1004ce6a:	f000 f997 	bl	1004d19c <llc_get_channel_sel_algo2_enabled>
1004ce6e:	7821      	ldrb	r1, [r4, #0]
1004ce70:	0140      	lsls	r0, r0, #5
1004ce72:	4308      	orrs	r0, r1
1004ce74:	7020      	strb	r0, [r4, #0]
1004ce76:	4271      	negs	r1, r6
1004ce78:	4171      	adcs	r1, r6
1004ce7a:	8838      	ldrh	r0, [r7, #0]
1004ce7c:	2204      	movs	r2, #4
1004ce7e:	4002      	ands	r2, r0
1004ce80:	0890      	lsrs	r0, r2, #2
1004ce82:	4008      	ands	r0, r1
1004ce84:	d101      	bne.n	1004ce8a <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1004ce86:	2708      	movs	r7, #8
1004ce88:	e000      	b.n	1004ce8c <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1004ce8a:	270e      	movs	r7, #14
1004ce8c:	2800      	cmp	r0, #0
1004ce8e:	d001      	beq.n	1004ce94 <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1004ce90:	200c      	movs	r0, #12
1004ce92:	e011      	b.n	1004ceb8 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1004ce94:	2e00      	cmp	r6, #0
1004ce96:	d001      	beq.n	1004ce9c <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1004ce98:	203c      	movs	r0, #60	@ 0x3c
1004ce9a:	e000      	b.n	1004ce9e <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1004ce9c:	2028      	movs	r0, #40	@ 0x28
1004ce9e:	5829      	ldr	r1, [r5, r0]
1004cea0:	2e00      	cmp	r6, #0
1004cea2:	d001      	beq.n	1004cea8 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1004cea4:	2042      	movs	r0, #66	@ 0x42
1004cea6:	e000      	b.n	1004ceaa <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1004cea8:	202e      	movs	r0, #46	@ 0x2e
1004ceaa:	5a2d      	ldrh	r5, [r5, r0]
1004ceac:	19e0      	adds	r0, r4, r7
1004ceae:	462a      	mov	r2, r5
1004ceb0:	f7f4 fe22 	bl	10041af8 <BLEPLAT_MemCpy>
1004ceb4:	1978      	adds	r0, r7, r5
1004ceb6:	1e80      	subs	r0, r0, #2
1004ceb8:	7060      	strb	r0, [r4, #1]
1004ceba:	2000      	movs	r0, #0
1004cebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004cebe <ADV_ISR_connect_request_received_ucfg_weak>:
1004cebe:	21b4      	movs	r1, #180	@ 0xb4
1004cec0:	2200      	movs	r2, #0
1004cec2:	5242      	strh	r2, [r0, r1]
1004cec4:	4770      	bx	lr
	...

1004cec8 <ADV_ISR>:
1004cec8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ceca:	b08d      	sub	sp, #52	@ 0x34
1004cecc:	4605      	mov	r5, r0
1004cece:	f000 fba5 	bl	1004d61c <LL_get_rx_common_buffer_p>
1004ced2:	9005      	str	r0, [sp, #20]
1004ced4:	4c85      	ldr	r4, [pc, #532]	@ (1004d0ec <__arm_cp.48_0>)
1004ced6:	6820      	ldr	r0, [r4, #0]
1004ced8:	f7f5 fb95 	bl	10042606 <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1004cedc:	4606      	mov	r6, r0
1004cede:	6820      	ldr	r0, [r4, #0]
1004cee0:	f7f5 fb9c 	bl	1004261c <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1004cee4:	4607      	mov	r7, r0
1004cee6:	20d0      	movs	r0, #208	@ 0xd0
1004cee8:	5c28      	ldrb	r0, [r5, r0]
1004ceea:	212c      	movs	r1, #44	@ 0x2c
1004ceec:	4341      	muls	r1, r0
1004ceee:	4a80      	ldr	r2, [pc, #512]	@ (1004d0f0 <__arm_cp.48_1>)
1004cef0:	6812      	ldr	r2, [r2, #0]
1004cef2:	1851      	adds	r1, r2, r1
1004cef4:	7d89      	ldrb	r1, [r1, #22]
1004cef6:	2914      	cmp	r1, #20
1004cef8:	d103      	bne.n	1004cf02 <ADV_ISR+0x3a>
1004cefa:	210a      	movs	r1, #10
1004cefc:	2203      	movs	r2, #3
1004cefe:	f000 fdf7 	bl	1004daf0 <LL_sched_set_priority>
1004cf02:	462c      	mov	r4, r5
1004cf04:	34b4      	adds	r4, #180	@ 0xb4
1004cf06:	4628      	mov	r0, r5
1004cf08:	30db      	adds	r0, #219	@ 0xdb
1004cf0a:	9004      	str	r0, [sp, #16]
1004cf0c:	2e00      	cmp	r6, #0
1004cf0e:	d038      	beq.n	1004cf82 <ADV_ISR+0xba>
1004cf10:	9506      	str	r5, [sp, #24]
1004cf12:	2700      	movs	r7, #0
1004cf14:	970c      	str	r7, [sp, #48]	@ 0x30
1004cf16:	970b      	str	r7, [sp, #44]	@ 0x2c
1004cf18:	9d05      	ldr	r5, [sp, #20]
1004cf1a:	7828      	ldrb	r0, [r5, #0]
1004cf1c:	09c0      	lsrs	r0, r0, #7
1004cf1e:	a90b      	add	r1, sp, #44	@ 0x2c
1004cf20:	7008      	strb	r0, [r1, #0]
1004cf22:	4874      	ldr	r0, [pc, #464]	@ (1004d0f4 <__arm_cp.48_2>)
1004cf24:	6800      	ldr	r0, [r0, #0]
1004cf26:	22d8      	movs	r2, #216	@ 0xd8
1004cf28:	5c80      	ldrb	r0, [r0, r2]
1004cf2a:	9003      	str	r0, [sp, #12]
1004cf2c:	1c48      	adds	r0, r1, #1
1004cf2e:	4629      	mov	r1, r5
1004cf30:	3108      	adds	r1, #8
1004cf32:	2606      	movs	r6, #6
1004cf34:	4632      	mov	r2, r6
1004cf36:	f7f4 fddf 	bl	10041af8 <BLEPLAT_MemCpy>
1004cf3a:	970a      	str	r7, [sp, #40]	@ 0x28
1004cf3c:	9709      	str	r7, [sp, #36]	@ 0x24
1004cf3e:	7828      	ldrb	r0, [r5, #0]
1004cf40:	0640      	lsls	r0, r0, #25
1004cf42:	0fc0      	lsrs	r0, r0, #31
1004cf44:	a909      	add	r1, sp, #36	@ 0x24
1004cf46:	7008      	strb	r0, [r1, #0]
1004cf48:	1c48      	adds	r0, r1, #1
1004cf4a:	1ca9      	adds	r1, r5, #2
1004cf4c:	4632      	mov	r2, r6
1004cf4e:	f7f4 fdd3 	bl	10041af8 <BLEPLAT_MemCpy>
1004cf52:	7828      	ldrb	r0, [r5, #0]
1004cf54:	260f      	movs	r6, #15
1004cf56:	4006      	ands	r6, r0
1004cf58:	2e05      	cmp	r6, #5
1004cf5a:	d101      	bne.n	1004cf60 <ADV_ISR+0x98>
1004cf5c:	f7f4 fe90 	bl	10041c80 <BLEPLAT_ClearRadioTimerValue>
1004cf60:	7be3      	ldrb	r3, [r4, #15]
1004cf62:	7922      	ldrb	r2, [r4, #4]
1004cf64:	9702      	str	r7, [sp, #8]
1004cf66:	ad07      	add	r5, sp, #28
1004cf68:	9501      	str	r5, [sp, #4]
1004cf6a:	9806      	ldr	r0, [sp, #24]
1004cf6c:	3084      	adds	r0, #132	@ 0x84
1004cf6e:	9000      	str	r0, [sp, #0]
1004cf70:	a809      	add	r0, sp, #36	@ 0x24
1004cf72:	4631      	mov	r1, r6
1004cf74:	f001 fc84 	bl	1004e880 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1004cf78:	0841      	lsrs	r1, r0, #1
1004cf7a:	297e      	cmp	r1, #126	@ 0x7e
1004cf7c:	d807      	bhi.n	1004cf8e <ADV_ISR+0xc6>
1004cf7e:	4601      	mov	r1, r0
1004cf80:	e006      	b.n	1004cf90 <ADV_ISR+0xc8>
1004cf82:	2601      	movs	r6, #1
1004cf84:	2f00      	cmp	r7, #0
1004cf86:	d14f      	bne.n	1004d028 <ADV_ISR+0x160>
1004cf88:	2700      	movs	r7, #0
1004cf8a:	8027      	strh	r7, [r4, #0]
1004cf8c:	e051      	b.n	1004d032 <ADV_ISR+0x16a>
1004cf8e:	2101      	movs	r1, #1
1004cf90:	7029      	strb	r1, [r5, #0]
1004cf92:	9d06      	ldr	r5, [sp, #24]
1004cf94:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004cf96:	680a      	ldr	r2, [r1, #0]
1004cf98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004cf9a:	429a      	cmp	r2, r3
1004cf9c:	d12d      	bne.n	1004cffa <ADV_ISR+0x132>
1004cf9e:	6849      	ldr	r1, [r1, #4]
1004cfa0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004cfa2:	4291      	cmp	r1, r2
1004cfa4:	d129      	bne.n	1004cffa <ADV_ISR+0x132>
1004cfa6:	4607      	mov	r7, r0
1004cfa8:	3fff      	subs	r7, #255	@ 0xff
1004cfaa:	1e79      	subs	r1, r7, #1
1004cfac:	418f      	sbcs	r7, r1
1004cfae:	2e03      	cmp	r6, #3
1004cfb0:	d123      	bne.n	1004cffa <ADV_ISR+0x132>
1004cfb2:	28ff      	cmp	r0, #255	@ 0xff
1004cfb4:	d021      	beq.n	1004cffa <ADV_ISR+0x132>
1004cfb6:	88a0      	ldrh	r0, [r4, #4]
1004cfb8:	2701      	movs	r7, #1
1004cfba:	0780      	lsls	r0, r0, #30
1004cfbc:	d51d      	bpl.n	1004cffa <ADV_ISR+0x132>
1004cfbe:	9803      	ldr	r0, [sp, #12]
1004cfc0:	2801      	cmp	r0, #1
1004cfc2:	d11a      	bne.n	1004cffa <ADV_ISR+0x132>
1004cfc4:	4628      	mov	r0, r5
1004cfc6:	f7f5 fb40 	bl	1004264a <BLEPLAT_CNTR_PacketClrPllTrig>
1004cfca:	7e60      	ldrb	r0, [r4, #25]
1004cfcc:	2801      	cmp	r0, #1
1004cfce:	d109      	bne.n	1004cfe4 <ADV_ISR+0x11c>
1004cfd0:	8960      	ldrh	r0, [r4, #10]
1004cfd2:	4949      	ldr	r1, [pc, #292]	@ (1004d0f8 <__arm_cp.48_3>)
1004cfd4:	4288      	cmp	r0, r1
1004cfd6:	d005      	beq.n	1004cfe4 <ADV_ISR+0x11c>
1004cfd8:	aa07      	add	r2, sp, #28
1004cfda:	7811      	ldrb	r1, [r2, #0]
1004cfdc:	b2c0      	uxtb	r0, r0
1004cfde:	1c52      	adds	r2, r2, #1
1004cfe0:	f000 f88e 	bl	1004d100 <hci_le_scan_request_received_event_push>
1004cfe4:	7f20      	ldrb	r0, [r4, #28]
1004cfe6:	f7f5 fd00 	bl	100429ea <BLEPLAT_CNTR_SmSetTxMode>
1004cfea:	2001      	movs	r0, #1
1004cfec:	9904      	ldr	r1, [sp, #16]
1004cfee:	7008      	strb	r0, [r1, #0]
1004cff0:	4628      	mov	r0, r5
1004cff2:	f7ff fed7 	bl	1004cda4 <ADV_createslot>
1004cff6:	2600      	movs	r6, #0
1004cff8:	e01b      	b.n	1004d032 <ADV_ISR+0x16a>
1004cffa:	88a0      	ldrh	r0, [r4, #4]
1004cffc:	07c0      	lsls	r0, r0, #31
1004cffe:	d015      	beq.n	1004d02c <ADV_ISR+0x164>
1004d000:	2e05      	cmp	r6, #5
1004d002:	d113      	bne.n	1004d02c <ADV_ISR+0x164>
1004d004:	9908      	ldr	r1, [sp, #32]
1004d006:	9807      	ldr	r0, [sp, #28]
1004d008:	f7fe ff20 	bl	1004be4c <llc_conn_list_search_address>
1004d00c:	4241      	negs	r1, r0
1004d00e:	4141      	adcs	r1, r0
1004d010:	4039      	ands	r1, r7
1004d012:	2901      	cmp	r1, #1
1004d014:	d10a      	bne.n	1004d02c <ADV_ISR+0x164>
1004d016:	9803      	ldr	r0, [sp, #12]
1004d018:	2801      	cmp	r0, #1
1004d01a:	d107      	bne.n	1004d02c <ADV_ISR+0x164>
1004d01c:	aa07      	add	r2, sp, #28
1004d01e:	4628      	mov	r0, r5
1004d020:	9905      	ldr	r1, [sp, #20]
1004d022:	f7ff ff4c 	bl	1004cebe <ADV_ISR_connect_request_received_ucfg_weak>
1004d026:	2601      	movs	r6, #1
1004d028:	2700      	movs	r7, #0
1004d02a:	e002      	b.n	1004d032 <ADV_ISR+0x16a>
1004d02c:	2700      	movs	r7, #0
1004d02e:	8027      	strh	r7, [r4, #0]
1004d030:	2601      	movs	r6, #1
1004d032:	8821      	ldrh	r1, [r4, #0]
1004d034:	7fa0      	ldrb	r0, [r4, #30]
1004d036:	2800      	cmp	r0, #0
1004d038:	d022      	beq.n	1004d080 <ADV_ISR+0x1b8>
1004d03a:	2900      	cmp	r1, #0
1004d03c:	d122      	bne.n	1004d084 <ADV_ISR+0x1bc>
1004d03e:	1e40      	subs	r0, r0, #1
1004d040:	77a0      	strb	r0, [r4, #30]
1004d042:	88a0      	ldrh	r0, [r4, #4]
1004d044:	2103      	movs	r1, #3
1004d046:	4001      	ands	r1, r0
1004d048:	1e48      	subs	r0, r1, #1
1004d04a:	4181      	sbcs	r1, r0
1004d04c:	0048      	lsls	r0, r1, #1
1004d04e:	8020      	strh	r0, [r4, #0]
1004d050:	4628      	mov	r0, r5
1004d052:	f7ff fe0f 	bl	1004cc74 <UTIL_u8GetNextAdvChannel>
1004d056:	4601      	mov	r1, r0
1004d058:	7f20      	ldrb	r0, [r4, #28]
1004d05a:	f7f5 fc7b 	bl	10042954 <BLEPLAT_CNTR_SmSetRemapChan>
1004d05e:	7f20      	ldrb	r0, [r4, #28]
1004d060:	f7f5 fcc3 	bl	100429ea <BLEPLAT_CNTR_SmSetTxMode>
1004d064:	4628      	mov	r0, r5
1004d066:	f7f5 fb80 	bl	1004276a <BLEPLAT_CNTR_PacketSetPllTrig>
1004d06a:	f7f4 fe09 	bl	10041c80 <BLEPLAT_ClearRadioTimerValue>
1004d06e:	2000      	movs	r0, #0
1004d070:	9904      	ldr	r1, [sp, #16]
1004d072:	7008      	strb	r0, [r1, #0]
1004d074:	4628      	mov	r0, r5
1004d076:	f7ff fe95 	bl	1004cda4 <ADV_createslot>
1004d07a:	f7f4 fe19 	bl	10041cb0 <BLEPLAT_SetRadioCloseTimeout>
1004d07e:	e02a      	b.n	1004d0d6 <ADV_ISR+0x20e>
1004d080:	2900      	cmp	r1, #0
1004d082:	d019      	beq.n	1004d0b8 <ADV_ISR+0x1f0>
1004d084:	4819      	ldr	r0, [pc, #100]	@ (1004d0ec <__arm_cp.48_0>)
1004d086:	6800      	ldr	r0, [r0, #0]
1004d088:	f7f5 fac8 	bl	1004261c <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1004d08c:	2800      	cmp	r0, #0
1004d08e:	d022      	beq.n	1004d0d6 <ADV_ISR+0x20e>
1004d090:	4628      	mov	r0, r5
1004d092:	f7f5 fb6a 	bl	1004276a <BLEPLAT_CNTR_PacketSetPllTrig>
1004d096:	7c60      	ldrb	r0, [r4, #17]
1004d098:	2801      	cmp	r0, #1
1004d09a:	d001      	beq.n	1004d0a0 <ADV_ISR+0x1d8>
1004d09c:	4917      	ldr	r1, [pc, #92]	@ (1004d0fc <__arm_cp.48_4>)
1004d09e:	e000      	b.n	1004d0a2 <ADV_ISR+0x1da>
1004d0a0:	2146      	movs	r1, #70	@ 0x46
1004d0a2:	3514      	adds	r5, #20
1004d0a4:	4628      	mov	r0, r5
1004d0a6:	f7f5 fbc1 	bl	1004282c <BLEPLAT_CNTR_SetRcvLen>
1004d0aa:	8820      	ldrh	r0, [r4, #0]
1004d0ac:	1e40      	subs	r0, r0, #1
1004d0ae:	8020      	strh	r0, [r4, #0]
1004d0b0:	f7f5 fa33 	bl	1004251a <BLEPLAT_CNTR_GlobEnableBlue>
1004d0b4:	2600      	movs	r6, #0
1004d0b6:	e00e      	b.n	1004d0d6 <ADV_ISR+0x20e>
1004d0b8:	f7f4 fde2 	bl	10041c80 <BLEPLAT_ClearRadioTimerValue>
1004d0bc:	4628      	mov	r0, r5
1004d0be:	f7f5 fb54 	bl	1004276a <BLEPLAT_CNTR_PacketSetPllTrig>
1004d0c2:	88e0      	ldrh	r0, [r4, #6]
1004d0c4:	1e40      	subs	r0, r0, #1
1004d0c6:	80e0      	strh	r0, [r4, #6]
1004d0c8:	2100      	movs	r1, #0
1004d0ca:	4628      	mov	r0, r5
1004d0cc:	f7ff fd04 	bl	1004cad8 <ADV_skiproutine>
1004d0d0:	7f20      	ldrb	r0, [r4, #28]
1004d0d2:	f000 fb47 	bl	1004d764 <LL_sched_engine>
1004d0d6:	2f00      	cmp	r7, #0
1004d0d8:	d002      	beq.n	1004d0e0 <ADV_ISR+0x218>
1004d0da:	8820      	ldrh	r0, [r4, #0]
1004d0dc:	1e40      	subs	r0, r0, #1
1004d0de:	8020      	strh	r0, [r4, #0]
1004d0e0:	f7fd ff10 	bl	1004af04 <log_notify_us_flush_ucfg_weak>
1004d0e4:	4630      	mov	r0, r6
1004d0e6:	b00d      	add	sp, #52	@ 0x34
1004d0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d0ea:	46c0      	nop			@ (mov r8, r8)

1004d0ec <__arm_cp.48_0>:
1004d0ec:	20000b5c 	.word	0x20000b5c

1004d0f0 <__arm_cp.48_1>:
1004d0f0:	20000b68 	.word	0x20000b68

1004d0f4 <__arm_cp.48_2>:
1004d0f4:	20000b60 	.word	0x20000b60

1004d0f8 <__arm_cp.48_3>:
1004d0f8:	0000fffc 	.word	0x0000fffc

1004d0fc <__arm_cp.48_4>:
1004d0fc:	000002ee 	.word	0x000002ee

1004d100 <hci_le_scan_request_received_event_push>:
1004d100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d102:	460e      	mov	r6, r1
1004d104:	4605      	mov	r5, r0
1004d106:	4815      	ldr	r0, [pc, #84]	@ (1004d15c <__arm_cp.49_0>)
1004d108:	6800      	ldr	r0, [r0, #0]
1004d10a:	213d      	movs	r1, #61	@ 0x3d
1004d10c:	5c41      	ldrb	r1, [r0, r1]
1004d10e:	0689      	lsls	r1, r1, #26
1004d110:	d522      	bpl.n	1004d158 <hci_le_scan_request_received_event_push+0x58>
1004d112:	303d      	adds	r0, #61	@ 0x3d
1004d114:	7ac0      	ldrb	r0, [r0, #11]
1004d116:	0740      	lsls	r0, r0, #29
1004d118:	d51e      	bpl.n	1004d158 <hci_le_scan_request_received_event_push+0x58>
1004d11a:	4614      	mov	r4, r2
1004d11c:	4810      	ldr	r0, [pc, #64]	@ (1004d160 <__arm_cp.49_1>)
1004d11e:	6800      	ldr	r0, [r0, #0]
1004d120:	6940      	ldr	r0, [r0, #20]
1004d122:	21a1      	movs	r1, #161	@ 0xa1
1004d124:	222b      	movs	r2, #43	@ 0x2b
1004d126:	2303      	movs	r3, #3
1004d128:	f7fd fef0 	bl	1004af0c <aci_event_fifo_push_header>
1004d12c:	2800      	cmp	r0, #0
1004d12e:	d013      	beq.n	1004d158 <hci_le_scan_request_received_event_push+0x58>
1004d130:	4607      	mov	r7, r0
1004d132:	7246      	strb	r6, [r0, #9]
1004d134:	7205      	strb	r5, [r0, #8]
1004d136:	300a      	adds	r0, #10
1004d138:	2206      	movs	r2, #6
1004d13a:	4621      	mov	r1, r4
1004d13c:	f7f4 fcdc 	bl	10041af8 <BLEPLAT_MemCpy>
1004d140:	2013      	movs	r0, #19
1004d142:	71f8      	strb	r0, [r7, #7]
1004d144:	2009      	movs	r0, #9
1004d146:	71b8      	strb	r0, [r7, #6]
1004d148:	203e      	movs	r0, #62	@ 0x3e
1004d14a:	7178      	strb	r0, [r7, #5]
1004d14c:	2004      	movs	r0, #4
1004d14e:	7138      	strb	r0, [r7, #4]
1004d150:	20a1      	movs	r0, #161	@ 0xa1
1004d152:	4639      	mov	r1, r7
1004d154:	f7fd ff77 	bl	1004b046 <aci_event_fifo_push>
1004d158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d15a:	46c0      	nop			@ (mov r8, r8)

1004d15c <__arm_cp.49_0>:
1004d15c:	20000b60 	.word	0x20000b60

1004d160 <__arm_cp.49_1>:
1004d160:	20000b54 	.word	0x20000b54

1004d164 <EADV_start_request_radio_tasks_ucfg_weak>:
1004d164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d166:	4604      	mov	r4, r0
1004d168:	20d8      	movs	r0, #216	@ 0xd8
1004d16a:	21ff      	movs	r1, #255	@ 0xff
1004d16c:	5421      	strb	r1, [r4, r0]
1004d16e:	20b8      	movs	r0, #184	@ 0xb8
1004d170:	5a27      	ldrh	r7, [r4, r0]
1004d172:	34b8      	adds	r4, #184	@ 0xb8
1004d174:	f000 fcca 	bl	1004db0c <LL_sched_reserve_taskslot>
1004d178:	7620      	strb	r0, [r4, #24]
1004d17a:	2607      	movs	r6, #7
1004d17c:	28ff      	cmp	r0, #255	@ 0xff
1004d17e:	d00a      	beq.n	1004d196 <EADV_start_request_radio_tasks_ucfg_weak+0x32>
1004d180:	2500      	movs	r5, #0
1004d182:	06f8      	lsls	r0, r7, #27
1004d184:	d408      	bmi.n	1004d198 <EADV_start_request_radio_tasks_ucfg_weak+0x34>
1004d186:	f000 fcc1 	bl	1004db0c <LL_sched_reserve_taskslot>
1004d18a:	7660      	strb	r0, [r4, #25]
1004d18c:	28ff      	cmp	r0, #255	@ 0xff
1004d18e:	d103      	bne.n	1004d198 <EADV_start_request_radio_tasks_ucfg_weak+0x34>
1004d190:	7e20      	ldrb	r0, [r4, #24]
1004d192:	f000 fcdd 	bl	1004db50 <LL_sched_release_taskslot>
1004d196:	4635      	mov	r5, r6
1004d198:	4628      	mov	r0, r5
1004d19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004d19c <llc_get_channel_sel_algo2_enabled>:
1004d19c:	b580      	push	{r7, lr}
1004d19e:	f000 fa45 	bl	1004d62c <llc_get_linkms_cntxt_p>
1004d1a2:	214e      	movs	r1, #78	@ 0x4e
1004d1a4:	5c40      	ldrb	r0, [r0, r1]
1004d1a6:	bd80      	pop	{r7, pc}

1004d1a8 <llc_eadv_max_supported_data_check_ucfg_weak>:
1004d1a8:	2000      	movs	r0, #0
1004d1aa:	4770      	bx	lr

1004d1ac <LL_eadv_start_extended_ucfg_weak>:
1004d1ac:	4770      	bx	lr

1004d1ae <ext_adv_scan_enabled_ucfg_weak>:
1004d1ae:	2000      	movs	r0, #0
1004d1b0:	4770      	bx	lr

1004d1b2 <BLE_STACK_EndOfRadioActivityCb>:
1004d1b2:	4770      	bx	lr

1004d1b4 <BLE_STACK_RadioHandler>:
1004d1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d1b6:	b083      	sub	sp, #12
1004d1b8:	4604      	mov	r4, r0
1004d1ba:	484c      	ldr	r0, [pc, #304]	@ (1004d2ec <__arm_cp.1_0>)
1004d1bc:	6004      	str	r4, [r0, #0]
1004d1be:	4620      	mov	r0, r4
1004d1c0:	f7f5 f9fd 	bl	100425be <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1004d1c4:	4605      	mov	r5, r0
1004d1c6:	4620      	mov	r0, r4
1004d1c8:	f7f5 f9e1 	bl	1004258e <BLEPLAT_CNTR_IntGetIntStatusDone>
1004d1cc:	4606      	mov	r6, r0
1004d1ce:	4668      	mov	r0, sp
1004d1d0:	f7f4 fd5f 	bl	10041c92 <BLEPLAT_GetAnchorPoint>
1004d1d4:	9900      	ldr	r1, [sp, #0]
1004d1d6:	1a09      	subs	r1, r1, r0
1004d1d8:	0b4b      	lsrs	r3, r1, #13
1004d1da:	4945      	ldr	r1, [pc, #276]	@ (1004d2f0 <__arm_cp.1_1>)
1004d1dc:	680a      	ldr	r2, [r1, #0]
1004d1de:	4611      	mov	r1, r2
1004d1e0:	31d8      	adds	r1, #216	@ 0xd8
1004d1e2:	2b00      	cmp	r3, #0
1004d1e4:	d102      	bne.n	1004d1ec <BLE_STACK_RadioHandler+0x38>
1004d1e6:	6010      	str	r0, [r2, #0]
1004d1e8:	2001      	movs	r0, #1
1004d1ea:	e000      	b.n	1004d1ee <BLE_STACK_RadioHandler+0x3a>
1004d1ec:	2000      	movs	r0, #0
1004d1ee:	7008      	strb	r0, [r1, #0]
1004d1f0:	4840      	ldr	r0, [pc, #256]	@ (1004d2f4 <__arm_cp.1_2>)
1004d1f2:	6800      	ldr	r0, [r0, #0]
1004d1f4:	7b44      	ldrb	r4, [r0, #13]
1004d1f6:	2100      	movs	r1, #0
1004d1f8:	2cff      	cmp	r4, #255	@ 0xff
1004d1fa:	d00a      	beq.n	1004d212 <BLE_STACK_RadioHandler+0x5e>
1004d1fc:	202c      	movs	r0, #44	@ 0x2c
1004d1fe:	4360      	muls	r0, r4
1004d200:	4a3d      	ldr	r2, [pc, #244]	@ (1004d2f8 <__arm_cp.1_3>)
1004d202:	6812      	ldr	r2, [r2, #0]
1004d204:	1810      	adds	r0, r2, r0
1004d206:	7c82      	ldrb	r2, [r0, #18]
1004d208:	2a00      	cmp	r2, #0
1004d20a:	d002      	beq.n	1004d212 <BLE_STACK_RadioHandler+0x5e>
1004d20c:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1004d20e:	68c0      	ldr	r0, [r0, #12]
1004d210:	e7ff      	b.n	1004d212 <BLE_STACK_RadioHandler+0x5e>
1004d212:	2701      	movs	r7, #1
1004d214:	2e00      	cmp	r6, #0
1004d216:	d003      	beq.n	1004d220 <BLE_STACK_RadioHandler+0x6c>
1004d218:	2d00      	cmp	r5, #0
1004d21a:	d101      	bne.n	1004d220 <BLE_STACK_RadioHandler+0x6c>
1004d21c:	2900      	cmp	r1, #0
1004d21e:	e011      	b.n	1004d244 <BLE_STACK_RadioHandler+0x90>
1004d220:	2d00      	cmp	r5, #0
1004d222:	d015      	beq.n	1004d250 <BLE_STACK_RadioHandler+0x9c>
1004d224:	4a35      	ldr	r2, [pc, #212]	@ (1004d2fc <__arm_cp.1_4>)
1004d226:	1a8b      	subs	r3, r1, r2
1004d228:	425a      	negs	r2, r3
1004d22a:	415a      	adcs	r2, r3
1004d22c:	4b34      	ldr	r3, [pc, #208]	@ (1004d300 <__arm_cp.1_5>)
1004d22e:	1acd      	subs	r5, r1, r3
1004d230:	426b      	negs	r3, r5
1004d232:	416b      	adcs	r3, r5
1004d234:	4d33      	ldr	r5, [pc, #204]	@ (1004d304 <__arm_cp.1_6>)
1004d236:	1b4e      	subs	r6, r1, r5
1004d238:	4275      	negs	r5, r6
1004d23a:	4175      	adcs	r5, r6
1004d23c:	2900      	cmp	r1, #0
1004d23e:	d007      	beq.n	1004d250 <BLE_STACK_RadioHandler+0x9c>
1004d240:	4313      	orrs	r3, r2
1004d242:	431d      	orrs	r5, r3
1004d244:	4e2a      	ldr	r6, [pc, #168]	@ (1004d2f0 <__arm_cp.1_1>)
1004d246:	4d29      	ldr	r5, [pc, #164]	@ (1004d2ec <__arm_cp.1_0>)
1004d248:	d004      	beq.n	1004d254 <BLE_STACK_RadioHandler+0xa0>
1004d24a:	4788      	blx	r1
1004d24c:	2700      	movs	r7, #0
1004d24e:	e001      	b.n	1004d254 <BLE_STACK_RadioHandler+0xa0>
1004d250:	4e27      	ldr	r6, [pc, #156]	@ (1004d2f0 <__arm_cp.1_1>)
1004d252:	4d26      	ldr	r5, [pc, #152]	@ (1004d2ec <__arm_cp.1_0>)
1004d254:	6828      	ldr	r0, [r5, #0]
1004d256:	f7f5 f9a6 	bl	100425a6 <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1004d25a:	2800      	cmp	r0, #0
1004d25c:	d001      	beq.n	1004d262 <BLE_STACK_RadioHandler+0xae>
1004d25e:	2504      	movs	r5, #4
1004d260:	e020      	b.n	1004d2a4 <BLE_STACK_RadioHandler+0xf0>
1004d262:	6828      	ldr	r0, [r5, #0]
1004d264:	f7f5 f97e 	bl	10042564 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1004d268:	2800      	cmp	r0, #0
1004d26a:	d001      	beq.n	1004d270 <BLE_STACK_RadioHandler+0xbc>
1004d26c:	2501      	movs	r5, #1
1004d26e:	e019      	b.n	1004d2a4 <BLE_STACK_RadioHandler+0xf0>
1004d270:	6828      	ldr	r0, [r5, #0]
1004d272:	f7f5 f983 	bl	1004257c <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1004d276:	2800      	cmp	r0, #0
1004d278:	d001      	beq.n	1004d27e <BLE_STACK_RadioHandler+0xca>
1004d27a:	2502      	movs	r5, #2
1004d27c:	e012      	b.n	1004d2a4 <BLE_STACK_RadioHandler+0xf0>
1004d27e:	6828      	ldr	r0, [r5, #0]
1004d280:	f7f5 f9a9 	bl	100425d6 <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1004d284:	4629      	mov	r1, r5
1004d286:	2505      	movs	r5, #5
1004d288:	2800      	cmp	r0, #0
1004d28a:	d10b      	bne.n	1004d2a4 <BLE_STACK_RadioHandler+0xf0>
1004d28c:	6808      	ldr	r0, [r1, #0]
1004d28e:	f7f5 f9ae 	bl	100425ee <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1004d292:	2800      	cmp	r0, #0
1004d294:	d106      	bne.n	1004d2a4 <BLE_STACK_RadioHandler+0xf0>
1004d296:	4815      	ldr	r0, [pc, #84]	@ (1004d2ec <__arm_cp.1_0>)
1004d298:	6800      	ldr	r0, [r0, #0]
1004d29a:	f7f5 f955 	bl	10042548 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1004d29e:	2800      	cmp	r0, #0
1004d2a0:	d020      	beq.n	1004d2e4 <BLE_STACK_RadioHandler+0x130>
1004d2a2:	2500      	movs	r5, #0
1004d2a4:	2001      	movs	r0, #1
1004d2a6:	40a8      	lsls	r0, r5
1004d2a8:	4917      	ldr	r1, [pc, #92]	@ (1004d308 <__arm_cp.1_7>)
1004d2aa:	6809      	ldr	r1, [r1, #0]
1004d2ac:	680a      	ldr	r2, [r1, #0]
1004d2ae:	4302      	orrs	r2, r0
1004d2b0:	600a      	str	r2, [r1, #0]
1004d2b2:	2000      	movs	r0, #0
1004d2b4:	f000 ffc0 	bl	1004e238 <tsk_notify_idx>
1004d2b8:	f7f4 fa0d 	bl	100416d6 <BLE_STACK_ProcessRequest>
1004d2bc:	f7f4 fce0 	bl	10041c80 <BLEPLAT_ClearRadioTimerValue>
1004d2c0:	4620      	mov	r0, r4
1004d2c2:	f000 fa4f 	bl	1004d764 <LL_sched_engine>
1004d2c6:	6834      	ldr	r4, [r6, #0]
1004d2c8:	7d60      	ldrb	r0, [r4, #21]
1004d2ca:	2801      	cmp	r0, #1
1004d2cc:	d108      	bne.n	1004d2e0 <BLE_STACK_RadioHandler+0x12c>
1004d2ce:	7c21      	ldrb	r1, [r4, #16]
1004d2d0:	200f      	movs	r0, #15
1004d2d2:	4008      	ands	r0, r1
1004d2d4:	68e2      	ldr	r2, [r4, #12]
1004d2d6:	0909      	lsrs	r1, r1, #4
1004d2d8:	f7ff ff6b 	bl	1004d1b2 <BLE_STACK_EndOfRadioActivityCb>
1004d2dc:	2000      	movs	r0, #0
1004d2de:	7560      	strb	r0, [r4, #21]
1004d2e0:	b003      	add	sp, #12
1004d2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d2e4:	2f00      	cmp	r7, #0
1004d2e6:	d1e9      	bne.n	1004d2bc <BLE_STACK_RadioHandler+0x108>
1004d2e8:	e7ed      	b.n	1004d2c6 <BLE_STACK_RadioHandler+0x112>
1004d2ea:	46c0      	nop			@ (mov r8, r8)

1004d2ec <__arm_cp.1_0>:
1004d2ec:	20000b5c 	.word	0x20000b5c

1004d2f0 <__arm_cp.1_1>:
1004d2f0:	20000b60 	.word	0x20000b60

1004d2f4 <__arm_cp.1_2>:
1004d2f4:	20000b64 	.word	0x20000b64

1004d2f8 <__arm_cp.1_3>:
1004d2f8:	20000b68 	.word	0x20000b68

1004d2fc <__arm_cp.1_4>:
1004d2fc:	1004e9e9 	.word	0x1004e9e9

1004d300 <__arm_cp.1_5>:
1004d300:	1004e995 	.word	0x1004e995

1004d304 <__arm_cp.1_6>:
1004d304:	1004e9ed 	.word	0x1004e9ed

1004d308 <__arm_cp.1_7>:
1004d308:	20000b54 	.word	0x20000b54

1004d30c <LL_init_ucfg_weak>:
1004d30c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d30e:	b091      	sub	sp, #68	@ 0x44
1004d310:	9306      	str	r3, [sp, #24]
1004d312:	4614      	mov	r4, r2
1004d314:	910d      	str	r1, [sp, #52]	@ 0x34
1004d316:	900b      	str	r0, [sp, #44]	@ 0x2c
1004d318:	48b8      	ldr	r0, [pc, #736]	@ (1004d5fc <__arm_cp.6_0>)
1004d31a:	7ac1      	ldrb	r1, [r0, #11]
1004d31c:	910c      	str	r1, [sp, #48]	@ 0x30
1004d31e:	7f01      	ldrb	r1, [r0, #28]
1004d320:	9109      	str	r1, [sp, #36]	@ 0x24
1004d322:	7ec1      	ldrb	r1, [r0, #27]
1004d324:	910a      	str	r1, [sp, #40]	@ 0x28
1004d326:	7e81      	ldrb	r1, [r0, #26]
1004d328:	9108      	str	r1, [sp, #32]
1004d32a:	7fc7      	ldrb	r7, [r0, #31]
1004d32c:	2501      	movs	r5, #1
1004d32e:	21e8      	movs	r1, #232	@ 0xe8
1004d330:	4628      	mov	r0, r5
1004d332:	f000 fc73 	bl	1004dc1c <csmem_mem_0_assign>
1004d336:	4eb2      	ldr	r6, [pc, #712]	@ (1004d600 <__arm_cp.6_1>)
1004d338:	6030      	str	r0, [r6, #0]
1004d33a:	2158      	movs	r1, #88	@ 0x58
1004d33c:	4628      	mov	r0, r5
1004d33e:	f000 fc6d 	bl	1004dc1c <csmem_mem_0_assign>
1004d342:	6831      	ldr	r1, [r6, #0]
1004d344:	229c      	movs	r2, #156	@ 0x9c
1004d346:	9207      	str	r2, [sp, #28]
1004d348:	5088      	str	r0, [r1, r2]
1004d34a:	4638      	mov	r0, r7
1004d34c:	f001 fac0 	bl	1004e8d0 <llc_wl_mem_allocate>
1004d350:	2107      	movs	r1, #7
1004d352:	4039      	ands	r1, r7
1004d354:	9806      	ldr	r0, [sp, #24]
1004d356:	f001 facd 	bl	1004e8f4 <llc_priv_mem_allocate>
1004d35a:	981c      	ldr	r0, [sp, #112]	@ 0x70
1004d35c:	9000      	str	r0, [sp, #0]
1004d35e:	ab19      	add	r3, sp, #100	@ 0x64
1004d360:	cb0e      	ldmia	r3, {r1, r2, r3}
1004d362:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004d364:	9106      	str	r1, [sp, #24]
1004d366:	930d      	str	r3, [sp, #52]	@ 0x34
1004d368:	f7fe fce0 	bl	1004bd2c <llc_conn_mem_allocate>
1004d36c:	2c01      	cmp	r4, #1
1004d36e:	d000      	beq.n	1004d372 <LL_init_ucfg_weak+0x66>
1004d370:	9508      	str	r5, [sp, #32]
1004d372:	2000      	movs	r0, #0
1004d374:	2c01      	cmp	r4, #1
1004d376:	d000      	beq.n	1004d37a <LL_init_ucfg_weak+0x6e>
1004d378:	900a      	str	r0, [sp, #40]	@ 0x28
1004d37a:	2c01      	cmp	r4, #1
1004d37c:	4fa0      	ldr	r7, [pc, #640]	@ (1004d600 <__arm_cp.6_1>)
1004d37e:	d000      	beq.n	1004d382 <LL_init_ucfg_weak+0x76>
1004d380:	9009      	str	r0, [sp, #36]	@ 0x24
1004d382:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
1004d384:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004d386:	2801      	cmp	r0, #1
1004d388:	9205      	str	r2, [sp, #20]
1004d38a:	d118      	bne.n	1004d3be <LL_init_ucfg_weak+0xb2>
1004d38c:	2029      	movs	r0, #41	@ 0x29
1004d38e:	499b      	ldr	r1, [pc, #620]	@ (1004d5fc <__arm_cp.6_0>)
1004d390:	5c08      	ldrb	r0, [r1, r0]
1004d392:	1e41      	subs	r1, r0, #1
1004d394:	4188      	sbcs	r0, r1
1004d396:	4310      	orrs	r0, r2
1004d398:	d001      	beq.n	1004d39e <LL_init_ucfg_weak+0x92>
1004d39a:	2530      	movs	r5, #48	@ 0x30
1004d39c:	e000      	b.n	1004d3a0 <LL_init_ucfg_weak+0x94>
1004d39e:	2520      	movs	r5, #32
1004d3a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1004d3a2:	4630      	mov	r0, r6
1004d3a4:	4629      	mov	r1, r5
1004d3a6:	f000 fc39 	bl	1004dc1c <csmem_mem_0_assign>
1004d3aa:	6839      	ldr	r1, [r7, #0]
1004d3ac:	2294      	movs	r2, #148	@ 0x94
1004d3ae:	5088      	str	r0, [r1, r2]
1004d3b0:	4630      	mov	r0, r6
1004d3b2:	4629      	mov	r1, r5
1004d3b4:	f000 fc32 	bl	1004dc1c <csmem_mem_0_assign>
1004d3b8:	6839      	ldr	r1, [r7, #0]
1004d3ba:	2298      	movs	r2, #152	@ 0x98
1004d3bc:	5088      	str	r0, [r1, r2]
1004d3be:	262c      	movs	r6, #44	@ 0x2c
1004d3c0:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004d3c2:	4631      	mov	r1, r6
1004d3c4:	f000 fc2a 	bl	1004dc1c <csmem_mem_0_assign>
1004d3c8:	6839      	ldr	r1, [r7, #0]
1004d3ca:	22a4      	movs	r2, #164	@ 0xa4
1004d3cc:	5088      	str	r0, [r1, r2]
1004d3ce:	2041      	movs	r0, #65	@ 0x41
1004d3d0:	0082      	lsls	r2, r0, #2
1004d3d2:	2c01      	cmp	r4, #1
1004d3d4:	9402      	str	r4, [sp, #8]
1004d3d6:	d10a      	bne.n	1004d3ee <LL_init_ucfg_weak+0xe2>
1004d3d8:	4611      	mov	r1, r2
1004d3da:	3120      	adds	r1, #32
1004d3dc:	2001      	movs	r0, #1
1004d3de:	4614      	mov	r4, r2
1004d3e0:	f000 fc1c 	bl	1004dc1c <csmem_mem_0_assign>
1004d3e4:	6839      	ldr	r1, [r7, #0]
1004d3e6:	228c      	movs	r2, #140	@ 0x8c
1004d3e8:	5088      	str	r0, [r1, r2]
1004d3ea:	4621      	mov	r1, r4
1004d3ec:	e038      	b.n	1004d460 <LL_init_ucfg_weak+0x154>
1004d3ee:	2125      	movs	r1, #37	@ 0x25
1004d3f0:	4882      	ldr	r0, [pc, #520]	@ (1004d5fc <__arm_cp.6_0>)
1004d3f2:	910c      	str	r1, [sp, #48]	@ 0x30
1004d3f4:	5c41      	ldrb	r1, [r0, r1]
1004d3f6:	4610      	mov	r0, r2
1004d3f8:	3020      	adds	r0, #32
1004d3fa:	2900      	cmp	r1, #0
1004d3fc:	9201      	str	r2, [sp, #4]
1004d3fe:	d001      	beq.n	1004d404 <LL_init_ucfg_weak+0xf8>
1004d400:	4601      	mov	r1, r0
1004d402:	e000      	b.n	1004d406 <LL_init_ucfg_weak+0xfa>
1004d404:	2144      	movs	r1, #68	@ 0x44
1004d406:	2726      	movs	r7, #38	@ 0x26
1004d408:	4a7c      	ldr	r2, [pc, #496]	@ (1004d5fc <__arm_cp.6_0>)
1004d40a:	5dd2      	ldrb	r2, [r2, r7]
1004d40c:	2a00      	cmp	r2, #0
1004d40e:	d000      	beq.n	1004d412 <LL_init_ucfg_weak+0x106>
1004d410:	4601      	mov	r1, r0
1004d412:	2529      	movs	r5, #41	@ 0x29
1004d414:	4a79      	ldr	r2, [pc, #484]	@ (1004d5fc <__arm_cp.6_0>)
1004d416:	5d52      	ldrb	r2, [r2, r5]
1004d418:	2a00      	cmp	r2, #0
1004d41a:	d000      	beq.n	1004d41e <LL_init_ucfg_weak+0x112>
1004d41c:	4601      	mov	r1, r0
1004d41e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004d420:	2a01      	cmp	r2, #1
1004d422:	d100      	bne.n	1004d426 <LL_init_ucfg_weak+0x11a>
1004d424:	4601      	mov	r1, r0
1004d426:	2001      	movs	r0, #1
1004d428:	f000 fbf8 	bl	1004dc1c <csmem_mem_0_assign>
1004d42c:	4974      	ldr	r1, [pc, #464]	@ (1004d600 <__arm_cp.6_1>)
1004d42e:	6809      	ldr	r1, [r1, #0]
1004d430:	228c      	movs	r2, #140	@ 0x8c
1004d432:	5088      	str	r0, [r1, r2]
1004d434:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d436:	2801      	cmp	r0, #1
1004d438:	9c01      	ldr	r4, [sp, #4]
1004d43a:	4621      	mov	r1, r4
1004d43c:	d010      	beq.n	1004d460 <LL_init_ucfg_weak+0x154>
1004d43e:	486f      	ldr	r0, [pc, #444]	@ (1004d5fc <__arm_cp.6_0>)
1004d440:	5d40      	ldrb	r0, [r0, r5]
1004d442:	2800      	cmp	r0, #0
1004d444:	4621      	mov	r1, r4
1004d446:	d10b      	bne.n	1004d460 <LL_init_ucfg_weak+0x154>
1004d448:	486c      	ldr	r0, [pc, #432]	@ (1004d5fc <__arm_cp.6_0>)
1004d44a:	5dc0      	ldrb	r0, [r0, r7]
1004d44c:	2800      	cmp	r0, #0
1004d44e:	4621      	mov	r1, r4
1004d450:	d106      	bne.n	1004d460 <LL_init_ucfg_weak+0x154>
1004d452:	486a      	ldr	r0, [pc, #424]	@ (1004d5fc <__arm_cp.6_0>)
1004d454:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004d456:	5c40      	ldrb	r0, [r0, r1]
1004d458:	2800      	cmp	r0, #0
1004d45a:	d000      	beq.n	1004d45e <LL_init_ucfg_weak+0x152>
1004d45c:	4626      	mov	r6, r4
1004d45e:	4631      	mov	r1, r6
1004d460:	9818      	ldr	r0, [sp, #96]	@ 0x60
1004d462:	900b      	str	r0, [sp, #44]	@ 0x2c
1004d464:	9816      	ldr	r0, [sp, #88]	@ 0x58
1004d466:	9003      	str	r0, [sp, #12]
1004d468:	2601      	movs	r6, #1
1004d46a:	4d66      	ldr	r5, [pc, #408]	@ (1004d604 <__arm_cp.6_2>)
1004d46c:	4630      	mov	r0, r6
1004d46e:	47a8      	blx	r5
1004d470:	4f63      	ldr	r7, [pc, #396]	@ (1004d600 <__arm_cp.6_1>)
1004d472:	6839      	ldr	r1, [r7, #0]
1004d474:	2290      	movs	r2, #144	@ 0x90
1004d476:	5088      	str	r0, [r1, r2]
1004d478:	2110      	movs	r1, #16
1004d47a:	4630      	mov	r0, r6
1004d47c:	47a8      	blx	r5
1004d47e:	6839      	ldr	r1, [r7, #0]
1004d480:	22a0      	movs	r2, #160	@ 0xa0
1004d482:	9204      	str	r2, [sp, #16]
1004d484:	5088      	str	r0, [r1, r2]
1004d486:	2104      	movs	r1, #4
1004d488:	4630      	mov	r0, r6
1004d48a:	47a8      	blx	r5
1004d48c:	6839      	ldr	r1, [r7, #0]
1004d48e:	22a8      	movs	r2, #168	@ 0xa8
1004d490:	5088      	str	r0, [r1, r2]
1004d492:	2134      	movs	r1, #52	@ 0x34
1004d494:	960c      	str	r6, [sp, #48]	@ 0x30
1004d496:	4630      	mov	r0, r6
1004d498:	47a8      	blx	r5
1004d49a:	6839      	ldr	r1, [r7, #0]
1004d49c:	22ac      	movs	r2, #172	@ 0xac
1004d49e:	5088      	str	r0, [r1, r2]
1004d4a0:	9808      	ldr	r0, [sp, #32]
1004d4a2:	b2c7      	uxtb	r7, r0
1004d4a4:	1f21      	subs	r1, r4, #4
1004d4a6:	4638      	mov	r0, r7
1004d4a8:	47a8      	blx	r5
1004d4aa:	4605      	mov	r5, r0
1004d4ac:	9c02      	ldr	r4, [sp, #8]
1004d4ae:	2c01      	cmp	r4, #1
1004d4b0:	d105      	bne.n	1004d4be <LL_init_ucfg_weak+0x1b2>
1004d4b2:	215c      	movs	r1, #92	@ 0x5c
1004d4b4:	4638      	mov	r0, r7
1004d4b6:	f000 fbb1 	bl	1004dc1c <csmem_mem_0_assign>
1004d4ba:	4602      	mov	r2, r0
1004d4bc:	e000      	b.n	1004d4c0 <LL_init_ucfg_weak+0x1b4>
1004d4be:	2200      	movs	r2, #0
1004d4c0:	4638      	mov	r0, r7
1004d4c2:	4629      	mov	r1, r5
1004d4c4:	f7fe ff7a 	bl	1004c3bc <EADV_init>
1004d4c8:	ab10      	add	r3, sp, #64	@ 0x40
1004d4ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004d4cc:	70d8      	strb	r0, [r3, #3]
1004d4ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004d4d0:	7098      	strb	r0, [r3, #2]
1004d4d2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1004d4d4:	705e      	strb	r6, [r3, #1]
1004d4d6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d4d8:	7018      	strb	r0, [r3, #0]
1004d4da:	4620      	mov	r0, r4
1004d4dc:	9d05      	ldr	r5, [sp, #20]
1004d4de:	4629      	mov	r1, r5
1004d4e0:	463a      	mov	r2, r7
1004d4e2:	f001 fa05 	bl	1004e8f0 <llc_padv_mem_allocate_ucfg_weak>
1004d4e6:	9f03      	ldr	r7, [sp, #12]
1004d4e8:	4638      	mov	r0, r7
1004d4ea:	4621      	mov	r1, r4
1004d4ec:	f7fe fe2d 	bl	1004c14a <llc_scan_mem_allocate_ucfg_weak>
1004d4f0:	4638      	mov	r0, r7
1004d4f2:	4621      	mov	r1, r4
1004d4f4:	462a      	mov	r2, r5
1004d4f6:	f001 fa5e 	bl	1004e9b6 <llc_pscan_mem_allocate_ucfg_weak>
1004d4fa:	4638      	mov	r0, r7
1004d4fc:	4621      	mov	r1, r4
1004d4fe:	462a      	mov	r2, r5
1004d500:	4633      	mov	r3, r6
1004d502:	f7fe fe35 	bl	1004c170 <llc_past_mem_allocate_ucfg_weak>
1004d506:	9600      	str	r6, [sp, #0]
1004d508:	463e      	mov	r6, r7
1004d50a:	4638      	mov	r0, r7
1004d50c:	4621      	mov	r1, r4
1004d50e:	462a      	mov	r2, r5
1004d510:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004d512:	f001 fa51 	bl	1004e9b8 <llc_pscan_wr_mem_allocate_ucfg_weak>
1004d516:	f7fe fe00 	bl	1004c11a <llc_iso_cmn_mem_alloc_ucfg_weak>
1004d51a:	2c01      	cmp	r4, #1
1004d51c:	d107      	bne.n	1004d52e <LL_init_ucfg_weak+0x222>
1004d51e:	2d01      	cmp	r5, #1
1004d520:	d105      	bne.n	1004d52e <LL_init_ucfg_weak+0x222>
1004d522:	f001 f97a 	bl	1004e81a <llc_big_brc_mem_alloc_ucfg_weak>
1004d526:	2e01      	cmp	r6, #1
1004d528:	d101      	bne.n	1004d52e <LL_init_ucfg_weak+0x222>
1004d52a:	f001 f977 	bl	1004e81c <llc_big_sync_mem_alloc_ucfg_weak>
1004d52e:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004d530:	2801      	cmp	r0, #1
1004d532:	4f33      	ldr	r7, [pc, #204]	@ (1004d600 <__arm_cp.6_1>)
1004d534:	d101      	bne.n	1004d53a <LL_init_ucfg_weak+0x22e>
1004d536:	f001 f972 	bl	1004e81e <llc_cig_cmn_mem_alloc_ucfg_weak>
1004d53a:	f7fe fde7 	bl	1004c10c <llc_isoal_mem_alloc_ucfg_weak>
1004d53e:	9806      	ldr	r0, [sp, #24]
1004d540:	4631      	mov	r1, r6
1004d542:	4622      	mov	r2, r4
1004d544:	462b      	mov	r3, r5
1004d546:	f7fe fe20 	bl	1004c18a <llc_cte_mem_allocate_ucfg_weak>
1004d54a:	4e2c      	ldr	r6, [pc, #176]	@ (1004d5fc <__arm_cp.6_0>)
1004d54c:	7af0      	ldrb	r0, [r6, #11]
1004d54e:	1c41      	adds	r1, r0, #1
1004d550:	4d2d      	ldr	r5, [pc, #180]	@ (1004d608 <__arm_cp.6_3>)
1004d552:	4628      	mov	r0, r5
1004d554:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004d556:	f000 fb4f 	bl	1004dbf8 <csmem_mem_assign>
1004d55a:	6839      	ldr	r1, [r7, #0]
1004d55c:	22d0      	movs	r2, #208	@ 0xd0
1004d55e:	5088      	str	r0, [r1, r2]
1004d560:	7af1      	ldrb	r1, [r6, #11]
1004d562:	2202      	movs	r2, #2
1004d564:	4628      	mov	r0, r5
1004d566:	f000 fb47 	bl	1004dbf8 <csmem_mem_assign>
1004d56a:	6839      	ldr	r1, [r7, #0]
1004d56c:	460a      	mov	r2, r1
1004d56e:	32a0      	adds	r2, #160	@ 0xa0
1004d570:	6350      	str	r0, [r2, #52]	@ 0x34
1004d572:	9804      	ldr	r0, [sp, #16]
1004d574:	5808      	ldr	r0, [r1, r0]
1004d576:	6078      	str	r0, [r7, #4]
1004d578:	6850      	ldr	r0, [r2, #4]
1004d57a:	60b8      	str	r0, [r7, #8]
1004d57c:	4620      	mov	r0, r4
1004d57e:	f7fe fde3 	bl	1004c148 <llc_scan_init_ucfg_weak>
1004d582:	f001 fa17 	bl	1004e9b4 <llc_pscan_init_ucfg_weak>
1004d586:	f000 f863 	bl	1004d650 <LL_sched_init>
1004d58a:	f7fe fe03 	bl	1004c194 <LL_dtm_init>
1004d58e:	f001 f9b0 	bl	1004e8f2 <llc_padv_init_ucfg_weak>
1004d592:	f7fe fdf9 	bl	1004c188 <llc_cte_init_ucfg_weak>
1004d596:	f7fe fb27 	bl	1004bbe8 <HCI_Init>
1004d59a:	f7f4 fb19 	bl	10041bd0 <BLEPLAT_GetDefaultPALevel>
1004d59e:	6839      	ldr	r1, [r7, #0]
1004d5a0:	2400      	movs	r4, #0
1004d5a2:	728c      	strb	r4, [r1, #10]
1004d5a4:	7248      	strb	r0, [r1, #9]
1004d5a6:	4620      	mov	r0, r4
1004d5a8:	f7f4 fb1a 	bl	10041be0 <BLEPLAT_SetHighPower>
1004d5ac:	f7fd fb1c 	bl	1004abe8 <ble_HAL_Init>
1004d5b0:	6838      	ldr	r0, [r7, #0]
1004d5b2:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1004d5b4:	f7fe fddd 	bl	1004c172 <LLC_pcl_hal_cntxt_init_ucfg_weak>
1004d5b8:	6838      	ldr	r0, [r7, #0]
1004d5ba:	9d07      	ldr	r5, [sp, #28]
1004d5bc:	5940      	ldr	r0, [r0, r5]
1004d5be:	300c      	adds	r0, #12
1004d5c0:	f000 ffda 	bl	1004e578 <addr8_list_clear>
1004d5c4:	463e      	mov	r6, r7
1004d5c6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
1004d5c8:	4638      	mov	r0, r7
1004d5ca:	f7fe fdac 	bl	1004c126 <llc_priv_init_ucfg_weak>
1004d5ce:	6830      	ldr	r0, [r6, #0]
1004d5d0:	5941      	ldr	r1, [r0, r5]
1004d5d2:	2240      	movs	r2, #64	@ 0x40
1004d5d4:	548c      	strb	r4, [r1, r2]
1004d5d6:	4a09      	ldr	r2, [pc, #36]	@ (1004d5fc <__arm_cp.6_0>)
1004d5d8:	8b12      	ldrh	r2, [r2, #24]
1004d5da:	8302      	strh	r2, [r0, #24]
1004d5dc:	201f      	movs	r0, #31
1004d5de:	900f      	str	r0, [sp, #60]	@ 0x3c
1004d5e0:	43e0      	mvns	r0, r4
1004d5e2:	900e      	str	r0, [sp, #56]	@ 0x38
1004d5e4:	3148      	adds	r1, #72	@ 0x48
1004d5e6:	a80e      	add	r0, sp, #56	@ 0x38
1004d5e8:	2205      	movs	r2, #5
1004d5ea:	f000 ff73 	bl	1004e4d4 <char_copy>
1004d5ee:	6830      	ldr	r0, [r6, #0]
1004d5f0:	5940      	ldr	r0, [r0, r5]
1004d5f2:	02f9      	lsls	r1, r7, #11
1004d5f4:	2254      	movs	r2, #84	@ 0x54
1004d5f6:	5281      	strh	r1, [r0, r2]
1004d5f8:	b011      	add	sp, #68	@ 0x44
1004d5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004d5fc <__arm_cp.6_0>:
1004d5fc:	20000b70 	.word	0x20000b70

1004d600 <__arm_cp.6_1>:
1004d600:	20000b60 	.word	0x20000b60

1004d604 <__arm_cp.6_2>:
1004d604:	1004dc1d 	.word	0x1004dc1d

1004d608 <__arm_cp.6_3>:
1004d608:	20000b6c 	.word	0x20000b6c

1004d60c <LL_get_tx_common_buffer_p>:
1004d60c:	4802      	ldr	r0, [pc, #8]	@ (1004d618 <__arm_cp.11_0>)
1004d60e:	6800      	ldr	r0, [r0, #0]
1004d610:	218c      	movs	r1, #140	@ 0x8c
1004d612:	5840      	ldr	r0, [r0, r1]
1004d614:	4770      	bx	lr
1004d616:	46c0      	nop			@ (mov r8, r8)

1004d618 <__arm_cp.11_0>:
1004d618:	20000b60 	.word	0x20000b60

1004d61c <LL_get_rx_common_buffer_p>:
1004d61c:	4802      	ldr	r0, [pc, #8]	@ (1004d628 <__arm_cp.12_0>)
1004d61e:	6800      	ldr	r0, [r0, #0]
1004d620:	2190      	movs	r1, #144	@ 0x90
1004d622:	5840      	ldr	r0, [r0, r1]
1004d624:	4770      	bx	lr
1004d626:	46c0      	nop			@ (mov r8, r8)

1004d628 <__arm_cp.12_0>:
1004d628:	20000b60 	.word	0x20000b60

1004d62c <llc_get_linkms_cntxt_p>:
1004d62c:	4802      	ldr	r0, [pc, #8]	@ (1004d638 <__arm_cp.15_0>)
1004d62e:	6800      	ldr	r0, [r0, #0]
1004d630:	219c      	movs	r1, #156	@ 0x9c
1004d632:	5840      	ldr	r0, [r0, r1]
1004d634:	4770      	bx	lr
1004d636:	46c0      	nop			@ (mov r8, r8)

1004d638 <__arm_cp.15_0>:
1004d638:	20000b60 	.word	0x20000b60

1004d63c <LL_sched_time_t1_ge_t2>:
1004d63c:	43c0      	mvns	r0, r0
1004d63e:	1840      	adds	r0, r0, r1
1004d640:	0fc0      	lsrs	r0, r0, #31
1004d642:	4770      	bx	lr

1004d644 <LL_sched_engine_return_actual_scheduler_margin>:
1004d644:	4801      	ldr	r0, [pc, #4]	@ (1004d64c <__arm_cp.2_0>)
1004d646:	6800      	ldr	r0, [r0, #0]
1004d648:	6880      	ldr	r0, [r0, #8]
1004d64a:	4770      	bx	lr

1004d64c <__arm_cp.2_0>:
1004d64c:	20000b64 	.word	0x20000b64

1004d650 <LL_sched_init>:
1004d650:	4809      	ldr	r0, [pc, #36]	@ (1004d678 <__arm_cp.4_0>)
1004d652:	7ac0      	ldrb	r0, [r0, #11]
1004d654:	4909      	ldr	r1, [pc, #36]	@ (1004d67c <__arm_cp.4_1>)
1004d656:	6809      	ldr	r1, [r1, #0]
1004d658:	3112      	adds	r1, #18
1004d65a:	2800      	cmp	r0, #0
1004d65c:	d004      	beq.n	1004d668 <LL_sched_init+0x18>
1004d65e:	2200      	movs	r2, #0
1004d660:	800a      	strh	r2, [r1, #0]
1004d662:	312c      	adds	r1, #44	@ 0x2c
1004d664:	1e40      	subs	r0, r0, #1
1004d666:	e7f8      	b.n	1004d65a <LL_sched_init+0xa>
1004d668:	4805      	ldr	r0, [pc, #20]	@ (1004d680 <__arm_cp.4_2>)
1004d66a:	6800      	ldr	r0, [r0, #0]
1004d66c:	2100      	movs	r1, #0
1004d66e:	73c1      	strb	r1, [r0, #15]
1004d670:	21ff      	movs	r1, #255	@ 0xff
1004d672:	0209      	lsls	r1, r1, #8
1004d674:	8181      	strh	r1, [r0, #12]
1004d676:	4770      	bx	lr

1004d678 <__arm_cp.4_0>:
1004d678:	20000b70 	.word	0x20000b70

1004d67c <__arm_cp.4_1>:
1004d67c:	20000b68 	.word	0x20000b68

1004d680 <__arm_cp.4_2>:
1004d680:	20000b64 	.word	0x20000b64

1004d684 <LL_sched_set_anchor>:
1004d684:	222c      	movs	r2, #44	@ 0x2c
1004d686:	4342      	muls	r2, r0
1004d688:	4801      	ldr	r0, [pc, #4]	@ (1004d690 <__arm_cp.5_0>)
1004d68a:	6800      	ldr	r0, [r0, #0]
1004d68c:	5081      	str	r1, [r0, r2]
1004d68e:	4770      	bx	lr

1004d690 <__arm_cp.5_0>:
1004d690:	20000b68 	.word	0x20000b68

1004d694 <LL_sched_set_cancel_request>:
1004d694:	28ff      	cmp	r0, #255	@ 0xff
1004d696:	d00b      	beq.n	1004d6b0 <LL_sched_set_cancel_request+0x1c>
1004d698:	212c      	movs	r1, #44	@ 0x2c
1004d69a:	4341      	muls	r1, r0
1004d69c:	4805      	ldr	r0, [pc, #20]	@ (1004d6b4 <__arm_cp.9_0>)
1004d69e:	6800      	ldr	r0, [r0, #0]
1004d6a0:	1840      	adds	r0, r0, r1
1004d6a2:	7c81      	ldrb	r1, [r0, #18]
1004d6a4:	2908      	cmp	r1, #8
1004d6a6:	d001      	beq.n	1004d6ac <LL_sched_set_cancel_request+0x18>
1004d6a8:	2110      	movs	r1, #16
1004d6aa:	e000      	b.n	1004d6ae <LL_sched_set_cancel_request+0x1a>
1004d6ac:	2120      	movs	r1, #32
1004d6ae:	7481      	strb	r1, [r0, #18]
1004d6b0:	4770      	bx	lr
1004d6b2:	46c0      	nop			@ (mov r8, r8)

1004d6b4 <__arm_cp.9_0>:
1004d6b4:	20000b68 	.word	0x20000b68

1004d6b8 <LL_sched_enable_taskslot>:
1004d6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d6ba:	b088      	sub	sp, #32
1004d6bc:	9307      	str	r3, [sp, #28]
1004d6be:	272c      	movs	r7, #44	@ 0x2c
1004d6c0:	4347      	muls	r7, r0
1004d6c2:	481a      	ldr	r0, [pc, #104]	@ (1004d72c <__arm_cp.10_0>)
1004d6c4:	6806      	ldr	r6, [r0, #0]
1004d6c6:	19f0      	adds	r0, r6, r7
1004d6c8:	7c84      	ldrb	r4, [r0, #18]
1004d6ca:	2c01      	cmp	r4, #1
1004d6cc:	d12b      	bne.n	1004d726 <LL_sched_enable_taskslot+0x6e>
1004d6ce:	4603      	mov	r3, r0
1004d6d0:	3312      	adds	r3, #18
1004d6d2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1004d6d4:	9506      	str	r5, [sp, #24]
1004d6d6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1004d6d8:	9505      	str	r5, [sp, #20]
1004d6da:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1004d6dc:	9503      	str	r5, [sp, #12]
1004d6de:	9d11      	ldr	r5, [sp, #68]	@ 0x44
1004d6e0:	9502      	str	r5, [sp, #8]
1004d6e2:	9104      	str	r1, [sp, #16]
1004d6e4:	9910      	ldr	r1, [sp, #64]	@ 0x40
1004d6e6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004d6e8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1004d6ea:	9400      	str	r4, [sp, #0]
1004d6ec:	9201      	str	r2, [sp, #4]
1004d6ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004d6f0:	9c07      	ldr	r4, [sp, #28]
1004d6f2:	6044      	str	r4, [r0, #4]
1004d6f4:	6082      	str	r2, [r0, #8]
1004d6f6:	9a00      	ldr	r2, [sp, #0]
1004d6f8:	51f2      	str	r2, [r6, r7]
1004d6fa:	221f      	movs	r2, #31
1004d6fc:	4015      	ands	r5, r2
1004d6fe:	7545      	strb	r5, [r0, #21]
1004d700:	4011      	ands	r1, r2
1004d702:	7581      	strb	r1, [r0, #22]
1004d704:	2101      	movs	r1, #1
1004d706:	7501      	strb	r1, [r0, #20]
1004d708:	9a01      	ldr	r2, [sp, #4]
1004d70a:	74c2      	strb	r2, [r0, #19]
1004d70c:	8201      	strh	r1, [r0, #16]
1004d70e:	9902      	ldr	r1, [sp, #8]
1004d710:	61c1      	str	r1, [r0, #28]
1004d712:	9903      	ldr	r1, [sp, #12]
1004d714:	6201      	str	r1, [r0, #32]
1004d716:	9905      	ldr	r1, [sp, #20]
1004d718:	6241      	str	r1, [r0, #36]	@ 0x24
1004d71a:	9906      	ldr	r1, [sp, #24]
1004d71c:	6281      	str	r1, [r0, #40]	@ 0x28
1004d71e:	9904      	ldr	r1, [sp, #16]
1004d720:	60c1      	str	r1, [r0, #12]
1004d722:	2002      	movs	r0, #2
1004d724:	7018      	strb	r0, [r3, #0]
1004d726:	b008      	add	sp, #32
1004d728:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d72a:	46c0      	nop			@ (mov r8, r8)

1004d72c <__arm_cp.10_0>:
1004d72c:	20000b68 	.word	0x20000b68

1004d730 <LL_sched_is_scheduler_call_pending>:
1004d730:	b580      	push	{r7, lr}
1004d732:	490a      	ldr	r1, [pc, #40]	@ (1004d75c <__arm_cp.11_0>)
1004d734:	6809      	ldr	r1, [r1, #0]
1004d736:	7b0a      	ldrb	r2, [r1, #12]
1004d738:	2a01      	cmp	r2, #1
1004d73a:	d106      	bne.n	1004d74a <LL_sched_is_scheduler_call_pending+0x1a>
1004d73c:	7bca      	ldrb	r2, [r1, #15]
1004d73e:	2a03      	cmp	r2, #3
1004d740:	d105      	bne.n	1004d74e <LL_sched_is_scheduler_call_pending+0x1e>
1004d742:	2000      	movs	r0, #0
1004d744:	f7fe fd02 	bl	1004c14c <llc_scan_stop_ucfg_weak>
1004d748:	bd80      	pop	{r7, pc}
1004d74a:	2000      	movs	r0, #0
1004d74c:	bd80      	pop	{r7, pc}
1004d74e:	6809      	ldr	r1, [r1, #0]
1004d750:	1a08      	subs	r0, r1, r0
1004d752:	4903      	ldr	r1, [pc, #12]	@ (1004d760 <__arm_cp.11_1>)
1004d754:	1840      	adds	r0, r0, r1
1004d756:	0fc0      	lsrs	r0, r0, #31
1004d758:	bd80      	pop	{r7, pc}
1004d75a:	46c0      	nop			@ (mov r8, r8)

1004d75c <__arm_cp.11_0>:
1004d75c:	20000b64 	.word	0x20000b64

1004d760 <__arm_cp.11_1>:
1004d760:	fffffe0b 	.word	0xfffffe0b

1004d764 <LL_sched_engine>:
1004d764:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d766:	b0b3      	sub	sp, #204	@ 0xcc
1004d768:	4607      	mov	r7, r0
1004d76a:	48dc      	ldr	r0, [pc, #880]	@ (1004dadc <__arm_cp.13_0>)
1004d76c:	6800      	ldr	r0, [r0, #0]
1004d76e:	900b      	str	r0, [sp, #44]	@ 0x2c
1004d770:	2001      	movs	r0, #1
1004d772:	9001      	str	r0, [sp, #4]
1004d774:	9009      	str	r0, [sp, #36]	@ 0x24
1004d776:	2100      	movs	r1, #0
1004d778:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d77a:	7381      	strb	r1, [r0, #14]
1004d77c:	48d8      	ldr	r0, [pc, #864]	@ (1004dae0 <__arm_cp.13_1>)
1004d77e:	6803      	ldr	r3, [r0, #0]
1004d780:	910a      	str	r1, [sp, #40]	@ 0x28
1004d782:	7219      	strb	r1, [r3, #8]
1004d784:	20ff      	movs	r0, #255	@ 0xff
1004d786:	9008      	str	r0, [sp, #32]
1004d788:	3002      	adds	r0, #2
1004d78a:	8298      	strh	r0, [r3, #20]
1004d78c:	7c18      	ldrb	r0, [r3, #16]
1004d78e:	21f0      	movs	r1, #240	@ 0xf0
1004d790:	4001      	ands	r1, r0
1004d792:	090a      	lsrs	r2, r1, #4
1004d794:	1888      	adds	r0, r1, r2
1004d796:	7418      	strb	r0, [r3, #16]
1004d798:	8a59      	ldrh	r1, [r3, #18]
1004d79a:	40d1      	lsrs	r1, r2
1004d79c:	07c9      	lsls	r1, r1, #31
1004d79e:	49d1      	ldr	r1, [pc, #836]	@ (1004dae4 <__arm_cp.13_2>)
1004d7a0:	6809      	ldr	r1, [r1, #0]
1004d7a2:	9107      	str	r1, [sp, #28]
1004d7a4:	9305      	str	r3, [sp, #20]
1004d7a6:	d006      	beq.n	1004d7b6 <LL_sched_engine+0x52>
1004d7a8:	2000      	movs	r0, #0
1004d7aa:	f000 fd45 	bl	1004e238 <tsk_notify_idx>
1004d7ae:	f7f3 ff92 	bl	100416d6 <BLE_STACK_ProcessRequest>
1004d7b2:	9b05      	ldr	r3, [sp, #20]
1004d7b4:	7c18      	ldrb	r0, [r3, #16]
1004d7b6:	210f      	movs	r1, #15
1004d7b8:	9102      	str	r1, [sp, #8]
1004d7ba:	4008      	ands	r0, r1
1004d7bc:	7418      	strb	r0, [r3, #16]
1004d7be:	2196      	movs	r1, #150	@ 0x96
1004d7c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004d7c2:	4341      	muls	r1, r0
1004d7c4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d7c6:	9112      	str	r1, [sp, #72]	@ 0x48
1004d7c8:	6081      	str	r1, [r0, #8]
1004d7ca:	2001      	movs	r0, #1
1004d7cc:	9004      	str	r0, [sp, #16]
1004d7ce:	43c0      	mvns	r0, r0
1004d7d0:	b279      	sxtb	r1, r7
1004d7d2:	4281      	cmp	r1, r0
1004d7d4:	dc10      	bgt.n	1004d7f8 <LL_sched_engine+0x94>
1004d7d6:	207f      	movs	r0, #127	@ 0x7f
1004d7d8:	4007      	ands	r7, r0
1004d7da:	252c      	movs	r5, #44	@ 0x2c
1004d7dc:	437d      	muls	r5, r7
1004d7de:	9c07      	ldr	r4, [sp, #28]
1004d7e0:	1960      	adds	r0, r4, r5
1004d7e2:	900a      	str	r0, [sp, #40]	@ 0x28
1004d7e4:	5966      	ldr	r6, [r4, r5]
1004d7e6:	f7f4 fa0a 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004d7ea:	1a30      	subs	r0, r6, r0
1004d7ec:	49be      	ldr	r1, [pc, #760]	@ (1004dae8 <__arm_cp.13_3>)
1004d7ee:	1840      	adds	r0, r0, r1
1004d7f0:	d500      	bpl.n	1004d7f4 <LL_sched_engine+0x90>
1004d7f2:	e0ef      	b.n	1004d9d4 <LL_sched_engine+0x270>
1004d7f4:	4638      	mov	r0, r7
1004d7f6:	e004      	b.n	1004d802 <LL_sched_engine+0x9e>
1004d7f8:	b2f8      	uxtb	r0, r7
1004d7fa:	28ff      	cmp	r0, #255	@ 0xff
1004d7fc:	d00e      	beq.n	1004d81c <LL_sched_engine+0xb8>
1004d7fe:	2100      	movs	r1, #0
1004d800:	910a      	str	r1, [sp, #40]	@ 0x28
1004d802:	212c      	movs	r1, #44	@ 0x2c
1004d804:	4341      	muls	r1, r0
1004d806:	9807      	ldr	r0, [sp, #28]
1004d808:	1840      	adds	r0, r0, r1
1004d80a:	2101      	movs	r1, #1
1004d80c:	7501      	strb	r1, [r0, #20]
1004d80e:	7c81      	ldrb	r1, [r0, #18]
1004d810:	2908      	cmp	r1, #8
1004d812:	d102      	bne.n	1004d81a <LL_sched_engine+0xb6>
1004d814:	3012      	adds	r0, #18
1004d816:	2104      	movs	r1, #4
1004d818:	7001      	strb	r1, [r0, #0]
1004d81a:	9708      	str	r7, [sp, #32]
1004d81c:	f7f4 f9ef 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004d820:	9912      	ldr	r1, [sp, #72]	@ 0x48
1004d822:	180c      	adds	r4, r1, r0
1004d824:	48af      	ldr	r0, [pc, #700]	@ (1004dae4 <__arm_cp.13_2>)
1004d826:	6807      	ldr	r7, [r0, #0]
1004d828:	3728      	adds	r7, #40	@ 0x28
1004d82a:	2500      	movs	r5, #0
1004d82c:	4628      	mov	r0, r5
1004d82e:	49af      	ldr	r1, [pc, #700]	@ (1004daec <__arm_cp.13_4>)
1004d830:	7aca      	ldrb	r2, [r1, #11]
1004d832:	4295      	cmp	r5, r2
1004d834:	d23a      	bcs.n	1004d8ac <LL_sched_engine+0x148>
1004d836:	463e      	mov	r6, r7
1004d838:	3e16      	subs	r6, #22
1004d83a:	7831      	ldrb	r1, [r6, #0]
1004d83c:	070a      	lsls	r2, r1, #28
1004d83e:	0f52      	lsrs	r2, r2, #29
1004d840:	d01e      	beq.n	1004d880 <LL_sched_engine+0x11c>
1004d842:	2104      	movs	r1, #4
1004d844:	7031      	strb	r1, [r6, #0]
1004d846:	4639      	mov	r1, r7
1004d848:	3928      	subs	r1, #40	@ 0x28
1004d84a:	6809      	ldr	r1, [r1, #0]
1004d84c:	43ca      	mvns	r2, r1
1004d84e:	18a2      	adds	r2, r4, r2
1004d850:	d429      	bmi.n	1004d8a6 <LL_sched_engine+0x142>
1004d852:	1a61      	subs	r1, r4, r1
1004d854:	4638      	mov	r0, r7
1004d856:	381c      	subs	r0, #28
1004d858:	6800      	ldr	r0, [r0, #0]
1004d85a:	463a      	mov	r2, r7
1004d85c:	3a0c      	subs	r2, #12
1004d85e:	6812      	ldr	r2, [r2, #0]
1004d860:	4790      	blx	r2
1004d862:	4639      	mov	r1, r7
1004d864:	3918      	subs	r1, #24
1004d866:	880a      	ldrh	r2, [r1, #0]
1004d868:	1812      	adds	r2, r2, r0
1004d86a:	800a      	strh	r2, [r1, #0]
1004d86c:	4639      	mov	r1, r7
1004d86e:	3914      	subs	r1, #20
1004d870:	780a      	ldrb	r2, [r1, #0]
1004d872:	1880      	adds	r0, r0, r2
1004d874:	287f      	cmp	r0, #127	@ 0x7f
1004d876:	d300      	bcc.n	1004d87a <LL_sched_engine+0x116>
1004d878:	207f      	movs	r0, #127	@ 0x7f
1004d87a:	7008      	strb	r0, [r1, #0]
1004d87c:	7831      	ldrb	r1, [r6, #0]
1004d87e:	2001      	movs	r0, #1
1004d880:	0689      	lsls	r1, r1, #26
1004d882:	0f89      	lsrs	r1, r1, #30
1004d884:	d00f      	beq.n	1004d8a6 <LL_sched_engine+0x142>
1004d886:	6839      	ldr	r1, [r7, #0]
1004d888:	2900      	cmp	r1, #0
1004d88a:	d006      	beq.n	1004d89a <LL_sched_engine+0x136>
1004d88c:	4638      	mov	r0, r7
1004d88e:	381c      	subs	r0, #28
1004d890:	6800      	ldr	r0, [r0, #0]
1004d892:	4788      	blx	r1
1004d894:	7830      	ldrb	r0, [r6, #0]
1004d896:	2801      	cmp	r0, #1
1004d898:	d004      	beq.n	1004d8a4 <LL_sched_engine+0x140>
1004d89a:	2000      	movs	r0, #0
1004d89c:	7030      	strb	r0, [r6, #0]
1004d89e:	4639      	mov	r1, r7
1004d8a0:	3915      	subs	r1, #21
1004d8a2:	7008      	strb	r0, [r1, #0]
1004d8a4:	2001      	movs	r0, #1
1004d8a6:	372c      	adds	r7, #44	@ 0x2c
1004d8a8:	1c6d      	adds	r5, r5, #1
1004d8aa:	e7c0      	b.n	1004d82e <LL_sched_engine+0xca>
1004d8ac:	2800      	cmp	r0, #0
1004d8ae:	d1b5      	bne.n	1004d81c <LL_sched_engine+0xb8>
1004d8b0:	488c      	ldr	r0, [pc, #560]	@ (1004dae4 <__arm_cp.13_2>)
1004d8b2:	6800      	ldr	r0, [r0, #0]
1004d8b4:	4603      	mov	r3, r0
1004d8b6:	3312      	adds	r3, #18
1004d8b8:	2400      	movs	r4, #0
1004d8ba:	4621      	mov	r1, r4
1004d8bc:	42a2      	cmp	r2, r4
1004d8be:	d009      	beq.n	1004d8d4 <LL_sched_engine+0x170>
1004d8c0:	781d      	ldrb	r5, [r3, #0]
1004d8c2:	2d04      	cmp	r5, #4
1004d8c4:	d103      	bne.n	1004d8ce <LL_sched_engine+0x16a>
1004d8c6:	b2cd      	uxtb	r5, r1
1004d8c8:	ae13      	add	r6, sp, #76	@ 0x4c
1004d8ca:	5574      	strb	r4, [r6, r5]
1004d8cc:	1c49      	adds	r1, r1, #1
1004d8ce:	332c      	adds	r3, #44	@ 0x2c
1004d8d0:	1c64      	adds	r4, r4, #1
1004d8d2:	e7f3      	b.n	1004d8bc <LL_sched_engine+0x158>
1004d8d4:	060a      	lsls	r2, r1, #24
1004d8d6:	d074      	beq.n	1004d9c2 <LL_sched_engine+0x25e>
1004d8d8:	b2ca      	uxtb	r2, r1
1004d8da:	920e      	str	r2, [sp, #56]	@ 0x38
1004d8dc:	2200      	movs	r2, #0
1004d8de:	9206      	str	r2, [sp, #24]
1004d8e0:	460c      	mov	r4, r1
1004d8e2:	9203      	str	r2, [sp, #12]
1004d8e4:	4616      	mov	r6, r2
1004d8e6:	910d      	str	r1, [sp, #52]	@ 0x34
1004d8e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004d8ea:	4296      	cmp	r6, r2
1004d8ec:	d06e      	beq.n	1004d9cc <LL_sched_engine+0x268>
1004d8ee:	9612      	str	r6, [sp, #72]	@ 0x48
1004d8f0:	9410      	str	r4, [sp, #64]	@ 0x40
1004d8f2:	b2e3      	uxtb	r3, r4
1004d8f4:	2700      	movs	r7, #0
1004d8f6:	462c      	mov	r4, r5
1004d8f8:	463e      	mov	r6, r7
1004d8fa:	42bb      	cmp	r3, r7
1004d8fc:	d00d      	beq.n	1004d91a <LL_sched_engine+0x1b6>
1004d8fe:	aa13      	add	r2, sp, #76	@ 0x4c
1004d900:	5dd2      	ldrb	r2, [r2, r7]
1004d902:	252c      	movs	r5, #44	@ 0x2c
1004d904:	4355      	muls	r5, r2
1004d906:	5945      	ldr	r5, [r0, r5]
1004d908:	2f00      	cmp	r7, #0
1004d90a:	d002      	beq.n	1004d912 <LL_sched_engine+0x1ae>
1004d90c:	43f2      	mvns	r2, r6
1004d90e:	18aa      	adds	r2, r5, r2
1004d910:	d501      	bpl.n	1004d916 <LL_sched_engine+0x1b2>
1004d912:	463c      	mov	r4, r7
1004d914:	462e      	mov	r6, r5
1004d916:	1c7f      	adds	r7, r7, #1
1004d918:	e7ef      	b.n	1004d8fa <LL_sched_engine+0x196>
1004d91a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1004d91c:	1b4a      	subs	r2, r1, r5
1004d91e:	b2d2      	uxtb	r2, r2
1004d920:	1e51      	subs	r1, r2, #1
1004d922:	aa13      	add	r2, sp, #76	@ 0x4c
1004d924:	5c53      	ldrb	r3, [r2, r1]
1004d926:	b2e4      	uxtb	r4, r4
1004d928:	5d17      	ldrb	r7, [r2, r4]
1004d92a:	5457      	strb	r7, [r2, r1]
1004d92c:	5513      	strb	r3, [r2, r4]
1004d92e:	910f      	str	r1, [sp, #60]	@ 0x3c
1004d930:	b2cb      	uxtb	r3, r1
1004d932:	5cd3      	ldrb	r3, [r2, r3]
1004d934:	2d00      	cmp	r5, #0
1004d936:	d02e      	beq.n	1004d996 <LL_sched_engine+0x232>
1004d938:	461d      	mov	r5, r3
1004d93a:	9911      	ldr	r1, [sp, #68]	@ 0x44
1004d93c:	b2ca      	uxtb	r2, r1
1004d93e:	ac13      	add	r4, sp, #76	@ 0x4c
1004d940:	5ca4      	ldrb	r4, [r4, r2]
1004d942:	272c      	movs	r7, #44	@ 0x2c
1004d944:	437c      	muls	r4, r7
1004d946:	5902      	ldr	r2, [r0, r4]
1004d948:	1b91      	subs	r1, r2, r6
1004d94a:	1904      	adds	r4, r0, r4
1004d94c:	6863      	ldr	r3, [r4, #4]
1004d94e:	18c9      	adds	r1, r1, r3
1004d950:	3195      	adds	r1, #149	@ 0x95
1004d952:	d44a      	bmi.n	1004d9ea <LL_sched_engine+0x286>
1004d954:	43d1      	mvns	r1, r2
1004d956:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004d958:	1851      	adds	r1, r2, r1
1004d95a:	d449      	bmi.n	1004d9f0 <LL_sched_engine+0x28c>
1004d95c:	436f      	muls	r7, r5
1004d95e:	19c1      	adds	r1, r0, r7
1004d960:	7d8a      	ldrb	r2, [r1, #22]
1004d962:	7d0b      	ldrb	r3, [r1, #20]
1004d964:	4093      	lsls	r3, r2
1004d966:	7d49      	ldrb	r1, [r1, #21]
1004d968:	2601      	movs	r6, #1
1004d96a:	4632      	mov	r2, r6
1004d96c:	408a      	lsls	r2, r1
1004d96e:	429a      	cmp	r2, r3
1004d970:	d800      	bhi.n	1004d974 <LL_sched_engine+0x210>
1004d972:	4613      	mov	r3, r2
1004d974:	7da1      	ldrb	r1, [r4, #22]
1004d976:	7d27      	ldrb	r7, [r4, #20]
1004d978:	408f      	lsls	r7, r1
1004d97a:	7d61      	ldrb	r1, [r4, #21]
1004d97c:	408e      	lsls	r6, r1
1004d97e:	42be      	cmp	r6, r7
1004d980:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004d982:	d800      	bhi.n	1004d986 <LL_sched_engine+0x222>
1004d984:	4637      	mov	r7, r6
1004d986:	429f      	cmp	r7, r3
1004d988:	462b      	mov	r3, r5
1004d98a:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004d98c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1004d98e:	d300      	bcc.n	1004d992 <LL_sched_engine+0x22e>
1004d990:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004d992:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1004d994:	e011      	b.n	1004d9ba <LL_sched_engine+0x256>
1004d996:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004d998:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004d99a:	2a01      	cmp	r2, #1
1004d99c:	d101      	bne.n	1004d9a2 <LL_sched_engine+0x23e>
1004d99e:	2202      	movs	r2, #2
1004d9a0:	9206      	str	r2, [sp, #24]
1004d9a2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1004d9a4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1004d9a6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004d9a8:	222c      	movs	r2, #44	@ 0x2c
1004d9aa:	435a      	muls	r2, r3
1004d9ac:	5883      	ldr	r3, [r0, r2]
1004d9ae:	1882      	adds	r2, r0, r2
1004d9b0:	6852      	ldr	r2, [r2, #4]
1004d9b2:	189a      	adds	r2, r3, r2
1004d9b4:	3296      	adds	r2, #150	@ 0x96
1004d9b6:	920c      	str	r2, [sp, #48]	@ 0x30
1004d9b8:	462b      	mov	r3, r5
1004d9ba:	1e64      	subs	r4, r4, #1
1004d9bc:	1c76      	adds	r6, r6, #1
1004d9be:	9311      	str	r3, [sp, #68]	@ 0x44
1004d9c0:	e792      	b.n	1004d8e8 <LL_sched_engine+0x184>
1004d9c2:	2000      	movs	r0, #0
1004d9c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004d9c6:	6048      	str	r0, [r1, #4]
1004d9c8:	7388      	strb	r0, [r1, #14]
1004d9ca:	e02d      	b.n	1004da28 <LL_sched_engine+0x2c4>
1004d9cc:	9a03      	ldr	r2, [sp, #12]
1004d9ce:	4616      	mov	r6, r2
1004d9d0:	9b06      	ldr	r3, [sp, #24]
1004d9d2:	e013      	b.n	1004d9fc <LL_sched_engine+0x298>
1004d9d4:	1960      	adds	r0, r4, r5
1004d9d6:	7c80      	ldrb	r0, [r0, #18]
1004d9d8:	2810      	cmp	r0, #16
1004d9da:	d100      	bne.n	1004d9de <LL_sched_engine+0x27a>
1004d9dc:	e70a      	b.n	1004d7f4 <LL_sched_engine+0x90>
1004d9de:	2820      	cmp	r0, #32
1004d9e0:	d100      	bne.n	1004d9e4 <LL_sched_engine+0x280>
1004d9e2:	e707      	b.n	1004d7f4 <LL_sched_engine+0x90>
1004d9e4:	2400      	movs	r4, #0
1004d9e6:	463d      	mov	r5, r7
1004d9e8:	e021      	b.n	1004da2e <LL_sched_engine+0x2ca>
1004d9ea:	3e96      	subs	r6, #150	@ 0x96
1004d9ec:	9b04      	ldr	r3, [sp, #16]
1004d9ee:	e004      	b.n	1004d9fa <LL_sched_engine+0x296>
1004d9f0:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004d9f2:	1e40      	subs	r0, r0, #1
1004d9f4:	9011      	str	r0, [sp, #68]	@ 0x44
1004d9f6:	2600      	movs	r6, #0
1004d9f8:	4633      	mov	r3, r6
1004d9fa:	9a03      	ldr	r2, [sp, #12]
1004d9fc:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004d9fe:	b2c0      	uxtb	r0, r0
1004da00:	a913      	add	r1, sp, #76	@ 0x4c
1004da02:	5c0d      	ldrb	r5, [r1, r0]
1004da04:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004da06:	6042      	str	r2, [r0, #4]
1004da08:	7383      	strb	r3, [r0, #14]
1004da0a:	2dff      	cmp	r5, #255	@ 0xff
1004da0c:	d00c      	beq.n	1004da28 <LL_sched_engine+0x2c4>
1004da0e:	202c      	movs	r0, #44	@ 0x2c
1004da10:	4368      	muls	r0, r5
1004da12:	9907      	ldr	r1, [sp, #28]
1004da14:	1809      	adds	r1, r1, r0
1004da16:	b2d8      	uxtb	r0, r3
1004da18:	2801      	cmp	r0, #1
1004da1a:	910a      	str	r1, [sp, #40]	@ 0x28
1004da1c:	d105      	bne.n	1004da2a <LL_sched_engine+0x2c6>
1004da1e:	6808      	ldr	r0, [r1, #0]
1004da20:	1a30      	subs	r0, r6, r0
1004da22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004da24:	6048      	str	r0, [r1, #4]
1004da26:	e000      	b.n	1004da2a <LL_sched_engine+0x2c6>
1004da28:	25ff      	movs	r5, #255	@ 0xff
1004da2a:	9c01      	ldr	r4, [sp, #4]
1004da2c:	9f08      	ldr	r7, [sp, #32]
1004da2e:	f7f4 fd65 	bl	100424fc <BLEPLAT_CNTR_ClearSemareq>
1004da32:	482a      	ldr	r0, [pc, #168]	@ (1004dadc <__arm_cp.13_0>)
1004da34:	6800      	ldr	r0, [r0, #0]
1004da36:	2dff      	cmp	r5, #255	@ 0xff
1004da38:	d02f      	beq.n	1004da9a <LL_sched_engine+0x336>
1004da3a:	9711      	str	r7, [sp, #68]	@ 0x44
1004da3c:	9412      	str	r4, [sp, #72]	@ 0x48
1004da3e:	4604      	mov	r4, r0
1004da40:	2008      	movs	r0, #8
1004da42:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1004da44:	74b8      	strb	r0, [r7, #18]
1004da46:	f7fe fba2 	bl	1004c18e <llc_cte_timer_stop_ucfg_weak>
1004da4a:	7365      	strb	r5, [r4, #13]
1004da4c:	6a3a      	ldr	r2, [r7, #32]
1004da4e:	68f8      	ldr	r0, [r7, #12]
1004da50:	6879      	ldr	r1, [r7, #4]
1004da52:	4790      	blx	r2
1004da54:	683e      	ldr	r6, [r7, #0]
1004da56:	940b      	str	r4, [sp, #44]	@ 0x2c
1004da58:	6026      	str	r6, [r4, #0]
1004da5a:	4628      	mov	r0, r5
1004da5c:	f7f4 fd64 	bl	10042528 <BLEPLAT_CNTR_GlobWriteSlot>
1004da60:	f7f4 fd5b 	bl	1004251a <BLEPLAT_CNTR_GlobEnableBlue>
1004da64:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004da66:	2800      	cmp	r0, #0
1004da68:	d023      	beq.n	1004dab2 <LL_sched_engine+0x34e>
1004da6a:	7cf8      	ldrb	r0, [r7, #19]
1004da6c:	09c1      	lsrs	r1, r0, #7
1004da6e:	2201      	movs	r2, #1
1004da70:	4630      	mov	r0, r6
1004da72:	f7f4 f8eb 	bl	10041c4c <BLEPLAT_SetRadioTimerValue>
1004da76:	2800      	cmp	r0, #0
1004da78:	d01d      	beq.n	1004dab6 <LL_sched_engine+0x352>
1004da7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004da7c:	0040      	lsls	r0, r0, #1
1004da7e:	9009      	str	r0, [sp, #36]	@ 0x24
1004da80:	2810      	cmp	r0, #16
1004da82:	9f11      	ldr	r7, [sp, #68]	@ 0x44
1004da84:	d200      	bcs.n	1004da88 <LL_sched_engine+0x324>
1004da86:	e676      	b.n	1004d776 <LL_sched_engine+0x12>
1004da88:	f7fe fb80 	bl	1004c18c <llc_cte_timer_error_ucfg_weak>
1004da8c:	20a1      	movs	r0, #161	@ 0xa1
1004da8e:	2106      	movs	r1, #6
1004da90:	2200      	movs	r2, #0
1004da92:	4613      	mov	r3, r2
1004da94:	f000 fe1a 	bl	1004e6cc <aci_hal_fw_error_event_push_noinline>
1004da98:	e009      	b.n	1004daae <LL_sched_engine+0x34a>
1004da9a:	4604      	mov	r4, r0
1004da9c:	f7f4 f8f0 	bl	10041c80 <BLEPLAT_ClearRadioTimerValue>
1004daa0:	f7f4 fd34 	bl	1004250c <BLEPLAT_CNTR_GlobDisableBlue>
1004daa4:	2000      	movs	r0, #0
1004daa6:	73e0      	strb	r0, [r4, #15]
1004daa8:	20ff      	movs	r0, #255	@ 0xff
1004daaa:	0200      	lsls	r0, r0, #8
1004daac:	81a0      	strh	r0, [r4, #12]
1004daae:	9904      	ldr	r1, [sp, #16]
1004dab0:	e00f      	b.n	1004dad2 <LL_sched_engine+0x36e>
1004dab2:	f7f4 f8fd 	bl	10041cb0 <BLEPLAT_SetRadioCloseTimeout>
1004dab6:	9b04      	ldr	r3, [sp, #16]
1004dab8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004daba:	730b      	strb	r3, [r1, #12]
1004dabc:	7cf8      	ldrb	r0, [r7, #19]
1004dabe:	73c8      	strb	r0, [r1, #15]
1004dac0:	9a05      	ldr	r2, [sp, #20]
1004dac2:	60d6      	str	r6, [r2, #12]
1004dac4:	7c11      	ldrb	r1, [r2, #16]
1004dac6:	9c02      	ldr	r4, [sp, #8]
1004dac8:	4021      	ands	r1, r4
1004daca:	0100      	lsls	r0, r0, #4
1004dacc:	1808      	adds	r0, r1, r0
1004dace:	4619      	mov	r1, r3
1004dad0:	7410      	strb	r0, [r2, #16]
1004dad2:	4803      	ldr	r0, [pc, #12]	@ (1004dae0 <__arm_cp.13_1>)
1004dad4:	6800      	ldr	r0, [r0, #0]
1004dad6:	7201      	strb	r1, [r0, #8]
1004dad8:	b033      	add	sp, #204	@ 0xcc
1004dada:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004dadc <__arm_cp.13_0>:
1004dadc:	20000b64 	.word	0x20000b64

1004dae0 <__arm_cp.13_1>:
1004dae0:	20000b60 	.word	0x20000b60

1004dae4 <__arm_cp.13_2>:
1004dae4:	20000b68 	.word	0x20000b68

1004dae8 <__arm_cp.13_3>:
1004dae8:	fffffed4 	.word	0xfffffed4

1004daec <__arm_cp.13_4>:
1004daec:	20000b70 	.word	0x20000b70

1004daf0 <LL_sched_set_priority>:
1004daf0:	b510      	push	{r4, lr}
1004daf2:	231f      	movs	r3, #31
1004daf4:	401a      	ands	r2, r3
1004daf6:	242c      	movs	r4, #44	@ 0x2c
1004daf8:	4344      	muls	r4, r0
1004dafa:	4803      	ldr	r0, [pc, #12]	@ (1004db08 <__arm_cp.14_0>)
1004dafc:	6800      	ldr	r0, [r0, #0]
1004dafe:	1900      	adds	r0, r0, r4
1004db00:	7582      	strb	r2, [r0, #22]
1004db02:	4019      	ands	r1, r3
1004db04:	7541      	strb	r1, [r0, #21]
1004db06:	bd10      	pop	{r4, pc}

1004db08 <__arm_cp.14_0>:
1004db08:	20000b68 	.word	0x20000b68

1004db0c <LL_sched_reserve_taskslot>:
1004db0c:	b510      	push	{r4, lr}
1004db0e:	480e      	ldr	r0, [pc, #56]	@ (1004db48 <__arm_cp.22_0>)
1004db10:	6801      	ldr	r1, [r0, #0]
1004db12:	3128      	adds	r1, #40	@ 0x28
1004db14:	2000      	movs	r0, #0
1004db16:	4a0d      	ldr	r2, [pc, #52]	@ (1004db4c <__arm_cp.22_1>)
1004db18:	7ad3      	ldrb	r3, [r2, #11]
1004db1a:	4298      	cmp	r0, r3
1004db1c:	d20b      	bcs.n	1004db36 <LL_sched_reserve_taskslot+0x2a>
1004db1e:	f3ef 8310 	mrs	r3, PRIMASK
1004db22:	b672      	cpsid	i
1004db24:	460b      	mov	r3, r1
1004db26:	3b16      	subs	r3, #22
1004db28:	781c      	ldrb	r4, [r3, #0]
1004db2a:	2c00      	cmp	r4, #0
1004db2c:	d005      	beq.n	1004db3a <LL_sched_reserve_taskslot+0x2e>
1004db2e:	b662      	cpsie	i
1004db30:	312c      	adds	r1, #44	@ 0x2c
1004db32:	1c40      	adds	r0, r0, #1
1004db34:	e7f0      	b.n	1004db18 <LL_sched_reserve_taskslot+0xc>
1004db36:	20ff      	movs	r0, #255	@ 0xff
1004db38:	e004      	b.n	1004db44 <LL_sched_reserve_taskslot+0x38>
1004db3a:	2200      	movs	r2, #0
1004db3c:	600a      	str	r2, [r1, #0]
1004db3e:	2101      	movs	r1, #1
1004db40:	7019      	strb	r1, [r3, #0]
1004db42:	b662      	cpsie	i
1004db44:	b2c0      	uxtb	r0, r0
1004db46:	bd10      	pop	{r4, pc}

1004db48 <__arm_cp.22_0>:
1004db48:	20000b68 	.word	0x20000b68

1004db4c <__arm_cp.22_1>:
1004db4c:	20000b70 	.word	0x20000b70

1004db50 <LL_sched_release_taskslot>:
1004db50:	28ff      	cmp	r0, #255	@ 0xff
1004db52:	d006      	beq.n	1004db62 <LL_sched_release_taskslot+0x12>
1004db54:	212c      	movs	r1, #44	@ 0x2c
1004db56:	4341      	muls	r1, r0
1004db58:	4802      	ldr	r0, [pc, #8]	@ (1004db64 <__arm_cp.23_0>)
1004db5a:	6800      	ldr	r0, [r0, #0]
1004db5c:	1840      	adds	r0, r0, r1
1004db5e:	2100      	movs	r1, #0
1004db60:	8241      	strh	r1, [r0, #18]
1004db62:	4770      	bx	lr

1004db64 <__arm_cp.23_0>:
1004db64:	20000b68 	.word	0x20000b68

1004db68 <LL_sched_check_and_call_sched>:
1004db68:	b510      	push	{r4, lr}
1004db6a:	460c      	mov	r4, r1
1004db6c:	f3ef 8110 	mrs	r1, PRIMASK
1004db70:	b672      	cpsid	i
1004db72:	f7ff fddd 	bl	1004d730 <LL_sched_is_scheduler_call_pending>
1004db76:	b662      	cpsie	i
1004db78:	2800      	cmp	r0, #0
1004db7a:	d000      	beq.n	1004db7e <LL_sched_check_and_call_sched+0x16>
1004db7c:	bd10      	pop	{r4, pc}
1004db7e:	4620      	mov	r0, r4
1004db80:	f7ff fdf0 	bl	1004d764 <LL_sched_engine>
1004db84:	bd10      	pop	{r4, pc}
	...

1004db88 <LL_sched_check_and_wait_sched>:
1004db88:	b5b0      	push	{r4, r5, r7, lr}
1004db8a:	4604      	mov	r4, r0
1004db8c:	4813      	ldr	r0, [pc, #76]	@ (1004dbdc <__arm_cp.25_0>)
1004db8e:	7ac0      	ldrb	r0, [r0, #11]
1004db90:	42a0      	cmp	r0, r4
1004db92:	d922      	bls.n	1004dbda <LL_sched_check_and_wait_sched+0x52>
1004db94:	f3ef 8010 	mrs	r0, PRIMASK
1004db98:	b672      	cpsid	i
1004db9a:	25ff      	movs	r5, #255	@ 0xff
1004db9c:	35ec      	adds	r5, #236	@ 0xec
1004db9e:	f7f4 f82e 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004dba2:	1940      	adds	r0, r0, r5
1004dba4:	f7ff fdc4 	bl	1004d730 <LL_sched_is_scheduler_call_pending>
1004dba8:	4a0d      	ldr	r2, [pc, #52]	@ (1004dbe0 <__arm_cp.25_1>)
1004dbaa:	6813      	ldr	r3, [r2, #0]
1004dbac:	2100      	movs	r1, #0
1004dbae:	7219      	strb	r1, [r3, #8]
1004dbb0:	b662      	cpsie	i
1004dbb2:	2801      	cmp	r0, #1
1004dbb4:	d10c      	bne.n	1004dbd0 <LL_sched_check_and_wait_sched+0x48>
1004dbb6:	6810      	ldr	r0, [r2, #0]
1004dbb8:	6041      	str	r1, [r0, #4]
1004dbba:	4a0a      	ldr	r2, [pc, #40]	@ (1004dbe4 <__arm_cp.25_2>)
1004dbbc:	6843      	ldr	r3, [r0, #4]
1004dbbe:	4293      	cmp	r3, r2
1004dbc0:	d80b      	bhi.n	1004dbda <LL_sched_check_and_wait_sched+0x52>
1004dbc2:	7a03      	ldrb	r3, [r0, #8]
1004dbc4:	2b00      	cmp	r3, #0
1004dbc6:	d107      	bne.n	1004dbd8 <LL_sched_check_and_wait_sched+0x50>
1004dbc8:	6843      	ldr	r3, [r0, #4]
1004dbca:	1c5b      	adds	r3, r3, #1
1004dbcc:	6043      	str	r3, [r0, #4]
1004dbce:	e7f5      	b.n	1004dbbc <LL_sched_check_and_wait_sched+0x34>
1004dbd0:	4620      	mov	r0, r4
1004dbd2:	f7ff fdc7 	bl	1004d764 <LL_sched_engine>
1004dbd6:	bdb0      	pop	{r4, r5, r7, pc}
1004dbd8:	7201      	strb	r1, [r0, #8]
1004dbda:	bdb0      	pop	{r4, r5, r7, pc}

1004dbdc <__arm_cp.25_0>:
1004dbdc:	20000b70 	.word	0x20000b70

1004dbe0 <__arm_cp.25_1>:
1004dbe0:	20000b60 	.word	0x20000b60

1004dbe4 <__arm_cp.25_2>:
1004dbe4:	0004e1ff 	.word	0x0004e1ff

1004dbe8 <MBM_init_ucfg_weak>:
1004dbe8:	2000      	movs	r0, #0
1004dbea:	4770      	bx	lr

1004dbec <csmem_init>:
1004dbec:	4801      	ldr	r0, [pc, #4]	@ (1004dbf4 <__arm_cp.0_0>)
1004dbee:	6841      	ldr	r1, [r0, #4]
1004dbf0:	6001      	str	r1, [r0, #0]
1004dbf2:	4770      	bx	lr

1004dbf4 <__arm_cp.0_0>:
1004dbf4:	20000b6c 	.word	0x20000b6c

1004dbf8 <csmem_mem_assign>:
1004dbf8:	b570      	push	{r4, r5, r6, lr}
1004dbfa:	4614      	mov	r4, r2
1004dbfc:	4605      	mov	r5, r0
1004dbfe:	434c      	muls	r4, r1
1004dc00:	6800      	ldr	r0, [r0, #0]
1004dc02:	1e40      	subs	r0, r0, #1
1004dc04:	2103      	movs	r1, #3
1004dc06:	4301      	orrs	r1, r0
1004dc08:	1c4e      	adds	r6, r1, #1
1004dc0a:	2100      	movs	r1, #0
1004dc0c:	4630      	mov	r0, r6
1004dc0e:	4622      	mov	r2, r4
1004dc10:	f7f3 ff82 	bl	10041b18 <BLEPLAT_MemSet>
1004dc14:	1930      	adds	r0, r6, r4
1004dc16:	6028      	str	r0, [r5, #0]
1004dc18:	4630      	mov	r0, r6
1004dc1a:	bd70      	pop	{r4, r5, r6, pc}

1004dc1c <csmem_mem_0_assign>:
1004dc1c:	b580      	push	{r7, lr}
1004dc1e:	460a      	mov	r2, r1
1004dc20:	4601      	mov	r1, r0
1004dc22:	4802      	ldr	r0, [pc, #8]	@ (1004dc2c <__arm_cp.3_0>)
1004dc24:	f7ff ffe8 	bl	1004dbf8 <csmem_mem_assign>
1004dc28:	bd80      	pop	{r7, pc}
1004dc2a:	46c0      	nop			@ (mov r8, r8)

1004dc2c <__arm_cp.3_0>:
1004dc2c:	20000b6c 	.word	0x20000b6c

1004dc30 <BlueNRG_Stack_Initialize_RAM_check>:
1004dc30:	b5f0      	push	{r4, r5, r6, r7, lr}
1004dc32:	b097      	sub	sp, #92	@ 0x5c
1004dc34:	4ce5      	ldr	r4, [pc, #916]	@ (1004dfcc <__arm_cp.0_4>)
1004dc36:	2067      	movs	r0, #103	@ 0x67
1004dc38:	43c5      	mvns	r5, r0
1004dc3a:	f7fe f858 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004dc3e:	4ee4      	ldr	r6, [pc, #912]	@ (1004dfd0 <__arm_cp.0_5>)
1004dc40:	2801      	cmp	r0, #1
1004dc42:	d002      	beq.n	1004dc4a <BlueNRG_Stack_Initialize_RAM_check+0x1a>
1004dc44:	7af0      	ldrb	r0, [r6, #11]
1004dc46:	2800      	cmp	r0, #0
1004dc48:	d010      	beq.n	1004dc6c <BlueNRG_Stack_Initialize_RAM_check+0x3c>
1004dc4a:	4627      	mov	r7, r4
1004dc4c:	462c      	mov	r4, r5
1004dc4e:	3438      	adds	r4, #56	@ 0x38
1004dc50:	f7fe f84d 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004dc54:	7af1      	ldrb	r1, [r6, #11]
1004dc56:	4361      	muls	r1, r4
1004dc58:	4378      	muls	r0, r7
1004dc5a:	1838      	adds	r0, r7, r0
1004dc5c:	1844      	adds	r4, r0, r1
1004dc5e:	f7fe f846 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004dc62:	7af1      	ldrb	r1, [r6, #11]
1004dc64:	4341      	muls	r1, r0
1004dc66:	48db      	ldr	r0, [pc, #876]	@ (1004dfd4 <__arm_cp.0_6>)
1004dc68:	4348      	muls	r0, r1
1004dc6a:	1824      	adds	r4, r4, r0
1004dc6c:	3416      	adds	r4, #22
1004dc6e:	f7fe f83e 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004dc72:	2801      	cmp	r0, #1
1004dc74:	d10e      	bne.n	1004dc94 <BlueNRG_Stack_Initialize_RAM_check+0x64>
1004dc76:	4628      	mov	r0, r5
1004dc78:	3060      	adds	r0, #96	@ 0x60
1004dc7a:	8931      	ldrh	r1, [r6, #8]
1004dc7c:	4341      	muls	r1, r0
1004dc7e:	4628      	mov	r0, r5
1004dc80:	3044      	adds	r0, #68	@ 0x44
1004dc82:	7ab2      	ldrb	r2, [r6, #10]
1004dc84:	4342      	muls	r2, r0
1004dc86:	1850      	adds	r0, r2, r1
1004dc88:	4629      	mov	r1, r5
1004dc8a:	3148      	adds	r1, #72	@ 0x48
1004dc8c:	7b32      	ldrb	r2, [r6, #12]
1004dc8e:	434a      	muls	r2, r1
1004dc90:	1880      	adds	r0, r0, r2
1004dc92:	e000      	b.n	1004dc96 <BlueNRG_Stack_Initialize_RAM_check+0x66>
1004dc94:	2000      	movs	r0, #0
1004dc96:	9003      	str	r0, [sp, #12]
1004dc98:	89f0      	ldrh	r0, [r6, #14]
1004dc9a:	900a      	str	r0, [sp, #40]	@ 0x28
1004dc9c:	f7fe f81f 	bl	1004bcde <data_length_extension_csr_ucfg_weak>
1004dca0:	2801      	cmp	r0, #1
1004dca2:	d001      	beq.n	1004dca8 <BlueNRG_Stack_Initialize_RAM_check+0x78>
1004dca4:	f7ff fa83 	bl	1004d1ae <ext_adv_scan_enabled_ucfg_weak>
1004dca8:	f7fe f81d 	bl	1004bce6 <phy_upd_csr_ucfg_weak>
1004dcac:	2801      	cmp	r0, #1
1004dcae:	9411      	str	r4, [sp, #68]	@ 0x44
1004dcb0:	d109      	bne.n	1004dcc6 <BlueNRG_Stack_Initialize_RAM_check+0x96>
1004dcb2:	462c      	mov	r4, r5
1004dcb4:	3438      	adds	r4, #56	@ 0x38
1004dcb6:	f7fe f81a 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004dcba:	4360      	muls	r0, r4
1004dcbc:	7af1      	ldrb	r1, [r6, #11]
1004dcbe:	4341      	muls	r1, r0
1004dcc0:	3908      	subs	r1, #8
1004dcc2:	9109      	str	r1, [sp, #36]	@ 0x24
1004dcc4:	e001      	b.n	1004dcca <BlueNRG_Stack_Initialize_RAM_check+0x9a>
1004dcc6:	2000      	movs	r0, #0
1004dcc8:	9009      	str	r0, [sp, #36]	@ 0x24
1004dcca:	48f2      	ldr	r0, [pc, #968]	@ (1004e094 <__arm_cp.0_3>)
1004dccc:	304c      	adds	r0, #76	@ 0x4c
1004dcce:	9013      	str	r0, [sp, #76]	@ 0x4c
1004dcd0:	f7ff fa6d 	bl	1004d1ae <ext_adv_scan_enabled_ucfg_weak>
1004dcd4:	2801      	cmp	r0, #1
1004dcd6:	d015      	beq.n	1004dd04 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004dcd8:	f7fe f801 	bl	1004bcde <data_length_extension_csr_ucfg_weak>
1004dcdc:	2801      	cmp	r0, #1
1004dcde:	d011      	beq.n	1004dd04 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004dce0:	2029      	movs	r0, #41	@ 0x29
1004dce2:	5c30      	ldrb	r0, [r6, r0]
1004dce4:	2800      	cmp	r0, #0
1004dce6:	d10d      	bne.n	1004dd04 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004dce8:	2025      	movs	r0, #37	@ 0x25
1004dcea:	5c30      	ldrb	r0, [r6, r0]
1004dcec:	2800      	cmp	r0, #0
1004dcee:	d109      	bne.n	1004dd04 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004dcf0:	2026      	movs	r0, #38	@ 0x26
1004dcf2:	5c30      	ldrb	r0, [r6, r0]
1004dcf4:	2800      	cmp	r0, #0
1004dcf6:	d002      	beq.n	1004dcfe <BlueNRG_Stack_Initialize_RAM_check+0xce>
1004dcf8:	48e6      	ldr	r0, [pc, #920]	@ (1004e094 <__arm_cp.0_3>)
1004dcfa:	304c      	adds	r0, #76	@ 0x4c
1004dcfc:	e001      	b.n	1004dd02 <BlueNRG_Stack_Initialize_RAM_check+0xd2>
1004dcfe:	4628      	mov	r0, r5
1004dd00:	3024      	adds	r0, #36	@ 0x24
1004dd02:	9013      	str	r0, [sp, #76]	@ 0x4c
1004dd04:	48e3      	ldr	r0, [pc, #908]	@ (1004e094 <__arm_cp.0_3>)
1004dd06:	306c      	adds	r0, #108	@ 0x6c
1004dd08:	9012      	str	r0, [sp, #72]	@ 0x48
1004dd0a:	f7ff fa50 	bl	1004d1ae <ext_adv_scan_enabled_ucfg_weak>
1004dd0e:	2801      	cmp	r0, #1
1004dd10:	d015      	beq.n	1004dd3e <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004dd12:	f7fd ffe4 	bl	1004bcde <data_length_extension_csr_ucfg_weak>
1004dd16:	2801      	cmp	r0, #1
1004dd18:	d011      	beq.n	1004dd3e <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004dd1a:	2029      	movs	r0, #41	@ 0x29
1004dd1c:	5c30      	ldrb	r0, [r6, r0]
1004dd1e:	2800      	cmp	r0, #0
1004dd20:	d10d      	bne.n	1004dd3e <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004dd22:	2025      	movs	r0, #37	@ 0x25
1004dd24:	5c30      	ldrb	r0, [r6, r0]
1004dd26:	2800      	cmp	r0, #0
1004dd28:	d109      	bne.n	1004dd3e <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004dd2a:	2026      	movs	r0, #38	@ 0x26
1004dd2c:	5c30      	ldrb	r0, [r6, r0]
1004dd2e:	2800      	cmp	r0, #0
1004dd30:	d002      	beq.n	1004dd38 <BlueNRG_Stack_Initialize_RAM_check+0x108>
1004dd32:	48d8      	ldr	r0, [pc, #864]	@ (1004e094 <__arm_cp.0_3>)
1004dd34:	306c      	adds	r0, #108	@ 0x6c
1004dd36:	e001      	b.n	1004dd3c <BlueNRG_Stack_Initialize_RAM_check+0x10c>
1004dd38:	4628      	mov	r0, r5
1004dd3a:	303c      	adds	r0, #60	@ 0x3c
1004dd3c:	9012      	str	r0, [sp, #72]	@ 0x48
1004dd3e:	f7ff fa36 	bl	1004d1ae <ext_adv_scan_enabled_ucfg_weak>
1004dd42:	9010      	str	r0, [sp, #64]	@ 0x40
1004dd44:	7eb0      	ldrb	r0, [r6, #26]
1004dd46:	9000      	str	r0, [sp, #0]
1004dd48:	7ff0      	ldrb	r0, [r6, #31]
1004dd4a:	900f      	str	r0, [sp, #60]	@ 0x3c
1004dd4c:	f7fd ffcf 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004dd50:	9007      	str	r0, [sp, #28]
1004dd52:	7ff0      	ldrb	r0, [r6, #31]
1004dd54:	9001      	str	r0, [sp, #4]
1004dd56:	f7fe f9e9 	bl	1004c12c <llc_priv_controller_privacy_csr_ucfg_weak>
1004dd5a:	9008      	str	r0, [sp, #32]
1004dd5c:	7ff0      	ldrb	r0, [r6, #31]
1004dd5e:	9002      	str	r0, [sp, #8]
1004dd60:	f000 fa07 	bl	1004e172 <secure_connections_csr_ucfg_weak>
1004dd64:	2700      	movs	r7, #0
1004dd66:	f7fd ffc0 	bl	1004bcea <scan_csr_ucfg_weak>
1004dd6a:	2801      	cmp	r0, #1
1004dd6c:	4638      	mov	r0, r7
1004dd6e:	9515      	str	r5, [sp, #84]	@ 0x54
1004dd70:	9716      	str	r7, [sp, #88]	@ 0x58
1004dd72:	d14f      	bne.n	1004de14 <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
1004dd74:	7f70      	ldrb	r0, [r6, #29]
1004dd76:	280a      	cmp	r0, #10
1004dd78:	d300      	bcc.n	1004dd7c <BlueNRG_Stack_Initialize_RAM_check+0x14c>
1004dd7a:	200a      	movs	r0, #10
1004dd7c:	462c      	mov	r4, r5
1004dd7e:	3438      	adds	r4, #56	@ 0x38
1004dd80:	4344      	muls	r4, r0
1004dd82:	3cc0      	subs	r4, #192	@ 0xc0
1004dd84:	2500      	movs	r5, #0
1004dd86:	f7fe f9c9 	bl	1004c11c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004dd8a:	2801      	cmp	r0, #1
1004dd8c:	462f      	mov	r7, r5
1004dd8e:	d120      	bne.n	1004ddd2 <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
1004dd90:	f7fd ffad 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004dd94:	2801      	cmp	r0, #1
1004dd96:	950e      	str	r5, [sp, #56]	@ 0x38
1004dd98:	d003      	beq.n	1004dda2 <BlueNRG_Stack_Initialize_RAM_check+0x172>
1004dd9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004dd9c:	4618      	mov	r0, r3
1004dd9e:	3054      	adds	r0, #84	@ 0x54
1004dda0:	e002      	b.n	1004dda8 <BlueNRG_Stack_Initialize_RAM_check+0x178>
1004dda2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004dda4:	4618      	mov	r0, r3
1004dda6:	3048      	adds	r0, #72	@ 0x48
1004dda8:	49ba      	ldr	r1, [pc, #744]	@ (1004e094 <__arm_cp.0_3>)
1004ddaa:	31e0      	adds	r1, #224	@ 0xe0
1004ddac:	7fb2      	ldrb	r2, [r6, #30]
1004ddae:	434a      	muls	r2, r1
1004ddb0:	1810      	adds	r0, r2, r0
1004ddb2:	4619      	mov	r1, r3
1004ddb4:	3160      	adds	r1, #96	@ 0x60
1004ddb6:	7ff2      	ldrb	r2, [r6, #31]
1004ddb8:	4091      	lsls	r1, r2
1004ddba:	461d      	mov	r5, r3
1004ddbc:	1847      	adds	r7, r0, r1
1004ddbe:	f7fd ff96 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004ddc2:	2801      	cmp	r0, #1
1004ddc4:	d104      	bne.n	1004ddd0 <BlueNRG_Stack_Initialize_RAM_check+0x1a0>
1004ddc6:	4628      	mov	r0, r5
1004ddc8:	3050      	adds	r0, #80	@ 0x50
1004ddca:	7af1      	ldrb	r1, [r6, #11]
1004ddcc:	4341      	muls	r1, r0
1004ddce:	187f      	adds	r7, r7, r1
1004ddd0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1004ddd2:	19e0      	adds	r0, r4, r7
1004ddd4:	9014      	str	r0, [sp, #80]	@ 0x50
1004ddd6:	f7fe f9a3 	bl	1004c120 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004ddda:	4607      	mov	r7, r0
1004dddc:	f7fe f99e 	bl	1004c11c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004dde0:	4604      	mov	r4, r0
1004dde2:	403c      	ands	r4, r7
1004dde4:	f7fd ff83 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004dde8:	4020      	ands	r0, r4
1004ddea:	2801      	cmp	r0, #1
1004ddec:	d108      	bne.n	1004de00 <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
1004ddee:	7ef0      	ldrb	r0, [r6, #27]
1004ddf0:	1e40      	subs	r0, r0, #1
1004ddf2:	2103      	movs	r1, #3
1004ddf4:	4301      	orrs	r1, r0
1004ddf6:	7fb0      	ldrb	r0, [r6, #30]
1004ddf8:	22b0      	movs	r2, #176	@ 0xb0
1004ddfa:	4342      	muls	r2, r0
1004ddfc:	43d0      	mvns	r0, r2
1004ddfe:	1a45      	subs	r5, r0, r1
1004de00:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004de02:	1944      	adds	r4, r0, r5
1004de04:	f7ff f9d3 	bl	1004d1ae <ext_adv_scan_enabled_ucfg_weak>
1004de08:	4360      	muls	r0, r4
1004de0a:	49a2      	ldr	r1, [pc, #648]	@ (1004e094 <__arm_cp.0_3>)
1004de0c:	1808      	adds	r0, r1, r0
1004de0e:	302c      	adds	r0, #44	@ 0x2c
1004de10:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004de12:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004de14:	9006      	str	r0, [sp, #24]
1004de16:	f7fd ff6a 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004de1a:	2801      	cmp	r0, #1
1004de1c:	4639      	mov	r1, r7
1004de1e:	d109      	bne.n	1004de34 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1004de20:	f7fd ff67 	bl	1004bcf2 <l2c_cos_csr_ucfg_weak>
1004de24:	2801      	cmp	r0, #1
1004de26:	4639      	mov	r1, r7
1004de28:	d104      	bne.n	1004de34 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1004de2a:	2022      	movs	r0, #34	@ 0x22
1004de2c:	5c30      	ldrb	r0, [r6, r0]
1004de2e:	4629      	mov	r1, r5
1004de30:	3114      	adds	r1, #20
1004de32:	4341      	muls	r1, r0
1004de34:	9105      	str	r1, [sp, #20]
1004de36:	f7fe f971 	bl	1004c11c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004de3a:	2801      	cmp	r0, #1
1004de3c:	4638      	mov	r0, r7
1004de3e:	d121      	bne.n	1004de84 <BlueNRG_Stack_Initialize_RAM_check+0x254>
1004de40:	4894      	ldr	r0, [pc, #592]	@ (1004e094 <__arm_cp.0_3>)
1004de42:	30d4      	adds	r0, #212	@ 0xd4
1004de44:	7eb1      	ldrb	r1, [r6, #26]
1004de46:	4341      	muls	r1, r0
1004de48:	4628      	mov	r0, r5
1004de4a:	3048      	adds	r0, #72	@ 0x48
1004de4c:	7af2      	ldrb	r2, [r6, #11]
1004de4e:	4342      	muls	r2, r0
1004de50:	1854      	adds	r4, r2, r1
1004de52:	2700      	movs	r7, #0
1004de54:	f7fe f964 	bl	1004c120 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004de58:	2801      	cmp	r0, #1
1004de5a:	d110      	bne.n	1004de7e <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1004de5c:	f7fd ff47 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004de60:	2801      	cmp	r0, #1
1004de62:	d10c      	bne.n	1004de7e <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1004de64:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1004de66:	4610      	mov	r0, r2
1004de68:	3058      	adds	r0, #88	@ 0x58
1004de6a:	7f31      	ldrb	r1, [r6, #28]
1004de6c:	4341      	muls	r1, r0
1004de6e:	4610      	mov	r0, r2
1004de70:	3060      	adds	r0, #96	@ 0x60
1004de72:	7ef2      	ldrb	r2, [r6, #27]
1004de74:	4342      	muls	r2, r0
1004de76:	1850      	adds	r0, r2, r1
1004de78:	3884      	subs	r0, #132	@ 0x84
1004de7a:	7eb7      	ldrb	r7, [r6, #26]
1004de7c:	4347      	muls	r7, r0
1004de7e:	19e0      	adds	r0, r4, r7
1004de80:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004de82:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004de84:	900e      	str	r0, [sp, #56]	@ 0x38
1004de86:	f7fd ff26 	bl	1004bcd6 <cte_csr_ucfg_weak>
1004de8a:	2801      	cmp	r0, #1
1004de8c:	4638      	mov	r0, r7
1004de8e:	d133      	bne.n	1004def8 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
1004de90:	f7fd ff2d 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004de94:	2801      	cmp	r0, #1
1004de96:	d002      	beq.n	1004de9e <BlueNRG_Stack_Initialize_RAM_check+0x26e>
1004de98:	462f      	mov	r7, r5
1004de9a:	375c      	adds	r7, #92	@ 0x5c
1004de9c:	e004      	b.n	1004dea8 <BlueNRG_Stack_Initialize_RAM_check+0x278>
1004de9e:	4628      	mov	r0, r5
1004dea0:	3060      	adds	r0, #96	@ 0x60
1004dea2:	7af7      	ldrb	r7, [r6, #11]
1004dea4:	4347      	muls	r7, r0
1004dea6:	3f0c      	subs	r7, #12
1004dea8:	2523      	movs	r5, #35	@ 0x23
1004deaa:	5d70      	ldrb	r0, [r6, r5]
1004deac:	2400      	movs	r4, #0
1004deae:	2800      	cmp	r0, #0
1004deb0:	4620      	mov	r0, r4
1004deb2:	d005      	beq.n	1004dec0 <BlueNRG_Stack_Initialize_RAM_check+0x290>
1004deb4:	f7fd ff1b 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004deb8:	5d70      	ldrb	r0, [r6, r5]
1004deba:	4240      	negs	r0, r0
1004debc:	2103      	movs	r1, #3
1004debe:	4388      	bics	r0, r1
1004dec0:	19c0      	adds	r0, r0, r7
1004dec2:	2724      	movs	r7, #36	@ 0x24
1004dec4:	5df1      	ldrb	r1, [r6, r7]
1004dec6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1004dec8:	3264      	adds	r2, #100	@ 0x64
1004deca:	434a      	muls	r2, r1
1004decc:	1885      	adds	r5, r0, r2
1004dece:	f7fd ff0c 	bl	1004bcea <scan_csr_ucfg_weak>
1004ded2:	2801      	cmp	r0, #1
1004ded4:	d10d      	bne.n	1004def2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004ded6:	f7ff f96a 	bl	1004d1ae <ext_adv_scan_enabled_ucfg_weak>
1004deda:	2801      	cmp	r0, #1
1004dedc:	d109      	bne.n	1004def2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004dede:	f7fe f91d 	bl	1004c11c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004dee2:	2801      	cmp	r0, #1
1004dee4:	d105      	bne.n	1004def2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004dee6:	5df4      	ldrb	r4, [r6, r7]
1004dee8:	2c00      	cmp	r4, #0
1004deea:	9815      	ldr	r0, [sp, #84]	@ 0x54
1004deec:	d001      	beq.n	1004def2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004deee:	4604      	mov	r4, r0
1004def0:	3450      	adds	r4, #80	@ 0x50
1004def2:	1928      	adds	r0, r5, r4
1004def4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004def6:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004def8:	900d      	str	r0, [sp, #52]	@ 0x34
1004defa:	f7fd fef8 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004defe:	2801      	cmp	r0, #1
1004df00:	4639      	mov	r1, r7
1004df02:	d109      	bne.n	1004df18 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1004df04:	f7fd feed 	bl	1004bce2 <pcl_csr_ucfg_weak>
1004df08:	2801      	cmp	r0, #1
1004df0a:	4639      	mov	r1, r7
1004df0c:	d104      	bne.n	1004df18 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1004df0e:	4628      	mov	r0, r5
1004df10:	3048      	adds	r0, #72	@ 0x48
1004df12:	7af1      	ldrb	r1, [r6, #11]
1004df14:	4341      	muls	r1, r0
1004df16:	3914      	subs	r1, #20
1004df18:	910c      	str	r1, [sp, #48]	@ 0x30
1004df1a:	f7fd fee8 	bl	1004bcee <conn_supp_csr_ucfg_weak>
1004df1e:	2801      	cmp	r0, #1
1004df20:	463a      	mov	r2, r7
1004df22:	d108      	bne.n	1004df36 <BlueNRG_Stack_Initialize_RAM_check+0x306>
1004df24:	f7fd fe5e 	bl	1004bbe4 <chc_csr_ucfg_weak>
1004df28:	2801      	cmp	r0, #1
1004df2a:	463a      	mov	r2, r7
1004df2c:	d103      	bne.n	1004df36 <BlueNRG_Stack_Initialize_RAM_check+0x306>
1004df2e:	4628      	mov	r0, r5
1004df30:	304c      	adds	r0, #76	@ 0x4c
1004df32:	7af2      	ldrb	r2, [r6, #11]
1004df34:	4342      	muls	r2, r0
1004df36:	2026      	movs	r0, #38	@ 0x26
1004df38:	5c31      	ldrb	r1, [r6, r0]
1004df3a:	2025      	movs	r0, #37	@ 0x25
1004df3c:	5c34      	ldrb	r4, [r6, r0]
1004df3e:	1863      	adds	r3, r4, r1
1004df40:	2029      	movs	r0, #41	@ 0x29
1004df42:	5c30      	ldrb	r0, [r6, r0]
1004df44:	9304      	str	r3, [sp, #16]
1004df46:	2b00      	cmp	r3, #0
1004df48:	9014      	str	r0, [sp, #80]	@ 0x50
1004df4a:	d010      	beq.n	1004df6e <BlueNRG_Stack_Initialize_RAM_check+0x33e>
1004df4c:	2028      	movs	r0, #40	@ 0x28
1004df4e:	5c33      	ldrb	r3, [r6, r0]
1004df50:	4628      	mov	r0, r5
1004df52:	3060      	adds	r0, #96	@ 0x60
1004df54:	4358      	muls	r0, r3
1004df56:	38f8      	subs	r0, #248	@ 0xf8
1004df58:	4348      	muls	r0, r1
1004df5a:	2327      	movs	r3, #39	@ 0x27
1004df5c:	5cf3      	ldrb	r3, [r6, r3]
1004df5e:	3554      	adds	r5, #84	@ 0x54
1004df60:	435d      	muls	r5, r3
1004df62:	4b4c      	ldr	r3, [pc, #304]	@ (1004e094 <__arm_cp.0_3>)
1004df64:	195b      	adds	r3, r3, r5
1004df66:	3348      	adds	r3, #72	@ 0x48
1004df68:	4363      	muls	r3, r4
1004df6a:	181f      	adds	r7, r3, r0
1004df6c:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004df6e:	2800      	cmp	r0, #0
1004df70:	9716      	str	r7, [sp, #88]	@ 0x58
1004df72:	920b      	str	r2, [sp, #44]	@ 0x2c
1004df74:	d00d      	beq.n	1004df92 <BlueNRG_Stack_Initialize_RAM_check+0x362>
1004df76:	4602      	mov	r2, r0
1004df78:	202a      	movs	r0, #42	@ 0x2a
1004df7a:	5c30      	ldrb	r0, [r6, r0]
1004df7c:	4d45      	ldr	r5, [pc, #276]	@ (1004e094 <__arm_cp.0_3>)
1004df7e:	462b      	mov	r3, r5
1004df80:	33b0      	adds	r3, #176	@ 0xb0
1004df82:	4343      	muls	r3, r0
1004df84:	4637      	mov	r7, r6
1004df86:	462e      	mov	r6, r5
1004df88:	36c8      	adds	r6, #200	@ 0xc8
1004df8a:	4356      	muls	r6, r2
1004df8c:	18f3      	adds	r3, r6, r3
1004df8e:	3b48      	subs	r3, #72	@ 0x48
1004df90:	e003      	b.n	1004df9a <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1004df92:	202a      	movs	r0, #42	@ 0x2a
1004df94:	5c30      	ldrb	r0, [r6, r0]
1004df96:	2300      	movs	r3, #0
1004df98:	4637      	mov	r7, r6
1004df9a:	2628      	movs	r6, #40	@ 0x28
1004df9c:	5dbe      	ldrb	r6, [r7, r6]
1004df9e:	4371      	muls	r1, r6
1004dfa0:	1809      	adds	r1, r1, r0
1004dfa2:	2627      	movs	r6, #39	@ 0x27
1004dfa4:	463d      	mov	r5, r7
1004dfa6:	5dbe      	ldrb	r6, [r7, r6]
1004dfa8:	4374      	muls	r4, r6
1004dfaa:	1824      	adds	r4, r4, r0
1004dfac:	1860      	adds	r0, r4, r1
1004dfae:	d013      	beq.n	1004dfd8 <__arm_cp.0_6+0x4>
1004dfb0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1004dfb2:	463e      	mov	r6, r7
1004dfb4:	364c      	adds	r6, #76	@ 0x4c
1004dfb6:	4366      	muls	r6, r4
1004dfb8:	463c      	mov	r4, r7
1004dfba:	3434      	adds	r4, #52	@ 0x34
1004dfbc:	434c      	muls	r4, r1
1004dfbe:	19a1      	adds	r1, r4, r6
1004dfc0:	463c      	mov	r4, r7
1004dfc2:	345c      	adds	r4, #92	@ 0x5c
1004dfc4:	4344      	muls	r4, r0
1004dfc6:	190c      	adds	r4, r1, r4
1004dfc8:	3c14      	subs	r4, #20
1004dfca:	e007      	b.n	1004dfdc <__arm_cp.0_6+0x8>

1004dfcc <__arm_cp.0_4>:
1004dfcc:	fffffc18 	.word	0xfffffc18

1004dfd0 <__arm_cp.0_5>:
1004dfd0:	20000b70 	.word	0x20000b70

1004dfd4 <__arm_cp.0_6>:
1004dfd4:	fffffd70 	.word	0xfffffd70
1004dfd8:	2400      	movs	r4, #0
1004dfda:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1004dfdc:	9903      	ldr	r1, [sp, #12]
1004dfde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1004dfe0:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004dfe2:	1808      	adds	r0, r1, r0
1004dfe4:	4639      	mov	r1, r7
1004dfe6:	3144      	adds	r1, #68	@ 0x44
1004dfe8:	4371      	muls	r1, r6
1004dfea:	1840      	adds	r0, r0, r1
1004dfec:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004dfee:	1840      	adds	r0, r0, r1
1004dff0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004dff2:	1840      	adds	r0, r0, r1
1004dff4:	9912      	ldr	r1, [sp, #72]	@ 0x48
1004dff6:	1841      	adds	r1, r0, r1
1004dff8:	4638      	mov	r0, r7
1004dffa:	3060      	adds	r0, #96	@ 0x60
1004dffc:	4606      	mov	r6, r0
1004dffe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1004e000:	4096      	lsls	r6, r2
1004e002:	1989      	adds	r1, r1, r6
1004e004:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1004e006:	2a01      	cmp	r2, #1
1004e008:	d106      	bne.n	1004e018 <__arm_cp.0_6+0x44>
1004e00a:	4e22      	ldr	r6, [pc, #136]	@ (1004e094 <__arm_cp.0_3>)
1004e00c:	9a00      	ldr	r2, [sp, #0]
1004e00e:	4356      	muls	r6, r2
1004e010:	1871      	adds	r1, r6, r1
1004e012:	2645      	movs	r6, #69	@ 0x45
1004e014:	00b6      	lsls	r6, r6, #2
1004e016:	1989      	adds	r1, r1, r6
1004e018:	462e      	mov	r6, r5
1004e01a:	9d07      	ldr	r5, [sp, #28]
1004e01c:	9a05      	ldr	r2, [sp, #20]
1004e01e:	2d01      	cmp	r5, #1
1004e020:	d102      	bne.n	1004e028 <__arm_cp.0_6+0x54>
1004e022:	9d01      	ldr	r5, [sp, #4]
1004e024:	40a8      	lsls	r0, r5
1004e026:	1809      	adds	r1, r1, r0
1004e028:	9808      	ldr	r0, [sp, #32]
1004e02a:	2801      	cmp	r0, #1
1004e02c:	d105      	bne.n	1004e03a <__arm_cp.0_6+0x66>
1004e02e:	4638      	mov	r0, r7
1004e030:	3018      	adds	r0, #24
1004e032:	9d02      	ldr	r5, [sp, #8]
1004e034:	40a8      	lsls	r0, r5
1004e036:	1841      	adds	r1, r0, r1
1004e038:	3970      	subs	r1, #112	@ 0x70
1004e03a:	9806      	ldr	r0, [sp, #24]
1004e03c:	9d04      	ldr	r5, [sp, #16]
1004e03e:	1808      	adds	r0, r1, r0
1004e040:	1880      	adds	r0, r0, r2
1004e042:	990e      	ldr	r1, [sp, #56]	@ 0x38
1004e044:	1840      	adds	r0, r0, r1
1004e046:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004e048:	1840      	adds	r0, r0, r1
1004e04a:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004e04c:	1840      	adds	r0, r0, r1
1004e04e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004e050:	1840      	adds	r0, r0, r1
1004e052:	9914      	ldr	r1, [sp, #80]	@ 0x50
1004e054:	42cd      	cmn	r5, r1
1004e056:	d001      	beq.n	1004e05c <__arm_cp.0_6+0x88>
1004e058:	1838      	adds	r0, r7, r0
1004e05a:	3058      	adds	r0, #88	@ 0x58
1004e05c:	9916      	ldr	r1, [sp, #88]	@ 0x58
1004e05e:	1840      	adds	r0, r0, r1
1004e060:	18c0      	adds	r0, r0, r3
1004e062:	1904      	adds	r4, r0, r4
1004e064:	f7fc ff4f 	bl	1004af06 <log_csr_ucfg_weak>
1004e068:	2801      	cmp	r0, #1
1004e06a:	d100      	bne.n	1004e06e <__arm_cp.0_6+0x9a>
1004e06c:	19e4      	adds	r4, r4, r7
1004e06e:	6870      	ldr	r0, [r6, #4]
1004e070:	1820      	adds	r0, r4, r0
1004e072:	2103      	movs	r1, #3
1004e074:	43c9      	mvns	r1, r1
1004e076:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
1004e078:	1cd2      	adds	r2, r2, #3
1004e07a:	400a      	ands	r2, r1
1004e07c:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1004e07e:	1cdb      	adds	r3, r3, #3
1004e080:	400b      	ands	r3, r1
1004e082:	189a      	adds	r2, r3, r2
1004e084:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1004e086:	1cdb      	adds	r3, r3, #3
1004e088:	400b      	ands	r3, r1
1004e08a:	18d1      	adds	r1, r2, r3
1004e08c:	1a40      	subs	r0, r0, r1
1004e08e:	b017      	add	sp, #92	@ 0x5c
1004e090:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e092:	46c0      	nop			@ (mov r8, r8)

1004e094 <__arm_cp.0_3>:
1004e094:	fffffe90 	.word	0xfffffe90

1004e098 <smp_crt_diversify>:
1004e098:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1004e09a:	780d      	ldrb	r5, [r1, #0]
1004e09c:	466c      	mov	r4, sp
1004e09e:	7025      	strb	r5, [r4, #0]
1004e0a0:	7849      	ldrb	r1, [r1, #1]
1004e0a2:	7061      	strb	r1, [r4, #1]
1004e0a4:	7811      	ldrb	r1, [r2, #0]
1004e0a6:	70a1      	strb	r1, [r4, #2]
1004e0a8:	7851      	ldrb	r1, [r2, #1]
1004e0aa:	70e1      	strb	r1, [r4, #3]
1004e0ac:	2100      	movs	r1, #0
1004e0ae:	9103      	str	r1, [sp, #12]
1004e0b0:	9102      	str	r1, [sp, #8]
1004e0b2:	9101      	str	r1, [sp, #4]
1004e0b4:	4621      	mov	r1, r4
1004e0b6:	461a      	mov	r2, r3
1004e0b8:	f000 fb8a 	bl	1004e7d0 <hci_le_encrypt>
1004e0bc:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

1004e0c0 <smp_sap_crt_generate_local_irk>:
1004e0c0:	b5e0      	push	{r5, r6, r7, lr}
1004e0c2:	4603      	mov	r3, r0
1004e0c4:	a901      	add	r1, sp, #4
1004e0c6:	2001      	movs	r0, #1
1004e0c8:	8008      	strh	r0, [r1, #0]
1004e0ca:	466a      	mov	r2, sp
1004e0cc:	2000      	movs	r0, #0
1004e0ce:	8010      	strh	r0, [r2, #0]
1004e0d0:	4802      	ldr	r0, [pc, #8]	@ (1004e0dc <__arm_cp.2_0>)
1004e0d2:	6800      	ldr	r0, [r0, #0]
1004e0d4:	3018      	adds	r0, #24
1004e0d6:	f7ff ffdf 	bl	1004e098 <smp_crt_diversify>
1004e0da:	bd8c      	pop	{r2, r3, r7, pc}

1004e0dc <__arm_cp.2_0>:
1004e0dc:	20000b50 	.word	0x20000b50

1004e0e0 <smp_sap_crt_generate_rpa>:
1004e0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e0e2:	b087      	sub	sp, #28
1004e0e4:	9000      	str	r0, [sp, #0]
1004e0e6:	ae03      	add	r6, sp, #12
1004e0e8:	4630      	mov	r0, r6
1004e0ea:	f7ff ffe9 	bl	1004e0c0 <smp_sap_crt_generate_local_irk>
1004e0ee:	2700      	movs	r7, #0
1004e0f0:	4638      	mov	r0, r7
1004e0f2:	f000 fa48 	bl	1004e586 <Hal_Get_Random_Number>
1004e0f6:	0a01      	lsrs	r1, r0, #8
1004e0f8:	ad02      	add	r5, sp, #8
1004e0fa:	7069      	strb	r1, [r5, #1]
1004e0fc:	243f      	movs	r4, #63	@ 0x3f
1004e0fe:	4004      	ands	r4, r0
1004e100:	3440      	adds	r4, #64	@ 0x40
1004e102:	4638      	mov	r0, r7
1004e104:	f000 fa3f 	bl	1004e586 <Hal_Get_Random_Number>
1004e108:	70ac      	strb	r4, [r5, #2]
1004e10a:	7028      	strb	r0, [r5, #0]
1004e10c:	af01      	add	r7, sp, #4
1004e10e:	4630      	mov	r0, r6
1004e110:	4629      	mov	r1, r5
1004e112:	463a      	mov	r2, r7
1004e114:	f000 f80e 	bl	1004e134 <smp_crt_calculate_hash>
1004e118:	2603      	movs	r6, #3
1004e11a:	9c00      	ldr	r4, [sp, #0]
1004e11c:	4620      	mov	r0, r4
1004e11e:	4639      	mov	r1, r7
1004e120:	4632      	mov	r2, r6
1004e122:	f7f3 fce9 	bl	10041af8 <BLEPLAT_MemCpy>
1004e126:	1ce0      	adds	r0, r4, #3
1004e128:	4629      	mov	r1, r5
1004e12a:	4632      	mov	r2, r6
1004e12c:	f7f3 fce4 	bl	10041af8 <BLEPLAT_MemCpy>
1004e130:	b007      	add	sp, #28
1004e132:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004e134 <smp_crt_calculate_hash>:
1004e134:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e136:	b089      	sub	sp, #36	@ 0x24
1004e138:	9200      	str	r2, [sp, #0]
1004e13a:	460f      	mov	r7, r1
1004e13c:	4605      	mov	r5, r0
1004e13e:	ae05      	add	r6, sp, #20
1004e140:	2100      	movs	r1, #0
1004e142:	2210      	movs	r2, #16
1004e144:	4630      	mov	r0, r6
1004e146:	f7f3 fce7 	bl	10041b18 <BLEPLAT_MemSet>
1004e14a:	2403      	movs	r4, #3
1004e14c:	4630      	mov	r0, r6
1004e14e:	4639      	mov	r1, r7
1004e150:	4622      	mov	r2, r4
1004e152:	f7f3 fcd1 	bl	10041af8 <BLEPLAT_MemCpy>
1004e156:	af01      	add	r7, sp, #4
1004e158:	4628      	mov	r0, r5
1004e15a:	4631      	mov	r1, r6
1004e15c:	463a      	mov	r2, r7
1004e15e:	f000 fb37 	bl	1004e7d0 <hci_le_encrypt>
1004e162:	9800      	ldr	r0, [sp, #0]
1004e164:	4639      	mov	r1, r7
1004e166:	4622      	mov	r2, r4
1004e168:	f7f3 fcc6 	bl	10041af8 <BLEPLAT_MemCpy>
1004e16c:	b009      	add	sp, #36	@ 0x24
1004e16e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004e170 <smp_init_ucfg_weak>:
1004e170:	4770      	bx	lr

1004e172 <secure_connections_csr_ucfg_weak>:
1004e172:	2000      	movs	r0, #0
1004e174:	4770      	bx	lr

1004e176 <nvm_dev_id_data_get_record>:
1004e176:	b5e0      	push	{r5, r6, r7, lr}
1004e178:	4603      	mov	r3, r0
1004e17a:	2026      	movs	r0, #38	@ 0x26
1004e17c:	9000      	str	r0, [sp, #0]
1004e17e:	2102      	movs	r1, #2
1004e180:	2000      	movs	r0, #0
1004e182:	4602      	mov	r2, r0
1004e184:	f7f3 fc40 	bl	10041a08 <BLEPLAT_NvmGet>
1004e188:	2800      	cmp	r0, #0
1004e18a:	d000      	beq.n	1004e18e <nvm_dev_id_data_get_record+0x18>
1004e18c:	2081      	movs	r0, #129	@ 0x81
1004e18e:	bd8c      	pop	{r2, r3, r7, pc}

1004e190 <nvm_dev_id_data_add_record>:
1004e190:	b5e0      	push	{r5, r6, r7, lr}
1004e192:	4601      	mov	r1, r0
1004e194:	2300      	movs	r3, #0
1004e196:	9300      	str	r3, [sp, #0]
1004e198:	2002      	movs	r0, #2
1004e19a:	2226      	movs	r2, #38	@ 0x26
1004e19c:	f7f3 fbe6 	bl	1004196c <BLEPLAT_NvmAdd>
1004e1a0:	2800      	cmp	r0, #0
1004e1a2:	d000      	beq.n	1004e1a6 <nvm_dev_id_data_add_record+0x16>
1004e1a4:	2081      	movs	r0, #129	@ 0x81
1004e1a6:	bd8c      	pop	{r2, r3, r7, pc}

1004e1a8 <tsk_init>:
1004e1a8:	4803      	ldr	r0, [pc, #12]	@ (1004e1b8 <__arm_cp.0_0>)
1004e1aa:	6800      	ldr	r0, [r0, #0]
1004e1ac:	2100      	movs	r1, #0
1004e1ae:	6081      	str	r1, [r0, #8]
1004e1b0:	60c1      	str	r1, [r0, #12]
1004e1b2:	6101      	str	r1, [r0, #16]
1004e1b4:	6001      	str	r1, [r0, #0]
1004e1b6:	4770      	bx	lr

1004e1b8 <__arm_cp.0_0>:
1004e1b8:	20000ba4 	.word	0x20000ba4

1004e1bc <tsk_scheduler>:
1004e1bc:	b570      	push	{r4, r5, r6, lr}
1004e1be:	4d17      	ldr	r5, [pc, #92]	@ (1004e21c <__arm_cp.1_0>)
1004e1c0:	6828      	ldr	r0, [r5, #0]
1004e1c2:	f3ef 8110 	mrs	r1, PRIMASK
1004e1c6:	b672      	cpsid	i
1004e1c8:	6801      	ldr	r1, [r0, #0]
1004e1ca:	2600      	movs	r6, #0
1004e1cc:	6006      	str	r6, [r0, #0]
1004e1ce:	6842      	ldr	r2, [r0, #4]
1004e1d0:	430a      	orrs	r2, r1
1004e1d2:	6042      	str	r2, [r0, #4]
1004e1d4:	b662      	cpsie	i
1004e1d6:	682c      	ldr	r4, [r5, #0]
1004e1d8:	3410      	adds	r4, #16
1004e1da:	6820      	ldr	r0, [r4, #0]
1004e1dc:	2800      	cmp	r0, #0
1004e1de:	d00f      	beq.n	1004e200 <tsk_scheduler+0x44>
1004e1e0:	4620      	mov	r0, r4
1004e1e2:	f000 f83b 	bl	1004e25c <lsbit>
1004e1e6:	0080      	lsls	r0, r0, #2
1004e1e8:	6829      	ldr	r1, [r5, #0]
1004e1ea:	1808      	adds	r0, r1, r0
1004e1ec:	f3ef 8210 	mrs	r2, PRIMASK
1004e1f0:	b672      	cpsid	i
1004e1f2:	6882      	ldr	r2, [r0, #8]
1004e1f4:	6086      	str	r6, [r0, #8]
1004e1f6:	6848      	ldr	r0, [r1, #4]
1004e1f8:	4310      	orrs	r0, r2
1004e1fa:	6048      	str	r0, [r1, #4]
1004e1fc:	b662      	cpsie	i
1004e1fe:	e7ec      	b.n	1004e1da <tsk_scheduler+0x1e>
1004e200:	6828      	ldr	r0, [r5, #0]
1004e202:	1d04      	adds	r4, r0, #4
1004e204:	4d06      	ldr	r5, [pc, #24]	@ (1004e220 <__arm_cp.1_1>)
1004e206:	6820      	ldr	r0, [r4, #0]
1004e208:	2800      	cmp	r0, #0
1004e20a:	d006      	beq.n	1004e21a <tsk_scheduler+0x5e>
1004e20c:	4620      	mov	r0, r4
1004e20e:	f000 f825 	bl	1004e25c <lsbit>
1004e212:	0081      	lsls	r1, r0, #2
1004e214:	5869      	ldr	r1, [r5, r1]
1004e216:	4788      	blx	r1
1004e218:	e7f5      	b.n	1004e206 <tsk_scheduler+0x4a>
1004e21a:	bd70      	pop	{r4, r5, r6, pc}

1004e21c <__arm_cp.1_0>:
1004e21c:	20000ba4 	.word	0x20000ba4

1004e220 <__arm_cp.1_1>:
1004e220:	1004ff40 	.word	0x1004ff40

1004e224 <tsk_no_idle_check>:
1004e224:	4803      	ldr	r0, [pc, #12]	@ (1004e234 <__arm_cp.2_0>)
1004e226:	6800      	ldr	r0, [r0, #0]
1004e228:	6801      	ldr	r1, [r0, #0]
1004e22a:	6900      	ldr	r0, [r0, #16]
1004e22c:	4308      	orrs	r0, r1
1004e22e:	1e41      	subs	r1, r0, #1
1004e230:	4188      	sbcs	r0, r1
1004e232:	4770      	bx	lr

1004e234 <__arm_cp.2_0>:
1004e234:	20000ba4 	.word	0x20000ba4

1004e238 <tsk_notify_idx>:
1004e238:	211f      	movs	r1, #31
1004e23a:	4001      	ands	r1, r0
1004e23c:	2201      	movs	r2, #1
1004e23e:	408a      	lsls	r2, r1
1004e240:	f3ef 8110 	mrs	r1, PRIMASK
1004e244:	b672      	cpsid	i
1004e246:	4904      	ldr	r1, [pc, #16]	@ (1004e258 <__arm_cp.3_0>)
1004e248:	6809      	ldr	r1, [r1, #0]
1004e24a:	0940      	lsrs	r0, r0, #5
1004e24c:	0080      	lsls	r0, r0, #2
1004e24e:	580b      	ldr	r3, [r1, r0]
1004e250:	4313      	orrs	r3, r2
1004e252:	500b      	str	r3, [r1, r0]
1004e254:	b662      	cpsie	i
1004e256:	4770      	bx	lr

1004e258 <__arm_cp.3_0>:
1004e258:	20000ba4 	.word	0x20000ba4

1004e25c <lsbit>:
1004e25c:	f3ef 8110 	mrs	r1, PRIMASK
1004e260:	b672      	cpsid	i
1004e262:	6801      	ldr	r1, [r0, #0]
1004e264:	424a      	negs	r2, r1
1004e266:	400a      	ands	r2, r1
1004e268:	4051      	eors	r1, r2
1004e26a:	6001      	str	r1, [r0, #0]
1004e26c:	4803      	ldr	r0, [pc, #12]	@ (1004e27c <__arm_cp.7_0>)
1004e26e:	4350      	muls	r0, r2
1004e270:	0ec0      	lsrs	r0, r0, #27
1004e272:	a103      	add	r1, pc, #12	@ (adr r1, 1004e280 <__arm_cp.7_0+0x4>)
1004e274:	5c08      	ldrb	r0, [r1, r0]
1004e276:	b662      	cpsie	i
1004e278:	4770      	bx	lr
1004e27a:	46c0      	nop			@ (mov r8, r8)

1004e27c <__arm_cp.7_0>:
1004e27c:	04653adf 	.word	0x04653adf
1004e280:	06020100 	.word	0x06020100
1004e284:	10070b03 	.word	0x10070b03
1004e288:	150c0e04 	.word	0x150c0e04
1004e28c:	1a111708 	.word	0x1a111708
1004e290:	0f0a051f 	.word	0x0f0a051f
1004e294:	1916140d 	.word	0x1916140d
1004e298:	1813091e 	.word	0x1813091e
1004e29c:	1b1c121d 	.word	0x1b1c121d

1004e2a0 <CST_init>:
1004e2a0:	b510      	push	{r4, lr}
1004e2a2:	2412      	movs	r4, #18
1004e2a4:	2800      	cmp	r0, #0
1004e2a6:	d00e      	beq.n	1004e2c6 <CST_init+0x26>
1004e2a8:	2a00      	cmp	r2, #0
1004e2aa:	d00c      	beq.n	1004e2c6 <CST_init+0x26>
1004e2ac:	2b0b      	cmp	r3, #11
1004e2ae:	d80a      	bhi.n	1004e2c6 <CST_init+0x26>
1004e2b0:	7041      	strb	r1, [r0, #1]
1004e2b2:	7003      	strb	r3, [r0, #0]
1004e2b4:	6a03      	ldr	r3, [r0, #32]
1004e2b6:	5459      	strb	r1, [r3, r1]
1004e2b8:	1e49      	subs	r1, r1, #1
1004e2ba:	1c4b      	adds	r3, r1, #1
1004e2bc:	d3fa      	bcc.n	1004e2b4 <CST_init+0x14>
1004e2be:	6102      	str	r2, [r0, #16]
1004e2c0:	2400      	movs	r4, #0
1004e2c2:	7504      	strb	r4, [r0, #20]
1004e2c4:	61c0      	str	r0, [r0, #28]
1004e2c6:	4620      	mov	r0, r4
1004e2c8:	bd10      	pop	{r4, pc}

1004e2ca <CST_stop>:
1004e2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e2cc:	4605      	mov	r5, r0
1004e2ce:	2012      	movs	r0, #18
1004e2d0:	2d00      	cmp	r5, #0
1004e2d2:	d01b      	beq.n	1004e30c <CST_stop+0x42>
1004e2d4:	460c      	mov	r4, r1
1004e2d6:	786a      	ldrb	r2, [r5, #1]
1004e2d8:	428a      	cmp	r2, r1
1004e2da:	d917      	bls.n	1004e30c <CST_stop+0x42>
1004e2dc:	6a2b      	ldr	r3, [r5, #32]
1004e2de:	5d19      	ldrb	r1, [r3, r4]
1004e2e0:	42a1      	cmp	r1, r4
1004e2e2:	d101      	bne.n	1004e2e8 <CST_stop+0x1e>
1004e2e4:	2000      	movs	r0, #0
1004e2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004e2e8:	4617      	mov	r7, r2
1004e2ea:	463e      	mov	r6, r7
1004e2ec:	5ddf      	ldrb	r7, [r3, r7]
1004e2ee:	4297      	cmp	r7, r2
1004e2f0:	d001      	beq.n	1004e2f6 <CST_stop+0x2c>
1004e2f2:	42a7      	cmp	r7, r4
1004e2f4:	d1f9      	bne.n	1004e2ea <CST_stop+0x20>
1004e2f6:	2000      	movs	r0, #0
1004e2f8:	4297      	cmp	r7, r2
1004e2fa:	d005      	beq.n	1004e308 <CST_stop+0x3e>
1004e2fc:	5599      	strb	r1, [r3, r6]
1004e2fe:	4296      	cmp	r6, r2
1004e300:	d102      	bne.n	1004e308 <CST_stop+0x3e>
1004e302:	4628      	mov	r0, r5
1004e304:	f000 f803 	bl	1004e30e <Timer_TryStartFirstActive>
1004e308:	6a29      	ldr	r1, [r5, #32]
1004e30a:	550c      	strb	r4, [r1, r4]
1004e30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004e30e <Timer_TryStartFirstActive>:
1004e30e:	b510      	push	{r4, lr}
1004e310:	7842      	ldrb	r2, [r0, #1]
1004e312:	428a      	cmp	r2, r1
1004e314:	d107      	bne.n	1004e326 <Timer_TryStartFirstActive+0x18>
1004e316:	7d01      	ldrb	r1, [r0, #20]
1004e318:	2400      	movs	r4, #0
1004e31a:	2900      	cmp	r1, #0
1004e31c:	d009      	beq.n	1004e332 <Timer_TryStartFirstActive+0x24>
1004e31e:	3008      	adds	r0, #8
1004e320:	f7f3 fc88 	bl	10041c34 <BLEPLAT_StopTimer>
1004e324:	e005      	b.n	1004e332 <Timer_TryStartFirstActive+0x24>
1004e326:	0049      	lsls	r1, r1, #1
1004e328:	6a42      	ldr	r2, [r0, #36]	@ 0x24
1004e32a:	5e51      	ldrsh	r1, [r2, r1]
1004e32c:	f000 f86a 	bl	1004e404 <Timer_StartFirstActive_sysT>
1004e330:	4604      	mov	r4, r0
1004e332:	4620      	mov	r0, r4
1004e334:	bd10      	pop	{r4, pc}

1004e336 <CST_start>:
1004e336:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e338:	b085      	sub	sp, #20
1004e33a:	2612      	movs	r6, #18
1004e33c:	2800      	cmp	r0, #0
1004e33e:	d05e      	beq.n	1004e3fe <CST_start+0xc8>
1004e340:	461f      	mov	r7, r3
1004e342:	460d      	mov	r5, r1
1004e344:	4604      	mov	r4, r0
1004e346:	7843      	ldrb	r3, [r0, #1]
1004e348:	428b      	cmp	r3, r1
1004e34a:	d958      	bls.n	1004e3fe <CST_start+0xc8>
1004e34c:	7820      	ldrb	r0, [r4, #0]
1004e34e:	2105      	movs	r1, #5
1004e350:	0309      	lsls	r1, r1, #12
1004e352:	4081      	lsls	r1, r0
1004e354:	428f      	cmp	r7, r1
1004e356:	d852      	bhi.n	1004e3fe <CST_start+0xc8>
1004e358:	9204      	str	r2, [sp, #16]
1004e35a:	9302      	str	r3, [sp, #8]
1004e35c:	f7f3 fc4f 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004e360:	4602      	mov	r2, r0
1004e362:	7823      	ldrb	r3, [r4, #0]
1004e364:	6a20      	ldr	r0, [r4, #32]
1004e366:	5d40      	ldrb	r0, [r0, r5]
1004e368:	42a8      	cmp	r0, r5
1004e36a:	d00c      	beq.n	1004e386 <CST_start+0x50>
1004e36c:	9804      	ldr	r0, [sp, #16]
1004e36e:	2800      	cmp	r0, #0
1004e370:	d045      	beq.n	1004e3fe <CST_start+0xc8>
1004e372:	4620      	mov	r0, r4
1004e374:	9103      	str	r1, [sp, #12]
1004e376:	4629      	mov	r1, r5
1004e378:	9304      	str	r3, [sp, #16]
1004e37a:	4616      	mov	r6, r2
1004e37c:	f7ff ffa5 	bl	1004e2ca <CST_stop>
1004e380:	9903      	ldr	r1, [sp, #12]
1004e382:	4632      	mov	r2, r6
1004e384:	9b04      	ldr	r3, [sp, #16]
1004e386:	2033      	movs	r0, #51	@ 0x33
1004e388:	4378      	muls	r0, r7
1004e38a:	460e      	mov	r6, r1
1004e38c:	0a01      	lsrs	r1, r0, #8
1004e38e:	1808      	adds	r0, r1, r0
1004e390:	0c01      	lsrs	r1, r0, #16
1004e392:	1808      	adds	r0, r1, r0
1004e394:	0771      	lsls	r1, r6, #29
1004e396:	08d2      	lsrs	r2, r2, #3
1004e398:	1851      	adds	r1, r2, r1
1004e39a:	1842      	adds	r2, r0, r1
1004e39c:	1d58      	adds	r0, r3, #5
1004e39e:	b2c0      	uxtb	r0, r0
1004e3a0:	40c2      	lsrs	r2, r0
1004e3a2:	9501      	str	r5, [sp, #4]
1004e3a4:	0068      	lsls	r0, r5, #1
1004e3a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
1004e3a8:	9204      	str	r2, [sp, #16]
1004e3aa:	520a      	strh	r2, [r1, r0]
1004e3ac:	f7f3 fc27 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004e3b0:	08c0      	lsrs	r0, r0, #3
1004e3b2:	9003      	str	r0, [sp, #12]
1004e3b4:	7862      	ldrb	r2, [r4, #1]
1004e3b6:	6a20      	ldr	r0, [r4, #32]
1004e3b8:	4617      	mov	r7, r2
1004e3ba:	463b      	mov	r3, r7
1004e3bc:	5dc7      	ldrb	r7, [r0, r7]
1004e3be:	4297      	cmp	r7, r2
1004e3c0:	d00d      	beq.n	1004e3de <CST_start+0xa8>
1004e3c2:	007d      	lsls	r5, r7, #1
1004e3c4:	6a66      	ldr	r6, [r4, #36]	@ 0x24
1004e3c6:	5b75      	ldrh	r5, [r6, r5]
1004e3c8:	7826      	ldrb	r6, [r4, #0]
1004e3ca:	1d76      	adds	r6, r6, #5
1004e3cc:	9903      	ldr	r1, [sp, #12]
1004e3ce:	40f1      	lsrs	r1, r6
1004e3d0:	1a6d      	subs	r5, r5, r1
1004e3d2:	b22d      	sxth	r5, r5
1004e3d4:	9e04      	ldr	r6, [sp, #16]
1004e3d6:	1a71      	subs	r1, r6, r1
1004e3d8:	b209      	sxth	r1, r1
1004e3da:	428d      	cmp	r5, r1
1004e3dc:	dded      	ble.n	1004e3ba <CST_start+0x84>
1004e3de:	5cc1      	ldrb	r1, [r0, r3]
1004e3e0:	9a01      	ldr	r2, [sp, #4]
1004e3e2:	5481      	strb	r1, [r0, r2]
1004e3e4:	6a20      	ldr	r0, [r4, #32]
1004e3e6:	54c2      	strb	r2, [r0, r3]
1004e3e8:	9802      	ldr	r0, [sp, #8]
1004e3ea:	4283      	cmp	r3, r0
1004e3ec:	d106      	bne.n	1004e3fc <CST_start+0xc6>
1004e3ee:	9804      	ldr	r0, [sp, #16]
1004e3f0:	b201      	sxth	r1, r0
1004e3f2:	4620      	mov	r0, r4
1004e3f4:	f000 f806 	bl	1004e404 <Timer_StartFirstActive_sysT>
1004e3f8:	4606      	mov	r6, r0
1004e3fa:	e000      	b.n	1004e3fe <CST_start+0xc8>
1004e3fc:	2600      	movs	r6, #0
1004e3fe:	4630      	mov	r0, r6
1004e400:	b005      	add	sp, #20
1004e402:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004e404 <Timer_StartFirstActive_sysT>:
1004e404:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004e406:	9101      	str	r1, [sp, #4]
1004e408:	4604      	mov	r4, r0
1004e40a:	4607      	mov	r7, r0
1004e40c:	3708      	adds	r7, #8
1004e40e:	f7f3 fbf6 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004e412:	9002      	str	r0, [sp, #8]
1004e414:	460d      	mov	r5, r1
1004e416:	7826      	ldrb	r6, [r4, #0]
1004e418:	7d20      	ldrb	r0, [r4, #20]
1004e41a:	2800      	cmp	r0, #0
1004e41c:	d004      	beq.n	1004e428 <Timer_StartFirstActive_sysT+0x24>
1004e41e:	4638      	mov	r0, r7
1004e420:	f7f3 fc08 	bl	10041c34 <BLEPLAT_StopTimer>
1004e424:	7822      	ldrb	r2, [r4, #0]
1004e426:	e000      	b.n	1004e42a <Timer_StartFirstActive_sysT+0x26>
1004e428:	4632      	mov	r2, r6
1004e42a:	1d70      	adds	r0, r6, #5
1004e42c:	9c02      	ldr	r4, [sp, #8]
1004e42e:	08e1      	lsrs	r1, r4, #3
1004e430:	40c1      	lsrs	r1, r0
1004e432:	9801      	ldr	r0, [sp, #4]
1004e434:	1a40      	subs	r0, r0, r1
1004e436:	b200      	sxth	r0, r0
1004e438:	1e40      	subs	r0, r0, #1
1004e43a:	17c1      	asrs	r1, r0, #31
1004e43c:	3208      	adds	r2, #8
1004e43e:	f7f2 f86d 	bl	1004051c <__aeabi_llsl>
1004e442:	1902      	adds	r2, r0, r4
1004e444:	414d      	adcs	r5, r1
1004e446:	4638      	mov	r0, r7
1004e448:	462b      	mov	r3, r5
1004e44a:	f7f3 fbe2 	bl	10041c12 <BLEPLAT_StartTimer>
1004e44e:	b2c0      	uxtb	r0, r0
1004e450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004e452 <cst_sharedCallback>:
1004e452:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004e454:	9102      	str	r1, [sp, #8]
1004e456:	4605      	mov	r5, r0
1004e458:	7847      	ldrb	r7, [r0, #1]
1004e45a:	6a00      	ldr	r0, [r0, #32]
1004e45c:	5dc4      	ldrb	r4, [r0, r7]
1004e45e:	f7f3 fbce 	bl	10041bfe <BLEPLAT_GetCurrentSysTime>
1004e462:	08c0      	lsrs	r0, r0, #3
1004e464:	9001      	str	r0, [sp, #4]
1004e466:	4620      	mov	r0, r4
1004e468:	b2c2      	uxtb	r2, r0
1004e46a:	42ba      	cmp	r2, r7
1004e46c:	d00d      	beq.n	1004e48a <cst_sharedCallback+0x38>
1004e46e:	0053      	lsls	r3, r2, #1
1004e470:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
1004e472:	5af3      	ldrh	r3, [r6, r3]
1004e474:	782e      	ldrb	r6, [r5, #0]
1004e476:	1d76      	adds	r6, r6, #5
1004e478:	9901      	ldr	r1, [sp, #4]
1004e47a:	40f1      	lsrs	r1, r6
1004e47c:	1a59      	subs	r1, r3, r1
1004e47e:	b209      	sxth	r1, r1
1004e480:	2901      	cmp	r1, #1
1004e482:	dc03      	bgt.n	1004e48c <cst_sharedCallback+0x3a>
1004e484:	6a28      	ldr	r0, [r5, #32]
1004e486:	5c80      	ldrb	r0, [r0, r2]
1004e488:	e7ee      	b.n	1004e468 <cst_sharedCallback+0x16>
1004e48a:	4638      	mov	r0, r7
1004e48c:	6a29      	ldr	r1, [r5, #32]
1004e48e:	55c8      	strb	r0, [r1, r7]
1004e490:	b2c6      	uxtb	r6, r0
1004e492:	4628      	mov	r0, r5
1004e494:	4631      	mov	r1, r6
1004e496:	f7ff ff3a 	bl	1004e30e <Timer_TryStartFirstActive>
1004e49a:	b2e0      	uxtb	r0, r4
1004e49c:	42b0      	cmp	r0, r6
1004e49e:	d006      	beq.n	1004e4ae <cst_sharedCallback+0x5c>
1004e4a0:	6a29      	ldr	r1, [r5, #32]
1004e4a2:	5c0f      	ldrb	r7, [r1, r0]
1004e4a4:	540c      	strb	r4, [r1, r0]
1004e4a6:	9902      	ldr	r1, [sp, #8]
1004e4a8:	4788      	blx	r1
1004e4aa:	463c      	mov	r4, r7
1004e4ac:	e7f5      	b.n	1004e49a <cst_sharedCallback+0x48>
1004e4ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004e4b0 <is_Buffer_All_Set_To>:
1004e4b0:	b570      	push	{r4, r5, r6, lr}
1004e4b2:	4603      	mov	r3, r0
1004e4b4:	2001      	movs	r0, #1
1004e4b6:	2900      	cmp	r1, #0
1004e4b8:	d009      	beq.n	1004e4ce <is_Buffer_All_Set_To+0x1e>
1004e4ba:	2400      	movs	r4, #0
1004e4bc:	4626      	mov	r6, r4
1004e4be:	4625      	mov	r5, r4
1004e4c0:	5d96      	ldrb	r6, [r2, r6]
1004e4c2:	429e      	cmp	r6, r3
1004e4c4:	d104      	bne.n	1004e4d0 <is_Buffer_All_Set_To+0x20>
1004e4c6:	1c6d      	adds	r5, r5, #1
1004e4c8:	b2ee      	uxtb	r6, r5
1004e4ca:	428e      	cmp	r6, r1
1004e4cc:	d3f8      	bcc.n	1004e4c0 <is_Buffer_All_Set_To+0x10>
1004e4ce:	bd70      	pop	{r4, r5, r6, pc}
1004e4d0:	4620      	mov	r0, r4
1004e4d2:	bd70      	pop	{r4, r5, r6, pc}

1004e4d4 <char_copy>:
1004e4d4:	2a00      	cmp	r2, #0
1004e4d6:	d005      	beq.n	1004e4e4 <char_copy+0x10>
1004e4d8:	7803      	ldrb	r3, [r0, #0]
1004e4da:	700b      	strb	r3, [r1, #0]
1004e4dc:	1e52      	subs	r2, r2, #1
1004e4de:	1c49      	adds	r1, r1, #1
1004e4e0:	1c40      	adds	r0, r0, #1
1004e4e2:	e7f7      	b.n	1004e4d4 <char_copy>
1004e4e4:	4770      	bx	lr

1004e4e6 <hci_acl_data_tx_cmpl_event_int_cb_ucfg_weak>:
1004e4e6:	2000      	movs	r0, #0
1004e4e8:	4770      	bx	lr

1004e4ea <hci_acl_data_ind_event_int_cb_ucfg_weak>:
1004e4ea:	2000      	movs	r0, #0
1004e4ec:	4770      	bx	lr
	...

1004e4f0 <addr8_list_search>:
1004e4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e4f2:	b083      	sub	sp, #12
1004e4f4:	9202      	str	r2, [sp, #8]
1004e4f6:	9d08      	ldr	r5, [sp, #32]
1004e4f8:	2d00      	cmp	r5, #0
1004e4fa:	d101      	bne.n	1004e500 <addr8_list_search+0x10>
1004e4fc:	462e      	mov	r6, r5
1004e4fe:	e002      	b.n	1004e506 <addr8_list_search+0x16>
1004e500:	24ff      	movs	r4, #255	@ 0xff
1004e502:	0626      	lsls	r6, r4, #24
1004e504:	401e      	ands	r6, r3
1004e506:	060c      	lsls	r4, r1, #24
1004e508:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1004e50a:	d02a      	beq.n	1004e562 <addr8_list_search+0x72>
1004e50c:	9501      	str	r5, [sp, #4]
1004e50e:	9400      	str	r4, [sp, #0]
1004e510:	4a18      	ldr	r2, [pc, #96]	@ (1004e574 <__arm_cp.0_0>)
1004e512:	4013      	ands	r3, r2
1004e514:	431e      	orrs	r6, r3
1004e516:	1e4a      	subs	r2, r1, #1
1004e518:	b2c9      	uxtb	r1, r1
1004e51a:	0849      	lsrs	r1, r1, #1
1004e51c:	2400      	movs	r4, #0
1004e51e:	b2cd      	uxtb	r5, r1
1004e520:	00ed      	lsls	r5, r5, #3
1004e522:	1947      	adds	r7, r0, r5
1004e524:	687f      	ldr	r7, [r7, #4]
1004e526:	9b01      	ldr	r3, [sp, #4]
1004e528:	2b00      	cmp	r3, #0
1004e52a:	d101      	bne.n	1004e530 <addr8_list_search+0x40>
1004e52c:	4b11      	ldr	r3, [pc, #68]	@ (1004e574 <__arm_cp.0_0>)
1004e52e:	401f      	ands	r7, r3
1004e530:	5945      	ldr	r5, [r0, r5]
1004e532:	9b02      	ldr	r3, [sp, #8]
1004e534:	42ab      	cmp	r3, r5
1004e536:	d101      	bne.n	1004e53c <addr8_list_search+0x4c>
1004e538:	42be      	cmp	r6, r7
1004e53a:	d015      	beq.n	1004e568 <addr8_list_search+0x78>
1004e53c:	42be      	cmp	r6, r7
1004e53e:	d803      	bhi.n	1004e548 <addr8_list_search+0x58>
1004e540:	d104      	bne.n	1004e54c <addr8_list_search+0x5c>
1004e542:	9b02      	ldr	r3, [sp, #8]
1004e544:	42ab      	cmp	r3, r5
1004e546:	d901      	bls.n	1004e54c <addr8_list_search+0x5c>
1004e548:	1c4c      	adds	r4, r1, #1
1004e54a:	e000      	b.n	1004e54e <addr8_list_search+0x5e>
1004e54c:	1e4a      	subs	r2, r1, #1
1004e54e:	1b11      	subs	r1, r2, r4
1004e550:	b2c9      	uxtb	r1, r1
1004e552:	1c4d      	adds	r5, r1, #1
1004e554:	b2ef      	uxtb	r7, r5
1004e556:	0879      	lsrs	r1, r7, #1
1004e558:	1909      	adds	r1, r1, r4
1004e55a:	42af      	cmp	r7, r5
1004e55c:	d0df      	beq.n	1004e51e <addr8_list_search+0x2e>
1004e55e:	2000      	movs	r0, #0
1004e560:	e003      	b.n	1004e56a <addr8_list_search+0x7a>
1004e562:	2100      	movs	r1, #0
1004e564:	4608      	mov	r0, r1
1004e566:	e001      	b.n	1004e56c <addr8_list_search+0x7c>
1004e568:	2001      	movs	r0, #1
1004e56a:	9c00      	ldr	r4, [sp, #0]
1004e56c:	7021      	strb	r1, [r4, #0]
1004e56e:	b003      	add	sp, #12
1004e570:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e572:	46c0      	nop			@ (mov r8, r8)

1004e574 <__arm_cp.0_0>:
1004e574:	00ffffff 	.word	0x00ffffff

1004e578 <addr8_list_clear>:
1004e578:	2100      	movs	r1, #0
1004e57a:	7101      	strb	r1, [r0, #4]
1004e57c:	4770      	bx	lr

1004e57e <BLEPLAT_aes128_encrypt>:
1004e57e:	b580      	push	{r7, lr}
1004e580:	f7f3 faf6 	bl	10041b70 <BLEPLAT_AesEcbEncrypt>
1004e584:	bd80      	pop	{r7, pc}

1004e586 <Hal_Get_Random_Number>:
1004e586:	b51c      	push	{r2, r3, r4, lr}
1004e588:	ac01      	add	r4, sp, #4
1004e58a:	4620      	mov	r0, r4
1004e58c:	f7f3 fb00 	bl	10041b90 <BLEPLAT_RngGetRandom16>
1004e590:	8820      	ldrh	r0, [r4, #0]
1004e592:	bd1c      	pop	{r2, r3, r4, pc}

1004e594 <Hal_Get_Random_Number32>:
1004e594:	b5e0      	push	{r5, r6, r7, lr}
1004e596:	a801      	add	r0, sp, #4
1004e598:	f7f3 fb06 	bl	10041ba8 <BLEPLAT_RngGetRandom32>
1004e59c:	9801      	ldr	r0, [sp, #4]
1004e59e:	bd8c      	pop	{r2, r3, r7, pc}

1004e5a0 <HAL_Generate_Random_Bytes_To>:
1004e5a0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1004e5a2:	460c      	mov	r4, r1
1004e5a4:	4605      	mov	r5, r0
1004e5a6:	2000      	movs	r0, #0
1004e5a8:	b2c6      	uxtb	r6, r0
1004e5aa:	42a6      	cmp	r6, r4
1004e5ac:	d20e      	bcs.n	1004e5cc <HAL_Generate_Random_Bytes_To+0x2c>
1004e5ae:	2000      	movs	r0, #0
1004e5b0:	f7ff ffe9 	bl	1004e586 <Hal_Get_Random_Number>
1004e5b4:	55a8      	strb	r0, [r5, r6]
1004e5b6:	a901      	add	r1, sp, #4
1004e5b8:	7008      	strb	r0, [r1, #0]
1004e5ba:	0a00      	lsrs	r0, r0, #8
1004e5bc:	4669      	mov	r1, sp
1004e5be:	7008      	strb	r0, [r1, #0]
1004e5c0:	1c71      	adds	r1, r6, #1
1004e5c2:	42a1      	cmp	r1, r4
1004e5c4:	d200      	bcs.n	1004e5c8 <HAL_Generate_Random_Bytes_To+0x28>
1004e5c6:	5468      	strb	r0, [r5, r1]
1004e5c8:	1cb0      	adds	r0, r6, #2
1004e5ca:	e7ed      	b.n	1004e5a8 <HAL_Generate_Random_Bytes_To+0x8>
1004e5cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

1004e5d0 <IDD_Initialize_Device_IDs>:
1004e5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e5d2:	b095      	sub	sp, #84	@ 0x54
1004e5d4:	4839      	ldr	r0, [pc, #228]	@ (1004e6bc <__arm_cp.0_0>)
1004e5d6:	6800      	ldr	r0, [r0, #0]
1004e5d8:	9000      	str	r0, [sp, #0]
1004e5da:	a80b      	add	r0, sp, #44	@ 0x2c
1004e5dc:	f7ff fdcb 	bl	1004e176 <nvm_dev_id_data_get_record>
1004e5e0:	2800      	cmp	r0, #0
1004e5e2:	d031      	beq.n	1004e648 <IDD_Initialize_Device_IDs+0x78>
1004e5e4:	af01      	add	r7, sp, #4
1004e5e6:	2406      	movs	r4, #6
1004e5e8:	2500      	movs	r5, #0
1004e5ea:	4b35      	ldr	r3, [pc, #212]	@ (1004e6c0 <__arm_cp.0_1>)
1004e5ec:	4638      	mov	r0, r7
1004e5ee:	4621      	mov	r1, r4
1004e5f0:	462a      	mov	r2, r5
1004e5f2:	4798      	blx	r3
1004e5f4:	7978      	ldrb	r0, [r7, #5]
1004e5f6:	21c0      	movs	r1, #192	@ 0xc0
1004e5f8:	4301      	orrs	r1, r0
1004e5fa:	7179      	strb	r1, [r7, #5]
1004e5fc:	ae0b      	add	r6, sp, #44	@ 0x2c
1004e5fe:	4630      	mov	r0, r6
1004e600:	3020      	adds	r0, #32
1004e602:	4b30      	ldr	r3, [pc, #192]	@ (1004e6c4 <__arm_cp.0_2>)
1004e604:	4639      	mov	r1, r7
1004e606:	4622      	mov	r2, r4
1004e608:	4798      	blx	r3
1004e60a:	ac07      	add	r4, sp, #28
1004e60c:	2710      	movs	r7, #16
1004e60e:	4620      	mov	r0, r4
1004e610:	4639      	mov	r1, r7
1004e612:	462a      	mov	r2, r5
1004e614:	4b2a      	ldr	r3, [pc, #168]	@ (1004e6c0 <__arm_cp.0_1>)
1004e616:	4798      	blx	r3
1004e618:	4630      	mov	r0, r6
1004e61a:	4621      	mov	r1, r4
1004e61c:	463a      	mov	r2, r7
1004e61e:	4b29      	ldr	r3, [pc, #164]	@ (1004e6c4 <__arm_cp.0_2>)
1004e620:	4798      	blx	r3
1004e622:	ac03      	add	r4, sp, #12
1004e624:	4620      	mov	r0, r4
1004e626:	4639      	mov	r1, r7
1004e628:	462a      	mov	r2, r5
1004e62a:	4b25      	ldr	r3, [pc, #148]	@ (1004e6c0 <__arm_cp.0_1>)
1004e62c:	4798      	blx	r3
1004e62e:	4630      	mov	r0, r6
1004e630:	3010      	adds	r0, #16
1004e632:	4621      	mov	r1, r4
1004e634:	463a      	mov	r2, r7
1004e636:	4b23      	ldr	r3, [pc, #140]	@ (1004e6c4 <__arm_cp.0_2>)
1004e638:	4798      	blx	r3
1004e63a:	4630      	mov	r0, r6
1004e63c:	f7ff fda8 	bl	1004e190 <nvm_dev_id_data_add_record>
1004e640:	2800      	cmp	r0, #0
1004e642:	d103      	bne.n	1004e64c <IDD_Initialize_Device_IDs+0x7c>
1004e644:	4605      	mov	r5, r0
1004e646:	e003      	b.n	1004e650 <IDD_Initialize_Device_IDs+0x80>
1004e648:	2500      	movs	r5, #0
1004e64a:	e001      	b.n	1004e650 <IDD_Initialize_Device_IDs+0x80>
1004e64c:	200e      	movs	r0, #14
1004e64e:	43c5      	mvns	r5, r0
1004e650:	4c1d      	ldr	r4, [pc, #116]	@ (1004e6c8 <__arm_cp.0_3>)
1004e652:	6822      	ldr	r2, [r4, #0]
1004e654:	322e      	adds	r2, #46	@ 0x2e
1004e656:	2600      	movs	r6, #0
1004e658:	2706      	movs	r7, #6
1004e65a:	4630      	mov	r0, r6
1004e65c:	4639      	mov	r1, r7
1004e65e:	f7ff ff27 	bl	1004e4b0 <is_Buffer_All_Set_To>
1004e662:	a90b      	add	r1, sp, #44	@ 0x2c
1004e664:	2800      	cmp	r0, #0
1004e666:	d001      	beq.n	1004e66c <IDD_Initialize_Device_IDs+0x9c>
1004e668:	3120      	adds	r1, #32
1004e66a:	e001      	b.n	1004e670 <IDD_Initialize_Device_IDs+0xa0>
1004e66c:	6821      	ldr	r1, [r4, #0]
1004e66e:	312e      	adds	r1, #46	@ 0x2e
1004e670:	9800      	ldr	r0, [sp, #0]
1004e672:	3060      	adds	r0, #96	@ 0x60
1004e674:	463a      	mov	r2, r7
1004e676:	f7f3 fa3f 	bl	10041af8 <BLEPLAT_MemCpy>
1004e67a:	6822      	ldr	r2, [r4, #0]
1004e67c:	3208      	adds	r2, #8
1004e67e:	2110      	movs	r1, #16
1004e680:	4630      	mov	r0, r6
1004e682:	f7ff ff15 	bl	1004e4b0 <is_Buffer_All_Set_To>
1004e686:	2800      	cmp	r0, #0
1004e688:	d005      	beq.n	1004e696 <IDD_Initialize_Device_IDs+0xc6>
1004e68a:	6820      	ldr	r0, [r4, #0]
1004e68c:	3008      	adds	r0, #8
1004e68e:	a90b      	add	r1, sp, #44	@ 0x2c
1004e690:	2210      	movs	r2, #16
1004e692:	f7f3 fa31 	bl	10041af8 <BLEPLAT_MemCpy>
1004e696:	6822      	ldr	r2, [r4, #0]
1004e698:	3218      	adds	r2, #24
1004e69a:	2000      	movs	r0, #0
1004e69c:	2110      	movs	r1, #16
1004e69e:	f7ff ff07 	bl	1004e4b0 <is_Buffer_All_Set_To>
1004e6a2:	2800      	cmp	r0, #0
1004e6a4:	d006      	beq.n	1004e6b4 <IDD_Initialize_Device_IDs+0xe4>
1004e6a6:	a90b      	add	r1, sp, #44	@ 0x2c
1004e6a8:	3110      	adds	r1, #16
1004e6aa:	6820      	ldr	r0, [r4, #0]
1004e6ac:	3018      	adds	r0, #24
1004e6ae:	2210      	movs	r2, #16
1004e6b0:	f7f3 fa22 	bl	10041af8 <BLEPLAT_MemCpy>
1004e6b4:	b2e8      	uxtb	r0, r5
1004e6b6:	b015      	add	sp, #84	@ 0x54
1004e6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e6ba:	46c0      	nop			@ (mov r8, r8)

1004e6bc <__arm_cp.0_0>:
1004e6bc:	20000b58 	.word	0x20000b58

1004e6c0 <__arm_cp.0_1>:
1004e6c0:	1004e5a1 	.word	0x1004e5a1

1004e6c4 <__arm_cp.0_2>:
1004e6c4:	10041af9 	.word	0x10041af9

1004e6c8 <__arm_cp.0_3>:
1004e6c8:	20000b50 	.word	0x20000b50

1004e6cc <aci_hal_fw_error_event_push_noinline>:
1004e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e6ce:	4604      	mov	r4, r0
1004e6d0:	06c0      	lsls	r0, r0, #27
1004e6d2:	d42d      	bmi.n	1004e730 <aci_hal_fw_error_event_push_noinline+0x64>
1004e6d4:	4615      	mov	r5, r2
1004e6d6:	460f      	mov	r7, r1
1004e6d8:	9300      	str	r3, [sp, #0]
1004e6da:	4818      	ldr	r0, [pc, #96]	@ (1004e73c <__arm_cp.0_0>)
1004e6dc:	6800      	ldr	r0, [r0, #0]
1004e6de:	0761      	lsls	r1, r4, #29
1004e6e0:	0ec9      	lsrs	r1, r1, #27
1004e6e2:	1840      	adds	r0, r0, r1
1004e6e4:	6900      	ldr	r0, [r0, #16]
1004e6e6:	1e51      	subs	r1, r2, #1
1004e6e8:	2203      	movs	r2, #3
1004e6ea:	430a      	orrs	r2, r1
1004e6ec:	3209      	adds	r2, #9
1004e6ee:	0891      	lsrs	r1, r2, #2
1004e6f0:	b28b      	uxth	r3, r1
1004e6f2:	2240      	movs	r2, #64	@ 0x40
1004e6f4:	4621      	mov	r1, r4
1004e6f6:	f7fc fc09 	bl	1004af0c <aci_event_fifo_push_header>
1004e6fa:	2800      	cmp	r0, #0
1004e6fc:	d01a      	beq.n	1004e734 <aci_hal_fw_error_event_push_noinline+0x68>
1004e6fe:	4606      	mov	r6, r0
1004e700:	72c5      	strb	r5, [r0, #11]
1004e702:	7287      	strb	r7, [r0, #10]
1004e704:	300c      	adds	r0, #12
1004e706:	9900      	ldr	r1, [sp, #0]
1004e708:	462a      	mov	r2, r5
1004e70a:	f7f3 f9f5 	bl	10041af8 <BLEPLAT_MemCpy>
1004e70e:	2700      	movs	r7, #0
1004e710:	7277      	strb	r7, [r6, #9]
1004e712:	2006      	movs	r0, #6
1004e714:	7230      	strb	r0, [r6, #8]
1004e716:	1d28      	adds	r0, r5, #4
1004e718:	0a01      	lsrs	r1, r0, #8
1004e71a:	71f1      	strb	r1, [r6, #7]
1004e71c:	71b0      	strb	r0, [r6, #6]
1004e71e:	20ff      	movs	r0, #255	@ 0xff
1004e720:	7170      	strb	r0, [r6, #5]
1004e722:	2082      	movs	r0, #130	@ 0x82
1004e724:	7130      	strb	r0, [r6, #4]
1004e726:	4620      	mov	r0, r4
1004e728:	4631      	mov	r1, r6
1004e72a:	f7fc fc8c 	bl	1004b046 <aci_event_fifo_push>
1004e72e:	e002      	b.n	1004e736 <aci_hal_fw_error_event_push_noinline+0x6a>
1004e730:	2786      	movs	r7, #134	@ 0x86
1004e732:	e000      	b.n	1004e736 <aci_hal_fw_error_event_push_noinline+0x6a>
1004e734:	2707      	movs	r7, #7
1004e736:	4638      	mov	r0, r7
1004e738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004e73a:	46c0      	nop			@ (mov r8, r8)

1004e73c <__arm_cp.0_0>:
1004e73c:	20000b54 	.word	0x20000b54

1004e740 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
1004e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e742:	4604      	mov	r4, r0
1004e744:	06c0      	lsls	r0, r0, #27
1004e746:	d42d      	bmi.n	1004e7a4 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
1004e748:	4616      	mov	r6, r2
1004e74a:	460d      	mov	r5, r1
1004e74c:	4818      	ldr	r0, [pc, #96]	@ (1004e7b0 <__arm_cp.1_0>)
1004e74e:	6800      	ldr	r0, [r0, #0]
1004e750:	0761      	lsls	r1, r4, #29
1004e752:	0ec9      	lsrs	r1, r1, #27
1004e754:	1840      	adds	r0, r0, r1
1004e756:	6900      	ldr	r0, [r0, #16]
1004e758:	2241      	movs	r2, #65	@ 0x41
1004e75a:	2304      	movs	r3, #4
1004e75c:	4621      	mov	r1, r4
1004e75e:	f7fc fbd5 	bl	1004af0c <aci_event_fifo_push_header>
1004e762:	2800      	cmp	r0, #0
1004e764:	d020      	beq.n	1004e7a8 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
1004e766:	4601      	mov	r1, r0
1004e768:	300a      	adds	r0, #10
1004e76a:	7106      	strb	r6, [r0, #4]
1004e76c:	7005      	strb	r5, [r0, #0]
1004e76e:	2700      	movs	r7, #0
1004e770:	724f      	strb	r7, [r1, #9]
1004e772:	2210      	movs	r2, #16
1004e774:	720a      	strb	r2, [r1, #8]
1004e776:	71cf      	strb	r7, [r1, #7]
1004e778:	220a      	movs	r2, #10
1004e77a:	718a      	strb	r2, [r1, #6]
1004e77c:	22ff      	movs	r2, #255	@ 0xff
1004e77e:	714a      	strb	r2, [r1, #5]
1004e780:	2282      	movs	r2, #130	@ 0x82
1004e782:	710a      	strb	r2, [r1, #4]
1004e784:	0e32      	lsrs	r2, r6, #24
1004e786:	71c2      	strb	r2, [r0, #7]
1004e788:	0c32      	lsrs	r2, r6, #16
1004e78a:	7182      	strb	r2, [r0, #6]
1004e78c:	0a32      	lsrs	r2, r6, #8
1004e78e:	7142      	strb	r2, [r0, #5]
1004e790:	0e2a      	lsrs	r2, r5, #24
1004e792:	70c2      	strb	r2, [r0, #3]
1004e794:	0c2a      	lsrs	r2, r5, #16
1004e796:	7082      	strb	r2, [r0, #2]
1004e798:	0a2a      	lsrs	r2, r5, #8
1004e79a:	7042      	strb	r2, [r0, #1]
1004e79c:	4620      	mov	r0, r4
1004e79e:	f7fc fc52 	bl	1004b046 <aci_event_fifo_push>
1004e7a2:	e002      	b.n	1004e7aa <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1004e7a4:	2786      	movs	r7, #134	@ 0x86
1004e7a6:	e000      	b.n	1004e7aa <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1004e7a8:	2707      	movs	r7, #7
1004e7aa:	4638      	mov	r0, r7
1004e7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004e7ae:	46c0      	nop			@ (mov r8, r8)

1004e7b0 <__arm_cp.1_0>:
1004e7b0:	20000b54 	.word	0x20000b54

1004e7b4 <GAP_enable_disable_scan_ucfg_weak>:
1004e7b4:	2000      	movs	r0, #0
1004e7b6:	4770      	bx	lr

1004e7b8 <GAP_name_disc_proc_connected_check_ucfg_weak>:
1004e7b8:	4770      	bx	lr

1004e7ba <GAP_DiscProcTimeoutcb_ucfg_weak>:
1004e7ba:	4770      	bx	lr

1004e7bc <GAT_clt_proc_exec_tsk>:
1004e7bc:	b580      	push	{r7, lr}
1004e7be:	4802      	ldr	r0, [pc, #8]	@ (1004e7c8 <__arm_cp.3_0>)
1004e7c0:	6800      	ldr	r0, [r0, #0]
1004e7c2:	4780      	blx	r0
1004e7c4:	bd80      	pop	{r7, pc}
1004e7c6:	46c0      	nop			@ (mov r8, r8)

1004e7c8 <__arm_cp.3_0>:
1004e7c8:	20000d10 	.word	0x20000d10

1004e7cc <GAT_clt_exec_empty>:
1004e7cc:	4770      	bx	lr
	...

1004e7d0 <hci_le_encrypt>:
1004e7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e7d2:	b08f      	sub	sp, #60	@ 0x3c
1004e7d4:	9202      	str	r2, [sp, #8]
1004e7d6:	4607      	mov	r7, r0
1004e7d8:	a807      	add	r0, sp, #28
1004e7da:	9001      	str	r0, [sp, #4]
1004e7dc:	2510      	movs	r5, #16
1004e7de:	4e0c      	ldr	r6, [pc, #48]	@ (1004e810 <__arm_cp.0_0>)
1004e7e0:	462a      	mov	r2, r5
1004e7e2:	47b0      	blx	r6
1004e7e4:	ac0b      	add	r4, sp, #44	@ 0x2c
1004e7e6:	4620      	mov	r0, r4
1004e7e8:	4639      	mov	r1, r7
1004e7ea:	462a      	mov	r2, r5
1004e7ec:	47b0      	blx	r6
1004e7ee:	af03      	add	r7, sp, #12
1004e7f0:	2600      	movs	r6, #0
1004e7f2:	9801      	ldr	r0, [sp, #4]
1004e7f4:	4621      	mov	r1, r4
1004e7f6:	463a      	mov	r2, r7
1004e7f8:	4633      	mov	r3, r6
1004e7fa:	f7ff fec0 	bl	1004e57e <BLEPLAT_aes128_encrypt>
1004e7fe:	9802      	ldr	r0, [sp, #8]
1004e800:	4639      	mov	r1, r7
1004e802:	462a      	mov	r2, r5
1004e804:	4b02      	ldr	r3, [pc, #8]	@ (1004e810 <__arm_cp.0_0>)
1004e806:	4798      	blx	r3
1004e808:	4630      	mov	r0, r6
1004e80a:	b00f      	add	sp, #60	@ 0x3c
1004e80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e80e:	46c0      	nop			@ (mov r8, r8)

1004e810 <__arm_cp.0_0>:
1004e810:	10041af9 	.word	0x10041af9

1004e814 <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
1004e814:	4770      	bx	lr

1004e816 <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
1004e816:	4770      	bx	lr

1004e818 <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
1004e818:	4770      	bx	lr

1004e81a <llc_big_brc_mem_alloc_ucfg_weak>:
1004e81a:	4770      	bx	lr

1004e81c <llc_big_sync_mem_alloc_ucfg_weak>:
1004e81c:	4770      	bx	lr

1004e81e <llc_cig_cmn_mem_alloc_ucfg_weak>:
1004e81e:	4770      	bx	lr

1004e820 <llc_check_sreq_or_creq_tx_addr_res_off>:
1004e820:	b570      	push	{r4, r5, r6, lr}
1004e822:	b084      	sub	sp, #16
1004e824:	4615      	mov	r5, r2
1004e826:	460a      	mov	r2, r1
1004e828:	4604      	mov	r4, r0
1004e82a:	2b00      	cmp	r3, #0
1004e82c:	d007      	beq.n	1004e83e <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
1004e82e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004e830:	4282      	cmp	r2, r0
1004e832:	d11f      	bne.n	1004e874 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
1004e834:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004e836:	4068      	eors	r0, r5
1004e838:	0200      	lsls	r0, r0, #8
1004e83a:	d11b      	bne.n	1004e874 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
1004e83c:	e01b      	b.n	1004e876 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004e83e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004e840:	9908      	ldr	r1, [sp, #32]
1004e842:	2900      	cmp	r1, #0
1004e844:	d002      	beq.n	1004e84c <llc_check_sreq_or_creq_tx_addr_res_off+0x2c>
1004e846:	2301      	movs	r3, #1
1004e848:	4003      	ands	r3, r0
1004e84a:	d104      	bne.n	1004e856 <llc_check_sreq_or_creq_tx_addr_res_off+0x36>
1004e84c:	2900      	cmp	r1, #0
1004e84e:	d112      	bne.n	1004e876 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004e850:	2102      	movs	r1, #2
1004e852:	4008      	ands	r0, r1
1004e854:	d00f      	beq.n	1004e876 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004e856:	4809      	ldr	r0, [pc, #36]	@ (1004e87c <__arm_cp.1_0>)
1004e858:	6800      	ldr	r0, [r0, #0]
1004e85a:	219c      	movs	r1, #156	@ 0x9c
1004e85c:	5841      	ldr	r1, [r0, r1]
1004e85e:	68c8      	ldr	r0, [r1, #12]
1004e860:	6909      	ldr	r1, [r1, #16]
1004e862:	ab03      	add	r3, sp, #12
1004e864:	2600      	movs	r6, #0
1004e866:	9600      	str	r6, [sp, #0]
1004e868:	9301      	str	r3, [sp, #4]
1004e86a:	462b      	mov	r3, r5
1004e86c:	f7ff fe40 	bl	1004e4f0 <addr8_list_search>
1004e870:	2800      	cmp	r0, #0
1004e872:	d100      	bne.n	1004e876 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004e874:	24ff      	movs	r4, #255	@ 0xff
1004e876:	4620      	mov	r0, r4
1004e878:	b004      	add	sp, #16
1004e87a:	bd70      	pop	{r4, r5, r6, pc}

1004e87c <__arm_cp.1_0>:
1004e87c:	20000b60 	.word	0x20000b60

1004e880 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
1004e880:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e882:	b087      	sub	sp, #28
1004e884:	1ecd      	subs	r5, r1, #3
1004e886:	21ff      	movs	r1, #255	@ 0xff
1004e888:	24fd      	movs	r4, #253	@ 0xfd
1004e88a:	4225      	tst	r5, r4
1004e88c:	d11c      	bne.n	1004e8c8 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1004e88e:	2a00      	cmp	r2, #0
1004e890:	d01a      	beq.n	1004e8c8 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1004e892:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1004e894:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004e896:	680c      	ldr	r4, [r1, #0]
1004e898:	9405      	str	r4, [sp, #20]
1004e89a:	9306      	str	r3, [sp, #24]
1004e89c:	684b      	ldr	r3, [r1, #4]
1004e89e:	c882      	ldmia	r0!, {r1, r7}
1004e8a0:	20ff      	movs	r0, #255	@ 0xff
1004e8a2:	0600      	lsls	r0, r0, #24
1004e8a4:	463c      	mov	r4, r7
1004e8a6:	4384      	bics	r4, r0
1004e8a8:	c612      	stmia	r6!, {r1, r4}
1004e8aa:	9303      	str	r3, [sp, #12]
1004e8ac:	9805      	ldr	r0, [sp, #20]
1004e8ae:	9002      	str	r0, [sp, #8]
1004e8b0:	9806      	ldr	r0, [sp, #24]
1004e8b2:	9001      	str	r0, [sp, #4]
1004e8b4:	4268      	negs	r0, r5
1004e8b6:	4168      	adcs	r0, r5
1004e8b8:	9000      	str	r0, [sp, #0]
1004e8ba:	b2c8      	uxtb	r0, r1
1004e8bc:	0752      	lsls	r2, r2, #29
1004e8be:	0fd3      	lsrs	r3, r2, #31
1004e8c0:	463a      	mov	r2, r7
1004e8c2:	f7ff ffad 	bl	1004e820 <llc_check_sreq_or_creq_tx_addr_res_off>
1004e8c6:	4601      	mov	r1, r0
1004e8c8:	4608      	mov	r0, r1
1004e8ca:	b007      	add	sp, #28
1004e8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1004e8d0 <llc_wl_mem_allocate>:
1004e8d0:	b510      	push	{r4, lr}
1004e8d2:	2401      	movs	r4, #1
1004e8d4:	4084      	lsls	r4, r0
1004e8d6:	2108      	movs	r1, #8
1004e8d8:	4620      	mov	r0, r4
1004e8da:	f7ff f99f 	bl	1004dc1c <csmem_mem_0_assign>
1004e8de:	4903      	ldr	r1, [pc, #12]	@ (1004e8ec <__arm_cp.0_0>)
1004e8e0:	6809      	ldr	r1, [r1, #0]
1004e8e2:	229c      	movs	r2, #156	@ 0x9c
1004e8e4:	5889      	ldr	r1, [r1, r2]
1004e8e6:	744c      	strb	r4, [r1, #17]
1004e8e8:	60c8      	str	r0, [r1, #12]
1004e8ea:	bd10      	pop	{r4, pc}

1004e8ec <__arm_cp.0_0>:
1004e8ec:	20000b60 	.word	0x20000b60

1004e8f0 <llc_padv_mem_allocate_ucfg_weak>:
1004e8f0:	4770      	bx	lr

1004e8f2 <llc_padv_init_ucfg_weak>:
1004e8f2:	4770      	bx	lr

1004e8f4 <llc_priv_mem_allocate>:
1004e8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e8f6:	2800      	cmp	r0, #0
1004e8f8:	d046      	beq.n	1004e988 <llc_priv_mem_allocate+0x94>
1004e8fa:	460e      	mov	r6, r1
1004e8fc:	2501      	movs	r5, #1
1004e8fe:	2168      	movs	r1, #104	@ 0x68
1004e900:	4628      	mov	r0, r5
1004e902:	f7ff f98b 	bl	1004dc1c <csmem_mem_0_assign>
1004e906:	4f21      	ldr	r7, [pc, #132]	@ (1004e98c <__arm_cp.0_0>)
1004e908:	6839      	ldr	r1, [r7, #0]
1004e90a:	249c      	movs	r4, #156	@ 0x9c
1004e90c:	5909      	ldr	r1, [r1, r4]
1004e90e:	6088      	str	r0, [r1, #8]
1004e910:	40b5      	lsls	r5, r6
1004e912:	b2ee      	uxtb	r6, r5
1004e914:	2108      	movs	r1, #8
1004e916:	4630      	mov	r0, r6
1004e918:	f7ff f980 	bl	1004dc1c <csmem_mem_0_assign>
1004e91c:	6839      	ldr	r1, [r7, #0]
1004e91e:	5909      	ldr	r1, [r1, r4]
1004e920:	6889      	ldr	r1, [r1, #8]
1004e922:	724d      	strb	r5, [r1, #9]
1004e924:	6048      	str	r0, [r1, #4]
1004e926:	9600      	str	r6, [sp, #0]
1004e928:	0075      	lsls	r5, r6, #1
1004e92a:	2611      	movs	r6, #17
1004e92c:	2e21      	cmp	r6, #33	@ 0x21
1004e92e:	d00f      	beq.n	1004e950 <llc_priv_mem_allocate+0x5c>
1004e930:	2108      	movs	r1, #8
1004e932:	4628      	mov	r0, r5
1004e934:	f7ff f972 	bl	1004dc1c <csmem_mem_0_assign>
1004e938:	6839      	ldr	r1, [r7, #0]
1004e93a:	5909      	ldr	r1, [r1, r4]
1004e93c:	6889      	ldr	r1, [r1, #8]
1004e93e:	1989      	adds	r1, r1, r6
1004e940:	1f49      	subs	r1, r1, #5
1004e942:	6008      	str	r0, [r1, #0]
1004e944:	6838      	ldr	r0, [r7, #0]
1004e946:	5900      	ldr	r0, [r0, r4]
1004e948:	6880      	ldr	r0, [r0, #8]
1004e94a:	5585      	strb	r5, [r0, r6]
1004e94c:	3608      	adds	r6, #8
1004e94e:	e7ed      	b.n	1004e92c <llc_priv_mem_allocate+0x38>
1004e950:	2128      	movs	r1, #40	@ 0x28
1004e952:	9800      	ldr	r0, [sp, #0]
1004e954:	f7ff f962 	bl	1004dc1c <csmem_mem_0_assign>
1004e958:	6839      	ldr	r1, [r7, #0]
1004e95a:	5909      	ldr	r1, [r1, r4]
1004e95c:	6889      	ldr	r1, [r1, #8]
1004e95e:	6008      	str	r0, [r1, #0]
1004e960:	480b      	ldr	r0, [pc, #44]	@ (1004e990 <__arm_cp.0_1>)
1004e962:	2502      	movs	r5, #2
1004e964:	2601      	movs	r6, #1
1004e966:	4629      	mov	r1, r5
1004e968:	4632      	mov	r2, r6
1004e96a:	f7ff f945 	bl	1004dbf8 <csmem_mem_assign>
1004e96e:	6839      	ldr	r1, [r7, #0]
1004e970:	5909      	ldr	r1, [r1, r4]
1004e972:	6889      	ldr	r1, [r1, #8]
1004e974:	6488      	str	r0, [r1, #72]	@ 0x48
1004e976:	4806      	ldr	r0, [pc, #24]	@ (1004e990 <__arm_cp.0_1>)
1004e978:	4631      	mov	r1, r6
1004e97a:	462a      	mov	r2, r5
1004e97c:	f7ff f93c 	bl	1004dbf8 <csmem_mem_assign>
1004e980:	6839      	ldr	r1, [r7, #0]
1004e982:	5909      	ldr	r1, [r1, r4]
1004e984:	6889      	ldr	r1, [r1, #8]
1004e986:	64c8      	str	r0, [r1, #76]	@ 0x4c
1004e988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004e98a:	46c0      	nop			@ (mov r8, r8)

1004e98c <__arm_cp.0_0>:
1004e98c:	20000b60 	.word	0x20000b60

1004e990 <__arm_cp.0_1>:
1004e990:	20000b6c 	.word	0x20000b6c

1004e994 <llc_pscan_isr_ucfg_weak>:
1004e994:	2000      	movs	r0, #0
1004e996:	4770      	bx	lr

1004e998 <llc_pscan_get_cntxt_per_p>:
1004e998:	2190      	movs	r1, #144	@ 0x90
1004e99a:	4341      	muls	r1, r0
1004e99c:	4804      	ldr	r0, [pc, #16]	@ (1004e9b0 <__arm_cp.1_0>)
1004e99e:	6800      	ldr	r0, [r0, #0]
1004e9a0:	229c      	movs	r2, #156	@ 0x9c
1004e9a2:	5880      	ldr	r0, [r0, r2]
1004e9a4:	6840      	ldr	r0, [r0, #4]
1004e9a6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1004e9a8:	6800      	ldr	r0, [r0, #0]
1004e9aa:	6800      	ldr	r0, [r0, #0]
1004e9ac:	1840      	adds	r0, r0, r1
1004e9ae:	4770      	bx	lr

1004e9b0 <__arm_cp.1_0>:
1004e9b0:	20000b60 	.word	0x20000b60

1004e9b4 <llc_pscan_init_ucfg_weak>:
1004e9b4:	4770      	bx	lr

1004e9b6 <llc_pscan_mem_allocate_ucfg_weak>:
1004e9b6:	4770      	bx	lr

1004e9b8 <llc_pscan_wr_mem_allocate_ucfg_weak>:
1004e9b8:	b510      	push	{r4, lr}
1004e9ba:	2801      	cmp	r0, #1
1004e9bc:	d110      	bne.n	1004e9e0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004e9be:	2901      	cmp	r1, #1
1004e9c0:	d10e      	bne.n	1004e9e0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004e9c2:	2a01      	cmp	r2, #1
1004e9c4:	d10c      	bne.n	1004e9e0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004e9c6:	2400      	movs	r4, #0
1004e9c8:	4620      	mov	r0, r4
1004e9ca:	f7ff ffe5 	bl	1004e998 <llc_pscan_get_cntxt_per_p>
1004e9ce:	3014      	adds	r0, #20
1004e9d0:	4904      	ldr	r1, [pc, #16]	@ (1004e9e4 <__arm_cp.5_0>)
1004e9d2:	7f89      	ldrb	r1, [r1, #30]
1004e9d4:	2900      	cmp	r1, #0
1004e9d6:	d003      	beq.n	1004e9e0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004e9d8:	6004      	str	r4, [r0, #0]
1004e9da:	3090      	adds	r0, #144	@ 0x90
1004e9dc:	1e49      	subs	r1, r1, #1
1004e9de:	e7f9      	b.n	1004e9d4 <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1004e9e0:	bd10      	pop	{r4, pc}
1004e9e2:	46c0      	nop			@ (mov r8, r8)

1004e9e4 <__arm_cp.5_0>:
1004e9e4:	20000b70 	.word	0x20000b70

1004e9e8 <llc_scan_isr_uncoded_ucfg_weak>:
1004e9e8:	2000      	movs	r0, #0
1004e9ea:	4770      	bx	lr

1004e9ec <llc_scan_isr_coded_ucfg_weak>:
1004e9ec:	2000      	movs	r0, #0
1004e9ee:	4770      	bx	lr

1004e9f0 <smp_fsm_process_actions_wrt_state_tsk_ucfg_weak>:
1004e9f0:	4770      	bx	lr

1004e9f2 <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
1004e9f2:	4770      	bx	lr

1004e9f4 <smp_rxp_process_rxed_packets_tsk_ucfg_weak>:
1004e9f4:	4770      	bx	lr
	...

1004e9f8 <std>:
1004e9f8:	2300      	movs	r3, #0
1004e9fa:	b510      	push	{r4, lr}
1004e9fc:	0004      	movs	r4, r0
1004e9fe:	6003      	str	r3, [r0, #0]
1004ea00:	6043      	str	r3, [r0, #4]
1004ea02:	6083      	str	r3, [r0, #8]
1004ea04:	8181      	strh	r1, [r0, #12]
1004ea06:	6643      	str	r3, [r0, #100]	@ 0x64
1004ea08:	81c2      	strh	r2, [r0, #14]
1004ea0a:	6103      	str	r3, [r0, #16]
1004ea0c:	6143      	str	r3, [r0, #20]
1004ea0e:	6183      	str	r3, [r0, #24]
1004ea10:	0019      	movs	r1, r3
1004ea12:	2208      	movs	r2, #8
1004ea14:	305c      	adds	r0, #92	@ 0x5c
1004ea16:	f000 fad3 	bl	1004efc0 <memset>
1004ea1a:	4b0b      	ldr	r3, [pc, #44]	@ (1004ea48 <std+0x50>)
1004ea1c:	6224      	str	r4, [r4, #32]
1004ea1e:	6263      	str	r3, [r4, #36]	@ 0x24
1004ea20:	4b0a      	ldr	r3, [pc, #40]	@ (1004ea4c <std+0x54>)
1004ea22:	62a3      	str	r3, [r4, #40]	@ 0x28
1004ea24:	4b0a      	ldr	r3, [pc, #40]	@ (1004ea50 <std+0x58>)
1004ea26:	62e3      	str	r3, [r4, #44]	@ 0x2c
1004ea28:	4b0a      	ldr	r3, [pc, #40]	@ (1004ea54 <std+0x5c>)
1004ea2a:	6323      	str	r3, [r4, #48]	@ 0x30
1004ea2c:	4b0a      	ldr	r3, [pc, #40]	@ (1004ea58 <std+0x60>)
1004ea2e:	429c      	cmp	r4, r3
1004ea30:	d005      	beq.n	1004ea3e <std+0x46>
1004ea32:	4b0a      	ldr	r3, [pc, #40]	@ (1004ea5c <std+0x64>)
1004ea34:	429c      	cmp	r4, r3
1004ea36:	d002      	beq.n	1004ea3e <std+0x46>
1004ea38:	4b09      	ldr	r3, [pc, #36]	@ (1004ea60 <std+0x68>)
1004ea3a:	429c      	cmp	r4, r3
1004ea3c:	d103      	bne.n	1004ea46 <std+0x4e>
1004ea3e:	0020      	movs	r0, r4
1004ea40:	3058      	adds	r0, #88	@ 0x58
1004ea42:	f000 fb19 	bl	1004f078 <__retarget_lock_init_recursive>
1004ea46:	bd10      	pop	{r4, pc}
1004ea48:	1004edcd 	.word	0x1004edcd
1004ea4c:	1004edf5 	.word	0x1004edf5
1004ea50:	1004ee2d 	.word	0x1004ee2d
1004ea54:	1004ee59 	.word	0x1004ee59
1004ea58:	20000ba8 	.word	0x20000ba8
1004ea5c:	20000c10 	.word	0x20000c10
1004ea60:	20000c78 	.word	0x20000c78

1004ea64 <stdio_exit_handler>:
1004ea64:	b510      	push	{r4, lr}
1004ea66:	4a03      	ldr	r2, [pc, #12]	@ (1004ea74 <stdio_exit_handler+0x10>)
1004ea68:	4903      	ldr	r1, [pc, #12]	@ (1004ea78 <stdio_exit_handler+0x14>)
1004ea6a:	4804      	ldr	r0, [pc, #16]	@ (1004ea7c <stdio_exit_handler+0x18>)
1004ea6c:	f000 f86c 	bl	1004eb48 <_fwalk_sglue>
1004ea70:	bd10      	pop	{r4, pc}
1004ea72:	46c0      	nop			@ (mov r8, r8)
1004ea74:	20000d14 	.word	0x20000d14
1004ea78:	1004f92d 	.word	0x1004f92d
1004ea7c:	20000d24 	.word	0x20000d24

1004ea80 <cleanup_stdio>:
1004ea80:	6841      	ldr	r1, [r0, #4]
1004ea82:	4b0b      	ldr	r3, [pc, #44]	@ (1004eab0 <cleanup_stdio+0x30>)
1004ea84:	b510      	push	{r4, lr}
1004ea86:	0004      	movs	r4, r0
1004ea88:	4299      	cmp	r1, r3
1004ea8a:	d001      	beq.n	1004ea90 <cleanup_stdio+0x10>
1004ea8c:	f000 ff4e 	bl	1004f92c <_fflush_r>
1004ea90:	68a1      	ldr	r1, [r4, #8]
1004ea92:	4b08      	ldr	r3, [pc, #32]	@ (1004eab4 <cleanup_stdio+0x34>)
1004ea94:	4299      	cmp	r1, r3
1004ea96:	d002      	beq.n	1004ea9e <cleanup_stdio+0x1e>
1004ea98:	0020      	movs	r0, r4
1004ea9a:	f000 ff47 	bl	1004f92c <_fflush_r>
1004ea9e:	68e1      	ldr	r1, [r4, #12]
1004eaa0:	4b05      	ldr	r3, [pc, #20]	@ (1004eab8 <cleanup_stdio+0x38>)
1004eaa2:	4299      	cmp	r1, r3
1004eaa4:	d002      	beq.n	1004eaac <cleanup_stdio+0x2c>
1004eaa6:	0020      	movs	r0, r4
1004eaa8:	f000 ff40 	bl	1004f92c <_fflush_r>
1004eaac:	bd10      	pop	{r4, pc}
1004eaae:	46c0      	nop			@ (mov r8, r8)
1004eab0:	20000ba8 	.word	0x20000ba8
1004eab4:	20000c10 	.word	0x20000c10
1004eab8:	20000c78 	.word	0x20000c78

1004eabc <global_stdio_init.part.0>:
1004eabc:	b510      	push	{r4, lr}
1004eabe:	4b09      	ldr	r3, [pc, #36]	@ (1004eae4 <global_stdio_init.part.0+0x28>)
1004eac0:	4a09      	ldr	r2, [pc, #36]	@ (1004eae8 <global_stdio_init.part.0+0x2c>)
1004eac2:	2104      	movs	r1, #4
1004eac4:	601a      	str	r2, [r3, #0]
1004eac6:	4809      	ldr	r0, [pc, #36]	@ (1004eaec <global_stdio_init.part.0+0x30>)
1004eac8:	2200      	movs	r2, #0
1004eaca:	f7ff ff95 	bl	1004e9f8 <std>
1004eace:	2201      	movs	r2, #1
1004ead0:	2109      	movs	r1, #9
1004ead2:	4807      	ldr	r0, [pc, #28]	@ (1004eaf0 <global_stdio_init.part.0+0x34>)
1004ead4:	f7ff ff90 	bl	1004e9f8 <std>
1004ead8:	2202      	movs	r2, #2
1004eada:	2112      	movs	r1, #18
1004eadc:	4805      	ldr	r0, [pc, #20]	@ (1004eaf4 <global_stdio_init.part.0+0x38>)
1004eade:	f7ff ff8b 	bl	1004e9f8 <std>
1004eae2:	bd10      	pop	{r4, pc}
1004eae4:	20000ce0 	.word	0x20000ce0
1004eae8:	1004ea65 	.word	0x1004ea65
1004eaec:	20000ba8 	.word	0x20000ba8
1004eaf0:	20000c10 	.word	0x20000c10
1004eaf4:	20000c78 	.word	0x20000c78

1004eaf8 <__sfp_lock_acquire>:
1004eaf8:	b510      	push	{r4, lr}
1004eafa:	4802      	ldr	r0, [pc, #8]	@ (1004eb04 <__sfp_lock_acquire+0xc>)
1004eafc:	f000 fabd 	bl	1004f07a <__retarget_lock_acquire_recursive>
1004eb00:	bd10      	pop	{r4, pc}
1004eb02:	46c0      	nop			@ (mov r8, r8)
1004eb04:	20000ce9 	.word	0x20000ce9

1004eb08 <__sfp_lock_release>:
1004eb08:	b510      	push	{r4, lr}
1004eb0a:	4802      	ldr	r0, [pc, #8]	@ (1004eb14 <__sfp_lock_release+0xc>)
1004eb0c:	f000 fab6 	bl	1004f07c <__retarget_lock_release_recursive>
1004eb10:	bd10      	pop	{r4, pc}
1004eb12:	46c0      	nop			@ (mov r8, r8)
1004eb14:	20000ce9 	.word	0x20000ce9

1004eb18 <__sinit>:
1004eb18:	b510      	push	{r4, lr}
1004eb1a:	0004      	movs	r4, r0
1004eb1c:	f7ff ffec 	bl	1004eaf8 <__sfp_lock_acquire>
1004eb20:	6a23      	ldr	r3, [r4, #32]
1004eb22:	2b00      	cmp	r3, #0
1004eb24:	d002      	beq.n	1004eb2c <__sinit+0x14>
1004eb26:	f7ff ffef 	bl	1004eb08 <__sfp_lock_release>
1004eb2a:	bd10      	pop	{r4, pc}
1004eb2c:	4b04      	ldr	r3, [pc, #16]	@ (1004eb40 <__sinit+0x28>)
1004eb2e:	6223      	str	r3, [r4, #32]
1004eb30:	4b04      	ldr	r3, [pc, #16]	@ (1004eb44 <__sinit+0x2c>)
1004eb32:	681b      	ldr	r3, [r3, #0]
1004eb34:	2b00      	cmp	r3, #0
1004eb36:	d1f6      	bne.n	1004eb26 <__sinit+0xe>
1004eb38:	f7ff ffc0 	bl	1004eabc <global_stdio_init.part.0>
1004eb3c:	e7f3      	b.n	1004eb26 <__sinit+0xe>
1004eb3e:	46c0      	nop			@ (mov r8, r8)
1004eb40:	1004ea81 	.word	0x1004ea81
1004eb44:	20000ce0 	.word	0x20000ce0

1004eb48 <_fwalk_sglue>:
1004eb48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004eb4a:	0014      	movs	r4, r2
1004eb4c:	2600      	movs	r6, #0
1004eb4e:	9000      	str	r0, [sp, #0]
1004eb50:	9101      	str	r1, [sp, #4]
1004eb52:	68a5      	ldr	r5, [r4, #8]
1004eb54:	6867      	ldr	r7, [r4, #4]
1004eb56:	3f01      	subs	r7, #1
1004eb58:	d504      	bpl.n	1004eb64 <_fwalk_sglue+0x1c>
1004eb5a:	6824      	ldr	r4, [r4, #0]
1004eb5c:	2c00      	cmp	r4, #0
1004eb5e:	d1f8      	bne.n	1004eb52 <_fwalk_sglue+0xa>
1004eb60:	0030      	movs	r0, r6
1004eb62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004eb64:	89ab      	ldrh	r3, [r5, #12]
1004eb66:	2b01      	cmp	r3, #1
1004eb68:	d908      	bls.n	1004eb7c <_fwalk_sglue+0x34>
1004eb6a:	220e      	movs	r2, #14
1004eb6c:	5eab      	ldrsh	r3, [r5, r2]
1004eb6e:	3301      	adds	r3, #1
1004eb70:	d004      	beq.n	1004eb7c <_fwalk_sglue+0x34>
1004eb72:	0029      	movs	r1, r5
1004eb74:	9800      	ldr	r0, [sp, #0]
1004eb76:	9b01      	ldr	r3, [sp, #4]
1004eb78:	4798      	blx	r3
1004eb7a:	4306      	orrs	r6, r0
1004eb7c:	3568      	adds	r5, #104	@ 0x68
1004eb7e:	e7ea      	b.n	1004eb56 <_fwalk_sglue+0xe>

1004eb80 <iprintf>:
1004eb80:	b40f      	push	{r0, r1, r2, r3}
1004eb82:	b507      	push	{r0, r1, r2, lr}
1004eb84:	4905      	ldr	r1, [pc, #20]	@ (1004eb9c <iprintf+0x1c>)
1004eb86:	ab04      	add	r3, sp, #16
1004eb88:	6808      	ldr	r0, [r1, #0]
1004eb8a:	cb04      	ldmia	r3!, {r2}
1004eb8c:	6881      	ldr	r1, [r0, #8]
1004eb8e:	9301      	str	r3, [sp, #4]
1004eb90:	f000 fbac 	bl	1004f2ec <_vfiprintf_r>
1004eb94:	b003      	add	sp, #12
1004eb96:	bc08      	pop	{r3}
1004eb98:	b004      	add	sp, #16
1004eb9a:	4718      	bx	r3
1004eb9c:	20000d20 	.word	0x20000d20

1004eba0 <_puts_r>:
1004eba0:	6a03      	ldr	r3, [r0, #32]
1004eba2:	b570      	push	{r4, r5, r6, lr}
1004eba4:	0005      	movs	r5, r0
1004eba6:	000e      	movs	r6, r1
1004eba8:	6884      	ldr	r4, [r0, #8]
1004ebaa:	2b00      	cmp	r3, #0
1004ebac:	d101      	bne.n	1004ebb2 <_puts_r+0x12>
1004ebae:	f7ff ffb3 	bl	1004eb18 <__sinit>
1004ebb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004ebb4:	07db      	lsls	r3, r3, #31
1004ebb6:	d405      	bmi.n	1004ebc4 <_puts_r+0x24>
1004ebb8:	89a3      	ldrh	r3, [r4, #12]
1004ebba:	059b      	lsls	r3, r3, #22
1004ebbc:	d402      	bmi.n	1004ebc4 <_puts_r+0x24>
1004ebbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004ebc0:	f000 fa5b 	bl	1004f07a <__retarget_lock_acquire_recursive>
1004ebc4:	89a3      	ldrh	r3, [r4, #12]
1004ebc6:	071b      	lsls	r3, r3, #28
1004ebc8:	d502      	bpl.n	1004ebd0 <_puts_r+0x30>
1004ebca:	6923      	ldr	r3, [r4, #16]
1004ebcc:	2b00      	cmp	r3, #0
1004ebce:	d11f      	bne.n	1004ec10 <_puts_r+0x70>
1004ebd0:	0021      	movs	r1, r4
1004ebd2:	0028      	movs	r0, r5
1004ebd4:	f000 f988 	bl	1004eee8 <__swsetup_r>
1004ebd8:	2800      	cmp	r0, #0
1004ebda:	d019      	beq.n	1004ec10 <_puts_r+0x70>
1004ebdc:	2501      	movs	r5, #1
1004ebde:	426d      	negs	r5, r5
1004ebe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004ebe2:	07db      	lsls	r3, r3, #31
1004ebe4:	d405      	bmi.n	1004ebf2 <_puts_r+0x52>
1004ebe6:	89a3      	ldrh	r3, [r4, #12]
1004ebe8:	059b      	lsls	r3, r3, #22
1004ebea:	d402      	bmi.n	1004ebf2 <_puts_r+0x52>
1004ebec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004ebee:	f000 fa45 	bl	1004f07c <__retarget_lock_release_recursive>
1004ebf2:	0028      	movs	r0, r5
1004ebf4:	bd70      	pop	{r4, r5, r6, pc}
1004ebf6:	3601      	adds	r6, #1
1004ebf8:	60a3      	str	r3, [r4, #8]
1004ebfa:	2b00      	cmp	r3, #0
1004ebfc:	da04      	bge.n	1004ec08 <_puts_r+0x68>
1004ebfe:	69a2      	ldr	r2, [r4, #24]
1004ec00:	429a      	cmp	r2, r3
1004ec02:	dc16      	bgt.n	1004ec32 <_puts_r+0x92>
1004ec04:	290a      	cmp	r1, #10
1004ec06:	d014      	beq.n	1004ec32 <_puts_r+0x92>
1004ec08:	6823      	ldr	r3, [r4, #0]
1004ec0a:	1c5a      	adds	r2, r3, #1
1004ec0c:	6022      	str	r2, [r4, #0]
1004ec0e:	7019      	strb	r1, [r3, #0]
1004ec10:	68a3      	ldr	r3, [r4, #8]
1004ec12:	7831      	ldrb	r1, [r6, #0]
1004ec14:	3b01      	subs	r3, #1
1004ec16:	2900      	cmp	r1, #0
1004ec18:	d1ed      	bne.n	1004ebf6 <_puts_r+0x56>
1004ec1a:	60a3      	str	r3, [r4, #8]
1004ec1c:	2b00      	cmp	r3, #0
1004ec1e:	da0f      	bge.n	1004ec40 <_puts_r+0xa0>
1004ec20:	0022      	movs	r2, r4
1004ec22:	0028      	movs	r0, r5
1004ec24:	310a      	adds	r1, #10
1004ec26:	f000 f91d 	bl	1004ee64 <__swbuf_r>
1004ec2a:	3001      	adds	r0, #1
1004ec2c:	d0d6      	beq.n	1004ebdc <_puts_r+0x3c>
1004ec2e:	250a      	movs	r5, #10
1004ec30:	e7d6      	b.n	1004ebe0 <_puts_r+0x40>
1004ec32:	0022      	movs	r2, r4
1004ec34:	0028      	movs	r0, r5
1004ec36:	f000 f915 	bl	1004ee64 <__swbuf_r>
1004ec3a:	3001      	adds	r0, #1
1004ec3c:	d1e8      	bne.n	1004ec10 <_puts_r+0x70>
1004ec3e:	e7cd      	b.n	1004ebdc <_puts_r+0x3c>
1004ec40:	6823      	ldr	r3, [r4, #0]
1004ec42:	1c5a      	adds	r2, r3, #1
1004ec44:	6022      	str	r2, [r4, #0]
1004ec46:	220a      	movs	r2, #10
1004ec48:	701a      	strb	r2, [r3, #0]
1004ec4a:	e7f0      	b.n	1004ec2e <_puts_r+0x8e>

1004ec4c <puts>:
1004ec4c:	b510      	push	{r4, lr}
1004ec4e:	4b03      	ldr	r3, [pc, #12]	@ (1004ec5c <puts+0x10>)
1004ec50:	0001      	movs	r1, r0
1004ec52:	6818      	ldr	r0, [r3, #0]
1004ec54:	f7ff ffa4 	bl	1004eba0 <_puts_r>
1004ec58:	bd10      	pop	{r4, pc}
1004ec5a:	46c0      	nop			@ (mov r8, r8)
1004ec5c:	20000d20 	.word	0x20000d20

1004ec60 <setvbuf>:
1004ec60:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ec62:	001d      	movs	r5, r3
1004ec64:	4b57      	ldr	r3, [pc, #348]	@ (1004edc4 <setvbuf+0x164>)
1004ec66:	b085      	sub	sp, #20
1004ec68:	681e      	ldr	r6, [r3, #0]
1004ec6a:	0004      	movs	r4, r0
1004ec6c:	000f      	movs	r7, r1
1004ec6e:	9200      	str	r2, [sp, #0]
1004ec70:	2e00      	cmp	r6, #0
1004ec72:	d005      	beq.n	1004ec80 <setvbuf+0x20>
1004ec74:	6a33      	ldr	r3, [r6, #32]
1004ec76:	2b00      	cmp	r3, #0
1004ec78:	d102      	bne.n	1004ec80 <setvbuf+0x20>
1004ec7a:	0030      	movs	r0, r6
1004ec7c:	f7ff ff4c 	bl	1004eb18 <__sinit>
1004ec80:	9b00      	ldr	r3, [sp, #0]
1004ec82:	2b02      	cmp	r3, #2
1004ec84:	d005      	beq.n	1004ec92 <setvbuf+0x32>
1004ec86:	2b01      	cmp	r3, #1
1004ec88:	d900      	bls.n	1004ec8c <setvbuf+0x2c>
1004ec8a:	e097      	b.n	1004edbc <setvbuf+0x15c>
1004ec8c:	2d00      	cmp	r5, #0
1004ec8e:	da00      	bge.n	1004ec92 <setvbuf+0x32>
1004ec90:	e094      	b.n	1004edbc <setvbuf+0x15c>
1004ec92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004ec94:	07db      	lsls	r3, r3, #31
1004ec96:	d405      	bmi.n	1004eca4 <setvbuf+0x44>
1004ec98:	89a3      	ldrh	r3, [r4, #12]
1004ec9a:	059b      	lsls	r3, r3, #22
1004ec9c:	d402      	bmi.n	1004eca4 <setvbuf+0x44>
1004ec9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004eca0:	f000 f9eb 	bl	1004f07a <__retarget_lock_acquire_recursive>
1004eca4:	0021      	movs	r1, r4
1004eca6:	0030      	movs	r0, r6
1004eca8:	f000 fe40 	bl	1004f92c <_fflush_r>
1004ecac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004ecae:	2900      	cmp	r1, #0
1004ecb0:	d008      	beq.n	1004ecc4 <setvbuf+0x64>
1004ecb2:	0023      	movs	r3, r4
1004ecb4:	3344      	adds	r3, #68	@ 0x44
1004ecb6:	4299      	cmp	r1, r3
1004ecb8:	d002      	beq.n	1004ecc0 <setvbuf+0x60>
1004ecba:	0030      	movs	r0, r6
1004ecbc:	f000 f9e8 	bl	1004f090 <_free_r>
1004ecc0:	2300      	movs	r3, #0
1004ecc2:	6363      	str	r3, [r4, #52]	@ 0x34
1004ecc4:	2300      	movs	r3, #0
1004ecc6:	61a3      	str	r3, [r4, #24]
1004ecc8:	6063      	str	r3, [r4, #4]
1004ecca:	89a3      	ldrh	r3, [r4, #12]
1004eccc:	061b      	lsls	r3, r3, #24
1004ecce:	d503      	bpl.n	1004ecd8 <setvbuf+0x78>
1004ecd0:	0030      	movs	r0, r6
1004ecd2:	6921      	ldr	r1, [r4, #16]
1004ecd4:	f000 f9dc 	bl	1004f090 <_free_r>
1004ecd8:	89a3      	ldrh	r3, [r4, #12]
1004ecda:	4a3b      	ldr	r2, [pc, #236]	@ (1004edc8 <setvbuf+0x168>)
1004ecdc:	4013      	ands	r3, r2
1004ecde:	81a3      	strh	r3, [r4, #12]
1004ece0:	9b00      	ldr	r3, [sp, #0]
1004ece2:	2b02      	cmp	r3, #2
1004ece4:	d060      	beq.n	1004eda8 <setvbuf+0x148>
1004ece6:	ab03      	add	r3, sp, #12
1004ece8:	0021      	movs	r1, r4
1004ecea:	0030      	movs	r0, r6
1004ecec:	aa02      	add	r2, sp, #8
1004ecee:	f000 fe49 	bl	1004f984 <__swhatbuf_r>
1004ecf2:	89a3      	ldrh	r3, [r4, #12]
1004ecf4:	4303      	orrs	r3, r0
1004ecf6:	81a3      	strh	r3, [r4, #12]
1004ecf8:	2d00      	cmp	r5, #0
1004ecfa:	d124      	bne.n	1004ed46 <setvbuf+0xe6>
1004ecfc:	9d02      	ldr	r5, [sp, #8]
1004ecfe:	0028      	movs	r0, r5
1004ed00:	f000 fa10 	bl	1004f124 <malloc>
1004ed04:	9501      	str	r5, [sp, #4]
1004ed06:	1e07      	subs	r7, r0, #0
1004ed08:	d148      	bne.n	1004ed9c <setvbuf+0x13c>
1004ed0a:	9b02      	ldr	r3, [sp, #8]
1004ed0c:	9301      	str	r3, [sp, #4]
1004ed0e:	42ab      	cmp	r3, r5
1004ed10:	d13f      	bne.n	1004ed92 <setvbuf+0x132>
1004ed12:	2501      	movs	r5, #1
1004ed14:	426d      	negs	r5, r5
1004ed16:	220c      	movs	r2, #12
1004ed18:	5ea3      	ldrsh	r3, [r4, r2]
1004ed1a:	2202      	movs	r2, #2
1004ed1c:	431a      	orrs	r2, r3
1004ed1e:	81a2      	strh	r2, [r4, #12]
1004ed20:	2200      	movs	r2, #0
1004ed22:	60a2      	str	r2, [r4, #8]
1004ed24:	0022      	movs	r2, r4
1004ed26:	3247      	adds	r2, #71	@ 0x47
1004ed28:	6022      	str	r2, [r4, #0]
1004ed2a:	6122      	str	r2, [r4, #16]
1004ed2c:	2201      	movs	r2, #1
1004ed2e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
1004ed30:	6162      	str	r2, [r4, #20]
1004ed32:	4211      	tst	r1, r2
1004ed34:	d104      	bne.n	1004ed40 <setvbuf+0xe0>
1004ed36:	059b      	lsls	r3, r3, #22
1004ed38:	d402      	bmi.n	1004ed40 <setvbuf+0xe0>
1004ed3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004ed3c:	f000 f99e 	bl	1004f07c <__retarget_lock_release_recursive>
1004ed40:	0028      	movs	r0, r5
1004ed42:	b005      	add	sp, #20
1004ed44:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ed46:	2f00      	cmp	r7, #0
1004ed48:	d0d9      	beq.n	1004ecfe <setvbuf+0x9e>
1004ed4a:	6a33      	ldr	r3, [r6, #32]
1004ed4c:	2b00      	cmp	r3, #0
1004ed4e:	d102      	bne.n	1004ed56 <setvbuf+0xf6>
1004ed50:	0030      	movs	r0, r6
1004ed52:	f7ff fee1 	bl	1004eb18 <__sinit>
1004ed56:	9b00      	ldr	r3, [sp, #0]
1004ed58:	2b01      	cmp	r3, #1
1004ed5a:	d103      	bne.n	1004ed64 <setvbuf+0x104>
1004ed5c:	89a3      	ldrh	r3, [r4, #12]
1004ed5e:	9a00      	ldr	r2, [sp, #0]
1004ed60:	431a      	orrs	r2, r3
1004ed62:	81a2      	strh	r2, [r4, #12]
1004ed64:	220c      	movs	r2, #12
1004ed66:	5ea3      	ldrsh	r3, [r4, r2]
1004ed68:	2208      	movs	r2, #8
1004ed6a:	0019      	movs	r1, r3
1004ed6c:	6027      	str	r7, [r4, #0]
1004ed6e:	6127      	str	r7, [r4, #16]
1004ed70:	6165      	str	r5, [r4, #20]
1004ed72:	4011      	ands	r1, r2
1004ed74:	4213      	tst	r3, r2
1004ed76:	d01b      	beq.n	1004edb0 <setvbuf+0x150>
1004ed78:	07da      	lsls	r2, r3, #31
1004ed7a:	d517      	bpl.n	1004edac <setvbuf+0x14c>
1004ed7c:	2200      	movs	r2, #0
1004ed7e:	426d      	negs	r5, r5
1004ed80:	60a2      	str	r2, [r4, #8]
1004ed82:	61a5      	str	r5, [r4, #24]
1004ed84:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004ed86:	07d2      	lsls	r2, r2, #31
1004ed88:	d401      	bmi.n	1004ed8e <setvbuf+0x12e>
1004ed8a:	059b      	lsls	r3, r3, #22
1004ed8c:	d512      	bpl.n	1004edb4 <setvbuf+0x154>
1004ed8e:	2500      	movs	r5, #0
1004ed90:	e7d6      	b.n	1004ed40 <setvbuf+0xe0>
1004ed92:	9801      	ldr	r0, [sp, #4]
1004ed94:	f000 f9c6 	bl	1004f124 <malloc>
1004ed98:	1e07      	subs	r7, r0, #0
1004ed9a:	d0ba      	beq.n	1004ed12 <setvbuf+0xb2>
1004ed9c:	2380      	movs	r3, #128	@ 0x80
1004ed9e:	89a2      	ldrh	r2, [r4, #12]
1004eda0:	9d01      	ldr	r5, [sp, #4]
1004eda2:	4313      	orrs	r3, r2
1004eda4:	81a3      	strh	r3, [r4, #12]
1004eda6:	e7d0      	b.n	1004ed4a <setvbuf+0xea>
1004eda8:	2500      	movs	r5, #0
1004edaa:	e7b4      	b.n	1004ed16 <setvbuf+0xb6>
1004edac:	60a5      	str	r5, [r4, #8]
1004edae:	e7e9      	b.n	1004ed84 <setvbuf+0x124>
1004edb0:	60a1      	str	r1, [r4, #8]
1004edb2:	e7e7      	b.n	1004ed84 <setvbuf+0x124>
1004edb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004edb6:	f000 f961 	bl	1004f07c <__retarget_lock_release_recursive>
1004edba:	e7e8      	b.n	1004ed8e <setvbuf+0x12e>
1004edbc:	2501      	movs	r5, #1
1004edbe:	426d      	negs	r5, r5
1004edc0:	e7be      	b.n	1004ed40 <setvbuf+0xe0>
1004edc2:	46c0      	nop			@ (mov r8, r8)
1004edc4:	20000d20 	.word	0x20000d20
1004edc8:	fffff35c 	.word	0xfffff35c

1004edcc <__sread>:
1004edcc:	b570      	push	{r4, r5, r6, lr}
1004edce:	000c      	movs	r4, r1
1004edd0:	250e      	movs	r5, #14
1004edd2:	5f49      	ldrsh	r1, [r1, r5]
1004edd4:	f000 f922 	bl	1004f01c <_read_r>
1004edd8:	2800      	cmp	r0, #0
1004edda:	db03      	blt.n	1004ede4 <__sread+0x18>
1004eddc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
1004edde:	181b      	adds	r3, r3, r0
1004ede0:	6563      	str	r3, [r4, #84]	@ 0x54
1004ede2:	bd70      	pop	{r4, r5, r6, pc}
1004ede4:	89a3      	ldrh	r3, [r4, #12]
1004ede6:	4a02      	ldr	r2, [pc, #8]	@ (1004edf0 <__sread+0x24>)
1004ede8:	4013      	ands	r3, r2
1004edea:	81a3      	strh	r3, [r4, #12]
1004edec:	e7f9      	b.n	1004ede2 <__sread+0x16>
1004edee:	46c0      	nop			@ (mov r8, r8)
1004edf0:	ffffefff 	.word	0xffffefff

1004edf4 <__swrite>:
1004edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004edf6:	001f      	movs	r7, r3
1004edf8:	898b      	ldrh	r3, [r1, #12]
1004edfa:	0005      	movs	r5, r0
1004edfc:	000c      	movs	r4, r1
1004edfe:	0016      	movs	r6, r2
1004ee00:	05db      	lsls	r3, r3, #23
1004ee02:	d505      	bpl.n	1004ee10 <__swrite+0x1c>
1004ee04:	230e      	movs	r3, #14
1004ee06:	5ec9      	ldrsh	r1, [r1, r3]
1004ee08:	2200      	movs	r2, #0
1004ee0a:	2302      	movs	r3, #2
1004ee0c:	f000 f8f2 	bl	1004eff4 <_lseek_r>
1004ee10:	89a3      	ldrh	r3, [r4, #12]
1004ee12:	4a05      	ldr	r2, [pc, #20]	@ (1004ee28 <__swrite+0x34>)
1004ee14:	0028      	movs	r0, r5
1004ee16:	4013      	ands	r3, r2
1004ee18:	81a3      	strh	r3, [r4, #12]
1004ee1a:	0032      	movs	r2, r6
1004ee1c:	230e      	movs	r3, #14
1004ee1e:	5ee1      	ldrsh	r1, [r4, r3]
1004ee20:	003b      	movs	r3, r7
1004ee22:	f000 f90f 	bl	1004f044 <_write_r>
1004ee26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004ee28:	ffffefff 	.word	0xffffefff

1004ee2c <__sseek>:
1004ee2c:	b570      	push	{r4, r5, r6, lr}
1004ee2e:	000c      	movs	r4, r1
1004ee30:	250e      	movs	r5, #14
1004ee32:	5f49      	ldrsh	r1, [r1, r5]
1004ee34:	f000 f8de 	bl	1004eff4 <_lseek_r>
1004ee38:	89a3      	ldrh	r3, [r4, #12]
1004ee3a:	1c42      	adds	r2, r0, #1
1004ee3c:	d103      	bne.n	1004ee46 <__sseek+0x1a>
1004ee3e:	4a05      	ldr	r2, [pc, #20]	@ (1004ee54 <__sseek+0x28>)
1004ee40:	4013      	ands	r3, r2
1004ee42:	81a3      	strh	r3, [r4, #12]
1004ee44:	bd70      	pop	{r4, r5, r6, pc}
1004ee46:	2280      	movs	r2, #128	@ 0x80
1004ee48:	0152      	lsls	r2, r2, #5
1004ee4a:	4313      	orrs	r3, r2
1004ee4c:	81a3      	strh	r3, [r4, #12]
1004ee4e:	6560      	str	r0, [r4, #84]	@ 0x54
1004ee50:	e7f8      	b.n	1004ee44 <__sseek+0x18>
1004ee52:	46c0      	nop			@ (mov r8, r8)
1004ee54:	ffffefff 	.word	0xffffefff

1004ee58 <__sclose>:
1004ee58:	b510      	push	{r4, lr}
1004ee5a:	230e      	movs	r3, #14
1004ee5c:	5ec9      	ldrsh	r1, [r1, r3]
1004ee5e:	f000 f8b7 	bl	1004efd0 <_close_r>
1004ee62:	bd10      	pop	{r4, pc}

1004ee64 <__swbuf_r>:
1004ee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ee66:	0006      	movs	r6, r0
1004ee68:	000d      	movs	r5, r1
1004ee6a:	0014      	movs	r4, r2
1004ee6c:	2800      	cmp	r0, #0
1004ee6e:	d004      	beq.n	1004ee7a <__swbuf_r+0x16>
1004ee70:	6a03      	ldr	r3, [r0, #32]
1004ee72:	2b00      	cmp	r3, #0
1004ee74:	d101      	bne.n	1004ee7a <__swbuf_r+0x16>
1004ee76:	f7ff fe4f 	bl	1004eb18 <__sinit>
1004ee7a:	69a3      	ldr	r3, [r4, #24]
1004ee7c:	60a3      	str	r3, [r4, #8]
1004ee7e:	89a3      	ldrh	r3, [r4, #12]
1004ee80:	071b      	lsls	r3, r3, #28
1004ee82:	d502      	bpl.n	1004ee8a <__swbuf_r+0x26>
1004ee84:	6923      	ldr	r3, [r4, #16]
1004ee86:	2b00      	cmp	r3, #0
1004ee88:	d109      	bne.n	1004ee9e <__swbuf_r+0x3a>
1004ee8a:	0021      	movs	r1, r4
1004ee8c:	0030      	movs	r0, r6
1004ee8e:	f000 f82b 	bl	1004eee8 <__swsetup_r>
1004ee92:	2800      	cmp	r0, #0
1004ee94:	d003      	beq.n	1004ee9e <__swbuf_r+0x3a>
1004ee96:	2501      	movs	r5, #1
1004ee98:	426d      	negs	r5, r5
1004ee9a:	0028      	movs	r0, r5
1004ee9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004ee9e:	6923      	ldr	r3, [r4, #16]
1004eea0:	6820      	ldr	r0, [r4, #0]
1004eea2:	b2ef      	uxtb	r7, r5
1004eea4:	1ac0      	subs	r0, r0, r3
1004eea6:	6963      	ldr	r3, [r4, #20]
1004eea8:	b2ed      	uxtb	r5, r5
1004eeaa:	4283      	cmp	r3, r0
1004eeac:	dc05      	bgt.n	1004eeba <__swbuf_r+0x56>
1004eeae:	0021      	movs	r1, r4
1004eeb0:	0030      	movs	r0, r6
1004eeb2:	f000 fd3b 	bl	1004f92c <_fflush_r>
1004eeb6:	2800      	cmp	r0, #0
1004eeb8:	d1ed      	bne.n	1004ee96 <__swbuf_r+0x32>
1004eeba:	68a3      	ldr	r3, [r4, #8]
1004eebc:	3001      	adds	r0, #1
1004eebe:	3b01      	subs	r3, #1
1004eec0:	60a3      	str	r3, [r4, #8]
1004eec2:	6823      	ldr	r3, [r4, #0]
1004eec4:	1c5a      	adds	r2, r3, #1
1004eec6:	6022      	str	r2, [r4, #0]
1004eec8:	701f      	strb	r7, [r3, #0]
1004eeca:	6963      	ldr	r3, [r4, #20]
1004eecc:	4283      	cmp	r3, r0
1004eece:	d004      	beq.n	1004eeda <__swbuf_r+0x76>
1004eed0:	89a3      	ldrh	r3, [r4, #12]
1004eed2:	07db      	lsls	r3, r3, #31
1004eed4:	d5e1      	bpl.n	1004ee9a <__swbuf_r+0x36>
1004eed6:	2d0a      	cmp	r5, #10
1004eed8:	d1df      	bne.n	1004ee9a <__swbuf_r+0x36>
1004eeda:	0021      	movs	r1, r4
1004eedc:	0030      	movs	r0, r6
1004eede:	f000 fd25 	bl	1004f92c <_fflush_r>
1004eee2:	2800      	cmp	r0, #0
1004eee4:	d0d9      	beq.n	1004ee9a <__swbuf_r+0x36>
1004eee6:	e7d6      	b.n	1004ee96 <__swbuf_r+0x32>

1004eee8 <__swsetup_r>:
1004eee8:	4b2d      	ldr	r3, [pc, #180]	@ (1004efa0 <__swsetup_r+0xb8>)
1004eeea:	b570      	push	{r4, r5, r6, lr}
1004eeec:	0005      	movs	r5, r0
1004eeee:	6818      	ldr	r0, [r3, #0]
1004eef0:	000c      	movs	r4, r1
1004eef2:	2800      	cmp	r0, #0
1004eef4:	d004      	beq.n	1004ef00 <__swsetup_r+0x18>
1004eef6:	6a03      	ldr	r3, [r0, #32]
1004eef8:	2b00      	cmp	r3, #0
1004eefa:	d101      	bne.n	1004ef00 <__swsetup_r+0x18>
1004eefc:	f7ff fe0c 	bl	1004eb18 <__sinit>
1004ef00:	230c      	movs	r3, #12
1004ef02:	5ee2      	ldrsh	r2, [r4, r3]
1004ef04:	0713      	lsls	r3, r2, #28
1004ef06:	d423      	bmi.n	1004ef50 <__swsetup_r+0x68>
1004ef08:	06d3      	lsls	r3, r2, #27
1004ef0a:	d407      	bmi.n	1004ef1c <__swsetup_r+0x34>
1004ef0c:	2309      	movs	r3, #9
1004ef0e:	602b      	str	r3, [r5, #0]
1004ef10:	2340      	movs	r3, #64	@ 0x40
1004ef12:	2001      	movs	r0, #1
1004ef14:	4313      	orrs	r3, r2
1004ef16:	81a3      	strh	r3, [r4, #12]
1004ef18:	4240      	negs	r0, r0
1004ef1a:	e03a      	b.n	1004ef92 <__swsetup_r+0xaa>
1004ef1c:	0752      	lsls	r2, r2, #29
1004ef1e:	d513      	bpl.n	1004ef48 <__swsetup_r+0x60>
1004ef20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004ef22:	2900      	cmp	r1, #0
1004ef24:	d008      	beq.n	1004ef38 <__swsetup_r+0x50>
1004ef26:	0023      	movs	r3, r4
1004ef28:	3344      	adds	r3, #68	@ 0x44
1004ef2a:	4299      	cmp	r1, r3
1004ef2c:	d002      	beq.n	1004ef34 <__swsetup_r+0x4c>
1004ef2e:	0028      	movs	r0, r5
1004ef30:	f000 f8ae 	bl	1004f090 <_free_r>
1004ef34:	2300      	movs	r3, #0
1004ef36:	6363      	str	r3, [r4, #52]	@ 0x34
1004ef38:	2224      	movs	r2, #36	@ 0x24
1004ef3a:	89a3      	ldrh	r3, [r4, #12]
1004ef3c:	4393      	bics	r3, r2
1004ef3e:	81a3      	strh	r3, [r4, #12]
1004ef40:	2300      	movs	r3, #0
1004ef42:	6063      	str	r3, [r4, #4]
1004ef44:	6923      	ldr	r3, [r4, #16]
1004ef46:	6023      	str	r3, [r4, #0]
1004ef48:	2308      	movs	r3, #8
1004ef4a:	89a2      	ldrh	r2, [r4, #12]
1004ef4c:	4313      	orrs	r3, r2
1004ef4e:	81a3      	strh	r3, [r4, #12]
1004ef50:	6923      	ldr	r3, [r4, #16]
1004ef52:	2b00      	cmp	r3, #0
1004ef54:	d10b      	bne.n	1004ef6e <__swsetup_r+0x86>
1004ef56:	21a0      	movs	r1, #160	@ 0xa0
1004ef58:	2280      	movs	r2, #128	@ 0x80
1004ef5a:	89a3      	ldrh	r3, [r4, #12]
1004ef5c:	0089      	lsls	r1, r1, #2
1004ef5e:	0092      	lsls	r2, r2, #2
1004ef60:	400b      	ands	r3, r1
1004ef62:	4293      	cmp	r3, r2
1004ef64:	d003      	beq.n	1004ef6e <__swsetup_r+0x86>
1004ef66:	0021      	movs	r1, r4
1004ef68:	0028      	movs	r0, r5
1004ef6a:	f000 fd35 	bl	1004f9d8 <__smakebuf_r>
1004ef6e:	230c      	movs	r3, #12
1004ef70:	5ee2      	ldrsh	r2, [r4, r3]
1004ef72:	2101      	movs	r1, #1
1004ef74:	0013      	movs	r3, r2
1004ef76:	400b      	ands	r3, r1
1004ef78:	420a      	tst	r2, r1
1004ef7a:	d00b      	beq.n	1004ef94 <__swsetup_r+0xac>
1004ef7c:	2300      	movs	r3, #0
1004ef7e:	60a3      	str	r3, [r4, #8]
1004ef80:	6963      	ldr	r3, [r4, #20]
1004ef82:	425b      	negs	r3, r3
1004ef84:	61a3      	str	r3, [r4, #24]
1004ef86:	2000      	movs	r0, #0
1004ef88:	6923      	ldr	r3, [r4, #16]
1004ef8a:	4283      	cmp	r3, r0
1004ef8c:	d101      	bne.n	1004ef92 <__swsetup_r+0xaa>
1004ef8e:	0613      	lsls	r3, r2, #24
1004ef90:	d4be      	bmi.n	1004ef10 <__swsetup_r+0x28>
1004ef92:	bd70      	pop	{r4, r5, r6, pc}
1004ef94:	0791      	lsls	r1, r2, #30
1004ef96:	d400      	bmi.n	1004ef9a <__swsetup_r+0xb2>
1004ef98:	6963      	ldr	r3, [r4, #20]
1004ef9a:	60a3      	str	r3, [r4, #8]
1004ef9c:	e7f3      	b.n	1004ef86 <__swsetup_r+0x9e>
1004ef9e:	46c0      	nop			@ (mov r8, r8)
1004efa0:	20000d20 	.word	0x20000d20

1004efa4 <memcmp>:
1004efa4:	b530      	push	{r4, r5, lr}
1004efa6:	2400      	movs	r4, #0
1004efa8:	3901      	subs	r1, #1
1004efaa:	42a2      	cmp	r2, r4
1004efac:	d101      	bne.n	1004efb2 <memcmp+0xe>
1004efae:	2000      	movs	r0, #0
1004efb0:	e005      	b.n	1004efbe <memcmp+0x1a>
1004efb2:	5d03      	ldrb	r3, [r0, r4]
1004efb4:	3401      	adds	r4, #1
1004efb6:	5d0d      	ldrb	r5, [r1, r4]
1004efb8:	42ab      	cmp	r3, r5
1004efba:	d0f6      	beq.n	1004efaa <memcmp+0x6>
1004efbc:	1b58      	subs	r0, r3, r5
1004efbe:	bd30      	pop	{r4, r5, pc}

1004efc0 <memset>:
1004efc0:	0003      	movs	r3, r0
1004efc2:	1882      	adds	r2, r0, r2
1004efc4:	4293      	cmp	r3, r2
1004efc6:	d100      	bne.n	1004efca <memset+0xa>
1004efc8:	4770      	bx	lr
1004efca:	7019      	strb	r1, [r3, #0]
1004efcc:	3301      	adds	r3, #1
1004efce:	e7f9      	b.n	1004efc4 <memset+0x4>

1004efd0 <_close_r>:
1004efd0:	2300      	movs	r3, #0
1004efd2:	b570      	push	{r4, r5, r6, lr}
1004efd4:	4d06      	ldr	r5, [pc, #24]	@ (1004eff0 <_close_r+0x20>)
1004efd6:	0004      	movs	r4, r0
1004efd8:	0008      	movs	r0, r1
1004efda:	602b      	str	r3, [r5, #0]
1004efdc:	f7f2 f9f3 	bl	100413c6 <_close>
1004efe0:	1c43      	adds	r3, r0, #1
1004efe2:	d103      	bne.n	1004efec <_close_r+0x1c>
1004efe4:	682b      	ldr	r3, [r5, #0]
1004efe6:	2b00      	cmp	r3, #0
1004efe8:	d000      	beq.n	1004efec <_close_r+0x1c>
1004efea:	6023      	str	r3, [r4, #0]
1004efec:	bd70      	pop	{r4, r5, r6, pc}
1004efee:	46c0      	nop			@ (mov r8, r8)
1004eff0:	20000ce4 	.word	0x20000ce4

1004eff4 <_lseek_r>:
1004eff4:	b570      	push	{r4, r5, r6, lr}
1004eff6:	0004      	movs	r4, r0
1004eff8:	0008      	movs	r0, r1
1004effa:	0011      	movs	r1, r2
1004effc:	001a      	movs	r2, r3
1004effe:	2300      	movs	r3, #0
1004f000:	4d05      	ldr	r5, [pc, #20]	@ (1004f018 <_lseek_r+0x24>)
1004f002:	602b      	str	r3, [r5, #0]
1004f004:	f7f2 fa00 	bl	10041408 <_lseek>
1004f008:	1c43      	adds	r3, r0, #1
1004f00a:	d103      	bne.n	1004f014 <_lseek_r+0x20>
1004f00c:	682b      	ldr	r3, [r5, #0]
1004f00e:	2b00      	cmp	r3, #0
1004f010:	d000      	beq.n	1004f014 <_lseek_r+0x20>
1004f012:	6023      	str	r3, [r4, #0]
1004f014:	bd70      	pop	{r4, r5, r6, pc}
1004f016:	46c0      	nop			@ (mov r8, r8)
1004f018:	20000ce4 	.word	0x20000ce4

1004f01c <_read_r>:
1004f01c:	b570      	push	{r4, r5, r6, lr}
1004f01e:	0004      	movs	r4, r0
1004f020:	0008      	movs	r0, r1
1004f022:	0011      	movs	r1, r2
1004f024:	001a      	movs	r2, r3
1004f026:	2300      	movs	r3, #0
1004f028:	4d05      	ldr	r5, [pc, #20]	@ (1004f040 <_read_r+0x24>)
1004f02a:	602b      	str	r3, [r5, #0]
1004f02c:	f7f2 f992 	bl	10041354 <_read>
1004f030:	1c43      	adds	r3, r0, #1
1004f032:	d103      	bne.n	1004f03c <_read_r+0x20>
1004f034:	682b      	ldr	r3, [r5, #0]
1004f036:	2b00      	cmp	r3, #0
1004f038:	d000      	beq.n	1004f03c <_read_r+0x20>
1004f03a:	6023      	str	r3, [r4, #0]
1004f03c:	bd70      	pop	{r4, r5, r6, pc}
1004f03e:	46c0      	nop			@ (mov r8, r8)
1004f040:	20000ce4 	.word	0x20000ce4

1004f044 <_write_r>:
1004f044:	b570      	push	{r4, r5, r6, lr}
1004f046:	0004      	movs	r4, r0
1004f048:	0008      	movs	r0, r1
1004f04a:	0011      	movs	r1, r2
1004f04c:	001a      	movs	r2, r3
1004f04e:	2300      	movs	r3, #0
1004f050:	4d05      	ldr	r5, [pc, #20]	@ (1004f068 <_write_r+0x24>)
1004f052:	602b      	str	r3, [r5, #0]
1004f054:	f7f2 f99b 	bl	1004138e <_write>
1004f058:	1c43      	adds	r3, r0, #1
1004f05a:	d103      	bne.n	1004f064 <_write_r+0x20>
1004f05c:	682b      	ldr	r3, [r5, #0]
1004f05e:	2b00      	cmp	r3, #0
1004f060:	d000      	beq.n	1004f064 <_write_r+0x20>
1004f062:	6023      	str	r3, [r4, #0]
1004f064:	bd70      	pop	{r4, r5, r6, pc}
1004f066:	46c0      	nop			@ (mov r8, r8)
1004f068:	20000ce4 	.word	0x20000ce4

1004f06c <__errno>:
1004f06c:	4b01      	ldr	r3, [pc, #4]	@ (1004f074 <__errno+0x8>)
1004f06e:	6818      	ldr	r0, [r3, #0]
1004f070:	4770      	bx	lr
1004f072:	46c0      	nop			@ (mov r8, r8)
1004f074:	20000d20 	.word	0x20000d20

1004f078 <__retarget_lock_init_recursive>:
1004f078:	4770      	bx	lr

1004f07a <__retarget_lock_acquire_recursive>:
1004f07a:	4770      	bx	lr

1004f07c <__retarget_lock_release_recursive>:
1004f07c:	4770      	bx	lr

1004f07e <memcpy>:
1004f07e:	2300      	movs	r3, #0
1004f080:	b510      	push	{r4, lr}
1004f082:	429a      	cmp	r2, r3
1004f084:	d100      	bne.n	1004f088 <memcpy+0xa>
1004f086:	bd10      	pop	{r4, pc}
1004f088:	5ccc      	ldrb	r4, [r1, r3]
1004f08a:	54c4      	strb	r4, [r0, r3]
1004f08c:	3301      	adds	r3, #1
1004f08e:	e7f8      	b.n	1004f082 <memcpy+0x4>

1004f090 <_free_r>:
1004f090:	b570      	push	{r4, r5, r6, lr}
1004f092:	0005      	movs	r5, r0
1004f094:	1e0c      	subs	r4, r1, #0
1004f096:	d010      	beq.n	1004f0ba <_free_r+0x2a>
1004f098:	3c04      	subs	r4, #4
1004f09a:	6823      	ldr	r3, [r4, #0]
1004f09c:	2b00      	cmp	r3, #0
1004f09e:	da00      	bge.n	1004f0a2 <_free_r+0x12>
1004f0a0:	18e4      	adds	r4, r4, r3
1004f0a2:	0028      	movs	r0, r5
1004f0a4:	f000 f8ea 	bl	1004f27c <__malloc_lock>
1004f0a8:	4a1d      	ldr	r2, [pc, #116]	@ (1004f120 <_free_r+0x90>)
1004f0aa:	6813      	ldr	r3, [r2, #0]
1004f0ac:	2b00      	cmp	r3, #0
1004f0ae:	d105      	bne.n	1004f0bc <_free_r+0x2c>
1004f0b0:	6063      	str	r3, [r4, #4]
1004f0b2:	6014      	str	r4, [r2, #0]
1004f0b4:	0028      	movs	r0, r5
1004f0b6:	f000 f8e9 	bl	1004f28c <__malloc_unlock>
1004f0ba:	bd70      	pop	{r4, r5, r6, pc}
1004f0bc:	42a3      	cmp	r3, r4
1004f0be:	d908      	bls.n	1004f0d2 <_free_r+0x42>
1004f0c0:	6820      	ldr	r0, [r4, #0]
1004f0c2:	1821      	adds	r1, r4, r0
1004f0c4:	428b      	cmp	r3, r1
1004f0c6:	d1f3      	bne.n	1004f0b0 <_free_r+0x20>
1004f0c8:	6819      	ldr	r1, [r3, #0]
1004f0ca:	685b      	ldr	r3, [r3, #4]
1004f0cc:	1809      	adds	r1, r1, r0
1004f0ce:	6021      	str	r1, [r4, #0]
1004f0d0:	e7ee      	b.n	1004f0b0 <_free_r+0x20>
1004f0d2:	001a      	movs	r2, r3
1004f0d4:	685b      	ldr	r3, [r3, #4]
1004f0d6:	2b00      	cmp	r3, #0
1004f0d8:	d001      	beq.n	1004f0de <_free_r+0x4e>
1004f0da:	42a3      	cmp	r3, r4
1004f0dc:	d9f9      	bls.n	1004f0d2 <_free_r+0x42>
1004f0de:	6811      	ldr	r1, [r2, #0]
1004f0e0:	1850      	adds	r0, r2, r1
1004f0e2:	42a0      	cmp	r0, r4
1004f0e4:	d10b      	bne.n	1004f0fe <_free_r+0x6e>
1004f0e6:	6820      	ldr	r0, [r4, #0]
1004f0e8:	1809      	adds	r1, r1, r0
1004f0ea:	1850      	adds	r0, r2, r1
1004f0ec:	6011      	str	r1, [r2, #0]
1004f0ee:	4283      	cmp	r3, r0
1004f0f0:	d1e0      	bne.n	1004f0b4 <_free_r+0x24>
1004f0f2:	6818      	ldr	r0, [r3, #0]
1004f0f4:	685b      	ldr	r3, [r3, #4]
1004f0f6:	1841      	adds	r1, r0, r1
1004f0f8:	6011      	str	r1, [r2, #0]
1004f0fa:	6053      	str	r3, [r2, #4]
1004f0fc:	e7da      	b.n	1004f0b4 <_free_r+0x24>
1004f0fe:	42a0      	cmp	r0, r4
1004f100:	d902      	bls.n	1004f108 <_free_r+0x78>
1004f102:	230c      	movs	r3, #12
1004f104:	602b      	str	r3, [r5, #0]
1004f106:	e7d5      	b.n	1004f0b4 <_free_r+0x24>
1004f108:	6820      	ldr	r0, [r4, #0]
1004f10a:	1821      	adds	r1, r4, r0
1004f10c:	428b      	cmp	r3, r1
1004f10e:	d103      	bne.n	1004f118 <_free_r+0x88>
1004f110:	6819      	ldr	r1, [r3, #0]
1004f112:	685b      	ldr	r3, [r3, #4]
1004f114:	1809      	adds	r1, r1, r0
1004f116:	6021      	str	r1, [r4, #0]
1004f118:	6063      	str	r3, [r4, #4]
1004f11a:	6054      	str	r4, [r2, #4]
1004f11c:	e7ca      	b.n	1004f0b4 <_free_r+0x24>
1004f11e:	46c0      	nop			@ (mov r8, r8)
1004f120:	20000cf0 	.word	0x20000cf0

1004f124 <malloc>:
1004f124:	b510      	push	{r4, lr}
1004f126:	4b03      	ldr	r3, [pc, #12]	@ (1004f134 <malloc+0x10>)
1004f128:	0001      	movs	r1, r0
1004f12a:	6818      	ldr	r0, [r3, #0]
1004f12c:	f000 f826 	bl	1004f17c <_malloc_r>
1004f130:	bd10      	pop	{r4, pc}
1004f132:	46c0      	nop			@ (mov r8, r8)
1004f134:	20000d20 	.word	0x20000d20

1004f138 <sbrk_aligned>:
1004f138:	b570      	push	{r4, r5, r6, lr}
1004f13a:	4e0f      	ldr	r6, [pc, #60]	@ (1004f178 <sbrk_aligned+0x40>)
1004f13c:	000d      	movs	r5, r1
1004f13e:	6831      	ldr	r1, [r6, #0]
1004f140:	0004      	movs	r4, r0
1004f142:	2900      	cmp	r1, #0
1004f144:	d102      	bne.n	1004f14c <sbrk_aligned+0x14>
1004f146:	f000 fcad 	bl	1004faa4 <_sbrk_r>
1004f14a:	6030      	str	r0, [r6, #0]
1004f14c:	0029      	movs	r1, r5
1004f14e:	0020      	movs	r0, r4
1004f150:	f000 fca8 	bl	1004faa4 <_sbrk_r>
1004f154:	1c43      	adds	r3, r0, #1
1004f156:	d103      	bne.n	1004f160 <sbrk_aligned+0x28>
1004f158:	2501      	movs	r5, #1
1004f15a:	426d      	negs	r5, r5
1004f15c:	0028      	movs	r0, r5
1004f15e:	bd70      	pop	{r4, r5, r6, pc}
1004f160:	2303      	movs	r3, #3
1004f162:	1cc5      	adds	r5, r0, #3
1004f164:	439d      	bics	r5, r3
1004f166:	42a8      	cmp	r0, r5
1004f168:	d0f8      	beq.n	1004f15c <sbrk_aligned+0x24>
1004f16a:	1a29      	subs	r1, r5, r0
1004f16c:	0020      	movs	r0, r4
1004f16e:	f000 fc99 	bl	1004faa4 <_sbrk_r>
1004f172:	3001      	adds	r0, #1
1004f174:	d1f2      	bne.n	1004f15c <sbrk_aligned+0x24>
1004f176:	e7ef      	b.n	1004f158 <sbrk_aligned+0x20>
1004f178:	20000cec 	.word	0x20000cec

1004f17c <_malloc_r>:
1004f17c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004f17e:	2203      	movs	r2, #3
1004f180:	1ccb      	adds	r3, r1, #3
1004f182:	4393      	bics	r3, r2
1004f184:	3308      	adds	r3, #8
1004f186:	0005      	movs	r5, r0
1004f188:	001f      	movs	r7, r3
1004f18a:	2b0c      	cmp	r3, #12
1004f18c:	d234      	bcs.n	1004f1f8 <_malloc_r+0x7c>
1004f18e:	270c      	movs	r7, #12
1004f190:	42b9      	cmp	r1, r7
1004f192:	d833      	bhi.n	1004f1fc <_malloc_r+0x80>
1004f194:	0028      	movs	r0, r5
1004f196:	f000 f871 	bl	1004f27c <__malloc_lock>
1004f19a:	4e37      	ldr	r6, [pc, #220]	@ (1004f278 <_malloc_r+0xfc>)
1004f19c:	6833      	ldr	r3, [r6, #0]
1004f19e:	001c      	movs	r4, r3
1004f1a0:	2c00      	cmp	r4, #0
1004f1a2:	d12f      	bne.n	1004f204 <_malloc_r+0x88>
1004f1a4:	0039      	movs	r1, r7
1004f1a6:	0028      	movs	r0, r5
1004f1a8:	f7ff ffc6 	bl	1004f138 <sbrk_aligned>
1004f1ac:	0004      	movs	r4, r0
1004f1ae:	1c43      	adds	r3, r0, #1
1004f1b0:	d15f      	bne.n	1004f272 <_malloc_r+0xf6>
1004f1b2:	6834      	ldr	r4, [r6, #0]
1004f1b4:	9400      	str	r4, [sp, #0]
1004f1b6:	9b00      	ldr	r3, [sp, #0]
1004f1b8:	2b00      	cmp	r3, #0
1004f1ba:	d14a      	bne.n	1004f252 <_malloc_r+0xd6>
1004f1bc:	2c00      	cmp	r4, #0
1004f1be:	d052      	beq.n	1004f266 <_malloc_r+0xea>
1004f1c0:	6823      	ldr	r3, [r4, #0]
1004f1c2:	0028      	movs	r0, r5
1004f1c4:	18e3      	adds	r3, r4, r3
1004f1c6:	9900      	ldr	r1, [sp, #0]
1004f1c8:	9301      	str	r3, [sp, #4]
1004f1ca:	f000 fc6b 	bl	1004faa4 <_sbrk_r>
1004f1ce:	9b01      	ldr	r3, [sp, #4]
1004f1d0:	4283      	cmp	r3, r0
1004f1d2:	d148      	bne.n	1004f266 <_malloc_r+0xea>
1004f1d4:	6823      	ldr	r3, [r4, #0]
1004f1d6:	0028      	movs	r0, r5
1004f1d8:	1aff      	subs	r7, r7, r3
1004f1da:	0039      	movs	r1, r7
1004f1dc:	f7ff ffac 	bl	1004f138 <sbrk_aligned>
1004f1e0:	3001      	adds	r0, #1
1004f1e2:	d040      	beq.n	1004f266 <_malloc_r+0xea>
1004f1e4:	6823      	ldr	r3, [r4, #0]
1004f1e6:	19db      	adds	r3, r3, r7
1004f1e8:	6023      	str	r3, [r4, #0]
1004f1ea:	6833      	ldr	r3, [r6, #0]
1004f1ec:	685a      	ldr	r2, [r3, #4]
1004f1ee:	2a00      	cmp	r2, #0
1004f1f0:	d133      	bne.n	1004f25a <_malloc_r+0xde>
1004f1f2:	9b00      	ldr	r3, [sp, #0]
1004f1f4:	6033      	str	r3, [r6, #0]
1004f1f6:	e019      	b.n	1004f22c <_malloc_r+0xb0>
1004f1f8:	2b00      	cmp	r3, #0
1004f1fa:	dac9      	bge.n	1004f190 <_malloc_r+0x14>
1004f1fc:	230c      	movs	r3, #12
1004f1fe:	602b      	str	r3, [r5, #0]
1004f200:	2000      	movs	r0, #0
1004f202:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004f204:	6821      	ldr	r1, [r4, #0]
1004f206:	1bc9      	subs	r1, r1, r7
1004f208:	d420      	bmi.n	1004f24c <_malloc_r+0xd0>
1004f20a:	290b      	cmp	r1, #11
1004f20c:	d90a      	bls.n	1004f224 <_malloc_r+0xa8>
1004f20e:	19e2      	adds	r2, r4, r7
1004f210:	6027      	str	r7, [r4, #0]
1004f212:	42a3      	cmp	r3, r4
1004f214:	d104      	bne.n	1004f220 <_malloc_r+0xa4>
1004f216:	6032      	str	r2, [r6, #0]
1004f218:	6863      	ldr	r3, [r4, #4]
1004f21a:	6011      	str	r1, [r2, #0]
1004f21c:	6053      	str	r3, [r2, #4]
1004f21e:	e005      	b.n	1004f22c <_malloc_r+0xb0>
1004f220:	605a      	str	r2, [r3, #4]
1004f222:	e7f9      	b.n	1004f218 <_malloc_r+0x9c>
1004f224:	6862      	ldr	r2, [r4, #4]
1004f226:	42a3      	cmp	r3, r4
1004f228:	d10e      	bne.n	1004f248 <_malloc_r+0xcc>
1004f22a:	6032      	str	r2, [r6, #0]
1004f22c:	0028      	movs	r0, r5
1004f22e:	f000 f82d 	bl	1004f28c <__malloc_unlock>
1004f232:	0020      	movs	r0, r4
1004f234:	2207      	movs	r2, #7
1004f236:	300b      	adds	r0, #11
1004f238:	1d23      	adds	r3, r4, #4
1004f23a:	4390      	bics	r0, r2
1004f23c:	1ac2      	subs	r2, r0, r3
1004f23e:	4298      	cmp	r0, r3
1004f240:	d0df      	beq.n	1004f202 <_malloc_r+0x86>
1004f242:	1a1b      	subs	r3, r3, r0
1004f244:	50a3      	str	r3, [r4, r2]
1004f246:	e7dc      	b.n	1004f202 <_malloc_r+0x86>
1004f248:	605a      	str	r2, [r3, #4]
1004f24a:	e7ef      	b.n	1004f22c <_malloc_r+0xb0>
1004f24c:	0023      	movs	r3, r4
1004f24e:	6864      	ldr	r4, [r4, #4]
1004f250:	e7a6      	b.n	1004f1a0 <_malloc_r+0x24>
1004f252:	9c00      	ldr	r4, [sp, #0]
1004f254:	6863      	ldr	r3, [r4, #4]
1004f256:	9300      	str	r3, [sp, #0]
1004f258:	e7ad      	b.n	1004f1b6 <_malloc_r+0x3a>
1004f25a:	001a      	movs	r2, r3
1004f25c:	685b      	ldr	r3, [r3, #4]
1004f25e:	42a3      	cmp	r3, r4
1004f260:	d1fb      	bne.n	1004f25a <_malloc_r+0xde>
1004f262:	2300      	movs	r3, #0
1004f264:	e7da      	b.n	1004f21c <_malloc_r+0xa0>
1004f266:	230c      	movs	r3, #12
1004f268:	0028      	movs	r0, r5
1004f26a:	602b      	str	r3, [r5, #0]
1004f26c:	f000 f80e 	bl	1004f28c <__malloc_unlock>
1004f270:	e7c6      	b.n	1004f200 <_malloc_r+0x84>
1004f272:	6007      	str	r7, [r0, #0]
1004f274:	e7da      	b.n	1004f22c <_malloc_r+0xb0>
1004f276:	46c0      	nop			@ (mov r8, r8)
1004f278:	20000cf0 	.word	0x20000cf0

1004f27c <__malloc_lock>:
1004f27c:	b510      	push	{r4, lr}
1004f27e:	4802      	ldr	r0, [pc, #8]	@ (1004f288 <__malloc_lock+0xc>)
1004f280:	f7ff fefb 	bl	1004f07a <__retarget_lock_acquire_recursive>
1004f284:	bd10      	pop	{r4, pc}
1004f286:	46c0      	nop			@ (mov r8, r8)
1004f288:	20000ce8 	.word	0x20000ce8

1004f28c <__malloc_unlock>:
1004f28c:	b510      	push	{r4, lr}
1004f28e:	4802      	ldr	r0, [pc, #8]	@ (1004f298 <__malloc_unlock+0xc>)
1004f290:	f7ff fef4 	bl	1004f07c <__retarget_lock_release_recursive>
1004f294:	bd10      	pop	{r4, pc}
1004f296:	46c0      	nop			@ (mov r8, r8)
1004f298:	20000ce8 	.word	0x20000ce8

1004f29c <__sfputc_r>:
1004f29c:	6893      	ldr	r3, [r2, #8]
1004f29e:	b510      	push	{r4, lr}
1004f2a0:	3b01      	subs	r3, #1
1004f2a2:	6093      	str	r3, [r2, #8]
1004f2a4:	2b00      	cmp	r3, #0
1004f2a6:	da04      	bge.n	1004f2b2 <__sfputc_r+0x16>
1004f2a8:	6994      	ldr	r4, [r2, #24]
1004f2aa:	42a3      	cmp	r3, r4
1004f2ac:	db07      	blt.n	1004f2be <__sfputc_r+0x22>
1004f2ae:	290a      	cmp	r1, #10
1004f2b0:	d005      	beq.n	1004f2be <__sfputc_r+0x22>
1004f2b2:	6813      	ldr	r3, [r2, #0]
1004f2b4:	1c58      	adds	r0, r3, #1
1004f2b6:	6010      	str	r0, [r2, #0]
1004f2b8:	7019      	strb	r1, [r3, #0]
1004f2ba:	0008      	movs	r0, r1
1004f2bc:	bd10      	pop	{r4, pc}
1004f2be:	f7ff fdd1 	bl	1004ee64 <__swbuf_r>
1004f2c2:	0001      	movs	r1, r0
1004f2c4:	e7f9      	b.n	1004f2ba <__sfputc_r+0x1e>

1004f2c6 <__sfputs_r>:
1004f2c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004f2c8:	0006      	movs	r6, r0
1004f2ca:	000f      	movs	r7, r1
1004f2cc:	0014      	movs	r4, r2
1004f2ce:	18d5      	adds	r5, r2, r3
1004f2d0:	42ac      	cmp	r4, r5
1004f2d2:	d101      	bne.n	1004f2d8 <__sfputs_r+0x12>
1004f2d4:	2000      	movs	r0, #0
1004f2d6:	e007      	b.n	1004f2e8 <__sfputs_r+0x22>
1004f2d8:	7821      	ldrb	r1, [r4, #0]
1004f2da:	003a      	movs	r2, r7
1004f2dc:	0030      	movs	r0, r6
1004f2de:	f7ff ffdd 	bl	1004f29c <__sfputc_r>
1004f2e2:	3401      	adds	r4, #1
1004f2e4:	1c43      	adds	r3, r0, #1
1004f2e6:	d1f3      	bne.n	1004f2d0 <__sfputs_r+0xa>
1004f2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1004f2ec <_vfiprintf_r>:
1004f2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f2ee:	b0a1      	sub	sp, #132	@ 0x84
1004f2f0:	000f      	movs	r7, r1
1004f2f2:	0015      	movs	r5, r2
1004f2f4:	001e      	movs	r6, r3
1004f2f6:	9003      	str	r0, [sp, #12]
1004f2f8:	2800      	cmp	r0, #0
1004f2fa:	d004      	beq.n	1004f306 <_vfiprintf_r+0x1a>
1004f2fc:	6a03      	ldr	r3, [r0, #32]
1004f2fe:	2b00      	cmp	r3, #0
1004f300:	d101      	bne.n	1004f306 <_vfiprintf_r+0x1a>
1004f302:	f7ff fc09 	bl	1004eb18 <__sinit>
1004f306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004f308:	07db      	lsls	r3, r3, #31
1004f30a:	d405      	bmi.n	1004f318 <_vfiprintf_r+0x2c>
1004f30c:	89bb      	ldrh	r3, [r7, #12]
1004f30e:	059b      	lsls	r3, r3, #22
1004f310:	d402      	bmi.n	1004f318 <_vfiprintf_r+0x2c>
1004f312:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004f314:	f7ff feb1 	bl	1004f07a <__retarget_lock_acquire_recursive>
1004f318:	89bb      	ldrh	r3, [r7, #12]
1004f31a:	071b      	lsls	r3, r3, #28
1004f31c:	d502      	bpl.n	1004f324 <_vfiprintf_r+0x38>
1004f31e:	693b      	ldr	r3, [r7, #16]
1004f320:	2b00      	cmp	r3, #0
1004f322:	d113      	bne.n	1004f34c <_vfiprintf_r+0x60>
1004f324:	0039      	movs	r1, r7
1004f326:	9803      	ldr	r0, [sp, #12]
1004f328:	f7ff fdde 	bl	1004eee8 <__swsetup_r>
1004f32c:	2800      	cmp	r0, #0
1004f32e:	d00d      	beq.n	1004f34c <_vfiprintf_r+0x60>
1004f330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004f332:	07db      	lsls	r3, r3, #31
1004f334:	d503      	bpl.n	1004f33e <_vfiprintf_r+0x52>
1004f336:	2001      	movs	r0, #1
1004f338:	4240      	negs	r0, r0
1004f33a:	b021      	add	sp, #132	@ 0x84
1004f33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f33e:	89bb      	ldrh	r3, [r7, #12]
1004f340:	059b      	lsls	r3, r3, #22
1004f342:	d4f8      	bmi.n	1004f336 <_vfiprintf_r+0x4a>
1004f344:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004f346:	f7ff fe99 	bl	1004f07c <__retarget_lock_release_recursive>
1004f34a:	e7f4      	b.n	1004f336 <_vfiprintf_r+0x4a>
1004f34c:	2300      	movs	r3, #0
1004f34e:	ac08      	add	r4, sp, #32
1004f350:	6163      	str	r3, [r4, #20]
1004f352:	3320      	adds	r3, #32
1004f354:	7663      	strb	r3, [r4, #25]
1004f356:	3310      	adds	r3, #16
1004f358:	76a3      	strb	r3, [r4, #26]
1004f35a:	9607      	str	r6, [sp, #28]
1004f35c:	002e      	movs	r6, r5
1004f35e:	7833      	ldrb	r3, [r6, #0]
1004f360:	2b00      	cmp	r3, #0
1004f362:	d001      	beq.n	1004f368 <_vfiprintf_r+0x7c>
1004f364:	2b25      	cmp	r3, #37	@ 0x25
1004f366:	d148      	bne.n	1004f3fa <_vfiprintf_r+0x10e>
1004f368:	1b73      	subs	r3, r6, r5
1004f36a:	9305      	str	r3, [sp, #20]
1004f36c:	42ae      	cmp	r6, r5
1004f36e:	d00b      	beq.n	1004f388 <_vfiprintf_r+0x9c>
1004f370:	002a      	movs	r2, r5
1004f372:	0039      	movs	r1, r7
1004f374:	9803      	ldr	r0, [sp, #12]
1004f376:	f7ff ffa6 	bl	1004f2c6 <__sfputs_r>
1004f37a:	3001      	adds	r0, #1
1004f37c:	d100      	bne.n	1004f380 <_vfiprintf_r+0x94>
1004f37e:	e0ae      	b.n	1004f4de <_vfiprintf_r+0x1f2>
1004f380:	6963      	ldr	r3, [r4, #20]
1004f382:	9a05      	ldr	r2, [sp, #20]
1004f384:	189b      	adds	r3, r3, r2
1004f386:	6163      	str	r3, [r4, #20]
1004f388:	7833      	ldrb	r3, [r6, #0]
1004f38a:	2b00      	cmp	r3, #0
1004f38c:	d100      	bne.n	1004f390 <_vfiprintf_r+0xa4>
1004f38e:	e0a6      	b.n	1004f4de <_vfiprintf_r+0x1f2>
1004f390:	2201      	movs	r2, #1
1004f392:	2300      	movs	r3, #0
1004f394:	4252      	negs	r2, r2
1004f396:	6062      	str	r2, [r4, #4]
1004f398:	a904      	add	r1, sp, #16
1004f39a:	3254      	adds	r2, #84	@ 0x54
1004f39c:	1852      	adds	r2, r2, r1
1004f39e:	1c75      	adds	r5, r6, #1
1004f3a0:	6023      	str	r3, [r4, #0]
1004f3a2:	60e3      	str	r3, [r4, #12]
1004f3a4:	60a3      	str	r3, [r4, #8]
1004f3a6:	7013      	strb	r3, [r2, #0]
1004f3a8:	65a3      	str	r3, [r4, #88]	@ 0x58
1004f3aa:	4b59      	ldr	r3, [pc, #356]	@ (1004f510 <_vfiprintf_r+0x224>)
1004f3ac:	2205      	movs	r2, #5
1004f3ae:	0018      	movs	r0, r3
1004f3b0:	7829      	ldrb	r1, [r5, #0]
1004f3b2:	9305      	str	r3, [sp, #20]
1004f3b4:	f000 fb88 	bl	1004fac8 <memchr>
1004f3b8:	1c6e      	adds	r6, r5, #1
1004f3ba:	2800      	cmp	r0, #0
1004f3bc:	d11f      	bne.n	1004f3fe <_vfiprintf_r+0x112>
1004f3be:	6822      	ldr	r2, [r4, #0]
1004f3c0:	06d3      	lsls	r3, r2, #27
1004f3c2:	d504      	bpl.n	1004f3ce <_vfiprintf_r+0xe2>
1004f3c4:	2353      	movs	r3, #83	@ 0x53
1004f3c6:	a904      	add	r1, sp, #16
1004f3c8:	185b      	adds	r3, r3, r1
1004f3ca:	2120      	movs	r1, #32
1004f3cc:	7019      	strb	r1, [r3, #0]
1004f3ce:	0713      	lsls	r3, r2, #28
1004f3d0:	d504      	bpl.n	1004f3dc <_vfiprintf_r+0xf0>
1004f3d2:	2353      	movs	r3, #83	@ 0x53
1004f3d4:	a904      	add	r1, sp, #16
1004f3d6:	185b      	adds	r3, r3, r1
1004f3d8:	212b      	movs	r1, #43	@ 0x2b
1004f3da:	7019      	strb	r1, [r3, #0]
1004f3dc:	782b      	ldrb	r3, [r5, #0]
1004f3de:	2b2a      	cmp	r3, #42	@ 0x2a
1004f3e0:	d016      	beq.n	1004f410 <_vfiprintf_r+0x124>
1004f3e2:	002e      	movs	r6, r5
1004f3e4:	2100      	movs	r1, #0
1004f3e6:	200a      	movs	r0, #10
1004f3e8:	68e3      	ldr	r3, [r4, #12]
1004f3ea:	7832      	ldrb	r2, [r6, #0]
1004f3ec:	1c75      	adds	r5, r6, #1
1004f3ee:	3a30      	subs	r2, #48	@ 0x30
1004f3f0:	2a09      	cmp	r2, #9
1004f3f2:	d950      	bls.n	1004f496 <_vfiprintf_r+0x1aa>
1004f3f4:	2900      	cmp	r1, #0
1004f3f6:	d111      	bne.n	1004f41c <_vfiprintf_r+0x130>
1004f3f8:	e017      	b.n	1004f42a <_vfiprintf_r+0x13e>
1004f3fa:	3601      	adds	r6, #1
1004f3fc:	e7af      	b.n	1004f35e <_vfiprintf_r+0x72>
1004f3fe:	9b05      	ldr	r3, [sp, #20]
1004f400:	6822      	ldr	r2, [r4, #0]
1004f402:	1ac0      	subs	r0, r0, r3
1004f404:	2301      	movs	r3, #1
1004f406:	4083      	lsls	r3, r0
1004f408:	4313      	orrs	r3, r2
1004f40a:	0035      	movs	r5, r6
1004f40c:	6023      	str	r3, [r4, #0]
1004f40e:	e7cc      	b.n	1004f3aa <_vfiprintf_r+0xbe>
1004f410:	9b07      	ldr	r3, [sp, #28]
1004f412:	1d19      	adds	r1, r3, #4
1004f414:	681b      	ldr	r3, [r3, #0]
1004f416:	9107      	str	r1, [sp, #28]
1004f418:	2b00      	cmp	r3, #0
1004f41a:	db01      	blt.n	1004f420 <_vfiprintf_r+0x134>
1004f41c:	930b      	str	r3, [sp, #44]	@ 0x2c
1004f41e:	e004      	b.n	1004f42a <_vfiprintf_r+0x13e>
1004f420:	425b      	negs	r3, r3
1004f422:	60e3      	str	r3, [r4, #12]
1004f424:	2302      	movs	r3, #2
1004f426:	4313      	orrs	r3, r2
1004f428:	6023      	str	r3, [r4, #0]
1004f42a:	7833      	ldrb	r3, [r6, #0]
1004f42c:	2b2e      	cmp	r3, #46	@ 0x2e
1004f42e:	d10c      	bne.n	1004f44a <_vfiprintf_r+0x15e>
1004f430:	7873      	ldrb	r3, [r6, #1]
1004f432:	2b2a      	cmp	r3, #42	@ 0x2a
1004f434:	d134      	bne.n	1004f4a0 <_vfiprintf_r+0x1b4>
1004f436:	9b07      	ldr	r3, [sp, #28]
1004f438:	3602      	adds	r6, #2
1004f43a:	1d1a      	adds	r2, r3, #4
1004f43c:	681b      	ldr	r3, [r3, #0]
1004f43e:	9207      	str	r2, [sp, #28]
1004f440:	2b00      	cmp	r3, #0
1004f442:	da01      	bge.n	1004f448 <_vfiprintf_r+0x15c>
1004f444:	2301      	movs	r3, #1
1004f446:	425b      	negs	r3, r3
1004f448:	9309      	str	r3, [sp, #36]	@ 0x24
1004f44a:	4d32      	ldr	r5, [pc, #200]	@ (1004f514 <_vfiprintf_r+0x228>)
1004f44c:	2203      	movs	r2, #3
1004f44e:	0028      	movs	r0, r5
1004f450:	7831      	ldrb	r1, [r6, #0]
1004f452:	f000 fb39 	bl	1004fac8 <memchr>
1004f456:	2800      	cmp	r0, #0
1004f458:	d006      	beq.n	1004f468 <_vfiprintf_r+0x17c>
1004f45a:	2340      	movs	r3, #64	@ 0x40
1004f45c:	1b40      	subs	r0, r0, r5
1004f45e:	4083      	lsls	r3, r0
1004f460:	6822      	ldr	r2, [r4, #0]
1004f462:	3601      	adds	r6, #1
1004f464:	4313      	orrs	r3, r2
1004f466:	6023      	str	r3, [r4, #0]
1004f468:	7831      	ldrb	r1, [r6, #0]
1004f46a:	2206      	movs	r2, #6
1004f46c:	482a      	ldr	r0, [pc, #168]	@ (1004f518 <_vfiprintf_r+0x22c>)
1004f46e:	1c75      	adds	r5, r6, #1
1004f470:	7621      	strb	r1, [r4, #24]
1004f472:	f000 fb29 	bl	1004fac8 <memchr>
1004f476:	2800      	cmp	r0, #0
1004f478:	d040      	beq.n	1004f4fc <_vfiprintf_r+0x210>
1004f47a:	4b28      	ldr	r3, [pc, #160]	@ (1004f51c <_vfiprintf_r+0x230>)
1004f47c:	2b00      	cmp	r3, #0
1004f47e:	d122      	bne.n	1004f4c6 <_vfiprintf_r+0x1da>
1004f480:	2207      	movs	r2, #7
1004f482:	9b07      	ldr	r3, [sp, #28]
1004f484:	3307      	adds	r3, #7
1004f486:	4393      	bics	r3, r2
1004f488:	3308      	adds	r3, #8
1004f48a:	9307      	str	r3, [sp, #28]
1004f48c:	6963      	ldr	r3, [r4, #20]
1004f48e:	9a04      	ldr	r2, [sp, #16]
1004f490:	189b      	adds	r3, r3, r2
1004f492:	6163      	str	r3, [r4, #20]
1004f494:	e762      	b.n	1004f35c <_vfiprintf_r+0x70>
1004f496:	4343      	muls	r3, r0
1004f498:	002e      	movs	r6, r5
1004f49a:	2101      	movs	r1, #1
1004f49c:	189b      	adds	r3, r3, r2
1004f49e:	e7a4      	b.n	1004f3ea <_vfiprintf_r+0xfe>
1004f4a0:	2300      	movs	r3, #0
1004f4a2:	200a      	movs	r0, #10
1004f4a4:	0019      	movs	r1, r3
1004f4a6:	3601      	adds	r6, #1
1004f4a8:	6063      	str	r3, [r4, #4]
1004f4aa:	7832      	ldrb	r2, [r6, #0]
1004f4ac:	1c75      	adds	r5, r6, #1
1004f4ae:	3a30      	subs	r2, #48	@ 0x30
1004f4b0:	2a09      	cmp	r2, #9
1004f4b2:	d903      	bls.n	1004f4bc <_vfiprintf_r+0x1d0>
1004f4b4:	2b00      	cmp	r3, #0
1004f4b6:	d0c8      	beq.n	1004f44a <_vfiprintf_r+0x15e>
1004f4b8:	9109      	str	r1, [sp, #36]	@ 0x24
1004f4ba:	e7c6      	b.n	1004f44a <_vfiprintf_r+0x15e>
1004f4bc:	4341      	muls	r1, r0
1004f4be:	002e      	movs	r6, r5
1004f4c0:	2301      	movs	r3, #1
1004f4c2:	1889      	adds	r1, r1, r2
1004f4c4:	e7f1      	b.n	1004f4aa <_vfiprintf_r+0x1be>
1004f4c6:	aa07      	add	r2, sp, #28
1004f4c8:	9200      	str	r2, [sp, #0]
1004f4ca:	0021      	movs	r1, r4
1004f4cc:	003a      	movs	r2, r7
1004f4ce:	4b14      	ldr	r3, [pc, #80]	@ (1004f520 <_vfiprintf_r+0x234>)
1004f4d0:	9803      	ldr	r0, [sp, #12]
1004f4d2:	e000      	b.n	1004f4d6 <_vfiprintf_r+0x1ea>
1004f4d4:	bf00      	nop
1004f4d6:	9004      	str	r0, [sp, #16]
1004f4d8:	9b04      	ldr	r3, [sp, #16]
1004f4da:	3301      	adds	r3, #1
1004f4dc:	d1d6      	bne.n	1004f48c <_vfiprintf_r+0x1a0>
1004f4de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004f4e0:	07db      	lsls	r3, r3, #31
1004f4e2:	d405      	bmi.n	1004f4f0 <_vfiprintf_r+0x204>
1004f4e4:	89bb      	ldrh	r3, [r7, #12]
1004f4e6:	059b      	lsls	r3, r3, #22
1004f4e8:	d402      	bmi.n	1004f4f0 <_vfiprintf_r+0x204>
1004f4ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004f4ec:	f7ff fdc6 	bl	1004f07c <__retarget_lock_release_recursive>
1004f4f0:	89bb      	ldrh	r3, [r7, #12]
1004f4f2:	065b      	lsls	r3, r3, #25
1004f4f4:	d500      	bpl.n	1004f4f8 <_vfiprintf_r+0x20c>
1004f4f6:	e71e      	b.n	1004f336 <_vfiprintf_r+0x4a>
1004f4f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004f4fa:	e71e      	b.n	1004f33a <_vfiprintf_r+0x4e>
1004f4fc:	aa07      	add	r2, sp, #28
1004f4fe:	9200      	str	r2, [sp, #0]
1004f500:	0021      	movs	r1, r4
1004f502:	003a      	movs	r2, r7
1004f504:	4b06      	ldr	r3, [pc, #24]	@ (1004f520 <_vfiprintf_r+0x234>)
1004f506:	9803      	ldr	r0, [sp, #12]
1004f508:	f000 f87c 	bl	1004f604 <_printf_i>
1004f50c:	e7e3      	b.n	1004f4d6 <_vfiprintf_r+0x1ea>
1004f50e:	46c0      	nop			@ (mov r8, r8)
1004f510:	1004ff98 	.word	0x1004ff98
1004f514:	1004ff9e 	.word	0x1004ff9e
1004f518:	1004ffa2 	.word	0x1004ffa2
1004f51c:	00000000 	.word	0x00000000
1004f520:	1004f2c7 	.word	0x1004f2c7

1004f524 <_printf_common>:
1004f524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004f526:	0016      	movs	r6, r2
1004f528:	9301      	str	r3, [sp, #4]
1004f52a:	688a      	ldr	r2, [r1, #8]
1004f52c:	690b      	ldr	r3, [r1, #16]
1004f52e:	000c      	movs	r4, r1
1004f530:	9000      	str	r0, [sp, #0]
1004f532:	4293      	cmp	r3, r2
1004f534:	da00      	bge.n	1004f538 <_printf_common+0x14>
1004f536:	0013      	movs	r3, r2
1004f538:	0022      	movs	r2, r4
1004f53a:	6033      	str	r3, [r6, #0]
1004f53c:	3243      	adds	r2, #67	@ 0x43
1004f53e:	7812      	ldrb	r2, [r2, #0]
1004f540:	2a00      	cmp	r2, #0
1004f542:	d001      	beq.n	1004f548 <_printf_common+0x24>
1004f544:	3301      	adds	r3, #1
1004f546:	6033      	str	r3, [r6, #0]
1004f548:	6823      	ldr	r3, [r4, #0]
1004f54a:	069b      	lsls	r3, r3, #26
1004f54c:	d502      	bpl.n	1004f554 <_printf_common+0x30>
1004f54e:	6833      	ldr	r3, [r6, #0]
1004f550:	3302      	adds	r3, #2
1004f552:	6033      	str	r3, [r6, #0]
1004f554:	6822      	ldr	r2, [r4, #0]
1004f556:	2306      	movs	r3, #6
1004f558:	0015      	movs	r5, r2
1004f55a:	401d      	ands	r5, r3
1004f55c:	421a      	tst	r2, r3
1004f55e:	d027      	beq.n	1004f5b0 <_printf_common+0x8c>
1004f560:	0023      	movs	r3, r4
1004f562:	3343      	adds	r3, #67	@ 0x43
1004f564:	781b      	ldrb	r3, [r3, #0]
1004f566:	1e5a      	subs	r2, r3, #1
1004f568:	4193      	sbcs	r3, r2
1004f56a:	6822      	ldr	r2, [r4, #0]
1004f56c:	0692      	lsls	r2, r2, #26
1004f56e:	d430      	bmi.n	1004f5d2 <_printf_common+0xae>
1004f570:	0022      	movs	r2, r4
1004f572:	9901      	ldr	r1, [sp, #4]
1004f574:	9800      	ldr	r0, [sp, #0]
1004f576:	9d08      	ldr	r5, [sp, #32]
1004f578:	3243      	adds	r2, #67	@ 0x43
1004f57a:	47a8      	blx	r5
1004f57c:	3001      	adds	r0, #1
1004f57e:	d025      	beq.n	1004f5cc <_printf_common+0xa8>
1004f580:	2206      	movs	r2, #6
1004f582:	6823      	ldr	r3, [r4, #0]
1004f584:	2500      	movs	r5, #0
1004f586:	4013      	ands	r3, r2
1004f588:	2b04      	cmp	r3, #4
1004f58a:	d105      	bne.n	1004f598 <_printf_common+0x74>
1004f58c:	6833      	ldr	r3, [r6, #0]
1004f58e:	68e5      	ldr	r5, [r4, #12]
1004f590:	1aed      	subs	r5, r5, r3
1004f592:	43eb      	mvns	r3, r5
1004f594:	17db      	asrs	r3, r3, #31
1004f596:	401d      	ands	r5, r3
1004f598:	68a3      	ldr	r3, [r4, #8]
1004f59a:	6922      	ldr	r2, [r4, #16]
1004f59c:	4293      	cmp	r3, r2
1004f59e:	dd01      	ble.n	1004f5a4 <_printf_common+0x80>
1004f5a0:	1a9b      	subs	r3, r3, r2
1004f5a2:	18ed      	adds	r5, r5, r3
1004f5a4:	2600      	movs	r6, #0
1004f5a6:	42b5      	cmp	r5, r6
1004f5a8:	d120      	bne.n	1004f5ec <_printf_common+0xc8>
1004f5aa:	2000      	movs	r0, #0
1004f5ac:	e010      	b.n	1004f5d0 <_printf_common+0xac>
1004f5ae:	3501      	adds	r5, #1
1004f5b0:	68e3      	ldr	r3, [r4, #12]
1004f5b2:	6832      	ldr	r2, [r6, #0]
1004f5b4:	1a9b      	subs	r3, r3, r2
1004f5b6:	42ab      	cmp	r3, r5
1004f5b8:	ddd2      	ble.n	1004f560 <_printf_common+0x3c>
1004f5ba:	0022      	movs	r2, r4
1004f5bc:	2301      	movs	r3, #1
1004f5be:	9901      	ldr	r1, [sp, #4]
1004f5c0:	9800      	ldr	r0, [sp, #0]
1004f5c2:	9f08      	ldr	r7, [sp, #32]
1004f5c4:	3219      	adds	r2, #25
1004f5c6:	47b8      	blx	r7
1004f5c8:	3001      	adds	r0, #1
1004f5ca:	d1f0      	bne.n	1004f5ae <_printf_common+0x8a>
1004f5cc:	2001      	movs	r0, #1
1004f5ce:	4240      	negs	r0, r0
1004f5d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004f5d2:	2030      	movs	r0, #48	@ 0x30
1004f5d4:	18e1      	adds	r1, r4, r3
1004f5d6:	3143      	adds	r1, #67	@ 0x43
1004f5d8:	7008      	strb	r0, [r1, #0]
1004f5da:	0021      	movs	r1, r4
1004f5dc:	1c5a      	adds	r2, r3, #1
1004f5de:	3145      	adds	r1, #69	@ 0x45
1004f5e0:	7809      	ldrb	r1, [r1, #0]
1004f5e2:	18a2      	adds	r2, r4, r2
1004f5e4:	3243      	adds	r2, #67	@ 0x43
1004f5e6:	3302      	adds	r3, #2
1004f5e8:	7011      	strb	r1, [r2, #0]
1004f5ea:	e7c1      	b.n	1004f570 <_printf_common+0x4c>
1004f5ec:	0022      	movs	r2, r4
1004f5ee:	2301      	movs	r3, #1
1004f5f0:	9901      	ldr	r1, [sp, #4]
1004f5f2:	9800      	ldr	r0, [sp, #0]
1004f5f4:	9f08      	ldr	r7, [sp, #32]
1004f5f6:	321a      	adds	r2, #26
1004f5f8:	47b8      	blx	r7
1004f5fa:	3001      	adds	r0, #1
1004f5fc:	d0e6      	beq.n	1004f5cc <_printf_common+0xa8>
1004f5fe:	3601      	adds	r6, #1
1004f600:	e7d1      	b.n	1004f5a6 <_printf_common+0x82>
	...

1004f604 <_printf_i>:
1004f604:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f606:	b08b      	sub	sp, #44	@ 0x2c
1004f608:	9206      	str	r2, [sp, #24]
1004f60a:	000a      	movs	r2, r1
1004f60c:	3243      	adds	r2, #67	@ 0x43
1004f60e:	9307      	str	r3, [sp, #28]
1004f610:	9005      	str	r0, [sp, #20]
1004f612:	9203      	str	r2, [sp, #12]
1004f614:	7e0a      	ldrb	r2, [r1, #24]
1004f616:	000c      	movs	r4, r1
1004f618:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004f61a:	2a78      	cmp	r2, #120	@ 0x78
1004f61c:	d809      	bhi.n	1004f632 <_printf_i+0x2e>
1004f61e:	2a62      	cmp	r2, #98	@ 0x62
1004f620:	d80b      	bhi.n	1004f63a <_printf_i+0x36>
1004f622:	2a00      	cmp	r2, #0
1004f624:	d100      	bne.n	1004f628 <_printf_i+0x24>
1004f626:	e0bc      	b.n	1004f7a2 <_printf_i+0x19e>
1004f628:	497b      	ldr	r1, [pc, #492]	@ (1004f818 <_printf_i+0x214>)
1004f62a:	9104      	str	r1, [sp, #16]
1004f62c:	2a58      	cmp	r2, #88	@ 0x58
1004f62e:	d100      	bne.n	1004f632 <_printf_i+0x2e>
1004f630:	e090      	b.n	1004f754 <_printf_i+0x150>
1004f632:	0025      	movs	r5, r4
1004f634:	3542      	adds	r5, #66	@ 0x42
1004f636:	702a      	strb	r2, [r5, #0]
1004f638:	e022      	b.n	1004f680 <_printf_i+0x7c>
1004f63a:	0010      	movs	r0, r2
1004f63c:	3863      	subs	r0, #99	@ 0x63
1004f63e:	2815      	cmp	r0, #21
1004f640:	d8f7      	bhi.n	1004f632 <_printf_i+0x2e>
1004f642:	f7f0 fdeb 	bl	1004021c <__gnu_thumb1_case_shi>
1004f646:	0016      	.short	0x0016
1004f648:	fff6001f 	.word	0xfff6001f
1004f64c:	fff6fff6 	.word	0xfff6fff6
1004f650:	001ffff6 	.word	0x001ffff6
1004f654:	fff6fff6 	.word	0xfff6fff6
1004f658:	fff6fff6 	.word	0xfff6fff6
1004f65c:	003600a1 	.word	0x003600a1
1004f660:	fff60080 	.word	0xfff60080
1004f664:	00b2fff6 	.word	0x00b2fff6
1004f668:	0036fff6 	.word	0x0036fff6
1004f66c:	fff6fff6 	.word	0xfff6fff6
1004f670:	0084      	.short	0x0084
1004f672:	0025      	movs	r5, r4
1004f674:	681a      	ldr	r2, [r3, #0]
1004f676:	3542      	adds	r5, #66	@ 0x42
1004f678:	1d11      	adds	r1, r2, #4
1004f67a:	6019      	str	r1, [r3, #0]
1004f67c:	6813      	ldr	r3, [r2, #0]
1004f67e:	702b      	strb	r3, [r5, #0]
1004f680:	2301      	movs	r3, #1
1004f682:	e0a0      	b.n	1004f7c6 <_printf_i+0x1c2>
1004f684:	6818      	ldr	r0, [r3, #0]
1004f686:	6809      	ldr	r1, [r1, #0]
1004f688:	1d02      	adds	r2, r0, #4
1004f68a:	060d      	lsls	r5, r1, #24
1004f68c:	d50b      	bpl.n	1004f6a6 <_printf_i+0xa2>
1004f68e:	6806      	ldr	r6, [r0, #0]
1004f690:	601a      	str	r2, [r3, #0]
1004f692:	2e00      	cmp	r6, #0
1004f694:	da03      	bge.n	1004f69e <_printf_i+0x9a>
1004f696:	232d      	movs	r3, #45	@ 0x2d
1004f698:	9a03      	ldr	r2, [sp, #12]
1004f69a:	4276      	negs	r6, r6
1004f69c:	7013      	strb	r3, [r2, #0]
1004f69e:	4b5e      	ldr	r3, [pc, #376]	@ (1004f818 <_printf_i+0x214>)
1004f6a0:	270a      	movs	r7, #10
1004f6a2:	9304      	str	r3, [sp, #16]
1004f6a4:	e018      	b.n	1004f6d8 <_printf_i+0xd4>
1004f6a6:	6806      	ldr	r6, [r0, #0]
1004f6a8:	601a      	str	r2, [r3, #0]
1004f6aa:	0649      	lsls	r1, r1, #25
1004f6ac:	d5f1      	bpl.n	1004f692 <_printf_i+0x8e>
1004f6ae:	b236      	sxth	r6, r6
1004f6b0:	e7ef      	b.n	1004f692 <_printf_i+0x8e>
1004f6b2:	6808      	ldr	r0, [r1, #0]
1004f6b4:	6819      	ldr	r1, [r3, #0]
1004f6b6:	c940      	ldmia	r1!, {r6}
1004f6b8:	0605      	lsls	r5, r0, #24
1004f6ba:	d402      	bmi.n	1004f6c2 <_printf_i+0xbe>
1004f6bc:	0640      	lsls	r0, r0, #25
1004f6be:	d500      	bpl.n	1004f6c2 <_printf_i+0xbe>
1004f6c0:	b2b6      	uxth	r6, r6
1004f6c2:	6019      	str	r1, [r3, #0]
1004f6c4:	4b54      	ldr	r3, [pc, #336]	@ (1004f818 <_printf_i+0x214>)
1004f6c6:	270a      	movs	r7, #10
1004f6c8:	9304      	str	r3, [sp, #16]
1004f6ca:	2a6f      	cmp	r2, #111	@ 0x6f
1004f6cc:	d100      	bne.n	1004f6d0 <_printf_i+0xcc>
1004f6ce:	3f02      	subs	r7, #2
1004f6d0:	0023      	movs	r3, r4
1004f6d2:	2200      	movs	r2, #0
1004f6d4:	3343      	adds	r3, #67	@ 0x43
1004f6d6:	701a      	strb	r2, [r3, #0]
1004f6d8:	6863      	ldr	r3, [r4, #4]
1004f6da:	60a3      	str	r3, [r4, #8]
1004f6dc:	2b00      	cmp	r3, #0
1004f6de:	db03      	blt.n	1004f6e8 <_printf_i+0xe4>
1004f6e0:	2104      	movs	r1, #4
1004f6e2:	6822      	ldr	r2, [r4, #0]
1004f6e4:	438a      	bics	r2, r1
1004f6e6:	6022      	str	r2, [r4, #0]
1004f6e8:	2e00      	cmp	r6, #0
1004f6ea:	d102      	bne.n	1004f6f2 <_printf_i+0xee>
1004f6ec:	9d03      	ldr	r5, [sp, #12]
1004f6ee:	2b00      	cmp	r3, #0
1004f6f0:	d00c      	beq.n	1004f70c <_printf_i+0x108>
1004f6f2:	9d03      	ldr	r5, [sp, #12]
1004f6f4:	0030      	movs	r0, r6
1004f6f6:	0039      	movs	r1, r7
1004f6f8:	f7f0 fe20 	bl	1004033c <__aeabi_uidivmod>
1004f6fc:	9b04      	ldr	r3, [sp, #16]
1004f6fe:	3d01      	subs	r5, #1
1004f700:	5c5b      	ldrb	r3, [r3, r1]
1004f702:	702b      	strb	r3, [r5, #0]
1004f704:	0033      	movs	r3, r6
1004f706:	0006      	movs	r6, r0
1004f708:	429f      	cmp	r7, r3
1004f70a:	d9f3      	bls.n	1004f6f4 <_printf_i+0xf0>
1004f70c:	2f08      	cmp	r7, #8
1004f70e:	d109      	bne.n	1004f724 <_printf_i+0x120>
1004f710:	6823      	ldr	r3, [r4, #0]
1004f712:	07db      	lsls	r3, r3, #31
1004f714:	d506      	bpl.n	1004f724 <_printf_i+0x120>
1004f716:	6862      	ldr	r2, [r4, #4]
1004f718:	6923      	ldr	r3, [r4, #16]
1004f71a:	429a      	cmp	r2, r3
1004f71c:	dc02      	bgt.n	1004f724 <_printf_i+0x120>
1004f71e:	2330      	movs	r3, #48	@ 0x30
1004f720:	3d01      	subs	r5, #1
1004f722:	702b      	strb	r3, [r5, #0]
1004f724:	9b03      	ldr	r3, [sp, #12]
1004f726:	1b5b      	subs	r3, r3, r5
1004f728:	6123      	str	r3, [r4, #16]
1004f72a:	9b07      	ldr	r3, [sp, #28]
1004f72c:	0021      	movs	r1, r4
1004f72e:	9300      	str	r3, [sp, #0]
1004f730:	9805      	ldr	r0, [sp, #20]
1004f732:	9b06      	ldr	r3, [sp, #24]
1004f734:	aa09      	add	r2, sp, #36	@ 0x24
1004f736:	f7ff fef5 	bl	1004f524 <_printf_common>
1004f73a:	3001      	adds	r0, #1
1004f73c:	d148      	bne.n	1004f7d0 <_printf_i+0x1cc>
1004f73e:	2001      	movs	r0, #1
1004f740:	4240      	negs	r0, r0
1004f742:	b00b      	add	sp, #44	@ 0x2c
1004f744:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f746:	2220      	movs	r2, #32
1004f748:	6809      	ldr	r1, [r1, #0]
1004f74a:	430a      	orrs	r2, r1
1004f74c:	6022      	str	r2, [r4, #0]
1004f74e:	2278      	movs	r2, #120	@ 0x78
1004f750:	4932      	ldr	r1, [pc, #200]	@ (1004f81c <_printf_i+0x218>)
1004f752:	9104      	str	r1, [sp, #16]
1004f754:	0021      	movs	r1, r4
1004f756:	3145      	adds	r1, #69	@ 0x45
1004f758:	700a      	strb	r2, [r1, #0]
1004f75a:	6819      	ldr	r1, [r3, #0]
1004f75c:	6822      	ldr	r2, [r4, #0]
1004f75e:	c940      	ldmia	r1!, {r6}
1004f760:	0610      	lsls	r0, r2, #24
1004f762:	d402      	bmi.n	1004f76a <_printf_i+0x166>
1004f764:	0650      	lsls	r0, r2, #25
1004f766:	d500      	bpl.n	1004f76a <_printf_i+0x166>
1004f768:	b2b6      	uxth	r6, r6
1004f76a:	6019      	str	r1, [r3, #0]
1004f76c:	07d3      	lsls	r3, r2, #31
1004f76e:	d502      	bpl.n	1004f776 <_printf_i+0x172>
1004f770:	2320      	movs	r3, #32
1004f772:	4313      	orrs	r3, r2
1004f774:	6023      	str	r3, [r4, #0]
1004f776:	2e00      	cmp	r6, #0
1004f778:	d001      	beq.n	1004f77e <_printf_i+0x17a>
1004f77a:	2710      	movs	r7, #16
1004f77c:	e7a8      	b.n	1004f6d0 <_printf_i+0xcc>
1004f77e:	2220      	movs	r2, #32
1004f780:	6823      	ldr	r3, [r4, #0]
1004f782:	4393      	bics	r3, r2
1004f784:	6023      	str	r3, [r4, #0]
1004f786:	e7f8      	b.n	1004f77a <_printf_i+0x176>
1004f788:	681a      	ldr	r2, [r3, #0]
1004f78a:	680d      	ldr	r5, [r1, #0]
1004f78c:	1d10      	adds	r0, r2, #4
1004f78e:	6949      	ldr	r1, [r1, #20]
1004f790:	6018      	str	r0, [r3, #0]
1004f792:	6813      	ldr	r3, [r2, #0]
1004f794:	062e      	lsls	r6, r5, #24
1004f796:	d501      	bpl.n	1004f79c <_printf_i+0x198>
1004f798:	6019      	str	r1, [r3, #0]
1004f79a:	e002      	b.n	1004f7a2 <_printf_i+0x19e>
1004f79c:	066d      	lsls	r5, r5, #25
1004f79e:	d5fb      	bpl.n	1004f798 <_printf_i+0x194>
1004f7a0:	8019      	strh	r1, [r3, #0]
1004f7a2:	2300      	movs	r3, #0
1004f7a4:	9d03      	ldr	r5, [sp, #12]
1004f7a6:	6123      	str	r3, [r4, #16]
1004f7a8:	e7bf      	b.n	1004f72a <_printf_i+0x126>
1004f7aa:	681a      	ldr	r2, [r3, #0]
1004f7ac:	1d11      	adds	r1, r2, #4
1004f7ae:	6019      	str	r1, [r3, #0]
1004f7b0:	6815      	ldr	r5, [r2, #0]
1004f7b2:	2100      	movs	r1, #0
1004f7b4:	0028      	movs	r0, r5
1004f7b6:	6862      	ldr	r2, [r4, #4]
1004f7b8:	f000 f986 	bl	1004fac8 <memchr>
1004f7bc:	2800      	cmp	r0, #0
1004f7be:	d001      	beq.n	1004f7c4 <_printf_i+0x1c0>
1004f7c0:	1b40      	subs	r0, r0, r5
1004f7c2:	6060      	str	r0, [r4, #4]
1004f7c4:	6863      	ldr	r3, [r4, #4]
1004f7c6:	6123      	str	r3, [r4, #16]
1004f7c8:	2300      	movs	r3, #0
1004f7ca:	9a03      	ldr	r2, [sp, #12]
1004f7cc:	7013      	strb	r3, [r2, #0]
1004f7ce:	e7ac      	b.n	1004f72a <_printf_i+0x126>
1004f7d0:	002a      	movs	r2, r5
1004f7d2:	6923      	ldr	r3, [r4, #16]
1004f7d4:	9906      	ldr	r1, [sp, #24]
1004f7d6:	9805      	ldr	r0, [sp, #20]
1004f7d8:	9d07      	ldr	r5, [sp, #28]
1004f7da:	47a8      	blx	r5
1004f7dc:	3001      	adds	r0, #1
1004f7de:	d0ae      	beq.n	1004f73e <_printf_i+0x13a>
1004f7e0:	6823      	ldr	r3, [r4, #0]
1004f7e2:	079b      	lsls	r3, r3, #30
1004f7e4:	d415      	bmi.n	1004f812 <_printf_i+0x20e>
1004f7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004f7e8:	68e0      	ldr	r0, [r4, #12]
1004f7ea:	4298      	cmp	r0, r3
1004f7ec:	daa9      	bge.n	1004f742 <_printf_i+0x13e>
1004f7ee:	0018      	movs	r0, r3
1004f7f0:	e7a7      	b.n	1004f742 <_printf_i+0x13e>
1004f7f2:	0022      	movs	r2, r4
1004f7f4:	2301      	movs	r3, #1
1004f7f6:	9906      	ldr	r1, [sp, #24]
1004f7f8:	9805      	ldr	r0, [sp, #20]
1004f7fa:	9e07      	ldr	r6, [sp, #28]
1004f7fc:	3219      	adds	r2, #25
1004f7fe:	47b0      	blx	r6
1004f800:	3001      	adds	r0, #1
1004f802:	d09c      	beq.n	1004f73e <_printf_i+0x13a>
1004f804:	3501      	adds	r5, #1
1004f806:	68e3      	ldr	r3, [r4, #12]
1004f808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004f80a:	1a9b      	subs	r3, r3, r2
1004f80c:	42ab      	cmp	r3, r5
1004f80e:	dcf0      	bgt.n	1004f7f2 <_printf_i+0x1ee>
1004f810:	e7e9      	b.n	1004f7e6 <_printf_i+0x1e2>
1004f812:	2500      	movs	r5, #0
1004f814:	e7f7      	b.n	1004f806 <_printf_i+0x202>
1004f816:	46c0      	nop			@ (mov r8, r8)
1004f818:	1004ffa9 	.word	0x1004ffa9
1004f81c:	1004ffba 	.word	0x1004ffba

1004f820 <__sflush_r>:
1004f820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004f822:	220c      	movs	r2, #12
1004f824:	5e8b      	ldrsh	r3, [r1, r2]
1004f826:	0005      	movs	r5, r0
1004f828:	000c      	movs	r4, r1
1004f82a:	071a      	lsls	r2, r3, #28
1004f82c:	d456      	bmi.n	1004f8dc <__sflush_r+0xbc>
1004f82e:	684a      	ldr	r2, [r1, #4]
1004f830:	2a00      	cmp	r2, #0
1004f832:	dc02      	bgt.n	1004f83a <__sflush_r+0x1a>
1004f834:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
1004f836:	2a00      	cmp	r2, #0
1004f838:	dd4e      	ble.n	1004f8d8 <__sflush_r+0xb8>
1004f83a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004f83c:	2f00      	cmp	r7, #0
1004f83e:	d04b      	beq.n	1004f8d8 <__sflush_r+0xb8>
1004f840:	2200      	movs	r2, #0
1004f842:	2080      	movs	r0, #128	@ 0x80
1004f844:	682e      	ldr	r6, [r5, #0]
1004f846:	602a      	str	r2, [r5, #0]
1004f848:	001a      	movs	r2, r3
1004f84a:	0140      	lsls	r0, r0, #5
1004f84c:	6a21      	ldr	r1, [r4, #32]
1004f84e:	4002      	ands	r2, r0
1004f850:	4203      	tst	r3, r0
1004f852:	d033      	beq.n	1004f8bc <__sflush_r+0x9c>
1004f854:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1004f856:	89a3      	ldrh	r3, [r4, #12]
1004f858:	075b      	lsls	r3, r3, #29
1004f85a:	d506      	bpl.n	1004f86a <__sflush_r+0x4a>
1004f85c:	6863      	ldr	r3, [r4, #4]
1004f85e:	1ad2      	subs	r2, r2, r3
1004f860:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1004f862:	2b00      	cmp	r3, #0
1004f864:	d001      	beq.n	1004f86a <__sflush_r+0x4a>
1004f866:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1004f868:	1ad2      	subs	r2, r2, r3
1004f86a:	2300      	movs	r3, #0
1004f86c:	0028      	movs	r0, r5
1004f86e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004f870:	6a21      	ldr	r1, [r4, #32]
1004f872:	47b8      	blx	r7
1004f874:	89a2      	ldrh	r2, [r4, #12]
1004f876:	1c43      	adds	r3, r0, #1
1004f878:	d106      	bne.n	1004f888 <__sflush_r+0x68>
1004f87a:	6829      	ldr	r1, [r5, #0]
1004f87c:	291d      	cmp	r1, #29
1004f87e:	d846      	bhi.n	1004f90e <__sflush_r+0xee>
1004f880:	4b29      	ldr	r3, [pc, #164]	@ (1004f928 <__sflush_r+0x108>)
1004f882:	410b      	asrs	r3, r1
1004f884:	07db      	lsls	r3, r3, #31
1004f886:	d442      	bmi.n	1004f90e <__sflush_r+0xee>
1004f888:	2300      	movs	r3, #0
1004f88a:	6063      	str	r3, [r4, #4]
1004f88c:	6923      	ldr	r3, [r4, #16]
1004f88e:	6023      	str	r3, [r4, #0]
1004f890:	04d2      	lsls	r2, r2, #19
1004f892:	d505      	bpl.n	1004f8a0 <__sflush_r+0x80>
1004f894:	1c43      	adds	r3, r0, #1
1004f896:	d102      	bne.n	1004f89e <__sflush_r+0x7e>
1004f898:	682b      	ldr	r3, [r5, #0]
1004f89a:	2b00      	cmp	r3, #0
1004f89c:	d100      	bne.n	1004f8a0 <__sflush_r+0x80>
1004f89e:	6560      	str	r0, [r4, #84]	@ 0x54
1004f8a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004f8a2:	602e      	str	r6, [r5, #0]
1004f8a4:	2900      	cmp	r1, #0
1004f8a6:	d017      	beq.n	1004f8d8 <__sflush_r+0xb8>
1004f8a8:	0023      	movs	r3, r4
1004f8aa:	3344      	adds	r3, #68	@ 0x44
1004f8ac:	4299      	cmp	r1, r3
1004f8ae:	d002      	beq.n	1004f8b6 <__sflush_r+0x96>
1004f8b0:	0028      	movs	r0, r5
1004f8b2:	f7ff fbed 	bl	1004f090 <_free_r>
1004f8b6:	2300      	movs	r3, #0
1004f8b8:	6363      	str	r3, [r4, #52]	@ 0x34
1004f8ba:	e00d      	b.n	1004f8d8 <__sflush_r+0xb8>
1004f8bc:	2301      	movs	r3, #1
1004f8be:	0028      	movs	r0, r5
1004f8c0:	47b8      	blx	r7
1004f8c2:	0002      	movs	r2, r0
1004f8c4:	1c43      	adds	r3, r0, #1
1004f8c6:	d1c6      	bne.n	1004f856 <__sflush_r+0x36>
1004f8c8:	682b      	ldr	r3, [r5, #0]
1004f8ca:	2b00      	cmp	r3, #0
1004f8cc:	d0c3      	beq.n	1004f856 <__sflush_r+0x36>
1004f8ce:	2b1d      	cmp	r3, #29
1004f8d0:	d001      	beq.n	1004f8d6 <__sflush_r+0xb6>
1004f8d2:	2b16      	cmp	r3, #22
1004f8d4:	d11a      	bne.n	1004f90c <__sflush_r+0xec>
1004f8d6:	602e      	str	r6, [r5, #0]
1004f8d8:	2000      	movs	r0, #0
1004f8da:	e01e      	b.n	1004f91a <__sflush_r+0xfa>
1004f8dc:	690e      	ldr	r6, [r1, #16]
1004f8de:	2e00      	cmp	r6, #0
1004f8e0:	d0fa      	beq.n	1004f8d8 <__sflush_r+0xb8>
1004f8e2:	680f      	ldr	r7, [r1, #0]
1004f8e4:	600e      	str	r6, [r1, #0]
1004f8e6:	1bba      	subs	r2, r7, r6
1004f8e8:	9201      	str	r2, [sp, #4]
1004f8ea:	2200      	movs	r2, #0
1004f8ec:	079b      	lsls	r3, r3, #30
1004f8ee:	d100      	bne.n	1004f8f2 <__sflush_r+0xd2>
1004f8f0:	694a      	ldr	r2, [r1, #20]
1004f8f2:	60a2      	str	r2, [r4, #8]
1004f8f4:	9b01      	ldr	r3, [sp, #4]
1004f8f6:	2b00      	cmp	r3, #0
1004f8f8:	ddee      	ble.n	1004f8d8 <__sflush_r+0xb8>
1004f8fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
1004f8fc:	0032      	movs	r2, r6
1004f8fe:	001f      	movs	r7, r3
1004f900:	0028      	movs	r0, r5
1004f902:	9b01      	ldr	r3, [sp, #4]
1004f904:	6a21      	ldr	r1, [r4, #32]
1004f906:	47b8      	blx	r7
1004f908:	2800      	cmp	r0, #0
1004f90a:	dc07      	bgt.n	1004f91c <__sflush_r+0xfc>
1004f90c:	89a2      	ldrh	r2, [r4, #12]
1004f90e:	2340      	movs	r3, #64	@ 0x40
1004f910:	2001      	movs	r0, #1
1004f912:	4313      	orrs	r3, r2
1004f914:	b21b      	sxth	r3, r3
1004f916:	81a3      	strh	r3, [r4, #12]
1004f918:	4240      	negs	r0, r0
1004f91a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004f91c:	9b01      	ldr	r3, [sp, #4]
1004f91e:	1836      	adds	r6, r6, r0
1004f920:	1a1b      	subs	r3, r3, r0
1004f922:	9301      	str	r3, [sp, #4]
1004f924:	e7e6      	b.n	1004f8f4 <__sflush_r+0xd4>
1004f926:	46c0      	nop			@ (mov r8, r8)
1004f928:	dfbffffe 	.word	0xdfbffffe

1004f92c <_fflush_r>:
1004f92c:	690b      	ldr	r3, [r1, #16]
1004f92e:	b570      	push	{r4, r5, r6, lr}
1004f930:	0005      	movs	r5, r0
1004f932:	000c      	movs	r4, r1
1004f934:	2b00      	cmp	r3, #0
1004f936:	d102      	bne.n	1004f93e <_fflush_r+0x12>
1004f938:	2500      	movs	r5, #0
1004f93a:	0028      	movs	r0, r5
1004f93c:	bd70      	pop	{r4, r5, r6, pc}
1004f93e:	2800      	cmp	r0, #0
1004f940:	d004      	beq.n	1004f94c <_fflush_r+0x20>
1004f942:	6a03      	ldr	r3, [r0, #32]
1004f944:	2b00      	cmp	r3, #0
1004f946:	d101      	bne.n	1004f94c <_fflush_r+0x20>
1004f948:	f7ff f8e6 	bl	1004eb18 <__sinit>
1004f94c:	220c      	movs	r2, #12
1004f94e:	5ea3      	ldrsh	r3, [r4, r2]
1004f950:	2b00      	cmp	r3, #0
1004f952:	d0f1      	beq.n	1004f938 <_fflush_r+0xc>
1004f954:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004f956:	07d2      	lsls	r2, r2, #31
1004f958:	d404      	bmi.n	1004f964 <_fflush_r+0x38>
1004f95a:	059b      	lsls	r3, r3, #22
1004f95c:	d402      	bmi.n	1004f964 <_fflush_r+0x38>
1004f95e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004f960:	f7ff fb8b 	bl	1004f07a <__retarget_lock_acquire_recursive>
1004f964:	0028      	movs	r0, r5
1004f966:	0021      	movs	r1, r4
1004f968:	f7ff ff5a 	bl	1004f820 <__sflush_r>
1004f96c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004f96e:	0005      	movs	r5, r0
1004f970:	07db      	lsls	r3, r3, #31
1004f972:	d4e2      	bmi.n	1004f93a <_fflush_r+0xe>
1004f974:	89a3      	ldrh	r3, [r4, #12]
1004f976:	059b      	lsls	r3, r3, #22
1004f978:	d4df      	bmi.n	1004f93a <_fflush_r+0xe>
1004f97a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004f97c:	f7ff fb7e 	bl	1004f07c <__retarget_lock_release_recursive>
1004f980:	e7db      	b.n	1004f93a <_fflush_r+0xe>
	...

1004f984 <__swhatbuf_r>:
1004f984:	b570      	push	{r4, r5, r6, lr}
1004f986:	000e      	movs	r6, r1
1004f988:	001d      	movs	r5, r3
1004f98a:	230e      	movs	r3, #14
1004f98c:	5ec9      	ldrsh	r1, [r1, r3]
1004f98e:	0014      	movs	r4, r2
1004f990:	b096      	sub	sp, #88	@ 0x58
1004f992:	2900      	cmp	r1, #0
1004f994:	da0c      	bge.n	1004f9b0 <__swhatbuf_r+0x2c>
1004f996:	89b2      	ldrh	r2, [r6, #12]
1004f998:	2380      	movs	r3, #128	@ 0x80
1004f99a:	0011      	movs	r1, r2
1004f99c:	4019      	ands	r1, r3
1004f99e:	421a      	tst	r2, r3
1004f9a0:	d114      	bne.n	1004f9cc <__swhatbuf_r+0x48>
1004f9a2:	2380      	movs	r3, #128	@ 0x80
1004f9a4:	00db      	lsls	r3, r3, #3
1004f9a6:	2000      	movs	r0, #0
1004f9a8:	6029      	str	r1, [r5, #0]
1004f9aa:	6023      	str	r3, [r4, #0]
1004f9ac:	b016      	add	sp, #88	@ 0x58
1004f9ae:	bd70      	pop	{r4, r5, r6, pc}
1004f9b0:	466a      	mov	r2, sp
1004f9b2:	f000 f853 	bl	1004fa5c <_fstat_r>
1004f9b6:	2800      	cmp	r0, #0
1004f9b8:	dbed      	blt.n	1004f996 <__swhatbuf_r+0x12>
1004f9ba:	23f0      	movs	r3, #240	@ 0xf0
1004f9bc:	9901      	ldr	r1, [sp, #4]
1004f9be:	021b      	lsls	r3, r3, #8
1004f9c0:	4019      	ands	r1, r3
1004f9c2:	4b04      	ldr	r3, [pc, #16]	@ (1004f9d4 <__swhatbuf_r+0x50>)
1004f9c4:	18c9      	adds	r1, r1, r3
1004f9c6:	424b      	negs	r3, r1
1004f9c8:	4159      	adcs	r1, r3
1004f9ca:	e7ea      	b.n	1004f9a2 <__swhatbuf_r+0x1e>
1004f9cc:	2100      	movs	r1, #0
1004f9ce:	2340      	movs	r3, #64	@ 0x40
1004f9d0:	e7e9      	b.n	1004f9a6 <__swhatbuf_r+0x22>
1004f9d2:	46c0      	nop			@ (mov r8, r8)
1004f9d4:	ffffe000 	.word	0xffffe000

1004f9d8 <__smakebuf_r>:
1004f9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f9da:	2602      	movs	r6, #2
1004f9dc:	898b      	ldrh	r3, [r1, #12]
1004f9de:	0005      	movs	r5, r0
1004f9e0:	000c      	movs	r4, r1
1004f9e2:	b085      	sub	sp, #20
1004f9e4:	4233      	tst	r3, r6
1004f9e6:	d007      	beq.n	1004f9f8 <__smakebuf_r+0x20>
1004f9e8:	0023      	movs	r3, r4
1004f9ea:	3347      	adds	r3, #71	@ 0x47
1004f9ec:	6023      	str	r3, [r4, #0]
1004f9ee:	6123      	str	r3, [r4, #16]
1004f9f0:	2301      	movs	r3, #1
1004f9f2:	6163      	str	r3, [r4, #20]
1004f9f4:	b005      	add	sp, #20
1004f9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f9f8:	ab03      	add	r3, sp, #12
1004f9fa:	aa02      	add	r2, sp, #8
1004f9fc:	f7ff ffc2 	bl	1004f984 <__swhatbuf_r>
1004fa00:	9f02      	ldr	r7, [sp, #8]
1004fa02:	9001      	str	r0, [sp, #4]
1004fa04:	0039      	movs	r1, r7
1004fa06:	0028      	movs	r0, r5
1004fa08:	f7ff fbb8 	bl	1004f17c <_malloc_r>
1004fa0c:	2800      	cmp	r0, #0
1004fa0e:	d108      	bne.n	1004fa22 <__smakebuf_r+0x4a>
1004fa10:	220c      	movs	r2, #12
1004fa12:	5ea3      	ldrsh	r3, [r4, r2]
1004fa14:	059a      	lsls	r2, r3, #22
1004fa16:	d4ed      	bmi.n	1004f9f4 <__smakebuf_r+0x1c>
1004fa18:	2203      	movs	r2, #3
1004fa1a:	4393      	bics	r3, r2
1004fa1c:	431e      	orrs	r6, r3
1004fa1e:	81a6      	strh	r6, [r4, #12]
1004fa20:	e7e2      	b.n	1004f9e8 <__smakebuf_r+0x10>
1004fa22:	2380      	movs	r3, #128	@ 0x80
1004fa24:	89a2      	ldrh	r2, [r4, #12]
1004fa26:	6020      	str	r0, [r4, #0]
1004fa28:	4313      	orrs	r3, r2
1004fa2a:	81a3      	strh	r3, [r4, #12]
1004fa2c:	9b03      	ldr	r3, [sp, #12]
1004fa2e:	6120      	str	r0, [r4, #16]
1004fa30:	6167      	str	r7, [r4, #20]
1004fa32:	2b00      	cmp	r3, #0
1004fa34:	d00c      	beq.n	1004fa50 <__smakebuf_r+0x78>
1004fa36:	0028      	movs	r0, r5
1004fa38:	230e      	movs	r3, #14
1004fa3a:	5ee1      	ldrsh	r1, [r4, r3]
1004fa3c:	f000 f820 	bl	1004fa80 <_isatty_r>
1004fa40:	2800      	cmp	r0, #0
1004fa42:	d005      	beq.n	1004fa50 <__smakebuf_r+0x78>
1004fa44:	2303      	movs	r3, #3
1004fa46:	89a2      	ldrh	r2, [r4, #12]
1004fa48:	439a      	bics	r2, r3
1004fa4a:	3b02      	subs	r3, #2
1004fa4c:	4313      	orrs	r3, r2
1004fa4e:	81a3      	strh	r3, [r4, #12]
1004fa50:	89a3      	ldrh	r3, [r4, #12]
1004fa52:	9a01      	ldr	r2, [sp, #4]
1004fa54:	4313      	orrs	r3, r2
1004fa56:	81a3      	strh	r3, [r4, #12]
1004fa58:	e7cc      	b.n	1004f9f4 <__smakebuf_r+0x1c>
	...

1004fa5c <_fstat_r>:
1004fa5c:	2300      	movs	r3, #0
1004fa5e:	b570      	push	{r4, r5, r6, lr}
1004fa60:	4d06      	ldr	r5, [pc, #24]	@ (1004fa7c <_fstat_r+0x20>)
1004fa62:	0004      	movs	r4, r0
1004fa64:	0008      	movs	r0, r1
1004fa66:	0011      	movs	r1, r2
1004fa68:	602b      	str	r3, [r5, #0]
1004fa6a:	f7f1 fcb6 	bl	100413da <_fstat>
1004fa6e:	1c43      	adds	r3, r0, #1
1004fa70:	d103      	bne.n	1004fa7a <_fstat_r+0x1e>
1004fa72:	682b      	ldr	r3, [r5, #0]
1004fa74:	2b00      	cmp	r3, #0
1004fa76:	d000      	beq.n	1004fa7a <_fstat_r+0x1e>
1004fa78:	6023      	str	r3, [r4, #0]
1004fa7a:	bd70      	pop	{r4, r5, r6, pc}
1004fa7c:	20000ce4 	.word	0x20000ce4

1004fa80 <_isatty_r>:
1004fa80:	2300      	movs	r3, #0
1004fa82:	b570      	push	{r4, r5, r6, lr}
1004fa84:	4d06      	ldr	r5, [pc, #24]	@ (1004faa0 <_isatty_r+0x20>)
1004fa86:	0004      	movs	r4, r0
1004fa88:	0008      	movs	r0, r1
1004fa8a:	602b      	str	r3, [r5, #0]
1004fa8c:	f7f1 fcb3 	bl	100413f6 <_isatty>
1004fa90:	1c43      	adds	r3, r0, #1
1004fa92:	d103      	bne.n	1004fa9c <_isatty_r+0x1c>
1004fa94:	682b      	ldr	r3, [r5, #0]
1004fa96:	2b00      	cmp	r3, #0
1004fa98:	d000      	beq.n	1004fa9c <_isatty_r+0x1c>
1004fa9a:	6023      	str	r3, [r4, #0]
1004fa9c:	bd70      	pop	{r4, r5, r6, pc}
1004fa9e:	46c0      	nop			@ (mov r8, r8)
1004faa0:	20000ce4 	.word	0x20000ce4

1004faa4 <_sbrk_r>:
1004faa4:	2300      	movs	r3, #0
1004faa6:	b570      	push	{r4, r5, r6, lr}
1004faa8:	4d06      	ldr	r5, [pc, #24]	@ (1004fac4 <_sbrk_r+0x20>)
1004faaa:	0004      	movs	r4, r0
1004faac:	0008      	movs	r0, r1
1004faae:	602b      	str	r3, [r5, #0]
1004fab0:	f7f1 fcb6 	bl	10041420 <_sbrk>
1004fab4:	1c43      	adds	r3, r0, #1
1004fab6:	d103      	bne.n	1004fac0 <_sbrk_r+0x1c>
1004fab8:	682b      	ldr	r3, [r5, #0]
1004faba:	2b00      	cmp	r3, #0
1004fabc:	d000      	beq.n	1004fac0 <_sbrk_r+0x1c>
1004fabe:	6023      	str	r3, [r4, #0]
1004fac0:	bd70      	pop	{r4, r5, r6, pc}
1004fac2:	46c0      	nop			@ (mov r8, r8)
1004fac4:	20000ce4 	.word	0x20000ce4

1004fac8 <memchr>:
1004fac8:	b2c9      	uxtb	r1, r1
1004faca:	1882      	adds	r2, r0, r2
1004facc:	4290      	cmp	r0, r2
1004face:	d101      	bne.n	1004fad4 <memchr+0xc>
1004fad0:	2000      	movs	r0, #0
1004fad2:	4770      	bx	lr
1004fad4:	7803      	ldrb	r3, [r0, #0]
1004fad6:	428b      	cmp	r3, r1
1004fad8:	d0fb      	beq.n	1004fad2 <memchr+0xa>
1004fada:	3001      	adds	r0, #1
1004fadc:	e7f6      	b.n	1004facc <memchr+0x4>
	...

Disassembly of section .init:

1004fae0 <_init>:
1004fae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004fae2:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

1004fae4 <_fini>:
1004fae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004fae6:	46c0      	nop			@ (mov r8, r8)
