
BLE_Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f938  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  1004f9f8  1004f9f8  000109f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  1004f9fc  1004f9fc  000109fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000004e4  1004fa00  1004fa00  00010a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1004fee4  1004fee4  00010ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000b0  20000cd4  1004feec  00011cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  00012004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  00012004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  00012004  2**2
                  ALLOC
 10 .bss          00000b40  20000194  20000194  00012004  2**2
                  ALLOC
 11 .noinit       000017b0  20000d84  1004ff9c  00011d84  2**2
                  ALLOC
 12 .ota_region_end 00000000  1004ff9c  1004ff9c  00011d84  2**0
                  CONTENTS
 13 .heap         00000000  20002534  20002534  00011d84  2**0
                  CONTENTS
 14 .stack        00000c00  2000f400  2000f400  00012400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  00011d84  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  00011d84  2**0
                  CONTENTS, READONLY
 17 .debug_info   00023f8d  00000000  00000000  00011db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000635b  00000000  00000000  00035d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000028e0  00000000  00000000  0003c098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00001e83  00000000  00000000  0003e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00024145  00000000  00000000  000407fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002968c  00000000  00000000  00064940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000c8748  00000000  00000000  0008dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000087  00000000  00000000  00156714  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000098dc  00000000  00000000  0015679c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000185  00000000  00000000  00160078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_loclists 0000033b  00000000  00000000  001601fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <__gnu_thumb1_case_shi>:
1004021c:	b403      	push	{r0, r1}
1004021e:	4671      	mov	r1, lr
10040220:	0849      	lsrs	r1, r1, #1
10040222:	0040      	lsls	r0, r0, #1
10040224:	0049      	lsls	r1, r1, #1
10040226:	5e09      	ldrsh	r1, [r1, r0]
10040228:	0049      	lsls	r1, r1, #1
1004022a:	448e      	add	lr, r1
1004022c:	bc03      	pop	{r0, r1}
1004022e:	4770      	bx	lr

10040230 <__udivsi3>:
10040230:	2200      	movs	r2, #0
10040232:	0843      	lsrs	r3, r0, #1
10040234:	428b      	cmp	r3, r1
10040236:	d374      	bcc.n	10040322 <__udivsi3+0xf2>
10040238:	0903      	lsrs	r3, r0, #4
1004023a:	428b      	cmp	r3, r1
1004023c:	d35f      	bcc.n	100402fe <__udivsi3+0xce>
1004023e:	0a03      	lsrs	r3, r0, #8
10040240:	428b      	cmp	r3, r1
10040242:	d344      	bcc.n	100402ce <__udivsi3+0x9e>
10040244:	0b03      	lsrs	r3, r0, #12
10040246:	428b      	cmp	r3, r1
10040248:	d328      	bcc.n	1004029c <__udivsi3+0x6c>
1004024a:	0c03      	lsrs	r3, r0, #16
1004024c:	428b      	cmp	r3, r1
1004024e:	d30d      	bcc.n	1004026c <__udivsi3+0x3c>
10040250:	22ff      	movs	r2, #255	@ 0xff
10040252:	0209      	lsls	r1, r1, #8
10040254:	ba12      	rev	r2, r2
10040256:	0c03      	lsrs	r3, r0, #16
10040258:	428b      	cmp	r3, r1
1004025a:	d302      	bcc.n	10040262 <__udivsi3+0x32>
1004025c:	1212      	asrs	r2, r2, #8
1004025e:	0209      	lsls	r1, r1, #8
10040260:	d065      	beq.n	1004032e <__udivsi3+0xfe>
10040262:	0b03      	lsrs	r3, r0, #12
10040264:	428b      	cmp	r3, r1
10040266:	d319      	bcc.n	1004029c <__udivsi3+0x6c>
10040268:	e000      	b.n	1004026c <__udivsi3+0x3c>
1004026a:	0a09      	lsrs	r1, r1, #8
1004026c:	0bc3      	lsrs	r3, r0, #15
1004026e:	428b      	cmp	r3, r1
10040270:	d301      	bcc.n	10040276 <__udivsi3+0x46>
10040272:	03cb      	lsls	r3, r1, #15
10040274:	1ac0      	subs	r0, r0, r3
10040276:	4152      	adcs	r2, r2
10040278:	0b83      	lsrs	r3, r0, #14
1004027a:	428b      	cmp	r3, r1
1004027c:	d301      	bcc.n	10040282 <__udivsi3+0x52>
1004027e:	038b      	lsls	r3, r1, #14
10040280:	1ac0      	subs	r0, r0, r3
10040282:	4152      	adcs	r2, r2
10040284:	0b43      	lsrs	r3, r0, #13
10040286:	428b      	cmp	r3, r1
10040288:	d301      	bcc.n	1004028e <__udivsi3+0x5e>
1004028a:	034b      	lsls	r3, r1, #13
1004028c:	1ac0      	subs	r0, r0, r3
1004028e:	4152      	adcs	r2, r2
10040290:	0b03      	lsrs	r3, r0, #12
10040292:	428b      	cmp	r3, r1
10040294:	d301      	bcc.n	1004029a <__udivsi3+0x6a>
10040296:	030b      	lsls	r3, r1, #12
10040298:	1ac0      	subs	r0, r0, r3
1004029a:	4152      	adcs	r2, r2
1004029c:	0ac3      	lsrs	r3, r0, #11
1004029e:	428b      	cmp	r3, r1
100402a0:	d301      	bcc.n	100402a6 <__udivsi3+0x76>
100402a2:	02cb      	lsls	r3, r1, #11
100402a4:	1ac0      	subs	r0, r0, r3
100402a6:	4152      	adcs	r2, r2
100402a8:	0a83      	lsrs	r3, r0, #10
100402aa:	428b      	cmp	r3, r1
100402ac:	d301      	bcc.n	100402b2 <__udivsi3+0x82>
100402ae:	028b      	lsls	r3, r1, #10
100402b0:	1ac0      	subs	r0, r0, r3
100402b2:	4152      	adcs	r2, r2
100402b4:	0a43      	lsrs	r3, r0, #9
100402b6:	428b      	cmp	r3, r1
100402b8:	d301      	bcc.n	100402be <__udivsi3+0x8e>
100402ba:	024b      	lsls	r3, r1, #9
100402bc:	1ac0      	subs	r0, r0, r3
100402be:	4152      	adcs	r2, r2
100402c0:	0a03      	lsrs	r3, r0, #8
100402c2:	428b      	cmp	r3, r1
100402c4:	d301      	bcc.n	100402ca <__udivsi3+0x9a>
100402c6:	020b      	lsls	r3, r1, #8
100402c8:	1ac0      	subs	r0, r0, r3
100402ca:	4152      	adcs	r2, r2
100402cc:	d2cd      	bcs.n	1004026a <__udivsi3+0x3a>
100402ce:	09c3      	lsrs	r3, r0, #7
100402d0:	428b      	cmp	r3, r1
100402d2:	d301      	bcc.n	100402d8 <__udivsi3+0xa8>
100402d4:	01cb      	lsls	r3, r1, #7
100402d6:	1ac0      	subs	r0, r0, r3
100402d8:	4152      	adcs	r2, r2
100402da:	0983      	lsrs	r3, r0, #6
100402dc:	428b      	cmp	r3, r1
100402de:	d301      	bcc.n	100402e4 <__udivsi3+0xb4>
100402e0:	018b      	lsls	r3, r1, #6
100402e2:	1ac0      	subs	r0, r0, r3
100402e4:	4152      	adcs	r2, r2
100402e6:	0943      	lsrs	r3, r0, #5
100402e8:	428b      	cmp	r3, r1
100402ea:	d301      	bcc.n	100402f0 <__udivsi3+0xc0>
100402ec:	014b      	lsls	r3, r1, #5
100402ee:	1ac0      	subs	r0, r0, r3
100402f0:	4152      	adcs	r2, r2
100402f2:	0903      	lsrs	r3, r0, #4
100402f4:	428b      	cmp	r3, r1
100402f6:	d301      	bcc.n	100402fc <__udivsi3+0xcc>
100402f8:	010b      	lsls	r3, r1, #4
100402fa:	1ac0      	subs	r0, r0, r3
100402fc:	4152      	adcs	r2, r2
100402fe:	08c3      	lsrs	r3, r0, #3
10040300:	428b      	cmp	r3, r1
10040302:	d301      	bcc.n	10040308 <__udivsi3+0xd8>
10040304:	00cb      	lsls	r3, r1, #3
10040306:	1ac0      	subs	r0, r0, r3
10040308:	4152      	adcs	r2, r2
1004030a:	0883      	lsrs	r3, r0, #2
1004030c:	428b      	cmp	r3, r1
1004030e:	d301      	bcc.n	10040314 <__udivsi3+0xe4>
10040310:	008b      	lsls	r3, r1, #2
10040312:	1ac0      	subs	r0, r0, r3
10040314:	4152      	adcs	r2, r2
10040316:	0843      	lsrs	r3, r0, #1
10040318:	428b      	cmp	r3, r1
1004031a:	d301      	bcc.n	10040320 <__udivsi3+0xf0>
1004031c:	004b      	lsls	r3, r1, #1
1004031e:	1ac0      	subs	r0, r0, r3
10040320:	4152      	adcs	r2, r2
10040322:	1a41      	subs	r1, r0, r1
10040324:	d200      	bcs.n	10040328 <__udivsi3+0xf8>
10040326:	4601      	mov	r1, r0
10040328:	4152      	adcs	r2, r2
1004032a:	4610      	mov	r0, r2
1004032c:	4770      	bx	lr
1004032e:	e7ff      	b.n	10040330 <__udivsi3+0x100>
10040330:	b501      	push	{r0, lr}
10040332:	2000      	movs	r0, #0
10040334:	f000 f8f0 	bl	10040518 <__aeabi_idiv0>
10040338:	bd02      	pop	{r1, pc}
1004033a:	46c0      	nop			@ (mov r8, r8)

1004033c <__aeabi_uidivmod>:
1004033c:	2900      	cmp	r1, #0
1004033e:	d0f7      	beq.n	10040330 <__udivsi3+0x100>
10040340:	e776      	b.n	10040230 <__udivsi3>
10040342:	4770      	bx	lr

10040344 <__divsi3>:
10040344:	4603      	mov	r3, r0
10040346:	430b      	orrs	r3, r1
10040348:	d47f      	bmi.n	1004044a <__divsi3+0x106>
1004034a:	2200      	movs	r2, #0
1004034c:	0843      	lsrs	r3, r0, #1
1004034e:	428b      	cmp	r3, r1
10040350:	d374      	bcc.n	1004043c <__divsi3+0xf8>
10040352:	0903      	lsrs	r3, r0, #4
10040354:	428b      	cmp	r3, r1
10040356:	d35f      	bcc.n	10040418 <__divsi3+0xd4>
10040358:	0a03      	lsrs	r3, r0, #8
1004035a:	428b      	cmp	r3, r1
1004035c:	d344      	bcc.n	100403e8 <__divsi3+0xa4>
1004035e:	0b03      	lsrs	r3, r0, #12
10040360:	428b      	cmp	r3, r1
10040362:	d328      	bcc.n	100403b6 <__divsi3+0x72>
10040364:	0c03      	lsrs	r3, r0, #16
10040366:	428b      	cmp	r3, r1
10040368:	d30d      	bcc.n	10040386 <__divsi3+0x42>
1004036a:	22ff      	movs	r2, #255	@ 0xff
1004036c:	0209      	lsls	r1, r1, #8
1004036e:	ba12      	rev	r2, r2
10040370:	0c03      	lsrs	r3, r0, #16
10040372:	428b      	cmp	r3, r1
10040374:	d302      	bcc.n	1004037c <__divsi3+0x38>
10040376:	1212      	asrs	r2, r2, #8
10040378:	0209      	lsls	r1, r1, #8
1004037a:	d065      	beq.n	10040448 <__divsi3+0x104>
1004037c:	0b03      	lsrs	r3, r0, #12
1004037e:	428b      	cmp	r3, r1
10040380:	d319      	bcc.n	100403b6 <__divsi3+0x72>
10040382:	e000      	b.n	10040386 <__divsi3+0x42>
10040384:	0a09      	lsrs	r1, r1, #8
10040386:	0bc3      	lsrs	r3, r0, #15
10040388:	428b      	cmp	r3, r1
1004038a:	d301      	bcc.n	10040390 <__divsi3+0x4c>
1004038c:	03cb      	lsls	r3, r1, #15
1004038e:	1ac0      	subs	r0, r0, r3
10040390:	4152      	adcs	r2, r2
10040392:	0b83      	lsrs	r3, r0, #14
10040394:	428b      	cmp	r3, r1
10040396:	d301      	bcc.n	1004039c <__divsi3+0x58>
10040398:	038b      	lsls	r3, r1, #14
1004039a:	1ac0      	subs	r0, r0, r3
1004039c:	4152      	adcs	r2, r2
1004039e:	0b43      	lsrs	r3, r0, #13
100403a0:	428b      	cmp	r3, r1
100403a2:	d301      	bcc.n	100403a8 <__divsi3+0x64>
100403a4:	034b      	lsls	r3, r1, #13
100403a6:	1ac0      	subs	r0, r0, r3
100403a8:	4152      	adcs	r2, r2
100403aa:	0b03      	lsrs	r3, r0, #12
100403ac:	428b      	cmp	r3, r1
100403ae:	d301      	bcc.n	100403b4 <__divsi3+0x70>
100403b0:	030b      	lsls	r3, r1, #12
100403b2:	1ac0      	subs	r0, r0, r3
100403b4:	4152      	adcs	r2, r2
100403b6:	0ac3      	lsrs	r3, r0, #11
100403b8:	428b      	cmp	r3, r1
100403ba:	d301      	bcc.n	100403c0 <__divsi3+0x7c>
100403bc:	02cb      	lsls	r3, r1, #11
100403be:	1ac0      	subs	r0, r0, r3
100403c0:	4152      	adcs	r2, r2
100403c2:	0a83      	lsrs	r3, r0, #10
100403c4:	428b      	cmp	r3, r1
100403c6:	d301      	bcc.n	100403cc <__divsi3+0x88>
100403c8:	028b      	lsls	r3, r1, #10
100403ca:	1ac0      	subs	r0, r0, r3
100403cc:	4152      	adcs	r2, r2
100403ce:	0a43      	lsrs	r3, r0, #9
100403d0:	428b      	cmp	r3, r1
100403d2:	d301      	bcc.n	100403d8 <__divsi3+0x94>
100403d4:	024b      	lsls	r3, r1, #9
100403d6:	1ac0      	subs	r0, r0, r3
100403d8:	4152      	adcs	r2, r2
100403da:	0a03      	lsrs	r3, r0, #8
100403dc:	428b      	cmp	r3, r1
100403de:	d301      	bcc.n	100403e4 <__divsi3+0xa0>
100403e0:	020b      	lsls	r3, r1, #8
100403e2:	1ac0      	subs	r0, r0, r3
100403e4:	4152      	adcs	r2, r2
100403e6:	d2cd      	bcs.n	10040384 <__divsi3+0x40>
100403e8:	09c3      	lsrs	r3, r0, #7
100403ea:	428b      	cmp	r3, r1
100403ec:	d301      	bcc.n	100403f2 <__divsi3+0xae>
100403ee:	01cb      	lsls	r3, r1, #7
100403f0:	1ac0      	subs	r0, r0, r3
100403f2:	4152      	adcs	r2, r2
100403f4:	0983      	lsrs	r3, r0, #6
100403f6:	428b      	cmp	r3, r1
100403f8:	d301      	bcc.n	100403fe <__divsi3+0xba>
100403fa:	018b      	lsls	r3, r1, #6
100403fc:	1ac0      	subs	r0, r0, r3
100403fe:	4152      	adcs	r2, r2
10040400:	0943      	lsrs	r3, r0, #5
10040402:	428b      	cmp	r3, r1
10040404:	d301      	bcc.n	1004040a <__divsi3+0xc6>
10040406:	014b      	lsls	r3, r1, #5
10040408:	1ac0      	subs	r0, r0, r3
1004040a:	4152      	adcs	r2, r2
1004040c:	0903      	lsrs	r3, r0, #4
1004040e:	428b      	cmp	r3, r1
10040410:	d301      	bcc.n	10040416 <__divsi3+0xd2>
10040412:	010b      	lsls	r3, r1, #4
10040414:	1ac0      	subs	r0, r0, r3
10040416:	4152      	adcs	r2, r2
10040418:	08c3      	lsrs	r3, r0, #3
1004041a:	428b      	cmp	r3, r1
1004041c:	d301      	bcc.n	10040422 <__divsi3+0xde>
1004041e:	00cb      	lsls	r3, r1, #3
10040420:	1ac0      	subs	r0, r0, r3
10040422:	4152      	adcs	r2, r2
10040424:	0883      	lsrs	r3, r0, #2
10040426:	428b      	cmp	r3, r1
10040428:	d301      	bcc.n	1004042e <__divsi3+0xea>
1004042a:	008b      	lsls	r3, r1, #2
1004042c:	1ac0      	subs	r0, r0, r3
1004042e:	4152      	adcs	r2, r2
10040430:	0843      	lsrs	r3, r0, #1
10040432:	428b      	cmp	r3, r1
10040434:	d301      	bcc.n	1004043a <__divsi3+0xf6>
10040436:	004b      	lsls	r3, r1, #1
10040438:	1ac0      	subs	r0, r0, r3
1004043a:	4152      	adcs	r2, r2
1004043c:	1a41      	subs	r1, r0, r1
1004043e:	d200      	bcs.n	10040442 <__divsi3+0xfe>
10040440:	4601      	mov	r1, r0
10040442:	4152      	adcs	r2, r2
10040444:	4610      	mov	r0, r2
10040446:	4770      	bx	lr
10040448:	e05d      	b.n	10040506 <__divsi3+0x1c2>
1004044a:	0fca      	lsrs	r2, r1, #31
1004044c:	d000      	beq.n	10040450 <__divsi3+0x10c>
1004044e:	4249      	negs	r1, r1
10040450:	1003      	asrs	r3, r0, #32
10040452:	d300      	bcc.n	10040456 <__divsi3+0x112>
10040454:	4240      	negs	r0, r0
10040456:	4053      	eors	r3, r2
10040458:	2200      	movs	r2, #0
1004045a:	469c      	mov	ip, r3
1004045c:	0903      	lsrs	r3, r0, #4
1004045e:	428b      	cmp	r3, r1
10040460:	d32d      	bcc.n	100404be <__divsi3+0x17a>
10040462:	0a03      	lsrs	r3, r0, #8
10040464:	428b      	cmp	r3, r1
10040466:	d312      	bcc.n	1004048e <__divsi3+0x14a>
10040468:	22fc      	movs	r2, #252	@ 0xfc
1004046a:	0189      	lsls	r1, r1, #6
1004046c:	ba12      	rev	r2, r2
1004046e:	0a03      	lsrs	r3, r0, #8
10040470:	428b      	cmp	r3, r1
10040472:	d30c      	bcc.n	1004048e <__divsi3+0x14a>
10040474:	0189      	lsls	r1, r1, #6
10040476:	1192      	asrs	r2, r2, #6
10040478:	428b      	cmp	r3, r1
1004047a:	d308      	bcc.n	1004048e <__divsi3+0x14a>
1004047c:	0189      	lsls	r1, r1, #6
1004047e:	1192      	asrs	r2, r2, #6
10040480:	428b      	cmp	r3, r1
10040482:	d304      	bcc.n	1004048e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	d03a      	beq.n	100404fe <__divsi3+0x1ba>
10040488:	1192      	asrs	r2, r2, #6
1004048a:	e000      	b.n	1004048e <__divsi3+0x14a>
1004048c:	0989      	lsrs	r1, r1, #6
1004048e:	09c3      	lsrs	r3, r0, #7
10040490:	428b      	cmp	r3, r1
10040492:	d301      	bcc.n	10040498 <__divsi3+0x154>
10040494:	01cb      	lsls	r3, r1, #7
10040496:	1ac0      	subs	r0, r0, r3
10040498:	4152      	adcs	r2, r2
1004049a:	0983      	lsrs	r3, r0, #6
1004049c:	428b      	cmp	r3, r1
1004049e:	d301      	bcc.n	100404a4 <__divsi3+0x160>
100404a0:	018b      	lsls	r3, r1, #6
100404a2:	1ac0      	subs	r0, r0, r3
100404a4:	4152      	adcs	r2, r2
100404a6:	0943      	lsrs	r3, r0, #5
100404a8:	428b      	cmp	r3, r1
100404aa:	d301      	bcc.n	100404b0 <__divsi3+0x16c>
100404ac:	014b      	lsls	r3, r1, #5
100404ae:	1ac0      	subs	r0, r0, r3
100404b0:	4152      	adcs	r2, r2
100404b2:	0903      	lsrs	r3, r0, #4
100404b4:	428b      	cmp	r3, r1
100404b6:	d301      	bcc.n	100404bc <__divsi3+0x178>
100404b8:	010b      	lsls	r3, r1, #4
100404ba:	1ac0      	subs	r0, r0, r3
100404bc:	4152      	adcs	r2, r2
100404be:	08c3      	lsrs	r3, r0, #3
100404c0:	428b      	cmp	r3, r1
100404c2:	d301      	bcc.n	100404c8 <__divsi3+0x184>
100404c4:	00cb      	lsls	r3, r1, #3
100404c6:	1ac0      	subs	r0, r0, r3
100404c8:	4152      	adcs	r2, r2
100404ca:	0883      	lsrs	r3, r0, #2
100404cc:	428b      	cmp	r3, r1
100404ce:	d301      	bcc.n	100404d4 <__divsi3+0x190>
100404d0:	008b      	lsls	r3, r1, #2
100404d2:	1ac0      	subs	r0, r0, r3
100404d4:	4152      	adcs	r2, r2
100404d6:	d2d9      	bcs.n	1004048c <__divsi3+0x148>
100404d8:	0843      	lsrs	r3, r0, #1
100404da:	428b      	cmp	r3, r1
100404dc:	d301      	bcc.n	100404e2 <__divsi3+0x19e>
100404de:	004b      	lsls	r3, r1, #1
100404e0:	1ac0      	subs	r0, r0, r3
100404e2:	4152      	adcs	r2, r2
100404e4:	1a41      	subs	r1, r0, r1
100404e6:	d200      	bcs.n	100404ea <__divsi3+0x1a6>
100404e8:	4601      	mov	r1, r0
100404ea:	4663      	mov	r3, ip
100404ec:	4152      	adcs	r2, r2
100404ee:	105b      	asrs	r3, r3, #1
100404f0:	4610      	mov	r0, r2
100404f2:	d301      	bcc.n	100404f8 <__divsi3+0x1b4>
100404f4:	4240      	negs	r0, r0
100404f6:	2b00      	cmp	r3, #0
100404f8:	d500      	bpl.n	100404fc <__divsi3+0x1b8>
100404fa:	4249      	negs	r1, r1
100404fc:	4770      	bx	lr
100404fe:	4663      	mov	r3, ip
10040500:	105b      	asrs	r3, r3, #1
10040502:	d300      	bcc.n	10040506 <__divsi3+0x1c2>
10040504:	4240      	negs	r0, r0
10040506:	b501      	push	{r0, lr}
10040508:	2000      	movs	r0, #0
1004050a:	f000 f805 	bl	10040518 <__aeabi_idiv0>
1004050e:	bd02      	pop	{r1, pc}

10040510 <__aeabi_idivmod>:
10040510:	2900      	cmp	r1, #0
10040512:	d0f8      	beq.n	10040506 <__divsi3+0x1c2>
10040514:	e716      	b.n	10040344 <__divsi3>
10040516:	4770      	bx	lr

10040518 <__aeabi_idiv0>:
10040518:	4770      	bx	lr
1004051a:	46c0      	nop			@ (mov r8, r8)

1004051c <__aeabi_llsl>:
1004051c:	4091      	lsls	r1, r2
1004051e:	0003      	movs	r3, r0
10040520:	4090      	lsls	r0, r2
10040522:	469c      	mov	ip, r3
10040524:	3a20      	subs	r2, #32
10040526:	4093      	lsls	r3, r2
10040528:	4319      	orrs	r1, r3
1004052a:	4252      	negs	r2, r2
1004052c:	4663      	mov	r3, ip
1004052e:	40d3      	lsrs	r3, r2
10040530:	4319      	orrs	r1, r3
10040532:	4770      	bx	lr

10040534 <__clzsi2>:
10040534:	211c      	movs	r1, #28
10040536:	2301      	movs	r3, #1
10040538:	041b      	lsls	r3, r3, #16
1004053a:	4298      	cmp	r0, r3
1004053c:	d301      	bcc.n	10040542 <__clzsi2+0xe>
1004053e:	0c00      	lsrs	r0, r0, #16
10040540:	3910      	subs	r1, #16
10040542:	0a1b      	lsrs	r3, r3, #8
10040544:	4298      	cmp	r0, r3
10040546:	d301      	bcc.n	1004054c <__clzsi2+0x18>
10040548:	0a00      	lsrs	r0, r0, #8
1004054a:	3908      	subs	r1, #8
1004054c:	091b      	lsrs	r3, r3, #4
1004054e:	4298      	cmp	r0, r3
10040550:	d301      	bcc.n	10040556 <__clzsi2+0x22>
10040552:	0900      	lsrs	r0, r0, #4
10040554:	3904      	subs	r1, #4
10040556:	a202      	add	r2, pc, #8	@ (adr r2, 10040560 <__clzsi2+0x2c>)
10040558:	5c10      	ldrb	r0, [r2, r0]
1004055a:	1840      	adds	r0, r0, r1
1004055c:	4770      	bx	lr
1004055e:	46c0      	nop			@ (mov r8, r8)
10040560:	02020304 	.word	0x02020304
10040564:	01010101 	.word	0x01010101
	...

10040570 <__aeabi_uldivmod>:
10040570:	2b00      	cmp	r3, #0
10040572:	d111      	bne.n	10040598 <__aeabi_uldivmod+0x28>
10040574:	2a00      	cmp	r2, #0
10040576:	d10f      	bne.n	10040598 <__aeabi_uldivmod+0x28>
10040578:	2900      	cmp	r1, #0
1004057a:	d100      	bne.n	1004057e <__aeabi_uldivmod+0xe>
1004057c:	2800      	cmp	r0, #0
1004057e:	d002      	beq.n	10040586 <__aeabi_uldivmod+0x16>
10040580:	2100      	movs	r1, #0
10040582:	43c9      	mvns	r1, r1
10040584:	0008      	movs	r0, r1
10040586:	b407      	push	{r0, r1, r2}
10040588:	4802      	ldr	r0, [pc, #8]	@ (10040594 <__aeabi_uldivmod+0x24>)
1004058a:	a102      	add	r1, pc, #8	@ (adr r1, 10040594 <__aeabi_uldivmod+0x24>)
1004058c:	1840      	adds	r0, r0, r1
1004058e:	9002      	str	r0, [sp, #8]
10040590:	bd03      	pop	{r0, r1, pc}
10040592:	46c0      	nop			@ (mov r8, r8)
10040594:	ffffff85 	.word	0xffffff85
10040598:	b403      	push	{r0, r1}
1004059a:	4668      	mov	r0, sp
1004059c:	b501      	push	{r0, lr}
1004059e:	9802      	ldr	r0, [sp, #8]
100405a0:	f000 f834 	bl	1004060c <__udivmoddi4>
100405a4:	9b01      	ldr	r3, [sp, #4]
100405a6:	469e      	mov	lr, r3
100405a8:	b002      	add	sp, #8
100405aa:	bc0c      	pop	{r2, r3}
100405ac:	4770      	bx	lr
100405ae:	46c0      	nop			@ (mov r8, r8)

100405b0 <__aeabi_lmul>:
100405b0:	b5f0      	push	{r4, r5, r6, r7, lr}
100405b2:	46ce      	mov	lr, r9
100405b4:	4699      	mov	r9, r3
100405b6:	0c03      	lsrs	r3, r0, #16
100405b8:	469c      	mov	ip, r3
100405ba:	0413      	lsls	r3, r2, #16
100405bc:	4647      	mov	r7, r8
100405be:	0c1b      	lsrs	r3, r3, #16
100405c0:	001d      	movs	r5, r3
100405c2:	000e      	movs	r6, r1
100405c4:	4661      	mov	r1, ip
100405c6:	0404      	lsls	r4, r0, #16
100405c8:	0c24      	lsrs	r4, r4, #16
100405ca:	b580      	push	{r7, lr}
100405cc:	0007      	movs	r7, r0
100405ce:	0c10      	lsrs	r0, r2, #16
100405d0:	434b      	muls	r3, r1
100405d2:	4365      	muls	r5, r4
100405d4:	4341      	muls	r1, r0
100405d6:	4360      	muls	r0, r4
100405d8:	0c2c      	lsrs	r4, r5, #16
100405da:	18c0      	adds	r0, r0, r3
100405dc:	1824      	adds	r4, r4, r0
100405de:	468c      	mov	ip, r1
100405e0:	42a3      	cmp	r3, r4
100405e2:	d903      	bls.n	100405ec <__aeabi_lmul+0x3c>
100405e4:	2380      	movs	r3, #128	@ 0x80
100405e6:	025b      	lsls	r3, r3, #9
100405e8:	4698      	mov	r8, r3
100405ea:	44c4      	add	ip, r8
100405ec:	4649      	mov	r1, r9
100405ee:	4379      	muls	r1, r7
100405f0:	4356      	muls	r6, r2
100405f2:	0c23      	lsrs	r3, r4, #16
100405f4:	042d      	lsls	r5, r5, #16
100405f6:	0c2d      	lsrs	r5, r5, #16
100405f8:	1989      	adds	r1, r1, r6
100405fa:	4463      	add	r3, ip
100405fc:	0424      	lsls	r4, r4, #16
100405fe:	1960      	adds	r0, r4, r5
10040600:	18c9      	adds	r1, r1, r3
10040602:	bcc0      	pop	{r6, r7}
10040604:	46b9      	mov	r9, r7
10040606:	46b0      	mov	r8, r6
10040608:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004060a:	46c0      	nop			@ (mov r8, r8)

1004060c <__udivmoddi4>:
1004060c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004060e:	4657      	mov	r7, sl
10040610:	464e      	mov	r6, r9
10040612:	4645      	mov	r5, r8
10040614:	46de      	mov	lr, fp
10040616:	b5e0      	push	{r5, r6, r7, lr}
10040618:	0004      	movs	r4, r0
1004061a:	000d      	movs	r5, r1
1004061c:	4692      	mov	sl, r2
1004061e:	4699      	mov	r9, r3
10040620:	b083      	sub	sp, #12
10040622:	428b      	cmp	r3, r1
10040624:	d830      	bhi.n	10040688 <__udivmoddi4+0x7c>
10040626:	d02d      	beq.n	10040684 <__udivmoddi4+0x78>
10040628:	4649      	mov	r1, r9
1004062a:	4650      	mov	r0, sl
1004062c:	f000 f8ba 	bl	100407a4 <__clzdi2>
10040630:	0029      	movs	r1, r5
10040632:	0006      	movs	r6, r0
10040634:	0020      	movs	r0, r4
10040636:	f000 f8b5 	bl	100407a4 <__clzdi2>
1004063a:	1a33      	subs	r3, r6, r0
1004063c:	4698      	mov	r8, r3
1004063e:	3b20      	subs	r3, #32
10040640:	d434      	bmi.n	100406ac <__udivmoddi4+0xa0>
10040642:	469b      	mov	fp, r3
10040644:	4653      	mov	r3, sl
10040646:	465a      	mov	r2, fp
10040648:	4093      	lsls	r3, r2
1004064a:	4642      	mov	r2, r8
1004064c:	001f      	movs	r7, r3
1004064e:	4653      	mov	r3, sl
10040650:	4093      	lsls	r3, r2
10040652:	001e      	movs	r6, r3
10040654:	42af      	cmp	r7, r5
10040656:	d83b      	bhi.n	100406d0 <__udivmoddi4+0xc4>
10040658:	42af      	cmp	r7, r5
1004065a:	d100      	bne.n	1004065e <__udivmoddi4+0x52>
1004065c:	e079      	b.n	10040752 <__udivmoddi4+0x146>
1004065e:	465b      	mov	r3, fp
10040660:	1ba4      	subs	r4, r4, r6
10040662:	41bd      	sbcs	r5, r7
10040664:	2b00      	cmp	r3, #0
10040666:	da00      	bge.n	1004066a <__udivmoddi4+0x5e>
10040668:	e076      	b.n	10040758 <__udivmoddi4+0x14c>
1004066a:	2200      	movs	r2, #0
1004066c:	2300      	movs	r3, #0
1004066e:	9200      	str	r2, [sp, #0]
10040670:	9301      	str	r3, [sp, #4]
10040672:	2301      	movs	r3, #1
10040674:	465a      	mov	r2, fp
10040676:	4093      	lsls	r3, r2
10040678:	9301      	str	r3, [sp, #4]
1004067a:	2301      	movs	r3, #1
1004067c:	4642      	mov	r2, r8
1004067e:	4093      	lsls	r3, r2
10040680:	9300      	str	r3, [sp, #0]
10040682:	e029      	b.n	100406d8 <__udivmoddi4+0xcc>
10040684:	4282      	cmp	r2, r0
10040686:	d9cf      	bls.n	10040628 <__udivmoddi4+0x1c>
10040688:	2200      	movs	r2, #0
1004068a:	2300      	movs	r3, #0
1004068c:	9200      	str	r2, [sp, #0]
1004068e:	9301      	str	r3, [sp, #4]
10040690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040692:	2b00      	cmp	r3, #0
10040694:	d001      	beq.n	1004069a <__udivmoddi4+0x8e>
10040696:	601c      	str	r4, [r3, #0]
10040698:	605d      	str	r5, [r3, #4]
1004069a:	9800      	ldr	r0, [sp, #0]
1004069c:	9901      	ldr	r1, [sp, #4]
1004069e:	b003      	add	sp, #12
100406a0:	bcf0      	pop	{r4, r5, r6, r7}
100406a2:	46bb      	mov	fp, r7
100406a4:	46b2      	mov	sl, r6
100406a6:	46a9      	mov	r9, r5
100406a8:	46a0      	mov	r8, r4
100406aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
100406ac:	4642      	mov	r2, r8
100406ae:	469b      	mov	fp, r3
100406b0:	2320      	movs	r3, #32
100406b2:	1a9b      	subs	r3, r3, r2
100406b4:	4652      	mov	r2, sl
100406b6:	40da      	lsrs	r2, r3
100406b8:	4641      	mov	r1, r8
100406ba:	0013      	movs	r3, r2
100406bc:	464a      	mov	r2, r9
100406be:	408a      	lsls	r2, r1
100406c0:	0017      	movs	r7, r2
100406c2:	4642      	mov	r2, r8
100406c4:	431f      	orrs	r7, r3
100406c6:	4653      	mov	r3, sl
100406c8:	4093      	lsls	r3, r2
100406ca:	001e      	movs	r6, r3
100406cc:	42af      	cmp	r7, r5
100406ce:	d9c3      	bls.n	10040658 <__udivmoddi4+0x4c>
100406d0:	2200      	movs	r2, #0
100406d2:	2300      	movs	r3, #0
100406d4:	9200      	str	r2, [sp, #0]
100406d6:	9301      	str	r3, [sp, #4]
100406d8:	4643      	mov	r3, r8
100406da:	2b00      	cmp	r3, #0
100406dc:	d0d8      	beq.n	10040690 <__udivmoddi4+0x84>
100406de:	07fb      	lsls	r3, r7, #31
100406e0:	0872      	lsrs	r2, r6, #1
100406e2:	431a      	orrs	r2, r3
100406e4:	4646      	mov	r6, r8
100406e6:	087b      	lsrs	r3, r7, #1
100406e8:	e00e      	b.n	10040708 <__udivmoddi4+0xfc>
100406ea:	42ab      	cmp	r3, r5
100406ec:	d101      	bne.n	100406f2 <__udivmoddi4+0xe6>
100406ee:	42a2      	cmp	r2, r4
100406f0:	d80c      	bhi.n	1004070c <__udivmoddi4+0x100>
100406f2:	1aa4      	subs	r4, r4, r2
100406f4:	419d      	sbcs	r5, r3
100406f6:	2001      	movs	r0, #1
100406f8:	1924      	adds	r4, r4, r4
100406fa:	416d      	adcs	r5, r5
100406fc:	2100      	movs	r1, #0
100406fe:	3e01      	subs	r6, #1
10040700:	1824      	adds	r4, r4, r0
10040702:	414d      	adcs	r5, r1
10040704:	2e00      	cmp	r6, #0
10040706:	d006      	beq.n	10040716 <__udivmoddi4+0x10a>
10040708:	42ab      	cmp	r3, r5
1004070a:	d9ee      	bls.n	100406ea <__udivmoddi4+0xde>
1004070c:	3e01      	subs	r6, #1
1004070e:	1924      	adds	r4, r4, r4
10040710:	416d      	adcs	r5, r5
10040712:	2e00      	cmp	r6, #0
10040714:	d1f8      	bne.n	10040708 <__udivmoddi4+0xfc>
10040716:	9800      	ldr	r0, [sp, #0]
10040718:	9901      	ldr	r1, [sp, #4]
1004071a:	465b      	mov	r3, fp
1004071c:	1900      	adds	r0, r0, r4
1004071e:	4169      	adcs	r1, r5
10040720:	2b00      	cmp	r3, #0
10040722:	db24      	blt.n	1004076e <__udivmoddi4+0x162>
10040724:	002b      	movs	r3, r5
10040726:	465a      	mov	r2, fp
10040728:	4644      	mov	r4, r8
1004072a:	40d3      	lsrs	r3, r2
1004072c:	002a      	movs	r2, r5
1004072e:	40e2      	lsrs	r2, r4
10040730:	001c      	movs	r4, r3
10040732:	465b      	mov	r3, fp
10040734:	0015      	movs	r5, r2
10040736:	2b00      	cmp	r3, #0
10040738:	db2a      	blt.n	10040790 <__udivmoddi4+0x184>
1004073a:	0026      	movs	r6, r4
1004073c:	409e      	lsls	r6, r3
1004073e:	0033      	movs	r3, r6
10040740:	0026      	movs	r6, r4
10040742:	4647      	mov	r7, r8
10040744:	40be      	lsls	r6, r7
10040746:	0032      	movs	r2, r6
10040748:	1a80      	subs	r0, r0, r2
1004074a:	4199      	sbcs	r1, r3
1004074c:	9000      	str	r0, [sp, #0]
1004074e:	9101      	str	r1, [sp, #4]
10040750:	e79e      	b.n	10040690 <__udivmoddi4+0x84>
10040752:	42a3      	cmp	r3, r4
10040754:	d8bc      	bhi.n	100406d0 <__udivmoddi4+0xc4>
10040756:	e782      	b.n	1004065e <__udivmoddi4+0x52>
10040758:	4642      	mov	r2, r8
1004075a:	2320      	movs	r3, #32
1004075c:	2100      	movs	r1, #0
1004075e:	1a9b      	subs	r3, r3, r2
10040760:	2200      	movs	r2, #0
10040762:	9100      	str	r1, [sp, #0]
10040764:	9201      	str	r2, [sp, #4]
10040766:	2201      	movs	r2, #1
10040768:	40da      	lsrs	r2, r3
1004076a:	9201      	str	r2, [sp, #4]
1004076c:	e785      	b.n	1004067a <__udivmoddi4+0x6e>
1004076e:	4642      	mov	r2, r8
10040770:	2320      	movs	r3, #32
10040772:	1a9b      	subs	r3, r3, r2
10040774:	002a      	movs	r2, r5
10040776:	4646      	mov	r6, r8
10040778:	409a      	lsls	r2, r3
1004077a:	0023      	movs	r3, r4
1004077c:	40f3      	lsrs	r3, r6
1004077e:	4644      	mov	r4, r8
10040780:	4313      	orrs	r3, r2
10040782:	002a      	movs	r2, r5
10040784:	40e2      	lsrs	r2, r4
10040786:	001c      	movs	r4, r3
10040788:	465b      	mov	r3, fp
1004078a:	0015      	movs	r5, r2
1004078c:	2b00      	cmp	r3, #0
1004078e:	dad4      	bge.n	1004073a <__udivmoddi4+0x12e>
10040790:	4642      	mov	r2, r8
10040792:	002f      	movs	r7, r5
10040794:	2320      	movs	r3, #32
10040796:	0026      	movs	r6, r4
10040798:	4097      	lsls	r7, r2
1004079a:	1a9b      	subs	r3, r3, r2
1004079c:	40de      	lsrs	r6, r3
1004079e:	003b      	movs	r3, r7
100407a0:	4333      	orrs	r3, r6
100407a2:	e7cd      	b.n	10040740 <__udivmoddi4+0x134>

100407a4 <__clzdi2>:
100407a4:	b510      	push	{r4, lr}
100407a6:	2900      	cmp	r1, #0
100407a8:	d103      	bne.n	100407b2 <__clzdi2+0xe>
100407aa:	f7ff fec3 	bl	10040534 <__clzsi2>
100407ae:	3020      	adds	r0, #32
100407b0:	e002      	b.n	100407b8 <__clzdi2+0x14>
100407b2:	0008      	movs	r0, r1
100407b4:	f7ff febe 	bl	10040534 <__clzsi2>
100407b8:	bd10      	pop	{r4, pc}
100407ba:	46c0      	nop			@ (mov r8, r8)

100407bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100407bc:	b580      	push	{r7, lr}
100407be:	b082      	sub	sp, #8
100407c0:	af00      	add	r7, sp, #0
100407c2:	0002      	movs	r2, r0
100407c4:	1dfb      	adds	r3, r7, #7
100407c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100407c8:	1dfb      	adds	r3, r7, #7
100407ca:	781b      	ldrb	r3, [r3, #0]
100407cc:	2b7f      	cmp	r3, #127	@ 0x7f
100407ce:	d809      	bhi.n	100407e4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100407d0:	1dfb      	adds	r3, r7, #7
100407d2:	781b      	ldrb	r3, [r3, #0]
100407d4:	001a      	movs	r2, r3
100407d6:	231f      	movs	r3, #31
100407d8:	401a      	ands	r2, r3
100407da:	4b04      	ldr	r3, [pc, #16]	@ (100407ec <__NVIC_EnableIRQ+0x30>)
100407dc:	2101      	movs	r1, #1
100407de:	4091      	lsls	r1, r2
100407e0:	000a      	movs	r2, r1
100407e2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
100407e4:	46c0      	nop			@ (mov r8, r8)
100407e6:	46bd      	mov	sp, r7
100407e8:	b002      	add	sp, #8
100407ea:	bd80      	pop	{r7, pc}
100407ec:	e000e100 	.word	0xe000e100

100407f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100407f0:	b590      	push	{r4, r7, lr}
100407f2:	b083      	sub	sp, #12
100407f4:	af00      	add	r7, sp, #0
100407f6:	0002      	movs	r2, r0
100407f8:	6039      	str	r1, [r7, #0]
100407fa:	1dfb      	adds	r3, r7, #7
100407fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100407fe:	1dfb      	adds	r3, r7, #7
10040800:	781b      	ldrb	r3, [r3, #0]
10040802:	2b7f      	cmp	r3, #127	@ 0x7f
10040804:	d828      	bhi.n	10040858 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040806:	4a2f      	ldr	r2, [pc, #188]	@ (100408c4 <__NVIC_SetPriority+0xd4>)
10040808:	1dfb      	adds	r3, r7, #7
1004080a:	781b      	ldrb	r3, [r3, #0]
1004080c:	b25b      	sxtb	r3, r3
1004080e:	089b      	lsrs	r3, r3, #2
10040810:	33c0      	adds	r3, #192	@ 0xc0
10040812:	009b      	lsls	r3, r3, #2
10040814:	589b      	ldr	r3, [r3, r2]
10040816:	1dfa      	adds	r2, r7, #7
10040818:	7812      	ldrb	r2, [r2, #0]
1004081a:	0011      	movs	r1, r2
1004081c:	2203      	movs	r2, #3
1004081e:	400a      	ands	r2, r1
10040820:	00d2      	lsls	r2, r2, #3
10040822:	21ff      	movs	r1, #255	@ 0xff
10040824:	4091      	lsls	r1, r2
10040826:	000a      	movs	r2, r1
10040828:	43d2      	mvns	r2, r2
1004082a:	401a      	ands	r2, r3
1004082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004082e:	683b      	ldr	r3, [r7, #0]
10040830:	019b      	lsls	r3, r3, #6
10040832:	22ff      	movs	r2, #255	@ 0xff
10040834:	401a      	ands	r2, r3
10040836:	1dfb      	adds	r3, r7, #7
10040838:	781b      	ldrb	r3, [r3, #0]
1004083a:	0018      	movs	r0, r3
1004083c:	2303      	movs	r3, #3
1004083e:	4003      	ands	r3, r0
10040840:	00db      	lsls	r3, r3, #3
10040842:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040844:	481f      	ldr	r0, [pc, #124]	@ (100408c4 <__NVIC_SetPriority+0xd4>)
10040846:	1dfb      	adds	r3, r7, #7
10040848:	781b      	ldrb	r3, [r3, #0]
1004084a:	b25b      	sxtb	r3, r3
1004084c:	089b      	lsrs	r3, r3, #2
1004084e:	430a      	orrs	r2, r1
10040850:	33c0      	adds	r3, #192	@ 0xc0
10040852:	009b      	lsls	r3, r3, #2
10040854:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
10040856:	e031      	b.n	100408bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10040858:	4a1b      	ldr	r2, [pc, #108]	@ (100408c8 <__NVIC_SetPriority+0xd8>)
1004085a:	1dfb      	adds	r3, r7, #7
1004085c:	781b      	ldrb	r3, [r3, #0]
1004085e:	0019      	movs	r1, r3
10040860:	230f      	movs	r3, #15
10040862:	400b      	ands	r3, r1
10040864:	3b08      	subs	r3, #8
10040866:	089b      	lsrs	r3, r3, #2
10040868:	3306      	adds	r3, #6
1004086a:	009b      	lsls	r3, r3, #2
1004086c:	18d3      	adds	r3, r2, r3
1004086e:	3304      	adds	r3, #4
10040870:	681b      	ldr	r3, [r3, #0]
10040872:	1dfa      	adds	r2, r7, #7
10040874:	7812      	ldrb	r2, [r2, #0]
10040876:	0011      	movs	r1, r2
10040878:	2203      	movs	r2, #3
1004087a:	400a      	ands	r2, r1
1004087c:	00d2      	lsls	r2, r2, #3
1004087e:	21ff      	movs	r1, #255	@ 0xff
10040880:	4091      	lsls	r1, r2
10040882:	000a      	movs	r2, r1
10040884:	43d2      	mvns	r2, r2
10040886:	401a      	ands	r2, r3
10040888:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004088a:	683b      	ldr	r3, [r7, #0]
1004088c:	019b      	lsls	r3, r3, #6
1004088e:	22ff      	movs	r2, #255	@ 0xff
10040890:	401a      	ands	r2, r3
10040892:	1dfb      	adds	r3, r7, #7
10040894:	781b      	ldrb	r3, [r3, #0]
10040896:	0018      	movs	r0, r3
10040898:	2303      	movs	r3, #3
1004089a:	4003      	ands	r3, r0
1004089c:	00db      	lsls	r3, r3, #3
1004089e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100408a0:	4809      	ldr	r0, [pc, #36]	@ (100408c8 <__NVIC_SetPriority+0xd8>)
100408a2:	1dfb      	adds	r3, r7, #7
100408a4:	781b      	ldrb	r3, [r3, #0]
100408a6:	001c      	movs	r4, r3
100408a8:	230f      	movs	r3, #15
100408aa:	4023      	ands	r3, r4
100408ac:	3b08      	subs	r3, #8
100408ae:	089b      	lsrs	r3, r3, #2
100408b0:	430a      	orrs	r2, r1
100408b2:	3306      	adds	r3, #6
100408b4:	009b      	lsls	r3, r3, #2
100408b6:	18c3      	adds	r3, r0, r3
100408b8:	3304      	adds	r3, #4
100408ba:	601a      	str	r2, [r3, #0]
}
100408bc:	46c0      	nop			@ (mov r8, r8)
100408be:	46bd      	mov	sp, r7
100408c0:	b003      	add	sp, #12
100408c2:	bd90      	pop	{r4, r7, pc}
100408c4:	e000e100 	.word	0xe000e100
100408c8:	e000ed00 	.word	0xe000ed00

100408cc <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
100408cc:	b580      	push	{r7, lr}
100408ce:	b086      	sub	sp, #24
100408d0:	af00      	add	r7, sp, #0
100408d2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100408d4:	f3ef 8310 	mrs	r3, PRIMASK
100408d8:	60bb      	str	r3, [r7, #8]
  return(result);
100408da:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
100408dc:	617b      	str	r3, [r7, #20]
100408de:	2301      	movs	r3, #1
100408e0:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100408e2:	68fb      	ldr	r3, [r7, #12]
100408e4:	f383 8810 	msr	PRIMASK, r3
}
100408e8:	46c0      	nop			@ (mov r8, r8)
100408ea:	687b      	ldr	r3, [r7, #4]
100408ec:	681b      	ldr	r3, [r3, #0]
100408ee:	2220      	movs	r2, #32
100408f0:	431a      	orrs	r2, r3
100408f2:	687b      	ldr	r3, [r7, #4]
100408f4:	601a      	str	r2, [r3, #0]
100408f6:	697b      	ldr	r3, [r7, #20]
100408f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100408fa:	693b      	ldr	r3, [r7, #16]
100408fc:	f383 8810 	msr	PRIMASK, r3
}
10040900:	46c0      	nop			@ (mov r8, r8)
}
10040902:	46c0      	nop			@ (mov r8, r8)
10040904:	46bd      	mov	sp, r7
10040906:	b006      	add	sp, #24
10040908:	bd80      	pop	{r7, pc}

1004090a <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
1004090a:	b580      	push	{r7, lr}
1004090c:	b086      	sub	sp, #24
1004090e:	af00      	add	r7, sp, #0
10040910:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
10040912:	2000      	movs	r0, #0
10040914:	f002 f885 	bl	10042a22 <APP_DEBUG_SIGNAL_SET>
  UTIL_ADV_TRACE_SetRegion(~0x0);
#endif

  /* USER CODE BEGIN APPE_Init_1 */
#if (CFG_DEBUG_APP_TRACE != 0) && (CFG_DEBUG_APP_ADV_TRACE == 0)
  COM_InitTypeDef COM_Init =
10040918:	2108      	movs	r1, #8
1004091a:	187b      	adds	r3, r7, r1
1004091c:	22e1      	movs	r2, #225	@ 0xe1
1004091e:	0252      	lsls	r2, r2, #9
10040920:	601a      	str	r2, [r3, #0]
10040922:	187b      	adds	r3, r7, r1
10040924:	2200      	movs	r2, #0
10040926:	605a      	str	r2, [r3, #4]
10040928:	187b      	adds	r3, r7, r1
1004092a:	2200      	movs	r2, #0
1004092c:	811a      	strh	r2, [r3, #8]
1004092e:	187b      	adds	r3, r7, r1
10040930:	2200      	movs	r2, #0
10040932:	815a      	strh	r2, [r3, #10]
10040934:	187b      	adds	r3, r7, r1
10040936:	2200      	movs	r2, #0
10040938:	819a      	strh	r2, [r3, #12]
   .WordLength= COM_WORDLENGTH_8B,
   .StopBits = COM_STOPBITS_1,
   .Parity = COM_PARITY_NONE,
   .HwFlowCtl = COM_HWCONTROL_NONE
  };
  BSP_COM_Init(COM1, &COM_Init);
1004093a:	187b      	adds	r3, r7, r1
1004093c:	0019      	movs	r1, r3
1004093e:	2000      	movs	r0, #0
10040940:	f004 fdfa 	bl	10045538 <BSP_COM_Init>

#endif
  
  RxUART_Init();
10040944:	f000 f822 	bl	1004098c <RxUART_Init>
  
  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
10040948:	f002 fb6c 	bl	10043024 <HW_RNG_Init>
1004094c:	1e03      	subs	r3, r0, #0
1004094e:	d001      	beq.n	10040954 <MX_APPE_Init+0x4a>
  {
    Error_Handler();
10040950:	f000 fa99 	bl	10040e86 <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
10040954:	f002 f8ca 	bl	10042aec <HW_AES_Init>
  HW_PKA_Init();
10040958:	f002 f9de 	bl	10042d18 <HW_PKA_Init>
  APP_BLE_Init();
1004095c:	f000 fe82 	bl	10041664 <APP_BLE_Init>

#if (CFG_LPM_SUPPORTED == 1)
  /* Low Power Manager Init */
  UTIL_LPM_Init();
10040960:	f009 fd7e 	bl	1004a460 <UTIL_LPM_Init>
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
10040964:	2000      	movs	r0, #0
10040966:	f002 f866 	bl	10042a36 <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
1004096a:	2300      	movs	r3, #0
}
1004096c:	0018      	movs	r0, r3
1004096e:	46bd      	mov	sp, r7
10040970:	b006      	add	sp, #24
10040972:	bd80      	pop	{r7, pc}

10040974 <App_PowerSaveLevel_Check>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
#if (CFG_LPM_SUPPORTED == 1)
static PowerSaveLevels App_PowerSaveLevel_Check(void)
{
10040974:	b580      	push	{r7, lr}
10040976:	b082      	sub	sp, #8
10040978:	af00      	add	r7, sp, #0
  PowerSaveLevels output_level = POWER_SAVE_LEVEL_STOP;
1004097a:	1dfb      	adds	r3, r7, #7
1004097c:	2203      	movs	r2, #3
1004097e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN App_PowerSaveLevel_Check_1 */
  
  /* USER CODE END App_PowerSaveLevel_Check_1 */

  return output_level;
10040980:	1dfb      	adds	r3, r7, #7
10040982:	781b      	ldrb	r3, [r3, #0]
}
10040984:	0018      	movs	r0, r3
10040986:	46bd      	mov	sp, r7
10040988:	b002      	add	sp, #8
1004098a:	bd80      	pop	{r7, pc}

1004098c <RxUART_Init>:
#endif

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

static void RxUART_Init(void)
{
1004098c:	b580      	push	{r7, lr}
1004098e:	af00      	add	r7, sp, #0
  /* Enable the RX not empty interrupt */
  LL_USART_EnableIT_RXNE(USART1);
10040990:	4b0a      	ldr	r3, [pc, #40]	@ (100409bc <RxUART_Init+0x30>)
10040992:	0018      	movs	r0, r3
10040994:	f7ff ff9a 	bl	100408cc <LL_USART_EnableIT_RXNE_RXFNE>

  /* Enable the UART IRQ */
  NVIC_SetPriority(USART1_IRQn, IRQ_HIGH_PRIORITY);
10040998:	2101      	movs	r1, #1
1004099a:	2008      	movs	r0, #8
1004099c:	f7ff ff28 	bl	100407f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
100409a0:	2008      	movs	r0, #8
100409a2:	f7ff ff0b 	bl	100407bc <__NVIC_EnableIRQ>
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)
  setvbuf(stdout, NULL, _IONBF, 0);
100409a6:	4b06      	ldr	r3, [pc, #24]	@ (100409c0 <RxUART_Init+0x34>)
100409a8:	681b      	ldr	r3, [r3, #0]
100409aa:	6898      	ldr	r0, [r3, #8]
100409ac:	2300      	movs	r3, #0
100409ae:	2202      	movs	r2, #2
100409b0:	2100      	movs	r1, #0
100409b2:	f00e f8e1 	bl	1004eb78 <setvbuf>
#endif
}
100409b6:	46c0      	nop			@ (mov r8, r8)
100409b8:	46bd      	mov	sp, r7
100409ba:	bd80      	pop	{r7, pc}
100409bc:	41004000 	.word	0x41004000
100409c0:	20000d34 	.word	0x20000d34

100409c4 <UartRxCpltCallback>:

void UartRxCpltCallback(uint8_t * pRxDataBuff, uint16_t nDataSize)
{
100409c4:	b580      	push	{r7, lr}
100409c6:	b082      	sub	sp, #8
100409c8:	af00      	add	r7, sp, #0
100409ca:	6078      	str	r0, [r7, #4]
100409cc:	000a      	movs	r2, r1
100409ce:	1cbb      	adds	r3, r7, #2
100409d0:	801a      	strh	r2, [r3, #0]
  // Loop in case nDataSize > 1 (always 1 in current implementation).
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
100409d2:	4b15      	ldr	r3, [pc, #84]	@ (10040a28 <UartRxCpltCallback+0x64>)
100409d4:	881b      	ldrh	r3, [r3, #0]
100409d6:	2bff      	cmp	r3, #255	@ 0xff
100409d8:	d821      	bhi.n	10040a1e <UartRxCpltCallback+0x5a>
  {
    if (*pRxDataBuff == '\r')
100409da:	687b      	ldr	r3, [r7, #4]
100409dc:	781b      	ldrb	r3, [r3, #0]
100409de:	2b0d      	cmp	r3, #13
100409e0:	d112      	bne.n	10040a08 <UartRxCpltCallback+0x44>
    {
      APP_DBG_MSG("received %s\n", CommandString);
100409e2:	4a12      	ldr	r2, [pc, #72]	@ (10040a2c <UartRxCpltCallback+0x68>)
100409e4:	4b12      	ldr	r3, [pc, #72]	@ (10040a30 <UartRxCpltCallback+0x6c>)
100409e6:	0011      	movs	r1, r2
100409e8:	0018      	movs	r0, r3
100409ea:	f00e f855 	bl	1004ea98 <iprintf>

      UartCmdExecute();
100409ee:	f000 f821 	bl	10040a34 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
100409f2:	4b0d      	ldr	r3, [pc, #52]	@ (10040a28 <UartRxCpltCallback+0x64>)
100409f4:	2200      	movs	r2, #0
100409f6:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
100409f8:	2380      	movs	r3, #128	@ 0x80
100409fa:	005a      	lsls	r2, r3, #1
100409fc:	4b0b      	ldr	r3, [pc, #44]	@ (10040a2c <UartRxCpltCallback+0x68>)
100409fe:	2100      	movs	r1, #0
10040a00:	0018      	movs	r0, r3
10040a02:	f00e fa69 	bl	1004eed8 <memset>
    else
    {
      CommandString[indexReceiveChar++] = *pRxDataBuff;
    }
  }
}
10040a06:	e00a      	b.n	10040a1e <UartRxCpltCallback+0x5a>
      CommandString[indexReceiveChar++] = *pRxDataBuff;
10040a08:	4b07      	ldr	r3, [pc, #28]	@ (10040a28 <UartRxCpltCallback+0x64>)
10040a0a:	881b      	ldrh	r3, [r3, #0]
10040a0c:	1c5a      	adds	r2, r3, #1
10040a0e:	b291      	uxth	r1, r2
10040a10:	4a05      	ldr	r2, [pc, #20]	@ (10040a28 <UartRxCpltCallback+0x64>)
10040a12:	8011      	strh	r1, [r2, #0]
10040a14:	001a      	movs	r2, r3
10040a16:	687b      	ldr	r3, [r7, #4]
10040a18:	7819      	ldrb	r1, [r3, #0]
10040a1a:	4b04      	ldr	r3, [pc, #16]	@ (10040a2c <UartRxCpltCallback+0x68>)
10040a1c:	5499      	strb	r1, [r3, r2]
}
10040a1e:	46c0      	nop			@ (mov r8, r8)
10040a20:	46bd      	mov	sp, r7
10040a22:	b002      	add	sp, #8
10040a24:	bd80      	pop	{r7, pc}
10040a26:	46c0      	nop			@ (mov r8, r8)
10040a28:	20000294 	.word	0x20000294
10040a2c:	20000194 	.word	0x20000194
10040a30:	1004fa00 	.word	0x1004fa00

10040a34 <UartCmdExecute>:

static void UartCmdExecute(void)
{
10040a34:	b580      	push	{r7, lr}
10040a36:	af00      	add	r7, sp, #0

}
10040a38:	46c0      	nop			@ (mov r8, r8)
10040a3a:	46bd      	mov	sp, r7
10040a3c:	bd80      	pop	{r7, pc}

10040a3e <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10040a3e:	b580      	push	{r7, lr}
10040a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10040a42:	2301      	movs	r3, #1
10040a44:	425b      	negs	r3, r3
10040a46:	0018      	movs	r0, r3
10040a48:	f009 fdb0 	bl	1004a5ac <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10040a4c:	46c0      	nop			@ (mov r8, r8)
10040a4e:	46bd      	mov	sp, r7
10040a50:	bd80      	pop	{r7, pc}

10040a52 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10040a52:	b580      	push	{r7, lr}
10040a54:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10040a56:	46c0      	nop			@ (mov r8, r8)
}
10040a58:	46bd      	mov	sp, r7
10040a5a:	bd80      	pop	{r7, pc}

10040a5c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10040a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10040a5e:	b093      	sub	sp, #76	@ 0x4c
10040a60:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)

  /* Need to consume some CSTACK on WB05, due to bootloader CSTACK usage. */
  volatile uint32_t dummy[15];
  uint8_t i;
  for (i=0; i<10; i++)
10040a62:	2347      	movs	r3, #71	@ 0x47
10040a64:	18fb      	adds	r3, r7, r3
10040a66:	2200      	movs	r2, #0
10040a68:	701a      	strb	r2, [r3, #0]
10040a6a:	e00c      	b.n	10040a86 <UTIL_SEQ_Idle+0x2a>
  {
    dummy[i] = 0;
10040a6c:	2047      	movs	r0, #71	@ 0x47
10040a6e:	183b      	adds	r3, r7, r0
10040a70:	781a      	ldrb	r2, [r3, #0]
10040a72:	1d3b      	adds	r3, r7, #4
10040a74:	0092      	lsls	r2, r2, #2
10040a76:	2100      	movs	r1, #0
10040a78:	50d1      	str	r1, [r2, r3]
    __NOP();
10040a7a:	46c0      	nop			@ (mov r8, r8)
  for (i=0; i<10; i++)
10040a7c:	183b      	adds	r3, r7, r0
10040a7e:	781a      	ldrb	r2, [r3, #0]
10040a80:	183b      	adds	r3, r7, r0
10040a82:	3201      	adds	r2, #1
10040a84:	701a      	strb	r2, [r3, #0]
10040a86:	2347      	movs	r3, #71	@ 0x47
10040a88:	18fb      	adds	r3, r7, r3
10040a8a:	781b      	ldrb	r3, [r3, #0]
10040a8c:	2b09      	cmp	r3, #9
10040a8e:	d9ed      	bls.n	10040a6c <UTIL_SEQ_Idle+0x10>
  }

  PowerSaveLevels app_powerSave_level, vtimer_powerSave_level, final_level, pka_level;

  if ((BLE_STACK_SleepCheck() != POWER_SAVE_LEVEL_RUNNING) &&
10040a90:	f00a f9b2 	bl	1004adf8 <BLE_STACK_SleepCheck>
10040a94:	1e03      	subs	r3, r0, #0
10040a96:	d05a      	beq.n	10040b4e <UTIL_SEQ_Idle+0xf2>
      ((app_powerSave_level = App_PowerSaveLevel_Check()) != POWER_SAVE_LEVEL_RUNNING))
10040a98:	2546      	movs	r5, #70	@ 0x46
10040a9a:	197c      	adds	r4, r7, r5
10040a9c:	f7ff ff6a 	bl	10040974 <App_PowerSaveLevel_Check>
10040aa0:	0003      	movs	r3, r0
10040aa2:	7023      	strb	r3, [r4, #0]
  if ((BLE_STACK_SleepCheck() != POWER_SAVE_LEVEL_RUNNING) &&
10040aa4:	197b      	adds	r3, r7, r5
10040aa6:	781b      	ldrb	r3, [r3, #0]
10040aa8:	2b00      	cmp	r3, #0
10040aaa:	d050      	beq.n	10040b4e <UTIL_SEQ_Idle+0xf2>
  {
    vtimer_powerSave_level = HAL_RADIO_TIMER_PowerSaveLevelCheck();
10040aac:	2645      	movs	r6, #69	@ 0x45
10040aae:	19bc      	adds	r4, r7, r6
10040ab0:	f007 f844 	bl	10047b3c <HAL_RADIO_TIMER_PowerSaveLevelCheck>
10040ab4:	0003      	movs	r3, r0
10040ab6:	7023      	strb	r3, [r4, #0]
    pka_level = (PowerSaveLevels) HW_PKA_PowerSaveLevelCheck();
10040ab8:	2344      	movs	r3, #68	@ 0x44
10040aba:	18fc      	adds	r4, r7, r3
10040abc:	f002 f942 	bl	10042d44 <HW_PKA_PowerSaveLevelCheck>
10040ac0:	0003      	movs	r3, r0
10040ac2:	7023      	strb	r3, [r4, #0]
    final_level = (PowerSaveLevels)MIN(vtimer_powerSave_level, app_powerSave_level);
10040ac4:	2343      	movs	r3, #67	@ 0x43
10040ac6:	18fa      	adds	r2, r7, r3
10040ac8:	197b      	adds	r3, r7, r5
10040aca:	19b9      	adds	r1, r7, r6
10040acc:	780c      	ldrb	r4, [r1, #0]
10040ace:	781b      	ldrb	r3, [r3, #0]
10040ad0:	b2d8      	uxtb	r0, r3
10040ad2:	b2e1      	uxtb	r1, r4
10040ad4:	4288      	cmp	r0, r1
10040ad6:	d900      	bls.n	10040ada <UTIL_SEQ_Idle+0x7e>
10040ad8:	1c23      	adds	r3, r4, #0
10040ada:	7013      	strb	r3, [r2, #0]
    final_level = (PowerSaveLevels)MIN(pka_level, final_level);
10040adc:	2343      	movs	r3, #67	@ 0x43
10040ade:	18fa      	adds	r2, r7, r3
10040ae0:	18fb      	adds	r3, r7, r3
10040ae2:	2144      	movs	r1, #68	@ 0x44
10040ae4:	1879      	adds	r1, r7, r1
10040ae6:	780c      	ldrb	r4, [r1, #0]
10040ae8:	781b      	ldrb	r3, [r3, #0]
10040aea:	b2d8      	uxtb	r0, r3
10040aec:	b2e1      	uxtb	r1, r4
10040aee:	4288      	cmp	r0, r1
10040af0:	d900      	bls.n	10040af4 <UTIL_SEQ_Idle+0x98>
10040af2:	1c23      	adds	r3, r4, #0
10040af4:	7013      	strb	r3, [r2, #0]

    switch(final_level)
10040af6:	2343      	movs	r3, #67	@ 0x43
10040af8:	18fb      	adds	r3, r7, r3
10040afa:	781b      	ldrb	r3, [r3, #0]
10040afc:	2b03      	cmp	r3, #3
10040afe:	d019      	beq.n	10040b34 <UTIL_SEQ_Idle+0xd8>
10040b00:	dc21      	bgt.n	10040b46 <UTIL_SEQ_Idle+0xea>
10040b02:	2b02      	cmp	r3, #2
10040b04:	d00d      	beq.n	10040b22 <UTIL_SEQ_Idle+0xc6>
10040b06:	dc1e      	bgt.n	10040b46 <UTIL_SEQ_Idle+0xea>
10040b08:	2b00      	cmp	r3, #0
10040b0a:	d01f      	beq.n	10040b4c <UTIL_SEQ_Idle+0xf0>
10040b0c:	2b01      	cmp	r3, #1
10040b0e:	d11a      	bne.n	10040b46 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_RUNNING:
      /* Not Power Save device is busy */
      return;
      break;
    case POWER_SAVE_LEVEL_CPU_HALT:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10040b10:	2101      	movs	r1, #1
10040b12:	2001      	movs	r0, #1
10040b14:	f009 fcb4 	bl	1004a480 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10040b18:	2101      	movs	r1, #1
10040b1a:	2001      	movs	r0, #1
10040b1c:	f009 fce0 	bl	1004a4e0 <UTIL_LPM_SetOffMode>
      break;
10040b20:	e011      	b.n	10040b46 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10040b22:	2100      	movs	r1, #0
10040b24:	2001      	movs	r0, #1
10040b26:	f009 fcab 	bl	1004a480 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
10040b2a:	2101      	movs	r1, #1
10040b2c:	2001      	movs	r0, #1
10040b2e:	f009 fcd7 	bl	1004a4e0 <UTIL_LPM_SetOffMode>
      break;
10040b32:	e008      	b.n	10040b46 <UTIL_SEQ_Idle+0xea>
    case POWER_SAVE_LEVEL_STOP:
      UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10040b34:	2100      	movs	r1, #0
10040b36:	2001      	movs	r0, #1
10040b38:	f009 fca2 	bl	1004a480 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
10040b3c:	2100      	movs	r1, #0
10040b3e:	2001      	movs	r0, #1
10040b40:	f009 fcce 	bl	1004a4e0 <UTIL_LPM_SetOffMode>
      break;
10040b44:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN UTIL_SEQ_IDLE_BEGIN */

  /* USER CODE END UTIL_SEQ_IDLE_BEGIN */

    UTIL_LPM_EnterLowPower();
10040b46:	f009 fcfb 	bl	1004a540 <UTIL_LPM_EnterLowPower>
10040b4a:	e000      	b.n	10040b4e <UTIL_SEQ_Idle+0xf2>
      return;
10040b4c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10040b4e:	46bd      	mov	sp, r7
10040b50:	b013      	add	sp, #76	@ 0x4c
10040b52:	bdf0      	pop	{r4, r5, r6, r7, pc}

10040b54 <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10040b54:	b580      	push	{r7, lr}
10040b56:	b082      	sub	sp, #8
10040b58:	af00      	add	r7, sp, #0
10040b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10040b5c:	687b      	ldr	r3, [r7, #4]
10040b5e:	691b      	ldr	r3, [r3, #16]
}
10040b60:	0018      	movs	r0, r3
10040b62:	46bd      	mov	sp, r7
10040b64:	b002      	add	sp, #8
10040b66:	bd80      	pop	{r7, pc}

10040b68 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10040b68:	b580      	push	{r7, lr}
10040b6a:	b084      	sub	sp, #16
10040b6c:	af00      	add	r7, sp, #0
10040b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10040b70:	4b07      	ldr	r3, [pc, #28]	@ (10040b90 <LL_AHB1_GRP1_EnableClock+0x28>)
10040b72:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040b74:	4b06      	ldr	r3, [pc, #24]	@ (10040b90 <LL_AHB1_GRP1_EnableClock+0x28>)
10040b76:	687a      	ldr	r2, [r7, #4]
10040b78:	430a      	orrs	r2, r1
10040b7a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040b7c:	4b04      	ldr	r3, [pc, #16]	@ (10040b90 <LL_AHB1_GRP1_EnableClock+0x28>)
10040b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040b80:	687a      	ldr	r2, [r7, #4]
10040b82:	4013      	ands	r3, r2
10040b84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040b86:	68fb      	ldr	r3, [r7, #12]
}
10040b88:	46c0      	nop			@ (mov r8, r8)
10040b8a:	46bd      	mov	sp, r7
10040b8c:	b004      	add	sp, #16
10040b8e:	bd80      	pop	{r7, pc}
10040b90:	48400000 	.word	0x48400000

10040b94 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10040b94:	b580      	push	{r7, lr}
10040b96:	b084      	sub	sp, #16
10040b98:	af00      	add	r7, sp, #0
10040b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10040b9c:	4b07      	ldr	r3, [pc, #28]	@ (10040bbc <LL_APB2_GRP1_EnableClock+0x28>)
10040b9e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10040ba0:	4b06      	ldr	r3, [pc, #24]	@ (10040bbc <LL_APB2_GRP1_EnableClock+0x28>)
10040ba2:	687a      	ldr	r2, [r7, #4]
10040ba4:	430a      	orrs	r2, r1
10040ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10040ba8:	4b04      	ldr	r3, [pc, #16]	@ (10040bbc <LL_APB2_GRP1_EnableClock+0x28>)
10040baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040bac:	687a      	ldr	r2, [r7, #4]
10040bae:	4013      	ands	r3, r2
10040bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040bb2:	68fb      	ldr	r3, [r7, #12]
}
10040bb4:	46c0      	nop			@ (mov r8, r8)
10040bb6:	46bd      	mov	sp, r7
10040bb8:	b004      	add	sp, #16
10040bba:	bd80      	pop	{r7, pc}
10040bbc:	48400000 	.word	0x48400000

10040bc0 <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10040bc0:	b580      	push	{r7, lr}
10040bc2:	b082      	sub	sp, #8
10040bc4:	af00      	add	r7, sp, #0
10040bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10040bc8:	4b06      	ldr	r3, [pc, #24]	@ (10040be4 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10040bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040bcc:	687a      	ldr	r2, [r7, #4]
10040bce:	4013      	ands	r3, r2
10040bd0:	687a      	ldr	r2, [r7, #4]
10040bd2:	429a      	cmp	r2, r3
10040bd4:	d101      	bne.n	10040bda <LL_APB2_GRP1_IsEnabledClock+0x1a>
10040bd6:	2301      	movs	r3, #1
10040bd8:	e000      	b.n	10040bdc <LL_APB2_GRP1_IsEnabledClock+0x1c>
10040bda:	2300      	movs	r3, #0
}
10040bdc:	0018      	movs	r0, r3
10040bde:	46bd      	mov	sp, r7
10040be0:	b002      	add	sp, #8
10040be2:	bd80      	pop	{r7, pc}
10040be4:	48400000 	.word	0x48400000

10040be8 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10040be8:	b580      	push	{r7, lr}
10040bea:	b082      	sub	sp, #8
10040bec:	af00      	add	r7, sp, #0
10040bee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10040bf0:	4b04      	ldr	r3, [pc, #16]	@ (10040c04 <LL_APB2_GRP1_ForceReset+0x1c>)
10040bf2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10040bf4:	4b03      	ldr	r3, [pc, #12]	@ (10040c04 <LL_APB2_GRP1_ForceReset+0x1c>)
10040bf6:	687a      	ldr	r2, [r7, #4]
10040bf8:	430a      	orrs	r2, r1
10040bfa:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040bfc:	46c0      	nop			@ (mov r8, r8)
10040bfe:	46bd      	mov	sp, r7
10040c00:	b002      	add	sp, #8
10040c02:	bd80      	pop	{r7, pc}
10040c04:	48400000 	.word	0x48400000

10040c08 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10040c08:	b580      	push	{r7, lr}
10040c0a:	b082      	sub	sp, #8
10040c0c:	af00      	add	r7, sp, #0
10040c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10040c10:	4b05      	ldr	r3, [pc, #20]	@ (10040c28 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040c12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10040c14:	687b      	ldr	r3, [r7, #4]
10040c16:	43d9      	mvns	r1, r3
10040c18:	4b03      	ldr	r3, [pc, #12]	@ (10040c28 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040c1a:	400a      	ands	r2, r1
10040c1c:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040c1e:	46c0      	nop			@ (mov r8, r8)
10040c20:	46bd      	mov	sp, r7
10040c22:	b002      	add	sp, #8
10040c24:	bd80      	pop	{r7, pc}
10040c26:	46c0      	nop			@ (mov r8, r8)
10040c28:	48400000 	.word	0x48400000

10040c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10040c2c:	b580      	push	{r7, lr}
10040c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10040c30:	f004 feea 	bl	10045a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
10040c34:	f000 f812 	bl	10040c5c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
10040c38:	f000 f847 	bl	10040cca <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10040c3c:	f000 f916 	bl	10040e6c <MX_GPIO_Init>
  MX_RADIO_Init();
10040c40:	f000 f874 	bl	10040d2c <MX_RADIO_Init>
  MX_RADIO_TIMER_Init();
10040c44:	f000 f890 	bl	10040d68 <MX_RADIO_TIMER_Init>
  MX_PKA_Init();
10040c48:	f000 f85c 	bl	10040d04 <MX_PKA_Init>
  MX_USART1_UART_Init();
10040c4c:	f000 f8c0 	bl	10040dd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_BLE */
  MX_APPE_Init(NULL);
10040c50:	2000      	movs	r0, #0
10040c52:	f7ff fe5a 	bl	1004090a <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
10040c56:	f7ff fef2 	bl	10040a3e <MX_APPE_Process>
10040c5a:	e7fc      	b.n	10040c56 <main+0x2a>

10040c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10040c5c:	b590      	push	{r4, r7, lr}
10040c5e:	b089      	sub	sp, #36	@ 0x24
10040c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10040c62:	2408      	movs	r4, #8
10040c64:	193b      	adds	r3, r7, r4
10040c66:	0018      	movs	r0, r3
10040c68:	2318      	movs	r3, #24
10040c6a:	001a      	movs	r2, r3
10040c6c:	2100      	movs	r1, #0
10040c6e:	f00e f933 	bl	1004eed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10040c72:	003b      	movs	r3, r7
10040c74:	0018      	movs	r0, r3
10040c76:	2308      	movs	r3, #8
10040c78:	001a      	movs	r2, r3
10040c7a:	2100      	movs	r1, #0
10040c7c:	f00e f92c 	bl	1004eed8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
10040c80:	193b      	adds	r3, r7, r4
10040c82:	2203      	movs	r2, #3
10040c84:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10040c86:	193b      	adds	r3, r7, r4
10040c88:	2280      	movs	r2, #128	@ 0x80
10040c8a:	0252      	lsls	r2, r2, #9
10040c8c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10040c8e:	193b      	adds	r3, r7, r4
10040c90:	2210      	movs	r2, #16
10040c92:	60da      	str	r2, [r3, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10040c94:	193b      	adds	r3, r7, r4
10040c96:	0018      	movs	r0, r3
10040c98:	f008 fa42 	bl	10049120 <HAL_RCC_OscConfig>
10040c9c:	1e03      	subs	r3, r0, #0
10040c9e:	d001      	beq.n	10040ca4 <SystemClock_Config+0x48>
  {
    Error_Handler();
10040ca0:	f000 f8f1 	bl	10040e86 <Error_Handler>
  }

  /** Configure the SYSCLKSource and SYSCLKDivider
  */
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
10040ca4:	003b      	movs	r3, r7
10040ca6:	2200      	movs	r2, #0
10040ca8:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV2;
10040caa:	003b      	movs	r3, r7
10040cac:	2220      	movs	r2, #32
10040cae:	605a      	str	r2, [r3, #4]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_0) != HAL_OK)
10040cb0:	003b      	movs	r3, r7
10040cb2:	2100      	movs	r1, #0
10040cb4:	0018      	movs	r0, r3
10040cb6:	f008 fb7d 	bl	100493b4 <HAL_RCC_ClockConfig>
10040cba:	1e03      	subs	r3, r0, #0
10040cbc:	d001      	beq.n	10040cc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
10040cbe:	f000 f8e2 	bl	10040e86 <Error_Handler>
  }
}
10040cc2:	46c0      	nop			@ (mov r8, r8)
10040cc4:	46bd      	mov	sp, r7
10040cc6:	b009      	add	sp, #36	@ 0x24
10040cc8:	bd90      	pop	{r4, r7, pc}

10040cca <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
10040cca:	b580      	push	{r7, lr}
10040ccc:	b086      	sub	sp, #24
10040cce:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10040cd0:	003b      	movs	r3, r7
10040cd2:	0018      	movs	r0, r3
10040cd4:	2318      	movs	r3, #24
10040cd6:	001a      	movs	r2, r3
10040cd8:	2100      	movs	r1, #0
10040cda:	f00e f8fd 	bl	1004eed8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10040cde:	003b      	movs	r3, r7
10040ce0:	2202      	movs	r2, #2
10040ce2:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10040ce4:	003b      	movs	r3, r7
10040ce6:	2280      	movs	r2, #128	@ 0x80
10040ce8:	0152      	lsls	r2, r2, #5
10040cea:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10040cec:	003b      	movs	r3, r7
10040cee:	0018      	movs	r0, r3
10040cf0:	f008 fcf6 	bl	100496e0 <HAL_RCCEx_PeriphCLKConfig>
10040cf4:	1e03      	subs	r3, r0, #0
10040cf6:	d001      	beq.n	10040cfc <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
10040cf8:	f000 f8c5 	bl	10040e86 <Error_Handler>
  }
}
10040cfc:	46c0      	nop			@ (mov r8, r8)
10040cfe:	46bd      	mov	sp, r7
10040d00:	b006      	add	sp, #24
10040d02:	bd80      	pop	{r7, pc}

10040d04 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
10040d04:	b580      	push	{r7, lr}
10040d06:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */
  
  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10040d08:	4b06      	ldr	r3, [pc, #24]	@ (10040d24 <MX_PKA_Init+0x20>)
10040d0a:	4a07      	ldr	r2, [pc, #28]	@ (10040d28 <MX_PKA_Init+0x24>)
10040d0c:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
10040d0e:	4b05      	ldr	r3, [pc, #20]	@ (10040d24 <MX_PKA_Init+0x20>)
10040d10:	0018      	movs	r0, r3
10040d12:	f005 fafc 	bl	1004630e <HAL_PKA_Init>
10040d16:	1e03      	subs	r3, r0, #0
10040d18:	d001      	beq.n	10040d1e <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10040d1a:	f000 f8b4 	bl	10040e86 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */
  
  /* USER CODE END PKA_Init 2 */

}
10040d1e:	46c0      	nop			@ (mov r8, r8)
10040d20:	46bd      	mov	sp, r7
10040d22:	bd80      	pop	{r7, pc}
10040d24:	20000298 	.word	0x20000298
10040d28:	48300000 	.word	0x48300000

10040d2c <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10040d2c:	b580      	push	{r7, lr}
10040d2e:	b082      	sub	sp, #8
10040d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */

  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
10040d32:	2300      	movs	r3, #0
10040d34:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */

  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10040d36:	2001      	movs	r0, #1
10040d38:	f7ff ff42 	bl	10040bc0 <LL_APB2_GRP1_IsEnabledClock>
10040d3c:	1e03      	subs	r3, r0, #0
10040d3e:	d108      	bne.n	10040d52 <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10040d40:	2001      	movs	r0, #1
10040d42:	f7ff ff51 	bl	10040be8 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10040d46:	2001      	movs	r0, #1
10040d48:	f7ff ff5e 	bl	10040c08 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10040d4c:	2001      	movs	r0, #1
10040d4e:	f7ff ff21 	bl	10040b94 <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
10040d52:	23c0      	movs	r3, #192	@ 0xc0
10040d54:	05db      	lsls	r3, r3, #23
10040d56:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
10040d58:	1d3b      	adds	r3, r7, #4
10040d5a:	0018      	movs	r0, r3
10040d5c:	f005 ff82 	bl	10046c64 <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */

  /* USER CODE END RADIO_Init 2 */

}
10040d60:	46c0      	nop			@ (mov r8, r8)
10040d62:	46bd      	mov	sp, r7
10040d64:	b002      	add	sp, #8
10040d66:	bd80      	pop	{r7, pc}

10040d68 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
10040d68:	b580      	push	{r7, lr}
10040d6a:	b082      	sub	sp, #8
10040d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
  
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
10040d6e:	003b      	movs	r3, r7
10040d70:	0018      	movs	r0, r3
10040d72:	2308      	movs	r3, #8
10040d74:	001a      	movs	r2, r3
10040d76:	2100      	movs	r1, #0
10040d78:	f00e f8ae 	bl	1004eed8 <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
  
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10040d7c:	2001      	movs	r0, #1
10040d7e:	f7ff ff1f 	bl	10040bc0 <LL_APB2_GRP1_IsEnabledClock>
10040d82:	1e03      	subs	r3, r0, #0
10040d84:	d108      	bne.n	10040d98 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10040d86:	2001      	movs	r0, #1
10040d88:	f7ff ff2e 	bl	10040be8 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10040d8c:	2001      	movs	r0, #1
10040d8e:	f7ff ff3b 	bl	10040c08 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10040d92:	2001      	movs	r0, #1
10040d94:	f7ff fefe 	bl	10040b94 <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
10040d98:	46c0      	nop			@ (mov r8, r8)
10040d9a:	4b0c      	ldr	r3, [pc, #48]	@ (10040dcc <MX_RADIO_TIMER_Init+0x64>)
10040d9c:	0018      	movs	r0, r3
10040d9e:	f7ff fed9 	bl	10040b54 <LL_RADIO_TIMER_GetAbsoluteTime>
10040da2:	0003      	movs	r3, r0
10040da4:	2b0f      	cmp	r3, #15
10040da6:	d9f8      	bls.n	10040d9a <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10040da8:	003b      	movs	r3, r7
10040daa:	22a0      	movs	r2, #160	@ 0xa0
10040dac:	0052      	lsls	r2, r2, #1
10040dae:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = FALSE;
10040db0:	003b      	movs	r3, r7
10040db2:	2200      	movs	r2, #0
10040db4:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 0;
10040db6:	003b      	movs	r3, r7
10040db8:	2200      	movs	r2, #0
10040dba:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10040dbc:	003b      	movs	r3, r7
10040dbe:	0018      	movs	r0, r3
10040dc0:	f006 fc60 	bl	10047684 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */

  /* USER CODE END RADIO_TIMER_Init 2 */

}
10040dc4:	46c0      	nop			@ (mov r8, r8)
10040dc6:	46bd      	mov	sp, r7
10040dc8:	b002      	add	sp, #8
10040dca:	bd80      	pop	{r7, pc}
10040dcc:	60001800 	.word	0x60001800

10040dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
10040dd0:	b580      	push	{r7, lr}
10040dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
10040dd4:	4b23      	ldr	r3, [pc, #140]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040dd6:	4a24      	ldr	r2, [pc, #144]	@ (10040e68 <MX_USART1_UART_Init+0x98>)
10040dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
10040dda:	4b22      	ldr	r3, [pc, #136]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040ddc:	22e1      	movs	r2, #225	@ 0xe1
10040dde:	0252      	lsls	r2, r2, #9
10040de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
10040de2:	4b20      	ldr	r3, [pc, #128]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040de4:	2200      	movs	r2, #0
10040de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
10040de8:	4b1e      	ldr	r3, [pc, #120]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040dea:	2200      	movs	r2, #0
10040dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
10040dee:	4b1d      	ldr	r3, [pc, #116]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040df0:	2200      	movs	r2, #0
10040df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
10040df4:	4b1b      	ldr	r3, [pc, #108]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040df6:	220c      	movs	r2, #12
10040df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10040dfa:	4b1a      	ldr	r3, [pc, #104]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040dfc:	2200      	movs	r2, #0
10040dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
10040e00:	4b18      	ldr	r3, [pc, #96]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040e02:	2200      	movs	r2, #0
10040e04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10040e06:	4b17      	ldr	r3, [pc, #92]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040e08:	2200      	movs	r2, #0
10040e0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10040e0c:	4b15      	ldr	r3, [pc, #84]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040e0e:	2200      	movs	r2, #0
10040e10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10040e12:	4b14      	ldr	r3, [pc, #80]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040e14:	2200      	movs	r2, #0
10040e16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
10040e18:	4b12      	ldr	r3, [pc, #72]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040e1a:	0018      	movs	r0, r3
10040e1c:	f008 fd38 	bl	10049890 <HAL_UART_Init>
10040e20:	1e03      	subs	r3, r0, #0
10040e22:	d001      	beq.n	10040e28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
10040e24:	f000 f82f 	bl	10040e86 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10040e28:	4b0e      	ldr	r3, [pc, #56]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040e2a:	2100      	movs	r1, #0
10040e2c:	0018      	movs	r0, r3
10040e2e:	f009 f9ff 	bl	1004a230 <HAL_UARTEx_SetTxFifoThreshold>
10040e32:	1e03      	subs	r3, r0, #0
10040e34:	d001      	beq.n	10040e3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
10040e36:	f000 f826 	bl	10040e86 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10040e3a:	4b0a      	ldr	r3, [pc, #40]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040e3c:	2100      	movs	r1, #0
10040e3e:	0018      	movs	r0, r3
10040e40:	f009 fa36 	bl	1004a2b0 <HAL_UARTEx_SetRxFifoThreshold>
10040e44:	1e03      	subs	r3, r0, #0
10040e46:	d001      	beq.n	10040e4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
10040e48:	f000 f81d 	bl	10040e86 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
10040e4c:	4b05      	ldr	r3, [pc, #20]	@ (10040e64 <MX_USART1_UART_Init+0x94>)
10040e4e:	0018      	movs	r0, r3
10040e50:	f009 f9b4 	bl	1004a1bc <HAL_UARTEx_DisableFifoMode>
10040e54:	1e03      	subs	r3, r0, #0
10040e56:	d001      	beq.n	10040e5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
10040e58:	f000 f815 	bl	10040e86 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
10040e5c:	46c0      	nop			@ (mov r8, r8)
10040e5e:	46bd      	mov	sp, r7
10040e60:	bd80      	pop	{r7, pc}
10040e62:	46c0      	nop			@ (mov r8, r8)
10040e64:	200002a4 	.word	0x200002a4
10040e68:	41004000 	.word	0x41004000

10040e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
10040e6c:	b580      	push	{r7, lr}
10040e6e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
10040e70:	2008      	movs	r0, #8
10040e72:	f7ff fe79 	bl	10040b68 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
10040e76:	2004      	movs	r0, #4
10040e78:	f7ff fe76 	bl	10040b68 <LL_AHB1_GRP1_EnableClock>

  /*RT DEBUG GPIO_Init */
  RT_DEBUG_GPIO_Init();
10040e7c:	f001 fde5 	bl	10042a4a <RT_DEBUG_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10040e80:	46c0      	nop			@ (mov r8, r8)
10040e82:	46bd      	mov	sp, r7
10040e84:	bd80      	pop	{r7, pc}

10040e86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10040e86:	b580      	push	{r7, lr}
10040e88:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10040e8a:	b672      	cpsid	i
}
10040e8c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10040e8e:	e7fe      	b.n	10040e8e <Error_Handler+0x8>

10040e90 <LL_PWR_SetNoPullA>:
  *         @arg @ref LL_PWR_GPIO_BIT_15(*)
  *         (*) available only on STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullA(uint32_t GPIONumber)
{
10040e90:	b580      	push	{r7, lr}
10040e92:	b082      	sub	sp, #8
10040e94:	af00      	add	r7, sp, #0
10040e96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRA, GPIONumber);
10040e98:	4b08      	ldr	r3, [pc, #32]	@ (10040ebc <LL_PWR_SetNoPullA+0x2c>)
10040e9a:	6a1a      	ldr	r2, [r3, #32]
10040e9c:	687b      	ldr	r3, [r7, #4]
10040e9e:	43d9      	mvns	r1, r3
10040ea0:	4b06      	ldr	r3, [pc, #24]	@ (10040ebc <LL_PWR_SetNoPullA+0x2c>)
10040ea2:	400a      	ands	r2, r1
10040ea4:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(PWR->PDCRA, GPIONumber);
10040ea6:	4b05      	ldr	r3, [pc, #20]	@ (10040ebc <LL_PWR_SetNoPullA+0x2c>)
10040ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10040eaa:	687b      	ldr	r3, [r7, #4]
10040eac:	43d9      	mvns	r1, r3
10040eae:	4b03      	ldr	r3, [pc, #12]	@ (10040ebc <LL_PWR_SetNoPullA+0x2c>)
10040eb0:	400a      	ands	r2, r1
10040eb2:	625a      	str	r2, [r3, #36]	@ 0x24
}
10040eb4:	46c0      	nop			@ (mov r8, r8)
10040eb6:	46bd      	mov	sp, r7
10040eb8:	b002      	add	sp, #8
10040eba:	bd80      	pop	{r7, pc}
10040ebc:	48500000 	.word	0x48500000

10040ec0 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
10040ec0:	b580      	push	{r7, lr}
10040ec2:	b082      	sub	sp, #8
10040ec4:	af00      	add	r7, sp, #0
10040ec6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10040ec8:	4b08      	ldr	r3, [pc, #32]	@ (10040eec <LL_PWR_SetNoPullB+0x2c>)
10040eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10040ecc:	687b      	ldr	r3, [r7, #4]
10040ece:	43d9      	mvns	r1, r3
10040ed0:	4b06      	ldr	r3, [pc, #24]	@ (10040eec <LL_PWR_SetNoPullB+0x2c>)
10040ed2:	400a      	ands	r2, r1
10040ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10040ed6:	4b05      	ldr	r3, [pc, #20]	@ (10040eec <LL_PWR_SetNoPullB+0x2c>)
10040ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10040eda:	687b      	ldr	r3, [r7, #4]
10040edc:	43d9      	mvns	r1, r3
10040ede:	4b03      	ldr	r3, [pc, #12]	@ (10040eec <LL_PWR_SetNoPullB+0x2c>)
10040ee0:	400a      	ands	r2, r1
10040ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10040ee4:	46c0      	nop			@ (mov r8, r8)
10040ee6:	46bd      	mov	sp, r7
10040ee8:	b002      	add	sp, #8
10040eea:	bd80      	pop	{r7, pc}
10040eec:	48500000 	.word	0x48500000

10040ef0 <LL_AHB1_GRP1_EnableClock>:
{
10040ef0:	b580      	push	{r7, lr}
10040ef2:	b084      	sub	sp, #16
10040ef4:	af00      	add	r7, sp, #0
10040ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10040ef8:	4b07      	ldr	r3, [pc, #28]	@ (10040f18 <LL_AHB1_GRP1_EnableClock+0x28>)
10040efa:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10040efc:	4b06      	ldr	r3, [pc, #24]	@ (10040f18 <LL_AHB1_GRP1_EnableClock+0x28>)
10040efe:	687a      	ldr	r2, [r7, #4]
10040f00:	430a      	orrs	r2, r1
10040f02:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10040f04:	4b04      	ldr	r3, [pc, #16]	@ (10040f18 <LL_AHB1_GRP1_EnableClock+0x28>)
10040f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10040f08:	687a      	ldr	r2, [r7, #4]
10040f0a:	4013      	ands	r3, r2
10040f0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040f0e:	68fb      	ldr	r3, [r7, #12]
}
10040f10:	46c0      	nop			@ (mov r8, r8)
10040f12:	46bd      	mov	sp, r7
10040f14:	b004      	add	sp, #16
10040f16:	bd80      	pop	{r7, pc}
10040f18:	48400000 	.word	0x48400000

10040f1c <LL_APB0_GRP1_EnableClock>:
{
10040f1c:	b580      	push	{r7, lr}
10040f1e:	b084      	sub	sp, #16
10040f20:	af00      	add	r7, sp, #0
10040f22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10040f24:	4b07      	ldr	r3, [pc, #28]	@ (10040f44 <LL_APB0_GRP1_EnableClock+0x28>)
10040f26:	6d59      	ldr	r1, [r3, #84]	@ 0x54
10040f28:	4b06      	ldr	r3, [pc, #24]	@ (10040f44 <LL_APB0_GRP1_EnableClock+0x28>)
10040f2a:	687a      	ldr	r2, [r7, #4]
10040f2c:	430a      	orrs	r2, r1
10040f2e:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10040f30:	4b04      	ldr	r3, [pc, #16]	@ (10040f44 <LL_APB0_GRP1_EnableClock+0x28>)
10040f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10040f34:	687a      	ldr	r2, [r7, #4]
10040f36:	4013      	ands	r3, r2
10040f38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040f3a:	68fb      	ldr	r3, [r7, #12]
}
10040f3c:	46c0      	nop			@ (mov r8, r8)
10040f3e:	46bd      	mov	sp, r7
10040f40:	b004      	add	sp, #16
10040f42:	bd80      	pop	{r7, pc}
10040f44:	48400000 	.word	0x48400000

10040f48 <LL_APB1_GRP1_EnableClock>:
{
10040f48:	b580      	push	{r7, lr}
10040f4a:	b084      	sub	sp, #16
10040f4c:	af00      	add	r7, sp, #0
10040f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10040f50:	4b07      	ldr	r3, [pc, #28]	@ (10040f70 <LL_APB1_GRP1_EnableClock+0x28>)
10040f52:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10040f54:	4b06      	ldr	r3, [pc, #24]	@ (10040f70 <LL_APB1_GRP1_EnableClock+0x28>)
10040f56:	687a      	ldr	r2, [r7, #4]
10040f58:	430a      	orrs	r2, r1
10040f5a:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10040f5c:	4b04      	ldr	r3, [pc, #16]	@ (10040f70 <LL_APB1_GRP1_EnableClock+0x28>)
10040f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10040f60:	687a      	ldr	r2, [r7, #4]
10040f62:	4013      	ands	r3, r2
10040f64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040f66:	68fb      	ldr	r3, [r7, #12]
}
10040f68:	46c0      	nop			@ (mov r8, r8)
10040f6a:	46bd      	mov	sp, r7
10040f6c:	b004      	add	sp, #16
10040f6e:	bd80      	pop	{r7, pc}
10040f70:	48400000 	.word	0x48400000

10040f74 <LL_APB2_GRP1_EnableClock>:
{
10040f74:	b580      	push	{r7, lr}
10040f76:	b084      	sub	sp, #16
10040f78:	af00      	add	r7, sp, #0
10040f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10040f7c:	4b07      	ldr	r3, [pc, #28]	@ (10040f9c <LL_APB2_GRP1_EnableClock+0x28>)
10040f7e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10040f80:	4b06      	ldr	r3, [pc, #24]	@ (10040f9c <LL_APB2_GRP1_EnableClock+0x28>)
10040f82:	687a      	ldr	r2, [r7, #4]
10040f84:	430a      	orrs	r2, r1
10040f86:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10040f88:	4b04      	ldr	r3, [pc, #16]	@ (10040f9c <LL_APB2_GRP1_EnableClock+0x28>)
10040f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040f8c:	687a      	ldr	r2, [r7, #4]
10040f8e:	4013      	ands	r3, r2
10040f90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10040f92:	68fb      	ldr	r3, [r7, #12]
}
10040f94:	46c0      	nop			@ (mov r8, r8)
10040f96:	46bd      	mov	sp, r7
10040f98:	b004      	add	sp, #16
10040f9a:	bd80      	pop	{r7, pc}
10040f9c:	48400000 	.word	0x48400000

10040fa0 <LL_APB2_GRP1_IsEnabledClock>:
{
10040fa0:	b580      	push	{r7, lr}
10040fa2:	b082      	sub	sp, #8
10040fa4:	af00      	add	r7, sp, #0
10040fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10040fa8:	4b06      	ldr	r3, [pc, #24]	@ (10040fc4 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10040faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10040fac:	687a      	ldr	r2, [r7, #4]
10040fae:	4013      	ands	r3, r2
10040fb0:	687a      	ldr	r2, [r7, #4]
10040fb2:	429a      	cmp	r2, r3
10040fb4:	d101      	bne.n	10040fba <LL_APB2_GRP1_IsEnabledClock+0x1a>
10040fb6:	2301      	movs	r3, #1
10040fb8:	e000      	b.n	10040fbc <LL_APB2_GRP1_IsEnabledClock+0x1c>
10040fba:	2300      	movs	r3, #0
}
10040fbc:	0018      	movs	r0, r3
10040fbe:	46bd      	mov	sp, r7
10040fc0:	b002      	add	sp, #8
10040fc2:	bd80      	pop	{r7, pc}
10040fc4:	48400000 	.word	0x48400000

10040fc8 <LL_APB2_GRP1_ForceReset>:
{
10040fc8:	b580      	push	{r7, lr}
10040fca:	b082      	sub	sp, #8
10040fcc:	af00      	add	r7, sp, #0
10040fce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10040fd0:	4b04      	ldr	r3, [pc, #16]	@ (10040fe4 <LL_APB2_GRP1_ForceReset+0x1c>)
10040fd2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10040fd4:	4b03      	ldr	r3, [pc, #12]	@ (10040fe4 <LL_APB2_GRP1_ForceReset+0x1c>)
10040fd6:	687a      	ldr	r2, [r7, #4]
10040fd8:	430a      	orrs	r2, r1
10040fda:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040fdc:	46c0      	nop			@ (mov r8, r8)
10040fde:	46bd      	mov	sp, r7
10040fe0:	b002      	add	sp, #8
10040fe2:	bd80      	pop	{r7, pc}
10040fe4:	48400000 	.word	0x48400000

10040fe8 <LL_APB2_GRP1_ReleaseReset>:
{
10040fe8:	b580      	push	{r7, lr}
10040fea:	b082      	sub	sp, #8
10040fec:	af00      	add	r7, sp, #0
10040fee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10040ff0:	4b05      	ldr	r3, [pc, #20]	@ (10041008 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040ff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10040ff4:	687b      	ldr	r3, [r7, #4]
10040ff6:	43d9      	mvns	r1, r3
10040ff8:	4b03      	ldr	r3, [pc, #12]	@ (10041008 <LL_APB2_GRP1_ReleaseReset+0x20>)
10040ffa:	400a      	ands	r2, r1
10040ffc:	641a      	str	r2, [r3, #64]	@ 0x40
}
10040ffe:	46c0      	nop			@ (mov r8, r8)
10041000:	46bd      	mov	sp, r7
10041002:	b002      	add	sp, #8
10041004:	bd80      	pop	{r7, pc}
10041006:	46c0      	nop			@ (mov r8, r8)
10041008:	48400000 	.word	0x48400000

1004100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
1004100c:	b580      	push	{r7, lr}
1004100e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* IOs configuration to have the lowest power consumption in DEEPSTOP */
  lowPowerIOSetup();
10041010:	f000 f8c6 	bl	100411a0 <lowPowerIOSetup>

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10041014:	2380      	movs	r3, #128	@ 0x80
10041016:	005b      	lsls	r3, r3, #1
10041018:	0018      	movs	r0, r3
1004101a:	f7ff ff7f 	bl	10040f1c <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1004101e:	46c0      	nop			@ (mov r8, r8)
10041020:	46bd      	mov	sp, r7
10041022:	bd80      	pop	{r7, pc}

10041024 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
10041024:	b580      	push	{r7, lr}
10041026:	b082      	sub	sp, #8
10041028:	af00      	add	r7, sp, #0
1004102a:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
1004102c:	687b      	ldr	r3, [r7, #4]
1004102e:	681b      	ldr	r3, [r3, #0]
10041030:	4a09      	ldr	r2, [pc, #36]	@ (10041058 <HAL_PKA_MspInit+0x34>)
10041032:	4293      	cmp	r3, r2
10041034:	d10c      	bne.n	10041050 <HAL_PKA_MspInit+0x2c>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
10041036:	2380      	movs	r3, #128	@ 0x80
10041038:	025b      	lsls	r3, r3, #9
1004103a:	0018      	movs	r0, r3
1004103c:	f7ff ff58 	bl	10040ef0 <LL_AHB1_GRP1_EnableClock>
    /* PKA interrupt Init */
    HAL_NVIC_SetPriority(PKA_IRQn, 1, 0);
10041040:	2200      	movs	r2, #0
10041042:	2101      	movs	r1, #1
10041044:	200d      	movs	r0, #13
10041046:	f004 fe2d 	bl	10045ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PKA_IRQn);
1004104a:	200d      	movs	r0, #13
1004104c:	f004 fe3f 	bl	10045cce <HAL_NVIC_EnableIRQ>

  /* USER CODE END PKA_MspInit 1 */

  }

}
10041050:	46c0      	nop			@ (mov r8, r8)
10041052:	46bd      	mov	sp, r7
10041054:	b002      	add	sp, #8
10041056:	bd80      	pop	{r7, pc}
10041058:	48300000 	.word	0x48300000

1004105c <HAL_RADIO_MspInit>:
* This function configures the hardware resources used in this example
* @param hradio: RADIO handle pointer
* @retval None
*/
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
1004105c:	b590      	push	{r4, r7, lr}
1004105e:	b089      	sub	sp, #36	@ 0x24
10041060:	af00      	add	r7, sp, #0
10041062:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10041064:	2408      	movs	r4, #8
10041066:	193b      	adds	r3, r7, r4
10041068:	0018      	movs	r0, r3
1004106a:	2318      	movs	r3, #24
1004106c:	001a      	movs	r2, r3
1004106e:	2100      	movs	r1, #0
10041070:	f00d ff32 	bl	1004eed8 <memset>
  if(hradio->Instance==RADIO)
10041074:	687b      	ldr	r3, [r7, #4]
10041076:	681a      	ldr	r2, [r3, #0]
10041078:	23c0      	movs	r3, #192	@ 0xc0
1004107a:	05db      	lsls	r3, r3, #23
1004107c:	429a      	cmp	r2, r3
1004107e:	d12d      	bne.n	100410dc <HAL_RADIO_MspInit+0x80>

  /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10041080:	193b      	adds	r3, r7, r4
10041082:	2201      	movs	r2, #1
10041084:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
10041086:	193b      	adds	r3, r7, r4
10041088:	2204      	movs	r2, #4
1004108a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
1004108c:	193b      	adds	r3, r7, r4
1004108e:	0018      	movs	r0, r3
10041090:	f008 fb26 	bl	100496e0 <HAL_RCCEx_PeriphCLKConfig>
10041094:	1e03      	subs	r3, r0, #0
10041096:	d001      	beq.n	1004109c <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10041098:	f7ff fef5 	bl	10040e86 <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
1004109c:	2001      	movs	r0, #1
1004109e:	f7ff ff7f 	bl	10040fa0 <LL_APB2_GRP1_IsEnabledClock>
100410a2:	1e03      	subs	r3, r0, #0
100410a4:	d108      	bne.n	100410b8 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
100410a6:	2001      	movs	r0, #1
100410a8:	f7ff ff8e 	bl	10040fc8 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
100410ac:	2001      	movs	r0, #1
100410ae:	f7ff ff9b 	bl	10040fe8 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
100410b2:	2001      	movs	r0, #1
100410b4:	f7ff ff5e 	bl	10040f74 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
100410b8:	f001 fcc7 	bl	10042a4a <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
100410bc:	2200      	movs	r2, #0
100410be:	2100      	movs	r1, #0
100410c0:	2012      	movs	r0, #18
100410c2:	f004 fdef 	bl	10045ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
100410c6:	2012      	movs	r0, #18
100410c8:	f004 fe01 	bl	10045cce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
100410cc:	2200      	movs	r2, #0
100410ce:	2100      	movs	r1, #0
100410d0:	2019      	movs	r0, #25
100410d2:	f004 fde7 	bl	10045ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
100410d6:	2019      	movs	r0, #25
100410d8:	f004 fdf9 	bl	10045cce <HAL_NVIC_EnableIRQ>

  /* USER CODE END RADIO_MspInit 1 */

  }

}
100410dc:	46c0      	nop			@ (mov r8, r8)
100410de:	46bd      	mov	sp, r7
100410e0:	b009      	add	sp, #36	@ 0x24
100410e2:	bd90      	pop	{r4, r7, pc}

100410e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
100410e4:	b590      	push	{r4, r7, lr}
100410e6:	b089      	sub	sp, #36	@ 0x24
100410e8:	af00      	add	r7, sp, #0
100410ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100410ec:	240c      	movs	r4, #12
100410ee:	193b      	adds	r3, r7, r4
100410f0:	0018      	movs	r0, r3
100410f2:	2314      	movs	r3, #20
100410f4:	001a      	movs	r2, r3
100410f6:	2100      	movs	r1, #0
100410f8:	f00d feee 	bl	1004eed8 <memset>
  if(huart->Instance==USART1)
100410fc:	687b      	ldr	r3, [r7, #4]
100410fe:	681b      	ldr	r3, [r3, #0]
10041100:	4a25      	ldr	r2, [pc, #148]	@ (10041198 <HAL_UART_MspInit+0xb4>)
10041102:	4293      	cmp	r3, r2
10041104:	d144      	bne.n	10041190 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
10041106:	2380      	movs	r3, #128	@ 0x80
10041108:	00db      	lsls	r3, r3, #3
1004110a:	0018      	movs	r0, r3
1004110c:	f7ff ff1c 	bl	10040f48 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
10041110:	2008      	movs	r0, #8
10041112:	f7ff feed 	bl	10040ef0 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
10041116:	2004      	movs	r0, #4
10041118:	f7ff feea 	bl	10040ef0 <LL_AHB1_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB0     ------> USART1_RX
    PA1     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
1004111c:	193b      	adds	r3, r7, r4
1004111e:	2201      	movs	r2, #1
10041120:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10041122:	193b      	adds	r3, r7, r4
10041124:	2202      	movs	r2, #2
10041126:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10041128:	193b      	adds	r3, r7, r4
1004112a:	2200      	movs	r2, #0
1004112c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004112e:	193b      	adds	r3, r7, r4
10041130:	2200      	movs	r2, #0
10041132:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
10041134:	193b      	adds	r3, r7, r4
10041136:	2200      	movs	r2, #0
10041138:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
1004113a:	193b      	adds	r3, r7, r4
1004113c:	4a17      	ldr	r2, [pc, #92]	@ (1004119c <HAL_UART_MspInit+0xb8>)
1004113e:	0019      	movs	r1, r3
10041140:	0010      	movs	r0, r2
10041142:	f004 ff3b 	bl	10045fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
10041146:	0021      	movs	r1, r4
10041148:	187b      	adds	r3, r7, r1
1004114a:	2202      	movs	r2, #2
1004114c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004114e:	187b      	adds	r3, r7, r1
10041150:	2202      	movs	r2, #2
10041152:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10041154:	187b      	adds	r3, r7, r1
10041156:	2200      	movs	r2, #0
10041158:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004115a:	187b      	adds	r3, r7, r1
1004115c:	2200      	movs	r2, #0
1004115e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART1;
10041160:	187b      	adds	r3, r7, r1
10041162:	2202      	movs	r2, #2
10041164:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10041166:	187a      	adds	r2, r7, r1
10041168:	2390      	movs	r3, #144	@ 0x90
1004116a:	05db      	lsls	r3, r3, #23
1004116c:	0011      	movs	r1, r2
1004116e:	0018      	movs	r0, r3
10041170:	f004 ff24 	bl	10045fbc <HAL_GPIO_Init>

    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_0);
10041174:	2001      	movs	r0, #1
10041176:	f7ff fea3 	bl	10040ec0 <LL_PWR_SetNoPullB>

    LL_PWR_SetNoPullA(LL_PWR_GPIO_BIT_1);
1004117a:	2002      	movs	r0, #2
1004117c:	f7ff fe88 	bl	10040e90 <LL_PWR_SetNoPullA>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
10041180:	2200      	movs	r2, #0
10041182:	2101      	movs	r1, #1
10041184:	2008      	movs	r0, #8
10041186:	f004 fd8d 	bl	10045ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
1004118a:	2008      	movs	r0, #8
1004118c:	f004 fd9f 	bl	10045cce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
10041190:	46c0      	nop			@ (mov r8, r8)
10041192:	46bd      	mov	sp, r7
10041194:	b009      	add	sp, #36	@ 0x24
10041196:	bd90      	pop	{r4, r7, pc}
10041198:	41004000 	.word	0x41004000
1004119c:	48100000 	.word	0x48100000

100411a0 <lowPowerIOSetup>:
  * @brief  Configures the IOs pull resistors to have the optimized power consumption.
  * @param  None
  * @retval None
  */
static void lowPowerIOSetup(void)
{
100411a0:	b580      	push	{r7, lr}
100411a2:	af00      	add	r7, sp, #0
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_A, 
100411a4:	210f      	movs	r1, #15
100411a6:	2000      	movs	r0, #0
100411a8:	f005 fb42 	bl	10046830 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_0|
                       PWR_GPIO_BIT_1|
                       PWR_GPIO_BIT_2|                         
                       PWR_GPIO_BIT_3);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_A, 
100411ac:	23f0      	movs	r3, #240	@ 0xf0
100411ae:	011b      	lsls	r3, r3, #4
100411b0:	0019      	movs	r1, r3
100411b2:	2000      	movs	r0, #0
100411b4:	f005 fb76 	bl	100468a4 <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_8|
                             PWR_GPIO_BIT_9|
                             PWR_GPIO_BIT_10|
                             PWR_GPIO_BIT_11);
  
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, 
100411b8:	4b06      	ldr	r3, [pc, #24]	@ (100411d4 <lowPowerIOSetup+0x34>)
100411ba:	0019      	movs	r1, r3
100411bc:	2001      	movs	r0, #1
100411be:	f005 fb71 	bl	100468a4 <HAL_PWREx_EnableGPIOPullDown>
                             PWR_GPIO_BIT_6|
                             PWR_GPIO_BIT_7|
                             PWR_GPIO_BIT_12|
                             PWR_GPIO_BIT_13);
  
  HAL_PWREx_EnableGPIOPullUp(PWR_GPIO_B, 
100411c2:	4b05      	ldr	r3, [pc, #20]	@ (100411d8 <lowPowerIOSetup+0x38>)
100411c4:	0019      	movs	r1, r3
100411c6:	2001      	movs	r0, #1
100411c8:	f005 fb32 	bl	10046830 <HAL_PWREx_EnableGPIOPullUp>
                       PWR_GPIO_BIT_2|
                       PWR_GPIO_BIT_4|
                       PWR_GPIO_BIT_5|  
                       PWR_GPIO_BIT_14|
                       PWR_GPIO_BIT_15);
}
100411cc:	46c0      	nop			@ (mov r8, r8)
100411ce:	46bd      	mov	sp, r7
100411d0:	bd80      	pop	{r7, pc}
100411d2:	46c0      	nop			@ (mov r8, r8)
100411d4:	000030c9 	.word	0x000030c9
100411d8:	0000c036 	.word	0x0000c036

100411dc <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
100411dc:	b580      	push	{r7, lr}
100411de:	b082      	sub	sp, #8
100411e0:	af00      	add	r7, sp, #0
100411e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
100411e4:	687b      	ldr	r3, [r7, #4]
100411e6:	69db      	ldr	r3, [r3, #28]
100411e8:	2220      	movs	r2, #32
100411ea:	4013      	ands	r3, r2
100411ec:	2b20      	cmp	r3, #32
100411ee:	d101      	bne.n	100411f4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
100411f0:	2301      	movs	r3, #1
100411f2:	e000      	b.n	100411f6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
100411f4:	2300      	movs	r3, #0
}
100411f6:	0018      	movs	r0, r3
100411f8:	46bd      	mov	sp, r7
100411fa:	b002      	add	sp, #8
100411fc:	bd80      	pop	{r7, pc}

100411fe <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
100411fe:	b580      	push	{r7, lr}
10041200:	b082      	sub	sp, #8
10041202:	af00      	add	r7, sp, #0
10041204:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
10041206:	687b      	ldr	r3, [r7, #4]
10041208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004120a:	b2db      	uxtb	r3, r3
}
1004120c:	0018      	movs	r0, r3
1004120e:	46bd      	mov	sp, r7
10041210:	b002      	add	sp, #8
10041212:	bd80      	pop	{r7, pc}

10041214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10041214:	b580      	push	{r7, lr}
10041216:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10041218:	46c0      	nop			@ (mov r8, r8)
1004121a:	46bd      	mov	sp, r7
1004121c:	bd80      	pop	{r7, pc}

1004121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1004121e:	b580      	push	{r7, lr}
10041220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10041222:	e7fe      	b.n	10041222 <HardFault_Handler+0x4>

10041224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10041224:	b580      	push	{r7, lr}
10041226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10041228:	46c0      	nop			@ (mov r8, r8)
1004122a:	46bd      	mov	sp, r7
1004122c:	bd80      	pop	{r7, pc}

1004122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
1004122e:	b580      	push	{r7, lr}
10041230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10041232:	46c0      	nop			@ (mov r8, r8)
10041234:	46bd      	mov	sp, r7
10041236:	bd80      	pop	{r7, pc}

10041238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10041238:	b580      	push	{r7, lr}
1004123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
1004123c:	f004 fc44 	bl	10045ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10041240:	46c0      	nop			@ (mov r8, r8)
10041242:	46bd      	mov	sp, r7
10041244:	bd80      	pop	{r7, pc}
	...

10041248 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
10041248:	b580      	push	{r7, lr}
1004124a:	b082      	sub	sp, #8
1004124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

    uint8_t read_data; 
  
  /* If the RX FIFO is Not Empty */
  if(LL_USART_IsActiveFlag_RXNE(USART1) == 1) {
1004124e:	4b0c      	ldr	r3, [pc, #48]	@ (10041280 <USART1_IRQHandler+0x38>)
10041250:	0018      	movs	r0, r3
10041252:	f7ff ffc3 	bl	100411dc <LL_USART_IsActiveFlag_RXNE_RXFNE>
10041256:	0003      	movs	r3, r0
10041258:	2b01      	cmp	r3, #1
1004125a:	d10c      	bne.n	10041276 <USART1_IRQHandler+0x2e>
    /* Read a byte from the RX FIFO */
    read_data = LL_USART_ReceiveData8(USART1);
1004125c:	4b08      	ldr	r3, [pc, #32]	@ (10041280 <USART1_IRQHandler+0x38>)
1004125e:	0018      	movs	r0, r3
10041260:	f7ff ffcd 	bl	100411fe <LL_USART_ReceiveData8>
10041264:	0003      	movs	r3, r0
10041266:	001a      	movs	r2, r3
10041268:	1dfb      	adds	r3, r7, #7
1004126a:	701a      	strb	r2, [r3, #0]
    
    /* Send the data received to the user RX callback */
    UartRxCpltCallback(&read_data, 1);
1004126c:	1dfb      	adds	r3, r7, #7
1004126e:	2101      	movs	r1, #1
10041270:	0018      	movs	r0, r3
10041272:	f7ff fba7 	bl	100409c4 <UartRxCpltCallback>
  
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
10041276:	46c0      	nop			@ (mov r8, r8)
10041278:	46bd      	mov	sp, r7
1004127a:	b002      	add	sp, #8
1004127c:	bd80      	pop	{r7, pc}
1004127e:	46c0      	nop			@ (mov r8, r8)
10041280:	41004000 	.word	0x41004000

10041284 <PKA_IRQHandler>:

/**
  * @brief This function handles PKA global interrupt.
  */
void PKA_IRQHandler(void)
{
10041284:	b580      	push	{r7, lr}
10041286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PKA_IRQn 0 */

  /* USER CODE END PKA_IRQn 0 */
  HAL_PKA_IRQHandler(&hpka);
10041288:	4b03      	ldr	r3, [pc, #12]	@ (10041298 <PKA_IRQHandler+0x14>)
1004128a:	0018      	movs	r0, r3
1004128c:	f005 f89c 	bl	100463c8 <HAL_PKA_IRQHandler>
  /* USER CODE BEGIN PKA_IRQn 1 */

  /* USER CODE END PKA_IRQn 1 */
}
10041290:	46c0      	nop			@ (mov r8, r8)
10041292:	46bd      	mov	sp, r7
10041294:	bd80      	pop	{r7, pc}
10041296:	46c0      	nop			@ (mov r8, r8)
10041298:	20000298 	.word	0x20000298

1004129c <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004129c:	b580      	push	{r7, lr}
1004129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
100412a0:	f007 fd48 	bl	10048d34 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
100412a4:	46c0      	nop			@ (mov r8, r8)
100412a6:	46bd      	mov	sp, r7
100412a8:	bd80      	pop	{r7, pc}

100412aa <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
100412aa:	b580      	push	{r7, lr}
100412ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */
  
  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
100412ae:	f007 fd4a 	bl	10048d46 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
100412b2:	46c0      	nop			@ (mov r8, r8)
100412b4:	46bd      	mov	sp, r7
100412b6:	bd80      	pop	{r7, pc}

100412b8 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
100412b8:	b580      	push	{r7, lr}
100412ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */
  
  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
100412bc:	f006 f81a 	bl	100472f4 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */
  
  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
100412c0:	46c0      	nop			@ (mov r8, r8)
100412c2:	46bd      	mov	sp, r7
100412c4:	bd80      	pop	{r7, pc}

100412c6 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
100412c6:	b580      	push	{r7, lr}
100412c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
100412ca:	f006 f834 	bl	10047336 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
100412ce:	46c0      	nop			@ (mov r8, r8)
100412d0:	46bd      	mov	sp, r7
100412d2:	bd80      	pop	{r7, pc}

100412d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100412d4:	b580      	push	{r7, lr}
100412d6:	b086      	sub	sp, #24
100412d8:	af00      	add	r7, sp, #0
100412da:	60f8      	str	r0, [r7, #12]
100412dc:	60b9      	str	r1, [r7, #8]
100412de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100412e0:	2300      	movs	r3, #0
100412e2:	617b      	str	r3, [r7, #20]
100412e4:	e00a      	b.n	100412fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
100412e6:	e000      	b.n	100412ea <_read+0x16>
100412e8:	bf00      	nop
100412ea:	0001      	movs	r1, r0
100412ec:	68bb      	ldr	r3, [r7, #8]
100412ee:	1c5a      	adds	r2, r3, #1
100412f0:	60ba      	str	r2, [r7, #8]
100412f2:	b2ca      	uxtb	r2, r1
100412f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100412f6:	697b      	ldr	r3, [r7, #20]
100412f8:	3301      	adds	r3, #1
100412fa:	617b      	str	r3, [r7, #20]
100412fc:	697a      	ldr	r2, [r7, #20]
100412fe:	687b      	ldr	r3, [r7, #4]
10041300:	429a      	cmp	r2, r3
10041302:	dbf0      	blt.n	100412e6 <_read+0x12>
  }

  return len;
10041304:	687b      	ldr	r3, [r7, #4]
}
10041306:	0018      	movs	r0, r3
10041308:	46bd      	mov	sp, r7
1004130a:	b006      	add	sp, #24
1004130c:	bd80      	pop	{r7, pc}

1004130e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
1004130e:	b580      	push	{r7, lr}
10041310:	b086      	sub	sp, #24
10041312:	af00      	add	r7, sp, #0
10041314:	60f8      	str	r0, [r7, #12]
10041316:	60b9      	str	r1, [r7, #8]
10041318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004131a:	2300      	movs	r3, #0
1004131c:	617b      	str	r3, [r7, #20]
1004131e:	e009      	b.n	10041334 <_write+0x26>
  {
    __io_putchar(*ptr++);
10041320:	68bb      	ldr	r3, [r7, #8]
10041322:	1c5a      	adds	r2, r3, #1
10041324:	60ba      	str	r2, [r7, #8]
10041326:	781b      	ldrb	r3, [r3, #0]
10041328:	0018      	movs	r0, r3
1004132a:	f004 f945 	bl	100455b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004132e:	697b      	ldr	r3, [r7, #20]
10041330:	3301      	adds	r3, #1
10041332:	617b      	str	r3, [r7, #20]
10041334:	697a      	ldr	r2, [r7, #20]
10041336:	687b      	ldr	r3, [r7, #4]
10041338:	429a      	cmp	r2, r3
1004133a:	dbf1      	blt.n	10041320 <_write+0x12>
  }
  return len;
1004133c:	687b      	ldr	r3, [r7, #4]
}
1004133e:	0018      	movs	r0, r3
10041340:	46bd      	mov	sp, r7
10041342:	b006      	add	sp, #24
10041344:	bd80      	pop	{r7, pc}

10041346 <_close>:

int _close(int file)
{
10041346:	b580      	push	{r7, lr}
10041348:	b082      	sub	sp, #8
1004134a:	af00      	add	r7, sp, #0
1004134c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
1004134e:	2301      	movs	r3, #1
10041350:	425b      	negs	r3, r3
}
10041352:	0018      	movs	r0, r3
10041354:	46bd      	mov	sp, r7
10041356:	b002      	add	sp, #8
10041358:	bd80      	pop	{r7, pc}

1004135a <_fstat>:


int _fstat(int file, struct stat *st)
{
1004135a:	b580      	push	{r7, lr}
1004135c:	b082      	sub	sp, #8
1004135e:	af00      	add	r7, sp, #0
10041360:	6078      	str	r0, [r7, #4]
10041362:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10041364:	683b      	ldr	r3, [r7, #0]
10041366:	2280      	movs	r2, #128	@ 0x80
10041368:	0192      	lsls	r2, r2, #6
1004136a:	605a      	str	r2, [r3, #4]
  return 0;
1004136c:	2300      	movs	r3, #0
}
1004136e:	0018      	movs	r0, r3
10041370:	46bd      	mov	sp, r7
10041372:	b002      	add	sp, #8
10041374:	bd80      	pop	{r7, pc}

10041376 <_isatty>:

int _isatty(int file)
{
10041376:	b580      	push	{r7, lr}
10041378:	b082      	sub	sp, #8
1004137a:	af00      	add	r7, sp, #0
1004137c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
1004137e:	2301      	movs	r3, #1
}
10041380:	0018      	movs	r0, r3
10041382:	46bd      	mov	sp, r7
10041384:	b002      	add	sp, #8
10041386:	bd80      	pop	{r7, pc}

10041388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10041388:	b580      	push	{r7, lr}
1004138a:	b084      	sub	sp, #16
1004138c:	af00      	add	r7, sp, #0
1004138e:	60f8      	str	r0, [r7, #12]
10041390:	60b9      	str	r1, [r7, #8]
10041392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10041394:	2300      	movs	r3, #0
}
10041396:	0018      	movs	r0, r3
10041398:	46bd      	mov	sp, r7
1004139a:	b004      	add	sp, #16
1004139c:	bd80      	pop	{r7, pc}
	...

100413a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
100413a0:	b580      	push	{r7, lr}
100413a2:	b086      	sub	sp, #24
100413a4:	af00      	add	r7, sp, #0
100413a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
100413a8:	4a14      	ldr	r2, [pc, #80]	@ (100413fc <_sbrk+0x5c>)
100413aa:	4b15      	ldr	r3, [pc, #84]	@ (10041400 <_sbrk+0x60>)
100413ac:	1ad3      	subs	r3, r2, r3
100413ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
100413b0:	697b      	ldr	r3, [r7, #20]
100413b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
100413b4:	4b13      	ldr	r3, [pc, #76]	@ (10041404 <_sbrk+0x64>)
100413b6:	681b      	ldr	r3, [r3, #0]
100413b8:	2b00      	cmp	r3, #0
100413ba:	d102      	bne.n	100413c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
100413bc:	4b11      	ldr	r3, [pc, #68]	@ (10041404 <_sbrk+0x64>)
100413be:	4a12      	ldr	r2, [pc, #72]	@ (10041408 <_sbrk+0x68>)
100413c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
100413c2:	4b10      	ldr	r3, [pc, #64]	@ (10041404 <_sbrk+0x64>)
100413c4:	681a      	ldr	r2, [r3, #0]
100413c6:	687b      	ldr	r3, [r7, #4]
100413c8:	18d3      	adds	r3, r2, r3
100413ca:	693a      	ldr	r2, [r7, #16]
100413cc:	429a      	cmp	r2, r3
100413ce:	d207      	bcs.n	100413e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
100413d0:	f00d fdd8 	bl	1004ef84 <__errno>
100413d4:	0003      	movs	r3, r0
100413d6:	220c      	movs	r2, #12
100413d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100413da:	2301      	movs	r3, #1
100413dc:	425b      	negs	r3, r3
100413de:	e009      	b.n	100413f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100413e0:	4b08      	ldr	r3, [pc, #32]	@ (10041404 <_sbrk+0x64>)
100413e2:	681b      	ldr	r3, [r3, #0]
100413e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100413e6:	4b07      	ldr	r3, [pc, #28]	@ (10041404 <_sbrk+0x64>)
100413e8:	681a      	ldr	r2, [r3, #0]
100413ea:	687b      	ldr	r3, [r7, #4]
100413ec:	18d2      	adds	r2, r2, r3
100413ee:	4b05      	ldr	r3, [pc, #20]	@ (10041404 <_sbrk+0x64>)
100413f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
100413f2:	68fb      	ldr	r3, [r7, #12]
}
100413f4:	0018      	movs	r0, r3
100413f6:	46bd      	mov	sp, r7
100413f8:	b006      	add	sp, #24
100413fa:	bd80      	pop	{r7, pc}
100413fc:	20010000 	.word	0x20010000
10041400:	00000c00 	.word	0x00000c00
10041404:	20000338 	.word	0x20000338
10041408:	20002534 	.word	0x20002534

1004140c <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
1004140c:	b580      	push	{r7, lr}
1004140e:	af00      	add	r7, sp, #0
  BLENVM_Init();
10041410:	f000 fa1e 	bl	10041850 <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
10041414:	f003 fb44 	bl	10044aa0 <PKAMGR_Init>
10041418:	0003      	movs	r3, r0
1004141a:	3301      	adds	r3, #1
1004141c:	d101      	bne.n	10041422 <ModulesInit+0x16>
  {
    Error_Handler();
1004141e:	f7ff fd32 	bl	10040e86 <Error_Handler>
  }
}
10041422:	46c0      	nop			@ (mov r8, r8)
10041424:	46bd      	mov	sp, r7
10041426:	bd80      	pop	{r7, pc}

10041428 <BLE_Init>:

void BLE_Init(void)
{
10041428:	b5f0      	push	{r4, r5, r6, r7, lr}
1004142a:	b097      	sub	sp, #92	@ 0x5c
1004142c:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
1004142e:	2347      	movs	r3, #71	@ 0x47
10041430:	18fb      	adds	r3, r7, r3
10041432:	2200      	movs	r2, #0
10041434:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint8_t bd_address[6] = {0};
10041436:	233c      	movs	r3, #60	@ 0x3c
10041438:	18fb      	adds	r3, r7, r3
1004143a:	2200      	movs	r2, #0
1004143c:	601a      	str	r2, [r3, #0]
1004143e:	2200      	movs	r2, #0
10041440:	809a      	strh	r2, [r3, #4]
  uint8_t bd_address_len= 6;
10041442:	233b      	movs	r3, #59	@ 0x3b
10041444:	18fb      	adds	r3, r7, r3
10041446:	2206      	movs	r2, #6
10041448:	701a      	strb	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
1004144a:	1d3a      	adds	r2, r7, #4
1004144c:	4b51      	ldr	r3, [pc, #324]	@ (10041594 <BLE_Init+0x16c>)
1004144e:	0010      	movs	r0, r2
10041450:	0019      	movs	r1, r3
10041452:	2334      	movs	r3, #52	@ 0x34
10041454:	001a      	movs	r2, r3
10041456:	f00d fd9e 	bl	1004ef96 <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
1004145a:	2546      	movs	r5, #70	@ 0x46
1004145c:	197c      	adds	r4, r7, r5
1004145e:	1d3b      	adds	r3, r7, #4
10041460:	0018      	movs	r0, r3
10041462:	f009 fc93 	bl	1004ad8c <BLE_STACK_Init>
10041466:	0003      	movs	r3, r0
10041468:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
1004146a:	197b      	adds	r3, r7, r5
1004146c:	781b      	ldrb	r3, [r3, #0]
1004146e:	2b00      	cmp	r3, #0
10041470:	d008      	beq.n	10041484 <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
10041472:	197b      	adds	r3, r7, r5
10041474:	781a      	ldrb	r2, [r3, #0]
10041476:	4b48      	ldr	r3, [pc, #288]	@ (10041598 <BLE_Init+0x170>)
10041478:	0011      	movs	r1, r2
1004147a:	0018      	movs	r0, r3
1004147c:	f00d fb0c 	bl	1004ea98 <iprintf>
    Error_Handler();
10041480:	f7ff fd01 	bl	10040e86 <Error_Handler>
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
10041484:	2546      	movs	r5, #70	@ 0x46
10041486:	197c      	adds	r4, r7, r5
10041488:	2118      	movs	r1, #24
1004148a:	2000      	movs	r0, #0
1004148c:	f009 fb10 	bl	1004aab0 <aci_hal_set_tx_power_level>
10041490:	0003      	movs	r3, r0
10041492:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10041494:	002a      	movs	r2, r5
10041496:	18bb      	adds	r3, r7, r2
10041498:	781b      	ldrb	r3, [r3, #0]
1004149a:	2b00      	cmp	r3, #0
1004149c:	d007      	beq.n	100414ae <BLE_Init+0x86>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%02X\n", ret);
1004149e:	18bb      	adds	r3, r7, r2
100414a0:	781a      	ldrb	r2, [r3, #0]
100414a2:	4b3e      	ldr	r3, [pc, #248]	@ (1004159c <BLE_Init+0x174>)
100414a4:	0011      	movs	r1, r2
100414a6:	0018      	movs	r0, r3
100414a8:	f00d faf6 	bl	1004ea98 <iprintf>
100414ac:	e003      	b.n	100414b6 <BLE_Init+0x8e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
100414ae:	4b3c      	ldr	r3, [pc, #240]	@ (100415a0 <BLE_Init+0x178>)
100414b0:	0018      	movs	r0, r3
100414b2:	f00d fb57 	bl	1004eb64 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
100414b6:	2546      	movs	r5, #70	@ 0x46
100414b8:	197c      	adds	r4, r7, r5
100414ba:	2342      	movs	r3, #66	@ 0x42
100414bc:	18fb      	adds	r3, r7, r3
100414be:	0019      	movs	r1, r3
100414c0:	2001      	movs	r0, #1
100414c2:	f003 fb3e 	bl	10044b42 <aci_gatt_srv_profile_init>
100414c6:	0003      	movs	r3, r0
100414c8:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100414ca:	197b      	adds	r3, r7, r5
100414cc:	781b      	ldrb	r3, [r3, #0]
100414ce:	2b00      	cmp	r3, #0
100414d0:	d007      	beq.n	100414e2 <BLE_Init+0xba>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_srv_profile_init command, result: 0x%02X\n", ret);
100414d2:	197b      	adds	r3, r7, r5
100414d4:	781a      	ldrb	r2, [r3, #0]
100414d6:	4b33      	ldr	r3, [pc, #204]	@ (100415a4 <BLE_Init+0x17c>)
100414d8:	0011      	movs	r1, r2
100414da:	0018      	movs	r0, r3
100414dc:	f00d fadc 	bl	1004ea98 <iprintf>
100414e0:	e003      	b.n	100414ea <BLE_Init+0xc2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_profile_init command\n");
100414e2:	4b31      	ldr	r3, [pc, #196]	@ (100415a8 <BLE_Init+0x180>)
100414e4:	0018      	movs	r0, r3
100414e6:	f00d fb3d 	bl	1004eb64 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
100414ea:	2145      	movs	r1, #69	@ 0x45
100414ec:	187b      	adds	r3, r7, r1
100414ee:	2200      	movs	r2, #0
100414f0:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
100414f2:	187b      	adds	r3, r7, r1
100414f4:	187a      	adds	r2, r7, r1
100414f6:	7812      	ldrb	r2, [r2, #0]
100414f8:	2101      	movs	r1, #1
100414fa:	430a      	orrs	r2, r1
100414fc:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
100414fe:	2546      	movs	r5, #70	@ 0x46
10041500:	197c      	adds	r4, r7, r5
10041502:	2347      	movs	r3, #71	@ 0x47
10041504:	18fb      	adds	r3, r7, r3
10041506:	781b      	ldrb	r3, [r3, #0]
10041508:	2101      	movs	r1, #1
1004150a:	0018      	movs	r0, r3
1004150c:	f009 f9ea 	bl	1004a8e4 <aci_gap_init>
10041510:	0003      	movs	r3, r0
10041512:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10041514:	197b      	adds	r3, r7, r5
10041516:	781b      	ldrb	r3, [r3, #0]
10041518:	2b00      	cmp	r3, #0
1004151a:	d007      	beq.n	1004152c <BLE_Init+0x104>
  {
    APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%02X\n", ret);
1004151c:	197b      	adds	r3, r7, r5
1004151e:	781a      	ldrb	r2, [r3, #0]
10041520:	4b22      	ldr	r3, [pc, #136]	@ (100415ac <BLE_Init+0x184>)
10041522:	0011      	movs	r1, r2
10041524:	0018      	movs	r0, r3
10041526:	f00d fab7 	bl	1004ea98 <iprintf>
1004152a:	e003      	b.n	10041534 <BLE_Init+0x10c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
1004152c:	4b20      	ldr	r3, [pc, #128]	@ (100415b0 <BLE_Init+0x188>)
1004152e:	0018      	movs	r0, r3
10041530:	f00d fb18 	bl	1004eb64 <puts>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_STATIC_RANDOM_ADDR)
  ret = aci_hal_read_config_data(CONFIG_DATA_STORED_STATIC_RANDOM_ADDRESS,
10041534:	2346      	movs	r3, #70	@ 0x46
10041536:	18fc      	adds	r4, r7, r3
10041538:	253c      	movs	r5, #60	@ 0x3c
1004153a:	197a      	adds	r2, r7, r5
1004153c:	233b      	movs	r3, #59	@ 0x3b
1004153e:	18fb      	adds	r3, r7, r3
10041540:	0019      	movs	r1, r3
10041542:	2080      	movs	r0, #128	@ 0x80
10041544:	f009 fab0 	bl	1004aaa8 <aci_hal_read_config_data>
10041548:	0003      	movs	r3, r0
1004154a:	7023      	strb	r3, [r4, #0]
                                 &bd_address_len, bd_address);
  APP_DBG_MSG("  Static Random Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
1004154c:	0028      	movs	r0, r5
1004154e:	183b      	adds	r3, r7, r0
10041550:	795b      	ldrb	r3, [r3, #5]
10041552:	001c      	movs	r4, r3
10041554:	183b      	adds	r3, r7, r0
10041556:	791b      	ldrb	r3, [r3, #4]
10041558:	001d      	movs	r5, r3
1004155a:	183b      	adds	r3, r7, r0
1004155c:	78db      	ldrb	r3, [r3, #3]
1004155e:	001e      	movs	r6, r3
10041560:	183b      	adds	r3, r7, r0
10041562:	789b      	ldrb	r3, [r3, #2]
10041564:	001a      	movs	r2, r3
10041566:	183b      	adds	r3, r7, r0
10041568:	785b      	ldrb	r3, [r3, #1]
1004156a:	0019      	movs	r1, r3
1004156c:	183b      	adds	r3, r7, r0
1004156e:	781b      	ldrb	r3, [r3, #0]
10041570:	4810      	ldr	r0, [pc, #64]	@ (100415b4 <BLE_Init+0x18c>)
10041572:	9302      	str	r3, [sp, #8]
10041574:	9101      	str	r1, [sp, #4]
10041576:	9200      	str	r2, [sp, #0]
10041578:	0033      	movs	r3, r6
1004157a:	002a      	movs	r2, r5
1004157c:	0021      	movs	r1, r4
1004157e:	f00d fa8b 	bl	1004ea98 <iprintf>
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  APP_DBG_MSG("BLE stack initialized\r\n");
10041582:	4b0d      	ldr	r3, [pc, #52]	@ (100415b8 <BLE_Init+0x190>)
10041584:	0018      	movs	r0, r3
10041586:	f00d faed 	bl	1004eb64 <puts>
}
1004158a:	46c0      	nop			@ (mov r8, r8)
1004158c:	46bd      	mov	sp, r7
1004158e:	b013      	add	sp, #76	@ 0x4c
10041590:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041592:	46c0      	nop			@ (mov r8, r8)
10041594:	1004fbc4 	.word	0x1004fbc4
10041598:	1004fa10 	.word	0x1004fa10
1004159c:	1004fa34 	.word	0x1004fa34
100415a0:	1004fa74 	.word	0x1004fa74
100415a4:	1004faa4 	.word	0x1004faa4
100415a8:	1004fae4 	.word	0x1004fae4
100415ac:	1004fb14 	.word	0x1004fb14
100415b0:	1004fb48 	.word	0x1004fb48
100415b4:	1004fb68 	.word	0x1004fb68
100415b8:	1004fbac 	.word	0x1004fbac

100415bc <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
100415bc:	b580      	push	{r7, lr}
100415be:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
100415c0:	2101      	movs	r1, #1
100415c2:	2001      	movs	r0, #1
100415c4:	f009 f916 	bl	1004a7f4 <UTIL_SEQ_SetTask>
}
100415c8:	46c0      	nop			@ (mov r8, r8)
100415ca:	46bd      	mov	sp, r7
100415cc:	bd80      	pop	{r7, pc}

100415ce <BLEStack_Process>:
static void BLEStack_Process(void)
{
100415ce:	b580      	push	{r7, lr}
100415d0:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
100415d2:	2001      	movs	r0, #1
100415d4:	f001 fa25 	bl	10042a22 <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
100415d8:	f009 faf4 	bl	1004abc4 <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
100415dc:	2001      	movs	r0, #1
100415de:	f001 fa2a 	bl	10042a36 <APP_DEBUG_SIGNAL_RESET>
}
100415e2:	46c0      	nop			@ (mov r8, r8)
100415e4:	46bd      	mov	sp, r7
100415e6:	bd80      	pop	{r7, pc}

100415e8 <VTimer_Process>:

void VTimer_Process(void)
{
100415e8:	b580      	push	{r7, lr}
100415ea:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
100415ec:	f006 f942 	bl	10047874 <HAL_RADIO_TIMER_Tick>
}
100415f0:	46c0      	nop			@ (mov r8, r8)
100415f2:	46bd      	mov	sp, r7
100415f4:	bd80      	pop	{r7, pc}

100415f6 <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
100415f6:	b580      	push	{r7, lr}
100415f8:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
100415fa:	2100      	movs	r1, #0
100415fc:	2002      	movs	r0, #2
100415fe:	f009 f8f9 	bl	1004a7f4 <UTIL_SEQ_SetTask>
}
10041602:	46c0      	nop			@ (mov r8, r8)
10041604:	46bd      	mov	sp, r7
10041606:	bd80      	pop	{r7, pc}

10041608 <NVM_Process>:
void NVM_Process(void)
{
10041608:	b580      	push	{r7, lr}
1004160a:	af00      	add	r7, sp, #0
  NVMDB_Tick();
1004160c:	f003 f9ce 	bl	100449ac <NVMDB_Tick>
}
10041610:	46c0      	nop			@ (mov r8, r8)
10041612:	46bd      	mov	sp, r7
10041614:	bd80      	pop	{r7, pc}

10041616 <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
10041616:	b580      	push	{r7, lr}
10041618:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
1004161a:	2101      	movs	r1, #1
1004161c:	2004      	movs	r0, #4
1004161e:	f009 f8e9 	bl	1004a7f4 <UTIL_SEQ_SetTask>
}
10041622:	46c0      	nop			@ (mov r8, r8)
10041624:	46bd      	mov	sp, r7
10041626:	bd80      	pop	{r7, pc}

10041628 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10041628:	b580      	push	{r7, lr}
1004162a:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
1004162c:	f7ff ffe3 	bl	100415f6 <VTimer_Process_Schedule>
}
10041630:	46c0      	nop			@ (mov r8, r8)
10041632:	46bd      	mov	sp, r7
10041634:	bd80      	pop	{r7, pc}

10041636 <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10041636:	b580      	push	{r7, lr}
10041638:	b082      	sub	sp, #8
1004163a:	af00      	add	r7, sp, #0
1004163c:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
1004163e:	687b      	ldr	r3, [r7, #4]
10041640:	0018      	movs	r0, r3
10041642:	f00b fd43 	bl	1004d0cc <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
10041646:	f7ff ffd6 	bl	100415f6 <VTimer_Process_Schedule>
  NVM_Process_Schedule();
1004164a:	f7ff ffe4 	bl	10041616 <NVM_Process_Schedule>
}
1004164e:	46c0      	nop			@ (mov r8, r8)
10041650:	46bd      	mov	sp, r7
10041652:	b002      	add	sp, #8
10041654:	bd80      	pop	{r7, pc}

10041656 <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
10041656:	b580      	push	{r7, lr}
10041658:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
1004165a:	f7ff ffaf 	bl	100415bc <BLEStack_Process_Schedule>
}
1004165e:	46c0      	nop			@ (mov r8, r8)
10041660:	46bd      	mov	sp, r7
10041662:	bd80      	pop	{r7, pc}

10041664 <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
10041664:	b580      	push	{r7, lr}
10041666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
10041668:	4b0f      	ldr	r3, [pc, #60]	@ (100416a8 <APP_BLE_Init+0x44>)
1004166a:	001a      	movs	r2, r3
1004166c:	2100      	movs	r1, #0
1004166e:	2001      	movs	r0, #1
10041670:	f009 f89c 	bl	1004a7ac <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
10041674:	4b0d      	ldr	r3, [pc, #52]	@ (100416ac <APP_BLE_Init+0x48>)
10041676:	001a      	movs	r2, r3
10041678:	2100      	movs	r1, #0
1004167a:	2002      	movs	r0, #2
1004167c:	f009 f896 	bl	1004a7ac <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10041680:	4b0b      	ldr	r3, [pc, #44]	@ (100416b0 <APP_BLE_Init+0x4c>)
10041682:	001a      	movs	r2, r3
10041684:	2100      	movs	r1, #0
10041686:	2004      	movs	r0, #4
10041688:	f009 f890 	bl	1004a7ac <UTIL_SEQ_RegTask>
  ModulesInit();
1004168c:	f7ff febe 	bl	1004140c <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10041690:	f7ff feca 	bl	10041428 <BLE_Init>

  /* Make the device discoverable  */

  if (CFG_BEACON_TYPE & CFG_EDDYSTONE_UID_BEACON_TYPE)
  {
    APP_DBG_MSG("Eddystone UID beacon advertise\n\r");
10041694:	4b07      	ldr	r3, [pc, #28]	@ (100416b4 <APP_BLE_Init+0x50>)
10041696:	0018      	movs	r0, r3
10041698:	f00d f9fe 	bl	1004ea98 <iprintf>
    EddystoneUID_Process();
1004169c:	f000 f8d0 	bl	10041840 <EddystoneUID_Process>
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
  }
  
/* USER CODE END APP_BLE_Init_2 */
  return;
100416a0:	46c0      	nop			@ (mov r8, r8)
}
100416a2:	46bd      	mov	sp, r7
100416a4:	bd80      	pop	{r7, pc}
100416a6:	46c0      	nop			@ (mov r8, r8)
100416a8:	100415cf 	.word	0x100415cf
100416ac:	100415e9 	.word	0x100415e9
100416b0:	10041609 	.word	0x10041609
100416b4:	1004fbf8 	.word	0x1004fbf8

100416b8 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
100416b8:	b580      	push	{r7, lr}
100416ba:	b082      	sub	sp, #8
100416bc:	af00      	add	r7, sp, #0
100416be:	6078      	str	r0, [r7, #4]

}
100416c0:	46c0      	nop			@ (mov r8, r8)
100416c2:	46bd      	mov	sp, r7
100416c4:	b002      	add	sp, #8
100416c6:	bd80      	pop	{r7, pc}

100416c8 <EddystoneUID_Init>:
/* Private macros ------------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
tBleStatus EddystoneUID_Init(void)
{
100416c8:	b5b0      	push	{r4, r5, r7, lr}
100416ca:	b090      	sub	sp, #64	@ 0x40
100416cc:	af0c      	add	r7, sp, #48	@ 0x30
  tBleStatus ret = BLE_STATUS_SUCCESS;
100416ce:	230d      	movs	r3, #13
100416d0:	18fb      	adds	r3, r7, r3
100416d2:	2200      	movs	r2, #0
100416d4:	701a      	strb	r2, [r3, #0]
  uint16_t AdvertisingInterval = (ADVERTISING_INTERVAL_IN_MS * ADVERTISING_INTERVAL_INCREMENT / 10);
100416d6:	230a      	movs	r3, #10
100416d8:	18fb      	adds	r3, r7, r3
100416da:	22c8      	movs	r2, #200	@ 0xc8
100416dc:	00d2      	lsls	r2, r2, #3
100416de:	801a      	strh	r2, [r3, #0]
  Advertising_Set_Parameters_t Advertising_Set_Parameters;


  for (uint8_t i = 0 ; i< 10; i++)
100416e0:	230f      	movs	r3, #15
100416e2:	18fb      	adds	r3, r7, r3
100416e4:	2200      	movs	r2, #0
100416e6:	701a      	strb	r2, [r3, #0]
100416e8:	e00e      	b.n	10041708 <EddystoneUID_Init+0x40>
      uid_service_data[i+NAMESPACE_OFFSET] = NamespaceID[i];
100416ea:	200f      	movs	r0, #15
100416ec:	183b      	adds	r3, r7, r0
100416ee:	781a      	ldrb	r2, [r3, #0]
100416f0:	183b      	adds	r3, r7, r0
100416f2:	781b      	ldrb	r3, [r3, #0]
100416f4:	330d      	adds	r3, #13
100416f6:	494c      	ldr	r1, [pc, #304]	@ (10041828 <EddystoneUID_Init+0x160>)
100416f8:	5c89      	ldrb	r1, [r1, r2]
100416fa:	4a4c      	ldr	r2, [pc, #304]	@ (1004182c <EddystoneUID_Init+0x164>)
100416fc:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0 ; i< 10; i++)
100416fe:	183b      	adds	r3, r7, r0
10041700:	781a      	ldrb	r2, [r3, #0]
10041702:	183b      	adds	r3, r7, r0
10041704:	3201      	adds	r2, #1
10041706:	701a      	strb	r2, [r3, #0]
10041708:	230f      	movs	r3, #15
1004170a:	18fb      	adds	r3, r7, r3
1004170c:	781b      	ldrb	r3, [r3, #0]
1004170e:	2b09      	cmp	r3, #9
10041710:	d9eb      	bls.n	100416ea <EddystoneUID_Init+0x22>
  for (uint8_t i = 0 ; i< 6; i++)
10041712:	230e      	movs	r3, #14
10041714:	18fb      	adds	r3, r7, r3
10041716:	2200      	movs	r2, #0
10041718:	701a      	strb	r2, [r3, #0]
1004171a:	e00e      	b.n	1004173a <EddystoneUID_Init+0x72>
      uid_service_data[i+BEACONID_OFFSET] = BeaconID[i];
1004171c:	200e      	movs	r0, #14
1004171e:	183b      	adds	r3, r7, r0
10041720:	781a      	ldrb	r2, [r3, #0]
10041722:	183b      	adds	r3, r7, r0
10041724:	781b      	ldrb	r3, [r3, #0]
10041726:	3317      	adds	r3, #23
10041728:	4941      	ldr	r1, [pc, #260]	@ (10041830 <EddystoneUID_Init+0x168>)
1004172a:	5c89      	ldrb	r1, [r1, r2]
1004172c:	4a3f      	ldr	r2, [pc, #252]	@ (1004182c <EddystoneUID_Init+0x164>)
1004172e:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0 ; i< 6; i++)
10041730:	183b      	adds	r3, r7, r0
10041732:	781a      	ldrb	r2, [r3, #0]
10041734:	183b      	adds	r3, r7, r0
10041736:	3201      	adds	r2, #1
10041738:	701a      	strb	r2, [r3, #0]
1004173a:	230e      	movs	r3, #14
1004173c:	18fb      	adds	r3, r7, r3
1004173e:	781b      	ldrb	r3, [r3, #0]
10041740:	2b05      	cmp	r3, #5
10041742:	d9eb      	bls.n	1004171c <EddystoneUID_Init+0x54>

  /* Set advertising configuration for legacy advertising */  
  ret = aci_gap_set_advertising_configuration(ADV_UID_HANDLE, 
10041744:	210a      	movs	r1, #10
10041746:	187b      	adds	r3, r7, r1
10041748:	881a      	ldrh	r2, [r3, #0]
1004174a:	187b      	adds	r3, r7, r1
1004174c:	881b      	ldrh	r3, [r3, #0]
1004174e:	250d      	movs	r5, #13
10041750:	197c      	adds	r4, r7, r5
10041752:	2100      	movs	r1, #0
10041754:	910a      	str	r1, [sp, #40]	@ 0x28
10041756:	2100      	movs	r1, #0
10041758:	9109      	str	r1, [sp, #36]	@ 0x24
1004175a:	2101      	movs	r1, #1
1004175c:	9108      	str	r1, [sp, #32]
1004175e:	2100      	movs	r1, #0
10041760:	9107      	str	r1, [sp, #28]
10041762:	2101      	movs	r1, #1
10041764:	9106      	str	r1, [sp, #24]
10041766:	2100      	movs	r1, #0
10041768:	9105      	str	r1, [sp, #20]
1004176a:	2100      	movs	r1, #0
1004176c:	9104      	str	r1, [sp, #16]
1004176e:	2100      	movs	r1, #0
10041770:	9103      	str	r1, [sp, #12]
10041772:	2101      	movs	r1, #1
10041774:	9102      	str	r1, [sp, #8]
10041776:	2107      	movs	r1, #7
10041778:	9101      	str	r1, [sp, #4]
1004177a:	9300      	str	r3, [sp, #0]
1004177c:	0013      	movs	r3, r2
1004177e:	2210      	movs	r2, #16
10041780:	2102      	movs	r1, #2
10041782:	2000      	movs	r0, #0
10041784:	f009 f8d2 	bl	1004a92c <aci_gap_set_advertising_configuration>
10041788:	0003      	movs	r3, r0
1004178a:	7023      	strb	r3, [r4, #0]
                                              HCI_PHY_LE_1M, /* Primary advertising PHY */
                                              0, /* 0 skips */
                                              HCI_PHY_LE_1M, /* Secondary advertising PHY. Not used with legacy advertising. */
                                              0, /* SID */
                                              0 /* No scan request notifications */);
  if (ret != BLE_STATUS_SUCCESS)
1004178c:	197b      	adds	r3, r7, r5
1004178e:	781b      	ldrb	r3, [r3, #0]
10041790:	2b00      	cmp	r3, #0
10041792:	d009      	beq.n	100417a8 <EddystoneUID_Init+0xe0>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_configuration() 0x%02x\r\n", ret);
10041794:	197b      	adds	r3, r7, r5
10041796:	781a      	ldrb	r2, [r3, #0]
10041798:	4b26      	ldr	r3, [pc, #152]	@ (10041834 <EddystoneUID_Init+0x16c>)
1004179a:	0011      	movs	r1, r2
1004179c:	0018      	movs	r0, r3
1004179e:	f00d f97b 	bl	1004ea98 <iprintf>
    return ret;
100417a2:	197b      	adds	r3, r7, r5
100417a4:	781b      	ldrb	r3, [r3, #0]
100417a6:	e03b      	b.n	10041820 <EddystoneUID_Init+0x158>
  }

  ret = aci_gap_set_advertising_data(ADV_UID_HANDLE, ADV_COMPLETE_DATA, sizeof(uid_service_data), uid_service_data);
100417a8:	250d      	movs	r5, #13
100417aa:	197c      	adds	r4, r7, r5
100417ac:	4b1f      	ldr	r3, [pc, #124]	@ (1004182c <EddystoneUID_Init+0x164>)
100417ae:	221f      	movs	r2, #31
100417b0:	2103      	movs	r1, #3
100417b2:	2000      	movs	r0, #0
100417b4:	f009 f8ef 	bl	1004a996 <aci_gap_set_advertising_data>
100417b8:	0003      	movs	r3, r0
100417ba:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100417bc:	197b      	adds	r3, r7, r5
100417be:	781b      	ldrb	r3, [r3, #0]
100417c0:	2b00      	cmp	r3, #0
100417c2:	d009      	beq.n	100417d8 <EddystoneUID_Init+0x110>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_data() 0x%02x\r\n", ret);
100417c4:	197b      	adds	r3, r7, r5
100417c6:	781a      	ldrb	r2, [r3, #0]
100417c8:	4b1b      	ldr	r3, [pc, #108]	@ (10041838 <EddystoneUID_Init+0x170>)
100417ca:	0011      	movs	r1, r2
100417cc:	0018      	movs	r0, r3
100417ce:	f00d f963 	bl	1004ea98 <iprintf>
    return ret; 
100417d2:	197b      	adds	r3, r7, r5
100417d4:	781b      	ldrb	r3, [r3, #0]
100417d6:	e023      	b.n	10041820 <EddystoneUID_Init+0x158>
  }

  Advertising_Set_Parameters.Advertising_Handle = ADV_UID_HANDLE;
100417d8:	1d3b      	adds	r3, r7, #4
100417da:	2200      	movs	r2, #0
100417dc:	701a      	strb	r2, [r3, #0]
  Advertising_Set_Parameters.Duration = 0;
100417de:	1d3b      	adds	r3, r7, #4
100417e0:	2200      	movs	r2, #0
100417e2:	805a      	strh	r2, [r3, #2]
  Advertising_Set_Parameters.Max_Extended_Advertising_Events = 0;
100417e4:	1d3b      	adds	r3, r7, #4
100417e6:	2200      	movs	r2, #0
100417e8:	711a      	strb	r2, [r3, #4]
  
  /* Enable advertising */
  ret = aci_gap_set_advertising_enable(1, 1, &Advertising_Set_Parameters);
100417ea:	250d      	movs	r5, #13
100417ec:	197c      	adds	r4, r7, r5
100417ee:	1d3b      	adds	r3, r7, #4
100417f0:	001a      	movs	r2, r3
100417f2:	2101      	movs	r1, #1
100417f4:	2001      	movs	r0, #1
100417f6:	f009 f8d2 	bl	1004a99e <aci_gap_set_advertising_enable>
100417fa:	0003      	movs	r3, r0
100417fc:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100417fe:	197b      	adds	r3, r7, r5
10041800:	781b      	ldrb	r3, [r3, #0]
10041802:	2b00      	cmp	r3, #0
10041804:	d009      	beq.n	1004181a <EddystoneUID_Init+0x152>
  {
    APP_DBG_MSG("Error in aci_gap_set_advertising_enable() 0x%02x\r\n", ret);
10041806:	197b      	adds	r3, r7, r5
10041808:	781a      	ldrb	r2, [r3, #0]
1004180a:	4b0c      	ldr	r3, [pc, #48]	@ (1004183c <EddystoneUID_Init+0x174>)
1004180c:	0011      	movs	r1, r2
1004180e:	0018      	movs	r0, r3
10041810:	f00d f942 	bl	1004ea98 <iprintf>
    return ret; 
10041814:	197b      	adds	r3, r7, r5
10041816:	781b      	ldrb	r3, [r3, #0]
10041818:	e002      	b.n	10041820 <EddystoneUID_Init+0x158>
  }

  return ret;
1004181a:	230d      	movs	r3, #13
1004181c:	18fb      	adds	r3, r7, r3
1004181e:	781b      	ldrb	r3, [r3, #0]
}
10041820:	0018      	movs	r0, r3
10041822:	46bd      	mov	sp, r7
10041824:	b004      	add	sp, #16
10041826:	bdb0      	pop	{r4, r5, r7, pc}
10041828:	20000cd4 	.word	0x20000cd4
1004182c:	20000ce8 	.word	0x20000ce8
10041830:	20000ce0 	.word	0x20000ce0
10041834:	1004fc1c 	.word	0x1004fc1c
10041838:	1004fc58 	.word	0x1004fc58
1004183c:	1004fc8c 	.word	0x1004fc8c

10041840 <EddystoneUID_Process>:
  
void EddystoneUID_Process(void)
{
10041840:	b580      	push	{r7, lr}
10041842:	af00      	add	r7, sp, #0
  EddystoneUID_Init();
10041844:	f7ff ff40 	bl	100416c8 <EddystoneUID_Init>
}
10041848:	46c0      	nop			@ (mov r8, r8)
1004184a:	46bd      	mov	sp, r7
1004184c:	bd80      	pop	{r7, pc}
	...

10041850 <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
10041850:	b580      	push	{r7, lr}
10041852:	af00      	add	r7, sp, #0
  NVMDB_Init();
10041854:	f002 fe16 	bl	10044484 <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
10041858:	4b07      	ldr	r3, [pc, #28]	@ (10041878 <BLENVM_Init+0x28>)
1004185a:	0019      	movs	r1, r3
1004185c:	2000      	movs	r0, #0
1004185e:	f002 ff6f 	bl	10044740 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
10041862:	4b06      	ldr	r3, [pc, #24]	@ (1004187c <BLENVM_Init+0x2c>)
10041864:	0019      	movs	r1, r3
10041866:	2001      	movs	r0, #1
10041868:	f002 ff6a 	bl	10044740 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
1004186c:	4b04      	ldr	r3, [pc, #16]	@ (10041880 <BLENVM_Init+0x30>)
1004186e:	4a02      	ldr	r2, [pc, #8]	@ (10041878 <BLENVM_Init+0x28>)
10041870:	601a      	str	r2, [r3, #0]
}
10041872:	46c0      	nop			@ (mov r8, r8)
10041874:	46bd      	mov	sp, r7
10041876:	bd80      	pop	{r7, pc}
10041878:	2000033c 	.word	0x2000033c
1004187c:	2000034c 	.word	0x2000034c
10041880:	2000035c 	.word	0x2000035c

10041884 <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
10041884:	b5f0      	push	{r4, r5, r6, r7, lr}
10041886:	b089      	sub	sp, #36	@ 0x24
10041888:	af02      	add	r7, sp, #8
1004188a:	60b9      	str	r1, [r7, #8]
1004188c:	0011      	movs	r1, r2
1004188e:	607b      	str	r3, [r7, #4]
10041890:	240f      	movs	r4, #15
10041892:	193b      	adds	r3, r7, r4
10041894:	1c02      	adds	r2, r0, #0
10041896:	701a      	strb	r2, [r3, #0]
10041898:	230c      	movs	r3, #12
1004189a:	18fb      	adds	r3, r7, r3
1004189c:	1c0a      	adds	r2, r1, #0
1004189e:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
100418a0:	193b      	adds	r3, r7, r4
100418a2:	781b      	ldrb	r3, [r3, #0]
100418a4:	2b02      	cmp	r3, #2
100418a6:	d103      	bne.n	100418b0 <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
100418a8:	4b1a      	ldr	r3, [pc, #104]	@ (10041914 <BLEPLAT_NvmAdd+0x90>)
100418aa:	4a1b      	ldr	r2, [pc, #108]	@ (10041918 <BLEPLAT_NvmAdd+0x94>)
100418ac:	601a      	str	r2, [r3, #0]
100418ae:	e002      	b.n	100418b6 <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
100418b0:	4b18      	ldr	r3, [pc, #96]	@ (10041914 <BLEPLAT_NvmAdd+0x90>)
100418b2:	4a1a      	ldr	r2, [pc, #104]	@ (1004191c <BLEPLAT_NvmAdd+0x98>)
100418b4:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
100418b6:	4b17      	ldr	r3, [pc, #92]	@ (10041914 <BLEPLAT_NvmAdd+0x90>)
100418b8:	6818      	ldr	r0, [r3, #0]
100418ba:	2617      	movs	r6, #23
100418bc:	19bc      	adds	r4, r7, r6
100418be:	68bd      	ldr	r5, [r7, #8]
100418c0:	230c      	movs	r3, #12
100418c2:	18fb      	adds	r3, r7, r3
100418c4:	881b      	ldrh	r3, [r3, #0]
100418c6:	469c      	mov	ip, r3
100418c8:	230f      	movs	r3, #15
100418ca:	18fb      	adds	r3, r7, r3
100418cc:	7819      	ldrb	r1, [r3, #0]
100418ce:	687b      	ldr	r3, [r7, #4]
100418d0:	9301      	str	r3, [sp, #4]
100418d2:	2328      	movs	r3, #40	@ 0x28
100418d4:	2208      	movs	r2, #8
100418d6:	189b      	adds	r3, r3, r2
100418d8:	19db      	adds	r3, r3, r7
100418da:	881b      	ldrh	r3, [r3, #0]
100418dc:	9300      	str	r3, [sp, #0]
100418de:	002b      	movs	r3, r5
100418e0:	4662      	mov	r2, ip
100418e2:	f002 ffcf 	bl	10044884 <NVMDB_AppendRecord>
100418e6:	0003      	movs	r3, r0
100418e8:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
100418ea:	19bb      	adds	r3, r7, r6
100418ec:	781b      	ldrb	r3, [r3, #0]
100418ee:	2b00      	cmp	r3, #0
100418f0:	d101      	bne.n	100418f6 <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
100418f2:	2300      	movs	r3, #0
100418f4:	e009      	b.n	1004190a <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
100418f6:	2317      	movs	r3, #23
100418f8:	18fb      	adds	r3, r7, r3
100418fa:	781b      	ldrb	r3, [r3, #0]
100418fc:	2b02      	cmp	r3, #2
100418fe:	d102      	bne.n	10041906 <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
10041900:	2301      	movs	r3, #1
10041902:	425b      	negs	r3, r3
10041904:	e001      	b.n	1004190a <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
10041906:	2302      	movs	r3, #2
10041908:	425b      	negs	r3, r3
}
1004190a:	0018      	movs	r0, r3
1004190c:	46bd      	mov	sp, r7
1004190e:	b007      	add	sp, #28
10041910:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041912:	46c0      	nop			@ (mov r8, r8)
10041914:	2000035c 	.word	0x2000035c
10041918:	2000034c 	.word	0x2000034c
1004191c:	2000033c 	.word	0x2000033c

10041920 <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
10041920:	b5b0      	push	{r4, r5, r7, lr}
10041922:	b086      	sub	sp, #24
10041924:	af02      	add	r7, sp, #8
10041926:	0004      	movs	r4, r0
10041928:	0008      	movs	r0, r1
1004192a:	0011      	movs	r1, r2
1004192c:	603b      	str	r3, [r7, #0]
1004192e:	1dfb      	adds	r3, r7, #7
10041930:	1c22      	adds	r2, r4, #0
10041932:	701a      	strb	r2, [r3, #0]
10041934:	1dbb      	adds	r3, r7, #6
10041936:	1c02      	adds	r2, r0, #0
10041938:	701a      	strb	r2, [r3, #0]
1004193a:	1d3b      	adds	r3, r7, #4
1004193c:	1c0a      	adds	r2, r1, #0
1004193e:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10041940:	1dbb      	adds	r3, r7, #6
10041942:	781b      	ldrb	r3, [r3, #0]
10041944:	2b02      	cmp	r3, #2
10041946:	d107      	bne.n	10041958 <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
10041948:	4b2e      	ldr	r3, [pc, #184]	@ (10041a04 <BLEPLAT_NvmGet+0xe4>)
1004194a:	4a2f      	ldr	r2, [pc, #188]	@ (10041a08 <BLEPLAT_NvmGet+0xe8>)
1004194c:	601a      	str	r2, [r3, #0]
    db_id = 1;
1004194e:	230e      	movs	r3, #14
10041950:	18fb      	adds	r3, r7, r3
10041952:	2201      	movs	r2, #1
10041954:	701a      	strb	r2, [r3, #0]
10041956:	e006      	b.n	10041966 <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10041958:	4b2a      	ldr	r3, [pc, #168]	@ (10041a04 <BLEPLAT_NvmGet+0xe4>)
1004195a:	4a2c      	ldr	r2, [pc, #176]	@ (10041a0c <BLEPLAT_NvmGet+0xec>)
1004195c:	601a      	str	r2, [r3, #0]
    db_id = 0;
1004195e:	230e      	movs	r3, #14
10041960:	18fb      	adds	r3, r7, r3
10041962:	2200      	movs	r2, #0
10041964:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
10041966:	1dfb      	adds	r3, r7, #7
10041968:	781b      	ldrb	r3, [r3, #0]
1004196a:	2b02      	cmp	r3, #2
1004196c:	d112      	bne.n	10041994 <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
1004196e:	4b25      	ldr	r3, [pc, #148]	@ (10041a04 <BLEPLAT_NvmGet+0xe4>)
10041970:	6818      	ldr	r0, [r3, #0]
10041972:	230f      	movs	r3, #15
10041974:	18fc      	adds	r4, r7, r3
10041976:	2320      	movs	r3, #32
10041978:	18fb      	adds	r3, r7, r3
1004197a:	881d      	ldrh	r5, [r3, #0]
1004197c:	683a      	ldr	r2, [r7, #0]
1004197e:	1d3b      	adds	r3, r7, #4
10041980:	8819      	ldrh	r1, [r3, #0]
10041982:	230c      	movs	r3, #12
10041984:	18fb      	adds	r3, r7, r3
10041986:	9300      	str	r3, [sp, #0]
10041988:	002b      	movs	r3, r5
1004198a:	f002 ff47 	bl	1004481c <NVMDB_ReadCurrentRecord>
1004198e:	0003      	movs	r3, r0
10041990:	7023      	strb	r3, [r4, #0]
10041992:	e021      	b.n	100419d8 <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10041994:	1dfb      	adds	r3, r7, #7
10041996:	781b      	ldrb	r3, [r3, #0]
10041998:	2b00      	cmp	r3, #0
1004199a:	d108      	bne.n	100419ae <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
1004199c:	4b19      	ldr	r3, [pc, #100]	@ (10041a04 <BLEPLAT_NvmGet+0xe4>)
1004199e:	681a      	ldr	r2, [r3, #0]
100419a0:	230e      	movs	r3, #14
100419a2:	18fb      	adds	r3, r7, r3
100419a4:	781b      	ldrb	r3, [r3, #0]
100419a6:	0011      	movs	r1, r2
100419a8:	0018      	movs	r0, r3
100419aa:	f002 fec9 	bl	10044740 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
100419ae:	4b15      	ldr	r3, [pc, #84]	@ (10041a04 <BLEPLAT_NvmGet+0xe4>)
100419b0:	6818      	ldr	r0, [r3, #0]
100419b2:	230f      	movs	r3, #15
100419b4:	18fc      	adds	r4, r7, r3
100419b6:	683d      	ldr	r5, [r7, #0]
100419b8:	1d3b      	adds	r3, r7, #4
100419ba:	881a      	ldrh	r2, [r3, #0]
100419bc:	1dbb      	adds	r3, r7, #6
100419be:	7819      	ldrb	r1, [r3, #0]
100419c0:	230c      	movs	r3, #12
100419c2:	18fb      	adds	r3, r7, r3
100419c4:	9301      	str	r3, [sp, #4]
100419c6:	2320      	movs	r3, #32
100419c8:	18fb      	adds	r3, r7, r3
100419ca:	881b      	ldrh	r3, [r3, #0]
100419cc:	9300      	str	r3, [sp, #0]
100419ce:	002b      	movs	r3, r5
100419d0:	f002 feea 	bl	100447a8 <NVMDB_ReadNextRecord>
100419d4:	0003      	movs	r3, r0
100419d6:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
100419d8:	230f      	movs	r3, #15
100419da:	18fb      	adds	r3, r7, r3
100419dc:	781b      	ldrb	r3, [r3, #0]
100419de:	2b00      	cmp	r3, #0
100419e0:	d101      	bne.n	100419e6 <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
100419e2:	2300      	movs	r3, #0
100419e4:	e009      	b.n	100419fa <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
100419e6:	230f      	movs	r3, #15
100419e8:	18fb      	adds	r3, r7, r3
100419ea:	781b      	ldrb	r3, [r3, #0]
100419ec:	2b04      	cmp	r3, #4
100419ee:	d102      	bne.n	100419f6 <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
100419f0:	2303      	movs	r3, #3
100419f2:	425b      	negs	r3, r3
100419f4:	e001      	b.n	100419fa <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
100419f6:	2302      	movs	r3, #2
100419f8:	425b      	negs	r3, r3
}
100419fa:	0018      	movs	r0, r3
100419fc:	46bd      	mov	sp, r7
100419fe:	b004      	add	sp, #16
10041a00:	bdb0      	pop	{r4, r5, r7, pc}
10041a02:	46c0      	nop			@ (mov r8, r8)
10041a04:	2000035c 	.word	0x2000035c
10041a08:	2000034c 	.word	0x2000034c
10041a0c:	2000033c 	.word	0x2000033c

10041a10 <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
10041a10:	b580      	push	{r7, lr}
10041a12:	b084      	sub	sp, #16
10041a14:	af00      	add	r7, sp, #0
10041a16:	60f8      	str	r0, [r7, #12]
10041a18:	60b9      	str	r1, [r7, #8]
10041a1a:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10041a1c:	687a      	ldr	r2, [r7, #4]
10041a1e:	68b9      	ldr	r1, [r7, #8]
10041a20:	68fb      	ldr	r3, [r7, #12]
10041a22:	0018      	movs	r0, r3
10041a24:	f7fe fb6e 	bl	10040104 <Osal_MemCpy>
}
10041a28:	46c0      	nop			@ (mov r8, r8)
10041a2a:	46bd      	mov	sp, r7
10041a2c:	b004      	add	sp, #16
10041a2e:	bd80      	pop	{r7, pc}

10041a30 <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
10041a30:	b580      	push	{r7, lr}
10041a32:	b084      	sub	sp, #16
10041a34:	af00      	add	r7, sp, #0
10041a36:	60f8      	str	r0, [r7, #12]
10041a38:	60b9      	str	r1, [r7, #8]
10041a3a:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10041a3c:	687a      	ldr	r2, [r7, #4]
10041a3e:	68b9      	ldr	r1, [r7, #8]
10041a40:	68fb      	ldr	r3, [r7, #12]
10041a42:	0018      	movs	r0, r3
10041a44:	f00d fa48 	bl	1004eed8 <memset>
}
10041a48:	46c0      	nop			@ (mov r8, r8)
10041a4a:	46bd      	mov	sp, r7
10041a4c:	b004      	add	sp, #16
10041a4e:	bd80      	pop	{r7, pc}

10041a50 <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
10041a50:	b590      	push	{r4, r7, lr}
10041a52:	b089      	sub	sp, #36	@ 0x24
10041a54:	af00      	add	r7, sp, #0
10041a56:	60f8      	str	r0, [r7, #12]
10041a58:	60b9      	str	r1, [r7, #8]
10041a5a:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
10041a5c:	2410      	movs	r4, #16
10041a5e:	193b      	adds	r3, r7, r4
10041a60:	0018      	movs	r0, r3
10041a62:	f003 f981 	bl	10044d68 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
10041a66:	0021      	movs	r1, r4
10041a68:	187b      	adds	r3, r7, r1
10041a6a:	781a      	ldrb	r2, [r3, #0]
10041a6c:	68fb      	ldr	r3, [r7, #12]
10041a6e:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
10041a70:	187b      	adds	r3, r7, r1
10041a72:	785a      	ldrb	r2, [r3, #1]
10041a74:	68bb      	ldr	r3, [r7, #8]
10041a76:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
10041a78:	187b      	adds	r3, r7, r1
10041a7a:	789a      	ldrb	r2, [r3, #2]
10041a7c:	687b      	ldr	r3, [r7, #4]
10041a7e:	701a      	strb	r2, [r3, #0]
}
10041a80:	46c0      	nop			@ (mov r8, r8)
10041a82:	46bd      	mov	sp, r7
10041a84:	b009      	add	sp, #36	@ 0x24
10041a86:	bd90      	pop	{r4, r7, pc}

10041a88 <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
10041a88:	b580      	push	{r7, lr}
10041a8a:	b084      	sub	sp, #16
10041a8c:	af00      	add	r7, sp, #0
10041a8e:	60f8      	str	r0, [r7, #12]
10041a90:	60b9      	str	r1, [r7, #8]
10041a92:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
10041a94:	687a      	ldr	r2, [r7, #4]
10041a96:	68b9      	ldr	r1, [r7, #8]
10041a98:	68fb      	ldr	r3, [r7, #12]
10041a9a:	0018      	movs	r0, r3
10041a9c:	f001 f83a 	bl	10042b14 <HW_AES_Encrypt>
}
10041aa0:	46c0      	nop			@ (mov r8, r8)
10041aa2:	46bd      	mov	sp, r7
10041aa4:	b004      	add	sp, #16
10041aa6:	bd80      	pop	{r7, pc}

10041aa8 <BLEPLAT_RngGetRandom16>:
{
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
}

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
10041aa8:	b580      	push	{r7, lr}
10041aaa:	b082      	sub	sp, #8
10041aac:	af00      	add	r7, sp, #0
10041aae:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
10041ab0:	687b      	ldr	r3, [r7, #4]
10041ab2:	0018      	movs	r0, r3
10041ab4:	f001 faea 	bl	1004308c <HW_RNG_GetRandom16>
}
10041ab8:	46c0      	nop			@ (mov r8, r8)
10041aba:	46bd      	mov	sp, r7
10041abc:	b002      	add	sp, #8
10041abe:	bd80      	pop	{r7, pc}

10041ac0 <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
10041ac0:	b580      	push	{r7, lr}
10041ac2:	b082      	sub	sp, #8
10041ac4:	af00      	add	r7, sp, #0
10041ac6:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
10041ac8:	687b      	ldr	r3, [r7, #4]
10041aca:	0018      	movs	r0, r3
10041acc:	f001 faf8 	bl	100430c0 <HW_RNG_GetRandom32>
}
10041ad0:	46c0      	nop			@ (mov r8, r8)
10041ad2:	46bd      	mov	sp, r7
10041ad4:	b002      	add	sp, #8
10041ad6:	bd80      	pop	{r7, pc}

10041ad8 <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
10041ad8:	b580      	push	{r7, lr}
10041ada:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
10041adc:	f003 f898 	bl	10044c10 <RADIO_GetMaxPALevel>
10041ae0:	0003      	movs	r3, r0
}
10041ae2:	0018      	movs	r0, r3
10041ae4:	46bd      	mov	sp, r7
10041ae6:	bd80      	pop	{r7, pc}

10041ae8 <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
10041ae8:	b580      	push	{r7, lr}
10041aea:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
10041aec:	f003 f896 	bl	10044c1c <RADIO_GetDefaultPALevel>
10041af0:	0003      	movs	r3, r0
}
10041af2:	0018      	movs	r0, r3
10041af4:	46bd      	mov	sp, r7
10041af6:	bd80      	pop	{r7, pc}

10041af8 <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
10041af8:	b580      	push	{r7, lr}
10041afa:	b082      	sub	sp, #8
10041afc:	af00      	add	r7, sp, #0
10041afe:	0002      	movs	r2, r0
10041b00:	1dfb      	adds	r3, r7, #7
10041b02:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
10041b04:	1dfb      	adds	r3, r7, #7
10041b06:	781b      	ldrb	r3, [r3, #0]
10041b08:	0018      	movs	r0, r3
10041b0a:	f003 f88d 	bl	10044c28 <RADIO_SetHighPower>
}
10041b0e:	46c0      	nop			@ (mov r8, r8)
10041b10:	46bd      	mov	sp, r7
10041b12:	b002      	add	sp, #8
10041b14:	bd80      	pop	{r7, pc}

10041b16 <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
10041b16:	b580      	push	{r7, lr}
10041b18:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
10041b1a:	f006 f9ef 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
10041b1e:	0002      	movs	r2, r0
10041b20:	000b      	movs	r3, r1

}
10041b22:	0010      	movs	r0, r2
10041b24:	0019      	movs	r1, r3
10041b26:	46bd      	mov	sp, r7
10041b28:	bd80      	pop	{r7, pc}

10041b2a <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
10041b2a:	b580      	push	{r7, lr}
10041b2c:	b084      	sub	sp, #16
10041b2e:	af00      	add	r7, sp, #0
10041b30:	60f8      	str	r0, [r7, #12]
10041b32:	603a      	str	r2, [r7, #0]
10041b34:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
10041b36:	683a      	ldr	r2, [r7, #0]
10041b38:	687b      	ldr	r3, [r7, #4]
10041b3a:	68f9      	ldr	r1, [r7, #12]
10041b3c:	0008      	movs	r0, r1
10041b3e:	f006 f9ef 	bl	10047f20 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
10041b42:	0003      	movs	r3, r0
}
10041b44:	0018      	movs	r0, r3
10041b46:	46bd      	mov	sp, r7
10041b48:	b004      	add	sp, #16
10041b4a:	bd80      	pop	{r7, pc}

10041b4c <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10041b4c:	b580      	push	{r7, lr}
10041b4e:	b082      	sub	sp, #8
10041b50:	af00      	add	r7, sp, #0
10041b52:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
10041b54:	687b      	ldr	r3, [r7, #4]
10041b56:	0018      	movs	r0, r3
10041b58:	f006 f9fc 	bl	10047f54 <HAL_RADIO_TIMER_StopVirtualTimer>
}
10041b5c:	46c0      	nop			@ (mov r8, r8)
10041b5e:	46bd      	mov	sp, r7
10041b60:	b002      	add	sp, #8
10041b62:	bd80      	pop	{r7, pc}

10041b64 <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
10041b64:	b580      	push	{r7, lr}
10041b66:	b082      	sub	sp, #8
10041b68:	af00      	add	r7, sp, #0
10041b6a:	6078      	str	r0, [r7, #4]
10041b6c:	0008      	movs	r0, r1
10041b6e:	0011      	movs	r1, r2
10041b70:	1cfb      	adds	r3, r7, #3
10041b72:	1c02      	adds	r2, r0, #0
10041b74:	701a      	strb	r2, [r3, #0]
10041b76:	1cbb      	adds	r3, r7, #2
10041b78:	1c0a      	adds	r2, r1, #0
10041b7a:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10041b7c:	1cbb      	adds	r3, r7, #2
10041b7e:	781a      	ldrb	r2, [r3, #0]
10041b80:	1cfb      	adds	r3, r7, #3
10041b82:	7819      	ldrb	r1, [r3, #0]
10041b84:	687b      	ldr	r3, [r7, #4]
10041b86:	0018      	movs	r0, r3
10041b88:	f006 f8a2 	bl	10047cd0 <HAL_RADIO_TIMER_SetRadioTimerValue>
10041b8c:	0003      	movs	r3, r0
10041b8e:	b2db      	uxtb	r3, r3
}
10041b90:	0018      	movs	r0, r3
10041b92:	46bd      	mov	sp, r7
10041b94:	b002      	add	sp, #8
10041b96:	bd80      	pop	{r7, pc}

10041b98 <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
10041b98:	b580      	push	{r7, lr}
10041b9a:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
10041b9c:	f006 f8e8 	bl	10047d70 <HAL_RADIO_TIMER_ClearRadioTimerValue>
10041ba0:	0003      	movs	r3, r0
10041ba2:	b2db      	uxtb	r3, r3
}
10041ba4:	0018      	movs	r0, r3
10041ba6:	46bd      	mov	sp, r7
10041ba8:	bd80      	pop	{r7, pc}

10041baa <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
10041baa:	b580      	push	{r7, lr}
10041bac:	b082      	sub	sp, #8
10041bae:	af00      	add	r7, sp, #0
10041bb0:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
10041bb2:	687b      	ldr	r3, [r7, #4]
10041bb4:	0018      	movs	r0, r3
10041bb6:	f005 ffad 	bl	10047b14 <HAL_RADIO_TIMER_GetAnchorPoint>
10041bba:	0002      	movs	r2, r0
10041bbc:	000b      	movs	r3, r1
}
10041bbe:	0010      	movs	r0, r2
10041bc0:	0019      	movs	r1, r3
10041bc2:	46bd      	mov	sp, r7
10041bc4:	b002      	add	sp, #8
10041bc6:	bd80      	pop	{r7, pc}

10041bc8 <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
10041bc8:	b580      	push	{r7, lr}
10041bca:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
10041bcc:	f006 f944 	bl	10047e58 <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
10041bd0:	46c0      	nop			@ (mov r8, r8)
10041bd2:	46bd      	mov	sp, r7
10041bd4:	bd80      	pop	{r7, pc}
	...

10041bd8 <LL_RADIO_SetCurrentConnectionMachineNumber>:
  * @rmtoll WORD1          CURSTMACHNUM       LL_RADIO_SetCurrentConnectionMachineNumber
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCurrentConnectionMachineNumber(uint32_t value)
{
10041bd8:	b580      	push	{r7, lr}
10041bda:	b082      	sub	sp, #8
10041bdc:	af00      	add	r7, sp, #0
10041bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
10041be0:	4b07      	ldr	r3, [pc, #28]	@ (10041c00 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10041be2:	685b      	ldr	r3, [r3, #4]
10041be4:	227f      	movs	r2, #127	@ 0x7f
10041be6:	4393      	bics	r3, r2
10041be8:	0019      	movs	r1, r3
10041bea:	687b      	ldr	r3, [r7, #4]
10041bec:	227f      	movs	r2, #127	@ 0x7f
10041bee:	401a      	ands	r2, r3
10041bf0:	4b03      	ldr	r3, [pc, #12]	@ (10041c00 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10041bf2:	430a      	orrs	r2, r1
10041bf4:	605a      	str	r2, [r3, #4]
}
10041bf6:	46c0      	nop			@ (mov r8, r8)
10041bf8:	46bd      	mov	sp, r7
10041bfa:	b002      	add	sp, #8
10041bfc:	bd80      	pop	{r7, pc}
10041bfe:	46c0      	nop			@ (mov r8, r8)
10041c00:	200000c0 	.word	0x200000c0

10041c04 <LL_RADIO_GlobalEnableBlue>:
  * @brief  RADIO Enable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalEnableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalEnableBlue(void)
{
10041c04:	b580      	push	{r7, lr}
10041c06:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10041c08:	4b04      	ldr	r3, [pc, #16]	@ (10041c1c <LL_RADIO_GlobalEnableBlue+0x18>)
10041c0a:	685a      	ldr	r2, [r3, #4]
10041c0c:	4b03      	ldr	r3, [pc, #12]	@ (10041c1c <LL_RADIO_GlobalEnableBlue+0x18>)
10041c0e:	2180      	movs	r1, #128	@ 0x80
10041c10:	430a      	orrs	r2, r1
10041c12:	605a      	str	r2, [r3, #4]
}
10041c14:	46c0      	nop			@ (mov r8, r8)
10041c16:	46bd      	mov	sp, r7
10041c18:	bd80      	pop	{r7, pc}
10041c1a:	46c0      	nop			@ (mov r8, r8)
10041c1c:	200000c0 	.word	0x200000c0

10041c20 <LL_RADIO_GlobalDisableBlue>:
  * @brief  RADIO Disable
  * @rmtoll WORD1          ACTIVE            LL_RADIO_GlobalDisableBlue
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_GlobalDisableBlue(void)
{
10041c20:	b580      	push	{r7, lr}
10041c22:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10041c24:	4b04      	ldr	r3, [pc, #16]	@ (10041c38 <LL_RADIO_GlobalDisableBlue+0x18>)
10041c26:	685a      	ldr	r2, [r3, #4]
10041c28:	4b03      	ldr	r3, [pc, #12]	@ (10041c38 <LL_RADIO_GlobalDisableBlue+0x18>)
10041c2a:	2180      	movs	r1, #128	@ 0x80
10041c2c:	438a      	bics	r2, r1
10041c2e:	605a      	str	r2, [r3, #4]
}
10041c30:	46c0      	nop			@ (mov r8, r8)
10041c32:	46bd      	mov	sp, r7
10041c34:	bd80      	pop	{r7, pc}
10041c36:	46c0      	nop			@ (mov r8, r8)
10041c38:	200000c0 	.word	0x200000c0

10041c3c <LL_RADIO_SetReceiveWindowTimeout>:
  * @rmtoll WORD4          RCVTIMEOUT       LL_RADIO_SetReceiveWindowTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceiveWindowTimeout(uint32_t value)
{
10041c3c:	b580      	push	{r7, lr}
10041c3e:	b082      	sub	sp, #8
10041c40:	af00      	add	r7, sp, #0
10041c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
10041c44:	4b07      	ldr	r3, [pc, #28]	@ (10041c64 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10041c46:	691b      	ldr	r3, [r3, #16]
10041c48:	4a07      	ldr	r2, [pc, #28]	@ (10041c68 <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
10041c4a:	4013      	ands	r3, r2
10041c4c:	0019      	movs	r1, r3
10041c4e:	687b      	ldr	r3, [r7, #4]
10041c50:	021b      	lsls	r3, r3, #8
10041c52:	4a06      	ldr	r2, [pc, #24]	@ (10041c6c <LL_RADIO_SetReceiveWindowTimeout+0x30>)
10041c54:	401a      	ands	r2, r3
10041c56:	4b03      	ldr	r3, [pc, #12]	@ (10041c64 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10041c58:	430a      	orrs	r2, r1
10041c5a:	611a      	str	r2, [r3, #16]
}
10041c5c:	46c0      	nop			@ (mov r8, r8)
10041c5e:	46bd      	mov	sp, r7
10041c60:	b002      	add	sp, #8
10041c62:	bd80      	pop	{r7, pc}
10041c64:	200000c0 	.word	0x200000c0
10041c68:	f00000ff 	.word	0xf00000ff
10041c6c:	0fffff00 	.word	0x0fffff00

10041c70 <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
10041c70:	b580      	push	{r7, lr}
10041c72:	b082      	sub	sp, #8
10041c74:	af00      	add	r7, sp, #0
10041c76:	0002      	movs	r2, r0
10041c78:	1dfb      	adds	r3, r7, #7
10041c7a:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10041c7c:	1dfb      	adds	r3, r7, #7
10041c7e:	781b      	ldrb	r3, [r3, #0]
10041c80:	225c      	movs	r2, #92	@ 0x5c
10041c82:	4353      	muls	r3, r2
10041c84:	4a08      	ldr	r2, [pc, #32]	@ (10041ca8 <LL_RADIO_RadioCommandList_Enable+0x38>)
10041c86:	4694      	mov	ip, r2
10041c88:	4463      	add	r3, ip
10041c8a:	681a      	ldr	r2, [r3, #0]
10041c8c:	1dfb      	adds	r3, r7, #7
10041c8e:	781b      	ldrb	r3, [r3, #0]
10041c90:	215c      	movs	r1, #92	@ 0x5c
10041c92:	434b      	muls	r3, r1
10041c94:	4904      	ldr	r1, [pc, #16]	@ (10041ca8 <LL_RADIO_RadioCommandList_Enable+0x38>)
10041c96:	468c      	mov	ip, r1
10041c98:	4463      	add	r3, ip
10041c9a:	2140      	movs	r1, #64	@ 0x40
10041c9c:	430a      	orrs	r2, r1
10041c9e:	601a      	str	r2, [r3, #0]
}
10041ca0:	46c0      	nop			@ (mov r8, r8)
10041ca2:	46bd      	mov	sp, r7
10041ca4:	b002      	add	sp, #8
10041ca6:	bd80      	pop	{r7, pc}
10041ca8:	200000dc 	.word	0x200000dc

10041cac <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
10041cac:	b580      	push	{r7, lr}
10041cae:	b082      	sub	sp, #8
10041cb0:	af00      	add	r7, sp, #0
10041cb2:	0002      	movs	r2, r0
10041cb4:	1dfb      	adds	r3, r7, #7
10041cb6:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10041cb8:	1dfb      	adds	r3, r7, #7
10041cba:	781b      	ldrb	r3, [r3, #0]
10041cbc:	225c      	movs	r2, #92	@ 0x5c
10041cbe:	4353      	muls	r3, r2
10041cc0:	4a08      	ldr	r2, [pc, #32]	@ (10041ce4 <LL_RADIO_RadioCommandList_Disable+0x38>)
10041cc2:	4694      	mov	ip, r2
10041cc4:	4463      	add	r3, ip
10041cc6:	681a      	ldr	r2, [r3, #0]
10041cc8:	1dfb      	adds	r3, r7, #7
10041cca:	781b      	ldrb	r3, [r3, #0]
10041ccc:	215c      	movs	r1, #92	@ 0x5c
10041cce:	434b      	muls	r3, r1
10041cd0:	4904      	ldr	r1, [pc, #16]	@ (10041ce4 <LL_RADIO_RadioCommandList_Disable+0x38>)
10041cd2:	468c      	mov	ip, r1
10041cd4:	4463      	add	r3, ip
10041cd6:	2140      	movs	r1, #64	@ 0x40
10041cd8:	438a      	bics	r2, r1
10041cda:	601a      	str	r2, [r3, #0]
}
10041cdc:	46c0      	nop			@ (mov r8, r8)
10041cde:	46bd      	mov	sp, r7
10041ce0:	b002      	add	sp, #8
10041ce2:	bd80      	pop	{r7, pc}
10041ce4:	200000dc 	.word	0x200000dc

10041ce8 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10041ce8:	b580      	push	{r7, lr}
10041cea:	b082      	sub	sp, #8
10041cec:	af00      	add	r7, sp, #0
10041cee:	0002      	movs	r2, r0
10041cf0:	1dfb      	adds	r3, r7, #7
10041cf2:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10041cf4:	1dfb      	adds	r3, r7, #7
10041cf6:	781b      	ldrb	r3, [r3, #0]
10041cf8:	225c      	movs	r2, #92	@ 0x5c
10041cfa:	4353      	muls	r3, r2
10041cfc:	4a08      	ldr	r2, [pc, #32]	@ (10041d20 <LL_RADIO_TxMode_Enable+0x38>)
10041cfe:	4694      	mov	ip, r2
10041d00:	4463      	add	r3, ip
10041d02:	681a      	ldr	r2, [r3, #0]
10041d04:	1dfb      	adds	r3, r7, #7
10041d06:	781b      	ldrb	r3, [r3, #0]
10041d08:	215c      	movs	r1, #92	@ 0x5c
10041d0a:	434b      	muls	r3, r1
10041d0c:	4904      	ldr	r1, [pc, #16]	@ (10041d20 <LL_RADIO_TxMode_Enable+0x38>)
10041d0e:	468c      	mov	ip, r1
10041d10:	4463      	add	r3, ip
10041d12:	2180      	movs	r1, #128	@ 0x80
10041d14:	430a      	orrs	r2, r1
10041d16:	601a      	str	r2, [r3, #0]
}
10041d18:	46c0      	nop			@ (mov r8, r8)
10041d1a:	46bd      	mov	sp, r7
10041d1c:	b002      	add	sp, #8
10041d1e:	bd80      	pop	{r7, pc}
10041d20:	200000dc 	.word	0x200000dc

10041d24 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10041d24:	b580      	push	{r7, lr}
10041d26:	b082      	sub	sp, #8
10041d28:	af00      	add	r7, sp, #0
10041d2a:	0002      	movs	r2, r0
10041d2c:	1dfb      	adds	r3, r7, #7
10041d2e:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10041d30:	1dfb      	adds	r3, r7, #7
10041d32:	781b      	ldrb	r3, [r3, #0]
10041d34:	225c      	movs	r2, #92	@ 0x5c
10041d36:	4353      	muls	r3, r2
10041d38:	4a08      	ldr	r2, [pc, #32]	@ (10041d5c <LL_RADIO_TxMode_Disable+0x38>)
10041d3a:	4694      	mov	ip, r2
10041d3c:	4463      	add	r3, ip
10041d3e:	681a      	ldr	r2, [r3, #0]
10041d40:	1dfb      	adds	r3, r7, #7
10041d42:	781b      	ldrb	r3, [r3, #0]
10041d44:	215c      	movs	r1, #92	@ 0x5c
10041d46:	434b      	muls	r3, r1
10041d48:	4904      	ldr	r1, [pc, #16]	@ (10041d5c <LL_RADIO_TxMode_Disable+0x38>)
10041d4a:	468c      	mov	ip, r1
10041d4c:	4463      	add	r3, ip
10041d4e:	2180      	movs	r1, #128	@ 0x80
10041d50:	438a      	bics	r2, r1
10041d52:	601a      	str	r2, [r3, #0]
}
10041d54:	46c0      	nop			@ (mov r8, r8)
10041d56:	46bd      	mov	sp, r7
10041d58:	b002      	add	sp, #8
10041d5a:	bd80      	pop	{r7, pc}
10041d5c:	200000dc 	.word	0x200000dc

10041d60 <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
10041d60:	b580      	push	{r7, lr}
10041d62:	b082      	sub	sp, #8
10041d64:	af00      	add	r7, sp, #0
10041d66:	0002      	movs	r2, r0
10041d68:	6039      	str	r1, [r7, #0]
10041d6a:	1dfb      	adds	r3, r7, #7
10041d6c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10041d6e:	1dfb      	adds	r3, r7, #7
10041d70:	781b      	ldrb	r3, [r3, #0]
10041d72:	225c      	movs	r2, #92	@ 0x5c
10041d74:	4353      	muls	r3, r2
10041d76:	4a0c      	ldr	r2, [pc, #48]	@ (10041da8 <LL_RADIO_SetRemapChannel+0x48>)
10041d78:	4694      	mov	ip, r2
10041d7a:	4463      	add	r3, ip
10041d7c:	681b      	ldr	r3, [r3, #0]
10041d7e:	4a0b      	ldr	r2, [pc, #44]	@ (10041dac <LL_RADIO_SetRemapChannel+0x4c>)
10041d80:	4013      	ands	r3, r2
10041d82:	0019      	movs	r1, r3
10041d84:	683b      	ldr	r3, [r7, #0]
10041d86:	021a      	lsls	r2, r3, #8
10041d88:	23fc      	movs	r3, #252	@ 0xfc
10041d8a:	019b      	lsls	r3, r3, #6
10041d8c:	401a      	ands	r2, r3
10041d8e:	1dfb      	adds	r3, r7, #7
10041d90:	781b      	ldrb	r3, [r3, #0]
10041d92:	205c      	movs	r0, #92	@ 0x5c
10041d94:	4343      	muls	r3, r0
10041d96:	4804      	ldr	r0, [pc, #16]	@ (10041da8 <LL_RADIO_SetRemapChannel+0x48>)
10041d98:	4684      	mov	ip, r0
10041d9a:	4463      	add	r3, ip
10041d9c:	430a      	orrs	r2, r1
10041d9e:	601a      	str	r2, [r3, #0]
}
10041da0:	46c0      	nop			@ (mov r8, r8)
10041da2:	46bd      	mov	sp, r7
10041da4:	b002      	add	sp, #8
10041da6:	bd80      	pop	{r7, pc}
10041da8:	200000dc 	.word	0x200000dc
10041dac:	ffffc0ff 	.word	0xffffc0ff

10041db0 <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10041db0:	b580      	push	{r7, lr}
10041db2:	b082      	sub	sp, #8
10041db4:	af00      	add	r7, sp, #0
10041db6:	0002      	movs	r2, r0
10041db8:	6039      	str	r1, [r7, #0]
10041dba:	1dfb      	adds	r3, r7, #7
10041dbc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10041dbe:	1dfb      	adds	r3, r7, #7
10041dc0:	781b      	ldrb	r3, [r3, #0]
10041dc2:	225c      	movs	r2, #92	@ 0x5c
10041dc4:	4353      	muls	r3, r2
10041dc6:	4a0c      	ldr	r2, [pc, #48]	@ (10041df8 <LL_RADIO_SetTransmissionPhy+0x48>)
10041dc8:	4694      	mov	ip, r2
10041dca:	4463      	add	r3, ip
10041dcc:	681b      	ldr	r3, [r3, #0]
10041dce:	4a0b      	ldr	r2, [pc, #44]	@ (10041dfc <LL_RADIO_SetTransmissionPhy+0x4c>)
10041dd0:	4013      	ands	r3, r2
10041dd2:	0019      	movs	r1, r3
10041dd4:	683b      	ldr	r3, [r7, #0]
10041dd6:	061a      	lsls	r2, r3, #24
10041dd8:	23e0      	movs	r3, #224	@ 0xe0
10041dda:	04db      	lsls	r3, r3, #19
10041ddc:	401a      	ands	r2, r3
10041dde:	1dfb      	adds	r3, r7, #7
10041de0:	781b      	ldrb	r3, [r3, #0]
10041de2:	205c      	movs	r0, #92	@ 0x5c
10041de4:	4343      	muls	r3, r0
10041de6:	4804      	ldr	r0, [pc, #16]	@ (10041df8 <LL_RADIO_SetTransmissionPhy+0x48>)
10041de8:	4684      	mov	ip, r0
10041dea:	4463      	add	r3, ip
10041dec:	430a      	orrs	r2, r1
10041dee:	601a      	str	r2, [r3, #0]
}
10041df0:	46c0      	nop			@ (mov r8, r8)
10041df2:	46bd      	mov	sp, r7
10041df4:	b002      	add	sp, #8
10041df6:	bd80      	pop	{r7, pc}
10041df8:	200000dc 	.word	0x200000dc
10041dfc:	f8ffffff 	.word	0xf8ffffff

10041e00 <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
10041e00:	b580      	push	{r7, lr}
10041e02:	b082      	sub	sp, #8
10041e04:	af00      	add	r7, sp, #0
10041e06:	0002      	movs	r2, r0
10041e08:	6039      	str	r1, [r7, #0]
10041e0a:	1dfb      	adds	r3, r7, #7
10041e0c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
10041e0e:	1dfb      	adds	r3, r7, #7
10041e10:	781b      	ldrb	r3, [r3, #0]
10041e12:	225c      	movs	r2, #92	@ 0x5c
10041e14:	4353      	muls	r3, r2
10041e16:	4a0c      	ldr	r2, [pc, #48]	@ (10041e48 <LL_RADIO_SetReceptionPhy+0x48>)
10041e18:	4694      	mov	ip, r2
10041e1a:	4463      	add	r3, ip
10041e1c:	681b      	ldr	r3, [r3, #0]
10041e1e:	4a0b      	ldr	r2, [pc, #44]	@ (10041e4c <LL_RADIO_SetReceptionPhy+0x4c>)
10041e20:	4013      	ands	r3, r2
10041e22:	0019      	movs	r1, r3
10041e24:	683b      	ldr	r3, [r7, #0]
10041e26:	071a      	lsls	r2, r3, #28
10041e28:	23e0      	movs	r3, #224	@ 0xe0
10041e2a:	05db      	lsls	r3, r3, #23
10041e2c:	401a      	ands	r2, r3
10041e2e:	1dfb      	adds	r3, r7, #7
10041e30:	781b      	ldrb	r3, [r3, #0]
10041e32:	205c      	movs	r0, #92	@ 0x5c
10041e34:	4343      	muls	r3, r0
10041e36:	4804      	ldr	r0, [pc, #16]	@ (10041e48 <LL_RADIO_SetReceptionPhy+0x48>)
10041e38:	4684      	mov	ip, r0
10041e3a:	4463      	add	r3, ip
10041e3c:	430a      	orrs	r2, r1
10041e3e:	601a      	str	r2, [r3, #0]
}
10041e40:	46c0      	nop			@ (mov r8, r8)
10041e42:	46bd      	mov	sp, r7
10041e44:	b002      	add	sp, #8
10041e46:	bd80      	pop	{r7, pc}
10041e48:	200000dc 	.word	0x200000dc
10041e4c:	8fffffff 	.word	0x8fffffff

10041e50 <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10041e50:	b580      	push	{r7, lr}
10041e52:	b082      	sub	sp, #8
10041e54:	af00      	add	r7, sp, #0
10041e56:	0002      	movs	r2, r0
10041e58:	6039      	str	r1, [r7, #0]
10041e5a:	1dfb      	adds	r3, r7, #7
10041e5c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10041e5e:	1dfb      	adds	r3, r7, #7
10041e60:	781b      	ldrb	r3, [r3, #0]
10041e62:	225c      	movs	r2, #92	@ 0x5c
10041e64:	4353      	muls	r3, r2
10041e66:	4a08      	ldr	r2, [pc, #32]	@ (10041e88 <LL_RADIO_SetTxPoint+0x38>)
10041e68:	4694      	mov	ip, r2
10041e6a:	4463      	add	r3, ip
10041e6c:	685b      	ldr	r3, [r3, #4]
10041e6e:	1dfb      	adds	r3, r7, #7
10041e70:	781b      	ldrb	r3, [r3, #0]
10041e72:	225c      	movs	r2, #92	@ 0x5c
10041e74:	4353      	muls	r3, r2
10041e76:	4a04      	ldr	r2, [pc, #16]	@ (10041e88 <LL_RADIO_SetTxPoint+0x38>)
10041e78:	4694      	mov	ip, r2
10041e7a:	4463      	add	r3, ip
10041e7c:	683a      	ldr	r2, [r7, #0]
10041e7e:	605a      	str	r2, [r3, #4]
}
10041e80:	46c0      	nop			@ (mov r8, r8)
10041e82:	46bd      	mov	sp, r7
10041e84:	b002      	add	sp, #8
10041e86:	bd80      	pop	{r7, pc}
10041e88:	200000dc 	.word	0x200000dc

10041e8c <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
10041e8c:	b580      	push	{r7, lr}
10041e8e:	b082      	sub	sp, #8
10041e90:	af00      	add	r7, sp, #0
10041e92:	0002      	movs	r2, r0
10041e94:	6039      	str	r1, [r7, #0]
10041e96:	1dfb      	adds	r3, r7, #7
10041e98:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
10041e9a:	1dfb      	adds	r3, r7, #7
10041e9c:	781b      	ldrb	r3, [r3, #0]
10041e9e:	225c      	movs	r2, #92	@ 0x5c
10041ea0:	4353      	muls	r3, r2
10041ea2:	4a08      	ldr	r2, [pc, #32]	@ (10041ec4 <LL_RADIO_SetRcvPoint+0x38>)
10041ea4:	4694      	mov	ip, r2
10041ea6:	4463      	add	r3, ip
10041ea8:	689b      	ldr	r3, [r3, #8]
10041eaa:	1dfb      	adds	r3, r7, #7
10041eac:	781b      	ldrb	r3, [r3, #0]
10041eae:	225c      	movs	r2, #92	@ 0x5c
10041eb0:	4353      	muls	r3, r2
10041eb2:	4a04      	ldr	r2, [pc, #16]	@ (10041ec4 <LL_RADIO_SetRcvPoint+0x38>)
10041eb4:	4694      	mov	ip, r2
10041eb6:	4463      	add	r3, ip
10041eb8:	683a      	ldr	r2, [r7, #0]
10041eba:	609a      	str	r2, [r3, #8]
}
10041ebc:	46c0      	nop			@ (mov r8, r8)
10041ebe:	46bd      	mov	sp, r7
10041ec0:	b002      	add	sp, #8
10041ec2:	bd80      	pop	{r7, pc}
10041ec4:	200000dc 	.word	0x200000dc

10041ec8 <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
10041ec8:	b580      	push	{r7, lr}
10041eca:	b082      	sub	sp, #8
10041ecc:	af00      	add	r7, sp, #0
10041ece:	0002      	movs	r2, r0
10041ed0:	6039      	str	r1, [r7, #0]
10041ed2:	1dfb      	adds	r3, r7, #7
10041ed4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
10041ed6:	1dfb      	adds	r3, r7, #7
10041ed8:	781b      	ldrb	r3, [r3, #0]
10041eda:	225c      	movs	r2, #92	@ 0x5c
10041edc:	4353      	muls	r3, r2
10041ede:	4a08      	ldr	r2, [pc, #32]	@ (10041f00 <LL_RADIO_SetAccessAddress+0x38>)
10041ee0:	4694      	mov	ip, r2
10041ee2:	4463      	add	r3, ip
10041ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10041ee6:	1dfb      	adds	r3, r7, #7
10041ee8:	781b      	ldrb	r3, [r3, #0]
10041eea:	225c      	movs	r2, #92	@ 0x5c
10041eec:	4353      	muls	r3, r2
10041eee:	4a04      	ldr	r2, [pc, #16]	@ (10041f00 <LL_RADIO_SetAccessAddress+0x38>)
10041ef0:	4694      	mov	ip, r2
10041ef2:	4463      	add	r3, ip
10041ef4:	683a      	ldr	r2, [r7, #0]
10041ef6:	625a      	str	r2, [r3, #36]	@ 0x24
}
10041ef8:	46c0      	nop			@ (mov r8, r8)
10041efa:	46bd      	mov	sp, r7
10041efc:	b002      	add	sp, #8
10041efe:	bd80      	pop	{r7, pc}
10041f00:	200000dc 	.word	0x200000dc

10041f04 <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
10041f04:	b580      	push	{r7, lr}
10041f06:	b082      	sub	sp, #8
10041f08:	af00      	add	r7, sp, #0
10041f0a:	0002      	movs	r2, r0
10041f0c:	6039      	str	r1, [r7, #0]
10041f0e:	1dfb      	adds	r3, r7, #7
10041f10:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
10041f12:	1dfb      	adds	r3, r7, #7
10041f14:	781b      	ldrb	r3, [r3, #0]
10041f16:	225c      	movs	r2, #92	@ 0x5c
10041f18:	4353      	muls	r3, r2
10041f1a:	4a0b      	ldr	r2, [pc, #44]	@ (10041f48 <LL_RADIO_SetCRCInitializationValue+0x44>)
10041f1c:	4694      	mov	ip, r2
10041f1e:	4463      	add	r3, ip
10041f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041f22:	0e1b      	lsrs	r3, r3, #24
10041f24:	0619      	lsls	r1, r3, #24
10041f26:	683b      	ldr	r3, [r7, #0]
10041f28:	021b      	lsls	r3, r3, #8
10041f2a:	0a1a      	lsrs	r2, r3, #8
10041f2c:	1dfb      	adds	r3, r7, #7
10041f2e:	781b      	ldrb	r3, [r3, #0]
10041f30:	205c      	movs	r0, #92	@ 0x5c
10041f32:	4343      	muls	r3, r0
10041f34:	4804      	ldr	r0, [pc, #16]	@ (10041f48 <LL_RADIO_SetCRCInitializationValue+0x44>)
10041f36:	4684      	mov	ip, r0
10041f38:	4463      	add	r3, ip
10041f3a:	430a      	orrs	r2, r1
10041f3c:	629a      	str	r2, [r3, #40]	@ 0x28
}
10041f3e:	46c0      	nop			@ (mov r8, r8)
10041f40:	46bd      	mov	sp, r7
10041f42:	b002      	add	sp, #8
10041f44:	bd80      	pop	{r7, pc}
10041f46:	46c0      	nop			@ (mov r8, r8)
10041f48:	200000dc 	.word	0x200000dc

10041f4c <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
10041f4c:	b580      	push	{r7, lr}
10041f4e:	b082      	sub	sp, #8
10041f50:	af00      	add	r7, sp, #0
10041f52:	0002      	movs	r2, r0
10041f54:	6039      	str	r1, [r7, #0]
10041f56:	1dfb      	adds	r3, r7, #7
10041f58:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
10041f5a:	1dfb      	adds	r3, r7, #7
10041f5c:	781b      	ldrb	r3, [r3, #0]
10041f5e:	225c      	movs	r2, #92	@ 0x5c
10041f60:	4353      	muls	r3, r2
10041f62:	4a0a      	ldr	r2, [pc, #40]	@ (10041f8c <LL_RADIO_SetMaximumReceiveLength+0x40>)
10041f64:	4694      	mov	ip, r2
10041f66:	4463      	add	r3, ip
10041f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10041f6a:	021b      	lsls	r3, r3, #8
10041f6c:	0a19      	lsrs	r1, r3, #8
10041f6e:	683b      	ldr	r3, [r7, #0]
10041f70:	061a      	lsls	r2, r3, #24
10041f72:	1dfb      	adds	r3, r7, #7
10041f74:	781b      	ldrb	r3, [r3, #0]
10041f76:	205c      	movs	r0, #92	@ 0x5c
10041f78:	4343      	muls	r3, r0
10041f7a:	4804      	ldr	r0, [pc, #16]	@ (10041f8c <LL_RADIO_SetMaximumReceiveLength+0x40>)
10041f7c:	4684      	mov	ip, r0
10041f7e:	4463      	add	r3, ip
10041f80:	430a      	orrs	r2, r1
10041f82:	629a      	str	r2, [r3, #40]	@ 0x28
}
10041f84:	46c0      	nop			@ (mov r8, r8)
10041f86:	46bd      	mov	sp, r7
10041f88:	b002      	add	sp, #8
10041f8a:	bd80      	pop	{r7, pc}
10041f8c:	200000dc 	.word	0x200000dc

10041f90 <LL_RADIO_TxHp_Enable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Enable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Enable(uint8_t stateMachineNo)
{
10041f90:	b580      	push	{r7, lr}
10041f92:	b082      	sub	sp, #8
10041f94:	af00      	add	r7, sp, #0
10041f96:	0002      	movs	r2, r0
10041f98:	1dfb      	adds	r3, r7, #7
10041f9a:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10041f9c:	1dfb      	adds	r3, r7, #7
10041f9e:	781b      	ldrb	r3, [r3, #0]
10041fa0:	225c      	movs	r2, #92	@ 0x5c
10041fa2:	4353      	muls	r3, r2
10041fa4:	4a08      	ldr	r2, [pc, #32]	@ (10041fc8 <LL_RADIO_TxHp_Enable+0x38>)
10041fa6:	4694      	mov	ip, r2
10041fa8:	4463      	add	r3, ip
10041faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10041fac:	1dfb      	adds	r3, r7, #7
10041fae:	781b      	ldrb	r3, [r3, #0]
10041fb0:	215c      	movs	r1, #92	@ 0x5c
10041fb2:	434b      	muls	r3, r1
10041fb4:	4904      	ldr	r1, [pc, #16]	@ (10041fc8 <LL_RADIO_TxHp_Enable+0x38>)
10041fb6:	468c      	mov	ip, r1
10041fb8:	4463      	add	r3, ip
10041fba:	2180      	movs	r1, #128	@ 0x80
10041fbc:	430a      	orrs	r2, r1
10041fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10041fc0:	46c0      	nop			@ (mov r8, r8)
10041fc2:	46bd      	mov	sp, r7
10041fc4:	b002      	add	sp, #8
10041fc6:	bd80      	pop	{r7, pc}
10041fc8:	200000dc 	.word	0x200000dc

10041fcc <LL_RADIO_TxHp_Disable>:
  * @rmtoll WORDB          TXHP            LL_RADIO_TxHp_Disable
  * @param  stateMachineNo
  * @retval
  */
__STATIC_INLINE void LL_RADIO_TxHp_Disable(uint8_t stateMachineNo)
{
10041fcc:	b580      	push	{r7, lr}
10041fce:	b082      	sub	sp, #8
10041fd0:	af00      	add	r7, sp, #0
10041fd2:	0002      	movs	r2, r0
10041fd4:	1dfb      	adds	r3, r7, #7
10041fd6:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_TXHP);
10041fd8:	1dfb      	adds	r3, r7, #7
10041fda:	781b      	ldrb	r3, [r3, #0]
10041fdc:	225c      	movs	r2, #92	@ 0x5c
10041fde:	4353      	muls	r3, r2
10041fe0:	4a08      	ldr	r2, [pc, #32]	@ (10042004 <LL_RADIO_TxHp_Disable+0x38>)
10041fe2:	4694      	mov	ip, r2
10041fe4:	4463      	add	r3, ip
10041fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10041fe8:	1dfb      	adds	r3, r7, #7
10041fea:	781b      	ldrb	r3, [r3, #0]
10041fec:	215c      	movs	r1, #92	@ 0x5c
10041fee:	434b      	muls	r3, r1
10041ff0:	4904      	ldr	r1, [pc, #16]	@ (10042004 <LL_RADIO_TxHp_Disable+0x38>)
10041ff2:	468c      	mov	ip, r1
10041ff4:	4463      	add	r3, ip
10041ff6:	2180      	movs	r1, #128	@ 0x80
10041ff8:	438a      	bics	r2, r1
10041ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10041ffc:	46c0      	nop			@ (mov r8, r8)
10041ffe:	46bd      	mov	sp, r7
10042000:	b002      	add	sp, #8
10042002:	bd80      	pop	{r7, pc}
10042004:	200000dc 	.word	0x200000dc

10042008 <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
10042008:	b580      	push	{r7, lr}
1004200a:	b082      	sub	sp, #8
1004200c:	af00      	add	r7, sp, #0
1004200e:	0002      	movs	r2, r0
10042010:	6039      	str	r1, [r7, #0]
10042012:	1dfb      	adds	r3, r7, #7
10042014:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
10042016:	1dfb      	adds	r3, r7, #7
10042018:	781b      	ldrb	r3, [r3, #0]
1004201a:	225c      	movs	r2, #92	@ 0x5c
1004201c:	4353      	muls	r3, r2
1004201e:	4a0b      	ldr	r2, [pc, #44]	@ (1004204c <LL_RADIO_SetPAPower+0x44>)
10042020:	4694      	mov	ip, r2
10042022:	4463      	add	r3, ip
10042024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10042026:	221f      	movs	r2, #31
10042028:	4393      	bics	r3, r2
1004202a:	0019      	movs	r1, r3
1004202c:	683b      	ldr	r3, [r7, #0]
1004202e:	221f      	movs	r2, #31
10042030:	401a      	ands	r2, r3
10042032:	1dfb      	adds	r3, r7, #7
10042034:	781b      	ldrb	r3, [r3, #0]
10042036:	205c      	movs	r0, #92	@ 0x5c
10042038:	4343      	muls	r3, r0
1004203a:	4804      	ldr	r0, [pc, #16]	@ (1004204c <LL_RADIO_SetPAPower+0x44>)
1004203c:	4684      	mov	ip, r0
1004203e:	4463      	add	r3, ip
10042040:	430a      	orrs	r2, r1
10042042:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10042044:	46c0      	nop			@ (mov r8, r8)
10042046:	46bd      	mov	sp, r7
10042048:	b002      	add	sp, #8
1004204a:	bd80      	pop	{r7, pc}
1004204c:	200000dc 	.word	0x200000dc

10042050 <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
10042050:	b580      	push	{r7, lr}
10042052:	b082      	sub	sp, #8
10042054:	af00      	add	r7, sp, #0
10042056:	0002      	movs	r2, r0
10042058:	6039      	str	r1, [r7, #0]
1004205a:	1dfb      	adds	r3, r7, #7
1004205c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
1004205e:	1dfb      	adds	r3, r7, #7
10042060:	781b      	ldrb	r3, [r3, #0]
10042062:	225c      	movs	r2, #92	@ 0x5c
10042064:	4353      	muls	r3, r2
10042066:	4a0c      	ldr	r2, [pc, #48]	@ (10042098 <LL_RADIO_SetHopIncrement+0x48>)
10042068:	4694      	mov	ip, r2
1004206a:	4463      	add	r3, ip
1004206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004206e:	4a0b      	ldr	r2, [pc, #44]	@ (1004209c <LL_RADIO_SetHopIncrement+0x4c>)
10042070:	4013      	ands	r3, r2
10042072:	0019      	movs	r1, r3
10042074:	683b      	ldr	r3, [r7, #0]
10042076:	021a      	lsls	r2, r3, #8
10042078:	23fc      	movs	r3, #252	@ 0xfc
1004207a:	019b      	lsls	r3, r3, #6
1004207c:	401a      	ands	r2, r3
1004207e:	1dfb      	adds	r3, r7, #7
10042080:	781b      	ldrb	r3, [r3, #0]
10042082:	205c      	movs	r0, #92	@ 0x5c
10042084:	4343      	muls	r3, r0
10042086:	4804      	ldr	r0, [pc, #16]	@ (10042098 <LL_RADIO_SetHopIncrement+0x48>)
10042088:	4684      	mov	ip, r0
1004208a:	4463      	add	r3, ip
1004208c:	430a      	orrs	r2, r1
1004208e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10042090:	46c0      	nop			@ (mov r8, r8)
10042092:	46bd      	mov	sp, r7
10042094:	b002      	add	sp, #8
10042096:	bd80      	pop	{r7, pc}
10042098:	200000dc 	.word	0x200000dc
1004209c:	ffffc0ff 	.word	0xffffc0ff

100420a0 <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
100420a0:	b580      	push	{r7, lr}
100420a2:	b082      	sub	sp, #8
100420a4:	af00      	add	r7, sp, #0
100420a6:	6078      	str	r0, [r7, #4]
100420a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
100420aa:	687b      	ldr	r3, [r7, #4]
100420ac:	681b      	ldr	r3, [r3, #0]
100420ae:	687b      	ldr	r3, [r7, #4]
100420b0:	683a      	ldr	r2, [r7, #0]
100420b2:	601a      	str	r2, [r3, #0]
}
100420b4:	46c0      	nop			@ (mov r8, r8)
100420b6:	46bd      	mov	sp, r7
100420b8:	b002      	add	sp, #8
100420ba:	bd80      	pop	{r7, pc}

100420bc <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100420bc:	b580      	push	{r7, lr}
100420be:	b082      	sub	sp, #8
100420c0:	af00      	add	r7, sp, #0
100420c2:	6078      	str	r0, [r7, #4]
100420c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
100420c6:	687b      	ldr	r3, [r7, #4]
100420c8:	685b      	ldr	r3, [r3, #4]
100420ca:	2201      	movs	r2, #1
100420cc:	4393      	bics	r3, r2
100420ce:	001a      	movs	r2, r3
100420d0:	683b      	ldr	r3, [r7, #0]
100420d2:	2101      	movs	r1, #1
100420d4:	400b      	ands	r3, r1
100420d6:	431a      	orrs	r2, r3
100420d8:	687b      	ldr	r3, [r7, #4]
100420da:	605a      	str	r2, [r3, #4]
}
100420dc:	46c0      	nop			@ (mov r8, r8)
100420de:	46bd      	mov	sp, r7
100420e0:	b002      	add	sp, #8
100420e2:	bd80      	pop	{r7, pc}

100420e4 <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100420e4:	b580      	push	{r7, lr}
100420e6:	b082      	sub	sp, #8
100420e8:	af00      	add	r7, sp, #0
100420ea:	6078      	str	r0, [r7, #4]
100420ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
100420ee:	687b      	ldr	r3, [r7, #4]
100420f0:	685b      	ldr	r3, [r3, #4]
100420f2:	2204      	movs	r2, #4
100420f4:	4393      	bics	r3, r2
100420f6:	001a      	movs	r2, r3
100420f8:	683b      	ldr	r3, [r7, #0]
100420fa:	009b      	lsls	r3, r3, #2
100420fc:	2104      	movs	r1, #4
100420fe:	400b      	ands	r3, r1
10042100:	431a      	orrs	r2, r3
10042102:	687b      	ldr	r3, [r7, #4]
10042104:	605a      	str	r2, [r3, #4]
}
10042106:	46c0      	nop			@ (mov r8, r8)
10042108:	46bd      	mov	sp, r7
1004210a:	b002      	add	sp, #8
1004210c:	bd80      	pop	{r7, pc}

1004210e <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
1004210e:	b580      	push	{r7, lr}
10042110:	b082      	sub	sp, #8
10042112:	af00      	add	r7, sp, #0
10042114:	6078      	str	r0, [r7, #4]
10042116:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10042118:	687b      	ldr	r3, [r7, #4]
1004211a:	685b      	ldr	r3, [r3, #4]
1004211c:	2220      	movs	r2, #32
1004211e:	4393      	bics	r3, r2
10042120:	001a      	movs	r2, r3
10042122:	683b      	ldr	r3, [r7, #0]
10042124:	015b      	lsls	r3, r3, #5
10042126:	2120      	movs	r1, #32
10042128:	400b      	ands	r3, r1
1004212a:	431a      	orrs	r2, r3
1004212c:	687b      	ldr	r3, [r7, #4]
1004212e:	605a      	str	r2, [r3, #4]
}
10042130:	46c0      	nop			@ (mov r8, r8)
10042132:	46bd      	mov	sp, r7
10042134:	b002      	add	sp, #8
10042136:	bd80      	pop	{r7, pc}

10042138 <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
10042138:	b580      	push	{r7, lr}
1004213a:	b082      	sub	sp, #8
1004213c:	af00      	add	r7, sp, #0
1004213e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
10042140:	687b      	ldr	r3, [r7, #4]
10042142:	685b      	ldr	r3, [r3, #4]
10042144:	2280      	movs	r2, #128	@ 0x80
10042146:	4393      	bics	r3, r2
10042148:	001a      	movs	r2, r3
1004214a:	687b      	ldr	r3, [r7, #4]
1004214c:	605a      	str	r2, [r3, #4]
}
1004214e:	46c0      	nop			@ (mov r8, r8)
10042150:	46bd      	mov	sp, r7
10042152:	b002      	add	sp, #8
10042154:	bd80      	pop	{r7, pc}
	...

10042158 <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
10042158:	b580      	push	{r7, lr}
1004215a:	b082      	sub	sp, #8
1004215c:	af00      	add	r7, sp, #0
1004215e:	6078      	str	r0, [r7, #4]
10042160:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
10042162:	687b      	ldr	r3, [r7, #4]
10042164:	685b      	ldr	r3, [r3, #4]
10042166:	4a07      	ldr	r2, [pc, #28]	@ (10042184 <LL_RADIO_SetNextTxMode+0x2c>)
10042168:	401a      	ands	r2, r3
1004216a:	683b      	ldr	r3, [r7, #0]
1004216c:	0219      	lsls	r1, r3, #8
1004216e:	2380      	movs	r3, #128	@ 0x80
10042170:	005b      	lsls	r3, r3, #1
10042172:	400b      	ands	r3, r1
10042174:	431a      	orrs	r2, r3
10042176:	687b      	ldr	r3, [r7, #4]
10042178:	605a      	str	r2, [r3, #4]
}
1004217a:	46c0      	nop			@ (mov r8, r8)
1004217c:	46bd      	mov	sp, r7
1004217e:	b002      	add	sp, #8
10042180:	bd80      	pop	{r7, pc}
10042182:	46c0      	nop			@ (mov r8, r8)
10042184:	fffffeff 	.word	0xfffffeff

10042188 <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10042188:	b580      	push	{r7, lr}
1004218a:	b082      	sub	sp, #8
1004218c:	af00      	add	r7, sp, #0
1004218e:	6078      	str	r0, [r7, #4]
10042190:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
10042192:	687b      	ldr	r3, [r7, #4]
10042194:	685b      	ldr	r3, [r3, #4]
10042196:	4a07      	ldr	r2, [pc, #28]	@ (100421b4 <LL_RADIO_SetAllTableDataReady+0x2c>)
10042198:	401a      	ands	r2, r3
1004219a:	683b      	ldr	r3, [r7, #0]
1004219c:	0259      	lsls	r1, r3, #9
1004219e:	2380      	movs	r3, #128	@ 0x80
100421a0:	009b      	lsls	r3, r3, #2
100421a2:	400b      	ands	r3, r1
100421a4:	431a      	orrs	r2, r3
100421a6:	687b      	ldr	r3, [r7, #4]
100421a8:	605a      	str	r2, [r3, #4]
}
100421aa:	46c0      	nop			@ (mov r8, r8)
100421ac:	46bd      	mov	sp, r7
100421ae:	b002      	add	sp, #8
100421b0:	bd80      	pop	{r7, pc}
100421b2:	46c0      	nop			@ (mov r8, r8)
100421b4:	fffffdff 	.word	0xfffffdff

100421b8 <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
100421b8:	b580      	push	{r7, lr}
100421ba:	b082      	sub	sp, #8
100421bc:	af00      	add	r7, sp, #0
100421be:	6078      	str	r0, [r7, #4]
100421c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
100421c2:	687b      	ldr	r3, [r7, #4]
100421c4:	685b      	ldr	r3, [r3, #4]
100421c6:	4a07      	ldr	r2, [pc, #28]	@ (100421e4 <LL_RADIO_SetTransmissionDataReady+0x2c>)
100421c8:	401a      	ands	r2, r3
100421ca:	683b      	ldr	r3, [r7, #0]
100421cc:	0299      	lsls	r1, r3, #10
100421ce:	2380      	movs	r3, #128	@ 0x80
100421d0:	00db      	lsls	r3, r3, #3
100421d2:	400b      	ands	r3, r1
100421d4:	431a      	orrs	r2, r3
100421d6:	687b      	ldr	r3, [r7, #4]
100421d8:	605a      	str	r2, [r3, #4]
}
100421da:	46c0      	nop			@ (mov r8, r8)
100421dc:	46bd      	mov	sp, r7
100421de:	b002      	add	sp, #8
100421e0:	bd80      	pop	{r7, pc}
100421e2:	46c0      	nop			@ (mov r8, r8)
100421e4:	fffffbff 	.word	0xfffffbff

100421e8 <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
100421e8:	b580      	push	{r7, lr}
100421ea:	b082      	sub	sp, #8
100421ec:	af00      	add	r7, sp, #0
100421ee:	6078      	str	r0, [r7, #4]
100421f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
100421f2:	687b      	ldr	r3, [r7, #4]
100421f4:	689b      	ldr	r3, [r3, #8]
100421f6:	687b      	ldr	r3, [r7, #4]
100421f8:	683a      	ldr	r2, [r7, #0]
100421fa:	609a      	str	r2, [r3, #8]
}
100421fc:	46c0      	nop			@ (mov r8, r8)
100421fe:	46bd      	mov	sp, r7
10042200:	b002      	add	sp, #8
10042202:	bd80      	pop	{r7, pc}

10042204 <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
10042204:	b580      	push	{r7, lr}
10042206:	b082      	sub	sp, #8
10042208:	af00      	add	r7, sp, #0
1004220a:	6078      	str	r0, [r7, #4]
1004220c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
1004220e:	687b      	ldr	r3, [r7, #4]
10042210:	68db      	ldr	r3, [r3, #12]
10042212:	0d1b      	lsrs	r3, r3, #20
10042214:	051a      	lsls	r2, r3, #20
10042216:	683b      	ldr	r3, [r7, #0]
10042218:	031b      	lsls	r3, r3, #12
1004221a:	0b1b      	lsrs	r3, r3, #12
1004221c:	431a      	orrs	r2, r3
1004221e:	687b      	ldr	r3, [r7, #4]
10042220:	60da      	str	r2, [r3, #12]
}
10042222:	46c0      	nop			@ (mov r8, r8)
10042224:	46bd      	mov	sp, r7
10042226:	b002      	add	sp, #8
10042228:	bd80      	pop	{r7, pc}

1004222a <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
1004222a:	b580      	push	{r7, lr}
1004222c:	b082      	sub	sp, #8
1004222e:	af00      	add	r7, sp, #0
10042230:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
10042232:	687b      	ldr	r3, [r7, #4]
10042234:	68db      	ldr	r3, [r3, #12]
10042236:	2280      	movs	r2, #128	@ 0x80
10042238:	0352      	lsls	r2, r2, #13
1004223a:	431a      	orrs	r2, r3
1004223c:	687b      	ldr	r3, [r7, #4]
1004223e:	60da      	str	r2, [r3, #12]
}
10042240:	46c0      	nop			@ (mov r8, r8)
10042242:	46bd      	mov	sp, r7
10042244:	b002      	add	sp, #8
10042246:	bd80      	pop	{r7, pc}

10042248 <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
10042248:	b580      	push	{r7, lr}
1004224a:	b082      	sub	sp, #8
1004224c:	af00      	add	r7, sp, #0
1004224e:	6078      	str	r0, [r7, #4]
10042250:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
10042252:	687b      	ldr	r3, [r7, #4]
10042254:	68db      	ldr	r3, [r3, #12]
10042256:	4a07      	ldr	r2, [pc, #28]	@ (10042274 <LL_RADIO_SetTrigRcv+0x2c>)
10042258:	401a      	ands	r2, r3
1004225a:	683b      	ldr	r3, [r7, #0]
1004225c:	0599      	lsls	r1, r3, #22
1004225e:	2380      	movs	r3, #128	@ 0x80
10042260:	03db      	lsls	r3, r3, #15
10042262:	400b      	ands	r3, r1
10042264:	431a      	orrs	r2, r3
10042266:	687b      	ldr	r3, [r7, #4]
10042268:	60da      	str	r2, [r3, #12]
}
1004226a:	46c0      	nop			@ (mov r8, r8)
1004226c:	46bd      	mov	sp, r7
1004226e:	b002      	add	sp, #8
10042270:	bd80      	pop	{r7, pc}
10042272:	46c0      	nop			@ (mov r8, r8)
10042274:	ffbfffff 	.word	0xffbfffff

10042278 <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
10042278:	b580      	push	{r7, lr}
1004227a:	b082      	sub	sp, #8
1004227c:	af00      	add	r7, sp, #0
1004227e:	6078      	str	r0, [r7, #4]
10042280:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
10042282:	687b      	ldr	r3, [r7, #4]
10042284:	68db      	ldr	r3, [r3, #12]
10042286:	4a07      	ldr	r2, [pc, #28]	@ (100422a4 <LL_RADIO_SetTrigDone+0x2c>)
10042288:	401a      	ands	r2, r3
1004228a:	683b      	ldr	r3, [r7, #0]
1004228c:	05d9      	lsls	r1, r3, #23
1004228e:	2380      	movs	r3, #128	@ 0x80
10042290:	041b      	lsls	r3, r3, #16
10042292:	400b      	ands	r3, r1
10042294:	431a      	orrs	r2, r3
10042296:	687b      	ldr	r3, [r7, #4]
10042298:	60da      	str	r2, [r3, #12]
}
1004229a:	46c0      	nop			@ (mov r8, r8)
1004229c:	46bd      	mov	sp, r7
1004229e:	b002      	add	sp, #8
100422a0:	bd80      	pop	{r7, pc}
100422a2:	46c0      	nop			@ (mov r8, r8)
100422a4:	ff7fffff 	.word	0xff7fffff

100422a8 <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
100422a8:	b580      	push	{r7, lr}
100422aa:	b082      	sub	sp, #8
100422ac:	af00      	add	r7, sp, #0
100422ae:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
100422b0:	687b      	ldr	r3, [r7, #4]
100422b2:	68db      	ldr	r3, [r3, #12]
100422b4:	2280      	movs	r2, #128	@ 0x80
100422b6:	0492      	lsls	r2, r2, #18
100422b8:	431a      	orrs	r2, r3
100422ba:	687b      	ldr	r3, [r7, #4]
100422bc:	60da      	str	r2, [r3, #12]
}
100422be:	46c0      	nop			@ (mov r8, r8)
100422c0:	46bd      	mov	sp, r7
100422c2:	b002      	add	sp, #8
100422c4:	bd80      	pop	{r7, pc}

100422c6 <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
100422c6:	b580      	push	{r7, lr}
100422c8:	b082      	sub	sp, #8
100422ca:	af00      	add	r7, sp, #0
100422cc:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
100422ce:	687b      	ldr	r3, [r7, #4]
100422d0:	68db      	ldr	r3, [r3, #12]
100422d2:	2280      	movs	r2, #128	@ 0x80
100422d4:	0612      	lsls	r2, r2, #24
100422d6:	431a      	orrs	r2, r3
100422d8:	687b      	ldr	r3, [r7, #4]
100422da:	60da      	str	r2, [r3, #12]
}
100422dc:	46c0      	nop			@ (mov r8, r8)
100422de:	46bd      	mov	sp, r7
100422e0:	b002      	add	sp, #8
100422e2:	bd80      	pop	{r7, pc}

100422e4 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
100422e4:	b580      	push	{r7, lr}
100422e6:	b082      	sub	sp, #8
100422e8:	af00      	add	r7, sp, #0
100422ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
100422ec:	23c0      	movs	r3, #192	@ 0xc0
100422ee:	05db      	lsls	r3, r3, #23
100422f0:	685b      	ldr	r3, [r3, #4]
100422f2:	4a07      	ldr	r2, [pc, #28]	@ (10042310 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
100422f4:	4013      	ands	r3, r2
100422f6:	0019      	movs	r1, r3
100422f8:	687b      	ldr	r3, [r7, #4]
100422fa:	4a06      	ldr	r2, [pc, #24]	@ (10042314 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
100422fc:	401a      	ands	r2, r3
100422fe:	23c0      	movs	r3, #192	@ 0xc0
10042300:	05db      	lsls	r3, r3, #23
10042302:	430a      	orrs	r2, r1
10042304:	605a      	str	r2, [r3, #4]
}
10042306:	46c0      	nop			@ (mov r8, r8)
10042308:	46bd      	mov	sp, r7
1004230a:	b002      	add	sp, #8
1004230c:	bd80      	pop	{r7, pc}
1004230e:	46c0      	nop			@ (mov r8, r8)
10042310:	0002004f 	.word	0x0002004f
10042314:	fffdffb0 	.word	0xfffdffb0

10042318 <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10042318:	b580      	push	{r7, lr}
1004231a:	b082      	sub	sp, #8
1004231c:	af00      	add	r7, sp, #0
1004231e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10042320:	23c0      	movs	r3, #192	@ 0xc0
10042322:	05db      	lsls	r3, r3, #23
10042324:	699b      	ldr	r3, [r3, #24]
10042326:	2208      	movs	r2, #8
10042328:	4393      	bics	r3, r2
1004232a:	0019      	movs	r1, r3
1004232c:	687b      	ldr	r3, [r7, #4]
1004232e:	00db      	lsls	r3, r3, #3
10042330:	2208      	movs	r2, #8
10042332:	401a      	ands	r2, r3
10042334:	23c0      	movs	r3, #192	@ 0xc0
10042336:	05db      	lsls	r3, r3, #23
10042338:	430a      	orrs	r2, r1
1004233a:	619a      	str	r2, [r3, #24]
}
1004233c:	46c0      	nop			@ (mov r8, r8)
1004233e:	46bd      	mov	sp, r7
10042340:	b002      	add	sp, #8
10042342:	bd80      	pop	{r7, pc}

10042344 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
10042344:	b580      	push	{r7, lr}
10042346:	b088      	sub	sp, #32
10042348:	af00      	add	r7, sp, #0
1004234a:	6078      	str	r0, [r7, #4]
1004234c:	0008      	movs	r0, r1
1004234e:	0011      	movs	r1, r2
10042350:	1cfb      	adds	r3, r7, #3
10042352:	1c02      	adds	r2, r0, #0
10042354:	701a      	strb	r2, [r3, #0]
10042356:	1cbb      	adds	r3, r7, #2
10042358:	1c0a      	adds	r2, r1, #0
1004235a:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
1004235c:	687b      	ldr	r3, [r7, #4]
1004235e:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
10042360:	1cfb      	adds	r3, r7, #3
10042362:	781b      	ldrb	r3, [r3, #0]
10042364:	2b01      	cmp	r3, #1
10042366:	d105      	bne.n	10042374 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 6;
10042368:	2306      	movs	r3, #6
1004236a:	60bb      	str	r3, [r7, #8]
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
1004236c:	68bb      	ldr	r3, [r7, #8]
1004236e:	3302      	adds	r3, #2
10042370:	61fb      	str	r3, [r7, #28]
10042372:	e015      	b.n	100423a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
10042374:	1cfb      	adds	r3, r7, #3
10042376:	781b      	ldrb	r3, [r3, #0]
10042378:	2b00      	cmp	r3, #0
1004237a:	d105      	bne.n	10042388 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
#else
        const int32_t Adjust_Value = 4;
1004237c:	2304      	movs	r3, #4
1004237e:	60fb      	str	r3, [r7, #12]
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
10042380:	68fb      	ldr	r3, [r7, #12]
10042382:	3302      	adds	r3, #2
10042384:	61fb      	str	r3, [r7, #28]
10042386:	e00b      	b.n	100423a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10042388:	1cfb      	adds	r3, r7, #3
1004238a:	781b      	ldrb	r3, [r3, #0]
1004238c:	2b02      	cmp	r3, #2
1004238e:	d105      	bne.n	1004239c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
#else
        const int32_t Adjust_Value = 2;
10042390:	2302      	movs	r3, #2
10042392:	613b      	str	r3, [r7, #16]
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
10042394:	693b      	ldr	r3, [r7, #16]
10042396:	3304      	adds	r3, #4
10042398:	61fb      	str	r3, [r7, #28]
1004239a:	e001      	b.n	100423a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
1004239c:	2300      	movs	r3, #0
1004239e:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
100423a0:	1cfb      	adds	r3, r7, #3
100423a2:	781b      	ldrb	r3, [r3, #0]
100423a4:	2b01      	cmp	r3, #1
100423a6:	d003      	beq.n	100423b0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
100423a8:	1cfb      	adds	r3, r7, #3
100423aa:	781b      	ldrb	r3, [r3, #0]
100423ac:	2b02      	cmp	r3, #2
100423ae:	d109      	bne.n	100423c4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
100423b0:	1cbb      	adds	r3, r7, #2
100423b2:	781b      	ldrb	r3, [r3, #0]
100423b4:	2b01      	cmp	r3, #1
100423b6:	d102      	bne.n	100423be <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
100423b8:	239b      	movs	r3, #155	@ 0x9b
100423ba:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100423bc:	e013      	b.n	100423e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
100423be:	233d      	movs	r3, #61	@ 0x3d
100423c0:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100423c2:	e010      	b.n	100423e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
100423c4:	1cfb      	adds	r3, r7, #3
100423c6:	781b      	ldrb	r3, [r3, #0]
100423c8:	2b00      	cmp	r3, #0
100423ca:	d003      	beq.n	100423d4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
100423cc:	1cfb      	adds	r3, r7, #3
100423ce:	781b      	ldrb	r3, [r3, #0]
100423d0:	2b03      	cmp	r3, #3
100423d2:	d108      	bne.n	100423e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
100423d4:	1cbb      	adds	r3, r7, #2
100423d6:	781b      	ldrb	r3, [r3, #0]
100423d8:	2b01      	cmp	r3, #1
100423da:	d102      	bne.n	100423e2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
100423dc:	2399      	movs	r3, #153	@ 0x99
100423de:	61bb      	str	r3, [r7, #24]
100423e0:	e001      	b.n	100423e6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
100423e2:	233b      	movs	r3, #59	@ 0x3b
100423e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
100423e6:	69ba      	ldr	r2, [r7, #24]
100423e8:	69fb      	ldr	r3, [r7, #28]
100423ea:	18d3      	adds	r3, r2, r3
100423ec:	697a      	ldr	r2, [r7, #20]
100423ee:	1ad3      	subs	r3, r2, r3
100423f0:	617b      	str	r3, [r7, #20]

    return Timeout;
100423f2:	697b      	ldr	r3, [r7, #20]
}
100423f4:	0018      	movs	r0, r3
100423f6:	46bd      	mov	sp, r7
100423f8:	b008      	add	sp, #32
100423fa:	bd80      	pop	{r7, pc}

100423fc <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
100423fc:	b580      	push	{r7, lr}
100423fe:	b082      	sub	sp, #8
10042400:	af00      	add	r7, sp, #0
10042402:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
10042404:	687b      	ldr	r3, [r7, #4]
10042406:	0018      	movs	r0, r3
10042408:	f7ff ff6c 	bl	100422e4 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
1004240c:	46c0      	nop			@ (mov r8, r8)
1004240e:	46bd      	mov	sp, r7
10042410:	b002      	add	sp, #8
10042412:	bd80      	pop	{r7, pc}

10042414 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
10042414:	b580      	push	{r7, lr}
10042416:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
10042418:	2001      	movs	r0, #1
1004241a:	f7ff ff7d 	bl	10042318 <LL_RADIO_BlueSetClearSemaphoreRequest>
}
1004241e:	46c0      	nop			@ (mov r8, r8)
10042420:	46bd      	mov	sp, r7
10042422:	bd80      	pop	{r7, pc}

10042424 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
10042424:	b580      	push	{r7, lr}
10042426:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
10042428:	f7ff fbfa 	bl	10041c20 <LL_RADIO_GlobalDisableBlue>
}
1004242c:	46c0      	nop			@ (mov r8, r8)
1004242e:	46bd      	mov	sp, r7
10042430:	bd80      	pop	{r7, pc}

10042432 <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
10042432:	b580      	push	{r7, lr}
10042434:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
10042436:	f7ff fbe5 	bl	10041c04 <LL_RADIO_GlobalEnableBlue>
}
1004243a:	46c0      	nop			@ (mov r8, r8)
1004243c:	46bd      	mov	sp, r7
1004243e:	bd80      	pop	{r7, pc}

10042440 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10042440:	b580      	push	{r7, lr}
10042442:	b082      	sub	sp, #8
10042444:	af00      	add	r7, sp, #0
10042446:	0002      	movs	r2, r0
10042448:	1dfb      	adds	r3, r7, #7
1004244a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
1004244c:	1dfb      	adds	r3, r7, #7
1004244e:	781b      	ldrb	r3, [r3, #0]
10042450:	0018      	movs	r0, r3
10042452:	f7ff fbc1 	bl	10041bd8 <LL_RADIO_SetCurrentConnectionMachineNumber>
}
10042456:	46c0      	nop			@ (mov r8, r8)
10042458:	46bd      	mov	sp, r7
1004245a:	b002      	add	sp, #8
1004245c:	bd80      	pop	{r7, pc}
	...

10042460 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
10042460:	b580      	push	{r7, lr}
10042462:	b082      	sub	sp, #8
10042464:	af00      	add	r7, sp, #0
10042466:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10042468:	687b      	ldr	r3, [r7, #4]
1004246a:	4a03      	ldr	r2, [pc, #12]	@ (10042478 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
1004246c:	4013      	ands	r3, r2
}
1004246e:	0018      	movs	r0, r3
10042470:	46bd      	mov	sp, r7
10042472:	b002      	add	sp, #8
10042474:	bd80      	pop	{r7, pc}
10042476:	46c0      	nop			@ (mov r8, r8)
10042478:	00c9df30 	.word	0x00c9df30

1004247c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
1004247c:	b580      	push	{r7, lr}
1004247e:	b082      	sub	sp, #8
10042480:	af00      	add	r7, sp, #0
10042482:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
10042484:	687a      	ldr	r2, [r7, #4]
10042486:	2380      	movs	r3, #128	@ 0x80
10042488:	03db      	lsls	r3, r3, #15
1004248a:	4013      	ands	r3, r2
}
1004248c:	0018      	movs	r0, r3
1004248e:	46bd      	mov	sp, r7
10042490:	b002      	add	sp, #8
10042492:	bd80      	pop	{r7, pc}

10042494 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
10042494:	b580      	push	{r7, lr}
10042496:	b082      	sub	sp, #8
10042498:	af00      	add	r7, sp, #0
1004249a:	6078      	str	r0, [r7, #4]
    return 0;
1004249c:	2300      	movs	r3, #0
}
1004249e:	0018      	movs	r0, r3
100424a0:	46bd      	mov	sp, r7
100424a2:	b002      	add	sp, #8
100424a4:	bd80      	pop	{r7, pc}

100424a6 <BLEPLAT_CNTR_IntGetIntStatusDone>:
}
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
100424a6:	b580      	push	{r7, lr}
100424a8:	b082      	sub	sp, #8
100424aa:	af00      	add	r7, sp, #0
100424ac:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
100424ae:	687a      	ldr	r2, [r7, #4]
100424b0:	2380      	movs	r3, #128	@ 0x80
100424b2:	049b      	lsls	r3, r3, #18
100424b4:	4013      	ands	r3, r2
}
100424b6:	0018      	movs	r0, r3
100424b8:	46bd      	mov	sp, r7
100424ba:	b002      	add	sp, #8
100424bc:	bd80      	pop	{r7, pc}

100424be <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
}
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
100424be:	b580      	push	{r7, lr}
100424c0:	b082      	sub	sp, #8
100424c2:	af00      	add	r7, sp, #0
100424c4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
100424c6:	687a      	ldr	r2, [r7, #4]
100424c8:	2380      	movs	r3, #128	@ 0x80
100424ca:	025b      	lsls	r3, r3, #9
100424cc:	4013      	ands	r3, r2
}
100424ce:	0018      	movs	r0, r3
100424d0:	46bd      	mov	sp, r7
100424d2:	b002      	add	sp, #8
100424d4:	bd80      	pop	{r7, pc}

100424d6 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
100424d6:	b580      	push	{r7, lr}
100424d8:	b082      	sub	sp, #8
100424da:	af00      	add	r7, sp, #0
100424dc:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
100424de:	687a      	ldr	r2, [r7, #4]
100424e0:	2380      	movs	r3, #128	@ 0x80
100424e2:	039b      	lsls	r3, r3, #14
100424e4:	4013      	ands	r3, r2
}
100424e6:	0018      	movs	r0, r3
100424e8:	46bd      	mov	sp, r7
100424ea:	b002      	add	sp, #8
100424ec:	bd80      	pop	{r7, pc}

100424ee <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
100424ee:	b580      	push	{r7, lr}
100424f0:	b082      	sub	sp, #8
100424f2:	af00      	add	r7, sp, #0
100424f4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
100424f6:	687a      	ldr	r2, [r7, #4]
100424f8:	2380      	movs	r3, #128	@ 0x80
100424fa:	009b      	lsls	r3, r3, #2
100424fc:	4013      	ands	r3, r2
}
100424fe:	0018      	movs	r0, r3
10042500:	46bd      	mov	sp, r7
10042502:	b002      	add	sp, #8
10042504:	bd80      	pop	{r7, pc}

10042506 <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
10042506:	b580      	push	{r7, lr}
10042508:	b082      	sub	sp, #8
1004250a:	af00      	add	r7, sp, #0
1004250c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
1004250e:	687a      	ldr	r2, [r7, #4]
10042510:	2380      	movs	r3, #128	@ 0x80
10042512:	011b      	lsls	r3, r3, #4
10042514:	4013      	ands	r3, r2
}
10042516:	0018      	movs	r0, r3
10042518:	46bd      	mov	sp, r7
1004251a:	b002      	add	sp, #8
1004251c:	bd80      	pop	{r7, pc}

1004251e <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
1004251e:	b580      	push	{r7, lr}
10042520:	b082      	sub	sp, #8
10042522:	af00      	add	r7, sp, #0
10042524:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
10042526:	687b      	ldr	r3, [r7, #4]
10042528:	0fdb      	lsrs	r3, r3, #31
1004252a:	07db      	lsls	r3, r3, #31
}
1004252c:	0018      	movs	r0, r3
1004252e:	46bd      	mov	sp, r7
10042530:	b002      	add	sp, #8
10042532:	bd80      	pop	{r7, pc}

10042534 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
10042534:	b580      	push	{r7, lr}
10042536:	b082      	sub	sp, #8
10042538:	af00      	add	r7, sp, #0
1004253a:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
1004253c:	687b      	ldr	r3, [r7, #4]
1004253e:	2240      	movs	r2, #64	@ 0x40
10042540:	4013      	ands	r3, r2
}
10042542:	0018      	movs	r0, r3
10042544:	46bd      	mov	sp, r7
10042546:	b002      	add	sp, #8
10042548:	bd80      	pop	{r7, pc}

1004254a <BLEPLAT_CNTR_PacketClrIncChan>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004254a:	b580      	push	{r7, lr}
1004254c:	b082      	sub	sp, #8
1004254e:	af00      	add	r7, sp, #0
10042550:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
10042552:	687b      	ldr	r3, [r7, #4]
10042554:	0018      	movs	r0, r3
10042556:	f7ff fdef 	bl	10042138 <LL_RADIO_IncrementerChannel_Disable>
}
1004255a:	46c0      	nop			@ (mov r8, r8)
1004255c:	46bd      	mov	sp, r7
1004255e:	b002      	add	sp, #8
10042560:	bd80      	pop	{r7, pc}

10042562 <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042562:	b580      	push	{r7, lr}
10042564:	b082      	sub	sp, #8
10042566:	af00      	add	r7, sp, #0
10042568:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
1004256a:	687b      	ldr	r3, [r7, #4]
1004256c:	2100      	movs	r1, #0
1004256e:	0018      	movs	r0, r3
10042570:	f7ff fda4 	bl	100420bc <LL_RADIO_SetCalibrationRequest>
}
10042574:	46c0      	nop			@ (mov r8, r8)
10042576:	46bd      	mov	sp, r7
10042578:	b002      	add	sp, #8
1004257a:	bd80      	pop	{r7, pc}

1004257c <BLEPLAT_CNTR_PacketInitTo0>:
{
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
}

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004257c:	b580      	push	{r7, lr}
1004257e:	b082      	sub	sp, #8
10042580:	af00      	add	r7, sp, #0
10042582:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10042584:	687b      	ldr	r3, [r7, #4]
10042586:	2210      	movs	r2, #16
10042588:	2100      	movs	r1, #0
1004258a:	0018      	movs	r0, r3
1004258c:	f00c fca4 	bl	1004eed8 <memset>
}
10042590:	46c0      	nop			@ (mov r8, r8)
10042592:	46bd      	mov	sp, r7
10042594:	b002      	add	sp, #8
10042596:	bd80      	pop	{r7, pc}

10042598 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042598:	b580      	push	{r7, lr}
1004259a:	b082      	sub	sp, #8
1004259c:	af00      	add	r7, sp, #0
1004259e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100425a0:	687b      	ldr	r3, [r7, #4]
100425a2:	2101      	movs	r1, #1
100425a4:	0018      	movs	r0, r3
100425a6:	f7ff fdb2 	bl	1004210e <LL_RADIO_SetAdvertise>
}
100425aa:	46c0      	nop			@ (mov r8, r8)
100425ac:	46bd      	mov	sp, r7
100425ae:	b002      	add	sp, #8
100425b0:	bd80      	pop	{r7, pc}

100425b2 <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
100425b2:	b580      	push	{r7, lr}
100425b4:	b082      	sub	sp, #8
100425b6:	af00      	add	r7, sp, #0
100425b8:	6078      	str	r0, [r7, #4]
100425ba:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
100425bc:	683a      	ldr	r2, [r7, #0]
100425be:	687b      	ldr	r3, [r7, #4]
100425c0:	0011      	movs	r1, r2
100425c2:	0018      	movs	r0, r3
100425c4:	f7ff fe10 	bl	100421e8 <LL_RADIO_SetDataPointer>
}
100425c8:	46c0      	nop			@ (mov r8, r8)
100425ca:	46bd      	mov	sp, r7
100425cc:	b002      	add	sp, #8
100425ce:	bd80      	pop	{r7, pc}

100425d0 <BLEPLAT_CNTR_PacketSetIntDone>:
{
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
}

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100425d0:	b580      	push	{r7, lr}
100425d2:	b082      	sub	sp, #8
100425d4:	af00      	add	r7, sp, #0
100425d6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
100425d8:	687b      	ldr	r3, [r7, #4]
100425da:	0018      	movs	r0, r3
100425dc:	f7ff fe64 	bl	100422a8 <LL_RADIO_IntDone_Enable>
}
100425e0:	46c0      	nop			@ (mov r8, r8)
100425e2:	46bd      	mov	sp, r7
100425e4:	b002      	add	sp, #8
100425e6:	bd80      	pop	{r7, pc}

100425e8 <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100425e8:	b580      	push	{r7, lr}
100425ea:	b082      	sub	sp, #8
100425ec:	af00      	add	r7, sp, #0
100425ee:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
100425f0:	687b      	ldr	r3, [r7, #4]
100425f2:	0018      	movs	r0, r3
100425f4:	f7ff fe67 	bl	100422c6 <LL_RADIO_IntRcvOk_Enable>
}
100425f8:	46c0      	nop			@ (mov r8, r8)
100425fa:	46bd      	mov	sp, r7
100425fc:	b002      	add	sp, #8
100425fe:	bd80      	pop	{r7, pc}

10042600 <BLEPLAT_CNTR_PacketSetKeepsemareq>:
{
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
}

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042600:	b580      	push	{r7, lr}
10042602:	b082      	sub	sp, #8
10042604:	af00      	add	r7, sp, #0
10042606:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042608:	687b      	ldr	r3, [r7, #4]
1004260a:	2101      	movs	r1, #1
1004260c:	0018      	movs	r0, r3
1004260e:	f7ff fd69 	bl	100420e4 <LL_RADIO_SetKeepSemaRequest>
}
10042612:	46c0      	nop			@ (mov r8, r8)
10042614:	46bd      	mov	sp, r7
10042616:	b002      	add	sp, #8
10042618:	bd80      	pop	{r7, pc}

1004261a <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
1004261a:	b580      	push	{r7, lr}
1004261c:	b082      	sub	sp, #8
1004261e:	af00      	add	r7, sp, #0
10042620:	6078      	str	r0, [r7, #4]
10042622:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
10042624:	683a      	ldr	r2, [r7, #0]
10042626:	687b      	ldr	r3, [r7, #4]
10042628:	0011      	movs	r1, r2
1004262a:	0018      	movs	r0, r3
1004262c:	f7ff fd38 	bl	100420a0 <LL_RADIO_SetNextPointer>
}
10042630:	46c0      	nop			@ (mov r8, r8)
10042632:	46bd      	mov	sp, r7
10042634:	b002      	add	sp, #8
10042636:	bd80      	pop	{r7, pc}

10042638 <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042638:	b580      	push	{r7, lr}
1004263a:	b082      	sub	sp, #8
1004263c:	af00      	add	r7, sp, #0
1004263e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10042640:	687b      	ldr	r3, [r7, #4]
10042642:	2100      	movs	r1, #0
10042644:	0018      	movs	r0, r3
10042646:	f7ff fd87 	bl	10042158 <LL_RADIO_SetNextTxMode>
}
1004264a:	46c0      	nop			@ (mov r8, r8)
1004264c:	46bd      	mov	sp, r7
1004264e:	b002      	add	sp, #8
10042650:	bd80      	pop	{r7, pc}

10042652 <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
10042652:	b580      	push	{r7, lr}
10042654:	b082      	sub	sp, #8
10042656:	af00      	add	r7, sp, #0
10042658:	6078      	str	r0, [r7, #4]
1004265a:	000a      	movs	r2, r1
1004265c:	1cfb      	adds	r3, r7, #3
1004265e:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
10042660:	46c0      	nop			@ (mov r8, r8)
10042662:	46bd      	mov	sp, r7
10042664:	b002      	add	sp, #8
10042666:	bd80      	pop	{r7, pc}

10042668 <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042668:	b580      	push	{r7, lr}
1004266a:	b082      	sub	sp, #8
1004266c:	af00      	add	r7, sp, #0
1004266e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042670:	687b      	ldr	r3, [r7, #4]
10042672:	2101      	movs	r1, #1
10042674:	0018      	movs	r0, r3
10042676:	f7ff fd6f 	bl	10042158 <LL_RADIO_SetNextTxMode>
}
1004267a:	46c0      	nop			@ (mov r8, r8)
1004267c:	46bd      	mov	sp, r7
1004267e:	b002      	add	sp, #8
10042680:	bd80      	pop	{r7, pc}

10042682 <BLEPLAT_CNTR_PacketSetPllTrig>:
{
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
}

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042682:	b580      	push	{r7, lr}
10042684:	b082      	sub	sp, #8
10042686:	af00      	add	r7, sp, #0
10042688:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004268a:	687b      	ldr	r3, [r7, #4]
1004268c:	2101      	movs	r1, #1
1004268e:	0018      	movs	r0, r3
10042690:	f7ff fd14 	bl	100420bc <LL_RADIO_SetCalibrationRequest>
}
10042694:	46c0      	nop			@ (mov r8, r8)
10042696:	46bd      	mov	sp, r7
10042698:	b002      	add	sp, #8
1004269a:	bd80      	pop	{r7, pc}

1004269c <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1004269c:	b580      	push	{r7, lr}
1004269e:	b082      	sub	sp, #8
100426a0:	af00      	add	r7, sp, #0
100426a2:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100426a4:	687b      	ldr	r3, [r7, #4]
100426a6:	2101      	movs	r1, #1
100426a8:	0018      	movs	r0, r3
100426aa:	f7ff fd6d 	bl	10042188 <LL_RADIO_SetAllTableDataReady>
}
100426ae:	46c0      	nop			@ (mov r8, r8)
100426b0:	46bd      	mov	sp, r7
100426b2:	b002      	add	sp, #8
100426b4:	bd80      	pop	{r7, pc}

100426b6 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
100426b6:	b580      	push	{r7, lr}
100426b8:	b082      	sub	sp, #8
100426ba:	af00      	add	r7, sp, #0
100426bc:	6078      	str	r0, [r7, #4]
100426be:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
100426c0:	683a      	ldr	r2, [r7, #0]
100426c2:	687b      	ldr	r3, [r7, #4]
100426c4:	0011      	movs	r1, r2
100426c6:	0018      	movs	r0, r3
100426c8:	f7ff fd9c 	bl	10042204 <LL_RADIO_SetTimer2Triggering>
}
100426cc:	46c0      	nop			@ (mov r8, r8)
100426ce:	46bd      	mov	sp, r7
100426d0:	b002      	add	sp, #8
100426d2:	bd80      	pop	{r7, pc}

100426d4 <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100426d4:	b580      	push	{r7, lr}
100426d6:	b082      	sub	sp, #8
100426d8:	af00      	add	r7, sp, #0
100426da:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
100426dc:	687b      	ldr	r3, [r7, #4]
100426de:	0018      	movs	r0, r3
100426e0:	f7ff fda3 	bl	1004222a <LL_RADIO_Timer2_Enable>
}
100426e4:	46c0      	nop			@ (mov r8, r8)
100426e6:	46bd      	mov	sp, r7
100426e8:	b002      	add	sp, #8
100426ea:	bd80      	pop	{r7, pc}

100426ec <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100426ec:	b580      	push	{r7, lr}
100426ee:	b082      	sub	sp, #8
100426f0:	af00      	add	r7, sp, #0
100426f2:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
100426f4:	687b      	ldr	r3, [r7, #4]
100426f6:	2101      	movs	r1, #1
100426f8:	0018      	movs	r0, r3
100426fa:	f7ff fdbd 	bl	10042278 <LL_RADIO_SetTrigDone>
}
100426fe:	46c0      	nop			@ (mov r8, r8)
10042700:	46bd      	mov	sp, r7
10042702:	b002      	add	sp, #8
10042704:	bd80      	pop	{r7, pc}

10042706 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042706:	b580      	push	{r7, lr}
10042708:	b082      	sub	sp, #8
1004270a:	af00      	add	r7, sp, #0
1004270c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
1004270e:	687b      	ldr	r3, [r7, #4]
10042710:	2101      	movs	r1, #1
10042712:	0018      	movs	r0, r3
10042714:	f7ff fd98 	bl	10042248 <LL_RADIO_SetTrigRcv>
}
10042718:	46c0      	nop			@ (mov r8, r8)
1004271a:	46bd      	mov	sp, r7
1004271c:	b002      	add	sp, #8
1004271e:	bd80      	pop	{r7, pc}

10042720 <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042720:	b580      	push	{r7, lr}
10042722:	b082      	sub	sp, #8
10042724:	af00      	add	r7, sp, #0
10042726:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042728:	687b      	ldr	r3, [r7, #4]
1004272a:	2101      	movs	r1, #1
1004272c:	0018      	movs	r0, r3
1004272e:	f7ff fd43 	bl	100421b8 <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10042732:	687b      	ldr	r3, [r7, #4]
10042734:	2101      	movs	r1, #1
10042736:	0018      	movs	r0, r3
10042738:	f7ff fd26 	bl	10042188 <LL_RADIO_SetAllTableDataReady>
}
1004273c:	46c0      	nop			@ (mov r8, r8)
1004273e:	46bd      	mov	sp, r7
10042740:	b002      	add	sp, #8
10042742:	bd80      	pop	{r7, pc}

10042744 <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
10042744:	b580      	push	{r7, lr}
10042746:	b082      	sub	sp, #8
10042748:	af00      	add	r7, sp, #0
1004274a:	6078      	str	r0, [r7, #4]
1004274c:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
1004274e:	683b      	ldr	r3, [r7, #0]
10042750:	031b      	lsls	r3, r3, #12
10042752:	0b1b      	lsrs	r3, r3, #12
10042754:	0018      	movs	r0, r3
10042756:	f7ff fa71 	bl	10041c3c <LL_RADIO_SetReceiveWindowTimeout>
}
1004275a:	46c0      	nop			@ (mov r8, r8)
1004275c:	46bd      	mov	sp, r7
1004275e:	b002      	add	sp, #8
10042760:	bd80      	pop	{r7, pc}

10042762 <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
10042762:	b580      	push	{r7, lr}
10042764:	b082      	sub	sp, #8
10042766:	af00      	add	r7, sp, #0
10042768:	0002      	movs	r2, r0
1004276a:	6039      	str	r1, [r7, #0]
1004276c:	1dfb      	adds	r3, r7, #7
1004276e:	701a      	strb	r2, [r3, #0]
    if(enable)
10042770:	683b      	ldr	r3, [r7, #0]
10042772:	2b00      	cmp	r3, #0
10042774:	d005      	beq.n	10042782 <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
10042776:	1dfb      	adds	r3, r7, #7
10042778:	781b      	ldrb	r3, [r3, #0]
1004277a:	0018      	movs	r0, r3
1004277c:	f7ff fa78 	bl	10041c70 <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
10042780:	e004      	b.n	1004278c <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
10042782:	1dfb      	adds	r3, r7, #7
10042784:	781b      	ldrb	r3, [r3, #0]
10042786:	0018      	movs	r0, r3
10042788:	f7ff fa90 	bl	10041cac <LL_RADIO_RadioCommandList_Disable>
}
1004278c:	46c0      	nop			@ (mov r8, r8)
1004278e:	46bd      	mov	sp, r7
10042790:	b002      	add	sp, #8
10042792:	bd80      	pop	{r7, pc}

10042794 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
10042794:	b580      	push	{r7, lr}
10042796:	b082      	sub	sp, #8
10042798:	af00      	add	r7, sp, #0
1004279a:	0002      	movs	r2, r0
1004279c:	1dfb      	adds	r3, r7, #7
1004279e:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
100427a0:	1dfb      	adds	r3, r7, #7
100427a2:	781b      	ldrb	r3, [r3, #0]
100427a4:	225c      	movs	r2, #92	@ 0x5c
100427a6:	4353      	muls	r3, r2
100427a8:	4a08      	ldr	r2, [pc, #32]	@ (100427cc <BLEPLAT_CNTR_SmInitTo0+0x38>)
100427aa:	4694      	mov	ip, r2
100427ac:	4463      	add	r3, ip
100427ae:	225c      	movs	r2, #92	@ 0x5c
100427b0:	2100      	movs	r1, #0
100427b2:	0018      	movs	r0, r3
100427b4:	f00c fb90 	bl	1004eed8 <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
100427b8:	1dfb      	adds	r3, r7, #7
100427ba:	781b      	ldrb	r3, [r3, #0]
100427bc:	2101      	movs	r1, #1
100427be:	0018      	movs	r0, r3
100427c0:	f7ff ffcf 	bl	10042762 <BLEPLAT_CNTR_SmEnRadioConfig>
}
100427c4:	46c0      	nop			@ (mov r8, r8)
100427c6:	46bd      	mov	sp, r7
100427c8:	b002      	add	sp, #8
100427ca:	bd80      	pop	{r7, pc}
100427cc:	200000dc 	.word	0x200000dc

100427d0 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
100427d0:	b580      	push	{r7, lr}
100427d2:	b082      	sub	sp, #8
100427d4:	af00      	add	r7, sp, #0
100427d6:	0002      	movs	r2, r0
100427d8:	6039      	str	r1, [r7, #0]
100427da:	1dfb      	adds	r3, r7, #7
100427dc:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
100427de:	683a      	ldr	r2, [r7, #0]
100427e0:	1dfb      	adds	r3, r7, #7
100427e2:	781b      	ldrb	r3, [r3, #0]
100427e4:	0011      	movs	r1, r2
100427e6:	0018      	movs	r0, r3
100427e8:	f7ff fb6e 	bl	10041ec8 <LL_RADIO_SetAccessAddress>
}
100427ec:	46c0      	nop			@ (mov r8, r8)
100427ee:	46bd      	mov	sp, r7
100427f0:	b002      	add	sp, #8
100427f2:	bd80      	pop	{r7, pc}

100427f4 <BLEPLAT_CNTR_SmSetCrcInit>:
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
}

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
100427f4:	b580      	push	{r7, lr}
100427f6:	b082      	sub	sp, #8
100427f8:	af00      	add	r7, sp, #0
100427fa:	0002      	movs	r2, r0
100427fc:	6039      	str	r1, [r7, #0]
100427fe:	1dfb      	adds	r3, r7, #7
10042800:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
10042802:	683a      	ldr	r2, [r7, #0]
10042804:	1dfb      	adds	r3, r7, #7
10042806:	781b      	ldrb	r3, [r3, #0]
10042808:	0011      	movs	r1, r2
1004280a:	0018      	movs	r0, r3
1004280c:	f7ff fb7a 	bl	10041f04 <LL_RADIO_SetCRCInitializationValue>
}
10042810:	46c0      	nop			@ (mov r8, r8)
10042812:	46bd      	mov	sp, r7
10042814:	b002      	add	sp, #8
10042816:	bd80      	pop	{r7, pc}

10042818 <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
10042818:	b580      	push	{r7, lr}
1004281a:	b082      	sub	sp, #8
1004281c:	af00      	add	r7, sp, #0
1004281e:	0002      	movs	r2, r0
10042820:	1dfb      	adds	r3, r7, #7
10042822:	701a      	strb	r2, [r3, #0]
10042824:	1dbb      	adds	r3, r7, #6
10042826:	1c0a      	adds	r2, r1, #0
10042828:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
1004282a:	1dbb      	adds	r3, r7, #6
1004282c:	781a      	ldrb	r2, [r3, #0]
1004282e:	1dfb      	adds	r3, r7, #7
10042830:	781b      	ldrb	r3, [r3, #0]
10042832:	0011      	movs	r1, r2
10042834:	0018      	movs	r0, r3
10042836:	f7ff fb89 	bl	10041f4c <LL_RADIO_SetMaximumReceiveLength>
}
1004283a:	46c0      	nop			@ (mov r8, r8)
1004283c:	46bd      	mov	sp, r7
1004283e:	b002      	add	sp, #8
10042840:	bd80      	pop	{r7, pc}

10042842 <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
10042842:	b580      	push	{r7, lr}
10042844:	b082      	sub	sp, #8
10042846:	af00      	add	r7, sp, #0
10042848:	0002      	movs	r2, r0
1004284a:	1dfb      	adds	r3, r7, #7
1004284c:	701a      	strb	r2, [r3, #0]
1004284e:	1dbb      	adds	r3, r7, #6
10042850:	1c0a      	adds	r2, r1, #0
10042852:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
10042854:	1dbb      	adds	r3, r7, #6
10042856:	781a      	ldrb	r2, [r3, #0]
10042858:	1dfb      	adds	r3, r7, #7
1004285a:	781b      	ldrb	r3, [r3, #0]
1004285c:	0011      	movs	r1, r2
1004285e:	0018      	movs	r0, r3
10042860:	f7ff fbf6 	bl	10042050 <LL_RADIO_SetHopIncrement>
}
10042864:	46c0      	nop			@ (mov r8, r8)
10042866:	46bd      	mov	sp, r7
10042868:	b002      	add	sp, #8
1004286a:	bd80      	pop	{r7, pc}

1004286c <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
1004286c:	b580      	push	{r7, lr}
1004286e:	b082      	sub	sp, #8
10042870:	af00      	add	r7, sp, #0
10042872:	0002      	movs	r2, r0
10042874:	1dfb      	adds	r3, r7, #7
10042876:	701a      	strb	r2, [r3, #0]
10042878:	1dbb      	adds	r3, r7, #6
1004287a:	1c0a      	adds	r2, r1, #0
1004287c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
1004287e:	1dbb      	adds	r3, r7, #6
10042880:	781a      	ldrb	r2, [r3, #0]
10042882:	1dfb      	adds	r3, r7, #7
10042884:	781b      	ldrb	r3, [r3, #0]
10042886:	0011      	movs	r1, r2
10042888:	0018      	movs	r0, r3
1004288a:	f7ff fa69 	bl	10041d60 <LL_RADIO_SetRemapChannel>
}
1004288e:	46c0      	nop			@ (mov r8, r8)
10042890:	46bd      	mov	sp, r7
10042892:	b002      	add	sp, #8
10042894:	bd80      	pop	{r7, pc}

10042896 <BLEPLAT_CNTR_SmSetRxMode>:
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
}

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10042896:	b580      	push	{r7, lr}
10042898:	b082      	sub	sp, #8
1004289a:	af00      	add	r7, sp, #0
1004289c:	0002      	movs	r2, r0
1004289e:	1dfb      	adds	r3, r7, #7
100428a0:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
100428a2:	1dfb      	adds	r3, r7, #7
100428a4:	781b      	ldrb	r3, [r3, #0]
100428a6:	0018      	movs	r0, r3
100428a8:	f7ff fa3c 	bl	10041d24 <LL_RADIO_TxMode_Disable>
}
100428ac:	46c0      	nop			@ (mov r8, r8)
100428ae:	46bd      	mov	sp, r7
100428b0:	b002      	add	sp, #8
100428b2:	bd80      	pop	{r7, pc}

100428b4 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100428b4:	b580      	push	{r7, lr}
100428b6:	b082      	sub	sp, #8
100428b8:	af00      	add	r7, sp, #0
100428ba:	0002      	movs	r2, r0
100428bc:	6039      	str	r1, [r7, #0]
100428be:	1dfb      	adds	r3, r7, #7
100428c0:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
100428c2:	683a      	ldr	r2, [r7, #0]
100428c4:	1dfb      	adds	r3, r7, #7
100428c6:	781b      	ldrb	r3, [r3, #0]
100428c8:	0011      	movs	r1, r2
100428ca:	0018      	movs	r0, r3
100428cc:	f7ff fade 	bl	10041e8c <LL_RADIO_SetRcvPoint>
}
100428d0:	46c0      	nop			@ (mov r8, r8)
100428d2:	46bd      	mov	sp, r7
100428d4:	b002      	add	sp, #8
100428d6:	bd80      	pop	{r7, pc}

100428d8 <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
100428d8:	b580      	push	{r7, lr}
100428da:	b082      	sub	sp, #8
100428dc:	af00      	add	r7, sp, #0
100428de:	0002      	movs	r2, r0
100428e0:	1dfb      	adds	r3, r7, #7
100428e2:	701a      	strb	r2, [r3, #0]
100428e4:	1dbb      	adds	r3, r7, #6
100428e6:	1c0a      	adds	r2, r1, #0
100428e8:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
100428ea:	1dbb      	adds	r3, r7, #6
100428ec:	781a      	ldrb	r2, [r3, #0]
100428ee:	1dfb      	adds	r3, r7, #7
100428f0:	781b      	ldrb	r3, [r3, #0]
100428f2:	0011      	movs	r1, r2
100428f4:	0018      	movs	r0, r3
100428f6:	f7ff fa83 	bl	10041e00 <LL_RADIO_SetReceptionPhy>
}
100428fa:	46c0      	nop			@ (mov r8, r8)
100428fc:	46bd      	mov	sp, r7
100428fe:	b002      	add	sp, #8
10042900:	bd80      	pop	{r7, pc}

10042902 <BLEPLAT_CNTR_SmSetTxMode>:
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
}

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
10042902:	b580      	push	{r7, lr}
10042904:	b082      	sub	sp, #8
10042906:	af00      	add	r7, sp, #0
10042908:	0002      	movs	r2, r0
1004290a:	1dfb      	adds	r3, r7, #7
1004290c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
1004290e:	1dfb      	adds	r3, r7, #7
10042910:	781b      	ldrb	r3, [r3, #0]
10042912:	0018      	movs	r0, r3
10042914:	f7ff f9e8 	bl	10041ce8 <LL_RADIO_TxMode_Enable>
}
10042918:	46c0      	nop			@ (mov r8, r8)
1004291a:	46bd      	mov	sp, r7
1004291c:	b002      	add	sp, #8
1004291e:	bd80      	pop	{r7, pc}

10042920 <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10042920:	b580      	push	{r7, lr}
10042922:	b082      	sub	sp, #8
10042924:	af00      	add	r7, sp, #0
10042926:	0002      	movs	r2, r0
10042928:	6039      	str	r1, [r7, #0]
1004292a:	1dfb      	adds	r3, r7, #7
1004292c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
1004292e:	683a      	ldr	r2, [r7, #0]
10042930:	1dfb      	adds	r3, r7, #7
10042932:	781b      	ldrb	r3, [r3, #0]
10042934:	0011      	movs	r1, r2
10042936:	0018      	movs	r0, r3
10042938:	f7ff fa8a 	bl	10041e50 <LL_RADIO_SetTxPoint>
}
1004293c:	46c0      	nop			@ (mov r8, r8)
1004293e:	46bd      	mov	sp, r7
10042940:	b002      	add	sp, #8
10042942:	bd80      	pop	{r7, pc}

10042944 <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10042944:	b580      	push	{r7, lr}
10042946:	b082      	sub	sp, #8
10042948:	af00      	add	r7, sp, #0
1004294a:	0002      	movs	r2, r0
1004294c:	1dfb      	adds	r3, r7, #7
1004294e:	701a      	strb	r2, [r3, #0]
10042950:	1dbb      	adds	r3, r7, #6
10042952:	1c0a      	adds	r2, r1, #0
10042954:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10042956:	1dbb      	adds	r3, r7, #6
10042958:	781a      	ldrb	r2, [r3, #0]
1004295a:	1dfb      	adds	r3, r7, #7
1004295c:	781b      	ldrb	r3, [r3, #0]
1004295e:	0011      	movs	r1, r2
10042960:	0018      	movs	r0, r3
10042962:	f7ff fa25 	bl	10041db0 <LL_RADIO_SetTransmissionPhy>
}
10042966:	46c0      	nop			@ (mov r8, r8)
10042968:	46bd      	mov	sp, r7
1004296a:	b002      	add	sp, #8
1004296c:	bd80      	pop	{r7, pc}

1004296e <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
1004296e:	b580      	push	{r7, lr}
10042970:	b082      	sub	sp, #8
10042972:	af00      	add	r7, sp, #0
10042974:	0002      	movs	r2, r0
10042976:	1dfb      	adds	r3, r7, #7
10042978:	701a      	strb	r2, [r3, #0]
1004297a:	1dbb      	adds	r3, r7, #6
1004297c:	1c0a      	adds	r2, r1, #0
1004297e:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  if(paLevel == HP_PA_LEVEL)
10042980:	1dbb      	adds	r3, r7, #6
10042982:	781b      	ldrb	r3, [r3, #0]
10042984:	2b20      	cmp	r3, #32
10042986:	d108      	bne.n	1004299a <BLEPLAT_CNTR_SmSetTxPwr+0x2c>
  {
    LL_RADIO_TxHp_Enable(smNo);
10042988:	1dfb      	adds	r3, r7, #7
1004298a:	781b      	ldrb	r3, [r3, #0]
1004298c:	0018      	movs	r0, r3
1004298e:	f7ff faff 	bl	10041f90 <LL_RADIO_TxHp_Enable>
    paLevel = MAX_PA_LEVEL;
10042992:	1dbb      	adds	r3, r7, #6
10042994:	221f      	movs	r2, #31
10042996:	701a      	strb	r2, [r3, #0]
10042998:	e004      	b.n	100429a4 <BLEPLAT_CNTR_SmSetTxPwr+0x36>
  }
  else
  {
    LL_RADIO_TxHp_Disable(smNo);
1004299a:	1dfb      	adds	r3, r7, #7
1004299c:	781b      	ldrb	r3, [r3, #0]
1004299e:	0018      	movs	r0, r3
100429a0:	f7ff fb14 	bl	10041fcc <LL_RADIO_TxHp_Disable>
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
100429a4:	1dbb      	adds	r3, r7, #6
100429a6:	781a      	ldrb	r2, [r3, #0]
100429a8:	1dfb      	adds	r3, r7, #7
100429aa:	781b      	ldrb	r3, [r3, #0]
100429ac:	0011      	movs	r1, r2
100429ae:	0018      	movs	r0, r3
100429b0:	f7ff fb2a 	bl	10042008 <LL_RADIO_SetPAPower>
}
100429b4:	46c0      	nop			@ (mov r8, r8)
100429b6:	46bd      	mov	sp, r7
100429b8:	b002      	add	sp, #8
100429ba:	bd80      	pop	{r7, pc}

100429bc <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
100429bc:	4810      	ldr	r0, [pc, #64]	@ (10042a00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
100429be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
100429c0:	f002 ff0c 	bl	100457dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
100429c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
100429c6:	e003      	b.n	100429d0 <LoopCopyDataInit>

100429c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
100429c8:	4b0e      	ldr	r3, [pc, #56]	@ (10042a04 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
100429ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
100429cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
100429ce:	3104      	adds	r1, #4

100429d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
100429d0:	480d      	ldr	r0, [pc, #52]	@ (10042a08 <LoopForever+0xa>)
  ldr  r3, =_edata
100429d2:	4b0e      	ldr	r3, [pc, #56]	@ (10042a0c <LoopForever+0xe>)
  adds  r2, r0, r1
100429d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
100429d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
100429d8:	d3f6      	bcc.n	100429c8 <CopyDataInit>
  ldr  r2, =_sbss
100429da:	4a0d      	ldr	r2, [pc, #52]	@ (10042a10 <LoopForever+0x12>)
  b  LoopFillZerobss
100429dc:	e002      	b.n	100429e4 <LoopFillZerobss>

100429de <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
100429de:	2300      	movs	r3, #0
  str  r3, [r2]
100429e0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
100429e2:	3204      	adds	r2, #4

100429e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
100429e4:	4b0b      	ldr	r3, [pc, #44]	@ (10042a14 <LoopForever+0x16>)
  cmp  r2, r3
100429e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
100429e8:	d3f9      	bcc.n	100429de <FillZerobss>
  ldr  r2, =_sbssblue
100429ea:	4a0b      	ldr	r2, [pc, #44]	@ (10042a18 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
100429ec:	e002      	b.n	100429f4 <LoopFillZeroBlueRam>

100429ee <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
100429ee:	2300      	movs	r3, #0
  str  r3, [r2]
100429f0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
100429f2:	3204      	adds	r2, #4

100429f4 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
100429f4:	4b09      	ldr	r3, [pc, #36]	@ (10042a1c <LoopForever+0x1e>)
  cmp  r2, r3
100429f6:	429a      	cmp	r2, r3
  bcc  FillZerobssram
100429f8:	d3f9      	bcc.n	100429ee <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
100429fa:	f7fe f917 	bl	10040c2c <main>

100429fe <LoopForever>:

LoopForever:
    b LoopForever
100429fe:	e7fe      	b.n	100429fe <LoopForever>
   ldr   r0, =_estack
10042a00:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
10042a04:	1004feec 	.word	0x1004feec
  ldr  r0, =_sdata
10042a08:	20000cd4 	.word	0x20000cd4
  ldr  r3, =_edata
10042a0c:	20000d84 	.word	0x20000d84
  ldr  r2, =_sbss
10042a10:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10042a14:	20000cd4 	.word	0x20000cd4
  ldr  r2, =_sbssblue
10042a18:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10042a1c:	20000194 	.word	0x20000194

10042a20 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10042a20:	e7fe      	b.n	10042a20 <ADC_IRQHandler>

10042a22 <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
10042a22:	b580      	push	{r7, lr}
10042a24:	b082      	sub	sp, #8
10042a26:	af00      	add	r7, sp, #0
10042a28:	0002      	movs	r2, r0
10042a2a:	1dfb      	adds	r3, r7, #7
10042a2c:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10042a2e:	46c0      	nop			@ (mov r8, r8)
10042a30:	46bd      	mov	sp, r7
10042a32:	b002      	add	sp, #8
10042a34:	bd80      	pop	{r7, pc}

10042a36 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10042a36:	b580      	push	{r7, lr}
10042a38:	b082      	sub	sp, #8
10042a3a:	af00      	add	r7, sp, #0
10042a3c:	0002      	movs	r2, r0
10042a3e:	1dfb      	adds	r3, r7, #7
10042a40:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10042a42:	46c0      	nop			@ (mov r8, r8)
10042a44:	46bd      	mov	sp, r7
10042a46:	b002      	add	sp, #8
10042a48:	bd80      	pop	{r7, pc}

10042a4a <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10042a4a:	b580      	push	{r7, lr}
10042a4c:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10042a4e:	46c0      	nop			@ (mov r8, r8)
10042a50:	46bd      	mov	sp, r7
10042a52:	bd80      	pop	{r7, pc}

10042a54 <LL_APB2_GRP1_EnableClock>:
{
10042a54:	b580      	push	{r7, lr}
10042a56:	b084      	sub	sp, #16
10042a58:	af00      	add	r7, sp, #0
10042a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
10042a5c:	4b07      	ldr	r3, [pc, #28]	@ (10042a7c <LL_APB2_GRP1_EnableClock+0x28>)
10042a5e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10042a60:	4b06      	ldr	r3, [pc, #24]	@ (10042a7c <LL_APB2_GRP1_EnableClock+0x28>)
10042a62:	687a      	ldr	r2, [r7, #4]
10042a64:	430a      	orrs	r2, r1
10042a66:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10042a68:	4b04      	ldr	r3, [pc, #16]	@ (10042a7c <LL_APB2_GRP1_EnableClock+0x28>)
10042a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042a6c:	687a      	ldr	r2, [r7, #4]
10042a6e:	4013      	ands	r3, r2
10042a70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042a72:	68fb      	ldr	r3, [r7, #12]
}
10042a74:	46c0      	nop			@ (mov r8, r8)
10042a76:	46bd      	mov	sp, r7
10042a78:	b004      	add	sp, #16
10042a7a:	bd80      	pop	{r7, pc}
10042a7c:	48400000 	.word	0x48400000

10042a80 <LL_APB2_GRP1_IsEnabledClock>:
{
10042a80:	b580      	push	{r7, lr}
10042a82:	b082      	sub	sp, #8
10042a84:	af00      	add	r7, sp, #0
10042a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10042a88:	4b06      	ldr	r3, [pc, #24]	@ (10042aa4 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10042a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10042a8c:	687a      	ldr	r2, [r7, #4]
10042a8e:	4013      	ands	r3, r2
10042a90:	687a      	ldr	r2, [r7, #4]
10042a92:	429a      	cmp	r2, r3
10042a94:	d101      	bne.n	10042a9a <LL_APB2_GRP1_IsEnabledClock+0x1a>
10042a96:	2301      	movs	r3, #1
10042a98:	e000      	b.n	10042a9c <LL_APB2_GRP1_IsEnabledClock+0x1c>
10042a9a:	2300      	movs	r3, #0
}
10042a9c:	0018      	movs	r0, r3
10042a9e:	46bd      	mov	sp, r7
10042aa0:	b002      	add	sp, #8
10042aa2:	bd80      	pop	{r7, pc}
10042aa4:	48400000 	.word	0x48400000

10042aa8 <LL_APB2_GRP1_ForceReset>:
{
10042aa8:	b580      	push	{r7, lr}
10042aaa:	b082      	sub	sp, #8
10042aac:	af00      	add	r7, sp, #0
10042aae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10042ab0:	4b04      	ldr	r3, [pc, #16]	@ (10042ac4 <LL_APB2_GRP1_ForceReset+0x1c>)
10042ab2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10042ab4:	4b03      	ldr	r3, [pc, #12]	@ (10042ac4 <LL_APB2_GRP1_ForceReset+0x1c>)
10042ab6:	687a      	ldr	r2, [r7, #4]
10042ab8:	430a      	orrs	r2, r1
10042aba:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042abc:	46c0      	nop			@ (mov r8, r8)
10042abe:	46bd      	mov	sp, r7
10042ac0:	b002      	add	sp, #8
10042ac2:	bd80      	pop	{r7, pc}
10042ac4:	48400000 	.word	0x48400000

10042ac8 <LL_APB2_GRP1_ReleaseReset>:
{
10042ac8:	b580      	push	{r7, lr}
10042aca:	b082      	sub	sp, #8
10042acc:	af00      	add	r7, sp, #0
10042ace:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10042ad0:	4b05      	ldr	r3, [pc, #20]	@ (10042ae8 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042ad2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10042ad4:	687b      	ldr	r3, [r7, #4]
10042ad6:	43d9      	mvns	r1, r3
10042ad8:	4b03      	ldr	r3, [pc, #12]	@ (10042ae8 <LL_APB2_GRP1_ReleaseReset+0x20>)
10042ada:	400a      	ands	r2, r1
10042adc:	641a      	str	r2, [r3, #64]	@ 0x40
}
10042ade:	46c0      	nop			@ (mov r8, r8)
10042ae0:	46bd      	mov	sp, r7
10042ae2:	b002      	add	sp, #8
10042ae4:	bd80      	pop	{r7, pc}
10042ae6:	46c0      	nop			@ (mov r8, r8)
10042ae8:	48400000 	.word	0x48400000

10042aec <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
10042aec:	b580      	push	{r7, lr}
10042aee:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10042af0:	2001      	movs	r0, #1
10042af2:	f7ff ffc5 	bl	10042a80 <LL_APB2_GRP1_IsEnabledClock>
10042af6:	1e03      	subs	r3, r0, #0
10042af8:	d108      	bne.n	10042b0c <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
10042afa:	2001      	movs	r0, #1
10042afc:	f7ff ffd4 	bl	10042aa8 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
10042b00:	2001      	movs	r0, #1
10042b02:	f7ff ffe1 	bl	10042ac8 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
10042b06:	2001      	movs	r0, #1
10042b08:	f7ff ffa4 	bl	10042a54 <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
10042b0c:	2300      	movs	r3, #0
}
10042b0e:	0018      	movs	r0, r3
10042b10:	46bd      	mov	sp, r7
10042b12:	bd80      	pop	{r7, pc}

10042b14 <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
10042b14:	b590      	push	{r4, r7, lr}
10042b16:	b087      	sub	sp, #28
10042b18:	af00      	add	r7, sp, #0
10042b1a:	60f8      	str	r0, [r7, #12]
10042b1c:	60b9      	str	r1, [r7, #8]
10042b1e:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
10042b20:	4b31      	ldr	r3, [pc, #196]	@ (10042be8 <HW_AES_Encrypt+0xd4>)
10042b22:	781b      	ldrb	r3, [r3, #0]
10042b24:	b2db      	uxtb	r3, r3
10042b26:	3301      	adds	r3, #1
10042b28:	b2da      	uxtb	r2, r3
10042b2a:	4b2f      	ldr	r3, [pc, #188]	@ (10042be8 <HW_AES_Encrypt+0xd4>)
10042b2c:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
10042b2e:	2417      	movs	r4, #23
10042b30:	193b      	adds	r3, r7, r4
10042b32:	4a2d      	ldr	r2, [pc, #180]	@ (10042be8 <HW_AES_Encrypt+0xd4>)
10042b34:	7812      	ldrb	r2, [r2, #0]
10042b36:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
10042b38:	23c0      	movs	r3, #192	@ 0xc0
10042b3a:	05db      	lsls	r3, r3, #23
10042b3c:	68ba      	ldr	r2, [r7, #8]
10042b3e:	6812      	ldr	r2, [r2, #0]
10042b40:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
10042b42:	68bb      	ldr	r3, [r7, #8]
10042b44:	1d1a      	adds	r2, r3, #4
10042b46:	23c0      	movs	r3, #192	@ 0xc0
10042b48:	05db      	lsls	r3, r3, #23
10042b4a:	6812      	ldr	r2, [r2, #0]
10042b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
10042b4e:	68bb      	ldr	r3, [r7, #8]
10042b50:	3308      	adds	r3, #8
10042b52:	001a      	movs	r2, r3
10042b54:	23c0      	movs	r3, #192	@ 0xc0
10042b56:	05db      	lsls	r3, r3, #23
10042b58:	6812      	ldr	r2, [r2, #0]
10042b5a:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
10042b5c:	68bb      	ldr	r3, [r7, #8]
10042b5e:	330c      	adds	r3, #12
10042b60:	001a      	movs	r2, r3
10042b62:	23c0      	movs	r3, #192	@ 0xc0
10042b64:	05db      	lsls	r3, r3, #23
10042b66:	6812      	ldr	r2, [r2, #0]
10042b68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
10042b6a:	23c0      	movs	r3, #192	@ 0xc0
10042b6c:	05db      	lsls	r3, r3, #23
10042b6e:	68fa      	ldr	r2, [r7, #12]
10042b70:	6812      	ldr	r2, [r2, #0]
10042b72:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
10042b74:	68fb      	ldr	r3, [r7, #12]
10042b76:	1d1a      	adds	r2, r3, #4
10042b78:	23c0      	movs	r3, #192	@ 0xc0
10042b7a:	05db      	lsls	r3, r3, #23
10042b7c:	6812      	ldr	r2, [r2, #0]
10042b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
10042b80:	68fb      	ldr	r3, [r7, #12]
10042b82:	3308      	adds	r3, #8
10042b84:	001a      	movs	r2, r3
10042b86:	23c0      	movs	r3, #192	@ 0xc0
10042b88:	05db      	lsls	r3, r3, #23
10042b8a:	6812      	ldr	r2, [r2, #0]
10042b8c:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
10042b8e:	68fb      	ldr	r3, [r7, #12]
10042b90:	330c      	adds	r3, #12
10042b92:	001a      	movs	r2, r3
10042b94:	23c0      	movs	r3, #192	@ 0xc0
10042b96:	05db      	lsls	r3, r3, #23
10042b98:	6812      	ldr	r2, [r2, #0]
10042b9a:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
10042b9c:	f000 f826 	bl	10042bec <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
10042ba0:	23c0      	movs	r3, #192	@ 0xc0
10042ba2:	05db      	lsls	r3, r3, #23
10042ba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10042ba6:	687b      	ldr	r3, [r7, #4]
10042ba8:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
10042baa:	23c0      	movs	r3, #192	@ 0xc0
10042bac:	05da      	lsls	r2, r3, #23
10042bae:	687b      	ldr	r3, [r7, #4]
10042bb0:	3304      	adds	r3, #4
10042bb2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
10042bb4:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
10042bb6:	23c0      	movs	r3, #192	@ 0xc0
10042bb8:	05da      	lsls	r2, r3, #23
10042bba:	687b      	ldr	r3, [r7, #4]
10042bbc:	3308      	adds	r3, #8
10042bbe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10042bc0:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
10042bc2:	23c0      	movs	r3, #192	@ 0xc0
10042bc4:	05da      	lsls	r2, r3, #23
10042bc6:	687b      	ldr	r3, [r7, #4]
10042bc8:	330c      	adds	r3, #12
10042bca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
10042bcc:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
10042bce:	4b06      	ldr	r3, [pc, #24]	@ (10042be8 <HW_AES_Encrypt+0xd4>)
10042bd0:	781b      	ldrb	r3, [r3, #0]
10042bd2:	b2db      	uxtb	r3, r3
10042bd4:	193a      	adds	r2, r7, r4
10042bd6:	7812      	ldrb	r2, [r2, #0]
10042bd8:	429a      	cmp	r2, r3
10042bda:	d1a8      	bne.n	10042b2e <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
10042bdc:	2300      	movs	r3, #0
}
10042bde:	0018      	movs	r0, r3
10042be0:	46bd      	mov	sp, r7
10042be2:	b007      	add	sp, #28
10042be4:	bd90      	pop	{r4, r7, pc}
10042be6:	46c0      	nop			@ (mov r8, r8)
10042be8:	20000360 	.word	0x20000360

10042bec <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
10042bec:	b580      	push	{r7, lr}
10042bee:	b082      	sub	sp, #8
10042bf0:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
10042bf2:	1dfb      	adds	r3, r7, #7
10042bf4:	2264      	movs	r2, #100	@ 0x64
10042bf6:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
10042bf8:	23c0      	movs	r3, #192	@ 0xc0
10042bfa:	05db      	lsls	r3, r3, #23
10042bfc:	0018      	movs	r0, r3
10042bfe:	f000 f81c 	bl	10042c3a <LL_AES_StartManualEncription>
    do
    {
        i--;
10042c02:	1dfb      	adds	r3, r7, #7
10042c04:	781b      	ldrb	r3, [r3, #0]
10042c06:	b2db      	uxtb	r3, r3
10042c08:	3b01      	subs	r3, #1
10042c0a:	b2da      	uxtb	r2, r3
10042c0c:	1dfb      	adds	r3, r7, #7
10042c0e:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
10042c10:	23c0      	movs	r3, #192	@ 0xc0
10042c12:	05db      	lsls	r3, r3, #23
10042c14:	0018      	movs	r0, r3
10042c16:	f000 f81e 	bl	10042c56 <LL_AES_IsBusy>
10042c1a:	1e03      	subs	r3, r0, #0
10042c1c:	d005      	beq.n	10042c2a <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
10042c1e:	1dfb      	adds	r3, r7, #7
10042c20:	781b      	ldrb	r3, [r3, #0]
10042c22:	b2db      	uxtb	r3, r3
10042c24:	2b00      	cmp	r3, #0
10042c26:	d1ec      	bne.n	10042c02 <HW_AES_Start+0x16>
10042c28:	e000      	b.n	10042c2c <HW_AES_Start+0x40>
            break;
10042c2a:	46c0      	nop			@ (mov r8, r8)

    return i;
10042c2c:	1dfb      	adds	r3, r7, #7
10042c2e:	781b      	ldrb	r3, [r3, #0]
10042c30:	b2db      	uxtb	r3, r3
}
10042c32:	0018      	movs	r0, r3
10042c34:	46bd      	mov	sp, r7
10042c36:	b002      	add	sp, #8
10042c38:	bd80      	pop	{r7, pc}

10042c3a <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
10042c3a:	b580      	push	{r7, lr}
10042c3c:	b082      	sub	sp, #8
10042c3e:	af00      	add	r7, sp, #0
10042c40:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
10042c42:	687b      	ldr	r3, [r7, #4]
10042c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10042c46:	2201      	movs	r2, #1
10042c48:	431a      	orrs	r2, r3
10042c4a:	687b      	ldr	r3, [r7, #4]
10042c4c:	659a      	str	r2, [r3, #88]	@ 0x58
}
10042c4e:	46c0      	nop			@ (mov r8, r8)
10042c50:	46bd      	mov	sp, r7
10042c52:	b002      	add	sp, #8
10042c54:	bd80      	pop	{r7, pc}

10042c56 <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
10042c56:	b580      	push	{r7, lr}
10042c58:	b082      	sub	sp, #8
10042c5a:	af00      	add	r7, sp, #0
10042c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
10042c5e:	687b      	ldr	r3, [r7, #4]
10042c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10042c62:	2201      	movs	r2, #1
10042c64:	4013      	ands	r3, r2
10042c66:	2b01      	cmp	r3, #1
10042c68:	d101      	bne.n	10042c6e <LL_AES_IsBusy+0x18>
10042c6a:	2301      	movs	r3, #1
10042c6c:	e000      	b.n	10042c70 <LL_AES_IsBusy+0x1a>
10042c6e:	2300      	movs	r3, #0
}
10042c70:	0018      	movs	r0, r3
10042c72:	46bd      	mov	sp, r7
10042c74:	b002      	add	sp, #8
10042c76:	bd80      	pop	{r7, pc}

10042c78 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
10042c78:	b580      	push	{r7, lr}
10042c7a:	b082      	sub	sp, #8
10042c7c:	af00      	add	r7, sp, #0
10042c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
10042c80:	687b      	ldr	r3, [r7, #4]
10042c82:	681b      	ldr	r3, [r3, #0]
10042c84:	2280      	movs	r2, #128	@ 0x80
10042c86:	0352      	lsls	r2, r2, #13
10042c88:	431a      	orrs	r2, r3
10042c8a:	687b      	ldr	r3, [r7, #4]
10042c8c:	601a      	str	r2, [r3, #0]
}
10042c8e:	46c0      	nop			@ (mov r8, r8)
10042c90:	46bd      	mov	sp, r7
10042c92:	b002      	add	sp, #8
10042c94:	bd80      	pop	{r7, pc}

10042c96 <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
10042c96:	b580      	push	{r7, lr}
10042c98:	b082      	sub	sp, #8
10042c9a:	af00      	add	r7, sp, #0
10042c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
10042c9e:	687b      	ldr	r3, [r7, #4]
10042ca0:	681b      	ldr	r3, [r3, #0]
10042ca2:	2280      	movs	r2, #128	@ 0x80
10042ca4:	0312      	lsls	r2, r2, #12
10042ca6:	431a      	orrs	r2, r3
10042ca8:	687b      	ldr	r3, [r7, #4]
10042caa:	601a      	str	r2, [r3, #0]
}
10042cac:	46c0      	nop			@ (mov r8, r8)
10042cae:	46bd      	mov	sp, r7
10042cb0:	b002      	add	sp, #8
10042cb2:	bd80      	pop	{r7, pc}

10042cb4 <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
10042cb4:	b580      	push	{r7, lr}
10042cb6:	b082      	sub	sp, #8
10042cb8:	af00      	add	r7, sp, #0
10042cba:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
10042cbc:	687b      	ldr	r3, [r7, #4]
10042cbe:	681b      	ldr	r3, [r3, #0]
10042cc0:	2280      	movs	r2, #128	@ 0x80
10042cc2:	0292      	lsls	r2, r2, #10
10042cc4:	431a      	orrs	r2, r3
10042cc6:	687b      	ldr	r3, [r7, #4]
10042cc8:	601a      	str	r2, [r3, #0]
}
10042cca:	46c0      	nop			@ (mov r8, r8)
10042ccc:	46bd      	mov	sp, r7
10042cce:	b002      	add	sp, #8
10042cd0:	bd80      	pop	{r7, pc}
	...

10042cd4 <HW_PKA_ReadResult>:

#endif

#if defined(STM32WB05) || defined(STM32WB09)
void HW_PKA_ReadResult( uint32_t index, int size, uint32_t* out )
{
10042cd4:	b580      	push	{r7, lr}
10042cd6:	b086      	sub	sp, #24
10042cd8:	af00      	add	r7, sp, #0
10042cda:	60f8      	str	r0, [r7, #12]
10042cdc:	60b9      	str	r1, [r7, #8]
10042cde:	607a      	str	r2, [r7, #4]
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
10042ce0:	68fb      	ldr	r3, [r7, #12]
10042ce2:	009b      	lsls	r3, r3, #2
10042ce4:	4a0b      	ldr	r2, [pc, #44]	@ (10042d14 <HW_PKA_ReadResult+0x40>)
10042ce6:	4694      	mov	ip, r2
10042ce8:	4463      	add	r3, ip
10042cea:	617b      	str	r3, [r7, #20]
  /* Read from PKA RAM */
  for ( ; size > 0; size-- )
10042cec:	e00a      	b.n	10042d04 <HW_PKA_ReadResult+0x30>
  {
    *out++ = *pka_ram++;
10042cee:	697a      	ldr	r2, [r7, #20]
10042cf0:	1d13      	adds	r3, r2, #4
10042cf2:	617b      	str	r3, [r7, #20]
10042cf4:	687b      	ldr	r3, [r7, #4]
10042cf6:	1d19      	adds	r1, r3, #4
10042cf8:	6079      	str	r1, [r7, #4]
10042cfa:	6812      	ldr	r2, [r2, #0]
10042cfc:	601a      	str	r2, [r3, #0]
  for ( ; size > 0; size-- )
10042cfe:	68bb      	ldr	r3, [r7, #8]
10042d00:	3b01      	subs	r3, #1
10042d02:	60bb      	str	r3, [r7, #8]
10042d04:	68bb      	ldr	r3, [r7, #8]
10042d06:	2b00      	cmp	r3, #0
10042d08:	dcf1      	bgt.n	10042cee <HW_PKA_ReadResult+0x1a>
  }
}
10042d0a:	46c0      	nop			@ (mov r8, r8)
10042d0c:	46c0      	nop			@ (mov r8, r8)
10042d0e:	46bd      	mov	sp, r7
10042d10:	b006      	add	sp, #24
10042d12:	bd80      	pop	{r7, pc}
10042d14:	48300400 	.word	0x48300400

10042d18 <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
10042d18:	b580      	push	{r7, lr}
10042d1a:	af00      	add	r7, sp, #0
  PKAMGR_Init();
10042d1c:	f001 fec0 	bl	10044aa0 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
10042d20:	4b07      	ldr	r3, [pc, #28]	@ (10042d40 <HW_PKA_Init+0x28>)
10042d22:	0018      	movs	r0, r3
10042d24:	f7ff ffa8 	bl	10042c78 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
10042d28:	4b05      	ldr	r3, [pc, #20]	@ (10042d40 <HW_PKA_Init+0x28>)
10042d2a:	0018      	movs	r0, r3
10042d2c:	f7ff ffb3 	bl	10042c96 <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
10042d30:	4b03      	ldr	r3, [pc, #12]	@ (10042d40 <HW_PKA_Init+0x28>)
10042d32:	0018      	movs	r0, r3
10042d34:	f7ff ffbe 	bl	10042cb4 <LL_PKA_EnableIT_PROCEND>
}
10042d38:	46c0      	nop			@ (mov r8, r8)
10042d3a:	46bd      	mov	sp, r7
10042d3c:	bd80      	pop	{r7, pc}
10042d3e:	46c0      	nop			@ (mov r8, r8)
10042d40:	48300000 	.word	0x48300000

10042d44 <HW_PKA_PowerSaveLevelCheck>:

uint8_t HW_PKA_PowerSaveLevelCheck(void)
{
10042d44:	b580      	push	{r7, lr}
10042d46:	af00      	add	r7, sp, #0
  if(PKAMGR_SleepCheck()==PKAMGR_SUCCESS)
10042d48:	f001 feb6 	bl	10044ab8 <PKAMGR_SleepCheck>
10042d4c:	1e03      	subs	r3, r0, #0
10042d4e:	d101      	bne.n	10042d54 <HW_PKA_PowerSaveLevelCheck+0x10>
  {
    return POWER_SAVE_LEVEL_STOP;
10042d50:	2303      	movs	r3, #3
10042d52:	e000      	b.n	10042d56 <HW_PKA_PowerSaveLevelCheck+0x12>
  }
  else // PKA on going
  {
    return POWER_SAVE_LEVEL_CPU_HALT;
10042d54:	2301      	movs	r3, #1
  }
}
10042d56:	0018      	movs	r0, r3
10042d58:	46bd      	mov	sp, r7
10042d5a:	bd80      	pop	{r7, pc}

10042d5c <HW_PKA_ExitWithError>:
  * @param
  * @param
  *
  */
void HW_PKA_ExitWithError(uint32_t errorCode)
{
10042d5c:	b580      	push	{r7, lr}
10042d5e:	b084      	sub	sp, #16
10042d60:	af00      	add	r7, sp, #0
10042d62:	6078      	str	r0, [r7, #4]
  internalStateMachine_Operation = 0;
10042d64:	4b14      	ldr	r3, [pc, #80]	@ (10042db8 <HW_PKA_ExitWithError+0x5c>)
10042d66:	2200      	movs	r2, #0
10042d68:	601a      	str	r2, [r3, #0]
  internalStateMachine_Step = 0;
10042d6a:	4b14      	ldr	r3, [pc, #80]	@ (10042dbc <HW_PKA_ExitWithError+0x60>)
10042d6c:	2200      	movs	r2, #0
10042d6e:	601a      	str	r2, [r3, #0]
  PKAMGR_Unlock();
10042d70:	f001 feb8 	bl	10044ae4 <PKAMGR_Unlock>
  ret[0]=errorCode;
10042d74:	4b12      	ldr	r3, [pc, #72]	@ (10042dc0 <HW_PKA_ExitWithError+0x64>)
10042d76:	687a      	ldr	r2, [r7, #4]
10042d78:	601a      	str	r2, [r3, #0]
  for(int i=0; i<8; i++)
10042d7a:	2300      	movs	r3, #0
10042d7c:	60fb      	str	r3, [r7, #12]
10042d7e:	e00c      	b.n	10042d9a <HW_PKA_ExitWithError+0x3e>
  {
    ret[i+16] = bufferSecretKey[i];
10042d80:	68fb      	ldr	r3, [r7, #12]
10042d82:	3310      	adds	r3, #16
10042d84:	001a      	movs	r2, r3
10042d86:	4b0f      	ldr	r3, [pc, #60]	@ (10042dc4 <HW_PKA_ExitWithError+0x68>)
10042d88:	68f9      	ldr	r1, [r7, #12]
10042d8a:	0089      	lsls	r1, r1, #2
10042d8c:	58c9      	ldr	r1, [r1, r3]
10042d8e:	4b0c      	ldr	r3, [pc, #48]	@ (10042dc0 <HW_PKA_ExitWithError+0x64>)
10042d90:	0092      	lsls	r2, r2, #2
10042d92:	50d1      	str	r1, [r2, r3]
  for(int i=0; i<8; i++)
10042d94:	68fb      	ldr	r3, [r7, #12]
10042d96:	3301      	adds	r3, #1
10042d98:	60fb      	str	r3, [r7, #12]
10042d9a:	68fb      	ldr	r3, [r7, #12]
10042d9c:	2b07      	cmp	r3, #7
10042d9e:	ddef      	ble.n	10042d80 <HW_PKA_ExitWithError+0x24>
  }
  HW_PKA_funcCB_LP(PKAMGR_ERROR, ret);
10042da0:	4b09      	ldr	r3, [pc, #36]	@ (10042dc8 <HW_PKA_ExitWithError+0x6c>)
10042da2:	681b      	ldr	r3, [r3, #0]
10042da4:	4906      	ldr	r1, [pc, #24]	@ (10042dc0 <HW_PKA_ExitWithError+0x64>)
10042da6:	2201      	movs	r2, #1
10042da8:	4252      	negs	r2, r2
10042daa:	0010      	movs	r0, r2
10042dac:	4798      	blx	r3
}
10042dae:	46c0      	nop			@ (mov r8, r8)
10042db0:	46bd      	mov	sp, r7
10042db2:	b004      	add	sp, #16
10042db4:	bd80      	pop	{r7, pc}
10042db6:	46c0      	nop			@ (mov r8, r8)
10042db8:	200003c4 	.word	0x200003c4
10042dbc:	200003c8 	.word	0x200003c8
10042dc0:	20000364 	.word	0x20000364
10042dc4:	200003cc 	.word	0x200003cc
10042dc8:	200003ec 	.word	0x200003ec

10042dcc <HW_PKA_ProcEnd_StateMachine>:
  * @param
  * @param
  *
  */
void HW_PKA_ProcEnd_StateMachine(void)
{
10042dcc:	b580      	push	{r7, lr}
10042dce:	b082      	sub	sp, #8
10042dd0:	af00      	add	r7, sp, #0
  if(internalStateMachine_Operation == HW_PKA_OPERATION_P256)
10042dd2:	4b2f      	ldr	r3, [pc, #188]	@ (10042e90 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10042dd4:	681b      	ldr	r3, [r3, #0]
10042dd6:	2b01      	cmp	r3, #1
10042dd8:	d155      	bne.n	10042e86 <HW_PKA_ProcEnd_StateMachine+0xba>
  {
    switch(internalStateMachine_Step)
10042dda:	4b2e      	ldr	r3, [pc, #184]	@ (10042e94 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042ddc:	681b      	ldr	r3, [r3, #0]
10042dde:	2b0e      	cmp	r3, #14
10042de0:	d84d      	bhi.n	10042e7e <HW_PKA_ProcEnd_StateMachine+0xb2>
10042de2:	009a      	lsls	r2, r3, #2
10042de4:	4b2c      	ldr	r3, [pc, #176]	@ (10042e98 <HW_PKA_ProcEnd_StateMachine+0xcc>)
10042de6:	18d3      	adds	r3, r2, r3
10042de8:	681b      	ldr	r3, [r3, #0]
10042dea:	469f      	mov	pc, r3
    {
      case HW_PKA_STEP_0:
        internalStateMachine_Step = HW_PKA_STEP_1;
10042dec:	4b29      	ldr	r3, [pc, #164]	@ (10042e94 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042dee:	2201      	movs	r2, #1
10042df0:	601a      	str	r2, [r3, #0]

      break;
10042df2:	e048      	b.n	10042e86 <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_1:
        internalStateMachine_Step = HW_PKA_STEP_2;
10042df4:	4b27      	ldr	r3, [pc, #156]	@ (10042e94 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042df6:	2202      	movs	r2, #2
10042df8:	601a      	str	r2, [r3, #0]
        break;
10042dfa:	e044      	b.n	10042e86 <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_2:
          internalStateMachine_Step = HW_PKA_STEP_3;
10042dfc:	4b25      	ldr	r3, [pc, #148]	@ (10042e94 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042dfe:	2203      	movs	r2, #3
10042e00:	601a      	str	r2, [r3, #0]
          break;
10042e02:	e040      	b.n	10042e86 <HW_PKA_ProcEnd_StateMachine+0xba>
      case HW_PKA_STEP_3:
            /* Read the PKA scalar multiplication result which is the DH key */
            for(int i=0;i<8;i++)
10042e04:	2300      	movs	r3, #0
10042e06:	607b      	str	r3, [r7, #4]
10042e08:	e00a      	b.n	10042e20 <HW_PKA_ProcEnd_StateMachine+0x54>
              ret[i] = bufferSecretKey[i];
10042e0a:	4b24      	ldr	r3, [pc, #144]	@ (10042e9c <HW_PKA_ProcEnd_StateMachine+0xd0>)
10042e0c:	687a      	ldr	r2, [r7, #4]
10042e0e:	0092      	lsls	r2, r2, #2
10042e10:	58d1      	ldr	r1, [r2, r3]
10042e12:	4b23      	ldr	r3, [pc, #140]	@ (10042ea0 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042e14:	687a      	ldr	r2, [r7, #4]
10042e16:	0092      	lsls	r2, r2, #2
10042e18:	50d1      	str	r1, [r2, r3]
            for(int i=0;i<8;i++)
10042e1a:	687b      	ldr	r3, [r7, #4]
10042e1c:	3301      	adds	r3, #1
10042e1e:	607b      	str	r3, [r7, #4]
10042e20:	687b      	ldr	r3, [r7, #4]
10042e22:	2b07      	cmp	r3, #7
10042e24:	ddf1      	ble.n	10042e0a <HW_PKA_ProcEnd_StateMachine+0x3e>
            HW_PKA_P256_ReadEccScalarMul( (uint32_t *)&ret[8], (uint32_t *)&ret[16] );
10042e26:	4a1f      	ldr	r2, [pc, #124]	@ (10042ea4 <HW_PKA_ProcEnd_StateMachine+0xd8>)
10042e28:	4b1f      	ldr	r3, [pc, #124]	@ (10042ea8 <HW_PKA_ProcEnd_StateMachine+0xdc>)
10042e2a:	0011      	movs	r1, r2
10042e2c:	0018      	movs	r0, r3
10042e2e:	f000 f85a 	bl	10042ee6 <HW_PKA_P256_ReadEccScalarMul>
#ifdef STM32WB09
            internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
10042e32:	4b18      	ldr	r3, [pc, #96]	@ (10042e94 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042e34:	220e      	movs	r2, #14
10042e36:	601a      	str	r2, [r3, #0]
            HW_PKA_ProcEnd_StateMachine();
10042e38:	f7ff ffc8 	bl	10042dcc <HW_PKA_ProcEnd_StateMachine>
         {
           internalStateMachine_Step = HW_PKA_STEP_END_SUCCESS;
           HW_PKA_ProcEnd_StateMachine();
         }
#endif /* STM32WB05 */
          break;
10042e3c:	e023      	b.n	10042e86 <HW_PKA_ProcEnd_StateMachine+0xba>
       case HW_PKA_STEP_END_SUCCESS:
          internalStateMachine_Operation = HW_PKA_OPERATION_NONE;
10042e3e:	4b14      	ldr	r3, [pc, #80]	@ (10042e90 <HW_PKA_ProcEnd_StateMachine+0xc4>)
10042e40:	2200      	movs	r2, #0
10042e42:	601a      	str	r2, [r3, #0]
          internalStateMachine_Step = HW_PKA_STEP_0;
10042e44:	4b13      	ldr	r3, [pc, #76]	@ (10042e94 <HW_PKA_ProcEnd_StateMachine+0xc8>)
10042e46:	2200      	movs	r2, #0
10042e48:	601a      	str	r2, [r3, #0]
          PKAMGR_Unlock();
10042e4a:	f001 fe4b 	bl	10044ae4 <PKAMGR_Unlock>
          for(int i=0;i<8;i++)
10042e4e:	2300      	movs	r3, #0
10042e50:	603b      	str	r3, [r7, #0]
10042e52:	e00a      	b.n	10042e6a <HW_PKA_ProcEnd_StateMachine+0x9e>
            ret[i] = bufferSecretKey[i];
10042e54:	4b11      	ldr	r3, [pc, #68]	@ (10042e9c <HW_PKA_ProcEnd_StateMachine+0xd0>)
10042e56:	683a      	ldr	r2, [r7, #0]
10042e58:	0092      	lsls	r2, r2, #2
10042e5a:	58d1      	ldr	r1, [r2, r3]
10042e5c:	4b10      	ldr	r3, [pc, #64]	@ (10042ea0 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042e5e:	683a      	ldr	r2, [r7, #0]
10042e60:	0092      	lsls	r2, r2, #2
10042e62:	50d1      	str	r1, [r2, r3]
          for(int i=0;i<8;i++)
10042e64:	683b      	ldr	r3, [r7, #0]
10042e66:	3301      	adds	r3, #1
10042e68:	603b      	str	r3, [r7, #0]
10042e6a:	683b      	ldr	r3, [r7, #0]
10042e6c:	2b07      	cmp	r3, #7
10042e6e:	ddf1      	ble.n	10042e54 <HW_PKA_ProcEnd_StateMachine+0x88>
          HW_PKA_funcCB_LP(PKAMGR_SUCCESS, ret);
10042e70:	4b0e      	ldr	r3, [pc, #56]	@ (10042eac <HW_PKA_ProcEnd_StateMachine+0xe0>)
10042e72:	681b      	ldr	r3, [r3, #0]
10042e74:	4a0a      	ldr	r2, [pc, #40]	@ (10042ea0 <HW_PKA_ProcEnd_StateMachine+0xd4>)
10042e76:	0011      	movs	r1, r2
10042e78:	2000      	movs	r0, #0
10042e7a:	4798      	blx	r3
          break;
10042e7c:	e003      	b.n	10042e86 <HW_PKA_ProcEnd_StateMachine+0xba>
       default:
          HW_PKA_ExitWithError(0xA0);
10042e7e:	20a0      	movs	r0, #160	@ 0xa0
10042e80:	f7ff ff6c 	bl	10042d5c <HW_PKA_ExitWithError>
    }
  }
}
10042e84:	e7ff      	b.n	10042e86 <HW_PKA_ProcEnd_StateMachine+0xba>
10042e86:	46c0      	nop			@ (mov r8, r8)
10042e88:	46bd      	mov	sp, r7
10042e8a:	b002      	add	sp, #8
10042e8c:	bd80      	pop	{r7, pc}
10042e8e:	46c0      	nop			@ (mov r8, r8)
10042e90:	200003c4 	.word	0x200003c4
10042e94:	200003c8 	.word	0x200003c8
10042e98:	1004fce4 	.word	0x1004fce4
10042e9c:	200003cc 	.word	0x200003cc
10042ea0:	20000364 	.word	0x20000364
10042ea4:	200003a4 	.word	0x200003a4
10042ea8:	20000384 	.word	0x20000384
10042eac:	200003ec 	.word	0x200003ec

10042eb0 <HAL_PKA_OperationCpltCallback>:
    HW_PKA_ProcEnd_StateMachine();
  }
}

void HAL_PKA_OperationCpltCallback(PKA_HandleTypeDef *hpka)
{
10042eb0:	b580      	push	{r7, lr}
10042eb2:	b082      	sub	sp, #8
10042eb4:	af00      	add	r7, sp, #0
10042eb6:	6078      	str	r0, [r7, #4]
  HW_PKA_ProcEnd_StateMachine();
10042eb8:	f7ff ff88 	bl	10042dcc <HW_PKA_ProcEnd_StateMachine>
  PKAMGR_IRQCallback();
10042ebc:	f001 fe3c 	bl	10044b38 <PKAMGR_IRQCallback>
}
10042ec0:	46c0      	nop			@ (mov r8, r8)
10042ec2:	46bd      	mov	sp, r7
10042ec4:	b002      	add	sp, #8
10042ec6:	bd80      	pop	{r7, pc}

10042ec8 <HAL_PKA_ErrorCallback>:

void HAL_PKA_ErrorCallback(PKA_HandleTypeDef *hpka)
{
10042ec8:	b580      	push	{r7, lr}
10042eca:	b082      	sub	sp, #8
10042ecc:	af00      	add	r7, sp, #0
10042ece:	6078      	str	r0, [r7, #4]
  HW_PKA_ExitWithError(hpka->ErrorCode);
10042ed0:	687b      	ldr	r3, [r7, #4]
10042ed2:	689b      	ldr	r3, [r3, #8]
10042ed4:	0018      	movs	r0, r3
10042ed6:	f7ff ff41 	bl	10042d5c <HW_PKA_ExitWithError>
  PKAMGR_IRQCallback();
10042eda:	f001 fe2d 	bl	10044b38 <PKAMGR_IRQCallback>
}
10042ede:	46c0      	nop			@ (mov r8, r8)
10042ee0:	46bd      	mov	sp, r7
10042ee2:	b002      	add	sp, #8
10042ee4:	bd80      	pop	{r7, pc}

10042ee6 <HW_PKA_P256_ReadEccScalarMul>:
  * @param
  * @param
  *
  */
void HW_PKA_P256_ReadEccScalarMul( uint32_t* pX, uint32_t* pY )
{
10042ee6:	b580      	push	{r7, lr}
10042ee8:	b082      	sub	sp, #8
10042eea:	af00      	add	r7, sp, #0
10042eec:	6078      	str	r0, [r7, #4]
10042eee:	6039      	str	r1, [r7, #0]
#ifdef STM32WB09
  /* Read the output point X */
  if( pX )
10042ef0:	687b      	ldr	r3, [r7, #4]
10042ef2:	2b00      	cmp	r3, #0
10042ef4:	d005      	beq.n	10042f02 <HW_PKA_P256_ReadEccScalarMul+0x1c>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_X, 8, pX );
10042ef6:	687b      	ldr	r3, [r7, #4]
10042ef8:	001a      	movs	r2, r3
10042efa:	2108      	movs	r1, #8
10042efc:	205e      	movs	r0, #94	@ 0x5e
10042efe:	f7ff fee9 	bl	10042cd4 <HW_PKA_ReadResult>
  }
  /* Read the output point Y as the second half of the result */
  if( pY )
10042f02:	683b      	ldr	r3, [r7, #0]
10042f04:	2b00      	cmp	r3, #0
10042f06:	d005      	beq.n	10042f14 <HW_PKA_P256_ReadEccScalarMul+0x2e>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_Y, 8, pY );
10042f08:	683b      	ldr	r3, [r7, #0]
10042f0a:	001a      	movs	r2, r3
10042f0c:	2108      	movs	r1, #8
10042f0e:	2074      	movs	r0, #116	@ 0x74
10042f10:	f7ff fee0 	bl	10042cd4 <HW_PKA_ReadResult>
  if( pY )
  {
    HW_PKA_ReadResult( 108, 8, pY );
  }
#endif /* STM32WB05 */
}
10042f14:	46c0      	nop			@ (mov r8, r8)
10042f16:	46bd      	mov	sp, r7
10042f18:	b002      	add	sp, #8
10042f1a:	bd80      	pop	{r7, pc}

10042f1c <LL_AHB1_GRP1_EnableClock>:
{
10042f1c:	b580      	push	{r7, lr}
10042f1e:	b084      	sub	sp, #16
10042f20:	af00      	add	r7, sp, #0
10042f22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10042f24:	4b07      	ldr	r3, [pc, #28]	@ (10042f44 <LL_AHB1_GRP1_EnableClock+0x28>)
10042f26:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10042f28:	4b06      	ldr	r3, [pc, #24]	@ (10042f44 <LL_AHB1_GRP1_EnableClock+0x28>)
10042f2a:	687a      	ldr	r2, [r7, #4]
10042f2c:	430a      	orrs	r2, r1
10042f2e:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10042f30:	4b04      	ldr	r3, [pc, #16]	@ (10042f44 <LL_AHB1_GRP1_EnableClock+0x28>)
10042f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10042f34:	687a      	ldr	r2, [r7, #4]
10042f36:	4013      	ands	r3, r2
10042f38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10042f3a:	68fb      	ldr	r3, [r7, #12]
}
10042f3c:	46c0      	nop			@ (mov r8, r8)
10042f3e:	46bd      	mov	sp, r7
10042f40:	b004      	add	sp, #16
10042f42:	bd80      	pop	{r7, pc}
10042f44:	48400000 	.word	0x48400000

10042f48 <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
10042f48:	b580      	push	{r7, lr}
10042f4a:	b082      	sub	sp, #8
10042f4c:	af00      	add	r7, sp, #0
10042f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RNGx->CR, RNG_CR_DISABLE, LL_RNG_CR_DISABLE_0);
10042f50:	687b      	ldr	r3, [r7, #4]
10042f52:	681b      	ldr	r3, [r3, #0]
10042f54:	2201      	movs	r2, #1
10042f56:	4393      	bics	r3, r2
10042f58:	001a      	movs	r2, r3
10042f5a:	687b      	ldr	r3, [r7, #4]
10042f5c:	601a      	str	r2, [r3, #0]
}
10042f5e:	46c0      	nop			@ (mov r8, r8)
10042f60:	46bd      	mov	sp, r7
10042f62:	b002      	add	sp, #8
10042f64:	bd80      	pop	{r7, pc}
	...

10042f68 <LL_RNG_SetSamplingClockEnableDivider>:
  * @param  RNGx RNG Instance
  * @param  value parameter must be a number between 0 and 65535 (form 0x0 to 0xffff)
  * @retval None
  */
__STATIC_INLINE void LL_RNG_SetSamplingClockEnableDivider(RNG_TypeDef *RNGx, uint32_t value)
{
10042f68:	b580      	push	{r7, lr}
10042f6a:	b082      	sub	sp, #8
10042f6c:	af00      	add	r7, sp, #0
10042f6e:	6078      	str	r0, [r7, #4]
10042f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RNGx->CR, RNG_CR_CLKDIV_15_0, value << RNG_CR_CLKDIV_15_0_Pos);
10042f72:	687b      	ldr	r3, [r7, #4]
10042f74:	681b      	ldr	r3, [r3, #0]
10042f76:	4a05      	ldr	r2, [pc, #20]	@ (10042f8c <LL_RNG_SetSamplingClockEnableDivider+0x24>)
10042f78:	401a      	ands	r2, r3
10042f7a:	683b      	ldr	r3, [r7, #0]
10042f7c:	021b      	lsls	r3, r3, #8
10042f7e:	431a      	orrs	r2, r3
10042f80:	687b      	ldr	r3, [r7, #4]
10042f82:	601a      	str	r2, [r3, #0]
}
10042f84:	46c0      	nop			@ (mov r8, r8)
10042f86:	46bd      	mov	sp, r7
10042f88:	b002      	add	sp, #8
10042f8a:	bd80      	pop	{r7, pc}
10042f8c:	ff0000ff 	.word	0xff0000ff

10042f90 <LL_RNG_GetSamplingClockEnableDivider>:
    @note   dividing by a factor equal to CLKDIV[15:0] + 1, values being in the range of 0 to 65535
  * @rmtoll CR          CLKDIV_15_0       LL_RNG_GetSamplingClockEnableDivider
  * @retval can be one of the following values
  */
__STATIC_INLINE uint32_t LL_RNG_GetSamplingClockEnableDivider(RNG_TypeDef *RNGx)
{
10042f90:	b580      	push	{r7, lr}
10042f92:	b082      	sub	sp, #8
10042f94:	af00      	add	r7, sp, #0
10042f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->CR, RNG_CR_CLKDIV_15_0) >> RNG_CR_CLKDIV_15_0_Pos);
10042f98:	687b      	ldr	r3, [r7, #4]
10042f9a:	681b      	ldr	r3, [r3, #0]
10042f9c:	0a1b      	lsrs	r3, r3, #8
10042f9e:	041b      	lsls	r3, r3, #16
10042fa0:	0c1b      	lsrs	r3, r3, #16
}
10042fa2:	0018      	movs	r0, r3
10042fa4:	46bd      	mov	sp, r7
10042fa6:	b002      	add	sp, #8
10042fa8:	bd80      	pop	{r7, pc}

10042faa <LL_RNG_IsActiveFlag_DISABLED>:
  * @rmtoll SR          DISABLED            LL_RNG_IsActiveFlag_DISABLED
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_DISABLED(RNG_TypeDef *RNGx)
{
10042faa:	b580      	push	{r7, lr}
10042fac:	b082      	sub	sp, #8
10042fae:	af00      	add	r7, sp, #0
10042fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_DISABLED) == (RNG_SR_DISABLED)) ? 1U : 0U);
10042fb2:	687b      	ldr	r3, [r7, #4]
10042fb4:	685b      	ldr	r3, [r3, #4]
10042fb6:	2201      	movs	r2, #1
10042fb8:	4013      	ands	r3, r2
10042fba:	2b01      	cmp	r3, #1
10042fbc:	d101      	bne.n	10042fc2 <LL_RNG_IsActiveFlag_DISABLED+0x18>
10042fbe:	2301      	movs	r3, #1
10042fc0:	e000      	b.n	10042fc4 <LL_RNG_IsActiveFlag_DISABLED+0x1a>
10042fc2:	2300      	movs	r3, #0
}
10042fc4:	0018      	movs	r0, r3
10042fc6:	46bd      	mov	sp, r7
10042fc8:	b002      	add	sp, #8
10042fca:	bd80      	pop	{r7, pc}

10042fcc <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>:
  * @rmtoll SR          REVEAL_CLK_ERR            LL_RNG_IsActiveFlag_REVEAL_CLK_ERR
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG_TypeDef *RNGx)
{
10042fcc:	b580      	push	{r7, lr}
10042fce:	b082      	sub	sp, #8
10042fd0:	af00      	add	r7, sp, #0
10042fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_REVEAL_CLK_ERR) == (RNG_SR_REVEAL_CLK_ERR)) ? 1U : 0U);
10042fd4:	687b      	ldr	r3, [r7, #4]
10042fd6:	685b      	ldr	r3, [r3, #4]
10042fd8:	2204      	movs	r2, #4
10042fda:	4013      	ands	r3, r2
10042fdc:	2b04      	cmp	r3, #4
10042fde:	d101      	bne.n	10042fe4 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x18>
10042fe0:	2301      	movs	r3, #1
10042fe2:	e000      	b.n	10042fe6 <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR+0x1a>
10042fe4:	2300      	movs	r3, #0
}
10042fe6:	0018      	movs	r0, r3
10042fe8:	46bd      	mov	sp, r7
10042fea:	b002      	add	sp, #8
10042fec:	bd80      	pop	{r7, pc}

10042fee <LL_RNG_IsActiveFlag_VAL_READY>:
  * @rmtoll SR          VAL_READY            LL_RNG_IsActiveFlag_VAL_READY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_VAL_READY(RNG_TypeDef *RNGx)
{
10042fee:	b580      	push	{r7, lr}
10042ff0:	b082      	sub	sp, #8
10042ff2:	af00      	add	r7, sp, #0
10042ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_VAL_READY) == (RNG_SR_VAL_READY)) ? 1U : 0U);
10042ff6:	687b      	ldr	r3, [r7, #4]
10042ff8:	685b      	ldr	r3, [r3, #4]
10042ffa:	2210      	movs	r2, #16
10042ffc:	4013      	ands	r3, r2
10042ffe:	2b10      	cmp	r3, #16
10043000:	d101      	bne.n	10043006 <LL_RNG_IsActiveFlag_VAL_READY+0x18>
10043002:	2301      	movs	r3, #1
10043004:	e000      	b.n	10043008 <LL_RNG_IsActiveFlag_VAL_READY+0x1a>
10043006:	2300      	movs	r3, #0
}
10043008:	0018      	movs	r0, r3
1004300a:	46bd      	mov	sp, r7
1004300c:	b002      	add	sp, #8
1004300e:	bd80      	pop	{r7, pc}

10043010 <LL_RNG_GetRndVal>:
  available in FIFO by ready VAL_READY flag before starting a read otherwise a null value will be returned
  * @rmtoll VAL          RND_VAL       LL_RNG_GetRndVal
  * @retval a 32-bit Random Value
  */
__STATIC_INLINE uint32_t LL_RNG_GetRndVal(RNG_TypeDef *RNGx)
{
10043010:	b580      	push	{r7, lr}
10043012:	b082      	sub	sp, #8
10043014:	af00      	add	r7, sp, #0
10043016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RNGx->VAL, RNG_VAL_RND_VAL) >> RNG_VAL_RND_VAL_Pos);
10043018:	687b      	ldr	r3, [r7, #4]
1004301a:	689b      	ldr	r3, [r3, #8]
}
1004301c:	0018      	movs	r0, r3
1004301e:	46bd      	mov	sp, r7
10043020:	b002      	add	sp, #8
10043022:	bd80      	pop	{r7, pc}

10043024 <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
10043024:	b580      	push	{r7, lr}
10043026:	b082      	sub	sp, #8
10043028:	af00      	add	r7, sp, #0
#ifdef STM32WB09
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
1004302a:	2380      	movs	r3, #128	@ 0x80
1004302c:	02db      	lsls	r3, r3, #11
1004302e:	0018      	movs	r0, r3
10043030:	f7ff ff74 	bl	10042f1c <LL_AHB1_GRP1_EnableClock>

  uint32_t SamplingClockDivider = 0;
10043034:	2300      	movs	r3, #0
10043036:	607b      	str	r3, [r7, #4]

  /* Check that the divider value is equal to the one to configure. If not, it must redo the write and checking. */
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
10043038:	e005      	b.n	10043046 <HW_RNG_Init+0x22>
  {
     /* While the new divider value is being resynchronized with the TRNG core clock domain, it is not possible to write another new value. */
     LL_RNG_SetSamplingClockEnableDivider(RNG, SamplingClockDivider);
1004303a:	687b      	ldr	r3, [r7, #4]
1004303c:	4a12      	ldr	r2, [pc, #72]	@ (10043088 <HW_RNG_Init+0x64>)
1004303e:	0019      	movs	r1, r3
10043040:	0010      	movs	r0, r2
10043042:	f7ff ff91 	bl	10042f68 <LL_RNG_SetSamplingClockEnableDivider>
  while( LL_RNG_GetSamplingClockEnableDivider(RNG) != SamplingClockDivider)
10043046:	4b10      	ldr	r3, [pc, #64]	@ (10043088 <HW_RNG_Init+0x64>)
10043048:	0018      	movs	r0, r3
1004304a:	f7ff ffa1 	bl	10042f90 <LL_RNG_GetSamplingClockEnableDivider>
1004304e:	0002      	movs	r2, r0
10043050:	687b      	ldr	r3, [r7, #4]
10043052:	4293      	cmp	r3, r2
10043054:	d1f1      	bne.n	1004303a <HW_RNG_Init+0x16>
  }

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
10043056:	4b0c      	ldr	r3, [pc, #48]	@ (10043088 <HW_RNG_Init+0x64>)
10043058:	0018      	movs	r0, r3
1004305a:	f7ff ff75 	bl	10042f48 <LL_RNG_Enable>

  /* Wait for RNG enable operation */
  while (LL_RNG_IsActiveFlag_DISABLED(RNG));
1004305e:	46c0      	nop			@ (mov r8, r8)
10043060:	4b09      	ldr	r3, [pc, #36]	@ (10043088 <HW_RNG_Init+0x64>)
10043062:	0018      	movs	r0, r3
10043064:	f7ff ffa1 	bl	10042faa <LL_RNG_IsActiveFlag_DISABLED>
10043068:	1e03      	subs	r3, r0, #0
1004306a:	d1f9      	bne.n	10043060 <HW_RNG_Init+0x3c>

  /* Check if internal clock error occurs */
  if (LL_RNG_IsActiveFlag_REVEAL_CLK_ERR(RNG))
1004306c:	4b06      	ldr	r3, [pc, #24]	@ (10043088 <HW_RNG_Init+0x64>)
1004306e:	0018      	movs	r0, r3
10043070:	f7ff ffac 	bl	10042fcc <LL_RNG_IsActiveFlag_REVEAL_CLK_ERR>
10043074:	1e03      	subs	r3, r0, #0
10043076:	d001      	beq.n	1004307c <HW_RNG_Init+0x58>
  {
    return HW_RNG_ERROR;
10043078:	2301      	movs	r3, #1
1004307a:	e000      	b.n	1004307e <HW_RNG_Init+0x5a>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
1004307c:	2300      	movs	r3, #0
}
1004307e:	0018      	movs	r0, r3
10043080:	46bd      	mov	sp, r7
10043082:	b002      	add	sp, #8
10043084:	bd80      	pop	{r7, pc}
10043086:	46c0      	nop			@ (mov r8, r8)
10043088:	48600000 	.word	0x48600000

1004308c <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
1004308c:	b580      	push	{r7, lr}
1004308e:	b082      	sub	sp, #8
10043090:	af00      	add	r7, sp, #0
10043092:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
10043094:	46c0      	nop			@ (mov r8, r8)
10043096:	4b09      	ldr	r3, [pc, #36]	@ (100430bc <HW_RNG_GetRandom16+0x30>)
10043098:	0018      	movs	r0, r3
1004309a:	f7ff ffa8 	bl	10042fee <LL_RNG_IsActiveFlag_VAL_READY>
1004309e:	1e03      	subs	r3, r0, #0
100430a0:	d0f9      	beq.n	10043096 <HW_RNG_GetRandom16+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
100430a2:	4b06      	ldr	r3, [pc, #24]	@ (100430bc <HW_RNG_GetRandom16+0x30>)
100430a4:	0018      	movs	r0, r3
100430a6:	f7ff ffb3 	bl	10043010 <LL_RNG_GetRndVal>
100430aa:	0003      	movs	r3, r0
100430ac:	b29a      	uxth	r2, r3
100430ae:	687b      	ldr	r3, [r7, #4]
100430b0:	801a      	strh	r2, [r3, #0]

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
100430b2:	2300      	movs	r3, #0
}
100430b4:	0018      	movs	r0, r3
100430b6:	46bd      	mov	sp, r7
100430b8:	b002      	add	sp, #8
100430ba:	bd80      	pop	{r7, pc}
100430bc:	48600000 	.word	0x48600000

100430c0 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
100430c0:	b580      	push	{r7, lr}
100430c2:	b082      	sub	sp, #8
100430c4:	af00      	add	r7, sp, #0
100430c6:	6078      	str	r0, [r7, #4]
#ifdef STM32WB09
  /* Wait for VAL_READY signal */
  while (!LL_RNG_IsActiveFlag_VAL_READY(RNG));
100430c8:	46c0      	nop			@ (mov r8, r8)
100430ca:	4b09      	ldr	r3, [pc, #36]	@ (100430f0 <HW_RNG_GetRandom32+0x30>)
100430cc:	0018      	movs	r0, r3
100430ce:	f7ff ff8e 	bl	10042fee <LL_RNG_IsActiveFlag_VAL_READY>
100430d2:	1e03      	subs	r3, r0, #0
100430d4:	d0f9      	beq.n	100430ca <HW_RNG_GetRandom32+0xa>

  *num = LL_RNG_READRANDDATA32(RNG);
100430d6:	4b06      	ldr	r3, [pc, #24]	@ (100430f0 <HW_RNG_GetRandom32+0x30>)
100430d8:	0018      	movs	r0, r3
100430da:	f7ff ff99 	bl	10043010 <LL_RNG_GetRndVal>
100430de:	0002      	movs	r2, r0
100430e0:	687b      	ldr	r3, [r7, #4]
100430e2:	601a      	str	r2, [r3, #0]
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
100430e4:	2300      	movs	r3, #0
}
100430e6:	0018      	movs	r0, r3
100430e8:	46bd      	mov	sp, r7
100430ea:	b002      	add	sp, #8
100430ec:	bd80      	pop	{r7, pc}
100430ee:	46c0      	nop			@ (mov r8, r8)
100430f0:	48600000 	.word	0x48600000

100430f4 <LL_PWR_SetPowerMode>:
{
100430f4:	b580      	push	{r7, lr}
100430f6:	b082      	sub	sp, #8
100430f8:	af00      	add	r7, sp, #0
100430fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
100430fc:	4b06      	ldr	r3, [pc, #24]	@ (10043118 <LL_PWR_SetPowerMode+0x24>)
100430fe:	681b      	ldr	r3, [r3, #0]
10043100:	2201      	movs	r2, #1
10043102:	4393      	bics	r3, r2
10043104:	0019      	movs	r1, r3
10043106:	4b04      	ldr	r3, [pc, #16]	@ (10043118 <LL_PWR_SetPowerMode+0x24>)
10043108:	687a      	ldr	r2, [r7, #4]
1004310a:	430a      	orrs	r2, r1
1004310c:	601a      	str	r2, [r3, #0]
}
1004310e:	46c0      	nop			@ (mov r8, r8)
10043110:	46bd      	mov	sp, r7
10043112:	b002      	add	sp, #8
10043114:	bd80      	pop	{r7, pc}
10043116:	46c0      	nop			@ (mov r8, r8)
10043118:	48500000 	.word	0x48500000

1004311c <LL_PWR_DisableGPIORET>:
{
1004311c:	b580      	push	{r7, lr}
1004311e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10043120:	4b04      	ldr	r3, [pc, #16]	@ (10043134 <LL_PWR_DisableGPIORET+0x18>)
10043122:	685a      	ldr	r2, [r3, #4]
10043124:	4b03      	ldr	r3, [pc, #12]	@ (10043134 <LL_PWR_DisableGPIORET+0x18>)
10043126:	4904      	ldr	r1, [pc, #16]	@ (10043138 <LL_PWR_DisableGPIORET+0x1c>)
10043128:	400a      	ands	r2, r1
1004312a:	605a      	str	r2, [r3, #4]
}
1004312c:	46c0      	nop			@ (mov r8, r8)
1004312e:	46bd      	mov	sp, r7
10043130:	bd80      	pop	{r7, pc}
10043132:	46c0      	nop			@ (mov r8, r8)
10043134:	48500000 	.word	0x48500000
10043138:	fffffeff 	.word	0xfffffeff

1004313c <LL_PWR_ClearWakeupSource>:
{
1004313c:	b580      	push	{r7, lr}
1004313e:	b082      	sub	sp, #8
10043140:	af00      	add	r7, sp, #0
10043142:	6078      	str	r0, [r7, #4]
  WRITE_REG(PWR->SR1, (source & 0x0000FFFF));
10043144:	4b06      	ldr	r3, [pc, #24]	@ (10043160 <LL_PWR_ClearWakeupSource+0x24>)
10043146:	687a      	ldr	r2, [r7, #4]
10043148:	0412      	lsls	r2, r2, #16
1004314a:	0c12      	lsrs	r2, r2, #16
1004314c:	611a      	str	r2, [r3, #16]
  WRITE_REG(PWR->SR3, (source >> 16));
1004314e:	4b04      	ldr	r3, [pc, #16]	@ (10043160 <LL_PWR_ClearWakeupSource+0x24>)
10043150:	687a      	ldr	r2, [r7, #4]
10043152:	0c12      	lsrs	r2, r2, #16
10043154:	639a      	str	r2, [r3, #56]	@ 0x38
}
10043156:	46c0      	nop			@ (mov r8, r8)
10043158:	46bd      	mov	sp, r7
1004315a:	b002      	add	sp, #8
1004315c:	bd80      	pop	{r7, pc}
1004315e:	46c0      	nop			@ (mov r8, r8)
10043160:	48500000 	.word	0x48500000

10043164 <LL_PWR_SetNoPullB>:
{
10043164:	b580      	push	{r7, lr}
10043166:	b082      	sub	sp, #8
10043168:	af00      	add	r7, sp, #0
1004316a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004316c:	4b08      	ldr	r3, [pc, #32]	@ (10043190 <LL_PWR_SetNoPullB+0x2c>)
1004316e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10043170:	687b      	ldr	r3, [r7, #4]
10043172:	43d9      	mvns	r1, r3
10043174:	4b06      	ldr	r3, [pc, #24]	@ (10043190 <LL_PWR_SetNoPullB+0x2c>)
10043176:	400a      	ands	r2, r1
10043178:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004317a:	4b05      	ldr	r3, [pc, #20]	@ (10043190 <LL_PWR_SetNoPullB+0x2c>)
1004317c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004317e:	687b      	ldr	r3, [r7, #4]
10043180:	43d9      	mvns	r1, r3
10043182:	4b03      	ldr	r3, [pc, #12]	@ (10043190 <LL_PWR_SetNoPullB+0x2c>)
10043184:	400a      	ands	r2, r1
10043186:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10043188:	46c0      	nop			@ (mov r8, r8)
1004318a:	46bd      	mov	sp, r7
1004318c:	b002      	add	sp, #8
1004318e:	bd80      	pop	{r7, pc}
10043190:	48500000 	.word	0x48500000

10043194 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
10043194:	b580      	push	{r7, lr}
10043196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10043198:	4b07      	ldr	r3, [pc, #28]	@ (100431b8 <LL_RCC_HSE_IsReady+0x24>)
1004319a:	681a      	ldr	r2, [r3, #0]
1004319c:	2380      	movs	r3, #128	@ 0x80
1004319e:	029b      	lsls	r3, r3, #10
100431a0:	401a      	ands	r2, r3
100431a2:	2380      	movs	r3, #128	@ 0x80
100431a4:	029b      	lsls	r3, r3, #10
100431a6:	429a      	cmp	r2, r3
100431a8:	d101      	bne.n	100431ae <LL_RCC_HSE_IsReady+0x1a>
100431aa:	2301      	movs	r3, #1
100431ac:	e000      	b.n	100431b0 <LL_RCC_HSE_IsReady+0x1c>
100431ae:	2300      	movs	r3, #0
}
100431b0:	0018      	movs	r0, r3
100431b2:	46bd      	mov	sp, r7
100431b4:	bd80      	pop	{r7, pc}
100431b6:	46c0      	nop			@ (mov r8, r8)
100431b8:	48400000 	.word	0x48400000

100431bc <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
100431bc:	b580      	push	{r7, lr}
100431be:	b082      	sub	sp, #8
100431c0:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
100431c2:	46c0      	nop			@ (mov r8, r8)
100431c4:	4b0f      	ldr	r3, [pc, #60]	@ (10043204 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100431c6:	681a      	ldr	r2, [r3, #0]
100431c8:	2380      	movs	r3, #128	@ 0x80
100431ca:	029b      	lsls	r3, r3, #10
100431cc:	4013      	ands	r3, r2
100431ce:	d0f9      	beq.n	100431c4 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
100431d0:	4b0c      	ldr	r3, [pc, #48]	@ (10043204 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100431d2:	689a      	ldr	r2, [r3, #8]
100431d4:	4b0b      	ldr	r3, [pc, #44]	@ (10043204 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100431d6:	2102      	movs	r1, #2
100431d8:	430a      	orrs	r2, r1
100431da:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
100431dc:	2300      	movs	r3, #0
100431de:	607b      	str	r3, [r7, #4]
100431e0:	e003      	b.n	100431ea <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
100431e2:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100431e4:	687b      	ldr	r3, [r7, #4]
100431e6:	3301      	adds	r3, #1
100431e8:	607b      	str	r3, [r7, #4]
100431ea:	687b      	ldr	r3, [r7, #4]
100431ec:	2b05      	cmp	r3, #5
100431ee:	ddf8      	ble.n	100431e2 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
100431f0:	4b04      	ldr	r3, [pc, #16]	@ (10043204 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100431f2:	689a      	ldr	r2, [r3, #8]
100431f4:	4b03      	ldr	r3, [pc, #12]	@ (10043204 <LL_RCC_DIRECT_HSE_Enable+0x48>)
100431f6:	2104      	movs	r1, #4
100431f8:	430a      	orrs	r2, r1
100431fa:	609a      	str	r2, [r3, #8]
}
100431fc:	46c0      	nop			@ (mov r8, r8)
100431fe:	46bd      	mov	sp, r7
10043200:	b002      	add	sp, #8
10043202:	bd80      	pop	{r7, pc}
10043204:	48400000 	.word	0x48400000

10043208 <LL_RCC_DIRECT_HSE_IsEnabled>:
  * @brief  Check if DIRECT_HSE mode is ready
  * @rmtoll CFGR           HSESEL/STOPHSI  LL_RCC_DIRECT_HSE_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_DIRECT_HSE_IsEnabled(void)
{
10043208:	b580      	push	{r7, lr}
1004320a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR_HSESEL_STATUS)
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004320c:	4b05      	ldr	r3, [pc, #20]	@ (10043224 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004320e:	689b      	ldr	r3, [r3, #8]
10043210:	2208      	movs	r2, #8
10043212:	4013      	ands	r3, r2
10043214:	2b08      	cmp	r3, #8
10043216:	d101      	bne.n	1004321c <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10043218:	2301      	movs	r3, #1
1004321a:	e000      	b.n	1004321e <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
1004321c:	2300      	movs	r3, #0
#else
  return (((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL) == (RCC_CFGR_HSESEL)) && (READ_BIT(RCC->CFGR, RCC_CFGR_STOPHSI) == (RCC_CFGR_STOPHSI))) ? 1UL : 0UL);
#endif
}
1004321e:	0018      	movs	r0, r3
10043220:	46bd      	mov	sp, r7
10043222:	bd80      	pop	{r7, pc}
10043224:	48400000 	.word	0x48400000

10043228 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
10043228:	b580      	push	{r7, lr}
1004322a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
1004322c:	4b04      	ldr	r3, [pc, #16]	@ (10043240 <LL_RCC_LSE_Enable+0x18>)
1004322e:	681a      	ldr	r2, [r3, #0]
10043230:	4b03      	ldr	r3, [pc, #12]	@ (10043240 <LL_RCC_LSE_Enable+0x18>)
10043232:	2110      	movs	r1, #16
10043234:	430a      	orrs	r2, r1
10043236:	601a      	str	r2, [r3, #0]
}
10043238:	46c0      	nop			@ (mov r8, r8)
1004323a:	46bd      	mov	sp, r7
1004323c:	bd80      	pop	{r7, pc}
1004323e:	46c0      	nop			@ (mov r8, r8)
10043240:	48400000 	.word	0x48400000

10043244 <LL_RCC_LSE_IsEnabled>:
  * @brief  Check if Low Speed External (LSE) crystal has been enabled or not
  * @rmtoll CR         LSEON         LL_RCC_LSE_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsEnabled(void)
{
10043244:	b580      	push	{r7, lr}
10043246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEON) == (RCC_CR_LSEON)) ? 1UL : 0UL);
10043248:	4b05      	ldr	r3, [pc, #20]	@ (10043260 <LL_RCC_LSE_IsEnabled+0x1c>)
1004324a:	681b      	ldr	r3, [r3, #0]
1004324c:	2210      	movs	r2, #16
1004324e:	4013      	ands	r3, r2
10043250:	2b10      	cmp	r3, #16
10043252:	d101      	bne.n	10043258 <LL_RCC_LSE_IsEnabled+0x14>
10043254:	2301      	movs	r3, #1
10043256:	e000      	b.n	1004325a <LL_RCC_LSE_IsEnabled+0x16>
10043258:	2300      	movs	r3, #0
}
1004325a:	0018      	movs	r0, r3
1004325c:	46bd      	mov	sp, r7
1004325e:	bd80      	pop	{r7, pc}
10043260:	48400000 	.word	0x48400000

10043264 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
10043264:	b580      	push	{r7, lr}
10043266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10043268:	4b05      	ldr	r3, [pc, #20]	@ (10043280 <LL_RCC_LSE_IsReady+0x1c>)
1004326a:	681b      	ldr	r3, [r3, #0]
1004326c:	2220      	movs	r2, #32
1004326e:	4013      	ands	r3, r2
10043270:	2b20      	cmp	r3, #32
10043272:	d101      	bne.n	10043278 <LL_RCC_LSE_IsReady+0x14>
10043274:	2301      	movs	r3, #1
10043276:	e000      	b.n	1004327a <LL_RCC_LSE_IsReady+0x16>
10043278:	2300      	movs	r3, #0
}
1004327a:	0018      	movs	r0, r3
1004327c:	46bd      	mov	sp, r7
1004327e:	bd80      	pop	{r7, pc}
10043280:	48400000 	.word	0x48400000

10043284 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
10043284:	b580      	push	{r7, lr}
10043286:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10043288:	4b04      	ldr	r3, [pc, #16]	@ (1004329c <LL_RCC_LSI_Enable+0x18>)
1004328a:	681a      	ldr	r2, [r3, #0]
1004328c:	4b03      	ldr	r3, [pc, #12]	@ (1004329c <LL_RCC_LSI_Enable+0x18>)
1004328e:	2104      	movs	r1, #4
10043290:	430a      	orrs	r2, r1
10043292:	601a      	str	r2, [r3, #0]
}
10043294:	46c0      	nop			@ (mov r8, r8)
10043296:	46bd      	mov	sp, r7
10043298:	bd80      	pop	{r7, pc}
1004329a:	46c0      	nop			@ (mov r8, r8)
1004329c:	48400000 	.word	0x48400000

100432a0 <LL_RCC_LSI_IsEnabled>:
  * @brief  Check if LSI crystal oscillator is enabled.
  * @rmtoll CR         LSION        LL_RCC_LSI_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsEnabled(void)
{
100432a0:	b580      	push	{r7, lr}
100432a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSION) == (RCC_CR_LSION)) ? 1UL : 0UL);
100432a4:	4b05      	ldr	r3, [pc, #20]	@ (100432bc <LL_RCC_LSI_IsEnabled+0x1c>)
100432a6:	681b      	ldr	r3, [r3, #0]
100432a8:	2204      	movs	r2, #4
100432aa:	4013      	ands	r3, r2
100432ac:	2b04      	cmp	r3, #4
100432ae:	d101      	bne.n	100432b4 <LL_RCC_LSI_IsEnabled+0x14>
100432b0:	2301      	movs	r3, #1
100432b2:	e000      	b.n	100432b6 <LL_RCC_LSI_IsEnabled+0x16>
100432b4:	2300      	movs	r3, #0
}
100432b6:	0018      	movs	r0, r3
100432b8:	46bd      	mov	sp, r7
100432ba:	bd80      	pop	{r7, pc}
100432bc:	48400000 	.word	0x48400000

100432c0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
100432c0:	b580      	push	{r7, lr}
100432c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
100432c4:	4b05      	ldr	r3, [pc, #20]	@ (100432dc <LL_RCC_LSI_IsReady+0x1c>)
100432c6:	681b      	ldr	r3, [r3, #0]
100432c8:	2208      	movs	r2, #8
100432ca:	4013      	ands	r3, r2
100432cc:	2b08      	cmp	r3, #8
100432ce:	d101      	bne.n	100432d4 <LL_RCC_LSI_IsReady+0x14>
100432d0:	2301      	movs	r3, #1
100432d2:	e000      	b.n	100432d6 <LL_RCC_LSI_IsReady+0x16>
100432d4:	2300      	movs	r3, #0
}
100432d6:	0018      	movs	r0, r3
100432d8:	46bd      	mov	sp, r7
100432da:	bd80      	pop	{r7, pc}
100432dc:	48400000 	.word	0x48400000

100432e0 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
100432e0:	b580      	push	{r7, lr}
100432e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
100432e4:	4b04      	ldr	r3, [pc, #16]	@ (100432f8 <LL_RCC_RC64MPLL_Disable+0x18>)
100432e6:	681a      	ldr	r2, [r3, #0]
100432e8:	4b03      	ldr	r3, [pc, #12]	@ (100432f8 <LL_RCC_RC64MPLL_Disable+0x18>)
100432ea:	4904      	ldr	r1, [pc, #16]	@ (100432fc <LL_RCC_RC64MPLL_Disable+0x1c>)
100432ec:	400a      	ands	r2, r1
100432ee:	601a      	str	r2, [r3, #0]
}
100432f0:	46c0      	nop			@ (mov r8, r8)
100432f2:	46bd      	mov	sp, r7
100432f4:	bd80      	pop	{r7, pc}
100432f6:	46c0      	nop			@ (mov r8, r8)
100432f8:	48400000 	.word	0x48400000
100432fc:	ffffdfff 	.word	0xffffdfff

10043300 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
10043300:	b580      	push	{r7, lr}
10043302:	b082      	sub	sp, #8
10043304:	af00      	add	r7, sp, #0
10043306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10043308:	4b06      	ldr	r3, [pc, #24]	@ (10043324 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004330a:	689b      	ldr	r3, [r3, #8]
1004330c:	22e0      	movs	r2, #224	@ 0xe0
1004330e:	4393      	bics	r3, r2
10043310:	0019      	movs	r1, r3
10043312:	4b04      	ldr	r3, [pc, #16]	@ (10043324 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10043314:	687a      	ldr	r2, [r7, #4]
10043316:	430a      	orrs	r2, r1
10043318:	609a      	str	r2, [r3, #8]
}
1004331a:	46c0      	nop			@ (mov r8, r8)
1004331c:	46bd      	mov	sp, r7
1004331e:	b002      	add	sp, #8
10043320:	bd80      	pop	{r7, pc}
10043322:	46c0      	nop			@ (mov r8, r8)
10043324:	48400000 	.word	0x48400000

10043328 <LL_RCC_GetCLKSYSPrescalerStatus>:
  *         @arg @ref LL_RCC_DIRECT_HSE_DIV_8
  *         @arg @ref LL_RCC_DIRECT_HSE_DIV_16
  *         @arg @ref LL_RCC_DIRECT_HSE_DIV_32
  */
__STATIC_INLINE uint32_t LL_RCC_GetCLKSYSPrescalerStatus(void)
{
10043328:	b580      	push	{r7, lr}
1004332a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->CFGR, RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos) << RCC_CFGR_CLKSYSDIV_Pos);
1004332c:	4b04      	ldr	r3, [pc, #16]	@ (10043340 <LL_RCC_GetCLKSYSPrescalerStatus+0x18>)
1004332e:	689b      	ldr	r3, [r3, #8]
10043330:	0a1b      	lsrs	r3, r3, #8
10043332:	015b      	lsls	r3, r3, #5
10043334:	22e0      	movs	r2, #224	@ 0xe0
10043336:	4013      	ands	r3, r2
}
10043338:	0018      	movs	r0, r3
1004333a:	46bd      	mov	sp, r7
1004333c:	bd80      	pop	{r7, pc}
1004333e:	46c0      	nop			@ (mov r8, r8)
10043340:	48400000 	.word	0x48400000

10043344 <LL_APB2_GRP1_IsEnabledClock>:
{
10043344:	b580      	push	{r7, lr}
10043346:	b082      	sub	sp, #8
10043348:	af00      	add	r7, sp, #0
1004334a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004334c:	4b06      	ldr	r3, [pc, #24]	@ (10043368 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004334e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10043350:	687a      	ldr	r2, [r7, #4]
10043352:	4013      	ands	r3, r2
10043354:	687a      	ldr	r2, [r7, #4]
10043356:	429a      	cmp	r2, r3
10043358:	d101      	bne.n	1004335e <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004335a:	2301      	movs	r3, #1
1004335c:	e000      	b.n	10043360 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004335e:	2300      	movs	r3, #0
}
10043360:	0018      	movs	r0, r3
10043362:	46bd      	mov	sp, r7
10043364:	b002      	add	sp, #8
10043366:	bd80      	pop	{r7, pc}
10043368:	48400000 	.word	0x48400000

1004336c <PWR_EnterOffMode>:
/** @addtogroup TINY_LPM_IF_Exported_functions
 * @{
 */

void PWR_EnterOffMode( void )
{
1004336c:	b590      	push	{r4, r7, lr}
1004336e:	b085      	sub	sp, #20
10043370:	af02      	add	r7, sp, #8
  PWR_DEEPSTOPTypeDef configDS;

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_ENTER);
10043372:	2003      	movs	r0, #3
10043374:	f001 fca5 	bl	10044cc2 <SYSTEM_DEBUG_SIGNAL_SET>
  /* USER CODE BEGIN PWR_EnterOffMode_1 */

  /* USER CODE END PWR_EnterOffMode_1 */

  /* Save the clock configuration */
  clockContext.directHSEenabled = FALSE;
10043378:	4b32      	ldr	r3, [pc, #200]	@ (10043444 <PWR_EnterOffMode+0xd8>)
1004337a:	2200      	movs	r2, #0
1004337c:	701a      	strb	r2, [r3, #0]
  clockContext.LSEenabled = FALSE;
1004337e:	4b31      	ldr	r3, [pc, #196]	@ (10043444 <PWR_EnterOffMode+0xd8>)
10043380:	2200      	movs	r2, #0
10043382:	705a      	strb	r2, [r3, #1]
  clockContext.LSIenabled = FALSE;
10043384:	4b2f      	ldr	r3, [pc, #188]	@ (10043444 <PWR_EnterOffMode+0xd8>)
10043386:	2200      	movs	r2, #0
10043388:	709a      	strb	r2, [r3, #2]
  if (LL_RCC_DIRECT_HSE_IsEnabled())
1004338a:	f7ff ff3d 	bl	10043208 <LL_RCC_DIRECT_HSE_IsEnabled>
1004338e:	1e03      	subs	r3, r0, #0
10043390:	d002      	beq.n	10043398 <PWR_EnterOffMode+0x2c>
  {
    clockContext.directHSEenabled = TRUE;
10043392:	4b2c      	ldr	r3, [pc, #176]	@ (10043444 <PWR_EnterOffMode+0xd8>)
10043394:	2201      	movs	r2, #1
10043396:	701a      	strb	r2, [r3, #0]
  }
#if defined(STM32WB07)
  clockContext.clkDiv =  LL_RCC_GetRC64MPLLPrescaler();
#else
  clockContext.clkDiv = LL_RCC_GetCLKSYSPrescalerStatus();
10043398:	f7ff ffc6 	bl	10043328 <LL_RCC_GetCLKSYSPrescalerStatus>
1004339c:	0002      	movs	r2, r0
1004339e:	4b29      	ldr	r3, [pc, #164]	@ (10043444 <PWR_EnterOffMode+0xd8>)
100433a0:	605a      	str	r2, [r3, #4]
#endif
  if (LL_RCC_LSE_IsEnabled())
100433a2:	f7ff ff4f 	bl	10043244 <LL_RCC_LSE_IsEnabled>
100433a6:	1e03      	subs	r3, r0, #0
100433a8:	d00e      	beq.n	100433c8 <PWR_EnterOffMode+0x5c>
  {
    clockContext.LSEenabled = TRUE;
100433aa:	4b26      	ldr	r3, [pc, #152]	@ (10043444 <PWR_EnterOffMode+0xd8>)
100433ac:	2201      	movs	r2, #1
100433ae:	705a      	strb	r2, [r3, #1]
    /* Enable pull down for LSE pins */
    HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_12);
100433b0:	2380      	movs	r3, #128	@ 0x80
100433b2:	015b      	lsls	r3, r3, #5
100433b4:	0019      	movs	r1, r3
100433b6:	2001      	movs	r0, #1
100433b8:	f003 fa74 	bl	100468a4 <HAL_PWREx_EnableGPIOPullDown>
    HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_13);
100433bc:	2380      	movs	r3, #128	@ 0x80
100433be:	019b      	lsls	r3, r3, #6
100433c0:	0019      	movs	r1, r3
100433c2:	2001      	movs	r0, #1
100433c4:	f003 fa6e 	bl	100468a4 <HAL_PWREx_EnableGPIOPullDown>
  }
  if (LL_RCC_LSI_IsEnabled())
100433c8:	f7ff ff6a 	bl	100432a0 <LL_RCC_LSI_IsEnabled>
100433cc:	1e03      	subs	r3, r0, #0
100433ce:	d002      	beq.n	100433d6 <PWR_EnterOffMode+0x6a>
  {
    clockContext.LSIenabled = TRUE;
100433d0:	4b1c      	ldr	r3, [pc, #112]	@ (10043444 <PWR_EnterOffMode+0xd8>)
100433d2:	2201      	movs	r2, #1
100433d4:	709a      	strb	r2, [r3, #2]
  }

  /* This signal cannot be reset later otherwise the GPIO output will be
     automatically restored to high at wakeup. */
  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_ENTER);
100433d6:	2003      	movs	r0, #3
100433d8:	f001 fc7d 	bl	10044cd6 <SYSTEM_DEBUG_SIGNAL_RESET>

  /* Save all the peripheral registers and CPU peripipheral configuration */
  apb0.deepstop_wdg_state = ENABLE;
100433dc:	4a1a      	ldr	r2, [pc, #104]	@ (10043448 <PWR_EnterOffMode+0xdc>)
100433de:	23ba      	movs	r3, #186	@ 0xba
100433e0:	005b      	lsls	r3, r3, #1
100433e2:	2101      	movs	r1, #1
100433e4:	50d1      	str	r1, [r2, r3]
  prepareDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
100433e6:	4c19      	ldr	r4, [pc, #100]	@ (1004344c <PWR_EnterOffMode+0xe0>)
100433e8:	4a19      	ldr	r2, [pc, #100]	@ (10043450 <PWR_EnterOffMode+0xe4>)
100433ea:	491a      	ldr	r1, [pc, #104]	@ (10043454 <PWR_EnterOffMode+0xe8>)
100433ec:	4816      	ldr	r0, [pc, #88]	@ (10043448 <PWR_EnterOffMode+0xdc>)
100433ee:	4b1a      	ldr	r3, [pc, #104]	@ (10043458 <PWR_EnterOffMode+0xec>)
100433f0:	9301      	str	r3, [sp, #4]
100433f2:	4b1a      	ldr	r3, [pc, #104]	@ (1004345c <PWR_EnterOffMode+0xf0>)
100433f4:	9300      	str	r3, [sp, #0]
100433f6:	0023      	movs	r3, r4
100433f8:	f002 f804 	bl	10045404 <prepareDeviceLowPower>

  /* DEEPSTOP configuration */
  configDS.deepStopMode = PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF;
100433fc:	2300      	movs	r3, #0
100433fe:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigDEEPSTOP(&configDS);
10043400:	1d3b      	adds	r3, r7, #4
10043402:	0018      	movs	r0, r3
10043404:	f003 f9a6 	bl	10046754 <HAL_PWR_ConfigDEEPSTOP>

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(LL_PWR_WAKEUP_ALL);
10043408:	4b15      	ldr	r3, [pc, #84]	@ (10043460 <PWR_EnterOffMode+0xf4>)
1004340a:	0018      	movs	r0, r3
1004340c:	f7ff fe96 	bl	1004313c <LL_PWR_ClearWakeupSource>

  /* Enable the device DEEPSTOP configuration */
  LL_PWR_SetPowerMode(LL_PWR_MODE_DEEPSTOP);
10043410:	2000      	movs	r0, #0
10043412:	f7ff fe6f 	bl	100430f4 <LL_PWR_SetPowerMode>

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10043416:	4b13      	ldr	r3, [pc, #76]	@ (10043464 <PWR_EnterOffMode+0xf8>)
10043418:	691a      	ldr	r2, [r3, #16]
1004341a:	4b12      	ldr	r3, [pc, #72]	@ (10043464 <PWR_EnterOffMode+0xf8>)
1004341c:	2104      	movs	r1, #4
1004341e:	430a      	orrs	r2, r1
10043420:	611a      	str	r2, [r3, #16]

  /* Setup the SYS CLK DIV with the reset value */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
10043422:	4b08      	ldr	r3, [pc, #32]	@ (10043444 <PWR_EnterOffMode+0xd8>)
10043424:	685b      	ldr	r3, [r3, #4]
10043426:	2b00      	cmp	r3, #0
10043428:	d102      	bne.n	10043430 <PWR_EnterOffMode+0xc4>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_4);
1004342a:	2040      	movs	r0, #64	@ 0x40
1004342c:	f7ff ff68 	bl	10043300 <LL_RCC_SetRC64MPLLPrescaler>
  }

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_ACTIVE);
10043430:	2005      	movs	r0, #5
10043432:	f001 fc46 	bl	10044cc2 <SYSTEM_DEBUG_SIGNAL_SET>

  /* Save the CPU context & Wait for Interrupt Request to enter in DEEPSTOP */
  CPUcontextSave();
10043436:	f7fc febd 	bl	100401b4 <CPUcontextSave>

  /* USER CODE BEGIN PWR_EnterOffMode_2 */

  /* USER CODE END PWR_EnterOffMode_2 */
}
1004343a:	46c0      	nop			@ (mov r8, r8)
1004343c:	46bd      	mov	sp, r7
1004343e:	b003      	add	sp, #12
10043440:	bd90      	pop	{r4, r7, pc}
10043442:	46c0      	nop			@ (mov r8, r8)
10043444:	200008c8 	.word	0x200008c8
10043448:	200003f0 	.word	0x200003f0
1004344c:	20000674 	.word	0x20000674
10043450:	20000670 	.word	0x20000670
10043454:	20000568 	.word	0x20000568
10043458:	20000878 	.word	0x20000878
1004345c:	20000844 	.word	0x20000844
10043460:	00ffffff 	.word	0x00ffffff
10043464:	e000ed00 	.word	0xe000ed00

10043468 <PWR_ExitOffMode>:

void PWR_ExitOffMode( void )
{
10043468:	b590      	push	{r4, r7, lr}
1004346a:	b083      	sub	sp, #12
1004346c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN PWR_ExitOffMode_1 */

  /* USER CODE END PWR_ExitOffMode_1 */

  /* Restore low speed clock configuration */
  if (clockContext.LSEenabled == TRUE)
1004346e:	4b33      	ldr	r3, [pc, #204]	@ (1004353c <PWR_ExitOffMode+0xd4>)
10043470:	785b      	ldrb	r3, [r3, #1]
10043472:	2b01      	cmp	r3, #1
10043474:	d106      	bne.n	10043484 <PWR_ExitOffMode+0x1c>
  {
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 | LL_PWR_GPIO_BIT_13);
10043476:	23c0      	movs	r3, #192	@ 0xc0
10043478:	019b      	lsls	r3, r3, #6
1004347a:	0018      	movs	r0, r3
1004347c:	f7ff fe72 	bl	10043164 <LL_PWR_SetNoPullB>
    LL_RCC_LSE_Enable();
10043480:	f7ff fed2 	bl	10043228 <LL_RCC_LSE_Enable>
  }
  if (clockContext.LSIenabled == TRUE)
10043484:	4b2d      	ldr	r3, [pc, #180]	@ (1004353c <PWR_ExitOffMode+0xd4>)
10043486:	789b      	ldrb	r3, [r3, #2]
10043488:	2b01      	cmp	r3, #1
1004348a:	d101      	bne.n	10043490 <PWR_ExitOffMode+0x28>
  {
    LL_RCC_LSI_Enable();
1004348c:	f7ff fefa 	bl	10043284 <LL_RCC_LSI_Enable>
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10043490:	4b2b      	ldr	r3, [pc, #172]	@ (10043540 <PWR_ExitOffMode+0xd8>)
10043492:	691a      	ldr	r2, [r3, #16]
10043494:	4b2a      	ldr	r3, [pc, #168]	@ (10043540 <PWR_ExitOffMode+0xd8>)
10043496:	2104      	movs	r1, #4
10043498:	438a      	bics	r2, r1
1004349a:	611a      	str	r2, [r3, #16]

  /* Restore all the peripheral registers and CPU peripipheral configuration */
  restoreDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
1004349c:	4c29      	ldr	r4, [pc, #164]	@ (10043544 <PWR_ExitOffMode+0xdc>)
1004349e:	4a2a      	ldr	r2, [pc, #168]	@ (10043548 <PWR_ExitOffMode+0xe0>)
100434a0:	492a      	ldr	r1, [pc, #168]	@ (1004354c <PWR_ExitOffMode+0xe4>)
100434a2:	482b      	ldr	r0, [pc, #172]	@ (10043550 <PWR_ExitOffMode+0xe8>)
100434a4:	4b2b      	ldr	r3, [pc, #172]	@ (10043554 <PWR_ExitOffMode+0xec>)
100434a6:	9301      	str	r3, [sp, #4]
100434a8:	4b2b      	ldr	r3, [pc, #172]	@ (10043558 <PWR_ExitOffMode+0xf0>)
100434aa:	9300      	str	r3, [sp, #0]
100434ac:	0023      	movs	r3, r4
100434ae:	f001 ffc5 	bl	1004543c <restoreDeviceLowPower>

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_ACTIVE);
100434b2:	2005      	movs	r0, #5
100434b4:	f001 fc0f 	bl	10044cd6 <SYSTEM_DEBUG_SIGNAL_RESET>
  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STANDBY_MODE_EXIT);
100434b8:	2004      	movs	r0, #4
100434ba:	f001 fc02 	bl	10044cc2 <SYSTEM_DEBUG_SIGNAL_SET>

#if defined(PWR_CR2_GPIORET)
  /* Disable the GPIO retention at wake DEEPSTOP configuration */
  LL_PWR_DisableGPIORET();
100434be:	f7ff fe2d 	bl	1004311c <LL_PWR_DisableGPIORET>
#endif

  /* Restore the CLK SYS DIV */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
100434c2:	4b1e      	ldr	r3, [pc, #120]	@ (1004353c <PWR_ExitOffMode+0xd4>)
100434c4:	685b      	ldr	r3, [r3, #4]
100434c6:	2b00      	cmp	r3, #0
100434c8:	d102      	bne.n	100434d0 <PWR_ExitOffMode+0x68>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_1);
100434ca:	2000      	movs	r0, #0
100434cc:	f7ff ff18 	bl	10043300 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* Wait until the HSE is ready */
  while(LL_RCC_HSE_IsReady() == 0U);
100434d0:	46c0      	nop			@ (mov r8, r8)
100434d2:	f7ff fe5f 	bl	10043194 <LL_RCC_HSE_IsReady>
100434d6:	1e03      	subs	r3, r0, #0
100434d8:	d0fb      	beq.n	100434d2 <PWR_ExitOffMode+0x6a>

  /* Restore the DIRECT_HSE configuration */
  if (clockContext.directHSEenabled == TRUE)
100434da:	4b18      	ldr	r3, [pc, #96]	@ (1004353c <PWR_ExitOffMode+0xd4>)
100434dc:	781b      	ldrb	r3, [r3, #0]
100434de:	2b01      	cmp	r3, #1
100434e0:	d103      	bne.n	100434ea <PWR_ExitOffMode+0x82>
  {
    LL_RCC_DIRECT_HSE_Enable();
100434e2:	f7ff fe6b 	bl	100431bc <LL_RCC_DIRECT_HSE_Enable>
    LL_RCC_RC64MPLL_Disable();
100434e6:	f7ff fefb 	bl	100432e0 <LL_RCC_RC64MPLL_Disable>
  }
  if (clockContext.LSEenabled == TRUE)
100434ea:	4b14      	ldr	r3, [pc, #80]	@ (1004353c <PWR_ExitOffMode+0xd4>)
100434ec:	785b      	ldrb	r3, [r3, #1]
100434ee:	2b01      	cmp	r3, #1
100434f0:	d104      	bne.n	100434fc <PWR_ExitOffMode+0x94>
  {
    /* Wait until the LSE is ready */
    while(LL_RCC_LSE_IsReady() == 0U);
100434f2:	46c0      	nop			@ (mov r8, r8)
100434f4:	f7ff feb6 	bl	10043264 <LL_RCC_LSE_IsReady>
100434f8:	1e03      	subs	r3, r0, #0
100434fa:	d0fb      	beq.n	100434f4 <PWR_ExitOffMode+0x8c>
  }
  if (clockContext.LSIenabled == TRUE)
100434fc:	4b0f      	ldr	r3, [pc, #60]	@ (1004353c <PWR_ExitOffMode+0xd4>)
100434fe:	789b      	ldrb	r3, [r3, #2]
10043500:	2b01      	cmp	r3, #1
10043502:	d104      	bne.n	1004350e <PWR_ExitOffMode+0xa6>
  {
    /* Wait until the LSI is ready */
    while(LL_RCC_LSI_IsReady() == 0U);
10043504:	46c0      	nop			@ (mov r8, r8)
10043506:	f7ff fedb 	bl	100432c0 <LL_RCC_LSI_IsReady>
1004350a:	1e03      	subs	r3, r0, #0
1004350c:	d0fb      	beq.n	10043506 <PWR_ExitOffMode+0x9e>
  }
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004350e:	2001      	movs	r0, #1
10043510:	f7ff ff18 	bl	10043344 <LL_APB2_GRP1_IsEnabledClock>
10043514:	1e03      	subs	r3, r0, #0
10043516:	d004      	beq.n	10043522 <PWR_ExitOffMode+0xba>
  {
    /* Wait untile the ABSOLUTE TIME clock correctly */
    while(WAKEUP->ABSOLUTE_TIME == 0xF);
10043518:	46c0      	nop			@ (mov r8, r8)
1004351a:	4b10      	ldr	r3, [pc, #64]	@ (1004355c <PWR_ExitOffMode+0xf4>)
1004351c:	691b      	ldr	r3, [r3, #16]
1004351e:	2b0f      	cmp	r3, #15
10043520:	d0fb      	beq.n	1004351a <PWR_ExitOffMode+0xb2>
  }

  if(RAM_VR.WakeupFromSleepFlag)
10043522:	4b0f      	ldr	r3, [pc, #60]	@ (10043560 <PWR_ExitOffMode+0xf8>)
10043524:	689b      	ldr	r3, [r3, #8]
10043526:	2b00      	cmp	r3, #0
10043528:	d001      	beq.n	1004352e <PWR_ExitOffMode+0xc6>
  {
    /* Handler to manage the IOs IRQ if needed */
    HAL_PWR_WKUP_IRQHandler();
1004352a:	f003 f967 	bl	100467fc <HAL_PWR_WKUP_IRQHandler>

  /* USER CODE BEGIN PWR_ExitOffMode_2 */

  /* USER CODE END PWR_ExitOffMode_2 */

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STANDBY_MODE_EXIT);
1004352e:	2004      	movs	r0, #4
10043530:	f001 fbd1 	bl	10044cd6 <SYSTEM_DEBUG_SIGNAL_RESET>
}
10043534:	46c0      	nop			@ (mov r8, r8)
10043536:	46bd      	mov	sp, r7
10043538:	b001      	add	sp, #4
1004353a:	bd90      	pop	{r4, r7, pc}
1004353c:	200008c8 	.word	0x200008c8
10043540:	e000ed00 	.word	0xe000ed00
10043544:	20000674 	.word	0x20000674
10043548:	20000670 	.word	0x20000670
1004354c:	20000568 	.word	0x20000568
10043550:	200003f0 	.word	0x200003f0
10043554:	20000878 	.word	0x20000878
10043558:	20000844 	.word	0x20000844
1004355c:	60001800 	.word	0x60001800
10043560:	20000004 	.word	0x20000004

10043564 <PWR_EnterStopMode>:

void PWR_EnterStopMode( void )
{
10043564:	b590      	push	{r4, r7, lr}
10043566:	b085      	sub	sp, #20
10043568:	af02      	add	r7, sp, #8
  PWR_DEEPSTOPTypeDef configDS;

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_ENTER);
1004356a:	2000      	movs	r0, #0
1004356c:	f001 fba9 	bl	10044cc2 <SYSTEM_DEBUG_SIGNAL_SET>
  /* USER CODE BEGIN PWR_EnterStopMode_1 */

  /* USER CODE END PWR_EnterStopMode_1 */

  /* Save the clock configuration */
  clockContext.directHSEenabled = FALSE;
10043570:	4b29      	ldr	r3, [pc, #164]	@ (10043618 <PWR_EnterStopMode+0xb4>)
10043572:	2200      	movs	r2, #0
10043574:	701a      	strb	r2, [r3, #0]
  clockContext.LSEenabled = FALSE;
10043576:	4b28      	ldr	r3, [pc, #160]	@ (10043618 <PWR_EnterStopMode+0xb4>)
10043578:	2200      	movs	r2, #0
1004357a:	705a      	strb	r2, [r3, #1]
  clockContext.LSIenabled = FALSE;
1004357c:	4b26      	ldr	r3, [pc, #152]	@ (10043618 <PWR_EnterStopMode+0xb4>)
1004357e:	2200      	movs	r2, #0
10043580:	709a      	strb	r2, [r3, #2]
  if (LL_RCC_DIRECT_HSE_IsEnabled())
10043582:	f7ff fe41 	bl	10043208 <LL_RCC_DIRECT_HSE_IsEnabled>
10043586:	1e03      	subs	r3, r0, #0
10043588:	d002      	beq.n	10043590 <PWR_EnterStopMode+0x2c>
  {
    clockContext.directHSEenabled = TRUE;
1004358a:	4b23      	ldr	r3, [pc, #140]	@ (10043618 <PWR_EnterStopMode+0xb4>)
1004358c:	2201      	movs	r2, #1
1004358e:	701a      	strb	r2, [r3, #0]
  }
#if defined(STM32WB07)
  clockContext.clkDiv =  LL_RCC_GetRC64MPLLPrescaler();
#else
  clockContext.clkDiv = LL_RCC_GetCLKSYSPrescalerStatus();
10043590:	f7ff feca 	bl	10043328 <LL_RCC_GetCLKSYSPrescalerStatus>
10043594:	0002      	movs	r2, r0
10043596:	4b20      	ldr	r3, [pc, #128]	@ (10043618 <PWR_EnterStopMode+0xb4>)
10043598:	605a      	str	r2, [r3, #4]
#endif

  /* Setup the wakeup sources */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_BLEHOST|PWR_WAKEUP_BLE, 0);
1004359a:	23c0      	movs	r3, #192	@ 0xc0
1004359c:	019b      	lsls	r3, r3, #6
1004359e:	2100      	movs	r1, #0
100435a0:	0018      	movs	r0, r3
100435a2:	f003 f87b 	bl	1004669c <HAL_PWR_EnableWakeUpPin>

  /* This signal cannot be reset later otherwise the GPIO output will be
     automatically restored to high at wakeup. */
  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_ENTER);
100435a6:	2000      	movs	r0, #0
100435a8:	f001 fb95 	bl	10044cd6 <SYSTEM_DEBUG_SIGNAL_RESET>

  /* Save all the peripheral registers and CPU peripipheral configuration */
  apb0.deepstop_wdg_state = ENABLE;
100435ac:	4a1b      	ldr	r2, [pc, #108]	@ (1004361c <PWR_EnterStopMode+0xb8>)
100435ae:	23ba      	movs	r3, #186	@ 0xba
100435b0:	005b      	lsls	r3, r3, #1
100435b2:	2101      	movs	r1, #1
100435b4:	50d1      	str	r1, [r2, r3]
  prepareDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
100435b6:	4c1a      	ldr	r4, [pc, #104]	@ (10043620 <PWR_EnterStopMode+0xbc>)
100435b8:	4a1a      	ldr	r2, [pc, #104]	@ (10043624 <PWR_EnterStopMode+0xc0>)
100435ba:	491b      	ldr	r1, [pc, #108]	@ (10043628 <PWR_EnterStopMode+0xc4>)
100435bc:	4817      	ldr	r0, [pc, #92]	@ (1004361c <PWR_EnterStopMode+0xb8>)
100435be:	4b1b      	ldr	r3, [pc, #108]	@ (1004362c <PWR_EnterStopMode+0xc8>)
100435c0:	9301      	str	r3, [sp, #4]
100435c2:	4b1b      	ldr	r3, [pc, #108]	@ (10043630 <PWR_EnterStopMode+0xcc>)
100435c4:	9300      	str	r3, [sp, #0]
100435c6:	0023      	movs	r3, r4
100435c8:	f001 ff1c 	bl	10045404 <prepareDeviceLowPower>

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(LL_PWR_WAKEUP_ALL);
100435cc:	4b19      	ldr	r3, [pc, #100]	@ (10043634 <PWR_EnterStopMode+0xd0>)
100435ce:	0018      	movs	r0, r3
100435d0:	f7ff fdb4 	bl	1004313c <LL_PWR_ClearWakeupSource>

  /* DEEPSTOP configuration */
  configDS.deepStopMode = PWR_DEEPSTOP_WITH_SLOW_CLOCK_ON;
100435d4:	2301      	movs	r3, #1
100435d6:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigDEEPSTOP(&configDS);
100435d8:	1d3b      	adds	r3, r7, #4
100435da:	0018      	movs	r0, r3
100435dc:	f003 f8ba 	bl	10046754 <HAL_PWR_ConfigDEEPSTOP>

  /* Enable the device DEEPSTOP configuration */
  LL_PWR_SetPowerMode(LL_PWR_MODE_DEEPSTOP);
100435e0:	2000      	movs	r0, #0
100435e2:	f7ff fd87 	bl	100430f4 <LL_PWR_SetPowerMode>

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
100435e6:	4b14      	ldr	r3, [pc, #80]	@ (10043638 <PWR_EnterStopMode+0xd4>)
100435e8:	691a      	ldr	r2, [r3, #16]
100435ea:	4b13      	ldr	r3, [pc, #76]	@ (10043638 <PWR_EnterStopMode+0xd4>)
100435ec:	2104      	movs	r1, #4
100435ee:	430a      	orrs	r2, r1
100435f0:	611a      	str	r2, [r3, #16]

  /* Setup the SYS CLK DIV with the reset value */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
100435f2:	4b09      	ldr	r3, [pc, #36]	@ (10043618 <PWR_EnterStopMode+0xb4>)
100435f4:	685b      	ldr	r3, [r3, #4]
100435f6:	2b00      	cmp	r3, #0
100435f8:	d102      	bne.n	10043600 <PWR_EnterStopMode+0x9c>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_4);
100435fa:	2040      	movs	r0, #64	@ 0x40
100435fc:	f7ff fe80 	bl	10043300 <LL_RCC_SetRC64MPLLPrescaler>
  }

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_ACTIVE);
10043600:	2002      	movs	r0, #2
10043602:	f001 fb5e 	bl	10044cc2 <SYSTEM_DEBUG_SIGNAL_SET>

  /* Save the CPU context & Wait for Interrupt Request to enter in DEEPSTOP */
  CPUcontextSave();
10043606:	f7fc fdd5 	bl	100401b4 <CPUcontextSave>

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_ACTIVE);
1004360a:	2002      	movs	r0, #2
1004360c:	f001 fb63 	bl	10044cd6 <SYSTEM_DEBUG_SIGNAL_RESET>

  /* USER CODE BEGIN PWR_EnterStopMode_2 */

  /* USER CODE END PWR_EnterStopMode_2 */
}
10043610:	46c0      	nop			@ (mov r8, r8)
10043612:	46bd      	mov	sp, r7
10043614:	b003      	add	sp, #12
10043616:	bd90      	pop	{r4, r7, pc}
10043618:	200008c8 	.word	0x200008c8
1004361c:	200003f0 	.word	0x200003f0
10043620:	20000674 	.word	0x20000674
10043624:	20000670 	.word	0x20000670
10043628:	20000568 	.word	0x20000568
1004362c:	20000878 	.word	0x20000878
10043630:	20000844 	.word	0x20000844
10043634:	00ffffff 	.word	0x00ffffff
10043638:	e000ed00 	.word	0xe000ed00

1004363c <PWR_ExitStopMode>:

void PWR_ExitStopMode( void )
{
1004363c:	b590      	push	{r4, r7, lr}
1004363e:	b083      	sub	sp, #12
10043640:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN PWR_ExitStopMode_1 */

  /* USER CODE END PWR_ExitStopMode_1 */

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
10043642:	4b1b      	ldr	r3, [pc, #108]	@ (100436b0 <PWR_ExitStopMode+0x74>)
10043644:	691a      	ldr	r2, [r3, #16]
10043646:	4b1a      	ldr	r3, [pc, #104]	@ (100436b0 <PWR_ExitStopMode+0x74>)
10043648:	2104      	movs	r1, #4
1004364a:	438a      	bics	r2, r1
1004364c:	611a      	str	r2, [r3, #16]

  /* Restore all the peripheral registers and CPU peripipheral configuration */
  restoreDeviceLowPower(&apb0, &apb1, &apb2, &ahb0, &cpuPeriph, cStackPreamble);
1004364e:	4c19      	ldr	r4, [pc, #100]	@ (100436b4 <PWR_ExitStopMode+0x78>)
10043650:	4a19      	ldr	r2, [pc, #100]	@ (100436b8 <PWR_ExitStopMode+0x7c>)
10043652:	491a      	ldr	r1, [pc, #104]	@ (100436bc <PWR_ExitStopMode+0x80>)
10043654:	481a      	ldr	r0, [pc, #104]	@ (100436c0 <PWR_ExitStopMode+0x84>)
10043656:	4b1b      	ldr	r3, [pc, #108]	@ (100436c4 <PWR_ExitStopMode+0x88>)
10043658:	9301      	str	r3, [sp, #4]
1004365a:	4b1b      	ldr	r3, [pc, #108]	@ (100436c8 <PWR_ExitStopMode+0x8c>)
1004365c:	9300      	str	r3, [sp, #0]
1004365e:	0023      	movs	r3, r4
10043660:	f001 feec 	bl	1004543c <restoreDeviceLowPower>

  SYSTEM_DEBUG_SIGNAL_SET(LOW_POWER_STOP_MODE_EXIT);
10043664:	2001      	movs	r0, #1
10043666:	f001 fb2c 	bl	10044cc2 <SYSTEM_DEBUG_SIGNAL_SET>

#if defined(PWR_CR2_GPIORET)
  /* Disable the GPIO retention at wake DEEPSTOP configuration */
  LL_PWR_DisableGPIORET();
1004366a:	f7ff fd57 	bl	1004311c <LL_PWR_DisableGPIORET>
#endif

  /* Restore the CLK SYS DIV */
  if (clockContext.clkDiv == LL_RCC_RC64MPLL_DIV_1)
1004366e:	4b17      	ldr	r3, [pc, #92]	@ (100436cc <PWR_ExitStopMode+0x90>)
10043670:	685b      	ldr	r3, [r3, #4]
10043672:	2b00      	cmp	r3, #0
10043674:	d102      	bne.n	1004367c <PWR_ExitStopMode+0x40>
  {
    LL_RCC_SetRC64MPLLPrescaler(LL_RCC_RC64MPLL_DIV_1);
10043676:	2000      	movs	r0, #0
10043678:	f7ff fe42 	bl	10043300 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* Wait until the HSE is ready */
  while(LL_RCC_HSE_IsReady() == 0U);
1004367c:	46c0      	nop			@ (mov r8, r8)
1004367e:	f7ff fd89 	bl	10043194 <LL_RCC_HSE_IsReady>
10043682:	1e03      	subs	r3, r0, #0
10043684:	d0fb      	beq.n	1004367e <PWR_ExitStopMode+0x42>

  /* Restore the DIRECT_HSE configuration */
  if (clockContext.directHSEenabled == TRUE)
10043686:	4b11      	ldr	r3, [pc, #68]	@ (100436cc <PWR_ExitStopMode+0x90>)
10043688:	781b      	ldrb	r3, [r3, #0]
1004368a:	2b01      	cmp	r3, #1
1004368c:	d103      	bne.n	10043696 <PWR_ExitStopMode+0x5a>
  {
    LL_RCC_DIRECT_HSE_Enable();
1004368e:	f7ff fd95 	bl	100431bc <LL_RCC_DIRECT_HSE_Enable>
    LL_RCC_RC64MPLL_Disable();
10043692:	f7ff fe25 	bl	100432e0 <LL_RCC_RC64MPLL_Disable>
  }

  if(RAM_VR.WakeupFromSleepFlag)
10043696:	4b0e      	ldr	r3, [pc, #56]	@ (100436d0 <PWR_ExitStopMode+0x94>)
10043698:	689b      	ldr	r3, [r3, #8]
1004369a:	2b00      	cmp	r3, #0
1004369c:	d001      	beq.n	100436a2 <PWR_ExitStopMode+0x66>
  {
    /* Handler to manage the IOs IRQ if needed */
    HAL_PWR_WKUP_IRQHandler();
1004369e:	f003 f8ad 	bl	100467fc <HAL_PWR_WKUP_IRQHandler>

  /* USER CODE BEGIN PWR_ExitStopMode_2 */

  /* USER CODE END PWR_ExitStopMode_2 */

  SYSTEM_DEBUG_SIGNAL_RESET(LOW_POWER_STOP_MODE_EXIT);
100436a2:	2001      	movs	r0, #1
100436a4:	f001 fb17 	bl	10044cd6 <SYSTEM_DEBUG_SIGNAL_RESET>
}
100436a8:	46c0      	nop			@ (mov r8, r8)
100436aa:	46bd      	mov	sp, r7
100436ac:	b001      	add	sp, #4
100436ae:	bd90      	pop	{r4, r7, pc}
100436b0:	e000ed00 	.word	0xe000ed00
100436b4:	20000674 	.word	0x20000674
100436b8:	20000670 	.word	0x20000670
100436bc:	20000568 	.word	0x20000568
100436c0:	200003f0 	.word	0x200003f0
100436c4:	20000878 	.word	0x20000878
100436c8:	20000844 	.word	0x20000844
100436cc:	200008c8 	.word	0x200008c8
100436d0:	20000004 	.word	0x20000004

100436d4 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode( void )
{
100436d4:	b580      	push	{r7, lr}
100436d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_EnterSleepMode */
  HAL_SuspendTick();
100436d8:	f002 fa1c 	bl	10045b14 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode();
100436dc:	f003 f82c 	bl	10046738 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE END PWR_EnterSleepMode */
}
100436e0:	46c0      	nop			@ (mov r8, r8)
100436e2:	46bd      	mov	sp, r7
100436e4:	bd80      	pop	{r7, pc}

100436e6 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode( void )
{
100436e6:	b580      	push	{r7, lr}
100436e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_ExitSleepMode */
  HAL_ResumeTick();
100436ea:	f002 fa21 	bl	10045b30 <HAL_ResumeTick>
  /* USER CODE END PWR_ExitSleepMode */
}
100436ee:	46c0      	nop			@ (mov r8, r8)
100436f0:	46bd      	mov	sp, r7
100436f2:	bd80      	pop	{r7, pc}

100436f4 <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
100436f4:	b580      	push	{r7, lr}
100436f6:	b084      	sub	sp, #16
100436f8:	af00      	add	r7, sp, #0
100436fa:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
100436fc:	687b      	ldr	r3, [r7, #4]
100436fe:	681b      	ldr	r3, [r3, #0]
10043700:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
10043702:	687b      	ldr	r3, [r7, #4]
10043704:	2200      	movs	r2, #0
10043706:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
10043708:	687b      	ldr	r3, [r7, #4]
1004370a:	2200      	movs	r2, #0
1004370c:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
1004370e:	687b      	ldr	r3, [r7, #4]
10043710:	2200      	movs	r2, #0
10043712:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
10043714:	687b      	ldr	r3, [r7, #4]
10043716:	2200      	movs	r2, #0
10043718:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
1004371a:	68fb      	ldr	r3, [r7, #12]
1004371c:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
1004371e:	68bb      	ldr	r3, [r7, #8]
10043720:	781b      	ldrb	r3, [r3, #0]
10043722:	2bff      	cmp	r3, #255	@ 0xff
10043724:	d10c      	bne.n	10043740 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
10043726:	687b      	ldr	r3, [r7, #4]
10043728:	685b      	ldr	r3, [r3, #4]
1004372a:	b29a      	uxth	r2, r3
1004372c:	68fb      	ldr	r3, [r7, #12]
1004372e:	b29b      	uxth	r3, r3
10043730:	1ad3      	subs	r3, r2, r3
10043732:	b29b      	uxth	r3, r3
10043734:	3b04      	subs	r3, #4
10043736:	b29a      	uxth	r2, r3
10043738:	687b      	ldr	r3, [r7, #4]
1004373a:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
1004373c:	2300      	movs	r3, #0
1004373e:	e028      	b.n	10043792 <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
10043740:	68bb      	ldr	r3, [r7, #8]
10043742:	781b      	ldrb	r3, [r3, #0]
10043744:	2bfe      	cmp	r3, #254	@ 0xfe
10043746:	d106      	bne.n	10043756 <NVMDB_get_info+0x62>
    {
      info->valid_records++;
10043748:	687b      	ldr	r3, [r7, #4]
1004374a:	891b      	ldrh	r3, [r3, #8]
1004374c:	3301      	adds	r3, #1
1004374e:	b29a      	uxth	r2, r3
10043750:	687b      	ldr	r3, [r7, #4]
10043752:	811a      	strh	r2, [r3, #8]
10043754:	e00c      	b.n	10043770 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
10043756:	68bb      	ldr	r3, [r7, #8]
10043758:	781b      	ldrb	r3, [r3, #0]
1004375a:	2b00      	cmp	r3, #0
1004375c:	d106      	bne.n	1004376c <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
1004375e:	687b      	ldr	r3, [r7, #4]
10043760:	895b      	ldrh	r3, [r3, #10]
10043762:	3301      	adds	r3, #1
10043764:	b29a      	uxth	r2, r3
10043766:	687b      	ldr	r3, [r7, #4]
10043768:	815a      	strh	r2, [r3, #10]
1004376a:	e001      	b.n	10043770 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
1004376c:	2303      	movs	r3, #3
1004376e:	e010      	b.n	10043792 <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10043770:	68bb      	ldr	r3, [r7, #8]
10043772:	885b      	ldrh	r3, [r3, #2]
10043774:	3303      	adds	r3, #3
10043776:	2203      	movs	r2, #3
10043778:	4313      	orrs	r3, r2
1004377a:	001a      	movs	r2, r3
1004377c:	68fb      	ldr	r3, [r7, #12]
1004377e:	18d3      	adds	r3, r2, r3
10043780:	3301      	adds	r3, #1
10043782:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
10043784:	68fb      	ldr	r3, [r7, #12]
10043786:	1d5a      	adds	r2, r3, #5
10043788:	687b      	ldr	r3, [r7, #4]
1004378a:	685b      	ldr	r3, [r3, #4]
1004378c:	429a      	cmp	r2, r3
1004378e:	d3c4      	bcc.n	1004371a <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
10043790:	2300      	movs	r3, #0
    }
  }
}
10043792:	0018      	movs	r0, r3
10043794:	46bd      	mov	sp, r7
10043796:	b004      	add	sp, #16
10043798:	bd80      	pop	{r7, pc}

1004379a <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
1004379a:	b580      	push	{r7, lr}
1004379c:	b086      	sub	sp, #24
1004379e:	af00      	add	r7, sp, #0
100437a0:	60f8      	str	r0, [r7, #12]
100437a2:	607a      	str	r2, [r7, #4]
100437a4:	603b      	str	r3, [r7, #0]
100437a6:	230b      	movs	r3, #11
100437a8:	18fb      	adds	r3, r7, r3
100437aa:	1c0a      	adds	r2, r1, #0
100437ac:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
100437ae:	2020      	movs	r0, #32
100437b0:	183b      	adds	r3, r7, r0
100437b2:	881b      	ldrh	r3, [r3, #0]
100437b4:	2b00      	cmp	r3, #0
100437b6:	d00a      	beq.n	100437ce <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
100437b8:	2110      	movs	r1, #16
100437ba:	187a      	adds	r2, r7, r1
100437bc:	183b      	adds	r3, r7, r0
100437be:	881b      	ldrh	r3, [r3, #0]
100437c0:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
100437c2:	187b      	adds	r3, r7, r1
100437c4:	22fe      	movs	r2, #254	@ 0xfe
100437c6:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
100437c8:	187b      	adds	r3, r7, r1
100437ca:	617b      	str	r3, [r7, #20]
100437cc:	e002      	b.n	100437d4 <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
100437ce:	68fb      	ldr	r3, [r7, #12]
100437d0:	685b      	ldr	r3, [r3, #4]
100437d2:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
100437d4:	68fb      	ldr	r3, [r7, #12]
100437d6:	685a      	ldr	r2, [r3, #4]
100437d8:	68fb      	ldr	r3, [r7, #12]
100437da:	689b      	ldr	r3, [r3, #8]
100437dc:	429a      	cmp	r2, r3
100437de:	d203      	bcs.n	100437e8 <NextRecordNoLock+0x4e>
100437e0:	697b      	ldr	r3, [r7, #20]
100437e2:	781b      	ldrb	r3, [r3, #0]
100437e4:	2bff      	cmp	r3, #255	@ 0xff
100437e6:	d101      	bne.n	100437ec <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
100437e8:	2304      	movs	r3, #4
100437ea:	e04b      	b.n	10043884 <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
100437ec:	68fb      	ldr	r3, [r7, #12]
100437ee:	7b1b      	ldrb	r3, [r3, #12]
100437f0:	2b00      	cmp	r3, #0
100437f2:	d003      	beq.n	100437fc <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
100437f4:	68fb      	ldr	r3, [r7, #12]
100437f6:	2200      	movs	r2, #0
100437f8:	731a      	strb	r2, [r3, #12]
100437fa:	e019      	b.n	10043830 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
100437fc:	68fb      	ldr	r3, [r7, #12]
100437fe:	685b      	ldr	r3, [r3, #4]
10043800:	697a      	ldr	r2, [r7, #20]
10043802:	8852      	ldrh	r2, [r2, #2]
10043804:	3203      	adds	r2, #3
10043806:	2103      	movs	r1, #3
10043808:	430a      	orrs	r2, r1
1004380a:	189b      	adds	r3, r3, r2
1004380c:	1c5a      	adds	r2, r3, #1
1004380e:	68fb      	ldr	r3, [r7, #12]
10043810:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
10043812:	68fb      	ldr	r3, [r7, #12]
10043814:	685b      	ldr	r3, [r3, #4]
10043816:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10043818:	68fb      	ldr	r3, [r7, #12]
1004381a:	685a      	ldr	r2, [r3, #4]
1004381c:	68fb      	ldr	r3, [r7, #12]
1004381e:	689b      	ldr	r3, [r3, #8]
10043820:	429a      	cmp	r2, r3
10043822:	d203      	bcs.n	1004382c <NextRecordNoLock+0x92>
10043824:	697b      	ldr	r3, [r7, #20]
10043826:	781b      	ldrb	r3, [r3, #0]
10043828:	2bff      	cmp	r3, #255	@ 0xff
1004382a:	d101      	bne.n	10043830 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
1004382c:	2304      	movs	r3, #4
1004382e:	e029      	b.n	10043884 <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
10043830:	697b      	ldr	r3, [r7, #20]
10043832:	781b      	ldrb	r3, [r3, #0]
10043834:	2b00      	cmp	r3, #0
10043836:	d023      	beq.n	10043880 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
10043838:	697b      	ldr	r3, [r7, #20]
1004383a:	781b      	ldrb	r3, [r3, #0]
1004383c:	2bfe      	cmp	r3, #254	@ 0xfe
1004383e:	d001      	beq.n	10043844 <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
10043840:	2303      	movs	r3, #3
10043842:	e01f      	b.n	10043884 <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
10043844:	220b      	movs	r2, #11
10043846:	18bb      	adds	r3, r7, r2
10043848:	781b      	ldrb	r3, [r3, #0]
1004384a:	2bff      	cmp	r3, #255	@ 0xff
1004384c:	d005      	beq.n	1004385a <NextRecordNoLock+0xc0>
1004384e:	697b      	ldr	r3, [r7, #20]
10043850:	785b      	ldrb	r3, [r3, #1]
10043852:	18ba      	adds	r2, r7, r2
10043854:	7812      	ldrb	r2, [r2, #0]
10043856:	429a      	cmp	r2, r3
10043858:	d1c8      	bne.n	100437ec <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
1004385a:	68fb      	ldr	r3, [r7, #12]
1004385c:	685b      	ldr	r3, [r3, #4]
1004385e:	3304      	adds	r3, #4
10043860:	001a      	movs	r2, r3
10043862:	687b      	ldr	r3, [r7, #4]
10043864:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
10043866:	697b      	ldr	r3, [r7, #20]
10043868:	885a      	ldrh	r2, [r3, #2]
1004386a:	683b      	ldr	r3, [r7, #0]
1004386c:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
1004386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10043870:	2b00      	cmp	r3, #0
10043872:	d003      	beq.n	1004387c <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
10043874:	697b      	ldr	r3, [r7, #20]
10043876:	785a      	ldrb	r2, [r3, #1]
10043878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004387a:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
1004387c:	2300      	movs	r3, #0
1004387e:	e001      	b.n	10043884 <NextRecordNoLock+0xea>
      continue;
10043880:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
10043882:	e7b3      	b.n	100437ec <NextRecordNoLock+0x52>
    }
  }
}
10043884:	0018      	movs	r0, r3
10043886:	46bd      	mov	sp, r7
10043888:	b006      	add	sp, #24
1004388a:	bd80      	pop	{r7, pc}

1004388c <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
1004388c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004388e:	b08b      	sub	sp, #44	@ 0x2c
10043890:	af02      	add	r7, sp, #8
10043892:	60f8      	str	r0, [r7, #12]
10043894:	0008      	movs	r0, r1
10043896:	0011      	movs	r1, r2
10043898:	607b      	str	r3, [r7, #4]
1004389a:	230b      	movs	r3, #11
1004389c:	18fb      	adds	r3, r7, r3
1004389e:	1c02      	adds	r2, r0, #0
100438a0:	701a      	strb	r2, [r3, #0]
100438a2:	2208      	movs	r2, #8
100438a4:	0010      	movs	r0, r2
100438a6:	18bb      	adds	r3, r7, r2
100438a8:	1c0a      	adds	r2, r1, #0
100438aa:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
100438ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100438ae:	2200      	movs	r2, #0
100438b0:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
100438b2:	261f      	movs	r6, #31
100438b4:	19bc      	adds	r4, r7, r6
100438b6:	2216      	movs	r2, #22
100438b8:	18bd      	adds	r5, r7, r2
100438ba:	2218      	movs	r2, #24
100438bc:	18ba      	adds	r2, r7, r2
100438be:	230b      	movs	r3, #11
100438c0:	18fb      	adds	r3, r7, r3
100438c2:	7819      	ldrb	r1, [r3, #0]
100438c4:	68fb      	ldr	r3, [r7, #12]
100438c6:	469c      	mov	ip, r3
100438c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100438ca:	9301      	str	r3, [sp, #4]
100438cc:	2338      	movs	r3, #56	@ 0x38
100438ce:	181b      	adds	r3, r3, r0
100438d0:	19db      	adds	r3, r3, r7
100438d2:	881b      	ldrh	r3, [r3, #0]
100438d4:	9300      	str	r3, [sp, #0]
100438d6:	002b      	movs	r3, r5
100438d8:	4660      	mov	r0, ip
100438da:	f7ff ff5e 	bl	1004379a <NextRecordNoLock>
100438de:	0003      	movs	r3, r0
100438e0:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
100438e2:	19bb      	adds	r3, r7, r6
100438e4:	781b      	ldrb	r3, [r3, #0]
100438e6:	2b00      	cmp	r3, #0
100438e8:	d002      	beq.n	100438f0 <ReadNextRecordNoLock+0x64>
  {
    return status;
100438ea:	19bb      	adds	r3, r7, r6
100438ec:	781b      	ldrb	r3, [r3, #0]
100438ee:	e027      	b.n	10043940 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
100438f0:	2316      	movs	r3, #22
100438f2:	18fb      	adds	r3, r7, r3
100438f4:	881b      	ldrh	r3, [r3, #0]
100438f6:	2208      	movs	r2, #8
100438f8:	18ba      	adds	r2, r7, r2
100438fa:	8812      	ldrh	r2, [r2, #0]
100438fc:	429a      	cmp	r2, r3
100438fe:	d301      	bcc.n	10043904 <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10043900:	2306      	movs	r3, #6
10043902:	e01d      	b.n	10043940 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
10043904:	69ba      	ldr	r2, [r7, #24]
10043906:	2408      	movs	r4, #8
10043908:	193b      	adds	r3, r7, r4
1004390a:	881b      	ldrh	r3, [r3, #0]
1004390c:	18d1      	adds	r1, r2, r3
1004390e:	2330      	movs	r3, #48	@ 0x30
10043910:	2208      	movs	r2, #8
10043912:	189b      	adds	r3, r3, r2
10043914:	19db      	adds	r3, r3, r7
10043916:	881a      	ldrh	r2, [r3, #0]
10043918:	2316      	movs	r3, #22
1004391a:	18fb      	adds	r3, r7, r3
1004391c:	881b      	ldrh	r3, [r3, #0]
1004391e:	0018      	movs	r0, r3
10043920:	193b      	adds	r3, r7, r4
10043922:	881b      	ldrh	r3, [r3, #0]
10043924:	1ac3      	subs	r3, r0, r3
10043926:	429a      	cmp	r2, r3
10043928:	dd00      	ble.n	1004392c <ReadNextRecordNoLock+0xa0>
1004392a:	001a      	movs	r2, r3
1004392c:	687b      	ldr	r3, [r7, #4]
1004392e:	0018      	movs	r0, r3
10043930:	f00b fb31 	bl	1004ef96 <memcpy>
  *size_p = data_len;
10043934:	2316      	movs	r3, #22
10043936:	18fb      	adds	r3, r7, r3
10043938:	881a      	ldrh	r2, [r3, #0]
1004393a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004393c:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004393e:	2300      	movs	r3, #0
}
10043940:	0018      	movs	r0, r3
10043942:	46bd      	mov	sp, r7
10043944:	b009      	add	sp, #36	@ 0x24
10043946:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043948 <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
10043948:	b590      	push	{r4, r7, lr}
1004394a:	b089      	sub	sp, #36	@ 0x24
1004394c:	af00      	add	r7, sp, #0
1004394e:	60f8      	str	r0, [r7, #12]
10043950:	607a      	str	r2, [r7, #4]
10043952:	200a      	movs	r0, #10
10043954:	183b      	adds	r3, r7, r0
10043956:	1c0a      	adds	r2, r1, #0
10043958:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
1004395a:	687b      	ldr	r3, [r7, #4]
1004395c:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
1004395e:	0001      	movs	r1, r0
10043960:	187b      	adds	r3, r7, r1
10043962:	881b      	ldrh	r3, [r3, #0]
10043964:	089b      	lsrs	r3, r3, #2
10043966:	b29a      	uxth	r2, r3
10043968:	2016      	movs	r0, #22
1004396a:	183b      	adds	r3, r7, r0
1004396c:	0092      	lsls	r2, r2, #2
1004396e:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
10043970:	187b      	adds	r3, r7, r1
10043972:	881b      	ldrh	r3, [r3, #0]
10043974:	b2d9      	uxtb	r1, r3
10043976:	183b      	adds	r3, r7, r0
10043978:	881b      	ldrh	r3, [r3, #0]
1004397a:	b2da      	uxtb	r2, r3
1004397c:	2315      	movs	r3, #21
1004397e:	18fb      	adds	r3, r7, r3
10043980:	1a8a      	subs	r2, r1, r2
10043982:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
10043984:	2300      	movs	r3, #0
10043986:	61fb      	str	r3, [r7, #28]
10043988:	e013      	b.n	100439b2 <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
1004398a:	69fb      	ldr	r3, [r7, #28]
1004398c:	69ba      	ldr	r2, [r7, #24]
1004398e:	18d1      	adds	r1, r2, r3
10043990:	2310      	movs	r3, #16
10043992:	18fb      	adds	r3, r7, r3
10043994:	2204      	movs	r2, #4
10043996:	0018      	movs	r0, r3
10043998:	f00b fafd 	bl	1004ef96 <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
1004399c:	69fa      	ldr	r2, [r7, #28]
1004399e:	68fb      	ldr	r3, [r7, #12]
100439a0:	18d3      	adds	r3, r2, r3
100439a2:	693a      	ldr	r2, [r7, #16]
100439a4:	0019      	movs	r1, r3
100439a6:	2000      	movs	r0, #0
100439a8:	f002 f9ae 	bl	10045d08 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
100439ac:	69fb      	ldr	r3, [r7, #28]
100439ae:	3304      	adds	r3, #4
100439b0:	61fb      	str	r3, [r7, #28]
100439b2:	2416      	movs	r4, #22
100439b4:	193b      	adds	r3, r7, r4
100439b6:	881b      	ldrh	r3, [r3, #0]
100439b8:	69fa      	ldr	r2, [r7, #28]
100439ba:	429a      	cmp	r2, r3
100439bc:	dbe5      	blt.n	1004398a <write_data+0x42>
  }
  word = 0xFFFFFFFF;
100439be:	2301      	movs	r3, #1
100439c0:	425b      	negs	r3, r3
100439c2:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
100439c4:	193b      	adds	r3, r7, r4
100439c6:	881b      	ldrh	r3, [r3, #0]
100439c8:	69ba      	ldr	r2, [r7, #24]
100439ca:	18d1      	adds	r1, r2, r3
100439cc:	2315      	movs	r3, #21
100439ce:	18fb      	adds	r3, r7, r3
100439d0:	781a      	ldrb	r2, [r3, #0]
100439d2:	2310      	movs	r3, #16
100439d4:	18fb      	adds	r3, r7, r3
100439d6:	0018      	movs	r0, r3
100439d8:	f00b fadd 	bl	1004ef96 <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
100439dc:	193b      	adds	r3, r7, r4
100439de:	881a      	ldrh	r2, [r3, #0]
100439e0:	68fb      	ldr	r3, [r7, #12]
100439e2:	18d3      	adds	r3, r2, r3
100439e4:	693a      	ldr	r2, [r7, #16]
100439e6:	0019      	movs	r1, r3
100439e8:	2000      	movs	r0, #0
100439ea:	f002 f98d 	bl	10045d08 <HAL_FLASH_Program>
}
100439ee:	46c0      	nop			@ (mov r8, r8)
100439f0:	46bd      	mov	sp, r7
100439f2:	b009      	add	sp, #36	@ 0x24
100439f4:	bd90      	pop	{r4, r7, pc}

100439f6 <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
100439f6:	b5f0      	push	{r4, r5, r6, r7, lr}
100439f8:	b087      	sub	sp, #28
100439fa:	af00      	add	r7, sp, #0
100439fc:	60f8      	str	r0, [r7, #12]
100439fe:	0008      	movs	r0, r1
10043a00:	0011      	movs	r1, r2
10043a02:	607b      	str	r3, [r7, #4]
10043a04:	250b      	movs	r5, #11
10043a06:	197b      	adds	r3, r7, r5
10043a08:	1c02      	adds	r2, r0, #0
10043a0a:	701a      	strb	r2, [r3, #0]
10043a0c:	2408      	movs	r4, #8
10043a0e:	193b      	adds	r3, r7, r4
10043a10:	1c0a      	adds	r2, r1, #0
10043a12:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
10043a14:	2310      	movs	r3, #16
10043a16:	18fb      	adds	r3, r7, r3
10043a18:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
10043a1a:	193b      	adds	r3, r7, r4
10043a1c:	881b      	ldrh	r3, [r3, #0]
10043a1e:	3b01      	subs	r3, #1
10043a20:	b29b      	uxth	r3, r3
10043a22:	b21b      	sxth	r3, r3
10043a24:	2203      	movs	r2, #3
10043a26:	4313      	orrs	r3, r2
10043a28:	b21b      	sxth	r3, r3
10043a2a:	b29a      	uxth	r2, r3
10043a2c:	193b      	adds	r3, r7, r4
10043a2e:	3201      	adds	r2, #1
10043a30:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
10043a32:	697b      	ldr	r3, [r7, #20]
10043a34:	22fe      	movs	r2, #254	@ 0xfe
10043a36:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
10043a38:	697b      	ldr	r3, [r7, #20]
10043a3a:	197a      	adds	r2, r7, r5
10043a3c:	7812      	ldrb	r2, [r2, #0]
10043a3e:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
10043a40:	193a      	adds	r2, r7, r4
10043a42:	2520      	movs	r5, #32
10043a44:	2608      	movs	r6, #8
10043a46:	19ab      	adds	r3, r5, r6
10043a48:	2108      	movs	r1, #8
10043a4a:	468c      	mov	ip, r1
10043a4c:	44bc      	add	ip, r7
10043a4e:	4463      	add	r3, ip
10043a50:	8812      	ldrh	r2, [r2, #0]
10043a52:	881b      	ldrh	r3, [r3, #0]
10043a54:	18d3      	adds	r3, r2, r3
10043a56:	b29a      	uxth	r2, r3
10043a58:	697b      	ldr	r3, [r7, #20]
10043a5a:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
10043a5c:	693a      	ldr	r2, [r7, #16]
10043a5e:	68fb      	ldr	r3, [r7, #12]
10043a60:	0019      	movs	r1, r3
10043a62:	2000      	movs	r0, #0
10043a64:	f002 f950 	bl	10045d08 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
10043a68:	68fb      	ldr	r3, [r7, #12]
10043a6a:	1d18      	adds	r0, r3, #4
10043a6c:	687a      	ldr	r2, [r7, #4]
10043a6e:	193b      	adds	r3, r7, r4
10043a70:	881b      	ldrh	r3, [r3, #0]
10043a72:	0019      	movs	r1, r3
10043a74:	f7ff ff68 	bl	10043948 <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
10043a78:	193b      	adds	r3, r7, r4
10043a7a:	881a      	ldrh	r2, [r3, #0]
10043a7c:	68fb      	ldr	r3, [r7, #12]
10043a7e:	18d3      	adds	r3, r2, r3
10043a80:	1d18      	adds	r0, r3, #4
10043a82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10043a84:	19ab      	adds	r3, r5, r6
10043a86:	2108      	movs	r1, #8
10043a88:	468c      	mov	ip, r1
10043a8a:	44bc      	add	ip, r7
10043a8c:	4463      	add	r3, ip
10043a8e:	881b      	ldrh	r3, [r3, #0]
10043a90:	0019      	movs	r1, r3
10043a92:	f7ff ff59 	bl	10043948 <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
10043a96:	2300      	movs	r3, #0
}
10043a98:	0018      	movs	r0, r3
10043a9a:	46bd      	mov	sp, r7
10043a9c:	b007      	add	sp, #28
10043a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043aa0 <ReadCurrentRecordNoLock>:
    return -1;
  }
}

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
10043aa0:	b590      	push	{r4, r7, lr}
10043aa2:	b087      	sub	sp, #28
10043aa4:	af00      	add	r7, sp, #0
10043aa6:	60f8      	str	r0, [r7, #12]
10043aa8:	0008      	movs	r0, r1
10043aaa:	607a      	str	r2, [r7, #4]
10043aac:	0019      	movs	r1, r3
10043aae:	230a      	movs	r3, #10
10043ab0:	18fb      	adds	r3, r7, r3
10043ab2:	1c02      	adds	r2, r0, #0
10043ab4:	801a      	strh	r2, [r3, #0]
10043ab6:	2308      	movs	r3, #8
10043ab8:	0018      	movs	r0, r3
10043aba:	18fb      	adds	r3, r7, r3
10043abc:	1c0a      	adds	r2, r1, #0
10043abe:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
10043ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10043ac2:	2200      	movs	r2, #0
10043ac4:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
10043ac6:	2224      	movs	r2, #36	@ 0x24
10043ac8:	1813      	adds	r3, r2, r0
10043aca:	19db      	adds	r3, r3, r7
10043acc:	881b      	ldrh	r3, [r3, #0]
10043ace:	2b00      	cmp	r3, #0
10043ad0:	d00b      	beq.n	10043aea <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
10043ad2:	2110      	movs	r1, #16
10043ad4:	187b      	adds	r3, r7, r1
10043ad6:	1812      	adds	r2, r2, r0
10043ad8:	19d2      	adds	r2, r2, r7
10043ada:	8812      	ldrh	r2, [r2, #0]
10043adc:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
10043ade:	187b      	adds	r3, r7, r1
10043ae0:	22fe      	movs	r2, #254	@ 0xfe
10043ae2:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
10043ae4:	187b      	adds	r3, r7, r1
10043ae6:	617b      	str	r3, [r7, #20]
10043ae8:	e002      	b.n	10043af0 <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10043aea:	68fb      	ldr	r3, [r7, #12]
10043aec:	685b      	ldr	r3, [r3, #4]
10043aee:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10043af0:	68fb      	ldr	r3, [r7, #12]
10043af2:	685a      	ldr	r2, [r3, #4]
10043af4:	68fb      	ldr	r3, [r7, #12]
10043af6:	689b      	ldr	r3, [r3, #8]
10043af8:	429a      	cmp	r2, r3
10043afa:	d203      	bcs.n	10043b04 <ReadCurrentRecordNoLock+0x64>
10043afc:	697b      	ldr	r3, [r7, #20]
10043afe:	781b      	ldrb	r3, [r3, #0]
10043b00:	2bff      	cmp	r3, #255	@ 0xff
10043b02:	d101      	bne.n	10043b08 <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
10043b04:	2304      	movs	r3, #4
10043b06:	e033      	b.n	10043b70 <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
10043b08:	68fb      	ldr	r3, [r7, #12]
10043b0a:	7b1b      	ldrb	r3, [r3, #12]
10043b0c:	2b00      	cmp	r3, #0
10043b0e:	d103      	bne.n	10043b18 <ReadCurrentRecordNoLock+0x78>
10043b10:	697b      	ldr	r3, [r7, #20]
10043b12:	781b      	ldrb	r3, [r3, #0]
10043b14:	2bfe      	cmp	r3, #254	@ 0xfe
10043b16:	d001      	beq.n	10043b1c <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
10043b18:	2305      	movs	r3, #5
10043b1a:	e029      	b.n	10043b70 <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
10043b1c:	697b      	ldr	r3, [r7, #20]
10043b1e:	885b      	ldrh	r3, [r3, #2]
10043b20:	220a      	movs	r2, #10
10043b22:	18ba      	adds	r2, r7, r2
10043b24:	8812      	ldrh	r2, [r2, #0]
10043b26:	429a      	cmp	r2, r3
10043b28:	d301      	bcc.n	10043b2e <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
10043b2a:	2306      	movs	r3, #6
10043b2c:	e020      	b.n	10043b70 <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
10043b2e:	68fb      	ldr	r3, [r7, #12]
10043b30:	2200      	movs	r2, #0
10043b32:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
10043b34:	240a      	movs	r4, #10
10043b36:	193b      	adds	r3, r7, r4
10043b38:	881a      	ldrh	r2, [r3, #0]
10043b3a:	68fb      	ldr	r3, [r7, #12]
10043b3c:	685b      	ldr	r3, [r3, #4]
10043b3e:	18d3      	adds	r3, r2, r3
10043b40:	3304      	adds	r3, #4
10043b42:	0018      	movs	r0, r3
10043b44:	2308      	movs	r3, #8
10043b46:	18fb      	adds	r3, r7, r3
10043b48:	881a      	ldrh	r2, [r3, #0]
10043b4a:	697b      	ldr	r3, [r7, #20]
10043b4c:	885b      	ldrh	r3, [r3, #2]
10043b4e:	0019      	movs	r1, r3
10043b50:	193b      	adds	r3, r7, r4
10043b52:	881b      	ldrh	r3, [r3, #0]
10043b54:	1acb      	subs	r3, r1, r3
10043b56:	429a      	cmp	r2, r3
10043b58:	dd00      	ble.n	10043b5c <ReadCurrentRecordNoLock+0xbc>
10043b5a:	001a      	movs	r2, r3
10043b5c:	687b      	ldr	r3, [r7, #4]
10043b5e:	0001      	movs	r1, r0
10043b60:	0018      	movs	r0, r3
10043b62:	f00b fa18 	bl	1004ef96 <memcpy>
  *size_p = record_p->header.length;
10043b66:	697b      	ldr	r3, [r7, #20]
10043b68:	885a      	ldrh	r2, [r3, #2]
10043b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10043b6c:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10043b6e:	2300      	movs	r3, #0
}
10043b70:	0018      	movs	r0, r3
10043b72:	46bd      	mov	sp, r7
10043b74:	b007      	add	sp, #28
10043b76:	bd90      	pop	{r4, r7, pc}

10043b78 <ErasePage>:
    return NVMDB_STATUS_INVALID_RECORD;
  }
}

static void ErasePage(uint32_t address, uint8_t num_pages)
{
10043b78:	b580      	push	{r7, lr}
10043b7a:	b088      	sub	sp, #32
10043b7c:	af00      	add	r7, sp, #0
10043b7e:	6078      	str	r0, [r7, #4]
10043b80:	000a      	movs	r2, r1
10043b82:	1cfb      	adds	r3, r7, #3
10043b84:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10043b86:	687b      	ldr	r3, [r7, #4]
10043b88:	4a0d      	ldr	r2, [pc, #52]	@ (10043bc0 <ErasePage+0x48>)
10043b8a:	4694      	mov	ip, r2
10043b8c:	4463      	add	r3, ip
10043b8e:	0adb      	lsrs	r3, r3, #11
10043b90:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
10043b92:	2110      	movs	r1, #16
10043b94:	187b      	adds	r3, r7, r1
10043b96:	2200      	movs	r2, #0
10043b98:	601a      	str	r2, [r3, #0]
10043b9a:	69fa      	ldr	r2, [r7, #28]
10043b9c:	187b      	adds	r3, r7, r1
10043b9e:	605a      	str	r2, [r3, #4]
10043ba0:	1cfb      	adds	r3, r7, #3
10043ba2:	781a      	ldrb	r2, [r3, #0]
10043ba4:	187b      	adds	r3, r7, r1
10043ba6:	609a      	str	r2, [r3, #8]
10043ba8:	230c      	movs	r3, #12
10043baa:	18fa      	adds	r2, r7, r3
10043bac:	187b      	adds	r3, r7, r1
10043bae:	0011      	movs	r1, r2
10043bb0:	0018      	movs	r0, r3
10043bb2:	f002 f983 	bl	10045ebc <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
10043bb6:	46c0      	nop			@ (mov r8, r8)
10043bb8:	46bd      	mov	sp, r7
10043bba:	b008      	add	sp, #32
10043bbc:	bd80      	pop	{r7, pc}
10043bbe:	46c0      	nop			@ (mov r8, r8)
10043bc0:	effc0000 	.word	0xeffc0000

10043bc4 <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
10043bc4:	b580      	push	{r7, lr}
10043bc6:	b086      	sub	sp, #24
10043bc8:	af00      	add	r7, sp, #0
10043bca:	60f8      	str	r0, [r7, #12]
10043bcc:	60b9      	str	r1, [r7, #8]
10043bce:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
10043bd0:	687b      	ldr	r3, [r7, #4]
10043bd2:	055b      	lsls	r3, r3, #21
10043bd4:	0d5b      	lsrs	r3, r3, #21
10043bd6:	d107      	bne.n	10043be8 <WriteBufferToFlash+0x24>
10043bd8:	68fb      	ldr	r3, [r7, #12]
10043bda:	687a      	ldr	r2, [r7, #4]
10043bdc:	68b9      	ldr	r1, [r7, #8]
10043bde:	0018      	movs	r0, r3
10043be0:	f00b f96c 	bl	1004eebc <memcmp>
10043be4:	1e03      	subs	r3, r0, #0
10043be6:	d026      	beq.n	10043c36 <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
10043be8:	687b      	ldr	r3, [r7, #4]
10043bea:	3b01      	subs	r3, #1
10043bec:	4a14      	ldr	r2, [pc, #80]	@ (10043c40 <WriteBufferToFlash+0x7c>)
10043bee:	4313      	orrs	r3, r2
10043bf0:	3301      	adds	r3, #1
10043bf2:	0adb      	lsrs	r3, r3, #11
10043bf4:	b2da      	uxtb	r2, r3
10043bf6:	68fb      	ldr	r3, [r7, #12]
10043bf8:	0011      	movs	r1, r2
10043bfa:	0018      	movs	r0, r3
10043bfc:	f7ff ffbc 	bl	10043b78 <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
10043c00:	2300      	movs	r3, #0
10043c02:	617b      	str	r3, [r7, #20]
10043c04:	e012      	b.n	10043c2c <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
10043c06:	697a      	ldr	r2, [r7, #20]
10043c08:	68fb      	ldr	r3, [r7, #12]
10043c0a:	18d1      	adds	r1, r2, r3
10043c0c:	697b      	ldr	r3, [r7, #20]
10043c0e:	2b00      	cmp	r3, #0
10043c10:	da00      	bge.n	10043c14 <WriteBufferToFlash+0x50>
10043c12:	3303      	adds	r3, #3
10043c14:	109b      	asrs	r3, r3, #2
10043c16:	009b      	lsls	r3, r3, #2
10043c18:	68ba      	ldr	r2, [r7, #8]
10043c1a:	18d3      	adds	r3, r2, r3
10043c1c:	681b      	ldr	r3, [r3, #0]
10043c1e:	001a      	movs	r2, r3
10043c20:	2000      	movs	r0, #0
10043c22:	f002 f871 	bl	10045d08 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
10043c26:	697b      	ldr	r3, [r7, #20]
10043c28:	3304      	adds	r3, #4
10043c2a:	617b      	str	r3, [r7, #20]
10043c2c:	697b      	ldr	r3, [r7, #20]
10043c2e:	687a      	ldr	r2, [r7, #4]
10043c30:	429a      	cmp	r2, r3
10043c32:	d8e8      	bhi.n	10043c06 <WriteBufferToFlash+0x42>
10043c34:	e000      	b.n	10043c38 <WriteBufferToFlash+0x74>
    return;
10043c36:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
10043c38:	46bd      	mov	sp, r7
10043c3a:	b006      	add	sp, #24
10043c3c:	bd80      	pop	{r7, pc}
10043c3e:	46c0      	nop			@ (mov r8, r8)
10043c40:	000007ff 	.word	0x000007ff

10043c44 <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
10043c44:	b580      	push	{r7, lr}
10043c46:	b082      	sub	sp, #8
10043c48:	af00      	add	r7, sp, #0
10043c4a:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
10043c4c:	687b      	ldr	r3, [r7, #4]
10043c4e:	2201      	movs	r2, #1
10043c50:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
10043c52:	687b      	ldr	r3, [r7, #4]
10043c54:	2200      	movs	r2, #0
10043c56:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
10043c58:	687b      	ldr	r3, [r7, #4]
10043c5a:	2200      	movs	r2, #0
10043c5c:	809a      	strh	r2, [r3, #4]
}
10043c5e:	46c0      	nop			@ (mov r8, r8)
10043c60:	46bd      	mov	sp, r7
10043c62:	b002      	add	sp, #8
10043c64:	bd80      	pop	{r7, pc}

10043c66 <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
10043c66:	b5f0      	push	{r4, r5, r6, r7, lr}
10043c68:	b08d      	sub	sp, #52	@ 0x34
10043c6a:	af04      	add	r7, sp, #16
10043c6c:	60f8      	str	r0, [r7, #12]
10043c6e:	60b9      	str	r1, [r7, #8]
10043c70:	603b      	str	r3, [r7, #0]
10043c72:	1dbb      	adds	r3, r7, #6
10043c74:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
10043c76:	231e      	movs	r3, #30
10043c78:	18fb      	adds	r3, r7, r3
10043c7a:	2200      	movs	r2, #0
10043c7c:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
10043c7e:	1dbb      	adds	r3, r7, #6
10043c80:	881a      	ldrh	r2, [r3, #0]
10043c82:	68bb      	ldr	r3, [r7, #8]
10043c84:	21ff      	movs	r1, #255	@ 0xff
10043c86:	0018      	movs	r0, r3
10043c88:	f00b f926 	bl	1004eed8 <memset>

  header.valid_flag = VALID_RECORD;
10043c8c:	2310      	movs	r3, #16
10043c8e:	18fb      	adds	r3, r7, r3
10043c90:	22fe      	movs	r2, #254	@ 0xfe
10043c92:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10043c94:	1dba      	adds	r2, r7, #6
10043c96:	251e      	movs	r5, #30
10043c98:	197b      	adds	r3, r7, r5
10043c9a:	8812      	ldrh	r2, [r2, #0]
10043c9c:	881b      	ldrh	r3, [r3, #0]
10043c9e:	1ad3      	subs	r3, r2, r3
10043ca0:	b29a      	uxth	r2, r3
10043ca2:	231c      	movs	r3, #28
10043ca4:	18fb      	adds	r3, r7, r3
10043ca6:	3a04      	subs	r2, #4
10043ca8:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
10043caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043cac:	781b      	ldrb	r3, [r3, #0]
10043cae:	2b00      	cmp	r3, #0
10043cb0:	d04e      	beq.n	10043d50 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
10043cb2:	197b      	adds	r3, r7, r5
10043cb4:	881b      	ldrh	r3, [r3, #0]
10043cb6:	3304      	adds	r3, #4
10043cb8:	68ba      	ldr	r2, [r7, #8]
10043cba:	18d1      	adds	r1, r2, r3
10043cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043cbe:	889b      	ldrh	r3, [r3, #4]
10043cc0:	261b      	movs	r6, #27
10043cc2:	19bc      	adds	r4, r7, r6
10043cc4:	68f8      	ldr	r0, [r7, #12]
10043cc6:	2210      	movs	r2, #16
10043cc8:	18ba      	adds	r2, r7, r2
10043cca:	3201      	adds	r2, #1
10043ccc:	9203      	str	r2, [sp, #12]
10043cce:	9302      	str	r3, [sp, #8]
10043cd0:	2216      	movs	r2, #22
10043cd2:	18bb      	adds	r3, r7, r2
10043cd4:	9301      	str	r3, [sp, #4]
10043cd6:	231c      	movs	r3, #28
10043cd8:	18fb      	adds	r3, r7, r3
10043cda:	881b      	ldrh	r3, [r3, #0]
10043cdc:	9300      	str	r3, [sp, #0]
10043cde:	000b      	movs	r3, r1
10043ce0:	2200      	movs	r2, #0
10043ce2:	21ff      	movs	r1, #255	@ 0xff
10043ce4:	f7ff fdd2 	bl	1004388c <ReadNextRecordNoLock>
10043ce8:	0003      	movs	r3, r0
10043cea:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
10043cec:	2216      	movs	r2, #22
10043cee:	18bb      	adds	r3, r7, r2
10043cf0:	881a      	ldrh	r2, [r3, #0]
10043cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043cf4:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
10043cf6:	19bb      	adds	r3, r7, r6
10043cf8:	781b      	ldrb	r3, [r3, #0]
10043cfa:	2b00      	cmp	r3, #0
10043cfc:	d006      	beq.n	10043d0c <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
10043cfe:	683b      	ldr	r3, [r7, #0]
10043d00:	197a      	adds	r2, r7, r5
10043d02:	8812      	ldrh	r2, [r2, #0]
10043d04:	801a      	strh	r2, [r3, #0]
        return status;
10043d06:	19bb      	adds	r3, r7, r6
10043d08:	781b      	ldrb	r3, [r3, #0]
10043d0a:	e0a1      	b.n	10043e50 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
10043d0c:	2316      	movs	r3, #22
10043d0e:	18fb      	adds	r3, r7, r3
10043d10:	881a      	ldrh	r2, [r3, #0]
10043d12:	2110      	movs	r1, #16
10043d14:	187b      	adds	r3, r7, r1
10043d16:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
10043d18:	251e      	movs	r5, #30
10043d1a:	197b      	adds	r3, r7, r5
10043d1c:	881b      	ldrh	r3, [r3, #0]
10043d1e:	68ba      	ldr	r2, [r7, #8]
10043d20:	18d3      	adds	r3, r2, r3
10043d22:	000c      	movs	r4, r1
10043d24:	1879      	adds	r1, r7, r1
10043d26:	2204      	movs	r2, #4
10043d28:	0018      	movs	r0, r3
10043d2a:	f00b f934 	bl	1004ef96 <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
10043d2e:	193b      	adds	r3, r7, r4
10043d30:	885b      	ldrh	r3, [r3, #2]
10043d32:	3303      	adds	r3, #3
10043d34:	b29b      	uxth	r3, r3
10043d36:	b21b      	sxth	r3, r3
10043d38:	2203      	movs	r2, #3
10043d3a:	4313      	orrs	r3, r2
10043d3c:	b21b      	sxth	r3, r3
10043d3e:	b29a      	uxth	r2, r3
10043d40:	197b      	adds	r3, r7, r5
10043d42:	881b      	ldrh	r3, [r3, #0]
10043d44:	18d3      	adds	r3, r2, r3
10043d46:	b29a      	uxth	r2, r3
10043d48:	197b      	adds	r3, r7, r5
10043d4a:	3201      	adds	r2, #1
10043d4c:	801a      	strh	r2, [r3, #0]
10043d4e:	e031      	b.n	10043db4 <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
10043d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043d52:	8859      	ldrh	r1, [r3, #2]
10043d54:	231e      	movs	r3, #30
10043d56:	18fb      	adds	r3, r7, r3
10043d58:	881b      	ldrh	r3, [r3, #0]
10043d5a:	68ba      	ldr	r2, [r7, #8]
10043d5c:	18d5      	adds	r5, r2, r3
10043d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043d60:	889b      	ldrh	r3, [r3, #4]
10043d62:	261b      	movs	r6, #27
10043d64:	19bc      	adds	r4, r7, r6
10043d66:	221c      	movs	r2, #28
10043d68:	18ba      	adds	r2, r7, r2
10043d6a:	8812      	ldrh	r2, [r2, #0]
10043d6c:	68f8      	ldr	r0, [r7, #12]
10043d6e:	9301      	str	r3, [sp, #4]
10043d70:	2316      	movs	r3, #22
10043d72:	18fb      	adds	r3, r7, r3
10043d74:	9300      	str	r3, [sp, #0]
10043d76:	0013      	movs	r3, r2
10043d78:	002a      	movs	r2, r5
10043d7a:	f7ff fe91 	bl	10043aa0 <ReadCurrentRecordNoLock>
10043d7e:	0003      	movs	r3, r0
10043d80:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
10043d82:	19bb      	adds	r3, r7, r6
10043d84:	781b      	ldrb	r3, [r3, #0]
10043d86:	2b00      	cmp	r3, #0
10043d88:	d002      	beq.n	10043d90 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
10043d8a:	19bb      	adds	r3, r7, r6
10043d8c:	781b      	ldrb	r3, [r3, #0]
10043d8e:	e05f      	b.n	10043e50 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
10043d90:	2316      	movs	r3, #22
10043d92:	18fb      	adds	r3, r7, r3
10043d94:	881a      	ldrh	r2, [r3, #0]
10043d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043d98:	885b      	ldrh	r3, [r3, #2]
10043d9a:	1ad3      	subs	r3, r2, r3
10043d9c:	b29b      	uxth	r3, r3
10043d9e:	3b01      	subs	r3, #1
10043da0:	b29b      	uxth	r3, r3
10043da2:	b21b      	sxth	r3, r3
10043da4:	2203      	movs	r2, #3
10043da6:	4313      	orrs	r3, r2
10043da8:	b21b      	sxth	r3, r3
10043daa:	b29a      	uxth	r2, r3
10043dac:	231e      	movs	r3, #30
10043dae:	18fb      	adds	r3, r7, r3
10043db0:	3201      	adds	r2, #1
10043db2:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
10043db4:	2316      	movs	r3, #22
10043db6:	18fb      	adds	r3, r7, r3
10043db8:	881a      	ldrh	r2, [r3, #0]
10043dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043dbc:	885b      	ldrh	r3, [r3, #2]
10043dbe:	1ad3      	subs	r3, r2, r3
10043dc0:	b29b      	uxth	r3, r3
10043dc2:	3b01      	subs	r3, #1
10043dc4:	b29b      	uxth	r3, r3
10043dc6:	b21b      	sxth	r3, r3
10043dc8:	2203      	movs	r2, #3
10043dca:	4313      	orrs	r3, r2
10043dcc:	b21b      	sxth	r3, r3
10043dce:	b29a      	uxth	r2, r3
10043dd0:	2118      	movs	r1, #24
10043dd2:	187b      	adds	r3, r7, r1
10043dd4:	3201      	adds	r2, #1
10043dd6:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
10043dd8:	187a      	adds	r2, r7, r1
10043dda:	211c      	movs	r1, #28
10043ddc:	187b      	adds	r3, r7, r1
10043dde:	8812      	ldrh	r2, [r2, #0]
10043de0:	881b      	ldrh	r3, [r3, #0]
10043de2:	429a      	cmp	r2, r3
10043de4:	d910      	bls.n	10043e08 <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
10043de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043de8:	2200      	movs	r2, #0
10043dea:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
10043dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043dee:	885a      	ldrh	r2, [r3, #2]
10043df0:	187b      	adds	r3, r7, r1
10043df2:	881b      	ldrh	r3, [r3, #0]
10043df4:	18d3      	adds	r3, r2, r3
10043df6:	b29a      	uxth	r2, r3
10043df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043dfa:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
10043dfc:	683b      	ldr	r3, [r7, #0]
10043dfe:	1dba      	adds	r2, r7, #6
10043e00:	8812      	ldrh	r2, [r2, #0]
10043e02:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
10043e04:	2300      	movs	r3, #0
10043e06:	e023      	b.n	10043e50 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
10043e08:	2318      	movs	r3, #24
10043e0a:	18fa      	adds	r2, r7, r3
10043e0c:	231c      	movs	r3, #28
10043e0e:	18fb      	adds	r3, r7, r3
10043e10:	8812      	ldrh	r2, [r2, #0]
10043e12:	881b      	ldrh	r3, [r3, #0]
10043e14:	429a      	cmp	r2, r3
10043e16:	d10b      	bne.n	10043e30 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
10043e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043e1a:	2201      	movs	r2, #1
10043e1c:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
10043e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043e20:	2200      	movs	r2, #0
10043e22:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
10043e24:	683b      	ldr	r3, [r7, #0]
10043e26:	1dba      	adds	r2, r7, #6
10043e28:	8812      	ldrh	r2, [r2, #0]
10043e2a:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
10043e2c:	2300      	movs	r3, #0
10043e2e:	e00f      	b.n	10043e50 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
10043e30:	2318      	movs	r3, #24
10043e32:	18fa      	adds	r2, r7, r3
10043e34:	231c      	movs	r3, #28
10043e36:	18fb      	adds	r3, r7, r3
10043e38:	8812      	ldrh	r2, [r2, #0]
10043e3a:	881b      	ldrh	r3, [r3, #0]
10043e3c:	429a      	cmp	r2, r3
10043e3e:	d300      	bcc.n	10043e42 <LoadDBToRAM+0x1dc>
10043e40:	e728      	b.n	10043c94 <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
10043e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043e44:	2201      	movs	r2, #1
10043e46:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
10043e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10043e4a:	2200      	movs	r2, #0
10043e4c:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10043e4e:	e721      	b.n	10043c94 <LoadDBToRAM+0x2e>
    }
  }
}
10043e50:	0018      	movs	r0, r3
10043e52:	46bd      	mov	sp, r7
10043e54:	b009      	add	sp, #36	@ 0x24
10043e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

10043e58 <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
10043e58:	b5f0      	push	{r4, r5, r6, r7, lr}
10043e5a:	4c60      	ldr	r4, [pc, #384]	@ (10043fdc <CleanLargeDB+0x184>)
10043e5c:	44a5      	add	sp, r4
10043e5e:	af02      	add	r7, sp, #8
10043e60:	0002      	movs	r2, r0
10043e62:	4b5f      	ldr	r3, [pc, #380]	@ (10043fe0 <CleanLargeDB+0x188>)
10043e64:	2184      	movs	r1, #132	@ 0x84
10043e66:	0109      	lsls	r1, r1, #4
10043e68:	185b      	adds	r3, r3, r1
10043e6a:	19db      	adds	r3, r3, r7
10043e6c:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
10043e6e:	4b5c      	ldr	r3, [pc, #368]	@ (10043fe0 <CleanLargeDB+0x188>)
10043e70:	185b      	adds	r3, r3, r1
10043e72:	19db      	adds	r3, r3, r7
10043e74:	781a      	ldrb	r2, [r3, #0]
10043e76:	495b      	ldr	r1, [pc, #364]	@ (10043fe4 <CleanLargeDB+0x18c>)
10043e78:	0013      	movs	r3, r2
10043e7a:	009b      	lsls	r3, r3, #2
10043e7c:	189b      	adds	r3, r3, r2
10043e7e:	009b      	lsls	r3, r3, #2
10043e80:	18cb      	adds	r3, r1, r3
10043e82:	330a      	adds	r3, #10
10043e84:	881b      	ldrh	r3, [r3, #0]
10043e86:	2b00      	cmp	r3, #0
10043e88:	d101      	bne.n	10043e8e <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
10043e8a:	2300      	movs	r3, #0
10043e8c:	e0a0      	b.n	10043fd0 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
10043e8e:	4b56      	ldr	r3, [pc, #344]	@ (10043fe8 <CleanLargeDB+0x190>)
10043e90:	18fc      	adds	r4, r7, r3
10043e92:	4d56      	ldr	r5, [pc, #344]	@ (10043fec <CleanLargeDB+0x194>)
10043e94:	197a      	adds	r2, r7, r5
10043e96:	4b52      	ldr	r3, [pc, #328]	@ (10043fe0 <CleanLargeDB+0x188>)
10043e98:	2184      	movs	r1, #132	@ 0x84
10043e9a:	0109      	lsls	r1, r1, #4
10043e9c:	185b      	adds	r3, r3, r1
10043e9e:	19db      	adds	r3, r3, r7
10043ea0:	781b      	ldrb	r3, [r3, #0]
10043ea2:	0011      	movs	r1, r2
10043ea4:	0018      	movs	r0, r3
10043ea6:	f000 fc4b 	bl	10044740 <NVMDB_HandleInit>
10043eaa:	0003      	movs	r3, r0
10043eac:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
10043eae:	197b      	adds	r3, r7, r5
10043eb0:	685b      	ldr	r3, [r3, #4]
10043eb2:	4a4f      	ldr	r2, [pc, #316]	@ (10043ff0 <CleanLargeDB+0x198>)
10043eb4:	18ba      	adds	r2, r7, r2
10043eb6:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
10043eb8:	4b4e      	ldr	r3, [pc, #312]	@ (10043ff4 <CleanLargeDB+0x19c>)
10043eba:	18fb      	adds	r3, r7, r3
10043ebc:	0018      	movs	r0, r3
10043ebe:	f7ff fec1 	bl	10043c44 <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
10043ec2:	4e49      	ldr	r6, [pc, #292]	@ (10043fe8 <CleanLargeDB+0x190>)
10043ec4:	19bc      	adds	r4, r7, r6
10043ec6:	4b4c      	ldr	r3, [pc, #304]	@ (10043ff8 <CleanLargeDB+0x1a0>)
10043ec8:	18fd      	adds	r5, r7, r3
10043eca:	2380      	movs	r3, #128	@ 0x80
10043ecc:	011a      	lsls	r2, r3, #4
10043ece:	230c      	movs	r3, #12
10043ed0:	18f9      	adds	r1, r7, r3
10043ed2:	4b46      	ldr	r3, [pc, #280]	@ (10043fec <CleanLargeDB+0x194>)
10043ed4:	18f8      	adds	r0, r7, r3
10043ed6:	4b47      	ldr	r3, [pc, #284]	@ (10043ff4 <CleanLargeDB+0x19c>)
10043ed8:	18fb      	adds	r3, r7, r3
10043eda:	9300      	str	r3, [sp, #0]
10043edc:	002b      	movs	r3, r5
10043ede:	f7ff fec2 	bl	10043c66 <LoadDBToRAM>
10043ee2:	0003      	movs	r3, r0
10043ee4:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
10043ee6:	19bb      	adds	r3, r7, r6
10043ee8:	781b      	ldrb	r3, [r3, #0]
10043eea:	2b04      	cmp	r3, #4
10043eec:	d006      	beq.n	10043efc <CleanLargeDB+0xa4>
10043eee:	19bb      	adds	r3, r7, r6
10043ef0:	781b      	ldrb	r3, [r3, #0]
10043ef2:	2b00      	cmp	r3, #0
10043ef4:	d002      	beq.n	10043efc <CleanLargeDB+0xa4>
    {
      return status;
10043ef6:	19bb      	adds	r3, r7, r6
10043ef8:	781b      	ldrb	r3, [r3, #0]
10043efa:	e069      	b.n	10043fd0 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
10043efc:	4b3e      	ldr	r3, [pc, #248]	@ (10043ff8 <CleanLargeDB+0x1a0>)
10043efe:	18fb      	adds	r3, r7, r3
10043f00:	881a      	ldrh	r2, [r3, #0]
10043f02:	2380      	movs	r3, #128	@ 0x80
10043f04:	011b      	lsls	r3, r3, #4
10043f06:	429a      	cmp	r2, r3
10043f08:	d004      	beq.n	10043f14 <CleanLargeDB+0xbc>
10043f0a:	4b37      	ldr	r3, [pc, #220]	@ (10043fe8 <CleanLargeDB+0x190>)
10043f0c:	18fb      	adds	r3, r7, r3
10043f0e:	781b      	ldrb	r3, [r3, #0]
10043f10:	2b00      	cmp	r3, #0
10043f12:	d0d6      	beq.n	10043ec2 <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
10043f14:	4a38      	ldr	r2, [pc, #224]	@ (10043ff8 <CleanLargeDB+0x1a0>)
10043f16:	18bb      	adds	r3, r7, r2
10043f18:	881b      	ldrh	r3, [r3, #0]
10043f1a:	2b00      	cmp	r3, #0
10043f1c:	d019      	beq.n	10043f52 <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
10043f1e:	18bb      	adds	r3, r7, r2
10043f20:	881b      	ldrh	r3, [r3, #0]
10043f22:	001a      	movs	r2, r3
10043f24:	230c      	movs	r3, #12
10043f26:	18f9      	adds	r1, r7, r3
10043f28:	4c31      	ldr	r4, [pc, #196]	@ (10043ff0 <CleanLargeDB+0x198>)
10043f2a:	193b      	adds	r3, r7, r4
10043f2c:	681b      	ldr	r3, [r3, #0]
10043f2e:	0018      	movs	r0, r3
10043f30:	f7ff fe48 	bl	10043bc4 <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
10043f34:	0022      	movs	r2, r4
10043f36:	18bb      	adds	r3, r7, r2
10043f38:	681b      	ldr	r3, [r3, #0]
10043f3a:	2180      	movs	r1, #128	@ 0x80
10043f3c:	0109      	lsls	r1, r1, #4
10043f3e:	468c      	mov	ip, r1
10043f40:	4463      	add	r3, ip
10043f42:	18ba      	adds	r2, r7, r2
10043f44:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
10043f46:	4b28      	ldr	r3, [pc, #160]	@ (10043fe8 <CleanLargeDB+0x190>)
10043f48:	18fb      	adds	r3, r7, r3
10043f4a:	781b      	ldrb	r3, [r3, #0]
10043f4c:	2b00      	cmp	r3, #0
10043f4e:	d102      	bne.n	10043f56 <CleanLargeDB+0xfe>
  {
10043f50:	e7b7      	b.n	10043ec2 <CleanLargeDB+0x6a>
        break;
10043f52:	46c0      	nop			@ (mov r8, r8)
10043f54:	e000      	b.n	10043f58 <CleanLargeDB+0x100>
      {
        break;
10043f56:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
10043f58:	4b24      	ldr	r3, [pc, #144]	@ (10043fec <CleanLargeDB+0x194>)
10043f5a:	18fb      	adds	r3, r7, r3
10043f5c:	689b      	ldr	r3, [r3, #8]
10043f5e:	3b01      	subs	r3, #1
10043f60:	4a26      	ldr	r2, [pc, #152]	@ (10043ffc <CleanLargeDB+0x1a4>)
10043f62:	431a      	orrs	r2, r3
10043f64:	4922      	ldr	r1, [pc, #136]	@ (10043ff0 <CleanLargeDB+0x198>)
10043f66:	187b      	adds	r3, r7, r1
10043f68:	681b      	ldr	r3, [r3, #0]
10043f6a:	1ad3      	subs	r3, r2, r3
10043f6c:	3301      	adds	r3, #1
10043f6e:	0ada      	lsrs	r2, r3, #11
10043f70:	4823      	ldr	r0, [pc, #140]	@ (10044000 <CleanLargeDB+0x1a8>)
10043f72:	183b      	adds	r3, r7, r0
10043f74:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10043f76:	187b      	adds	r3, r7, r1
10043f78:	681b      	ldr	r3, [r3, #0]
10043f7a:	4a22      	ldr	r2, [pc, #136]	@ (10044004 <CleanLargeDB+0x1ac>)
10043f7c:	4694      	mov	ip, r2
10043f7e:	4463      	add	r3, ip
10043f80:	0ada      	lsrs	r2, r3, #11
10043f82:	4c21      	ldr	r4, [pc, #132]	@ (10044008 <CleanLargeDB+0x1b0>)
10043f84:	193b      	adds	r3, r7, r4
10043f86:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10043f88:	2181      	movs	r1, #129	@ 0x81
10043f8a:	0109      	lsls	r1, r1, #4
10043f8c:	187b      	adds	r3, r7, r1
10043f8e:	2200      	movs	r2, #0
10043f90:	601a      	str	r2, [r3, #0]
10043f92:	193b      	adds	r3, r7, r4
10043f94:	781a      	ldrb	r2, [r3, #0]
10043f96:	187b      	adds	r3, r7, r1
10043f98:	605a      	str	r2, [r3, #4]
10043f9a:	183b      	adds	r3, r7, r0
10043f9c:	781a      	ldrb	r2, [r3, #0]
10043f9e:	187b      	adds	r3, r7, r1
10043fa0:	609a      	str	r2, [r3, #8]
10043fa2:	4b1a      	ldr	r3, [pc, #104]	@ (1004400c <CleanLargeDB+0x1b4>)
10043fa4:	18fa      	adds	r2, r7, r3
10043fa6:	187b      	adds	r3, r7, r1
10043fa8:	0011      	movs	r1, r2
10043faa:	0018      	movs	r0, r3
10043fac:	f001 ff86 	bl	10045ebc <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
10043fb0:	4b0b      	ldr	r3, [pc, #44]	@ (10043fe0 <CleanLargeDB+0x188>)
10043fb2:	2284      	movs	r2, #132	@ 0x84
10043fb4:	0112      	lsls	r2, r2, #4
10043fb6:	189b      	adds	r3, r3, r2
10043fb8:	19db      	adds	r3, r3, r7
10043fba:	781a      	ldrb	r2, [r3, #0]
10043fbc:	0013      	movs	r3, r2
10043fbe:	009b      	lsls	r3, r3, #2
10043fc0:	189b      	adds	r3, r3, r2
10043fc2:	009b      	lsls	r3, r3, #2
10043fc4:	4a07      	ldr	r2, [pc, #28]	@ (10043fe4 <CleanLargeDB+0x18c>)
10043fc6:	189b      	adds	r3, r3, r2
10043fc8:	0018      	movs	r0, r3
10043fca:	f7ff fb93 	bl	100436f4 <NVMDB_get_info>
10043fce:	0003      	movs	r3, r0
}
10043fd0:	0018      	movs	r0, r3
10043fd2:	46bd      	mov	sp, r7
10043fd4:	4b0e      	ldr	r3, [pc, #56]	@ (10044010 <CleanLargeDB+0x1b8>)
10043fd6:	449d      	add	sp, r3
10043fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043fda:	46c0      	nop			@ (mov r8, r8)
10043fdc:	fffff7b4 	.word	0xfffff7b4
10043fe0:	fffff7c7 	.word	0xfffff7c7
10043fe4:	200008d0 	.word	0x200008d0
10043fe8:	0000083b 	.word	0x0000083b
10043fec:	00000824 	.word	0x00000824
10043ff0:	0000083c 	.word	0x0000083c
10043ff4:	0000081c 	.word	0x0000081c
10043ff8:	00000836 	.word	0x00000836
10043ffc:	000007ff 	.word	0x000007ff
10044000:	0000083a 	.word	0x0000083a
10044004:	effc0000 	.word	0xeffc0000
10044008:	00000839 	.word	0x00000839
1004400c:	0000080c 	.word	0x0000080c
10044010:	00000844 	.word	0x00000844

10044014 <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
10044014:	b5f0      	push	{r4, r5, r6, r7, lr}
10044016:	4c7a      	ldr	r4, [pc, #488]	@ (10044200 <CleanPage+0x1ec>)
10044018:	44a5      	add	sp, r4
1004401a:	af02      	add	r7, sp, #8
1004401c:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
1004401e:	4b79      	ldr	r3, [pc, #484]	@ (10044204 <CleanPage+0x1f0>)
10044020:	18fb      	adds	r3, r7, r3
10044022:	2200      	movs	r2, #0
10044024:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
10044026:	4b78      	ldr	r3, [pc, #480]	@ (10044208 <CleanPage+0x1f4>)
10044028:	18fb      	adds	r3, r7, r3
1004402a:	2200      	movs	r2, #0
1004402c:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004402e:	2300      	movs	r3, #0
10044030:	4a76      	ldr	r2, [pc, #472]	@ (1004420c <CleanPage+0x1f8>)
10044032:	18ba      	adds	r2, r7, r2
10044034:	6013      	str	r3, [r2, #0]
10044036:	e023      	b.n	10044080 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10044038:	687b      	ldr	r3, [r7, #4]
1004403a:	6899      	ldr	r1, [r3, #8]
1004403c:	4b73      	ldr	r3, [pc, #460]	@ (1004420c <CleanPage+0x1f8>)
1004403e:	18fb      	adds	r3, r7, r3
10044040:	681a      	ldr	r2, [r3, #0]
10044042:	0013      	movs	r3, r2
10044044:	005b      	lsls	r3, r3, #1
10044046:	189b      	adds	r3, r3, r2
10044048:	009b      	lsls	r3, r3, #2
1004404a:	18ca      	adds	r2, r1, r3
1004404c:	4970      	ldr	r1, [pc, #448]	@ (10044210 <CleanPage+0x1fc>)
1004404e:	187b      	adds	r3, r7, r1
10044050:	7812      	ldrb	r2, [r2, #0]
10044052:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
10044054:	187b      	adds	r3, r7, r1
10044056:	781a      	ldrb	r2, [r3, #0]
10044058:	496e      	ldr	r1, [pc, #440]	@ (10044214 <CleanPage+0x200>)
1004405a:	0013      	movs	r3, r2
1004405c:	009b      	lsls	r3, r3, #2
1004405e:	189b      	adds	r3, r3, r2
10044060:	009b      	lsls	r3, r3, #2
10044062:	18cb      	adds	r3, r1, r3
10044064:	330a      	adds	r3, #10
10044066:	881b      	ldrh	r3, [r3, #0]
10044068:	2b00      	cmp	r3, #0
1004406a:	d003      	beq.n	10044074 <CleanPage+0x60>
    {
      found = TRUE;
1004406c:	4b66      	ldr	r3, [pc, #408]	@ (10044208 <CleanPage+0x1f4>)
1004406e:	18fb      	adds	r3, r7, r3
10044070:	2201      	movs	r2, #1
10044072:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10044074:	4a65      	ldr	r2, [pc, #404]	@ (1004420c <CleanPage+0x1f8>)
10044076:	18bb      	adds	r3, r7, r2
10044078:	681b      	ldr	r3, [r3, #0]
1004407a:	3301      	adds	r3, #1
1004407c:	18ba      	adds	r2, r7, r2
1004407e:	6013      	str	r3, [r2, #0]
10044080:	687b      	ldr	r3, [r7, #4]
10044082:	791b      	ldrb	r3, [r3, #4]
10044084:	001a      	movs	r2, r3
10044086:	4b61      	ldr	r3, [pc, #388]	@ (1004420c <CleanPage+0x1f8>)
10044088:	18fb      	adds	r3, r7, r3
1004408a:	681b      	ldr	r3, [r3, #0]
1004408c:	4293      	cmp	r3, r2
1004408e:	dbd3      	blt.n	10044038 <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
10044090:	4b5d      	ldr	r3, [pc, #372]	@ (10044208 <CleanPage+0x1f4>)
10044092:	18fb      	adds	r3, r7, r3
10044094:	781b      	ldrb	r3, [r3, #0]
10044096:	2b00      	cmp	r3, #0
10044098:	d101      	bne.n	1004409e <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
1004409a:	2300      	movs	r3, #0
1004409c:	e0ab      	b.n	100441f6 <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
1004409e:	2380      	movs	r3, #128	@ 0x80
100440a0:	011a      	lsls	r2, r3, #4
100440a2:	2308      	movs	r3, #8
100440a4:	18fb      	adds	r3, r7, r3
100440a6:	21ff      	movs	r1, #255	@ 0xff
100440a8:	0018      	movs	r0, r3
100440aa:	f00a ff15 	bl	1004eed8 <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
100440ae:	2300      	movs	r3, #0
100440b0:	4a56      	ldr	r2, [pc, #344]	@ (1004420c <CleanPage+0x1f8>)
100440b2:	18ba      	adds	r2, r7, r2
100440b4:	6013      	str	r3, [r2, #0]
100440b6:	e051      	b.n	1004415c <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
100440b8:	687b      	ldr	r3, [r7, #4]
100440ba:	6899      	ldr	r1, [r3, #8]
100440bc:	4853      	ldr	r0, [pc, #332]	@ (1004420c <CleanPage+0x1f8>)
100440be:	183b      	adds	r3, r7, r0
100440c0:	681a      	ldr	r2, [r3, #0]
100440c2:	0013      	movs	r3, r2
100440c4:	005b      	lsls	r3, r3, #1
100440c6:	189b      	adds	r3, r3, r2
100440c8:	009b      	lsls	r3, r3, #2
100440ca:	18ca      	adds	r2, r1, r3
100440cc:	4d50      	ldr	r5, [pc, #320]	@ (10044210 <CleanPage+0x1fc>)
100440ce:	197b      	adds	r3, r7, r5
100440d0:	7812      	ldrb	r2, [r2, #0]
100440d2:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
100440d4:	687b      	ldr	r3, [r7, #4]
100440d6:	6899      	ldr	r1, [r3, #8]
100440d8:	183b      	adds	r3, r7, r0
100440da:	681a      	ldr	r2, [r3, #0]
100440dc:	0013      	movs	r3, r2
100440de:	005b      	lsls	r3, r3, #1
100440e0:	189b      	adds	r3, r3, r2
100440e2:	009b      	lsls	r3, r3, #2
100440e4:	18cb      	adds	r3, r1, r3
100440e6:	685b      	ldr	r3, [r3, #4]
100440e8:	2282      	movs	r2, #130	@ 0x82
100440ea:	0112      	lsls	r2, r2, #4
100440ec:	18ba      	adds	r2, r7, r2
100440ee:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
100440f0:	4e49      	ldr	r6, [pc, #292]	@ (10044218 <CleanPage+0x204>)
100440f2:	19bc      	adds	r4, r7, r6
100440f4:	2381      	movs	r3, #129	@ 0x81
100440f6:	011b      	lsls	r3, r3, #4
100440f8:	18fa      	adds	r2, r7, r3
100440fa:	197b      	adds	r3, r7, r5
100440fc:	781b      	ldrb	r3, [r3, #0]
100440fe:	0011      	movs	r1, r2
10044100:	0018      	movs	r0, r3
10044102:	f000 fb1d 	bl	10044740 <NVMDB_HandleInit>
10044106:	0003      	movs	r3, r0
10044108:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
1004410a:	19bb      	adds	r3, r7, r6
1004410c:	781b      	ldrb	r3, [r3, #0]
1004410e:	2b00      	cmp	r3, #0
10044110:	d001      	beq.n	10044116 <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
10044112:	2300      	movs	r3, #0
10044114:	e06f      	b.n	100441f6 <CleanPage+0x1e2>
    }

    InitReadState(&state);
10044116:	4d41      	ldr	r5, [pc, #260]	@ (1004421c <CleanPage+0x208>)
10044118:	197b      	adds	r3, r7, r5
1004411a:	0018      	movs	r0, r3
1004411c:	f7ff fd92 	bl	10043c44 <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
10044120:	2308      	movs	r3, #8
10044122:	18fa      	adds	r2, r7, r3
10044124:	2082      	movs	r0, #130	@ 0x82
10044126:	0100      	lsls	r0, r0, #4
10044128:	183b      	adds	r3, r7, r0
1004412a:	681b      	ldr	r3, [r3, #0]
1004412c:	18d1      	adds	r1, r2, r3
1004412e:	183b      	adds	r3, r7, r0
10044130:	681b      	ldr	r3, [r3, #0]
10044132:	b29b      	uxth	r3, r3
10044134:	2280      	movs	r2, #128	@ 0x80
10044136:	0112      	lsls	r2, r2, #4
10044138:	1ad3      	subs	r3, r2, r3
1004413a:	b29a      	uxth	r2, r3
1004413c:	4b38      	ldr	r3, [pc, #224]	@ (10044220 <CleanPage+0x20c>)
1004413e:	18fc      	adds	r4, r7, r3
10044140:	2381      	movs	r3, #129	@ 0x81
10044142:	011b      	lsls	r3, r3, #4
10044144:	18f8      	adds	r0, r7, r3
10044146:	197b      	adds	r3, r7, r5
10044148:	9300      	str	r3, [sp, #0]
1004414a:	0023      	movs	r3, r4
1004414c:	f7ff fd8b 	bl	10043c66 <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10044150:	4a2e      	ldr	r2, [pc, #184]	@ (1004420c <CleanPage+0x1f8>)
10044152:	18bb      	adds	r3, r7, r2
10044154:	681b      	ldr	r3, [r3, #0]
10044156:	3301      	adds	r3, #1
10044158:	18ba      	adds	r2, r7, r2
1004415a:	6013      	str	r3, [r2, #0]
1004415c:	687b      	ldr	r3, [r7, #4]
1004415e:	791b      	ldrb	r3, [r3, #4]
10044160:	001a      	movs	r2, r3
10044162:	4c2a      	ldr	r4, [pc, #168]	@ (1004420c <CleanPage+0x1f8>)
10044164:	193b      	adds	r3, r7, r4
10044166:	681b      	ldr	r3, [r3, #0]
10044168:	4293      	cmp	r3, r2
1004416a:	dba5      	blt.n	100440b8 <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
1004416c:	687b      	ldr	r3, [r7, #4]
1004416e:	681b      	ldr	r3, [r3, #0]
10044170:	2280      	movs	r2, #128	@ 0x80
10044172:	0112      	lsls	r2, r2, #4
10044174:	2108      	movs	r1, #8
10044176:	1879      	adds	r1, r7, r1
10044178:	0018      	movs	r0, r3
1004417a:	f7ff fd23 	bl	10043bc4 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
1004417e:	2300      	movs	r3, #0
10044180:	193a      	adds	r2, r7, r4
10044182:	6013      	str	r3, [r2, #0]
10044184:	e02c      	b.n	100441e0 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10044186:	687b      	ldr	r3, [r7, #4]
10044188:	6899      	ldr	r1, [r3, #8]
1004418a:	4b20      	ldr	r3, [pc, #128]	@ (1004420c <CleanPage+0x1f8>)
1004418c:	18fb      	adds	r3, r7, r3
1004418e:	681a      	ldr	r2, [r3, #0]
10044190:	0013      	movs	r3, r2
10044192:	005b      	lsls	r3, r3, #1
10044194:	189b      	adds	r3, r3, r2
10044196:	009b      	lsls	r3, r3, #2
10044198:	18ca      	adds	r2, r1, r3
1004419a:	491d      	ldr	r1, [pc, #116]	@ (10044210 <CleanPage+0x1fc>)
1004419c:	187b      	adds	r3, r7, r1
1004419e:	7812      	ldrb	r2, [r2, #0]
100441a0:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
100441a2:	187b      	adds	r3, r7, r1
100441a4:	781a      	ldrb	r2, [r3, #0]
100441a6:	0013      	movs	r3, r2
100441a8:	009b      	lsls	r3, r3, #2
100441aa:	189b      	adds	r3, r3, r2
100441ac:	009b      	lsls	r3, r3, #2
100441ae:	4a19      	ldr	r2, [pc, #100]	@ (10044214 <CleanPage+0x200>)
100441b0:	189b      	adds	r3, r3, r2
100441b2:	4d19      	ldr	r5, [pc, #100]	@ (10044218 <CleanPage+0x204>)
100441b4:	197c      	adds	r4, r7, r5
100441b6:	0018      	movs	r0, r3
100441b8:	f7ff fa9c 	bl	100436f4 <NVMDB_get_info>
100441bc:	0003      	movs	r3, r0
100441be:	7023      	strb	r3, [r4, #0]
    if(status)
100441c0:	002a      	movs	r2, r5
100441c2:	18bb      	adds	r3, r7, r2
100441c4:	781b      	ldrb	r3, [r3, #0]
100441c6:	2b00      	cmp	r3, #0
100441c8:	d004      	beq.n	100441d4 <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
100441ca:	4b0e      	ldr	r3, [pc, #56]	@ (10044204 <CleanPage+0x1f0>)
100441cc:	18fb      	adds	r3, r7, r3
100441ce:	18ba      	adds	r2, r7, r2
100441d0:	7812      	ldrb	r2, [r2, #0]
100441d2:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
100441d4:	4a0d      	ldr	r2, [pc, #52]	@ (1004420c <CleanPage+0x1f8>)
100441d6:	18bb      	adds	r3, r7, r2
100441d8:	681b      	ldr	r3, [r3, #0]
100441da:	3301      	adds	r3, #1
100441dc:	18ba      	adds	r2, r7, r2
100441de:	6013      	str	r3, [r2, #0]
100441e0:	687b      	ldr	r3, [r7, #4]
100441e2:	791b      	ldrb	r3, [r3, #4]
100441e4:	001a      	movs	r2, r3
100441e6:	4b09      	ldr	r3, [pc, #36]	@ (1004420c <CleanPage+0x1f8>)
100441e8:	18fb      	adds	r3, r7, r3
100441ea:	681b      	ldr	r3, [r3, #0]
100441ec:	4293      	cmp	r3, r2
100441ee:	dbca      	blt.n	10044186 <CleanPage+0x172>
    }
  }

  return ret;
100441f0:	4b04      	ldr	r3, [pc, #16]	@ (10044204 <CleanPage+0x1f0>)
100441f2:	18fb      	adds	r3, r7, r3
100441f4:	781b      	ldrb	r3, [r3, #0]
}
100441f6:	0018      	movs	r0, r3
100441f8:	46bd      	mov	sp, r7
100441fa:	4b0a      	ldr	r3, [pc, #40]	@ (10044224 <CleanPage+0x210>)
100441fc:	449d      	add	sp, r3
100441fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044200:	fffff7c4 	.word	0xfffff7c4
10044204:	0000082f 	.word	0x0000082f
10044208:	00000827 	.word	0x00000827
1004420c:	00000828 	.word	0x00000828
10044210:	00000826 	.word	0x00000826
10044214:	200008d0 	.word	0x200008d0
10044218:	00000825 	.word	0x00000825
1004421c:	00000808 	.word	0x00000808
10044220:	0000080e 	.word	0x0000080e
10044224:	00000834 	.word	0x00000834

10044228 <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
10044228:	b590      	push	{r4, r7, lr}
1004422a:	b087      	sub	sp, #28
1004422c:	af00      	add	r7, sp, #0
1004422e:	0002      	movs	r2, r0
10044230:	6039      	str	r1, [r7, #0]
10044232:	1dfb      	adds	r3, r7, #7
10044234:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
10044236:	2300      	movs	r3, #0
10044238:	617b      	str	r3, [r7, #20]
1004423a:	e016      	b.n	1004426a <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1004423c:	240b      	movs	r4, #11
1004423e:	1939      	adds	r1, r7, r4
10044240:	482e      	ldr	r0, [pc, #184]	@ (100442fc <GetDBType+0xd4>)
10044242:	697a      	ldr	r2, [r7, #20]
10044244:	0013      	movs	r3, r2
10044246:	005b      	lsls	r3, r3, #1
10044248:	189b      	adds	r3, r3, r2
1004424a:	009b      	lsls	r3, r3, #2
1004424c:	18c3      	adds	r3, r0, r3
1004424e:	3306      	adds	r3, #6
10044250:	781b      	ldrb	r3, [r3, #0]
10044252:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
10044254:	193a      	adds	r2, r7, r4
10044256:	1dfb      	adds	r3, r7, #7
10044258:	7812      	ldrb	r2, [r2, #0]
1004425a:	781b      	ldrb	r3, [r3, #0]
1004425c:	429a      	cmp	r2, r3
1004425e:	d101      	bne.n	10044264 <GetDBType+0x3c>
    {
      return LARGE_DB;
10044260:	2302      	movs	r3, #2
10044262:	e046      	b.n	100442f2 <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10044264:	697b      	ldr	r3, [r7, #20]
10044266:	3301      	adds	r3, #1
10044268:	617b      	str	r3, [r7, #20]
1004426a:	697b      	ldr	r3, [r7, #20]
1004426c:	2b01      	cmp	r3, #1
1004426e:	dde5      	ble.n	1004423c <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10044270:	2300      	movs	r3, #0
10044272:	613b      	str	r3, [r7, #16]
10044274:	e039      	b.n	100442ea <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10044276:	2300      	movs	r3, #0
10044278:	60fb      	str	r3, [r7, #12]
1004427a:	e026      	b.n	100442ca <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1004427c:	4920      	ldr	r1, [pc, #128]	@ (10044300 <GetDBType+0xd8>)
1004427e:	693a      	ldr	r2, [r7, #16]
10044280:	0013      	movs	r3, r2
10044282:	005b      	lsls	r3, r3, #1
10044284:	189b      	adds	r3, r3, r2
10044286:	009b      	lsls	r3, r3, #2
10044288:	18cb      	adds	r3, r1, r3
1004428a:	3308      	adds	r3, #8
1004428c:	6819      	ldr	r1, [r3, #0]
1004428e:	68fa      	ldr	r2, [r7, #12]
10044290:	0013      	movs	r3, r2
10044292:	005b      	lsls	r3, r3, #1
10044294:	189b      	adds	r3, r3, r2
10044296:	009b      	lsls	r3, r3, #2
10044298:	18ca      	adds	r2, r1, r3
1004429a:	210b      	movs	r1, #11
1004429c:	187b      	adds	r3, r7, r1
1004429e:	7812      	ldrb	r2, [r2, #0]
100442a0:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
100442a2:	187a      	adds	r2, r7, r1
100442a4:	1dfb      	adds	r3, r7, #7
100442a6:	7812      	ldrb	r2, [r2, #0]
100442a8:	781b      	ldrb	r3, [r3, #0]
100442aa:	429a      	cmp	r2, r3
100442ac:	d10a      	bne.n	100442c4 <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
100442ae:	693a      	ldr	r2, [r7, #16]
100442b0:	0013      	movs	r3, r2
100442b2:	005b      	lsls	r3, r3, #1
100442b4:	189b      	adds	r3, r3, r2
100442b6:	009b      	lsls	r3, r3, #2
100442b8:	4a11      	ldr	r2, [pc, #68]	@ (10044300 <GetDBType+0xd8>)
100442ba:	189a      	adds	r2, r3, r2
100442bc:	683b      	ldr	r3, [r7, #0]
100442be:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
100442c0:	2301      	movs	r3, #1
100442c2:	e016      	b.n	100442f2 <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
100442c4:	68fb      	ldr	r3, [r7, #12]
100442c6:	3301      	adds	r3, #1
100442c8:	60fb      	str	r3, [r7, #12]
100442ca:	490d      	ldr	r1, [pc, #52]	@ (10044300 <GetDBType+0xd8>)
100442cc:	693a      	ldr	r2, [r7, #16]
100442ce:	0013      	movs	r3, r2
100442d0:	005b      	lsls	r3, r3, #1
100442d2:	189b      	adds	r3, r3, r2
100442d4:	009b      	lsls	r3, r3, #2
100442d6:	18cb      	adds	r3, r1, r3
100442d8:	3304      	adds	r3, #4
100442da:	781b      	ldrb	r3, [r3, #0]
100442dc:	001a      	movs	r2, r3
100442de:	68fb      	ldr	r3, [r7, #12]
100442e0:	4293      	cmp	r3, r2
100442e2:	dbcb      	blt.n	1004427c <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
100442e4:	693b      	ldr	r3, [r7, #16]
100442e6:	3301      	adds	r3, #1
100442e8:	613b      	str	r3, [r7, #16]
100442ea:	693b      	ldr	r3, [r7, #16]
100442ec:	2b00      	cmp	r3, #0
100442ee:	dbc2      	blt.n	10044276 <GetDBType+0x4e>
      }
    }
  }

  return 0;
100442f0:	2300      	movs	r3, #0
}
100442f2:	0018      	movs	r0, r3
100442f4:	46bd      	mov	sp, r7
100442f6:	b007      	add	sp, #28
100442f8:	bd90      	pop	{r4, r7, pc}
100442fa:	46c0      	nop			@ (mov r8, r8)
100442fc:	1004fd38 	.word	0x1004fd38
10044300:	200008fc 	.word	0x200008fc

10044304 <NVMDB_AppendRecordNoCache>:

  return NVMDB_STATUS_OK;
}

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
10044304:	b5f0      	push	{r4, r5, r6, r7, lr}
10044306:	b089      	sub	sp, #36	@ 0x24
10044308:	af02      	add	r7, sp, #8
1004430a:	60f8      	str	r0, [r7, #12]
1004430c:	0008      	movs	r0, r1
1004430e:	0011      	movs	r1, r2
10044310:	607b      	str	r3, [r7, #4]
10044312:	230b      	movs	r3, #11
10044314:	18fb      	adds	r3, r7, r3
10044316:	1c02      	adds	r2, r0, #0
10044318:	701a      	strb	r2, [r3, #0]
1004431a:	2008      	movs	r0, #8
1004431c:	183b      	adds	r3, r7, r0
1004431e:	1c0a      	adds	r2, r1, #0
10044320:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
10044322:	0001      	movs	r1, r0
10044324:	187b      	adds	r3, r7, r1
10044326:	881b      	ldrh	r3, [r3, #0]
10044328:	3b01      	subs	r3, #1
1004432a:	b29b      	uxth	r3, r3
1004432c:	b21b      	sxth	r3, r3
1004432e:	2203      	movs	r2, #3
10044330:	4313      	orrs	r3, r2
10044332:	b21b      	sxth	r3, r3
10044334:	b29a      	uxth	r2, r3
10044336:	187b      	adds	r3, r7, r1
10044338:	3201      	adds	r2, #1
1004433a:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
1004433c:	68fb      	ldr	r3, [r7, #12]
1004433e:	685b      	ldr	r3, [r3, #4]
10044340:	1d5a      	adds	r2, r3, #5
10044342:	68fb      	ldr	r3, [r7, #12]
10044344:	689b      	ldr	r3, [r3, #8]
10044346:	429a      	cmp	r2, r3
10044348:	d310      	bcc.n	1004436c <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
1004434a:	68fb      	ldr	r3, [r7, #12]
1004434c:	781b      	ldrb	r3, [r3, #0]
1004434e:	0019      	movs	r1, r3
10044350:	4a4a      	ldr	r2, [pc, #296]	@ (1004447c <NVMDB_AppendRecordNoCache+0x178>)
10044352:	000b      	movs	r3, r1
10044354:	009b      	lsls	r3, r3, #2
10044356:	185b      	adds	r3, r3, r1
10044358:	009b      	lsls	r3, r3, #2
1004435a:	18d3      	adds	r3, r2, r3
1004435c:	330a      	adds	r3, #10
1004435e:	881b      	ldrh	r3, [r3, #0]
10044360:	2b00      	cmp	r3, #0
10044362:	d001      	beq.n	10044368 <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
10044364:	230b      	movs	r3, #11
10044366:	e084      	b.n	10044472 <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
10044368:	2302      	movs	r3, #2
1004436a:	e082      	b.n	10044472 <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004436c:	68fb      	ldr	r3, [r7, #12]
1004436e:	685b      	ldr	r3, [r3, #4]
10044370:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
10044372:	697b      	ldr	r3, [r7, #20]
10044374:	781b      	ldrb	r3, [r3, #0]
10044376:	2bff      	cmp	r3, #255	@ 0xff
10044378:	d11c      	bne.n	100443b4 <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
1004437a:	68fb      	ldr	r3, [r7, #12]
1004437c:	689a      	ldr	r2, [r3, #8]
1004437e:	68fb      	ldr	r3, [r7, #12]
10044380:	685b      	ldr	r3, [r3, #4]
10044382:	1ad3      	subs	r3, r2, r3
10044384:	2280      	movs	r2, #128	@ 0x80
10044386:	0252      	lsls	r2, r2, #9
10044388:	4293      	cmp	r3, r2
1004438a:	d300      	bcc.n	1004438e <NVMDB_AppendRecordNoCache+0x8a>
1004438c:	4b3c      	ldr	r3, [pc, #240]	@ (10044480 <NVMDB_AppendRecordNoCache+0x17c>)
1004438e:	2112      	movs	r1, #18
10044390:	187a      	adds	r2, r7, r1
10044392:	8013      	strh	r3, [r2, #0]
      break;
10044394:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
10044396:	2308      	movs	r3, #8
10044398:	0018      	movs	r0, r3
1004439a:	18fb      	adds	r3, r7, r3
1004439c:	881a      	ldrh	r2, [r3, #0]
1004439e:	2328      	movs	r3, #40	@ 0x28
100443a0:	181b      	adds	r3, r3, r0
100443a2:	19db      	adds	r3, r3, r7
100443a4:	881b      	ldrh	r3, [r3, #0]
100443a6:	18d3      	adds	r3, r2, r3
100443a8:	1cda      	adds	r2, r3, #3
100443aa:	187b      	adds	r3, r7, r1
100443ac:	881b      	ldrh	r3, [r3, #0]
100443ae:	429a      	cmp	r2, r3
100443b0:	db27      	blt.n	10044402 <NVMDB_AppendRecordNoCache+0xfe>
100443b2:	e015      	b.n	100443e0 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
100443b4:	697b      	ldr	r3, [r7, #20]
100443b6:	781b      	ldrb	r3, [r3, #0]
100443b8:	2bfe      	cmp	r3, #254	@ 0xfe
100443ba:	d005      	beq.n	100443c8 <NVMDB_AppendRecordNoCache+0xc4>
100443bc:	697b      	ldr	r3, [r7, #20]
100443be:	781b      	ldrb	r3, [r3, #0]
100443c0:	2b00      	cmp	r3, #0
100443c2:	d001      	beq.n	100443c8 <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
100443c4:	2303      	movs	r3, #3
100443c6:	e054      	b.n	10044472 <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
100443c8:	68fb      	ldr	r3, [r7, #12]
100443ca:	685b      	ldr	r3, [r3, #4]
100443cc:	697a      	ldr	r2, [r7, #20]
100443ce:	8852      	ldrh	r2, [r2, #2]
100443d0:	3203      	adds	r2, #3
100443d2:	2103      	movs	r1, #3
100443d4:	430a      	orrs	r2, r1
100443d6:	189b      	adds	r3, r3, r2
100443d8:	1c5a      	adds	r2, r3, #1
100443da:	68fb      	ldr	r3, [r7, #12]
100443dc:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
100443de:	e7ad      	b.n	1004433c <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
100443e0:	68fb      	ldr	r3, [r7, #12]
100443e2:	781b      	ldrb	r3, [r3, #0]
100443e4:	0019      	movs	r1, r3
100443e6:	4a25      	ldr	r2, [pc, #148]	@ (1004447c <NVMDB_AppendRecordNoCache+0x178>)
100443e8:	000b      	movs	r3, r1
100443ea:	009b      	lsls	r3, r3, #2
100443ec:	185b      	adds	r3, r3, r1
100443ee:	009b      	lsls	r3, r3, #2
100443f0:	18d3      	adds	r3, r2, r3
100443f2:	330a      	adds	r3, #10
100443f4:	881b      	ldrh	r3, [r3, #0]
100443f6:	2b00      	cmp	r3, #0
100443f8:	d001      	beq.n	100443fe <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
100443fa:	230b      	movs	r3, #11
100443fc:	e039      	b.n	10044472 <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
100443fe:	2302      	movs	r3, #2
10044400:	e037      	b.n	10044472 <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
10044402:	68fb      	ldr	r3, [r7, #12]
10044404:	6858      	ldr	r0, [r3, #4]
10044406:	2611      	movs	r6, #17
10044408:	19bc      	adds	r4, r7, r6
1004440a:	687d      	ldr	r5, [r7, #4]
1004440c:	2308      	movs	r3, #8
1004440e:	001a      	movs	r2, r3
10044410:	18fb      	adds	r3, r7, r3
10044412:	881b      	ldrh	r3, [r3, #0]
10044414:	469c      	mov	ip, r3
10044416:	230b      	movs	r3, #11
10044418:	18fb      	adds	r3, r7, r3
1004441a:	7819      	ldrb	r1, [r3, #0]
1004441c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004441e:	9301      	str	r3, [sp, #4]
10044420:	2328      	movs	r3, #40	@ 0x28
10044422:	189b      	adds	r3, r3, r2
10044424:	19db      	adds	r3, r3, r7
10044426:	881b      	ldrh	r3, [r3, #0]
10044428:	9300      	str	r3, [sp, #0]
1004442a:	002b      	movs	r3, r5
1004442c:	4662      	mov	r2, ip
1004442e:	f7ff fae2 	bl	100439f6 <WriteRecord>
10044432:	0003      	movs	r3, r0
10044434:	7023      	strb	r3, [r4, #0]
  if(status)
10044436:	19bb      	adds	r3, r7, r6
10044438:	781b      	ldrb	r3, [r3, #0]
1004443a:	2b00      	cmp	r3, #0
1004443c:	d002      	beq.n	10044444 <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
1004443e:	19bb      	adds	r3, r7, r6
10044440:	781b      	ldrb	r3, [r3, #0]
10044442:	e016      	b.n	10044472 <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
10044444:	68fb      	ldr	r3, [r7, #12]
10044446:	781b      	ldrb	r3, [r3, #0]
10044448:	001a      	movs	r2, r3
1004444a:	490c      	ldr	r1, [pc, #48]	@ (1004447c <NVMDB_AppendRecordNoCache+0x178>)
1004444c:	0013      	movs	r3, r2
1004444e:	009b      	lsls	r3, r3, #2
10044450:	189b      	adds	r3, r3, r2
10044452:	009b      	lsls	r3, r3, #2
10044454:	18cb      	adds	r3, r1, r3
10044456:	3308      	adds	r3, #8
10044458:	881b      	ldrh	r3, [r3, #0]
1004445a:	3301      	adds	r3, #1
1004445c:	b298      	uxth	r0, r3
1004445e:	4907      	ldr	r1, [pc, #28]	@ (1004447c <NVMDB_AppendRecordNoCache+0x178>)
10044460:	0013      	movs	r3, r2
10044462:	009b      	lsls	r3, r3, #2
10044464:	189b      	adds	r3, r3, r2
10044466:	009b      	lsls	r3, r3, #2
10044468:	18cb      	adds	r3, r1, r3
1004446a:	3308      	adds	r3, #8
1004446c:	1c02      	adds	r2, r0, #0
1004446e:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10044470:	2300      	movs	r3, #0
}
10044472:	0018      	movs	r0, r3
10044474:	46bd      	mov	sp, r7
10044476:	b007      	add	sp, #28
10044478:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004447a:	46c0      	nop			@ (mov r8, r8)
1004447c:	200008d0 	.word	0x200008d0
10044480:	0000ffff 	.word	0x0000ffff

10044484 <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
10044484:	b5b0      	push	{r4, r5, r7, lr}
10044486:	b088      	sub	sp, #32
10044488:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
1004448a:	2300      	movs	r3, #0
1004448c:	61fb      	str	r3, [r7, #28]
1004448e:	e0cd      	b.n	1004462c <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
10044490:	49a8      	ldr	r1, [pc, #672]	@ (10044734 <NVMDB_Init+0x2b0>)
10044492:	69fa      	ldr	r2, [r7, #28]
10044494:	0013      	movs	r3, r2
10044496:	005b      	lsls	r3, r3, #1
10044498:	189b      	adds	r3, r3, r2
1004449a:	009b      	lsls	r3, r3, #2
1004449c:	585b      	ldr	r3, [r3, r1]
1004449e:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
100444a0:	2300      	movs	r3, #0
100444a2:	61bb      	str	r3, [r7, #24]
100444a4:	e0b1      	b.n	1004460a <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
100444a6:	49a3      	ldr	r1, [pc, #652]	@ (10044734 <NVMDB_Init+0x2b0>)
100444a8:	69fa      	ldr	r2, [r7, #28]
100444aa:	0013      	movs	r3, r2
100444ac:	005b      	lsls	r3, r3, #1
100444ae:	189b      	adds	r3, r3, r2
100444b0:	009b      	lsls	r3, r3, #2
100444b2:	18cb      	adds	r3, r1, r3
100444b4:	3308      	adds	r3, #8
100444b6:	6819      	ldr	r1, [r3, #0]
100444b8:	69ba      	ldr	r2, [r7, #24]
100444ba:	0013      	movs	r3, r2
100444bc:	005b      	lsls	r3, r3, #1
100444be:	189b      	adds	r3, r3, r2
100444c0:	009b      	lsls	r3, r3, #2
100444c2:	18ca      	adds	r2, r1, r3
100444c4:	2013      	movs	r0, #19
100444c6:	183b      	adds	r3, r7, r0
100444c8:	7812      	ldrb	r2, [r2, #0]
100444ca:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
100444cc:	4999      	ldr	r1, [pc, #612]	@ (10044734 <NVMDB_Init+0x2b0>)
100444ce:	69fa      	ldr	r2, [r7, #28]
100444d0:	0013      	movs	r3, r2
100444d2:	005b      	lsls	r3, r3, #1
100444d4:	189b      	adds	r3, r3, r2
100444d6:	009b      	lsls	r3, r3, #2
100444d8:	18cb      	adds	r3, r1, r3
100444da:	3308      	adds	r3, #8
100444dc:	6819      	ldr	r1, [r3, #0]
100444de:	69ba      	ldr	r2, [r7, #24]
100444e0:	0013      	movs	r3, r2
100444e2:	005b      	lsls	r3, r3, #1
100444e4:	189b      	adds	r3, r3, r2
100444e6:	009b      	lsls	r3, r3, #2
100444e8:	18cb      	adds	r3, r1, r3
100444ea:	685b      	ldr	r3, [r3, #4]
100444ec:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
100444ee:	4991      	ldr	r1, [pc, #580]	@ (10044734 <NVMDB_Init+0x2b0>)
100444f0:	69fa      	ldr	r2, [r7, #28]
100444f2:	0013      	movs	r3, r2
100444f4:	005b      	lsls	r3, r3, #1
100444f6:	189b      	adds	r3, r3, r2
100444f8:	009b      	lsls	r3, r3, #2
100444fa:	18cb      	adds	r3, r1, r3
100444fc:	3308      	adds	r3, #8
100444fe:	6819      	ldr	r1, [r3, #0]
10044500:	69ba      	ldr	r2, [r7, #24]
10044502:	0013      	movs	r3, r2
10044504:	005b      	lsls	r3, r3, #1
10044506:	189b      	adds	r3, r3, r2
10044508:	009b      	lsls	r3, r3, #2
1004450a:	18ca      	adds	r2, r1, r3
1004450c:	1dbb      	adds	r3, r7, #6
1004450e:	8912      	ldrh	r2, [r2, #8]
10044510:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
10044512:	183b      	adds	r3, r7, r0
10044514:	781a      	ldrb	r2, [r3, #0]
10044516:	4988      	ldr	r1, [pc, #544]	@ (10044738 <NVMDB_Init+0x2b4>)
10044518:	0013      	movs	r3, r2
1004451a:	009b      	lsls	r3, r3, #2
1004451c:	189b      	adds	r3, r3, r2
1004451e:	009b      	lsls	r3, r3, #2
10044520:	585b      	ldr	r3, [r3, r1]
10044522:	2b00      	cmp	r3, #0
10044524:	d103      	bne.n	1004452e <NVMDB_Init+0xaa>
10044526:	183b      	adds	r3, r7, r0
10044528:	781b      	ldrb	r3, [r3, #0]
1004452a:	2b01      	cmp	r3, #1
1004452c:	d901      	bls.n	10044532 <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
1004452e:	2301      	movs	r3, #1
10044530:	e0fc      	b.n	1004472c <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
10044532:	2413      	movs	r4, #19
10044534:	193b      	adds	r3, r7, r4
10044536:	781a      	ldrb	r2, [r3, #0]
10044538:	68f9      	ldr	r1, [r7, #12]
1004453a:	68bb      	ldr	r3, [r7, #8]
1004453c:	18c8      	adds	r0, r1, r3
1004453e:	497e      	ldr	r1, [pc, #504]	@ (10044738 <NVMDB_Init+0x2b4>)
10044540:	0013      	movs	r3, r2
10044542:	009b      	lsls	r3, r3, #2
10044544:	189b      	adds	r3, r3, r2
10044546:	009b      	lsls	r3, r3, #2
10044548:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
1004454a:	497a      	ldr	r1, [pc, #488]	@ (10044734 <NVMDB_Init+0x2b0>)
1004454c:	69fa      	ldr	r2, [r7, #28]
1004454e:	0013      	movs	r3, r2
10044550:	005b      	lsls	r3, r3, #1
10044552:	189b      	adds	r3, r3, r2
10044554:	009b      	lsls	r3, r3, #2
10044556:	18cb      	adds	r3, r1, r3
10044558:	3304      	adds	r3, #4
1004455a:	781b      	ldrb	r3, [r3, #0]
1004455c:	3b01      	subs	r3, #1
1004455e:	69ba      	ldr	r2, [r7, #24]
10044560:	429a      	cmp	r2, r3
10044562:	d10e      	bne.n	10044582 <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
10044564:	193b      	adds	r3, r7, r4
10044566:	781a      	ldrb	r2, [r3, #0]
10044568:	68fb      	ldr	r3, [r7, #12]
1004456a:	2180      	movs	r1, #128	@ 0x80
1004456c:	0109      	lsls	r1, r1, #4
1004456e:	1859      	adds	r1, r3, r1
10044570:	4871      	ldr	r0, [pc, #452]	@ (10044738 <NVMDB_Init+0x2b4>)
10044572:	0013      	movs	r3, r2
10044574:	009b      	lsls	r3, r3, #2
10044576:	189b      	adds	r3, r3, r2
10044578:	009b      	lsls	r3, r3, #2
1004457a:	18c3      	adds	r3, r0, r3
1004457c:	3304      	adds	r3, #4
1004457e:	6019      	str	r1, [r3, #0]
10044580:	e01d      	b.n	100445be <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
10044582:	496c      	ldr	r1, [pc, #432]	@ (10044734 <NVMDB_Init+0x2b0>)
10044584:	69fa      	ldr	r2, [r7, #28]
10044586:	0013      	movs	r3, r2
10044588:	005b      	lsls	r3, r3, #1
1004458a:	189b      	adds	r3, r3, r2
1004458c:	009b      	lsls	r3, r3, #2
1004458e:	18cb      	adds	r3, r1, r3
10044590:	3308      	adds	r3, #8
10044592:	6819      	ldr	r1, [r3, #0]
10044594:	69bb      	ldr	r3, [r7, #24]
10044596:	1c5a      	adds	r2, r3, #1
10044598:	0013      	movs	r3, r2
1004459a:	005b      	lsls	r3, r3, #1
1004459c:	189b      	adds	r3, r3, r2
1004459e:	009b      	lsls	r3, r3, #2
100445a0:	18cb      	adds	r3, r1, r3
100445a2:	6859      	ldr	r1, [r3, #4]
100445a4:	2313      	movs	r3, #19
100445a6:	18fb      	adds	r3, r7, r3
100445a8:	781a      	ldrb	r2, [r3, #0]
100445aa:	68fb      	ldr	r3, [r7, #12]
100445ac:	18c9      	adds	r1, r1, r3
100445ae:	4862      	ldr	r0, [pc, #392]	@ (10044738 <NVMDB_Init+0x2b4>)
100445b0:	0013      	movs	r3, r2
100445b2:	009b      	lsls	r3, r3, #2
100445b4:	189b      	adds	r3, r3, r2
100445b6:	009b      	lsls	r3, r3, #2
100445b8:	18c3      	adds	r3, r0, r3
100445ba:	3304      	adds	r3, #4
100445bc:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
100445be:	2013      	movs	r0, #19
100445c0:	183b      	adds	r3, r7, r0
100445c2:	781a      	ldrb	r2, [r3, #0]
100445c4:	495c      	ldr	r1, [pc, #368]	@ (10044738 <NVMDB_Init+0x2b4>)
100445c6:	0013      	movs	r3, r2
100445c8:	009b      	lsls	r3, r3, #2
100445ca:	189b      	adds	r3, r3, r2
100445cc:	009b      	lsls	r3, r3, #2
100445ce:	18cb      	adds	r3, r1, r3
100445d0:	3310      	adds	r3, #16
100445d2:	1dba      	adds	r2, r7, #6
100445d4:	8812      	ldrh	r2, [r2, #0]
100445d6:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
100445d8:	183b      	adds	r3, r7, r0
100445da:	781a      	ldrb	r2, [r3, #0]
100445dc:	0013      	movs	r3, r2
100445de:	009b      	lsls	r3, r3, #2
100445e0:	189b      	adds	r3, r3, r2
100445e2:	009b      	lsls	r3, r3, #2
100445e4:	4a54      	ldr	r2, [pc, #336]	@ (10044738 <NVMDB_Init+0x2b4>)
100445e6:	189b      	adds	r3, r3, r2
100445e8:	2512      	movs	r5, #18
100445ea:	197c      	adds	r4, r7, r5
100445ec:	0018      	movs	r0, r3
100445ee:	f7ff f881 	bl	100436f4 <NVMDB_get_info>
100445f2:	0003      	movs	r3, r0
100445f4:	7023      	strb	r3, [r4, #0]
      if(status)
100445f6:	197b      	adds	r3, r7, r5
100445f8:	781b      	ldrb	r3, [r3, #0]
100445fa:	2b00      	cmp	r3, #0
100445fc:	d002      	beq.n	10044604 <NVMDB_Init+0x180>
      {
        return status;
100445fe:	197b      	adds	r3, r7, r5
10044600:	781b      	ldrb	r3, [r3, #0]
10044602:	e093      	b.n	1004472c <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10044604:	69bb      	ldr	r3, [r7, #24]
10044606:	3301      	adds	r3, #1
10044608:	61bb      	str	r3, [r7, #24]
1004460a:	494a      	ldr	r1, [pc, #296]	@ (10044734 <NVMDB_Init+0x2b0>)
1004460c:	69fa      	ldr	r2, [r7, #28]
1004460e:	0013      	movs	r3, r2
10044610:	005b      	lsls	r3, r3, #1
10044612:	189b      	adds	r3, r3, r2
10044614:	009b      	lsls	r3, r3, #2
10044616:	18cb      	adds	r3, r1, r3
10044618:	3304      	adds	r3, #4
1004461a:	781b      	ldrb	r3, [r3, #0]
1004461c:	001a      	movs	r2, r3
1004461e:	69bb      	ldr	r3, [r7, #24]
10044620:	4293      	cmp	r3, r2
10044622:	da00      	bge.n	10044626 <NVMDB_Init+0x1a2>
10044624:	e73f      	b.n	100444a6 <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10044626:	69fb      	ldr	r3, [r7, #28]
10044628:	3301      	adds	r3, #1
1004462a:	61fb      	str	r3, [r7, #28]
1004462c:	69fb      	ldr	r3, [r7, #28]
1004462e:	2b00      	cmp	r3, #0
10044630:	da00      	bge.n	10044634 <NVMDB_Init+0x1b0>
10044632:	e72d      	b.n	10044490 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10044634:	2300      	movs	r3, #0
10044636:	617b      	str	r3, [r7, #20]
10044638:	e074      	b.n	10044724 <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
1004463a:	2413      	movs	r4, #19
1004463c:	1939      	adds	r1, r7, r4
1004463e:	483f      	ldr	r0, [pc, #252]	@ (1004473c <NVMDB_Init+0x2b8>)
10044640:	697a      	ldr	r2, [r7, #20]
10044642:	0013      	movs	r3, r2
10044644:	005b      	lsls	r3, r3, #1
10044646:	189b      	adds	r3, r3, r2
10044648:	009b      	lsls	r3, r3, #2
1004464a:	18c3      	adds	r3, r0, r3
1004464c:	3306      	adds	r3, #6
1004464e:	781b      	ldrb	r3, [r3, #0]
10044650:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
10044652:	193b      	adds	r3, r7, r4
10044654:	781a      	ldrb	r2, [r3, #0]
10044656:	4938      	ldr	r1, [pc, #224]	@ (10044738 <NVMDB_Init+0x2b4>)
10044658:	0013      	movs	r3, r2
1004465a:	009b      	lsls	r3, r3, #2
1004465c:	189b      	adds	r3, r3, r2
1004465e:	009b      	lsls	r3, r3, #2
10044660:	585b      	ldr	r3, [r3, r1]
10044662:	2b00      	cmp	r3, #0
10044664:	d103      	bne.n	1004466e <NVMDB_Init+0x1ea>
10044666:	193b      	adds	r3, r7, r4
10044668:	781b      	ldrb	r3, [r3, #0]
1004466a:	2b01      	cmp	r3, #1
1004466c:	d901      	bls.n	10044672 <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
1004466e:	2301      	movs	r3, #1
10044670:	e05c      	b.n	1004472c <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
10044672:	2413      	movs	r4, #19
10044674:	193b      	adds	r3, r7, r4
10044676:	781a      	ldrb	r2, [r3, #0]
10044678:	4830      	ldr	r0, [pc, #192]	@ (1004473c <NVMDB_Init+0x2b8>)
1004467a:	6979      	ldr	r1, [r7, #20]
1004467c:	000b      	movs	r3, r1
1004467e:	005b      	lsls	r3, r3, #1
10044680:	185b      	adds	r3, r3, r1
10044682:	009b      	lsls	r3, r3, #2
10044684:	5818      	ldr	r0, [r3, r0]
10044686:	492c      	ldr	r1, [pc, #176]	@ (10044738 <NVMDB_Init+0x2b4>)
10044688:	0013      	movs	r3, r2
1004468a:	009b      	lsls	r3, r3, #2
1004468c:	189b      	adds	r3, r3, r2
1004468e:	009b      	lsls	r3, r3, #2
10044690:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
10044692:	492a      	ldr	r1, [pc, #168]	@ (1004473c <NVMDB_Init+0x2b8>)
10044694:	697a      	ldr	r2, [r7, #20]
10044696:	0013      	movs	r3, r2
10044698:	005b      	lsls	r3, r3, #1
1004469a:	189b      	adds	r3, r3, r2
1004469c:	009b      	lsls	r3, r3, #2
1004469e:	5859      	ldr	r1, [r3, r1]
100446a0:	4826      	ldr	r0, [pc, #152]	@ (1004473c <NVMDB_Init+0x2b8>)
100446a2:	697a      	ldr	r2, [r7, #20]
100446a4:	0013      	movs	r3, r2
100446a6:	005b      	lsls	r3, r3, #1
100446a8:	189b      	adds	r3, r3, r2
100446aa:	009b      	lsls	r3, r3, #2
100446ac:	18c3      	adds	r3, r0, r3
100446ae:	3304      	adds	r3, #4
100446b0:	881b      	ldrh	r3, [r3, #0]
100446b2:	0018      	movs	r0, r3
100446b4:	193b      	adds	r3, r7, r4
100446b6:	781a      	ldrb	r2, [r3, #0]
100446b8:	1809      	adds	r1, r1, r0
100446ba:	481f      	ldr	r0, [pc, #124]	@ (10044738 <NVMDB_Init+0x2b4>)
100446bc:	0013      	movs	r3, r2
100446be:	009b      	lsls	r3, r3, #2
100446c0:	189b      	adds	r3, r3, r2
100446c2:	009b      	lsls	r3, r3, #2
100446c4:	18c3      	adds	r3, r0, r3
100446c6:	3304      	adds	r3, #4
100446c8:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
100446ca:	193b      	adds	r3, r7, r4
100446cc:	781a      	ldrb	r2, [r3, #0]
100446ce:	481b      	ldr	r0, [pc, #108]	@ (1004473c <NVMDB_Init+0x2b8>)
100446d0:	6979      	ldr	r1, [r7, #20]
100446d2:	000b      	movs	r3, r1
100446d4:	005b      	lsls	r3, r3, #1
100446d6:	185b      	adds	r3, r3, r1
100446d8:	009b      	lsls	r3, r3, #2
100446da:	18c3      	adds	r3, r0, r3
100446dc:	3308      	adds	r3, #8
100446de:	8818      	ldrh	r0, [r3, #0]
100446e0:	4915      	ldr	r1, [pc, #84]	@ (10044738 <NVMDB_Init+0x2b4>)
100446e2:	0013      	movs	r3, r2
100446e4:	009b      	lsls	r3, r3, #2
100446e6:	189b      	adds	r3, r3, r2
100446e8:	009b      	lsls	r3, r3, #2
100446ea:	18cb      	adds	r3, r1, r3
100446ec:	3310      	adds	r3, #16
100446ee:	1c02      	adds	r2, r0, #0
100446f0:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
100446f2:	193b      	adds	r3, r7, r4
100446f4:	781a      	ldrb	r2, [r3, #0]
100446f6:	0013      	movs	r3, r2
100446f8:	009b      	lsls	r3, r3, #2
100446fa:	189b      	adds	r3, r3, r2
100446fc:	009b      	lsls	r3, r3, #2
100446fe:	4a0e      	ldr	r2, [pc, #56]	@ (10044738 <NVMDB_Init+0x2b4>)
10044700:	189b      	adds	r3, r3, r2
10044702:	2512      	movs	r5, #18
10044704:	197c      	adds	r4, r7, r5
10044706:	0018      	movs	r0, r3
10044708:	f7fe fff4 	bl	100436f4 <NVMDB_get_info>
1004470c:	0003      	movs	r3, r0
1004470e:	7023      	strb	r3, [r4, #0]
    if(status)
10044710:	197b      	adds	r3, r7, r5
10044712:	781b      	ldrb	r3, [r3, #0]
10044714:	2b00      	cmp	r3, #0
10044716:	d002      	beq.n	1004471e <NVMDB_Init+0x29a>
    {
      return status;
10044718:	197b      	adds	r3, r7, r5
1004471a:	781b      	ldrb	r3, [r3, #0]
1004471c:	e006      	b.n	1004472c <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1004471e:	697b      	ldr	r3, [r7, #20]
10044720:	3301      	adds	r3, #1
10044722:	617b      	str	r3, [r7, #20]
10044724:	697b      	ldr	r3, [r7, #20]
10044726:	2b01      	cmp	r3, #1
10044728:	dd87      	ble.n	1004463a <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
1004472a:	2300      	movs	r3, #0
}
1004472c:	0018      	movs	r0, r3
1004472e:	46bd      	mov	sp, r7
10044730:	b008      	add	sp, #32
10044732:	bdb0      	pop	{r4, r5, r7, pc}
10044734:	200008fc 	.word	0x200008fc
10044738:	200008d0 	.word	0x200008d0
1004473c:	1004fd38 	.word	0x1004fd38

10044740 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
10044740:	b580      	push	{r7, lr}
10044742:	b082      	sub	sp, #8
10044744:	af00      	add	r7, sp, #0
10044746:	0002      	movs	r2, r0
10044748:	6039      	str	r1, [r7, #0]
1004474a:	1dfb      	adds	r3, r7, #7
1004474c:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
1004474e:	1dfb      	adds	r3, r7, #7
10044750:	781b      	ldrb	r3, [r3, #0]
10044752:	2b01      	cmp	r3, #1
10044754:	d901      	bls.n	1004475a <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
10044756:	2301      	movs	r3, #1
10044758:	e020      	b.n	1004479c <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
1004475a:	1dfb      	adds	r3, r7, #7
1004475c:	781a      	ldrb	r2, [r3, #0]
1004475e:	4911      	ldr	r1, [pc, #68]	@ (100447a4 <NVMDB_HandleInit+0x64>)
10044760:	0013      	movs	r3, r2
10044762:	009b      	lsls	r3, r3, #2
10044764:	189b      	adds	r3, r3, r2
10044766:	009b      	lsls	r3, r3, #2
10044768:	585a      	ldr	r2, [r3, r1]
1004476a:	683b      	ldr	r3, [r7, #0]
1004476c:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
1004476e:	1dfb      	adds	r3, r7, #7
10044770:	781a      	ldrb	r2, [r3, #0]
10044772:	490c      	ldr	r1, [pc, #48]	@ (100447a4 <NVMDB_HandleInit+0x64>)
10044774:	0013      	movs	r3, r2
10044776:	009b      	lsls	r3, r3, #2
10044778:	189b      	adds	r3, r3, r2
1004477a:	009b      	lsls	r3, r3, #2
1004477c:	18cb      	adds	r3, r1, r3
1004477e:	3304      	adds	r3, #4
10044780:	681a      	ldr	r2, [r3, #0]
10044782:	683b      	ldr	r3, [r7, #0]
10044784:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
10044786:	683b      	ldr	r3, [r7, #0]
10044788:	2201      	movs	r2, #1
1004478a:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
1004478c:	683b      	ldr	r3, [r7, #0]
1004478e:	1dfa      	adds	r2, r7, #7
10044790:	7812      	ldrb	r2, [r2, #0]
10044792:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
10044794:	683b      	ldr	r3, [r7, #0]
10044796:	2200      	movs	r2, #0
10044798:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
1004479a:	2300      	movs	r3, #0
}
1004479c:	0018      	movs	r0, r3
1004479e:	46bd      	mov	sp, r7
100447a0:	b002      	add	sp, #8
100447a2:	bd80      	pop	{r7, pc}
100447a4:	200008d0 	.word	0x200008d0

100447a8 <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
100447a8:	b590      	push	{r4, r7, lr}
100447aa:	b089      	sub	sp, #36	@ 0x24
100447ac:	af04      	add	r7, sp, #16
100447ae:	60f8      	str	r0, [r7, #12]
100447b0:	0008      	movs	r0, r1
100447b2:	0011      	movs	r1, r2
100447b4:	607b      	str	r3, [r7, #4]
100447b6:	230b      	movs	r3, #11
100447b8:	18fb      	adds	r3, r7, r3
100447ba:	1c02      	adds	r2, r0, #0
100447bc:	701a      	strb	r2, [r3, #0]
100447be:	2308      	movs	r3, #8
100447c0:	18fb      	adds	r3, r7, r3
100447c2:	1c0a      	adds	r2, r1, #0
100447c4:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
100447c6:	68fb      	ldr	r3, [r7, #12]
100447c8:	781b      	ldrb	r3, [r3, #0]
100447ca:	0019      	movs	r1, r3
100447cc:	4a12      	ldr	r2, [pc, #72]	@ (10044818 <NVMDB_ReadNextRecord+0x70>)
100447ce:	000b      	movs	r3, r1
100447d0:	009b      	lsls	r3, r3, #2
100447d2:	185b      	adds	r3, r3, r1
100447d4:	009b      	lsls	r3, r3, #2
100447d6:	18d3      	adds	r3, r2, r3
100447d8:	330e      	adds	r3, #14
100447da:	781b      	ldrb	r3, [r3, #0]
100447dc:	2b00      	cmp	r3, #0
100447de:	d001      	beq.n	100447e4 <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
100447e0:	230a      	movs	r3, #10
100447e2:	e015      	b.n	10044810 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
100447e4:	687c      	ldr	r4, [r7, #4]
100447e6:	2308      	movs	r3, #8
100447e8:	18fb      	adds	r3, r7, r3
100447ea:	881a      	ldrh	r2, [r3, #0]
100447ec:	230b      	movs	r3, #11
100447ee:	18fb      	adds	r3, r7, r3
100447f0:	7819      	ldrb	r1, [r3, #0]
100447f2:	68f8      	ldr	r0, [r7, #12]
100447f4:	2300      	movs	r3, #0
100447f6:	9303      	str	r3, [sp, #12]
100447f8:	2300      	movs	r3, #0
100447fa:	9302      	str	r3, [sp, #8]
100447fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100447fe:	9301      	str	r3, [sp, #4]
10044800:	2320      	movs	r3, #32
10044802:	18fb      	adds	r3, r7, r3
10044804:	881b      	ldrh	r3, [r3, #0]
10044806:	9300      	str	r3, [sp, #0]
10044808:	0023      	movs	r3, r4
1004480a:	f7ff f83f 	bl	1004388c <ReadNextRecordNoLock>
1004480e:	0003      	movs	r3, r0
}
10044810:	0018      	movs	r0, r3
10044812:	46bd      	mov	sp, r7
10044814:	b005      	add	sp, #20
10044816:	bd90      	pop	{r4, r7, pc}
10044818:	200008d0 	.word	0x200008d0

1004481c <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
1004481c:	b590      	push	{r4, r7, lr}
1004481e:	b087      	sub	sp, #28
10044820:	af02      	add	r7, sp, #8
10044822:	60f8      	str	r0, [r7, #12]
10044824:	0008      	movs	r0, r1
10044826:	607a      	str	r2, [r7, #4]
10044828:	0019      	movs	r1, r3
1004482a:	230a      	movs	r3, #10
1004482c:	18fb      	adds	r3, r7, r3
1004482e:	1c02      	adds	r2, r0, #0
10044830:	801a      	strh	r2, [r3, #0]
10044832:	2308      	movs	r3, #8
10044834:	18fb      	adds	r3, r7, r3
10044836:	1c0a      	adds	r2, r1, #0
10044838:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
1004483a:	68fb      	ldr	r3, [r7, #12]
1004483c:	781b      	ldrb	r3, [r3, #0]
1004483e:	0019      	movs	r1, r3
10044840:	4a0f      	ldr	r2, [pc, #60]	@ (10044880 <NVMDB_ReadCurrentRecord+0x64>)
10044842:	000b      	movs	r3, r1
10044844:	009b      	lsls	r3, r3, #2
10044846:	185b      	adds	r3, r3, r1
10044848:	009b      	lsls	r3, r3, #2
1004484a:	18d3      	adds	r3, r2, r3
1004484c:	330e      	adds	r3, #14
1004484e:	781b      	ldrb	r3, [r3, #0]
10044850:	2b00      	cmp	r3, #0
10044852:	d001      	beq.n	10044858 <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10044854:	230a      	movs	r3, #10
10044856:	e00f      	b.n	10044878 <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
10044858:	2308      	movs	r3, #8
1004485a:	18fb      	adds	r3, r7, r3
1004485c:	881c      	ldrh	r4, [r3, #0]
1004485e:	687a      	ldr	r2, [r7, #4]
10044860:	230a      	movs	r3, #10
10044862:	18fb      	adds	r3, r7, r3
10044864:	8819      	ldrh	r1, [r3, #0]
10044866:	68f8      	ldr	r0, [r7, #12]
10044868:	2300      	movs	r3, #0
1004486a:	9301      	str	r3, [sp, #4]
1004486c:	6a3b      	ldr	r3, [r7, #32]
1004486e:	9300      	str	r3, [sp, #0]
10044870:	0023      	movs	r3, r4
10044872:	f7ff f915 	bl	10043aa0 <ReadCurrentRecordNoLock>
10044876:	0003      	movs	r3, r0
}
10044878:	0018      	movs	r0, r3
1004487a:	46bd      	mov	sp, r7
1004487c:	b005      	add	sp, #20
1004487e:	bd90      	pop	{r4, r7, pc}
10044880:	200008d0 	.word	0x200008d0

10044884 <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
10044884:	b5f0      	push	{r4, r5, r6, r7, lr}
10044886:	46c6      	mov	lr, r8
10044888:	b500      	push	{lr}
1004488a:	b088      	sub	sp, #32
1004488c:	af02      	add	r7, sp, #8
1004488e:	60f8      	str	r0, [r7, #12]
10044890:	0008      	movs	r0, r1
10044892:	0011      	movs	r1, r2
10044894:	607b      	str	r3, [r7, #4]
10044896:	230b      	movs	r3, #11
10044898:	001c      	movs	r4, r3
1004489a:	18fb      	adds	r3, r7, r3
1004489c:	1c02      	adds	r2, r0, #0
1004489e:	701a      	strb	r2, [r3, #0]
100448a0:	2008      	movs	r0, #8
100448a2:	183b      	adds	r3, r7, r0
100448a4:	1c0a      	adds	r2, r1, #0
100448a6:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
100448a8:	2617      	movs	r6, #23
100448aa:	46b0      	mov	r8, r6
100448ac:	44b8      	add	r8, r7
100448ae:	687d      	ldr	r5, [r7, #4]
100448b0:	183b      	adds	r3, r7, r0
100448b2:	881a      	ldrh	r2, [r3, #0]
100448b4:	0023      	movs	r3, r4
100448b6:	18fb      	adds	r3, r7, r3
100448b8:	7819      	ldrb	r1, [r3, #0]
100448ba:	68f8      	ldr	r0, [r7, #12]
100448bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100448be:	9301      	str	r3, [sp, #4]
100448c0:	2328      	movs	r3, #40	@ 0x28
100448c2:	2408      	movs	r4, #8
100448c4:	191b      	adds	r3, r3, r4
100448c6:	19db      	adds	r3, r3, r7
100448c8:	881b      	ldrh	r3, [r3, #0]
100448ca:	9300      	str	r3, [sp, #0]
100448cc:	002b      	movs	r3, r5
100448ce:	f7ff fd19 	bl	10044304 <NVMDB_AppendRecordNoCache>
100448d2:	0003      	movs	r3, r0
100448d4:	4642      	mov	r2, r8
100448d6:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
100448d8:	19bb      	adds	r3, r7, r6
100448da:	781b      	ldrb	r3, [r3, #0]
100448dc:	2b00      	cmp	r3, #0
100448de:	d002      	beq.n	100448e6 <NVMDB_AppendRecord+0x62>
  {
    return status;
100448e0:	19bb      	adds	r3, r7, r6
100448e2:	781b      	ldrb	r3, [r3, #0]
100448e4:	e02c      	b.n	10044940 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
100448e6:	68fb      	ldr	r3, [r7, #12]
100448e8:	781b      	ldrb	r3, [r3, #0]
100448ea:	0019      	movs	r1, r3
100448ec:	4a17      	ldr	r2, [pc, #92]	@ (1004494c <NVMDB_AppendRecord+0xc8>)
100448ee:	000b      	movs	r3, r1
100448f0:	009b      	lsls	r3, r3, #2
100448f2:	185b      	adds	r3, r3, r1
100448f4:	009b      	lsls	r3, r3, #2
100448f6:	18d3      	adds	r3, r2, r3
100448f8:	330c      	adds	r3, #12
100448fa:	881a      	ldrh	r2, [r3, #0]
100448fc:	2308      	movs	r3, #8
100448fe:	0018      	movs	r0, r3
10044900:	18f9      	adds	r1, r7, r3
10044902:	2328      	movs	r3, #40	@ 0x28
10044904:	181b      	adds	r3, r3, r0
10044906:	19db      	adds	r3, r3, r7
10044908:	8809      	ldrh	r1, [r1, #0]
1004490a:	881b      	ldrh	r3, [r3, #0]
1004490c:	18cb      	adds	r3, r1, r3
1004490e:	b29b      	uxth	r3, r3
10044910:	3b01      	subs	r3, #1
10044912:	b29b      	uxth	r3, r3
10044914:	b21b      	sxth	r3, r3
10044916:	2103      	movs	r1, #3
10044918:	430b      	orrs	r3, r1
1004491a:	b21b      	sxth	r3, r3
1004491c:	b29b      	uxth	r3, r3
1004491e:	1ad3      	subs	r3, r2, r3
10044920:	b29b      	uxth	r3, r3
10044922:	68fa      	ldr	r2, [r7, #12]
10044924:	7812      	ldrb	r2, [r2, #0]
10044926:	0011      	movs	r1, r2
10044928:	3b05      	subs	r3, #5
1004492a:	b298      	uxth	r0, r3
1004492c:	4a07      	ldr	r2, [pc, #28]	@ (1004494c <NVMDB_AppendRecord+0xc8>)
1004492e:	000b      	movs	r3, r1
10044930:	009b      	lsls	r3, r3, #2
10044932:	185b      	adds	r3, r3, r1
10044934:	009b      	lsls	r3, r3, #2
10044936:	18d3      	adds	r3, r2, r3
10044938:	330c      	adds	r3, #12
1004493a:	1c02      	adds	r2, r0, #0
1004493c:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004493e:	2300      	movs	r3, #0
}
10044940:	0018      	movs	r0, r3
10044942:	46bd      	mov	sp, r7
10044944:	b006      	add	sp, #24
10044946:	bc80      	pop	{r7}
10044948:	46b8      	mov	r8, r7
1004494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004494c:	200008d0 	.word	0x200008d0

10044950 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
10044950:	b5b0      	push	{r4, r5, r7, lr}
10044952:	b084      	sub	sp, #16
10044954:	af00      	add	r7, sp, #0
10044956:	0002      	movs	r2, r0
10044958:	1dfb      	adds	r3, r7, #7
1004495a:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
1004495c:	250f      	movs	r5, #15
1004495e:	197c      	adds	r4, r7, r5
10044960:	2308      	movs	r3, #8
10044962:	18fa      	adds	r2, r7, r3
10044964:	1dfb      	adds	r3, r7, #7
10044966:	781b      	ldrb	r3, [r3, #0]
10044968:	0011      	movs	r1, r2
1004496a:	0018      	movs	r0, r3
1004496c:	f7ff fc5c 	bl	10044228 <GetDBType>
10044970:	0003      	movs	r3, r0
10044972:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
10044974:	197b      	adds	r3, r7, r5
10044976:	781b      	ldrb	r3, [r3, #0]
10044978:	2b02      	cmp	r3, #2
1004497a:	d106      	bne.n	1004498a <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
1004497c:	1dfb      	adds	r3, r7, #7
1004497e:	781b      	ldrb	r3, [r3, #0]
10044980:	0018      	movs	r0, r3
10044982:	f7ff fa69 	bl	10043e58 <CleanLargeDB>
10044986:	0003      	movs	r3, r0
10044988:	e00b      	b.n	100449a2 <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
1004498a:	230f      	movs	r3, #15
1004498c:	18fb      	adds	r3, r7, r3
1004498e:	781b      	ldrb	r3, [r3, #0]
10044990:	2b01      	cmp	r3, #1
10044992:	d105      	bne.n	100449a0 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
10044994:	68bb      	ldr	r3, [r7, #8]
10044996:	0018      	movs	r0, r3
10044998:	f7ff fb3c 	bl	10044014 <CleanPage>
1004499c:	0003      	movs	r3, r0
1004499e:	e000      	b.n	100449a2 <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
100449a0:	2301      	movs	r3, #1
}
100449a2:	0018      	movs	r0, r3
100449a4:	46bd      	mov	sp, r7
100449a6:	b004      	add	sp, #16
100449a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

100449ac <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
100449ac:	b590      	push	{r4, r7, lr}
100449ae:	b083      	sub	sp, #12
100449b0:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
100449b2:	1dfc      	adds	r4, r7, #7
100449b4:	f000 f816 	bl	100449e4 <NVMDB_CleanCheck>
100449b8:	0003      	movs	r3, r0
100449ba:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
100449bc:	1dfb      	adds	r3, r7, #7
100449be:	781b      	ldrb	r3, [r3, #0]
100449c0:	2b7f      	cmp	r3, #127	@ 0x7f
100449c2:	d808      	bhi.n	100449d6 <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
100449c4:	1dfb      	adds	r3, r7, #7
100449c6:	781b      	ldrb	r3, [r3, #0]
100449c8:	0018      	movs	r0, r3
100449ca:	f7ff ffc1 	bl	10044950 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
100449ce:	4b04      	ldr	r3, [pc, #16]	@ (100449e0 <NVMDB_Tick+0x34>)
100449d0:	0018      	movs	r0, r3
100449d2:	f00a f8c7 	bl	1004eb64 <puts>
  }
#endif

  return NVMDB_STATUS_OK;
100449d6:	2300      	movs	r3, #0
}
100449d8:	0018      	movs	r0, r3
100449da:	46bd      	mov	sp, r7
100449dc:	b003      	add	sp, #12
100449de:	bd90      	pop	{r4, r7, pc}
100449e0:	1004fcc0 	.word	0x1004fcc0

100449e4 <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
100449e4:	b580      	push	{r7, lr}
100449e6:	b082      	sub	sp, #8
100449e8:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
100449ea:	4b2b      	ldr	r3, [pc, #172]	@ (10044a98 <NVMDB_CleanCheck+0xb4>)
100449ec:	2200      	movs	r2, #0
100449ee:	569a      	ldrsb	r2, [r3, r2]
100449f0:	1dfb      	adds	r3, r7, #7
100449f2:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
100449f4:	1dfb      	adds	r3, r7, #7
100449f6:	781a      	ldrb	r2, [r3, #0]
100449f8:	4928      	ldr	r1, [pc, #160]	@ (10044a9c <NVMDB_CleanCheck+0xb8>)
100449fa:	0013      	movs	r3, r2
100449fc:	009b      	lsls	r3, r3, #2
100449fe:	189b      	adds	r3, r3, r2
10044a00:	009b      	lsls	r3, r3, #2
10044a02:	18cb      	adds	r3, r1, r3
10044a04:	330a      	adds	r3, #10
10044a06:	881b      	ldrh	r3, [r3, #0]
10044a08:	2b00      	cmp	r3, #0
10044a0a:	d028      	beq.n	10044a5e <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
10044a0c:	1dfb      	adds	r3, r7, #7
10044a0e:	781a      	ldrb	r2, [r3, #0]
10044a10:	4922      	ldr	r1, [pc, #136]	@ (10044a9c <NVMDB_CleanCheck+0xb8>)
10044a12:	0013      	movs	r3, r2
10044a14:	009b      	lsls	r3, r3, #2
10044a16:	189b      	adds	r3, r3, r2
10044a18:	009b      	lsls	r3, r3, #2
10044a1a:	18cb      	adds	r3, r1, r3
10044a1c:	330c      	adds	r3, #12
10044a1e:	8819      	ldrh	r1, [r3, #0]
10044a20:	1dfb      	adds	r3, r7, #7
10044a22:	781a      	ldrb	r2, [r3, #0]
10044a24:	481d      	ldr	r0, [pc, #116]	@ (10044a9c <NVMDB_CleanCheck+0xb8>)
10044a26:	0013      	movs	r3, r2
10044a28:	009b      	lsls	r3, r3, #2
10044a2a:	189b      	adds	r3, r3, r2
10044a2c:	009b      	lsls	r3, r3, #2
10044a2e:	18c3      	adds	r3, r0, r3
10044a30:	3310      	adds	r3, #16
10044a32:	881b      	ldrh	r3, [r3, #0]
10044a34:	4299      	cmp	r1, r3
10044a36:	d212      	bcs.n	10044a5e <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
10044a38:	1dfb      	adds	r3, r7, #7
10044a3a:	781b      	ldrb	r3, [r3, #0]
10044a3c:	3301      	adds	r3, #1
10044a3e:	b2db      	uxtb	r3, r3
10044a40:	b25a      	sxtb	r2, r3
10044a42:	4b15      	ldr	r3, [pc, #84]	@ (10044a98 <NVMDB_CleanCheck+0xb4>)
10044a44:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
10044a46:	4b14      	ldr	r3, [pc, #80]	@ (10044a98 <NVMDB_CleanCheck+0xb4>)
10044a48:	781b      	ldrb	r3, [r3, #0]
10044a4a:	b25b      	sxtb	r3, r3
10044a4c:	2b02      	cmp	r3, #2
10044a4e:	d102      	bne.n	10044a56 <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
10044a50:	4b11      	ldr	r3, [pc, #68]	@ (10044a98 <NVMDB_CleanCheck+0xb4>)
10044a52:	2200      	movs	r2, #0
10044a54:	701a      	strb	r2, [r3, #0]
        }
        return i;
10044a56:	1dfb      	adds	r3, r7, #7
10044a58:	781b      	ldrb	r3, [r3, #0]
10044a5a:	b25b      	sxtb	r3, r3
10044a5c:	e017      	b.n	10044a8e <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
10044a5e:	1dfb      	adds	r3, r7, #7
10044a60:	781a      	ldrb	r2, [r3, #0]
10044a62:	1dfb      	adds	r3, r7, #7
10044a64:	3201      	adds	r2, #1
10044a66:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
10044a68:	1dfb      	adds	r3, r7, #7
10044a6a:	781b      	ldrb	r3, [r3, #0]
10044a6c:	2b02      	cmp	r3, #2
10044a6e:	d102      	bne.n	10044a76 <NVMDB_CleanCheck+0x92>
    {
      i = 0;
10044a70:	1dfb      	adds	r3, r7, #7
10044a72:	2200      	movs	r2, #0
10044a74:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
10044a76:	1dfb      	adds	r3, r7, #7
10044a78:	781b      	ldrb	r3, [r3, #0]
10044a7a:	4a07      	ldr	r2, [pc, #28]	@ (10044a98 <NVMDB_CleanCheck+0xb4>)
10044a7c:	7812      	ldrb	r2, [r2, #0]
10044a7e:	b252      	sxtb	r2, r2
10044a80:	4293      	cmp	r3, r2
10044a82:	d1b7      	bne.n	100449f4 <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
10044a84:	4b04      	ldr	r3, [pc, #16]	@ (10044a98 <NVMDB_CleanCheck+0xb4>)
10044a86:	2200      	movs	r2, #0
10044a88:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
10044a8a:	2301      	movs	r3, #1
10044a8c:	425b      	negs	r3, r3
}
10044a8e:	0018      	movs	r0, r3
10044a90:	46bd      	mov	sp, r7
10044a92:	b002      	add	sp, #8
10044a94:	bd80      	pop	{r7, pc}
10044a96:	46c0      	nop			@ (mov r8, r8)
10044a98:	200008f8 	.word	0x200008f8
10044a9c:	200008d0 	.word	0x200008d0

10044aa0 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
10044aa0:	b580      	push	{r7, lr}
10044aa2:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
10044aa4:	4b03      	ldr	r3, [pc, #12]	@ (10044ab4 <PKAMGR_Init+0x14>)
10044aa6:	2201      	movs	r2, #1
10044aa8:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
10044aaa:	2300      	movs	r3, #0
}
10044aac:	0018      	movs	r0, r3
10044aae:	46bd      	mov	sp, r7
10044ab0:	bd80      	pop	{r7, pc}
10044ab2:	46c0      	nop			@ (mov r8, r8)
10044ab4:	20000d08 	.word	0x20000d08

10044ab8 <PKAMGR_SleepCheck>:

  return PKAMGR_SUCCESS;
}

PKAMGR_ResultStatus PKAMGR_SleepCheck(void)
{
10044ab8:	b580      	push	{r7, lr}
10044aba:	b082      	sub	sp, #8
10044abc:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_ERR_BUSY;
10044abe:	1dfb      	adds	r3, r7, #7
10044ac0:	22fe      	movs	r2, #254	@ 0xfe
10044ac2:	701a      	strb	r2, [r3, #0]

  if(internalState == PKAMGR_STATE_IDLE)
10044ac4:	4b06      	ldr	r3, [pc, #24]	@ (10044ae0 <PKAMGR_SleepCheck+0x28>)
10044ac6:	681b      	ldr	r3, [r3, #0]
10044ac8:	2b01      	cmp	r3, #1
10044aca:	d102      	bne.n	10044ad2 <PKAMGR_SleepCheck+0x1a>
    return_value = PKAMGR_SUCCESS;
10044acc:	1dfb      	adds	r3, r7, #7
10044ace:	2200      	movs	r2, #0
10044ad0:	701a      	strb	r2, [r3, #0]

  return return_value;
10044ad2:	1dfb      	adds	r3, r7, #7
10044ad4:	781b      	ldrb	r3, [r3, #0]
10044ad6:	b25b      	sxtb	r3, r3
}
10044ad8:	0018      	movs	r0, r3
10044ada:	46bd      	mov	sp, r7
10044adc:	b002      	add	sp, #8
10044ade:	bd80      	pop	{r7, pc}
10044ae0:	20000d08 	.word	0x20000d08

10044ae4 <PKAMGR_Unlock>:

  return return_value;
}

PKAMGR_ResultStatus PKAMGR_Unlock()
{
10044ae4:	b580      	push	{r7, lr}
10044ae6:	b084      	sub	sp, #16
10044ae8:	af00      	add	r7, sp, #0
  PKAMGR_ResultStatus return_value = PKAMGR_SUCCESS;
10044aea:	210f      	movs	r1, #15
10044aec:	187b      	adds	r3, r7, r1
10044aee:	2200      	movs	r2, #0
10044af0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10044af2:	f3ef 8310 	mrs	r3, PRIMASK
10044af6:	607b      	str	r3, [r7, #4]
  return(result);
10044af8:	687b      	ldr	r3, [r7, #4]

  /* Only one consumer (Application layer or Stack) can use the PKA at the time */
  ATOMIC_SECTION_BEGIN();
10044afa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
10044afc:	b672      	cpsid	i
}
10044afe:	46c0      	nop			@ (mov r8, r8)
  if(internalState != PKAMGR_STATE_BUSY)
10044b00:	4b0c      	ldr	r3, [pc, #48]	@ (10044b34 <PKAMGR_Unlock+0x50>)
10044b02:	681b      	ldr	r3, [r3, #0]
10044b04:	2b03      	cmp	r3, #3
10044b06:	d003      	beq.n	10044b10 <PKAMGR_Unlock+0x2c>
  {
    return_value = PKAMGR_ERR_BUSY;
10044b08:	187b      	adds	r3, r7, r1
10044b0a:	22fe      	movs	r2, #254	@ 0xfe
10044b0c:	701a      	strb	r2, [r3, #0]
10044b0e:	e002      	b.n	10044b16 <PKAMGR_Unlock+0x32>
  }
  else
  {
    /* Unlock mechanism to access concurrently at the PKA resource */
    internalState = PKAMGR_STATE_IDLE;
10044b10:	4b08      	ldr	r3, [pc, #32]	@ (10044b34 <PKAMGR_Unlock+0x50>)
10044b12:	2201      	movs	r2, #1
10044b14:	601a      	str	r2, [r3, #0]
10044b16:	68bb      	ldr	r3, [r7, #8]
10044b18:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10044b1a:	683b      	ldr	r3, [r7, #0]
10044b1c:	f383 8810 	msr	PRIMASK, r3
}
10044b20:	46c0      	nop			@ (mov r8, r8)
  }
  ATOMIC_SECTION_END();

  return return_value;
10044b22:	230f      	movs	r3, #15
10044b24:	18fb      	adds	r3, r7, r3
10044b26:	781b      	ldrb	r3, [r3, #0]
10044b28:	b25b      	sxtb	r3, r3
}
10044b2a:	0018      	movs	r0, r3
10044b2c:	46bd      	mov	sp, r7
10044b2e:	b004      	add	sp, #16
10044b30:	bd80      	pop	{r7, pc}
10044b32:	46c0      	nop			@ (mov r8, r8)
10044b34:	20000d08 	.word	0x20000d08

10044b38 <PKAMGR_IRQCallback>:
{
  return HW_PKA_StartP256DHkeyGeneration(privateKey, (uint32_t *)&PKAStartPoint[0], funcCB);
}

__weak void PKAMGR_IRQCallback(void)
{
10044b38:	b580      	push	{r7, lr}
10044b3a:	af00      	add	r7, sp, #0
}
10044b3c:	46c0      	nop			@ (mov r8, r8)
10044b3e:	46bd      	mov	sp, r7
10044b40:	bd80      	pop	{r7, pc}

10044b42 <aci_gatt_srv_profile_init>:

#else /* (CFG_BLE_CONNECTION_ENABLED == 0) */

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
10044b42:	b580      	push	{r7, lr}
10044b44:	b082      	sub	sp, #8
10044b46:	af00      	add	r7, sp, #0
10044b48:	0002      	movs	r2, r0
10044b4a:	6039      	str	r1, [r7, #0]
10044b4c:	1dfb      	adds	r3, r7, #7
10044b4e:	701a      	strb	r2, [r3, #0]
  return BLE_ERROR_UNSUPPORTED_FEATURE;
10044b50:	2311      	movs	r3, #17
}
10044b52:	0018      	movs	r0, r3
10044b54:	46bd      	mov	sp, r7
10044b56:	b002      	add	sp, #8
10044b58:	bd80      	pop	{r7, pc}
	...

10044b5c <LL_PWR_IsSMPSReady>:
{
10044b5c:	b580      	push	{r7, lr}
10044b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
10044b60:	4b05      	ldr	r3, [pc, #20]	@ (10044b78 <LL_PWR_IsSMPSReady+0x1c>)
10044b62:	695b      	ldr	r3, [r3, #20]
10044b64:	2204      	movs	r2, #4
10044b66:	4013      	ands	r3, r2
10044b68:	2b04      	cmp	r3, #4
10044b6a:	d101      	bne.n	10044b70 <LL_PWR_IsSMPSReady+0x14>
10044b6c:	2301      	movs	r3, #1
10044b6e:	e000      	b.n	10044b72 <LL_PWR_IsSMPSReady+0x16>
10044b70:	2300      	movs	r3, #0
}
10044b72:	0018      	movs	r0, r3
10044b74:	46bd      	mov	sp, r7
10044b76:	bd80      	pop	{r7, pc}
10044b78:	48500000 	.word	0x48500000

10044b7c <LL_PWR_GetSMPSMode>:
{
10044b7c:	b580      	push	{r7, lr}
10044b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
10044b80:	4b03      	ldr	r3, [pc, #12]	@ (10044b90 <LL_PWR_GetSMPSMode+0x14>)
10044b82:	69da      	ldr	r2, [r3, #28]
10044b84:	2380      	movs	r3, #128	@ 0x80
10044b86:	00db      	lsls	r3, r3, #3
10044b88:	4013      	ands	r3, r2
}
10044b8a:	0018      	movs	r0, r3
10044b8c:	46bd      	mov	sp, r7
10044b8e:	bd80      	pop	{r7, pc}
10044b90:	48500000 	.word	0x48500000

10044b94 <LL_PWR_SetSMPSPrechargeMode>:
{
10044b94:	b580      	push	{r7, lr}
10044b96:	b082      	sub	sp, #8
10044b98:	af00      	add	r7, sp, #0
10044b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
10044b9c:	4b06      	ldr	r3, [pc, #24]	@ (10044bb8 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10044b9e:	69db      	ldr	r3, [r3, #28]
10044ba0:	4a06      	ldr	r2, [pc, #24]	@ (10044bbc <LL_PWR_SetSMPSPrechargeMode+0x28>)
10044ba2:	4013      	ands	r3, r2
10044ba4:	0019      	movs	r1, r3
10044ba6:	4b04      	ldr	r3, [pc, #16]	@ (10044bb8 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10044ba8:	687a      	ldr	r2, [r7, #4]
10044baa:	430a      	orrs	r2, r1
10044bac:	61da      	str	r2, [r3, #28]
}
10044bae:	46c0      	nop			@ (mov r8, r8)
10044bb0:	46bd      	mov	sp, r7
10044bb2:	b002      	add	sp, #8
10044bb4:	bd80      	pop	{r7, pc}
10044bb6:	46c0      	nop			@ (mov r8, r8)
10044bb8:	48500000 	.word	0x48500000
10044bbc:	fffffdff 	.word	0xfffffdff

10044bc0 <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
10044bc0:	b580      	push	{r7, lr}
10044bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
10044bc4:	4b07      	ldr	r3, [pc, #28]	@ (10044be4 <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
10044bc6:	69da      	ldr	r2, [r3, #28]
10044bc8:	2380      	movs	r3, #128	@ 0x80
10044bca:	009b      	lsls	r3, r3, #2
10044bcc:	401a      	ands	r2, r3
10044bce:	2380      	movs	r3, #128	@ 0x80
10044bd0:	009b      	lsls	r3, r3, #2
10044bd2:	429a      	cmp	r2, r3
10044bd4:	d101      	bne.n	10044bda <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
10044bd6:	2301      	movs	r3, #1
10044bd8:	e000      	b.n	10044bdc <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
10044bda:	2300      	movs	r3, #0
}
10044bdc:	0018      	movs	r0, r3
10044bde:	46bd      	mov	sp, r7
10044be0:	bd80      	pop	{r7, pc}
10044be2:	46c0      	nop			@ (mov r8, r8)
10044be4:	48500000 	.word	0x48500000

10044be8 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
10044be8:	b580      	push	{r7, lr}
10044bea:	b082      	sub	sp, #8
10044bec:	af00      	add	r7, sp, #0
10044bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
10044bf0:	4b06      	ldr	r3, [pc, #24]	@ (10044c0c <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
10044bf2:	69db      	ldr	r3, [r3, #28]
10044bf4:	220f      	movs	r2, #15
10044bf6:	4393      	bics	r3, r2
10044bf8:	0019      	movs	r1, r3
10044bfa:	4b04      	ldr	r3, [pc, #16]	@ (10044c0c <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
10044bfc:	687a      	ldr	r2, [r7, #4]
10044bfe:	430a      	orrs	r2, r1
10044c00:	61da      	str	r2, [r3, #28]
}
10044c02:	46c0      	nop			@ (mov r8, r8)
10044c04:	46bd      	mov	sp, r7
10044c06:	b002      	add	sp, #8
10044c08:	bd80      	pop	{r7, pc}
10044c0a:	46c0      	nop			@ (mov r8, r8)
10044c0c:	48500000 	.word	0x48500000

10044c10 <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
10044c10:	b580      	push	{r7, lr}
10044c12:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
10044c14:	2320      	movs	r3, #32
}
10044c16:	0018      	movs	r0, r3
10044c18:	46bd      	mov	sp, r7
10044c1a:	bd80      	pop	{r7, pc}

10044c1c <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
10044c1c:	b580      	push	{r7, lr}
10044c1e:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
10044c20:	231f      	movs	r3, #31
}
10044c22:	0018      	movs	r0, r3
10044c24:	46bd      	mov	sp, r7
10044c26:	bd80      	pop	{r7, pc}

10044c28 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
10044c28:	b580      	push	{r7, lr}
10044c2a:	b082      	sub	sp, #8
10044c2c:	af00      	add	r7, sp, #0
10044c2e:	0002      	movs	r2, r0
10044c30:	1dfb      	adds	r3, r7, #7
10044c32:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
10044c34:	1dfb      	adds	r3, r7, #7
10044c36:	781b      	ldrb	r3, [r3, #0]
10044c38:	2b00      	cmp	r3, #0
10044c3a:	d007      	beq.n	10044c4c <RADIO_SetHighPower+0x24>
  {
    if(high_power == FALSE)
10044c3c:	4b1d      	ldr	r3, [pc, #116]	@ (10044cb4 <RADIO_SetHighPower+0x8c>)
10044c3e:	781b      	ldrb	r3, [r3, #0]
10044c40:	2b00      	cmp	r3, #0
10044c42:	d10a      	bne.n	10044c5a <RADIO_SetHighPower+0x32>
    {
      high_power = TRUE;
10044c44:	4b1b      	ldr	r3, [pc, #108]	@ (10044cb4 <RADIO_SetHighPower+0x8c>)
10044c46:	2201      	movs	r2, #1
10044c48:	701a      	strb	r2, [r3, #0]
10044c4a:	e006      	b.n	10044c5a <RADIO_SetHighPower+0x32>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
10044c4c:	4b19      	ldr	r3, [pc, #100]	@ (10044cb4 <RADIO_SetHighPower+0x8c>)
10044c4e:	781b      	ldrb	r3, [r3, #0]
10044c50:	2b01      	cmp	r3, #1
10044c52:	d102      	bne.n	10044c5a <RADIO_SetHighPower+0x32>
    {
      high_power = FALSE;
10044c54:	4b17      	ldr	r3, [pc, #92]	@ (10044cb4 <RADIO_SetHighPower+0x8c>)
10044c56:	2200      	movs	r2, #0
10044c58:	701a      	strb	r2, [r3, #0]
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
10044c5a:	f7ff ffb1 	bl	10044bc0 <LL_PWR_IsEnabledSMPSPrechargeMode>
10044c5e:	1e03      	subs	r3, r0, #0
10044c60:	d124      	bne.n	10044cac <RADIO_SetHighPower+0x84>
10044c62:	f7ff ff8b 	bl	10044b7c <LL_PWR_GetSMPSMode>
10044c66:	0002      	movs	r2, r0
10044c68:	2380      	movs	r3, #128	@ 0x80
10044c6a:	00db      	lsls	r3, r3, #3
10044c6c:	429a      	cmp	r2, r3
10044c6e:	d01d      	beq.n	10044cac <RADIO_SetHighPower+0x84>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
10044c70:	2380      	movs	r3, #128	@ 0x80
10044c72:	009b      	lsls	r3, r3, #2
10044c74:	0018      	movs	r0, r3
10044c76:	f7ff ff8d 	bl	10044b94 <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
10044c7a:	46c0      	nop			@ (mov r8, r8)
10044c7c:	f7ff ff6e 	bl	10044b5c <LL_PWR_IsSMPSReady>
10044c80:	1e03      	subs	r3, r0, #0
10044c82:	d1fb      	bne.n	10044c7c <RADIO_SetHighPower+0x54>
  /* Change level */
  if(state != DISABLE)
10044c84:	1dfb      	adds	r3, r7, #7
10044c86:	781b      	ldrb	r3, [r3, #0]
10044c88:	2b00      	cmp	r3, #0
10044c8a:	d003      	beq.n	10044c94 <RADIO_SetHighPower+0x6c>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
10044c8c:	200e      	movs	r0, #14
10044c8e:	f7ff ffab 	bl	10044be8 <LL_PWR_SMPS_SetOutputVoltageLevel>
10044c92:	e002      	b.n	10044c9a <RADIO_SetHighPower+0x72>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
10044c94:	2004      	movs	r0, #4
10044c96:	f7ff ffa7 	bl	10044be8 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
10044c9a:	2000      	movs	r0, #0
10044c9c:	f7ff ff7a 	bl	10044b94 <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
10044ca0:	46c0      	nop			@ (mov r8, r8)
10044ca2:	f7ff ff5b 	bl	10044b5c <LL_PWR_IsSMPSReady>
10044ca6:	1e03      	subs	r3, r0, #0
10044ca8:	d0fb      	beq.n	10044ca2 <RADIO_SetHighPower+0x7a>
10044caa:	e000      	b.n	10044cae <RADIO_SetHighPower+0x86>
    return;
10044cac:	46c0      	nop			@ (mov r8, r8)
}
10044cae:	46bd      	mov	sp, r7
10044cb0:	b002      	add	sp, #8
10044cb2:	bd80      	pop	{r7, pc}
10044cb4:	20000900 	.word	0x20000900

10044cb8 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
10044cb8:	b580      	push	{r7, lr}
10044cba:	af00      	add	r7, sp, #0
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
  }
#endif
}
10044cbc:	46c0      	nop			@ (mov r8, r8)
10044cbe:	46bd      	mov	sp, r7
10044cc0:	bd80      	pop	{r7, pc}

10044cc2 <SYSTEM_DEBUG_SIGNAL_SET>:
/***********************/
/** System debug APIs **/
/***********************/

void SYSTEM_DEBUG_SIGNAL_SET(system_debug_signal_t signal)
{
10044cc2:	b580      	push	{r7, lr}
10044cc4:	b082      	sub	sp, #8
10044cc6:	af00      	add	r7, sp, #0
10044cc8:	0002      	movs	r2, r0
10044cca:	1dfb      	adds	r3, r7, #7
10044ccc:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, system_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10044cce:	46c0      	nop			@ (mov r8, r8)
10044cd0:	46bd      	mov	sp, r7
10044cd2:	b002      	add	sp, #8
10044cd4:	bd80      	pop	{r7, pc}

10044cd6 <SYSTEM_DEBUG_SIGNAL_RESET>:

void SYSTEM_DEBUG_SIGNAL_RESET(system_debug_signal_t signal)
{
10044cd6:	b580      	push	{r7, lr}
10044cd8:	b082      	sub	sp, #8
10044cda:	af00      	add	r7, sp, #0
10044cdc:	0002      	movs	r2, r0
10044cde:	1dfb      	adds	r3, r7, #7
10044ce0:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, system_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10044ce2:	46c0      	nop			@ (mov r8, r8)
10044ce4:	46bd      	mov	sp, r7
10044ce6:	b002      	add	sp, #8
10044ce8:	bd80      	pop	{r7, pc}

10044cea <LL_SYSCFG_GetDeviceRevision>:
  * @brief  Get the device cut revision (metal fix) information.
  * @rmtoll DIE_ID REVISION   LL_SYSCFG_GetDeviceRevision
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceRevision(void)
{
10044cea:	b580      	push	{r7, lr}
10044cec:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
10044cee:	2380      	movs	r3, #128	@ 0x80
10044cf0:	05db      	lsls	r3, r3, #23
10044cf2:	681b      	ldr	r3, [r3, #0]
10044cf4:	220f      	movs	r2, #15
10044cf6:	4013      	ands	r3, r2
}
10044cf8:	0018      	movs	r0, r3
10044cfa:	46bd      	mov	sp, r7
10044cfc:	bd80      	pop	{r7, pc}

10044cfe <LL_SYSCFG_GetDeviceVersion>:
  * @brief  Get the device cut version information.
  * @rmtoll DIE_ID VERSION   LL_SYSCFG_GetDeviceVersion
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceVersion(void)
{
10044cfe:	b580      	push	{r7, lr}
10044d00:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
10044d02:	2380      	movs	r3, #128	@ 0x80
10044d04:	05db      	lsls	r3, r3, #23
10044d06:	681b      	ldr	r3, [r3, #0]
10044d08:	091b      	lsrs	r3, r3, #4
10044d0a:	220f      	movs	r2, #15
10044d0c:	4013      	ands	r3, r2
}
10044d0e:	0018      	movs	r0, r3
10044d10:	46bd      	mov	sp, r7
10044d12:	bd80      	pop	{r7, pc}

10044d14 <LL_SYSCFG_GetDeviceJTAG_ID>:
  * @brief  Get the JTAG_ID device information.
  * @rmtoll JTAG_ID    LL_SYSCFG_GetDeviceJTAG_ID
  * @retval Device ID
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetDeviceJTAG_ID(void)
{
10044d14:	b580      	push	{r7, lr}
10044d16:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
10044d18:	2380      	movs	r3, #128	@ 0x80
10044d1a:	05db      	lsls	r3, r3, #23
10044d1c:	685b      	ldr	r3, [r3, #4]
}
10044d1e:	0018      	movs	r0, r3
10044d20:	46bd      	mov	sp, r7
10044d22:	bd80      	pop	{r7, pc}

10044d24 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
10044d24:	b580      	push	{r7, lr}
10044d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
10044d28:	4b03      	ldr	r3, [pc, #12]	@ (10044d38 <LL_GetFlashSize+0x14>)
10044d2a:	681b      	ldr	r3, [r3, #0]
10044d2c:	041b      	lsls	r3, r3, #16
10044d2e:	0c1b      	lsrs	r3, r3, #16
}
10044d30:	0018      	movs	r0, r3
10044d32:	46bd      	mov	sp, r7
10044d34:	bd80      	pop	{r7, pc}
10044d36:	46c0      	nop			@ (mov r8, r8)
10044d38:	40001014 	.word	0x40001014

10044d3c <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
10044d3c:	b580      	push	{r7, lr}
10044d3e:	b082      	sub	sp, #8
10044d40:	af00      	add	r7, sp, #0
    __IOM uint32_t tmpreg;
#if defined(FLASH_FLASH_SIZE_RAM_SIZE)
    tmpreg = (READ_REG(*((uint32_t *)RAMSIZE_BASE_ADDRESS)) & FLASH_FLASH_SIZE_RAM_SIZE) >> FLASH_FLASH_SIZE_RAM_SIZE_Pos;
10044d42:	4b08      	ldr	r3, [pc, #32]	@ (10044d64 <LL_GetRAMSize+0x28>)
10044d44:	681b      	ldr	r3, [r3, #0]
10044d46:	0c5b      	lsrs	r3, r3, #17
10044d48:	2203      	movs	r2, #3
10044d4a:	4013      	ands	r3, r2
10044d4c:	607b      	str	r3, [r7, #4]

    if (tmpreg == 0) {
10044d4e:	687b      	ldr	r3, [r7, #4]
10044d50:	2b00      	cmp	r3, #0
10044d52:	d101      	bne.n	10044d58 <LL_GetRAMSize+0x1c>
      tmpreg = LL_UTILS_RAMSIZE_32K;
10044d54:	2301      	movs	r3, #1
10044d56:	607b      	str	r3, [r7, #4]
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
#endif
    
    return tmpreg;
10044d58:	687b      	ldr	r3, [r7, #4]
  }
10044d5a:	0018      	movs	r0, r3
10044d5c:	46bd      	mov	sp, r7
10044d5e:	b002      	add	sp, #8
10044d60:	bd80      	pop	{r7, pc}
10044d62:	46c0      	nop			@ (mov r8, r8)
10044d64:	40001014 	.word	0x40001014

10044d68 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
10044d68:	b580      	push	{r7, lr}
10044d6a:	b084      	sub	sp, #16
10044d6c:	af00      	add	r7, sp, #0
10044d6e:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
10044d70:	687b      	ldr	r3, [r7, #4]
10044d72:	22ff      	movs	r2, #255	@ 0xff
10044d74:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
10044d76:	f7ff ffcd 	bl	10044d14 <LL_SYSCFG_GetDeviceJTAG_ID>
10044d7a:	0003      	movs	r3, r0
10044d7c:	60fb      	str	r3, [r7, #12]

#if defined(STM32WB09)
  if(jtag_id == JTAG_ID_CODE_STM32WB09XX)
10044d7e:	68fb      	ldr	r3, [r7, #12]
10044d80:	4a18      	ldr	r2, [pc, #96]	@ (10044de4 <GetPartInfo+0x7c>)
10044d82:	4293      	cmp	r3, r2
10044d84:	d102      	bne.n	10044d8c <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB09XX;
10044d86:	687b      	ldr	r3, [r7, #4]
10044d88:	2206      	movs	r2, #6
10044d8a:	701a      	strb	r2, [r3, #0]
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
10044d8c:	f7ff ffb7 	bl	10044cfe <LL_SYSCFG_GetDeviceVersion>
10044d90:	0003      	movs	r3, r0
10044d92:	b2da      	uxtb	r2, r3
10044d94:	687b      	ldr	r3, [r7, #4]
10044d96:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
10044d98:	f7ff ffa7 	bl	10044cea <LL_SYSCFG_GetDeviceRevision>
10044d9c:	0003      	movs	r3, r0
10044d9e:	b2da      	uxtb	r2, r3
10044da0:	687b      	ldr	r3, [r7, #4]
10044da2:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
10044da4:	f7ff ffb6 	bl	10044d14 <LL_SYSCFG_GetDeviceJTAG_ID>
10044da8:	0002      	movs	r2, r0
10044daa:	687b      	ldr	r3, [r7, #4]
10044dac:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
10044dae:	f7ff ffb9 	bl	10044d24 <LL_GetFlashSize>
10044db2:	0003      	movs	r3, r0
10044db4:	3301      	adds	r3, #1
10044db6:	009a      	lsls	r2, r3, #2
10044db8:	687b      	ldr	r3, [r7, #4]
10044dba:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
10044dbc:	f7ff ffbe 	bl	10044d3c <LL_GetRAMSize>
10044dc0:	1e03      	subs	r3, r0, #0
10044dc2:	d007      	beq.n	10044dd4 <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
10044dc4:	f7ff ffba 	bl	10044d3c <LL_GetRAMSize>
10044dc8:	0003      	movs	r3, r0
10044dca:	3301      	adds	r3, #1
10044dcc:	039a      	lsls	r2, r3, #14
10044dce:	687b      	ldr	r3, [r7, #4]
10044dd0:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
10044dd2:	e003      	b.n	10044ddc <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
10044dd4:	687b      	ldr	r3, [r7, #4]
10044dd6:	22c0      	movs	r2, #192	@ 0xc0
10044dd8:	01d2      	lsls	r2, r2, #7
10044dda:	60da      	str	r2, [r3, #12]
}
10044ddc:	46c0      	nop			@ (mov r8, r8)
10044dde:	46bd      	mov	sp, r7
10044de0:	b004      	add	sp, #16
10044de2:	bd80      	pop	{r7, pc}
10044de4:	02032041 	.word	0x02032041

10044de8 <Osal_MemCpy4>:
 * A version of the memcpy that only uses 32-bit accesses.
 * dest and src must be 32-bit aligned and size must be a multiple of 4.
 */
void Osal_MemCpy4(uint32_t *dest, const uint32_t *src, unsigned int size)
{
    for (unsigned int i = 0; i < size/4; i++)
10044de8:	2300      	movs	r3, #0
{
10044dea:	b510      	push	{r4, lr}
    for (unsigned int i = 0; i < size/4; i++)
10044dec:	0892      	lsrs	r2, r2, #2
10044dee:	0092      	lsls	r2, r2, #2
10044df0:	4293      	cmp	r3, r2
10044df2:	d100      	bne.n	10044df6 <Osal_MemCpy4+0xe>
        dest[i] = src[i];
}
10044df4:	bd10      	pop	{r4, pc}
        dest[i] = src[i];
10044df6:	58cc      	ldr	r4, [r1, r3]
10044df8:	50c4      	str	r4, [r0, r3]
    for (unsigned int i = 0; i < size/4; i++)
10044dfa:	3304      	adds	r3, #4
10044dfc:	e7f8      	b.n	10044df0 <Osal_MemCpy4+0x8>
	...

10044e00 <LL_RCC_GetLPUARTClockSource>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10044e00:	4b02      	ldr	r3, [pc, #8]	@ (10044e0c <LL_RCC_GetLPUARTClockSource+0xc>)
10044e02:	6898      	ldr	r0, [r3, #8]
10044e04:	2380      	movs	r3, #128	@ 0x80
10044e06:	019b      	lsls	r3, r3, #6
10044e08:	4018      	ands	r0, r3
}
10044e0a:	4770      	bx	lr
10044e0c:	48400000 	.word	0x48400000

10044e10 <LL_AHB1_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->AHBENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10044e10:	4b03      	ldr	r3, [pc, #12]	@ (10044e20 <LL_AHB1_GRP1_IsEnabledClock+0x10>)
10044e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10044e14:	4003      	ands	r3, r0
10044e16:	1a18      	subs	r0, r3, r0
10044e18:	4243      	negs	r3, r0
10044e1a:	4158      	adcs	r0, r3
}
10044e1c:	4770      	bx	lr
10044e1e:	46c0      	nop			@ (mov r8, r8)
10044e20:	48400000 	.word	0x48400000

10044e24 <LL_APB0_GRP1_EnableClock>:
  SET_BIT(RCC->APB0ENR, Periphs);
10044e24:	4b05      	ldr	r3, [pc, #20]	@ (10044e3c <LL_APB0_GRP1_EnableClock+0x18>)
{
10044e26:	b082      	sub	sp, #8
  SET_BIT(RCC->APB0ENR, Periphs);
10044e28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
10044e2a:	4302      	orrs	r2, r0
10044e2c:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10044e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10044e30:	4018      	ands	r0, r3
10044e32:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
10044e34:	9b01      	ldr	r3, [sp, #4]
}
10044e36:	b002      	add	sp, #8
10044e38:	4770      	bx	lr
10044e3a:	46c0      	nop			@ (mov r8, r8)
10044e3c:	48400000 	.word	0x48400000

10044e40 <LL_APB0_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB0ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10044e40:	4b03      	ldr	r3, [pc, #12]	@ (10044e50 <LL_APB0_GRP1_IsEnabledClock+0x10>)
10044e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10044e44:	4003      	ands	r3, r0
10044e46:	1a18      	subs	r0, r3, r0
10044e48:	4243      	negs	r3, r0
10044e4a:	4158      	adcs	r0, r3
}
10044e4c:	4770      	bx	lr
10044e4e:	46c0      	nop			@ (mov r8, r8)
10044e50:	48400000 	.word	0x48400000

10044e54 <LL_APB0_GRP1_DisableClock>:
  CLEAR_BIT(RCC->APB0ENR, Periphs);
10044e54:	4a02      	ldr	r2, [pc, #8]	@ (10044e60 <LL_APB0_GRP1_DisableClock+0xc>)
10044e56:	6d53      	ldr	r3, [r2, #84]	@ 0x54
10044e58:	4383      	bics	r3, r0
10044e5a:	6553      	str	r3, [r2, #84]	@ 0x54
}
10044e5c:	4770      	bx	lr
10044e5e:	46c0      	nop			@ (mov r8, r8)
10044e60:	48400000 	.word	0x48400000

10044e64 <LL_APB1_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB1ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10044e64:	4b03      	ldr	r3, [pc, #12]	@ (10044e74 <LL_APB1_GRP1_IsEnabledClock+0x10>)
10044e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10044e68:	4003      	ands	r3, r0
10044e6a:	1a18      	subs	r0, r3, r0
10044e6c:	4243      	negs	r3, r0
10044e6e:	4158      	adcs	r0, r3
}
10044e70:	4770      	bx	lr
10044e72:	46c0      	nop			@ (mov r8, r8)
10044e74:	48400000 	.word	0x48400000

10044e78 <LL_APB2_GRP1_IsEnabledClock>:
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10044e78:	4b03      	ldr	r3, [pc, #12]	@ (10044e88 <LL_APB2_GRP1_IsEnabledClock+0x10>)
10044e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10044e7c:	4003      	ands	r3, r0
10044e7e:	1a18      	subs	r0, r3, r0
10044e80:	4243      	negs	r3, r0
10044e82:	4158      	adcs	r0, r3
}
10044e84:	4770      	bx	lr
10044e86:	46c0      	nop			@ (mov r8, r8)
10044e88:	48400000 	.word	0x48400000

10044e8c <APB0periphContextSave>:
  * @brief  Save the APB0 peripheral registers content.
  * @param  apb0 Pointer to a APB0 structure
  * @retval None
  */
static void APB0periphContextSave(apb0PeriphT *apb0)
{
10044e8c:	b510      	push	{r4, lr}
10044e8e:	0004      	movs	r4, r0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_SYSCFG))
10044e90:	2080      	movs	r0, #128	@ 0x80
10044e92:	0040      	lsls	r0, r0, #1
10044e94:	f7ff ffd4 	bl	10044e40 <LL_APB0_GRP1_IsEnabledClock>
10044e98:	2800      	cmp	r0, #0
10044e9a:	d005      	beq.n	10044ea8 <APB0periphContextSave+0x1c>
  {
    Osal_MemCpy4((uint32_t *)&apb0->SYSCFG_vr, (uint32_t *)SYSCFG, sizeof(SYSCFG_TypeDef));
10044e9c:	2180      	movs	r1, #128	@ 0x80
10044e9e:	2240      	movs	r2, #64	@ 0x40
10044ea0:	0020      	movs	r0, r4
10044ea2:	05c9      	lsls	r1, r1, #23
10044ea4:	f7ff ffa0 	bl	10044de8 <Osal_MemCpy4>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM1_vr, (uint32_t *)TIM1, sizeof(TIM_TypeDef));
  }
#endif
#if defined(TIM2)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM2))
10044ea8:	2001      	movs	r0, #1
10044eaa:	f7ff ffc9 	bl	10044e40 <LL_APB0_GRP1_IsEnabledClock>
10044eae:	2800      	cmp	r0, #0
10044eb0:	d005      	beq.n	10044ebe <APB0periphContextSave+0x32>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM2_vr, (uint32_t *)TIM2, sizeof(TIM_TypeDef));
10044eb2:	0020      	movs	r0, r4
10044eb4:	2264      	movs	r2, #100	@ 0x64
10044eb6:	4919      	ldr	r1, [pc, #100]	@ (10044f1c <APB0periphContextSave+0x90>)
10044eb8:	3044      	adds	r0, #68	@ 0x44
10044eba:	f7ff ff95 	bl	10044de8 <Osal_MemCpy4>
  }
#endif
#if defined(TIM16)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM16))
10044ebe:	2002      	movs	r0, #2
10044ec0:	f7ff ffbe 	bl	10044e40 <LL_APB0_GRP1_IsEnabledClock>
10044ec4:	2800      	cmp	r0, #0
10044ec6:	d005      	beq.n	10044ed4 <APB0periphContextSave+0x48>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM16_vr, (uint32_t *)TIM16, sizeof(TIM_TypeDef));
10044ec8:	0020      	movs	r0, r4
10044eca:	2264      	movs	r2, #100	@ 0x64
10044ecc:	4914      	ldr	r1, [pc, #80]	@ (10044f20 <APB0periphContextSave+0x94>)
10044ece:	30a8      	adds	r0, #168	@ 0xa8
10044ed0:	f7ff ff8a 	bl	10044de8 <Osal_MemCpy4>
  }
#endif
#if defined(TIM17)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM17))
10044ed4:	2004      	movs	r0, #4
10044ed6:	f7ff ffb3 	bl	10044e40 <LL_APB0_GRP1_IsEnabledClock>
10044eda:	2800      	cmp	r0, #0
10044edc:	d006      	beq.n	10044eec <APB0periphContextSave+0x60>
  {
    Osal_MemCpy4((uint32_t *)&apb0->TIM17_vr, (uint32_t *)TIM17, sizeof(TIM_TypeDef));
10044ede:	0020      	movs	r0, r4
10044ee0:	300d      	adds	r0, #13
10044ee2:	2264      	movs	r2, #100	@ 0x64
10044ee4:	490f      	ldr	r1, [pc, #60]	@ (10044f24 <APB0periphContextSave+0x98>)
10044ee6:	30ff      	adds	r0, #255	@ 0xff
10044ee8:	f7ff ff7e 	bl	10044de8 <Osal_MemCpy4>
  }
#endif

  apb0->wdg_to_be_enabled = FALSE;
10044eec:	0022      	movs	r2, r4
10044eee:	2300      	movs	r3, #0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_WDG))
10044ef0:	2080      	movs	r0, #128	@ 0x80
  apb0->wdg_to_be_enabled = FALSE;
10044ef2:	32fc      	adds	r2, #252	@ 0xfc
10044ef4:	6753      	str	r3, [r2, #116]	@ 0x74
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_WDG))
10044ef6:	01c0      	lsls	r0, r0, #7
10044ef8:	f7ff ffa2 	bl	10044e40 <LL_APB0_GRP1_IsEnabledClock>
10044efc:	2800      	cmp	r0, #0
10044efe:	d008      	beq.n	10044f12 <APB0periphContextSave+0x86>
  {
    if (apb0->deepstop_wdg_state == DISABLE)
10044f00:	6f93      	ldr	r3, [r2, #120]	@ 0x78
10044f02:	2b00      	cmp	r3, #0
10044f04:	d105      	bne.n	10044f12 <APB0periphContextSave+0x86>
    {
      apb0->wdg_to_be_enabled = TRUE;
      LL_APB0_GRP1_DisableClock(LL_APB0_GRP1_PERIPH_WDG);
10044f06:	2080      	movs	r0, #128	@ 0x80
      apb0->wdg_to_be_enabled = TRUE;
10044f08:	3301      	adds	r3, #1
10044f0a:	6753      	str	r3, [r2, #116]	@ 0x74
      LL_APB0_GRP1_DisableClock(LL_APB0_GRP1_PERIPH_WDG);
10044f0c:	01c0      	lsls	r0, r0, #7
10044f0e:	f7ff ffa1 	bl	10044e54 <LL_APB0_GRP1_DisableClock>
    }
  }

  apb0->FLASH_CONFIG_vr = FLASH->CONFIG;
10044f12:	4b05      	ldr	r3, [pc, #20]	@ (10044f28 <APB0periphContextSave+0x9c>)
10044f14:	685b      	ldr	r3, [r3, #4]
10044f16:	6423      	str	r3, [r4, #64]	@ 0x40
}
10044f18:	bd10      	pop	{r4, pc}
10044f1a:	46c0      	nop			@ (mov r8, r8)
10044f1c:	40002000 	.word	0x40002000
10044f20:	40005000 	.word	0x40005000
10044f24:	40006000 	.word	0x40006000
10044f28:	40001000 	.word	0x40001000

10044f2c <APB1periphContextSave>:
  * @brief  Save the APB1 peripheral registers content.
  * @param  apb1 Pointer to a APB1 structure
  * @retval None
  */
static void APB1periphContextSave(apb1PeriphT *apb1)
{
10044f2c:	b510      	push	{r4, lr}
10044f2e:	0004      	movs	r4, r0
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI2))
  {
    Osal_MemCpy4((uint32_t *)&apb1->SPI2_vr, (uint32_t *)SPI2, sizeof(SPI_TypeDef));
  }
#endif
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI3))
10044f30:	2080      	movs	r0, #128	@ 0x80
10044f32:	01c0      	lsls	r0, r0, #7
10044f34:	f7ff ff96 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
10044f38:	2800      	cmp	r0, #0
10044f3a:	d005      	beq.n	10044f48 <APB1periphContextSave+0x1c>
  {
    Osal_MemCpy4((uint32_t *)&apb1->SPI3_vr, (uint32_t *)SPI3, sizeof(SPI_TypeDef));
10044f3c:	0020      	movs	r0, r4
10044f3e:	2224      	movs	r2, #36	@ 0x24
10044f40:	491b      	ldr	r1, [pc, #108]	@ (10044fb0 <APB1periphContextSave+0x84>)
10044f42:	30e4      	adds	r0, #228	@ 0xe4
10044f44:	f7ff ff50 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_ADCDIG))
10044f48:	2010      	movs	r0, #16
10044f4a:	f7ff ff8b 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
10044f4e:	2800      	cmp	r0, #0
10044f50:	d005      	beq.n	10044f5e <APB1periphContextSave+0x32>
  {
    Osal_MemCpy4((uint32_t *)&apb1->ADC_vr, (uint32_t *)ADC1, sizeof(ADC_TypeDef));
10044f52:	0020      	movs	r0, r4
10044f54:	2258      	movs	r2, #88	@ 0x58
10044f56:	4917      	ldr	r1, [pc, #92]	@ (10044fb4 <APB1periphContextSave+0x88>)
10044f58:	308c      	adds	r0, #140	@ 0x8c
10044f5a:	f7ff ff45 	bl	10044de8 <Osal_MemCpy4>
  }

#if defined(STM32WB06) || defined(STM32WB07)
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1))
#else
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
10044f5e:	2080      	movs	r0, #128	@ 0x80
10044f60:	0040      	lsls	r0, r0, #1
10044f62:	f7ff ff7f 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
10044f66:	2800      	cmp	r0, #0
10044f68:	d009      	beq.n	10044f7e <APB1periphContextSave+0x52>
     (LL_RCC_GetLPUARTClockSource() == LL_RCC_LPUCLKSEL_CLK16M))
10044f6a:	f7ff ff49 	bl	10044e00 <LL_RCC_GetLPUARTClockSource>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
10044f6e:	2800      	cmp	r0, #0
10044f70:	d105      	bne.n	10044f7e <APB1periphContextSave+0x52>
#endif
  {
    Osal_MemCpy4((uint32_t *)&apb1->LPUART_vr, (uint32_t *)LPUART1, sizeof(USART_TypeDef));
10044f72:	0020      	movs	r0, r4
10044f74:	2230      	movs	r2, #48	@ 0x30
10044f76:	4910      	ldr	r1, [pc, #64]	@ (10044fb8 <APB1periphContextSave+0x8c>)
10044f78:	305c      	adds	r0, #92	@ 0x5c
10044f7a:	f7ff ff35 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_USART1))
10044f7e:	2080      	movs	r0, #128	@ 0x80
10044f80:	00c0      	lsls	r0, r0, #3
10044f82:	f7ff ff6f 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
10044f86:	2800      	cmp	r0, #0
10044f88:	d005      	beq.n	10044f96 <APB1periphContextSave+0x6a>
  {
    Osal_MemCpy4((uint32_t *)&apb1->USART_vr, (uint32_t *)USART1, sizeof(USART_TypeDef));
10044f8a:	0020      	movs	r0, r4
10044f8c:	2230      	movs	r2, #48	@ 0x30
10044f8e:	490b      	ldr	r1, [pc, #44]	@ (10044fbc <APB1periphContextSave+0x90>)
10044f90:	302c      	adds	r0, #44	@ 0x2c
10044f92:	f7ff ff29 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C1))
10044f96:	2080      	movs	r0, #128	@ 0x80
10044f98:	0380      	lsls	r0, r0, #14
10044f9a:	f7ff ff63 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
10044f9e:	2800      	cmp	r0, #0
10044fa0:	d005      	beq.n	10044fae <APB1periphContextSave+0x82>
  {
    Osal_MemCpy4((uint32_t *)&apb1->I2C1_vr, (uint32_t *)I2C1, sizeof(I2C_TypeDef));
10044fa2:	2182      	movs	r1, #130	@ 0x82
10044fa4:	222c      	movs	r2, #44	@ 0x2c
10044fa6:	0020      	movs	r0, r4
10044fa8:	05c9      	lsls	r1, r1, #23
10044faa:	f7ff ff1d 	bl	10044de8 <Osal_MemCpy4>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C2))
  {
    Osal_MemCpy4((uint32_t *)&apb1->I2C2_vr, (uint32_t *)I2C2, sizeof(I2C_TypeDef));
  }
#endif
}
10044fae:	bd10      	pop	{r4, pc}
10044fb0:	41007000 	.word	0x41007000
10044fb4:	41006000 	.word	0x41006000
10044fb8:	41005000 	.word	0x41005000
10044fbc:	41004000 	.word	0x41004000

10044fc0 <APB2periphContextSave>:
  * @brief  Save the APB2 peripheral registers content.
  * @param  apb2 Pointer to a APB2 structure
  * @retval None
  */
static void APB2periphContextSave(apb2PeriphT *apb2)
{
10044fc0:	b510      	push	{r4, lr}
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10044fc2:	2001      	movs	r0, #1
10044fc4:	f7ff ff58 	bl	10044e78 <LL_APB2_GRP1_IsEnabledClock>
  {
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
    apb2->LDO_TRANSFO_vr = READ_BIT(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS);
#endif
  }
}
10044fc8:	bd10      	pop	{r4, pc}
	...

10044fcc <AHB0periphContextSave>:
  * @brief  Save the AHB0 peripheral registers content.
  * @param  ahb0 Pointer to a AHB0 structure
  * @retval None
  */
static void AHB0periphContextSave(ahb0PeriphT *ahb0)
{
10044fcc:	b510      	push	{r4, lr}
10044fce:	0004      	movs	r4, r0
  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
10044fd0:	2001      	movs	r0, #1
10044fd2:	f7ff ff1d 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
10044fd6:	2800      	cmp	r0, #0
10044fd8:	d00d      	beq.n	10044ff6 <AHB0periphContextSave+0x2a>
    Osal_MemCpy4((uint32_t *)ahb0->DMAMUX_vr, (uint32_t *)DMAMUX1, 8*sizeof(DMAMUX_Channel_TypeDef));
10044fda:	0020      	movs	r0, r4
10044fdc:	2191      	movs	r1, #145	@ 0x91
10044fde:	309d      	adds	r0, #157	@ 0x9d
10044fe0:	2220      	movs	r2, #32
10044fe2:	05c9      	lsls	r1, r1, #23
10044fe4:	30ff      	adds	r0, #255	@ 0xff
10044fe6:	f7ff feff 	bl	10044de8 <Osal_MemCpy4>
    Osal_MemCpy4((uint32_t *)ahb0->DMA_vr, (uint32_t *)DMA1, 8*sizeof(DMA_Channel_TypeDef));
10044fea:	0020      	movs	r0, r4
10044fec:	22a0      	movs	r2, #160	@ 0xa0
10044fee:	4925      	ldr	r1, [pc, #148]	@ (10045084 <AHB0periphContextSave+0xb8>)
10044ff0:	30fc      	adds	r0, #252	@ 0xfc
10044ff2:	f7ff fef9 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_RNG)) {
10044ff6:	2080      	movs	r0, #128	@ 0x80
10044ff8:	02c0      	lsls	r0, r0, #11
10044ffa:	f7ff ff09 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
10044ffe:	2800      	cmp	r0, #0
10045000:	d005      	beq.n	1004500e <AHB0periphContextSave+0x42>
    Osal_MemCpy4((uint32_t *)&ahb0->RNG_vr, (uint32_t *)RNG, sizeof(RNG_TypeDef));
10045002:	0020      	movs	r0, r4
10045004:	2288      	movs	r2, #136	@ 0x88
10045006:	4920      	ldr	r1, [pc, #128]	@ (10045088 <AHB0periphContextSave+0xbc>)
10045008:	3074      	adds	r0, #116	@ 0x74
1004500a:	f7ff feed 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_PKA)) {
1004500e:	2080      	movs	r0, #128	@ 0x80
10045010:	0240      	lsls	r0, r0, #9
10045012:	f7ff fefd 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
10045016:	2800      	cmp	r0, #0
10045018:	d002      	beq.n	10045020 <AHB0periphContextSave+0x54>
#if defined(STM32WB06) || defined(STM32WB07)
    ahb0->PKA_CSR_vr = PKA->CSR;
    ahb0->PKA_ISR_vr = PKA->ISR;
    ahb0->PKA_IEN_vr = PKA->IEN;
#else
    ahb0->PKA_CR_vr = PKA->CR;
1004501a:	4b1c      	ldr	r3, [pc, #112]	@ (1004508c <AHB0periphContextSave+0xc0>)
1004501c:	681b      	ldr	r3, [r3, #0]
1004501e:	6723      	str	r3, [r4, #112]	@ 0x70
#endif
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_CRC)) {
10045020:	2080      	movs	r0, #128	@ 0x80
10045022:	0140      	lsls	r0, r0, #5
10045024:	f7ff fef4 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
10045028:	2800      	cmp	r0, #0
1004502a:	d005      	beq.n	10045038 <AHB0periphContextSave+0x6c>
    Osal_MemCpy4((uint32_t *)&ahb0->CRC_vr, (uint32_t *)CRC, sizeof(CRC_TypeDef));
1004502c:	0020      	movs	r0, r4
1004502e:	2218      	movs	r2, #24
10045030:	4917      	ldr	r1, [pc, #92]	@ (10045090 <AHB0periphContextSave+0xc4>)
10045032:	3058      	adds	r0, #88	@ 0x58
10045034:	f7ff fed8 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOA)) {
10045038:	2004      	movs	r0, #4
1004503a:	f7ff fee9 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
1004503e:	2800      	cmp	r0, #0
10045040:	d005      	beq.n	1004504e <AHB0periphContextSave+0x82>
    Osal_MemCpy4((uint32_t *)&ahb0->GPIOA_vr, (uint32_t *)GPIOA, sizeof(GPIO_TypeDef));
10045042:	2190      	movs	r1, #144	@ 0x90
10045044:	222c      	movs	r2, #44	@ 0x2c
10045046:	0020      	movs	r0, r4
10045048:	05c9      	lsls	r1, r1, #23
1004504a:	f7ff fecd 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOB)) {
1004504e:	2008      	movs	r0, #8
10045050:	f7ff fede 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
10045054:	2800      	cmp	r0, #0
10045056:	d004      	beq.n	10045062 <AHB0periphContextSave+0x96>
    Osal_MemCpy4((uint32_t *)&ahb0->GPIOB_vr, (uint32_t *)GPIOB, sizeof(GPIO_TypeDef));
10045058:	222c      	movs	r2, #44	@ 0x2c
1004505a:	490e      	ldr	r1, [pc, #56]	@ (10045094 <AHB0periphContextSave+0xc8>)
1004505c:	18a0      	adds	r0, r4, r2
1004505e:	f7ff fec3 	bl	10044de8 <Osal_MemCpy4>
  }

  ahb0->RCC_AHBRSTR_vr  = RCC->AHBRSTR;
10045062:	22de      	movs	r2, #222	@ 0xde
10045064:	4b0c      	ldr	r3, [pc, #48]	@ (10045098 <AHB0periphContextSave+0xcc>)
10045066:	0052      	lsls	r2, r2, #1
10045068:	6b19      	ldr	r1, [r3, #48]	@ 0x30
1004506a:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_APB1RSTR_vr = RCC->APB1RSTR;
1004506c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
1004506e:	3204      	adds	r2, #4
10045070:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_AHBENR_vr   = RCC->AHBENR;
10045072:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10045074:	3204      	adds	r2, #4
10045076:	50a1      	str	r1, [r4, r2]
  ahb0->RCC_APB1ENR_vr  = RCC->APB1ENR;
10045078:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
1004507a:	23e4      	movs	r3, #228	@ 0xe4
1004507c:	005b      	lsls	r3, r3, #1
1004507e:	50e2      	str	r2, [r4, r3]
}
10045080:	bd10      	pop	{r4, pc}
10045082:	46c0      	nop			@ (mov r8, r8)
10045084:	48700000 	.word	0x48700000
10045088:	48600000 	.word	0x48600000
1004508c:	48300000 	.word	0x48300000
10045090:	48200000 	.word	0x48200000
10045094:	48100000 	.word	0x48100000
10045098:	48400000 	.word	0x48400000

1004509c <cstackContextSave>:
{
  uint8_t i;
  volatile uint32_t *ptr;

  i = 0;
  ptr = __vector_table[0].__ptr ;
1004509c:	4b04      	ldr	r3, [pc, #16]	@ (100450b0 <cstackContextSave+0x14>)
1004509e:	681a      	ldr	r2, [r3, #0]
  ptr -= CSTACK_PREAMBLE_NUMBER;
100450a0:	0013      	movs	r3, r2
100450a2:	3b50      	subs	r3, #80	@ 0x50
  do
  {
    cStackPreamble[i] = *ptr;
100450a4:	cb02      	ldmia	r3!, {r1}
100450a6:	c002      	stmia	r0!, {r1}
    i++;
    ptr++;
  } while (i < CSTACK_PREAMBLE_NUMBER);
100450a8:	429a      	cmp	r2, r3
100450aa:	d1fb      	bne.n	100450a4 <cstackContextSave+0x8>

}
100450ac:	4770      	bx	lr
100450ae:	46c0      	nop			@ (mov r8, r8)
100450b0:	10040000 	.word	0x10040000

100450b4 <cpuPeriphContextSave>:
  */
static void cpuPeriphContextSave(cpuPeriphT *cpuPeriph)
{
  uint8_t i;

  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
100450b4:	4b0d      	ldr	r3, [pc, #52]	@ (100450ec <cpuPeriphContextSave+0x38>)
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
100450b6:	490e      	ldr	r1, [pc, #56]	@ (100450f0 <cpuPeriphContextSave+0x3c>)
  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
100450b8:	689b      	ldr	r3, [r3, #8]
{
100450ba:	b530      	push	{r4, r5, lr}
  cpuPeriph->SCB_VTOR_vr = SCB->VTOR;
100450bc:	6003      	str	r3, [r0, #0]
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
100450be:	680b      	ldr	r3, [r1, #0]
  for (i=0; i<8; i++)
  {
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
100450c0:	0004      	movs	r4, r0
  cpuPeriph->NVIC_ISER_vr = NVIC->ISER[0];
100450c2:	6043      	str	r3, [r0, #4]
100450c4:	2300      	movs	r3, #0
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
100450c6:	3408      	adds	r4, #8
100450c8:	001a      	movs	r2, r3
100450ca:	32c0      	adds	r2, #192	@ 0xc0
100450cc:	0092      	lsls	r2, r2, #2
100450ce:	588d      	ldr	r5, [r1, r2]
100450d0:	009a      	lsls	r2, r3, #2
  for (i=0; i<8; i++)
100450d2:	3301      	adds	r3, #1
   cpuPeriph->NVIC_IPR_vr[i] = NVIC->IP[i];
100450d4:	50a5      	str	r5, [r4, r2]
  for (i=0; i<8; i++)
100450d6:	2b08      	cmp	r3, #8
100450d8:	d1f6      	bne.n	100450c8 <cpuPeriphContextSave+0x14>
  }
  cpuPeriph->SYSTICK_IPR_vr = *(volatile uint32_t *)SHPR3_REG;
100450da:	4b06      	ldr	r3, [pc, #24]	@ (100450f4 <cpuPeriphContextSave+0x40>)
100450dc:	681b      	ldr	r3, [r3, #0]
100450de:	6283      	str	r3, [r0, #40]	@ 0x28
  cpuPeriph->SYST_CSR_vr = SysTick->CTRL;
100450e0:	4b05      	ldr	r3, [pc, #20]	@ (100450f8 <cpuPeriphContextSave+0x44>)
100450e2:	681a      	ldr	r2, [r3, #0]
100450e4:	62c2      	str	r2, [r0, #44]	@ 0x2c
  cpuPeriph->SYST_RVR_vr = SysTick->LOAD;
100450e6:	685b      	ldr	r3, [r3, #4]
100450e8:	6303      	str	r3, [r0, #48]	@ 0x30
}
100450ea:	bd30      	pop	{r4, r5, pc}
100450ec:	e000ed00 	.word	0xe000ed00
100450f0:	e000e100 	.word	0xe000e100
100450f4:	e000ed20 	.word	0xe000ed20
100450f8:	e000e010 	.word	0xe000e010

100450fc <APB0periphContextRestore>:
  * @brief  Restore the APB0 peripheral registers content.
  * @param  apb0 Pointer to a APB0 structure
  * @retval None
  */
static void APB0periphContextRestore(apb0PeriphT *apb0)
{
100450fc:	b570      	push	{r4, r5, r6, lr}
100450fe:	0004      	movs	r4, r0
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_SYSCFG))
10045100:	2080      	movs	r0, #128	@ 0x80
10045102:	0040      	lsls	r0, r0, #1
10045104:	f7ff fe9c 	bl	10044e40 <LL_APB0_GRP1_IsEnabledClock>
10045108:	2800      	cmp	r0, #0
1004510a:	d005      	beq.n	10045118 <APB0periphContextRestore+0x1c>
  {
    Osal_MemCpy4((uint32_t *)SYSCFG, (uint32_t *)&apb0->SYSCFG_vr, sizeof(SYSCFG_TypeDef));
1004510c:	2080      	movs	r0, #128	@ 0x80
1004510e:	2240      	movs	r2, #64	@ 0x40
10045110:	0021      	movs	r1, r4
10045112:	05c0      	lsls	r0, r0, #23
10045114:	f7ff fe68 	bl	10044de8 <Osal_MemCpy4>
    TIM1->CR1 = app;
  }
#endif

#if defined(TIM2)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM2))
10045118:	2001      	movs	r0, #1
1004511a:	f7ff fe91 	bl	10044e40 <LL_APB0_GRP1_IsEnabledClock>
1004511e:	2800      	cmp	r0, #0
10045120:	d00c      	beq.n	1004513c <APB0periphContextRestore+0x40>
  {
    uint32_t app;
    app = apb0->TIM2_vr.CR1;
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
10045122:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
10045124:	0021      	movs	r1, r4
    app = apb0->TIM2_vr.CR1;
10045126:	6c66      	ldr	r6, [r4, #68]	@ 0x44
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
10045128:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004512a:	4d1a      	ldr	r5, [pc, #104]	@ (10045194 <APB0periphContextRestore+0x98>)
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
1004512c:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
1004512e:	0028      	movs	r0, r5
    apb0->TIM2_vr.CR1 &= ~TIM_CR1_CEN;
10045130:	6463      	str	r3, [r4, #68]	@ 0x44
    Osal_MemCpy4((uint32_t *)TIM2, (uint32_t *)&apb0->TIM2_vr, sizeof(TIM_TypeDef));
10045132:	3263      	adds	r2, #99	@ 0x63
10045134:	3144      	adds	r1, #68	@ 0x44
10045136:	f7ff fe57 	bl	10044de8 <Osal_MemCpy4>
    TIM2->CR1 = app;
1004513a:	602e      	str	r6, [r5, #0]
  }
#endif

#if defined(TIM16)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM16))
1004513c:	2002      	movs	r0, #2
1004513e:	f7ff fe7f 	bl	10044e40 <LL_APB0_GRP1_IsEnabledClock>
10045142:	2800      	cmp	r0, #0
10045144:	d00c      	beq.n	10045160 <APB0periphContextRestore+0x64>
  {
    uint32_t app;
    app = apb0->TIM16_vr.CR1;
10045146:	0021      	movs	r1, r4
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
10045148:	2201      	movs	r2, #1
    app = apb0->TIM16_vr.CR1;
1004514a:	31a8      	adds	r1, #168	@ 0xa8
1004514c:	680e      	ldr	r6, [r1, #0]
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
1004514e:	680b      	ldr	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
10045150:	4d11      	ldr	r5, [pc, #68]	@ (10045198 <APB0periphContextRestore+0x9c>)
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
10045152:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
10045154:	0028      	movs	r0, r5
    apb0->TIM16_vr.CR1 &= ~TIM_CR1_CEN;
10045156:	600b      	str	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)TIM16, (uint32_t *)&apb0->TIM16_vr, sizeof(TIM_TypeDef));
10045158:	3263      	adds	r2, #99	@ 0x63
1004515a:	f7ff fe45 	bl	10044de8 <Osal_MemCpy4>
    TIM16->CR1 = app;
1004515e:	602e      	str	r6, [r5, #0]
  }
#endif

#if defined(TIM17)
  if (LL_APB0_GRP1_IsEnabledClock(LL_APB0_GRP1_PERIPH_TIM17))
10045160:	2004      	movs	r0, #4
10045162:	f7ff fe6d 	bl	10044e40 <LL_APB0_GRP1_IsEnabledClock>
10045166:	2800      	cmp	r0, #0
10045168:	d00f      	beq.n	1004518a <APB0periphContextRestore+0x8e>
  {
    uint32_t app;
    app = apb0->TIM17_vr.CR1;
1004516a:	0023      	movs	r3, r4
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004516c:	2101      	movs	r1, #1
    app = apb0->TIM17_vr.CR1;
1004516e:	33fc      	adds	r3, #252	@ 0xfc
10045170:	691e      	ldr	r6, [r3, #16]
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
10045172:	691a      	ldr	r2, [r3, #16]
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
10045174:	4d09      	ldr	r5, [pc, #36]	@ (1004519c <APB0periphContextRestore+0xa0>)
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
10045176:	438a      	bics	r2, r1
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
10045178:	0021      	movs	r1, r4
1004517a:	310d      	adds	r1, #13
    apb0->TIM17_vr.CR1 &= ~TIM_CR1_CEN;
1004517c:	611a      	str	r2, [r3, #16]
    Osal_MemCpy4((uint32_t *)TIM17, (uint32_t *)&apb0->TIM17_vr, sizeof(TIM_TypeDef));
1004517e:	0028      	movs	r0, r5
10045180:	2264      	movs	r2, #100	@ 0x64
10045182:	31ff      	adds	r1, #255	@ 0xff
10045184:	f7ff fe30 	bl	10044de8 <Osal_MemCpy4>
    TIM17->CR1 = app;
10045188:	602e      	str	r6, [r5, #0]
  }
#endif

  FLASH->CONFIG = apb0->FLASH_CONFIG_vr;
1004518a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
1004518c:	4b04      	ldr	r3, [pc, #16]	@ (100451a0 <APB0periphContextRestore+0xa4>)
1004518e:	605a      	str	r2, [r3, #4]
}
10045190:	bd70      	pop	{r4, r5, r6, pc}
10045192:	46c0      	nop			@ (mov r8, r8)
10045194:	40002000 	.word	0x40002000
10045198:	40005000 	.word	0x40005000
1004519c:	40006000 	.word	0x40006000
100451a0:	40001000 	.word	0x40001000

100451a4 <APB1periphContextRestore>:
  * @brief  Restore the APB1 peripheral registers content.
  * @param  apb1 Pointer to a APB1 structure
  * @retval None
  */
static void APB1periphContextRestore(apb1PeriphT *apb1)
{
100451a4:	b570      	push	{r4, r5, r6, lr}
100451a6:	0004      	movs	r4, r0
    Osal_MemCpy4((uint32_t *)SPI2, (uint32_t *)&apb1->SPI2_vr, 12); /* Skip DR */
    Osal_MemCpy4((uint32_t *)(&(SPI2->CRCPR)), (uint32_t *)(&apb1->SPI2_vr.CRCPR), 20);
    SPI2->CR1 = app;
  }
#endif
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_SPI3))
100451a8:	2080      	movs	r0, #128	@ 0x80
100451aa:	01c0      	lsls	r0, r0, #7
100451ac:	f7ff fe5a 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
100451b0:	2800      	cmp	r0, #0
100451b2:	d012      	beq.n	100451da <APB1periphContextRestore+0x36>
  {
    uint32_t app;
    app = apb1->SPI3_vr.CR1;
100451b4:	0021      	movs	r1, r4
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
100451b6:	2240      	movs	r2, #64	@ 0x40
    app = apb1->SPI3_vr.CR1;
100451b8:	31e4      	adds	r1, #228	@ 0xe4
100451ba:	680e      	ldr	r6, [r1, #0]
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
100451bc:	680b      	ldr	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)SPI3, (uint32_t *)&apb1->SPI3_vr, 12); /* Skip DR */
100451be:	4d2e      	ldr	r5, [pc, #184]	@ (10045278 <APB1periphContextRestore+0xd4>)
    apb1->SPI3_vr.CR1 &= ~SPI_CR1_SPE;
100451c0:	4393      	bics	r3, r2
100451c2:	600b      	str	r3, [r1, #0]
    Osal_MemCpy4((uint32_t *)SPI3, (uint32_t *)&apb1->SPI3_vr, 12); /* Skip DR */
100451c4:	0028      	movs	r0, r5
100451c6:	3a34      	subs	r2, #52	@ 0x34
100451c8:	f7ff fe0e 	bl	10044de8 <Osal_MemCpy4>
    Osal_MemCpy4((uint32_t *)(&(SPI3->CRCPR)), (uint32_t *)(&apb1->SPI3_vr.CRCPR), 20);
100451cc:	0021      	movs	r1, r4
100451ce:	2214      	movs	r2, #20
100451d0:	482a      	ldr	r0, [pc, #168]	@ (1004527c <APB1periphContextRestore+0xd8>)
100451d2:	31f4      	adds	r1, #244	@ 0xf4
100451d4:	f7ff fe08 	bl	10044de8 <Osal_MemCpy4>
    SPI3->CR1 = app;
100451d8:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_ADCDIG))
100451da:	2010      	movs	r0, #16
100451dc:	f7ff fe42 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
100451e0:	2800      	cmp	r0, #0
100451e2:	d005      	beq.n	100451f0 <APB1periphContextRestore+0x4c>
  {
    Osal_MemCpy4((uint32_t *)ADC1, (uint32_t *)&apb1->ADC_vr, sizeof(ADC_TypeDef));
100451e4:	0021      	movs	r1, r4
100451e6:	2258      	movs	r2, #88	@ 0x58
100451e8:	4825      	ldr	r0, [pc, #148]	@ (10045280 <APB1periphContextRestore+0xdc>)
100451ea:	318c      	adds	r1, #140	@ 0x8c
100451ec:	f7ff fdfc 	bl	10044de8 <Osal_MemCpy4>
  }

#if defined(STM32WB06) || defined(STM32WB07)
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1))
#else
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
100451f0:	2080      	movs	r0, #128	@ 0x80
100451f2:	0040      	lsls	r0, r0, #1
100451f4:	f7ff fe36 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
100451f8:	2800      	cmp	r0, #0
100451fa:	d014      	beq.n	10045226 <APB1periphContextRestore+0x82>
     (LL_RCC_GetLPUARTClockSource() == LL_RCC_LPUCLKSEL_CLK16M))
100451fc:	f7ff fe00 	bl	10044e00 <LL_RCC_GetLPUARTClockSource>
  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_LPUART1) &&
10045200:	2800      	cmp	r0, #0
10045202:	d110      	bne.n	10045226 <APB1periphContextRestore+0x82>
#endif
  {
    uint32_t app;
    app = apb1->LPUART_vr.CR1;
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
10045204:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
10045206:	0021      	movs	r1, r4
    app = apb1->LPUART_vr.CR1;
10045208:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
1004520a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
1004520c:	4d1d      	ldr	r5, [pc, #116]	@ (10045284 <APB1periphContextRestore+0xe0>)
    apb1->LPUART_vr.CR1 &= ~USART_CR1_UE;
1004520e:	4393      	bics	r3, r2
10045210:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Osal_MemCpy4((uint32_t *)LPUART1, (uint32_t *)&apb1->LPUART_vr, 36); /* Skip RDR and TDR */
10045212:	0028      	movs	r0, r5
10045214:	3223      	adds	r2, #35	@ 0x23
10045216:	315c      	adds	r1, #92	@ 0x5c
10045218:	f7ff fde6 	bl	10044de8 <Osal_MemCpy4>
    LPUART1->PRESC = apb1->LPUART_vr.PRESC;
1004521c:	0023      	movs	r3, r4
1004521e:	3388      	adds	r3, #136	@ 0x88
10045220:	681b      	ldr	r3, [r3, #0]
10045222:	62eb      	str	r3, [r5, #44]	@ 0x2c
    LPUART1->CR1 = app;
10045224:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_USART1))
10045226:	2080      	movs	r0, #128	@ 0x80
10045228:	00c0      	lsls	r0, r0, #3
1004522a:	f7ff fe1b 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
1004522e:	2800      	cmp	r0, #0
10045230:	d00e      	beq.n	10045250 <APB1periphContextRestore+0xac>
  {
    uint32_t app;
    app = apb1->USART_vr.CR1;
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
10045232:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
10045234:	0021      	movs	r1, r4
    app = apb1->USART_vr.CR1;
10045236:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
10045238:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
1004523a:	4d13      	ldr	r5, [pc, #76]	@ (10045288 <APB1periphContextRestore+0xe4>)
    apb1->USART_vr.CR1 &= ~USART_CR1_UE;
1004523c:	4393      	bics	r3, r2
1004523e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    Osal_MemCpy4((uint32_t *)USART1, (uint32_t *)&apb1->USART_vr, 36); /* Skip RDR and TDR */
10045240:	0028      	movs	r0, r5
10045242:	3223      	adds	r2, #35	@ 0x23
10045244:	312c      	adds	r1, #44	@ 0x2c
10045246:	f7ff fdcf 	bl	10044de8 <Osal_MemCpy4>
    USART1->PRESC = apb1->USART_vr.PRESC;
1004524a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
1004524c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    USART1->CR1 = app;
1004524e:	602e      	str	r6, [r5, #0]
  }

  if (LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_I2C1))
10045250:	2080      	movs	r0, #128	@ 0x80
10045252:	0380      	lsls	r0, r0, #14
10045254:	f7ff fe06 	bl	10044e64 <LL_APB1_GRP1_IsEnabledClock>
10045258:	2800      	cmp	r0, #0
1004525a:	d00c      	beq.n	10045276 <APB1periphContextRestore+0xd2>
  {
    uint32_t app;
    app = apb1->I2C1_vr.CR1;
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004525c:	2201      	movs	r2, #1
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004525e:	2582      	movs	r5, #130	@ 0x82
    app = apb1->I2C1_vr.CR1;
10045260:	6826      	ldr	r6, [r4, #0]
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
10045262:	6823      	ldr	r3, [r4, #0]
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
10045264:	05ed      	lsls	r5, r5, #23
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
10045266:	4393      	bics	r3, r2
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
10045268:	0021      	movs	r1, r4
1004526a:	0028      	movs	r0, r5
    apb1->I2C1_vr.CR1 &= ~I2C_CR1_PE;
1004526c:	6023      	str	r3, [r4, #0]
    Osal_MemCpy4((uint32_t *)I2C1, (uint32_t *)&apb1->I2C1_vr, 32); /* Skip PECR, RDR and TDR */
1004526e:	321f      	adds	r2, #31
10045270:	f7ff fdba 	bl	10044de8 <Osal_MemCpy4>
    I2C1->CR1 = app;
10045274:	602e      	str	r6, [r5, #0]
    apb1->I2C2_vr.CR1 &= ~I2C_CR1_PE;
    Osal_MemCpy4((uint32_t *)I2C2, (uint32_t *)&apb1->I2C2_vr, 32); /* Skip PECR, RDR and TDR */
    I2C2->CR1 = app;
  }
#endif
}
10045276:	bd70      	pop	{r4, r5, r6, pc}
10045278:	41007000 	.word	0x41007000
1004527c:	41007010 	.word	0x41007010
10045280:	41006000 	.word	0x41006000
10045284:	41005000 	.word	0x41005000
10045288:	41004000 	.word	0x41004000

1004528c <APB2periphContextRestore>:
  * @brief  Restore the APB2 peripheral registers content.
  * @param  apb2 Pointer to a APB2 structure
  * @retval None
  */
static void APB2periphContextRestore(apb2PeriphT *apb2)
{
1004528c:	b510      	push	{r4, lr}
  if (LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004528e:	2001      	movs	r0, #1
10045290:	f7ff fdf2 	bl	10044e78 <LL_APB2_GRP1_IsEnabledClock>
      {
        SET_BIT(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS);
      }
#endif
  }
}
10045294:	bd10      	pop	{r4, pc}
	...

10045298 <AHB0periphContextRestore>:
  * @param  ahb0 Pointer to a AHB0 structure
  * @retval None
  */
static void AHB0periphContextRestore(ahb0PeriphT *ahb0)
{
  RCC->AHBRSTR = ahb0->RCC_AHBRSTR_vr;
10045298:	23de      	movs	r3, #222	@ 0xde
1004529a:	005b      	lsls	r3, r3, #1
1004529c:	58c2      	ldr	r2, [r0, r3]
1004529e:	4b3a      	ldr	r3, [pc, #232]	@ (10045388 <AHB0periphContextRestore+0xf0>)
{
100452a0:	b510      	push	{r4, lr}
  RCC->AHBRSTR = ahb0->RCC_AHBRSTR_vr;
100452a2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->APB1RSTR = ahb0->RCC_APB1RSTR_vr;
100452a4:	22e0      	movs	r2, #224	@ 0xe0
100452a6:	0052      	lsls	r2, r2, #1
100452a8:	5882      	ldr	r2, [r0, r2]
{
100452aa:	0004      	movs	r4, r0
  RCC->APB1RSTR = ahb0->RCC_APB1RSTR_vr;
100452ac:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->AHBENR = ahb0->RCC_AHBENR_vr;
100452ae:	22e2      	movs	r2, #226	@ 0xe2
100452b0:	0052      	lsls	r2, r2, #1
100452b2:	5882      	ldr	r2, [r0, r2]
100452b4:	651a      	str	r2, [r3, #80]	@ 0x50
  RCC->APB1ENR = ahb0->RCC_APB1ENR_vr;
100452b6:	22e4      	movs	r2, #228	@ 0xe4
100452b8:	0052      	lsls	r2, r2, #1
100452ba:	5882      	ldr	r2, [r0, r2]

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
100452bc:	2001      	movs	r0, #1
  RCC->APB1ENR = ahb0->RCC_APB1ENR_vr;
100452be:	659a      	str	r2, [r3, #88]	@ 0x58
  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_DMA)) {
100452c0:	f7ff fda6 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
100452c4:	2800      	cmp	r0, #0
100452c6:	d018      	beq.n	100452fa <AHB0periphContextRestore+0x62>
    Osal_MemCpy4((uint32_t *)DMAMUX1, (uint32_t *)ahb0->DMAMUX_vr, 8*sizeof(DMAMUX_Channel_TypeDef));
100452c8:	0021      	movs	r1, r4
100452ca:	2091      	movs	r0, #145	@ 0x91
100452cc:	319d      	adds	r1, #157	@ 0x9d
100452ce:	2220      	movs	r2, #32
100452d0:	31ff      	adds	r1, #255	@ 0xff
100452d2:	05c0      	lsls	r0, r0, #23
100452d4:	f7ff fd88 	bl	10044de8 <Osal_MemCpy4>
    ahb0->DMA_vr[0].CNDTR = 0;
100452d8:	0021      	movs	r1, r4
    ahb0->DMA_vr[2].CNDTR = 0;
    ahb0->DMA_vr[3].CNDTR = 0;
    ahb0->DMA_vr[4].CNDTR = 0;
    ahb0->DMA_vr[5].CNDTR = 0;
    ahb0->DMA_vr[6].CNDTR = 0;
    ahb0->DMA_vr[7].CNDTR = 0;
100452da:	22c6      	movs	r2, #198	@ 0xc6
    ahb0->DMA_vr[0].CNDTR = 0;
100452dc:	2300      	movs	r3, #0
100452de:	31fc      	adds	r1, #252	@ 0xfc
    ahb0->DMA_vr[7].CNDTR = 0;
100452e0:	0052      	lsls	r2, r2, #1
    ahb0->DMA_vr[0].CNDTR = 0;
100452e2:	604b      	str	r3, [r1, #4]
    Osal_MemCpy4((uint32_t *)DMA1, (uint32_t *)ahb0->DMA_vr, 8*sizeof(DMA_Channel_TypeDef));
100452e4:	4829      	ldr	r0, [pc, #164]	@ (1004538c <AHB0periphContextRestore+0xf4>)
    ahb0->DMA_vr[1].CNDTR = 0;
100452e6:	618b      	str	r3, [r1, #24]
    ahb0->DMA_vr[2].CNDTR = 0;
100452e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
    ahb0->DMA_vr[3].CNDTR = 0;
100452ea:	640b      	str	r3, [r1, #64]	@ 0x40
    ahb0->DMA_vr[4].CNDTR = 0;
100452ec:	654b      	str	r3, [r1, #84]	@ 0x54
    ahb0->DMA_vr[5].CNDTR = 0;
100452ee:	668b      	str	r3, [r1, #104]	@ 0x68
    ahb0->DMA_vr[6].CNDTR = 0;
100452f0:	67cb      	str	r3, [r1, #124]	@ 0x7c
    ahb0->DMA_vr[7].CNDTR = 0;
100452f2:	50a3      	str	r3, [r4, r2]
    Osal_MemCpy4((uint32_t *)DMA1, (uint32_t *)ahb0->DMA_vr, 8*sizeof(DMA_Channel_TypeDef));
100452f4:	3aec      	subs	r2, #236	@ 0xec
100452f6:	f7ff fd77 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_RNG)) {
100452fa:	2080      	movs	r0, #128	@ 0x80
100452fc:	02c0      	lsls	r0, r0, #11
100452fe:	f7ff fd87 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
10045302:	2800      	cmp	r0, #0
10045304:	d005      	beq.n	10045312 <AHB0periphContextRestore+0x7a>
    Osal_MemCpy4((uint32_t *)RNG, (uint32_t *)&ahb0->RNG_vr, sizeof(RNG_TypeDef));
10045306:	0021      	movs	r1, r4
10045308:	2288      	movs	r2, #136	@ 0x88
1004530a:	4821      	ldr	r0, [pc, #132]	@ (10045390 <AHB0periphContextRestore+0xf8>)
1004530c:	3174      	adds	r1, #116	@ 0x74
1004530e:	f7ff fd6b 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_PKA)) {
10045312:	2080      	movs	r0, #128	@ 0x80
10045314:	0240      	lsls	r0, r0, #9
10045316:	f7ff fd7b 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
1004531a:	2800      	cmp	r0, #0
1004531c:	d005      	beq.n	1004532a <AHB0periphContextRestore+0x92>
#if defined(STM32WB06) || defined(STM32WB07)
    PKA->CSR = ahb0->PKA_CSR_vr;
    PKA->ISR = ahb0->PKA_ISR_vr;
    PKA->IEN = ahb0->PKA_IEN_vr;
#else
    PKA->CLRFR = 0x1A0000;
1004531e:	22d0      	movs	r2, #208	@ 0xd0
10045320:	4b1c      	ldr	r3, [pc, #112]	@ (10045394 <AHB0periphContextRestore+0xfc>)
10045322:	0352      	lsls	r2, r2, #13
10045324:	609a      	str	r2, [r3, #8]
    PKA->CR = ahb0->PKA_CR_vr;
10045326:	6f22      	ldr	r2, [r4, #112]	@ 0x70
10045328:	601a      	str	r2, [r3, #0]
#endif
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_CRC)) {
1004532a:	2080      	movs	r0, #128	@ 0x80
1004532c:	0140      	lsls	r0, r0, #5
1004532e:	f7ff fd6f 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
10045332:	2800      	cmp	r0, #0
10045334:	d005      	beq.n	10045342 <AHB0periphContextRestore+0xaa>
    Osal_MemCpy4((uint32_t *)CRC, (uint32_t *)&ahb0->CRC_vr, sizeof(CRC_TypeDef));
10045336:	0021      	movs	r1, r4
10045338:	2218      	movs	r2, #24
1004533a:	4817      	ldr	r0, [pc, #92]	@ (10045398 <AHB0periphContextRestore+0x100>)
1004533c:	3158      	adds	r1, #88	@ 0x58
1004533e:	f7ff fd53 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOA)) {
10045342:	2004      	movs	r0, #4
10045344:	f7ff fd64 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
10045348:	2800      	cmp	r0, #0
1004534a:	d00b      	beq.n	10045364 <AHB0periphContextRestore+0xcc>
    GPIOA->AFR[0] = ahb0->GPIOA_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
1004534c:	2090      	movs	r0, #144	@ 0x90
1004534e:	6a23      	ldr	r3, [r4, #32]
10045350:	05c0      	lsls	r0, r0, #23
10045352:	6203      	str	r3, [r0, #32]
    GPIOA->AFR[1] = ahb0->GPIOA_vr.AFR[1];
10045354:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
10045356:	222c      	movs	r2, #44	@ 0x2c
    GPIOA->AFR[1] = ahb0->GPIOA_vr.AFR[1];
10045358:	6243      	str	r3, [r0, #36]	@ 0x24
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
1004535a:	6963      	ldr	r3, [r4, #20]
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
1004535c:	0021      	movs	r1, r4
    GPIOA->ODR = ahb0->GPIOA_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
1004535e:	6143      	str	r3, [r0, #20]
    Osal_MemCpy4((uint32_t *)GPIOA, (uint32_t *)&ahb0->GPIOA_vr, sizeof(GPIO_TypeDef));
10045360:	f7ff fd42 	bl	10044de8 <Osal_MemCpy4>
  }

  if (LL_AHB1_GRP1_IsEnabledClock(LL_AHB1_GRP1_PERIPH_GPIOB)) {
10045364:	2008      	movs	r0, #8
10045366:	f7ff fd53 	bl	10044e10 <LL_AHB1_GRP1_IsEnabledClock>
1004536a:	2800      	cmp	r0, #0
1004536c:	d00b      	beq.n	10045386 <AHB0periphContextRestore+0xee>
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
    GPIOB->ODR = ahb0->GPIOB_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004536e:	0021      	movs	r1, r4
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
10045370:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
10045372:	480a      	ldr	r0, [pc, #40]	@ (1004539c <AHB0periphContextRestore+0x104>)
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
10045374:	222c      	movs	r2, #44	@ 0x2c
    GPIOB->AFR[0] = ahb0->GPIOB_vr.AFR[0]; /* To avoid glitch in the line when an AF is set */
10045376:	6203      	str	r3, [r0, #32]
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
10045378:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
1004537a:	312c      	adds	r1, #44	@ 0x2c
    GPIOB->AFR[1] = ahb0->GPIOB_vr.AFR[1];
1004537c:	6243      	str	r3, [r0, #36]	@ 0x24
    GPIOB->ODR = ahb0->GPIOB_vr.ODR;       /* To avoid glitch in the line when GPIO_MODE_OUTPUT is set */
1004537e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
10045380:	6143      	str	r3, [r0, #20]
    Osal_MemCpy4((uint32_t *)GPIOB, (uint32_t *)&ahb0->GPIOB_vr, sizeof(GPIO_TypeDef));
10045382:	f7ff fd31 	bl	10044de8 <Osal_MemCpy4>
  }
}
10045386:	bd10      	pop	{r4, pc}
10045388:	48400000 	.word	0x48400000
1004538c:	48700000 	.word	0x48700000
10045390:	48600000 	.word	0x48600000
10045394:	48300000 	.word	0x48300000
10045398:	48200000 	.word	0x48200000
1004539c:	48100000 	.word	0x48100000

100453a0 <cstackContextRestore>:
{
  uint8_t i;
  volatile uint32_t *ptr;

  i = 0;
  ptr = __vector_table[0].__ptr ;
100453a0:	4b04      	ldr	r3, [pc, #16]	@ (100453b4 <cstackContextRestore+0x14>)
100453a2:	681a      	ldr	r2, [r3, #0]
  ptr -= CSTACK_PREAMBLE_NUMBER;
100453a4:	0013      	movs	r3, r2
100453a6:	3b50      	subs	r3, #80	@ 0x50
  do
  {
    *ptr = cStackPreamble[i];
100453a8:	c802      	ldmia	r0!, {r1}
100453aa:	c302      	stmia	r3!, {r1}
    i++;
    ptr++;
  } while (i < CSTACK_PREAMBLE_NUMBER);
100453ac:	429a      	cmp	r2, r3
100453ae:	d1fb      	bne.n	100453a8 <cstackContextRestore+0x8>

}
100453b0:	4770      	bx	lr
100453b2:	46c0      	nop			@ (mov r8, r8)
100453b4:	10040000 	.word	0x10040000

100453b8 <cpuPeriphContextRestore>:
  */
static void cpuPeriphContextRestore(cpuPeriphT *cpuPeriph)
{
  uint8_t i;

  SCB->VTOR = cpuPeriph->SCB_VTOR_vr;
100453b8:	6802      	ldr	r2, [r0, #0]
100453ba:	4b0e      	ldr	r3, [pc, #56]	@ (100453f4 <cpuPeriphContextRestore+0x3c>)
{
100453bc:	b530      	push	{r4, r5, lr}
  SCB->VTOR = cpuPeriph->SCB_VTOR_vr;
100453be:	609a      	str	r2, [r3, #8]
  NVIC->ISER[0] = cpuPeriph->NVIC_ISER_vr;
100453c0:	6843      	ldr	r3, [r0, #4]
100453c2:	490d      	ldr	r1, [pc, #52]	@ (100453f8 <cpuPeriphContextRestore+0x40>)
  for (i=0; i<8; i++)
  {
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
100453c4:	0005      	movs	r5, r0
  NVIC->ISER[0] = cpuPeriph->NVIC_ISER_vr;
100453c6:	600b      	str	r3, [r1, #0]
100453c8:	2300      	movs	r3, #0
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
100453ca:	3508      	adds	r5, #8
100453cc:	009a      	lsls	r2, r3, #2
100453ce:	58ac      	ldr	r4, [r5, r2]
100453d0:	001a      	movs	r2, r3
100453d2:	32c0      	adds	r2, #192	@ 0xc0
100453d4:	0092      	lsls	r2, r2, #2
  for (i=0; i<8; i++)
100453d6:	3301      	adds	r3, #1
   NVIC->IP[i] = cpuPeriph->NVIC_IPR_vr[i];
100453d8:	508c      	str	r4, [r1, r2]
  for (i=0; i<8; i++)
100453da:	2b08      	cmp	r3, #8
100453dc:	d1f6      	bne.n	100453cc <cpuPeriphContextRestore+0x14>
  }
  *(volatile uint32_t *)SHPR3_REG = cpuPeriph->SYSTICK_IPR_vr;
100453de:	6a82      	ldr	r2, [r0, #40]	@ 0x28
100453e0:	4b06      	ldr	r3, [pc, #24]	@ (100453fc <cpuPeriphContextRestore+0x44>)
100453e2:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = cpuPeriph->SYST_RVR_vr;
100453e4:	6b02      	ldr	r2, [r0, #48]	@ 0x30
100453e6:	4b06      	ldr	r3, [pc, #24]	@ (10045400 <cpuPeriphContextRestore+0x48>)
100453e8:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
100453ea:	2200      	movs	r2, #0
100453ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = cpuPeriph->SYST_CSR_vr;
100453ee:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
100453f0:	601a      	str	r2, [r3, #0]
}
100453f2:	bd30      	pop	{r4, r5, pc}
100453f4:	e000ed00 	.word	0xe000ed00
100453f8:	e000e100 	.word	0xe000e100
100453fc:	e000ed20 	.word	0xe000ed20
10045400:	e000e010 	.word	0xe000e010

10045404 <prepareDeviceLowPower>:
  * @retval None
  */
void prepareDeviceLowPower(apb0PeriphT *apb0, apb1PeriphT *apb1,
                           apb2PeriphT *apb2, ahb0PeriphT *ahb0,
                           cpuPeriphT *cpuPeriph, uint32_t *cStackPreamble)
{
10045404:	b570      	push	{r4, r5, r6, lr}
10045406:	000e      	movs	r6, r1
10045408:	0015      	movs	r5, r2
  /* Reset the wakeup flag before the low power mode */
  RAM_VR.WakeupFromSleepFlag = 0;
1004540a:	2200      	movs	r2, #0
{
1004540c:	001c      	movs	r4, r3
  RAM_VR.WakeupFromSleepFlag = 0;
1004540e:	4b0a      	ldr	r3, [pc, #40]	@ (10045438 <prepareDeviceLowPower+0x34>)
10045410:	609a      	str	r2, [r3, #8]

  /* Save the APB0 peripheral configuration */
  APB0periphContextSave(apb0);
10045412:	f7ff fd3b 	bl	10044e8c <APB0periphContextSave>

  /* Save the APB1 peripheral configuration */
  APB1periphContextSave(apb1);
10045416:	0030      	movs	r0, r6
10045418:	f7ff fd88 	bl	10044f2c <APB1periphContextSave>

  /* Save the APB2 peripheral configuration */
  APB2periphContextSave(apb2);
1004541c:	0028      	movs	r0, r5
1004541e:	f7ff fdcf 	bl	10044fc0 <APB2periphContextSave>

  /* Save the AHB0 peripheral configuration */
  AHB0periphContextSave(ahb0);
10045422:	0020      	movs	r0, r4
10045424:	f7ff fdd2 	bl	10044fcc <AHB0periphContextSave>

  /* Save the first N c-stack location that will be restored at wakeup reset */
  cstackContextSave(cStackPreamble);
10045428:	9805      	ldr	r0, [sp, #20]
1004542a:	f7ff fe37 	bl	1004509c <cstackContextSave>

  /* Save the CPU peripheral configuration (NVIC, SysTick, Vector Table) */
  cpuPeriphContextSave(cpuPeriph);
1004542e:	9804      	ldr	r0, [sp, #16]
10045430:	f7ff fe40 	bl	100450b4 <cpuPeriphContextSave>
}
10045434:	bd70      	pop	{r4, r5, r6, pc}
10045436:	46c0      	nop			@ (mov r8, r8)
10045438:	20000004 	.word	0x20000004

1004543c <restoreDeviceLowPower>:
  * @retval None
  */
void restoreDeviceLowPower(apb0PeriphT *apb0, apb1PeriphT *apb1,
                           apb2PeriphT *apb2, ahb0PeriphT *ahb0,
                           cpuPeriphT *cpuPeriph, uint32_t *cStackPreamble)
{
1004543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004543e:	001f      	movs	r7, r3
  /* Enable Watchdog IP if previous disabled */
  if (apb0->wdg_to_be_enabled)
10045440:	0003      	movs	r3, r0
10045442:	33fc      	adds	r3, #252	@ 0xfc
{
10045444:	0015      	movs	r5, r2
  if (apb0->wdg_to_be_enabled)
10045446:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
{
10045448:	0004      	movs	r4, r0
1004544a:	000e      	movs	r6, r1
  if (apb0->wdg_to_be_enabled)
1004544c:	2a00      	cmp	r2, #0
1004544e:	d005      	beq.n	1004545c <restoreDeviceLowPower+0x20>
  {
    apb0->wdg_to_be_enabled = FALSE;
10045450:	2200      	movs	r2, #0
    LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_WDG);
10045452:	2080      	movs	r0, #128	@ 0x80
    apb0->wdg_to_be_enabled = FALSE;
10045454:	675a      	str	r2, [r3, #116]	@ 0x74
    LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_WDG);
10045456:	01c0      	lsls	r0, r0, #7
10045458:	f7ff fce4 	bl	10044e24 <LL_APB0_GRP1_EnableClock>
  }

  /* No Wakeup from DEEPSTOP, so the peripehral configuration is not lost */
  if (RAM_VR.WakeupFromSleepFlag == 0)
1004545c:	4b0b      	ldr	r3, [pc, #44]	@ (1004548c <restoreDeviceLowPower+0x50>)
1004545e:	689b      	ldr	r3, [r3, #8]
10045460:	2b00      	cmp	r3, #0
10045462:	d011      	beq.n	10045488 <restoreDeviceLowPower+0x4c>
  {
    return;
  }

  /* Restore the first N c-stack location that will be restored at wakeup reset */
  cstackContextRestore(cStackPreamble);
10045464:	9807      	ldr	r0, [sp, #28]
10045466:	f7ff ff9b 	bl	100453a0 <cstackContextRestore>

  /* Restore the CPU peripheral configuration (NVIC, SysTick, Vector Table) */
  cpuPeriphContextRestore(cpuPeriph);
1004546a:	9806      	ldr	r0, [sp, #24]
1004546c:	f7ff ffa4 	bl	100453b8 <cpuPeriphContextRestore>

  /* Restore the AHB0 peripheral configuration */
  AHB0periphContextRestore(ahb0);
10045470:	0038      	movs	r0, r7
10045472:	f7ff ff11 	bl	10045298 <AHB0periphContextRestore>

  /* Restore the APB0 peripheral configuration */
  APB0periphContextRestore(apb0);
10045476:	0020      	movs	r0, r4
10045478:	f7ff fe40 	bl	100450fc <APB0periphContextRestore>

  /* Restore the APB1 peripheral configuration */
  APB1periphContextRestore(apb1);
1004547c:	0030      	movs	r0, r6
1004547e:	f7ff fe91 	bl	100451a4 <APB1periphContextRestore>

  /* Restore the APB2 peripheral configuration */
  APB2periphContextRestore(apb2);
10045482:	0028      	movs	r0, r5
10045484:	f7ff ff02 	bl	1004528c <APB2periphContextRestore>
}
10045488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004548a:	46c0      	nop			@ (mov r8, r8)
1004548c:	20000004 	.word	0x20000004

10045490 <LL_PWR_IsEnabledPUPDCfg>:
{
10045490:	b580      	push	{r7, lr}
10045492:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
10045494:	4b05      	ldr	r3, [pc, #20]	@ (100454ac <LL_PWR_IsEnabledPUPDCfg+0x1c>)
10045496:	681b      	ldr	r3, [r3, #0]
10045498:	2210      	movs	r2, #16
1004549a:	4013      	ands	r3, r2
1004549c:	2b10      	cmp	r3, #16
1004549e:	d101      	bne.n	100454a4 <LL_PWR_IsEnabledPUPDCfg+0x14>
100454a0:	2301      	movs	r3, #1
100454a2:	e000      	b.n	100454a6 <LL_PWR_IsEnabledPUPDCfg+0x16>
100454a4:	2300      	movs	r3, #0
}
100454a6:	0018      	movs	r0, r3
100454a8:	46bd      	mov	sp, r7
100454aa:	bd80      	pop	{r7, pc}
100454ac:	48500000 	.word	0x48500000

100454b0 <LL_PWR_EnableGPIOPullUp>:
{
100454b0:	b580      	push	{r7, lr}
100454b2:	b082      	sub	sp, #8
100454b4:	af00      	add	r7, sp, #0
100454b6:	6078      	str	r0, [r7, #4]
100454b8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
100454ba:	687b      	ldr	r3, [r7, #4]
100454bc:	3304      	adds	r3, #4
100454be:	681a      	ldr	r2, [r3, #0]
100454c0:	683b      	ldr	r3, [r7, #0]
100454c2:	43d9      	mvns	r1, r3
100454c4:	687b      	ldr	r3, [r7, #4]
100454c6:	3304      	adds	r3, #4
100454c8:	400a      	ands	r2, r1
100454ca:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
100454cc:	687b      	ldr	r3, [r7, #4]
100454ce:	6819      	ldr	r1, [r3, #0]
100454d0:	687b      	ldr	r3, [r7, #4]
100454d2:	683a      	ldr	r2, [r7, #0]
100454d4:	430a      	orrs	r2, r1
100454d6:	601a      	str	r2, [r3, #0]
}
100454d8:	46c0      	nop			@ (mov r8, r8)
100454da:	46bd      	mov	sp, r7
100454dc:	b002      	add	sp, #8
100454de:	bd80      	pop	{r7, pc}

100454e0 <LL_AHB1_GRP1_EnableClock>:
{
100454e0:	b580      	push	{r7, lr}
100454e2:	b084      	sub	sp, #16
100454e4:	af00      	add	r7, sp, #0
100454e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100454e8:	4b07      	ldr	r3, [pc, #28]	@ (10045508 <LL_AHB1_GRP1_EnableClock+0x28>)
100454ea:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100454ec:	4b06      	ldr	r3, [pc, #24]	@ (10045508 <LL_AHB1_GRP1_EnableClock+0x28>)
100454ee:	687a      	ldr	r2, [r7, #4]
100454f0:	430a      	orrs	r2, r1
100454f2:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100454f4:	4b04      	ldr	r3, [pc, #16]	@ (10045508 <LL_AHB1_GRP1_EnableClock+0x28>)
100454f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100454f8:	687a      	ldr	r2, [r7, #4]
100454fa:	4013      	ands	r3, r2
100454fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100454fe:	68fb      	ldr	r3, [r7, #12]
}
10045500:	46c0      	nop			@ (mov r8, r8)
10045502:	46bd      	mov	sp, r7
10045504:	b004      	add	sp, #16
10045506:	bd80      	pop	{r7, pc}
10045508:	48400000 	.word	0x48400000

1004550c <LL_APB1_GRP1_EnableClock>:
{
1004550c:	b580      	push	{r7, lr}
1004550e:	b084      	sub	sp, #16
10045510:	af00      	add	r7, sp, #0
10045512:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10045514:	4b07      	ldr	r3, [pc, #28]	@ (10045534 <LL_APB1_GRP1_EnableClock+0x28>)
10045516:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10045518:	4b06      	ldr	r3, [pc, #24]	@ (10045534 <LL_APB1_GRP1_EnableClock+0x28>)
1004551a:	687a      	ldr	r2, [r7, #4]
1004551c:	430a      	orrs	r2, r1
1004551e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10045520:	4b04      	ldr	r3, [pc, #16]	@ (10045534 <LL_APB1_GRP1_EnableClock+0x28>)
10045522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10045524:	687a      	ldr	r2, [r7, #4]
10045526:	4013      	ands	r3, r2
10045528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004552a:	68fb      	ldr	r3, [r7, #12]
}
1004552c:	46c0      	nop			@ (mov r8, r8)
1004552e:	46bd      	mov	sp, r7
10045530:	b004      	add	sp, #16
10045532:	bd80      	pop	{r7, pc}
10045534:	48400000 	.word	0x48400000

10045538 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
10045538:	b580      	push	{r7, lr}
1004553a:	b084      	sub	sp, #16
1004553c:	af00      	add	r7, sp, #0
1004553e:	0002      	movs	r2, r0
10045540:	6039      	str	r1, [r7, #0]
10045542:	1dfb      	adds	r3, r7, #7
10045544:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
10045546:	2300      	movs	r3, #0
10045548:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
1004554a:	683b      	ldr	r3, [r7, #0]
1004554c:	2b00      	cmp	r3, #0
1004554e:	d103      	bne.n	10045558 <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
10045550:	2302      	movs	r3, #2
10045552:	425b      	negs	r3, r3
10045554:	60fb      	str	r3, [r7, #12]
10045556:	e026      	b.n	100455a6 <BSP_COM_Init+0x6e>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
10045558:	1dfb      	adds	r3, r7, #7
1004555a:	7819      	ldrb	r1, [r3, #0]
1004555c:	1dfb      	adds	r3, r7, #7
1004555e:	781a      	ldrb	r2, [r3, #0]
10045560:	4b13      	ldr	r3, [pc, #76]	@ (100455b0 <BSP_COM_Init+0x78>)
10045562:	0089      	lsls	r1, r1, #2
10045564:	58c9      	ldr	r1, [r1, r3]
10045566:	4b13      	ldr	r3, [pc, #76]	@ (100455b4 <BSP_COM_Init+0x7c>)
10045568:	2094      	movs	r0, #148	@ 0x94
1004556a:	4342      	muls	r2, r0
1004556c:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
1004556e:	1dfb      	adds	r3, r7, #7
10045570:	781b      	ldrb	r3, [r3, #0]
10045572:	2294      	movs	r2, #148	@ 0x94
10045574:	435a      	muls	r2, r3
10045576:	4b0f      	ldr	r3, [pc, #60]	@ (100455b4 <BSP_COM_Init+0x7c>)
10045578:	18d3      	adds	r3, r2, r3
1004557a:	0018      	movs	r0, r3
1004557c:	f000 f868 	bl	10045650 <UART_MspInit>
        status = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
10045580:	68fb      	ldr	r3, [r7, #12]
10045582:	2b00      	cmp	r3, #0
10045584:	d10f      	bne.n	100455a6 <BSP_COM_Init+0x6e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
10045586:	1dfb      	adds	r3, r7, #7
10045588:	781b      	ldrb	r3, [r3, #0]
1004558a:	2294      	movs	r2, #148	@ 0x94
1004558c:	435a      	muls	r2, r3
1004558e:	4b09      	ldr	r3, [pc, #36]	@ (100455b4 <BSP_COM_Init+0x7c>)
10045590:	18d3      	adds	r3, r2, r3
10045592:	683a      	ldr	r2, [r7, #0]
10045594:	0011      	movs	r1, r2
10045596:	0018      	movs	r0, r3
10045598:	f000 f828 	bl	100455ec <MX_USART1_Init>
1004559c:	1e03      	subs	r3, r0, #0
1004559e:	d002      	beq.n	100455a6 <BSP_COM_Init+0x6e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
100455a0:	2304      	movs	r3, #4
100455a2:	425b      	negs	r3, r3
100455a4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return status;
100455a6:	68fb      	ldr	r3, [r7, #12]
}
100455a8:	0018      	movs	r0, r3
100455aa:	46bd      	mov	sp, r7
100455ac:	b004      	add	sp, #16
100455ae:	bd80      	pop	{r7, pc}
100455b0:	20000d0c 	.word	0x20000d0c
100455b4:	20000904 	.word	0x20000904

100455b8 <__io_putchar>:
  return 1;
}

#elif defined(__GNUC__)
int __io_putchar(int ch)
{
100455b8:	b580      	push	{r7, lr}
100455ba:	b082      	sub	sp, #8
100455bc:	af00      	add	r7, sp, #0
100455be:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
100455c0:	4b08      	ldr	r3, [pc, #32]	@ (100455e4 <__io_putchar+0x2c>)
100455c2:	781b      	ldrb	r3, [r3, #0]
100455c4:	001a      	movs	r2, r3
100455c6:	2394      	movs	r3, #148	@ 0x94
100455c8:	435a      	muls	r2, r3
100455ca:	4b07      	ldr	r3, [pc, #28]	@ (100455e8 <__io_putchar+0x30>)
100455cc:	18d0      	adds	r0, r2, r3
100455ce:	23fa      	movs	r3, #250	@ 0xfa
100455d0:	009b      	lsls	r3, r3, #2
100455d2:	1d39      	adds	r1, r7, #4
100455d4:	2201      	movs	r2, #1
100455d6:	f004 f9b1 	bl	1004993c <HAL_UART_Transmit>
  return ch;
100455da:	687b      	ldr	r3, [r7, #4]
}
100455dc:	0018      	movs	r0, r3
100455de:	46bd      	mov	sp, r7
100455e0:	b002      	add	sp, #8
100455e2:	bd80      	pop	{r7, pc}
100455e4:	20000998 	.word	0x20000998
100455e8:	20000904 	.word	0x20000904

100455ec <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
100455ec:	b580      	push	{r7, lr}
100455ee:	b082      	sub	sp, #8
100455f0:	af00      	add	r7, sp, #0
100455f2:	6078      	str	r0, [r7, #4]
100455f4:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
100455f6:	683b      	ldr	r3, [r7, #0]
100455f8:	681a      	ldr	r2, [r3, #0]
100455fa:	687b      	ldr	r3, [r7, #4]
100455fc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
100455fe:	683b      	ldr	r3, [r7, #0]
10045600:	685a      	ldr	r2, [r3, #4]
10045602:	687b      	ldr	r3, [r7, #4]
10045604:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
10045606:	683b      	ldr	r3, [r7, #0]
10045608:	891b      	ldrh	r3, [r3, #8]
1004560a:	001a      	movs	r2, r3
1004560c:	687b      	ldr	r3, [r7, #4]
1004560e:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
10045610:	683b      	ldr	r3, [r7, #0]
10045612:	895b      	ldrh	r3, [r3, #10]
10045614:	001a      	movs	r2, r3
10045616:	687b      	ldr	r3, [r7, #4]
10045618:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
1004561a:	687b      	ldr	r3, [r7, #4]
1004561c:	220c      	movs	r2, #12
1004561e:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
10045620:	683b      	ldr	r3, [r7, #0]
10045622:	899b      	ldrh	r3, [r3, #12]
10045624:	001a      	movs	r2, r3
10045626:	687b      	ldr	r3, [r7, #4]
10045628:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
1004562a:	687b      	ldr	r3, [r7, #4]
1004562c:	2280      	movs	r2, #128	@ 0x80
1004562e:	0212      	lsls	r2, r2, #8
10045630:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10045632:	687b      	ldr	r3, [r7, #4]
10045634:	2200      	movs	r2, #0
10045636:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
10045638:	687b      	ldr	r3, [r7, #4]
1004563a:	2200      	movs	r2, #0
1004563c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
1004563e:	687b      	ldr	r3, [r7, #4]
10045640:	0018      	movs	r0, r3
10045642:	f004 f925 	bl	10049890 <HAL_UART_Init>
10045646:	0003      	movs	r3, r0
}
10045648:	0018      	movs	r0, r3
1004564a:	46bd      	mov	sp, r7
1004564c:	b002      	add	sp, #8
1004564e:	bd80      	pop	{r7, pc}

10045650 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
10045650:	b590      	push	{r4, r7, lr}
10045652:	b089      	sub	sp, #36	@ 0x24
10045654:	af00      	add	r7, sp, #0
10045656:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
10045658:	2004      	movs	r0, #4
1004565a:	f7ff ff41 	bl	100454e0 <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
1004565e:	2008      	movs	r0, #8
10045660:	f7ff ff3e 	bl	100454e0 <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
10045664:	2380      	movs	r3, #128	@ 0x80
10045666:	00db      	lsls	r3, r3, #3
10045668:	0018      	movs	r0, r3
1004566a:	f7ff ff4f 	bl	1004550c <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
1004566e:	240c      	movs	r4, #12
10045670:	193b      	adds	r3, r7, r4
10045672:	2202      	movs	r2, #2
10045674:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
10045676:	193b      	adds	r3, r7, r4
10045678:	2202      	movs	r2, #2
1004567a:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
1004567c:	193b      	adds	r3, r7, r4
1004567e:	2202      	movs	r2, #2
10045680:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
10045682:	193b      	adds	r3, r7, r4
10045684:	2201      	movs	r2, #1
10045686:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
10045688:	193b      	adds	r3, r7, r4
1004568a:	2202      	movs	r2, #2
1004568c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
1004568e:	193a      	adds	r2, r7, r4
10045690:	2390      	movs	r3, #144	@ 0x90
10045692:	05db      	lsls	r3, r3, #23
10045694:	0011      	movs	r1, r2
10045696:	0018      	movs	r0, r3
10045698:	f000 fc90 	bl	10045fbc <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
1004569c:	f7ff fef8 	bl	10045490 <LL_PWR_IsEnabledPUPDCfg>
100456a0:	1e03      	subs	r3, r0, #0
100456a2:	d006      	beq.n	100456b2 <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
100456a4:	193b      	adds	r3, r7, r4
100456a6:	681b      	ldr	r3, [r3, #0]
100456a8:	4a0a      	ldr	r2, [pc, #40]	@ (100456d4 <UART_MspInit+0x84>)
100456aa:	0019      	movs	r1, r3
100456ac:	0010      	movs	r0, r2
100456ae:	f7ff feff 	bl	100454b0 <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
100456b2:	210c      	movs	r1, #12
100456b4:	187b      	adds	r3, r7, r1
100456b6:	2201      	movs	r2, #1
100456b8:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
100456ba:	187b      	adds	r3, r7, r1
100456bc:	2200      	movs	r2, #0
100456be:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
100456c0:	187b      	adds	r3, r7, r1
100456c2:	4a05      	ldr	r2, [pc, #20]	@ (100456d8 <UART_MspInit+0x88>)
100456c4:	0019      	movs	r1, r3
100456c6:	0010      	movs	r0, r2
100456c8:	f000 fc78 	bl	10045fbc <HAL_GPIO_Init>
}
100456cc:	46c0      	nop			@ (mov r8, r8)
100456ce:	46bd      	mov	sp, r7
100456d0:	b009      	add	sp, #36	@ 0x24
100456d2:	bd90      	pop	{r4, r7, pc}
100456d4:	48500020 	.word	0x48500020
100456d8:	48100000 	.word	0x48100000

100456dc <__NVIC_SetPriority>:
{
100456dc:	b590      	push	{r4, r7, lr}
100456de:	b083      	sub	sp, #12
100456e0:	af00      	add	r7, sp, #0
100456e2:	0002      	movs	r2, r0
100456e4:	6039      	str	r1, [r7, #0]
100456e6:	1dfb      	adds	r3, r7, #7
100456e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100456ea:	1dfb      	adds	r3, r7, #7
100456ec:	781b      	ldrb	r3, [r3, #0]
100456ee:	2b7f      	cmp	r3, #127	@ 0x7f
100456f0:	d828      	bhi.n	10045744 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100456f2:	4a2f      	ldr	r2, [pc, #188]	@ (100457b0 <__NVIC_SetPriority+0xd4>)
100456f4:	1dfb      	adds	r3, r7, #7
100456f6:	781b      	ldrb	r3, [r3, #0]
100456f8:	b25b      	sxtb	r3, r3
100456fa:	089b      	lsrs	r3, r3, #2
100456fc:	33c0      	adds	r3, #192	@ 0xc0
100456fe:	009b      	lsls	r3, r3, #2
10045700:	589b      	ldr	r3, [r3, r2]
10045702:	1dfa      	adds	r2, r7, #7
10045704:	7812      	ldrb	r2, [r2, #0]
10045706:	0011      	movs	r1, r2
10045708:	2203      	movs	r2, #3
1004570a:	400a      	ands	r2, r1
1004570c:	00d2      	lsls	r2, r2, #3
1004570e:	21ff      	movs	r1, #255	@ 0xff
10045710:	4091      	lsls	r1, r2
10045712:	000a      	movs	r2, r1
10045714:	43d2      	mvns	r2, r2
10045716:	401a      	ands	r2, r3
10045718:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004571a:	683b      	ldr	r3, [r7, #0]
1004571c:	019b      	lsls	r3, r3, #6
1004571e:	22ff      	movs	r2, #255	@ 0xff
10045720:	401a      	ands	r2, r3
10045722:	1dfb      	adds	r3, r7, #7
10045724:	781b      	ldrb	r3, [r3, #0]
10045726:	0018      	movs	r0, r3
10045728:	2303      	movs	r3, #3
1004572a:	4003      	ands	r3, r0
1004572c:	00db      	lsls	r3, r3, #3
1004572e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045730:	481f      	ldr	r0, [pc, #124]	@ (100457b0 <__NVIC_SetPriority+0xd4>)
10045732:	1dfb      	adds	r3, r7, #7
10045734:	781b      	ldrb	r3, [r3, #0]
10045736:	b25b      	sxtb	r3, r3
10045738:	089b      	lsrs	r3, r3, #2
1004573a:	430a      	orrs	r2, r1
1004573c:	33c0      	adds	r3, #192	@ 0xc0
1004573e:	009b      	lsls	r3, r3, #2
10045740:	501a      	str	r2, [r3, r0]
}
10045742:	e031      	b.n	100457a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045744:	4a1b      	ldr	r2, [pc, #108]	@ (100457b4 <__NVIC_SetPriority+0xd8>)
10045746:	1dfb      	adds	r3, r7, #7
10045748:	781b      	ldrb	r3, [r3, #0]
1004574a:	0019      	movs	r1, r3
1004574c:	230f      	movs	r3, #15
1004574e:	400b      	ands	r3, r1
10045750:	3b08      	subs	r3, #8
10045752:	089b      	lsrs	r3, r3, #2
10045754:	3306      	adds	r3, #6
10045756:	009b      	lsls	r3, r3, #2
10045758:	18d3      	adds	r3, r2, r3
1004575a:	3304      	adds	r3, #4
1004575c:	681b      	ldr	r3, [r3, #0]
1004575e:	1dfa      	adds	r2, r7, #7
10045760:	7812      	ldrb	r2, [r2, #0]
10045762:	0011      	movs	r1, r2
10045764:	2203      	movs	r2, #3
10045766:	400a      	ands	r2, r1
10045768:	00d2      	lsls	r2, r2, #3
1004576a:	21ff      	movs	r1, #255	@ 0xff
1004576c:	4091      	lsls	r1, r2
1004576e:	000a      	movs	r2, r1
10045770:	43d2      	mvns	r2, r2
10045772:	401a      	ands	r2, r3
10045774:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10045776:	683b      	ldr	r3, [r7, #0]
10045778:	019b      	lsls	r3, r3, #6
1004577a:	22ff      	movs	r2, #255	@ 0xff
1004577c:	401a      	ands	r2, r3
1004577e:	1dfb      	adds	r3, r7, #7
10045780:	781b      	ldrb	r3, [r3, #0]
10045782:	0018      	movs	r0, r3
10045784:	2303      	movs	r3, #3
10045786:	4003      	ands	r3, r0
10045788:	00db      	lsls	r3, r3, #3
1004578a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004578c:	4809      	ldr	r0, [pc, #36]	@ (100457b4 <__NVIC_SetPriority+0xd8>)
1004578e:	1dfb      	adds	r3, r7, #7
10045790:	781b      	ldrb	r3, [r3, #0]
10045792:	001c      	movs	r4, r3
10045794:	230f      	movs	r3, #15
10045796:	4023      	ands	r3, r4
10045798:	3b08      	subs	r3, #8
1004579a:	089b      	lsrs	r3, r3, #2
1004579c:	430a      	orrs	r2, r1
1004579e:	3306      	adds	r3, #6
100457a0:	009b      	lsls	r3, r3, #2
100457a2:	18c3      	adds	r3, r0, r3
100457a4:	3304      	adds	r3, #4
100457a6:	601a      	str	r2, [r3, #0]
}
100457a8:	46c0      	nop			@ (mov r8, r8)
100457aa:	46bd      	mov	sp, r7
100457ac:	b003      	add	sp, #12
100457ae:	bd90      	pop	{r4, r7, pc}
100457b0:	e000e100 	.word	0xe000e100
100457b4:	e000ed00 	.word	0xe000ed00

100457b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
100457b8:	b580      	push	{r7, lr}
100457ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
100457bc:	f3bf 8f4f 	dsb	sy
}
100457c0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100457c2:	4b04      	ldr	r3, [pc, #16]	@ (100457d4 <__NVIC_SystemReset+0x1c>)
100457c4:	4a04      	ldr	r2, [pc, #16]	@ (100457d8 <__NVIC_SystemReset+0x20>)
100457c6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100457c8:	f3bf 8f4f 	dsb	sy
}
100457cc:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100457ce:	46c0      	nop			@ (mov r8, r8)
100457d0:	e7fd      	b.n	100457ce <__NVIC_SystemReset+0x16>
100457d2:	46c0      	nop			@ (mov r8, r8)
100457d4:	e000ed00 	.word	0xe000ed00
100457d8:	05fa0004 	.word	0x05fa0004

100457dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
100457dc:	b590      	push	{r4, r7, lr}
100457de:	b087      	sub	sp, #28
100457e0:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
100457e2:	4a64      	ldr	r2, [pc, #400]	@ (10045974 <SystemInit+0x198>)
100457e4:	2394      	movs	r3, #148	@ 0x94
100457e6:	58d3      	ldr	r3, [r2, r3]
100457e8:	2b00      	cmp	r3, #0
100457ea:	d10e      	bne.n	1004580a <SystemInit+0x2e>
100457ec:	4b62      	ldr	r3, [pc, #392]	@ (10045978 <SystemInit+0x19c>)
100457ee:	691b      	ldr	r3, [r3, #16]
100457f0:	2b00      	cmp	r3, #0
100457f2:	d103      	bne.n	100457fc <SystemInit+0x20>
100457f4:	4b60      	ldr	r3, [pc, #384]	@ (10045978 <SystemInit+0x19c>)
100457f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100457f8:	2b00      	cmp	r3, #0
100457fa:	d006      	beq.n	1004580a <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
100457fc:	4b5f      	ldr	r3, [pc, #380]	@ (1004597c <SystemInit+0x1a0>)
100457fe:	2201      	movs	r2, #1
10045800:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
10045802:	f7fa fcf1 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10045806:	f7ff ffd7 	bl	100457b8 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
1004580a:	4b5d      	ldr	r3, [pc, #372]	@ (10045980 <SystemInit+0x1a4>)
1004580c:	4a5d      	ldr	r2, [pc, #372]	@ (10045984 <SystemInit+0x1a8>)
1004580e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
10045810:	4b5b      	ldr	r3, [pc, #364]	@ (10045980 <SystemInit+0x1a4>)
10045812:	689a      	ldr	r2, [r3, #8]
10045814:	4b59      	ldr	r3, [pc, #356]	@ (1004597c <SystemInit+0x1a0>)
10045816:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10045818:	4b57      	ldr	r3, [pc, #348]	@ (10045978 <SystemInit+0x19c>)
1004581a:	685a      	ldr	r2, [r3, #4]
1004581c:	4b56      	ldr	r3, [pc, #344]	@ (10045978 <SystemInit+0x19c>)
1004581e:	2120      	movs	r1, #32
10045820:	430a      	orrs	r2, r1
10045822:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET1 */
  
#if defined(PWR_CR2_RAMRET2)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET2);
10045824:	4b54      	ldr	r3, [pc, #336]	@ (10045978 <SystemInit+0x19c>)
10045826:	685a      	ldr	r2, [r3, #4]
10045828:	4b53      	ldr	r3, [pc, #332]	@ (10045978 <SystemInit+0x19c>)
1004582a:	2140      	movs	r1, #64	@ 0x40
1004582c:	430a      	orrs	r2, r1
1004582e:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET2 */
  
#if defined(PWR_CR2_RAMRET3)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
10045830:	4b51      	ldr	r3, [pc, #324]	@ (10045978 <SystemInit+0x19c>)
10045832:	685a      	ldr	r2, [r3, #4]
10045834:	4b50      	ldr	r3, [pc, #320]	@ (10045978 <SystemInit+0x19c>)
10045836:	2180      	movs	r1, #128	@ 0x80
10045838:	430a      	orrs	r2, r1
1004583a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
1004583c:	4b4e      	ldr	r3, [pc, #312]	@ (10045978 <SystemInit+0x19c>)
1004583e:	685a      	ldr	r2, [r3, #4]
10045840:	4b4d      	ldr	r3, [pc, #308]	@ (10045978 <SystemInit+0x19c>)
10045842:	4951      	ldr	r1, [pc, #324]	@ (10045988 <SystemInit+0x1ac>)
10045844:	400a      	ands	r2, r1
10045846:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
10045848:	46c0      	nop			@ (mov r8, r8)
1004584a:	4b4b      	ldr	r3, [pc, #300]	@ (10045978 <SystemInit+0x19c>)
1004584c:	695b      	ldr	r3, [r3, #20]
1004584e:	2204      	movs	r2, #4
10045850:	4013      	ands	r3, r2
10045852:	2b04      	cmp	r3, #4
10045854:	d1f9      	bne.n	1004584a <SystemInit+0x6e>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
10045856:	4b48      	ldr	r3, [pc, #288]	@ (10045978 <SystemInit+0x19c>)
10045858:	69db      	ldr	r3, [r3, #28]
1004585a:	2230      	movs	r2, #48	@ 0x30
1004585c:	4393      	bics	r3, r2
1004585e:	001a      	movs	r2, r3
10045860:	4b45      	ldr	r3, [pc, #276]	@ (10045978 <SystemInit+0x19c>)
10045862:	2120      	movs	r1, #32
10045864:	430a      	orrs	r2, r1
10045866:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
10045868:	4b43      	ldr	r3, [pc, #268]	@ (10045978 <SystemInit+0x19c>)
1004586a:	69da      	ldr	r2, [r3, #28]
1004586c:	4b42      	ldr	r3, [pc, #264]	@ (10045978 <SystemInit+0x19c>)
1004586e:	4947      	ldr	r1, [pc, #284]	@ (1004598c <SystemInit+0x1b0>)
10045870:	400a      	ands	r2, r1
10045872:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10045874:	4b40      	ldr	r3, [pc, #256]	@ (10045978 <SystemInit+0x19c>)
10045876:	69da      	ldr	r2, [r3, #28]
10045878:	4b3f      	ldr	r3, [pc, #252]	@ (10045978 <SystemInit+0x19c>)
1004587a:	2180      	movs	r1, #128	@ 0x80
1004587c:	0049      	lsls	r1, r1, #1
1004587e:	430a      	orrs	r2, r1
10045880:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10045882:	4b43      	ldr	r3, [pc, #268]	@ (10045990 <SystemInit+0x1b4>)
10045884:	681b      	ldr	r3, [r3, #0]
10045886:	4a43      	ldr	r2, [pc, #268]	@ (10045994 <SystemInit+0x1b8>)
10045888:	4293      	cmp	r3, r2
1004588a:	d055      	beq.n	10045938 <SystemInit+0x15c>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
1004588c:	231f      	movs	r3, #31
1004588e:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10045890:	2308      	movs	r3, #8
10045892:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10045894:	230a      	movs	r3, #10
10045896:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10045898:	2303      	movs	r3, #3
1004589a:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
1004589c:	4b35      	ldr	r3, [pc, #212]	@ (10045974 <SystemInit+0x198>)
1004589e:	68db      	ldr	r3, [r3, #12]
100458a0:	221e      	movs	r2, #30
100458a2:	4393      	bics	r3, r2
100458a4:	0019      	movs	r1, r3
100458a6:	68fb      	ldr	r3, [r7, #12]
100458a8:	005a      	lsls	r2, r3, #1
100458aa:	4b32      	ldr	r3, [pc, #200]	@ (10045974 <SystemInit+0x198>)
100458ac:	430a      	orrs	r2, r1
100458ae:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
100458b0:	4b30      	ldr	r3, [pc, #192]	@ (10045974 <SystemInit+0x198>)
100458b2:	68da      	ldr	r2, [r3, #12]
100458b4:	4b2f      	ldr	r3, [pc, #188]	@ (10045974 <SystemInit+0x198>)
100458b6:	2101      	movs	r1, #1
100458b8:	430a      	orrs	r2, r1
100458ba:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
100458bc:	4b2d      	ldr	r3, [pc, #180]	@ (10045974 <SystemInit+0x198>)
100458be:	68db      	ldr	r3, [r3, #12]
100458c0:	4a35      	ldr	r2, [pc, #212]	@ (10045998 <SystemInit+0x1bc>)
100458c2:	4013      	ands	r3, r2
100458c4:	0019      	movs	r1, r3
100458c6:	693b      	ldr	r3, [r7, #16]
100458c8:	061a      	lsls	r2, r3, #24
100458ca:	4b2a      	ldr	r3, [pc, #168]	@ (10045974 <SystemInit+0x198>)
100458cc:	430a      	orrs	r2, r1
100458ce:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
100458d0:	4b28      	ldr	r3, [pc, #160]	@ (10045974 <SystemInit+0x198>)
100458d2:	68da      	ldr	r2, [r3, #12]
100458d4:	4b27      	ldr	r3, [pc, #156]	@ (10045974 <SystemInit+0x198>)
100458d6:	2180      	movs	r1, #128	@ 0x80
100458d8:	0409      	lsls	r1, r1, #16
100458da:	430a      	orrs	r2, r1
100458dc:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
100458de:	4a26      	ldr	r2, [pc, #152]	@ (10045978 <SystemInit+0x19c>)
100458e0:	2394      	movs	r3, #148	@ 0x94
100458e2:	58d3      	ldr	r3, [r2, r3]
100458e4:	4a2d      	ldr	r2, [pc, #180]	@ (1004599c <SystemInit+0x1c0>)
100458e6:	401a      	ands	r2, r3
100458e8:	68bb      	ldr	r3, [r7, #8]
100458ea:	0199      	lsls	r1, r3, #6
100458ec:	23f0      	movs	r3, #240	@ 0xf0
100458ee:	009b      	lsls	r3, r3, #2
100458f0:	400b      	ands	r3, r1
100458f2:	4921      	ldr	r1, [pc, #132]	@ (10045978 <SystemInit+0x19c>)
100458f4:	4313      	orrs	r3, r2
100458f6:	2294      	movs	r2, #148	@ 0x94
100458f8:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
100458fa:	4a1f      	ldr	r2, [pc, #124]	@ (10045978 <SystemInit+0x19c>)
100458fc:	2394      	movs	r3, #148	@ 0x94
100458fe:	58d3      	ldr	r3, [r2, r3]
10045900:	491d      	ldr	r1, [pc, #116]	@ (10045978 <SystemInit+0x19c>)
10045902:	2220      	movs	r2, #32
10045904:	4313      	orrs	r3, r2
10045906:	2294      	movs	r2, #148	@ 0x94
10045908:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
1004590a:	4a1b      	ldr	r2, [pc, #108]	@ (10045978 <SystemInit+0x19c>)
1004590c:	2394      	movs	r3, #148	@ 0x94
1004590e:	58d3      	ldr	r3, [r2, r3]
10045910:	4a23      	ldr	r2, [pc, #140]	@ (100459a0 <SystemInit+0x1c4>)
10045912:	401a      	ands	r2, r3
10045914:	687b      	ldr	r3, [r7, #4]
10045916:	02d9      	lsls	r1, r3, #11
10045918:	23e0      	movs	r3, #224	@ 0xe0
1004591a:	019b      	lsls	r3, r3, #6
1004591c:	400b      	ands	r3, r1
1004591e:	4916      	ldr	r1, [pc, #88]	@ (10045978 <SystemInit+0x19c>)
10045920:	4313      	orrs	r3, r2
10045922:	2294      	movs	r2, #148	@ 0x94
10045924:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
10045926:	4a14      	ldr	r2, [pc, #80]	@ (10045978 <SystemInit+0x19c>)
10045928:	2394      	movs	r3, #148	@ 0x94
1004592a:	58d3      	ldr	r3, [r2, r3]
1004592c:	4912      	ldr	r1, [pc, #72]	@ (10045978 <SystemInit+0x19c>)
1004592e:	2280      	movs	r2, #128	@ 0x80
10045930:	00d2      	lsls	r2, r2, #3
10045932:	4313      	orrs	r3, r2
10045934:	2294      	movs	r2, #148	@ 0x94
10045936:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
10045938:	2317      	movs	r3, #23
1004593a:	18fb      	adds	r3, r7, r3
1004593c:	2200      	movs	r2, #0
1004593e:	701a      	strb	r2, [r3, #0]
10045940:	e00d      	b.n	1004595e <SystemInit+0x182>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10045942:	2417      	movs	r4, #23
10045944:	193b      	adds	r3, r7, r4
10045946:	781b      	ldrb	r3, [r3, #0]
10045948:	b25b      	sxtb	r3, r3
1004594a:	2103      	movs	r1, #3
1004594c:	0018      	movs	r0, r3
1004594e:	f7ff fec5 	bl	100456dc <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10045952:	0021      	movs	r1, r4
10045954:	187b      	adds	r3, r7, r1
10045956:	781a      	ldrb	r2, [r3, #0]
10045958:	187b      	adds	r3, r7, r1
1004595a:	3201      	adds	r2, #1
1004595c:	701a      	strb	r2, [r3, #0]
1004595e:	2317      	movs	r3, #23
10045960:	18fb      	adds	r3, r7, r3
10045962:	781b      	ldrb	r3, [r3, #0]
10045964:	2b1f      	cmp	r3, #31
10045966:	d9ec      	bls.n	10045942 <SystemInit+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
10045968:	b662      	cpsie	i
}
1004596a:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
1004596c:	46c0      	nop			@ (mov r8, r8)
1004596e:	46bd      	mov	sp, r7
10045970:	b007      	add	sp, #28
10045972:	bd90      	pop	{r4, r7, pc}
10045974:	48400000 	.word	0x48400000
10045978:	48500000 	.word	0x48500000
1004597c:	20000004 	.word	0x20000004
10045980:	e000ed00 	.word	0xe000ed00
10045984:	10040000 	.word	0x10040000
10045988:	fffffeff 	.word	0xfffffeff
1004598c:	fffffbff 	.word	0xfffffbff
10045990:	10001ef8 	.word	0x10001ef8
10045994:	fcbceccc 	.word	0xfcbceccc
10045998:	c0ffffff 	.word	0xc0ffffff
1004599c:	fffffc3f 	.word	0xfffffc3f
100459a0:	ffffc7ff 	.word	0xffffc7ff

100459a4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
100459a4:	b580      	push	{r7, lr}
100459a6:	b082      	sub	sp, #8
100459a8:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
100459aa:	4b13      	ldr	r3, [pc, #76]	@ (100459f8 <SystemCoreClockUpdate+0x54>)
100459ac:	689b      	ldr	r3, [r3, #8]
100459ae:	085b      	lsrs	r3, r3, #1
100459b0:	b2da      	uxtb	r2, r3
100459b2:	1dfb      	adds	r3, r7, #7
100459b4:	2101      	movs	r1, #1
100459b6:	400a      	ands	r2, r1
100459b8:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
100459ba:	4b0f      	ldr	r3, [pc, #60]	@ (100459f8 <SystemCoreClockUpdate+0x54>)
100459bc:	689b      	ldr	r3, [r3, #8]
100459be:	0a1b      	lsrs	r3, r3, #8
100459c0:	b2da      	uxtb	r2, r3
100459c2:	1dbb      	adds	r3, r7, #6
100459c4:	2107      	movs	r1, #7
100459c6:	400a      	ands	r2, r1
100459c8:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
100459ca:	1dfb      	adds	r3, r7, #7
100459cc:	781b      	ldrb	r3, [r3, #0]
100459ce:	2b00      	cmp	r3, #0
100459d0:	d007      	beq.n	100459e2 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
100459d2:	1dbb      	adds	r3, r7, #6
100459d4:	781b      	ldrb	r3, [r3, #0]
100459d6:	3b01      	subs	r3, #1
100459d8:	4a08      	ldr	r2, [pc, #32]	@ (100459fc <SystemCoreClockUpdate+0x58>)
100459da:	40da      	lsrs	r2, r3
100459dc:	4b08      	ldr	r3, [pc, #32]	@ (10045a00 <SystemCoreClockUpdate+0x5c>)
100459de:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
100459e0:	e005      	b.n	100459ee <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
100459e2:	1dbb      	adds	r3, r7, #6
100459e4:	781b      	ldrb	r3, [r3, #0]
100459e6:	4a07      	ldr	r2, [pc, #28]	@ (10045a04 <SystemCoreClockUpdate+0x60>)
100459e8:	40da      	lsrs	r2, r3
100459ea:	4b05      	ldr	r3, [pc, #20]	@ (10045a00 <SystemCoreClockUpdate+0x5c>)
100459ec:	601a      	str	r2, [r3, #0]
}
100459ee:	46c0      	nop			@ (mov r8, r8)
100459f0:	46bd      	mov	sp, r7
100459f2:	b002      	add	sp, #8
100459f4:	bd80      	pop	{r7, pc}
100459f6:	46c0      	nop			@ (mov r8, r8)
100459f8:	48400000 	.word	0x48400000
100459fc:	01e84800 	.word	0x01e84800
10045a00:	20000d10 	.word	0x20000d10
10045a04:	03d09000 	.word	0x03d09000

10045a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10045a08:	b580      	push	{r7, lr}
10045a0a:	b082      	sub	sp, #8
10045a0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10045a0e:	1dfb      	adds	r3, r7, #7
10045a10:	2200      	movs	r2, #0
10045a12:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10045a14:	2003      	movs	r0, #3
10045a16:	f000 f80f 	bl	10045a38 <HAL_InitTick>
10045a1a:	1e03      	subs	r3, r0, #0
10045a1c:	d003      	beq.n	10045a26 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10045a1e:	1dfb      	adds	r3, r7, #7
10045a20:	2201      	movs	r2, #1
10045a22:	701a      	strb	r2, [r3, #0]
10045a24:	e001      	b.n	10045a2a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10045a26:	f7fb faf1 	bl	1004100c <HAL_MspInit>
  }

  /* Return function status */
  return status;
10045a2a:	1dfb      	adds	r3, r7, #7
10045a2c:	781b      	ldrb	r3, [r3, #0]
}
10045a2e:	0018      	movs	r0, r3
10045a30:	46bd      	mov	sp, r7
10045a32:	b002      	add	sp, #8
10045a34:	bd80      	pop	{r7, pc}
	...

10045a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10045a38:	b590      	push	{r4, r7, lr}
10045a3a:	b085      	sub	sp, #20
10045a3c:	af00      	add	r7, sp, #0
10045a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10045a40:	230f      	movs	r3, #15
10045a42:	18fb      	adds	r3, r7, r3
10045a44:	2200      	movs	r2, #0
10045a46:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10045a48:	4b1d      	ldr	r3, [pc, #116]	@ (10045ac0 <HAL_InitTick+0x88>)
10045a4a:	781b      	ldrb	r3, [r3, #0]
10045a4c:	2b00      	cmp	r3, #0
10045a4e:	d02c      	beq.n	10045aaa <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10045a50:	f003 fd5c 	bl	1004950c <HAL_RCC_GetSysClockFreq>
10045a54:	0004      	movs	r4, r0
10045a56:	4b1a      	ldr	r3, [pc, #104]	@ (10045ac0 <HAL_InitTick+0x88>)
10045a58:	781b      	ldrb	r3, [r3, #0]
10045a5a:	0019      	movs	r1, r3
10045a5c:	23fa      	movs	r3, #250	@ 0xfa
10045a5e:	0098      	lsls	r0, r3, #2
10045a60:	f7fa fbe6 	bl	10040230 <__udivsi3>
10045a64:	0003      	movs	r3, r0
10045a66:	0019      	movs	r1, r3
10045a68:	0020      	movs	r0, r4
10045a6a:	f7fa fbe1 	bl	10040230 <__udivsi3>
10045a6e:	0003      	movs	r3, r0
10045a70:	0018      	movs	r0, r3
10045a72:	f000 f93c 	bl	10045cee <HAL_SYSTICK_Config>
10045a76:	1e03      	subs	r3, r0, #0
10045a78:	d112      	bne.n	10045aa0 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10045a7a:	687b      	ldr	r3, [r7, #4]
10045a7c:	2b03      	cmp	r3, #3
10045a7e:	d80a      	bhi.n	10045a96 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10045a80:	6879      	ldr	r1, [r7, #4]
10045a82:	2301      	movs	r3, #1
10045a84:	425b      	negs	r3, r3
10045a86:	2200      	movs	r2, #0
10045a88:	0018      	movs	r0, r3
10045a8a:	f000 f90b 	bl	10045ca4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10045a8e:	4b0d      	ldr	r3, [pc, #52]	@ (10045ac4 <HAL_InitTick+0x8c>)
10045a90:	687a      	ldr	r2, [r7, #4]
10045a92:	601a      	str	r2, [r3, #0]
10045a94:	e00d      	b.n	10045ab2 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10045a96:	230f      	movs	r3, #15
10045a98:	18fb      	adds	r3, r7, r3
10045a9a:	2201      	movs	r2, #1
10045a9c:	701a      	strb	r2, [r3, #0]
10045a9e:	e008      	b.n	10045ab2 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10045aa0:	230f      	movs	r3, #15
10045aa2:	18fb      	adds	r3, r7, r3
10045aa4:	2201      	movs	r2, #1
10045aa6:	701a      	strb	r2, [r3, #0]
10045aa8:	e003      	b.n	10045ab2 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10045aaa:	230f      	movs	r3, #15
10045aac:	18fb      	adds	r3, r7, r3
10045aae:	2201      	movs	r2, #1
10045ab0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10045ab2:	230f      	movs	r3, #15
10045ab4:	18fb      	adds	r3, r7, r3
10045ab6:	781b      	ldrb	r3, [r3, #0]
}
10045ab8:	0018      	movs	r0, r3
10045aba:	46bd      	mov	sp, r7
10045abc:	b005      	add	sp, #20
10045abe:	bd90      	pop	{r4, r7, pc}
10045ac0:	20000d18 	.word	0x20000d18
10045ac4:	20000d14 	.word	0x20000d14

10045ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10045ac8:	b580      	push	{r7, lr}
10045aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10045acc:	4b05      	ldr	r3, [pc, #20]	@ (10045ae4 <HAL_IncTick+0x1c>)
10045ace:	781b      	ldrb	r3, [r3, #0]
10045ad0:	001a      	movs	r2, r3
10045ad2:	4b05      	ldr	r3, [pc, #20]	@ (10045ae8 <HAL_IncTick+0x20>)
10045ad4:	681b      	ldr	r3, [r3, #0]
10045ad6:	18d2      	adds	r2, r2, r3
10045ad8:	4b03      	ldr	r3, [pc, #12]	@ (10045ae8 <HAL_IncTick+0x20>)
10045ada:	601a      	str	r2, [r3, #0]
}
10045adc:	46c0      	nop			@ (mov r8, r8)
10045ade:	46bd      	mov	sp, r7
10045ae0:	bd80      	pop	{r7, pc}
10045ae2:	46c0      	nop			@ (mov r8, r8)
10045ae4:	20000d18 	.word	0x20000d18
10045ae8:	2000099c 	.word	0x2000099c

10045aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10045aec:	b580      	push	{r7, lr}
10045aee:	af00      	add	r7, sp, #0
  return uwTick;
10045af0:	4b02      	ldr	r3, [pc, #8]	@ (10045afc <HAL_GetTick+0x10>)
10045af2:	681b      	ldr	r3, [r3, #0]
}
10045af4:	0018      	movs	r0, r3
10045af6:	46bd      	mov	sp, r7
10045af8:	bd80      	pop	{r7, pc}
10045afa:	46c0      	nop			@ (mov r8, r8)
10045afc:	2000099c 	.word	0x2000099c

10045b00 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10045b00:	b580      	push	{r7, lr}
10045b02:	af00      	add	r7, sp, #0
  return uwTickPrio;
10045b04:	4b02      	ldr	r3, [pc, #8]	@ (10045b10 <HAL_GetTickPrio+0x10>)
10045b06:	681b      	ldr	r3, [r3, #0]
}
10045b08:	0018      	movs	r0, r3
10045b0a:	46bd      	mov	sp, r7
10045b0c:	bd80      	pop	{r7, pc}
10045b0e:	46c0      	nop			@ (mov r8, r8)
10045b10:	20000d14 	.word	0x20000d14

10045b14 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
10045b14:	b580      	push	{r7, lr}
10045b16:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
10045b18:	4b04      	ldr	r3, [pc, #16]	@ (10045b2c <HAL_SuspendTick+0x18>)
10045b1a:	681a      	ldr	r2, [r3, #0]
10045b1c:	4b03      	ldr	r3, [pc, #12]	@ (10045b2c <HAL_SuspendTick+0x18>)
10045b1e:	2102      	movs	r1, #2
10045b20:	438a      	bics	r2, r1
10045b22:	601a      	str	r2, [r3, #0]
}
10045b24:	46c0      	nop			@ (mov r8, r8)
10045b26:	46bd      	mov	sp, r7
10045b28:	bd80      	pop	{r7, pc}
10045b2a:	46c0      	nop			@ (mov r8, r8)
10045b2c:	e000e010 	.word	0xe000e010

10045b30 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
10045b30:	b580      	push	{r7, lr}
10045b32:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
10045b34:	4b04      	ldr	r3, [pc, #16]	@ (10045b48 <HAL_ResumeTick+0x18>)
10045b36:	681a      	ldr	r2, [r3, #0]
10045b38:	4b03      	ldr	r3, [pc, #12]	@ (10045b48 <HAL_ResumeTick+0x18>)
10045b3a:	2102      	movs	r1, #2
10045b3c:	430a      	orrs	r2, r1
10045b3e:	601a      	str	r2, [r3, #0]
}
10045b40:	46c0      	nop			@ (mov r8, r8)
10045b42:	46bd      	mov	sp, r7
10045b44:	bd80      	pop	{r7, pc}
10045b46:	46c0      	nop			@ (mov r8, r8)
10045b48:	e000e010 	.word	0xe000e010

10045b4c <__NVIC_EnableIRQ>:
{
10045b4c:	b580      	push	{r7, lr}
10045b4e:	b082      	sub	sp, #8
10045b50:	af00      	add	r7, sp, #0
10045b52:	0002      	movs	r2, r0
10045b54:	1dfb      	adds	r3, r7, #7
10045b56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10045b58:	1dfb      	adds	r3, r7, #7
10045b5a:	781b      	ldrb	r3, [r3, #0]
10045b5c:	2b7f      	cmp	r3, #127	@ 0x7f
10045b5e:	d809      	bhi.n	10045b74 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10045b60:	1dfb      	adds	r3, r7, #7
10045b62:	781b      	ldrb	r3, [r3, #0]
10045b64:	001a      	movs	r2, r3
10045b66:	231f      	movs	r3, #31
10045b68:	401a      	ands	r2, r3
10045b6a:	4b04      	ldr	r3, [pc, #16]	@ (10045b7c <__NVIC_EnableIRQ+0x30>)
10045b6c:	2101      	movs	r1, #1
10045b6e:	4091      	lsls	r1, r2
10045b70:	000a      	movs	r2, r1
10045b72:	601a      	str	r2, [r3, #0]
}
10045b74:	46c0      	nop			@ (mov r8, r8)
10045b76:	46bd      	mov	sp, r7
10045b78:	b002      	add	sp, #8
10045b7a:	bd80      	pop	{r7, pc}
10045b7c:	e000e100 	.word	0xe000e100

10045b80 <__NVIC_SetPriority>:
{
10045b80:	b590      	push	{r4, r7, lr}
10045b82:	b083      	sub	sp, #12
10045b84:	af00      	add	r7, sp, #0
10045b86:	0002      	movs	r2, r0
10045b88:	6039      	str	r1, [r7, #0]
10045b8a:	1dfb      	adds	r3, r7, #7
10045b8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10045b8e:	1dfb      	adds	r3, r7, #7
10045b90:	781b      	ldrb	r3, [r3, #0]
10045b92:	2b7f      	cmp	r3, #127	@ 0x7f
10045b94:	d828      	bhi.n	10045be8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045b96:	4a2f      	ldr	r2, [pc, #188]	@ (10045c54 <__NVIC_SetPriority+0xd4>)
10045b98:	1dfb      	adds	r3, r7, #7
10045b9a:	781b      	ldrb	r3, [r3, #0]
10045b9c:	b25b      	sxtb	r3, r3
10045b9e:	089b      	lsrs	r3, r3, #2
10045ba0:	33c0      	adds	r3, #192	@ 0xc0
10045ba2:	009b      	lsls	r3, r3, #2
10045ba4:	589b      	ldr	r3, [r3, r2]
10045ba6:	1dfa      	adds	r2, r7, #7
10045ba8:	7812      	ldrb	r2, [r2, #0]
10045baa:	0011      	movs	r1, r2
10045bac:	2203      	movs	r2, #3
10045bae:	400a      	ands	r2, r1
10045bb0:	00d2      	lsls	r2, r2, #3
10045bb2:	21ff      	movs	r1, #255	@ 0xff
10045bb4:	4091      	lsls	r1, r2
10045bb6:	000a      	movs	r2, r1
10045bb8:	43d2      	mvns	r2, r2
10045bba:	401a      	ands	r2, r3
10045bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10045bbe:	683b      	ldr	r3, [r7, #0]
10045bc0:	019b      	lsls	r3, r3, #6
10045bc2:	22ff      	movs	r2, #255	@ 0xff
10045bc4:	401a      	ands	r2, r3
10045bc6:	1dfb      	adds	r3, r7, #7
10045bc8:	781b      	ldrb	r3, [r3, #0]
10045bca:	0018      	movs	r0, r3
10045bcc:	2303      	movs	r3, #3
10045bce:	4003      	ands	r3, r0
10045bd0:	00db      	lsls	r3, r3, #3
10045bd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045bd4:	481f      	ldr	r0, [pc, #124]	@ (10045c54 <__NVIC_SetPriority+0xd4>)
10045bd6:	1dfb      	adds	r3, r7, #7
10045bd8:	781b      	ldrb	r3, [r3, #0]
10045bda:	b25b      	sxtb	r3, r3
10045bdc:	089b      	lsrs	r3, r3, #2
10045bde:	430a      	orrs	r2, r1
10045be0:	33c0      	adds	r3, #192	@ 0xc0
10045be2:	009b      	lsls	r3, r3, #2
10045be4:	501a      	str	r2, [r3, r0]
}
10045be6:	e031      	b.n	10045c4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045be8:	4a1b      	ldr	r2, [pc, #108]	@ (10045c58 <__NVIC_SetPriority+0xd8>)
10045bea:	1dfb      	adds	r3, r7, #7
10045bec:	781b      	ldrb	r3, [r3, #0]
10045bee:	0019      	movs	r1, r3
10045bf0:	230f      	movs	r3, #15
10045bf2:	400b      	ands	r3, r1
10045bf4:	3b08      	subs	r3, #8
10045bf6:	089b      	lsrs	r3, r3, #2
10045bf8:	3306      	adds	r3, #6
10045bfa:	009b      	lsls	r3, r3, #2
10045bfc:	18d3      	adds	r3, r2, r3
10045bfe:	3304      	adds	r3, #4
10045c00:	681b      	ldr	r3, [r3, #0]
10045c02:	1dfa      	adds	r2, r7, #7
10045c04:	7812      	ldrb	r2, [r2, #0]
10045c06:	0011      	movs	r1, r2
10045c08:	2203      	movs	r2, #3
10045c0a:	400a      	ands	r2, r1
10045c0c:	00d2      	lsls	r2, r2, #3
10045c0e:	21ff      	movs	r1, #255	@ 0xff
10045c10:	4091      	lsls	r1, r2
10045c12:	000a      	movs	r2, r1
10045c14:	43d2      	mvns	r2, r2
10045c16:	401a      	ands	r2, r3
10045c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10045c1a:	683b      	ldr	r3, [r7, #0]
10045c1c:	019b      	lsls	r3, r3, #6
10045c1e:	22ff      	movs	r2, #255	@ 0xff
10045c20:	401a      	ands	r2, r3
10045c22:	1dfb      	adds	r3, r7, #7
10045c24:	781b      	ldrb	r3, [r3, #0]
10045c26:	0018      	movs	r0, r3
10045c28:	2303      	movs	r3, #3
10045c2a:	4003      	ands	r3, r0
10045c2c:	00db      	lsls	r3, r3, #3
10045c2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10045c30:	4809      	ldr	r0, [pc, #36]	@ (10045c58 <__NVIC_SetPriority+0xd8>)
10045c32:	1dfb      	adds	r3, r7, #7
10045c34:	781b      	ldrb	r3, [r3, #0]
10045c36:	001c      	movs	r4, r3
10045c38:	230f      	movs	r3, #15
10045c3a:	4023      	ands	r3, r4
10045c3c:	3b08      	subs	r3, #8
10045c3e:	089b      	lsrs	r3, r3, #2
10045c40:	430a      	orrs	r2, r1
10045c42:	3306      	adds	r3, #6
10045c44:	009b      	lsls	r3, r3, #2
10045c46:	18c3      	adds	r3, r0, r3
10045c48:	3304      	adds	r3, #4
10045c4a:	601a      	str	r2, [r3, #0]
}
10045c4c:	46c0      	nop			@ (mov r8, r8)
10045c4e:	46bd      	mov	sp, r7
10045c50:	b003      	add	sp, #12
10045c52:	bd90      	pop	{r4, r7, pc}
10045c54:	e000e100 	.word	0xe000e100
10045c58:	e000ed00 	.word	0xe000ed00

10045c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10045c5c:	b580      	push	{r7, lr}
10045c5e:	b082      	sub	sp, #8
10045c60:	af00      	add	r7, sp, #0
10045c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10045c64:	687b      	ldr	r3, [r7, #4]
10045c66:	1e5a      	subs	r2, r3, #1
10045c68:	2380      	movs	r3, #128	@ 0x80
10045c6a:	045b      	lsls	r3, r3, #17
10045c6c:	429a      	cmp	r2, r3
10045c6e:	d301      	bcc.n	10045c74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10045c70:	2301      	movs	r3, #1
10045c72:	e010      	b.n	10045c96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10045c74:	4b0a      	ldr	r3, [pc, #40]	@ (10045ca0 <SysTick_Config+0x44>)
10045c76:	687a      	ldr	r2, [r7, #4]
10045c78:	3a01      	subs	r2, #1
10045c7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10045c7c:	2301      	movs	r3, #1
10045c7e:	425b      	negs	r3, r3
10045c80:	2103      	movs	r1, #3
10045c82:	0018      	movs	r0, r3
10045c84:	f7ff ff7c 	bl	10045b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10045c88:	4b05      	ldr	r3, [pc, #20]	@ (10045ca0 <SysTick_Config+0x44>)
10045c8a:	2200      	movs	r2, #0
10045c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10045c8e:	4b04      	ldr	r3, [pc, #16]	@ (10045ca0 <SysTick_Config+0x44>)
10045c90:	2207      	movs	r2, #7
10045c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10045c94:	2300      	movs	r3, #0
}
10045c96:	0018      	movs	r0, r3
10045c98:	46bd      	mov	sp, r7
10045c9a:	b002      	add	sp, #8
10045c9c:	bd80      	pop	{r7, pc}
10045c9e:	46c0      	nop			@ (mov r8, r8)
10045ca0:	e000e010 	.word	0xe000e010

10045ca4 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10045ca4:	b580      	push	{r7, lr}
10045ca6:	b084      	sub	sp, #16
10045ca8:	af00      	add	r7, sp, #0
10045caa:	60b9      	str	r1, [r7, #8]
10045cac:	607a      	str	r2, [r7, #4]
10045cae:	210f      	movs	r1, #15
10045cb0:	187b      	adds	r3, r7, r1
10045cb2:	1c02      	adds	r2, r0, #0
10045cb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10045cb6:	68ba      	ldr	r2, [r7, #8]
10045cb8:	187b      	adds	r3, r7, r1
10045cba:	781b      	ldrb	r3, [r3, #0]
10045cbc:	b25b      	sxtb	r3, r3
10045cbe:	0011      	movs	r1, r2
10045cc0:	0018      	movs	r0, r3
10045cc2:	f7ff ff5d 	bl	10045b80 <__NVIC_SetPriority>
}
10045cc6:	46c0      	nop			@ (mov r8, r8)
10045cc8:	46bd      	mov	sp, r7
10045cca:	b004      	add	sp, #16
10045ccc:	bd80      	pop	{r7, pc}

10045cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10045cce:	b580      	push	{r7, lr}
10045cd0:	b082      	sub	sp, #8
10045cd2:	af00      	add	r7, sp, #0
10045cd4:	0002      	movs	r2, r0
10045cd6:	1dfb      	adds	r3, r7, #7
10045cd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10045cda:	1dfb      	adds	r3, r7, #7
10045cdc:	781b      	ldrb	r3, [r3, #0]
10045cde:	b25b      	sxtb	r3, r3
10045ce0:	0018      	movs	r0, r3
10045ce2:	f7ff ff33 	bl	10045b4c <__NVIC_EnableIRQ>
}
10045ce6:	46c0      	nop			@ (mov r8, r8)
10045ce8:	46bd      	mov	sp, r7
10045cea:	b002      	add	sp, #8
10045cec:	bd80      	pop	{r7, pc}

10045cee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10045cee:	b580      	push	{r7, lr}
10045cf0:	b082      	sub	sp, #8
10045cf2:	af00      	add	r7, sp, #0
10045cf4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10045cf6:	687b      	ldr	r3, [r7, #4]
10045cf8:	0018      	movs	r0, r3
10045cfa:	f7ff ffaf 	bl	10045c5c <SysTick_Config>
10045cfe:	0003      	movs	r3, r0
}
10045d00:	0018      	movs	r0, r3
10045d02:	46bd      	mov	sp, r7
10045d04:	b002      	add	sp, #8
10045d06:	bd80      	pop	{r7, pc}

10045d08 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
10045d08:	b5b0      	push	{r4, r5, r7, lr}
10045d0a:	b086      	sub	sp, #24
10045d0c:	af00      	add	r7, sp, #0
10045d0e:	60f8      	str	r0, [r7, #12]
10045d10:	60b9      	str	r1, [r7, #8]
10045d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10045d14:	4b1d      	ldr	r3, [pc, #116]	@ (10045d8c <HAL_FLASH_Program+0x84>)
10045d16:	781b      	ldrb	r3, [r3, #0]
10045d18:	2b01      	cmp	r3, #1
10045d1a:	d101      	bne.n	10045d20 <HAL_FLASH_Program+0x18>
10045d1c:	2302      	movs	r3, #2
10045d1e:	e031      	b.n	10045d84 <HAL_FLASH_Program+0x7c>
10045d20:	4b1a      	ldr	r3, [pc, #104]	@ (10045d8c <HAL_FLASH_Program+0x84>)
10045d22:	2201      	movs	r2, #1
10045d24:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10045d26:	4b19      	ldr	r3, [pc, #100]	@ (10045d8c <HAL_FLASH_Program+0x84>)
10045d28:	2200      	movs	r2, #0
10045d2a:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10045d2c:	2517      	movs	r5, #23
10045d2e:	197c      	adds	r4, r7, r5
10045d30:	23fa      	movs	r3, #250	@ 0xfa
10045d32:	009b      	lsls	r3, r3, #2
10045d34:	0018      	movs	r0, r3
10045d36:	f000 f82b 	bl	10045d90 <FLASH_WaitForLastOperation>
10045d3a:	0003      	movs	r3, r0
10045d3c:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
10045d3e:	197b      	adds	r3, r7, r5
10045d40:	781b      	ldrb	r3, [r3, #0]
10045d42:	2b00      	cmp	r3, #0
10045d44:	d118      	bne.n	10045d78 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
10045d46:	68fb      	ldr	r3, [r7, #12]
10045d48:	2b00      	cmp	r3, #0
10045d4a:	d106      	bne.n	10045d5a <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
10045d4c:	687a      	ldr	r2, [r7, #4]
10045d4e:	68bb      	ldr	r3, [r7, #8]
10045d50:	0011      	movs	r1, r2
10045d52:	0018      	movs	r0, r3
10045d54:	f000 f856 	bl	10045e04 <FLASH_Program_Word>
10045d58:	e005      	b.n	10045d66 <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
10045d5a:	687a      	ldr	r2, [r7, #4]
10045d5c:	68bb      	ldr	r3, [r7, #8]
10045d5e:	0011      	movs	r1, r2
10045d60:	0018      	movs	r0, r3
10045d62:	f000 f871 	bl	10045e48 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10045d66:	2317      	movs	r3, #23
10045d68:	18fc      	adds	r4, r7, r3
10045d6a:	23fa      	movs	r3, #250	@ 0xfa
10045d6c:	009b      	lsls	r3, r3, #2
10045d6e:	0018      	movs	r0, r3
10045d70:	f000 f80e 	bl	10045d90 <FLASH_WaitForLastOperation>
10045d74:	0003      	movs	r3, r0
10045d76:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10045d78:	4b04      	ldr	r3, [pc, #16]	@ (10045d8c <HAL_FLASH_Program+0x84>)
10045d7a:	2200      	movs	r2, #0
10045d7c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
10045d7e:	2317      	movs	r3, #23
10045d80:	18fb      	adds	r3, r7, r3
10045d82:	781b      	ldrb	r3, [r3, #0]
}
10045d84:	0018      	movs	r0, r3
10045d86:	46bd      	mov	sp, r7
10045d88:	b006      	add	sp, #24
10045d8a:	bdb0      	pop	{r4, r5, r7, pc}
10045d8c:	200009a0 	.word	0x200009a0

10045d90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
10045d90:	b580      	push	{r7, lr}
10045d92:	b084      	sub	sp, #16
10045d94:	af00      	add	r7, sp, #0
10045d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10045d98:	f7ff fea8 	bl	10045aec <HAL_GetTick>
10045d9c:	0003      	movs	r3, r0
10045d9e:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10045da0:	e00c      	b.n	10045dbc <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
10045da2:	687b      	ldr	r3, [r7, #4]
10045da4:	3301      	adds	r3, #1
10045da6:	d009      	beq.n	10045dbc <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
10045da8:	f7ff fea0 	bl	10045aec <HAL_GetTick>
10045dac:	0002      	movs	r2, r0
10045dae:	68fb      	ldr	r3, [r7, #12]
10045db0:	1ad3      	subs	r3, r2, r3
10045db2:	687a      	ldr	r2, [r7, #4]
10045db4:	429a      	cmp	r2, r3
10045db6:	d801      	bhi.n	10045dbc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
10045db8:	2303      	movs	r3, #3
10045dba:	e01b      	b.n	10045df4 <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
10045dbc:	4b0f      	ldr	r3, [pc, #60]	@ (10045dfc <FLASH_WaitForLastOperation+0x6c>)
10045dbe:	691b      	ldr	r3, [r3, #16]
10045dc0:	2201      	movs	r2, #1
10045dc2:	4013      	ands	r3, r2
10045dc4:	2b01      	cmp	r3, #1
10045dc6:	d1ec      	bne.n	10045da2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
10045dc8:	4b0c      	ldr	r3, [pc, #48]	@ (10045dfc <FLASH_WaitForLastOperation+0x6c>)
10045dca:	691b      	ldr	r3, [r3, #16]
10045dcc:	220c      	movs	r2, #12
10045dce:	4013      	ands	r3, r2
10045dd0:	2b0c      	cmp	r3, #12
10045dd2:	d10e      	bne.n	10045df2 <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
10045dd4:	4b09      	ldr	r3, [pc, #36]	@ (10045dfc <FLASH_WaitForLastOperation+0x6c>)
10045dd6:	689a      	ldr	r2, [r3, #8]
10045dd8:	4b09      	ldr	r3, [pc, #36]	@ (10045e00 <FLASH_WaitForLastOperation+0x70>)
10045dda:	685b      	ldr	r3, [r3, #4]
10045ddc:	431a      	orrs	r2, r3
10045dde:	4b08      	ldr	r3, [pc, #32]	@ (10045e00 <FLASH_WaitForLastOperation+0x70>)
10045de0:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
10045de2:	4b06      	ldr	r3, [pc, #24]	@ (10045dfc <FLASH_WaitForLastOperation+0x6c>)
10045de4:	691a      	ldr	r2, [r3, #16]
10045de6:	4b05      	ldr	r3, [pc, #20]	@ (10045dfc <FLASH_WaitForLastOperation+0x6c>)
10045de8:	210c      	movs	r1, #12
10045dea:	430a      	orrs	r2, r1
10045dec:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
10045dee:	2301      	movs	r3, #1
10045df0:	e000      	b.n	10045df4 <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
10045df2:	2300      	movs	r3, #0
}
10045df4:	0018      	movs	r0, r3
10045df6:	46bd      	mov	sp, r7
10045df8:	b004      	add	sp, #16
10045dfa:	bd80      	pop	{r7, pc}
10045dfc:	40001000 	.word	0x40001000
10045e00:	200009a0 	.word	0x200009a0

10045e04 <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
10045e04:	b580      	push	{r7, lr}
10045e06:	b082      	sub	sp, #8
10045e08:	af00      	add	r7, sp, #0
10045e0a:	6078      	str	r0, [r7, #4]
10045e0c:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10045e0e:	4b0c      	ldr	r3, [pc, #48]	@ (10045e40 <FLASH_Program_Word+0x3c>)
10045e10:	691a      	ldr	r2, [r3, #16]
10045e12:	4b0b      	ldr	r3, [pc, #44]	@ (10045e40 <FLASH_Program_Word+0x3c>)
10045e14:	210f      	movs	r1, #15
10045e16:	430a      	orrs	r2, r1
10045e18:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10045e1a:	687b      	ldr	r3, [r7, #4]
10045e1c:	4a09      	ldr	r2, [pc, #36]	@ (10045e44 <FLASH_Program_Word+0x40>)
10045e1e:	4694      	mov	ip, r2
10045e20:	4463      	add	r3, ip
10045e22:	089a      	lsrs	r2, r3, #2
10045e24:	4b06      	ldr	r3, [pc, #24]	@ (10045e40 <FLASH_Program_Word+0x3c>)
10045e26:	03d2      	lsls	r2, r2, #15
10045e28:	0bd2      	lsrs	r2, r2, #15
10045e2a:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
10045e2c:	4b04      	ldr	r3, [pc, #16]	@ (10045e40 <FLASH_Program_Word+0x3c>)
10045e2e:	683a      	ldr	r2, [r7, #0]
10045e30:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
10045e32:	4b03      	ldr	r3, [pc, #12]	@ (10045e40 <FLASH_Program_Word+0x3c>)
10045e34:	2233      	movs	r2, #51	@ 0x33
10045e36:	601a      	str	r2, [r3, #0]
}
10045e38:	46c0      	nop			@ (mov r8, r8)
10045e3a:	46bd      	mov	sp, r7
10045e3c:	b002      	add	sp, #8
10045e3e:	bd80      	pop	{r7, pc}
10045e40:	40001000 	.word	0x40001000
10045e44:	effc0000 	.word	0xeffc0000

10045e48 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
10045e48:	b580      	push	{r7, lr}
10045e4a:	b084      	sub	sp, #16
10045e4c:	af00      	add	r7, sp, #0
10045e4e:	6078      	str	r0, [r7, #4]
10045e50:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
10045e52:	683b      	ldr	r3, [r7, #0]
10045e54:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10045e56:	4b17      	ldr	r3, [pc, #92]	@ (10045eb4 <FLASH_Program_Burst+0x6c>)
10045e58:	691a      	ldr	r2, [r3, #16]
10045e5a:	4b16      	ldr	r3, [pc, #88]	@ (10045eb4 <FLASH_Program_Burst+0x6c>)
10045e5c:	210f      	movs	r1, #15
10045e5e:	430a      	orrs	r2, r1
10045e60:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10045e62:	687b      	ldr	r3, [r7, #4]
10045e64:	4a14      	ldr	r2, [pc, #80]	@ (10045eb8 <FLASH_Program_Burst+0x70>)
10045e66:	4694      	mov	ip, r2
10045e68:	4463      	add	r3, ip
10045e6a:	089a      	lsrs	r2, r3, #2
10045e6c:	4b11      	ldr	r3, [pc, #68]	@ (10045eb4 <FLASH_Program_Burst+0x6c>)
10045e6e:	03d2      	lsls	r2, r2, #15
10045e70:	0bd2      	lsrs	r2, r2, #15
10045e72:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
10045e74:	4a0f      	ldr	r2, [pc, #60]	@ (10045eb4 <FLASH_Program_Burst+0x6c>)
10045e76:	68fb      	ldr	r3, [r7, #12]
10045e78:	681b      	ldr	r3, [r3, #0]
10045e7a:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
10045e7c:	68fb      	ldr	r3, [r7, #12]
10045e7e:	3304      	adds	r3, #4
10045e80:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
10045e82:	4a0c      	ldr	r2, [pc, #48]	@ (10045eb4 <FLASH_Program_Burst+0x6c>)
10045e84:	68fb      	ldr	r3, [r7, #12]
10045e86:	681b      	ldr	r3, [r3, #0]
10045e88:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
10045e8a:	68fb      	ldr	r3, [r7, #12]
10045e8c:	3304      	adds	r3, #4
10045e8e:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
10045e90:	4a08      	ldr	r2, [pc, #32]	@ (10045eb4 <FLASH_Program_Burst+0x6c>)
10045e92:	68fb      	ldr	r3, [r7, #12]
10045e94:	681b      	ldr	r3, [r3, #0]
10045e96:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
10045e98:	68fb      	ldr	r3, [r7, #12]
10045e9a:	3304      	adds	r3, #4
10045e9c:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
10045e9e:	4a05      	ldr	r2, [pc, #20]	@ (10045eb4 <FLASH_Program_Burst+0x6c>)
10045ea0:	68fb      	ldr	r3, [r7, #12]
10045ea2:	681b      	ldr	r3, [r3, #0]
10045ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
10045ea6:	4b03      	ldr	r3, [pc, #12]	@ (10045eb4 <FLASH_Program_Burst+0x6c>)
10045ea8:	22cc      	movs	r2, #204	@ 0xcc
10045eaa:	601a      	str	r2, [r3, #0]
}
10045eac:	46c0      	nop			@ (mov r8, r8)
10045eae:	46bd      	mov	sp, r7
10045eb0:	b004      	add	sp, #16
10045eb2:	bd80      	pop	{r7, pc}
10045eb4:	40001000 	.word	0x40001000
10045eb8:	effc0000 	.word	0xeffc0000

10045ebc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
10045ebc:	b5b0      	push	{r4, r5, r7, lr}
10045ebe:	b084      	sub	sp, #16
10045ec0:	af00      	add	r7, sp, #0
10045ec2:	6078      	str	r0, [r7, #4]
10045ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10045ec6:	4b27      	ldr	r3, [pc, #156]	@ (10045f64 <HAL_FLASHEx_Erase+0xa8>)
10045ec8:	781b      	ldrb	r3, [r3, #0]
10045eca:	2b01      	cmp	r3, #1
10045ecc:	d101      	bne.n	10045ed2 <HAL_FLASHEx_Erase+0x16>
10045ece:	2302      	movs	r3, #2
10045ed0:	e043      	b.n	10045f5a <HAL_FLASHEx_Erase+0x9e>
10045ed2:	4b24      	ldr	r3, [pc, #144]	@ (10045f64 <HAL_FLASHEx_Erase+0xa8>)
10045ed4:	2201      	movs	r2, #1
10045ed6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
10045ed8:	4b22      	ldr	r3, [pc, #136]	@ (10045f64 <HAL_FLASHEx_Erase+0xa8>)
10045eda:	2200      	movs	r2, #0
10045edc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
10045ede:	687b      	ldr	r3, [r7, #4]
10045ee0:	681b      	ldr	r3, [r3, #0]
10045ee2:	2bff      	cmp	r3, #255	@ 0xff
10045ee4:	d10b      	bne.n	10045efe <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
10045ee6:	f000 f83f 	bl	10045f68 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10045eea:	230f      	movs	r3, #15
10045eec:	18fc      	adds	r4, r7, r3
10045eee:	23fa      	movs	r3, #250	@ 0xfa
10045ef0:	009b      	lsls	r3, r3, #2
10045ef2:	0018      	movs	r0, r3
10045ef4:	f7ff ff4c 	bl	10045d90 <FLASH_WaitForLastOperation>
10045ef8:	0003      	movs	r3, r0
10045efa:	7023      	strb	r3, [r4, #0]
10045efc:	e027      	b.n	10045f4e <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
10045efe:	683b      	ldr	r3, [r7, #0]
10045f00:	2201      	movs	r2, #1
10045f02:	4252      	negs	r2, r2
10045f04:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10045f06:	687b      	ldr	r3, [r7, #4]
10045f08:	685b      	ldr	r3, [r3, #4]
10045f0a:	60bb      	str	r3, [r7, #8]
10045f0c:	e017      	b.n	10045f3e <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
10045f0e:	68bb      	ldr	r3, [r7, #8]
10045f10:	0018      	movs	r0, r3
10045f12:	f000 f839 	bl	10045f88 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10045f16:	250f      	movs	r5, #15
10045f18:	197c      	adds	r4, r7, r5
10045f1a:	23fa      	movs	r3, #250	@ 0xfa
10045f1c:	009b      	lsls	r3, r3, #2
10045f1e:	0018      	movs	r0, r3
10045f20:	f7ff ff36 	bl	10045d90 <FLASH_WaitForLastOperation>
10045f24:	0003      	movs	r3, r0
10045f26:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
10045f28:	197b      	adds	r3, r7, r5
10045f2a:	781b      	ldrb	r3, [r3, #0]
10045f2c:	2b00      	cmp	r3, #0
10045f2e:	d003      	beq.n	10045f38 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
10045f30:	683b      	ldr	r3, [r7, #0]
10045f32:	68ba      	ldr	r2, [r7, #8]
10045f34:	601a      	str	r2, [r3, #0]
        break;
10045f36:	e00a      	b.n	10045f4e <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10045f38:	68bb      	ldr	r3, [r7, #8]
10045f3a:	3301      	adds	r3, #1
10045f3c:	60bb      	str	r3, [r7, #8]
10045f3e:	687b      	ldr	r3, [r7, #4]
10045f40:	685a      	ldr	r2, [r3, #4]
10045f42:	687b      	ldr	r3, [r7, #4]
10045f44:	689b      	ldr	r3, [r3, #8]
10045f46:	18d3      	adds	r3, r2, r3
10045f48:	68ba      	ldr	r2, [r7, #8]
10045f4a:	429a      	cmp	r2, r3
10045f4c:	d3df      	bcc.n	10045f0e <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10045f4e:	4b05      	ldr	r3, [pc, #20]	@ (10045f64 <HAL_FLASHEx_Erase+0xa8>)
10045f50:	2200      	movs	r2, #0
10045f52:	701a      	strb	r2, [r3, #0]

  return status;
10045f54:	230f      	movs	r3, #15
10045f56:	18fb      	adds	r3, r7, r3
10045f58:	781b      	ldrb	r3, [r3, #0]
}
10045f5a:	0018      	movs	r0, r3
10045f5c:	46bd      	mov	sp, r7
10045f5e:	b004      	add	sp, #16
10045f60:	bdb0      	pop	{r4, r5, r7, pc}
10045f62:	46c0      	nop			@ (mov r8, r8)
10045f64:	200009a0 	.word	0x200009a0

10045f68 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
10045f68:	b580      	push	{r7, lr}
10045f6a:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10045f6c:	4b05      	ldr	r3, [pc, #20]	@ (10045f84 <FLASH_MassErase+0x1c>)
10045f6e:	691a      	ldr	r2, [r3, #16]
10045f70:	4b04      	ldr	r3, [pc, #16]	@ (10045f84 <FLASH_MassErase+0x1c>)
10045f72:	210f      	movs	r1, #15
10045f74:	430a      	orrs	r2, r1
10045f76:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
10045f78:	4b02      	ldr	r3, [pc, #8]	@ (10045f84 <FLASH_MassErase+0x1c>)
10045f7a:	2222      	movs	r2, #34	@ 0x22
10045f7c:	601a      	str	r2, [r3, #0]
}
10045f7e:	46c0      	nop			@ (mov r8, r8)
10045f80:	46bd      	mov	sp, r7
10045f82:	bd80      	pop	{r7, pc}
10045f84:	40001000 	.word	0x40001000

10045f88 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
10045f88:	b580      	push	{r7, lr}
10045f8a:	b082      	sub	sp, #8
10045f8c:	af00      	add	r7, sp, #0
10045f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10045f90:	4b09      	ldr	r3, [pc, #36]	@ (10045fb8 <FLASH_PageErase+0x30>)
10045f92:	691a      	ldr	r2, [r3, #16]
10045f94:	4b08      	ldr	r3, [pc, #32]	@ (10045fb8 <FLASH_PageErase+0x30>)
10045f96:	210f      	movs	r1, #15
10045f98:	430a      	orrs	r2, r1
10045f9a:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
10045f9c:	687b      	ldr	r3, [r7, #4]
10045f9e:	02db      	lsls	r3, r3, #11
10045fa0:	089a      	lsrs	r2, r3, #2
10045fa2:	4b05      	ldr	r3, [pc, #20]	@ (10045fb8 <FLASH_PageErase+0x30>)
10045fa4:	03d2      	lsls	r2, r2, #15
10045fa6:	0bd2      	lsrs	r2, r2, #15
10045fa8:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
10045faa:	4b03      	ldr	r3, [pc, #12]	@ (10045fb8 <FLASH_PageErase+0x30>)
10045fac:	2211      	movs	r2, #17
10045fae:	601a      	str	r2, [r3, #0]
}
10045fb0:	46c0      	nop			@ (mov r8, r8)
10045fb2:	46bd      	mov	sp, r7
10045fb4:	b002      	add	sp, #8
10045fb6:	bd80      	pop	{r7, pc}
10045fb8:	40001000 	.word	0x40001000

10045fbc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10045fbc:	b580      	push	{r7, lr}
10045fbe:	b086      	sub	sp, #24
10045fc0:	af00      	add	r7, sp, #0
10045fc2:	6078      	str	r0, [r7, #4]
10045fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10045fc6:	2300      	movs	r3, #0
10045fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
10045fca:	e194      	b.n	100462f6 <HAL_GPIO_Init+0x33a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
10045fcc:	683b      	ldr	r3, [r7, #0]
10045fce:	681b      	ldr	r3, [r3, #0]
10045fd0:	2101      	movs	r1, #1
10045fd2:	697a      	ldr	r2, [r7, #20]
10045fd4:	4091      	lsls	r1, r2
10045fd6:	000a      	movs	r2, r1
10045fd8:	4013      	ands	r3, r2
10045fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10045fdc:	68fb      	ldr	r3, [r7, #12]
10045fde:	2b00      	cmp	r3, #0
10045fe0:	d100      	bne.n	10045fe4 <HAL_GPIO_Init+0x28>
10045fe2:	e185      	b.n	100462f0 <HAL_GPIO_Init+0x334>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
10045fe4:	683b      	ldr	r3, [r7, #0]
10045fe6:	685b      	ldr	r3, [r3, #4]
10045fe8:	2203      	movs	r2, #3
10045fea:	4013      	ands	r3, r2
10045fec:	2b01      	cmp	r3, #1
10045fee:	d005      	beq.n	10045ffc <HAL_GPIO_Init+0x40>
10045ff0:	683b      	ldr	r3, [r7, #0]
10045ff2:	685b      	ldr	r3, [r3, #4]
10045ff4:	2203      	movs	r2, #3
10045ff6:	4013      	ands	r3, r2
10045ff8:	2b02      	cmp	r3, #2
10045ffa:	d130      	bne.n	1004605e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10045ffc:	687b      	ldr	r3, [r7, #4]
10045ffe:	689b      	ldr	r3, [r3, #8]
10046000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10046002:	697b      	ldr	r3, [r7, #20]
10046004:	005b      	lsls	r3, r3, #1
10046006:	2203      	movs	r2, #3
10046008:	409a      	lsls	r2, r3
1004600a:	0013      	movs	r3, r2
1004600c:	43da      	mvns	r2, r3
1004600e:	693b      	ldr	r3, [r7, #16]
10046010:	4013      	ands	r3, r2
10046012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10046014:	683b      	ldr	r3, [r7, #0]
10046016:	68da      	ldr	r2, [r3, #12]
10046018:	697b      	ldr	r3, [r7, #20]
1004601a:	005b      	lsls	r3, r3, #1
1004601c:	409a      	lsls	r2, r3
1004601e:	0013      	movs	r3, r2
10046020:	693a      	ldr	r2, [r7, #16]
10046022:	4313      	orrs	r3, r2
10046024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
10046026:	687b      	ldr	r3, [r7, #4]
10046028:	693a      	ldr	r2, [r7, #16]
1004602a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
1004602c:	687b      	ldr	r3, [r7, #4]
1004602e:	685b      	ldr	r3, [r3, #4]
10046030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10046032:	2201      	movs	r2, #1
10046034:	697b      	ldr	r3, [r7, #20]
10046036:	409a      	lsls	r2, r3
10046038:	0013      	movs	r3, r2
1004603a:	43da      	mvns	r2, r3
1004603c:	693b      	ldr	r3, [r7, #16]
1004603e:	4013      	ands	r3, r2
10046040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10046042:	683b      	ldr	r3, [r7, #0]
10046044:	685b      	ldr	r3, [r3, #4]
10046046:	091b      	lsrs	r3, r3, #4
10046048:	2201      	movs	r2, #1
1004604a:	401a      	ands	r2, r3
1004604c:	697b      	ldr	r3, [r7, #20]
1004604e:	409a      	lsls	r2, r3
10046050:	0013      	movs	r3, r2
10046052:	693a      	ldr	r2, [r7, #16]
10046054:	4313      	orrs	r3, r2
10046056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10046058:	687b      	ldr	r3, [r7, #4]
1004605a:	693a      	ldr	r2, [r7, #16]
1004605c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
1004605e:	683b      	ldr	r3, [r7, #0]
10046060:	685b      	ldr	r3, [r3, #4]
10046062:	2203      	movs	r2, #3
10046064:	4013      	ands	r3, r2
10046066:	2b03      	cmp	r3, #3
10046068:	d017      	beq.n	1004609a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
1004606a:	687b      	ldr	r3, [r7, #4]
1004606c:	68db      	ldr	r3, [r3, #12]
1004606e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10046070:	697b      	ldr	r3, [r7, #20]
10046072:	005b      	lsls	r3, r3, #1
10046074:	2203      	movs	r2, #3
10046076:	409a      	lsls	r2, r3
10046078:	0013      	movs	r3, r2
1004607a:	43da      	mvns	r2, r3
1004607c:	693b      	ldr	r3, [r7, #16]
1004607e:	4013      	ands	r3, r2
10046080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10046082:	683b      	ldr	r3, [r7, #0]
10046084:	689a      	ldr	r2, [r3, #8]
10046086:	697b      	ldr	r3, [r7, #20]
10046088:	005b      	lsls	r3, r3, #1
1004608a:	409a      	lsls	r2, r3
1004608c:	0013      	movs	r3, r2
1004608e:	693a      	ldr	r2, [r7, #16]
10046090:	4313      	orrs	r3, r2
10046092:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10046094:	687b      	ldr	r3, [r7, #4]
10046096:	693a      	ldr	r2, [r7, #16]
10046098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
1004609a:	683b      	ldr	r3, [r7, #0]
1004609c:	685b      	ldr	r3, [r3, #4]
1004609e:	2203      	movs	r2, #3
100460a0:	4013      	ands	r3, r2
100460a2:	2b02      	cmp	r3, #2
100460a4:	d123      	bne.n	100460ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100460a6:	697b      	ldr	r3, [r7, #20]
100460a8:	08da      	lsrs	r2, r3, #3
100460aa:	687b      	ldr	r3, [r7, #4]
100460ac:	3208      	adds	r2, #8
100460ae:	0092      	lsls	r2, r2, #2
100460b0:	58d3      	ldr	r3, [r2, r3]
100460b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
100460b4:	697b      	ldr	r3, [r7, #20]
100460b6:	2207      	movs	r2, #7
100460b8:	4013      	ands	r3, r2
100460ba:	009b      	lsls	r3, r3, #2
100460bc:	220f      	movs	r2, #15
100460be:	409a      	lsls	r2, r3
100460c0:	0013      	movs	r3, r2
100460c2:	43da      	mvns	r2, r3
100460c4:	693b      	ldr	r3, [r7, #16]
100460c6:	4013      	ands	r3, r2
100460c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100460ca:	683b      	ldr	r3, [r7, #0]
100460cc:	691a      	ldr	r2, [r3, #16]
100460ce:	697b      	ldr	r3, [r7, #20]
100460d0:	2107      	movs	r1, #7
100460d2:	400b      	ands	r3, r1
100460d4:	009b      	lsls	r3, r3, #2
100460d6:	409a      	lsls	r2, r3
100460d8:	0013      	movs	r3, r2
100460da:	693a      	ldr	r2, [r7, #16]
100460dc:	4313      	orrs	r3, r2
100460de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
100460e0:	697b      	ldr	r3, [r7, #20]
100460e2:	08da      	lsrs	r2, r3, #3
100460e4:	687b      	ldr	r3, [r7, #4]
100460e6:	3208      	adds	r2, #8
100460e8:	0092      	lsls	r2, r2, #2
100460ea:	6939      	ldr	r1, [r7, #16]
100460ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100460ee:	687b      	ldr	r3, [r7, #4]
100460f0:	681b      	ldr	r3, [r3, #0]
100460f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
100460f4:	697b      	ldr	r3, [r7, #20]
100460f6:	005b      	lsls	r3, r3, #1
100460f8:	2203      	movs	r2, #3
100460fa:	409a      	lsls	r2, r3
100460fc:	0013      	movs	r3, r2
100460fe:	43da      	mvns	r2, r3
10046100:	693b      	ldr	r3, [r7, #16]
10046102:	4013      	ands	r3, r2
10046104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
10046106:	683b      	ldr	r3, [r7, #0]
10046108:	685b      	ldr	r3, [r3, #4]
1004610a:	2203      	movs	r2, #3
1004610c:	401a      	ands	r2, r3
1004610e:	697b      	ldr	r3, [r7, #20]
10046110:	005b      	lsls	r3, r3, #1
10046112:	409a      	lsls	r2, r3
10046114:	0013      	movs	r3, r2
10046116:	693a      	ldr	r2, [r7, #16]
10046118:	4313      	orrs	r3, r2
1004611a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
1004611c:	687b      	ldr	r3, [r7, #4]
1004611e:	693a      	ldr	r2, [r7, #16]
10046120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10046122:	683b      	ldr	r3, [r7, #0]
10046124:	685a      	ldr	r2, [r3, #4]
10046126:	23c0      	movs	r3, #192	@ 0xc0
10046128:	029b      	lsls	r3, r3, #10
1004612a:	4013      	ands	r3, r2
1004612c:	d100      	bne.n	10046130 <HAL_GPIO_Init+0x174>
1004612e:	e0df      	b.n	100462f0 <HAL_GPIO_Init+0x334>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10046130:	683b      	ldr	r3, [r7, #0]
10046132:	685a      	ldr	r2, [r3, #4]
10046134:	2380      	movs	r3, #128	@ 0x80
10046136:	02db      	lsls	r3, r3, #11
10046138:	4013      	ands	r3, r2
1004613a:	d031      	beq.n	100461a0 <HAL_GPIO_Init+0x1e4>
        {
          temp = SYSCFG->IO_DTR;
1004613c:	2380      	movs	r3, #128	@ 0x80
1004613e:	05db      	lsls	r3, r3, #23
10046140:	68db      	ldr	r3, [r3, #12]
10046142:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10046144:	687a      	ldr	r2, [r7, #4]
10046146:	2390      	movs	r3, #144	@ 0x90
10046148:	05db      	lsls	r3, r3, #23
1004614a:	429a      	cmp	r2, r3
1004614c:	d111      	bne.n	10046172 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
1004614e:	2201      	movs	r2, #1
10046150:	697b      	ldr	r3, [r7, #20]
10046152:	409a      	lsls	r2, r3
10046154:	0013      	movs	r3, r2
10046156:	43db      	mvns	r3, r3
10046158:	001a      	movs	r2, r3
1004615a:	693b      	ldr	r3, [r7, #16]
1004615c:	4013      	ands	r3, r2
1004615e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10046160:	2201      	movs	r2, #1
10046162:	697b      	ldr	r3, [r7, #20]
10046164:	409a      	lsls	r2, r3
10046166:	0013      	movs	r3, r2
10046168:	001a      	movs	r2, r3
1004616a:	693b      	ldr	r3, [r7, #16]
1004616c:	4313      	orrs	r3, r2
1004616e:	613b      	str	r3, [r7, #16]
10046170:	e012      	b.n	10046198 <HAL_GPIO_Init+0x1dc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10046172:	2201      	movs	r2, #1
10046174:	697b      	ldr	r3, [r7, #20]
10046176:	409a      	lsls	r2, r3
10046178:	0013      	movs	r3, r2
1004617a:	041b      	lsls	r3, r3, #16
1004617c:	43db      	mvns	r3, r3
1004617e:	001a      	movs	r2, r3
10046180:	693b      	ldr	r3, [r7, #16]
10046182:	4013      	ands	r3, r2
10046184:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10046186:	2201      	movs	r2, #1
10046188:	697b      	ldr	r3, [r7, #20]
1004618a:	409a      	lsls	r2, r3
1004618c:	0013      	movs	r3, r2
1004618e:	041b      	lsls	r3, r3, #16
10046190:	001a      	movs	r2, r3
10046192:	693b      	ldr	r3, [r7, #16]
10046194:	4313      	orrs	r3, r2
10046196:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
10046198:	2380      	movs	r3, #128	@ 0x80
1004619a:	05db      	lsls	r3, r3, #23
1004619c:	693a      	ldr	r2, [r7, #16]
1004619e:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
100461a0:	683b      	ldr	r3, [r7, #0]
100461a2:	685a      	ldr	r2, [r3, #4]
100461a4:	2380      	movs	r3, #128	@ 0x80
100461a6:	035b      	lsls	r3, r3, #13
100461a8:	4013      	ands	r3, r2
100461aa:	d031      	beq.n	10046210 <HAL_GPIO_Init+0x254>
        {
          temp = SYSCFG->IO_IBER;
100461ac:	2380      	movs	r3, #128	@ 0x80
100461ae:	05db      	lsls	r3, r3, #23
100461b0:	691b      	ldr	r3, [r3, #16]
100461b2:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100461b4:	687a      	ldr	r2, [r7, #4]
100461b6:	2390      	movs	r3, #144	@ 0x90
100461b8:	05db      	lsls	r3, r3, #23
100461ba:	429a      	cmp	r2, r3
100461bc:	d111      	bne.n	100461e2 <HAL_GPIO_Init+0x226>
          {
            temp &= ~(1 << position);
100461be:	2201      	movs	r2, #1
100461c0:	697b      	ldr	r3, [r7, #20]
100461c2:	409a      	lsls	r2, r3
100461c4:	0013      	movs	r3, r2
100461c6:	43db      	mvns	r3, r3
100461c8:	001a      	movs	r2, r3
100461ca:	693b      	ldr	r3, [r7, #16]
100461cc:	4013      	ands	r3, r2
100461ce:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100461d0:	2201      	movs	r2, #1
100461d2:	697b      	ldr	r3, [r7, #20]
100461d4:	409a      	lsls	r2, r3
100461d6:	0013      	movs	r3, r2
100461d8:	001a      	movs	r2, r3
100461da:	693b      	ldr	r3, [r7, #16]
100461dc:	4313      	orrs	r3, r2
100461de:	613b      	str	r3, [r7, #16]
100461e0:	e012      	b.n	10046208 <HAL_GPIO_Init+0x24c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100461e2:	2201      	movs	r2, #1
100461e4:	697b      	ldr	r3, [r7, #20]
100461e6:	409a      	lsls	r2, r3
100461e8:	0013      	movs	r3, r2
100461ea:	041b      	lsls	r3, r3, #16
100461ec:	43db      	mvns	r3, r3
100461ee:	001a      	movs	r2, r3
100461f0:	693b      	ldr	r3, [r7, #16]
100461f2:	4013      	ands	r3, r2
100461f4:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100461f6:	2201      	movs	r2, #1
100461f8:	697b      	ldr	r3, [r7, #20]
100461fa:	409a      	lsls	r2, r3
100461fc:	0013      	movs	r3, r2
100461fe:	041b      	lsls	r3, r3, #16
10046200:	001a      	movs	r2, r3
10046202:	693b      	ldr	r3, [r7, #16]
10046204:	4313      	orrs	r3, r2
10046206:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10046208:	2380      	movs	r3, #128	@ 0x80
1004620a:	05db      	lsls	r3, r3, #23
1004620c:	693a      	ldr	r2, [r7, #16]
1004620e:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10046210:	683b      	ldr	r3, [r7, #0]
10046212:	685a      	ldr	r2, [r3, #4]
10046214:	2380      	movs	r3, #128	@ 0x80
10046216:	03db      	lsls	r3, r3, #15
10046218:	4013      	ands	r3, r2
1004621a:	d031      	beq.n	10046280 <HAL_GPIO_Init+0x2c4>
        {
          temp = SYSCFG->IO_IEVR;
1004621c:	2380      	movs	r3, #128	@ 0x80
1004621e:	05db      	lsls	r3, r3, #23
10046220:	695b      	ldr	r3, [r3, #20]
10046222:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10046224:	687a      	ldr	r2, [r7, #4]
10046226:	2390      	movs	r3, #144	@ 0x90
10046228:	05db      	lsls	r3, r3, #23
1004622a:	429a      	cmp	r2, r3
1004622c:	d111      	bne.n	10046252 <HAL_GPIO_Init+0x296>
          {
            temp &= ~(1 << position);
1004622e:	2201      	movs	r2, #1
10046230:	697b      	ldr	r3, [r7, #20]
10046232:	409a      	lsls	r2, r3
10046234:	0013      	movs	r3, r2
10046236:	43db      	mvns	r3, r3
10046238:	001a      	movs	r2, r3
1004623a:	693b      	ldr	r3, [r7, #16]
1004623c:	4013      	ands	r3, r2
1004623e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10046240:	2201      	movs	r2, #1
10046242:	697b      	ldr	r3, [r7, #20]
10046244:	409a      	lsls	r2, r3
10046246:	0013      	movs	r3, r2
10046248:	001a      	movs	r2, r3
1004624a:	693b      	ldr	r3, [r7, #16]
1004624c:	4313      	orrs	r3, r2
1004624e:	613b      	str	r3, [r7, #16]
10046250:	e012      	b.n	10046278 <HAL_GPIO_Init+0x2bc>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10046252:	2201      	movs	r2, #1
10046254:	697b      	ldr	r3, [r7, #20]
10046256:	409a      	lsls	r2, r3
10046258:	0013      	movs	r3, r2
1004625a:	041b      	lsls	r3, r3, #16
1004625c:	43db      	mvns	r3, r3
1004625e:	001a      	movs	r2, r3
10046260:	693b      	ldr	r3, [r7, #16]
10046262:	4013      	ands	r3, r2
10046264:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10046266:	2201      	movs	r2, #1
10046268:	697b      	ldr	r3, [r7, #20]
1004626a:	409a      	lsls	r2, r3
1004626c:	0013      	movs	r3, r2
1004626e:	041b      	lsls	r3, r3, #16
10046270:	001a      	movs	r2, r3
10046272:	693b      	ldr	r3, [r7, #16]
10046274:	4313      	orrs	r3, r2
10046276:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10046278:	2380      	movs	r3, #128	@ 0x80
1004627a:	05db      	lsls	r3, r3, #23
1004627c:	693a      	ldr	r2, [r7, #16]
1004627e:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10046280:	683b      	ldr	r3, [r7, #0]
10046282:	685a      	ldr	r2, [r3, #4]
10046284:	2380      	movs	r3, #128	@ 0x80
10046286:	025b      	lsls	r3, r3, #9
10046288:	4013      	ands	r3, r2
1004628a:	d031      	beq.n	100462f0 <HAL_GPIO_Init+0x334>
        {
          temp = SYSCFG->IO_IER;
1004628c:	2380      	movs	r3, #128	@ 0x80
1004628e:	05db      	lsls	r3, r3, #23
10046290:	699b      	ldr	r3, [r3, #24]
10046292:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10046294:	687a      	ldr	r2, [r7, #4]
10046296:	2390      	movs	r3, #144	@ 0x90
10046298:	05db      	lsls	r3, r3, #23
1004629a:	429a      	cmp	r2, r3
1004629c:	d111      	bne.n	100462c2 <HAL_GPIO_Init+0x306>
          {
            temp &= ~(1 << position);
1004629e:	2201      	movs	r2, #1
100462a0:	697b      	ldr	r3, [r7, #20]
100462a2:	409a      	lsls	r2, r3
100462a4:	0013      	movs	r3, r2
100462a6:	43db      	mvns	r3, r3
100462a8:	001a      	movs	r2, r3
100462aa:	693b      	ldr	r3, [r7, #16]
100462ac:	4013      	ands	r3, r2
100462ae:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100462b0:	2201      	movs	r2, #1
100462b2:	697b      	ldr	r3, [r7, #20]
100462b4:	409a      	lsls	r2, r3
100462b6:	0013      	movs	r3, r2
100462b8:	001a      	movs	r2, r3
100462ba:	693b      	ldr	r3, [r7, #16]
100462bc:	4313      	orrs	r3, r2
100462be:	613b      	str	r3, [r7, #16]
100462c0:	e012      	b.n	100462e8 <HAL_GPIO_Init+0x32c>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100462c2:	2201      	movs	r2, #1
100462c4:	697b      	ldr	r3, [r7, #20]
100462c6:	409a      	lsls	r2, r3
100462c8:	0013      	movs	r3, r2
100462ca:	041b      	lsls	r3, r3, #16
100462cc:	43db      	mvns	r3, r3
100462ce:	001a      	movs	r2, r3
100462d0:	693b      	ldr	r3, [r7, #16]
100462d2:	4013      	ands	r3, r2
100462d4:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100462d6:	2201      	movs	r2, #1
100462d8:	697b      	ldr	r3, [r7, #20]
100462da:	409a      	lsls	r2, r3
100462dc:	0013      	movs	r3, r2
100462de:	041b      	lsls	r3, r3, #16
100462e0:	001a      	movs	r2, r3
100462e2:	693b      	ldr	r3, [r7, #16]
100462e4:	4313      	orrs	r3, r2
100462e6:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
100462e8:	2380      	movs	r3, #128	@ 0x80
100462ea:	05db      	lsls	r3, r3, #23
100462ec:	693a      	ldr	r2, [r7, #16]
100462ee:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
100462f0:	697b      	ldr	r3, [r7, #20]
100462f2:	3301      	adds	r3, #1
100462f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100462f6:	683b      	ldr	r3, [r7, #0]
100462f8:	681a      	ldr	r2, [r3, #0]
100462fa:	697b      	ldr	r3, [r7, #20]
100462fc:	40da      	lsrs	r2, r3
100462fe:	1e13      	subs	r3, r2, #0
10046300:	d000      	beq.n	10046304 <HAL_GPIO_Init+0x348>
10046302:	e663      	b.n	10045fcc <HAL_GPIO_Init+0x10>
  }
}
10046304:	46c0      	nop			@ (mov r8, r8)
10046306:	46c0      	nop			@ (mov r8, r8)
10046308:	46bd      	mov	sp, r7
1004630a:	b006      	add	sp, #24
1004630c:	bd80      	pop	{r7, pc}

1004630e <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
1004630e:	b580      	push	{r7, lr}
10046310:	b084      	sub	sp, #16
10046312:	af00      	add	r7, sp, #0
10046314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10046316:	230f      	movs	r3, #15
10046318:	18fb      	adds	r3, r7, r3
1004631a:	2200      	movs	r2, #0
1004631c:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
1004631e:	687b      	ldr	r3, [r7, #4]
10046320:	2b00      	cmp	r3, #0
10046322:	d045      	beq.n	100463b0 <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
10046324:	687b      	ldr	r3, [r7, #4]
10046326:	791b      	ldrb	r3, [r3, #4]
10046328:	b2db      	uxtb	r3, r3
1004632a:	2b00      	cmp	r3, #0
1004632c:	d103      	bne.n	10046336 <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
1004632e:	687b      	ldr	r3, [r7, #4]
10046330:	0018      	movs	r0, r3
10046332:	f7fa fe77 	bl	10041024 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
10046336:	f7ff fbd9 	bl	10045aec <HAL_GetTick>
1004633a:	0003      	movs	r3, r0
1004633c:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
1004633e:	687b      	ldr	r3, [r7, #4]
10046340:	2202      	movs	r2, #2
10046342:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
10046344:	e011      	b.n	1004636a <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
10046346:	687b      	ldr	r3, [r7, #4]
10046348:	681b      	ldr	r3, [r3, #0]
1004634a:	2201      	movs	r2, #1
1004634c:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
1004634e:	f7ff fbcd 	bl	10045aec <HAL_GetTick>
10046352:	0002      	movs	r2, r0
10046354:	68bb      	ldr	r3, [r7, #8]
10046356:	1ad2      	subs	r2, r2, r3
10046358:	23fa      	movs	r3, #250	@ 0xfa
1004635a:	009b      	lsls	r3, r3, #2
1004635c:	429a      	cmp	r2, r3
1004635e:	d904      	bls.n	1004636a <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
10046360:	230f      	movs	r3, #15
10046362:	18fb      	adds	r3, r7, r3
10046364:	2203      	movs	r2, #3
10046366:	701a      	strb	r2, [r3, #0]
        break;
10046368:	e006      	b.n	10046378 <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004636a:	687b      	ldr	r3, [r7, #4]
1004636c:	681b      	ldr	r3, [r3, #0]
1004636e:	681b      	ldr	r3, [r3, #0]
10046370:	2201      	movs	r2, #1
10046372:	4013      	ands	r3, r2
10046374:	2b01      	cmp	r3, #1
10046376:	d1e6      	bne.n	10046346 <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
10046378:	230f      	movs	r3, #15
1004637a:	18fb      	adds	r3, r7, r3
1004637c:	781b      	ldrb	r3, [r3, #0]
1004637e:	2b00      	cmp	r3, #0
10046380:	d10f      	bne.n	100463a2 <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
10046382:	687b      	ldr	r3, [r7, #4]
10046384:	681b      	ldr	r3, [r3, #0]
10046386:	689a      	ldr	r2, [r3, #8]
10046388:	687b      	ldr	r3, [r7, #4]
1004638a:	681b      	ldr	r3, [r3, #0]
1004638c:	21d0      	movs	r1, #208	@ 0xd0
1004638e:	0349      	lsls	r1, r1, #13
10046390:	430a      	orrs	r2, r1
10046392:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
10046394:	687b      	ldr	r3, [r7, #4]
10046396:	2200      	movs	r2, #0
10046398:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
1004639a:	687b      	ldr	r3, [r7, #4]
1004639c:	2201      	movs	r2, #1
1004639e:	711a      	strb	r2, [r3, #4]
100463a0:	e00a      	b.n	100463b8 <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
100463a2:	687b      	ldr	r3, [r7, #4]
100463a4:	2204      	movs	r2, #4
100463a6:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
100463a8:	687b      	ldr	r3, [r7, #4]
100463aa:	2203      	movs	r2, #3
100463ac:	711a      	strb	r2, [r3, #4]
100463ae:	e003      	b.n	100463b8 <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
100463b0:	230f      	movs	r3, #15
100463b2:	18fb      	adds	r3, r7, r3
100463b4:	2201      	movs	r2, #1
100463b6:	701a      	strb	r2, [r3, #0]
  }

  return err;
100463b8:	230f      	movs	r3, #15
100463ba:	18fb      	adds	r3, r7, r3
100463bc:	781b      	ldrb	r3, [r3, #0]
}
100463be:	0018      	movs	r0, r3
100463c0:	46bd      	mov	sp, r7
100463c2:	b004      	add	sp, #16
100463c4:	bd80      	pop	{r7, pc}
	...

100463c8 <HAL_PKA_IRQHandler>:
  * @brief  This function handles PKA event interrupt request.
  * @param  hpka PKA handle
  * @retval None
  */
void HAL_PKA_IRQHandler(PKA_HandleTypeDef *hpka)
{
100463c8:	b580      	push	{r7, lr}
100463ca:	b086      	sub	sp, #24
100463cc:	af00      	add	r7, sp, #0
100463ce:	6078      	str	r0, [r7, #4]
#if defined (STM32WB06) || defined(STM32WB07)
  uint32_t itsource = READ_REG(hpka->Instance->IEN);
  uint32_t flag  =    READ_REG(hpka->Instance->ISR);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t mode = PKA_GetMode(hpka);
100463d0:	687b      	ldr	r3, [r7, #4]
100463d2:	0018      	movs	r0, r3
100463d4:	f000 f86a 	bl	100464ac <PKA_GetMode>
100463d8:	0003      	movs	r3, r0
100463da:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hpka->Instance->CR);
100463dc:	687b      	ldr	r3, [r7, #4]
100463de:	681b      	ldr	r3, [r3, #0]
100463e0:	681b      	ldr	r3, [r3, #0]
100463e2:	613b      	str	r3, [r7, #16]
  uint32_t flag  =   READ_REG(hpka->Instance->SR);
100463e4:	687b      	ldr	r3, [r7, #4]
100463e6:	681b      	ldr	r3, [r3, #0]
100463e8:	685b      	ldr	r3, [r3, #4]
100463ea:	60fb      	str	r3, [r7, #12]
#endif /* STM32WB05 || STM32WB09 */

  /* Address error interrupt occurred */
  if (((itsource & PKA_IT_ADDRERR) == PKA_IT_ADDRERR) && ((flag & PKA_FLAG_ADDRERR) == PKA_FLAG_ADDRERR))
100463ec:	693a      	ldr	r2, [r7, #16]
100463ee:	2380      	movs	r3, #128	@ 0x80
100463f0:	035b      	lsls	r3, r3, #13
100463f2:	4013      	ands	r3, r2
100463f4:	d00f      	beq.n	10046416 <HAL_PKA_IRQHandler+0x4e>
100463f6:	68fa      	ldr	r2, [r7, #12]
100463f8:	2380      	movs	r3, #128	@ 0x80
100463fa:	035b      	lsls	r3, r3, #13
100463fc:	4013      	ands	r3, r2
100463fe:	d00a      	beq.n	10046416 <HAL_PKA_IRQHandler+0x4e>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_ADDRERR;
10046400:	687b      	ldr	r3, [r7, #4]
10046402:	689b      	ldr	r3, [r3, #8]
10046404:	2201      	movs	r2, #1
10046406:	431a      	orrs	r2, r3
10046408:	687b      	ldr	r3, [r7, #4]
1004640a:	609a      	str	r2, [r3, #8]

    /* Clear ADDRERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_ADDRERR);
1004640c:	687b      	ldr	r3, [r7, #4]
1004640e:	681b      	ldr	r3, [r3, #0]
10046410:	2280      	movs	r2, #128	@ 0x80
10046412:	0352      	lsls	r2, r2, #13
10046414:	609a      	str	r2, [r3, #8]
  }

  /* RAM access error interrupt occurred */
  if (((itsource & PKA_IT_RAMERR) == PKA_IT_RAMERR) && ((flag & PKA_FLAG_RAMERR) == PKA_FLAG_RAMERR))
10046416:	693a      	ldr	r2, [r7, #16]
10046418:	2380      	movs	r3, #128	@ 0x80
1004641a:	031b      	lsls	r3, r3, #12
1004641c:	4013      	ands	r3, r2
1004641e:	d00f      	beq.n	10046440 <HAL_PKA_IRQHandler+0x78>
10046420:	68fa      	ldr	r2, [r7, #12]
10046422:	2380      	movs	r3, #128	@ 0x80
10046424:	031b      	lsls	r3, r3, #12
10046426:	4013      	ands	r3, r2
10046428:	d00a      	beq.n	10046440 <HAL_PKA_IRQHandler+0x78>
  {
    hpka->ErrorCode |= HAL_PKA_ERROR_RAMERR;
1004642a:	687b      	ldr	r3, [r7, #4]
1004642c:	689b      	ldr	r3, [r3, #8]
1004642e:	2202      	movs	r2, #2
10046430:	431a      	orrs	r2, r3
10046432:	687b      	ldr	r3, [r7, #4]
10046434:	609a      	str	r2, [r3, #8]

    /* Clear RAMERR flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_RAMERR);
10046436:	687b      	ldr	r3, [r7, #4]
10046438:	681b      	ldr	r3, [r3, #0]
1004643a:	2280      	movs	r2, #128	@ 0x80
1004643c:	0312      	lsls	r2, r2, #12
1004643e:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB05 */
#if defined (STM32WB09)
  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
10046440:	697b      	ldr	r3, [r7, #20]
10046442:	2b24      	cmp	r3, #36	@ 0x24
10046444:	d10d      	bne.n	10046462 <HAL_PKA_IRQHandler+0x9a>
  {
    /* If error output result is different from 0xD60D, ecdsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != 0xD60DUL)
10046446:	687b      	ldr	r3, [r7, #4]
10046448:	681a      	ldr	r2, [r3, #0]
1004644a:	23f8      	movs	r3, #248	@ 0xf8
1004644c:	011b      	lsls	r3, r3, #4
1004644e:	58d3      	ldr	r3, [r2, r3]
10046450:	4a15      	ldr	r2, [pc, #84]	@ (100464a8 <HAL_PKA_IRQHandler+0xe0>)
10046452:	4293      	cmp	r3, r2
10046454:	d005      	beq.n	10046462 <HAL_PKA_IRQHandler+0x9a>
    {
      hpka->ErrorCode |= HAL_PKA_ERROR_OPERATION;
10046456:	687b      	ldr	r3, [r7, #4]
10046458:	689b      	ldr	r3, [r3, #8]
1004645a:	2208      	movs	r2, #8
1004645c:	431a      	orrs	r2, r3
1004645e:	687b      	ldr	r3, [r7, #4]
10046460:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* STM32WB09 */

  /* Trigger the error callback if an error is present */
  if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
10046462:	687b      	ldr	r3, [r7, #4]
10046464:	689b      	ldr	r3, [r3, #8]
10046466:	2b00      	cmp	r3, #0
10046468:	d003      	beq.n	10046472 <HAL_PKA_IRQHandler+0xaa>
  {
#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->ErrorCallback(hpka);
#else
    HAL_PKA_ErrorCallback(hpka);
1004646a:	687b      	ldr	r3, [r7, #4]
1004646c:	0018      	movs	r0, r3
1004646e:	f7fc fd2b 	bl	10042ec8 <HAL_PKA_ErrorCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }

  /* End Of Operation interrupt occurred */
  if (((itsource & PKA_IT_PROCEND) == PKA_IT_PROCEND) && ((flag & PKA_FLAG_PROCEND) == PKA_FLAG_PROCEND))
10046472:	693a      	ldr	r2, [r7, #16]
10046474:	2380      	movs	r3, #128	@ 0x80
10046476:	029b      	lsls	r3, r3, #10
10046478:	4013      	ands	r3, r2
1004647a:	d010      	beq.n	1004649e <HAL_PKA_IRQHandler+0xd6>
1004647c:	68fa      	ldr	r2, [r7, #12]
1004647e:	2380      	movs	r3, #128	@ 0x80
10046480:	029b      	lsls	r3, r3, #10
10046482:	4013      	ands	r3, r2
10046484:	d00b      	beq.n	1004649e <HAL_PKA_IRQHandler+0xd6>
  {
    /* Clear PROCEND flag */
    __HAL_PKA_CLEAR_FLAG(hpka, PKA_FLAG_PROCEND);
10046486:	687b      	ldr	r3, [r7, #4]
10046488:	681b      	ldr	r3, [r3, #0]
1004648a:	2280      	movs	r2, #128	@ 0x80
1004648c:	0292      	lsls	r2, r2, #10
1004648e:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
10046490:	687b      	ldr	r3, [r7, #4]
10046492:	2201      	movs	r2, #1
10046494:	711a      	strb	r2, [r3, #4]

#if (USE_HAL_PKA_REGISTER_CALLBACKS == 1)
    hpka->OperationCpltCallback(hpka);
#else
    HAL_PKA_OperationCpltCallback(hpka);
10046496:	687b      	ldr	r3, [r7, #4]
10046498:	0018      	movs	r0, r3
1004649a:	f7fc fd09 	bl	10042eb0 <HAL_PKA_OperationCpltCallback>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
  }
}
1004649e:	46c0      	nop			@ (mov r8, r8)
100464a0:	46bd      	mov	sp, r7
100464a2:	b006      	add	sp, #24
100464a4:	bd80      	pop	{r7, pc}
100464a6:	46c0      	nop			@ (mov r8, r8)
100464a8:	0000d60d 	.word	0x0000d60d

100464ac <PKA_GetMode>:
  * @brief  Get PKA operating mode.
  * @param  hpka PKA handle
  * @retval Return the current mode
  */
uint32_t PKA_GetMode(const PKA_HandleTypeDef *hpka)
{
100464ac:	b580      	push	{r7, lr}
100464ae:	b082      	sub	sp, #8
100464b0:	af00      	add	r7, sp, #0
100464b2:	6078      	str	r0, [r7, #4]
  /* return the shifted PKA_CR_MODE value */
  return (uint32_t)(READ_BIT(hpka->Instance->CR, PKA_CR_MODE) >> PKA_CR_MODE_Pos);
100464b4:	687b      	ldr	r3, [r7, #4]
100464b6:	681b      	ldr	r3, [r3, #0]
100464b8:	681b      	ldr	r3, [r3, #0]
100464ba:	0a1b      	lsrs	r3, r3, #8
100464bc:	223f      	movs	r2, #63	@ 0x3f
100464be:	4013      	ands	r3, r2
}
100464c0:	0018      	movs	r0, r3
100464c2:	46bd      	mov	sp, r7
100464c4:	b002      	add	sp, #8
100464c6:	bd80      	pop	{r7, pc}

100464c8 <LL_PWR_EnableGPIORET>:
{
100464c8:	b580      	push	{r7, lr}
100464ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_GPIORET);
100464cc:	4b04      	ldr	r3, [pc, #16]	@ (100464e0 <LL_PWR_EnableGPIORET+0x18>)
100464ce:	685a      	ldr	r2, [r3, #4]
100464d0:	4b03      	ldr	r3, [pc, #12]	@ (100464e0 <LL_PWR_EnableGPIORET+0x18>)
100464d2:	2180      	movs	r1, #128	@ 0x80
100464d4:	0049      	lsls	r1, r1, #1
100464d6:	430a      	orrs	r2, r1
100464d8:	605a      	str	r2, [r3, #4]
}
100464da:	46c0      	nop			@ (mov r8, r8)
100464dc:	46bd      	mov	sp, r7
100464de:	bd80      	pop	{r7, pc}
100464e0:	48500000 	.word	0x48500000

100464e4 <LL_PWR_GetWakeupSource>:
{
100464e4:	b580      	push	{r7, lr}
100464e6:	b082      	sub	sp, #8
100464e8:	af00      	add	r7, sp, #0
  wakeup_source = READ_REG(PWR->SR1) & 0x0000FFFF;
100464ea:	4b07      	ldr	r3, [pc, #28]	@ (10046508 <LL_PWR_GetWakeupSource+0x24>)
100464ec:	691b      	ldr	r3, [r3, #16]
100464ee:	041b      	lsls	r3, r3, #16
100464f0:	0c1b      	lsrs	r3, r3, #16
100464f2:	607b      	str	r3, [r7, #4]
  return (uint32_t)(wakeup_source | (READ_REG(PWR->SR3) << 16));
100464f4:	4b04      	ldr	r3, [pc, #16]	@ (10046508 <LL_PWR_GetWakeupSource+0x24>)
100464f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100464f8:	041a      	lsls	r2, r3, #16
100464fa:	687b      	ldr	r3, [r7, #4]
100464fc:	4313      	orrs	r3, r2
}
100464fe:	0018      	movs	r0, r3
10046500:	46bd      	mov	sp, r7
10046502:	b002      	add	sp, #8
10046504:	bd80      	pop	{r7, pc}
10046506:	46c0      	nop			@ (mov r8, r8)
10046508:	48500000 	.word	0x48500000

1004650c <LL_PWR_ClearWakeupSource>:
{
1004650c:	b580      	push	{r7, lr}
1004650e:	b082      	sub	sp, #8
10046510:	af00      	add	r7, sp, #0
10046512:	6078      	str	r0, [r7, #4]
  WRITE_REG(PWR->SR1, (source & 0x0000FFFF));
10046514:	4b06      	ldr	r3, [pc, #24]	@ (10046530 <LL_PWR_ClearWakeupSource+0x24>)
10046516:	687a      	ldr	r2, [r7, #4]
10046518:	0412      	lsls	r2, r2, #16
1004651a:	0c12      	lsrs	r2, r2, #16
1004651c:	611a      	str	r2, [r3, #16]
  WRITE_REG(PWR->SR3, (source >> 16));
1004651e:	4b04      	ldr	r3, [pc, #16]	@ (10046530 <LL_PWR_ClearWakeupSource+0x24>)
10046520:	687a      	ldr	r2, [r7, #4]
10046522:	0c12      	lsrs	r2, r2, #16
10046524:	639a      	str	r2, [r3, #56]	@ 0x38
}
10046526:	46c0      	nop			@ (mov r8, r8)
10046528:	46bd      	mov	sp, r7
1004652a:	b002      	add	sp, #8
1004652c:	bd80      	pop	{r7, pc}
1004652e:	46c0      	nop			@ (mov r8, r8)
10046530:	48500000 	.word	0x48500000

10046534 <LL_RCC_HSI_IsReady>:
{
10046534:	b580      	push	{r7, lr}
10046536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10046538:	4b07      	ldr	r3, [pc, #28]	@ (10046558 <LL_RCC_HSI_IsReady+0x24>)
1004653a:	681a      	ldr	r2, [r3, #0]
1004653c:	2380      	movs	r3, #128	@ 0x80
1004653e:	00db      	lsls	r3, r3, #3
10046540:	401a      	ands	r2, r3
10046542:	2380      	movs	r3, #128	@ 0x80
10046544:	00db      	lsls	r3, r3, #3
10046546:	429a      	cmp	r2, r3
10046548:	d101      	bne.n	1004654e <LL_RCC_HSI_IsReady+0x1a>
1004654a:	2301      	movs	r3, #1
1004654c:	e000      	b.n	10046550 <LL_RCC_HSI_IsReady+0x1c>
1004654e:	2300      	movs	r3, #0
}
10046550:	0018      	movs	r0, r3
10046552:	46bd      	mov	sp, r7
10046554:	bd80      	pop	{r7, pc}
10046556:	46c0      	nop			@ (mov r8, r8)
10046558:	48400000 	.word	0x48400000

1004655c <LL_RCC_DIRECT_HSE_Disable>:
{
1004655c:	b580      	push	{r7, lr}
1004655e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10046560:	4b09      	ldr	r3, [pc, #36]	@ (10046588 <LL_RCC_DIRECT_HSE_Disable+0x2c>)
10046562:	689a      	ldr	r2, [r3, #8]
10046564:	4b08      	ldr	r3, [pc, #32]	@ (10046588 <LL_RCC_DIRECT_HSE_Disable+0x2c>)
10046566:	2104      	movs	r1, #4
10046568:	438a      	bics	r2, r1
1004656a:	609a      	str	r2, [r3, #8]
  while (LL_RCC_HSI_IsReady() == 0);
1004656c:	46c0      	nop			@ (mov r8, r8)
1004656e:	f7ff ffe1 	bl	10046534 <LL_RCC_HSI_IsReady>
10046572:	1e03      	subs	r3, r0, #0
10046574:	d0fb      	beq.n	1004656e <LL_RCC_DIRECT_HSE_Disable+0x12>
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10046576:	4b04      	ldr	r3, [pc, #16]	@ (10046588 <LL_RCC_DIRECT_HSE_Disable+0x2c>)
10046578:	689a      	ldr	r2, [r3, #8]
1004657a:	4b03      	ldr	r3, [pc, #12]	@ (10046588 <LL_RCC_DIRECT_HSE_Disable+0x2c>)
1004657c:	2102      	movs	r1, #2
1004657e:	438a      	bics	r2, r1
10046580:	609a      	str	r2, [r3, #8]
}
10046582:	46c0      	nop			@ (mov r8, r8)
10046584:	46bd      	mov	sp, r7
10046586:	bd80      	pop	{r7, pc}
10046588:	48400000 	.word	0x48400000

1004658c <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004658c:	b580      	push	{r7, lr}
1004658e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
10046590:	4b05      	ldr	r3, [pc, #20]	@ (100465a8 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
10046592:	689b      	ldr	r3, [r3, #8]
10046594:	2208      	movs	r2, #8
10046596:	4013      	ands	r3, r2
10046598:	2b08      	cmp	r3, #8
1004659a:	d101      	bne.n	100465a0 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
1004659c:	2301      	movs	r3, #1
1004659e:	e000      	b.n	100465a2 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
100465a0:	2300      	movs	r3, #0
}
100465a2:	0018      	movs	r0, r3
100465a4:	46bd      	mov	sp, r7
100465a6:	bd80      	pop	{r7, pc}
100465a8:	48400000 	.word	0x48400000

100465ac <LL_RCC_LSE_Disable>:
{
100465ac:	b580      	push	{r7, lr}
100465ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
100465b0:	4b04      	ldr	r3, [pc, #16]	@ (100465c4 <LL_RCC_LSE_Disable+0x18>)
100465b2:	681a      	ldr	r2, [r3, #0]
100465b4:	4b03      	ldr	r3, [pc, #12]	@ (100465c4 <LL_RCC_LSE_Disable+0x18>)
100465b6:	2110      	movs	r1, #16
100465b8:	438a      	bics	r2, r1
100465ba:	601a      	str	r2, [r3, #0]
}
100465bc:	46c0      	nop			@ (mov r8, r8)
100465be:	46bd      	mov	sp, r7
100465c0:	bd80      	pop	{r7, pc}
100465c2:	46c0      	nop			@ (mov r8, r8)
100465c4:	48400000 	.word	0x48400000

100465c8 <LL_RCC_LSE_IsReady>:
{
100465c8:	b580      	push	{r7, lr}
100465ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
100465cc:	4b05      	ldr	r3, [pc, #20]	@ (100465e4 <LL_RCC_LSE_IsReady+0x1c>)
100465ce:	681b      	ldr	r3, [r3, #0]
100465d0:	2220      	movs	r2, #32
100465d2:	4013      	ands	r3, r2
100465d4:	2b20      	cmp	r3, #32
100465d6:	d101      	bne.n	100465dc <LL_RCC_LSE_IsReady+0x14>
100465d8:	2301      	movs	r3, #1
100465da:	e000      	b.n	100465de <LL_RCC_LSE_IsReady+0x16>
100465dc:	2300      	movs	r3, #0
}
100465de:	0018      	movs	r0, r3
100465e0:	46bd      	mov	sp, r7
100465e2:	bd80      	pop	{r7, pc}
100465e4:	48400000 	.word	0x48400000

100465e8 <LL_RCC_LSI_Disable>:
{
100465e8:	b580      	push	{r7, lr}
100465ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
100465ec:	4b04      	ldr	r3, [pc, #16]	@ (10046600 <LL_RCC_LSI_Disable+0x18>)
100465ee:	681a      	ldr	r2, [r3, #0]
100465f0:	4b03      	ldr	r3, [pc, #12]	@ (10046600 <LL_RCC_LSI_Disable+0x18>)
100465f2:	2104      	movs	r1, #4
100465f4:	438a      	bics	r2, r1
100465f6:	601a      	str	r2, [r3, #0]
}
100465f8:	46c0      	nop			@ (mov r8, r8)
100465fa:	46bd      	mov	sp, r7
100465fc:	bd80      	pop	{r7, pc}
100465fe:	46c0      	nop			@ (mov r8, r8)
10046600:	48400000 	.word	0x48400000

10046604 <LL_RCC_LSI_IsReady>:
{
10046604:	b580      	push	{r7, lr}
10046606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10046608:	4b05      	ldr	r3, [pc, #20]	@ (10046620 <LL_RCC_LSI_IsReady+0x1c>)
1004660a:	681b      	ldr	r3, [r3, #0]
1004660c:	2208      	movs	r2, #8
1004660e:	4013      	ands	r3, r2
10046610:	2b08      	cmp	r3, #8
10046612:	d101      	bne.n	10046618 <LL_RCC_LSI_IsReady+0x14>
10046614:	2301      	movs	r3, #1
10046616:	e000      	b.n	1004661a <LL_RCC_LSI_IsReady+0x16>
10046618:	2300      	movs	r3, #0
}
1004661a:	0018      	movs	r0, r3
1004661c:	46bd      	mov	sp, r7
1004661e:	bd80      	pop	{r7, pc}
10046620:	48400000 	.word	0x48400000

10046624 <LL_APB2_GRP1_EnableClock>:
{
10046624:	b580      	push	{r7, lr}
10046626:	b084      	sub	sp, #16
10046628:	af00      	add	r7, sp, #0
1004662a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004662c:	4b07      	ldr	r3, [pc, #28]	@ (1004664c <LL_APB2_GRP1_EnableClock+0x28>)
1004662e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10046630:	4b06      	ldr	r3, [pc, #24]	@ (1004664c <LL_APB2_GRP1_EnableClock+0x28>)
10046632:	687a      	ldr	r2, [r7, #4]
10046634:	430a      	orrs	r2, r1
10046636:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10046638:	4b04      	ldr	r3, [pc, #16]	@ (1004664c <LL_APB2_GRP1_EnableClock+0x28>)
1004663a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004663c:	687a      	ldr	r2, [r7, #4]
1004663e:	4013      	ands	r3, r2
10046640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046642:	68fb      	ldr	r3, [r7, #12]
}
10046644:	46c0      	nop			@ (mov r8, r8)
10046646:	46bd      	mov	sp, r7
10046648:	b004      	add	sp, #16
1004664a:	bd80      	pop	{r7, pc}
1004664c:	48400000 	.word	0x48400000

10046650 <LL_APB2_GRP1_IsEnabledClock>:
{
10046650:	b580      	push	{r7, lr}
10046652:	b082      	sub	sp, #8
10046654:	af00      	add	r7, sp, #0
10046656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10046658:	4b06      	ldr	r3, [pc, #24]	@ (10046674 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004665a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004665c:	687a      	ldr	r2, [r7, #4]
1004665e:	4013      	ands	r3, r2
10046660:	687a      	ldr	r2, [r7, #4]
10046662:	429a      	cmp	r2, r3
10046664:	d101      	bne.n	1004666a <LL_APB2_GRP1_IsEnabledClock+0x1a>
10046666:	2301      	movs	r3, #1
10046668:	e000      	b.n	1004666c <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004666a:	2300      	movs	r3, #0
}
1004666c:	0018      	movs	r0, r3
1004666e:	46bd      	mov	sp, r7
10046670:	b002      	add	sp, #8
10046672:	bd80      	pop	{r7, pc}
10046674:	48400000 	.word	0x48400000

10046678 <LL_APB2_GRP1_DisableClock>:
{
10046678:	b580      	push	{r7, lr}
1004667a:	b082      	sub	sp, #8
1004667c:	af00      	add	r7, sp, #0
1004667e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
10046680:	4b05      	ldr	r3, [pc, #20]	@ (10046698 <LL_APB2_GRP1_DisableClock+0x20>)
10046682:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
10046684:	687b      	ldr	r3, [r7, #4]
10046686:	43d9      	mvns	r1, r3
10046688:	4b03      	ldr	r3, [pc, #12]	@ (10046698 <LL_APB2_GRP1_DisableClock+0x20>)
1004668a:	400a      	ands	r2, r1
1004668c:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004668e:	46c0      	nop			@ (mov r8, r8)
10046690:	46bd      	mov	sp, r7
10046692:	b002      	add	sp, #8
10046694:	bd80      	pop	{r7, pc}
10046696:	46c0      	nop			@ (mov r8, r8)
10046698:	48400000 	.word	0x48400000

1004669c <HAL_PWR_EnableWakeUpPin>:
  *        @arg @ref PWR_WUP_FALLEDG
  *
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPin, uint32_t WakeUpPolarity)
{
1004669c:	b580      	push	{r7, lr}
1004669e:	b082      	sub	sp, #8
100466a0:	af00      	add	r7, sp, #0
100466a2:	6078      	str	r0, [r7, #4]
100466a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));
  assert_param(IS_PWR_WAKEUP_PIN_POLARITY(WakeUpPolarity));

  /* Specifies the wake up line polarity for the event detection (rising or falling edge) */
  if (WakeUpPolarity == PWR_WUP_FALLEDG)
100466a6:	683b      	ldr	r3, [r7, #0]
100466a8:	2b01      	cmp	r3, #1
100466aa:	d10f      	bne.n	100466cc <HAL_PWR_EnableWakeUpPin+0x30>
  {
    SET_BIT(PWR->CR4, (WakeUpPin & 0x0000FFFF));
100466ac:	4b19      	ldr	r3, [pc, #100]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466ae:	68d9      	ldr	r1, [r3, #12]
100466b0:	687b      	ldr	r3, [r7, #4]
100466b2:	041b      	lsls	r3, r3, #16
100466b4:	0c1a      	lsrs	r2, r3, #16
100466b6:	4b17      	ldr	r3, [pc, #92]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466b8:	430a      	orrs	r2, r1
100466ba:	60da      	str	r2, [r3, #12]
    SET_BIT(PWR->CR7, (WakeUpPin >> 16));
100466bc:	4b15      	ldr	r3, [pc, #84]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
100466c0:	687b      	ldr	r3, [r7, #4]
100466c2:	0c1a      	lsrs	r2, r3, #16
100466c4:	4b13      	ldr	r3, [pc, #76]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466c6:	430a      	orrs	r2, r1
100466c8:	635a      	str	r2, [r3, #52]	@ 0x34
100466ca:	e010      	b.n	100466ee <HAL_PWR_EnableWakeUpPin+0x52>
  }
  else
  {
    CLEAR_BIT(PWR->CR4, (WakeUpPin & 0x0000FFFF));
100466cc:	4b11      	ldr	r3, [pc, #68]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466ce:	68da      	ldr	r2, [r3, #12]
100466d0:	687b      	ldr	r3, [r7, #4]
100466d2:	041b      	lsls	r3, r3, #16
100466d4:	0c1b      	lsrs	r3, r3, #16
100466d6:	43d9      	mvns	r1, r3
100466d8:	4b0e      	ldr	r3, [pc, #56]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466da:	400a      	ands	r2, r1
100466dc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(PWR->CR7, (WakeUpPin >> 16));
100466de:	4b0d      	ldr	r3, [pc, #52]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100466e2:	687b      	ldr	r3, [r7, #4]
100466e4:	0c1b      	lsrs	r3, r3, #16
100466e6:	43d9      	mvns	r1, r3
100466e8:	4b0a      	ldr	r3, [pc, #40]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466ea:	400a      	ands	r2, r1
100466ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  /* Enable wake-up line */
  SET_BIT(PWR->CR3, (WakeUpPin & 0x0000FFFF));
100466ee:	4b09      	ldr	r3, [pc, #36]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466f0:	6899      	ldr	r1, [r3, #8]
100466f2:	687b      	ldr	r3, [r7, #4]
100466f4:	041b      	lsls	r3, r3, #16
100466f6:	0c1a      	lsrs	r2, r3, #16
100466f8:	4b06      	ldr	r3, [pc, #24]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
100466fa:	430a      	orrs	r2, r1
100466fc:	609a      	str	r2, [r3, #8]
  SET_BIT(PWR->CR6, (WakeUpPin >> 16));
100466fe:	4b05      	ldr	r3, [pc, #20]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
10046700:	6b19      	ldr	r1, [r3, #48]	@ 0x30
10046702:	687b      	ldr	r3, [r7, #4]
10046704:	0c1a      	lsrs	r2, r3, #16
10046706:	4b03      	ldr	r3, [pc, #12]	@ (10046714 <HAL_PWR_EnableWakeUpPin+0x78>)
10046708:	430a      	orrs	r2, r1
1004670a:	631a      	str	r2, [r3, #48]	@ 0x30

}
1004670c:	46c0      	nop			@ (mov r8, r8)
1004670e:	46bd      	mov	sp, r7
10046710:	b002      	add	sp, #8
10046712:	bd80      	pop	{r7, pc}
10046714:	48500000 	.word	0x48500000

10046718 <HAL_PWR_GetClearWakeupSource>:
  * @brief  Get and Clear Wake-up source.
  * @retval WakeUpPin : This parameter can be a combination of
  *                     @ref PWREx_WakeUp_Pins define group
  */
uint32_t HAL_PWR_GetClearWakeupSource(void)
{
10046718:	b580      	push	{r7, lr}
1004671a:	b082      	sub	sp, #8
1004671c:	af00      	add	r7, sp, #0
  uint32_t wakeuppin;

  /* Get all wake-up pins */
  wakeuppin = LL_PWR_GetWakeupSource();
1004671e:	f7ff fee1 	bl	100464e4 <LL_PWR_GetWakeupSource>
10046722:	0003      	movs	r3, r0
10046724:	607b      	str	r3, [r7, #4]

  /* Clear all the wake-up pin flags */
  LL_PWR_ClearWakeupSource(wakeuppin);
10046726:	687b      	ldr	r3, [r7, #4]
10046728:	0018      	movs	r0, r3
1004672a:	f7ff feef 	bl	1004650c <LL_PWR_ClearWakeupSource>

  return wakeuppin;
1004672e:	687b      	ldr	r3, [r7, #4]
}
10046730:	0018      	movs	r0, r3
10046732:	46bd      	mov	sp, r7
10046734:	b002      	add	sp, #8
10046736:	bd80      	pop	{r7, pc}

10046738 <HAL_PWR_EnterSLEEPMode>:
  *         as NVIC and SysTick can run and wake up the CPU when an interrupt
  *         or an event occurs.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode(void)
{
10046738:	b580      	push	{r7, lr}
1004673a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
1004673c:	4b04      	ldr	r3, [pc, #16]	@ (10046750 <HAL_PWR_EnterSLEEPMode+0x18>)
1004673e:	691a      	ldr	r2, [r3, #16]
10046740:	4b03      	ldr	r3, [pc, #12]	@ (10046750 <HAL_PWR_EnterSLEEPMode+0x18>)
10046742:	2104      	movs	r1, #4
10046744:	438a      	bics	r2, r1
10046746:	611a      	str	r2, [r3, #16]

  /* Wait For Interrupt Request */
  __WFI();
10046748:	bf30      	wfi

}
1004674a:	46c0      	nop			@ (mov r8, r8)
1004674c:	46bd      	mov	sp, r7
1004674e:	bd80      	pop	{r7, pc}
10046750:	e000ed00 	.word	0xe000ed00

10046754 <HAL_PWR_ConfigDEEPSTOP>:
  * @param  sConfigDEEPSTOP : Pointer to a @ref PWR_DEEPSTOPTypeDef structure that
  *                           contains the DEEPSTOP configuration information.
  * @retval None.
  */
HAL_StatusTypeDef HAL_PWR_ConfigDEEPSTOP(PWR_DEEPSTOPTypeDef *sConfigDEEPSTOP)
{
10046754:	b580      	push	{r7, lr}
10046756:	b084      	sub	sp, #16
10046758:	af00      	add	r7, sp, #0
1004675a:	6078      	str	r0, [r7, #4]
  uint8_t radio_disabled = FALSE;
1004675c:	230f      	movs	r3, #15
1004675e:	18fb      	adds	r3, r7, r3
10046760:	2200      	movs	r2, #0
10046762:	701a      	strb	r2, [r3, #0]

  /* Disable the low speed clock if requested */
  if (sConfigDEEPSTOP->deepStopMode == PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF)
10046764:	687b      	ldr	r3, [r7, #4]
10046766:	681b      	ldr	r3, [r3, #0]
10046768:	2b00      	cmp	r3, #0
1004676a:	d103      	bne.n	10046774 <HAL_PWR_ConfigDEEPSTOP+0x20>
  {
    LL_RCC_LSE_Disable();
1004676c:	f7ff ff1e 	bl	100465ac <LL_RCC_LSE_Disable>
    LL_RCC_LSI_Disable();
10046770:	f7ff ff3a 	bl	100465e8 <LL_RCC_LSI_Disable>
  }

  /* If the radio IP is not used at all by the SoC (or not yet started), the
    following steps need to be done after any reset to allow DEEPSTOP mode */
  if (!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
10046774:	2001      	movs	r0, #1
10046776:	f7ff ff6b 	bl	10046650 <LL_APB2_GRP1_IsEnabledClock>
1004677a:	1e03      	subs	r3, r0, #0
1004677c:	d106      	bne.n	1004678c <HAL_PWR_ConfigDEEPSTOP+0x38>
  {
    radio_disabled = TRUE;
1004677e:	230f      	movs	r3, #15
10046780:	18fb      	adds	r3, r7, r3
10046782:	2201      	movs	r2, #1
10046784:	701a      	strb	r2, [r3, #0]
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
10046786:	2001      	movs	r0, #1
10046788:	f7ff ff4c 	bl	10046624 <LL_APB2_GRP1_EnableClock>
  }
  if ((READ_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN) == 0) &&
1004678c:	4b1a      	ldr	r3, [pc, #104]	@ (100467f8 <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004678e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10046790:	2380      	movs	r3, #128	@ 0x80
10046792:	059b      	lsls	r3, r3, #22
10046794:	4013      	ands	r3, r2
10046796:	d10c      	bne.n	100467b2 <HAL_PWR_ConfigDEEPSTOP+0x5e>
      (READ_BIT(WAKEUP->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN) == 0))
10046798:	4b17      	ldr	r3, [pc, #92]	@ (100467f8 <HAL_PWR_ConfigDEEPSTOP+0xa4>)
1004679a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004679c:	2380      	movs	r3, #128	@ 0x80
1004679e:	05db      	lsls	r3, r3, #23
100467a0:	4013      	ands	r3, r2
  if ((READ_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN) == 0) &&
100467a2:	d106      	bne.n	100467b2 <HAL_PWR_ConfigDEEPSTOP+0x5e>
  {
    SET_BIT(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_FORCE_SLEEPING);
100467a4:	4b14      	ldr	r3, [pc, #80]	@ (100467f8 <HAL_PWR_ConfigDEEPSTOP+0xa4>)
100467a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100467a8:	4b13      	ldr	r3, [pc, #76]	@ (100467f8 <HAL_PWR_ConfigDEEPSTOP+0xa4>)
100467aa:	2180      	movs	r1, #128	@ 0x80
100467ac:	0609      	lsls	r1, r1, #24
100467ae:	430a      	orrs	r2, r1
100467b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (radio_disabled)
100467b2:	230f      	movs	r3, #15
100467b4:	18fb      	adds	r3, r7, r3
100467b6:	781b      	ldrb	r3, [r3, #0]
100467b8:	2b00      	cmp	r3, #0
100467ba:	d002      	beq.n	100467c2 <HAL_PWR_ConfigDEEPSTOP+0x6e>
  {
    LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_MRBLE);
100467bc:	2001      	movs	r0, #1
100467be:	f7ff ff5b 	bl	10046678 <LL_APB2_GRP1_DisableClock>
  }

#if defined(PWR_CR2_GPIORET)
  /* Enable the GPIO retention in DEEPSTOP configuration */
  LL_PWR_EnableGPIORET();
100467c2:	f7ff fe81 	bl	100464c8 <LL_PWR_EnableGPIORET>
#endif /* PWR_CR2_GPIORET */

  /* Disable DIRECT HSE configuration to allow DEEPSTOP request */
  if (LL_RCC_DIRECT_HSE_IsEnabled())
100467c6:	f7ff fee1 	bl	1004658c <LL_RCC_DIRECT_HSE_IsEnabled>
100467ca:	1e03      	subs	r3, r0, #0
100467cc:	d001      	beq.n	100467d2 <HAL_PWR_ConfigDEEPSTOP+0x7e>
  {
    LL_RCC_DIRECT_HSE_Disable();
100467ce:	f7ff fec5 	bl	1004655c <LL_RCC_DIRECT_HSE_Disable>
  }

  /* Wait until  the low speed clock if OFF */
  if (sConfigDEEPSTOP->deepStopMode == PWR_DEEPSTOP_WITH_SLOW_CLOCK_OFF)
100467d2:	687b      	ldr	r3, [r7, #4]
100467d4:	681b      	ldr	r3, [r3, #0]
100467d6:	2b00      	cmp	r3, #0
100467d8:	d108      	bne.n	100467ec <HAL_PWR_ConfigDEEPSTOP+0x98>
  {
    while (LL_RCC_LSE_IsReady() || LL_RCC_LSI_IsReady()) {}
100467da:	46c0      	nop			@ (mov r8, r8)
100467dc:	f7ff fef4 	bl	100465c8 <LL_RCC_LSE_IsReady>
100467e0:	1e03      	subs	r3, r0, #0
100467e2:	d1fb      	bne.n	100467dc <HAL_PWR_ConfigDEEPSTOP+0x88>
100467e4:	f7ff ff0e 	bl	10046604 <LL_RCC_LSI_IsReady>
100467e8:	1e03      	subs	r3, r0, #0
100467ea:	d1f7      	bne.n	100467dc <HAL_PWR_ConfigDEEPSTOP+0x88>
  }

  return HAL_OK;
100467ec:	2300      	movs	r3, #0
}
100467ee:	0018      	movs	r0, r3
100467f0:	46bd      	mov	sp, r7
100467f2:	b004      	add	sp, #16
100467f4:	bd80      	pop	{r7, pc}
100467f6:	46c0      	nop			@ (mov r8, r8)
100467f8:	60001800 	.word	0x60001800

100467fc <HAL_PWR_WKUP_IRQHandler>:
  * @brief This function handles the PWR WAKEUP interrupt request.
  * @note   This API should be called under the WKUP_IRQHandler().
  * @retval None.
  */
void HAL_PWR_WKUP_IRQHandler(void)
{
100467fc:	b580      	push	{r7, lr}
100467fe:	b082      	sub	sp, #8
10046800:	af00      	add	r7, sp, #0
  uint32_t wakeuppin;

  wakeuppin = HAL_PWR_GetClearWakeupSource();
10046802:	f7ff ff89 	bl	10046718 <HAL_PWR_GetClearWakeupSource>
10046806:	0003      	movs	r3, r0
10046808:	607b      	str	r3, [r7, #4]

  /* Wakeup pin line interrupt detected */
  if (wakeuppin != 0U)
1004680a:	687b      	ldr	r3, [r7, #4]
1004680c:	2b00      	cmp	r3, #0
1004680e:	d003      	beq.n	10046818 <HAL_PWR_WKUP_IRQHandler+0x1c>
  {
    HAL_PWR_WKUPx_Callback(wakeuppin);
10046810:	687b      	ldr	r3, [r7, #4]
10046812:	0018      	movs	r0, r3
10046814:	f000 f804 	bl	10046820 <HAL_PWR_WKUPx_Callback>
  }
}
10046818:	46c0      	nop			@ (mov r8, r8)
1004681a:	46bd      	mov	sp, r7
1004681c:	b002      	add	sp, #8
1004681e:	bd80      	pop	{r7, pc}

10046820 <HAL_PWR_WKUPx_Callback>:
  * @brief PWR WKUPx interrupt callback.
  * @param WakeupIOs IO wakeup line
  * @retval None.
  */
__weak void HAL_PWR_WKUPx_Callback(uint32_t WakeupIOs)
{
10046820:	b580      	push	{r7, lr}
10046822:	b082      	sub	sp, #8
10046824:	af00      	add	r7, sp, #0
10046826:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_WKUPxCallback can be implemented in the user file
  */
}
10046828:	46c0      	nop			@ (mov r8, r8)
1004682a:	46bd      	mov	sp, r7
1004682c:	b002      	add	sp, #8
1004682e:	bd80      	pop	{r7, pc}

10046830 <HAL_PWREx_EnableGPIOPullUp>:
  *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 or the logical OR
  *         of several of them to setseveral bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10046830:	b580      	push	{r7, lr}
10046832:	b084      	sub	sp, #16
10046834:	af00      	add	r7, sp, #0
10046836:	6078      	str	r0, [r7, #4]
10046838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004683a:	230f      	movs	r3, #15
1004683c:	18fb      	adds	r3, r7, r3
1004683e:	2200      	movs	r2, #0
10046840:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
10046842:	687b      	ldr	r3, [r7, #4]
10046844:	2b00      	cmp	r3, #0
10046846:	d003      	beq.n	10046850 <HAL_PWREx_EnableGPIOPullUp+0x20>
10046848:	687b      	ldr	r3, [r7, #4]
1004684a:	2b01      	cmp	r3, #1
1004684c:	d00e      	beq.n	1004686c <HAL_PWREx_EnableGPIOPullUp+0x3c>
1004684e:	e01b      	b.n	10046888 <HAL_PWREx_EnableGPIOPullUp+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PUCRA, GPIONumber);
10046850:	4b13      	ldr	r3, [pc, #76]	@ (100468a0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10046852:	6a19      	ldr	r1, [r3, #32]
10046854:	4b12      	ldr	r3, [pc, #72]	@ (100468a0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10046856:	683a      	ldr	r2, [r7, #0]
10046858:	430a      	orrs	r2, r1
1004685a:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004685c:	4b10      	ldr	r3, [pc, #64]	@ (100468a0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004685e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10046860:	683b      	ldr	r3, [r7, #0]
10046862:	43d9      	mvns	r1, r3
10046864:	4b0e      	ldr	r3, [pc, #56]	@ (100468a0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10046866:	400a      	ands	r2, r1
10046868:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
1004686a:	e012      	b.n	10046892 <HAL_PWREx_EnableGPIOPullUp+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PUCRB, GPIONumber);
1004686c:	4b0c      	ldr	r3, [pc, #48]	@ (100468a0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004686e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10046870:	4b0b      	ldr	r3, [pc, #44]	@ (100468a0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10046872:	683a      	ldr	r2, [r7, #0]
10046874:	430a      	orrs	r2, r1
10046876:	629a      	str	r2, [r3, #40]	@ 0x28
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
10046878:	4b09      	ldr	r3, [pc, #36]	@ (100468a0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
1004687a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004687c:	683b      	ldr	r3, [r7, #0]
1004687e:	43d9      	mvns	r1, r3
10046880:	4b07      	ldr	r3, [pc, #28]	@ (100468a0 <HAL_PWREx_EnableGPIOPullUp+0x70>)
10046882:	400a      	ands	r2, r1
10046884:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
10046886:	e004      	b.n	10046892 <HAL_PWREx_EnableGPIOPullUp+0x62>
    default:
      status = HAL_ERROR;
10046888:	230f      	movs	r3, #15
1004688a:	18fb      	adds	r3, r7, r3
1004688c:	2201      	movs	r2, #1
1004688e:	701a      	strb	r2, [r3, #0]
      break;
10046890:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
10046892:	230f      	movs	r3, #15
10046894:	18fb      	adds	r3, r7, r3
10046896:	781b      	ldrb	r3, [r3, #0]
}
10046898:	0018      	movs	r0, r3
1004689a:	46bd      	mov	sp, r7
1004689c:	b004      	add	sp, #16
1004689e:	bd80      	pop	{r7, pc}
100468a0:	48500000 	.word	0x48500000

100468a4 <HAL_PWREx_EnableGPIOPullDown>:
  *         or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
100468a4:	b580      	push	{r7, lr}
100468a6:	b084      	sub	sp, #16
100468a8:	af00      	add	r7, sp, #0
100468aa:	6078      	str	r0, [r7, #4]
100468ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
100468ae:	230f      	movs	r3, #15
100468b0:	18fb      	adds	r3, r7, r3
100468b2:	2200      	movs	r2, #0
100468b4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
100468b6:	687b      	ldr	r3, [r7, #4]
100468b8:	2b00      	cmp	r3, #0
100468ba:	d003      	beq.n	100468c4 <HAL_PWREx_EnableGPIOPullDown+0x20>
100468bc:	687b      	ldr	r3, [r7, #4]
100468be:	2b01      	cmp	r3, #1
100468c0:	d00e      	beq.n	100468e0 <HAL_PWREx_EnableGPIOPullDown+0x3c>
100468c2:	e01b      	b.n	100468fc <HAL_PWREx_EnableGPIOPullDown+0x58>
  {
    case PWR_GPIO_A:
      SET_BIT(PWR->PDCRA, GPIONumber);
100468c4:	4b13      	ldr	r3, [pc, #76]	@ (10046914 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100468c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
100468c8:	4b12      	ldr	r3, [pc, #72]	@ (10046914 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100468ca:	683a      	ldr	r2, [r7, #0]
100468cc:	430a      	orrs	r2, r1
100468ce:	625a      	str	r2, [r3, #36]	@ 0x24
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
100468d0:	4b10      	ldr	r3, [pc, #64]	@ (10046914 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100468d2:	6a1a      	ldr	r2, [r3, #32]
100468d4:	683b      	ldr	r3, [r7, #0]
100468d6:	43d9      	mvns	r1, r3
100468d8:	4b0e      	ldr	r3, [pc, #56]	@ (10046914 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100468da:	400a      	ands	r2, r1
100468dc:	621a      	str	r2, [r3, #32]
      break;
100468de:	e012      	b.n	10046906 <HAL_PWREx_EnableGPIOPullDown+0x62>
    case PWR_GPIO_B:
      SET_BIT(PWR->PDCRB, GPIONumber);
100468e0:	4b0c      	ldr	r3, [pc, #48]	@ (10046914 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100468e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100468e4:	4b0b      	ldr	r3, [pc, #44]	@ (10046914 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100468e6:	683a      	ldr	r2, [r7, #0]
100468e8:	430a      	orrs	r2, r1
100468ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
100468ec:	4b09      	ldr	r3, [pc, #36]	@ (10046914 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100468ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
100468f0:	683b      	ldr	r3, [r7, #0]
100468f2:	43d9      	mvns	r1, r3
100468f4:	4b07      	ldr	r3, [pc, #28]	@ (10046914 <HAL_PWREx_EnableGPIOPullDown+0x70>)
100468f6:	400a      	ands	r2, r1
100468f8:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
100468fa:	e004      	b.n	10046906 <HAL_PWREx_EnableGPIOPullDown+0x62>
    default:
      status = HAL_ERROR;
100468fc:	230f      	movs	r3, #15
100468fe:	18fb      	adds	r3, r7, r3
10046900:	2201      	movs	r2, #1
10046902:	701a      	strb	r2, [r3, #0]
      break;
10046904:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
10046906:	230f      	movs	r3, #15
10046908:	18fb      	adds	r3, r7, r3
1004690a:	781b      	ldrb	r3, [r3, #0]
}
1004690c:	0018      	movs	r0, r3
1004690e:	46bd      	mov	sp, r7
10046910:	b004      	add	sp, #16
10046912:	bd80      	pop	{r7, pc}
10046914:	48500000 	.word	0x48500000

10046918 <LL_RADIO_SetRadioConfigurationAddressPointer>:
{
10046918:	b580      	push	{r7, lr}
1004691a:	b082      	sub	sp, #8
1004691c:	af00      	add	r7, sp, #0
1004691e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10046920:	4b04      	ldr	r3, [pc, #16]	@ (10046934 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10046922:	681b      	ldr	r3, [r3, #0]
10046924:	4b03      	ldr	r3, [pc, #12]	@ (10046934 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10046926:	687a      	ldr	r2, [r7, #4]
10046928:	601a      	str	r2, [r3, #0]
}
1004692a:	46c0      	nop			@ (mov r8, r8)
1004692c:	46bd      	mov	sp, r7
1004692e:	b002      	add	sp, #8
10046930:	bd80      	pop	{r7, pc}
10046932:	46c0      	nop			@ (mov r8, r8)
10046934:	200000c0 	.word	0x200000c0

10046938 <LL_RADIO_SetWakeupInitDelay>:
{
10046938:	b580      	push	{r7, lr}
1004693a:	b082      	sub	sp, #8
1004693c:	af00      	add	r7, sp, #0
1004693e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10046940:	4b07      	ldr	r3, [pc, #28]	@ (10046960 <LL_RADIO_SetWakeupInitDelay+0x28>)
10046942:	685b      	ldr	r3, [r3, #4]
10046944:	4a07      	ldr	r2, [pc, #28]	@ (10046964 <LL_RADIO_SetWakeupInitDelay+0x2c>)
10046946:	4013      	ands	r3, r2
10046948:	0019      	movs	r1, r3
1004694a:	687b      	ldr	r3, [r7, #4]
1004694c:	021b      	lsls	r3, r3, #8
1004694e:	041b      	lsls	r3, r3, #16
10046950:	0c1a      	lsrs	r2, r3, #16
10046952:	4b03      	ldr	r3, [pc, #12]	@ (10046960 <LL_RADIO_SetWakeupInitDelay+0x28>)
10046954:	430a      	orrs	r2, r1
10046956:	605a      	str	r2, [r3, #4]
}
10046958:	46c0      	nop			@ (mov r8, r8)
1004695a:	46bd      	mov	sp, r7
1004695c:	b002      	add	sp, #8
1004695e:	bd80      	pop	{r7, pc}
10046960:	200000c0 	.word	0x200000c0
10046964:	ffff00ff 	.word	0xffff00ff

10046968 <LL_RADIO_SetTimer12InitDelayCal>:
{
10046968:	b580      	push	{r7, lr}
1004696a:	b082      	sub	sp, #8
1004696c:	af00      	add	r7, sp, #0
1004696e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
10046970:	4b08      	ldr	r3, [pc, #32]	@ (10046994 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10046972:	685b      	ldr	r3, [r3, #4]
10046974:	4a08      	ldr	r2, [pc, #32]	@ (10046998 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10046976:	4013      	ands	r3, r2
10046978:	0019      	movs	r1, r3
1004697a:	687b      	ldr	r3, [r7, #4]
1004697c:	041a      	lsls	r2, r3, #16
1004697e:	23ff      	movs	r3, #255	@ 0xff
10046980:	041b      	lsls	r3, r3, #16
10046982:	401a      	ands	r2, r3
10046984:	4b03      	ldr	r3, [pc, #12]	@ (10046994 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10046986:	430a      	orrs	r2, r1
10046988:	605a      	str	r2, [r3, #4]
}
1004698a:	46c0      	nop			@ (mov r8, r8)
1004698c:	46bd      	mov	sp, r7
1004698e:	b002      	add	sp, #8
10046990:	bd80      	pop	{r7, pc}
10046992:	46c0      	nop			@ (mov r8, r8)
10046994:	200000c0 	.word	0x200000c0
10046998:	ff00ffff 	.word	0xff00ffff

1004699c <LL_RADIO_SetTimer12InitDelayNoCal>:
{
1004699c:	b580      	push	{r7, lr}
1004699e:	b082      	sub	sp, #8
100469a0:	af00      	add	r7, sp, #0
100469a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
100469a4:	4b06      	ldr	r3, [pc, #24]	@ (100469c0 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
100469a6:	685b      	ldr	r3, [r3, #4]
100469a8:	021b      	lsls	r3, r3, #8
100469aa:	0a19      	lsrs	r1, r3, #8
100469ac:	687b      	ldr	r3, [r7, #4]
100469ae:	061a      	lsls	r2, r3, #24
100469b0:	4b03      	ldr	r3, [pc, #12]	@ (100469c0 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
100469b2:	430a      	orrs	r2, r1
100469b4:	605a      	str	r2, [r3, #4]
}
100469b6:	46c0      	nop			@ (mov r8, r8)
100469b8:	46bd      	mov	sp, r7
100469ba:	b002      	add	sp, #8
100469bc:	bd80      	pop	{r7, pc}
100469be:	46c0      	nop			@ (mov r8, r8)
100469c0:	200000c0 	.word	0x200000c0

100469c4 <LL_RADIO_SetTransmitCalDelayChk>:
{
100469c4:	b580      	push	{r7, lr}
100469c6:	b082      	sub	sp, #8
100469c8:	af00      	add	r7, sp, #0
100469ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
100469cc:	4b07      	ldr	r3, [pc, #28]	@ (100469ec <LL_RADIO_SetTransmitCalDelayChk+0x28>)
100469ce:	689b      	ldr	r3, [r3, #8]
100469d0:	22ff      	movs	r2, #255	@ 0xff
100469d2:	4393      	bics	r3, r2
100469d4:	0019      	movs	r1, r3
100469d6:	687b      	ldr	r3, [r7, #4]
100469d8:	22ff      	movs	r2, #255	@ 0xff
100469da:	401a      	ands	r2, r3
100469dc:	4b03      	ldr	r3, [pc, #12]	@ (100469ec <LL_RADIO_SetTransmitCalDelayChk+0x28>)
100469de:	430a      	orrs	r2, r1
100469e0:	609a      	str	r2, [r3, #8]
}
100469e2:	46c0      	nop			@ (mov r8, r8)
100469e4:	46bd      	mov	sp, r7
100469e6:	b002      	add	sp, #8
100469e8:	bd80      	pop	{r7, pc}
100469ea:	46c0      	nop			@ (mov r8, r8)
100469ec:	200000c0 	.word	0x200000c0

100469f0 <LL_RADIO_SetTransmitNoCalDelayChk>:
{
100469f0:	b580      	push	{r7, lr}
100469f2:	b082      	sub	sp, #8
100469f4:	af00      	add	r7, sp, #0
100469f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
100469f8:	4b07      	ldr	r3, [pc, #28]	@ (10046a18 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
100469fa:	689b      	ldr	r3, [r3, #8]
100469fc:	4a07      	ldr	r2, [pc, #28]	@ (10046a1c <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
100469fe:	4013      	ands	r3, r2
10046a00:	0019      	movs	r1, r3
10046a02:	687b      	ldr	r3, [r7, #4]
10046a04:	021b      	lsls	r3, r3, #8
10046a06:	041b      	lsls	r3, r3, #16
10046a08:	0c1a      	lsrs	r2, r3, #16
10046a0a:	4b03      	ldr	r3, [pc, #12]	@ (10046a18 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10046a0c:	430a      	orrs	r2, r1
10046a0e:	609a      	str	r2, [r3, #8]
}
10046a10:	46c0      	nop			@ (mov r8, r8)
10046a12:	46bd      	mov	sp, r7
10046a14:	b002      	add	sp, #8
10046a16:	bd80      	pop	{r7, pc}
10046a18:	200000c0 	.word	0x200000c0
10046a1c:	ffff00ff 	.word	0xffff00ff

10046a20 <LL_RADIO_SetReceivedCalDelayChk>:
{
10046a20:	b580      	push	{r7, lr}
10046a22:	b082      	sub	sp, #8
10046a24:	af00      	add	r7, sp, #0
10046a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10046a28:	4b08      	ldr	r3, [pc, #32]	@ (10046a4c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10046a2a:	689b      	ldr	r3, [r3, #8]
10046a2c:	4a08      	ldr	r2, [pc, #32]	@ (10046a50 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10046a2e:	4013      	ands	r3, r2
10046a30:	0019      	movs	r1, r3
10046a32:	687b      	ldr	r3, [r7, #4]
10046a34:	041a      	lsls	r2, r3, #16
10046a36:	23ff      	movs	r3, #255	@ 0xff
10046a38:	041b      	lsls	r3, r3, #16
10046a3a:	401a      	ands	r2, r3
10046a3c:	4b03      	ldr	r3, [pc, #12]	@ (10046a4c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10046a3e:	430a      	orrs	r2, r1
10046a40:	609a      	str	r2, [r3, #8]
}
10046a42:	46c0      	nop			@ (mov r8, r8)
10046a44:	46bd      	mov	sp, r7
10046a46:	b002      	add	sp, #8
10046a48:	bd80      	pop	{r7, pc}
10046a4a:	46c0      	nop			@ (mov r8, r8)
10046a4c:	200000c0 	.word	0x200000c0
10046a50:	ff00ffff 	.word	0xff00ffff

10046a54 <LL_RADIO_SetReceivedNoCalDelayChk>:
{
10046a54:	b580      	push	{r7, lr}
10046a56:	b082      	sub	sp, #8
10046a58:	af00      	add	r7, sp, #0
10046a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
10046a5c:	4b06      	ldr	r3, [pc, #24]	@ (10046a78 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10046a5e:	689b      	ldr	r3, [r3, #8]
10046a60:	021b      	lsls	r3, r3, #8
10046a62:	0a19      	lsrs	r1, r3, #8
10046a64:	687b      	ldr	r3, [r7, #4]
10046a66:	061a      	lsls	r2, r3, #24
10046a68:	4b03      	ldr	r3, [pc, #12]	@ (10046a78 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10046a6a:	430a      	orrs	r2, r1
10046a6c:	609a      	str	r2, [r3, #8]
}
10046a6e:	46c0      	nop			@ (mov r8, r8)
10046a70:	46bd      	mov	sp, r7
10046a72:	b002      	add	sp, #8
10046a74:	bd80      	pop	{r7, pc}
10046a76:	46c0      	nop			@ (mov r8, r8)
10046a78:	200000c0 	.word	0x200000c0

10046a7c <LL_RADIO_SetConfigurationEndDuration>:
{
10046a7c:	b580      	push	{r7, lr}
10046a7e:	b082      	sub	sp, #8
10046a80:	af00      	add	r7, sp, #0
10046a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
10046a84:	4b07      	ldr	r3, [pc, #28]	@ (10046aa4 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10046a86:	68db      	ldr	r3, [r3, #12]
10046a88:	22ff      	movs	r2, #255	@ 0xff
10046a8a:	4393      	bics	r3, r2
10046a8c:	0019      	movs	r1, r3
10046a8e:	687b      	ldr	r3, [r7, #4]
10046a90:	22ff      	movs	r2, #255	@ 0xff
10046a92:	401a      	ands	r2, r3
10046a94:	4b03      	ldr	r3, [pc, #12]	@ (10046aa4 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10046a96:	430a      	orrs	r2, r1
10046a98:	60da      	str	r2, [r3, #12]
}
10046a9a:	46c0      	nop			@ (mov r8, r8)
10046a9c:	46bd      	mov	sp, r7
10046a9e:	b002      	add	sp, #8
10046aa0:	bd80      	pop	{r7, pc}
10046aa2:	46c0      	nop			@ (mov r8, r8)
10046aa4:	200000c0 	.word	0x200000c0

10046aa8 <LL_RADIO_SetTxDataReadyCheck>:
{
10046aa8:	b580      	push	{r7, lr}
10046aaa:	b082      	sub	sp, #8
10046aac:	af00      	add	r7, sp, #0
10046aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
10046ab0:	4b07      	ldr	r3, [pc, #28]	@ (10046ad0 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10046ab2:	68db      	ldr	r3, [r3, #12]
10046ab4:	4a07      	ldr	r2, [pc, #28]	@ (10046ad4 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
10046ab6:	4013      	ands	r3, r2
10046ab8:	0019      	movs	r1, r3
10046aba:	687b      	ldr	r3, [r7, #4]
10046abc:	021b      	lsls	r3, r3, #8
10046abe:	041b      	lsls	r3, r3, #16
10046ac0:	0c1a      	lsrs	r2, r3, #16
10046ac2:	4b03      	ldr	r3, [pc, #12]	@ (10046ad0 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10046ac4:	430a      	orrs	r2, r1
10046ac6:	60da      	str	r2, [r3, #12]
}
10046ac8:	46c0      	nop			@ (mov r8, r8)
10046aca:	46bd      	mov	sp, r7
10046acc:	b002      	add	sp, #8
10046ace:	bd80      	pop	{r7, pc}
10046ad0:	200000c0 	.word	0x200000c0
10046ad4:	ffff00ff 	.word	0xffff00ff

10046ad8 <LL_RADIO_SetTxDelayStart>:
{
10046ad8:	b580      	push	{r7, lr}
10046ada:	b082      	sub	sp, #8
10046adc:	af00      	add	r7, sp, #0
10046ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
10046ae0:	4b08      	ldr	r3, [pc, #32]	@ (10046b04 <LL_RADIO_SetTxDelayStart+0x2c>)
10046ae2:	68db      	ldr	r3, [r3, #12]
10046ae4:	4a08      	ldr	r2, [pc, #32]	@ (10046b08 <LL_RADIO_SetTxDelayStart+0x30>)
10046ae6:	4013      	ands	r3, r2
10046ae8:	0019      	movs	r1, r3
10046aea:	687b      	ldr	r3, [r7, #4]
10046aec:	041a      	lsls	r2, r3, #16
10046aee:	23ff      	movs	r3, #255	@ 0xff
10046af0:	041b      	lsls	r3, r3, #16
10046af2:	401a      	ands	r2, r3
10046af4:	4b03      	ldr	r3, [pc, #12]	@ (10046b04 <LL_RADIO_SetTxDelayStart+0x2c>)
10046af6:	430a      	orrs	r2, r1
10046af8:	60da      	str	r2, [r3, #12]
}
10046afa:	46c0      	nop			@ (mov r8, r8)
10046afc:	46bd      	mov	sp, r7
10046afe:	b002      	add	sp, #8
10046b00:	bd80      	pop	{r7, pc}
10046b02:	46c0      	nop			@ (mov r8, r8)
10046b04:	200000c0 	.word	0x200000c0
10046b08:	ff00ffff 	.word	0xff00ffff

10046b0c <LL_RADIO_SetTxDelayEnd>:
{
10046b0c:	b580      	push	{r7, lr}
10046b0e:	b082      	sub	sp, #8
10046b10:	af00      	add	r7, sp, #0
10046b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
10046b14:	4b08      	ldr	r3, [pc, #32]	@ (10046b38 <LL_RADIO_SetTxDelayEnd+0x2c>)
10046b16:	68db      	ldr	r3, [r3, #12]
10046b18:	4a08      	ldr	r2, [pc, #32]	@ (10046b3c <LL_RADIO_SetTxDelayEnd+0x30>)
10046b1a:	4013      	ands	r3, r2
10046b1c:	0019      	movs	r1, r3
10046b1e:	687b      	ldr	r3, [r7, #4]
10046b20:	061a      	lsls	r2, r3, #24
10046b22:	23fc      	movs	r3, #252	@ 0xfc
10046b24:	059b      	lsls	r3, r3, #22
10046b26:	401a      	ands	r2, r3
10046b28:	4b03      	ldr	r3, [pc, #12]	@ (10046b38 <LL_RADIO_SetTxDelayEnd+0x2c>)
10046b2a:	430a      	orrs	r2, r1
10046b2c:	60da      	str	r2, [r3, #12]
}
10046b2e:	46c0      	nop			@ (mov r8, r8)
10046b30:	46bd      	mov	sp, r7
10046b32:	b002      	add	sp, #8
10046b34:	bd80      	pop	{r7, pc}
10046b36:	46c0      	nop			@ (mov r8, r8)
10046b38:	200000c0 	.word	0x200000c0
10046b3c:	c0ffffff 	.word	0xc0ffffff

10046b40 <LL_RADIO_SetTransmissionReadyTimeout>:
{
10046b40:	b580      	push	{r7, lr}
10046b42:	b082      	sub	sp, #8
10046b44:	af00      	add	r7, sp, #0
10046b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
10046b48:	4b07      	ldr	r3, [pc, #28]	@ (10046b68 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10046b4a:	691b      	ldr	r3, [r3, #16]
10046b4c:	22ff      	movs	r2, #255	@ 0xff
10046b4e:	4393      	bics	r3, r2
10046b50:	0019      	movs	r1, r3
10046b52:	687b      	ldr	r3, [r7, #4]
10046b54:	22ff      	movs	r2, #255	@ 0xff
10046b56:	401a      	ands	r2, r3
10046b58:	4b03      	ldr	r3, [pc, #12]	@ (10046b68 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10046b5a:	430a      	orrs	r2, r1
10046b5c:	611a      	str	r2, [r3, #16]
}
10046b5e:	46c0      	nop			@ (mov r8, r8)
10046b60:	46bd      	mov	sp, r7
10046b62:	b002      	add	sp, #8
10046b64:	bd80      	pop	{r7, pc}
10046b66:	46c0      	nop			@ (mov r8, r8)
10046b68:	200000c0 	.word	0x200000c0

10046b6c <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
{
10046b6c:	b580      	push	{r7, lr}
10046b6e:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
10046b70:	4b04      	ldr	r3, [pc, #16]	@ (10046b84 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10046b72:	695a      	ldr	r2, [r3, #20]
10046b74:	4b03      	ldr	r3, [pc, #12]	@ (10046b84 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10046b76:	2104      	movs	r1, #4
10046b78:	430a      	orrs	r2, r1
10046b7a:	615a      	str	r2, [r3, #20]
}
10046b7c:	46c0      	nop			@ (mov r8, r8)
10046b7e:	46bd      	mov	sp, r7
10046b80:	bd80      	pop	{r7, pc}
10046b82:	46c0      	nop			@ (mov r8, r8)
10046b84:	200000c0 	.word	0x200000c0

10046b88 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
{
10046b88:	b580      	push	{r7, lr}
10046b8a:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
10046b8c:	4b04      	ldr	r3, [pc, #16]	@ (10046ba0 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10046b8e:	695a      	ldr	r2, [r3, #20]
10046b90:	4b03      	ldr	r3, [pc, #12]	@ (10046ba0 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10046b92:	2180      	movs	r1, #128	@ 0x80
10046b94:	0409      	lsls	r1, r1, #16
10046b96:	430a      	orrs	r2, r1
10046b98:	615a      	str	r2, [r3, #20]
}
10046b9a:	46c0      	nop			@ (mov r8, r8)
10046b9c:	46bd      	mov	sp, r7
10046b9e:	bd80      	pop	{r7, pc}
10046ba0:	200000c0 	.word	0x200000c0

10046ba4 <LL_RADIO_TxRxSkipInterrupt_Enable>:
{
10046ba4:	b580      	push	{r7, lr}
10046ba6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
10046ba8:	4b04      	ldr	r3, [pc, #16]	@ (10046bbc <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10046baa:	695a      	ldr	r2, [r3, #20]
10046bac:	4b03      	ldr	r3, [pc, #12]	@ (10046bbc <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10046bae:	2180      	movs	r1, #128	@ 0x80
10046bb0:	0589      	lsls	r1, r1, #22
10046bb2:	430a      	orrs	r2, r1
10046bb4:	615a      	str	r2, [r3, #20]
}
10046bb6:	46c0      	nop			@ (mov r8, r8)
10046bb8:	46bd      	mov	sp, r7
10046bba:	bd80      	pop	{r7, pc}
10046bbc:	200000c0 	.word	0x200000c0

10046bc0 <LL_RADIO_Active2ErrorInterrupt_Enable>:
{
10046bc0:	b580      	push	{r7, lr}
10046bc2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
10046bc4:	4b04      	ldr	r3, [pc, #16]	@ (10046bd8 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10046bc6:	695a      	ldr	r2, [r3, #20]
10046bc8:	4b03      	ldr	r3, [pc, #12]	@ (10046bd8 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10046bca:	2180      	movs	r1, #128	@ 0x80
10046bcc:	05c9      	lsls	r1, r1, #23
10046bce:	430a      	orrs	r2, r1
10046bd0:	615a      	str	r2, [r3, #20]
}
10046bd2:	46c0      	nop			@ (mov r8, r8)
10046bd4:	46bd      	mov	sp, r7
10046bd6:	bd80      	pop	{r7, pc}
10046bd8:	200000c0 	.word	0x200000c0

10046bdc <LL_RADIO_SetDefaultAntennaID>:
{
10046bdc:	b580      	push	{r7, lr}
10046bde:	b082      	sub	sp, #8
10046be0:	af00      	add	r7, sp, #0
10046be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
10046be4:	4b07      	ldr	r3, [pc, #28]	@ (10046c04 <LL_RADIO_SetDefaultAntennaID+0x28>)
10046be6:	699b      	ldr	r3, [r3, #24]
10046be8:	227f      	movs	r2, #127	@ 0x7f
10046bea:	4393      	bics	r3, r2
10046bec:	0019      	movs	r1, r3
10046bee:	687b      	ldr	r3, [r7, #4]
10046bf0:	227f      	movs	r2, #127	@ 0x7f
10046bf2:	401a      	ands	r2, r3
10046bf4:	4b03      	ldr	r3, [pc, #12]	@ (10046c04 <LL_RADIO_SetDefaultAntennaID+0x28>)
10046bf6:	430a      	orrs	r2, r1
10046bf8:	619a      	str	r2, [r3, #24]
}
10046bfa:	46c0      	nop			@ (mov r8, r8)
10046bfc:	46bd      	mov	sp, r7
10046bfe:	b002      	add	sp, #8
10046c00:	bd80      	pop	{r7, pc}
10046c02:	46c0      	nop			@ (mov r8, r8)
10046c04:	200000c0 	.word	0x200000c0

10046c08 <LL_RADIO_TIMER_DisableTimer1>:
{
10046c08:	b580      	push	{r7, lr}
10046c0a:	b082      	sub	sp, #8
10046c0c:	af00      	add	r7, sp, #0
10046c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10046c10:	687b      	ldr	r3, [r7, #4]
10046c12:	68db      	ldr	r3, [r3, #12]
10046c14:	2203      	movs	r2, #3
10046c16:	4393      	bics	r3, r2
10046c18:	001a      	movs	r2, r3
10046c1a:	687b      	ldr	r3, [r7, #4]
10046c1c:	60da      	str	r2, [r3, #12]
}
10046c1e:	46c0      	nop			@ (mov r8, r8)
10046c20:	46bd      	mov	sp, r7
10046c22:	b002      	add	sp, #8
10046c24:	bd80      	pop	{r7, pc}

10046c26 <LL_RADIO_TIMER_DisableTimer2>:
{
10046c26:	b580      	push	{r7, lr}
10046c28:	b082      	sub	sp, #8
10046c2a:	af00      	add	r7, sp, #0
10046c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
10046c2e:	687b      	ldr	r3, [r7, #4]
10046c30:	68db      	ldr	r3, [r3, #12]
10046c32:	2203      	movs	r2, #3
10046c34:	4393      	bics	r3, r2
10046c36:	001a      	movs	r2, r3
10046c38:	687b      	ldr	r3, [r7, #4]
10046c3a:	60da      	str	r2, [r3, #12]
}
10046c3c:	46c0      	nop			@ (mov r8, r8)
10046c3e:	46bd      	mov	sp, r7
10046c40:	b002      	add	sp, #8
10046c42:	bd80      	pop	{r7, pc}

10046c44 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10046c44:	b580      	push	{r7, lr}
10046c46:	b082      	sub	sp, #8
10046c48:	af00      	add	r7, sp, #0
10046c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
10046c4c:	687b      	ldr	r3, [r7, #4]
10046c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10046c50:	4a03      	ldr	r2, [pc, #12]	@ (10046c60 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10046c52:	401a      	ands	r2, r3
10046c54:	687b      	ldr	r3, [r7, #4]
10046c56:	629a      	str	r2, [r3, #40]	@ 0x28
}
10046c58:	46c0      	nop			@ (mov r8, r8)
10046c5a:	46bd      	mov	sp, r7
10046c5c:	b002      	add	sp, #8
10046c5e:	bd80      	pop	{r7, pc}
10046c60:	bfffffff 	.word	0xbfffffff

10046c64 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
10046c64:	b590      	push	{r4, r7, lr}
10046c66:	b08d      	sub	sp, #52	@ 0x34
10046c68:	af00      	add	r7, sp, #0
10046c6a:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
10046c6c:	4b14      	ldr	r3, [pc, #80]	@ (10046cc0 <HAL_RADIO_Init+0x5c>)
10046c6e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
10046c70:	4b14      	ldr	r3, [pc, #80]	@ (10046cc4 <HAL_RADIO_Init+0x60>)
10046c72:	681b      	ldr	r3, [r3, #0]
10046c74:	4a14      	ldr	r2, [pc, #80]	@ (10046cc8 <HAL_RADIO_Init+0x64>)
10046c76:	4293      	cmp	r3, r2
10046c78:	d12a      	bne.n	10046cd0 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
10046c7a:	4b14      	ldr	r3, [pc, #80]	@ (10046ccc <HAL_RADIO_Init+0x68>)
10046c7c:	681b      	ldr	r3, [r3, #0]
10046c7e:	0a1b      	lsrs	r3, r3, #8
10046c80:	220f      	movs	r2, #15
10046c82:	4013      	ands	r3, r2
10046c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
10046c86:	4b11      	ldr	r3, [pc, #68]	@ (10046ccc <HAL_RADIO_Init+0x68>)
10046c88:	681b      	ldr	r3, [r3, #0]
10046c8a:	0b1b      	lsrs	r3, r3, #12
10046c8c:	220f      	movs	r2, #15
10046c8e:	4013      	ands	r3, r2
10046c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
10046c92:	4b0e      	ldr	r3, [pc, #56]	@ (10046ccc <HAL_RADIO_Init+0x68>)
10046c94:	681b      	ldr	r3, [r3, #0]
10046c96:	0c1b      	lsrs	r3, r3, #16
10046c98:	220f      	movs	r2, #15
10046c9a:	4013      	ands	r3, r2
10046c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
10046c9e:	4b0b      	ldr	r3, [pc, #44]	@ (10046ccc <HAL_RADIO_Init+0x68>)
10046ca0:	681b      	ldr	r3, [r3, #0]
10046ca2:	0d1b      	lsrs	r3, r3, #20
10046ca4:	2207      	movs	r2, #7
10046ca6:	4013      	ands	r3, r2
10046ca8:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
10046caa:	4b08      	ldr	r3, [pc, #32]	@ (10046ccc <HAL_RADIO_Init+0x68>)
10046cac:	681b      	ldr	r3, [r3, #0]
10046cae:	0e1b      	lsrs	r3, r3, #24
10046cb0:	2207      	movs	r2, #7
10046cb2:	4013      	ands	r3, r2
10046cb4:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10046cb6:	231b      	movs	r3, #27
10046cb8:	18fb      	adds	r3, r7, r3
10046cba:	2201      	movs	r2, #1
10046cbc:	701a      	strb	r2, [r3, #0]
10046cbe:	e018      	b.n	10046cf2 <HAL_RADIO_Init+0x8e>
10046cc0:	200009c8 	.word	0x200009c8
10046cc4:	10001ef8 	.word	0x10001ef8
10046cc8:	fcbceccc 	.word	0xfcbceccc
10046ccc:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
10046cd0:	2308      	movs	r3, #8
10046cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
10046cd4:	2307      	movs	r3, #7
10046cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
10046cd8:	2308      	movs	r3, #8
10046cda:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
10046cdc:	211b      	movs	r1, #27
10046cde:	187b      	adds	r3, r7, r1
10046ce0:	2200      	movs	r2, #0
10046ce2:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
10046ce4:	2303      	movs	r3, #3
10046ce6:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
10046ce8:	2303      	movs	r3, #3
10046cea:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
10046cec:	187b      	adds	r3, r7, r1
10046cee:	2201      	movs	r2, #1
10046cf0:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
10046cf2:	4bfc      	ldr	r3, [pc, #1008]	@ (100470e4 <HAL_RADIO_Init+0x480>)
10046cf4:	2200      	movs	r2, #0
10046cf6:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
10046cf8:	687b      	ldr	r3, [r7, #4]
10046cfa:	2b00      	cmp	r3, #0
10046cfc:	d003      	beq.n	10046d06 <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
10046cfe:	687b      	ldr	r3, [r7, #4]
10046d00:	0018      	movs	r0, r3
10046d02:	f7fa f9ab 	bl	1004105c <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10046d06:	23c0      	movs	r3, #192	@ 0xc0
10046d08:	05db      	lsls	r3, r3, #23
10046d0a:	0018      	movs	r0, r3
10046d0c:	f7ff ff7c 	bl	10046c08 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10046d10:	23c0      	movs	r3, #192	@ 0xc0
10046d12:	05db      	lsls	r3, r3, #23
10046d14:	0018      	movs	r0, r3
10046d16:	f7ff ff86 	bl	10046c26 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10046d1a:	4bf3      	ldr	r3, [pc, #972]	@ (100470e8 <HAL_RADIO_Init+0x484>)
10046d1c:	0018      	movs	r0, r3
10046d1e:	f7ff ff91 	bl	10046c44 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
10046d22:	4af2      	ldr	r2, [pc, #968]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046d24:	239e      	movs	r3, #158	@ 0x9e
10046d26:	009b      	lsls	r3, r3, #2
10046d28:	58d3      	ldr	r3, [r2, r3]
10046d2a:	220f      	movs	r2, #15
10046d2c:	4393      	bics	r3, r2
10046d2e:	001a      	movs	r2, r3
10046d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10046d32:	210f      	movs	r1, #15
10046d34:	400b      	ands	r3, r1
10046d36:	49ed      	ldr	r1, [pc, #948]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046d38:	431a      	orrs	r2, r3
10046d3a:	239e      	movs	r3, #158	@ 0x9e
10046d3c:	009b      	lsls	r3, r3, #2
10046d3e:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
10046d40:	4aea      	ldr	r2, [pc, #936]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046d42:	239d      	movs	r3, #157	@ 0x9d
10046d44:	009b      	lsls	r3, r3, #2
10046d46:	58d3      	ldr	r3, [r2, r3]
10046d48:	22f0      	movs	r2, #240	@ 0xf0
10046d4a:	4393      	bics	r3, r2
10046d4c:	001a      	movs	r2, r3
10046d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10046d50:	011b      	lsls	r3, r3, #4
10046d52:	21ff      	movs	r1, #255	@ 0xff
10046d54:	400b      	ands	r3, r1
10046d56:	49e5      	ldr	r1, [pc, #916]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046d58:	431a      	orrs	r2, r3
10046d5a:	239d      	movs	r3, #157	@ 0x9d
10046d5c:	009b      	lsls	r3, r3, #2
10046d5e:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
10046d60:	4ae2      	ldr	r2, [pc, #904]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046d62:	239d      	movs	r3, #157	@ 0x9d
10046d64:	009b      	lsls	r3, r3, #2
10046d66:	58d3      	ldr	r3, [r2, r3]
10046d68:	220f      	movs	r2, #15
10046d6a:	4393      	bics	r3, r2
10046d6c:	001a      	movs	r2, r3
10046d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046d70:	210f      	movs	r1, #15
10046d72:	400b      	ands	r3, r1
10046d74:	49dd      	ldr	r1, [pc, #884]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046d76:	431a      	orrs	r2, r3
10046d78:	239d      	movs	r3, #157	@ 0x9d
10046d7a:	009b      	lsls	r3, r3, #2
10046d7c:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
10046d7e:	231b      	movs	r3, #27
10046d80:	18fb      	adds	r3, r7, r3
10046d82:	781b      	ldrb	r3, [r3, #0]
10046d84:	2b00      	cmp	r3, #0
10046d86:	d01e      	beq.n	10046dc6 <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
10046d88:	4ad8      	ldr	r2, [pc, #864]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046d8a:	2392      	movs	r3, #146	@ 0x92
10046d8c:	009b      	lsls	r3, r3, #2
10046d8e:	58d3      	ldr	r3, [r2, r3]
10046d90:	2207      	movs	r2, #7
10046d92:	4393      	bics	r3, r2
10046d94:	001a      	movs	r2, r3
10046d96:	6a3b      	ldr	r3, [r7, #32]
10046d98:	2107      	movs	r1, #7
10046d9a:	400b      	ands	r3, r1
10046d9c:	49d3      	ldr	r1, [pc, #844]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046d9e:	431a      	orrs	r2, r3
10046da0:	2392      	movs	r3, #146	@ 0x92
10046da2:	009b      	lsls	r3, r3, #2
10046da4:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
10046da6:	4ad1      	ldr	r2, [pc, #836]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046da8:	2392      	movs	r3, #146	@ 0x92
10046daa:	009b      	lsls	r3, r3, #2
10046dac:	58d3      	ldr	r3, [r2, r3]
10046dae:	2238      	movs	r2, #56	@ 0x38
10046db0:	4393      	bics	r3, r2
10046db2:	001a      	movs	r2, r3
10046db4:	69fb      	ldr	r3, [r7, #28]
10046db6:	00db      	lsls	r3, r3, #3
10046db8:	2138      	movs	r1, #56	@ 0x38
10046dba:	400b      	ands	r3, r1
10046dbc:	49cb      	ldr	r1, [pc, #812]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046dbe:	431a      	orrs	r2, r3
10046dc0:	2392      	movs	r3, #146	@ 0x92
10046dc2:	009b      	lsls	r3, r3, #2
10046dc4:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
10046dc6:	4ac9      	ldr	r2, [pc, #804]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046dc8:	23a4      	movs	r3, #164	@ 0xa4
10046dca:	005b      	lsls	r3, r3, #1
10046dcc:	58d3      	ldr	r3, [r2, r3]
10046dce:	22ff      	movs	r2, #255	@ 0xff
10046dd0:	4393      	bics	r3, r2
10046dd2:	49c6      	ldr	r1, [pc, #792]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046dd4:	2255      	movs	r2, #85	@ 0x55
10046dd6:	431a      	orrs	r2, r3
10046dd8:	23a4      	movs	r3, #164	@ 0xa4
10046dda:	005b      	lsls	r3, r3, #1
10046ddc:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
10046dde:	4ac3      	ldr	r2, [pc, #780]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046de0:	23aa      	movs	r3, #170	@ 0xaa
10046de2:	005b      	lsls	r3, r3, #1
10046de4:	58d3      	ldr	r3, [r2, r3]
10046de6:	22ff      	movs	r2, #255	@ 0xff
10046de8:	4393      	bics	r3, r2
10046dea:	49c0      	ldr	r1, [pc, #768]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046dec:	2266      	movs	r2, #102	@ 0x66
10046dee:	431a      	orrs	r2, r3
10046df0:	23aa      	movs	r3, #170	@ 0xaa
10046df2:	005b      	lsls	r3, r3, #1
10046df4:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
10046df6:	4abd      	ldr	r2, [pc, #756]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046df8:	23b4      	movs	r3, #180	@ 0xb4
10046dfa:	005b      	lsls	r3, r3, #1
10046dfc:	58d3      	ldr	r3, [r2, r3]
10046dfe:	22ff      	movs	r2, #255	@ 0xff
10046e00:	4393      	bics	r3, r2
10046e02:	49ba      	ldr	r1, [pc, #744]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e04:	2255      	movs	r2, #85	@ 0x55
10046e06:	431a      	orrs	r2, r3
10046e08:	23b4      	movs	r3, #180	@ 0xb4
10046e0a:	005b      	lsls	r3, r3, #1
10046e0c:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
10046e0e:	4ab7      	ldr	r2, [pc, #732]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e10:	23c4      	movs	r3, #196	@ 0xc4
10046e12:	005b      	lsls	r3, r3, #1
10046e14:	58d3      	ldr	r3, [r2, r3]
10046e16:	22ff      	movs	r2, #255	@ 0xff
10046e18:	4393      	bics	r3, r2
10046e1a:	49b4      	ldr	r1, [pc, #720]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e1c:	221d      	movs	r2, #29
10046e1e:	431a      	orrs	r2, r3
10046e20:	23c4      	movs	r3, #196	@ 0xc4
10046e22:	005b      	lsls	r3, r3, #1
10046e24:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
10046e26:	4ab1      	ldr	r2, [pc, #708]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e28:	23c2      	movs	r3, #194	@ 0xc2
10046e2a:	005b      	lsls	r3, r3, #1
10046e2c:	58d3      	ldr	r3, [r2, r3]
10046e2e:	22ff      	movs	r2, #255	@ 0xff
10046e30:	4393      	bics	r3, r2
10046e32:	49ae      	ldr	r1, [pc, #696]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e34:	2259      	movs	r2, #89	@ 0x59
10046e36:	431a      	orrs	r2, r3
10046e38:	23c2      	movs	r3, #194	@ 0xc2
10046e3a:	005b      	lsls	r3, r3, #1
10046e3c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
10046e3e:	4aab      	ldr	r2, [pc, #684]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e40:	23c6      	movs	r3, #198	@ 0xc6
10046e42:	005b      	lsls	r3, r3, #1
10046e44:	58d3      	ldr	r3, [r2, r3]
10046e46:	22ff      	movs	r2, #255	@ 0xff
10046e48:	4393      	bics	r3, r2
10046e4a:	49a8      	ldr	r1, [pc, #672]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e4c:	2232      	movs	r2, #50	@ 0x32
10046e4e:	431a      	orrs	r2, r3
10046e50:	23c6      	movs	r3, #198	@ 0xc6
10046e52:	005b      	lsls	r3, r3, #1
10046e54:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
10046e56:	4aa5      	ldr	r2, [pc, #660]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e58:	23b6      	movs	r3, #182	@ 0xb6
10046e5a:	005b      	lsls	r3, r3, #1
10046e5c:	58d3      	ldr	r3, [r2, r3]
10046e5e:	49a3      	ldr	r1, [pc, #652]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e60:	2201      	movs	r2, #1
10046e62:	431a      	orrs	r2, r3
10046e64:	23b6      	movs	r3, #182	@ 0xb6
10046e66:	005b      	lsls	r3, r3, #1
10046e68:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
10046e6a:	4aa0      	ldr	r2, [pc, #640]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e6c:	23d0      	movs	r3, #208	@ 0xd0
10046e6e:	009b      	lsls	r3, r3, #2
10046e70:	58d3      	ldr	r3, [r2, r3]
10046e72:	227f      	movs	r2, #127	@ 0x7f
10046e74:	4393      	bics	r3, r2
10046e76:	499d      	ldr	r1, [pc, #628]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e78:	221f      	movs	r2, #31
10046e7a:	431a      	orrs	r2, r3
10046e7c:	23d0      	movs	r3, #208	@ 0xd0
10046e7e:	009b      	lsls	r3, r3, #2
10046e80:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
10046e82:	4a9a      	ldr	r2, [pc, #616]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e84:	23d1      	movs	r3, #209	@ 0xd1
10046e86:	009b      	lsls	r3, r3, #2
10046e88:	58d3      	ldr	r3, [r2, r3]
10046e8a:	223f      	movs	r2, #63	@ 0x3f
10046e8c:	4393      	bics	r3, r2
10046e8e:	4997      	ldr	r1, [pc, #604]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046e90:	2209      	movs	r2, #9
10046e92:	431a      	orrs	r2, r3
10046e94:	23d1      	movs	r3, #209	@ 0xd1
10046e96:	009b      	lsls	r3, r3, #2
10046e98:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
10046e9a:	2040      	movs	r0, #64	@ 0x40
10046e9c:	f7ff fd4c 	bl	10046938 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
10046ea0:	203f      	movs	r0, #63	@ 0x3f
10046ea2:	f7ff fd61 	bl	10046968 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
10046ea6:	2009      	movs	r0, #9
10046ea8:	f7ff fd78 	bl	1004699c <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
10046eac:	205a      	movs	r0, #90	@ 0x5a
10046eae:	f7ff fdb7 	bl	10046a20 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
10046eb2:	2032      	movs	r0, #50	@ 0x32
10046eb4:	f7ff fdce 	bl	10046a54 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
10046eb8:	205a      	movs	r0, #90	@ 0x5a
10046eba:	f7ff fd83 	bl	100469c4 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
10046ebe:	2032      	movs	r0, #50	@ 0x32
10046ec0:	f7ff fd96 	bl	100469f0 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
10046ec4:	2010      	movs	r0, #16
10046ec6:	f7ff fe07 	bl	10046ad8 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
10046eca:	2010      	movs	r0, #16
10046ecc:	f7ff fe1e 	bl	10046b0c <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
10046ed0:	2004      	movs	r0, #4
10046ed2:	f7ff fe35 	bl	10046b40 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
10046ed6:	2014      	movs	r0, #20
10046ed8:	f7ff fdd0 	bl	10046a7c <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
10046edc:	2005      	movs	r0, #5
10046ede:	f7ff fde3 	bl	10046aa8 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
10046ee2:	f7ff fe43 	bl	10046b6c <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
10046ee6:	f7ff fe4f 	bl	10046b88 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
10046eea:	f7ff fe5b 	bl	10046ba4 <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
10046eee:	2000      	movs	r0, #0
10046ef0:	f7ff fe74 	bl	10046bdc <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
10046ef4:	2013      	movs	r0, #19
10046ef6:	183b      	adds	r3, r7, r0
10046ef8:	2200      	movs	r2, #0
10046efa:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10046efc:	183b      	adds	r3, r7, r0
10046efe:	781b      	ldrb	r3, [r3, #0]
10046f00:	183a      	adds	r2, r7, r0
10046f02:	1c59      	adds	r1, r3, #1
10046f04:	7011      	strb	r1, [r2, #0]
10046f06:	001a      	movs	r2, r3
10046f08:	697b      	ldr	r3, [r7, #20]
10046f0a:	189b      	adds	r3, r3, r2
10046f0c:	2201      	movs	r2, #1
10046f0e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
10046f10:	183b      	adds	r3, r7, r0
10046f12:	781b      	ldrb	r3, [r3, #0]
10046f14:	183a      	adds	r2, r7, r0
10046f16:	1c59      	adds	r1, r3, #1
10046f18:	7011      	strb	r1, [r2, #0]
10046f1a:	001a      	movs	r2, r3
10046f1c:	697b      	ldr	r3, [r7, #20]
10046f1e:	189b      	adds	r3, r3, r2
10046f20:	225e      	movs	r2, #94	@ 0x5e
10046f22:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
10046f24:	4a71      	ldr	r2, [pc, #452]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046f26:	239e      	movs	r3, #158	@ 0x9e
10046f28:	009b      	lsls	r3, r3, #2
10046f2a:	58d1      	ldr	r1, [r2, r3]
10046f2c:	183b      	adds	r3, r7, r0
10046f2e:	781b      	ldrb	r3, [r3, #0]
10046f30:	0004      	movs	r4, r0
10046f32:	183a      	adds	r2, r7, r0
10046f34:	1c58      	adds	r0, r3, #1
10046f36:	7010      	strb	r0, [r2, #0]
10046f38:	001a      	movs	r2, r3
10046f3a:	697b      	ldr	r3, [r7, #20]
10046f3c:	189b      	adds	r3, r3, r2
10046f3e:	b2ca      	uxtb	r2, r1
10046f40:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10046f42:	0020      	movs	r0, r4
10046f44:	183b      	adds	r3, r7, r0
10046f46:	781b      	ldrb	r3, [r3, #0]
10046f48:	183a      	adds	r2, r7, r0
10046f4a:	1c59      	adds	r1, r3, #1
10046f4c:	7011      	strb	r1, [r2, #0]
10046f4e:	001a      	movs	r2, r3
10046f50:	697b      	ldr	r3, [r7, #20]
10046f52:	189b      	adds	r3, r3, r2
10046f54:	2201      	movs	r2, #1
10046f56:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
10046f58:	183b      	adds	r3, r7, r0
10046f5a:	781b      	ldrb	r3, [r3, #0]
10046f5c:	183a      	adds	r2, r7, r0
10046f5e:	1c59      	adds	r1, r3, #1
10046f60:	7011      	strb	r1, [r2, #0]
10046f62:	001a      	movs	r2, r3
10046f64:	697b      	ldr	r3, [r7, #20]
10046f66:	189b      	adds	r3, r3, r2
10046f68:	225d      	movs	r2, #93	@ 0x5d
10046f6a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
10046f6c:	4a5f      	ldr	r2, [pc, #380]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046f6e:	239d      	movs	r3, #157	@ 0x9d
10046f70:	009b      	lsls	r3, r3, #2
10046f72:	58d1      	ldr	r1, [r2, r3]
10046f74:	183b      	adds	r3, r7, r0
10046f76:	781b      	ldrb	r3, [r3, #0]
10046f78:	0004      	movs	r4, r0
10046f7a:	183a      	adds	r2, r7, r0
10046f7c:	1c58      	adds	r0, r3, #1
10046f7e:	7010      	strb	r0, [r2, #0]
10046f80:	001a      	movs	r2, r3
10046f82:	697b      	ldr	r3, [r7, #20]
10046f84:	189b      	adds	r3, r3, r2
10046f86:	b2ca      	uxtb	r2, r1
10046f88:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10046f8a:	0020      	movs	r0, r4
10046f8c:	183b      	adds	r3, r7, r0
10046f8e:	781b      	ldrb	r3, [r3, #0]
10046f90:	183a      	adds	r2, r7, r0
10046f92:	1c59      	adds	r1, r3, #1
10046f94:	7011      	strb	r1, [r2, #0]
10046f96:	001a      	movs	r2, r3
10046f98:	697b      	ldr	r3, [r7, #20]
10046f9a:	189b      	adds	r3, r3, r2
10046f9c:	2201      	movs	r2, #1
10046f9e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
10046fa0:	183b      	adds	r3, r7, r0
10046fa2:	781b      	ldrb	r3, [r3, #0]
10046fa4:	183a      	adds	r2, r7, r0
10046fa6:	1c59      	adds	r1, r3, #1
10046fa8:	7011      	strb	r1, [r2, #0]
10046faa:	001a      	movs	r2, r3
10046fac:	697b      	ldr	r3, [r7, #20]
10046fae:	189b      	adds	r3, r3, r2
10046fb0:	2252      	movs	r2, #82	@ 0x52
10046fb2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
10046fb4:	4a4d      	ldr	r2, [pc, #308]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046fb6:	2392      	movs	r3, #146	@ 0x92
10046fb8:	009b      	lsls	r3, r3, #2
10046fba:	58d1      	ldr	r1, [r2, r3]
10046fbc:	183b      	adds	r3, r7, r0
10046fbe:	781b      	ldrb	r3, [r3, #0]
10046fc0:	0004      	movs	r4, r0
10046fc2:	183a      	adds	r2, r7, r0
10046fc4:	1c58      	adds	r0, r3, #1
10046fc6:	7010      	strb	r0, [r2, #0]
10046fc8:	001a      	movs	r2, r3
10046fca:	697b      	ldr	r3, [r7, #20]
10046fcc:	189b      	adds	r3, r3, r2
10046fce:	b2ca      	uxtb	r2, r1
10046fd0:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
10046fd2:	0020      	movs	r0, r4
10046fd4:	183b      	adds	r3, r7, r0
10046fd6:	781b      	ldrb	r3, [r3, #0]
10046fd8:	183a      	adds	r2, r7, r0
10046fda:	1c59      	adds	r1, r3, #1
10046fdc:	7011      	strb	r1, [r2, #0]
10046fde:	001a      	movs	r2, r3
10046fe0:	697b      	ldr	r3, [r7, #20]
10046fe2:	189b      	adds	r3, r3, r2
10046fe4:	2201      	movs	r2, #1
10046fe6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
10046fe8:	183b      	adds	r3, r7, r0
10046fea:	781b      	ldrb	r3, [r3, #0]
10046fec:	183a      	adds	r2, r7, r0
10046fee:	1c59      	adds	r1, r3, #1
10046ff0:	7011      	strb	r1, [r2, #0]
10046ff2:	001a      	movs	r2, r3
10046ff4:	697b      	ldr	r3, [r7, #20]
10046ff6:	189b      	adds	r3, r3, r2
10046ff8:	2212      	movs	r2, #18
10046ffa:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
10046ffc:	4a3b      	ldr	r2, [pc, #236]	@ (100470ec <HAL_RADIO_Init+0x488>)
10046ffe:	23a4      	movs	r3, #164	@ 0xa4
10047000:	005b      	lsls	r3, r3, #1
10047002:	58d1      	ldr	r1, [r2, r3]
10047004:	183b      	adds	r3, r7, r0
10047006:	781b      	ldrb	r3, [r3, #0]
10047008:	0004      	movs	r4, r0
1004700a:	183a      	adds	r2, r7, r0
1004700c:	1c58      	adds	r0, r3, #1
1004700e:	7010      	strb	r0, [r2, #0]
10047010:	001a      	movs	r2, r3
10047012:	697b      	ldr	r3, [r7, #20]
10047014:	189b      	adds	r3, r3, r2
10047016:	b2ca      	uxtb	r2, r1
10047018:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004701a:	0020      	movs	r0, r4
1004701c:	183b      	adds	r3, r7, r0
1004701e:	781b      	ldrb	r3, [r3, #0]
10047020:	183a      	adds	r2, r7, r0
10047022:	1c59      	adds	r1, r3, #1
10047024:	7011      	strb	r1, [r2, #0]
10047026:	001a      	movs	r2, r3
10047028:	697b      	ldr	r3, [r7, #20]
1004702a:	189b      	adds	r3, r3, r2
1004702c:	2201      	movs	r2, #1
1004702e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
10047030:	183b      	adds	r3, r7, r0
10047032:	781b      	ldrb	r3, [r3, #0]
10047034:	183a      	adds	r2, r7, r0
10047036:	1c59      	adds	r1, r3, #1
10047038:	7011      	strb	r1, [r2, #0]
1004703a:	001a      	movs	r2, r3
1004703c:	697b      	ldr	r3, [r7, #20]
1004703e:	189b      	adds	r3, r3, r2
10047040:	2215      	movs	r2, #21
10047042:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
10047044:	4a29      	ldr	r2, [pc, #164]	@ (100470ec <HAL_RADIO_Init+0x488>)
10047046:	23aa      	movs	r3, #170	@ 0xaa
10047048:	005b      	lsls	r3, r3, #1
1004704a:	58d1      	ldr	r1, [r2, r3]
1004704c:	183b      	adds	r3, r7, r0
1004704e:	781b      	ldrb	r3, [r3, #0]
10047050:	0004      	movs	r4, r0
10047052:	183a      	adds	r2, r7, r0
10047054:	1c58      	adds	r0, r3, #1
10047056:	7010      	strb	r0, [r2, #0]
10047058:	001a      	movs	r2, r3
1004705a:	697b      	ldr	r3, [r7, #20]
1004705c:	189b      	adds	r3, r3, r2
1004705e:	b2ca      	uxtb	r2, r1
10047060:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047062:	0020      	movs	r0, r4
10047064:	183b      	adds	r3, r7, r0
10047066:	781b      	ldrb	r3, [r3, #0]
10047068:	183a      	adds	r2, r7, r0
1004706a:	1c59      	adds	r1, r3, #1
1004706c:	7011      	strb	r1, [r2, #0]
1004706e:	001a      	movs	r2, r3
10047070:	697b      	ldr	r3, [r7, #20]
10047072:	189b      	adds	r3, r3, r2
10047074:	2201      	movs	r2, #1
10047076:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
10047078:	183b      	adds	r3, r7, r0
1004707a:	781b      	ldrb	r3, [r3, #0]
1004707c:	183a      	adds	r2, r7, r0
1004707e:	1c59      	adds	r1, r3, #1
10047080:	7011      	strb	r1, [r2, #0]
10047082:	001a      	movs	r2, r3
10047084:	697b      	ldr	r3, [r7, #20]
10047086:	189b      	adds	r3, r3, r2
10047088:	221a      	movs	r2, #26
1004708a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
1004708c:	4a17      	ldr	r2, [pc, #92]	@ (100470ec <HAL_RADIO_Init+0x488>)
1004708e:	23b4      	movs	r3, #180	@ 0xb4
10047090:	005b      	lsls	r3, r3, #1
10047092:	58d1      	ldr	r1, [r2, r3]
10047094:	183b      	adds	r3, r7, r0
10047096:	781b      	ldrb	r3, [r3, #0]
10047098:	0004      	movs	r4, r0
1004709a:	183a      	adds	r2, r7, r0
1004709c:	1c58      	adds	r0, r3, #1
1004709e:	7010      	strb	r0, [r2, #0]
100470a0:	001a      	movs	r2, r3
100470a2:	697b      	ldr	r3, [r7, #20]
100470a4:	189b      	adds	r3, r3, r2
100470a6:	b2ca      	uxtb	r2, r1
100470a8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
100470aa:	0020      	movs	r0, r4
100470ac:	183b      	adds	r3, r7, r0
100470ae:	781b      	ldrb	r3, [r3, #0]
100470b0:	183a      	adds	r2, r7, r0
100470b2:	1c59      	adds	r1, r3, #1
100470b4:	7011      	strb	r1, [r2, #0]
100470b6:	001a      	movs	r2, r3
100470b8:	697b      	ldr	r3, [r7, #20]
100470ba:	189b      	adds	r3, r3, r2
100470bc:	2201      	movs	r2, #1
100470be:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
100470c0:	183b      	adds	r3, r7, r0
100470c2:	781b      	ldrb	r3, [r3, #0]
100470c4:	183a      	adds	r2, r7, r0
100470c6:	1c59      	adds	r1, r3, #1
100470c8:	7011      	strb	r1, [r2, #0]
100470ca:	001a      	movs	r2, r3
100470cc:	697b      	ldr	r3, [r7, #20]
100470ce:	189b      	adds	r3, r3, r2
100470d0:	2222      	movs	r2, #34	@ 0x22
100470d2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
100470d4:	4a05      	ldr	r2, [pc, #20]	@ (100470ec <HAL_RADIO_Init+0x488>)
100470d6:	23c4      	movs	r3, #196	@ 0xc4
100470d8:	005b      	lsls	r3, r3, #1
100470da:	58d1      	ldr	r1, [r2, r3]
100470dc:	183b      	adds	r3, r7, r0
100470de:	781b      	ldrb	r3, [r3, #0]
100470e0:	0004      	movs	r4, r0
100470e2:	e005      	b.n	100470f0 <HAL_RADIO_Init+0x48c>
100470e4:	200000c0 	.word	0x200000c0
100470e8:	60001800 	.word	0x60001800
100470ec:	60001400 	.word	0x60001400
100470f0:	183a      	adds	r2, r7, r0
100470f2:	1c58      	adds	r0, r3, #1
100470f4:	7010      	strb	r0, [r2, #0]
100470f6:	001a      	movs	r2, r3
100470f8:	697b      	ldr	r3, [r7, #20]
100470fa:	189b      	adds	r3, r3, r2
100470fc:	b2ca      	uxtb	r2, r1
100470fe:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047100:	0020      	movs	r0, r4
10047102:	183b      	adds	r3, r7, r0
10047104:	781b      	ldrb	r3, [r3, #0]
10047106:	183a      	adds	r2, r7, r0
10047108:	1c59      	adds	r1, r3, #1
1004710a:	7011      	strb	r1, [r2, #0]
1004710c:	001a      	movs	r2, r3
1004710e:	697b      	ldr	r3, [r7, #20]
10047110:	189b      	adds	r3, r3, r2
10047112:	2201      	movs	r2, #1
10047114:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
10047116:	183b      	adds	r3, r7, r0
10047118:	781b      	ldrb	r3, [r3, #0]
1004711a:	183a      	adds	r2, r7, r0
1004711c:	1c59      	adds	r1, r3, #1
1004711e:	7011      	strb	r1, [r2, #0]
10047120:	001a      	movs	r2, r3
10047122:	697b      	ldr	r3, [r7, #20]
10047124:	189b      	adds	r3, r3, r2
10047126:	2221      	movs	r2, #33	@ 0x21
10047128:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004712a:	4a6d      	ldr	r2, [pc, #436]	@ (100472e0 <HAL_RADIO_Init+0x67c>)
1004712c:	23c2      	movs	r3, #194	@ 0xc2
1004712e:	005b      	lsls	r3, r3, #1
10047130:	58d1      	ldr	r1, [r2, r3]
10047132:	183b      	adds	r3, r7, r0
10047134:	781b      	ldrb	r3, [r3, #0]
10047136:	0004      	movs	r4, r0
10047138:	183a      	adds	r2, r7, r0
1004713a:	1c58      	adds	r0, r3, #1
1004713c:	7010      	strb	r0, [r2, #0]
1004713e:	001a      	movs	r2, r3
10047140:	697b      	ldr	r3, [r7, #20]
10047142:	189b      	adds	r3, r3, r2
10047144:	b2ca      	uxtb	r2, r1
10047146:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047148:	0020      	movs	r0, r4
1004714a:	183b      	adds	r3, r7, r0
1004714c:	781b      	ldrb	r3, [r3, #0]
1004714e:	183a      	adds	r2, r7, r0
10047150:	1c59      	adds	r1, r3, #1
10047152:	7011      	strb	r1, [r2, #0]
10047154:	001a      	movs	r2, r3
10047156:	697b      	ldr	r3, [r7, #20]
10047158:	189b      	adds	r3, r3, r2
1004715a:	2201      	movs	r2, #1
1004715c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
1004715e:	183b      	adds	r3, r7, r0
10047160:	781b      	ldrb	r3, [r3, #0]
10047162:	183a      	adds	r2, r7, r0
10047164:	1c59      	adds	r1, r3, #1
10047166:	7011      	strb	r1, [r2, #0]
10047168:	001a      	movs	r2, r3
1004716a:	697b      	ldr	r3, [r7, #20]
1004716c:	189b      	adds	r3, r3, r2
1004716e:	2223      	movs	r2, #35	@ 0x23
10047170:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
10047172:	4a5b      	ldr	r2, [pc, #364]	@ (100472e0 <HAL_RADIO_Init+0x67c>)
10047174:	23c6      	movs	r3, #198	@ 0xc6
10047176:	005b      	lsls	r3, r3, #1
10047178:	58d1      	ldr	r1, [r2, r3]
1004717a:	183b      	adds	r3, r7, r0
1004717c:	781b      	ldrb	r3, [r3, #0]
1004717e:	0004      	movs	r4, r0
10047180:	183a      	adds	r2, r7, r0
10047182:	1c58      	adds	r0, r3, #1
10047184:	7010      	strb	r0, [r2, #0]
10047186:	001a      	movs	r2, r3
10047188:	697b      	ldr	r3, [r7, #20]
1004718a:	189b      	adds	r3, r3, r2
1004718c:	b2ca      	uxtb	r2, r1
1004718e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047190:	0020      	movs	r0, r4
10047192:	183b      	adds	r3, r7, r0
10047194:	781b      	ldrb	r3, [r3, #0]
10047196:	183a      	adds	r2, r7, r0
10047198:	1c59      	adds	r1, r3, #1
1004719a:	7011      	strb	r1, [r2, #0]
1004719c:	001a      	movs	r2, r3
1004719e:	697b      	ldr	r3, [r7, #20]
100471a0:	189b      	adds	r3, r3, r2
100471a2:	2201      	movs	r2, #1
100471a4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
100471a6:	183b      	adds	r3, r7, r0
100471a8:	781b      	ldrb	r3, [r3, #0]
100471aa:	183a      	adds	r2, r7, r0
100471ac:	1c59      	adds	r1, r3, #1
100471ae:	7011      	strb	r1, [r2, #0]
100471b0:	001a      	movs	r2, r3
100471b2:	697b      	ldr	r3, [r7, #20]
100471b4:	189b      	adds	r3, r3, r2
100471b6:	221b      	movs	r2, #27
100471b8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
100471ba:	4a49      	ldr	r2, [pc, #292]	@ (100472e0 <HAL_RADIO_Init+0x67c>)
100471bc:	23b6      	movs	r3, #182	@ 0xb6
100471be:	005b      	lsls	r3, r3, #1
100471c0:	58d1      	ldr	r1, [r2, r3]
100471c2:	183b      	adds	r3, r7, r0
100471c4:	781b      	ldrb	r3, [r3, #0]
100471c6:	0004      	movs	r4, r0
100471c8:	183a      	adds	r2, r7, r0
100471ca:	1c58      	adds	r0, r3, #1
100471cc:	7010      	strb	r0, [r2, #0]
100471ce:	001a      	movs	r2, r3
100471d0:	697b      	ldr	r3, [r7, #20]
100471d2:	189b      	adds	r3, r3, r2
100471d4:	b2ca      	uxtb	r2, r1
100471d6:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
100471d8:	0020      	movs	r0, r4
100471da:	183b      	adds	r3, r7, r0
100471dc:	781b      	ldrb	r3, [r3, #0]
100471de:	183a      	adds	r2, r7, r0
100471e0:	1c59      	adds	r1, r3, #1
100471e2:	7011      	strb	r1, [r2, #0]
100471e4:	001a      	movs	r2, r3
100471e6:	697b      	ldr	r3, [r7, #20]
100471e8:	189b      	adds	r3, r3, r2
100471ea:	2201      	movs	r2, #1
100471ec:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
100471ee:	183b      	adds	r3, r7, r0
100471f0:	781b      	ldrb	r3, [r3, #0]
100471f2:	183a      	adds	r2, r7, r0
100471f4:	1c59      	adds	r1, r3, #1
100471f6:	7011      	strb	r1, [r2, #0]
100471f8:	001a      	movs	r2, r3
100471fa:	697b      	ldr	r3, [r7, #20]
100471fc:	189b      	adds	r3, r3, r2
100471fe:	2290      	movs	r2, #144	@ 0x90
10047200:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
10047202:	4a37      	ldr	r2, [pc, #220]	@ (100472e0 <HAL_RADIO_Init+0x67c>)
10047204:	23d0      	movs	r3, #208	@ 0xd0
10047206:	009b      	lsls	r3, r3, #2
10047208:	58d1      	ldr	r1, [r2, r3]
1004720a:	183b      	adds	r3, r7, r0
1004720c:	781b      	ldrb	r3, [r3, #0]
1004720e:	0004      	movs	r4, r0
10047210:	183a      	adds	r2, r7, r0
10047212:	1c58      	adds	r0, r3, #1
10047214:	7010      	strb	r0, [r2, #0]
10047216:	001a      	movs	r2, r3
10047218:	697b      	ldr	r3, [r7, #20]
1004721a:	189b      	adds	r3, r3, r2
1004721c:	b2ca      	uxtb	r2, r1
1004721e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
10047220:	0020      	movs	r0, r4
10047222:	183b      	adds	r3, r7, r0
10047224:	781b      	ldrb	r3, [r3, #0]
10047226:	183a      	adds	r2, r7, r0
10047228:	1c59      	adds	r1, r3, #1
1004722a:	7011      	strb	r1, [r2, #0]
1004722c:	001a      	movs	r2, r3
1004722e:	697b      	ldr	r3, [r7, #20]
10047230:	189b      	adds	r3, r3, r2
10047232:	2201      	movs	r2, #1
10047234:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
10047236:	183b      	adds	r3, r7, r0
10047238:	781b      	ldrb	r3, [r3, #0]
1004723a:	183a      	adds	r2, r7, r0
1004723c:	1c59      	adds	r1, r3, #1
1004723e:	7011      	strb	r1, [r2, #0]
10047240:	001a      	movs	r2, r3
10047242:	697b      	ldr	r3, [r7, #20]
10047244:	189b      	adds	r3, r3, r2
10047246:	2291      	movs	r2, #145	@ 0x91
10047248:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
1004724a:	4a25      	ldr	r2, [pc, #148]	@ (100472e0 <HAL_RADIO_Init+0x67c>)
1004724c:	23d1      	movs	r3, #209	@ 0xd1
1004724e:	009b      	lsls	r3, r3, #2
10047250:	58d1      	ldr	r1, [r2, r3]
10047252:	183b      	adds	r3, r7, r0
10047254:	781b      	ldrb	r3, [r3, #0]
10047256:	0004      	movs	r4, r0
10047258:	183a      	adds	r2, r7, r0
1004725a:	1c58      	adds	r0, r3, #1
1004725c:	7010      	strb	r0, [r2, #0]
1004725e:	001a      	movs	r2, r3
10047260:	697b      	ldr	r3, [r7, #20]
10047262:	189b      	adds	r3, r3, r2
10047264:	b2ca      	uxtb	r2, r1
10047266:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
10047268:	193b      	adds	r3, r7, r4
1004726a:	781b      	ldrb	r3, [r3, #0]
1004726c:	193a      	adds	r2, r7, r4
1004726e:	1c59      	adds	r1, r3, #1
10047270:	7011      	strb	r1, [r2, #0]
10047272:	001a      	movs	r2, r3
10047274:	697b      	ldr	r3, [r7, #20]
10047276:	189b      	adds	r3, r3, r2
10047278:	2200      	movs	r2, #0
1004727a:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
1004727c:	4a19      	ldr	r2, [pc, #100]	@ (100472e4 <HAL_RADIO_Init+0x680>)
1004727e:	4b1a      	ldr	r3, [pc, #104]	@ (100472e8 <HAL_RADIO_Init+0x684>)
10047280:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
10047282:	4a18      	ldr	r2, [pc, #96]	@ (100472e4 <HAL_RADIO_Init+0x680>)
10047284:	4b18      	ldr	r3, [pc, #96]	@ (100472e8 <HAL_RADIO_Init+0x684>)
10047286:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
10047288:	4a18      	ldr	r2, [pc, #96]	@ (100472ec <HAL_RADIO_Init+0x688>)
1004728a:	4b17      	ldr	r3, [pc, #92]	@ (100472e8 <HAL_RADIO_Init+0x684>)
1004728c:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
1004728e:	4b16      	ldr	r3, [pc, #88]	@ (100472e8 <HAL_RADIO_Init+0x684>)
10047290:	2200      	movs	r2, #0
10047292:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
10047294:	4b14      	ldr	r3, [pc, #80]	@ (100472e8 <HAL_RADIO_Init+0x684>)
10047296:	681b      	ldr	r3, [r3, #0]
10047298:	0018      	movs	r0, r3
1004729a:	f7ff fb3d 	bl	10046918 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
1004729e:	4b10      	ldr	r3, [pc, #64]	@ (100472e0 <HAL_RADIO_Init+0x67c>)
100472a0:	2201      	movs	r2, #1
100472a2:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
100472a4:	f7ff fc8c 	bl	10046bc0 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
100472a8:	23c0      	movs	r3, #192	@ 0xc0
100472aa:	05db      	lsls	r3, r3, #23
100472ac:	685b      	ldr	r3, [r3, #4]
100472ae:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
100472b0:	23c0      	movs	r3, #192	@ 0xc0
100472b2:	05db      	lsls	r3, r3, #23
100472b4:	68fa      	ldr	r2, [r7, #12]
100472b6:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
100472b8:	4b0d      	ldr	r3, [pc, #52]	@ (100472f0 <HAL_RADIO_Init+0x68c>)
100472ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100472bc:	4b0c      	ldr	r3, [pc, #48]	@ (100472f0 <HAL_RADIO_Init+0x68c>)
100472be:	2101      	movs	r1, #1
100472c0:	430a      	orrs	r2, r1
100472c2:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
100472c4:	4b0a      	ldr	r3, [pc, #40]	@ (100472f0 <HAL_RADIO_Init+0x68c>)
100472c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100472c8:	4b09      	ldr	r3, [pc, #36]	@ (100472f0 <HAL_RADIO_Init+0x68c>)
100472ca:	2101      	movs	r1, #1
100472cc:	430a      	orrs	r2, r1
100472ce:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
100472d0:	23c0      	movs	r3, #192	@ 0xc0
100472d2:	05db      	lsls	r3, r3, #23
100472d4:	685b      	ldr	r3, [r3, #4]
100472d6:	60fb      	str	r3, [r7, #12]

  return;
100472d8:	46c0      	nop			@ (mov r8, r8)
}
100472da:	46bd      	mov	sp, r7
100472dc:	b00d      	add	sp, #52	@ 0x34
100472de:	bd90      	pop	{r4, r7, pc}
100472e0:	60001400 	.word	0x60001400
100472e4:	200009c8 	.word	0x200009c8
100472e8:	200009b8 	.word	0x200009b8
100472ec:	200009c4 	.word	0x200009c4
100472f0:	60001800 	.word	0x60001800

100472f4 <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
100472f4:	b580      	push	{r7, lr}
100472f6:	b082      	sub	sp, #8
100472f8:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
100472fa:	23c0      	movs	r3, #192	@ 0xc0
100472fc:	05db      	lsls	r3, r3, #23
100472fe:	69db      	ldr	r3, [r3, #28]
10047300:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
10047302:	23c0      	movs	r3, #192	@ 0xc0
10047304:	05db      	lsls	r3, r3, #23
10047306:	685b      	ldr	r3, [r3, #4]
10047308:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
1004730a:	23c0      	movs	r3, #192	@ 0xc0
1004730c:	05db      	lsls	r3, r3, #23
1004730e:	683a      	ldr	r2, [r7, #0]
10047310:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
10047312:	f000 fdd1 	bl	10047eb8 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
10047316:	687a      	ldr	r2, [r7, #4]
10047318:	683b      	ldr	r3, [r7, #0]
1004731a:	4313      	orrs	r3, r2
1004731c:	0018      	movs	r0, r3
1004731e:	f7fa f98a 	bl	10041636 <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
10047322:	f000 fdc3 	bl	10047eac <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
10047326:	23c0      	movs	r3, #192	@ 0xc0
10047328:	05db      	lsls	r3, r3, #23
1004732a:	685b      	ldr	r3, [r3, #4]
1004732c:	603b      	str	r3, [r7, #0]
}
1004732e:	46c0      	nop			@ (mov r8, r8)
10047330:	46bd      	mov	sp, r7
10047332:	b002      	add	sp, #8
10047334:	bd80      	pop	{r7, pc}

10047336 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
10047336:	b580      	push	{r7, lr}
10047338:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004733a:	f7fd fcbd 	bl	10044cb8 <HAL_RADIO_TxRxSeqCallback>
}
1004733e:	46c0      	nop			@ (mov r8, r8)
10047340:	46bd      	mov	sp, r7
10047342:	bd80      	pop	{r7, pc}

10047344 <__NVIC_EnableIRQ>:
{
10047344:	b580      	push	{r7, lr}
10047346:	b082      	sub	sp, #8
10047348:	af00      	add	r7, sp, #0
1004734a:	0002      	movs	r2, r0
1004734c:	1dfb      	adds	r3, r7, #7
1004734e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10047350:	1dfb      	adds	r3, r7, #7
10047352:	781b      	ldrb	r3, [r3, #0]
10047354:	2b7f      	cmp	r3, #127	@ 0x7f
10047356:	d809      	bhi.n	1004736c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10047358:	1dfb      	adds	r3, r7, #7
1004735a:	781b      	ldrb	r3, [r3, #0]
1004735c:	001a      	movs	r2, r3
1004735e:	231f      	movs	r3, #31
10047360:	401a      	ands	r2, r3
10047362:	4b04      	ldr	r3, [pc, #16]	@ (10047374 <__NVIC_EnableIRQ+0x30>)
10047364:	2101      	movs	r1, #1
10047366:	4091      	lsls	r1, r2
10047368:	000a      	movs	r2, r1
1004736a:	601a      	str	r2, [r3, #0]
}
1004736c:	46c0      	nop			@ (mov r8, r8)
1004736e:	46bd      	mov	sp, r7
10047370:	b002      	add	sp, #8
10047372:	bd80      	pop	{r7, pc}
10047374:	e000e100 	.word	0xe000e100

10047378 <LL_RADIO_TIMER_EnableTimer1>:
{
10047378:	b580      	push	{r7, lr}
1004737a:	b082      	sub	sp, #8
1004737c:	af00      	add	r7, sp, #0
1004737e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
10047380:	687b      	ldr	r3, [r7, #4]
10047382:	68db      	ldr	r3, [r3, #12]
10047384:	2203      	movs	r2, #3
10047386:	4393      	bics	r3, r2
10047388:	2202      	movs	r2, #2
1004738a:	431a      	orrs	r2, r3
1004738c:	687b      	ldr	r3, [r7, #4]
1004738e:	60da      	str	r2, [r3, #12]
}
10047390:	46c0      	nop			@ (mov r8, r8)
10047392:	46bd      	mov	sp, r7
10047394:	b002      	add	sp, #8
10047396:	bd80      	pop	{r7, pc}

10047398 <LL_RADIO_TIMER_DisableTimer1>:
{
10047398:	b580      	push	{r7, lr}
1004739a:	b082      	sub	sp, #8
1004739c:	af00      	add	r7, sp, #0
1004739e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100473a0:	687b      	ldr	r3, [r7, #4]
100473a2:	68db      	ldr	r3, [r3, #12]
100473a4:	2203      	movs	r2, #3
100473a6:	4393      	bics	r3, r2
100473a8:	001a      	movs	r2, r3
100473aa:	687b      	ldr	r3, [r7, #4]
100473ac:	60da      	str	r2, [r3, #12]
}
100473ae:	46c0      	nop			@ (mov r8, r8)
100473b0:	46bd      	mov	sp, r7
100473b2:	b002      	add	sp, #8
100473b4:	bd80      	pop	{r7, pc}

100473b6 <LL_RADIO_TIMER_IsEnabledTimer1>:
{
100473b6:	b580      	push	{r7, lr}
100473b8:	b082      	sub	sp, #8
100473ba:	af00      	add	r7, sp, #0
100473bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_1)) ? 1UL : 0UL);
100473be:	687b      	ldr	r3, [r7, #4]
100473c0:	68db      	ldr	r3, [r3, #12]
100473c2:	2203      	movs	r2, #3
100473c4:	4013      	ands	r3, r2
100473c6:	2b02      	cmp	r3, #2
100473c8:	d101      	bne.n	100473ce <LL_RADIO_TIMER_IsEnabledTimer1+0x18>
100473ca:	2301      	movs	r3, #1
100473cc:	e000      	b.n	100473d0 <LL_RADIO_TIMER_IsEnabledTimer1+0x1a>
100473ce:	2300      	movs	r3, #0
}
100473d0:	0018      	movs	r0, r3
100473d2:	46bd      	mov	sp, r7
100473d4:	b002      	add	sp, #8
100473d6:	bd80      	pop	{r7, pc}

100473d8 <LL_RADIO_TIMER_DisableTimer2>:
{
100473d8:	b580      	push	{r7, lr}
100473da:	b082      	sub	sp, #8
100473dc:	af00      	add	r7, sp, #0
100473de:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
100473e0:	687b      	ldr	r3, [r7, #4]
100473e2:	68db      	ldr	r3, [r3, #12]
100473e4:	2203      	movs	r2, #3
100473e6:	4393      	bics	r3, r2
100473e8:	001a      	movs	r2, r3
100473ea:	687b      	ldr	r3, [r7, #4]
100473ec:	60da      	str	r2, [r3, #12]
}
100473ee:	46c0      	nop			@ (mov r8, r8)
100473f0:	46bd      	mov	sp, r7
100473f2:	b002      	add	sp, #8
100473f4:	bd80      	pop	{r7, pc}

100473f6 <LL_RADIO_TIMER_IsEnabledTimer2>:
{
100473f6:	b580      	push	{r7, lr}
100473f8:	b082      	sub	sp, #8
100473fa:	af00      	add	r7, sp, #0
100473fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION) == (LL_RADIO_TIMER_2)) ? 1UL : 0UL);
100473fe:	687b      	ldr	r3, [r7, #4]
10047400:	68db      	ldr	r3, [r3, #12]
10047402:	2203      	movs	r2, #3
10047404:	4013      	ands	r3, r2
10047406:	2b03      	cmp	r3, #3
10047408:	d101      	bne.n	1004740e <LL_RADIO_TIMER_IsEnabledTimer2+0x18>
1004740a:	2301      	movs	r3, #1
1004740c:	e000      	b.n	10047410 <LL_RADIO_TIMER_IsEnabledTimer2+0x1a>
1004740e:	2300      	movs	r3, #0
}
10047410:	0018      	movs	r0, r3
10047412:	46bd      	mov	sp, r7
10047414:	b002      	add	sp, #8
10047416:	bd80      	pop	{r7, pc}

10047418 <LL_RADIO_TIMER_SetTimeout>:
{
10047418:	b580      	push	{r7, lr}
1004741a:	b082      	sub	sp, #8
1004741c:	af00      	add	r7, sp, #0
1004741e:	6078      	str	r0, [r7, #4]
10047420:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
10047422:	687b      	ldr	r3, [r7, #4]
10047424:	683a      	ldr	r2, [r7, #0]
10047426:	611a      	str	r2, [r3, #16]
}
10047428:	46c0      	nop			@ (mov r8, r8)
1004742a:	46bd      	mov	sp, r7
1004742c:	b002      	add	sp, #8
1004742e:	bd80      	pop	{r7, pc}

10047430 <LL_RADIO_TIMER_GetTimeout>:
{
10047430:	b580      	push	{r7, lr}
10047432:	b082      	sub	sp, #8
10047434:	af00      	add	r7, sp, #0
10047436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(BLUEx->TIMEOUTREG));
10047438:	687b      	ldr	r3, [r7, #4]
1004743a:	691b      	ldr	r3, [r3, #16]
}
1004743c:	0018      	movs	r0, r3
1004743e:	46bd      	mov	sp, r7
10047440:	b002      	add	sp, #8
10047442:	bd80      	pop	{r7, pc}

10047444 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
10047444:	b580      	push	{r7, lr}
10047446:	b082      	sub	sp, #8
10047448:	af00      	add	r7, sp, #0
1004744a:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004744c:	687b      	ldr	r3, [r7, #4]
1004744e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10047450:	2280      	movs	r2, #128	@ 0x80
10047452:	05d2      	lsls	r2, r2, #23
10047454:	431a      	orrs	r2, r3
10047456:	687b      	ldr	r3, [r7, #4]
10047458:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004745a:	46c0      	nop			@ (mov r8, r8)
1004745c:	46bd      	mov	sp, r7
1004745e:	b002      	add	sp, #8
10047460:	bd80      	pop	{r7, pc}
	...

10047464 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
10047464:	b580      	push	{r7, lr}
10047466:	b082      	sub	sp, #8
10047468:	af00      	add	r7, sp, #0
1004746a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004746c:	687b      	ldr	r3, [r7, #4]
1004746e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10047470:	4a03      	ldr	r2, [pc, #12]	@ (10047480 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
10047472:	401a      	ands	r2, r3
10047474:	687b      	ldr	r3, [r7, #4]
10047476:	629a      	str	r2, [r3, #40]	@ 0x28
}
10047478:	46c0      	nop			@ (mov r8, r8)
1004747a:	46bd      	mov	sp, r7
1004747c:	b002      	add	sp, #8
1004747e:	bd80      	pop	{r7, pc}
10047480:	bfffffff 	.word	0xbfffffff

10047484 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>:
{
10047484:	b580      	push	{r7, lr}
10047486:	b082      	sub	sp, #8
10047488:	af00      	add	r7, sp, #0
1004748a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN) == (WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN)) ? 1UL : 0UL);
1004748c:	687b      	ldr	r3, [r7, #4]
1004748e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047490:	2380      	movs	r3, #128	@ 0x80
10047492:	05db      	lsls	r3, r3, #23
10047494:	401a      	ands	r2, r3
10047496:	2380      	movs	r3, #128	@ 0x80
10047498:	05db      	lsls	r3, r3, #23
1004749a:	429a      	cmp	r2, r3
1004749c:	d101      	bne.n	100474a2 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x1e>
1004749e:	2301      	movs	r3, #1
100474a0:	e000      	b.n	100474a4 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer+0x20>
100474a2:	2300      	movs	r3, #0
}
100474a4:	0018      	movs	r0, r3
100474a6:	46bd      	mov	sp, r7
100474a8:	b002      	add	sp, #8
100474aa:	bd80      	pop	{r7, pc}

100474ac <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
100474ac:	b580      	push	{r7, lr}
100474ae:	b082      	sub	sp, #8
100474b0:	af00      	add	r7, sp, #0
100474b2:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
100474b4:	687b      	ldr	r3, [r7, #4]
100474b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100474b8:	2280      	movs	r2, #128	@ 0x80
100474ba:	05d2      	lsls	r2, r2, #23
100474bc:	431a      	orrs	r2, r3
100474be:	687b      	ldr	r3, [r7, #4]
100474c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
100474c2:	46c0      	nop			@ (mov r8, r8)
100474c4:	46bd      	mov	sp, r7
100474c6:	b002      	add	sp, #8
100474c8:	bd80      	pop	{r7, pc}
	...

100474cc <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
100474cc:	b580      	push	{r7, lr}
100474ce:	b082      	sub	sp, #8
100474d0:	af00      	add	r7, sp, #0
100474d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
100474d4:	687b      	ldr	r3, [r7, #4]
100474d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100474d8:	4a03      	ldr	r2, [pc, #12]	@ (100474e8 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
100474da:	401a      	ands	r2, r3
100474dc:	687b      	ldr	r3, [r7, #4]
100474de:	631a      	str	r2, [r3, #48]	@ 0x30
}
100474e0:	46c0      	nop			@ (mov r8, r8)
100474e2:	46bd      	mov	sp, r7
100474e4:	b002      	add	sp, #8
100474e6:	bd80      	pop	{r7, pc}
100474e8:	bfffffff 	.word	0xbfffffff

100474ec <LL_RADIO_TIMER_SetWakeupOffset>:
{
100474ec:	b580      	push	{r7, lr}
100474ee:	b082      	sub	sp, #8
100474f0:	af00      	add	r7, sp, #0
100474f2:	6078      	str	r0, [r7, #4]
100474f4:	000a      	movs	r2, r1
100474f6:	1cfb      	adds	r3, r7, #3
100474f8:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
100474fa:	1cfb      	adds	r3, r7, #3
100474fc:	781a      	ldrb	r2, [r3, #0]
100474fe:	687b      	ldr	r3, [r7, #4]
10047500:	609a      	str	r2, [r3, #8]
}
10047502:	46c0      	nop			@ (mov r8, r8)
10047504:	46bd      	mov	sp, r7
10047506:	b002      	add	sp, #8
10047508:	bd80      	pop	{r7, pc}

1004750a <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
1004750a:	b580      	push	{r7, lr}
1004750c:	b082      	sub	sp, #8
1004750e:	af00      	add	r7, sp, #0
10047510:	6078      	str	r0, [r7, #4]
10047512:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
10047514:	687b      	ldr	r3, [r7, #4]
10047516:	683a      	ldr	r2, [r7, #0]
10047518:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004751a:	46c0      	nop			@ (mov r8, r8)
1004751c:	46bd      	mov	sp, r7
1004751e:	b002      	add	sp, #8
10047520:	bd80      	pop	{r7, pc}

10047522 <LL_RADIO_TIMER_GetBLEWakeupTime>:
{
10047522:	b580      	push	{r7, lr}
10047524:	b082      	sub	sp, #8
10047526:	af00      	add	r7, sp, #0
10047528:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->BLUE_WAKEUP_TIME));
1004752a:	687b      	ldr	r3, [r7, #4]
1004752c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
1004752e:	0018      	movs	r0, r3
10047530:	46bd      	mov	sp, r7
10047532:	b002      	add	sp, #8
10047534:	bd80      	pop	{r7, pc}

10047536 <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
10047536:	b580      	push	{r7, lr}
10047538:	b082      	sub	sp, #8
1004753a:	af00      	add	r7, sp, #0
1004753c:	6078      	str	r0, [r7, #4]
1004753e:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
10047540:	687b      	ldr	r3, [r7, #4]
10047542:	683a      	ldr	r2, [r7, #0]
10047544:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10047546:	46c0      	nop			@ (mov r8, r8)
10047548:	46bd      	mov	sp, r7
1004754a:	b002      	add	sp, #8
1004754c:	bd80      	pop	{r7, pc}

1004754e <LL_RADIO_TIMER_GetAbsoluteTime>:
{
1004754e:	b580      	push	{r7, lr}
10047550:	b082      	sub	sp, #8
10047552:	af00      	add	r7, sp, #0
10047554:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10047556:	687b      	ldr	r3, [r7, #4]
10047558:	691b      	ldr	r3, [r3, #16]
}
1004755a:	0018      	movs	r0, r3
1004755c:	46bd      	mov	sp, r7
1004755e:	b002      	add	sp, #8
10047560:	bd80      	pop	{r7, pc}

10047562 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
10047562:	b580      	push	{r7, lr}
10047564:	b082      	sub	sp, #8
10047566:	af00      	add	r7, sp, #0
10047568:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
1004756a:	687b      	ldr	r3, [r7, #4]
1004756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004756e:	2280      	movs	r2, #128	@ 0x80
10047570:	0592      	lsls	r2, r2, #22
10047572:	431a      	orrs	r2, r3
10047574:	687b      	ldr	r3, [r7, #4]
10047576:	629a      	str	r2, [r3, #40]	@ 0x28
}
10047578:	46c0      	nop			@ (mov r8, r8)
1004757a:	46bd      	mov	sp, r7
1004757c:	b002      	add	sp, #8
1004757e:	bd80      	pop	{r7, pc}

10047580 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
10047580:	b580      	push	{r7, lr}
10047582:	b082      	sub	sp, #8
10047584:	af00      	add	r7, sp, #0
10047586:	6078      	str	r0, [r7, #4]
10047588:	000a      	movs	r2, r1
1004758a:	1cfb      	adds	r3, r7, #3
1004758c:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
1004758e:	46c0      	nop			@ (mov r8, r8)
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
#endif
}
10047590:	46bd      	mov	sp, r7
10047592:	b002      	add	sp, #8
10047594:	bd80      	pop	{r7, pc}

10047596 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
10047596:	b580      	push	{r7, lr}
10047598:	b082      	sub	sp, #8
1004759a:	af00      	add	r7, sp, #0
1004759c:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
1004759e:	687b      	ldr	r3, [r7, #4]
100475a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100475a2:	2201      	movs	r2, #1
100475a4:	431a      	orrs	r2, r3
100475a6:	687b      	ldr	r3, [r7, #4]
100475a8:	649a      	str	r2, [r3, #72]	@ 0x48
}
100475aa:	46c0      	nop			@ (mov r8, r8)
100475ac:	46bd      	mov	sp, r7
100475ae:	b002      	add	sp, #8
100475b0:	bd80      	pop	{r7, pc}

100475b2 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
100475b2:	b580      	push	{r7, lr}
100475b4:	b082      	sub	sp, #8
100475b6:	af00      	add	r7, sp, #0
100475b8:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
100475ba:	687b      	ldr	r3, [r7, #4]
100475bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100475be:	2201      	movs	r2, #1
100475c0:	431a      	orrs	r2, r3
100475c2:	687b      	ldr	r3, [r7, #4]
100475c4:	64da      	str	r2, [r3, #76]	@ 0x4c
}
100475c6:	46c0      	nop			@ (mov r8, r8)
100475c8:	46bd      	mov	sp, r7
100475ca:	b002      	add	sp, #8
100475cc:	bd80      	pop	{r7, pc}

100475ce <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
100475ce:	b580      	push	{r7, lr}
100475d0:	b082      	sub	sp, #8
100475d2:	af00      	add	r7, sp, #0
100475d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
100475d6:	687b      	ldr	r3, [r7, #4]
100475d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100475da:	2201      	movs	r2, #1
100475dc:	4013      	ands	r3, r2
100475de:	2b01      	cmp	r3, #1
100475e0:	d101      	bne.n	100475e6 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
100475e2:	2301      	movs	r3, #1
100475e4:	e000      	b.n	100475e8 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
100475e6:	2300      	movs	r3, #0
}
100475e8:	0018      	movs	r0, r3
100475ea:	46bd      	mov	sp, r7
100475ec:	b002      	add	sp, #8
100475ee:	bd80      	pop	{r7, pc}

100475f0 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
100475f0:	b580      	push	{r7, lr}
100475f2:	b082      	sub	sp, #8
100475f4:	af00      	add	r7, sp, #0
100475f6:	6078      	str	r0, [r7, #4]
100475f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
100475fa:	687b      	ldr	r3, [r7, #4]
100475fc:	683a      	ldr	r2, [r7, #0]
100475fe:	605a      	str	r2, [r3, #4]
}
10047600:	46c0      	nop			@ (mov r8, r8)
10047602:	46bd      	mov	sp, r7
10047604:	b002      	add	sp, #8
10047606:	bd80      	pop	{r7, pc}

10047608 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10047608:	b580      	push	{r7, lr}
1004760a:	b082      	sub	sp, #8
1004760c:	af00      	add	r7, sp, #0
1004760e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
10047610:	687b      	ldr	r3, [r7, #4]
10047612:	2200      	movs	r2, #0
10047614:	609a      	str	r2, [r3, #8]
}
10047616:	46c0      	nop			@ (mov r8, r8)
10047618:	46bd      	mov	sp, r7
1004761a:	b002      	add	sp, #8
1004761c:	bd80      	pop	{r7, pc}

1004761e <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004761e:	b580      	push	{r7, lr}
10047620:	b082      	sub	sp, #8
10047622:	af00      	add	r7, sp, #0
10047624:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
10047626:	687b      	ldr	r3, [r7, #4]
10047628:	689b      	ldr	r3, [r3, #8]
}
1004762a:	0018      	movs	r0, r3
1004762c:	46bd      	mov	sp, r7
1004762e:	b002      	add	sp, #8
10047630:	bd80      	pop	{r7, pc}

10047632 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10047632:	b580      	push	{r7, lr}
10047634:	b082      	sub	sp, #8
10047636:	af00      	add	r7, sp, #0
10047638:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
1004763a:	687b      	ldr	r3, [r7, #4]
1004763c:	68db      	ldr	r3, [r3, #12]
}
1004763e:	0018      	movs	r0, r3
10047640:	46bd      	mov	sp, r7
10047642:	b002      	add	sp, #8
10047644:	bd80      	pop	{r7, pc}

10047646 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10047646:	b580      	push	{r7, lr}
10047648:	b082      	sub	sp, #8
1004764a:	af00      	add	r7, sp, #0
1004764c:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
1004764e:	687b      	ldr	r3, [r7, #4]
10047650:	691b      	ldr	r3, [r3, #16]
10047652:	2201      	movs	r2, #1
10047654:	431a      	orrs	r2, r3
10047656:	687b      	ldr	r3, [r7, #4]
10047658:	611a      	str	r2, [r3, #16]
}
1004765a:	46c0      	nop			@ (mov r8, r8)
1004765c:	46bd      	mov	sp, r7
1004765e:	b002      	add	sp, #8
10047660:	bd80      	pop	{r7, pc}

10047662 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
10047662:	b580      	push	{r7, lr}
10047664:	b082      	sub	sp, #8
10047666:	af00      	add	r7, sp, #0
10047668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
1004766a:	687b      	ldr	r3, [r7, #4]
1004766c:	691b      	ldr	r3, [r3, #16]
1004766e:	2201      	movs	r2, #1
10047670:	4013      	ands	r3, r2
10047672:	2b01      	cmp	r3, #1
10047674:	d101      	bne.n	1004767a <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
10047676:	2301      	movs	r3, #1
10047678:	e000      	b.n	1004767c <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
1004767a:	2300      	movs	r3, #0
}
1004767c:	0018      	movs	r0, r3
1004767e:	46bd      	mov	sp, r7
10047680:	b002      	add	sp, #8
10047682:	bd80      	pop	{r7, pc}

10047684 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
10047684:	b5f0      	push	{r4, r5, r6, r7, lr}
10047686:	b083      	sub	sp, #12
10047688:	af00      	add	r7, sp, #0
1004768a:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004768c:	4b70      	ldr	r3, [pc, #448]	@ (10047850 <HAL_RADIO_TIMER_Init+0x1cc>)
1004768e:	0018      	movs	r0, r3
10047690:	f7ff ff8f 	bl	100475b2 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
10047694:	4b6e      	ldr	r3, [pc, #440]	@ (10047850 <HAL_RADIO_TIMER_Init+0x1cc>)
10047696:	0018      	movs	r0, r3
10047698:	f7ff ff7d 	bl	10047596 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
1004769c:	2017      	movs	r0, #23
1004769e:	f7ff fe51 	bl	10047344 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
100476a2:	2014      	movs	r0, #20
100476a4:	f7ff fe4e 	bl	10047344 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
100476a8:	687b      	ldr	r3, [r7, #4]
100476aa:	685b      	ldr	r3, [r3, #4]
100476ac:	1e5a      	subs	r2, r3, #1
100476ae:	4193      	sbcs	r3, r2
100476b0:	b2db      	uxtb	r3, r3
100476b2:	001a      	movs	r2, r3
100476b4:	4b67      	ldr	r3, [pc, #412]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100476b6:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
100476b8:	4b66      	ldr	r3, [pc, #408]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100476ba:	781b      	ldrb	r3, [r3, #0]
100476bc:	2b00      	cmp	r3, #0
100476be:	d103      	bne.n	100476c8 <HAL_RADIO_TIMER_Init+0x44>
100476c0:	687b      	ldr	r3, [r7, #4]
100476c2:	789b      	ldrb	r3, [r3, #2]
100476c4:	2b00      	cmp	r3, #0
100476c6:	d002      	beq.n	100476ce <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
100476c8:	f000 fcce 	bl	10048068 <_calibrationProcedure>
100476cc:	e010      	b.n	100476f0 <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
100476ce:	4b61      	ldr	r3, [pc, #388]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100476d0:	22c8      	movs	r2, #200	@ 0xc8
100476d2:	0352      	lsls	r2, r2, #13
100476d4:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
100476d6:	4b5f      	ldr	r3, [pc, #380]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100476d8:	22c8      	movs	r2, #200	@ 0xc8
100476da:	0352      	lsls	r2, r2, #13
100476dc:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
100476de:	4b5d      	ldr	r3, [pc, #372]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100476e0:	4a5d      	ldr	r2, [pc, #372]	@ (10047858 <HAL_RADIO_TIMER_Init+0x1d4>)
100476e2:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
100476e4:	4b5b      	ldr	r3, [pc, #364]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100476e6:	4a5d      	ldr	r2, [pc, #372]	@ (1004785c <HAL_RADIO_TIMER_Init+0x1d8>)
100476e8:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
100476ea:	4b5a      	ldr	r3, [pc, #360]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100476ec:	4a5c      	ldr	r2, [pc, #368]	@ (10047860 <HAL_RADIO_TIMER_Init+0x1dc>)
100476ee:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
100476f0:	687b      	ldr	r3, [r7, #4]
100476f2:	685b      	ldr	r3, [r3, #4]
100476f4:	2b00      	cmp	r3, #0
100476f6:	d108      	bne.n	1004770a <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
100476f8:	23a0      	movs	r3, #160	@ 0xa0
100476fa:	05db      	lsls	r3, r3, #23
100476fc:	0018      	movs	r0, r3
100476fe:	f000 fbe7 	bl	10047ed0 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10047702:	0002      	movs	r2, r0
10047704:	4b53      	ldr	r3, [pc, #332]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047706:	605a      	str	r2, [r3, #4]
10047708:	e01d      	b.n	10047746 <HAL_RADIO_TIMER_Init+0xc2>
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
1004770a:	687b      	ldr	r3, [r7, #4]
1004770c:	685b      	ldr	r3, [r3, #4]
1004770e:	031b      	lsls	r3, r3, #12
10047710:	210a      	movs	r1, #10
10047712:	0018      	movs	r0, r3
10047714:	f7f8 fd8c 	bl	10040230 <__udivsi3>
10047718:	0003      	movs	r3, r0
1004771a:	001a      	movs	r2, r3
1004771c:	4b4d      	ldr	r3, [pc, #308]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
1004771e:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
10047720:	4b4c      	ldr	r3, [pc, #304]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047722:	685e      	ldr	r6, [r3, #4]
10047724:	4b4f      	ldr	r3, [pc, #316]	@ (10047864 <HAL_RADIO_TIMER_Init+0x1e0>)
10047726:	0018      	movs	r0, r3
10047728:	f000 fbd2 	bl	10047ed0 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004772c:	0003      	movs	r3, r0
1004772e:	429e      	cmp	r6, r3
10047730:	d202      	bcs.n	10047738 <HAL_RADIO_TIMER_Init+0xb4>
10047732:	4b48      	ldr	r3, [pc, #288]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047734:	685a      	ldr	r2, [r3, #4]
10047736:	e004      	b.n	10047742 <HAL_RADIO_TIMER_Init+0xbe>
10047738:	4b4a      	ldr	r3, [pc, #296]	@ (10047864 <HAL_RADIO_TIMER_Init+0x1e0>)
1004773a:	0018      	movs	r0, r3
1004773c:	f000 fbc8 	bl	10047ed0 <HAL_RADIO_TIMER_MachineTimeToSysTime>
10047740:	0002      	movs	r2, r0
10047742:	4b44      	ldr	r3, [pc, #272]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047744:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
10047746:	4b43      	ldr	r3, [pc, #268]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047748:	2200      	movs	r2, #0
1004774a:	721a      	strb	r2, [r3, #8]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
1004774c:	687b      	ldr	r3, [r7, #4]
1004774e:	881b      	ldrh	r3, [r3, #0]
10047750:	001a      	movs	r2, r3
10047752:	4b40      	ldr	r3, [pc, #256]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047754:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
10047756:	4b3f      	ldr	r3, [pc, #252]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047758:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004775a:	b29a      	uxth	r2, r3
1004775c:	4b3d      	ldr	r3, [pc, #244]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
1004775e:	699b      	ldr	r3, [r3, #24]
10047760:	0019      	movs	r1, r3
10047762:	0010      	movs	r0, r2
10047764:	f000 fdf4 	bl	10048350 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
10047768:	4b3a      	ldr	r3, [pc, #232]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
1004776a:	2284      	movs	r2, #132	@ 0x84
1004776c:	2100      	movs	r1, #0
1004776e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
10047770:	4938      	ldr	r1, [pc, #224]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047772:	2200      	movs	r2, #0
10047774:	2300      	movs	r3, #0
10047776:	670a      	str	r2, [r1, #112]	@ 0x70
10047778:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004777a:	4b35      	ldr	r3, [pc, #212]	@ (10047850 <HAL_RADIO_TIMER_Init+0x1cc>)
1004777c:	0018      	movs	r0, r3
1004777e:	f7ff fee6 	bl	1004754e <LL_RADIO_TIMER_GetAbsoluteTime>
10047782:	0002      	movs	r2, r0
10047784:	4b33      	ldr	r3, [pc, #204]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047786:	2180      	movs	r1, #128	@ 0x80
10047788:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004778a:	4932      	ldr	r1, [pc, #200]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
1004778c:	2200      	movs	r2, #0
1004778e:	2300      	movs	r3, #0
10047790:	678a      	str	r2, [r1, #120]	@ 0x78
10047792:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
10047794:	492f      	ldr	r1, [pc, #188]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047796:	2200      	movs	r2, #0
10047798:	2300      	movs	r3, #0
1004779a:	628a      	str	r2, [r1, #40]	@ 0x28
1004779c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004779e:	4b2d      	ldr	r3, [pc, #180]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477a0:	2234      	movs	r2, #52	@ 0x34
100477a2:	2100      	movs	r1, #0
100477a4:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100477a6:	4b2b      	ldr	r3, [pc, #172]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477a8:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
100477aa:	4b2a      	ldr	r3, [pc, #168]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477ac:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
100477ae:	0019      	movs	r1, r3
100477b0:	4b2d      	ldr	r3, [pc, #180]	@ (10047868 <HAL_RADIO_TIMER_Init+0x1e4>)
100477b2:	001a      	movs	r2, r3
100477b4:	f7f8 fc84 	bl	100400c0 <blue_unit_conversion>
100477b8:	0002      	movs	r2, r0
100477ba:	4b26      	ldr	r3, [pc, #152]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477bc:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
100477be:	4b25      	ldr	r3, [pc, #148]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477c0:	7819      	ldrb	r1, [r3, #0]
100477c2:	4b24      	ldr	r3, [pc, #144]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477c4:	2294      	movs	r2, #148	@ 0x94
100477c6:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
100477c8:	4b22      	ldr	r3, [pc, #136]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477ca:	228c      	movs	r2, #140	@ 0x8c
100477cc:	2100      	movs	r1, #0
100477ce:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
100477d0:	4b20      	ldr	r3, [pc, #128]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477d2:	2290      	movs	r2, #144	@ 0x90
100477d4:	2101      	movs	r1, #1
100477d6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
100477d8:	4b1e      	ldr	r3, [pc, #120]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477da:	2293      	movs	r2, #147	@ 0x93
100477dc:	2100      	movs	r1, #0
100477de:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
100477e0:	4b1c      	ldr	r3, [pc, #112]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477e2:	2291      	movs	r2, #145	@ 0x91
100477e4:	2100      	movs	r1, #0
100477e6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
100477e8:	4b1a      	ldr	r3, [pc, #104]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477ea:	2292      	movs	r2, #146	@ 0x92
100477ec:	2100      	movs	r1, #0
100477ee:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
100477f0:	4b18      	ldr	r3, [pc, #96]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477f2:	2261      	movs	r2, #97	@ 0x61
100477f4:	2100      	movs	r1, #0
100477f6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
100477f8:	4b16      	ldr	r3, [pc, #88]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
100477fa:	2262      	movs	r2, #98	@ 0x62
100477fc:	2100      	movs	r1, #0
100477fe:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10047800:	4b14      	ldr	r3, [pc, #80]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047802:	2263      	movs	r2, #99	@ 0x63
10047804:	2100      	movs	r1, #0
10047806:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
10047808:	4912      	ldr	r1, [pc, #72]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
1004780a:	2200      	movs	r2, #0
1004780c:	2300      	movs	r3, #0
1004780e:	658a      	str	r2, [r1, #88]	@ 0x58
10047810:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
10047812:	4b10      	ldr	r3, [pc, #64]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047814:	4a15      	ldr	r2, [pc, #84]	@ (1004786c <HAL_RADIO_TIMER_Init+0x1e8>)
10047816:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
10047818:	4b0e      	ldr	r3, [pc, #56]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
1004781a:	2200      	movs	r2, #0
1004781c:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004781e:	f000 fb6d 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
10047822:	0002      	movs	r2, r0
10047824:	000b      	movs	r3, r1
10047826:	490b      	ldr	r1, [pc, #44]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
10047828:	6849      	ldr	r1, [r1, #4]
1004782a:	000c      	movs	r4, r1
1004782c:	2100      	movs	r1, #0
1004782e:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10047830:	1912      	adds	r2, r2, r4
10047832:	416b      	adcs	r3, r5
10047834:	490e      	ldr	r1, [pc, #56]	@ (10047870 <HAL_RADIO_TIMER_Init+0x1ec>)
10047836:	0008      	movs	r0, r1
10047838:	f000 fdcc 	bl	100483d4 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
1004783c:	4b05      	ldr	r3, [pc, #20]	@ (10047854 <HAL_RADIO_TIMER_Init+0x1d0>)
1004783e:	2101      	movs	r1, #1
10047840:	0018      	movs	r0, r3
10047842:	f000 fcc1 	bl	100481c8 <_configureTxRxDelay>
}
10047846:	46c0      	nop			@ (mov r8, r8)
10047848:	46bd      	mov	sp, r7
1004784a:	b003      	add	sp, #12
1004784c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004784e:	46c0      	nop			@ (mov r8, r8)
10047850:	60001800 	.word	0x60001800
10047854:	200009f0 	.word	0x200009f0
10047858:	0028f5c2 	.word	0x0028f5c2
1004785c:	00005b8d 	.word	0x00005b8d
10047860:	0165ebec 	.word	0x0165ebec
10047864:	ffffefff 	.word	0xffffefff
10047868:	00000326 	.word	0x00000326
1004786c:	100483ad 	.word	0x100483ad
10047870:	20000a30 	.word	0x20000a30

10047874 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
10047874:	b5b0      	push	{r4, r5, r7, lr}
10047876:	b090      	sub	sp, #64	@ 0x40
10047878:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
1004787a:	230f      	movs	r3, #15
1004787c:	18fb      	adds	r3, r7, r3
1004787e:	2200      	movs	r2, #0
10047880:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047882:	f3ef 8310 	mrs	r3, PRIMASK
10047886:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10047888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
1004788a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004788c:	b672      	cpsid	i
}
1004788e:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
10047890:	4b9c      	ldr	r3, [pc, #624]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047892:	2261      	movs	r2, #97	@ 0x61
10047894:	5c9b      	ldrb	r3, [r3, r2]
10047896:	2b00      	cmp	r3, #0
10047898:	d00f      	beq.n	100478ba <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
1004789a:	4b9a      	ldr	r3, [pc, #616]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
1004789c:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004789e:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
100478a0:	f000 fb2c 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
100478a4:	0002      	movs	r2, r0
100478a6:	000b      	movs	r3, r1
100478a8:	42ab      	cmp	r3, r5
100478aa:	d802      	bhi.n	100478b2 <HAL_RADIO_TIMER_Tick+0x3e>
100478ac:	d105      	bne.n	100478ba <HAL_RADIO_TIMER_Tick+0x46>
100478ae:	42a2      	cmp	r2, r4
100478b0:	d903      	bls.n	100478ba <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
100478b2:	4b94      	ldr	r3, [pc, #592]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100478b4:	2261      	movs	r2, #97	@ 0x61
100478b6:	2100      	movs	r1, #0
100478b8:	5499      	strb	r1, [r3, r2]
100478ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100478bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100478be:	6a3b      	ldr	r3, [r7, #32]
100478c0:	f383 8810 	msr	PRIMASK, r3
}
100478c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
100478c6:	e06e      	b.n	100479a6 <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
100478c8:	4b8e      	ldr	r3, [pc, #568]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100478ca:	2291      	movs	r2, #145	@ 0x91
100478cc:	5c99      	ldrb	r1, [r3, r2]
100478ce:	4b8d      	ldr	r3, [pc, #564]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100478d0:	2292      	movs	r2, #146	@ 0x92
100478d2:	5c9a      	ldrb	r2, [r3, r2]
100478d4:	232b      	movs	r3, #43	@ 0x2b
100478d6:	2008      	movs	r0, #8
100478d8:	181b      	adds	r3, r3, r0
100478da:	19db      	adds	r3, r3, r7
100478dc:	1a8a      	subs	r2, r1, r2
100478de:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
100478e0:	4b88      	ldr	r3, [pc, #544]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100478e2:	228c      	movs	r2, #140	@ 0x8c
100478e4:	589b      	ldr	r3, [r3, r2]
100478e6:	183a      	adds	r2, r7, r0
100478e8:	0011      	movs	r1, r2
100478ea:	0018      	movs	r0, r3
100478ec:	f000 ff48 	bl	10048780 <_check_callbacks>
100478f0:	0002      	movs	r2, r0
100478f2:	4b84      	ldr	r3, [pc, #528]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100478f4:	218c      	movs	r1, #140	@ 0x8c
100478f6:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
100478f8:	68bb      	ldr	r3, [r7, #8]
100478fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
100478fc:	e010      	b.n	10047920 <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
100478fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10047900:	691b      	ldr	r3, [r3, #16]
10047902:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
10047904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10047906:	2200      	movs	r2, #0
10047908:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
1004790a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004790c:	689b      	ldr	r3, [r3, #8]
1004790e:	2b00      	cmp	r3, #0
10047910:	d004      	beq.n	1004791c <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
10047912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10047914:	689b      	ldr	r3, [r3, #8]
10047916:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10047918:	0010      	movs	r0, r2
1004791a:	4798      	blx	r3
      }
      curr = next;
1004791c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004791e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
10047920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10047922:	2b00      	cmp	r3, #0
10047924:	d1eb      	bne.n	100478fe <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10047926:	4b77      	ldr	r3, [pc, #476]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047928:	228c      	movs	r2, #140	@ 0x8c
1004792a:	589b      	ldr	r3, [r3, r2]
1004792c:	240f      	movs	r4, #15
1004792e:	193a      	adds	r2, r7, r4
10047930:	0011      	movs	r1, r2
10047932:	0018      	movs	r0, r3
10047934:	f000 fe14 	bl	10048560 <_update_user_timeout>
10047938:	0002      	movs	r2, r0
1004793a:	4b72      	ldr	r3, [pc, #456]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
1004793c:	218c      	movs	r1, #140	@ 0x8c
1004793e:	505a      	str	r2, [r3, r1]
    if (expired == 1)
10047940:	193b      	adds	r3, r7, r4
10047942:	781b      	ldrb	r3, [r3, #0]
10047944:	2b01      	cmp	r3, #1
10047946:	d121      	bne.n	1004798c <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047948:	f3ef 8310 	mrs	r3, PRIMASK
1004794c:	61fb      	str	r3, [r7, #28]
  return(result);
1004794e:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10047950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
10047952:	b672      	cpsid	i
}
10047954:	46c0      	nop			@ (mov r8, r8)
10047956:	4b6b      	ldr	r3, [pc, #428]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047958:	2291      	movs	r2, #145	@ 0x91
1004795a:	5c9b      	ldrb	r3, [r3, r2]
1004795c:	3301      	adds	r3, #1
1004795e:	4a69      	ldr	r2, [pc, #420]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047960:	2192      	movs	r1, #146	@ 0x92
10047962:	5c52      	ldrb	r2, [r2, r1]
10047964:	4293      	cmp	r3, r2
10047966:	d103      	bne.n	10047970 <HAL_RADIO_TIMER_Tick+0xfc>
10047968:	4b66      	ldr	r3, [pc, #408]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
1004796a:	2291      	movs	r2, #145	@ 0x91
1004796c:	5c9b      	ldrb	r3, [r3, r2]
1004796e:	e004      	b.n	1004797a <HAL_RADIO_TIMER_Tick+0x106>
10047970:	4b64      	ldr	r3, [pc, #400]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047972:	2291      	movs	r2, #145	@ 0x91
10047974:	5c9b      	ldrb	r3, [r3, r2]
10047976:	3301      	adds	r3, #1
10047978:	b2db      	uxtb	r3, r3
1004797a:	4a62      	ldr	r2, [pc, #392]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
1004797c:	2191      	movs	r1, #145	@ 0x91
1004797e:	5453      	strb	r3, [r2, r1]
10047980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10047982:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047984:	69bb      	ldr	r3, [r7, #24]
10047986:	f383 8810 	msr	PRIMASK, r3
}
1004798a:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
1004798c:	4b5d      	ldr	r3, [pc, #372]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
1004798e:	2292      	movs	r2, #146	@ 0x92
10047990:	5c9a      	ldrb	r2, [r3, r2]
10047992:	232b      	movs	r3, #43	@ 0x2b
10047994:	2108      	movs	r1, #8
10047996:	185b      	adds	r3, r3, r1
10047998:	19db      	adds	r3, r3, r7
1004799a:	781b      	ldrb	r3, [r3, #0]
1004799c:	18d3      	adds	r3, r2, r3
1004799e:	b2d9      	uxtb	r1, r3
100479a0:	4b58      	ldr	r3, [pc, #352]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100479a2:	2292      	movs	r2, #146	@ 0x92
100479a4:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
100479a6:	4b57      	ldr	r3, [pc, #348]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100479a8:	2291      	movs	r2, #145	@ 0x91
100479aa:	5c9a      	ldrb	r2, [r3, r2]
100479ac:	4b55      	ldr	r3, [pc, #340]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100479ae:	2192      	movs	r1, #146	@ 0x92
100479b0:	5c5b      	ldrb	r3, [r3, r1]
100479b2:	429a      	cmp	r2, r3
100479b4:	d30a      	bcc.n	100479cc <HAL_RADIO_TIMER_Tick+0x158>
100479b6:	4b53      	ldr	r3, [pc, #332]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100479b8:	2291      	movs	r2, #145	@ 0x91
100479ba:	5c9a      	ldrb	r2, [r3, r2]
100479bc:	4b51      	ldr	r3, [pc, #324]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100479be:	2192      	movs	r1, #146	@ 0x92
100479c0:	5c5b      	ldrb	r3, [r3, r1]
100479c2:	1ad3      	subs	r3, r2, r3
100479c4:	1e5a      	subs	r2, r3, #1
100479c6:	4193      	sbcs	r3, r2
100479c8:	b2db      	uxtb	r3, r3
100479ca:	e00c      	b.n	100479e6 <HAL_RADIO_TIMER_Tick+0x172>
100479cc:	4b4d      	ldr	r3, [pc, #308]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100479ce:	2291      	movs	r2, #145	@ 0x91
100479d0:	5c9b      	ldrb	r3, [r3, r2]
100479d2:	0019      	movs	r1, r3
100479d4:	4b4b      	ldr	r3, [pc, #300]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100479d6:	2292      	movs	r2, #146	@ 0x92
100479d8:	5c9b      	ldrb	r3, [r3, r2]
100479da:	1acb      	subs	r3, r1, r3
100479dc:	3301      	adds	r3, #1
100479de:	33ff      	adds	r3, #255	@ 0xff
100479e0:	1e5a      	subs	r2, r3, #1
100479e2:	4193      	sbcs	r3, r2
100479e4:	b2db      	uxtb	r3, r3
100479e6:	2b00      	cmp	r3, #0
100479e8:	d000      	beq.n	100479ec <HAL_RADIO_TIMER_Tick+0x178>
100479ea:	e76d      	b.n	100478c8 <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
100479ec:	4b45      	ldr	r3, [pc, #276]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
100479ee:	7a1b      	ldrb	r3, [r3, #8]
100479f0:	2b00      	cmp	r3, #0
100479f2:	d06a      	beq.n	10047aca <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
100479f4:	4b44      	ldr	r3, [pc, #272]	@ (10047b08 <HAL_RADIO_TIMER_Tick+0x294>)
100479f6:	0018      	movs	r0, r3
100479f8:	f7ff fe33 	bl	10047662 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
100479fc:	1e03      	subs	r3, r0, #0
100479fe:	d100      	bne.n	10047a02 <HAL_RADIO_TIMER_Tick+0x18e>
10047a00:	e07b      	b.n	10047afa <HAL_RADIO_TIMER_Tick+0x286>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
10047a02:	4b40      	ldr	r3, [pc, #256]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a04:	2200      	movs	r2, #0
10047a06:	721a      	strb	r2, [r3, #8]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
10047a08:	4b3e      	ldr	r3, [pc, #248]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a0a:	2294      	movs	r2, #148	@ 0x94
10047a0c:	5c9b      	ldrb	r3, [r3, r2]
10047a0e:	2b00      	cmp	r3, #0
10047a10:	d109      	bne.n	10047a26 <HAL_RADIO_TIMER_Tick+0x1b2>
10047a12:	4b3c      	ldr	r3, [pc, #240]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a14:	2293      	movs	r2, #147	@ 0x93
10047a16:	5c9b      	ldrb	r3, [r3, r2]
10047a18:	2b00      	cmp	r3, #0
10047a1a:	d004      	beq.n	10047a26 <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
10047a1c:	4b39      	ldr	r3, [pc, #228]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a1e:	2293      	movs	r2, #147	@ 0x93
10047a20:	2100      	movs	r1, #0
10047a22:	5499      	strb	r1, [r3, r2]
10047a24:	e034      	b.n	10047a90 <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
10047a26:	f000 fef5 	bl	10048814 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
10047a2a:	4b36      	ldr	r3, [pc, #216]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a2c:	228c      	movs	r2, #140	@ 0x8c
10047a2e:	589b      	ldr	r3, [r3, r2]
10047a30:	240f      	movs	r4, #15
10047a32:	193a      	adds	r2, r7, r4
10047a34:	0011      	movs	r1, r2
10047a36:	0018      	movs	r0, r3
10047a38:	f000 fd92 	bl	10048560 <_update_user_timeout>
10047a3c:	0002      	movs	r2, r0
10047a3e:	4b31      	ldr	r3, [pc, #196]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a40:	218c      	movs	r1, #140	@ 0x8c
10047a42:	505a      	str	r2, [r3, r1]
        if (expired == 1)
10047a44:	193b      	adds	r3, r7, r4
10047a46:	781b      	ldrb	r3, [r3, #0]
10047a48:	2b01      	cmp	r3, #1
10047a4a:	d121      	bne.n	10047a90 <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047a4c:	f3ef 8310 	mrs	r3, PRIMASK
10047a50:	617b      	str	r3, [r7, #20]
  return(result);
10047a52:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
10047a54:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
10047a56:	b672      	cpsid	i
}
10047a58:	46c0      	nop			@ (mov r8, r8)
10047a5a:	4b2a      	ldr	r3, [pc, #168]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a5c:	2291      	movs	r2, #145	@ 0x91
10047a5e:	5c9b      	ldrb	r3, [r3, r2]
10047a60:	3301      	adds	r3, #1
10047a62:	4a28      	ldr	r2, [pc, #160]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a64:	2192      	movs	r1, #146	@ 0x92
10047a66:	5c52      	ldrb	r2, [r2, r1]
10047a68:	4293      	cmp	r3, r2
10047a6a:	d103      	bne.n	10047a74 <HAL_RADIO_TIMER_Tick+0x200>
10047a6c:	4b25      	ldr	r3, [pc, #148]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a6e:	2291      	movs	r2, #145	@ 0x91
10047a70:	5c9b      	ldrb	r3, [r3, r2]
10047a72:	e004      	b.n	10047a7e <HAL_RADIO_TIMER_Tick+0x20a>
10047a74:	4b23      	ldr	r3, [pc, #140]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a76:	2291      	movs	r2, #145	@ 0x91
10047a78:	5c9b      	ldrb	r3, [r3, r2]
10047a7a:	3301      	adds	r3, #1
10047a7c:	b2db      	uxtb	r3, r3
10047a7e:	4a21      	ldr	r2, [pc, #132]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047a80:	2191      	movs	r1, #145	@ 0x91
10047a82:	5453      	strb	r3, [r2, r1]
10047a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10047a86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047a88:	693b      	ldr	r3, [r7, #16]
10047a8a:	f383 8810 	msr	PRIMASK, r3
}
10047a8e:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired);
10047a90:	230f      	movs	r3, #15
10047a92:	18fa      	adds	r2, r7, r3
10047a94:	4b1d      	ldr	r3, [pc, #116]	@ (10047b0c <HAL_RADIO_TIMER_Tick+0x298>)
10047a96:	0011      	movs	r1, r2
10047a98:	0018      	movs	r0, r3
10047a9a:	f000 ff4f 	bl	1004893c <_check_radio_activity>
#endif

      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10047a9e:	4b1c      	ldr	r3, [pc, #112]	@ (10047b10 <HAL_RADIO_TIMER_Tick+0x29c>)
10047aa0:	0018      	movs	r0, r3
10047aa2:	f000 fa57 	bl	10047f54 <HAL_RADIO_TIMER_StopVirtualTimer>
      /* Schedule next calibration event */
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
10047aa6:	f000 fa29 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
10047aaa:	0002      	movs	r2, r0
10047aac:	000b      	movs	r3, r1
10047aae:	4915      	ldr	r1, [pc, #84]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047ab0:	6849      	ldr	r1, [r1, #4]
10047ab2:	6039      	str	r1, [r7, #0]
10047ab4:	2100      	movs	r1, #0
10047ab6:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
10047ab8:	6838      	ldr	r0, [r7, #0]
10047aba:	6879      	ldr	r1, [r7, #4]
10047abc:	1812      	adds	r2, r2, r0
10047abe:	414b      	adcs	r3, r1
10047ac0:	4913      	ldr	r1, [pc, #76]	@ (10047b10 <HAL_RADIO_TIMER_Tick+0x29c>)
10047ac2:	0008      	movs	r0, r1
10047ac4:	f000 fc86 	bl	100483d4 <_start_timer>
      {
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
10047ac8:	e017      	b.n	10047afa <HAL_RADIO_TIMER_Tick+0x286>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
10047aca:	4b0e      	ldr	r3, [pc, #56]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047acc:	781b      	ldrb	r3, [r3, #0]
10047ace:	2b00      	cmp	r3, #0
10047ad0:	d013      	beq.n	10047afa <HAL_RADIO_TIMER_Tick+0x286>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
10047ad2:	f000 fa13 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
10047ad6:	4b0b      	ldr	r3, [pc, #44]	@ (10047b04 <HAL_RADIO_TIMER_Tick+0x290>)
10047ad8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10047adc:	24fa      	movs	r4, #250	@ 0xfa
10047ade:	0364      	lsls	r4, r4, #13
10047ae0:	2500      	movs	r5, #0
10047ae2:	1912      	adds	r2, r2, r4
10047ae4:	416b      	adcs	r3, r5
10047ae6:	4299      	cmp	r1, r3
10047ae8:	d803      	bhi.n	10047af2 <HAL_RADIO_TIMER_Tick+0x27e>
10047aea:	d106      	bne.n	10047afa <HAL_RADIO_TIMER_Tick+0x286>
10047aec:	4290      	cmp	r0, r2
10047aee:	d800      	bhi.n	10047af2 <HAL_RADIO_TIMER_Tick+0x27e>
}
10047af0:	e003      	b.n	10047afa <HAL_RADIO_TIMER_Tick+0x286>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
10047af2:	4b07      	ldr	r3, [pc, #28]	@ (10047b10 <HAL_RADIO_TIMER_Tick+0x29c>)
10047af4:	0018      	movs	r0, r3
10047af6:	f000 fc59 	bl	100483ac <_calibration_callback>
}
10047afa:	46c0      	nop			@ (mov r8, r8)
10047afc:	46bd      	mov	sp, r7
10047afe:	b010      	add	sp, #64	@ 0x40
10047b00:	bdb0      	pop	{r4, r5, r7, pc}
10047b02:	46c0      	nop			@ (mov r8, r8)
10047b04:	200009f0 	.word	0x200009f0
10047b08:	60001000 	.word	0x60001000
10047b0c:	20000a48 	.word	0x20000a48
10047b10:	20000a30 	.word	0x20000a30

10047b14 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
10047b14:	b580      	push	{r7, lr}
10047b16:	b082      	sub	sp, #8
10047b18:	af00      	add	r7, sp, #0
10047b1a:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
10047b1c:	23c0      	movs	r3, #192	@ 0xc0
10047b1e:	05db      	lsls	r3, r3, #23
10047b20:	695b      	ldr	r3, [r3, #20]
10047b22:	687a      	ldr	r2, [r7, #4]
10047b24:	0011      	movs	r1, r2
10047b26:	0018      	movs	r0, r3
10047b28:	f001 f87a 	bl	10048c20 <TIMER_GetPastSysTime>
10047b2c:	0002      	movs	r2, r0
10047b2e:	000b      	movs	r3, r1
}
10047b30:	0010      	movs	r0, r2
10047b32:	0019      	movs	r1, r3
10047b34:	46bd      	mov	sp, r7
10047b36:	b002      	add	sp, #8
10047b38:	bd80      	pop	{r7, pc}
	...

10047b3c <HAL_RADIO_TIMER_PowerSaveLevelCheck>:
/**
  * @brief  Returns the admitted low power mode according to the next timer activity.
  * @return Low Power mode
  */
PowerSaveLevels HAL_RADIO_TIMER_PowerSaveLevelCheck(void)
{
10047b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10047b3e:	b08b      	sub	sp, #44	@ 0x2c
10047b40:	af00      	add	r7, sp, #0
  uint32_t nextRadioActivity;
  uint8_t timerState;
  uint64_t current_time;
  PowerSaveLevels level;

  if (TIMER_SleepCheck() == FALSE)
10047b42:	f001 f89d 	bl	10048c80 <TIMER_SleepCheck>
10047b46:	0003      	movs	r3, r0
10047b48:	001a      	movs	r2, r3
10047b4a:	2301      	movs	r3, #1
10047b4c:	4053      	eors	r3, r2
10047b4e:	b2db      	uxtb	r3, r3
10047b50:	2b00      	cmp	r3, #0
10047b52:	d001      	beq.n	10047b58 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x1c>
  {
    return POWER_SAVE_LEVEL_RUNNING;
10047b54:	2300      	movs	r3, #0
10047b56:	e0b1      	b.n	10047cbc <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
  }

  level = POWER_SAVE_LEVEL_STOP;
10047b58:	2317      	movs	r3, #23
10047b5a:	2210      	movs	r2, #16
10047b5c:	189b      	adds	r3, r3, r2
10047b5e:	19db      	adds	r3, r3, r7
10047b60:	2203      	movs	r2, #3
10047b62:	701a      	strb	r2, [r3, #0]

  current_time = HAL_RADIO_TIMER_GetCurrentSysTime();
10047b64:	f000 f9ca 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
10047b68:	0002      	movs	r2, r0
10047b6a:	000b      	movs	r3, r1
10047b6c:	61ba      	str	r2, [r7, #24]
10047b6e:	61fb      	str	r3, [r7, #28]
  timerState = TIMER_GetRadioTimerValue(&nextRadioActivity);
10047b70:	2317      	movs	r3, #23
10047b72:	18fe      	adds	r6, r7, r3
10047b74:	2310      	movs	r3, #16
10047b76:	18fb      	adds	r3, r7, r3
10047b78:	0018      	movs	r0, r3
10047b7a:	f001 f89f 	bl	10048cbc <TIMER_GetRadioTimerValue>
10047b7e:	0003      	movs	r3, r0
10047b80:	7033      	strb	r3, [r6, #0]

  /*Timer1 and wakeup timer are programmed only through the timer module*/
  if (((RADIO_TIMER_Context.radioTimer.active || RADIO_TIMER_Context.radioTimer.pending)
10047b82:	4b50      	ldr	r3, [pc, #320]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047b84:	2261      	movs	r2, #97	@ 0x61
10047b86:	5c9b      	ldrb	r3, [r3, r2]
10047b88:	2b00      	cmp	r3, #0
10047b8a:	d104      	bne.n	10047b96 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x5a>
10047b8c:	4b4d      	ldr	r3, [pc, #308]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047b8e:	2262      	movs	r2, #98	@ 0x62
10047b90:	5c9b      	ldrb	r3, [r3, r2]
10047b92:	2b00      	cmp	r3, #0
10047b94:	d004      	beq.n	10047ba0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x64>
       && !(timerState == RADIO_TIMER1_BUSY)) || RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served)
10047b96:	2317      	movs	r3, #23
10047b98:	18fb      	adds	r3, r7, r3
10047b9a:	781b      	ldrb	r3, [r3, #0]
10047b9c:	2b01      	cmp	r3, #1
10047b9e:	d104      	bne.n	10047baa <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x6e>
10047ba0:	4b48      	ldr	r3, [pc, #288]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047ba2:	2263      	movs	r2, #99	@ 0x63
10047ba4:	5c9b      	ldrb	r3, [r3, r2]
10047ba6:	2b00      	cmp	r3, #0
10047ba8:	d029      	beq.n	10047bfe <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xc2>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
10047baa:	4b46      	ldr	r3, [pc, #280]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047bac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10047bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                                                     RADIO_TIMER_Context.last_setup_time + \
10047bb0:	4944      	ldr	r1, [pc, #272]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047bb2:	2084      	movs	r0, #132	@ 0x84
10047bb4:	5c09      	ldrb	r1, [r1, r0]
10047bb6:	000c      	movs	r4, r1
10047bb8:	2100      	movs	r1, #0
10047bba:	000d      	movs	r5, r1
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
10047bbc:	69b8      	ldr	r0, [r7, #24]
10047bbe:	69f9      	ldr	r1, [r7, #28]
10047bc0:	1824      	adds	r4, r4, r0
10047bc2:	414d      	adcs	r5, r1
10047bc4:	0020      	movs	r0, r4
10047bc6:	0029      	movs	r1, r5
                                                     RADIO_TIMER_Context.hs_startup_time + \
10047bc8:	4e3e      	ldr	r6, [pc, #248]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047bca:	6eb6      	ldr	r6, [r6, #104]	@ 0x68
10047bcc:	60be      	str	r6, [r7, #8]
10047bce:	2600      	movs	r6, #0
10047bd0:	60fe      	str	r6, [r7, #12]
                                                     RADIO_TIMER_Context.last_setup_time + \
10047bd2:	68bc      	ldr	r4, [r7, #8]
10047bd4:	68fd      	ldr	r5, [r7, #12]
10047bd6:	1900      	adds	r0, r0, r4
10047bd8:	4169      	adcs	r1, r5
                                                     RADIO_TIMER_Context.hs_startup_time + \
10047bda:	2452      	movs	r4, #82	@ 0x52
10047bdc:	2500      	movs	r5, #0
10047bde:	1900      	adds	r0, r0, r4
10047be0:	4169      	adcs	r1, r5
    if (RADIO_TIMER_Context.radioTimer.expiryTime < (current_time + \
10047be2:	4299      	cmp	r1, r3
10047be4:	d802      	bhi.n	10047bec <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb0>
10047be6:	d103      	bne.n	10047bf0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb4>
10047be8:	4290      	cmp	r0, r2
10047bea:	d901      	bls.n	10047bf0 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xb4>
                                                     LOW_POWER_THR))
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
10047bec:	2301      	movs	r3, #1
10047bee:	e065      	b.n	10047cbc <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }

    level = POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON;
10047bf0:	2317      	movs	r3, #23
10047bf2:	2210      	movs	r2, #16
10047bf4:	189b      	adds	r3, r3, r2
10047bf6:	19db      	adds	r3, r3, r7
10047bf8:	2202      	movs	r2, #2
10047bfa:	701a      	strb	r2, [r3, #0]
10047bfc:	e00b      	b.n	10047c16 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xda>
  }
  else
  {
    if ((timerState == RADIO_TIMER2_BUSY) || (timerState == RADIO_TIMER1_BUSY))
10047bfe:	2317      	movs	r3, #23
10047c00:	18fb      	adds	r3, r7, r3
10047c02:	781b      	ldrb	r3, [r3, #0]
10047c04:	2b02      	cmp	r3, #2
10047c06:	d004      	beq.n	10047c12 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xd6>
10047c08:	2317      	movs	r3, #23
10047c0a:	18fb      	adds	r3, r7, r3
10047c0c:	781b      	ldrb	r3, [r3, #0]
10047c0e:	2b01      	cmp	r3, #1
10047c10:	d101      	bne.n	10047c16 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0xda>
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
10047c12:	2301      	movs	r3, #1
10047c14:	e052      	b.n	10047cbc <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }
  }

  if (RADIO_TIMER_Context.rootNode != NULL && RADIO_TIMER_Context.rootNode->active)
10047c16:	4b2b      	ldr	r3, [pc, #172]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c18:	228c      	movs	r2, #140	@ 0x8c
10047c1a:	589b      	ldr	r3, [r3, r2]
10047c1c:	2b00      	cmp	r3, #0
10047c1e:	d048      	beq.n	10047cb2 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x176>
10047c20:	4b28      	ldr	r3, [pc, #160]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c22:	228c      	movs	r2, #140	@ 0x8c
10047c24:	589b      	ldr	r3, [r3, r2]
10047c26:	7b1b      	ldrb	r3, [r3, #12]
10047c28:	2b00      	cmp	r3, #0
10047c2a:	d042      	beq.n	10047cb2 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x176>
  {
    if (RADIO_TIMER_Context.rootNode->expiryTime < (current_time + LOW_POWER_THR + RADIO_TIMER_Context.hs_startup_time))
10047c2c:	4b25      	ldr	r3, [pc, #148]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c2e:	228c      	movs	r2, #140	@ 0x8c
10047c30:	589b      	ldr	r3, [r3, r2]
10047c32:	681a      	ldr	r2, [r3, #0]
10047c34:	685b      	ldr	r3, [r3, #4]
10047c36:	4923      	ldr	r1, [pc, #140]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c38:	6e89      	ldr	r1, [r1, #104]	@ 0x68
10047c3a:	6039      	str	r1, [r7, #0]
10047c3c:	2100      	movs	r1, #0
10047c3e:	6079      	str	r1, [r7, #4]
10047c40:	69b8      	ldr	r0, [r7, #24]
10047c42:	69f9      	ldr	r1, [r7, #28]
10047c44:	683c      	ldr	r4, [r7, #0]
10047c46:	687d      	ldr	r5, [r7, #4]
10047c48:	1824      	adds	r4, r4, r0
10047c4a:	414d      	adcs	r5, r1
10047c4c:	0020      	movs	r0, r4
10047c4e:	0029      	movs	r1, r5
10047c50:	2452      	movs	r4, #82	@ 0x52
10047c52:	2500      	movs	r5, #0
10047c54:	1900      	adds	r0, r0, r4
10047c56:	4169      	adcs	r1, r5
10047c58:	4299      	cmp	r1, r3
10047c5a:	d802      	bhi.n	10047c62 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x126>
10047c5c:	d103      	bne.n	10047c66 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x12a>
10047c5e:	4290      	cmp	r0, r2
10047c60:	d901      	bls.n	10047c66 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x12a>
    {
      return POWER_SAVE_LEVEL_CPU_HALT;
10047c62:	2301      	movs	r3, #1
10047c64:	e02a      	b.n	10047cbc <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
    }

    if (level == POWER_SAVE_LEVEL_STOP)
10047c66:	2317      	movs	r3, #23
10047c68:	2210      	movs	r2, #16
10047c6a:	189b      	adds	r3, r3, r2
10047c6c:	19db      	adds	r3, r3, r7
10047c6e:	781b      	ldrb	r3, [r3, #0]
10047c70:	2b03      	cmp	r3, #3
10047c72:	d118      	bne.n	10047ca6 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
    {
      if ((RADIO_TIMER_Context.rootNode->next == NULL)
10047c74:	4b13      	ldr	r3, [pc, #76]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c76:	228c      	movs	r2, #140	@ 0x8c
10047c78:	589b      	ldr	r3, [r3, r2]
10047c7a:	691b      	ldr	r3, [r3, #16]
10047c7c:	2b00      	cmp	r3, #0
10047c7e:	d112      	bne.n	10047ca6 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
          && (RADIO_TIMER_Context.rootNode == &RADIO_TIMER_Context.calibrationTimer))
10047c80:	4b10      	ldr	r3, [pc, #64]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c82:	228c      	movs	r2, #140	@ 0x8c
10047c84:	589a      	ldr	r2, [r3, r2]
10047c86:	4b10      	ldr	r3, [pc, #64]	@ (10047cc8 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x18c>)
10047c88:	429a      	cmp	r2, r3
10047c8a:	d10c      	bne.n	10047ca6 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x16a>
      {
        RADIO_TIMER_Context.stop_notimer_action = TRUE;
10047c8c:	4b0d      	ldr	r3, [pc, #52]	@ (10047cc4 <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x188>)
10047c8e:	2293      	movs	r2, #147	@ 0x93
10047c90:	2101      	movs	r1, #1
10047c92:	5499      	strb	r1, [r3, r2]
        _virtualTimeBaseEnable(DISABLE);
10047c94:	2000      	movs	r0, #0
10047c96:	f000 fd1b 	bl	100486d0 <_virtualTimeBaseEnable>
        LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10047c9a:	4b0c      	ldr	r3, [pc, #48]	@ (10047ccc <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x190>)
10047c9c:	0018      	movs	r0, r3
10047c9e:	f7ff fc15 	bl	100474cc <LL_RADIO_TIMER_DisableCPUWakeupTimer>
        return POWER_SAVE_LEVEL_STOP;
10047ca2:	2303      	movs	r3, #3
10047ca4:	e00a      	b.n	10047cbc <HAL_RADIO_TIMER_PowerSaveLevelCheck+0x180>
      }
    }
    level = POWER_SAVE_LEVEL_STOP_LS_CLOCK_ON;
10047ca6:	2317      	movs	r3, #23
10047ca8:	2210      	movs	r2, #16
10047caa:	189b      	adds	r3, r3, r2
10047cac:	19db      	adds	r3, r3, r7
10047cae:	2202      	movs	r2, #2
10047cb0:	701a      	strb	r2, [r3, #0]
  }

  return level;
10047cb2:	2317      	movs	r3, #23
10047cb4:	2210      	movs	r2, #16
10047cb6:	189b      	adds	r3, r3, r2
10047cb8:	19db      	adds	r3, r3, r7
10047cba:	781b      	ldrb	r3, [r3, #0]
}
10047cbc:	0018      	movs	r0, r3
10047cbe:	46bd      	mov	sp, r7
10047cc0:	b00b      	add	sp, #44	@ 0x2c
10047cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10047cc4:	200009f0 	.word	0x200009f0
10047cc8:	20000a30 	.word	0x20000a30
10047ccc:	60001800 	.word	0x60001800

10047cd0 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
10047cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10047cd2:	b085      	sub	sp, #20
10047cd4:	af00      	add	r7, sp, #0
10047cd6:	6078      	str	r0, [r7, #4]
10047cd8:	0008      	movs	r0, r1
10047cda:	0011      	movs	r1, r2
10047cdc:	1cfb      	adds	r3, r7, #3
10047cde:	1c02      	adds	r2, r0, #0
10047ce0:	701a      	strb	r2, [r3, #0]
10047ce2:	1cbb      	adds	r3, r7, #2
10047ce4:	1c0a      	adds	r2, r1, #0
10047ce6:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
10047ce8:	260f      	movs	r6, #15
10047cea:	19bb      	adds	r3, r7, r6
10047cec:	2200      	movs	r2, #0
10047cee:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
10047cf0:	1cfb      	adds	r3, r7, #3
10047cf2:	781b      	ldrb	r3, [r3, #0]
10047cf4:	1e5a      	subs	r2, r3, #1
10047cf6:	4193      	sbcs	r3, r2
10047cf8:	b2d9      	uxtb	r1, r3
10047cfa:	4b1b      	ldr	r3, [pc, #108]	@ (10047d68 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047cfc:	2264      	movs	r2, #100	@ 0x64
10047cfe:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
10047d00:	1cbb      	adds	r3, r7, #2
10047d02:	781b      	ldrb	r3, [r3, #0]
10047d04:	1e5a      	subs	r2, r3, #1
10047d06:	4193      	sbcs	r3, r2
10047d08:	b2d9      	uxtb	r1, r3
10047d0a:	4b17      	ldr	r3, [pc, #92]	@ (10047d68 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047d0c:	2260      	movs	r2, #96	@ 0x60
10047d0e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
10047d10:	4b15      	ldr	r3, [pc, #84]	@ (10047d68 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047d12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10047d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10047d16:	4914      	ldr	r1, [pc, #80]	@ (10047d68 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047d18:	6a88      	ldr	r0, [r1, #40]	@ 0x28
10047d1a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
10047d1c:	6879      	ldr	r1, [r7, #4]
10047d1e:	1a09      	subs	r1, r1, r0
10047d20:	000c      	movs	r4, r1
10047d22:	2100      	movs	r1, #0
10047d24:	000d      	movs	r5, r1
10047d26:	1912      	adds	r2, r2, r4
10047d28:	416b      	adcs	r3, r5
10047d2a:	490f      	ldr	r1, [pc, #60]	@ (10047d68 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047d2c:	658a      	str	r2, [r1, #88]	@ 0x58
10047d2e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10047d30:	4b0d      	ldr	r3, [pc, #52]	@ (10047d68 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047d32:	2261      	movs	r2, #97	@ 0x61
10047d34:	2100      	movs	r1, #0
10047d36:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10047d38:	4b0b      	ldr	r3, [pc, #44]	@ (10047d68 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047d3a:	2263      	movs	r2, #99	@ 0x63
10047d3c:	2100      	movs	r1, #0
10047d3e:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
10047d40:	4b09      	ldr	r3, [pc, #36]	@ (10047d68 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
10047d42:	2262      	movs	r2, #98	@ 0x62
10047d44:	2101      	movs	r1, #1
10047d46:	5499      	strb	r1, [r3, r2]
      This call is not needed if radio errors are not enabled by the BLE stack. */
      _set_controller_as_host();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
10047d48:	19ba      	adds	r2, r7, r6
10047d4a:	4b08      	ldr	r3, [pc, #32]	@ (10047d6c <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
10047d4c:	0011      	movs	r1, r2
10047d4e:	0018      	movs	r0, r3
10047d50:	f000 fdf4 	bl	1004893c <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
10047d54:	2001      	movs	r0, #1
10047d56:	f000 fcbb 	bl	100486d0 <_virtualTimeBaseEnable>

  return retVal;
10047d5a:	19bb      	adds	r3, r7, r6
10047d5c:	781b      	ldrb	r3, [r3, #0]
}
10047d5e:	0018      	movs	r0, r3
10047d60:	46bd      	mov	sp, r7
10047d62:	b005      	add	sp, #20
10047d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10047d66:	46c0      	nop			@ (mov r8, r8)
10047d68:	200009f0 	.word	0x200009f0
10047d6c:	20000a48 	.word	0x20000a48

10047d70 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
10047d70:	b5b0      	push	{r4, r5, r7, lr}
10047d72:	b088      	sub	sp, #32
10047d74:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
10047d76:	23c0      	movs	r3, #192	@ 0xc0
10047d78:	05db      	lsls	r3, r3, #23
10047d7a:	0018      	movs	r0, r3
10047d7c:	f7ff fb0c 	bl	10047398 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
10047d80:	23c0      	movs	r3, #192	@ 0xc0
10047d82:	05db      	lsls	r3, r3, #23
10047d84:	0018      	movs	r0, r3
10047d86:	f7ff fb27 	bl	100473d8 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10047d8a:	4b31      	ldr	r3, [pc, #196]	@ (10047e50 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
10047d8c:	0018      	movs	r0, r3
10047d8e:	f7ff fb69 	bl	10047464 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
10047d92:	4b30      	ldr	r3, [pc, #192]	@ (10047e54 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047d94:	2261      	movs	r2, #97	@ 0x61
10047d96:	2100      	movs	r1, #0
10047d98:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
10047d9a:	4b2e      	ldr	r3, [pc, #184]	@ (10047e54 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047d9c:	2262      	movs	r2, #98	@ 0x62
10047d9e:	2100      	movs	r1, #0
10047da0:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10047da2:	4b2c      	ldr	r3, [pc, #176]	@ (10047e54 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047da4:	2263      	movs	r2, #99	@ 0x63
10047da6:	2100      	movs	r1, #0
10047da8:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047daa:	f3ef 8310 	mrs	r3, PRIMASK
10047dae:	60bb      	str	r3, [r7, #8]
  return(result);
10047db0:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
10047db2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10047db4:	b672      	cpsid	i
}
10047db6:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
10047db8:	4b26      	ldr	r3, [pc, #152]	@ (10047e54 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047dba:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
10047dbc:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
10047dbe:	f000 f89d 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
10047dc2:	0002      	movs	r2, r0
10047dc4:	000b      	movs	r3, r1
10047dc6:	1aa4      	subs	r4, r4, r2
10047dc8:	419d      	sbcs	r5, r3
10047dca:	0022      	movs	r2, r4
10047dcc:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
10047dce:	4921      	ldr	r1, [pc, #132]	@ (10047e54 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
10047dd0:	2084      	movs	r0, #132	@ 0x84
10047dd2:	5c09      	ldrb	r1, [r1, r0]
10047dd4:	6039      	str	r1, [r7, #0]
10047dd6:	2100      	movs	r1, #0
10047dd8:	6079      	str	r1, [r7, #4]
10047dda:	6838      	ldr	r0, [r7, #0]
10047ddc:	6879      	ldr	r1, [r7, #4]
10047dde:	1a12      	subs	r2, r2, r0
10047de0:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
10047de2:	613a      	str	r2, [r7, #16]
10047de4:	617b      	str	r3, [r7, #20]
10047de6:	69bb      	ldr	r3, [r7, #24]
10047de8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047dea:	68fb      	ldr	r3, [r7, #12]
10047dec:	f383 8810 	msr	PRIMASK, r3
}
10047df0:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
10047df2:	697b      	ldr	r3, [r7, #20]
10047df4:	2b00      	cmp	r3, #0
10047df6:	dc0c      	bgt.n	10047e12 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
10047df8:	697b      	ldr	r3, [r7, #20]
10047dfa:	2b00      	cmp	r3, #0
10047dfc:	d102      	bne.n	10047e04 <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
10047dfe:	693b      	ldr	r3, [r7, #16]
10047e00:	2b00      	cmp	r3, #0
10047e02:	d106      	bne.n	10047e12 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
10047e04:	2317      	movs	r3, #23
10047e06:	2208      	movs	r2, #8
10047e08:	189b      	adds	r3, r3, r2
10047e0a:	19db      	adds	r3, r3, r7
10047e0c:	2201      	movs	r2, #1
10047e0e:	701a      	strb	r2, [r3, #0]
10047e10:	e015      	b.n	10047e3e <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
10047e12:	697b      	ldr	r3, [r7, #20]
10047e14:	2b00      	cmp	r3, #0
10047e16:	dc0c      	bgt.n	10047e32 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
10047e18:	697b      	ldr	r3, [r7, #20]
10047e1a:	2b00      	cmp	r3, #0
10047e1c:	d102      	bne.n	10047e24 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
10047e1e:	693b      	ldr	r3, [r7, #16]
10047e20:	2b0e      	cmp	r3, #14
10047e22:	d806      	bhi.n	10047e32 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
10047e24:	2317      	movs	r3, #23
10047e26:	2208      	movs	r2, #8
10047e28:	189b      	adds	r3, r3, r2
10047e2a:	19db      	adds	r3, r3, r7
10047e2c:	2202      	movs	r2, #2
10047e2e:	701a      	strb	r2, [r3, #0]
10047e30:	e005      	b.n	10047e3e <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
10047e32:	2317      	movs	r3, #23
10047e34:	2208      	movs	r2, #8
10047e36:	189b      	adds	r3, r3, r2
10047e38:	19db      	adds	r3, r3, r7
10047e3a:	2200      	movs	r2, #0
10047e3c:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
10047e3e:	2317      	movs	r3, #23
10047e40:	2208      	movs	r2, #8
10047e42:	189b      	adds	r3, r3, r2
10047e44:	19db      	adds	r3, r3, r7
10047e46:	781b      	ldrb	r3, [r3, #0]
}
10047e48:	0018      	movs	r0, r3
10047e4a:	46bd      	mov	sp, r7
10047e4c:	b008      	add	sp, #32
10047e4e:	bdb0      	pop	{r4, r5, r7, pc}
10047e50:	60001800 	.word	0x60001800
10047e54:	200009f0 	.word	0x200009f0

10047e58 <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
10047e58:	b580      	push	{r7, lr}
10047e5a:	b084      	sub	sp, #16
10047e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047e5e:	f3ef 8310 	mrs	r3, PRIMASK
10047e62:	603b      	str	r3, [r7, #0]
  return(result);
10047e64:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
10047e66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10047e68:	b672      	cpsid	i
}
10047e6a:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10047e6c:	4b0e      	ldr	r3, [pc, #56]	@ (10047ea8 <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
10047e6e:	0018      	movs	r0, r3
10047e70:	f7ff fb6d 	bl	1004754e <LL_RADIO_TIMER_GetAbsoluteTime>
10047e74:	0003      	movs	r3, r0
10047e76:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
10047e78:	68bb      	ldr	r3, [r7, #8]
10047e7a:	1c9a      	adds	r2, r3, #2
10047e7c:	23c0      	movs	r3, #192	@ 0xc0
10047e7e:	05db      	lsls	r3, r3, #23
10047e80:	0011      	movs	r1, r2
10047e82:	0018      	movs	r0, r3
10047e84:	f7ff fac8 	bl	10047418 <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
10047e88:	23c0      	movs	r3, #192	@ 0xc0
10047e8a:	05db      	lsls	r3, r3, #23
10047e8c:	0018      	movs	r0, r3
10047e8e:	f7ff fa73 	bl	10047378 <LL_RADIO_TIMER_EnableTimer1>
10047e92:	68fb      	ldr	r3, [r7, #12]
10047e94:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047e96:	687b      	ldr	r3, [r7, #4]
10047e98:	f383 8810 	msr	PRIMASK, r3
}
10047e9c:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10047e9e:	46c0      	nop			@ (mov r8, r8)
10047ea0:	46bd      	mov	sp, r7
10047ea2:	b004      	add	sp, #16
10047ea4:	bd80      	pop	{r7, pc}
10047ea6:	46c0      	nop			@ (mov r8, r8)
10047ea8:	60001800 	.word	0x60001800

10047eac <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
10047eac:	b580      	push	{r7, lr}
10047eae:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
10047eb0:	46c0      	nop			@ (mov r8, r8)
10047eb2:	46bd      	mov	sp, r7
10047eb4:	bd80      	pop	{r7, pc}
	...

10047eb8 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
10047eb8:	b580      	push	{r7, lr}
10047eba:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
10047ebc:	4b03      	ldr	r3, [pc, #12]	@ (10047ecc <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
10047ebe:	2263      	movs	r2, #99	@ 0x63
10047ec0:	2100      	movs	r1, #0
10047ec2:	5499      	strb	r1, [r3, r2]
}
10047ec4:	46c0      	nop			@ (mov r8, r8)
10047ec6:	46bd      	mov	sp, r7
10047ec8:	bd80      	pop	{r7, pc}
10047eca:	46c0      	nop			@ (mov r8, r8)
10047ecc:	200009f0 	.word	0x200009f0

10047ed0 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
10047ed0:	b580      	push	{r7, lr}
10047ed2:	b082      	sub	sp, #8
10047ed4:	af00      	add	r7, sp, #0
10047ed6:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10047ed8:	4b06      	ldr	r3, [pc, #24]	@ (10047ef4 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
10047eda:	69db      	ldr	r3, [r3, #28]
10047edc:	0019      	movs	r1, r3
10047ede:	4a06      	ldr	r2, [pc, #24]	@ (10047ef8 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
10047ee0:	687b      	ldr	r3, [r7, #4]
10047ee2:	0018      	movs	r0, r3
10047ee4:	f7f8 f8ec 	bl	100400c0 <blue_unit_conversion>
10047ee8:	0003      	movs	r3, r0
}
10047eea:	0018      	movs	r0, r3
10047eec:	46bd      	mov	sp, r7
10047eee:	b002      	add	sp, #8
10047ef0:	bd80      	pop	{r7, pc}
10047ef2:	46c0      	nop			@ (mov r8, r8)
10047ef4:	200009f0 	.word	0x200009f0
10047ef8:	00000635 	.word	0x00000635

10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
10047efc:	b580      	push	{r7, lr}
10047efe:	b082      	sub	sp, #8
10047f00:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10047f02:	1d3a      	adds	r2, r7, #4
10047f04:	4b05      	ldr	r3, [pc, #20]	@ (10047f1c <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
10047f06:	0011      	movs	r1, r2
10047f08:	0018      	movs	r0, r3
10047f0a:	f000 fac1 	bl	10048490 <_get_system_time_and_machine>
10047f0e:	0002      	movs	r2, r0
10047f10:	000b      	movs	r3, r1
}
10047f12:	0010      	movs	r0, r2
10047f14:	0019      	movs	r1, r3
10047f16:	46bd      	mov	sp, r7
10047f18:	b002      	add	sp, #8
10047f1a:	bd80      	pop	{r7, pc}
10047f1c:	200009f0 	.word	0x200009f0

10047f20 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
10047f20:	b590      	push	{r4, r7, lr}
10047f22:	b087      	sub	sp, #28
10047f24:	af00      	add	r7, sp, #0
10047f26:	60f8      	str	r0, [r7, #12]
10047f28:	603a      	str	r2, [r7, #0]
10047f2a:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
10047f2c:	683a      	ldr	r2, [r7, #0]
10047f2e:	687b      	ldr	r3, [r7, #4]
10047f30:	68f9      	ldr	r1, [r7, #12]
10047f32:	0008      	movs	r0, r1
10047f34:	f000 fa4e 	bl	100483d4 <_start_timer>
10047f38:	0002      	movs	r2, r0
10047f3a:	2417      	movs	r4, #23
10047f3c:	193b      	adds	r3, r7, r4
10047f3e:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
10047f40:	2001      	movs	r0, #1
10047f42:	f000 fbc5 	bl	100486d0 <_virtualTimeBaseEnable>

  return retVal;
10047f46:	193b      	adds	r3, r7, r4
10047f48:	781b      	ldrb	r3, [r3, #0]
}
10047f4a:	0018      	movs	r0, r3
10047f4c:	46bd      	mov	sp, r7
10047f4e:	b007      	add	sp, #28
10047f50:	bd90      	pop	{r4, r7, pc}
	...

10047f54 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
10047f54:	b590      	push	{r4, r7, lr}
10047f56:	b089      	sub	sp, #36	@ 0x24
10047f58:	af00      	add	r7, sp, #0
10047f5a:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
10047f5c:	4b28      	ldr	r3, [pc, #160]	@ (10048000 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047f5e:	228c      	movs	r2, #140	@ 0x8c
10047f60:	589b      	ldr	r3, [r3, r2]
10047f62:	687a      	ldr	r2, [r7, #4]
10047f64:	0011      	movs	r1, r2
10047f66:	0018      	movs	r0, r3
10047f68:	f000 fbde 	bl	10048728 <_remove_timer_in_queue>
10047f6c:	0003      	movs	r3, r0
10047f6e:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
10047f70:	210f      	movs	r1, #15
10047f72:	187b      	adds	r3, r7, r1
10047f74:	2200      	movs	r2, #0
10047f76:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
10047f78:	687b      	ldr	r3, [r7, #4]
10047f7a:	2200      	movs	r2, #0
10047f7c:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
10047f7e:	4b20      	ldr	r3, [pc, #128]	@ (10048000 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047f80:	228c      	movs	r2, #140	@ 0x8c
10047f82:	589b      	ldr	r3, [r3, r2]
10047f84:	69fa      	ldr	r2, [r7, #28]
10047f86:	429a      	cmp	r2, r3
10047f88:	d031      	beq.n	10047fee <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
10047f8a:	000c      	movs	r4, r1
10047f8c:	187a      	adds	r2, r7, r1
10047f8e:	69fb      	ldr	r3, [r7, #28]
10047f90:	0011      	movs	r1, r2
10047f92:	0018      	movs	r0, r3
10047f94:	f000 fae4 	bl	10048560 <_update_user_timeout>
10047f98:	0002      	movs	r2, r0
10047f9a:	4b19      	ldr	r3, [pc, #100]	@ (10048000 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047f9c:	218c      	movs	r1, #140	@ 0x8c
10047f9e:	505a      	str	r2, [r3, r1]
    if (expired)
10047fa0:	193b      	adds	r3, r7, r4
10047fa2:	781b      	ldrb	r3, [r3, #0]
10047fa4:	2b00      	cmp	r3, #0
10047fa6:	d026      	beq.n	10047ff6 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10047fa8:	f3ef 8310 	mrs	r3, PRIMASK
10047fac:	617b      	str	r3, [r7, #20]
  return(result);
10047fae:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
10047fb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
10047fb2:	b672      	cpsid	i
}
10047fb4:	46c0      	nop			@ (mov r8, r8)
10047fb6:	4b12      	ldr	r3, [pc, #72]	@ (10048000 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047fb8:	2291      	movs	r2, #145	@ 0x91
10047fba:	5c9b      	ldrb	r3, [r3, r2]
10047fbc:	3301      	adds	r3, #1
10047fbe:	4a10      	ldr	r2, [pc, #64]	@ (10048000 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047fc0:	2192      	movs	r1, #146	@ 0x92
10047fc2:	5c52      	ldrb	r2, [r2, r1]
10047fc4:	4293      	cmp	r3, r2
10047fc6:	d103      	bne.n	10047fd0 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
10047fc8:	4b0d      	ldr	r3, [pc, #52]	@ (10048000 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047fca:	2291      	movs	r2, #145	@ 0x91
10047fcc:	5c9b      	ldrb	r3, [r3, r2]
10047fce:	e004      	b.n	10047fda <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
10047fd0:	4b0b      	ldr	r3, [pc, #44]	@ (10048000 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047fd2:	2291      	movs	r2, #145	@ 0x91
10047fd4:	5c9b      	ldrb	r3, [r3, r2]
10047fd6:	3301      	adds	r3, #1
10047fd8:	b2db      	uxtb	r3, r3
10047fda:	4a09      	ldr	r2, [pc, #36]	@ (10048000 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047fdc:	2191      	movs	r1, #145	@ 0x91
10047fde:	5453      	strb	r3, [r2, r1]
10047fe0:	69bb      	ldr	r3, [r7, #24]
10047fe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10047fe4:	693b      	ldr	r3, [r7, #16]
10047fe6:	f383 8810 	msr	PRIMASK, r3
}
10047fea:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
10047fec:	e003      	b.n	10047ff6 <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
10047fee:	4b04      	ldr	r3, [pc, #16]	@ (10048000 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
10047ff0:	218c      	movs	r1, #140	@ 0x8c
10047ff2:	69fa      	ldr	r2, [r7, #28]
10047ff4:	505a      	str	r2, [r3, r1]
}
10047ff6:	46c0      	nop			@ (mov r8, r8)
10047ff8:	46bd      	mov	sp, r7
10047ffa:	b009      	add	sp, #36	@ 0x24
10047ffc:	bd90      	pop	{r4, r7, pc}
10047ffe:	46c0      	nop			@ (mov r8, r8)
10048000:	200009f0 	.word	0x200009f0

10048004 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
10048004:	b580      	push	{r7, lr}
10048006:	b082      	sub	sp, #8
10048008:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004800a:	2300      	movs	r3, #0
1004800c:	607b      	str	r3, [r7, #4]
  UNUSED(status);
1004800e:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
10048010:	4b13      	ldr	r3, [pc, #76]	@ (10048060 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10048012:	0018      	movs	r0, r3
10048014:	f7ff fa5a 	bl	100474cc <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
10048018:	4b12      	ldr	r3, [pc, #72]	@ (10048064 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004801a:	2291      	movs	r2, #145	@ 0x91
1004801c:	5c9b      	ldrb	r3, [r3, r2]
1004801e:	3301      	adds	r3, #1
10048020:	4a10      	ldr	r2, [pc, #64]	@ (10048064 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10048022:	2192      	movs	r1, #146	@ 0x92
10048024:	5c52      	ldrb	r2, [r2, r1]
10048026:	4293      	cmp	r3, r2
10048028:	d103      	bne.n	10048032 <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
1004802a:	4b0e      	ldr	r3, [pc, #56]	@ (10048064 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004802c:	2291      	movs	r2, #145	@ 0x91
1004802e:	5c9b      	ldrb	r3, [r3, r2]
10048030:	e004      	b.n	1004803c <HAL_RADIO_TIMER_TimeoutCallback+0x38>
10048032:	4b0c      	ldr	r3, [pc, #48]	@ (10048064 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
10048034:	2291      	movs	r2, #145	@ 0x91
10048036:	5c9b      	ldrb	r3, [r3, r2]
10048038:	3301      	adds	r3, #1
1004803a:	b2db      	uxtb	r3, r3
1004803c:	4a09      	ldr	r2, [pc, #36]	@ (10048064 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004803e:	2191      	movs	r1, #145	@ 0x91
10048040:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
10048042:	4b07      	ldr	r3, [pc, #28]	@ (10048060 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
10048044:	0018      	movs	r0, r3
10048046:	f7ff fab4 	bl	100475b2 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
1004804a:	4b05      	ldr	r3, [pc, #20]	@ (10048060 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004804c:	0018      	movs	r0, r3
1004804e:	f7ff fabe 	bl	100475ce <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
10048052:	0003      	movs	r3, r0
10048054:	607b      	str	r3, [r7, #4]
}
10048056:	46c0      	nop			@ (mov r8, r8)
10048058:	46bd      	mov	sp, r7
1004805a:	b002      	add	sp, #8
1004805c:	bd80      	pop	{r7, pc}
1004805e:	46c0      	nop			@ (mov r8, r8)
10048060:	60001800 	.word	0x60001800
10048064:	200009f0 	.word	0x200009f0

10048068 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
10048068:	b580      	push	{r7, lr}
1004806a:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004806c:	46c0      	nop			@ (mov r8, r8)
1004806e:	4b0b      	ldr	r3, [pc, #44]	@ (1004809c <_calibrationProcedure+0x34>)
10048070:	0018      	movs	r0, r3
10048072:	f7ff faf6 	bl	10047662 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
10048076:	1e03      	subs	r3, r0, #0
10048078:	d0f9      	beq.n	1004806e <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
1004807a:	4b08      	ldr	r3, [pc, #32]	@ (1004809c <_calibrationProcedure+0x34>)
1004807c:	2117      	movs	r1, #23
1004807e:	0018      	movs	r0, r3
10048080:	f7ff fab6 	bl	100475f0 <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
10048084:	4b06      	ldr	r3, [pc, #24]	@ (100480a0 <_calibrationProcedure+0x38>)
10048086:	0018      	movs	r0, r3
10048088:	f000 f81e 	bl	100480c8 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
1004808c:	4b05      	ldr	r3, [pc, #20]	@ (100480a4 <_calibrationProcedure+0x3c>)
1004808e:	69da      	ldr	r2, [r3, #28]
10048090:	4b04      	ldr	r3, [pc, #16]	@ (100480a4 <_calibrationProcedure+0x3c>)
10048092:	621a      	str	r2, [r3, #32]

}
10048094:	46c0      	nop			@ (mov r8, r8)
10048096:	46bd      	mov	sp, r7
10048098:	bd80      	pop	{r7, pc}
1004809a:	46c0      	nop			@ (mov r8, r8)
1004809c:	60001000 	.word	0x60001000
100480a0:	20000a00 	.word	0x20000a00
100480a4:	200009f0 	.word	0x200009f0

100480a8 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
100480a8:	b580      	push	{r7, lr}
100480aa:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
100480ac:	4b05      	ldr	r3, [pc, #20]	@ (100480c4 <_timer_start_calibration+0x1c>)
100480ae:	0018      	movs	r0, r3
100480b0:	f7ff fac9 	bl	10047646 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
100480b4:	4b03      	ldr	r3, [pc, #12]	@ (100480c4 <_timer_start_calibration+0x1c>)
100480b6:	0018      	movs	r0, r3
100480b8:	f7ff faa6 	bl	10047608 <LL_RADIO_TIMER_StartLSICalibration>
}
100480bc:	46c0      	nop			@ (mov r8, r8)
100480be:	46bd      	mov	sp, r7
100480c0:	bd80      	pop	{r7, pc}
100480c2:	46c0      	nop			@ (mov r8, r8)
100480c4:	60001000 	.word	0x60001000

100480c8 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
100480c8:	b580      	push	{r7, lr}
100480ca:	b082      	sub	sp, #8
100480cc:	af00      	add	r7, sp, #0
100480ce:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
100480d0:	f7ff ffea 	bl	100480a8 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
100480d4:	46c0      	nop			@ (mov r8, r8)
100480d6:	4b07      	ldr	r3, [pc, #28]	@ (100480f4 <_timer_calibrate+0x2c>)
100480d8:	0018      	movs	r0, r3
100480da:	f7ff fac2 	bl	10047662 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
100480de:	1e03      	subs	r3, r0, #0
100480e0:	d0f9      	beq.n	100480d6 <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
100480e2:	687b      	ldr	r3, [r7, #4]
100480e4:	0018      	movs	r0, r3
100480e6:	f000 f807 	bl	100480f8 <_get_calibration_data>
}
100480ea:	46c0      	nop			@ (mov r8, r8)
100480ec:	46bd      	mov	sp, r7
100480ee:	b002      	add	sp, #8
100480f0:	bd80      	pop	{r7, pc}
100480f2:	46c0      	nop			@ (mov r8, r8)
100480f4:	60001000 	.word	0x60001000

100480f8 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
100480f8:	b580      	push	{r7, lr}
100480fa:	b08a      	sub	sp, #40	@ 0x28
100480fc:	af00      	add	r7, sp, #0
100480fe:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
10048100:	4b2e      	ldr	r3, [pc, #184]	@ (100481bc <_get_calibration_data+0xc4>)
10048102:	0018      	movs	r0, r3
10048104:	f7ff fa8b 	bl	1004761e <LL_RADIO_TIMER_GetLSIPeriod>
10048108:	0003      	movs	r3, r0
1004810a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004810c:	e005      	b.n	1004811a <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004810e:	4b2b      	ldr	r3, [pc, #172]	@ (100481bc <_get_calibration_data+0xc4>)
10048110:	0018      	movs	r0, r3
10048112:	f7ff fa84 	bl	1004761e <LL_RADIO_TIMER_GetLSIPeriod>
10048116:	0003      	movs	r3, r0
10048118:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004811a:	4b28      	ldr	r3, [pc, #160]	@ (100481bc <_get_calibration_data+0xc4>)
1004811c:	0018      	movs	r0, r3
1004811e:	f7ff fa7e 	bl	1004761e <LL_RADIO_TIMER_GetLSIPeriod>
10048122:	0002      	movs	r2, r0
10048124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048126:	429a      	cmp	r2, r3
10048128:	d1f1      	bne.n	1004810e <_get_calibration_data+0x16>
1004812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004812c:	2b00      	cmp	r3, #0
1004812e:	d0ee      	beq.n	1004810e <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
10048130:	4b23      	ldr	r3, [pc, #140]	@ (100481c0 <_get_calibration_data+0xc8>)
10048132:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
10048134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048136:	121b      	asrs	r3, r3, #8
10048138:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
1004813a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004813c:	22ff      	movs	r2, #255	@ 0xff
1004813e:	4013      	ands	r3, r2
10048140:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
10048142:	69fb      	ldr	r3, [r7, #28]
10048144:	69ba      	ldr	r2, [r7, #24]
10048146:	435a      	muls	r2, r3
10048148:	697b      	ldr	r3, [r7, #20]
1004814a:	69f9      	ldr	r1, [r7, #28]
1004814c:	434b      	muls	r3, r1
1004814e:	121b      	asrs	r3, r3, #8
10048150:	18d3      	adds	r3, r2, r3
10048152:	3310      	adds	r3, #16
10048154:	115a      	asrs	r2, r3, #5
10048156:	687b      	ldr	r3, [r7, #4]
10048158:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
1004815a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004815c:	687b      	ldr	r3, [r7, #4]
1004815e:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
10048160:	4b18      	ldr	r3, [pc, #96]	@ (100481c4 <_get_calibration_data+0xcc>)
10048162:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10048164:	4b15      	ldr	r3, [pc, #84]	@ (100481bc <_get_calibration_data+0xc4>)
10048166:	0018      	movs	r0, r3
10048168:	f7ff fa63 	bl	10047632 <LL_RADIO_TIMER_GetLSIFrequency>
1004816c:	0003      	movs	r3, r0
1004816e:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
10048170:	e005      	b.n	1004817e <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
10048172:	4b12      	ldr	r3, [pc, #72]	@ (100481bc <_get_calibration_data+0xc4>)
10048174:	0018      	movs	r0, r3
10048176:	f7ff fa5c 	bl	10047632 <LL_RADIO_TIMER_GetLSIFrequency>
1004817a:	0003      	movs	r3, r0
1004817c:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004817e:	4b0f      	ldr	r3, [pc, #60]	@ (100481bc <_get_calibration_data+0xc4>)
10048180:	0018      	movs	r0, r3
10048182:	f7ff fa56 	bl	10047632 <LL_RADIO_TIMER_GetLSIFrequency>
10048186:	0002      	movs	r2, r0
10048188:	6a3b      	ldr	r3, [r7, #32]
1004818a:	429a      	cmp	r2, r3
1004818c:	d1f1      	bne.n	10048172 <_get_calibration_data+0x7a>
1004818e:	6a3b      	ldr	r3, [r7, #32]
10048190:	2b00      	cmp	r3, #0
10048192:	d0ee      	beq.n	10048172 <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
10048194:	6a3b      	ldr	r3, [r7, #32]
10048196:	119b      	asrs	r3, r3, #6
10048198:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
1004819a:	68fb      	ldr	r3, [r7, #12]
1004819c:	693a      	ldr	r2, [r7, #16]
1004819e:	4353      	muls	r3, r2
100481a0:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
100481a2:	68bb      	ldr	r3, [r7, #8]
100481a4:	3380      	adds	r3, #128	@ 0x80
100481a6:	121a      	asrs	r2, r3, #8
100481a8:	687b      	ldr	r3, [r7, #4]
100481aa:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
100481ac:	6a3a      	ldr	r2, [r7, #32]
100481ae:	687b      	ldr	r3, [r7, #4]
100481b0:	605a      	str	r2, [r3, #4]
}
100481b2:	46c0      	nop			@ (mov r8, r8)
100481b4:	46bd      	mov	sp, r7
100481b6:	b00a      	add	sp, #40	@ 0x28
100481b8:	bd80      	pop	{r7, pc}
100481ba:	46c0      	nop			@ (mov r8, r8)
100481bc:	60001000 	.word	0x60001000
100481c0:	0008bcf6 	.word	0x0008bcf6
100481c4:	00000753 	.word	0x00000753

100481c8 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
100481c8:	b590      	push	{r4, r7, lr}
100481ca:	b085      	sub	sp, #20
100481cc:	af00      	add	r7, sp, #0
100481ce:	6078      	str	r0, [r7, #4]
100481d0:	000a      	movs	r2, r1
100481d2:	1cfb      	adds	r3, r7, #3
100481d4:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
100481d6:	4b38      	ldr	r3, [pc, #224]	@ (100482b8 <_configureTxRxDelay+0xf0>)
100481d8:	7b9b      	ldrb	r3, [r3, #14]
100481da:	b2db      	uxtb	r3, r3
100481dc:	2b00      	cmp	r3, #0
100481de:	da00      	bge.n	100481e2 <_configureTxRxDelay+0x1a>
100481e0:	3307      	adds	r3, #7
100481e2:	10db      	asrs	r3, r3, #3
100481e4:	b2da      	uxtb	r2, r3
100481e6:	240f      	movs	r4, #15
100481e8:	193b      	adds	r3, r7, r4
100481ea:	3201      	adds	r2, #1
100481ec:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
100481ee:	687b      	ldr	r3, [r7, #4]
100481f0:	699b      	ldr	r3, [r3, #24]
100481f2:	0019      	movs	r1, r3
100481f4:	4b31      	ldr	r3, [pc, #196]	@ (100482bc <_configureTxRxDelay+0xf4>)
100481f6:	001a      	movs	r2, r3
100481f8:	201b      	movs	r0, #27
100481fa:	f7f7 ff61 	bl	100400c0 <blue_unit_conversion>
100481fe:	0002      	movs	r2, r0
10048200:	4b2d      	ldr	r3, [pc, #180]	@ (100482b8 <_configureTxRxDelay+0xf0>)
10048202:	b2d2      	uxtb	r2, r2
10048204:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
10048206:	4b2c      	ldr	r3, [pc, #176]	@ (100482b8 <_configureTxRxDelay+0xf0>)
10048208:	799b      	ldrb	r3, [r3, #6]
1004820a:	b2db      	uxtb	r3, r3
1004820c:	0018      	movs	r0, r3
1004820e:	f000 f86d 	bl	100482ec <_us_to_machinetime>
10048212:	0003      	movs	r3, r0
10048214:	b2d9      	uxtb	r1, r3
10048216:	687b      	ldr	r3, [r7, #4]
10048218:	223d      	movs	r2, #61	@ 0x3d
1004821a:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
1004821c:	4b26      	ldr	r3, [pc, #152]	@ (100482b8 <_configureTxRxDelay+0xf0>)
1004821e:	7a1b      	ldrb	r3, [r3, #8]
10048220:	b2db      	uxtb	r3, r3
10048222:	001a      	movs	r2, r3
10048224:	193b      	adds	r3, r7, r4
10048226:	781b      	ldrb	r3, [r3, #0]
10048228:	18d3      	adds	r3, r2, r3
1004822a:	0018      	movs	r0, r3
1004822c:	f000 f85e 	bl	100482ec <_us_to_machinetime>
10048230:	0003      	movs	r3, r0
10048232:	b2d9      	uxtb	r1, r3
10048234:	687b      	ldr	r3, [r7, #4]
10048236:	2238      	movs	r2, #56	@ 0x38
10048238:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
1004823a:	4b1f      	ldr	r3, [pc, #124]	@ (100482b8 <_configureTxRxDelay+0xf0>)
1004823c:	7a5b      	ldrb	r3, [r3, #9]
1004823e:	b2db      	uxtb	r3, r3
10048240:	001a      	movs	r2, r3
10048242:	193b      	adds	r3, r7, r4
10048244:	781b      	ldrb	r3, [r3, #0]
10048246:	18d3      	adds	r3, r2, r3
10048248:	0018      	movs	r0, r3
1004824a:	f000 f84f 	bl	100482ec <_us_to_machinetime>
1004824e:	0003      	movs	r3, r0
10048250:	b2d9      	uxtb	r1, r3
10048252:	687b      	ldr	r3, [r7, #4]
10048254:	2239      	movs	r2, #57	@ 0x39
10048256:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
10048258:	4b17      	ldr	r3, [pc, #92]	@ (100482b8 <_configureTxRxDelay+0xf0>)
1004825a:	7a9b      	ldrb	r3, [r3, #10]
1004825c:	b2db      	uxtb	r3, r3
1004825e:	0018      	movs	r0, r3
10048260:	f000 f844 	bl	100482ec <_us_to_machinetime>
10048264:	0003      	movs	r3, r0
10048266:	b2d9      	uxtb	r1, r3
10048268:	687b      	ldr	r3, [r7, #4]
1004826a:	223a      	movs	r2, #58	@ 0x3a
1004826c:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
1004826e:	4b12      	ldr	r3, [pc, #72]	@ (100482b8 <_configureTxRxDelay+0xf0>)
10048270:	7adb      	ldrb	r3, [r3, #11]
10048272:	b2db      	uxtb	r3, r3
10048274:	0018      	movs	r0, r3
10048276:	f000 f839 	bl	100482ec <_us_to_machinetime>
1004827a:	0003      	movs	r3, r0
1004827c:	b2d9      	uxtb	r1, r3
1004827e:	687b      	ldr	r3, [r7, #4]
10048280:	223b      	movs	r2, #59	@ 0x3b
10048282:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
10048284:	1cfb      	adds	r3, r7, #3
10048286:	781b      	ldrb	r3, [r3, #0]
10048288:	2b00      	cmp	r3, #0
1004828a:	d010      	beq.n	100482ae <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
1004828c:	4b0a      	ldr	r3, [pc, #40]	@ (100482b8 <_configureTxRxDelay+0xf0>)
1004828e:	7a1b      	ldrb	r3, [r3, #8]
10048290:	b2db      	uxtb	r3, r3
10048292:	001a      	movs	r2, r3
10048294:	193b      	adds	r3, r7, r4
10048296:	781b      	ldrb	r3, [r3, #0]
10048298:	18d3      	adds	r3, r2, r3
1004829a:	0018      	movs	r0, r3
1004829c:	f000 f810 	bl	100482c0 <_us_to_systime>
100482a0:	0003      	movs	r3, r0
100482a2:	b2db      	uxtb	r3, r3
100482a4:	331b      	adds	r3, #27
100482a6:	b2d9      	uxtb	r1, r3
100482a8:	687b      	ldr	r3, [r7, #4]
100482aa:	223c      	movs	r2, #60	@ 0x3c
100482ac:	5499      	strb	r1, [r3, r2]
  }

}
100482ae:	46c0      	nop			@ (mov r8, r8)
100482b0:	46bd      	mov	sp, r7
100482b2:	b005      	add	sp, #20
100482b4:	bd90      	pop	{r4, r7, pc}
100482b6:	46c0      	nop			@ (mov r8, r8)
100482b8:	200000c0 	.word	0x200000c0
100482bc:	00000326 	.word	0x00000326

100482c0 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
100482c0:	b580      	push	{r7, lr}
100482c2:	b084      	sub	sp, #16
100482c4:	af00      	add	r7, sp, #0
100482c6:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
100482c8:	687b      	ldr	r3, [r7, #4]
100482ca:	2268      	movs	r2, #104	@ 0x68
100482cc:	4353      	muls	r3, r2
100482ce:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
100482d0:	687b      	ldr	r3, [r7, #4]
100482d2:	22db      	movs	r2, #219	@ 0xdb
100482d4:	4353      	muls	r3, r2
100482d6:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
100482d8:	68fb      	ldr	r3, [r7, #12]
100482da:	0a1a      	lsrs	r2, r3, #8
100482dc:	68bb      	ldr	r3, [r7, #8]
100482de:	0c1b      	lsrs	r3, r3, #16
100482e0:	18d3      	adds	r3, r2, r3
}
100482e2:	0018      	movs	r0, r3
100482e4:	46bd      	mov	sp, r7
100482e6:	b004      	add	sp, #16
100482e8:	bd80      	pop	{r7, pc}
	...

100482ec <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
100482ec:	b5b0      	push	{r4, r5, r7, lr}
100482ee:	b088      	sub	sp, #32
100482f0:	af00      	add	r7, sp, #0
100482f2:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
100482f4:	4915      	ldr	r1, [pc, #84]	@ (1004834c <_us_to_machinetime+0x60>)
100482f6:	6949      	ldr	r1, [r1, #20]
100482f8:	6039      	str	r1, [r7, #0]
100482fa:	2100      	movs	r1, #0
100482fc:	6079      	str	r1, [r7, #4]
100482fe:	68f9      	ldr	r1, [r7, #12]
10048300:	000a      	movs	r2, r1
10048302:	2100      	movs	r1, #0
10048304:	000b      	movs	r3, r1
10048306:	6838      	ldr	r0, [r7, #0]
10048308:	6879      	ldr	r1, [r7, #4]
1004830a:	f7f8 f951 	bl	100405b0 <__aeabi_lmul>
1004830e:	0002      	movs	r2, r0
10048310:	000b      	movs	r3, r1
10048312:	0010      	movs	r0, r2
10048314:	0019      	movs	r1, r3
10048316:	0002      	movs	r2, r0
10048318:	000b      	movs	r3, r1
1004831a:	1892      	adds	r2, r2, r2
1004831c:	415b      	adcs	r3, r3
1004831e:	1812      	adds	r2, r2, r0
10048320:	414b      	adcs	r3, r1
10048322:	61ba      	str	r2, [r7, #24]
10048324:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
10048326:	69ba      	ldr	r2, [r7, #24]
10048328:	69fb      	ldr	r3, [r7, #28]
1004832a:	2080      	movs	r0, #128	@ 0x80
1004832c:	04c0      	lsls	r0, r0, #19
1004832e:	2100      	movs	r1, #0
10048330:	1812      	adds	r2, r2, r0
10048332:	414b      	adcs	r3, r1
10048334:	0159      	lsls	r1, r3, #5
10048336:	0ed4      	lsrs	r4, r2, #27
10048338:	430c      	orrs	r4, r1
1004833a:	0edd      	lsrs	r5, r3, #27
1004833c:	0023      	movs	r3, r4
1004833e:	617b      	str	r3, [r7, #20]

  return time_mt;
10048340:	697b      	ldr	r3, [r7, #20]
}
10048342:	0018      	movs	r0, r3
10048344:	46bd      	mov	sp, r7
10048346:	b008      	add	sp, #32
10048348:	bdb0      	pop	{r4, r5, r7, pc}
1004834a:	46c0      	nop			@ (mov r8, r8)
1004834c:	200009f0 	.word	0x200009f0

10048350 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
10048350:	b580      	push	{r7, lr}
10048352:	b084      	sub	sp, #16
10048354:	af00      	add	r7, sp, #0
10048356:	0002      	movs	r2, r0
10048358:	6039      	str	r1, [r7, #0]
1004835a:	1dbb      	adds	r3, r7, #6
1004835c:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
1004835e:	1dbb      	adds	r3, r7, #6
10048360:	881b      	ldrh	r3, [r3, #0]
10048362:	6839      	ldr	r1, [r7, #0]
10048364:	4a0e      	ldr	r2, [pc, #56]	@ (100483a0 <_update_xtal_startup_time+0x50>)
10048366:	0018      	movs	r0, r3
10048368:	f7f7 feaa 	bl	100400c0 <blue_unit_conversion>
1004836c:	0003      	movs	r3, r0
1004836e:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
10048370:	68fa      	ldr	r2, [r7, #12]
10048372:	2380      	movs	r3, #128	@ 0x80
10048374:	015b      	lsls	r3, r3, #5
10048376:	429a      	cmp	r2, r3
10048378:	db01      	blt.n	1004837e <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
1004837a:	4b0a      	ldr	r3, [pc, #40]	@ (100483a4 <_update_xtal_startup_time+0x54>)
1004837c:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
1004837e:	68fb      	ldr	r3, [r7, #12]
10048380:	2b0f      	cmp	r3, #15
10048382:	dc01      	bgt.n	10048388 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
10048384:	2310      	movs	r3, #16
10048386:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
10048388:	68fb      	ldr	r3, [r7, #12]
1004838a:	111b      	asrs	r3, r3, #4
1004838c:	b2db      	uxtb	r3, r3
1004838e:	4a06      	ldr	r2, [pc, #24]	@ (100483a8 <_update_xtal_startup_time+0x58>)
10048390:	0019      	movs	r1, r3
10048392:	0010      	movs	r0, r2
10048394:	f7ff f8aa 	bl	100474ec <LL_RADIO_TIMER_SetWakeupOffset>
}
10048398:	46c0      	nop			@ (mov r8, r8)
1004839a:	46bd      	mov	sp, r7
1004839c:	b004      	add	sp, #16
1004839e:	bd80      	pop	{r7, pc}
100483a0:	00000326 	.word	0x00000326
100483a4:	00000fff 	.word	0x00000fff
100483a8:	60001800 	.word	0x60001800

100483ac <_calibration_callback>:

static void _calibration_callback(void *handle)
{
100483ac:	b580      	push	{r7, lr}
100483ae:	b082      	sub	sp, #8
100483b0:	af00      	add	r7, sp, #0
100483b2:	6078      	str	r0, [r7, #4]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
100483b4:	4b06      	ldr	r3, [pc, #24]	@ (100483d0 <_calibration_callback+0x24>)
100483b6:	781b      	ldrb	r3, [r3, #0]
100483b8:	2b00      	cmp	r3, #0
100483ba:	d001      	beq.n	100483c0 <_calibration_callback+0x14>
  {
    _timer_start_calibration();
100483bc:	f7ff fe74 	bl	100480a8 <_timer_start_calibration>
  }
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
100483c0:	4b03      	ldr	r3, [pc, #12]	@ (100483d0 <_calibration_callback+0x24>)
100483c2:	2201      	movs	r2, #1
100483c4:	721a      	strb	r2, [r3, #8]
}
100483c6:	46c0      	nop			@ (mov r8, r8)
100483c8:	46bd      	mov	sp, r7
100483ca:	b002      	add	sp, #8
100483cc:	bd80      	pop	{r7, pc}
100483ce:	46c0      	nop			@ (mov r8, r8)
100483d0:	200009f0 	.word	0x200009f0

100483d4 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
100483d4:	b590      	push	{r4, r7, lr}
100483d6:	b089      	sub	sp, #36	@ 0x24
100483d8:	af00      	add	r7, sp, #0
100483da:	60f8      	str	r0, [r7, #12]
100483dc:	603a      	str	r2, [r7, #0]
100483de:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
100483e0:	2313      	movs	r3, #19
100483e2:	18fb      	adds	r3, r7, r3
100483e4:	2200      	movs	r2, #0
100483e6:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
100483e8:	68fb      	ldr	r3, [r7, #12]
100483ea:	7b1b      	ldrb	r3, [r3, #12]
100483ec:	2b00      	cmp	r3, #0
100483ee:	d001      	beq.n	100483f4 <_start_timer+0x20>
  {
    return 1;
100483f0:	2301      	movs	r3, #1
100483f2:	e047      	b.n	10048484 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
100483f4:	68f9      	ldr	r1, [r7, #12]
100483f6:	683a      	ldr	r2, [r7, #0]
100483f8:	687b      	ldr	r3, [r7, #4]
100483fa:	600a      	str	r2, [r1, #0]
100483fc:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
100483fe:	68fb      	ldr	r3, [r7, #12]
10048400:	2201      	movs	r2, #1
10048402:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
10048404:	4b21      	ldr	r3, [pc, #132]	@ (1004848c <_start_timer+0xb8>)
10048406:	228c      	movs	r2, #140	@ 0x8c
10048408:	589b      	ldr	r3, [r3, r2]
1004840a:	68fa      	ldr	r2, [r7, #12]
1004840c:	0011      	movs	r1, r2
1004840e:	0018      	movs	r0, r3
10048410:	f000 f92e 	bl	10048670 <_insert_timer_in_queue>
10048414:	0002      	movs	r2, r0
10048416:	68fb      	ldr	r3, [r7, #12]
10048418:	4293      	cmp	r3, r2
1004841a:	d130      	bne.n	1004847e <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004841c:	2413      	movs	r4, #19
1004841e:	193a      	adds	r2, r7, r4
10048420:	68fb      	ldr	r3, [r7, #12]
10048422:	0011      	movs	r1, r2
10048424:	0018      	movs	r0, r3
10048426:	f000 f89b 	bl	10048560 <_update_user_timeout>
1004842a:	0002      	movs	r2, r0
1004842c:	4b17      	ldr	r3, [pc, #92]	@ (1004848c <_start_timer+0xb8>)
1004842e:	218c      	movs	r1, #140	@ 0x8c
10048430:	505a      	str	r2, [r3, r1]
    if (expired)
10048432:	193b      	adds	r3, r7, r4
10048434:	781b      	ldrb	r3, [r3, #0]
10048436:	2b00      	cmp	r3, #0
10048438:	d021      	beq.n	1004847e <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004843a:	f3ef 8310 	mrs	r3, PRIMASK
1004843e:	61bb      	str	r3, [r7, #24]
  return(result);
10048440:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
10048442:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10048444:	b672      	cpsid	i
}
10048446:	46c0      	nop			@ (mov r8, r8)
10048448:	4b10      	ldr	r3, [pc, #64]	@ (1004848c <_start_timer+0xb8>)
1004844a:	2291      	movs	r2, #145	@ 0x91
1004844c:	5c9b      	ldrb	r3, [r3, r2]
1004844e:	3301      	adds	r3, #1
10048450:	4a0e      	ldr	r2, [pc, #56]	@ (1004848c <_start_timer+0xb8>)
10048452:	2192      	movs	r1, #146	@ 0x92
10048454:	5c52      	ldrb	r2, [r2, r1]
10048456:	4293      	cmp	r3, r2
10048458:	d103      	bne.n	10048462 <_start_timer+0x8e>
1004845a:	4b0c      	ldr	r3, [pc, #48]	@ (1004848c <_start_timer+0xb8>)
1004845c:	2291      	movs	r2, #145	@ 0x91
1004845e:	5c9b      	ldrb	r3, [r3, r2]
10048460:	e004      	b.n	1004846c <_start_timer+0x98>
10048462:	4b0a      	ldr	r3, [pc, #40]	@ (1004848c <_start_timer+0xb8>)
10048464:	2291      	movs	r2, #145	@ 0x91
10048466:	5c9b      	ldrb	r3, [r3, r2]
10048468:	3301      	adds	r3, #1
1004846a:	b2db      	uxtb	r3, r3
1004846c:	4a07      	ldr	r2, [pc, #28]	@ (1004848c <_start_timer+0xb8>)
1004846e:	2191      	movs	r1, #145	@ 0x91
10048470:	5453      	strb	r3, [r2, r1]
10048472:	69fb      	ldr	r3, [r7, #28]
10048474:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048476:	697b      	ldr	r3, [r7, #20]
10048478:	f383 8810 	msr	PRIMASK, r3
}
1004847c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return expired;
1004847e:	2313      	movs	r3, #19
10048480:	18fb      	adds	r3, r7, r3
10048482:	781b      	ldrb	r3, [r3, #0]
}
10048484:	0018      	movs	r0, r3
10048486:	46bd      	mov	sp, r7
10048488:	b009      	add	sp, #36	@ 0x24
1004848a:	bd90      	pop	{r4, r7, pc}
1004848c:	200009f0 	.word	0x200009f0

10048490 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
10048490:	b5b0      	push	{r4, r5, r7, lr}
10048492:	b08a      	sub	sp, #40	@ 0x28
10048494:	af00      	add	r7, sp, #0
10048496:	60f8      	str	r0, [r7, #12]
10048498:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004849a:	f3ef 8310 	mrs	r3, PRIMASK
1004849e:	617b      	str	r3, [r7, #20]
  return(result);
100484a0:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
100484a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100484a4:	b672      	cpsid	i
}
100484a6:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
100484a8:	68fb      	ldr	r3, [r7, #12]
100484aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100484ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100484ae:	623a      	str	r2, [r7, #32]
100484b0:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
100484b2:	4b29      	ldr	r3, [pc, #164]	@ (10048558 <_get_system_time_and_machine+0xc8>)
100484b4:	0018      	movs	r0, r3
100484b6:	f7ff f84a 	bl	1004754e <LL_RADIO_TIMER_GetAbsoluteTime>
100484ba:	0002      	movs	r2, r0
100484bc:	68bb      	ldr	r3, [r7, #8]
100484be:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
100484c0:	68bb      	ldr	r3, [r7, #8]
100484c2:	681a      	ldr	r2, [r3, #0]
100484c4:	68fb      	ldr	r3, [r7, #12]
100484c6:	2180      	movs	r1, #128	@ 0x80
100484c8:	585b      	ldr	r3, [r3, r1]
100484ca:	1ad3      	subs	r3, r2, r3
100484cc:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
100484ce:	68fb      	ldr	r3, [r7, #12]
100484d0:	69db      	ldr	r3, [r3, #28]
100484d2:	0019      	movs	r1, r3
100484d4:	4a21      	ldr	r2, [pc, #132]	@ (1004855c <_get_system_time_and_machine+0xcc>)
100484d6:	69bb      	ldr	r3, [r7, #24]
100484d8:	0018      	movs	r0, r3
100484da:	f7f7 fdf1 	bl	100400c0 <blue_unit_conversion>
100484de:	0003      	movs	r3, r0
100484e0:	603b      	str	r3, [r7, #0]
100484e2:	2300      	movs	r3, #0
100484e4:	607b      	str	r3, [r7, #4]
100484e6:	6a3a      	ldr	r2, [r7, #32]
100484e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100484ea:	6838      	ldr	r0, [r7, #0]
100484ec:	6879      	ldr	r1, [r7, #4]
100484ee:	1812      	adds	r2, r2, r0
100484f0:	414b      	adcs	r3, r1
100484f2:	623a      	str	r2, [r7, #32]
100484f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
100484f6:	68fb      	ldr	r3, [r7, #12]
100484f8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
100484fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100484fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100484fe:	4299      	cmp	r1, r3
10048500:	d305      	bcc.n	1004850e <_get_system_time_and_machine+0x7e>
10048502:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10048504:	4299      	cmp	r1, r3
10048506:	d115      	bne.n	10048534 <_get_system_time_and_machine+0xa4>
10048508:	6a39      	ldr	r1, [r7, #32]
1004850a:	4291      	cmp	r1, r2
1004850c:	d212      	bcs.n	10048534 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004850e:	68fb      	ldr	r3, [r7, #12]
10048510:	69db      	ldr	r3, [r3, #28]
10048512:	0019      	movs	r1, r3
10048514:	4a11      	ldr	r2, [pc, #68]	@ (1004855c <_get_system_time_and_machine+0xcc>)
10048516:	2301      	movs	r3, #1
10048518:	425b      	negs	r3, r3
1004851a:	0018      	movs	r0, r3
1004851c:	f7f7 fdd0 	bl	100400c0 <blue_unit_conversion>
10048520:	0003      	movs	r3, r0
10048522:	001c      	movs	r4, r3
10048524:	2300      	movs	r3, #0
10048526:	001d      	movs	r5, r3
10048528:	6a3a      	ldr	r2, [r7, #32]
1004852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004852c:	1912      	adds	r2, r2, r4
1004852e:	416b      	adcs	r3, r5
10048530:	623a      	str	r2, [r7, #32]
10048532:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
10048534:	68f9      	ldr	r1, [r7, #12]
10048536:	6a3a      	ldr	r2, [r7, #32]
10048538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004853a:	678a      	str	r2, [r1, #120]	@ 0x78
1004853c:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004853e:	69fb      	ldr	r3, [r7, #28]
10048540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048542:	693b      	ldr	r3, [r7, #16]
10048544:	f383 8810 	msr	PRIMASK, r3
}
10048548:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004854a:	6a3a      	ldr	r2, [r7, #32]
1004854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004854e:	0010      	movs	r0, r2
10048550:	0019      	movs	r1, r3
10048552:	46bd      	mov	sp, r7
10048554:	b00a      	add	sp, #40	@ 0x28
10048556:	bdb0      	pop	{r4, r5, r7, pc}
10048558:	60001800 	.word	0x60001800
1004855c:	00000635 	.word	0x00000635

10048560 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
10048560:	b5b0      	push	{r4, r5, r7, lr}
10048562:	b08a      	sub	sp, #40	@ 0x28
10048564:	af00      	add	r7, sp, #0
10048566:	6078      	str	r0, [r7, #4]
10048568:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
1004856a:	687b      	ldr	r3, [r7, #4]
1004856c:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
1004856e:	687b      	ldr	r3, [r7, #4]
10048570:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
10048572:	683b      	ldr	r3, [r7, #0]
10048574:	2200      	movs	r2, #0
10048576:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
10048578:	e033      	b.n	100485e2 <_update_user_timeout+0x82>
  {
    if (curr->active)
1004857a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004857c:	7b1b      	ldrb	r3, [r3, #12]
1004857e:	2b00      	cmp	r3, #0
10048580:	d02c      	beq.n	100485dc <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10048582:	f3ef 8310 	mrs	r3, PRIMASK
10048586:	60fb      	str	r3, [r7, #12]
  return(result);
10048588:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
1004858a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004858c:	b672      	cpsid	i
}
1004858e:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
10048590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048592:	681c      	ldr	r4, [r3, #0]
10048594:	685d      	ldr	r5, [r3, #4]
10048596:	f7ff fcb1 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
1004859a:	0002      	movs	r2, r0
1004859c:	000b      	movs	r3, r1
1004859e:	1aa4      	subs	r4, r4, r2
100485a0:	419d      	sbcs	r5, r3
100485a2:	0022      	movs	r2, r4
100485a4:	002b      	movs	r3, r5
100485a6:	613a      	str	r2, [r7, #16]
100485a8:	617b      	str	r3, [r7, #20]
      if (delay > 0)
100485aa:	697b      	ldr	r3, [r7, #20]
100485ac:	2b00      	cmp	r3, #0
100485ae:	dc05      	bgt.n	100485bc <_update_user_timeout+0x5c>
100485b0:	697b      	ldr	r3, [r7, #20]
100485b2:	2b00      	cmp	r3, #0
100485b4:	d108      	bne.n	100485c8 <_update_user_timeout+0x68>
100485b6:	693b      	ldr	r3, [r7, #16]
100485b8:	2b00      	cmp	r3, #0
100485ba:	d005      	beq.n	100485c8 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
100485bc:	693b      	ldr	r3, [r7, #16]
100485be:	2101      	movs	r1, #1
100485c0:	0018      	movs	r0, r3
100485c2:	f000 f81d 	bl	10048600 <VTIMER_SetWakeupTime>
100485c6:	e002      	b.n	100485ce <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
100485c8:	683b      	ldr	r3, [r7, #0]
100485ca:	2201      	movs	r2, #1
100485cc:	701a      	strb	r2, [r3, #0]
100485ce:	69fb      	ldr	r3, [r7, #28]
100485d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100485d2:	68bb      	ldr	r3, [r7, #8]
100485d4:	f383 8810 	msr	PRIMASK, r3
}
100485d8:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
100485da:	e005      	b.n	100485e8 <_update_user_timeout+0x88>
    }
    curr = curr->next;
100485dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100485de:	691b      	ldr	r3, [r3, #16]
100485e0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
100485e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100485e4:	2b00      	cmp	r3, #0
100485e6:	d1c8      	bne.n	1004857a <_update_user_timeout+0x1a>
  }
  if (*expired)
100485e8:	683b      	ldr	r3, [r7, #0]
100485ea:	781b      	ldrb	r3, [r3, #0]
100485ec:	2b00      	cmp	r3, #0
100485ee:	d001      	beq.n	100485f4 <_update_user_timeout+0x94>
  {
    return rootOrig;
100485f0:	6a3b      	ldr	r3, [r7, #32]
100485f2:	e000      	b.n	100485f6 <_update_user_timeout+0x96>
  }

  return curr;
100485f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
100485f6:	0018      	movs	r0, r3
100485f8:	46bd      	mov	sp, r7
100485fa:	b00a      	add	sp, #40	@ 0x28
100485fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

10048600 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
10048600:	b580      	push	{r7, lr}
10048602:	b084      	sub	sp, #16
10048604:	af00      	add	r7, sp, #0
10048606:	6078      	str	r0, [r7, #4]
10048608:	000a      	movs	r2, r1
1004860a:	1cfb      	adds	r3, r7, #3
1004860c:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004860e:	4b15      	ldr	r3, [pc, #84]	@ (10048664 <VTIMER_SetWakeupTime+0x64>)
10048610:	699b      	ldr	r3, [r3, #24]
10048612:	0019      	movs	r1, r3
10048614:	4a14      	ldr	r2, [pc, #80]	@ (10048668 <VTIMER_SetWakeupTime+0x68>)
10048616:	687b      	ldr	r3, [r7, #4]
10048618:	0018      	movs	r0, r3
1004861a:	f7f7 fd51 	bl	100400c0 <blue_unit_conversion>
1004861e:	0003      	movs	r3, r0
10048620:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
10048622:	687b      	ldr	r3, [r7, #4]
10048624:	2b20      	cmp	r3, #32
10048626:	d200      	bcs.n	1004862a <VTIMER_SetWakeupTime+0x2a>
10048628:	2320      	movs	r3, #32
1004862a:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004862c:	4b0f      	ldr	r3, [pc, #60]	@ (1004866c <VTIMER_SetWakeupTime+0x6c>)
1004862e:	0018      	movs	r0, r3
10048630:	f7fe ff8d 	bl	1004754e <LL_RADIO_TIMER_GetAbsoluteTime>
10048634:	0003      	movs	r3, r0
10048636:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
10048638:	687a      	ldr	r2, [r7, #4]
1004863a:	68fb      	ldr	r3, [r7, #12]
1004863c:	18d3      	adds	r3, r2, r3
1004863e:	3308      	adds	r3, #8
10048640:	4a0a      	ldr	r2, [pc, #40]	@ (1004866c <VTIMER_SetWakeupTime+0x6c>)
10048642:	0019      	movs	r1, r3
10048644:	0010      	movs	r0, r2
10048646:	f7fe ff76 	bl	10047536 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004864a:	4b08      	ldr	r3, [pc, #32]	@ (1004866c <VTIMER_SetWakeupTime+0x6c>)
1004864c:	0018      	movs	r0, r3
1004864e:	f7fe ff88 	bl	10047562 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
10048652:	4b06      	ldr	r3, [pc, #24]	@ (1004866c <VTIMER_SetWakeupTime+0x6c>)
10048654:	0018      	movs	r0, r3
10048656:	f7fe ff29 	bl	100474ac <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004865a:	68fb      	ldr	r3, [r7, #12]
}
1004865c:	0018      	movs	r0, r3
1004865e:	46bd      	mov	sp, r7
10048660:	b004      	add	sp, #16
10048662:	bd80      	pop	{r7, pc}
10048664:	200009f0 	.word	0x200009f0
10048668:	00000326 	.word	0x00000326
1004866c:	60001800 	.word	0x60001800

10048670 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10048670:	b580      	push	{r7, lr}
10048672:	b086      	sub	sp, #24
10048674:	af00      	add	r7, sp, #0
10048676:	6078      	str	r0, [r7, #4]
10048678:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004867a:	687b      	ldr	r3, [r7, #4]
1004867c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004867e:	2300      	movs	r3, #0
10048680:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
10048682:	687b      	ldr	r3, [r7, #4]
10048684:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
10048686:	e004      	b.n	10048692 <_insert_timer_in_queue+0x22>
  {
    prev = current;
10048688:	697b      	ldr	r3, [r7, #20]
1004868a:	613b      	str	r3, [r7, #16]
    current = current->next;
1004868c:	697b      	ldr	r3, [r7, #20]
1004868e:	691b      	ldr	r3, [r3, #16]
10048690:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
10048692:	697b      	ldr	r3, [r7, #20]
10048694:	2b00      	cmp	r3, #0
10048696:	d00a      	beq.n	100486ae <_insert_timer_in_queue+0x3e>
10048698:	697b      	ldr	r3, [r7, #20]
1004869a:	681a      	ldr	r2, [r3, #0]
1004869c:	685b      	ldr	r3, [r3, #4]
1004869e:	6839      	ldr	r1, [r7, #0]
100486a0:	6808      	ldr	r0, [r1, #0]
100486a2:	6849      	ldr	r1, [r1, #4]
100486a4:	4299      	cmp	r1, r3
100486a6:	d8ef      	bhi.n	10048688 <_insert_timer_in_queue+0x18>
100486a8:	d101      	bne.n	100486ae <_insert_timer_in_queue+0x3e>
100486aa:	4290      	cmp	r0, r2
100486ac:	d8ec      	bhi.n	10048688 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
100486ae:	683b      	ldr	r3, [r7, #0]
100486b0:	697a      	ldr	r2, [r7, #20]
100486b2:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
100486b4:	693b      	ldr	r3, [r7, #16]
100486b6:	2b00      	cmp	r3, #0
100486b8:	d102      	bne.n	100486c0 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
100486ba:	683b      	ldr	r3, [r7, #0]
100486bc:	60fb      	str	r3, [r7, #12]
100486be:	e002      	b.n	100486c6 <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
100486c0:	693b      	ldr	r3, [r7, #16]
100486c2:	683a      	ldr	r2, [r7, #0]
100486c4:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
100486c6:	68fb      	ldr	r3, [r7, #12]
}
100486c8:	0018      	movs	r0, r3
100486ca:	46bd      	mov	sp, r7
100486cc:	b006      	add	sp, #24
100486ce:	bd80      	pop	{r7, pc}

100486d0 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
100486d0:	b580      	push	{r7, lr}
100486d2:	b082      	sub	sp, #8
100486d4:	af00      	add	r7, sp, #0
100486d6:	0002      	movs	r2, r0
100486d8:	1dfb      	adds	r3, r7, #7
100486da:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
100486dc:	1dfb      	adds	r3, r7, #7
100486de:	781b      	ldrb	r3, [r3, #0]
100486e0:	2b00      	cmp	r3, #0
100486e2:	d010      	beq.n	10048706 <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
100486e4:	4b0e      	ldr	r3, [pc, #56]	@ (10048720 <_virtualTimeBaseEnable+0x50>)
100486e6:	2290      	movs	r2, #144	@ 0x90
100486e8:	5c9b      	ldrb	r3, [r3, r2]
100486ea:	2201      	movs	r2, #1
100486ec:	4053      	eors	r3, r2
100486ee:	b2db      	uxtb	r3, r3
100486f0:	2b00      	cmp	r3, #0
100486f2:	d010      	beq.n	10048716 <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
100486f4:	4b0b      	ldr	r3, [pc, #44]	@ (10048724 <_virtualTimeBaseEnable+0x54>)
100486f6:	0018      	movs	r0, r3
100486f8:	f7ff fe58 	bl	100483ac <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
100486fc:	4b08      	ldr	r3, [pc, #32]	@ (10048720 <_virtualTimeBaseEnable+0x50>)
100486fe:	2290      	movs	r2, #144	@ 0x90
10048700:	2101      	movs	r1, #1
10048702:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
10048704:	e007      	b.n	10048716 <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
10048706:	4b07      	ldr	r3, [pc, #28]	@ (10048724 <_virtualTimeBaseEnable+0x54>)
10048708:	0018      	movs	r0, r3
1004870a:	f7ff fc23 	bl	10047f54 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004870e:	4b04      	ldr	r3, [pc, #16]	@ (10048720 <_virtualTimeBaseEnable+0x50>)
10048710:	2290      	movs	r2, #144	@ 0x90
10048712:	2100      	movs	r1, #0
10048714:	5499      	strb	r1, [r3, r2]
}
10048716:	46c0      	nop			@ (mov r8, r8)
10048718:	46bd      	mov	sp, r7
1004871a:	b002      	add	sp, #8
1004871c:	bd80      	pop	{r7, pc}
1004871e:	46c0      	nop			@ (mov r8, r8)
10048720:	200009f0 	.word	0x200009f0
10048724:	20000a30 	.word	0x20000a30

10048728 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
10048728:	b580      	push	{r7, lr}
1004872a:	b086      	sub	sp, #24
1004872c:	af00      	add	r7, sp, #0
1004872e:	6078      	str	r0, [r7, #4]
10048730:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
10048732:	687b      	ldr	r3, [r7, #4]
10048734:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
10048736:	2300      	movs	r3, #0
10048738:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004873a:	687b      	ldr	r3, [r7, #4]
1004873c:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004873e:	e004      	b.n	1004874a <_remove_timer_in_queue+0x22>
  {
    prev = current;
10048740:	697b      	ldr	r3, [r7, #20]
10048742:	613b      	str	r3, [r7, #16]
    current = current->next;
10048744:	697b      	ldr	r3, [r7, #20]
10048746:	691b      	ldr	r3, [r3, #16]
10048748:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004874a:	697b      	ldr	r3, [r7, #20]
1004874c:	2b00      	cmp	r3, #0
1004874e:	d003      	beq.n	10048758 <_remove_timer_in_queue+0x30>
10048750:	697a      	ldr	r2, [r7, #20]
10048752:	683b      	ldr	r3, [r7, #0]
10048754:	429a      	cmp	r2, r3
10048756:	d1f3      	bne.n	10048740 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
10048758:	697b      	ldr	r3, [r7, #20]
1004875a:	2b00      	cmp	r3, #0
1004875c:	d00b      	beq.n	10048776 <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004875e:	697a      	ldr	r2, [r7, #20]
10048760:	687b      	ldr	r3, [r7, #4]
10048762:	429a      	cmp	r2, r3
10048764:	d103      	bne.n	1004876e <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
10048766:	697b      	ldr	r3, [r7, #20]
10048768:	691b      	ldr	r3, [r3, #16]
1004876a:	60fb      	str	r3, [r7, #12]
1004876c:	e003      	b.n	10048776 <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004876e:	697b      	ldr	r3, [r7, #20]
10048770:	691a      	ldr	r2, [r3, #16]
10048772:	693b      	ldr	r3, [r7, #16]
10048774:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
10048776:	68fb      	ldr	r3, [r7, #12]
}
10048778:	0018      	movs	r0, r3
1004877a:	46bd      	mov	sp, r7
1004877c:	b006      	add	sp, #24
1004877e:	bd80      	pop	{r7, pc}

10048780 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
10048780:	b5b0      	push	{r4, r5, r7, lr}
10048782:	b088      	sub	sp, #32
10048784:	af00      	add	r7, sp, #0
10048786:	6078      	str	r0, [r7, #4]
10048788:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004878a:	687b      	ldr	r3, [r7, #4]
1004878c:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004878e:	2300      	movs	r3, #0
10048790:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
10048792:	687b      	ldr	r3, [r7, #4]
10048794:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
10048796:	683b      	ldr	r3, [r7, #0]
10048798:	687a      	ldr	r2, [r7, #4]
1004879a:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
1004879c:	2300      	movs	r3, #0
1004879e:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
100487a0:	e021      	b.n	100487e6 <_check_callbacks+0x66>
  {

    if (curr->active)
100487a2:	69fb      	ldr	r3, [r7, #28]
100487a4:	7b1b      	ldrb	r3, [r3, #12]
100487a6:	2b00      	cmp	r3, #0
100487a8:	d015      	beq.n	100487d6 <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
100487aa:	69fb      	ldr	r3, [r7, #28]
100487ac:	681c      	ldr	r4, [r3, #0]
100487ae:	685d      	ldr	r5, [r3, #4]
100487b0:	f7ff fba4 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
100487b4:	0002      	movs	r2, r0
100487b6:	000b      	movs	r3, r1
100487b8:	1aa4      	subs	r4, r4, r2
100487ba:	419d      	sbcs	r5, r3
100487bc:	0022      	movs	r2, r4
100487be:	002b      	movs	r3, r5
100487c0:	60ba      	str	r2, [r7, #8]
100487c2:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
100487c4:	68fb      	ldr	r3, [r7, #12]
100487c6:	2b00      	cmp	r3, #0
100487c8:	dc11      	bgt.n	100487ee <_check_callbacks+0x6e>
100487ca:	68fb      	ldr	r3, [r7, #12]
100487cc:	2b00      	cmp	r3, #0
100487ce:	d102      	bne.n	100487d6 <_check_callbacks+0x56>
100487d0:	68bb      	ldr	r3, [r7, #8]
100487d2:	2b05      	cmp	r3, #5
100487d4:	d80b      	bhi.n	100487ee <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
100487d6:	69fb      	ldr	r3, [r7, #28]
100487d8:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
100487da:	69fb      	ldr	r3, [r7, #28]
100487dc:	691b      	ldr	r3, [r3, #16]
100487de:	61fb      	str	r3, [r7, #28]
    expiredCount++;
100487e0:	693b      	ldr	r3, [r7, #16]
100487e2:	3301      	adds	r3, #1
100487e4:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
100487e6:	69fb      	ldr	r3, [r7, #28]
100487e8:	2b00      	cmp	r3, #0
100487ea:	d1da      	bne.n	100487a2 <_check_callbacks+0x22>
100487ec:	e000      	b.n	100487f0 <_check_callbacks+0x70>
        break;
100487ee:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
100487f0:	693b      	ldr	r3, [r7, #16]
100487f2:	2b00      	cmp	r3, #0
100487f4:	d005      	beq.n	10048802 <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
100487f6:	69bb      	ldr	r3, [r7, #24]
100487f8:	2200      	movs	r2, #0
100487fa:	611a      	str	r2, [r3, #16]
    returnValue = curr;
100487fc:	69fb      	ldr	r3, [r7, #28]
100487fe:	617b      	str	r3, [r7, #20]
10048800:	e002      	b.n	10048808 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
10048802:	683b      	ldr	r3, [r7, #0]
10048804:	2200      	movs	r2, #0
10048806:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
10048808:	697b      	ldr	r3, [r7, #20]
}
1004880a:	0018      	movs	r0, r3
1004880c:	46bd      	mov	sp, r7
1004880e:	b008      	add	sp, #32
10048810:	bdb0      	pop	{r4, r5, r7, pc}
	...

10048814 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
10048814:	b580      	push	{r7, lr}
10048816:	b084      	sub	sp, #16
10048818:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004881a:	4b17      	ldr	r3, [pc, #92]	@ (10048878 <_updateCalibrationData+0x64>)
1004881c:	781b      	ldrb	r3, [r3, #0]
1004881e:	2b00      	cmp	r3, #0
10048820:	d015      	beq.n	1004884e <_updateCalibrationData+0x3a>
  {
    _get_calibration_data(&RADIO_TIMER_Context.calibrationData);
10048822:	4b16      	ldr	r3, [pc, #88]	@ (1004887c <_updateCalibrationData+0x68>)
10048824:	0018      	movs	r0, r3
10048826:	f7ff fc67 	bl	100480f8 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004882a:	4b13      	ldr	r3, [pc, #76]	@ (10048878 <_updateCalibrationData+0x64>)
1004882c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004882e:	b29a      	uxth	r2, r3
10048830:	4b11      	ldr	r3, [pc, #68]	@ (10048878 <_updateCalibrationData+0x64>)
10048832:	699b      	ldr	r3, [r3, #24]
10048834:	0019      	movs	r1, r3
10048836:	0010      	movs	r0, r2
10048838:	f7ff fd8a 	bl	10048350 <_update_xtal_startup_time>
    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004883c:	4b0e      	ldr	r3, [pc, #56]	@ (10048878 <_updateCalibrationData+0x64>)
1004883e:	2100      	movs	r1, #0
10048840:	0018      	movs	r0, r3
10048842:	f7ff fcc1 	bl	100481c8 <_configureTxRxDelay>
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
10048846:	4b0c      	ldr	r3, [pc, #48]	@ (10048878 <_updateCalibrationData+0x64>)
10048848:	2234      	movs	r2, #52	@ 0x34
1004884a:	2101      	movs	r1, #1
1004884c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004884e:	f3ef 8310 	mrs	r3, PRIMASK
10048852:	607b      	str	r3, [r7, #4]
  return(result);
10048854:	687b      	ldr	r3, [r7, #4]
  }
  ATOMIC_SECTION_BEGIN();
10048856:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
10048858:	b672      	cpsid	i
}
1004885a:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004885c:	4b06      	ldr	r3, [pc, #24]	@ (10048878 <_updateCalibrationData+0x64>)
1004885e:	0018      	movs	r0, r3
10048860:	f000 f80e 	bl	10048880 <_update_system_time>
10048864:	68fb      	ldr	r3, [r7, #12]
10048866:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048868:	68bb      	ldr	r3, [r7, #8]
1004886a:	f383 8810 	msr	PRIMASK, r3
}
1004886e:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
10048870:	46c0      	nop			@ (mov r8, r8)
10048872:	46bd      	mov	sp, r7
10048874:	b004      	add	sp, #16
10048876:	bd80      	pop	{r7, pc}
10048878:	200009f0 	.word	0x200009f0
1004887c:	20000a00 	.word	0x20000a00

10048880 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
10048880:	b5b0      	push	{r4, r5, r7, lr}
10048882:	b088      	sub	sp, #32
10048884:	af00      	add	r7, sp, #0
10048886:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
10048888:	4b2a      	ldr	r3, [pc, #168]	@ (10048934 <_update_system_time+0xb4>)
1004888a:	0018      	movs	r0, r3
1004888c:	f7fe fe5f 	bl	1004754e <LL_RADIO_TIMER_GetAbsoluteTime>
10048890:	0003      	movs	r3, r0
10048892:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
10048894:	697b      	ldr	r3, [r7, #20]
10048896:	6a1b      	ldr	r3, [r3, #32]
10048898:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004889a:	697b      	ldr	r3, [r7, #20]
1004889c:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004889e:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
100488a0:	697b      	ldr	r3, [r7, #20]
100488a2:	2280      	movs	r2, #128	@ 0x80
100488a4:	589b      	ldr	r3, [r3, r2]
100488a6:	69fa      	ldr	r2, [r7, #28]
100488a8:	1ad3      	subs	r3, r2, r3
100488aa:	4a23      	ldr	r2, [pc, #140]	@ (10048938 <_update_system_time+0xb8>)
100488ac:	69b9      	ldr	r1, [r7, #24]
100488ae:	0018      	movs	r0, r3
100488b0:	f7f7 fc06 	bl	100400c0 <blue_unit_conversion>
100488b4:	0003      	movs	r3, r0
100488b6:	60bb      	str	r3, [r7, #8]
100488b8:	2300      	movs	r3, #0
100488ba:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
100488bc:	68ba      	ldr	r2, [r7, #8]
100488be:	68fb      	ldr	r3, [r7, #12]
100488c0:	1912      	adds	r2, r2, r4
100488c2:	416b      	adcs	r3, r5
100488c4:	6979      	ldr	r1, [r7, #20]
100488c6:	670a      	str	r2, [r1, #112]	@ 0x70
100488c8:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
100488ca:	697b      	ldr	r3, [r7, #20]
100488cc:	781b      	ldrb	r3, [r3, #0]
100488ce:	2b00      	cmp	r3, #0
100488d0:	d11d      	bne.n	1004890e <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
100488d2:	697b      	ldr	r3, [r7, #20]
100488d4:	2280      	movs	r2, #128	@ 0x80
100488d6:	589b      	ldr	r3, [r3, r2]
100488d8:	69fa      	ldr	r2, [r7, #28]
100488da:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
100488dc:	697b      	ldr	r3, [r7, #20]
100488de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
100488e0:	429a      	cmp	r2, r3
100488e2:	d214      	bcs.n	1004890e <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
100488e4:	4a14      	ldr	r2, [pc, #80]	@ (10048938 <_update_system_time+0xb8>)
100488e6:	69b9      	ldr	r1, [r7, #24]
100488e8:	2301      	movs	r3, #1
100488ea:	425b      	negs	r3, r3
100488ec:	0018      	movs	r0, r3
100488ee:	f7f7 fbe7 	bl	100400c0 <blue_unit_conversion>
100488f2:	0001      	movs	r1, r0
100488f4:	697b      	ldr	r3, [r7, #20]
100488f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
100488f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
100488fa:	6039      	str	r1, [r7, #0]
100488fc:	2100      	movs	r1, #0
100488fe:	6079      	str	r1, [r7, #4]
10048900:	6838      	ldr	r0, [r7, #0]
10048902:	6879      	ldr	r1, [r7, #4]
10048904:	1812      	adds	r2, r2, r0
10048906:	414b      	adcs	r3, r1
10048908:	6979      	ldr	r1, [r7, #20]
1004890a:	670a      	str	r2, [r1, #112]	@ 0x70
1004890c:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004890e:	697b      	ldr	r3, [r7, #20]
10048910:	2180      	movs	r1, #128	@ 0x80
10048912:	69fa      	ldr	r2, [r7, #28]
10048914:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
10048916:	697b      	ldr	r3, [r7, #20]
10048918:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004891a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004891c:	6979      	ldr	r1, [r7, #20]
1004891e:	628a      	str	r2, [r1, #40]	@ 0x28
10048920:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
10048922:	697b      	ldr	r3, [r7, #20]
10048924:	69da      	ldr	r2, [r3, #28]
10048926:	697b      	ldr	r3, [r7, #20]
10048928:	621a      	str	r2, [r3, #32]
}
1004892a:	46c0      	nop			@ (mov r8, r8)
1004892c:	46bd      	mov	sp, r7
1004892e:	b008      	add	sp, #32
10048930:	bdb0      	pop	{r4, r5, r7, pc}
10048932:	46c0      	nop			@ (mov r8, r8)
10048934:	60001800 	.word	0x60001800
10048938:	00000635 	.word	0x00000635

1004893c <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004893c:	b5b0      	push	{r4, r5, r7, lr}
1004893e:	b08a      	sub	sp, #40	@ 0x28
10048940:	af00      	add	r7, sp, #0
10048942:	6078      	str	r0, [r7, #4]
10048944:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
10048946:	683b      	ldr	r3, [r7, #0]
10048948:	2200      	movs	r2, #0
1004894a:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004894c:	687b      	ldr	r3, [r7, #4]
1004894e:	7a9b      	ldrb	r3, [r3, #10]
10048950:	2b00      	cmp	r3, #0
10048952:	d100      	bne.n	10048956 <_check_radio_activity+0x1a>
10048954:	e070      	b.n	10048a38 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10048956:	4b3a      	ldr	r3, [pc, #232]	@ (10048a40 <_check_radio_activity+0x104>)
10048958:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004895a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004895c:	4938      	ldr	r1, [pc, #224]	@ (10048a40 <_check_radio_activity+0x104>)
1004895e:	6849      	ldr	r1, [r1, #4]
10048960:	000c      	movs	r4, r1
10048962:	2100      	movs	r1, #0
10048964:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
10048966:	1912      	adds	r2, r2, r4
10048968:	416b      	adcs	r3, r5
1004896a:	623a      	str	r2, [r7, #32]
1004896c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004896e:	f3ef 8310 	mrs	r3, PRIMASK
10048972:	60fb      	str	r3, [r7, #12]
  return(result);
10048974:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
10048976:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10048978:	b672      	cpsid	i
}
1004897a:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004897c:	f7ff fabe 	bl	10047efc <HAL_RADIO_TIMER_GetCurrentSysTime>
10048980:	0002      	movs	r2, r0
10048982:	000b      	movs	r3, r1
10048984:	613a      	str	r2, [r7, #16]
10048986:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
10048988:	687b      	ldr	r3, [r7, #4]
1004898a:	681a      	ldr	r2, [r3, #0]
1004898c:	685b      	ldr	r3, [r3, #4]
1004898e:	6a38      	ldr	r0, [r7, #32]
10048990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10048992:	24c8      	movs	r4, #200	@ 0xc8
10048994:	02a4      	lsls	r4, r4, #10
10048996:	2500      	movs	r5, #0
10048998:	1900      	adds	r0, r0, r4
1004899a:	4169      	adcs	r1, r5
1004899c:	4299      	cmp	r1, r3
1004899e:	d812      	bhi.n	100489c6 <_check_radio_activity+0x8a>
100489a0:	d101      	bne.n	100489a6 <_check_radio_activity+0x6a>
100489a2:	4290      	cmp	r0, r2
100489a4:	d80f      	bhi.n	100489c6 <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
100489a6:	6a3a      	ldr	r2, [r7, #32]
100489a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100489aa:	20b9      	movs	r0, #185	@ 0xb9
100489ac:	0040      	lsls	r0, r0, #1
100489ae:	2100      	movs	r1, #0
100489b0:	1812      	adds	r2, r2, r0
100489b2:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
100489b4:	6979      	ldr	r1, [r7, #20]
100489b6:	4299      	cmp	r1, r3
100489b8:	d805      	bhi.n	100489c6 <_check_radio_activity+0x8a>
100489ba:	6979      	ldr	r1, [r7, #20]
100489bc:	4299      	cmp	r1, r3
100489be:	d135      	bne.n	10048a2c <_check_radio_activity+0xf0>
100489c0:	6939      	ldr	r1, [r7, #16]
100489c2:	4291      	cmp	r1, r2
100489c4:	d932      	bls.n	10048a2c <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
100489c6:	687b      	ldr	r3, [r7, #4]
100489c8:	681a      	ldr	r2, [r3, #0]
100489ca:	685b      	ldr	r3, [r3, #4]
100489cc:	204c      	movs	r0, #76	@ 0x4c
100489ce:	4240      	negs	r0, r0
100489d0:	17c1      	asrs	r1, r0, #31
100489d2:	1880      	adds	r0, r0, r2
100489d4:	4159      	adcs	r1, r3
100489d6:	693a      	ldr	r2, [r7, #16]
100489d8:	697b      	ldr	r3, [r7, #20]
100489da:	240a      	movs	r4, #10
100489dc:	2500      	movs	r5, #0
100489de:	1912      	adds	r2, r2, r4
100489e0:	416b      	adcs	r3, r5
100489e2:	4299      	cmp	r1, r3
100489e4:	d802      	bhi.n	100489ec <_check_radio_activity+0xb0>
100489e6:	d11a      	bne.n	10048a1e <_check_radio_activity+0xe2>
100489e8:	4290      	cmp	r0, r2
100489ea:	d918      	bls.n	10048a1e <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
100489ec:	687b      	ldr	r3, [r7, #4]
100489ee:	681a      	ldr	r2, [r3, #0]
100489f0:	685b      	ldr	r3, [r3, #4]
100489f2:	0010      	movs	r0, r2
100489f4:	687b      	ldr	r3, [r7, #4]
100489f6:	7b19      	ldrb	r1, [r3, #12]
100489f8:	687b      	ldr	r3, [r7, #4]
100489fa:	7a1b      	ldrb	r3, [r3, #8]
100489fc:	001a      	movs	r2, r3
100489fe:	f000 f821 	bl	10048a44 <TIMER_SetRadioTimerValue>
10048a02:	0003      	movs	r3, r0
10048a04:	001a      	movs	r2, r3
10048a06:	683b      	ldr	r3, [r7, #0]
10048a08:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
10048a0a:	687b      	ldr	r3, [r7, #4]
10048a0c:	2200      	movs	r2, #0
10048a0e:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
10048a10:	687b      	ldr	r3, [r7, #4]
10048a12:	2201      	movs	r2, #1
10048a14:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
10048a16:	687b      	ldr	r3, [r7, #4]
10048a18:	2201      	movs	r2, #1
10048a1a:	72da      	strb	r2, [r3, #11]
10048a1c:	e006      	b.n	10048a2c <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
10048a1e:	4b08      	ldr	r3, [pc, #32]	@ (10048a40 <_check_radio_activity+0x104>)
10048a20:	2262      	movs	r2, #98	@ 0x62
10048a22:	2100      	movs	r1, #0
10048a24:	5499      	strb	r1, [r3, r2]
        *expired = 1;
10048a26:	683b      	ldr	r3, [r7, #0]
10048a28:	2201      	movs	r2, #1
10048a2a:	701a      	strb	r2, [r3, #0]
10048a2c:	69fb      	ldr	r3, [r7, #28]
10048a2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10048a30:	68bb      	ldr	r3, [r7, #8]
10048a32:	f383 8810 	msr	PRIMASK, r3
}
10048a36:	46c0      	nop			@ (mov r8, r8)
#endif
    }
    ATOMIC_SECTION_END();
    
  }
}
10048a38:	46c0      	nop			@ (mov r8, r8)
10048a3a:	46bd      	mov	sp, r7
10048a3c:	b00a      	add	sp, #40	@ 0x28
10048a3e:	bdb0      	pop	{r4, r5, r7, pc}
10048a40:	200009f0 	.word	0x200009f0

10048a44 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
10048a44:	b580      	push	{r7, lr}
10048a46:	b08a      	sub	sp, #40	@ 0x28
10048a48:	af00      	add	r7, sp, #0
10048a4a:	6078      	str	r0, [r7, #4]
10048a4c:	0008      	movs	r0, r1
10048a4e:	0011      	movs	r1, r2
10048a50:	1cfb      	adds	r3, r7, #3
10048a52:	1c02      	adds	r2, r0, #0
10048a54:	701a      	strb	r2, [r3, #0]
10048a56:	1cbb      	adds	r3, r7, #2
10048a58:	1c0a      	adds	r2, r1, #0
10048a5a:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
10048a5c:	1cfb      	adds	r3, r7, #3
10048a5e:	781b      	ldrb	r3, [r3, #0]
10048a60:	2b00      	cmp	r3, #0
10048a62:	d015      	beq.n	10048a90 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
10048a64:	1cbb      	adds	r3, r7, #2
10048a66:	781b      	ldrb	r3, [r3, #0]
10048a68:	2b00      	cmp	r3, #0
10048a6a:	d008      	beq.n	10048a7e <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
10048a6c:	4b67      	ldr	r3, [pc, #412]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048a6e:	2238      	movs	r2, #56	@ 0x38
10048a70:	5c9b      	ldrb	r3, [r3, r2]
10048a72:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10048a74:	4b65      	ldr	r3, [pc, #404]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048a76:	223c      	movs	r2, #60	@ 0x3c
10048a78:	5c9b      	ldrb	r3, [r3, r2]
10048a7a:	61fb      	str	r3, [r7, #28]
10048a7c:	e01d      	b.n	10048aba <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
10048a7e:	4b63      	ldr	r3, [pc, #396]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048a80:	2239      	movs	r2, #57	@ 0x39
10048a82:	5c9b      	ldrb	r3, [r3, r2]
10048a84:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10048a86:	4b61      	ldr	r3, [pc, #388]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048a88:	223c      	movs	r2, #60	@ 0x3c
10048a8a:	5c9b      	ldrb	r3, [r3, r2]
10048a8c:	61fb      	str	r3, [r7, #28]
10048a8e:	e014      	b.n	10048aba <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
10048a90:	1cbb      	adds	r3, r7, #2
10048a92:	781b      	ldrb	r3, [r3, #0]
10048a94:	2b00      	cmp	r3, #0
10048a96:	d008      	beq.n	10048aaa <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
10048a98:	4b5c      	ldr	r3, [pc, #368]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048a9a:	223a      	movs	r2, #58	@ 0x3a
10048a9c:	5c9b      	ldrb	r3, [r3, r2]
10048a9e:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10048aa0:	4b5a      	ldr	r3, [pc, #360]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048aa2:	223c      	movs	r2, #60	@ 0x3c
10048aa4:	5c9b      	ldrb	r3, [r3, r2]
10048aa6:	61fb      	str	r3, [r7, #28]
10048aa8:	e007      	b.n	10048aba <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
10048aaa:	4b58      	ldr	r3, [pc, #352]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048aac:	223b      	movs	r2, #59	@ 0x3b
10048aae:	5c9b      	ldrb	r3, [r3, r2]
10048ab0:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
10048ab2:	4b56      	ldr	r3, [pc, #344]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048ab4:	223c      	movs	r2, #60	@ 0x3c
10048ab6:	5c9b      	ldrb	r3, [r3, r2]
10048ab8:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
10048aba:	230c      	movs	r3, #12
10048abc:	18fa      	adds	r2, r7, r3
10048abe:	4b53      	ldr	r3, [pc, #332]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048ac0:	0011      	movs	r1, r2
10048ac2:	0018      	movs	r0, r3
10048ac4:	f7ff fce4 	bl	10048490 <_get_system_time_and_machine>
10048ac8:	0002      	movs	r2, r0
10048aca:	000b      	movs	r3, r1
10048acc:	687b      	ldr	r3, [r7, #4]
10048ace:	1a9b      	subs	r3, r3, r2
10048ad0:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
10048ad2:	4b4e      	ldr	r3, [pc, #312]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048ad4:	699b      	ldr	r3, [r3, #24]
10048ad6:	0019      	movs	r1, r3
10048ad8:	4a4d      	ldr	r2, [pc, #308]	@ (10048c10 <TIMER_SetRadioTimerValue+0x1cc>)
10048ada:	697b      	ldr	r3, [r7, #20]
10048adc:	0018      	movs	r0, r3
10048ade:	f7f7 faef 	bl	100400c0 <blue_unit_conversion>
10048ae2:	0003      	movs	r3, r0
10048ae4:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
10048ae6:	4b49      	ldr	r3, [pc, #292]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048ae8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
10048aea:	69fb      	ldr	r3, [r7, #28]
10048aec:	18d3      	adds	r3, r2, r3
10048aee:	33c8      	adds	r3, #200	@ 0xc8
10048af0:	697a      	ldr	r2, [r7, #20]
10048af2:	429a      	cmp	r2, r3
10048af4:	d92f      	bls.n	10048b56 <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
10048af6:	4b47      	ldr	r3, [pc, #284]	@ (10048c14 <TIMER_SetRadioTimerValue+0x1d0>)
10048af8:	795b      	ldrb	r3, [r3, #5]
10048afa:	b2db      	uxtb	r3, r3
10048afc:	001a      	movs	r2, r3
10048afe:	693b      	ldr	r3, [r7, #16]
10048b00:	1a9a      	subs	r2, r3, r2
10048b02:	6a3b      	ldr	r3, [r7, #32]
10048b04:	1ad3      	subs	r3, r2, r3
10048b06:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
10048b08:	68fa      	ldr	r2, [r7, #12]
10048b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b0c:	18d3      	adds	r3, r2, r3
10048b0e:	4a42      	ldr	r2, [pc, #264]	@ (10048c18 <TIMER_SetRadioTimerValue+0x1d4>)
10048b10:	0019      	movs	r1, r3
10048b12:	0010      	movs	r0, r2
10048b14:	f7fe fcf9 	bl	1004750a <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
10048b18:	4b3f      	ldr	r3, [pc, #252]	@ (10048c18 <TIMER_SetRadioTimerValue+0x1d4>)
10048b1a:	2100      	movs	r1, #0
10048b1c:	0018      	movs	r0, r3
10048b1e:	f7fe fd2f 	bl	10047580 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10048b22:	23c0      	movs	r3, #192	@ 0xc0
10048b24:	05db      	lsls	r3, r3, #23
10048b26:	0018      	movs	r0, r3
10048b28:	f7fe fc36 	bl	10047398 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10048b2c:	23c0      	movs	r3, #192	@ 0xc0
10048b2e:	05db      	lsls	r3, r3, #23
10048b30:	0018      	movs	r0, r3
10048b32:	f7fe fc51 	bl	100473d8 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
10048b36:	4b38      	ldr	r3, [pc, #224]	@ (10048c18 <TIMER_SetRadioTimerValue+0x1d4>)
10048b38:	0018      	movs	r0, r3
10048b3a:	f7fe fc83 	bl	10047444 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
10048b3e:	4b36      	ldr	r3, [pc, #216]	@ (10048c18 <TIMER_SetRadioTimerValue+0x1d4>)
10048b40:	0018      	movs	r0, r3
10048b42:	f7fe fd0e 	bl	10047562 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
10048b46:	4b33      	ldr	r3, [pc, #204]	@ (10048c14 <TIMER_SetRadioTimerValue+0x1d0>)
10048b48:	795b      	ldrb	r3, [r3, #5]
10048b4a:	b2db      	uxtb	r3, r3
10048b4c:	001a      	movs	r2, r3
10048b4e:	6a3b      	ldr	r3, [r7, #32]
10048b50:	189b      	adds	r3, r3, r2
10048b52:	623b      	str	r3, [r7, #32]
10048b54:	e021      	b.n	10048b9a <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
10048b56:	4b2d      	ldr	r3, [pc, #180]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048b58:	223d      	movs	r2, #61	@ 0x3d
10048b5a:	5c9b      	ldrb	r3, [r3, r2]
10048b5c:	001a      	movs	r2, r3
10048b5e:	693b      	ldr	r3, [r7, #16]
10048b60:	1a9a      	subs	r2, r3, r2
10048b62:	6a3b      	ldr	r3, [r7, #32]
10048b64:	1ad3      	subs	r3, r2, r3
10048b66:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
10048b68:	68fa      	ldr	r2, [r7, #12]
10048b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10048b6c:	18d2      	adds	r2, r2, r3
10048b6e:	23c0      	movs	r3, #192	@ 0xc0
10048b70:	05db      	lsls	r3, r3, #23
10048b72:	0011      	movs	r1, r2
10048b74:	0018      	movs	r0, r3
10048b76:	f7fe fc4f 	bl	10047418 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10048b7a:	4b27      	ldr	r3, [pc, #156]	@ (10048c18 <TIMER_SetRadioTimerValue+0x1d4>)
10048b7c:	0018      	movs	r0, r3
10048b7e:	f7fe fc71 	bl	10047464 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
10048b82:	23c0      	movs	r3, #192	@ 0xc0
10048b84:	05db      	lsls	r3, r3, #23
10048b86:	0018      	movs	r0, r3
10048b88:	f7fe fbf6 	bl	10047378 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
10048b8c:	4b1f      	ldr	r3, [pc, #124]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048b8e:	223d      	movs	r2, #61	@ 0x3d
10048b90:	5c9b      	ldrb	r3, [r3, r2]
10048b92:	001a      	movs	r2, r3
10048b94:	6a3b      	ldr	r3, [r7, #32]
10048b96:	189b      	adds	r3, r3, r2
10048b98:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
10048b9a:	68fa      	ldr	r2, [r7, #12]
10048b9c:	693b      	ldr	r3, [r7, #16]
10048b9e:	18d2      	adds	r2, r2, r3
10048ba0:	4b1a      	ldr	r3, [pc, #104]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048ba2:	2188      	movs	r1, #136	@ 0x88
10048ba4:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
10048ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10048ba8:	6a3b      	ldr	r3, [r7, #32]
10048baa:	18d2      	adds	r2, r2, r3
10048bac:	6a3b      	ldr	r3, [r7, #32]
10048bae:	3305      	adds	r3, #5
10048bb0:	429a      	cmp	r2, r3
10048bb2:	d212      	bcs.n	10048bda <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
10048bb4:	23c0      	movs	r3, #192	@ 0xc0
10048bb6:	05db      	lsls	r3, r3, #23
10048bb8:	0018      	movs	r0, r3
10048bba:	f7fe fbed 	bl	10047398 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
10048bbe:	23c0      	movs	r3, #192	@ 0xc0
10048bc0:	05db      	lsls	r3, r3, #23
10048bc2:	0018      	movs	r0, r3
10048bc4:	f7fe fc08 	bl	100473d8 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
10048bc8:	4b13      	ldr	r3, [pc, #76]	@ (10048c18 <TIMER_SetRadioTimerValue+0x1d4>)
10048bca:	0018      	movs	r0, r3
10048bcc:	f7fe fc4a 	bl	10047464 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
10048bd0:	231b      	movs	r3, #27
10048bd2:	18fb      	adds	r3, r7, r3
10048bd4:	2201      	movs	r2, #1
10048bd6:	701a      	strb	r2, [r3, #0]
10048bd8:	e010      	b.n	10048bfc <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10048bda:	4b0c      	ldr	r3, [pc, #48]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048bdc:	69db      	ldr	r3, [r3, #28]
10048bde:	0019      	movs	r1, r3
10048be0:	4a0e      	ldr	r2, [pc, #56]	@ (10048c1c <TIMER_SetRadioTimerValue+0x1d8>)
10048be2:	6a3b      	ldr	r3, [r7, #32]
10048be4:	0018      	movs	r0, r3
10048be6:	f7f7 fa6b 	bl	100400c0 <blue_unit_conversion>
10048bea:	0003      	movs	r3, r0
10048bec:	b2d9      	uxtb	r1, r3
10048bee:	4b07      	ldr	r3, [pc, #28]	@ (10048c0c <TIMER_SetRadioTimerValue+0x1c8>)
10048bf0:	2284      	movs	r2, #132	@ 0x84
10048bf2:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
10048bf4:	231b      	movs	r3, #27
10048bf6:	18fb      	adds	r3, r7, r3
10048bf8:	2200      	movs	r2, #0
10048bfa:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
10048bfc:	231b      	movs	r3, #27
10048bfe:	18fb      	adds	r3, r7, r3
10048c00:	781b      	ldrb	r3, [r3, #0]
}
10048c02:	0018      	movs	r0, r3
10048c04:	46bd      	mov	sp, r7
10048c06:	b00a      	add	sp, #40	@ 0x28
10048c08:	bd80      	pop	{r7, pc}
10048c0a:	46c0      	nop			@ (mov r8, r8)
10048c0c:	200009f0 	.word	0x200009f0
10048c10:	00000326 	.word	0x00000326
10048c14:	200000c0 	.word	0x200000c0
10048c18:	60001800 	.word	0x60001800
10048c1c:	00000635 	.word	0x00000635

10048c20 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
10048c20:	b5b0      	push	{r4, r5, r7, lr}
10048c22:	b084      	sub	sp, #16
10048c24:	af00      	add	r7, sp, #0
10048c26:	6078      	str	r0, [r7, #4]
10048c28:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
10048c2a:	2308      	movs	r3, #8
10048c2c:	18fa      	adds	r2, r7, r3
10048c2e:	4b12      	ldr	r3, [pc, #72]	@ (10048c78 <TIMER_GetPastSysTime+0x58>)
10048c30:	0011      	movs	r1, r2
10048c32:	0018      	movs	r0, r3
10048c34:	f7ff fc2c 	bl	10048490 <_get_system_time_and_machine>
10048c38:	0002      	movs	r2, r0
10048c3a:	000b      	movs	r3, r1
10048c3c:	6839      	ldr	r1, [r7, #0]
10048c3e:	600a      	str	r2, [r1, #0]
10048c40:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
10048c42:	68ba      	ldr	r2, [r7, #8]
10048c44:	687b      	ldr	r3, [r7, #4]
10048c46:	1ad0      	subs	r0, r2, r3
10048c48:	4b0b      	ldr	r3, [pc, #44]	@ (10048c78 <TIMER_GetPastSysTime+0x58>)
10048c4a:	69db      	ldr	r3, [r3, #28]
10048c4c:	0019      	movs	r1, r3
10048c4e:	4b0b      	ldr	r3, [pc, #44]	@ (10048c7c <TIMER_GetPastSysTime+0x5c>)
10048c50:	001a      	movs	r2, r3
10048c52:	f7f7 fa35 	bl	100400c0 <blue_unit_conversion>
10048c56:	0003      	movs	r3, r0
10048c58:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
10048c5a:	683b      	ldr	r3, [r7, #0]
10048c5c:	681a      	ldr	r2, [r3, #0]
10048c5e:	685b      	ldr	r3, [r3, #4]
10048c60:	68f9      	ldr	r1, [r7, #12]
10048c62:	000c      	movs	r4, r1
10048c64:	2100      	movs	r1, #0
10048c66:	000d      	movs	r5, r1
10048c68:	1b12      	subs	r2, r2, r4
10048c6a:	41ab      	sbcs	r3, r5
}
10048c6c:	0010      	movs	r0, r2
10048c6e:	0019      	movs	r1, r3
10048c70:	46bd      	mov	sp, r7
10048c72:	b004      	add	sp, #16
10048c74:	bdb0      	pop	{r4, r5, r7, pc}
10048c76:	46c0      	nop			@ (mov r8, r8)
10048c78:	200009f0 	.word	0x200009f0
10048c7c:	00000635 	.word	0x00000635

10048c80 <TIMER_SleepCheck>:
  * @brief  Return the consensus of the Virtual timer management to go in sleep.
  * @retval TRUE if all vtimers have been served and the calibration procedure has already finished.
  * @retval FALSE if the vtimer Tick is still busy.
  */
static bool TIMER_SleepCheck(void)
{
10048c80:	b580      	push	{r7, lr}
10048c82:	af00      	add	r7, sp, #0
  return ((RADIO_TIMER_Context.expired_count == RADIO_TIMER_Context.served_count) && (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE));
10048c84:	4b0c      	ldr	r3, [pc, #48]	@ (10048cb8 <TIMER_SleepCheck+0x38>)
10048c86:	2291      	movs	r2, #145	@ 0x91
10048c88:	5c9a      	ldrb	r2, [r3, r2]
10048c8a:	4b0b      	ldr	r3, [pc, #44]	@ (10048cb8 <TIMER_SleepCheck+0x38>)
10048c8c:	2192      	movs	r1, #146	@ 0x92
10048c8e:	5c5b      	ldrb	r3, [r3, r1]
10048c90:	429a      	cmp	r2, r3
10048c92:	d108      	bne.n	10048ca6 <TIMER_SleepCheck+0x26>
10048c94:	4b08      	ldr	r3, [pc, #32]	@ (10048cb8 <TIMER_SleepCheck+0x38>)
10048c96:	7a1b      	ldrb	r3, [r3, #8]
10048c98:	2201      	movs	r2, #1
10048c9a:	4053      	eors	r3, r2
10048c9c:	b2db      	uxtb	r3, r3
10048c9e:	2b00      	cmp	r3, #0
10048ca0:	d001      	beq.n	10048ca6 <TIMER_SleepCheck+0x26>
10048ca2:	2301      	movs	r3, #1
10048ca4:	e000      	b.n	10048ca8 <TIMER_SleepCheck+0x28>
10048ca6:	2300      	movs	r3, #0
10048ca8:	1c1a      	adds	r2, r3, #0
10048caa:	2301      	movs	r3, #1
10048cac:	4013      	ands	r3, r2
10048cae:	b2db      	uxtb	r3, r3
}
10048cb0:	0018      	movs	r0, r3
10048cb2:	46bd      	mov	sp, r7
10048cb4:	bd80      	pop	{r7, pc}
10048cb6:	46c0      	nop			@ (mov r8, r8)
10048cb8:	200009f0 	.word	0x200009f0

10048cbc <TIMER_GetRadioTimerValue>:
  * @retval 1 if Timer1 has been programmed.
  * @retval 2 if Timer2 has been programmed.
  * @retval 3 if Wakeup Timer has been programmed.
  */
static uint8_t TIMER_GetRadioTimerValue(uint32_t *time)
{
10048cbc:	b580      	push	{r7, lr}
10048cbe:	b082      	sub	sp, #8
10048cc0:	af00      	add	r7, sp, #0
10048cc2:	6078      	str	r0, [r7, #4]
  if (LL_RADIO_TIMER_IsEnabledBLEWakeupTimer(WAKEUP))
10048cc4:	4b1a      	ldr	r3, [pc, #104]	@ (10048d30 <TIMER_GetRadioTimerValue+0x74>)
10048cc6:	0018      	movs	r0, r3
10048cc8:	f7fe fbdc 	bl	10047484 <LL_RADIO_TIMER_IsEnabledBLEWakeupTimer>
10048ccc:	1e03      	subs	r3, r0, #0
10048cce:	d008      	beq.n	10048ce2 <TIMER_GetRadioTimerValue+0x26>
  {
    *time = LL_RADIO_TIMER_GetBLEWakeupTime(WAKEUP);
10048cd0:	4b17      	ldr	r3, [pc, #92]	@ (10048d30 <TIMER_GetRadioTimerValue+0x74>)
10048cd2:	0018      	movs	r0, r3
10048cd4:	f7fe fc25 	bl	10047522 <LL_RADIO_TIMER_GetBLEWakeupTime>
10048cd8:	0002      	movs	r2, r0
10048cda:	687b      	ldr	r3, [r7, #4]
10048cdc:	601a      	str	r2, [r3, #0]
    return WAKEUP_RADIO_TIMER_BUSY;
10048cde:	2303      	movs	r3, #3
10048ce0:	e022      	b.n	10048d28 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer1(BLUE))
10048ce2:	23c0      	movs	r3, #192	@ 0xc0
10048ce4:	05db      	lsls	r3, r3, #23
10048ce6:	0018      	movs	r0, r3
10048ce8:	f7fe fb65 	bl	100473b6 <LL_RADIO_TIMER_IsEnabledTimer1>
10048cec:	1e03      	subs	r3, r0, #0
10048cee:	d009      	beq.n	10048d04 <TIMER_GetRadioTimerValue+0x48>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10048cf0:	23c0      	movs	r3, #192	@ 0xc0
10048cf2:	05db      	lsls	r3, r3, #23
10048cf4:	0018      	movs	r0, r3
10048cf6:	f7fe fb9b 	bl	10047430 <LL_RADIO_TIMER_GetTimeout>
10048cfa:	0002      	movs	r2, r0
10048cfc:	687b      	ldr	r3, [r7, #4]
10048cfe:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER1_BUSY;
10048d00:	2301      	movs	r3, #1
10048d02:	e011      	b.n	10048d28 <TIMER_GetRadioTimerValue+0x6c>
  }
  else if (LL_RADIO_TIMER_IsEnabledTimer2(BLUE))
10048d04:	23c0      	movs	r3, #192	@ 0xc0
10048d06:	05db      	lsls	r3, r3, #23
10048d08:	0018      	movs	r0, r3
10048d0a:	f7fe fb74 	bl	100473f6 <LL_RADIO_TIMER_IsEnabledTimer2>
10048d0e:	1e03      	subs	r3, r0, #0
10048d10:	d009      	beq.n	10048d26 <TIMER_GetRadioTimerValue+0x6a>
  {
    *time = LL_RADIO_TIMER_GetTimeout(BLUE);
10048d12:	23c0      	movs	r3, #192	@ 0xc0
10048d14:	05db      	lsls	r3, r3, #23
10048d16:	0018      	movs	r0, r3
10048d18:	f7fe fb8a 	bl	10047430 <LL_RADIO_TIMER_GetTimeout>
10048d1c:	0002      	movs	r2, r0
10048d1e:	687b      	ldr	r3, [r7, #4]
10048d20:	601a      	str	r2, [r3, #0]
    return RADIO_TIMER2_BUSY;
10048d22:	2302      	movs	r3, #2
10048d24:	e000      	b.n	10048d28 <TIMER_GetRadioTimerValue+0x6c>
  }
  else
  {
    return 0;
10048d26:	2300      	movs	r3, #0
  }
}
10048d28:	0018      	movs	r0, r3
10048d2a:	46bd      	mov	sp, r7
10048d2c:	b002      	add	sp, #8
10048d2e:	bd80      	pop	{r7, pc}
10048d30:	60001800 	.word	0x60001800

10048d34 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10048d34:	b580      	push	{r7, lr}
10048d36:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
10048d38:	f7ff f964 	bl	10048004 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
10048d3c:	f7f8 fc74 	bl	10041628 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
10048d40:	46c0      	nop			@ (mov r8, r8)
10048d42:	46bd      	mov	sp, r7
10048d44:	bd80      	pop	{r7, pc}

10048d46 <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
10048d46:	b580      	push	{r7, lr}
10048d48:	b082      	sub	sp, #8
10048d4a:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
10048d4c:	2300      	movs	r3, #0
10048d4e:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
10048d50:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
10048d52:	23c0      	movs	r3, #192	@ 0xc0
10048d54:	05db      	lsls	r3, r3, #23
10048d56:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
10048d58:	23c0      	movs	r3, #192	@ 0xc0
10048d5a:	05db      	lsls	r3, r3, #23
10048d5c:	2101      	movs	r1, #1
10048d5e:	430a      	orrs	r2, r1
10048d60:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
10048d62:	23c0      	movs	r3, #192	@ 0xc0
10048d64:	05db      	lsls	r3, r3, #23
10048d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10048d68:	607b      	str	r3, [r7, #4]
}
10048d6a:	46c0      	nop			@ (mov r8, r8)
10048d6c:	46bd      	mov	sp, r7
10048d6e:	b002      	add	sp, #8
10048d70:	bd80      	pop	{r7, pc}
	...

10048d74 <LL_PWR_SetNoPullB>:
{
10048d74:	b580      	push	{r7, lr}
10048d76:	b082      	sub	sp, #8
10048d78:	af00      	add	r7, sp, #0
10048d7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
10048d7c:	4b08      	ldr	r3, [pc, #32]	@ (10048da0 <LL_PWR_SetNoPullB+0x2c>)
10048d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10048d80:	687b      	ldr	r3, [r7, #4]
10048d82:	43d9      	mvns	r1, r3
10048d84:	4b06      	ldr	r3, [pc, #24]	@ (10048da0 <LL_PWR_SetNoPullB+0x2c>)
10048d86:	400a      	ands	r2, r1
10048d88:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
10048d8a:	4b05      	ldr	r3, [pc, #20]	@ (10048da0 <LL_PWR_SetNoPullB+0x2c>)
10048d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10048d8e:	687b      	ldr	r3, [r7, #4]
10048d90:	43d9      	mvns	r1, r3
10048d92:	4b03      	ldr	r3, [pc, #12]	@ (10048da0 <LL_PWR_SetNoPullB+0x2c>)
10048d94:	400a      	ands	r2, r1
10048d96:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10048d98:	46c0      	nop			@ (mov r8, r8)
10048d9a:	46bd      	mov	sp, r7
10048d9c:	b002      	add	sp, #8
10048d9e:	bd80      	pop	{r7, pc}
10048da0:	48500000 	.word	0x48500000

10048da4 <LL_RCC_HSE_Enable>:
{
10048da4:	b580      	push	{r7, lr}
10048da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
10048da8:	4b04      	ldr	r3, [pc, #16]	@ (10048dbc <LL_RCC_HSE_Enable+0x18>)
10048daa:	681a      	ldr	r2, [r3, #0]
10048dac:	4b03      	ldr	r3, [pc, #12]	@ (10048dbc <LL_RCC_HSE_Enable+0x18>)
10048dae:	2180      	movs	r1, #128	@ 0x80
10048db0:	0249      	lsls	r1, r1, #9
10048db2:	430a      	orrs	r2, r1
10048db4:	601a      	str	r2, [r3, #0]
}
10048db6:	46c0      	nop			@ (mov r8, r8)
10048db8:	46bd      	mov	sp, r7
10048dba:	bd80      	pop	{r7, pc}
10048dbc:	48400000 	.word	0x48400000

10048dc0 <LL_RCC_HSE_Disable>:
{
10048dc0:	b580      	push	{r7, lr}
10048dc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
10048dc4:	4b04      	ldr	r3, [pc, #16]	@ (10048dd8 <LL_RCC_HSE_Disable+0x18>)
10048dc6:	681a      	ldr	r2, [r3, #0]
10048dc8:	4b03      	ldr	r3, [pc, #12]	@ (10048dd8 <LL_RCC_HSE_Disable+0x18>)
10048dca:	4904      	ldr	r1, [pc, #16]	@ (10048ddc <LL_RCC_HSE_Disable+0x1c>)
10048dcc:	400a      	ands	r2, r1
10048dce:	601a      	str	r2, [r3, #0]
}
10048dd0:	46c0      	nop			@ (mov r8, r8)
10048dd2:	46bd      	mov	sp, r7
10048dd4:	bd80      	pop	{r7, pc}
10048dd6:	46c0      	nop			@ (mov r8, r8)
10048dd8:	48400000 	.word	0x48400000
10048ddc:	fffeffff 	.word	0xfffeffff

10048de0 <LL_RCC_HSE_IsReady>:
{
10048de0:	b580      	push	{r7, lr}
10048de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10048de4:	4b07      	ldr	r3, [pc, #28]	@ (10048e04 <LL_RCC_HSE_IsReady+0x24>)
10048de6:	681a      	ldr	r2, [r3, #0]
10048de8:	2380      	movs	r3, #128	@ 0x80
10048dea:	029b      	lsls	r3, r3, #10
10048dec:	401a      	ands	r2, r3
10048dee:	2380      	movs	r3, #128	@ 0x80
10048df0:	029b      	lsls	r3, r3, #10
10048df2:	429a      	cmp	r2, r3
10048df4:	d101      	bne.n	10048dfa <LL_RCC_HSE_IsReady+0x1a>
10048df6:	2301      	movs	r3, #1
10048df8:	e000      	b.n	10048dfc <LL_RCC_HSE_IsReady+0x1c>
10048dfa:	2300      	movs	r3, #0
}
10048dfc:	0018      	movs	r0, r3
10048dfe:	46bd      	mov	sp, r7
10048e00:	bd80      	pop	{r7, pc}
10048e02:	46c0      	nop			@ (mov r8, r8)
10048e04:	48400000 	.word	0x48400000

10048e08 <LL_RCC_HSE_SetCapacitorTuning>:
{
10048e08:	b580      	push	{r7, lr}
10048e0a:	b082      	sub	sp, #8
10048e0c:	af00      	add	r7, sp, #0
10048e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
10048e10:	4a0b      	ldr	r2, [pc, #44]	@ (10048e40 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048e12:	2398      	movs	r3, #152	@ 0x98
10048e14:	58d3      	ldr	r3, [r2, r3]
10048e16:	4a0b      	ldr	r2, [pc, #44]	@ (10048e44 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
10048e18:	401a      	ands	r2, r3
10048e1a:	687b      	ldr	r3, [r7, #4]
10048e1c:	021b      	lsls	r3, r3, #8
10048e1e:	4908      	ldr	r1, [pc, #32]	@ (10048e40 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048e20:	4313      	orrs	r3, r2
10048e22:	2298      	movs	r2, #152	@ 0x98
10048e24:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
10048e26:	4a06      	ldr	r2, [pc, #24]	@ (10048e40 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048e28:	2398      	movs	r3, #152	@ 0x98
10048e2a:	58d3      	ldr	r3, [r2, r3]
10048e2c:	4904      	ldr	r1, [pc, #16]	@ (10048e40 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
10048e2e:	2280      	movs	r2, #128	@ 0x80
10048e30:	4313      	orrs	r3, r2
10048e32:	2298      	movs	r2, #152	@ 0x98
10048e34:	508b      	str	r3, [r1, r2]
}
10048e36:	46c0      	nop			@ (mov r8, r8)
10048e38:	46bd      	mov	sp, r7
10048e3a:	b002      	add	sp, #8
10048e3c:	bd80      	pop	{r7, pc}
10048e3e:	46c0      	nop			@ (mov r8, r8)
10048e40:	48400000 	.word	0x48400000
10048e44:	ffffc0ff 	.word	0xffffc0ff

10048e48 <LL_RCC_HSE_SetCurrentControl>:
{
10048e48:	b580      	push	{r7, lr}
10048e4a:	b082      	sub	sp, #8
10048e4c:	af00      	add	r7, sp, #0
10048e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
10048e50:	4a07      	ldr	r2, [pc, #28]	@ (10048e70 <LL_RCC_HSE_SetCurrentControl+0x28>)
10048e52:	2398      	movs	r3, #152	@ 0x98
10048e54:	58d3      	ldr	r3, [r2, r3]
10048e56:	2270      	movs	r2, #112	@ 0x70
10048e58:	4393      	bics	r3, r2
10048e5a:	001a      	movs	r2, r3
10048e5c:	4904      	ldr	r1, [pc, #16]	@ (10048e70 <LL_RCC_HSE_SetCurrentControl+0x28>)
10048e5e:	687b      	ldr	r3, [r7, #4]
10048e60:	4313      	orrs	r3, r2
10048e62:	2298      	movs	r2, #152	@ 0x98
10048e64:	508b      	str	r3, [r1, r2]
}
10048e66:	46c0      	nop			@ (mov r8, r8)
10048e68:	46bd      	mov	sp, r7
10048e6a:	b002      	add	sp, #8
10048e6c:	bd80      	pop	{r7, pc}
10048e6e:	46c0      	nop			@ (mov r8, r8)
10048e70:	48400000 	.word	0x48400000

10048e74 <LL_RCC_HSI_Enable>:
{
10048e74:	b580      	push	{r7, lr}
10048e76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10048e78:	4b07      	ldr	r3, [pc, #28]	@ (10048e98 <LL_RCC_HSI_Enable+0x24>)
10048e7a:	689a      	ldr	r2, [r3, #8]
10048e7c:	4b06      	ldr	r3, [pc, #24]	@ (10048e98 <LL_RCC_HSI_Enable+0x24>)
10048e7e:	2104      	movs	r1, #4
10048e80:	438a      	bics	r2, r1
10048e82:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048e84:	4b04      	ldr	r3, [pc, #16]	@ (10048e98 <LL_RCC_HSI_Enable+0x24>)
10048e86:	689a      	ldr	r2, [r3, #8]
10048e88:	4b03      	ldr	r3, [pc, #12]	@ (10048e98 <LL_RCC_HSI_Enable+0x24>)
10048e8a:	2102      	movs	r1, #2
10048e8c:	438a      	bics	r2, r1
10048e8e:	609a      	str	r2, [r3, #8]
}
10048e90:	46c0      	nop			@ (mov r8, r8)
10048e92:	46bd      	mov	sp, r7
10048e94:	bd80      	pop	{r7, pc}
10048e96:	46c0      	nop			@ (mov r8, r8)
10048e98:	48400000 	.word	0x48400000

10048e9c <LL_RCC_HSI_Disable>:
{
10048e9c:	b580      	push	{r7, lr}
10048e9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048ea0:	4b07      	ldr	r3, [pc, #28]	@ (10048ec0 <LL_RCC_HSI_Disable+0x24>)
10048ea2:	689a      	ldr	r2, [r3, #8]
10048ea4:	4b06      	ldr	r3, [pc, #24]	@ (10048ec0 <LL_RCC_HSI_Disable+0x24>)
10048ea6:	2102      	movs	r1, #2
10048ea8:	430a      	orrs	r2, r1
10048eaa:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10048eac:	4b04      	ldr	r3, [pc, #16]	@ (10048ec0 <LL_RCC_HSI_Disable+0x24>)
10048eae:	689a      	ldr	r2, [r3, #8]
10048eb0:	4b03      	ldr	r3, [pc, #12]	@ (10048ec0 <LL_RCC_HSI_Disable+0x24>)
10048eb2:	2104      	movs	r1, #4
10048eb4:	430a      	orrs	r2, r1
10048eb6:	609a      	str	r2, [r3, #8]
}
10048eb8:	46c0      	nop			@ (mov r8, r8)
10048eba:	46bd      	mov	sp, r7
10048ebc:	bd80      	pop	{r7, pc}
10048ebe:	46c0      	nop			@ (mov r8, r8)
10048ec0:	48400000 	.word	0x48400000

10048ec4 <LL_RCC_HSI_IsReady>:
{
10048ec4:	b580      	push	{r7, lr}
10048ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
10048ec8:	4b07      	ldr	r3, [pc, #28]	@ (10048ee8 <LL_RCC_HSI_IsReady+0x24>)
10048eca:	681a      	ldr	r2, [r3, #0]
10048ecc:	2380      	movs	r3, #128	@ 0x80
10048ece:	00db      	lsls	r3, r3, #3
10048ed0:	401a      	ands	r2, r3
10048ed2:	2380      	movs	r3, #128	@ 0x80
10048ed4:	00db      	lsls	r3, r3, #3
10048ed6:	429a      	cmp	r2, r3
10048ed8:	d101      	bne.n	10048ede <LL_RCC_HSI_IsReady+0x1a>
10048eda:	2301      	movs	r3, #1
10048edc:	e000      	b.n	10048ee0 <LL_RCC_HSI_IsReady+0x1c>
10048ede:	2300      	movs	r3, #0
}
10048ee0:	0018      	movs	r0, r3
10048ee2:	46bd      	mov	sp, r7
10048ee4:	bd80      	pop	{r7, pc}
10048ee6:	46c0      	nop			@ (mov r8, r8)
10048ee8:	48400000 	.word	0x48400000

10048eec <LL_RCC_DIRECT_HSE_Enable>:
{
10048eec:	b580      	push	{r7, lr}
10048eee:	b082      	sub	sp, #8
10048ef0:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
10048ef2:	46c0      	nop			@ (mov r8, r8)
10048ef4:	4b0f      	ldr	r3, [pc, #60]	@ (10048f34 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048ef6:	681a      	ldr	r2, [r3, #0]
10048ef8:	2380      	movs	r3, #128	@ 0x80
10048efa:	029b      	lsls	r3, r3, #10
10048efc:	4013      	ands	r3, r2
10048efe:	d0f9      	beq.n	10048ef4 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
10048f00:	4b0c      	ldr	r3, [pc, #48]	@ (10048f34 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048f02:	689a      	ldr	r2, [r3, #8]
10048f04:	4b0b      	ldr	r3, [pc, #44]	@ (10048f34 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048f06:	2102      	movs	r1, #2
10048f08:	430a      	orrs	r2, r1
10048f0a:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
10048f0c:	2300      	movs	r3, #0
10048f0e:	607b      	str	r3, [r7, #4]
10048f10:	e003      	b.n	10048f1a <LL_RCC_DIRECT_HSE_Enable+0x2e>
    __asm("NOP");
10048f12:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
10048f14:	687b      	ldr	r3, [r7, #4]
10048f16:	3301      	adds	r3, #1
10048f18:	607b      	str	r3, [r7, #4]
10048f1a:	687b      	ldr	r3, [r7, #4]
10048f1c:	2b05      	cmp	r3, #5
10048f1e:	ddf8      	ble.n	10048f12 <LL_RCC_DIRECT_HSE_Enable+0x26>
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
10048f20:	4b04      	ldr	r3, [pc, #16]	@ (10048f34 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048f22:	689a      	ldr	r2, [r3, #8]
10048f24:	4b03      	ldr	r3, [pc, #12]	@ (10048f34 <LL_RCC_DIRECT_HSE_Enable+0x48>)
10048f26:	2104      	movs	r1, #4
10048f28:	430a      	orrs	r2, r1
10048f2a:	609a      	str	r2, [r3, #8]
}
10048f2c:	46c0      	nop			@ (mov r8, r8)
10048f2e:	46bd      	mov	sp, r7
10048f30:	b002      	add	sp, #8
10048f32:	bd80      	pop	{r7, pc}
10048f34:	48400000 	.word	0x48400000

10048f38 <LL_RCC_LSCO_SetSource>:
{
10048f38:	b580      	push	{r7, lr}
10048f3a:	b082      	sub	sp, #8
10048f3c:	af00      	add	r7, sp, #0
10048f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10048f40:	4b06      	ldr	r3, [pc, #24]	@ (10048f5c <LL_RCC_LSCO_SetSource+0x24>)
10048f42:	689b      	ldr	r3, [r3, #8]
10048f44:	4a06      	ldr	r2, [pc, #24]	@ (10048f60 <LL_RCC_LSCO_SetSource+0x28>)
10048f46:	4013      	ands	r3, r2
10048f48:	0019      	movs	r1, r3
10048f4a:	4b04      	ldr	r3, [pc, #16]	@ (10048f5c <LL_RCC_LSCO_SetSource+0x24>)
10048f4c:	687a      	ldr	r2, [r7, #4]
10048f4e:	430a      	orrs	r2, r1
10048f50:	609a      	str	r2, [r3, #8]
}
10048f52:	46c0      	nop			@ (mov r8, r8)
10048f54:	46bd      	mov	sp, r7
10048f56:	b002      	add	sp, #8
10048f58:	bd80      	pop	{r7, pc}
10048f5a:	46c0      	nop			@ (mov r8, r8)
10048f5c:	48400000 	.word	0x48400000
10048f60:	fffe7fff 	.word	0xfffe7fff

10048f64 <LL_RCC_LSE_Enable>:
{
10048f64:	b580      	push	{r7, lr}
10048f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
10048f68:	4b04      	ldr	r3, [pc, #16]	@ (10048f7c <LL_RCC_LSE_Enable+0x18>)
10048f6a:	681a      	ldr	r2, [r3, #0]
10048f6c:	4b03      	ldr	r3, [pc, #12]	@ (10048f7c <LL_RCC_LSE_Enable+0x18>)
10048f6e:	2110      	movs	r1, #16
10048f70:	430a      	orrs	r2, r1
10048f72:	601a      	str	r2, [r3, #0]
}
10048f74:	46c0      	nop			@ (mov r8, r8)
10048f76:	46bd      	mov	sp, r7
10048f78:	bd80      	pop	{r7, pc}
10048f7a:	46c0      	nop			@ (mov r8, r8)
10048f7c:	48400000 	.word	0x48400000

10048f80 <LL_RCC_LSE_Disable>:
{
10048f80:	b580      	push	{r7, lr}
10048f82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
10048f84:	4b04      	ldr	r3, [pc, #16]	@ (10048f98 <LL_RCC_LSE_Disable+0x18>)
10048f86:	681a      	ldr	r2, [r3, #0]
10048f88:	4b03      	ldr	r3, [pc, #12]	@ (10048f98 <LL_RCC_LSE_Disable+0x18>)
10048f8a:	2110      	movs	r1, #16
10048f8c:	438a      	bics	r2, r1
10048f8e:	601a      	str	r2, [r3, #0]
}
10048f90:	46c0      	nop			@ (mov r8, r8)
10048f92:	46bd      	mov	sp, r7
10048f94:	bd80      	pop	{r7, pc}
10048f96:	46c0      	nop			@ (mov r8, r8)
10048f98:	48400000 	.word	0x48400000

10048f9c <LL_RCC_LSE_IsReady>:
{
10048f9c:	b580      	push	{r7, lr}
10048f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
10048fa0:	4b05      	ldr	r3, [pc, #20]	@ (10048fb8 <LL_RCC_LSE_IsReady+0x1c>)
10048fa2:	681b      	ldr	r3, [r3, #0]
10048fa4:	2220      	movs	r2, #32
10048fa6:	4013      	ands	r3, r2
10048fa8:	2b20      	cmp	r3, #32
10048faa:	d101      	bne.n	10048fb0 <LL_RCC_LSE_IsReady+0x14>
10048fac:	2301      	movs	r3, #1
10048fae:	e000      	b.n	10048fb2 <LL_RCC_LSE_IsReady+0x16>
10048fb0:	2300      	movs	r3, #0
}
10048fb2:	0018      	movs	r0, r3
10048fb4:	46bd      	mov	sp, r7
10048fb6:	bd80      	pop	{r7, pc}
10048fb8:	48400000 	.word	0x48400000

10048fbc <LL_RCC_LSE_EnableBypass>:
{
10048fbc:	b580      	push	{r7, lr}
10048fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
10048fc0:	4b04      	ldr	r3, [pc, #16]	@ (10048fd4 <LL_RCC_LSE_EnableBypass+0x18>)
10048fc2:	681a      	ldr	r2, [r3, #0]
10048fc4:	4b03      	ldr	r3, [pc, #12]	@ (10048fd4 <LL_RCC_LSE_EnableBypass+0x18>)
10048fc6:	2140      	movs	r1, #64	@ 0x40
10048fc8:	430a      	orrs	r2, r1
10048fca:	601a      	str	r2, [r3, #0]
}
10048fcc:	46c0      	nop			@ (mov r8, r8)
10048fce:	46bd      	mov	sp, r7
10048fd0:	bd80      	pop	{r7, pc}
10048fd2:	46c0      	nop			@ (mov r8, r8)
10048fd4:	48400000 	.word	0x48400000

10048fd8 <LL_RCC_LSE_DisableBypass>:
{
10048fd8:	b580      	push	{r7, lr}
10048fda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
10048fdc:	4b04      	ldr	r3, [pc, #16]	@ (10048ff0 <LL_RCC_LSE_DisableBypass+0x18>)
10048fde:	681a      	ldr	r2, [r3, #0]
10048fe0:	4b03      	ldr	r3, [pc, #12]	@ (10048ff0 <LL_RCC_LSE_DisableBypass+0x18>)
10048fe2:	2140      	movs	r1, #64	@ 0x40
10048fe4:	438a      	bics	r2, r1
10048fe6:	601a      	str	r2, [r3, #0]
}
10048fe8:	46c0      	nop			@ (mov r8, r8)
10048fea:	46bd      	mov	sp, r7
10048fec:	bd80      	pop	{r7, pc}
10048fee:	46c0      	nop			@ (mov r8, r8)
10048ff0:	48400000 	.word	0x48400000

10048ff4 <LL_RCC_LSE_IsBypassEnabled>:
{
10048ff4:	b580      	push	{r7, lr}
10048ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
10048ff8:	4b05      	ldr	r3, [pc, #20]	@ (10049010 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
10048ffa:	681b      	ldr	r3, [r3, #0]
10048ffc:	2240      	movs	r2, #64	@ 0x40
10048ffe:	4013      	ands	r3, r2
10049000:	2b40      	cmp	r3, #64	@ 0x40
10049002:	d101      	bne.n	10049008 <LL_RCC_LSE_IsBypassEnabled+0x14>
10049004:	2301      	movs	r3, #1
10049006:	e000      	b.n	1004900a <LL_RCC_LSE_IsBypassEnabled+0x16>
10049008:	2300      	movs	r3, #0
}
1004900a:	0018      	movs	r0, r3
1004900c:	46bd      	mov	sp, r7
1004900e:	bd80      	pop	{r7, pc}
10049010:	48400000 	.word	0x48400000

10049014 <LL_RCC_LSE_SetDriveCapability>:
{
10049014:	b580      	push	{r7, lr}
10049016:	b082      	sub	sp, #8
10049018:	af00      	add	r7, sp, #0
1004901a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
1004901c:	4b06      	ldr	r3, [pc, #24]	@ (10049038 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004901e:	68db      	ldr	r3, [r3, #12]
10049020:	2260      	movs	r2, #96	@ 0x60
10049022:	4393      	bics	r3, r2
10049024:	0019      	movs	r1, r3
10049026:	4b04      	ldr	r3, [pc, #16]	@ (10049038 <LL_RCC_LSE_SetDriveCapability+0x24>)
10049028:	687a      	ldr	r2, [r7, #4]
1004902a:	430a      	orrs	r2, r1
1004902c:	60da      	str	r2, [r3, #12]
}
1004902e:	46c0      	nop			@ (mov r8, r8)
10049030:	46bd      	mov	sp, r7
10049032:	b002      	add	sp, #8
10049034:	bd80      	pop	{r7, pc}
10049036:	46c0      	nop			@ (mov r8, r8)
10049038:	48400000 	.word	0x48400000

1004903c <LL_RCC_LSI_Enable>:
{
1004903c:	b580      	push	{r7, lr}
1004903e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
10049040:	4b04      	ldr	r3, [pc, #16]	@ (10049054 <LL_RCC_LSI_Enable+0x18>)
10049042:	681a      	ldr	r2, [r3, #0]
10049044:	4b03      	ldr	r3, [pc, #12]	@ (10049054 <LL_RCC_LSI_Enable+0x18>)
10049046:	2104      	movs	r1, #4
10049048:	430a      	orrs	r2, r1
1004904a:	601a      	str	r2, [r3, #0]
}
1004904c:	46c0      	nop			@ (mov r8, r8)
1004904e:	46bd      	mov	sp, r7
10049050:	bd80      	pop	{r7, pc}
10049052:	46c0      	nop			@ (mov r8, r8)
10049054:	48400000 	.word	0x48400000

10049058 <LL_RCC_LSI_Disable>:
{
10049058:	b580      	push	{r7, lr}
1004905a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004905c:	4b04      	ldr	r3, [pc, #16]	@ (10049070 <LL_RCC_LSI_Disable+0x18>)
1004905e:	681a      	ldr	r2, [r3, #0]
10049060:	4b03      	ldr	r3, [pc, #12]	@ (10049070 <LL_RCC_LSI_Disable+0x18>)
10049062:	2104      	movs	r1, #4
10049064:	438a      	bics	r2, r1
10049066:	601a      	str	r2, [r3, #0]
}
10049068:	46c0      	nop			@ (mov r8, r8)
1004906a:	46bd      	mov	sp, r7
1004906c:	bd80      	pop	{r7, pc}
1004906e:	46c0      	nop			@ (mov r8, r8)
10049070:	48400000 	.word	0x48400000

10049074 <LL_RCC_LSI_IsReady>:
{
10049074:	b580      	push	{r7, lr}
10049076:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
10049078:	4b05      	ldr	r3, [pc, #20]	@ (10049090 <LL_RCC_LSI_IsReady+0x1c>)
1004907a:	681b      	ldr	r3, [r3, #0]
1004907c:	2208      	movs	r2, #8
1004907e:	4013      	ands	r3, r2
10049080:	2b08      	cmp	r3, #8
10049082:	d101      	bne.n	10049088 <LL_RCC_LSI_IsReady+0x14>
10049084:	2301      	movs	r3, #1
10049086:	e000      	b.n	1004908a <LL_RCC_LSI_IsReady+0x16>
10049088:	2300      	movs	r3, #0
}
1004908a:	0018      	movs	r0, r3
1004908c:	46bd      	mov	sp, r7
1004908e:	bd80      	pop	{r7, pc}
10049090:	48400000 	.word	0x48400000

10049094 <LL_RCC_RC64MPLL_Enable>:
{
10049094:	b580      	push	{r7, lr}
10049096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
10049098:	4b04      	ldr	r3, [pc, #16]	@ (100490ac <LL_RCC_RC64MPLL_Enable+0x18>)
1004909a:	681a      	ldr	r2, [r3, #0]
1004909c:	4b03      	ldr	r3, [pc, #12]	@ (100490ac <LL_RCC_RC64MPLL_Enable+0x18>)
1004909e:	2180      	movs	r1, #128	@ 0x80
100490a0:	0189      	lsls	r1, r1, #6
100490a2:	430a      	orrs	r2, r1
100490a4:	601a      	str	r2, [r3, #0]
}
100490a6:	46c0      	nop			@ (mov r8, r8)
100490a8:	46bd      	mov	sp, r7
100490aa:	bd80      	pop	{r7, pc}
100490ac:	48400000 	.word	0x48400000

100490b0 <LL_RCC_RC64MPLL_Disable>:
{
100490b0:	b580      	push	{r7, lr}
100490b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
100490b4:	4b04      	ldr	r3, [pc, #16]	@ (100490c8 <LL_RCC_RC64MPLL_Disable+0x18>)
100490b6:	681a      	ldr	r2, [r3, #0]
100490b8:	4b03      	ldr	r3, [pc, #12]	@ (100490c8 <LL_RCC_RC64MPLL_Disable+0x18>)
100490ba:	4904      	ldr	r1, [pc, #16]	@ (100490cc <LL_RCC_RC64MPLL_Disable+0x1c>)
100490bc:	400a      	ands	r2, r1
100490be:	601a      	str	r2, [r3, #0]
}
100490c0:	46c0      	nop			@ (mov r8, r8)
100490c2:	46bd      	mov	sp, r7
100490c4:	bd80      	pop	{r7, pc}
100490c6:	46c0      	nop			@ (mov r8, r8)
100490c8:	48400000 	.word	0x48400000
100490cc:	ffffdfff 	.word	0xffffdfff

100490d0 <LL_RCC_RC64MPLL_IsReady>:
{
100490d0:	b580      	push	{r7, lr}
100490d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
100490d4:	4b07      	ldr	r3, [pc, #28]	@ (100490f4 <LL_RCC_RC64MPLL_IsReady+0x24>)
100490d6:	681a      	ldr	r2, [r3, #0]
100490d8:	2380      	movs	r3, #128	@ 0x80
100490da:	01db      	lsls	r3, r3, #7
100490dc:	401a      	ands	r2, r3
100490de:	2380      	movs	r3, #128	@ 0x80
100490e0:	01db      	lsls	r3, r3, #7
100490e2:	429a      	cmp	r2, r3
100490e4:	d101      	bne.n	100490ea <LL_RCC_RC64MPLL_IsReady+0x1a>
100490e6:	2301      	movs	r3, #1
100490e8:	e000      	b.n	100490ec <LL_RCC_RC64MPLL_IsReady+0x1c>
100490ea:	2300      	movs	r3, #0
}
100490ec:	0018      	movs	r0, r3
100490ee:	46bd      	mov	sp, r7
100490f0:	bd80      	pop	{r7, pc}
100490f2:	46c0      	nop			@ (mov r8, r8)
100490f4:	48400000 	.word	0x48400000

100490f8 <LL_RCC_SetRC64MPLLPrescaler>:
{
100490f8:	b580      	push	{r7, lr}
100490fa:	b082      	sub	sp, #8
100490fc:	af00      	add	r7, sp, #0
100490fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
10049100:	4b06      	ldr	r3, [pc, #24]	@ (1004911c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
10049102:	689b      	ldr	r3, [r3, #8]
10049104:	22e0      	movs	r2, #224	@ 0xe0
10049106:	4393      	bics	r3, r2
10049108:	0019      	movs	r1, r3
1004910a:	4b04      	ldr	r3, [pc, #16]	@ (1004911c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004910c:	687a      	ldr	r2, [r7, #4]
1004910e:	430a      	orrs	r2, r1
10049110:	609a      	str	r2, [r3, #8]
}
10049112:	46c0      	nop			@ (mov r8, r8)
10049114:	46bd      	mov	sp, r7
10049116:	b002      	add	sp, #8
10049118:	bd80      	pop	{r7, pc}
1004911a:	46c0      	nop			@ (mov r8, r8)
1004911c:	48400000 	.word	0x48400000

10049120 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10049120:	b580      	push	{r7, lr}
10049122:	b084      	sub	sp, #16
10049124:	af00      	add	r7, sp, #0
10049126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10049128:	687b      	ldr	r3, [r7, #4]
1004912a:	2b00      	cmp	r3, #0
1004912c:	d101      	bne.n	10049132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
1004912e:	2301      	movs	r3, #1
10049130:	e13c      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10049132:	687b      	ldr	r3, [r7, #4]
10049134:	681b      	ldr	r3, [r3, #0]
10049136:	2210      	movs	r2, #16
10049138:	4013      	ands	r3, r2
1004913a:	d033      	beq.n	100491a4 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
1004913c:	687b      	ldr	r3, [r7, #4]
1004913e:	689b      	ldr	r3, [r3, #8]
10049140:	2b00      	cmp	r3, #0
10049142:	d102      	bne.n	1004914a <HAL_RCC_OscConfig+0x2a>
10049144:	f7ff fe96 	bl	10048e74 <LL_RCC_HSI_Enable>
10049148:	e001      	b.n	1004914e <HAL_RCC_OscConfig+0x2e>
1004914a:	f7ff fea7 	bl	10048e9c <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
1004914e:	687b      	ldr	r3, [r7, #4]
10049150:	689b      	ldr	r3, [r3, #8]
10049152:	2b04      	cmp	r3, #4
10049154:	d113      	bne.n	1004917e <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049156:	f7fc fcc9 	bl	10045aec <HAL_GetTick>
1004915a:	0003      	movs	r3, r0
1004915c:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
1004915e:	e008      	b.n	10049172 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10049160:	f7fc fcc4 	bl	10045aec <HAL_GetTick>
10049164:	0002      	movs	r2, r0
10049166:	68fb      	ldr	r3, [r7, #12]
10049168:	1ad3      	subs	r3, r2, r3
1004916a:	2b64      	cmp	r3, #100	@ 0x64
1004916c:	d901      	bls.n	10049172 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
1004916e:	2303      	movs	r3, #3
10049170:	e11c      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
10049172:	f7ff fea7 	bl	10048ec4 <LL_RCC_HSI_IsReady>
10049176:	0003      	movs	r3, r0
10049178:	2b01      	cmp	r3, #1
1004917a:	d0f1      	beq.n	10049160 <HAL_RCC_OscConfig+0x40>
1004917c:	e012      	b.n	100491a4 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004917e:	f7fc fcb5 	bl	10045aec <HAL_GetTick>
10049182:	0003      	movs	r3, r0
10049184:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
10049186:	e008      	b.n	1004919a <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10049188:	f7fc fcb0 	bl	10045aec <HAL_GetTick>
1004918c:	0002      	movs	r2, r0
1004918e:	68fb      	ldr	r3, [r7, #12]
10049190:	1ad3      	subs	r3, r2, r3
10049192:	2b64      	cmp	r3, #100	@ 0x64
10049194:	d901      	bls.n	1004919a <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
10049196:	2303      	movs	r3, #3
10049198:	e108      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
1004919a:	f7ff fe93 	bl	10048ec4 <LL_RCC_HSI_IsReady>
1004919e:	0003      	movs	r3, r0
100491a0:	2b01      	cmp	r3, #1
100491a2:	d1f1      	bne.n	10049188 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100491a4:	687b      	ldr	r3, [r7, #4]
100491a6:	681b      	ldr	r3, [r3, #0]
100491a8:	2201      	movs	r2, #1
100491aa:	4013      	ands	r3, r2
100491ac:	d039      	beq.n	10049222 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
100491ae:	2020      	movs	r0, #32
100491b0:	f7ff fe2a 	bl	10048e08 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
100491b4:	2030      	movs	r0, #48	@ 0x30
100491b6:	f7ff fe47 	bl	10048e48 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
100491ba:	687b      	ldr	r3, [r7, #4]
100491bc:	685a      	ldr	r2, [r3, #4]
100491be:	2380      	movs	r3, #128	@ 0x80
100491c0:	025b      	lsls	r3, r3, #9
100491c2:	429a      	cmp	r2, r3
100491c4:	d102      	bne.n	100491cc <HAL_RCC_OscConfig+0xac>
100491c6:	f7ff fded 	bl	10048da4 <LL_RCC_HSE_Enable>
100491ca:	e001      	b.n	100491d0 <HAL_RCC_OscConfig+0xb0>
100491cc:	f7ff fdf8 	bl	10048dc0 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
100491d0:	687b      	ldr	r3, [r7, #4]
100491d2:	685b      	ldr	r3, [r3, #4]
100491d4:	2b00      	cmp	r3, #0
100491d6:	d012      	beq.n	100491fe <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100491d8:	f7fc fc88 	bl	10045aec <HAL_GetTick>
100491dc:	0003      	movs	r3, r0
100491de:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
100491e0:	e008      	b.n	100491f4 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100491e2:	f7fc fc83 	bl	10045aec <HAL_GetTick>
100491e6:	0002      	movs	r2, r0
100491e8:	68fb      	ldr	r3, [r7, #12]
100491ea:	1ad3      	subs	r3, r2, r3
100491ec:	2b64      	cmp	r3, #100	@ 0x64
100491ee:	d901      	bls.n	100491f4 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
100491f0:	2303      	movs	r3, #3
100491f2:	e0db      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
100491f4:	f7ff fdf4 	bl	10048de0 <LL_RCC_HSE_IsReady>
100491f8:	1e03      	subs	r3, r0, #0
100491fa:	d0f2      	beq.n	100491e2 <HAL_RCC_OscConfig+0xc2>
100491fc:	e011      	b.n	10049222 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100491fe:	f7fc fc75 	bl	10045aec <HAL_GetTick>
10049202:	0003      	movs	r3, r0
10049204:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
10049206:	e008      	b.n	1004921a <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10049208:	f7fc fc70 	bl	10045aec <HAL_GetTick>
1004920c:	0002      	movs	r2, r0
1004920e:	68fb      	ldr	r3, [r7, #12]
10049210:	1ad3      	subs	r3, r2, r3
10049212:	2b64      	cmp	r3, #100	@ 0x64
10049214:	d901      	bls.n	1004921a <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
10049216:	2303      	movs	r3, #3
10049218:	e0c8      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
1004921a:	f7ff fde1 	bl	10048de0 <LL_RCC_HSE_IsReady>
1004921e:	1e03      	subs	r3, r0, #0
10049220:	d1f2      	bne.n	10049208 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10049222:	687b      	ldr	r3, [r7, #4]
10049224:	681b      	ldr	r3, [r3, #0]
10049226:	2204      	movs	r2, #4
10049228:	4013      	ands	r3, r2
1004922a:	d03a      	beq.n	100492a2 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
1004922c:	687b      	ldr	r3, [r7, #4]
1004922e:	691b      	ldr	r3, [r3, #16]
10049230:	2b00      	cmp	r3, #0
10049232:	d022      	beq.n	1004927a <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
10049234:	f7ff ff10 	bl	10049058 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
10049238:	46c0      	nop			@ (mov r8, r8)
1004923a:	f7ff ff1b 	bl	10049074 <LL_RCC_LSI_IsReady>
1004923e:	1e03      	subs	r3, r0, #0
10049240:	d1fb      	bne.n	1004923a <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
10049242:	f7ff fe9d 	bl	10048f80 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
10049246:	2380      	movs	r3, #128	@ 0x80
10049248:	025b      	lsls	r3, r3, #9
1004924a:	0018      	movs	r0, r3
1004924c:	f7ff fe74 	bl	10048f38 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
10049250:	f7ff fef4 	bl	1004903c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049254:	f7fc fc4a 	bl	10045aec <HAL_GetTick>
10049258:	0003      	movs	r3, r0
1004925a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004925c:	e008      	b.n	10049270 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004925e:	f7fc fc45 	bl	10045aec <HAL_GetTick>
10049262:	0002      	movs	r2, r0
10049264:	68fb      	ldr	r3, [r7, #12]
10049266:	1ad3      	subs	r3, r2, r3
10049268:	2b02      	cmp	r3, #2
1004926a:	d901      	bls.n	10049270 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
1004926c:	2303      	movs	r3, #3
1004926e:	e09d      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
10049270:	f7ff ff00 	bl	10049074 <LL_RCC_LSI_IsReady>
10049274:	1e03      	subs	r3, r0, #0
10049276:	d0f2      	beq.n	1004925e <HAL_RCC_OscConfig+0x13e>
10049278:	e013      	b.n	100492a2 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1004927a:	f7ff feed 	bl	10049058 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004927e:	f7fc fc35 	bl	10045aec <HAL_GetTick>
10049282:	0003      	movs	r3, r0
10049284:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
10049286:	e008      	b.n	1004929a <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10049288:	f7fc fc30 	bl	10045aec <HAL_GetTick>
1004928c:	0002      	movs	r2, r0
1004928e:	68fb      	ldr	r3, [r7, #12]
10049290:	1ad3      	subs	r3, r2, r3
10049292:	2b02      	cmp	r3, #2
10049294:	d901      	bls.n	1004929a <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
10049296:	2303      	movs	r3, #3
10049298:	e088      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004929a:	f7ff feeb 	bl	10049074 <LL_RCC_LSI_IsReady>
1004929e:	1e03      	subs	r3, r0, #0
100492a0:	d1f2      	bne.n	10049288 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100492a2:	687b      	ldr	r3, [r7, #4]
100492a4:	681b      	ldr	r3, [r3, #0]
100492a6:	2202      	movs	r2, #2
100492a8:	4013      	ands	r3, r2
100492aa:	d047      	beq.n	1004933c <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
100492ac:	f7ff fed4 	bl	10049058 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
100492b0:	f7ff fe66 	bl	10048f80 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
100492b4:	46c0      	nop			@ (mov r8, r8)
100492b6:	f7ff fe71 	bl	10048f9c <LL_RCC_LSE_IsReady>
100492ba:	1e03      	subs	r3, r0, #0
100492bc:	d1fb      	bne.n	100492b6 <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
100492be:	23c0      	movs	r3, #192	@ 0xc0
100492c0:	019b      	lsls	r3, r3, #6
100492c2:	0018      	movs	r0, r3
100492c4:	f7ff fd56 	bl	10048d74 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
100492c8:	2380      	movs	r3, #128	@ 0x80
100492ca:	021b      	lsls	r3, r3, #8
100492cc:	0018      	movs	r0, r3
100492ce:	f7ff fe33 	bl	10048f38 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
100492d2:	2020      	movs	r0, #32
100492d4:	f7ff fe9e 	bl	10049014 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
100492d8:	687b      	ldr	r3, [r7, #4]
100492da:	68db      	ldr	r3, [r3, #12]
100492dc:	2b10      	cmp	r3, #16
100492de:	d102      	bne.n	100492e6 <HAL_RCC_OscConfig+0x1c6>
100492e0:	f7ff fe40 	bl	10048f64 <LL_RCC_LSE_Enable>
100492e4:	e001      	b.n	100492ea <HAL_RCC_OscConfig+0x1ca>
100492e6:	f7ff fe4b 	bl	10048f80 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
100492ea:	687b      	ldr	r3, [r7, #4]
100492ec:	68db      	ldr	r3, [r3, #12]
100492ee:	2b00      	cmp	r3, #0
100492f0:	d012      	beq.n	10049318 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100492f2:	f7fc fbfb 	bl	10045aec <HAL_GetTick>
100492f6:	0003      	movs	r3, r0
100492f8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
100492fa:	e008      	b.n	1004930e <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
100492fc:	f7fc fbf6 	bl	10045aec <HAL_GetTick>
10049300:	0002      	movs	r2, r0
10049302:	68fb      	ldr	r3, [r7, #12]
10049304:	1ad3      	subs	r3, r2, r3
10049306:	2b64      	cmp	r3, #100	@ 0x64
10049308:	d901      	bls.n	1004930e <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
1004930a:	2303      	movs	r3, #3
1004930c:	e04e      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004930e:	f7ff fe45 	bl	10048f9c <LL_RCC_LSE_IsReady>
10049312:	1e03      	subs	r3, r0, #0
10049314:	d0f2      	beq.n	100492fc <HAL_RCC_OscConfig+0x1dc>
10049316:	e011      	b.n	1004933c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049318:	f7fc fbe8 	bl	10045aec <HAL_GetTick>
1004931c:	0003      	movs	r3, r0
1004931e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10049320:	e008      	b.n	10049334 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10049322:	f7fc fbe3 	bl	10045aec <HAL_GetTick>
10049326:	0002      	movs	r2, r0
10049328:	68fb      	ldr	r3, [r7, #12]
1004932a:	1ad3      	subs	r3, r2, r3
1004932c:	2b64      	cmp	r3, #100	@ 0x64
1004932e:	d901      	bls.n	10049334 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
10049330:	2303      	movs	r3, #3
10049332:	e03b      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
10049334:	f7ff fe32 	bl	10048f9c <LL_RCC_LSE_IsReady>
10049338:	1e03      	subs	r3, r0, #0
1004933a:	d1f2      	bne.n	10049322 <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
1004933c:	687b      	ldr	r3, [r7, #4]
1004933e:	681b      	ldr	r3, [r3, #0]
10049340:	2208      	movs	r2, #8
10049342:	4013      	ands	r3, r2
10049344:	d031      	beq.n	100493aa <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
10049346:	687b      	ldr	r3, [r7, #4]
10049348:	695b      	ldr	r3, [r3, #20]
1004934a:	2b40      	cmp	r3, #64	@ 0x40
1004934c:	d102      	bne.n	10049354 <HAL_RCC_OscConfig+0x234>
1004934e:	f7ff fe35 	bl	10048fbc <LL_RCC_LSE_EnableBypass>
10049352:	e001      	b.n	10049358 <HAL_RCC_OscConfig+0x238>
10049354:	f7ff fe40 	bl	10048fd8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
10049358:	687b      	ldr	r3, [r7, #4]
1004935a:	695b      	ldr	r3, [r3, #20]
1004935c:	2b00      	cmp	r3, #0
1004935e:	d012      	beq.n	10049386 <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049360:	f7fc fbc4 	bl	10045aec <HAL_GetTick>
10049364:	0003      	movs	r3, r0
10049366:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
10049368:	e008      	b.n	1004937c <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004936a:	f7fc fbbf 	bl	10045aec <HAL_GetTick>
1004936e:	0002      	movs	r2, r0
10049370:	68fb      	ldr	r3, [r7, #12]
10049372:	1ad3      	subs	r3, r2, r3
10049374:	2b64      	cmp	r3, #100	@ 0x64
10049376:	d901      	bls.n	1004937c <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
10049378:	2303      	movs	r3, #3
1004937a:	e017      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004937c:	f7ff fe3a 	bl	10048ff4 <LL_RCC_LSE_IsBypassEnabled>
10049380:	1e03      	subs	r3, r0, #0
10049382:	d0f2      	beq.n	1004936a <HAL_RCC_OscConfig+0x24a>
10049384:	e011      	b.n	100493aa <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10049386:	f7fc fbb1 	bl	10045aec <HAL_GetTick>
1004938a:	0003      	movs	r3, r0
1004938c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004938e:	e008      	b.n	100493a2 <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
10049390:	f7fc fbac 	bl	10045aec <HAL_GetTick>
10049394:	0002      	movs	r2, r0
10049396:	68fb      	ldr	r3, [r7, #12]
10049398:	1ad3      	subs	r3, r2, r3
1004939a:	2b64      	cmp	r3, #100	@ 0x64
1004939c:	d901      	bls.n	100493a2 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
1004939e:	2303      	movs	r3, #3
100493a0:	e004      	b.n	100493ac <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
100493a2:	f7ff fe27 	bl	10048ff4 <LL_RCC_LSE_IsBypassEnabled>
100493a6:	1e03      	subs	r3, r0, #0
100493a8:	d1f2      	bne.n	10049390 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
100493aa:	2300      	movs	r3, #0
}
100493ac:	0018      	movs	r0, r3
100493ae:	46bd      	mov	sp, r7
100493b0:	b004      	add	sp, #16
100493b2:	bd80      	pop	{r7, pc}

100493b4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
100493b4:	b580      	push	{r7, lr}
100493b6:	b084      	sub	sp, #16
100493b8:	af00      	add	r7, sp, #0
100493ba:	6078      	str	r0, [r7, #4]
100493bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100493be:	687b      	ldr	r3, [r7, #4]
100493c0:	2b00      	cmp	r3, #0
100493c2:	d101      	bne.n	100493c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
100493c4:	2301      	movs	r3, #1
100493c6:	e098      	b.n	100494fa <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
100493c8:	4b4e      	ldr	r3, [pc, #312]	@ (10049504 <HAL_RCC_ClockConfig+0x150>)
100493ca:	685b      	ldr	r3, [r3, #4]
100493cc:	2230      	movs	r2, #48	@ 0x30
100493ce:	4393      	bics	r3, r2
100493d0:	0019      	movs	r1, r3
100493d2:	4b4c      	ldr	r3, [pc, #304]	@ (10049504 <HAL_RCC_ClockConfig+0x150>)
100493d4:	683a      	ldr	r2, [r7, #0]
100493d6:	430a      	orrs	r2, r1
100493d8:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
100493da:	687b      	ldr	r3, [r7, #4]
100493dc:	681b      	ldr	r3, [r3, #0]
100493de:	2b02      	cmp	r3, #2
100493e0:	d10e      	bne.n	10049400 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
100493e2:	f7ff fd47 	bl	10048e74 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
100493e6:	f7ff fd6d 	bl	10048ec4 <LL_RCC_HSI_IsReady>
100493ea:	1e03      	subs	r3, r0, #0
100493ec:	d101      	bne.n	100493f2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
100493ee:	2301      	movs	r3, #1
100493f0:	e083      	b.n	100494fa <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
100493f2:	f7ff fe5d 	bl	100490b0 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
100493f6:	687b      	ldr	r3, [r7, #4]
100493f8:	685b      	ldr	r3, [r3, #4]
100493fa:	0018      	movs	r0, r3
100493fc:	f7ff fe7c 	bl	100490f8 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
10049400:	687b      	ldr	r3, [r7, #4]
10049402:	681b      	ldr	r3, [r3, #0]
10049404:	2b00      	cmp	r3, #0
10049406:	d124      	bne.n	10049452 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
10049408:	f7ff fd5c 	bl	10048ec4 <LL_RCC_HSI_IsReady>
1004940c:	1e03      	subs	r3, r0, #0
1004940e:	d101      	bne.n	10049414 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
10049410:	2301      	movs	r3, #1
10049412:	e072      	b.n	100494fa <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
10049414:	f7ff fce4 	bl	10048de0 <LL_RCC_HSE_IsReady>
10049418:	1e03      	subs	r3, r0, #0
1004941a:	d101      	bne.n	10049420 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
1004941c:	2301      	movs	r3, #1
1004941e:	e06c      	b.n	100494fa <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
10049420:	f7ff fe38 	bl	10049094 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10049424:	f7fc fb62 	bl	10045aec <HAL_GetTick>
10049428:	0003      	movs	r3, r0
1004942a:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004942c:	e008      	b.n	10049440 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1004942e:	f7fc fb5d 	bl	10045aec <HAL_GetTick>
10049432:	0002      	movs	r2, r0
10049434:	68fb      	ldr	r3, [r7, #12]
10049436:	1ad3      	subs	r3, r2, r3
10049438:	2b02      	cmp	r3, #2
1004943a:	d901      	bls.n	10049440 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
1004943c:	2303      	movs	r3, #3
1004943e:	e05c      	b.n	100494fa <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
10049440:	f7ff fe46 	bl	100490d0 <LL_RCC_RC64MPLL_IsReady>
10049444:	1e03      	subs	r3, r0, #0
10049446:	d0f2      	beq.n	1004942e <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10049448:	687b      	ldr	r3, [r7, #4]
1004944a:	685b      	ldr	r3, [r3, #4]
1004944c:	0018      	movs	r0, r3
1004944e:	f7ff fe53 	bl	100490f8 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
10049452:	687b      	ldr	r3, [r7, #4]
10049454:	681b      	ldr	r3, [r3, #0]
10049456:	2b01      	cmp	r3, #1
10049458:	d117      	bne.n	1004948a <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004945a:	f7ff fd47 	bl	10048eec <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004945e:	f7ff fd31 	bl	10048ec4 <LL_RCC_HSI_IsReady>
10049462:	1e03      	subs	r3, r0, #0
10049464:	d001      	beq.n	1004946a <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
10049466:	2301      	movs	r3, #1
10049468:	e047      	b.n	100494fa <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004946a:	f7ff fcb9 	bl	10048de0 <LL_RCC_HSE_IsReady>
1004946e:	1e03      	subs	r3, r0, #0
10049470:	d101      	bne.n	10049476 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
10049472:	2301      	movs	r3, #1
10049474:	e041      	b.n	100494fa <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
10049476:	4b24      	ldr	r3, [pc, #144]	@ (10049508 <HAL_RCC_ClockConfig+0x154>)
10049478:	689b      	ldr	r3, [r3, #8]
1004947a:	22e0      	movs	r2, #224	@ 0xe0
1004947c:	4393      	bics	r3, r2
1004947e:	0019      	movs	r1, r3
10049480:	687b      	ldr	r3, [r7, #4]
10049482:	685a      	ldr	r2, [r3, #4]
10049484:	4b20      	ldr	r3, [pc, #128]	@ (10049508 <HAL_RCC_ClockConfig+0x154>)
10049486:	430a      	orrs	r2, r1
10049488:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1004948a:	4b1e      	ldr	r3, [pc, #120]	@ (10049504 <HAL_RCC_ClockConfig+0x150>)
1004948c:	685b      	ldr	r3, [r3, #4]
1004948e:	2230      	movs	r2, #48	@ 0x30
10049490:	4013      	ands	r3, r2
10049492:	683a      	ldr	r2, [r7, #0]
10049494:	429a      	cmp	r2, r3
10049496:	d01d      	beq.n	100494d4 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
10049498:	4b1a      	ldr	r3, [pc, #104]	@ (10049504 <HAL_RCC_ClockConfig+0x150>)
1004949a:	685b      	ldr	r3, [r3, #4]
1004949c:	2230      	movs	r2, #48	@ 0x30
1004949e:	4393      	bics	r3, r2
100494a0:	0019      	movs	r1, r3
100494a2:	4b18      	ldr	r3, [pc, #96]	@ (10049504 <HAL_RCC_ClockConfig+0x150>)
100494a4:	683a      	ldr	r2, [r7, #0]
100494a6:	430a      	orrs	r2, r1
100494a8:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100494aa:	f7fc fb1f 	bl	10045aec <HAL_GetTick>
100494ae:	0003      	movs	r3, r0
100494b0:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100494b2:	e008      	b.n	100494c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
100494b4:	f7fc fb1a 	bl	10045aec <HAL_GetTick>
100494b8:	0002      	movs	r2, r0
100494ba:	68fb      	ldr	r3, [r7, #12]
100494bc:	1ad3      	subs	r3, r2, r3
100494be:	2b02      	cmp	r3, #2
100494c0:	d901      	bls.n	100494c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
100494c2:	2303      	movs	r3, #3
100494c4:	e019      	b.n	100494fa <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
100494c6:	4b0f      	ldr	r3, [pc, #60]	@ (10049504 <HAL_RCC_ClockConfig+0x150>)
100494c8:	685b      	ldr	r3, [r3, #4]
100494ca:	2230      	movs	r2, #48	@ 0x30
100494cc:	4013      	ands	r3, r2
100494ce:	683a      	ldr	r2, [r7, #0]
100494d0:	429a      	cmp	r2, r3
100494d2:	d1ef      	bne.n	100494b4 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
100494d4:	2300      	movs	r3, #0
100494d6:	60bb      	str	r3, [r7, #8]
100494d8:	e003      	b.n	100494e2 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
100494da:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
100494dc:	68bb      	ldr	r3, [r7, #8]
100494de:	3301      	adds	r3, #1
100494e0:	60bb      	str	r3, [r7, #8]
100494e2:	68bb      	ldr	r3, [r7, #8]
100494e4:	2b05      	cmp	r3, #5
100494e6:	ddf8      	ble.n	100494da <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
100494e8:	f7fc fa5c 	bl	100459a4 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
100494ec:	f7fc fb08 	bl	10045b00 <HAL_GetTickPrio>
100494f0:	0003      	movs	r3, r0
100494f2:	0018      	movs	r0, r3
100494f4:	f7fc faa0 	bl	10045a38 <HAL_InitTick>
100494f8:	0003      	movs	r3, r0
}
100494fa:	0018      	movs	r0, r3
100494fc:	46bd      	mov	sp, r7
100494fe:	b004      	add	sp, #16
10049500:	bd80      	pop	{r7, pc}
10049502:	46c0      	nop			@ (mov r8, r8)
10049504:	40001000 	.word	0x40001000
10049508:	48400000 	.word	0x48400000

1004950c <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1004950c:	b580      	push	{r7, lr}
1004950e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
10049510:	4b02      	ldr	r3, [pc, #8]	@ (1004951c <HAL_RCC_GetSysClockFreq+0x10>)
10049512:	681b      	ldr	r3, [r3, #0]
}
10049514:	0018      	movs	r0, r3
10049516:	46bd      	mov	sp, r7
10049518:	bd80      	pop	{r7, pc}
1004951a:	46c0      	nop			@ (mov r8, r8)
1004951c:	20000d10 	.word	0x20000d10

10049520 <LL_RCC_HSE_IsReady>:
{
10049520:	b580      	push	{r7, lr}
10049522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
10049524:	4b07      	ldr	r3, [pc, #28]	@ (10049544 <LL_RCC_HSE_IsReady+0x24>)
10049526:	681a      	ldr	r2, [r3, #0]
10049528:	2380      	movs	r3, #128	@ 0x80
1004952a:	029b      	lsls	r3, r3, #10
1004952c:	401a      	ands	r2, r3
1004952e:	2380      	movs	r3, #128	@ 0x80
10049530:	029b      	lsls	r3, r3, #10
10049532:	429a      	cmp	r2, r3
10049534:	d101      	bne.n	1004953a <LL_RCC_HSE_IsReady+0x1a>
10049536:	2301      	movs	r3, #1
10049538:	e000      	b.n	1004953c <LL_RCC_HSE_IsReady+0x1c>
1004953a:	2300      	movs	r3, #0
}
1004953c:	0018      	movs	r0, r3
1004953e:	46bd      	mov	sp, r7
10049540:	bd80      	pop	{r7, pc}
10049542:	46c0      	nop			@ (mov r8, r8)
10049544:	48400000 	.word	0x48400000

10049548 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
10049548:	b580      	push	{r7, lr}
1004954a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004954c:	4b05      	ldr	r3, [pc, #20]	@ (10049564 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004954e:	689b      	ldr	r3, [r3, #8]
10049550:	2208      	movs	r2, #8
10049552:	4013      	ands	r3, r2
10049554:	2b08      	cmp	r3, #8
10049556:	d101      	bne.n	1004955c <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
10049558:	2301      	movs	r3, #1
1004955a:	e000      	b.n	1004955e <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
1004955c:	2300      	movs	r3, #0
}
1004955e:	0018      	movs	r0, r3
10049560:	46bd      	mov	sp, r7
10049562:	bd80      	pop	{r7, pc}
10049564:	48400000 	.word	0x48400000

10049568 <LL_RCC_LSCO_SetSource>:
{
10049568:	b580      	push	{r7, lr}
1004956a:	b082      	sub	sp, #8
1004956c:	af00      	add	r7, sp, #0
1004956e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
10049570:	4b06      	ldr	r3, [pc, #24]	@ (1004958c <LL_RCC_LSCO_SetSource+0x24>)
10049572:	689b      	ldr	r3, [r3, #8]
10049574:	4a06      	ldr	r2, [pc, #24]	@ (10049590 <LL_RCC_LSCO_SetSource+0x28>)
10049576:	4013      	ands	r3, r2
10049578:	0019      	movs	r1, r3
1004957a:	4b04      	ldr	r3, [pc, #16]	@ (1004958c <LL_RCC_LSCO_SetSource+0x24>)
1004957c:	687a      	ldr	r2, [r7, #4]
1004957e:	430a      	orrs	r2, r1
10049580:	609a      	str	r2, [r3, #8]
}
10049582:	46c0      	nop			@ (mov r8, r8)
10049584:	46bd      	mov	sp, r7
10049586:	b002      	add	sp, #8
10049588:	bd80      	pop	{r7, pc}
1004958a:	46c0      	nop			@ (mov r8, r8)
1004958c:	48400000 	.word	0x48400000
10049590:	fffe7fff 	.word	0xfffe7fff

10049594 <LL_RCC_LSCO_GetSource>:
{
10049594:	b580      	push	{r7, lr}
10049596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
10049598:	4b03      	ldr	r3, [pc, #12]	@ (100495a8 <LL_RCC_LSCO_GetSource+0x14>)
1004959a:	689a      	ldr	r2, [r3, #8]
1004959c:	23c0      	movs	r3, #192	@ 0xc0
1004959e:	025b      	lsls	r3, r3, #9
100495a0:	4013      	ands	r3, r2
}
100495a2:	0018      	movs	r0, r3
100495a4:	46bd      	mov	sp, r7
100495a6:	bd80      	pop	{r7, pc}
100495a8:	48400000 	.word	0x48400000

100495ac <LL_RCC_SetRFClock>:
{
100495ac:	b580      	push	{r7, lr}
100495ae:	b082      	sub	sp, #8
100495b0:	af00      	add	r7, sp, #0
100495b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
100495b4:	4b06      	ldr	r3, [pc, #24]	@ (100495d0 <LL_RCC_SetRFClock+0x24>)
100495b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100495b8:	2204      	movs	r2, #4
100495ba:	4393      	bics	r3, r2
100495bc:	0019      	movs	r1, r3
100495be:	4b04      	ldr	r3, [pc, #16]	@ (100495d0 <LL_RCC_SetRFClock+0x24>)
100495c0:	687a      	ldr	r2, [r7, #4]
100495c2:	430a      	orrs	r2, r1
100495c4:	661a      	str	r2, [r3, #96]	@ 0x60
}
100495c6:	46c0      	nop			@ (mov r8, r8)
100495c8:	46bd      	mov	sp, r7
100495ca:	b002      	add	sp, #8
100495cc:	bd80      	pop	{r7, pc}
100495ce:	46c0      	nop			@ (mov r8, r8)
100495d0:	48400000 	.word	0x48400000

100495d4 <LL_RCC_GetRFClock>:
{
100495d4:	b580      	push	{r7, lr}
100495d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
100495d8:	4b03      	ldr	r3, [pc, #12]	@ (100495e8 <LL_RCC_GetRFClock+0x14>)
100495da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100495dc:	2204      	movs	r2, #4
100495de:	4013      	ands	r3, r2
}
100495e0:	0018      	movs	r0, r3
100495e2:	46bd      	mov	sp, r7
100495e4:	bd80      	pop	{r7, pc}
100495e6:	46c0      	nop			@ (mov r8, r8)
100495e8:	48400000 	.word	0x48400000

100495ec <LL_RCC_SetSMPSPrescaler>:
{
100495ec:	b580      	push	{r7, lr}
100495ee:	b082      	sub	sp, #8
100495f0:	af00      	add	r7, sp, #0
100495f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
100495f4:	4b06      	ldr	r3, [pc, #24]	@ (10049610 <LL_RCC_SetSMPSPrescaler+0x24>)
100495f6:	689b      	ldr	r3, [r3, #8]
100495f8:	4a06      	ldr	r2, [pc, #24]	@ (10049614 <LL_RCC_SetSMPSPrescaler+0x28>)
100495fa:	4013      	ands	r3, r2
100495fc:	0019      	movs	r1, r3
100495fe:	4b04      	ldr	r3, [pc, #16]	@ (10049610 <LL_RCC_SetSMPSPrescaler+0x24>)
10049600:	687a      	ldr	r2, [r7, #4]
10049602:	430a      	orrs	r2, r1
10049604:	609a      	str	r2, [r3, #8]
}
10049606:	46c0      	nop			@ (mov r8, r8)
10049608:	46bd      	mov	sp, r7
1004960a:	b002      	add	sp, #8
1004960c:	bd80      	pop	{r7, pc}
1004960e:	46c0      	nop			@ (mov r8, r8)
10049610:	48400000 	.word	0x48400000
10049614:	ffffefff 	.word	0xffffefff

10049618 <LL_RCC_GetSMPSPrescaler>:
{
10049618:	b580      	push	{r7, lr}
1004961a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
1004961c:	4b03      	ldr	r3, [pc, #12]	@ (1004962c <LL_RCC_GetSMPSPrescaler+0x14>)
1004961e:	689a      	ldr	r2, [r3, #8]
10049620:	2380      	movs	r3, #128	@ 0x80
10049622:	015b      	lsls	r3, r3, #5
10049624:	4013      	ands	r3, r2
}
10049626:	0018      	movs	r0, r3
10049628:	46bd      	mov	sp, r7
1004962a:	bd80      	pop	{r7, pc}
1004962c:	48400000 	.word	0x48400000

10049630 <LL_RCC_SetLPUARTClockSource>:
{
10049630:	b580      	push	{r7, lr}
10049632:	b082      	sub	sp, #8
10049634:	af00      	add	r7, sp, #0
10049636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
10049638:	4b06      	ldr	r3, [pc, #24]	@ (10049654 <LL_RCC_SetLPUARTClockSource+0x24>)
1004963a:	689b      	ldr	r3, [r3, #8]
1004963c:	4a06      	ldr	r2, [pc, #24]	@ (10049658 <LL_RCC_SetLPUARTClockSource+0x28>)
1004963e:	4013      	ands	r3, r2
10049640:	0019      	movs	r1, r3
10049642:	4b04      	ldr	r3, [pc, #16]	@ (10049654 <LL_RCC_SetLPUARTClockSource+0x24>)
10049644:	687a      	ldr	r2, [r7, #4]
10049646:	430a      	orrs	r2, r1
10049648:	609a      	str	r2, [r3, #8]
}
1004964a:	46c0      	nop			@ (mov r8, r8)
1004964c:	46bd      	mov	sp, r7
1004964e:	b002      	add	sp, #8
10049650:	bd80      	pop	{r7, pc}
10049652:	46c0      	nop			@ (mov r8, r8)
10049654:	48400000 	.word	0x48400000
10049658:	ffffdfff 	.word	0xffffdfff

1004965c <LL_RCC_GetLPUARTClockSource>:
{
1004965c:	b580      	push	{r7, lr}
1004965e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
10049660:	4b03      	ldr	r3, [pc, #12]	@ (10049670 <LL_RCC_GetLPUARTClockSource+0x14>)
10049662:	689a      	ldr	r2, [r3, #8]
10049664:	2380      	movs	r3, #128	@ 0x80
10049666:	019b      	lsls	r3, r3, #6
10049668:	4013      	ands	r3, r2
}
1004966a:	0018      	movs	r0, r3
1004966c:	46bd      	mov	sp, r7
1004966e:	bd80      	pop	{r7, pc}
10049670:	48400000 	.word	0x48400000

10049674 <LL_RCC_SetSPI3I2SClockSource>:
{
10049674:	b580      	push	{r7, lr}
10049676:	b082      	sub	sp, #8
10049678:	af00      	add	r7, sp, #0
1004967a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
1004967c:	4b06      	ldr	r3, [pc, #24]	@ (10049698 <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004967e:	689b      	ldr	r3, [r3, #8]
10049680:	4a06      	ldr	r2, [pc, #24]	@ (1004969c <LL_RCC_SetSPI3I2SClockSource+0x28>)
10049682:	4013      	ands	r3, r2
10049684:	0019      	movs	r1, r3
10049686:	4b04      	ldr	r3, [pc, #16]	@ (10049698 <LL_RCC_SetSPI3I2SClockSource+0x24>)
10049688:	687a      	ldr	r2, [r7, #4]
1004968a:	430a      	orrs	r2, r1
1004968c:	609a      	str	r2, [r3, #8]
}
1004968e:	46c0      	nop			@ (mov r8, r8)
10049690:	46bd      	mov	sp, r7
10049692:	b002      	add	sp, #8
10049694:	bd80      	pop	{r7, pc}
10049696:	46c0      	nop			@ (mov r8, r8)
10049698:	48400000 	.word	0x48400000
1004969c:	ff3fffff 	.word	0xff3fffff

100496a0 <LL_RCC_GetSPI3I2SClockSource>:
{
100496a0:	b580      	push	{r7, lr}
100496a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
100496a4:	4b03      	ldr	r3, [pc, #12]	@ (100496b4 <LL_RCC_GetSPI3I2SClockSource+0x14>)
100496a6:	689a      	ldr	r2, [r3, #8]
100496a8:	23c0      	movs	r3, #192	@ 0xc0
100496aa:	041b      	lsls	r3, r3, #16
100496ac:	4013      	ands	r3, r2
}
100496ae:	0018      	movs	r0, r3
100496b0:	46bd      	mov	sp, r7
100496b2:	bd80      	pop	{r7, pc}
100496b4:	48400000 	.word	0x48400000

100496b8 <LL_RCC_RC64MPLL_IsReady>:
{
100496b8:	b580      	push	{r7, lr}
100496ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
100496bc:	4b07      	ldr	r3, [pc, #28]	@ (100496dc <LL_RCC_RC64MPLL_IsReady+0x24>)
100496be:	681a      	ldr	r2, [r3, #0]
100496c0:	2380      	movs	r3, #128	@ 0x80
100496c2:	01db      	lsls	r3, r3, #7
100496c4:	401a      	ands	r2, r3
100496c6:	2380      	movs	r3, #128	@ 0x80
100496c8:	01db      	lsls	r3, r3, #7
100496ca:	429a      	cmp	r2, r3
100496cc:	d101      	bne.n	100496d2 <LL_RCC_RC64MPLL_IsReady+0x1a>
100496ce:	2301      	movs	r3, #1
100496d0:	e000      	b.n	100496d4 <LL_RCC_RC64MPLL_IsReady+0x1c>
100496d2:	2300      	movs	r3, #0
}
100496d4:	0018      	movs	r0, r3
100496d6:	46bd      	mov	sp, r7
100496d8:	bd80      	pop	{r7, pc}
100496da:	46c0      	nop			@ (mov r8, r8)
100496dc:	48400000 	.word	0x48400000

100496e0 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
100496e0:	b580      	push	{r7, lr}
100496e2:	b082      	sub	sp, #8
100496e4:	af00      	add	r7, sp, #0
100496e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
100496e8:	687b      	ldr	r3, [r7, #4]
100496ea:	681b      	ldr	r3, [r3, #0]
100496ec:	2201      	movs	r2, #1
100496ee:	4013      	ands	r3, r2
100496f0:	d004      	beq.n	100496fc <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
100496f2:	687b      	ldr	r3, [r7, #4]
100496f4:	691b      	ldr	r3, [r3, #16]
100496f6:	0018      	movs	r0, r3
100496f8:	f7ff ff58 	bl	100495ac <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
100496fc:	687b      	ldr	r3, [r7, #4]
100496fe:	681b      	ldr	r3, [r3, #0]
10049700:	2202      	movs	r2, #2
10049702:	4013      	ands	r3, r2
10049704:	d004      	beq.n	10049710 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
10049706:	687b      	ldr	r3, [r7, #4]
10049708:	695b      	ldr	r3, [r3, #20]
1004970a:	0018      	movs	r0, r3
1004970c:	f7ff ff6e 	bl	100495ec <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
10049710:	687b      	ldr	r3, [r7, #4]
10049712:	681b      	ldr	r3, [r3, #0]
10049714:	2208      	movs	r2, #8
10049716:	4013      	ands	r3, r2
10049718:	d004      	beq.n	10049724 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004971a:	687b      	ldr	r3, [r7, #4]
1004971c:	685b      	ldr	r3, [r3, #4]
1004971e:	0018      	movs	r0, r3
10049720:	f7ff ffa8 	bl	10049674 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
10049724:	687b      	ldr	r3, [r7, #4]
10049726:	681b      	ldr	r3, [r3, #0]
10049728:	2210      	movs	r2, #16
1004972a:	4013      	ands	r3, r2
1004972c:	d004      	beq.n	10049738 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004972e:	687b      	ldr	r3, [r7, #4]
10049730:	68db      	ldr	r3, [r3, #12]
10049732:	0018      	movs	r0, r3
10049734:	f7ff ff7c 	bl	10049630 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
10049738:	687b      	ldr	r3, [r7, #4]
1004973a:	689b      	ldr	r3, [r3, #8]
1004973c:	2220      	movs	r2, #32
1004973e:	4013      	ands	r3, r2
10049740:	d004      	beq.n	1004974c <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
10049742:	687b      	ldr	r3, [r7, #4]
10049744:	689b      	ldr	r3, [r3, #8]
10049746:	0018      	movs	r0, r3
10049748:	f7ff ff0e 	bl	10049568 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
1004974c:	2300      	movs	r3, #0
}
1004974e:	0018      	movs	r0, r3
10049750:	46bd      	mov	sp, r7
10049752:	b002      	add	sp, #8
10049754:	bd80      	pop	{r7, pc}
	...

10049758 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
10049758:	b580      	push	{r7, lr}
1004975a:	b084      	sub	sp, #16
1004975c:	af00      	add	r7, sp, #0
1004975e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
10049760:	2300      	movs	r3, #0
10049762:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
10049764:	687b      	ldr	r3, [r7, #4]
10049766:	2b20      	cmp	r3, #32
10049768:	d900      	bls.n	1004976c <HAL_RCCEx_GetPeriphCLKFreq+0x14>
1004976a:	e07b      	b.n	10049864 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
1004976c:	687b      	ldr	r3, [r7, #4]
1004976e:	009a      	lsls	r2, r3, #2
10049770:	4b40      	ldr	r3, [pc, #256]	@ (10049874 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
10049772:	18d3      	adds	r3, r2, r3
10049774:	681b      	ldr	r3, [r3, #0]
10049776:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
10049778:	f7ff ff2c 	bl	100495d4 <LL_RCC_GetRFClock>
1004977c:	1e03      	subs	r3, r0, #0
1004977e:	d002      	beq.n	10049786 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
10049780:	2b04      	cmp	r3, #4
10049782:	d003      	beq.n	1004978c <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
10049784:	e071      	b.n	1004986a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
10049786:	4b3c      	ldr	r3, [pc, #240]	@ (10049878 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
10049788:	60fb      	str	r3, [r7, #12]
          break;
1004978a:	e002      	b.n	10049792 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
1004978c:	4b3b      	ldr	r3, [pc, #236]	@ (1004987c <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004978e:	60fb      	str	r3, [r7, #12]
          break;
10049790:	46c0      	nop			@ (mov r8, r8)
      break;
10049792:	e06a      	b.n	1004986a <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
10049794:	f7ff ff40 	bl	10049618 <LL_RCC_GetSMPSPrescaler>
10049798:	1e03      	subs	r3, r0, #0
1004979a:	d004      	beq.n	100497a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
1004979c:	2280      	movs	r2, #128	@ 0x80
1004979e:	0152      	lsls	r2, r2, #5
100497a0:	4293      	cmp	r3, r2
100497a2:	d003      	beq.n	100497ac <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
100497a4:	e061      	b.n	1004986a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
100497a6:	4b36      	ldr	r3, [pc, #216]	@ (10049880 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
100497a8:	60fb      	str	r3, [r7, #12]
          break;
100497aa:	e002      	b.n	100497b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
100497ac:	4b35      	ldr	r3, [pc, #212]	@ (10049884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
100497ae:	60fb      	str	r3, [r7, #12]
          break;
100497b0:	46c0      	nop			@ (mov r8, r8)
      break;
100497b2:	e05a      	b.n	1004986a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
100497b4:	f7ff fec8 	bl	10049548 <LL_RCC_DIRECT_HSE_IsEnabled>
100497b8:	1e03      	subs	r3, r0, #0
100497ba:	d005      	beq.n	100497c8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
100497bc:	f7ff feb0 	bl	10049520 <LL_RCC_HSE_IsReady>
100497c0:	1e03      	subs	r3, r0, #0
100497c2:	d107      	bne.n	100497d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
100497c4:	2300      	movs	r3, #0
100497c6:	e051      	b.n	1004986c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
100497c8:	f7ff ff76 	bl	100496b8 <LL_RCC_RC64MPLL_IsReady>
100497cc:	1e03      	subs	r3, r0, #0
100497ce:	d101      	bne.n	100497d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
100497d0:	2300      	movs	r3, #0
100497d2:	e04b      	b.n	1004986c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
100497d4:	f7ff ff64 	bl	100496a0 <LL_RCC_GetSPI3I2SClockSource>
100497d8:	0003      	movs	r3, r0
100497da:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
100497dc:	68bb      	ldr	r3, [r7, #8]
100497de:	2b00      	cmp	r3, #0
100497e0:	d101      	bne.n	100497e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
100497e2:	4b26      	ldr	r3, [pc, #152]	@ (1004987c <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
100497e4:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
100497e6:	68ba      	ldr	r2, [r7, #8]
100497e8:	2380      	movs	r3, #128	@ 0x80
100497ea:	03db      	lsls	r3, r3, #15
100497ec:	429a      	cmp	r2, r3
100497ee:	d101      	bne.n	100497f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
100497f0:	4b21      	ldr	r3, [pc, #132]	@ (10049878 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
100497f2:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
100497f4:	68ba      	ldr	r2, [r7, #8]
100497f6:	2380      	movs	r3, #128	@ 0x80
100497f8:	041b      	lsls	r3, r3, #16
100497fa:	429a      	cmp	r2, r3
100497fc:	d134      	bne.n	10049868 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
100497fe:	4b22      	ldr	r3, [pc, #136]	@ (10049888 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
10049800:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
10049802:	e031      	b.n	10049868 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
10049804:	f7ff ff2a 	bl	1004965c <LL_RCC_GetLPUARTClockSource>
10049808:	0002      	movs	r2, r0
1004980a:	2380      	movs	r3, #128	@ 0x80
1004980c:	019b      	lsls	r3, r3, #6
1004980e:	429a      	cmp	r2, r3
10049810:	d103      	bne.n	1004981a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
10049812:	2380      	movs	r3, #128	@ 0x80
10049814:	021b      	lsls	r3, r3, #8
10049816:	60fb      	str	r3, [r7, #12]
          break;
10049818:	e002      	b.n	10049820 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004981a:	4b18      	ldr	r3, [pc, #96]	@ (1004987c <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004981c:	60fb      	str	r3, [r7, #12]
          break;
1004981e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10049820:	e023      	b.n	1004986a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
10049822:	f7ff feb7 	bl	10049594 <LL_RCC_LSCO_GetSource>
10049826:	0003      	movs	r3, r0
10049828:	22c0      	movs	r2, #192	@ 0xc0
1004982a:	0252      	lsls	r2, r2, #9
1004982c:	4293      	cmp	r3, r2
1004982e:	d014      	beq.n	1004985a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
10049830:	22c0      	movs	r2, #192	@ 0xc0
10049832:	0252      	lsls	r2, r2, #9
10049834:	4293      	cmp	r3, r2
10049836:	d813      	bhi.n	10049860 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
10049838:	2280      	movs	r2, #128	@ 0x80
1004983a:	0212      	lsls	r2, r2, #8
1004983c:	4293      	cmp	r3, r2
1004983e:	d004      	beq.n	1004984a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
10049840:	2280      	movs	r2, #128	@ 0x80
10049842:	0252      	lsls	r2, r2, #9
10049844:	4293      	cmp	r3, r2
10049846:	d004      	beq.n	10049852 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
10049848:	e00a      	b.n	10049860 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
1004984a:	2380      	movs	r3, #128	@ 0x80
1004984c:	021b      	lsls	r3, r3, #8
1004984e:	60fb      	str	r3, [r7, #12]
          break;
10049850:	e007      	b.n	10049862 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
10049852:	23fa      	movs	r3, #250	@ 0xfa
10049854:	01db      	lsls	r3, r3, #7
10049856:	60fb      	str	r3, [r7, #12]
          break;
10049858:	e003      	b.n	10049862 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004985a:	4b0c      	ldr	r3, [pc, #48]	@ (1004988c <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
1004985c:	60fb      	str	r3, [r7, #12]
          break;
1004985e:	e000      	b.n	10049862 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
10049860:	46c0      	nop			@ (mov r8, r8)
      }
      break;
10049862:	e002      	b.n	1004986a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
10049864:	46c0      	nop			@ (mov r8, r8)
10049866:	e000      	b.n	1004986a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
10049868:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1004986a:	68fb      	ldr	r3, [r7, #12]
}
1004986c:	0018      	movs	r0, r3
1004986e:	46bd      	mov	sp, r7
10049870:	b004      	add	sp, #16
10049872:	bd80      	pop	{r7, pc}
10049874:	1004fd50 	.word	0x1004fd50
10049878:	01e84800 	.word	0x01e84800
1004987c:	00f42400 	.word	0x00f42400
10049880:	007a1200 	.word	0x007a1200
10049884:	003d0900 	.word	0x003d0900
10049888:	03d09000 	.word	0x03d09000
1004988c:	00007a12 	.word	0x00007a12

10049890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10049890:	b580      	push	{r7, lr}
10049892:	b082      	sub	sp, #8
10049894:	af00      	add	r7, sp, #0
10049896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10049898:	687b      	ldr	r3, [r7, #4]
1004989a:	2b00      	cmp	r3, #0
1004989c:	d101      	bne.n	100498a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1004989e:	2301      	movs	r3, #1
100498a0:	e046      	b.n	10049930 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100498a2:	687b      	ldr	r3, [r7, #4]
100498a4:	2288      	movs	r2, #136	@ 0x88
100498a6:	589b      	ldr	r3, [r3, r2]
100498a8:	2b00      	cmp	r3, #0
100498aa:	d107      	bne.n	100498bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
100498ac:	687b      	ldr	r3, [r7, #4]
100498ae:	2284      	movs	r2, #132	@ 0x84
100498b0:	2100      	movs	r1, #0
100498b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
100498b4:	687b      	ldr	r3, [r7, #4]
100498b6:	0018      	movs	r0, r3
100498b8:	f7f7 fc14 	bl	100410e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
100498bc:	687b      	ldr	r3, [r7, #4]
100498be:	2288      	movs	r2, #136	@ 0x88
100498c0:	2124      	movs	r1, #36	@ 0x24
100498c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
100498c4:	687b      	ldr	r3, [r7, #4]
100498c6:	681b      	ldr	r3, [r3, #0]
100498c8:	681a      	ldr	r2, [r3, #0]
100498ca:	687b      	ldr	r3, [r7, #4]
100498cc:	681b      	ldr	r3, [r3, #0]
100498ce:	2101      	movs	r1, #1
100498d0:	438a      	bics	r2, r1
100498d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
100498d4:	687b      	ldr	r3, [r7, #4]
100498d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100498d8:	2b00      	cmp	r3, #0
100498da:	d003      	beq.n	100498e4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
100498dc:	687b      	ldr	r3, [r7, #4]
100498de:	0018      	movs	r0, r3
100498e0:	f000 fa38 	bl	10049d54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
100498e4:	687b      	ldr	r3, [r7, #4]
100498e6:	0018      	movs	r0, r3
100498e8:	f000 f8cc 	bl	10049a84 <UART_SetConfig>
100498ec:	0003      	movs	r3, r0
100498ee:	2b01      	cmp	r3, #1
100498f0:	d101      	bne.n	100498f6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
100498f2:	2301      	movs	r3, #1
100498f4:	e01c      	b.n	10049930 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
100498f6:	687b      	ldr	r3, [r7, #4]
100498f8:	681b      	ldr	r3, [r3, #0]
100498fa:	685a      	ldr	r2, [r3, #4]
100498fc:	687b      	ldr	r3, [r7, #4]
100498fe:	681b      	ldr	r3, [r3, #0]
10049900:	490d      	ldr	r1, [pc, #52]	@ (10049938 <HAL_UART_Init+0xa8>)
10049902:	400a      	ands	r2, r1
10049904:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10049906:	687b      	ldr	r3, [r7, #4]
10049908:	681b      	ldr	r3, [r3, #0]
1004990a:	689a      	ldr	r2, [r3, #8]
1004990c:	687b      	ldr	r3, [r7, #4]
1004990e:	681b      	ldr	r3, [r3, #0]
10049910:	212a      	movs	r1, #42	@ 0x2a
10049912:	438a      	bics	r2, r1
10049914:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10049916:	687b      	ldr	r3, [r7, #4]
10049918:	681b      	ldr	r3, [r3, #0]
1004991a:	681a      	ldr	r2, [r3, #0]
1004991c:	687b      	ldr	r3, [r7, #4]
1004991e:	681b      	ldr	r3, [r3, #0]
10049920:	2101      	movs	r1, #1
10049922:	430a      	orrs	r2, r1
10049924:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10049926:	687b      	ldr	r3, [r7, #4]
10049928:	0018      	movs	r0, r3
1004992a:	f000 fac7 	bl	10049ebc <UART_CheckIdleState>
1004992e:	0003      	movs	r3, r0
}
10049930:	0018      	movs	r0, r3
10049932:	46bd      	mov	sp, r7
10049934:	b002      	add	sp, #8
10049936:	bd80      	pop	{r7, pc}
10049938:	ffffb7ff 	.word	0xffffb7ff

1004993c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
1004993c:	b580      	push	{r7, lr}
1004993e:	b08a      	sub	sp, #40	@ 0x28
10049940:	af02      	add	r7, sp, #8
10049942:	60f8      	str	r0, [r7, #12]
10049944:	60b9      	str	r1, [r7, #8]
10049946:	603b      	str	r3, [r7, #0]
10049948:	1dbb      	adds	r3, r7, #6
1004994a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
1004994c:	68fb      	ldr	r3, [r7, #12]
1004994e:	2288      	movs	r2, #136	@ 0x88
10049950:	589b      	ldr	r3, [r3, r2]
10049952:	2b20      	cmp	r3, #32
10049954:	d000      	beq.n	10049958 <HAL_UART_Transmit+0x1c>
10049956:	e090      	b.n	10049a7a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
10049958:	68bb      	ldr	r3, [r7, #8]
1004995a:	2b00      	cmp	r3, #0
1004995c:	d003      	beq.n	10049966 <HAL_UART_Transmit+0x2a>
1004995e:	1dbb      	adds	r3, r7, #6
10049960:	881b      	ldrh	r3, [r3, #0]
10049962:	2b00      	cmp	r3, #0
10049964:	d101      	bne.n	1004996a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
10049966:	2301      	movs	r3, #1
10049968:	e088      	b.n	10049a7c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1004996a:	68fb      	ldr	r3, [r7, #12]
1004996c:	689a      	ldr	r2, [r3, #8]
1004996e:	2380      	movs	r3, #128	@ 0x80
10049970:	015b      	lsls	r3, r3, #5
10049972:	429a      	cmp	r2, r3
10049974:	d109      	bne.n	1004998a <HAL_UART_Transmit+0x4e>
10049976:	68fb      	ldr	r3, [r7, #12]
10049978:	691b      	ldr	r3, [r3, #16]
1004997a:	2b00      	cmp	r3, #0
1004997c:	d105      	bne.n	1004998a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
1004997e:	68bb      	ldr	r3, [r7, #8]
10049980:	2201      	movs	r2, #1
10049982:	4013      	ands	r3, r2
10049984:	d001      	beq.n	1004998a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
10049986:	2301      	movs	r3, #1
10049988:	e078      	b.n	10049a7c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
1004998a:	68fb      	ldr	r3, [r7, #12]
1004998c:	2290      	movs	r2, #144	@ 0x90
1004998e:	2100      	movs	r1, #0
10049990:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
10049992:	68fb      	ldr	r3, [r7, #12]
10049994:	2288      	movs	r2, #136	@ 0x88
10049996:	2121      	movs	r1, #33	@ 0x21
10049998:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
1004999a:	f7fc f8a7 	bl	10045aec <HAL_GetTick>
1004999e:	0003      	movs	r3, r0
100499a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
100499a2:	68fb      	ldr	r3, [r7, #12]
100499a4:	1dba      	adds	r2, r7, #6
100499a6:	2154      	movs	r1, #84	@ 0x54
100499a8:	8812      	ldrh	r2, [r2, #0]
100499aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
100499ac:	68fb      	ldr	r3, [r7, #12]
100499ae:	1dba      	adds	r2, r7, #6
100499b0:	2156      	movs	r1, #86	@ 0x56
100499b2:	8812      	ldrh	r2, [r2, #0]
100499b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
100499b6:	68fb      	ldr	r3, [r7, #12]
100499b8:	689a      	ldr	r2, [r3, #8]
100499ba:	2380      	movs	r3, #128	@ 0x80
100499bc:	015b      	lsls	r3, r3, #5
100499be:	429a      	cmp	r2, r3
100499c0:	d108      	bne.n	100499d4 <HAL_UART_Transmit+0x98>
100499c2:	68fb      	ldr	r3, [r7, #12]
100499c4:	691b      	ldr	r3, [r3, #16]
100499c6:	2b00      	cmp	r3, #0
100499c8:	d104      	bne.n	100499d4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
100499ca:	2300      	movs	r3, #0
100499cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
100499ce:	68bb      	ldr	r3, [r7, #8]
100499d0:	61bb      	str	r3, [r7, #24]
100499d2:	e003      	b.n	100499dc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
100499d4:	68bb      	ldr	r3, [r7, #8]
100499d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
100499d8:	2300      	movs	r3, #0
100499da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
100499dc:	e030      	b.n	10049a40 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
100499de:	697a      	ldr	r2, [r7, #20]
100499e0:	68f8      	ldr	r0, [r7, #12]
100499e2:	683b      	ldr	r3, [r7, #0]
100499e4:	9300      	str	r3, [sp, #0]
100499e6:	0013      	movs	r3, r2
100499e8:	2200      	movs	r2, #0
100499ea:	2180      	movs	r1, #128	@ 0x80
100499ec:	f000 fb10 	bl	1004a010 <UART_WaitOnFlagUntilTimeout>
100499f0:	1e03      	subs	r3, r0, #0
100499f2:	d005      	beq.n	10049a00 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
100499f4:	68fb      	ldr	r3, [r7, #12]
100499f6:	2288      	movs	r2, #136	@ 0x88
100499f8:	2120      	movs	r1, #32
100499fa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
100499fc:	2303      	movs	r3, #3
100499fe:	e03d      	b.n	10049a7c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
10049a00:	69fb      	ldr	r3, [r7, #28]
10049a02:	2b00      	cmp	r3, #0
10049a04:	d10b      	bne.n	10049a1e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10049a06:	69bb      	ldr	r3, [r7, #24]
10049a08:	881b      	ldrh	r3, [r3, #0]
10049a0a:	001a      	movs	r2, r3
10049a0c:	68fb      	ldr	r3, [r7, #12]
10049a0e:	681b      	ldr	r3, [r3, #0]
10049a10:	05d2      	lsls	r2, r2, #23
10049a12:	0dd2      	lsrs	r2, r2, #23
10049a14:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
10049a16:	69bb      	ldr	r3, [r7, #24]
10049a18:	3302      	adds	r3, #2
10049a1a:	61bb      	str	r3, [r7, #24]
10049a1c:	e007      	b.n	10049a2e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10049a1e:	69fb      	ldr	r3, [r7, #28]
10049a20:	781a      	ldrb	r2, [r3, #0]
10049a22:	68fb      	ldr	r3, [r7, #12]
10049a24:	681b      	ldr	r3, [r3, #0]
10049a26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
10049a28:	69fb      	ldr	r3, [r7, #28]
10049a2a:	3301      	adds	r3, #1
10049a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10049a2e:	68fb      	ldr	r3, [r7, #12]
10049a30:	2256      	movs	r2, #86	@ 0x56
10049a32:	5a9b      	ldrh	r3, [r3, r2]
10049a34:	b29b      	uxth	r3, r3
10049a36:	3b01      	subs	r3, #1
10049a38:	b299      	uxth	r1, r3
10049a3a:	68fb      	ldr	r3, [r7, #12]
10049a3c:	2256      	movs	r2, #86	@ 0x56
10049a3e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
10049a40:	68fb      	ldr	r3, [r7, #12]
10049a42:	2256      	movs	r2, #86	@ 0x56
10049a44:	5a9b      	ldrh	r3, [r3, r2]
10049a46:	b29b      	uxth	r3, r3
10049a48:	2b00      	cmp	r3, #0
10049a4a:	d1c8      	bne.n	100499de <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10049a4c:	697a      	ldr	r2, [r7, #20]
10049a4e:	68f8      	ldr	r0, [r7, #12]
10049a50:	683b      	ldr	r3, [r7, #0]
10049a52:	9300      	str	r3, [sp, #0]
10049a54:	0013      	movs	r3, r2
10049a56:	2200      	movs	r2, #0
10049a58:	2140      	movs	r1, #64	@ 0x40
10049a5a:	f000 fad9 	bl	1004a010 <UART_WaitOnFlagUntilTimeout>
10049a5e:	1e03      	subs	r3, r0, #0
10049a60:	d005      	beq.n	10049a6e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
10049a62:	68fb      	ldr	r3, [r7, #12]
10049a64:	2288      	movs	r2, #136	@ 0x88
10049a66:	2120      	movs	r1, #32
10049a68:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
10049a6a:	2303      	movs	r3, #3
10049a6c:	e006      	b.n	10049a7c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10049a6e:	68fb      	ldr	r3, [r7, #12]
10049a70:	2288      	movs	r2, #136	@ 0x88
10049a72:	2120      	movs	r1, #32
10049a74:	5099      	str	r1, [r3, r2]

    return HAL_OK;
10049a76:	2300      	movs	r3, #0
10049a78:	e000      	b.n	10049a7c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
10049a7a:	2302      	movs	r3, #2
  }
}
10049a7c:	0018      	movs	r0, r3
10049a7e:	46bd      	mov	sp, r7
10049a80:	b008      	add	sp, #32
10049a82:	bd80      	pop	{r7, pc}

10049a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10049a84:	b5b0      	push	{r4, r5, r7, lr}
10049a86:	b090      	sub	sp, #64	@ 0x40
10049a88:	af00      	add	r7, sp, #0
10049a8a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
10049a8c:	231b      	movs	r3, #27
10049a8e:	2220      	movs	r2, #32
10049a90:	189b      	adds	r3, r3, r2
10049a92:	19db      	adds	r3, r3, r7
10049a94:	2200      	movs	r2, #0
10049a96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10049a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049a9a:	689a      	ldr	r2, [r3, #8]
10049a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049a9e:	691b      	ldr	r3, [r3, #16]
10049aa0:	431a      	orrs	r2, r3
10049aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049aa4:	695b      	ldr	r3, [r3, #20]
10049aa6:	431a      	orrs	r2, r3
10049aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049aaa:	69db      	ldr	r3, [r3, #28]
10049aac:	4313      	orrs	r3, r2
10049aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10049ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049ab2:	681b      	ldr	r3, [r3, #0]
10049ab4:	681b      	ldr	r3, [r3, #0]
10049ab6:	4aa1      	ldr	r2, [pc, #644]	@ (10049d3c <UART_SetConfig+0x2b8>)
10049ab8:	4013      	ands	r3, r2
10049aba:	0019      	movs	r1, r3
10049abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049abe:	681a      	ldr	r2, [r3, #0]
10049ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049ac2:	430b      	orrs	r3, r1
10049ac4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10049ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049ac8:	681b      	ldr	r3, [r3, #0]
10049aca:	685b      	ldr	r3, [r3, #4]
10049acc:	4a9c      	ldr	r2, [pc, #624]	@ (10049d40 <UART_SetConfig+0x2bc>)
10049ace:	4013      	ands	r3, r2
10049ad0:	0018      	movs	r0, r3
10049ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049ad4:	68d9      	ldr	r1, [r3, #12]
10049ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049ad8:	681a      	ldr	r2, [r3, #0]
10049ada:	0003      	movs	r3, r0
10049adc:	430b      	orrs	r3, r1
10049ade:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10049ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049ae2:	699b      	ldr	r3, [r3, #24]
10049ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
10049ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049ae8:	681b      	ldr	r3, [r3, #0]
10049aea:	4a96      	ldr	r2, [pc, #600]	@ (10049d44 <UART_SetConfig+0x2c0>)
10049aec:	4293      	cmp	r3, r2
10049aee:	d004      	beq.n	10049afa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
10049af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049af2:	6a1b      	ldr	r3, [r3, #32]
10049af4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10049af6:	4313      	orrs	r3, r2
10049af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10049afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049afc:	681b      	ldr	r3, [r3, #0]
10049afe:	689b      	ldr	r3, [r3, #8]
10049b00:	4a91      	ldr	r2, [pc, #580]	@ (10049d48 <UART_SetConfig+0x2c4>)
10049b02:	4013      	ands	r3, r2
10049b04:	0019      	movs	r1, r3
10049b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b08:	681a      	ldr	r2, [r3, #0]
10049b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049b0c:	430b      	orrs	r3, r1
10049b0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10049b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b12:	681b      	ldr	r3, [r3, #0]
10049b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049b16:	220f      	movs	r2, #15
10049b18:	4393      	bics	r3, r2
10049b1a:	0018      	movs	r0, r3
10049b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b1e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10049b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b22:	681a      	ldr	r2, [r3, #0]
10049b24:	0003      	movs	r3, r0
10049b26:	430b      	orrs	r3, r1
10049b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
10049b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b2c:	681b      	ldr	r3, [r3, #0]
10049b2e:	4a85      	ldr	r2, [pc, #532]	@ (10049d44 <UART_SetConfig+0x2c0>)
10049b30:	4293      	cmp	r3, r2
10049b32:	d16d      	bne.n	10049c10 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
10049b34:	2010      	movs	r0, #16
10049b36:	f7ff fe0f 	bl	10049758 <HAL_RCCEx_GetPeriphCLKFreq>
10049b3a:	0003      	movs	r3, r0
10049b3c:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
10049b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049b40:	2b00      	cmp	r3, #0
10049b42:	d100      	bne.n	10049b46 <UART_SetConfig+0xc2>
10049b44:	e0e3      	b.n	10049d0e <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
10049b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049b4a:	4b80      	ldr	r3, [pc, #512]	@ (10049d4c <UART_SetConfig+0x2c8>)
10049b4c:	0052      	lsls	r2, r2, #1
10049b4e:	5ad3      	ldrh	r3, [r2, r3]
10049b50:	0019      	movs	r1, r3
10049b52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10049b54:	f7f6 fb6c 	bl	10040230 <__udivsi3>
10049b58:	0003      	movs	r3, r0
10049b5a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10049b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b5e:	685a      	ldr	r2, [r3, #4]
10049b60:	0013      	movs	r3, r2
10049b62:	005b      	lsls	r3, r3, #1
10049b64:	189b      	adds	r3, r3, r2
10049b66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10049b68:	429a      	cmp	r2, r3
10049b6a:	d305      	bcc.n	10049b78 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
10049b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b6e:	685b      	ldr	r3, [r3, #4]
10049b70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
10049b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10049b74:	429a      	cmp	r2, r3
10049b76:	d906      	bls.n	10049b86 <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
10049b78:	231b      	movs	r3, #27
10049b7a:	2220      	movs	r2, #32
10049b7c:	189b      	adds	r3, r3, r2
10049b7e:	19db      	adds	r3, r3, r7
10049b80:	2201      	movs	r2, #1
10049b82:	701a      	strb	r2, [r3, #0]
10049b84:	e0c3      	b.n	10049d0e <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10049b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049b88:	61bb      	str	r3, [r7, #24]
10049b8a:	2300      	movs	r3, #0
10049b8c:	61fb      	str	r3, [r7, #28]
10049b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049b92:	4b6e      	ldr	r3, [pc, #440]	@ (10049d4c <UART_SetConfig+0x2c8>)
10049b94:	0052      	lsls	r2, r2, #1
10049b96:	5ad3      	ldrh	r3, [r2, r3]
10049b98:	613b      	str	r3, [r7, #16]
10049b9a:	2300      	movs	r3, #0
10049b9c:	617b      	str	r3, [r7, #20]
10049b9e:	693a      	ldr	r2, [r7, #16]
10049ba0:	697b      	ldr	r3, [r7, #20]
10049ba2:	69b8      	ldr	r0, [r7, #24]
10049ba4:	69f9      	ldr	r1, [r7, #28]
10049ba6:	f7f6 fce3 	bl	10040570 <__aeabi_uldivmod>
10049baa:	0002      	movs	r2, r0
10049bac:	000b      	movs	r3, r1
10049bae:	0e11      	lsrs	r1, r2, #24
10049bb0:	021d      	lsls	r5, r3, #8
10049bb2:	430d      	orrs	r5, r1
10049bb4:	0214      	lsls	r4, r2, #8
10049bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bb8:	685b      	ldr	r3, [r3, #4]
10049bba:	085b      	lsrs	r3, r3, #1
10049bbc:	60bb      	str	r3, [r7, #8]
10049bbe:	2300      	movs	r3, #0
10049bc0:	60fb      	str	r3, [r7, #12]
10049bc2:	68b8      	ldr	r0, [r7, #8]
10049bc4:	68f9      	ldr	r1, [r7, #12]
10049bc6:	1900      	adds	r0, r0, r4
10049bc8:	4169      	adcs	r1, r5
10049bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bcc:	685b      	ldr	r3, [r3, #4]
10049bce:	603b      	str	r3, [r7, #0]
10049bd0:	2300      	movs	r3, #0
10049bd2:	607b      	str	r3, [r7, #4]
10049bd4:	683a      	ldr	r2, [r7, #0]
10049bd6:	687b      	ldr	r3, [r7, #4]
10049bd8:	f7f6 fcca 	bl	10040570 <__aeabi_uldivmod>
10049bdc:	0002      	movs	r2, r0
10049bde:	000b      	movs	r3, r1
10049be0:	0013      	movs	r3, r2
10049be2:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
10049be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049be6:	23c0      	movs	r3, #192	@ 0xc0
10049be8:	009b      	lsls	r3, r3, #2
10049bea:	429a      	cmp	r2, r3
10049bec:	d309      	bcc.n	10049c02 <UART_SetConfig+0x17e>
10049bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049bf0:	2380      	movs	r3, #128	@ 0x80
10049bf2:	035b      	lsls	r3, r3, #13
10049bf4:	429a      	cmp	r2, r3
10049bf6:	d204      	bcs.n	10049c02 <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
10049bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049bfa:	681b      	ldr	r3, [r3, #0]
10049bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049bfe:	60da      	str	r2, [r3, #12]
10049c00:	e085      	b.n	10049d0e <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
10049c02:	231b      	movs	r3, #27
10049c04:	2220      	movs	r2, #32
10049c06:	189b      	adds	r3, r3, r2
10049c08:	19db      	adds	r3, r3, r7
10049c0a:	2201      	movs	r2, #1
10049c0c:	701a      	strb	r2, [r3, #0]
10049c0e:	e07e      	b.n	10049d0e <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10049c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c12:	69da      	ldr	r2, [r3, #28]
10049c14:	2380      	movs	r3, #128	@ 0x80
10049c16:	021b      	lsls	r3, r3, #8
10049c18:	429a      	cmp	r2, r3
10049c1a:	d148      	bne.n	10049cae <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
10049c1c:	4b4c      	ldr	r3, [pc, #304]	@ (10049d50 <UART_SetConfig+0x2cc>)
10049c1e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
10049c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049c22:	2b00      	cmp	r3, #0
10049c24:	d100      	bne.n	10049c28 <UART_SetConfig+0x1a4>
10049c26:	e072      	b.n	10049d0e <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10049c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049c2c:	4b47      	ldr	r3, [pc, #284]	@ (10049d4c <UART_SetConfig+0x2c8>)
10049c2e:	0052      	lsls	r2, r2, #1
10049c30:	5ad3      	ldrh	r3, [r2, r3]
10049c32:	0019      	movs	r1, r3
10049c34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10049c36:	f7f6 fafb 	bl	10040230 <__udivsi3>
10049c3a:	0003      	movs	r3, r0
10049c3c:	005a      	lsls	r2, r3, #1
10049c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c40:	685b      	ldr	r3, [r3, #4]
10049c42:	085b      	lsrs	r3, r3, #1
10049c44:	18d2      	adds	r2, r2, r3
10049c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c48:	685b      	ldr	r3, [r3, #4]
10049c4a:	0019      	movs	r1, r3
10049c4c:	0010      	movs	r0, r2
10049c4e:	f7f6 faef 	bl	10040230 <__udivsi3>
10049c52:	0003      	movs	r3, r0
10049c54:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10049c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049c58:	2b0f      	cmp	r3, #15
10049c5a:	d921      	bls.n	10049ca0 <UART_SetConfig+0x21c>
10049c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049c5e:	2380      	movs	r3, #128	@ 0x80
10049c60:	025b      	lsls	r3, r3, #9
10049c62:	429a      	cmp	r2, r3
10049c64:	d21c      	bcs.n	10049ca0 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10049c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049c68:	b29a      	uxth	r2, r3
10049c6a:	200e      	movs	r0, #14
10049c6c:	2420      	movs	r4, #32
10049c6e:	1903      	adds	r3, r0, r4
10049c70:	19db      	adds	r3, r3, r7
10049c72:	210f      	movs	r1, #15
10049c74:	438a      	bics	r2, r1
10049c76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
10049c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049c7a:	085b      	lsrs	r3, r3, #1
10049c7c:	b29b      	uxth	r3, r3
10049c7e:	2207      	movs	r2, #7
10049c80:	4013      	ands	r3, r2
10049c82:	b299      	uxth	r1, r3
10049c84:	1903      	adds	r3, r0, r4
10049c86:	19db      	adds	r3, r3, r7
10049c88:	1902      	adds	r2, r0, r4
10049c8a:	19d2      	adds	r2, r2, r7
10049c8c:	8812      	ldrh	r2, [r2, #0]
10049c8e:	430a      	orrs	r2, r1
10049c90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
10049c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049c94:	681b      	ldr	r3, [r3, #0]
10049c96:	1902      	adds	r2, r0, r4
10049c98:	19d2      	adds	r2, r2, r7
10049c9a:	8812      	ldrh	r2, [r2, #0]
10049c9c:	60da      	str	r2, [r3, #12]
10049c9e:	e036      	b.n	10049d0e <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10049ca0:	231b      	movs	r3, #27
10049ca2:	2220      	movs	r2, #32
10049ca4:	189b      	adds	r3, r3, r2
10049ca6:	19db      	adds	r3, r3, r7
10049ca8:	2201      	movs	r2, #1
10049caa:	701a      	strb	r2, [r3, #0]
10049cac:	e02f      	b.n	10049d0e <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
10049cae:	4b28      	ldr	r3, [pc, #160]	@ (10049d50 <UART_SetConfig+0x2cc>)
10049cb0:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
10049cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049cb4:	2b00      	cmp	r3, #0
10049cb6:	d02a      	beq.n	10049d0e <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10049cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049cba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049cbc:	4b23      	ldr	r3, [pc, #140]	@ (10049d4c <UART_SetConfig+0x2c8>)
10049cbe:	0052      	lsls	r2, r2, #1
10049cc0:	5ad3      	ldrh	r3, [r2, r3]
10049cc2:	0019      	movs	r1, r3
10049cc4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10049cc6:	f7f6 fab3 	bl	10040230 <__udivsi3>
10049cca:	0003      	movs	r3, r0
10049ccc:	001a      	movs	r2, r3
10049cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049cd0:	685b      	ldr	r3, [r3, #4]
10049cd2:	085b      	lsrs	r3, r3, #1
10049cd4:	18d2      	adds	r2, r2, r3
10049cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049cd8:	685b      	ldr	r3, [r3, #4]
10049cda:	0019      	movs	r1, r3
10049cdc:	0010      	movs	r0, r2
10049cde:	f7f6 faa7 	bl	10040230 <__udivsi3>
10049ce2:	0003      	movs	r3, r0
10049ce4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10049ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049ce8:	2b0f      	cmp	r3, #15
10049cea:	d90a      	bls.n	10049d02 <UART_SetConfig+0x27e>
10049cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10049cee:	2380      	movs	r3, #128	@ 0x80
10049cf0:	025b      	lsls	r3, r3, #9
10049cf2:	429a      	cmp	r2, r3
10049cf4:	d205      	bcs.n	10049d02 <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
10049cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049cf8:	b29a      	uxth	r2, r3
10049cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049cfc:	681b      	ldr	r3, [r3, #0]
10049cfe:	60da      	str	r2, [r3, #12]
10049d00:	e005      	b.n	10049d0e <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
10049d02:	231b      	movs	r3, #27
10049d04:	2220      	movs	r2, #32
10049d06:	189b      	adds	r3, r3, r2
10049d08:	19db      	adds	r3, r3, r7
10049d0a:	2201      	movs	r2, #1
10049d0c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10049d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049d10:	226a      	movs	r2, #106	@ 0x6a
10049d12:	2101      	movs	r1, #1
10049d14:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
10049d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049d18:	2268      	movs	r2, #104	@ 0x68
10049d1a:	2101      	movs	r1, #1
10049d1c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10049d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049d20:	2200      	movs	r2, #0
10049d22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
10049d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10049d26:	2200      	movs	r2, #0
10049d28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
10049d2a:	231b      	movs	r3, #27
10049d2c:	2220      	movs	r2, #32
10049d2e:	189b      	adds	r3, r3, r2
10049d30:	19db      	adds	r3, r3, r7
10049d32:	781b      	ldrb	r3, [r3, #0]
}
10049d34:	0018      	movs	r0, r3
10049d36:	46bd      	mov	sp, r7
10049d38:	b010      	add	sp, #64	@ 0x40
10049d3a:	bdb0      	pop	{r4, r5, r7, pc}
10049d3c:	cfff69f3 	.word	0xcfff69f3
10049d40:	ffffcfff 	.word	0xffffcfff
10049d44:	41005000 	.word	0x41005000
10049d48:	11fff4ff 	.word	0x11fff4ff
10049d4c:	1004fdd4 	.word	0x1004fdd4
10049d50:	00f42400 	.word	0x00f42400

10049d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10049d54:	b580      	push	{r7, lr}
10049d56:	b082      	sub	sp, #8
10049d58:	af00      	add	r7, sp, #0
10049d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10049d5c:	687b      	ldr	r3, [r7, #4]
10049d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049d60:	2208      	movs	r2, #8
10049d62:	4013      	ands	r3, r2
10049d64:	d00b      	beq.n	10049d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10049d66:	687b      	ldr	r3, [r7, #4]
10049d68:	681b      	ldr	r3, [r3, #0]
10049d6a:	685b      	ldr	r3, [r3, #4]
10049d6c:	4a4a      	ldr	r2, [pc, #296]	@ (10049e98 <UART_AdvFeatureConfig+0x144>)
10049d6e:	4013      	ands	r3, r2
10049d70:	0019      	movs	r1, r3
10049d72:	687b      	ldr	r3, [r7, #4]
10049d74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10049d76:	687b      	ldr	r3, [r7, #4]
10049d78:	681b      	ldr	r3, [r3, #0]
10049d7a:	430a      	orrs	r2, r1
10049d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10049d7e:	687b      	ldr	r3, [r7, #4]
10049d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049d82:	2201      	movs	r2, #1
10049d84:	4013      	ands	r3, r2
10049d86:	d00b      	beq.n	10049da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10049d88:	687b      	ldr	r3, [r7, #4]
10049d8a:	681b      	ldr	r3, [r3, #0]
10049d8c:	685b      	ldr	r3, [r3, #4]
10049d8e:	4a43      	ldr	r2, [pc, #268]	@ (10049e9c <UART_AdvFeatureConfig+0x148>)
10049d90:	4013      	ands	r3, r2
10049d92:	0019      	movs	r1, r3
10049d94:	687b      	ldr	r3, [r7, #4]
10049d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10049d98:	687b      	ldr	r3, [r7, #4]
10049d9a:	681b      	ldr	r3, [r3, #0]
10049d9c:	430a      	orrs	r2, r1
10049d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10049da0:	687b      	ldr	r3, [r7, #4]
10049da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049da4:	2202      	movs	r2, #2
10049da6:	4013      	ands	r3, r2
10049da8:	d00b      	beq.n	10049dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10049daa:	687b      	ldr	r3, [r7, #4]
10049dac:	681b      	ldr	r3, [r3, #0]
10049dae:	685b      	ldr	r3, [r3, #4]
10049db0:	4a3b      	ldr	r2, [pc, #236]	@ (10049ea0 <UART_AdvFeatureConfig+0x14c>)
10049db2:	4013      	ands	r3, r2
10049db4:	0019      	movs	r1, r3
10049db6:	687b      	ldr	r3, [r7, #4]
10049db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10049dba:	687b      	ldr	r3, [r7, #4]
10049dbc:	681b      	ldr	r3, [r3, #0]
10049dbe:	430a      	orrs	r2, r1
10049dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10049dc2:	687b      	ldr	r3, [r7, #4]
10049dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049dc6:	2204      	movs	r2, #4
10049dc8:	4013      	ands	r3, r2
10049dca:	d00b      	beq.n	10049de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10049dcc:	687b      	ldr	r3, [r7, #4]
10049dce:	681b      	ldr	r3, [r3, #0]
10049dd0:	685b      	ldr	r3, [r3, #4]
10049dd2:	4a34      	ldr	r2, [pc, #208]	@ (10049ea4 <UART_AdvFeatureConfig+0x150>)
10049dd4:	4013      	ands	r3, r2
10049dd6:	0019      	movs	r1, r3
10049dd8:	687b      	ldr	r3, [r7, #4]
10049dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10049ddc:	687b      	ldr	r3, [r7, #4]
10049dde:	681b      	ldr	r3, [r3, #0]
10049de0:	430a      	orrs	r2, r1
10049de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10049de4:	687b      	ldr	r3, [r7, #4]
10049de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049de8:	2210      	movs	r2, #16
10049dea:	4013      	ands	r3, r2
10049dec:	d00b      	beq.n	10049e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10049dee:	687b      	ldr	r3, [r7, #4]
10049df0:	681b      	ldr	r3, [r3, #0]
10049df2:	689b      	ldr	r3, [r3, #8]
10049df4:	4a2c      	ldr	r2, [pc, #176]	@ (10049ea8 <UART_AdvFeatureConfig+0x154>)
10049df6:	4013      	ands	r3, r2
10049df8:	0019      	movs	r1, r3
10049dfa:	687b      	ldr	r3, [r7, #4]
10049dfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
10049dfe:	687b      	ldr	r3, [r7, #4]
10049e00:	681b      	ldr	r3, [r3, #0]
10049e02:	430a      	orrs	r2, r1
10049e04:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10049e06:	687b      	ldr	r3, [r7, #4]
10049e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049e0a:	2220      	movs	r2, #32
10049e0c:	4013      	ands	r3, r2
10049e0e:	d00b      	beq.n	10049e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10049e10:	687b      	ldr	r3, [r7, #4]
10049e12:	681b      	ldr	r3, [r3, #0]
10049e14:	689b      	ldr	r3, [r3, #8]
10049e16:	4a25      	ldr	r2, [pc, #148]	@ (10049eac <UART_AdvFeatureConfig+0x158>)
10049e18:	4013      	ands	r3, r2
10049e1a:	0019      	movs	r1, r3
10049e1c:	687b      	ldr	r3, [r7, #4]
10049e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10049e20:	687b      	ldr	r3, [r7, #4]
10049e22:	681b      	ldr	r3, [r3, #0]
10049e24:	430a      	orrs	r2, r1
10049e26:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10049e28:	687b      	ldr	r3, [r7, #4]
10049e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049e2c:	2240      	movs	r2, #64	@ 0x40
10049e2e:	4013      	ands	r3, r2
10049e30:	d01d      	beq.n	10049e6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10049e32:	687b      	ldr	r3, [r7, #4]
10049e34:	681b      	ldr	r3, [r3, #0]
10049e36:	685b      	ldr	r3, [r3, #4]
10049e38:	4a1d      	ldr	r2, [pc, #116]	@ (10049eb0 <UART_AdvFeatureConfig+0x15c>)
10049e3a:	4013      	ands	r3, r2
10049e3c:	0019      	movs	r1, r3
10049e3e:	687b      	ldr	r3, [r7, #4]
10049e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049e42:	687b      	ldr	r3, [r7, #4]
10049e44:	681b      	ldr	r3, [r3, #0]
10049e46:	430a      	orrs	r2, r1
10049e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10049e4a:	687b      	ldr	r3, [r7, #4]
10049e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049e4e:	2380      	movs	r3, #128	@ 0x80
10049e50:	035b      	lsls	r3, r3, #13
10049e52:	429a      	cmp	r2, r3
10049e54:	d10b      	bne.n	10049e6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10049e56:	687b      	ldr	r3, [r7, #4]
10049e58:	681b      	ldr	r3, [r3, #0]
10049e5a:	685b      	ldr	r3, [r3, #4]
10049e5c:	4a15      	ldr	r2, [pc, #84]	@ (10049eb4 <UART_AdvFeatureConfig+0x160>)
10049e5e:	4013      	ands	r3, r2
10049e60:	0019      	movs	r1, r3
10049e62:	687b      	ldr	r3, [r7, #4]
10049e64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
10049e66:	687b      	ldr	r3, [r7, #4]
10049e68:	681b      	ldr	r3, [r3, #0]
10049e6a:	430a      	orrs	r2, r1
10049e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10049e6e:	687b      	ldr	r3, [r7, #4]
10049e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049e72:	2280      	movs	r2, #128	@ 0x80
10049e74:	4013      	ands	r3, r2
10049e76:	d00b      	beq.n	10049e90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10049e78:	687b      	ldr	r3, [r7, #4]
10049e7a:	681b      	ldr	r3, [r3, #0]
10049e7c:	685b      	ldr	r3, [r3, #4]
10049e7e:	4a0e      	ldr	r2, [pc, #56]	@ (10049eb8 <UART_AdvFeatureConfig+0x164>)
10049e80:	4013      	ands	r3, r2
10049e82:	0019      	movs	r1, r3
10049e84:	687b      	ldr	r3, [r7, #4]
10049e86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
10049e88:	687b      	ldr	r3, [r7, #4]
10049e8a:	681b      	ldr	r3, [r3, #0]
10049e8c:	430a      	orrs	r2, r1
10049e8e:	605a      	str	r2, [r3, #4]
  }
}
10049e90:	46c0      	nop			@ (mov r8, r8)
10049e92:	46bd      	mov	sp, r7
10049e94:	b002      	add	sp, #8
10049e96:	bd80      	pop	{r7, pc}
10049e98:	ffff7fff 	.word	0xffff7fff
10049e9c:	fffdffff 	.word	0xfffdffff
10049ea0:	fffeffff 	.word	0xfffeffff
10049ea4:	fffbffff 	.word	0xfffbffff
10049ea8:	ffffefff 	.word	0xffffefff
10049eac:	ffffdfff 	.word	0xffffdfff
10049eb0:	ffefffff 	.word	0xffefffff
10049eb4:	ff9fffff 	.word	0xff9fffff
10049eb8:	fff7ffff 	.word	0xfff7ffff

10049ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10049ebc:	b580      	push	{r7, lr}
10049ebe:	b092      	sub	sp, #72	@ 0x48
10049ec0:	af02      	add	r7, sp, #8
10049ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10049ec4:	687b      	ldr	r3, [r7, #4]
10049ec6:	2290      	movs	r2, #144	@ 0x90
10049ec8:	2100      	movs	r1, #0
10049eca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
10049ecc:	f7fb fe0e 	bl	10045aec <HAL_GetTick>
10049ed0:	0003      	movs	r3, r0
10049ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10049ed4:	687b      	ldr	r3, [r7, #4]
10049ed6:	681b      	ldr	r3, [r3, #0]
10049ed8:	681b      	ldr	r3, [r3, #0]
10049eda:	2208      	movs	r2, #8
10049edc:	4013      	ands	r3, r2
10049ede:	2b08      	cmp	r3, #8
10049ee0:	d12d      	bne.n	10049f3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10049ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049ee4:	2280      	movs	r2, #128	@ 0x80
10049ee6:	0391      	lsls	r1, r2, #14
10049ee8:	6878      	ldr	r0, [r7, #4]
10049eea:	4a47      	ldr	r2, [pc, #284]	@ (1004a008 <UART_CheckIdleState+0x14c>)
10049eec:	9200      	str	r2, [sp, #0]
10049eee:	2200      	movs	r2, #0
10049ef0:	f000 f88e 	bl	1004a010 <UART_WaitOnFlagUntilTimeout>
10049ef4:	1e03      	subs	r3, r0, #0
10049ef6:	d022      	beq.n	10049f3e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049ef8:	f3ef 8310 	mrs	r3, PRIMASK
10049efc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
10049efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
10049f00:	63bb      	str	r3, [r7, #56]	@ 0x38
10049f02:	2301      	movs	r3, #1
10049f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049f08:	f383 8810 	msr	PRIMASK, r3
}
10049f0c:	46c0      	nop			@ (mov r8, r8)
10049f0e:	687b      	ldr	r3, [r7, #4]
10049f10:	681b      	ldr	r3, [r3, #0]
10049f12:	681a      	ldr	r2, [r3, #0]
10049f14:	687b      	ldr	r3, [r7, #4]
10049f16:	681b      	ldr	r3, [r3, #0]
10049f18:	2180      	movs	r1, #128	@ 0x80
10049f1a:	438a      	bics	r2, r1
10049f1c:	601a      	str	r2, [r3, #0]
10049f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10049f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10049f24:	f383 8810 	msr	PRIMASK, r3
}
10049f28:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
10049f2a:	687b      	ldr	r3, [r7, #4]
10049f2c:	2288      	movs	r2, #136	@ 0x88
10049f2e:	2120      	movs	r1, #32
10049f30:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10049f32:	687b      	ldr	r3, [r7, #4]
10049f34:	2284      	movs	r2, #132	@ 0x84
10049f36:	2100      	movs	r1, #0
10049f38:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10049f3a:	2303      	movs	r3, #3
10049f3c:	e060      	b.n	1004a000 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10049f3e:	687b      	ldr	r3, [r7, #4]
10049f40:	681b      	ldr	r3, [r3, #0]
10049f42:	681b      	ldr	r3, [r3, #0]
10049f44:	2204      	movs	r2, #4
10049f46:	4013      	ands	r3, r2
10049f48:	2b04      	cmp	r3, #4
10049f4a:	d146      	bne.n	10049fda <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10049f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10049f4e:	2280      	movs	r2, #128	@ 0x80
10049f50:	03d1      	lsls	r1, r2, #15
10049f52:	6878      	ldr	r0, [r7, #4]
10049f54:	4a2c      	ldr	r2, [pc, #176]	@ (1004a008 <UART_CheckIdleState+0x14c>)
10049f56:	9200      	str	r2, [sp, #0]
10049f58:	2200      	movs	r2, #0
10049f5a:	f000 f859 	bl	1004a010 <UART_WaitOnFlagUntilTimeout>
10049f5e:	1e03      	subs	r3, r0, #0
10049f60:	d03b      	beq.n	10049fda <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049f62:	f3ef 8310 	mrs	r3, PRIMASK
10049f66:	60fb      	str	r3, [r7, #12]
  return(result);
10049f68:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
10049f6a:	637b      	str	r3, [r7, #52]	@ 0x34
10049f6c:	2301      	movs	r3, #1
10049f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049f70:	693b      	ldr	r3, [r7, #16]
10049f72:	f383 8810 	msr	PRIMASK, r3
}
10049f76:	46c0      	nop			@ (mov r8, r8)
10049f78:	687b      	ldr	r3, [r7, #4]
10049f7a:	681b      	ldr	r3, [r3, #0]
10049f7c:	681a      	ldr	r2, [r3, #0]
10049f7e:	687b      	ldr	r3, [r7, #4]
10049f80:	681b      	ldr	r3, [r3, #0]
10049f82:	4922      	ldr	r1, [pc, #136]	@ (1004a00c <UART_CheckIdleState+0x150>)
10049f84:	400a      	ands	r2, r1
10049f86:	601a      	str	r2, [r3, #0]
10049f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10049f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049f8c:	697b      	ldr	r3, [r7, #20]
10049f8e:	f383 8810 	msr	PRIMASK, r3
}
10049f92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10049f94:	f3ef 8310 	mrs	r3, PRIMASK
10049f98:	61bb      	str	r3, [r7, #24]
  return(result);
10049f9a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10049f9c:	633b      	str	r3, [r7, #48]	@ 0x30
10049f9e:	2301      	movs	r3, #1
10049fa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049fa2:	69fb      	ldr	r3, [r7, #28]
10049fa4:	f383 8810 	msr	PRIMASK, r3
}
10049fa8:	46c0      	nop			@ (mov r8, r8)
10049faa:	687b      	ldr	r3, [r7, #4]
10049fac:	681b      	ldr	r3, [r3, #0]
10049fae:	689a      	ldr	r2, [r3, #8]
10049fb0:	687b      	ldr	r3, [r7, #4]
10049fb2:	681b      	ldr	r3, [r3, #0]
10049fb4:	2101      	movs	r1, #1
10049fb6:	438a      	bics	r2, r1
10049fb8:	609a      	str	r2, [r3, #8]
10049fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10049fbc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10049fbe:	6a3b      	ldr	r3, [r7, #32]
10049fc0:	f383 8810 	msr	PRIMASK, r3
}
10049fc4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
10049fc6:	687b      	ldr	r3, [r7, #4]
10049fc8:	228c      	movs	r2, #140	@ 0x8c
10049fca:	2120      	movs	r1, #32
10049fcc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
10049fce:	687b      	ldr	r3, [r7, #4]
10049fd0:	2284      	movs	r2, #132	@ 0x84
10049fd2:	2100      	movs	r1, #0
10049fd4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
10049fd6:	2303      	movs	r3, #3
10049fd8:	e012      	b.n	1004a000 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10049fda:	687b      	ldr	r3, [r7, #4]
10049fdc:	2288      	movs	r2, #136	@ 0x88
10049fde:	2120      	movs	r1, #32
10049fe0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
10049fe2:	687b      	ldr	r3, [r7, #4]
10049fe4:	228c      	movs	r2, #140	@ 0x8c
10049fe6:	2120      	movs	r1, #32
10049fe8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
10049fea:	687b      	ldr	r3, [r7, #4]
10049fec:	2200      	movs	r2, #0
10049fee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
10049ff0:	687b      	ldr	r3, [r7, #4]
10049ff2:	2200      	movs	r2, #0
10049ff4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
10049ff6:	687b      	ldr	r3, [r7, #4]
10049ff8:	2284      	movs	r2, #132	@ 0x84
10049ffa:	2100      	movs	r1, #0
10049ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049ffe:	2300      	movs	r3, #0
}
1004a000:	0018      	movs	r0, r3
1004a002:	46bd      	mov	sp, r7
1004a004:	b010      	add	sp, #64	@ 0x40
1004a006:	bd80      	pop	{r7, pc}
1004a008:	01ffffff 	.word	0x01ffffff
1004a00c:	fffffedf 	.word	0xfffffedf

1004a010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1004a010:	b580      	push	{r7, lr}
1004a012:	b084      	sub	sp, #16
1004a014:	af00      	add	r7, sp, #0
1004a016:	60f8      	str	r0, [r7, #12]
1004a018:	60b9      	str	r1, [r7, #8]
1004a01a:	603b      	str	r3, [r7, #0]
1004a01c:	1dfb      	adds	r3, r7, #7
1004a01e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004a020:	e051      	b.n	1004a0c6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1004a022:	69bb      	ldr	r3, [r7, #24]
1004a024:	3301      	adds	r3, #1
1004a026:	d04e      	beq.n	1004a0c6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1004a028:	f7fb fd60 	bl	10045aec <HAL_GetTick>
1004a02c:	0002      	movs	r2, r0
1004a02e:	683b      	ldr	r3, [r7, #0]
1004a030:	1ad3      	subs	r3, r2, r3
1004a032:	69ba      	ldr	r2, [r7, #24]
1004a034:	429a      	cmp	r2, r3
1004a036:	d302      	bcc.n	1004a03e <UART_WaitOnFlagUntilTimeout+0x2e>
1004a038:	69bb      	ldr	r3, [r7, #24]
1004a03a:	2b00      	cmp	r3, #0
1004a03c:	d101      	bne.n	1004a042 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1004a03e:	2303      	movs	r3, #3
1004a040:	e051      	b.n	1004a0e6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004a042:	68fb      	ldr	r3, [r7, #12]
1004a044:	681b      	ldr	r3, [r3, #0]
1004a046:	681b      	ldr	r3, [r3, #0]
1004a048:	2204      	movs	r2, #4
1004a04a:	4013      	ands	r3, r2
1004a04c:	d03b      	beq.n	1004a0c6 <UART_WaitOnFlagUntilTimeout+0xb6>
1004a04e:	68bb      	ldr	r3, [r7, #8]
1004a050:	2b80      	cmp	r3, #128	@ 0x80
1004a052:	d038      	beq.n	1004a0c6 <UART_WaitOnFlagUntilTimeout+0xb6>
1004a054:	68bb      	ldr	r3, [r7, #8]
1004a056:	2b40      	cmp	r3, #64	@ 0x40
1004a058:	d035      	beq.n	1004a0c6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004a05a:	68fb      	ldr	r3, [r7, #12]
1004a05c:	681b      	ldr	r3, [r3, #0]
1004a05e:	69db      	ldr	r3, [r3, #28]
1004a060:	2208      	movs	r2, #8
1004a062:	4013      	ands	r3, r2
1004a064:	2b08      	cmp	r3, #8
1004a066:	d111      	bne.n	1004a08c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004a068:	68fb      	ldr	r3, [r7, #12]
1004a06a:	681b      	ldr	r3, [r3, #0]
1004a06c:	2208      	movs	r2, #8
1004a06e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004a070:	68fb      	ldr	r3, [r7, #12]
1004a072:	0018      	movs	r0, r3
1004a074:	f000 f83c 	bl	1004a0f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004a078:	68fb      	ldr	r3, [r7, #12]
1004a07a:	2290      	movs	r2, #144	@ 0x90
1004a07c:	2108      	movs	r1, #8
1004a07e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004a080:	68fb      	ldr	r3, [r7, #12]
1004a082:	2284      	movs	r2, #132	@ 0x84
1004a084:	2100      	movs	r1, #0
1004a086:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
1004a088:	2301      	movs	r3, #1
1004a08a:	e02c      	b.n	1004a0e6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1004a08c:	68fb      	ldr	r3, [r7, #12]
1004a08e:	681b      	ldr	r3, [r3, #0]
1004a090:	69da      	ldr	r2, [r3, #28]
1004a092:	2380      	movs	r3, #128	@ 0x80
1004a094:	011b      	lsls	r3, r3, #4
1004a096:	401a      	ands	r2, r3
1004a098:	2380      	movs	r3, #128	@ 0x80
1004a09a:	011b      	lsls	r3, r3, #4
1004a09c:	429a      	cmp	r2, r3
1004a09e:	d112      	bne.n	1004a0c6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004a0a0:	68fb      	ldr	r3, [r7, #12]
1004a0a2:	681b      	ldr	r3, [r3, #0]
1004a0a4:	2280      	movs	r2, #128	@ 0x80
1004a0a6:	0112      	lsls	r2, r2, #4
1004a0a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004a0aa:	68fb      	ldr	r3, [r7, #12]
1004a0ac:	0018      	movs	r0, r3
1004a0ae:	f000 f81f 	bl	1004a0f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004a0b2:	68fb      	ldr	r3, [r7, #12]
1004a0b4:	2290      	movs	r2, #144	@ 0x90
1004a0b6:	2120      	movs	r1, #32
1004a0b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004a0ba:	68fb      	ldr	r3, [r7, #12]
1004a0bc:	2284      	movs	r2, #132	@ 0x84
1004a0be:	2100      	movs	r1, #0
1004a0c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004a0c2:	2303      	movs	r3, #3
1004a0c4:	e00f      	b.n	1004a0e6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004a0c6:	68fb      	ldr	r3, [r7, #12]
1004a0c8:	681b      	ldr	r3, [r3, #0]
1004a0ca:	69db      	ldr	r3, [r3, #28]
1004a0cc:	68ba      	ldr	r2, [r7, #8]
1004a0ce:	4013      	ands	r3, r2
1004a0d0:	68ba      	ldr	r2, [r7, #8]
1004a0d2:	1ad3      	subs	r3, r2, r3
1004a0d4:	425a      	negs	r2, r3
1004a0d6:	4153      	adcs	r3, r2
1004a0d8:	b2db      	uxtb	r3, r3
1004a0da:	001a      	movs	r2, r3
1004a0dc:	1dfb      	adds	r3, r7, #7
1004a0de:	781b      	ldrb	r3, [r3, #0]
1004a0e0:	429a      	cmp	r2, r3
1004a0e2:	d09e      	beq.n	1004a022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004a0e4:	2300      	movs	r3, #0
}
1004a0e6:	0018      	movs	r0, r3
1004a0e8:	46bd      	mov	sp, r7
1004a0ea:	b004      	add	sp, #16
1004a0ec:	bd80      	pop	{r7, pc}
	...

1004a0f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004a0f0:	b580      	push	{r7, lr}
1004a0f2:	b08e      	sub	sp, #56	@ 0x38
1004a0f4:	af00      	add	r7, sp, #0
1004a0f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a0f8:	f3ef 8310 	mrs	r3, PRIMASK
1004a0fc:	617b      	str	r3, [r7, #20]
  return(result);
1004a0fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004a100:	637b      	str	r3, [r7, #52]	@ 0x34
1004a102:	2301      	movs	r3, #1
1004a104:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a106:	69bb      	ldr	r3, [r7, #24]
1004a108:	f383 8810 	msr	PRIMASK, r3
}
1004a10c:	46c0      	nop			@ (mov r8, r8)
1004a10e:	687b      	ldr	r3, [r7, #4]
1004a110:	681b      	ldr	r3, [r3, #0]
1004a112:	681a      	ldr	r2, [r3, #0]
1004a114:	687b      	ldr	r3, [r7, #4]
1004a116:	681b      	ldr	r3, [r3, #0]
1004a118:	4926      	ldr	r1, [pc, #152]	@ (1004a1b4 <UART_EndRxTransfer+0xc4>)
1004a11a:	400a      	ands	r2, r1
1004a11c:	601a      	str	r2, [r3, #0]
1004a11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004a120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a122:	69fb      	ldr	r3, [r7, #28]
1004a124:	f383 8810 	msr	PRIMASK, r3
}
1004a128:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a12a:	f3ef 8310 	mrs	r3, PRIMASK
1004a12e:	623b      	str	r3, [r7, #32]
  return(result);
1004a130:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004a132:	633b      	str	r3, [r7, #48]	@ 0x30
1004a134:	2301      	movs	r3, #1
1004a136:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a13a:	f383 8810 	msr	PRIMASK, r3
}
1004a13e:	46c0      	nop			@ (mov r8, r8)
1004a140:	687b      	ldr	r3, [r7, #4]
1004a142:	681b      	ldr	r3, [r3, #0]
1004a144:	689a      	ldr	r2, [r3, #8]
1004a146:	687b      	ldr	r3, [r7, #4]
1004a148:	681b      	ldr	r3, [r3, #0]
1004a14a:	491b      	ldr	r1, [pc, #108]	@ (1004a1b8 <UART_EndRxTransfer+0xc8>)
1004a14c:	400a      	ands	r2, r1
1004a14e:	609a      	str	r2, [r3, #8]
1004a150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004a152:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004a156:	f383 8810 	msr	PRIMASK, r3
}
1004a15a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004a15c:	687b      	ldr	r3, [r7, #4]
1004a15e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004a160:	2b01      	cmp	r3, #1
1004a162:	d118      	bne.n	1004a196 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a164:	f3ef 8310 	mrs	r3, PRIMASK
1004a168:	60bb      	str	r3, [r7, #8]
  return(result);
1004a16a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004a16c:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004a16e:	2301      	movs	r3, #1
1004a170:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a172:	68fb      	ldr	r3, [r7, #12]
1004a174:	f383 8810 	msr	PRIMASK, r3
}
1004a178:	46c0      	nop			@ (mov r8, r8)
1004a17a:	687b      	ldr	r3, [r7, #4]
1004a17c:	681b      	ldr	r3, [r3, #0]
1004a17e:	681a      	ldr	r2, [r3, #0]
1004a180:	687b      	ldr	r3, [r7, #4]
1004a182:	681b      	ldr	r3, [r3, #0]
1004a184:	2110      	movs	r1, #16
1004a186:	438a      	bics	r2, r1
1004a188:	601a      	str	r2, [r3, #0]
1004a18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004a18c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a18e:	693b      	ldr	r3, [r7, #16]
1004a190:	f383 8810 	msr	PRIMASK, r3
}
1004a194:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004a196:	687b      	ldr	r3, [r7, #4]
1004a198:	228c      	movs	r2, #140	@ 0x8c
1004a19a:	2120      	movs	r1, #32
1004a19c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004a19e:	687b      	ldr	r3, [r7, #4]
1004a1a0:	2200      	movs	r2, #0
1004a1a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004a1a4:	687b      	ldr	r3, [r7, #4]
1004a1a6:	2200      	movs	r2, #0
1004a1a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
1004a1aa:	46c0      	nop			@ (mov r8, r8)
1004a1ac:	46bd      	mov	sp, r7
1004a1ae:	b00e      	add	sp, #56	@ 0x38
1004a1b0:	bd80      	pop	{r7, pc}
1004a1b2:	46c0      	nop			@ (mov r8, r8)
1004a1b4:	fffffedf 	.word	0xfffffedf
1004a1b8:	effffffe 	.word	0xeffffffe

1004a1bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
1004a1bc:	b580      	push	{r7, lr}
1004a1be:	b084      	sub	sp, #16
1004a1c0:	af00      	add	r7, sp, #0
1004a1c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1004a1c4:	687b      	ldr	r3, [r7, #4]
1004a1c6:	2284      	movs	r2, #132	@ 0x84
1004a1c8:	5c9b      	ldrb	r3, [r3, r2]
1004a1ca:	2b01      	cmp	r3, #1
1004a1cc:	d101      	bne.n	1004a1d2 <HAL_UARTEx_DisableFifoMode+0x16>
1004a1ce:	2302      	movs	r3, #2
1004a1d0:	e027      	b.n	1004a222 <HAL_UARTEx_DisableFifoMode+0x66>
1004a1d2:	687b      	ldr	r3, [r7, #4]
1004a1d4:	2284      	movs	r2, #132	@ 0x84
1004a1d6:	2101      	movs	r1, #1
1004a1d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004a1da:	687b      	ldr	r3, [r7, #4]
1004a1dc:	2288      	movs	r2, #136	@ 0x88
1004a1de:	2124      	movs	r1, #36	@ 0x24
1004a1e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004a1e2:	687b      	ldr	r3, [r7, #4]
1004a1e4:	681b      	ldr	r3, [r3, #0]
1004a1e6:	681b      	ldr	r3, [r3, #0]
1004a1e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004a1ea:	687b      	ldr	r3, [r7, #4]
1004a1ec:	681b      	ldr	r3, [r3, #0]
1004a1ee:	681a      	ldr	r2, [r3, #0]
1004a1f0:	687b      	ldr	r3, [r7, #4]
1004a1f2:	681b      	ldr	r3, [r3, #0]
1004a1f4:	2101      	movs	r1, #1
1004a1f6:	438a      	bics	r2, r1
1004a1f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
1004a1fa:	68fb      	ldr	r3, [r7, #12]
1004a1fc:	4a0b      	ldr	r2, [pc, #44]	@ (1004a22c <HAL_UARTEx_DisableFifoMode+0x70>)
1004a1fe:	4013      	ands	r3, r2
1004a200:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1004a202:	687b      	ldr	r3, [r7, #4]
1004a204:	2200      	movs	r2, #0
1004a206:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004a208:	687b      	ldr	r3, [r7, #4]
1004a20a:	681b      	ldr	r3, [r3, #0]
1004a20c:	68fa      	ldr	r2, [r7, #12]
1004a20e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004a210:	687b      	ldr	r3, [r7, #4]
1004a212:	2288      	movs	r2, #136	@ 0x88
1004a214:	2120      	movs	r1, #32
1004a216:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004a218:	687b      	ldr	r3, [r7, #4]
1004a21a:	2284      	movs	r2, #132	@ 0x84
1004a21c:	2100      	movs	r1, #0
1004a21e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004a220:	2300      	movs	r3, #0
}
1004a222:	0018      	movs	r0, r3
1004a224:	46bd      	mov	sp, r7
1004a226:	b004      	add	sp, #16
1004a228:	bd80      	pop	{r7, pc}
1004a22a:	46c0      	nop			@ (mov r8, r8)
1004a22c:	dfffffff 	.word	0xdfffffff

1004a230 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004a230:	b580      	push	{r7, lr}
1004a232:	b084      	sub	sp, #16
1004a234:	af00      	add	r7, sp, #0
1004a236:	6078      	str	r0, [r7, #4]
1004a238:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004a23a:	687b      	ldr	r3, [r7, #4]
1004a23c:	2284      	movs	r2, #132	@ 0x84
1004a23e:	5c9b      	ldrb	r3, [r3, r2]
1004a240:	2b01      	cmp	r3, #1
1004a242:	d101      	bne.n	1004a248 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004a244:	2302      	movs	r3, #2
1004a246:	e02e      	b.n	1004a2a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004a248:	687b      	ldr	r3, [r7, #4]
1004a24a:	2284      	movs	r2, #132	@ 0x84
1004a24c:	2101      	movs	r1, #1
1004a24e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004a250:	687b      	ldr	r3, [r7, #4]
1004a252:	2288      	movs	r2, #136	@ 0x88
1004a254:	2124      	movs	r1, #36	@ 0x24
1004a256:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004a258:	687b      	ldr	r3, [r7, #4]
1004a25a:	681b      	ldr	r3, [r3, #0]
1004a25c:	681b      	ldr	r3, [r3, #0]
1004a25e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004a260:	687b      	ldr	r3, [r7, #4]
1004a262:	681b      	ldr	r3, [r3, #0]
1004a264:	681a      	ldr	r2, [r3, #0]
1004a266:	687b      	ldr	r3, [r7, #4]
1004a268:	681b      	ldr	r3, [r3, #0]
1004a26a:	2101      	movs	r1, #1
1004a26c:	438a      	bics	r2, r1
1004a26e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1004a270:	687b      	ldr	r3, [r7, #4]
1004a272:	681b      	ldr	r3, [r3, #0]
1004a274:	689b      	ldr	r3, [r3, #8]
1004a276:	00db      	lsls	r3, r3, #3
1004a278:	08d9      	lsrs	r1, r3, #3
1004a27a:	687b      	ldr	r3, [r7, #4]
1004a27c:	681b      	ldr	r3, [r3, #0]
1004a27e:	683a      	ldr	r2, [r7, #0]
1004a280:	430a      	orrs	r2, r1
1004a282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004a284:	687b      	ldr	r3, [r7, #4]
1004a286:	0018      	movs	r0, r3
1004a288:	f000 f854 	bl	1004a334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004a28c:	687b      	ldr	r3, [r7, #4]
1004a28e:	681b      	ldr	r3, [r3, #0]
1004a290:	68fa      	ldr	r2, [r7, #12]
1004a292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004a294:	687b      	ldr	r3, [r7, #4]
1004a296:	2288      	movs	r2, #136	@ 0x88
1004a298:	2120      	movs	r1, #32
1004a29a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004a29c:	687b      	ldr	r3, [r7, #4]
1004a29e:	2284      	movs	r2, #132	@ 0x84
1004a2a0:	2100      	movs	r1, #0
1004a2a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004a2a4:	2300      	movs	r3, #0
}
1004a2a6:	0018      	movs	r0, r3
1004a2a8:	46bd      	mov	sp, r7
1004a2aa:	b004      	add	sp, #16
1004a2ac:	bd80      	pop	{r7, pc}
	...

1004a2b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004a2b0:	b580      	push	{r7, lr}
1004a2b2:	b084      	sub	sp, #16
1004a2b4:	af00      	add	r7, sp, #0
1004a2b6:	6078      	str	r0, [r7, #4]
1004a2b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004a2ba:	687b      	ldr	r3, [r7, #4]
1004a2bc:	2284      	movs	r2, #132	@ 0x84
1004a2be:	5c9b      	ldrb	r3, [r3, r2]
1004a2c0:	2b01      	cmp	r3, #1
1004a2c2:	d101      	bne.n	1004a2c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1004a2c4:	2302      	movs	r3, #2
1004a2c6:	e02f      	b.n	1004a328 <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004a2c8:	687b      	ldr	r3, [r7, #4]
1004a2ca:	2284      	movs	r2, #132	@ 0x84
1004a2cc:	2101      	movs	r1, #1
1004a2ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004a2d0:	687b      	ldr	r3, [r7, #4]
1004a2d2:	2288      	movs	r2, #136	@ 0x88
1004a2d4:	2124      	movs	r1, #36	@ 0x24
1004a2d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004a2d8:	687b      	ldr	r3, [r7, #4]
1004a2da:	681b      	ldr	r3, [r3, #0]
1004a2dc:	681b      	ldr	r3, [r3, #0]
1004a2de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004a2e0:	687b      	ldr	r3, [r7, #4]
1004a2e2:	681b      	ldr	r3, [r3, #0]
1004a2e4:	681a      	ldr	r2, [r3, #0]
1004a2e6:	687b      	ldr	r3, [r7, #4]
1004a2e8:	681b      	ldr	r3, [r3, #0]
1004a2ea:	2101      	movs	r1, #1
1004a2ec:	438a      	bics	r2, r1
1004a2ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1004a2f0:	687b      	ldr	r3, [r7, #4]
1004a2f2:	681b      	ldr	r3, [r3, #0]
1004a2f4:	689b      	ldr	r3, [r3, #8]
1004a2f6:	4a0e      	ldr	r2, [pc, #56]	@ (1004a330 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004a2f8:	4013      	ands	r3, r2
1004a2fa:	0019      	movs	r1, r3
1004a2fc:	687b      	ldr	r3, [r7, #4]
1004a2fe:	681b      	ldr	r3, [r3, #0]
1004a300:	683a      	ldr	r2, [r7, #0]
1004a302:	430a      	orrs	r2, r1
1004a304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004a306:	687b      	ldr	r3, [r7, #4]
1004a308:	0018      	movs	r0, r3
1004a30a:	f000 f813 	bl	1004a334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004a30e:	687b      	ldr	r3, [r7, #4]
1004a310:	681b      	ldr	r3, [r3, #0]
1004a312:	68fa      	ldr	r2, [r7, #12]
1004a314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004a316:	687b      	ldr	r3, [r7, #4]
1004a318:	2288      	movs	r2, #136	@ 0x88
1004a31a:	2120      	movs	r1, #32
1004a31c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004a31e:	687b      	ldr	r3, [r7, #4]
1004a320:	2284      	movs	r2, #132	@ 0x84
1004a322:	2100      	movs	r1, #0
1004a324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004a326:	2300      	movs	r3, #0
}
1004a328:	0018      	movs	r0, r3
1004a32a:	46bd      	mov	sp, r7
1004a32c:	b004      	add	sp, #16
1004a32e:	bd80      	pop	{r7, pc}
1004a330:	f1ffffff 	.word	0xf1ffffff

1004a334 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1004a334:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a336:	b085      	sub	sp, #20
1004a338:	af00      	add	r7, sp, #0
1004a33a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004a33c:	687b      	ldr	r3, [r7, #4]
1004a33e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1004a340:	2b00      	cmp	r3, #0
1004a342:	d108      	bne.n	1004a356 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
1004a344:	687b      	ldr	r3, [r7, #4]
1004a346:	226a      	movs	r2, #106	@ 0x6a
1004a348:	2101      	movs	r1, #1
1004a34a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004a34c:	687b      	ldr	r3, [r7, #4]
1004a34e:	2268      	movs	r2, #104	@ 0x68
1004a350:	2101      	movs	r1, #1
1004a352:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
1004a354:	e043      	b.n	1004a3de <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004a356:	260f      	movs	r6, #15
1004a358:	19bb      	adds	r3, r7, r6
1004a35a:	2208      	movs	r2, #8
1004a35c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
1004a35e:	200e      	movs	r0, #14
1004a360:	183b      	adds	r3, r7, r0
1004a362:	2208      	movs	r2, #8
1004a364:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004a366:	687b      	ldr	r3, [r7, #4]
1004a368:	681b      	ldr	r3, [r3, #0]
1004a36a:	689b      	ldr	r3, [r3, #8]
1004a36c:	0e5b      	lsrs	r3, r3, #25
1004a36e:	b2da      	uxtb	r2, r3
1004a370:	240d      	movs	r4, #13
1004a372:	193b      	adds	r3, r7, r4
1004a374:	2107      	movs	r1, #7
1004a376:	400a      	ands	r2, r1
1004a378:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004a37a:	687b      	ldr	r3, [r7, #4]
1004a37c:	681b      	ldr	r3, [r3, #0]
1004a37e:	689b      	ldr	r3, [r3, #8]
1004a380:	0f5b      	lsrs	r3, r3, #29
1004a382:	b2da      	uxtb	r2, r3
1004a384:	250c      	movs	r5, #12
1004a386:	197b      	adds	r3, r7, r5
1004a388:	2107      	movs	r1, #7
1004a38a:	400a      	ands	r2, r1
1004a38c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004a38e:	183b      	adds	r3, r7, r0
1004a390:	781b      	ldrb	r3, [r3, #0]
1004a392:	197a      	adds	r2, r7, r5
1004a394:	7812      	ldrb	r2, [r2, #0]
1004a396:	4914      	ldr	r1, [pc, #80]	@ (1004a3e8 <UARTEx_SetNbDataToProcess+0xb4>)
1004a398:	5c8a      	ldrb	r2, [r1, r2]
1004a39a:	435a      	muls	r2, r3
1004a39c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
1004a39e:	197b      	adds	r3, r7, r5
1004a3a0:	781b      	ldrb	r3, [r3, #0]
1004a3a2:	4a12      	ldr	r2, [pc, #72]	@ (1004a3ec <UARTEx_SetNbDataToProcess+0xb8>)
1004a3a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004a3a6:	0019      	movs	r1, r3
1004a3a8:	f7f5 ffcc 	bl	10040344 <__divsi3>
1004a3ac:	0003      	movs	r3, r0
1004a3ae:	b299      	uxth	r1, r3
1004a3b0:	687b      	ldr	r3, [r7, #4]
1004a3b2:	226a      	movs	r2, #106	@ 0x6a
1004a3b4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004a3b6:	19bb      	adds	r3, r7, r6
1004a3b8:	781b      	ldrb	r3, [r3, #0]
1004a3ba:	193a      	adds	r2, r7, r4
1004a3bc:	7812      	ldrb	r2, [r2, #0]
1004a3be:	490a      	ldr	r1, [pc, #40]	@ (1004a3e8 <UARTEx_SetNbDataToProcess+0xb4>)
1004a3c0:	5c8a      	ldrb	r2, [r1, r2]
1004a3c2:	435a      	muls	r2, r3
1004a3c4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004a3c6:	193b      	adds	r3, r7, r4
1004a3c8:	781b      	ldrb	r3, [r3, #0]
1004a3ca:	4a08      	ldr	r2, [pc, #32]	@ (1004a3ec <UARTEx_SetNbDataToProcess+0xb8>)
1004a3cc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004a3ce:	0019      	movs	r1, r3
1004a3d0:	f7f5 ffb8 	bl	10040344 <__divsi3>
1004a3d4:	0003      	movs	r3, r0
1004a3d6:	b299      	uxth	r1, r3
1004a3d8:	687b      	ldr	r3, [r7, #4]
1004a3da:	2268      	movs	r2, #104	@ 0x68
1004a3dc:	5299      	strh	r1, [r3, r2]
}
1004a3de:	46c0      	nop			@ (mov r8, r8)
1004a3e0:	46bd      	mov	sp, r7
1004a3e2:	b005      	add	sp, #20
1004a3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004a3e6:	46c0      	nop			@ (mov r8, r8)
1004a3e8:	1004fdec 	.word	0x1004fdec
1004a3ec:	1004fdf4 	.word	0x1004fdf4

1004a3f0 <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
1004a3f0:	b580      	push	{r7, lr}
1004a3f2:	b088      	sub	sp, #32
1004a3f4:	af00      	add	r7, sp, #0
1004a3f6:	6078      	str	r0, [r7, #4]
1004a3f8:	000a      	movs	r2, r1
1004a3fa:	1cbb      	adds	r3, r7, #2
1004a3fc:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
1004a3fe:	231b      	movs	r3, #27
1004a400:	18fb      	adds	r3, r7, r3
1004a402:	2200      	movs	r2, #0
1004a404:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
1004a406:	687b      	ldr	r3, [r7, #4]
1004a408:	781b      	ldrb	r3, [r3, #0]
1004a40a:	2b04      	cmp	r3, #4
1004a40c:	d003      	beq.n	1004a416 <BLE_STACK_Event+0x26>
1004a40e:	687b      	ldr	r3, [r7, #4]
1004a410:	781b      	ldrb	r3, [r3, #0]
1004a412:	2b82      	cmp	r3, #130	@ 0x82
1004a414:	d116      	bne.n	1004a444 <BLE_STACK_Event+0x54>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
1004a416:	687b      	ldr	r3, [r7, #4]
1004a418:	3301      	adds	r3, #1
1004a41a:	617b      	str	r3, [r7, #20]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
1004a41c:	687b      	ldr	r3, [r7, #4]
1004a41e:	781b      	ldrb	r3, [r3, #0]
1004a420:	2b04      	cmp	r3, #4
1004a422:	d103      	bne.n	1004a42c <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
1004a424:	697b      	ldr	r3, [r7, #20]
1004a426:	3302      	adds	r3, #2
1004a428:	61fb      	str	r3, [r7, #28]
1004a42a:	e005      	b.n	1004a438 <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1004a42c:	687b      	ldr	r3, [r7, #4]
1004a42e:	3301      	adds	r3, #1
1004a430:	613b      	str	r3, [r7, #16]
      data = event_pckt->data;
1004a432:	693b      	ldr	r3, [r7, #16]
1004a434:	3303      	adds	r3, #3
1004a436:	61fb      	str	r3, [r7, #28]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
1004a438:	697b      	ldr	r3, [r7, #20]
1004a43a:	781b      	ldrb	r3, [r3, #0]
1004a43c:	2bff      	cmp	r3, #255	@ 0xff
1004a43e:	d101      	bne.n	1004a444 <BLE_STACK_Event+0x54>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
1004a440:	69fb      	ldr	r3, [r7, #28]
1004a442:	60fb      	str	r3, [r7, #12]
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
1004a444:	231b      	movs	r3, #27
1004a446:	18fb      	adds	r3, r7, r3
1004a448:	781b      	ldrb	r3, [r3, #0]
1004a44a:	2b00      	cmp	r3, #0
1004a44c:	d103      	bne.n	1004a456 <BLE_STACK_Event+0x66>
  {
    BLEEVT_App_Notification(hci_pckt);
1004a44e:	687b      	ldr	r3, [r7, #4]
1004a450:	0018      	movs	r0, r3
1004a452:	f7f7 f931 	bl	100416b8 <BLEEVT_App_Notification>
  }
}
1004a456:	46c0      	nop			@ (mov r8, r8)
1004a458:	46bd      	mov	sp, r7
1004a45a:	b008      	add	sp, #32
1004a45c:	bd80      	pop	{r7, pc}
	...

1004a460 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
1004a460:	b580      	push	{r7, lr}
1004a462:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
1004a464:	4b04      	ldr	r3, [pc, #16]	@ (1004a478 <UTIL_LPM_Init+0x18>)
1004a466:	2200      	movs	r2, #0
1004a468:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
1004a46a:	4b04      	ldr	r3, [pc, #16]	@ (1004a47c <UTIL_LPM_Init+0x1c>)
1004a46c:	2200      	movs	r2, #0
1004a46e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
1004a470:	46c0      	nop			@ (mov r8, r8)
1004a472:	46bd      	mov	sp, r7
1004a474:	bd80      	pop	{r7, pc}
1004a476:	46c0      	nop			@ (mov r8, r8)
1004a478:	20000a88 	.word	0x20000a88
1004a47c:	20000a8c 	.word	0x20000a8c

1004a480 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
1004a480:	b580      	push	{r7, lr}
1004a482:	b086      	sub	sp, #24
1004a484:	af00      	add	r7, sp, #0
1004a486:	6078      	str	r0, [r7, #4]
1004a488:	000a      	movs	r2, r1
1004a48a:	1cfb      	adds	r3, r7, #3
1004a48c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a48e:	f3ef 8310 	mrs	r3, PRIMASK
1004a492:	613b      	str	r3, [r7, #16]
  return(result);
1004a494:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
1004a496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1004a498:	b672      	cpsid	i
}
1004a49a:	46c0      	nop			@ (mov r8, r8)
  
  switch( state )
1004a49c:	1cfb      	adds	r3, r7, #3
1004a49e:	781b      	ldrb	r3, [r3, #0]
1004a4a0:	2b00      	cmp	r3, #0
1004a4a2:	d008      	beq.n	1004a4b6 <UTIL_LPM_SetStopMode+0x36>
1004a4a4:	2b01      	cmp	r3, #1
1004a4a6:	d10e      	bne.n	1004a4c6 <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
1004a4a8:	4b0c      	ldr	r3, [pc, #48]	@ (1004a4dc <UTIL_LPM_SetStopMode+0x5c>)
1004a4aa:	681a      	ldr	r2, [r3, #0]
1004a4ac:	687b      	ldr	r3, [r7, #4]
1004a4ae:	431a      	orrs	r2, r3
1004a4b0:	4b0a      	ldr	r3, [pc, #40]	@ (1004a4dc <UTIL_LPM_SetStopMode+0x5c>)
1004a4b2:	601a      	str	r2, [r3, #0]
      break;
1004a4b4:	e008      	b.n	1004a4c8 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
1004a4b6:	687b      	ldr	r3, [r7, #4]
1004a4b8:	43da      	mvns	r2, r3
1004a4ba:	4b08      	ldr	r3, [pc, #32]	@ (1004a4dc <UTIL_LPM_SetStopMode+0x5c>)
1004a4bc:	681b      	ldr	r3, [r3, #0]
1004a4be:	401a      	ands	r2, r3
1004a4c0:	4b06      	ldr	r3, [pc, #24]	@ (1004a4dc <UTIL_LPM_SetStopMode+0x5c>)
1004a4c2:	601a      	str	r2, [r3, #0]
      break;
1004a4c4:	e000      	b.n	1004a4c8 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
1004a4c6:	46c0      	nop			@ (mov r8, r8)
1004a4c8:	697b      	ldr	r3, [r7, #20]
1004a4ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a4cc:	68fb      	ldr	r3, [r7, #12]
1004a4ce:	f383 8810 	msr	PRIMASK, r3
}
1004a4d2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
1004a4d4:	46c0      	nop			@ (mov r8, r8)
1004a4d6:	46bd      	mov	sp, r7
1004a4d8:	b006      	add	sp, #24
1004a4da:	bd80      	pop	{r7, pc}
1004a4dc:	20000a88 	.word	0x20000a88

1004a4e0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
1004a4e0:	b580      	push	{r7, lr}
1004a4e2:	b086      	sub	sp, #24
1004a4e4:	af00      	add	r7, sp, #0
1004a4e6:	6078      	str	r0, [r7, #4]
1004a4e8:	000a      	movs	r2, r1
1004a4ea:	1cfb      	adds	r3, r7, #3
1004a4ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a4ee:	f3ef 8310 	mrs	r3, PRIMASK
1004a4f2:	613b      	str	r3, [r7, #16]
  return(result);
1004a4f4:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
1004a4f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1004a4f8:	b672      	cpsid	i
}
1004a4fa:	46c0      	nop			@ (mov r8, r8)
  
  switch(state)
1004a4fc:	1cfb      	adds	r3, r7, #3
1004a4fe:	781b      	ldrb	r3, [r3, #0]
1004a500:	2b00      	cmp	r3, #0
1004a502:	d008      	beq.n	1004a516 <UTIL_LPM_SetOffMode+0x36>
1004a504:	2b01      	cmp	r3, #1
1004a506:	d10e      	bne.n	1004a526 <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
1004a508:	4b0c      	ldr	r3, [pc, #48]	@ (1004a53c <UTIL_LPM_SetOffMode+0x5c>)
1004a50a:	681a      	ldr	r2, [r3, #0]
1004a50c:	687b      	ldr	r3, [r7, #4]
1004a50e:	431a      	orrs	r2, r3
1004a510:	4b0a      	ldr	r3, [pc, #40]	@ (1004a53c <UTIL_LPM_SetOffMode+0x5c>)
1004a512:	601a      	str	r2, [r3, #0]
      break;
1004a514:	e008      	b.n	1004a528 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
1004a516:	687b      	ldr	r3, [r7, #4]
1004a518:	43da      	mvns	r2, r3
1004a51a:	4b08      	ldr	r3, [pc, #32]	@ (1004a53c <UTIL_LPM_SetOffMode+0x5c>)
1004a51c:	681b      	ldr	r3, [r3, #0]
1004a51e:	401a      	ands	r2, r3
1004a520:	4b06      	ldr	r3, [pc, #24]	@ (1004a53c <UTIL_LPM_SetOffMode+0x5c>)
1004a522:	601a      	str	r2, [r3, #0]
      break;
1004a524:	e000      	b.n	1004a528 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
1004a526:	46c0      	nop			@ (mov r8, r8)
1004a528:	697b      	ldr	r3, [r7, #20]
1004a52a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a52c:	68fb      	ldr	r3, [r7, #12]
1004a52e:	f383 8810 	msr	PRIMASK, r3
}
1004a532:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
1004a534:	46c0      	nop			@ (mov r8, r8)
1004a536:	46bd      	mov	sp, r7
1004a538:	b006      	add	sp, #24
1004a53a:	bd80      	pop	{r7, pc}
1004a53c:	20000a8c 	.word	0x20000a8c

1004a540 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
1004a540:	b580      	push	{r7, lr}
1004a542:	b084      	sub	sp, #16
1004a544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a546:	f3ef 8310 	mrs	r3, PRIMASK
1004a54a:	60bb      	str	r3, [r7, #8]
  return(result);
1004a54c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
1004a54e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004a550:	b672      	cpsid	i
}
1004a552:	46c0      	nop			@ (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
1004a554:	4b12      	ldr	r3, [pc, #72]	@ (1004a5a0 <UTIL_LPM_EnterLowPower+0x60>)
1004a556:	681b      	ldr	r3, [r3, #0]
1004a558:	2b00      	cmp	r3, #0
1004a55a:	d006      	beq.n	1004a56a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
1004a55c:	4b11      	ldr	r3, [pc, #68]	@ (1004a5a4 <UTIL_LPM_EnterLowPower+0x64>)
1004a55e:	681b      	ldr	r3, [r3, #0]
1004a560:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
1004a562:	4b10      	ldr	r3, [pc, #64]	@ (1004a5a4 <UTIL_LPM_EnterLowPower+0x64>)
1004a564:	685b      	ldr	r3, [r3, #4]
1004a566:	4798      	blx	r3
1004a568:	e010      	b.n	1004a58c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
1004a56a:	4b0f      	ldr	r3, [pc, #60]	@ (1004a5a8 <UTIL_LPM_EnterLowPower+0x68>)
1004a56c:	681b      	ldr	r3, [r3, #0]
1004a56e:	2b00      	cmp	r3, #0
1004a570:	d006      	beq.n	1004a580 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
1004a572:	4b0c      	ldr	r3, [pc, #48]	@ (1004a5a4 <UTIL_LPM_EnterLowPower+0x64>)
1004a574:	689b      	ldr	r3, [r3, #8]
1004a576:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
1004a578:	4b0a      	ldr	r3, [pc, #40]	@ (1004a5a4 <UTIL_LPM_EnterLowPower+0x64>)
1004a57a:	68db      	ldr	r3, [r3, #12]
1004a57c:	4798      	blx	r3
1004a57e:	e005      	b.n	1004a58c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
1004a580:	4b08      	ldr	r3, [pc, #32]	@ (1004a5a4 <UTIL_LPM_EnterLowPower+0x64>)
1004a582:	691b      	ldr	r3, [r3, #16]
1004a584:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
1004a586:	4b07      	ldr	r3, [pc, #28]	@ (1004a5a4 <UTIL_LPM_EnterLowPower+0x64>)
1004a588:	695b      	ldr	r3, [r3, #20]
1004a58a:	4798      	blx	r3
1004a58c:	68fb      	ldr	r3, [r7, #12]
1004a58e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a590:	687b      	ldr	r3, [r7, #4]
1004a592:	f383 8810 	msr	PRIMASK, r3
}
1004a596:	46c0      	nop			@ (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
1004a598:	46c0      	nop			@ (mov r8, r8)
1004a59a:	46bd      	mov	sp, r7
1004a59c:	b004      	add	sp, #16
1004a59e:	bd80      	pop	{r7, pc}
1004a5a0:	20000a88 	.word	0x20000a88
1004a5a4:	1004fd20 	.word	0x1004fd20
1004a5a8:	20000a8c 	.word	0x20000a8c

1004a5ac <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
1004a5ac:	b580      	push	{r7, lr}
1004a5ae:	b090      	sub	sp, #64	@ 0x40
1004a5b0:	af00      	add	r7, sp, #0
1004a5b2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
1004a5b4:	4b75      	ldr	r3, [pc, #468]	@ (1004a78c <UTIL_SEQ_Run+0x1e0>)
1004a5b6:	681b      	ldr	r3, [r3, #0]
1004a5b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
1004a5ba:	4b74      	ldr	r3, [pc, #464]	@ (1004a78c <UTIL_SEQ_Run+0x1e0>)
1004a5bc:	681b      	ldr	r3, [r3, #0]
1004a5be:	687a      	ldr	r2, [r7, #4]
1004a5c0:	401a      	ands	r2, r3
1004a5c2:	4b72      	ldr	r3, [pc, #456]	@ (1004a78c <UTIL_SEQ_Run+0x1e0>)
1004a5c4:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
1004a5c6:	4b72      	ldr	r3, [pc, #456]	@ (1004a790 <UTIL_SEQ_Run+0x1e4>)
1004a5c8:	681b      	ldr	r3, [r3, #0]
1004a5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
1004a5cc:	4b71      	ldr	r3, [pc, #452]	@ (1004a794 <UTIL_SEQ_Run+0x1e8>)
1004a5ce:	681b      	ldr	r3, [r3, #0]
1004a5d0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
1004a5d2:	4b71      	ldr	r3, [pc, #452]	@ (1004a798 <UTIL_SEQ_Run+0x1ec>)
1004a5d4:	681b      	ldr	r3, [r3, #0]
1004a5d6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
1004a5d8:	4b70      	ldr	r3, [pc, #448]	@ (1004a79c <UTIL_SEQ_Run+0x1f0>)
1004a5da:	681b      	ldr	r3, [r3, #0]
1004a5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
1004a5de:	e090      	b.n	1004a702 <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
1004a5e0:	2300      	movs	r3, #0
1004a5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
1004a5e4:	e002      	b.n	1004a5ec <UTIL_SEQ_Run+0x40>
    {
      counter++;
1004a5e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a5e8:	3301      	adds	r3, #1
1004a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
1004a5ec:	4b6c      	ldr	r3, [pc, #432]	@ (1004a7a0 <UTIL_SEQ_Run+0x1f4>)
1004a5ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004a5f0:	00d2      	lsls	r2, r2, #3
1004a5f2:	58d3      	ldr	r3, [r2, r3]
1004a5f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004a5f6:	401a      	ands	r2, r3
1004a5f8:	4b64      	ldr	r3, [pc, #400]	@ (1004a78c <UTIL_SEQ_Run+0x1e0>)
1004a5fa:	681b      	ldr	r3, [r3, #0]
1004a5fc:	4013      	ands	r3, r2
1004a5fe:	d0f2      	beq.n	1004a5e6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
1004a600:	4b67      	ldr	r3, [pc, #412]	@ (1004a7a0 <UTIL_SEQ_Run+0x1f4>)
1004a602:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004a604:	00d2      	lsls	r2, r2, #3
1004a606:	58d3      	ldr	r3, [r2, r3]
1004a608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004a60a:	401a      	ands	r2, r3
1004a60c:	4b5f      	ldr	r3, [pc, #380]	@ (1004a78c <UTIL_SEQ_Run+0x1e0>)
1004a60e:	681b      	ldr	r3, [r3, #0]
1004a610:	4013      	ands	r3, r2
1004a612:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
1004a614:	4a62      	ldr	r2, [pc, #392]	@ (1004a7a0 <UTIL_SEQ_Run+0x1f4>)
1004a616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a618:	00db      	lsls	r3, r3, #3
1004a61a:	18d3      	adds	r3, r2, r3
1004a61c:	3304      	adds	r3, #4
1004a61e:	681b      	ldr	r3, [r3, #0]
1004a620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004a622:	4013      	ands	r3, r2
1004a624:	d107      	bne.n	1004a636 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
1004a626:	4a5e      	ldr	r2, [pc, #376]	@ (1004a7a0 <UTIL_SEQ_Run+0x1f4>)
1004a628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a62a:	00db      	lsls	r3, r3, #3
1004a62c:	18d3      	adds	r3, r2, r3
1004a62e:	3304      	adds	r3, #4
1004a630:	2201      	movs	r2, #1
1004a632:	4252      	negs	r2, r2
1004a634:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
1004a636:	4a5a      	ldr	r2, [pc, #360]	@ (1004a7a0 <UTIL_SEQ_Run+0x1f4>)
1004a638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a63a:	00db      	lsls	r3, r3, #3
1004a63c:	18d3      	adds	r3, r2, r3
1004a63e:	3304      	adds	r3, #4
1004a640:	681b      	ldr	r3, [r3, #0]
1004a642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004a644:	4013      	ands	r3, r2
1004a646:	0018      	movs	r0, r3
1004a648:	f000 f906 	bl	1004a858 <SEQ_BitPosition>
1004a64c:	0003      	movs	r3, r0
1004a64e:	001a      	movs	r2, r3
1004a650:	4b54      	ldr	r3, [pc, #336]	@ (1004a7a4 <UTIL_SEQ_Run+0x1f8>)
1004a652:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
1004a654:	4a52      	ldr	r2, [pc, #328]	@ (1004a7a0 <UTIL_SEQ_Run+0x1f4>)
1004a656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a658:	00db      	lsls	r3, r3, #3
1004a65a:	18d3      	adds	r3, r2, r3
1004a65c:	3304      	adds	r3, #4
1004a65e:	681a      	ldr	r2, [r3, #0]
1004a660:	4b50      	ldr	r3, [pc, #320]	@ (1004a7a4 <UTIL_SEQ_Run+0x1f8>)
1004a662:	681b      	ldr	r3, [r3, #0]
1004a664:	2101      	movs	r1, #1
1004a666:	4099      	lsls	r1, r3
1004a668:	000b      	movs	r3, r1
1004a66a:	43db      	mvns	r3, r3
1004a66c:	401a      	ands	r2, r3
1004a66e:	494c      	ldr	r1, [pc, #304]	@ (1004a7a0 <UTIL_SEQ_Run+0x1f4>)
1004a670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a672:	00db      	lsls	r3, r3, #3
1004a674:	18cb      	adds	r3, r1, r3
1004a676:	3304      	adds	r3, #4
1004a678:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a67a:	f3ef 8310 	mrs	r3, PRIMASK
1004a67e:	61bb      	str	r3, [r7, #24]
  return(result);
1004a680:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1004a682:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
1004a684:	b672      	cpsid	i
}
1004a686:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
1004a688:	4b46      	ldr	r3, [pc, #280]	@ (1004a7a4 <UTIL_SEQ_Run+0x1f8>)
1004a68a:	681b      	ldr	r3, [r3, #0]
1004a68c:	2201      	movs	r2, #1
1004a68e:	409a      	lsls	r2, r3
1004a690:	0013      	movs	r3, r2
1004a692:	43da      	mvns	r2, r3
1004a694:	4b3e      	ldr	r3, [pc, #248]	@ (1004a790 <UTIL_SEQ_Run+0x1e4>)
1004a696:	681b      	ldr	r3, [r3, #0]
1004a698:	401a      	ands	r2, r3
1004a69a:	4b3d      	ldr	r3, [pc, #244]	@ (1004a790 <UTIL_SEQ_Run+0x1e4>)
1004a69c:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1004a69e:	2302      	movs	r3, #2
1004a6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
1004a6a2:	e013      	b.n	1004a6cc <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
1004a6a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a6a6:	1e5a      	subs	r2, r3, #1
1004a6a8:	4b3d      	ldr	r3, [pc, #244]	@ (1004a7a0 <UTIL_SEQ_Run+0x1f4>)
1004a6aa:	00d2      	lsls	r2, r2, #3
1004a6ac:	58d1      	ldr	r1, [r2, r3]
1004a6ae:	4b3d      	ldr	r3, [pc, #244]	@ (1004a7a4 <UTIL_SEQ_Run+0x1f8>)
1004a6b0:	681b      	ldr	r3, [r3, #0]
1004a6b2:	2201      	movs	r2, #1
1004a6b4:	409a      	lsls	r2, r3
1004a6b6:	0013      	movs	r3, r2
1004a6b8:	43db      	mvns	r3, r3
1004a6ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004a6bc:	3a01      	subs	r2, #1
1004a6be:	4019      	ands	r1, r3
1004a6c0:	4b37      	ldr	r3, [pc, #220]	@ (1004a7a0 <UTIL_SEQ_Run+0x1f4>)
1004a6c2:	00d2      	lsls	r2, r2, #3
1004a6c4:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1004a6c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a6c8:	3b01      	subs	r3, #1
1004a6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
1004a6cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004a6ce:	2b00      	cmp	r3, #0
1004a6d0:	d1e8      	bne.n	1004a6a4 <UTIL_SEQ_Run+0xf8>
1004a6d2:	6a3b      	ldr	r3, [r7, #32]
1004a6d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a6d6:	697b      	ldr	r3, [r7, #20]
1004a6d8:	f383 8810 	msr	PRIMASK, r3
}
1004a6dc:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
1004a6de:	4b31      	ldr	r3, [pc, #196]	@ (1004a7a4 <UTIL_SEQ_Run+0x1f8>)
1004a6e0:	681a      	ldr	r2, [r3, #0]
1004a6e2:	4b31      	ldr	r3, [pc, #196]	@ (1004a7a8 <UTIL_SEQ_Run+0x1fc>)
1004a6e4:	0092      	lsls	r2, r2, #2
1004a6e6:	58d3      	ldr	r3, [r2, r3]
1004a6e8:	4798      	blx	r3

    local_taskset = TaskSet;
1004a6ea:	4b29      	ldr	r3, [pc, #164]	@ (1004a790 <UTIL_SEQ_Run+0x1e4>)
1004a6ec:	681b      	ldr	r3, [r3, #0]
1004a6ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
1004a6f0:	4b28      	ldr	r3, [pc, #160]	@ (1004a794 <UTIL_SEQ_Run+0x1e8>)
1004a6f2:	681b      	ldr	r3, [r3, #0]
1004a6f4:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
1004a6f6:	4b28      	ldr	r3, [pc, #160]	@ (1004a798 <UTIL_SEQ_Run+0x1ec>)
1004a6f8:	681b      	ldr	r3, [r3, #0]
1004a6fa:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
1004a6fc:	4b27      	ldr	r3, [pc, #156]	@ (1004a79c <UTIL_SEQ_Run+0x1f0>)
1004a6fe:	681b      	ldr	r3, [r3, #0]
1004a700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
1004a702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004a706:	401a      	ands	r2, r3
1004a708:	4b20      	ldr	r3, [pc, #128]	@ (1004a78c <UTIL_SEQ_Run+0x1e0>)
1004a70a:	681b      	ldr	r3, [r3, #0]
1004a70c:	4013      	ands	r3, r2
1004a70e:	d004      	beq.n	1004a71a <UTIL_SEQ_Run+0x16e>
1004a710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004a712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1004a714:	4013      	ands	r3, r2
1004a716:	d100      	bne.n	1004a71a <UTIL_SEQ_Run+0x16e>
1004a718:	e762      	b.n	1004a5e0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
1004a71a:	4b22      	ldr	r3, [pc, #136]	@ (1004a7a4 <UTIL_SEQ_Run+0x1f8>)
1004a71c:	2201      	movs	r2, #1
1004a71e:	4252      	negs	r2, r2
1004a720:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
1004a722:	4b1e      	ldr	r3, [pc, #120]	@ (1004a79c <UTIL_SEQ_Run+0x1f0>)
1004a724:	681b      	ldr	r3, [r3, #0]
1004a726:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1004a728:	4013      	ands	r3, r2
1004a72a:	d127      	bne.n	1004a77c <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
1004a72c:	f7f6 f991 	bl	10040a52 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a730:	f3ef 8310 	mrs	r3, PRIMASK
1004a734:	613b      	str	r3, [r7, #16]
  return(result);
1004a736:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
1004a738:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004a73a:	b672      	cpsid	i
}
1004a73c:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
1004a73e:	4b14      	ldr	r3, [pc, #80]	@ (1004a790 <UTIL_SEQ_Run+0x1e4>)
1004a740:	681b      	ldr	r3, [r3, #0]
1004a742:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
1004a744:	4b13      	ldr	r3, [pc, #76]	@ (1004a794 <UTIL_SEQ_Run+0x1e8>)
1004a746:	681b      	ldr	r3, [r3, #0]
1004a748:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
1004a74a:	4b13      	ldr	r3, [pc, #76]	@ (1004a798 <UTIL_SEQ_Run+0x1ec>)
1004a74c:	681b      	ldr	r3, [r3, #0]
1004a74e:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
1004a750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004a752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004a754:	401a      	ands	r2, r3
1004a756:	4b0d      	ldr	r3, [pc, #52]	@ (1004a78c <UTIL_SEQ_Run+0x1e0>)
1004a758:	681b      	ldr	r3, [r3, #0]
1004a75a:	4013      	ands	r3, r2
1004a75c:	d106      	bne.n	1004a76c <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
1004a75e:	4b0f      	ldr	r3, [pc, #60]	@ (1004a79c <UTIL_SEQ_Run+0x1f0>)
1004a760:	681b      	ldr	r3, [r3, #0]
1004a762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1004a764:	4013      	ands	r3, r2
1004a766:	d101      	bne.n	1004a76c <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
1004a768:	f7f6 f978 	bl	10040a5c <UTIL_SEQ_Idle>
1004a76c:	69fb      	ldr	r3, [r7, #28]
1004a76e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a770:	68fb      	ldr	r3, [r7, #12]
1004a772:	f383 8810 	msr	PRIMASK, r3
}
1004a776:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
1004a778:	f000 f868 	bl	1004a84c <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
1004a77c:	4b03      	ldr	r3, [pc, #12]	@ (1004a78c <UTIL_SEQ_Run+0x1e0>)
1004a77e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004a780:	601a      	str	r2, [r3, #0]

  return;
1004a782:	46c0      	nop			@ (mov r8, r8)
}
1004a784:	46bd      	mov	sp, r7
1004a786:	b010      	add	sp, #64	@ 0x40
1004a788:	bd80      	pop	{r7, pc}
1004a78a:	46c0      	nop			@ (mov r8, r8)
1004a78c:	20000d20 	.word	0x20000d20
1004a790:	20000a90 	.word	0x20000a90
1004a794:	20000a94 	.word	0x20000a94
1004a798:	20000d1c 	.word	0x20000d1c
1004a79c:	20000a98 	.word	0x20000a98
1004a7a0:	20000b20 	.word	0x20000b20
1004a7a4:	20000a9c 	.word	0x20000a9c
1004a7a8:	20000aa0 	.word	0x20000aa0

1004a7ac <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
1004a7ac:	b580      	push	{r7, lr}
1004a7ae:	b088      	sub	sp, #32
1004a7b0:	af00      	add	r7, sp, #0
1004a7b2:	60f8      	str	r0, [r7, #12]
1004a7b4:	60b9      	str	r1, [r7, #8]
1004a7b6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a7b8:	f3ef 8310 	mrs	r3, PRIMASK
1004a7bc:	617b      	str	r3, [r7, #20]
  return(result);
1004a7be:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
1004a7c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004a7c2:	b672      	cpsid	i
}
1004a7c4:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
1004a7c6:	68fb      	ldr	r3, [r7, #12]
1004a7c8:	0018      	movs	r0, r3
1004a7ca:	f000 f845 	bl	1004a858 <SEQ_BitPosition>
1004a7ce:	0003      	movs	r3, r0
1004a7d0:	001a      	movs	r2, r3
1004a7d2:	4b07      	ldr	r3, [pc, #28]	@ (1004a7f0 <UTIL_SEQ_RegTask+0x44>)
1004a7d4:	0092      	lsls	r2, r2, #2
1004a7d6:	6879      	ldr	r1, [r7, #4]
1004a7d8:	50d1      	str	r1, [r2, r3]
1004a7da:	69fb      	ldr	r3, [r7, #28]
1004a7dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a7de:	69bb      	ldr	r3, [r7, #24]
1004a7e0:	f383 8810 	msr	PRIMASK, r3
}
1004a7e4:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
1004a7e6:	46c0      	nop			@ (mov r8, r8)
}
1004a7e8:	46bd      	mov	sp, r7
1004a7ea:	b008      	add	sp, #32
1004a7ec:	bd80      	pop	{r7, pc}
1004a7ee:	46c0      	nop			@ (mov r8, r8)
1004a7f0:	20000aa0 	.word	0x20000aa0

1004a7f4 <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
1004a7f4:	b580      	push	{r7, lr}
1004a7f6:	b086      	sub	sp, #24
1004a7f8:	af00      	add	r7, sp, #0
1004a7fa:	6078      	str	r0, [r7, #4]
1004a7fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004a7fe:	f3ef 8310 	mrs	r3, PRIMASK
1004a802:	60fb      	str	r3, [r7, #12]
  return(result);
1004a804:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1004a806:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1004a808:	b672      	cpsid	i
}
1004a80a:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
1004a80c:	4b0d      	ldr	r3, [pc, #52]	@ (1004a844 <UTIL_SEQ_SetTask+0x50>)
1004a80e:	681a      	ldr	r2, [r3, #0]
1004a810:	687b      	ldr	r3, [r7, #4]
1004a812:	431a      	orrs	r2, r3
1004a814:	4b0b      	ldr	r3, [pc, #44]	@ (1004a844 <UTIL_SEQ_SetTask+0x50>)
1004a816:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
1004a818:	4b0b      	ldr	r3, [pc, #44]	@ (1004a848 <UTIL_SEQ_SetTask+0x54>)
1004a81a:	683a      	ldr	r2, [r7, #0]
1004a81c:	00d2      	lsls	r2, r2, #3
1004a81e:	58d2      	ldr	r2, [r2, r3]
1004a820:	687b      	ldr	r3, [r7, #4]
1004a822:	431a      	orrs	r2, r3
1004a824:	0011      	movs	r1, r2
1004a826:	4b08      	ldr	r3, [pc, #32]	@ (1004a848 <UTIL_SEQ_SetTask+0x54>)
1004a828:	683a      	ldr	r2, [r7, #0]
1004a82a:	00d2      	lsls	r2, r2, #3
1004a82c:	50d1      	str	r1, [r2, r3]
1004a82e:	697b      	ldr	r3, [r7, #20]
1004a830:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004a832:	693b      	ldr	r3, [r7, #16]
1004a834:	f383 8810 	msr	PRIMASK, r3
}
1004a838:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
1004a83a:	46c0      	nop			@ (mov r8, r8)
}
1004a83c:	46bd      	mov	sp, r7
1004a83e:	b006      	add	sp, #24
1004a840:	bd80      	pop	{r7, pc}
1004a842:	46c0      	nop			@ (mov r8, r8)
1004a844:	20000a90 	.word	0x20000a90
1004a848:	20000b20 	.word	0x20000b20

1004a84c <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
1004a84c:	b580      	push	{r7, lr}
1004a84e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
1004a850:	46c0      	nop			@ (mov r8, r8)
}
1004a852:	46bd      	mov	sp, r7
1004a854:	bd80      	pop	{r7, pc}
	...

1004a858 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
1004a858:	b580      	push	{r7, lr}
1004a85a:	b084      	sub	sp, #16
1004a85c:	af00      	add	r7, sp, #0
1004a85e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
1004a860:	210f      	movs	r1, #15
1004a862:	187b      	adds	r3, r7, r1
1004a864:	2200      	movs	r2, #0
1004a866:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
1004a868:	687b      	ldr	r3, [r7, #4]
1004a86a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
1004a86c:	68ba      	ldr	r2, [r7, #8]
1004a86e:	2380      	movs	r3, #128	@ 0x80
1004a870:	025b      	lsls	r3, r3, #9
1004a872:	429a      	cmp	r2, r3
1004a874:	d205      	bcs.n	1004a882 <SEQ_BitPosition+0x2a>
1004a876:	187b      	adds	r3, r7, r1
1004a878:	2210      	movs	r2, #16
1004a87a:	701a      	strb	r2, [r3, #0]
1004a87c:	68bb      	ldr	r3, [r7, #8]
1004a87e:	041b      	lsls	r3, r3, #16
1004a880:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
1004a882:	68ba      	ldr	r2, [r7, #8]
1004a884:	2380      	movs	r3, #128	@ 0x80
1004a886:	045b      	lsls	r3, r3, #17
1004a888:	429a      	cmp	r2, r3
1004a88a:	d208      	bcs.n	1004a89e <SEQ_BitPosition+0x46>
1004a88c:	220f      	movs	r2, #15
1004a88e:	18bb      	adds	r3, r7, r2
1004a890:	18ba      	adds	r2, r7, r2
1004a892:	7812      	ldrb	r2, [r2, #0]
1004a894:	3208      	adds	r2, #8
1004a896:	701a      	strb	r2, [r3, #0]
1004a898:	68bb      	ldr	r3, [r7, #8]
1004a89a:	021b      	lsls	r3, r3, #8
1004a89c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
1004a89e:	68ba      	ldr	r2, [r7, #8]
1004a8a0:	2380      	movs	r3, #128	@ 0x80
1004a8a2:	055b      	lsls	r3, r3, #21
1004a8a4:	429a      	cmp	r2, r3
1004a8a6:	d208      	bcs.n	1004a8ba <SEQ_BitPosition+0x62>
1004a8a8:	220f      	movs	r2, #15
1004a8aa:	18bb      	adds	r3, r7, r2
1004a8ac:	18ba      	adds	r2, r7, r2
1004a8ae:	7812      	ldrb	r2, [r2, #0]
1004a8b0:	3204      	adds	r2, #4
1004a8b2:	701a      	strb	r2, [r3, #0]
1004a8b4:	68bb      	ldr	r3, [r7, #8]
1004a8b6:	011b      	lsls	r3, r3, #4
1004a8b8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
1004a8ba:	68bb      	ldr	r3, [r7, #8]
1004a8bc:	0f1b      	lsrs	r3, r3, #28
1004a8be:	4a08      	ldr	r2, [pc, #32]	@ (1004a8e0 <SEQ_BitPosition+0x88>)
1004a8c0:	5cd1      	ldrb	r1, [r2, r3]
1004a8c2:	200f      	movs	r0, #15
1004a8c4:	183b      	adds	r3, r7, r0
1004a8c6:	183a      	adds	r2, r7, r0
1004a8c8:	7812      	ldrb	r2, [r2, #0]
1004a8ca:	188a      	adds	r2, r1, r2
1004a8cc:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
1004a8ce:	183b      	adds	r3, r7, r0
1004a8d0:	781b      	ldrb	r3, [r3, #0]
1004a8d2:	221f      	movs	r2, #31
1004a8d4:	1ad3      	subs	r3, r2, r3
1004a8d6:	b2db      	uxtb	r3, r3
}
1004a8d8:	0018      	movs	r0, r3
1004a8da:	46bd      	mov	sp, r7
1004a8dc:	b004      	add	sp, #16
1004a8de:	bd80      	pop	{r7, pc}
1004a8e0:	1004fdfc 	.word	0x1004fdfc

1004a8e4 <aci_gap_init>:
1004a8e4:	b580      	push	{r7, lr}
1004a8e6:	2802      	cmp	r0, #2
1004a8e8:	d901      	bls.n	1004a8ee <aci_gap_init+0xa>
1004a8ea:	2012      	movs	r0, #18
1004a8ec:	bd80      	pop	{r7, pc}
1004a8ee:	f000 fda1 	bl	1004b434 <GAP_Init>
1004a8f2:	bd80      	pop	{r7, pc}

1004a8f4 <GAP_set_advertising_configuration_ucfg_weak>:
1004a8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004a8f6:	461c      	mov	r4, r3
1004a8f8:	4608      	mov	r0, r1
1004a8fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004a8fc:	9103      	str	r1, [sp, #12]
1004a8fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004a900:	9102      	str	r1, [sp, #8]
1004a902:	9908      	ldr	r1, [sp, #32]
1004a904:	9101      	str	r1, [sp, #4]
1004a906:	9907      	ldr	r1, [sp, #28]
1004a908:	9100      	str	r1, [sp, #0]
1004a90a:	9b06      	ldr	r3, [sp, #24]
1004a90c:	4611      	mov	r1, r2
1004a90e:	4622      	mov	r2, r4
1004a910:	f000 feb4 	bl	1004b67c <GAP_set_legacy_advertising_configuration>
1004a914:	b004      	add	sp, #16
1004a916:	bd10      	pop	{r4, pc}

1004a918 <GAP_set_advertising_data_ucfg_weak>:
1004a918:	b580      	push	{r7, lr}
1004a91a:	4619      	mov	r1, r3
1004a91c:	4610      	mov	r0, r2
1004a91e:	f001 f807 	bl	1004b930 <GAP_set_legacy_advertising_data>
1004a922:	bd80      	pop	{r7, pc}

1004a924 <GAP_set_advertising_enable_ucfg_weak>:
1004a924:	b580      	push	{r7, lr}
1004a926:	f000 fefd 	bl	1004b724 <GAP_set_legacy_advertising_enable>
1004a92a:	bd80      	pop	{r7, pc}

1004a92c <aci_gap_set_advertising_configuration>:
1004a92c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a92e:	b093      	sub	sp, #76	@ 0x4c
1004a930:	461f      	mov	r7, r3
1004a932:	4615      	mov	r5, r2
1004a934:	460e      	mov	r6, r1
1004a936:	9012      	str	r0, [sp, #72]	@ 0x48
1004a938:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1004a93a:	4608      	mov	r0, r1
1004a93c:	4611      	mov	r1, r2
1004a93e:	4622      	mov	r2, r4
1004a940:	f000 fe6e 	bl	1004b620 <GAP_check_discoverability_mode>
1004a944:	2800      	cmp	r0, #0
1004a946:	d124      	bne.n	1004a992 <aci_gap_set_advertising_configuration+0x66>
1004a948:	9822      	ldr	r0, [sp, #136]	@ 0x88
1004a94a:	900d      	str	r0, [sp, #52]	@ 0x34
1004a94c:	ab1f      	add	r3, sp, #124	@ 0x7c
1004a94e:	cb0d      	ldmia	r3, {r0, r2, r3}
1004a950:	9011      	str	r0, [sp, #68]	@ 0x44
1004a952:	981e      	ldr	r0, [sp, #120]	@ 0x78
1004a954:	900f      	str	r0, [sp, #60]	@ 0x3c
1004a956:	981d      	ldr	r0, [sp, #116]	@ 0x74
1004a958:	900e      	str	r0, [sp, #56]	@ 0x38
1004a95a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
1004a95c:	900c      	str	r0, [sp, #48]	@ 0x30
1004a95e:	991a      	ldr	r1, [sp, #104]	@ 0x68
1004a960:	9819      	ldr	r0, [sp, #100]	@ 0x64
1004a962:	9710      	str	r7, [sp, #64]	@ 0x40
1004a964:	9f18      	ldr	r7, [sp, #96]	@ 0x60
1004a966:	9208      	str	r2, [sp, #32]
1004a968:	9309      	str	r3, [sp, #36]	@ 0x24
1004a96a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004a96c:	920a      	str	r2, [sp, #40]	@ 0x28
1004a96e:	9700      	str	r7, [sp, #0]
1004a970:	9001      	str	r0, [sp, #4]
1004a972:	9102      	str	r1, [sp, #8]
1004a974:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004a976:	9003      	str	r0, [sp, #12]
1004a978:	9404      	str	r4, [sp, #16]
1004a97a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004a97c:	9005      	str	r0, [sp, #20]
1004a97e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1004a980:	9006      	str	r0, [sp, #24]
1004a982:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004a984:	9007      	str	r0, [sp, #28]
1004a986:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004a988:	4631      	mov	r1, r6
1004a98a:	462a      	mov	r2, r5
1004a98c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004a98e:	f7ff ffb1 	bl	1004a8f4 <GAP_set_advertising_configuration_ucfg_weak>
1004a992:	b013      	add	sp, #76	@ 0x4c
1004a994:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004a996 <aci_gap_set_advertising_data>:
1004a996:	b580      	push	{r7, lr}
1004a998:	f7ff ffbe 	bl	1004a918 <GAP_set_advertising_data_ucfg_weak>
1004a99c:	bd80      	pop	{r7, pc}

1004a99e <aci_gap_set_advertising_enable>:
1004a99e:	b580      	push	{r7, lr}
1004a9a0:	f7ff ffc0 	bl	1004a924 <GAP_set_advertising_enable_ucfg_weak>
1004a9a4:	bd80      	pop	{r7, pc}

1004a9a6 <configBitmapGet>:
1004a9a6:	2000      	movs	r0, #0
1004a9a8:	4770      	bx	lr
	...

1004a9ac <HAL_Read_ConfigData>:
1004a9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1004a9ae:	b08b      	sub	sp, #44	@ 0x2c
1004a9b0:	4615      	mov	r5, r2
1004a9b2:	460c      	mov	r4, r1
1004a9b4:	493a      	ldr	r1, [pc, #232]	@ (1004aaa0 <__arm_cp.5_0>)
1004a9b6:	680b      	ldr	r3, [r1, #0]
1004a9b8:	4606      	mov	r6, r0
1004a9ba:	3e28      	subs	r6, #40	@ 0x28
1004a9bc:	2206      	movs	r2, #6
1004a9be:	2112      	movs	r1, #18
1004a9c0:	2e0b      	cmp	r6, #11
1004a9c2:	d910      	bls.n	1004a9e6 <HAL_Read_ConfigData+0x3a>
1004a9c4:	2800      	cmp	r0, #0
1004a9c6:	d01c      	beq.n	1004aa02 <HAL_Read_ConfigData+0x56>
1004a9c8:	28ff      	cmp	r0, #255	@ 0xff
1004a9ca:	d035      	beq.n	1004aa38 <HAL_Read_ConfigData+0x8c>
1004a9cc:	2808      	cmp	r0, #8
1004a9ce:	d017      	beq.n	1004aa00 <HAL_Read_ConfigData+0x54>
1004a9d0:	2818      	cmp	r0, #24
1004a9d2:	d015      	beq.n	1004aa00 <HAL_Read_ConfigData+0x54>
1004a9d4:	2880      	cmp	r0, #128	@ 0x80
1004a9d6:	d03c      	beq.n	1004aa52 <HAL_Read_ConfigData+0xa6>
1004a9d8:	2881      	cmp	r0, #129	@ 0x81
1004a9da:	d047      	beq.n	1004aa6c <HAL_Read_ConfigData+0xc0>
1004a9dc:	28fe      	cmp	r0, #254	@ 0xfe
1004a9de:	d04b      	beq.n	1004aa78 <HAL_Read_ConfigData+0xcc>
1004a9e0:	2806      	cmp	r0, #6
1004a9e2:	d00b      	beq.n	1004a9fc <HAL_Read_ConfigData+0x50>
1004a9e4:	e013      	b.n	1004aa0e <HAL_Read_ConfigData+0x62>
1004a9e6:	46c0      	nop			@ (mov r8, r8)
1004a9e8:	447e      	add	r6, pc
1004a9ea:	7936      	ldrb	r6, [r6, #4]
1004a9ec:	0076      	lsls	r6, r6, #1
1004a9ee:	44b7      	add	pc, r6
1004a9f0:	0e050e05 	.word	0x0e050e05
1004a9f4:	0e080e11 	.word	0x0e080e11
1004a9f8:	180e0e0e 	.word	0x180e0e0e
1004a9fc:	2202      	movs	r2, #2
1004a9fe:	e000      	b.n	1004aa02 <HAL_Read_ConfigData+0x56>
1004aa00:	2210      	movs	r2, #16
1004aa02:	7022      	strb	r2, [r4, #0]
1004aa04:	1819      	adds	r1, r3, r0
1004aa06:	4628      	mov	r0, r5
1004aa08:	f7f7 f802 	bl	10041a10 <BLEPLAT_MemCpy>
1004aa0c:	2100      	movs	r1, #0
1004aa0e:	4608      	mov	r0, r1
1004aa10:	b00b      	add	sp, #44	@ 0x2c
1004aa12:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004aa14:	2001      	movs	r0, #1
1004aa16:	7020      	strb	r0, [r4, #0]
1004aa18:	212c      	movs	r1, #44	@ 0x2c
1004aa1a:	5c59      	ldrb	r1, [r3, r1]
1004aa1c:	4001      	ands	r1, r0
1004aa1e:	7029      	strb	r1, [r5, #0]
1004aa20:	e7f4      	b.n	1004aa0c <HAL_Read_ConfigData+0x60>
1004aa22:	f000 fdf5 	bl	1004b610 <GAP_is_rpa_change_at_timeout_enabled>
1004aa26:	a901      	add	r1, sp, #4
1004aa28:	7008      	strb	r0, [r1, #0]
1004aa2a:	2601      	movs	r6, #1
1004aa2c:	4628      	mov	r0, r5
1004aa2e:	4632      	mov	r2, r6
1004aa30:	f7f6 ffee 	bl	10041a10 <BLEPLAT_MemCpy>
1004aa34:	7026      	strb	r6, [r4, #0]
1004aa36:	e7e9      	b.n	1004aa0c <HAL_Read_ConfigData+0x60>
1004aa38:	a801      	add	r0, sp, #4
1004aa3a:	f7ff ffb4 	bl	1004a9a6 <configBitmapGet>
1004aa3e:	2800      	cmp	r0, #0
1004aa40:	d026      	beq.n	1004aa90 <HAL_Read_ConfigData+0xe4>
1004aa42:	a901      	add	r1, sp, #4
1004aa44:	2604      	movs	r6, #4
1004aa46:	4628      	mov	r0, r5
1004aa48:	4632      	mov	r2, r6
1004aa4a:	f7f6 ffe1 	bl	10041a10 <BLEPLAT_MemCpy>
1004aa4e:	2100      	movs	r1, #0
1004aa50:	e020      	b.n	1004aa94 <HAL_Read_ConfigData+0xe8>
1004aa52:	2006      	movs	r0, #6
1004aa54:	7020      	strb	r0, [r4, #0]
1004aa56:	a801      	add	r0, sp, #4
1004aa58:	f003 fb19 	bl	1004e08e <nvm_dev_id_data_get_record>
1004aa5c:	2800      	cmp	r0, #0
1004aa5e:	d01b      	beq.n	1004aa98 <HAL_Read_ConfigData+0xec>
1004aa60:	7822      	ldrb	r2, [r4, #0]
1004aa62:	21ff      	movs	r1, #255	@ 0xff
1004aa64:	4628      	mov	r0, r5
1004aa66:	f7f6 ffe3 	bl	10041a30 <BLEPLAT_MemSet>
1004aa6a:	e7cf      	b.n	1004aa0c <HAL_Read_ConfigData+0x60>
1004aa6c:	2206      	movs	r2, #6
1004aa6e:	7022      	strb	r2, [r4, #0]
1004aa70:	480c      	ldr	r0, [pc, #48]	@ (1004aaa4 <__arm_cp.5_1>)
1004aa72:	6801      	ldr	r1, [r0, #0]
1004aa74:	3166      	adds	r1, #102	@ 0x66
1004aa76:	e7c6      	b.n	1004aa06 <HAL_Read_ConfigData+0x5a>
1004aa78:	ae01      	add	r6, sp, #4
1004aa7a:	4630      	mov	r0, r6
1004aa7c:	f000 f9cc 	bl	1004ae18 <log_verbosity_get_ucfg_weak>
1004aa80:	2705      	movs	r7, #5
1004aa82:	4628      	mov	r0, r5
1004aa84:	4631      	mov	r1, r6
1004aa86:	463a      	mov	r2, r7
1004aa88:	f7f6 ffc2 	bl	10041a10 <BLEPLAT_MemCpy>
1004aa8c:	7027      	strb	r7, [r4, #0]
1004aa8e:	e7bd      	b.n	1004aa0c <HAL_Read_ConfigData+0x60>
1004aa90:	2112      	movs	r1, #18
1004aa92:	2600      	movs	r6, #0
1004aa94:	7026      	strb	r6, [r4, #0]
1004aa96:	e7ba      	b.n	1004aa0e <HAL_Read_ConfigData+0x62>
1004aa98:	7822      	ldrb	r2, [r4, #0]
1004aa9a:	a901      	add	r1, sp, #4
1004aa9c:	3120      	adds	r1, #32
1004aa9e:	e7b2      	b.n	1004aa06 <HAL_Read_ConfigData+0x5a>

1004aaa0 <__arm_cp.5_0>:
1004aaa0:	20000b30 	.word	0x20000b30

1004aaa4 <__arm_cp.5_1>:
1004aaa4:	20000b38 	.word	0x20000b38

1004aaa8 <aci_hal_read_config_data>:
1004aaa8:	b580      	push	{r7, lr}
1004aaaa:	f7ff ff7f 	bl	1004a9ac <HAL_Read_ConfigData>
1004aaae:	bd80      	pop	{r7, pc}

1004aab0 <aci_hal_set_tx_power_level>:
1004aab0:	b580      	push	{r7, lr}
1004aab2:	f000 f801 	bl	1004aab8 <HAL_Set_TX_Power_Level>
1004aab6:	bd80      	pop	{r7, pc}

1004aab8 <HAL_Set_TX_Power_Level>:
1004aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004aaba:	460e      	mov	r6, r1
1004aabc:	4605      	mov	r5, r0
1004aabe:	2412      	movs	r4, #18
1004aac0:	f7f7 f80a 	bl	10041ad8 <BLEPLAT_GetMaxPALevel>
1004aac4:	42b0      	cmp	r0, r6
1004aac6:	d317      	bcc.n	1004aaf8 <HAL_Set_TX_Power_Level+0x40>
1004aac8:	2d01      	cmp	r5, #1
1004aaca:	d815      	bhi.n	1004aaf8 <HAL_Set_TX_Power_Level+0x40>
1004aacc:	480b      	ldr	r0, [pc, #44]	@ (1004aafc <__arm_cp.11_0>)
1004aace:	6800      	ldr	r0, [r0, #0]
1004aad0:	7a81      	ldrb	r1, [r0, #10]
1004aad2:	9100      	str	r1, [sp, #0]
1004aad4:	7285      	strb	r5, [r0, #10]
1004aad6:	7a47      	ldrb	r7, [r0, #9]
1004aad8:	7246      	strb	r6, [r0, #9]
1004aada:	4628      	mov	r0, r5
1004aadc:	f7f7 f80c 	bl	10041af8 <BLEPLAT_SetHighPower>
1004aae0:	2400      	movs	r4, #0
1004aae2:	42b7      	cmp	r7, r6
1004aae4:	d102      	bne.n	1004aaec <HAL_Set_TX_Power_Level+0x34>
1004aae6:	9800      	ldr	r0, [sp, #0]
1004aae8:	42a8      	cmp	r0, r5
1004aaea:	d005      	beq.n	1004aaf8 <HAL_Set_TX_Power_Level+0x40>
1004aaec:	20ff      	movs	r0, #255	@ 0xff
1004aaee:	227f      	movs	r2, #127	@ 0x7f
1004aaf0:	2101      	movs	r1, #1
1004aaf2:	460b      	mov	r3, r1
1004aaf4:	f001 faca 	bl	1004c08c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
1004aaf8:	4620      	mov	r0, r4
1004aafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004aafc <__arm_cp.11_0>:
1004aafc:	20000b40 	.word	0x20000b40

1004ab00 <ble_HAL_Init>:
1004ab00:	b580      	push	{r7, lr}
1004ab02:	4804      	ldr	r0, [pc, #16]	@ (1004ab14 <__arm_cp.17_0>)
1004ab04:	6800      	ldr	r0, [r0, #0]
1004ab06:	3060      	adds	r0, #96	@ 0x60
1004ab08:	2100      	movs	r1, #0
1004ab0a:	2204      	movs	r2, #4
1004ab0c:	f7f6 ff90 	bl	10041a30 <BLEPLAT_MemSet>
1004ab10:	bd80      	pop	{r7, pc}
1004ab12:	46c0      	nop			@ (mov r8, r8)

1004ab14 <__arm_cp.17_0>:
1004ab14:	20000b40 	.word	0x20000b40

1004ab18 <hal_read_radio_activity_state>:
1004ab18:	b570      	push	{r4, r5, r6, lr}
1004ab1a:	4603      	mov	r3, r0
1004ab1c:	480a      	ldr	r0, [pc, #40]	@ (1004ab48 <__arm_cp.18_0>)
1004ab1e:	6804      	ldr	r4, [r0, #0]
1004ab20:	f3ef 8010 	mrs	r0, PRIMASK
1004ab24:	b672      	cpsid	i
1004ab26:	7d20      	ldrb	r0, [r4, #20]
1004ab28:	2500      	movs	r5, #0
1004ab2a:	7525      	strb	r5, [r4, #20]
1004ab2c:	7c25      	ldrb	r5, [r4, #16]
1004ab2e:	260f      	movs	r6, #15
1004ab30:	402e      	ands	r6, r5
1004ab32:	701e      	strb	r6, [r3, #0]
1004ab34:	7c23      	ldrb	r3, [r4, #16]
1004ab36:	091b      	lsrs	r3, r3, #4
1004ab38:	700b      	strb	r3, [r1, #0]
1004ab3a:	68e1      	ldr	r1, [r4, #12]
1004ab3c:	6011      	str	r1, [r2, #0]
1004ab3e:	1e41      	subs	r1, r0, #1
1004ab40:	4188      	sbcs	r0, r1
1004ab42:	b662      	cpsie	i
1004ab44:	bd70      	pop	{r4, r5, r6, pc}
1004ab46:	46c0      	nop			@ (mov r8, r8)

1004ab48 <__arm_cp.18_0>:
1004ab48:	20000b40 	.word	0x20000b40

1004ab4c <hal_radio_activity_state_init>:
1004ab4c:	4803      	ldr	r0, [pc, #12]	@ (1004ab5c <__arm_cp.20_0>)
1004ab4e:	6800      	ldr	r0, [r0, #0]
1004ab50:	2100      	movs	r1, #0
1004ab52:	7501      	strb	r1, [r0, #20]
1004ab54:	8241      	strh	r1, [r0, #18]
1004ab56:	7401      	strb	r1, [r0, #16]
1004ab58:	4770      	bx	lr
1004ab5a:	46c0      	nop			@ (mov r8, r8)

1004ab5c <__arm_cp.20_0>:
1004ab5c:	20000b40 	.word	0x20000b40

1004ab60 <hal_radio_activity_state_cb_check>:
1004ab60:	b510      	push	{r4, lr}
1004ab62:	b086      	sub	sp, #24
1004ab64:	4815      	ldr	r0, [pc, #84]	@ (1004abbc <__arm_cp.22_0>)
1004ab66:	6804      	ldr	r4, [r0, #0]
1004ab68:	a802      	add	r0, sp, #8
1004ab6a:	a901      	add	r1, sp, #4
1004ab6c:	466a      	mov	r2, sp
1004ab6e:	f7ff ffd3 	bl	1004ab18 <hal_read_radio_activity_state>
1004ab72:	2800      	cmp	r0, #0
1004ab74:	d01f      	beq.n	1004abb6 <hal_radio_activity_state_cb_check+0x56>
1004ab76:	a802      	add	r0, sp, #8
1004ab78:	7801      	ldrb	r1, [r0, #0]
1004ab7a:	8a60      	ldrh	r0, [r4, #18]
1004ab7c:	40c8      	lsrs	r0, r1
1004ab7e:	07c0      	lsls	r0, r0, #31
1004ab80:	d019      	beq.n	1004abb6 <hal_radio_activity_state_cb_check+0x56>
1004ab82:	9a01      	ldr	r2, [sp, #4]
1004ab84:	9b00      	ldr	r3, [sp, #0]
1004ab86:	a803      	add	r0, sp, #12
1004ab88:	2408      	movs	r4, #8
1004ab8a:	7084      	strb	r4, [r0, #2]
1004ab8c:	0e1c      	lsrs	r4, r3, #24
1004ab8e:	72c4      	strb	r4, [r0, #11]
1004ab90:	0c1c      	lsrs	r4, r3, #16
1004ab92:	7284      	strb	r4, [r0, #10]
1004ab94:	0a1c      	lsrs	r4, r3, #8
1004ab96:	7244      	strb	r4, [r0, #9]
1004ab98:	7203      	strb	r3, [r0, #8]
1004ab9a:	71c2      	strb	r2, [r0, #7]
1004ab9c:	7181      	strb	r1, [r0, #6]
1004ab9e:	21ff      	movs	r1, #255	@ 0xff
1004aba0:	7041      	strb	r1, [r0, #1]
1004aba2:	2182      	movs	r1, #130	@ 0x82
1004aba4:	7001      	strb	r1, [r0, #0]
1004aba6:	2100      	movs	r1, #0
1004aba8:	7141      	strb	r1, [r0, #5]
1004abaa:	2204      	movs	r2, #4
1004abac:	7102      	strb	r2, [r0, #4]
1004abae:	70c1      	strb	r1, [r0, #3]
1004abb0:	210c      	movs	r1, #12
1004abb2:	f7ff fc1d 	bl	1004a3f0 <BLE_STACK_Event>
1004abb6:	b006      	add	sp, #24
1004abb8:	bd10      	pop	{r4, pc}
1004abba:	46c0      	nop			@ (mov r8, r8)

1004abbc <__arm_cp.22_0>:
1004abbc:	20000b40 	.word	0x20000b40

1004abc0 <ACL_pkt_init_ucfg_weak>:
1004abc0:	2000      	movs	r0, #0
1004abc2:	4770      	bx	lr

1004abc4 <BLE_STACK_Tick>:
1004abc4:	b580      	push	{r7, lr}
1004abc6:	f003 fa85 	bl	1004e0d4 <tsk_scheduler>
1004abca:	bd80      	pop	{r7, pc}

1004abcc <BlueNRG_Stack_Initialize_Layers>:
1004abcc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004abce:	b08f      	sub	sp, #60	@ 0x3c
1004abd0:	9309      	str	r3, [sp, #36]	@ 0x24
1004abd2:	920b      	str	r2, [sp, #44]	@ 0x2c
1004abd4:	910a      	str	r1, [sp, #40]	@ 0x28
1004abd6:	9008      	str	r0, [sp, #32]
1004abd8:	f002 ff94 	bl	1004db04 <csmem_init>
1004abdc:	2401      	movs	r4, #1
1004abde:	2138      	movs	r1, #56	@ 0x38
1004abe0:	4620      	mov	r0, r4
1004abe2:	f002 ffa7 	bl	1004db34 <csmem_mem_0_assign>
1004abe6:	4933      	ldr	r1, [pc, #204]	@ (1004acb4 <__arm_cp.1_0>)
1004abe8:	7ac9      	ldrb	r1, [r1, #11]
1004abea:	2234      	movs	r2, #52	@ 0x34
1004abec:	5481      	strb	r1, [r0, r2]
1004abee:	4e32      	ldr	r6, [pc, #200]	@ (1004acb8 <__arm_cp.1_1>)
1004abf0:	6030      	str	r0, [r6, #0]
1004abf2:	2700      	movs	r7, #0
1004abf4:	7007      	strb	r7, [r0, #0]
1004abf6:	6830      	ldr	r0, [r6, #0]
1004abf8:	7047      	strb	r7, [r0, #1]
1004abfa:	6830      	ldr	r0, [r6, #0]
1004abfc:	7087      	strb	r7, [r0, #2]
1004abfe:	6830      	ldr	r0, [r6, #0]
1004ac00:	21e1      	movs	r1, #225	@ 0xe1
1004ac02:	70c1      	strb	r1, [r0, #3]
1004ac04:	2005      	movs	r0, #5
1004ac06:	01c0      	lsls	r0, r0, #7
1004ac08:	6831      	ldr	r1, [r6, #0]
1004ac0a:	8088      	strh	r0, [r1, #4]
1004ac0c:	2030      	movs	r0, #48	@ 0x30
1004ac0e:	8508      	strh	r0, [r1, #40]	@ 0x28
1004ac10:	ad0e      	add	r5, sp, #56	@ 0x38
1004ac12:	a90d      	add	r1, sp, #52	@ 0x34
1004ac14:	aa0c      	add	r2, sp, #48	@ 0x30
1004ac16:	4628      	mov	r0, r5
1004ac18:	f7f6 ff1a 	bl	10041a50 <BLEPLAT_GetPartInfo>
1004ac1c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004ac1e:	0200      	lsls	r0, r0, #8
1004ac20:	7829      	ldrb	r1, [r5, #0]
1004ac22:	0109      	lsls	r1, r1, #4
1004ac24:	4301      	orrs	r1, r0
1004ac26:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004ac28:	0300      	lsls	r0, r0, #12
1004ac2a:	4308      	orrs	r0, r1
1004ac2c:	1d00      	adds	r0, r0, #4
1004ac2e:	6831      	ldr	r1, [r6, #0]
1004ac30:	8548      	strh	r0, [r1, #42]	@ 0x2a
1004ac32:	2118      	movs	r1, #24
1004ac34:	4620      	mov	r0, r4
1004ac36:	f002 ff7d 	bl	1004db34 <csmem_mem_0_assign>
1004ac3a:	4920      	ldr	r1, [pc, #128]	@ (1004acbc <__arm_cp.1_2>)
1004ac3c:	6008      	str	r0, [r1, #0]
1004ac3e:	7507      	strb	r7, [r0, #20]
1004ac40:	f003 fa3e 	bl	1004e0c0 <tsk_init>
1004ac44:	981c      	ldr	r0, [sp, #112]	@ 0x70
1004ac46:	9006      	str	r0, [sp, #24]
1004ac48:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
1004ac4a:	9405      	str	r4, [sp, #20]
1004ac4c:	981a      	ldr	r0, [sp, #104]	@ 0x68
1004ac4e:	9004      	str	r0, [sp, #16]
1004ac50:	9819      	ldr	r0, [sp, #100]	@ 0x64
1004ac52:	9003      	str	r0, [sp, #12]
1004ac54:	9818      	ldr	r0, [sp, #96]	@ 0x60
1004ac56:	9002      	str	r0, [sp, #8]
1004ac58:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1004ac5a:	9001      	str	r0, [sp, #4]
1004ac5c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004ac5e:	9500      	str	r5, [sp, #0]
1004ac60:	9808      	ldr	r0, [sp, #32]
1004ac62:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004ac64:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004ac66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004ac68:	f002 fadc 	bl	1004d224 <LL_init_ucfg_weak>
1004ac6c:	f002 ff48 	bl	1004db00 <MBM_init_ucfg_weak>
1004ac70:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
1004ac72:	2c01      	cmp	r4, #1
1004ac74:	d101      	bne.n	1004ac7a <BlueNRG_Stack_Initialize_Layers+0xae>
1004ac76:	f7ff ffa3 	bl	1004abc0 <ACL_pkt_init_ucfg_weak>
1004ac7a:	f000 f999 	bl	1004afb0 <Events_Process_init>
1004ac7e:	2f01      	cmp	r7, #1
1004ac80:	d101      	bne.n	1004ac86 <BlueNRG_Stack_Initialize_Layers+0xba>
1004ac82:	f000 f8ca 	bl	1004ae1a <log_init_ucfg_weak>
1004ac86:	6830      	ldr	r0, [r6, #0]
1004ac88:	212c      	movs	r1, #44	@ 0x2c
1004ac8a:	5c40      	ldrb	r0, [r0, r1]
1004ac8c:	07c0      	lsls	r0, r0, #31
1004ac8e:	d10e      	bne.n	1004acae <BlueNRG_Stack_Initialize_Layers+0xe2>
1004ac90:	2c01      	cmp	r4, #1
1004ac92:	d106      	bne.n	1004aca2 <BlueNRG_Stack_Initialize_Layers+0xd6>
1004ac94:	9816      	ldr	r0, [sp, #88]	@ 0x58
1004ac96:	f000 ffbb 	bl	1004bc10 <L2C_init_ucfg_weak>
1004ac9a:	f003 f9f5 	bl	1004e088 <smp_init_ucfg_weak>
1004ac9e:	f000 feb6 	bl	1004ba0e <GAT_att_cmn_init_ucfg_weak>
1004aca2:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004aca4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004aca6:	462a      	mov	r2, r5
1004aca8:	4623      	mov	r3, r4
1004acaa:	f000 fb27 	bl	1004b2fc <GAP_init_context>
1004acae:	b00f      	add	sp, #60	@ 0x3c
1004acb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004acb2:	46c0      	nop			@ (mov r8, r8)

1004acb4 <__arm_cp.1_0>:
1004acb4:	20000b50 	.word	0x20000b50

1004acb8 <__arm_cp.1_1>:
1004acb8:	20000b30 	.word	0x20000b30

1004acbc <__arm_cp.1_2>:
1004acbc:	20000b84 	.word	0x20000b84

1004acc0 <_BlueNRG_Stack_Initialization>:
1004acc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004acc2:	b095      	sub	sp, #84	@ 0x54
1004acc4:	2001      	movs	r0, #1
1004acc6:	0481      	lsls	r1, r0, #18
1004acc8:	9114      	str	r1, [sp, #80]	@ 0x50
1004acca:	482e      	ldr	r0, [pc, #184]	@ (1004ad84 <__arm_cp.2_0>)
1004accc:	6001      	str	r1, [r0, #0]
1004acce:	f3bf 8f4f 	dsb	sy
1004acd2:	f3bf 8f6f 	isb	sy
1004acd6:	f7f7 fba5 	bl	10042424 <BLEPLAT_CNTR_GlobDisableBlue>
1004acda:	f7f6 ff5d 	bl	10041b98 <BLEPLAT_ClearRadioTimerValue>
1004acde:	2000      	movs	r0, #0
1004ace0:	9012      	str	r0, [sp, #72]	@ 0x48
1004ace2:	43c0      	mvns	r0, r0
1004ace4:	f7f7 fb8a 	bl	100423fc <BLEPLAT_CNTR_ClearInterrupt>
1004ace8:	f000 ff85 	bl	1004bbf6 <data_length_extension_csr_ucfg_weak>
1004acec:	9013      	str	r0, [sp, #76]	@ 0x4c
1004acee:	f000 ff86 	bl	1004bbfe <phy_upd_csr_ucfg_weak>
1004acf2:	9011      	str	r0, [sp, #68]	@ 0x44
1004acf4:	f002 f9e7 	bl	1004d0c6 <ext_adv_scan_enabled_ucfg_weak>
1004acf8:	9010      	str	r0, [sp, #64]	@ 0x40
1004acfa:	f001 f9a3 	bl	1004c044 <llc_priv_controller_privacy_csr_ucfg_weak>
1004acfe:	900f      	str	r0, [sp, #60]	@ 0x3c
1004ad00:	f003 f9c3 	bl	1004e08a <secure_connections_csr_ucfg_weak>
1004ad04:	f000 ff7d 	bl	1004bc02 <scan_csr_ucfg_weak>
1004ad08:	900e      	str	r0, [sp, #56]	@ 0x38
1004ad0a:	f000 ff7e 	bl	1004bc0a <l2c_cos_csr_ucfg_weak>
1004ad0e:	900d      	str	r0, [sp, #52]	@ 0x34
1004ad10:	f001 f990 	bl	1004c034 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004ad14:	900c      	str	r0, [sp, #48]	@ 0x30
1004ad16:	f001 f98f 	bl	1004c038 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004ad1a:	900b      	str	r0, [sp, #44]	@ 0x2c
1004ad1c:	f000 ff67 	bl	1004bbee <cte_csr_ucfg_weak>
1004ad20:	4604      	mov	r4, r0
1004ad22:	f000 ff6a 	bl	1004bbfa <pcl_csr_ucfg_weak>
1004ad26:	4605      	mov	r5, r0
1004ad28:	f000 ff6d 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004ad2c:	4606      	mov	r6, r0
1004ad2e:	f000 fee5 	bl	1004bafc <chc_csr_ucfg_weak>
1004ad32:	4607      	mov	r7, r0
1004ad34:	f000 f873 	bl	1004ae1e <log_csr_ucfg_weak>
1004ad38:	b2c0      	uxtb	r0, r0
1004ad3a:	b2f9      	uxtb	r1, r7
1004ad3c:	9108      	str	r1, [sp, #32]
1004ad3e:	9009      	str	r0, [sp, #36]	@ 0x24
1004ad40:	b2f0      	uxtb	r0, r6
1004ad42:	b2e9      	uxtb	r1, r5
1004ad44:	b2e2      	uxtb	r2, r4
1004ad46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004ad48:	b2db      	uxtb	r3, r3
1004ad4a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1004ad4c:	b2e4      	uxtb	r4, r4
1004ad4e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1004ad50:	b2ed      	uxtb	r5, r5
1004ad52:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
1004ad54:	b2f6      	uxtb	r6, r6
1004ad56:	9f12      	ldr	r7, [sp, #72]	@ 0x48
1004ad58:	9700      	str	r7, [sp, #0]
1004ad5a:	9601      	str	r6, [sp, #4]
1004ad5c:	9502      	str	r5, [sp, #8]
1004ad5e:	9403      	str	r4, [sp, #12]
1004ad60:	9304      	str	r3, [sp, #16]
1004ad62:	9205      	str	r2, [sp, #20]
1004ad64:	9106      	str	r1, [sp, #24]
1004ad66:	9007      	str	r0, [sp, #28]
1004ad68:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1004ad6a:	b2c0      	uxtb	r0, r0
1004ad6c:	9911      	ldr	r1, [sp, #68]	@ 0x44
1004ad6e:	b2c9      	uxtb	r1, r1
1004ad70:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1004ad72:	b2d3      	uxtb	r3, r2
1004ad74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1004ad76:	f7ff ff29 	bl	1004abcc <BlueNRG_Stack_Initialize_Layers>
1004ad7a:	4803      	ldr	r0, [pc, #12]	@ (1004ad88 <__arm_cp.2_1>)
1004ad7c:	9914      	ldr	r1, [sp, #80]	@ 0x50
1004ad7e:	6001      	str	r1, [r0, #0]
1004ad80:	b015      	add	sp, #84	@ 0x54
1004ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004ad84 <__arm_cp.2_0>:
1004ad84:	e000e180 	.word	0xe000e180

1004ad88 <__arm_cp.2_1>:
1004ad88:	e000e100 	.word	0xe000e100

1004ad8c <BLE_STACK_Init>:
1004ad8c:	b5b0      	push	{r4, r5, r7, lr}
1004ad8e:	4605      	mov	r5, r0
1004ad90:	7ac0      	ldrb	r0, [r0, #11]
1004ad92:	2412      	movs	r4, #18
1004ad94:	2880      	cmp	r0, #128	@ 0x80
1004ad96:	d829      	bhi.n	1004adec <BLE_STACK_Init+0x60>
1004ad98:	8c29      	ldrh	r1, [r5, #32]
1004ad9a:	2917      	cmp	r1, #23
1004ad9c:	d326      	bcc.n	1004adec <BLE_STACK_Init+0x60>
1004ad9e:	4814      	ldr	r0, [pc, #80]	@ (1004adf0 <__arm_cp.3_0>)
1004ada0:	1d82      	adds	r2, r0, #6
1004ada2:	4291      	cmp	r1, r2
1004ada4:	d822      	bhi.n	1004adec <BLE_STACK_Init+0x60>
1004ada6:	8a29      	ldrh	r1, [r5, #16]
1004ada8:	2917      	cmp	r1, #23
1004adaa:	d31f      	bcc.n	1004adec <BLE_STACK_Init+0x60>
1004adac:	4281      	cmp	r1, r0
1004adae:	d81d      	bhi.n	1004adec <BLE_STACK_Init+0x60>
1004adb0:	7ea8      	ldrb	r0, [r5, #26]
1004adb2:	2800      	cmp	r0, #0
1004adb4:	d01a      	beq.n	1004adec <BLE_STACK_Init+0x60>
1004adb6:	f001 f93f 	bl	1004c038 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004adba:	2800      	cmp	r0, #0
1004adbc:	d008      	beq.n	1004add0 <BLE_STACK_Init+0x44>
1004adbe:	7ee8      	ldrb	r0, [r5, #27]
1004adc0:	2800      	cmp	r0, #0
1004adc2:	d013      	beq.n	1004adec <BLE_STACK_Init+0x60>
1004adc4:	2880      	cmp	r0, #128	@ 0x80
1004adc6:	d811      	bhi.n	1004adec <BLE_STACK_Init+0x60>
1004adc8:	7f28      	ldrb	r0, [r5, #28]
1004adca:	1e40      	subs	r0, r0, #1
1004adcc:	280e      	cmp	r0, #14
1004adce:	d80d      	bhi.n	1004adec <BLE_STACK_Init+0x60>
1004add0:	4808      	ldr	r0, [pc, #32]	@ (1004adf4 <__arm_cp.3_1>)
1004add2:	2234      	movs	r2, #52	@ 0x34
1004add4:	4629      	mov	r1, r5
1004add6:	f7f6 fe1b 	bl	10041a10 <BLEPLAT_MemCpy>
1004adda:	f002 feb5 	bl	1004db48 <BlueNRG_Stack_Initialize_RAM_check>
1004adde:	2800      	cmp	r0, #0
1004ade0:	d403      	bmi.n	1004adea <BLE_STACK_Init+0x5e>
1004ade2:	f7ff ff6d 	bl	1004acc0 <_BlueNRG_Stack_Initialization>
1004ade6:	2400      	movs	r4, #0
1004ade8:	e000      	b.n	1004adec <BLE_STACK_Init+0x60>
1004adea:	2487      	movs	r4, #135	@ 0x87
1004adec:	4620      	mov	r0, r4
1004adee:	bdb0      	pop	{r4, r5, r7, pc}

1004adf0 <__arm_cp.3_0>:
1004adf0:	000003fa 	.word	0x000003fa

1004adf4 <__arm_cp.3_1>:
1004adf4:	20000b50 	.word	0x20000b50

1004adf8 <BLE_STACK_SleepCheck>:
1004adf8:	b580      	push	{r7, lr}
1004adfa:	f003 f99f 	bl	1004e13c <tsk_no_idle_check>
1004adfe:	2800      	cmp	r0, #0
1004ae00:	d104      	bne.n	1004ae0c <BLE_STACK_SleepCheck+0x14>
1004ae02:	4804      	ldr	r0, [pc, #16]	@ (1004ae14 <__arm_cp.4_0>)
1004ae04:	6800      	ldr	r0, [r0, #0]
1004ae06:	7ac0      	ldrb	r0, [r0, #11]
1004ae08:	2800      	cmp	r0, #0
1004ae0a:	d001      	beq.n	1004ae10 <BLE_STACK_SleepCheck+0x18>
1004ae0c:	2000      	movs	r0, #0
1004ae0e:	bd80      	pop	{r7, pc}
1004ae10:	2003      	movs	r0, #3
1004ae12:	bd80      	pop	{r7, pc}

1004ae14 <__arm_cp.4_0>:
1004ae14:	20000b40 	.word	0x20000b40

1004ae18 <log_verbosity_get_ucfg_weak>:
1004ae18:	4770      	bx	lr

1004ae1a <log_init_ucfg_weak>:
1004ae1a:	4770      	bx	lr

1004ae1c <log_notify_us_flush_ucfg_weak>:
1004ae1c:	4770      	bx	lr

1004ae1e <log_csr_ucfg_weak>:
1004ae1e:	2000      	movs	r0, #0
1004ae20:	4770      	bx	lr
	...

1004ae24 <aci_event_fifo_push_header>:
1004ae24:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004ae26:	4615      	mov	r5, r2
1004ae28:	460c      	mov	r4, r1
1004ae2a:	4606      	mov	r6, r0
1004ae2c:	0608      	lsls	r0, r1, #24
1004ae2e:	d414      	bmi.n	1004ae5a <aci_event_fifo_push_header+0x36>
1004ae30:	aa02      	add	r2, sp, #8
1004ae32:	af01      	add	r7, sp, #4
1004ae34:	4630      	mov	r0, r6
1004ae36:	4619      	mov	r1, r3
1004ae38:	463b      	mov	r3, r7
1004ae3a:	f000 f853 	bl	1004aee4 <fifoBuf_getFreeHeader>
1004ae3e:	2800      	cmp	r0, #0
1004ae40:	d021      	beq.n	1004ae86 <aci_event_fifo_push_header+0x62>
1004ae42:	0660      	lsls	r0, r4, #25
1004ae44:	d438      	bmi.n	1004aeb8 <aci_event_fifo_push_header+0x94>
1004ae46:	9802      	ldr	r0, [sp, #8]
1004ae48:	7881      	ldrb	r1, [r0, #2]
1004ae4a:	22fc      	movs	r2, #252	@ 0xfc
1004ae4c:	400a      	ands	r2, r1
1004ae4e:	7082      	strb	r2, [r0, #2]
1004ae50:	9901      	ldr	r1, [sp, #4]
1004ae52:	8001      	strh	r1, [r0, #0]
1004ae54:	8071      	strh	r1, [r6, #2]
1004ae56:	2701      	movs	r7, #1
1004ae58:	e02f      	b.n	1004aeba <aci_event_fifo_push_header+0x96>
1004ae5a:	f3ef 8010 	mrs	r0, PRIMASK
1004ae5e:	b672      	cpsid	i
1004ae60:	aa02      	add	r2, sp, #8
1004ae62:	af01      	add	r7, sp, #4
1004ae64:	4630      	mov	r0, r6
1004ae66:	4619      	mov	r1, r3
1004ae68:	463b      	mov	r3, r7
1004ae6a:	f000 f83b 	bl	1004aee4 <fifoBuf_getFreeHeader>
1004ae6e:	2800      	cmp	r0, #0
1004ae70:	d00b      	beq.n	1004ae8a <aci_event_fifo_push_header+0x66>
1004ae72:	9902      	ldr	r1, [sp, #8]
1004ae74:	788a      	ldrb	r2, [r1, #2]
1004ae76:	23fc      	movs	r3, #252	@ 0xfc
1004ae78:	4013      	ands	r3, r2
1004ae7a:	708b      	strb	r3, [r1, #2]
1004ae7c:	9a01      	ldr	r2, [sp, #4]
1004ae7e:	800a      	strh	r2, [r1, #0]
1004ae80:	8072      	strh	r2, [r6, #2]
1004ae82:	2701      	movs	r7, #1
1004ae84:	e002      	b.n	1004ae8c <aci_event_fifo_push_header+0x68>
1004ae86:	2700      	movs	r7, #0
1004ae88:	e003      	b.n	1004ae92 <aci_event_fifo_push_header+0x6e>
1004ae8a:	2700      	movs	r7, #0
1004ae8c:	b662      	cpsie	i
1004ae8e:	2800      	cmp	r0, #0
1004ae90:	d113      	bne.n	1004aeba <aci_event_fifo_push_header+0x96>
1004ae92:	f3ef 8010 	mrs	r0, PRIMASK
1004ae96:	b672      	cpsid	i
1004ae98:	06a0      	lsls	r0, r4, #26
1004ae9a:	d40a      	bmi.n	1004aeb2 <aci_event_fifo_push_header+0x8e>
1004ae9c:	4810      	ldr	r0, [pc, #64]	@ (1004aee0 <__arm_cp.0_0>)
1004ae9e:	6800      	ldr	r0, [r0, #0]
1004aea0:	6801      	ldr	r1, [r0, #0]
1004aea2:	2208      	movs	r2, #8
1004aea4:	430a      	orrs	r2, r1
1004aea6:	6002      	str	r2, [r0, #0]
1004aea8:	2000      	movs	r0, #0
1004aeaa:	f003 f951 	bl	1004e150 <tsk_notify_idx>
1004aeae:	f7f6 fbd2 	bl	10041656 <BLE_STACK_ProcessRequest>
1004aeb2:	b662      	cpsie	i
1004aeb4:	2600      	movs	r6, #0
1004aeb6:	e00a      	b.n	1004aece <aci_event_fifo_push_header+0xaa>
1004aeb8:	2700      	movs	r7, #0
1004aeba:	9e02      	ldr	r6, [sp, #8]
1004aebc:	70f5      	strb	r5, [r6, #3]
1004aebe:	00a0      	lsls	r0, r4, #2
1004aec0:	2160      	movs	r1, #96	@ 0x60
1004aec2:	4001      	ands	r1, r0
1004aec4:	78b0      	ldrb	r0, [r6, #2]
1004aec6:	2203      	movs	r2, #3
1004aec8:	4002      	ands	r2, r0
1004aeca:	1850      	adds	r0, r2, r1
1004aecc:	70b0      	strb	r0, [r6, #2]
1004aece:	2f00      	cmp	r7, #0
1004aed0:	d004      	beq.n	1004aedc <aci_event_fifo_push_header+0xb8>
1004aed2:	2000      	movs	r0, #0
1004aed4:	f003 f93c 	bl	1004e150 <tsk_notify_idx>
1004aed8:	f7f6 fbbd 	bl	10041656 <BLE_STACK_ProcessRequest>
1004aedc:	4630      	mov	r0, r6
1004aede:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004aee0 <__arm_cp.0_0>:
1004aee0:	20000b34 	.word	0x20000b34

1004aee4 <fifoBuf_getFreeHeader>:
1004aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004aee6:	9200      	str	r2, [sp, #0]
1004aee8:	8845      	ldrh	r5, [r0, #2]
1004aeea:	08ac      	lsrs	r4, r5, #2
1004aeec:	801c      	strh	r4, [r3, #0]
1004aeee:	1c49      	adds	r1, r1, #1
1004aef0:	b28a      	uxth	r2, r1
1004aef2:	18a6      	adds	r6, r4, r2
1004aef4:	8887      	ldrh	r7, [r0, #4]
1004aef6:	42be      	cmp	r6, r7
1004aef8:	d900      	bls.n	1004aefc <fifoBuf_getFreeHeader+0x18>
1004aefa:	1b09      	subs	r1, r1, r4
1004aefc:	190a      	adds	r2, r1, r4
1004aefe:	0092      	lsls	r2, r2, #2
1004af00:	42be      	cmp	r6, r7
1004af02:	d900      	bls.n	1004af06 <fifoBuf_getFreeHeader+0x22>
1004af04:	1c6d      	adds	r5, r5, #1
1004af06:	2603      	movs	r6, #3
1004af08:	4035      	ands	r5, r6
1004af0a:	1952      	adds	r2, r2, r5
1004af0c:	801a      	strh	r2, [r3, #0]
1004af0e:	00a3      	lsls	r3, r4, #2
1004af10:	181b      	adds	r3, r3, r0
1004af12:	3308      	adds	r3, #8
1004af14:	9c00      	ldr	r4, [sp, #0]
1004af16:	6023      	str	r3, [r4, #0]
1004af18:	b292      	uxth	r2, r2
1004af1a:	8805      	ldrh	r5, [r0, #0]
1004af1c:	1b52      	subs	r2, r2, r5
1004af1e:	4617      	mov	r7, r2
1004af20:	4037      	ands	r7, r6
1004af22:	8884      	ldrh	r4, [r0, #4]
1004af24:	4367      	muls	r7, r4
1004af26:	4035      	ands	r5, r6
1004af28:	1952      	adds	r2, r2, r5
1004af2a:	0892      	lsrs	r2, r2, #2
1004af2c:	19d2      	adds	r2, r2, r7
1004af2e:	b295      	uxth	r5, r2
1004af30:	88c6      	ldrh	r6, [r0, #6]
1004af32:	42b5      	cmp	r5, r6
1004af34:	d900      	bls.n	1004af38 <fifoBuf_getFreeHeader+0x54>
1004af36:	80c2      	strh	r2, [r0, #6]
1004af38:	42a5      	cmp	r5, r4
1004af3a:	d80a      	bhi.n	1004af52 <fifoBuf_getFreeHeader+0x6e>
1004af3c:	b209      	sxth	r1, r1
1004af3e:	2900      	cmp	r1, #0
1004af40:	d507      	bpl.n	1004af52 <fifoBuf_getFreeHeader+0x6e>
1004af42:	7899      	ldrb	r1, [r3, #2]
1004af44:	22fc      	movs	r2, #252	@ 0xfc
1004af46:	400a      	ands	r2, r1
1004af48:	1c51      	adds	r1, r2, #1
1004af4a:	7099      	strb	r1, [r3, #2]
1004af4c:	3008      	adds	r0, #8
1004af4e:	9900      	ldr	r1, [sp, #0]
1004af50:	6008      	str	r0, [r1, #0]
1004af52:	42a5      	cmp	r5, r4
1004af54:	d901      	bls.n	1004af5a <fifoBuf_getFreeHeader+0x76>
1004af56:	2000      	movs	r0, #0
1004af58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004af5a:	2001      	movs	r0, #1
1004af5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004af5e <aci_event_fifo_push>:
1004af5e:	b580      	push	{r7, lr}
1004af60:	0640      	lsls	r0, r0, #25
1004af62:	d405      	bmi.n	1004af70 <aci_event_fifo_push+0x12>
1004af64:	7888      	ldrb	r0, [r1, #2]
1004af66:	22fc      	movs	r2, #252	@ 0xfc
1004af68:	4002      	ands	r2, r0
1004af6a:	1c90      	adds	r0, r2, #2
1004af6c:	7088      	strb	r0, [r1, #2]
1004af6e:	bd80      	pop	{r7, pc}
1004af70:	4608      	mov	r0, r1
1004af72:	f000 f801 	bl	1004af78 <event_notify_cb>
1004af76:	bd80      	pop	{r7, pc}

1004af78 <event_notify_cb>:
1004af78:	b580      	push	{r7, lr}
1004af7a:	1d01      	adds	r1, r0, #4
1004af7c:	78c2      	ldrb	r2, [r0, #3]
1004af7e:	2a14      	cmp	r2, #20
1004af80:	d804      	bhi.n	1004af8c <event_notify_cb+0x14>
1004af82:	6842      	ldr	r2, [r0, #4]
1004af84:	7880      	ldrb	r0, [r0, #2]
1004af86:	0880      	lsrs	r0, r0, #2
1004af88:	4790      	blx	r2
1004af8a:	bd80      	pop	{r7, pc}
1004af8c:	2a3d      	cmp	r2, #61	@ 0x3d
1004af8e:	d803      	bhi.n	1004af98 <event_notify_cb+0x20>
1004af90:	2000      	movs	r0, #0
1004af92:	f000 f8e9 	bl	1004b168 <hci_event_notify_cb>
1004af96:	bd80      	pop	{r7, pc}
1004af98:	2a3f      	cmp	r2, #63	@ 0x3f
1004af9a:	d803      	bhi.n	1004afa4 <event_notify_cb+0x2c>
1004af9c:	2000      	movs	r0, #0
1004af9e:	f000 f8f5 	bl	1004b18c <hci_rx_data_notify_cb>
1004afa2:	bd80      	pop	{r7, pc}
1004afa4:	2a60      	cmp	r2, #96	@ 0x60
1004afa6:	d802      	bhi.n	1004afae <event_notify_cb+0x36>
1004afa8:	2000      	movs	r0, #0
1004afaa:	f000 f8e4 	bl	1004b176 <hci_aci_event_notify_cb>
1004afae:	bd80      	pop	{r7, pc}

1004afb0 <Events_Process_init>:
1004afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004afb2:	2001      	movs	r0, #1
1004afb4:	211c      	movs	r1, #28
1004afb6:	4a29      	ldr	r2, [pc, #164]	@ (1004b05c <__arm_cp.7_0>)
1004afb8:	4790      	blx	r2
1004afba:	4f29      	ldr	r7, [pc, #164]	@ (1004b060 <__arm_cp.7_1>)
1004afbc:	6038      	str	r0, [r7, #0]
1004afbe:	4d29      	ldr	r5, [pc, #164]	@ (1004b064 <__arm_cp.7_2>)
1004afc0:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
1004afc2:	1e40      	subs	r0, r0, #1
1004afc4:	2603      	movs	r6, #3
1004afc6:	4330      	orrs	r0, r6
1004afc8:	1c40      	adds	r0, r0, #1
1004afca:	0880      	lsrs	r0, r0, #2
1004afcc:	1cc0      	adds	r0, r0, #3
1004afce:	2404      	movs	r4, #4
1004afd0:	4621      	mov	r1, r4
1004afd2:	4a22      	ldr	r2, [pc, #136]	@ (1004b05c <__arm_cp.7_0>)
1004afd4:	4790      	blx	r2
1004afd6:	6839      	ldr	r1, [r7, #0]
1004afd8:	6048      	str	r0, [r1, #4]
1004afda:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
1004afdc:	1e40      	subs	r0, r0, #1
1004afde:	4330      	orrs	r0, r6
1004afe0:	1c40      	adds	r0, r0, #1
1004afe2:	0880      	lsrs	r0, r0, #2
1004afe4:	1cc0      	adds	r0, r0, #3
1004afe6:	4621      	mov	r1, r4
1004afe8:	4d1c      	ldr	r5, [pc, #112]	@ (1004b05c <__arm_cp.7_0>)
1004afea:	47a8      	blx	r5
1004afec:	462a      	mov	r2, r5
1004afee:	6839      	ldr	r1, [r7, #0]
1004aff0:	6088      	str	r0, [r1, #8]
1004aff2:	4d1c      	ldr	r5, [pc, #112]	@ (1004b064 <__arm_cp.7_2>)
1004aff4:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
1004aff6:	1e40      	subs	r0, r0, #1
1004aff8:	4330      	orrs	r0, r6
1004affa:	1c40      	adds	r0, r0, #1
1004affc:	0880      	lsrs	r0, r0, #2
1004affe:	1cc0      	adds	r0, r0, #3
1004b000:	4621      	mov	r1, r4
1004b002:	4790      	blx	r2
1004b004:	6839      	ldr	r1, [r7, #0]
1004b006:	60c8      	str	r0, [r1, #12]
1004b008:	f7ff fda0 	bl	1004ab4c <hal_radio_activity_state_init>
1004b00c:	6838      	ldr	r0, [r7, #0]
1004b00e:	6842      	ldr	r2, [r0, #4]
1004b010:	2100      	movs	r1, #0
1004b012:	8011      	strh	r1, [r2, #0]
1004b014:	8051      	strh	r1, [r2, #2]
1004b016:	6883      	ldr	r3, [r0, #8]
1004b018:	8019      	strh	r1, [r3, #0]
1004b01a:	80d1      	strh	r1, [r2, #6]
1004b01c:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
1004b01e:	1e7f      	subs	r7, r7, #1
1004b020:	4337      	orrs	r7, r6
1004b022:	1c7f      	adds	r7, r7, #1
1004b024:	08bf      	lsrs	r7, r7, #2
1004b026:	8097      	strh	r7, [r2, #4]
1004b028:	8059      	strh	r1, [r3, #2]
1004b02a:	80d9      	strh	r1, [r3, #6]
1004b02c:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
1004b02e:	1e7f      	subs	r7, r7, #1
1004b030:	4337      	orrs	r7, r6
1004b032:	1c7f      	adds	r7, r7, #1
1004b034:	08bf      	lsrs	r7, r7, #2
1004b036:	809f      	strh	r7, [r3, #4]
1004b038:	68c7      	ldr	r7, [r0, #12]
1004b03a:	8039      	strh	r1, [r7, #0]
1004b03c:	6102      	str	r2, [r0, #16]
1004b03e:	6143      	str	r3, [r0, #20]
1004b040:	80f9      	strh	r1, [r7, #6]
1004b042:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
1004b044:	1e52      	subs	r2, r2, #1
1004b046:	4332      	orrs	r2, r6
1004b048:	1c52      	adds	r2, r2, #1
1004b04a:	0892      	lsrs	r2, r2, #2
1004b04c:	80ba      	strh	r2, [r7, #4]
1004b04e:	8079      	strh	r1, [r7, #2]
1004b050:	6187      	str	r7, [r0, #24]
1004b052:	4622      	mov	r2, r4
1004b054:	f7f6 fcec 	bl	10041a30 <BLEPLAT_MemSet>
1004b058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b05a:	46c0      	nop			@ (mov r8, r8)

1004b05c <__arm_cp.7_0>:
1004b05c:	1004db35 	.word	0x1004db35

1004b060 <__arm_cp.7_1>:
1004b060:	20000b34 	.word	0x20000b34

1004b064 <__arm_cp.7_2>:
1004b064:	20000b50 	.word	0x20000b50

1004b068 <Events_Process_Q>:
1004b068:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004b06a:	4d3d      	ldr	r5, [pc, #244]	@ (1004b160 <__arm_cp.8_0>)
1004b06c:	6828      	ldr	r0, [r5, #0]
1004b06e:	3010      	adds	r0, #16
1004b070:	2100      	movs	r1, #0
1004b072:	2906      	cmp	r1, #6
1004b074:	d005      	beq.n	1004b082 <Events_Process_Q+0x1a>
1004b076:	c804      	ldmia	r0!, {r2}
1004b078:	8852      	ldrh	r2, [r2, #2]
1004b07a:	ab01      	add	r3, sp, #4
1004b07c:	525a      	strh	r2, [r3, r1]
1004b07e:	1c89      	adds	r1, r1, #2
1004b080:	e7f7      	b.n	1004b072 <Events_Process_Q+0xa>
1004b082:	f3ef 8010 	mrs	r0, PRIMASK
1004b086:	b672      	cpsid	i
1004b088:	6828      	ldr	r0, [r5, #0]
1004b08a:	6804      	ldr	r4, [r0, #0]
1004b08c:	2700      	movs	r7, #0
1004b08e:	6007      	str	r7, [r0, #0]
1004b090:	b662      	cpsie	i
1004b092:	07e0      	lsls	r0, r4, #31
1004b094:	d002      	beq.n	1004b09c <Events_Process_Q+0x34>
1004b096:	2000      	movs	r0, #0
1004b098:	f000 f89f 	bl	1004b1da <hci_hardware_error_event_cb>
1004b09c:	07a0      	lsls	r0, r4, #30
1004b09e:	d502      	bpl.n	1004b0a6 <Events_Process_Q+0x3e>
1004b0a0:	2001      	movs	r0, #1
1004b0a2:	f000 f89a 	bl	1004b1da <hci_hardware_error_event_cb>
1004b0a6:	0760      	lsls	r0, r4, #29
1004b0a8:	d502      	bpl.n	1004b0b0 <Events_Process_Q+0x48>
1004b0aa:	2002      	movs	r0, #2
1004b0ac:	f000 f895 	bl	1004b1da <hci_hardware_error_event_cb>
1004b0b0:	0720      	lsls	r0, r4, #28
1004b0b2:	d502      	bpl.n	1004b0ba <Events_Process_Q+0x52>
1004b0b4:	2003      	movs	r0, #3
1004b0b6:	f000 f890 	bl	1004b1da <hci_hardware_error_event_cb>
1004b0ba:	06e0      	lsls	r0, r4, #27
1004b0bc:	d54a      	bpl.n	1004b154 <Events_Process_Q+0xec>
1004b0be:	2004      	movs	r0, #4
1004b0c0:	f000 f88b 	bl	1004b1da <hci_hardware_error_event_cb>
1004b0c4:	e046      	b.n	1004b154 <Events_Process_Q+0xec>
1004b0c6:	0078      	lsls	r0, r7, #1
1004b0c8:	a901      	add	r1, sp, #4
1004b0ca:	5a0e      	ldrh	r6, [r1, r0]
1004b0cc:	9700      	str	r7, [sp, #0]
1004b0ce:	00bf      	lsls	r7, r7, #2
1004b0d0:	6828      	ldr	r0, [r5, #0]
1004b0d2:	19c0      	adds	r0, r0, r7
1004b0d4:	6900      	ldr	r0, [r0, #16]
1004b0d6:	8801      	ldrh	r1, [r0, #0]
1004b0d8:	8802      	ldrh	r2, [r0, #0]
1004b0da:	42b2      	cmp	r2, r6
1004b0dc:	d02a      	beq.n	1004b134 <Events_Process_Q+0xcc>
1004b0de:	0889      	lsrs	r1, r1, #2
1004b0e0:	1c89      	adds	r1, r1, #2
1004b0e2:	0089      	lsls	r1, r1, #2
1004b0e4:	1844      	adds	r4, r0, r1
1004b0e6:	78a1      	ldrb	r1, [r4, #2]
1004b0e8:	2203      	movs	r2, #3
1004b0ea:	400a      	ands	r2, r1
1004b0ec:	2a01      	cmp	r2, #1
1004b0ee:	d002      	beq.n	1004b0f6 <Events_Process_Q+0x8e>
1004b0f0:	2a00      	cmp	r2, #0
1004b0f2:	d103      	bne.n	1004b0fc <Events_Process_Q+0x94>
1004b0f4:	e01e      	b.n	1004b134 <Events_Process_Q+0xcc>
1004b0f6:	7a81      	ldrb	r1, [r0, #10]
1004b0f8:	3008      	adds	r0, #8
1004b0fa:	4604      	mov	r4, r0
1004b0fc:	0648      	lsls	r0, r1, #25
1004b0fe:	d403      	bmi.n	1004b108 <Events_Process_Q+0xa0>
1004b100:	4620      	mov	r0, r4
1004b102:	f7ff ff39 	bl	1004af78 <event_notify_cb>
1004b106:	e00a      	b.n	1004b11e <Events_Process_Q+0xb6>
1004b108:	78e0      	ldrb	r0, [r4, #3]
1004b10a:	2813      	cmp	r0, #19
1004b10c:	d207      	bcs.n	1004b11e <Events_Process_Q+0xb6>
1004b10e:	0080      	lsls	r0, r0, #2
1004b110:	4914      	ldr	r1, [pc, #80]	@ (1004b164 <__arm_cp.8_1>)
1004b112:	580a      	ldr	r2, [r1, r0]
1004b114:	1d21      	adds	r1, r4, #4
1004b116:	4620      	mov	r0, r4
1004b118:	4790      	blx	r2
1004b11a:	2800      	cmp	r0, #0
1004b11c:	d105      	bne.n	1004b12a <Events_Process_Q+0xc2>
1004b11e:	6828      	ldr	r0, [r5, #0]
1004b120:	19c0      	adds	r0, r0, r7
1004b122:	6900      	ldr	r0, [r0, #16]
1004b124:	8821      	ldrh	r1, [r4, #0]
1004b126:	8001      	strh	r1, [r0, #0]
1004b128:	e7d5      	b.n	1004b0d6 <Events_Process_Q+0x6e>
1004b12a:	2000      	movs	r0, #0
1004b12c:	f003 f810 	bl	1004e150 <tsk_notify_idx>
1004b130:	f7f6 fa91 	bl	10041656 <BLE_STACK_ProcessRequest>
1004b134:	f3ef 8010 	mrs	r0, PRIMASK
1004b138:	b672      	cpsid	i
1004b13a:	6828      	ldr	r0, [r5, #0]
1004b13c:	19c0      	adds	r0, r0, r7
1004b13e:	6900      	ldr	r0, [r0, #16]
1004b140:	8841      	ldrh	r1, [r0, #2]
1004b142:	8802      	ldrh	r2, [r0, #0]
1004b144:	4291      	cmp	r1, r2
1004b146:	d102      	bne.n	1004b14e <Events_Process_Q+0xe6>
1004b148:	2100      	movs	r1, #0
1004b14a:	8001      	strh	r1, [r0, #0]
1004b14c:	8041      	strh	r1, [r0, #2]
1004b14e:	b662      	cpsie	i
1004b150:	9f00      	ldr	r7, [sp, #0]
1004b152:	1c7f      	adds	r7, r7, #1
1004b154:	2f03      	cmp	r7, #3
1004b156:	d1b6      	bne.n	1004b0c6 <Events_Process_Q+0x5e>
1004b158:	f7ff fd02 	bl	1004ab60 <hal_radio_activity_state_cb_check>
1004b15c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b15e:	46c0      	nop			@ (mov r8, r8)

1004b160 <__arm_cp.8_0>:
1004b160:	20000b34 	.word	0x20000b34

1004b164 <__arm_cp.8_1>:
1004b164:	1004fe0c 	.word	0x1004fe0c

1004b168 <hci_event_notify_cb>:
1004b168:	b580      	push	{r7, lr}
1004b16a:	4608      	mov	r0, r1
1004b16c:	7889      	ldrb	r1, [r1, #2]
1004b16e:	1cc9      	adds	r1, r1, #3
1004b170:	f7ff f93e 	bl	1004a3f0 <BLE_STACK_Event>
1004b174:	bd80      	pop	{r7, pc}

1004b176 <hci_aci_event_notify_cb>:
1004b176:	b580      	push	{r7, lr}
1004b178:	4608      	mov	r0, r1
1004b17a:	7889      	ldrb	r1, [r1, #2]
1004b17c:	78c2      	ldrb	r2, [r0, #3]
1004b17e:	0212      	lsls	r2, r2, #8
1004b180:	1851      	adds	r1, r2, r1
1004b182:	1d09      	adds	r1, r1, #4
1004b184:	b289      	uxth	r1, r1
1004b186:	f7ff f933 	bl	1004a3f0 <BLE_STACK_Event>
1004b18a:	bd80      	pop	{r7, pc}

1004b18c <hci_rx_data_notify_cb>:
1004b18c:	b580      	push	{r7, lr}
1004b18e:	4608      	mov	r0, r1
1004b190:	78c9      	ldrb	r1, [r1, #3]
1004b192:	7902      	ldrb	r2, [r0, #4]
1004b194:	0212      	lsls	r2, r2, #8
1004b196:	1851      	adds	r1, r2, r1
1004b198:	1d49      	adds	r1, r1, #5
1004b19a:	b289      	uxth	r1, r1
1004b19c:	f7ff f928 	bl	1004a3f0 <BLE_STACK_Event>
1004b1a0:	bd80      	pop	{r7, pc}

1004b1a2 <hci_disconnection_complete_event_int_cb_ucfg_weak>:
1004b1a2:	2000      	movs	r0, #0
1004b1a4:	4770      	bx	lr

1004b1a6 <hci_encryption_change_event_int_cb_ucfg_weak>:
1004b1a6:	2000      	movs	r0, #0
1004b1a8:	4770      	bx	lr

1004b1aa <hci_encryption_key_refresh_complete_event_int_cb_ucfg_weak>:
1004b1aa:	2000      	movs	r0, #0
1004b1ac:	4770      	bx	lr

1004b1ae <hci_le_connection_complete_event_int_cb_ucfg_weak>:
1004b1ae:	2000      	movs	r0, #0
1004b1b0:	4770      	bx	lr

1004b1b2 <hci_le_enhanced_connection_complete_event_int_cb_ucfg_weak>:
1004b1b2:	2000      	movs	r0, #0
1004b1b4:	4770      	bx	lr

1004b1b6 <hci_le_long_term_key_request_event_int_cb_ucfg_weak>:
1004b1b6:	2000      	movs	r0, #0
1004b1b8:	4770      	bx	lr

1004b1ba <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg_weak>:
1004b1ba:	2000      	movs	r0, #0
1004b1bc:	4770      	bx	lr

1004b1be <hci_le_generate_dhkey_complete_event_int_cb_ucfg_weak>:
1004b1be:	2000      	movs	r0, #0
1004b1c0:	4770      	bx	lr

1004b1c2 <hci_le_advertising_report_event_int_cb_ucfg_weak>:
1004b1c2:	2000      	movs	r0, #0
1004b1c4:	4770      	bx	lr

1004b1c6 <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
1004b1c6:	2000      	movs	r0, #0
1004b1c8:	4770      	bx	lr

1004b1ca <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
1004b1ca:	2000      	movs	r0, #0
1004b1cc:	4770      	bx	lr

1004b1ce <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
1004b1ce:	2000      	movs	r0, #0
1004b1d0:	4770      	bx	lr

1004b1d2 <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
1004b1d2:	2000      	movs	r0, #0
1004b1d4:	4770      	bx	lr

1004b1d6 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
1004b1d6:	2000      	movs	r0, #0
1004b1d8:	4770      	bx	lr

1004b1da <hci_hardware_error_event_cb>:
1004b1da:	b5e0      	push	{r5, r6, r7, lr}
1004b1dc:	aa01      	add	r2, sp, #4
1004b1de:	70d0      	strb	r0, [r2, #3]
1004b1e0:	2001      	movs	r0, #1
1004b1e2:	7090      	strb	r0, [r2, #2]
1004b1e4:	2010      	movs	r0, #16
1004b1e6:	7050      	strb	r0, [r2, #1]
1004b1e8:	2104      	movs	r1, #4
1004b1ea:	7011      	strb	r1, [r2, #0]
1004b1ec:	4610      	mov	r0, r2
1004b1ee:	f7ff f8ff 	bl	1004a3f0 <BLE_STACK_Event>
1004b1f2:	bd8c      	pop	{r2, r3, r7, pc}

1004b1f4 <gap_timers_callback_wrapper>:
1004b1f4:	b580      	push	{r7, lr}
1004b1f6:	6940      	ldr	r0, [r0, #20]
1004b1f8:	4901      	ldr	r1, [pc, #4]	@ (1004b200 <__arm_cp.0_0>)
1004b1fa:	f003 f8b6 	bl	1004e36a <cst_sharedCallback>
1004b1fe:	bd80      	pop	{r7, pc}

1004b200 <__arm_cp.0_0>:
1004b200:	1004b205 	.word	0x1004b205

1004b204 <gap_timers_callback>:
1004b204:	b580      	push	{r7, lr}
1004b206:	2802      	cmp	r0, #2
1004b208:	d007      	beq.n	1004b21a <gap_timers_callback+0x16>
1004b20a:	2801      	cmp	r0, #1
1004b20c:	d009      	beq.n	1004b222 <gap_timers_callback+0x1e>
1004b20e:	2800      	cmp	r0, #0
1004b210:	d106      	bne.n	1004b220 <gap_timers_callback+0x1c>
1004b212:	2000      	movs	r0, #0
1004b214:	f000 f97a 	bl	1004b50c <GAP_LimDiscTimeoutcb_ucfg_weak>
1004b218:	bd80      	pop	{r7, pc}
1004b21a:	2000      	movs	r0, #0
1004b21c:	f003 fa59 	bl	1004e6d2 <GAP_DiscProcTimeoutcb_ucfg_weak>
1004b220:	bd80      	pop	{r7, pc}
1004b222:	2000      	movs	r0, #0
1004b224:	f000 f802 	bl	1004b22c <GAP_PrivateAddrTimercb>
1004b228:	bd80      	pop	{r7, pc}
	...

1004b22c <GAP_PrivateAddrTimercb>:
1004b22c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b22e:	b087      	sub	sp, #28
1004b230:	4831      	ldr	r0, [pc, #196]	@ (1004b2f8 <__arm_cp.2_0>)
1004b232:	6804      	ldr	r4, [r0, #0]
1004b234:	a906      	add	r1, sp, #24
1004b236:	9104      	str	r1, [sp, #16]
1004b238:	2000      	movs	r0, #0
1004b23a:	9001      	str	r0, [sp, #4]
1004b23c:	7008      	strb	r0, [r1, #0]
1004b23e:	ae05      	add	r6, sp, #20
1004b240:	2001      	movs	r0, #1
1004b242:	7030      	strb	r0, [r6, #0]
1004b244:	f000 f952 	bl	1004b4ec <GAP_reset_privacy_timer>
1004b248:	205d      	movs	r0, #93	@ 0x5d
1004b24a:	9403      	str	r4, [sp, #12]
1004b24c:	5c27      	ldrb	r7, [r4, r0]
1004b24e:	1e78      	subs	r0, r7, #1
1004b250:	463d      	mov	r5, r7
1004b252:	4185      	sbcs	r5, r0
1004b254:	2020      	movs	r0, #32
1004b256:	4038      	ands	r0, r7
1004b258:	4244      	negs	r4, r0
1004b25a:	9002      	str	r0, [sp, #8]
1004b25c:	4144      	adcs	r4, r0
1004b25e:	9804      	ldr	r0, [sp, #16]
1004b260:	4631      	mov	r1, r6
1004b262:	f000 fb8f 	bl	1004b984 <GAP_check_adv_status>
1004b266:	2f00      	cmp	r7, #0
1004b268:	d101      	bne.n	1004b26e <GAP_PrivateAddrTimercb+0x42>
1004b26a:	2801      	cmp	r0, #1
1004b26c:	d13e      	bne.n	1004b2ec <GAP_PrivateAddrTimercb+0xc0>
1004b26e:	402c      	ands	r4, r5
1004b270:	d138      	bne.n	1004b2e4 <GAP_PrivateAddrTimercb+0xb8>
1004b272:	a805      	add	r0, sp, #20
1004b274:	7800      	ldrb	r0, [r0, #0]
1004b276:	2800      	cmp	r0, #0
1004b278:	d034      	beq.n	1004b2e4 <GAP_PrivateAddrTimercb+0xb8>
1004b27a:	9c03      	ldr	r4, [sp, #12]
1004b27c:	4620      	mov	r0, r4
1004b27e:	305d      	adds	r0, #93	@ 0x5d
1004b280:	7bc0      	ldrb	r0, [r0, #15]
1004b282:	2800      	cmp	r0, #0
1004b284:	d034      	beq.n	1004b2f0 <GAP_PrivateAddrTimercb+0xc4>
1004b286:	3428      	adds	r4, #40	@ 0x28
1004b288:	9d02      	ldr	r5, [sp, #8]
1004b28a:	2d00      	cmp	r5, #0
1004b28c:	d003      	beq.n	1004b296 <GAP_PrivateAddrTimercb+0x6a>
1004b28e:	7821      	ldrb	r1, [r4, #0]
1004b290:	2000      	movs	r0, #0
1004b292:	f003 fa1b 	bl	1004e6cc <GAP_enable_disable_scan_ucfg_weak>
1004b296:	a806      	add	r0, sp, #24
1004b298:	7800      	ldrb	r0, [r0, #0]
1004b29a:	2801      	cmp	r0, #1
1004b29c:	d102      	bne.n	1004b2a4 <GAP_PrivateAddrTimercb+0x78>
1004b29e:	2000      	movs	r0, #0
1004b2a0:	f000 fb34 	bl	1004b90c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
1004b2a4:	f000 f996 	bl	1004b5d4 <GAP_generate_new_rpa>
1004b2a8:	2800      	cmp	r0, #0
1004b2aa:	d104      	bne.n	1004b2b6 <GAP_PrivateAddrTimercb+0x8a>
1004b2ac:	2000      	movs	r0, #0
1004b2ae:	2101      	movs	r1, #1
1004b2b0:	f000 f968 	bl	1004b584 <GAP_start_privacy_timer>
1004b2b4:	9001      	str	r0, [sp, #4]
1004b2b6:	2d00      	cmp	r5, #0
1004b2b8:	d00a      	beq.n	1004b2d0 <GAP_PrivateAddrTimercb+0xa4>
1004b2ba:	7821      	ldrb	r1, [r4, #0]
1004b2bc:	2001      	movs	r0, #1
1004b2be:	f003 fa05 	bl	1004e6cc <GAP_enable_disable_scan_ucfg_weak>
1004b2c2:	2800      	cmp	r0, #0
1004b2c4:	d004      	beq.n	1004b2d0 <GAP_PrivateAddrTimercb+0xa4>
1004b2c6:	9801      	ldr	r0, [sp, #4]
1004b2c8:	2800      	cmp	r0, #0
1004b2ca:	d001      	beq.n	1004b2d0 <GAP_PrivateAddrTimercb+0xa4>
1004b2cc:	f000 f920 	bl	1004b510 <GAP_stop_privacy_timer>
1004b2d0:	a806      	add	r0, sp, #24
1004b2d2:	7800      	ldrb	r0, [r0, #0]
1004b2d4:	2801      	cmp	r0, #1
1004b2d6:	d109      	bne.n	1004b2ec <GAP_PrivateAddrTimercb+0xc0>
1004b2d8:	2006      	movs	r0, #6
1004b2da:	f002 ff39 	bl	1004e150 <tsk_notify_idx>
1004b2de:	f7f6 f9ba 	bl	10041656 <BLE_STACK_ProcessRequest>
1004b2e2:	e003      	b.n	1004b2ec <GAP_PrivateAddrTimercb+0xc0>
1004b2e4:	2001      	movs	r0, #1
1004b2e6:	4601      	mov	r1, r0
1004b2e8:	f000 f94c 	bl	1004b584 <GAP_start_privacy_timer>
1004b2ec:	b007      	add	sp, #28
1004b2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b2f0:	2000      	movs	r0, #0
1004b2f2:	2101      	movs	r1, #1
1004b2f4:	e7f8      	b.n	1004b2e8 <GAP_PrivateAddrTimercb+0xbc>
1004b2f6:	46c0      	nop			@ (mov r8, r8)

1004b2f8 <__arm_cp.2_0>:
1004b2f8:	20000b38 	.word	0x20000b38

1004b2fc <GAP_init_context>:
1004b2fc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004b2fe:	461f      	mov	r7, r3
1004b300:	9201      	str	r2, [sp, #4]
1004b302:	9102      	str	r1, [sp, #8]
1004b304:	4605      	mov	r5, r0
1004b306:	2401      	movs	r4, #1
1004b308:	2178      	movs	r1, #120	@ 0x78
1004b30a:	4620      	mov	r0, r4
1004b30c:	f002 fc12 	bl	1004db34 <csmem_mem_0_assign>
1004b310:	21e1      	movs	r1, #225	@ 0xe1
1004b312:	0089      	lsls	r1, r1, #2
1004b314:	225a      	movs	r2, #90	@ 0x5a
1004b316:	5281      	strh	r1, [r0, r2]
1004b318:	4e24      	ldr	r6, [pc, #144]	@ (1004b3ac <__arm_cp.3_0>)
1004b31a:	6030      	str	r0, [r6, #0]
1004b31c:	2d01      	cmp	r5, #1
1004b31e:	d117      	bne.n	1004b350 <GAP_init_context+0x54>
1004b320:	2001      	movs	r0, #1
1004b322:	2106      	movs	r1, #6
1004b324:	f002 fc06 	bl	1004db34 <csmem_mem_0_assign>
1004b328:	4601      	mov	r1, r0
1004b32a:	6830      	ldr	r0, [r6, #0]
1004b32c:	6381      	str	r1, [r0, #56]	@ 0x38
1004b32e:	2f01      	cmp	r7, #1
1004b330:	d10e      	bne.n	1004b350 <GAP_init_context+0x54>
1004b332:	2501      	movs	r5, #1
1004b334:	270e      	movs	r7, #14
1004b336:	4628      	mov	r0, r5
1004b338:	4639      	mov	r1, r7
1004b33a:	f002 fbfb 	bl	1004db34 <csmem_mem_0_assign>
1004b33e:	6831      	ldr	r1, [r6, #0]
1004b340:	64c8      	str	r0, [r1, #76]	@ 0x4c
1004b342:	4628      	mov	r0, r5
1004b344:	4639      	mov	r1, r7
1004b346:	f002 fbf5 	bl	1004db34 <csmem_mem_0_assign>
1004b34a:	4601      	mov	r1, r0
1004b34c:	6830      	ldr	r0, [r6, #0]
1004b34e:	6501      	str	r1, [r0, #80]	@ 0x50
1004b350:	9902      	ldr	r1, [sp, #8]
1004b352:	2901      	cmp	r1, #1
1004b354:	d10b      	bne.n	1004b36e <GAP_init_context+0x72>
1004b356:	9801      	ldr	r0, [sp, #4]
1004b358:	2801      	cmp	r0, #1
1004b35a:	d105      	bne.n	1004b368 <GAP_init_context+0x6c>
1004b35c:	201c      	movs	r0, #28
1004b35e:	2101      	movs	r1, #1
1004b360:	f002 fbe8 	bl	1004db34 <csmem_mem_0_assign>
1004b364:	6831      	ldr	r1, [r6, #0]
1004b366:	62c8      	str	r0, [r1, #44]	@ 0x2c
1004b368:	4811      	ldr	r0, [pc, #68]	@ (1004b3b0 <__arm_cp.3_1>)
1004b36a:	7e84      	ldrb	r4, [r0, #26]
1004b36c:	e001      	b.n	1004b372 <GAP_init_context+0x76>
1004b36e:	2100      	movs	r1, #0
1004b370:	62c1      	str	r1, [r0, #44]	@ 0x2c
1004b372:	2114      	movs	r1, #20
1004b374:	4620      	mov	r0, r4
1004b376:	f002 fbdd 	bl	1004db34 <csmem_mem_0_assign>
1004b37a:	6831      	ldr	r1, [r6, #0]
1004b37c:	6548      	str	r0, [r1, #84]	@ 0x54
1004b37e:	4c0d      	ldr	r4, [pc, #52]	@ (1004b3b4 <__arm_cp.3_2>)
1004b380:	2104      	movs	r1, #4
1004b382:	2201      	movs	r2, #1
1004b384:	4620      	mov	r0, r4
1004b386:	f002 fbc3 	bl	1004db10 <csmem_mem_assign>
1004b38a:	6831      	ldr	r1, [r6, #0]
1004b38c:	6208      	str	r0, [r1, #32]
1004b38e:	2503      	movs	r5, #3
1004b390:	2202      	movs	r2, #2
1004b392:	4620      	mov	r0, r4
1004b394:	4629      	mov	r1, r5
1004b396:	f002 fbbb 	bl	1004db10 <csmem_mem_assign>
1004b39a:	6831      	ldr	r1, [r6, #0]
1004b39c:	6248      	str	r0, [r1, #36]	@ 0x24
1004b39e:	4a06      	ldr	r2, [pc, #24]	@ (1004b3b8 <__arm_cp.3_3>)
1004b3a0:	2307      	movs	r3, #7
1004b3a2:	4608      	mov	r0, r1
1004b3a4:	4629      	mov	r1, r5
1004b3a6:	f002 ff07 	bl	1004e1b8 <CST_init>
1004b3aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004b3ac <__arm_cp.3_0>:
1004b3ac:	20000b38 	.word	0x20000b38

1004b3b0 <__arm_cp.3_1>:
1004b3b0:	20000b50 	.word	0x20000b50

1004b3b4 <__arm_cp.3_2>:
1004b3b4:	20000b4c 	.word	0x20000b4c

1004b3b8 <__arm_cp.3_3>:
1004b3b8:	1004b1f5 	.word	0x1004b1f5

1004b3bc <GAP_get_default_le_event_mask>:
1004b3bc:	b5b0      	push	{r4, r5, r7, lr}
1004b3be:	4604      	mov	r4, r0
1004b3c0:	2100      	movs	r1, #0
1004b3c2:	2508      	movs	r5, #8
1004b3c4:	462a      	mov	r2, r5
1004b3c6:	f7f6 fb33 	bl	10041a30 <BLEPLAT_MemSet>
1004b3ca:	7820      	ldrb	r0, [r4, #0]
1004b3cc:	21df      	movs	r1, #223	@ 0xdf
1004b3ce:	4301      	orrs	r1, r0
1004b3d0:	7021      	strb	r1, [r4, #0]
1004b3d2:	7860      	ldrb	r0, [r4, #1]
1004b3d4:	2109      	movs	r1, #9
1004b3d6:	4301      	orrs	r1, r0
1004b3d8:	7061      	strb	r1, [r4, #1]
1004b3da:	78a1      	ldrb	r1, [r4, #2]
1004b3dc:	4329      	orrs	r1, r5
1004b3de:	70a1      	strb	r1, [r4, #2]
1004b3e0:	4911      	ldr	r1, [pc, #68]	@ (1004b428 <__arm_cp.4_0>)
1004b3e2:	6809      	ldr	r1, [r1, #0]
1004b3e4:	225c      	movs	r2, #92	@ 0x5c
1004b3e6:	5c89      	ldrb	r1, [r1, r2]
1004b3e8:	0689      	lsls	r1, r1, #26
1004b3ea:	d502      	bpl.n	1004b3f2 <GAP_get_default_le_event_mask+0x36>
1004b3ec:	210f      	movs	r1, #15
1004b3ee:	4308      	orrs	r0, r1
1004b3f0:	7060      	strb	r0, [r4, #1]
1004b3f2:	f001 fe68 	bl	1004d0c6 <ext_adv_scan_enabled_ucfg_weak>
1004b3f6:	2801      	cmp	r0, #1
1004b3f8:	d107      	bne.n	1004b40a <GAP_get_default_le_event_mask+0x4e>
1004b3fa:	7860      	ldrb	r0, [r4, #1]
1004b3fc:	2112      	movs	r1, #18
1004b3fe:	4301      	orrs	r1, r0
1004b400:	7061      	strb	r1, [r4, #1]
1004b402:	78a0      	ldrb	r0, [r4, #2]
1004b404:	2107      	movs	r1, #7
1004b406:	4301      	orrs	r1, r0
1004b408:	70a1      	strb	r1, [r4, #2]
1004b40a:	f000 fe13 	bl	1004c034 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004b40e:	b2c0      	uxtb	r0, r0
1004b410:	2801      	cmp	r0, #1
1004b412:	d107      	bne.n	1004b424 <GAP_get_default_le_event_mask+0x68>
1004b414:	7860      	ldrb	r0, [r4, #1]
1004b416:	21e0      	movs	r1, #224	@ 0xe0
1004b418:	4301      	orrs	r1, r0
1004b41a:	7061      	strb	r1, [r4, #1]
1004b41c:	78a0      	ldrb	r0, [r4, #2]
1004b41e:	2180      	movs	r1, #128	@ 0x80
1004b420:	4301      	orrs	r1, r0
1004b422:	70a1      	strb	r1, [r4, #2]
1004b424:	bdb0      	pop	{r4, r5, r7, pc}
1004b426:	46c0      	nop			@ (mov r8, r8)

1004b428 <__arm_cp.4_0>:
1004b428:	20000b38 	.word	0x20000b38

1004b42c <gap_extended_adv_scan_supported>:
1004b42c:	b580      	push	{r7, lr}
1004b42e:	f001 fe4a 	bl	1004d0c6 <ext_adv_scan_enabled_ucfg_weak>
1004b432:	bd80      	pop	{r7, pc}

1004b434 <GAP_Init>:
1004b434:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b436:	b087      	sub	sp, #28
1004b438:	4606      	mov	r6, r0
1004b43a:	a806      	add	r0, sp, #24
1004b43c:	2700      	movs	r7, #0
1004b43e:	7007      	strb	r7, [r0, #0]
1004b440:	2412      	movs	r4, #18
1004b442:	2901      	cmp	r1, #1
1004b444:	d901      	bls.n	1004b44a <GAP_Init+0x16>
1004b446:	4620      	mov	r0, r4
1004b448:	e04a      	b.n	1004b4e0 <GAP_Init+0xac>
1004b44a:	460d      	mov	r5, r1
1004b44c:	4825      	ldr	r0, [pc, #148]	@ (1004b4e4 <__arm_cp.7_0>)
1004b44e:	6800      	ldr	r0, [r0, #0]
1004b450:	9002      	str	r0, [sp, #8]
1004b452:	f003 f849 	bl	1004e4e8 <IDD_Initialize_Device_IDs>
1004b456:	2800      	cmp	r0, #0
1004b458:	d142      	bne.n	1004b4e0 <GAP_Init+0xac>
1004b45a:	9902      	ldr	r1, [sp, #8]
1004b45c:	315c      	adds	r1, #92	@ 0x5c
1004b45e:	7808      	ldrb	r0, [r1, #0]
1004b460:	07c0      	lsls	r0, r0, #31
1004b462:	d111      	bne.n	1004b488 <GAP_Init+0x54>
1004b464:	78c8      	ldrb	r0, [r1, #3]
1004b466:	4328      	orrs	r0, r5
1004b468:	9101      	str	r1, [sp, #4]
1004b46a:	70c8      	strb	r0, [r1, #3]
1004b46c:	a805      	add	r0, sp, #20
1004b46e:	2107      	movs	r1, #7
1004b470:	7001      	strb	r1, [r0, #0]
1004b472:	2e00      	cmp	r6, #0
1004b474:	d012      	beq.n	1004b49c <GAP_Init+0x68>
1004b476:	2e02      	cmp	r6, #2
1004b478:	d008      	beq.n	1004b48c <GAP_Init+0x58>
1004b47a:	2e01      	cmp	r6, #1
1004b47c:	4620      	mov	r0, r4
1004b47e:	d12f      	bne.n	1004b4e0 <GAP_Init+0xac>
1004b480:	a806      	add	r0, sp, #24
1004b482:	2110      	movs	r1, #16
1004b484:	7001      	strb	r1, [r0, #0]
1004b486:	e009      	b.n	1004b49c <GAP_Init+0x68>
1004b488:	200c      	movs	r0, #12
1004b48a:	e029      	b.n	1004b4e0 <GAP_Init+0xac>
1004b48c:	a806      	add	r0, sp, #24
1004b48e:	2120      	movs	r1, #32
1004b490:	7001      	strb	r1, [r0, #0]
1004b492:	a905      	add	r1, sp, #20
1004b494:	f000 f86e 	bl	1004b574 <GAP_enable_controller_privacy_ucfg_weak>
1004b498:	2800      	cmp	r0, #0
1004b49a:	d121      	bne.n	1004b4e0 <GAP_Init+0xac>
1004b49c:	4628      	mov	r0, r5
1004b49e:	f000 f86f 	bl	1004b580 <GAP_init_advertising_sets_ucfg_weak>
1004b4a2:	2800      	cmp	r0, #0
1004b4a4:	d11c      	bne.n	1004b4e0 <GAP_Init+0xac>
1004b4a6:	9802      	ldr	r0, [sp, #8]
1004b4a8:	3060      	adds	r0, #96	@ 0x60
1004b4aa:	f000 f865 	bl	1004b578 <GAP_set_controller_random_address_ucfg_weak>
1004b4ae:	2800      	cmp	r0, #0
1004b4b0:	d116      	bne.n	1004b4e0 <GAP_Init+0xac>
1004b4b2:	9806      	ldr	r0, [sp, #24]
1004b4b4:	2101      	movs	r1, #1
1004b4b6:	9a01      	ldr	r2, [sp, #4]
1004b4b8:	7411      	strb	r1, [r2, #16]
1004b4ba:	4308      	orrs	r0, r1
1004b4bc:	7010      	strb	r0, [r2, #0]
1004b4be:	f000 f815 	bl	1004b4ec <GAP_reset_privacy_timer>
1004b4c2:	ac03      	add	r4, sp, #12
1004b4c4:	4620      	mov	r0, r4
1004b4c6:	f7ff ff79 	bl	1004b3bc <GAP_get_default_le_event_mask>
1004b4ca:	4620      	mov	r0, r4
1004b4cc:	f000 fb66 	bl	1004bb9c <hci_le_set_event_mask>
1004b4d0:	43f8      	mvns	r0, r7
1004b4d2:	9003      	str	r0, [sp, #12]
1004b4d4:	4804      	ldr	r0, [pc, #16]	@ (1004b4e8 <__arm_cp.7_1>)
1004b4d6:	9004      	str	r0, [sp, #16]
1004b4d8:	4620      	mov	r0, r4
1004b4da:	f000 fb4f 	bl	1004bb7c <hci_set_event_mask>
1004b4de:	4638      	mov	r0, r7
1004b4e0:	b007      	add	sp, #28
1004b4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004b4e4 <__arm_cp.7_0>:
1004b4e4:	20000b38 	.word	0x20000b38

1004b4e8 <__arm_cp.7_1>:
1004b4e8:	20009fff 	.word	0x20009fff

1004b4ec <GAP_reset_privacy_timer>:
1004b4ec:	4806      	ldr	r0, [pc, #24]	@ (1004b508 <__arm_cp.8_0>)
1004b4ee:	6800      	ldr	r0, [r0, #0]
1004b4f0:	215c      	movs	r1, #92	@ 0x5c
1004b4f2:	5c41      	ldrb	r1, [r0, r1]
1004b4f4:	0689      	lsls	r1, r1, #26
1004b4f6:	0f89      	lsrs	r1, r1, #30
1004b4f8:	d004      	beq.n	1004b504 <GAP_reset_privacy_timer+0x18>
1004b4fa:	305c      	adds	r0, #92	@ 0x5c
1004b4fc:	78c1      	ldrb	r1, [r0, #3]
1004b4fe:	2202      	movs	r2, #2
1004b500:	430a      	orrs	r2, r1
1004b502:	70c2      	strb	r2, [r0, #3]
1004b504:	4770      	bx	lr
1004b506:	46c0      	nop			@ (mov r8, r8)

1004b508 <__arm_cp.8_0>:
1004b508:	20000b38 	.word	0x20000b38

1004b50c <GAP_LimDiscTimeoutcb_ucfg_weak>:
1004b50c:	4770      	bx	lr
	...

1004b510 <GAP_stop_privacy_timer>:
1004b510:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1004b512:	4c0d      	ldr	r4, [pc, #52]	@ (1004b548 <__arm_cp.19_0>)
1004b514:	6825      	ldr	r5, [r4, #0]
1004b516:	205c      	movs	r0, #92	@ 0x5c
1004b518:	5c28      	ldrb	r0, [r5, r0]
1004b51a:	0680      	lsls	r0, r0, #26
1004b51c:	0f80      	lsrs	r0, r0, #30
1004b51e:	d012      	beq.n	1004b546 <GAP_stop_privacy_timer+0x36>
1004b520:	355c      	adds	r5, #92	@ 0x5c
1004b522:	78e8      	ldrb	r0, [r5, #3]
1004b524:	2602      	movs	r6, #2
1004b526:	4030      	ands	r0, r6
1004b528:	d10d      	bne.n	1004b546 <GAP_stop_privacy_timer+0x36>
1004b52a:	a801      	add	r0, sp, #4
1004b52c:	4669      	mov	r1, sp
1004b52e:	f000 fa29 	bl	1004b984 <GAP_check_adv_status>
1004b532:	7869      	ldrb	r1, [r5, #1]
1004b534:	4301      	orrs	r1, r0
1004b536:	d106      	bne.n	1004b546 <GAP_stop_privacy_timer+0x36>
1004b538:	78e8      	ldrb	r0, [r5, #3]
1004b53a:	4330      	orrs	r0, r6
1004b53c:	70e8      	strb	r0, [r5, #3]
1004b53e:	6820      	ldr	r0, [r4, #0]
1004b540:	2101      	movs	r1, #1
1004b542:	f002 fe4e 	bl	1004e1e2 <CST_stop>
1004b546:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1004b548 <__arm_cp.19_0>:
1004b548:	20000b38 	.word	0x20000b38

1004b54c <GAP_get_own_address_type>:
1004b54c:	4808      	ldr	r0, [pc, #32]	@ (1004b570 <__arm_cp.29_0>)
1004b54e:	6800      	ldr	r0, [r0, #0]
1004b550:	215c      	movs	r1, #92	@ 0x5c
1004b552:	5c41      	ldrb	r1, [r0, r1]
1004b554:	06ca      	lsls	r2, r1, #27
1004b556:	d406      	bmi.n	1004b566 <GAP_get_own_address_type+0x1a>
1004b558:	0689      	lsls	r1, r1, #26
1004b55a:	d406      	bmi.n	1004b56a <GAP_get_own_address_type+0x1e>
1004b55c:	305c      	adds	r0, #92	@ 0x5c
1004b55e:	78c1      	ldrb	r1, [r0, #3]
1004b560:	2001      	movs	r0, #1
1004b562:	4008      	ands	r0, r1
1004b564:	4770      	bx	lr
1004b566:	2001      	movs	r0, #1
1004b568:	4770      	bx	lr
1004b56a:	2003      	movs	r0, #3
1004b56c:	4770      	bx	lr
1004b56e:	46c0      	nop			@ (mov r8, r8)

1004b570 <__arm_cp.29_0>:
1004b570:	20000b38 	.word	0x20000b38

1004b574 <GAP_enable_controller_privacy_ucfg_weak>:
1004b574:	2012      	movs	r0, #18
1004b576:	4770      	bx	lr

1004b578 <GAP_set_controller_random_address_ucfg_weak>:
1004b578:	b580      	push	{r7, lr}
1004b57a:	f000 fafa 	bl	1004bb72 <hci_le_set_random_address>
1004b57e:	bd80      	pop	{r7, pc}

1004b580 <GAP_init_advertising_sets_ucfg_weak>:
1004b580:	2000      	movs	r0, #0
1004b582:	4770      	bx	lr

1004b584 <GAP_start_privacy_timer>:
1004b584:	b5b0      	push	{r4, r5, r7, lr}
1004b586:	4602      	mov	r2, r0
1004b588:	4810      	ldr	r0, [pc, #64]	@ (1004b5cc <__arm_cp.47_0>)
1004b58a:	6800      	ldr	r0, [r0, #0]
1004b58c:	4605      	mov	r5, r0
1004b58e:	355a      	adds	r5, #90	@ 0x5a
1004b590:	2900      	cmp	r1, #0
1004b592:	d108      	bne.n	1004b5a6 <GAP_start_privacy_timer+0x22>
1004b594:	78a9      	ldrb	r1, [r5, #2]
1004b596:	0689      	lsls	r1, r1, #26
1004b598:	2400      	movs	r4, #0
1004b59a:	0f89      	lsrs	r1, r1, #30
1004b59c:	d014      	beq.n	1004b5c8 <GAP_start_privacy_timer+0x44>
1004b59e:	7969      	ldrb	r1, [r5, #5]
1004b5a0:	2302      	movs	r3, #2
1004b5a2:	400b      	ands	r3, r1
1004b5a4:	d010      	beq.n	1004b5c8 <GAP_start_privacy_timer+0x44>
1004b5a6:	2a00      	cmp	r2, #0
1004b5a8:	d001      	beq.n	1004b5ae <GAP_start_privacy_timer+0x2a>
1004b5aa:	4b09      	ldr	r3, [pc, #36]	@ (1004b5d0 <__arm_cp.47_1>)
1004b5ac:	e003      	b.n	1004b5b6 <GAP_start_privacy_timer+0x32>
1004b5ae:	217d      	movs	r1, #125	@ 0x7d
1004b5b0:	00c9      	lsls	r1, r1, #3
1004b5b2:	882b      	ldrh	r3, [r5, #0]
1004b5b4:	434b      	muls	r3, r1
1004b5b6:	2401      	movs	r4, #1
1004b5b8:	4621      	mov	r1, r4
1004b5ba:	4622      	mov	r2, r4
1004b5bc:	f002 fe47 	bl	1004e24e <CST_start>
1004b5c0:	7968      	ldrb	r0, [r5, #5]
1004b5c2:	21fd      	movs	r1, #253	@ 0xfd
1004b5c4:	4001      	ands	r1, r0
1004b5c6:	7169      	strb	r1, [r5, #5]
1004b5c8:	4620      	mov	r0, r4
1004b5ca:	bdb0      	pop	{r4, r5, r7, pc}

1004b5cc <__arm_cp.47_0>:
1004b5cc:	20000b38 	.word	0x20000b38

1004b5d0 <__arm_cp.47_1>:
1004b5d0:	00007530 	.word	0x00007530

1004b5d4 <GAP_generate_new_rpa>:
1004b5d4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1004b5d6:	4d0d      	ldr	r5, [pc, #52]	@ (1004b60c <__arm_cp.48_0>)
1004b5d8:	6828      	ldr	r0, [r5, #0]
1004b5da:	215f      	movs	r1, #95	@ 0x5f
1004b5dc:	5c40      	ldrb	r0, [r0, r1]
1004b5de:	0780      	lsls	r0, r0, #30
1004b5e0:	d401      	bmi.n	1004b5e6 <GAP_generate_new_rpa+0x12>
1004b5e2:	240c      	movs	r4, #12
1004b5e4:	e00f      	b.n	1004b606 <GAP_generate_new_rpa+0x32>
1004b5e6:	466c      	mov	r4, sp
1004b5e8:	4620      	mov	r0, r4
1004b5ea:	f002 fd05 	bl	1004dff8 <smp_sap_crt_generate_rpa>
1004b5ee:	4620      	mov	r0, r4
1004b5f0:	f7ff ffc2 	bl	1004b578 <GAP_set_controller_random_address_ucfg_weak>
1004b5f4:	4604      	mov	r4, r0
1004b5f6:	2800      	cmp	r0, #0
1004b5f8:	d105      	bne.n	1004b606 <GAP_generate_new_rpa+0x32>
1004b5fa:	6828      	ldr	r0, [r5, #0]
1004b5fc:	3066      	adds	r0, #102	@ 0x66
1004b5fe:	4669      	mov	r1, sp
1004b600:	2206      	movs	r2, #6
1004b602:	f7f6 fa05 	bl	10041a10 <BLEPLAT_MemCpy>
1004b606:	4620      	mov	r0, r4
1004b608:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1004b60a:	46c0      	nop			@ (mov r8, r8)

1004b60c <__arm_cp.48_0>:
1004b60c:	20000b38 	.word	0x20000b38

1004b610 <GAP_is_rpa_change_at_timeout_enabled>:
1004b610:	4802      	ldr	r0, [pc, #8]	@ (1004b61c <__arm_cp.54_0>)
1004b612:	6800      	ldr	r0, [r0, #0]
1004b614:	216c      	movs	r1, #108	@ 0x6c
1004b616:	5c40      	ldrb	r0, [r0, r1]
1004b618:	4770      	bx	lr
1004b61a:	46c0      	nop			@ (mov r8, r8)

1004b61c <__arm_cp.54_0>:
1004b61c:	20000b38 	.word	0x20000b38

1004b620 <GAP_check_discoverability_mode>:
1004b620:	1e43      	subs	r3, r0, #1
1004b622:	2b02      	cmp	r3, #2
1004b624:	d309      	bcc.n	1004b63a <GAP_check_discoverability_mode+0x1a>
1004b626:	2800      	cmp	r0, #0
1004b628:	d00c      	beq.n	1004b644 <GAP_check_discoverability_mode+0x24>
1004b62a:	2803      	cmp	r0, #3
1004b62c:	d109      	bne.n	1004b642 <GAP_check_discoverability_mode+0x22>
1004b62e:	2001      	movs	r0, #1
1004b630:	4001      	ands	r1, r0
1004b632:	4249      	negs	r1, r1
1004b634:	2012      	movs	r0, #18
1004b636:	4008      	ands	r0, r1
1004b638:	4770      	bx	lr
1004b63a:	2a00      	cmp	r2, #0
1004b63c:	d101      	bne.n	1004b642 <GAP_check_discoverability_mode+0x22>
1004b63e:	4610      	mov	r0, r2
1004b640:	4770      	bx	lr
1004b642:	2012      	movs	r0, #18
1004b644:	4770      	bx	lr
	...

1004b648 <GAP_advEvtProp_to_advType>:
1004b648:	4601      	mov	r1, r0
1004b64a:	3910      	subs	r1, #16
1004b64c:	2905      	cmp	r1, #5
1004b64e:	d80a      	bhi.n	1004b666 <GAP_advEvtProp_to_advType+0x1e>
1004b650:	2000      	movs	r0, #0
1004b652:	46c0      	nop			@ (mov r8, r8)
1004b654:	4479      	add	r1, pc
1004b656:	7909      	ldrb	r1, [r1, #4]
1004b658:	0049      	lsls	r1, r1, #1
1004b65a:	448f      	add	pc, r1
1004b65c:	090a0802 	.word	0x090a0802
1004b660:	0c08      	.short	0x0c08
1004b662:	2003      	movs	r0, #3
1004b664:	4770      	bx	lr
1004b666:	281d      	cmp	r0, #29
1004b668:	d101      	bne.n	1004b66e <GAP_advEvtProp_to_advType+0x26>
1004b66a:	2001      	movs	r0, #1
1004b66c:	4770      	bx	lr
1004b66e:	2005      	movs	r0, #5
1004b670:	4770      	bx	lr
1004b672:	2002      	movs	r0, #2
1004b674:	4770      	bx	lr
1004b676:	2004      	movs	r0, #4
1004b678:	4770      	bx	lr
	...

1004b67c <GAP_set_legacy_advertising_configuration>:
1004b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b67e:	b08d      	sub	sp, #52	@ 0x34
1004b680:	4615      	mov	r5, r2
1004b682:	460f      	mov	r7, r1
1004b684:	4601      	mov	r1, r0
1004b686:	06fa      	lsls	r2, r7, #27
1004b688:	2012      	movs	r0, #18
1004b68a:	2a00      	cmp	r2, #0
1004b68c:	d542      	bpl.n	1004b714 <GAP_set_legacy_advertising_configuration+0x98>
1004b68e:	461c      	mov	r4, r3
1004b690:	2301      	movs	r3, #1
1004b692:	039a      	lsls	r2, r3, #14
1004b694:	4295      	cmp	r5, r2
1004b696:	d83d      	bhi.n	1004b714 <GAP_set_legacy_advertising_configuration+0x98>
1004b698:	4294      	cmp	r4, r2
1004b69a:	d83b      	bhi.n	1004b714 <GAP_set_legacy_advertising_configuration+0x98>
1004b69c:	930c      	str	r3, [sp, #48]	@ 0x30
1004b69e:	481e      	ldr	r0, [pc, #120]	@ (1004b718 <__arm_cp.2_0>)
1004b6a0:	6806      	ldr	r6, [r0, #0]
1004b6a2:	9815      	ldr	r0, [sp, #84]	@ 0x54
1004b6a4:	900b      	str	r0, [sp, #44]	@ 0x2c
1004b6a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004b6a8:	900a      	str	r0, [sp, #40]	@ 0x28
1004b6aa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1004b6ac:	9008      	str	r0, [sp, #32]
1004b6ae:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004b6b0:	9009      	str	r0, [sp, #36]	@ 0x24
1004b6b2:	6d70      	ldr	r0, [r6, #84]	@ 0x54
1004b6b4:	2200      	movs	r2, #0
1004b6b6:	9205      	str	r2, [sp, #20]
1004b6b8:	7042      	strb	r2, [r0, #1]
1004b6ba:	7001      	strb	r1, [r0, #0]
1004b6bc:	f7ff ff46 	bl	1004b54c <GAP_get_own_address_type>
1004b6c0:	9007      	str	r0, [sp, #28]
1004b6c2:	4638      	mov	r0, r7
1004b6c4:	f7ff ffc0 	bl	1004b648 <GAP_advEvtProp_to_advType>
1004b6c8:	4602      	mov	r2, r0
1004b6ca:	9606      	str	r6, [sp, #24]
1004b6cc:	6d70      	ldr	r0, [r6, #84]	@ 0x54
1004b6ce:	7841      	ldrb	r1, [r0, #1]
1004b6d0:	2320      	movs	r3, #32
1004b6d2:	430b      	orrs	r3, r1
1004b6d4:	7043      	strb	r3, [r0, #1]
1004b6d6:	2a04      	cmp	r2, #4
1004b6d8:	d808      	bhi.n	1004b6ec <GAP_set_legacy_advertising_configuration+0x70>
1004b6da:	2317      	movs	r3, #23
1004b6dc:	40d3      	lsrs	r3, r2
1004b6de:	07db      	lsls	r3, r3, #31
1004b6e0:	d004      	beq.n	1004b6ec <GAP_set_legacy_advertising_configuration+0x70>
1004b6e2:	b253      	sxtb	r3, r2
1004b6e4:	a70d      	add	r7, pc, #52	@ (adr r7, 1004b71c <__arm_cp.2_0+0x4>)
1004b6e6:	5cfb      	ldrb	r3, [r7, r3]
1004b6e8:	4319      	orrs	r1, r3
1004b6ea:	7041      	strb	r1, [r0, #1]
1004b6ec:	9808      	ldr	r0, [sp, #32]
1004b6ee:	9000      	str	r0, [sp, #0]
1004b6f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004b6f2:	9001      	str	r0, [sp, #4]
1004b6f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004b6f6:	9002      	str	r0, [sp, #8]
1004b6f8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004b6fa:	9003      	str	r0, [sp, #12]
1004b6fc:	b2a8      	uxth	r0, r5
1004b6fe:	b2a1      	uxth	r1, r4
1004b700:	9b07      	ldr	r3, [sp, #28]
1004b702:	f000 f98a 	bl	1004ba1a <hci_le_set_advertising_parameters>
1004b706:	2800      	cmp	r0, #0
1004b708:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004b70a:	d103      	bne.n	1004b714 <GAP_set_legacy_advertising_configuration+0x98>
1004b70c:	9806      	ldr	r0, [sp, #24]
1004b70e:	6d40      	ldr	r0, [r0, #84]	@ 0x54
1004b710:	7481      	strb	r1, [r0, #18]
1004b712:	9805      	ldr	r0, [sp, #20]
1004b714:	b00d      	add	sp, #52	@ 0x34
1004b716:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004b718 <__arm_cp.2_0>:
1004b718:	20000b38 	.word	0x20000b38
1004b71c:	70287028 	.word	0x70287028
1004b720:	00000030 	.word	0x00000030

1004b724 <GAP_set_legacy_advertising_enable>:
1004b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b726:	4604      	mov	r4, r0
1004b728:	481a      	ldr	r0, [pc, #104]	@ (1004b794 <__arm_cp.4_0>)
1004b72a:	6807      	ldr	r7, [r0, #0]
1004b72c:	2c00      	cmp	r4, #0
1004b72e:	d00e      	beq.n	1004b74e <GAP_set_legacy_advertising_enable+0x2a>
1004b730:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1004b732:	7c80      	ldrb	r0, [r0, #18]
1004b734:	2801      	cmp	r0, #1
1004b736:	d124      	bne.n	1004b782 <GAP_set_legacy_advertising_enable+0x5e>
1004b738:	2000      	movs	r0, #0
1004b73a:	4601      	mov	r1, r0
1004b73c:	f000 f82c 	bl	1004b798 <GAP_check_flags>
1004b740:	4605      	mov	r5, r0
1004b742:	2800      	cmp	r0, #0
1004b744:	d11e      	bne.n	1004b784 <GAP_set_legacy_advertising_enable+0x60>
1004b746:	f7ff ff45 	bl	1004b5d4 <GAP_generate_new_rpa>
1004b74a:	4606      	mov	r6, r0
1004b74c:	e000      	b.n	1004b750 <GAP_set_legacy_advertising_enable+0x2c>
1004b74e:	260c      	movs	r6, #12
1004b750:	4620      	mov	r0, r4
1004b752:	f000 f9c2 	bl	1004bada <hci_le_set_advertising_enable>
1004b756:	4605      	mov	r5, r0
1004b758:	2800      	cmp	r0, #0
1004b75a:	d113      	bne.n	1004b784 <GAP_set_legacy_advertising_enable+0x60>
1004b75c:	2500      	movs	r5, #0
1004b75e:	4620      	mov	r0, r4
1004b760:	4629      	mov	r1, r5
1004b762:	462a      	mov	r2, r5
1004b764:	f000 f872 	bl	1004b84c <GAP_set_discoverability_mode>
1004b768:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1004b76a:	2c00      	cmp	r4, #0
1004b76c:	d00c      	beq.n	1004b788 <GAP_set_legacy_advertising_enable+0x64>
1004b76e:	2101      	movs	r1, #1
1004b770:	74c1      	strb	r1, [r0, #19]
1004b772:	2e00      	cmp	r6, #0
1004b774:	d106      	bne.n	1004b784 <GAP_set_legacy_advertising_enable+0x60>
1004b776:	2500      	movs	r5, #0
1004b778:	4628      	mov	r0, r5
1004b77a:	4629      	mov	r1, r5
1004b77c:	f7ff ff02 	bl	1004b584 <GAP_start_privacy_timer>
1004b780:	e000      	b.n	1004b784 <GAP_set_legacy_advertising_enable+0x60>
1004b782:	25d3      	movs	r5, #211	@ 0xd3
1004b784:	4628      	mov	r0, r5
1004b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b788:	2500      	movs	r5, #0
1004b78a:	74c5      	strb	r5, [r0, #19]
1004b78c:	f7ff fec0 	bl	1004b510 <GAP_stop_privacy_timer>
1004b790:	e7f8      	b.n	1004b784 <GAP_set_legacy_advertising_enable+0x60>
1004b792:	46c0      	nop			@ (mov r8, r8)

1004b794 <__arm_cp.4_0>:
1004b794:	20000b38 	.word	0x20000b38

1004b798 <GAP_check_flags>:
1004b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004b79a:	4a28      	ldr	r2, [pc, #160]	@ (1004b83c <__arm_cp.5_0>)
1004b79c:	7e92      	ldrb	r2, [r2, #26]
1004b79e:	2512      	movs	r5, #18
1004b7a0:	428a      	cmp	r2, r1
1004b7a2:	d925      	bls.n	1004b7f0 <GAP_check_flags+0x58>
1004b7a4:	2800      	cmp	r0, #0
1004b7a6:	d100      	bne.n	1004b7aa <GAP_check_flags+0x12>
1004b7a8:	4601      	mov	r1, r0
1004b7aa:	2214      	movs	r2, #20
1004b7ac:	434a      	muls	r2, r1
1004b7ae:	4824      	ldr	r0, [pc, #144]	@ (1004b840 <__arm_cp.5_1>)
1004b7b0:	6800      	ldr	r0, [r0, #0]
1004b7b2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
1004b7b4:	1899      	adds	r1, r3, r2
1004b7b6:	784c      	ldrb	r4, [r1, #1]
1004b7b8:	06a0      	lsls	r0, r4, #26
1004b7ba:	0fc6      	lsrs	r6, r0, #31
1004b7bc:	2000      	movs	r0, #0
1004b7be:	2e00      	cmp	r6, #0
1004b7c0:	d002      	beq.n	1004b7c8 <GAP_check_flags+0x30>
1004b7c2:	2710      	movs	r7, #16
1004b7c4:	4027      	ands	r7, r4
1004b7c6:	d114      	bne.n	1004b7f2 <GAP_check_flags+0x5a>
1004b7c8:	2e00      	cmp	r6, #0
1004b7ca:	d102      	bne.n	1004b7d2 <GAP_check_flags+0x3a>
1004b7cc:	2608      	movs	r6, #8
1004b7ce:	4034      	ands	r4, r6
1004b7d0:	d10f      	bne.n	1004b7f2 <GAP_check_flags+0x5a>
1004b7d2:	5c9e      	ldrb	r6, [r3, r2]
1004b7d4:	684c      	ldr	r4, [r1, #4]
1004b7d6:	8908      	ldrh	r0, [r1, #8]
1004b7d8:	4621      	mov	r1, r4
1004b7da:	f000 f8bb 	bl	1004b954 <GAP_search_flags_index>
1004b7de:	4919      	ldr	r1, [pc, #100]	@ (1004b844 <__arm_cp.5_2>)
1004b7e0:	4288      	cmp	r0, r1
1004b7e2:	d008      	beq.n	1004b7f6 <GAP_check_flags+0x5e>
1004b7e4:	1900      	adds	r0, r0, r4
1004b7e6:	7881      	ldrb	r1, [r0, #2]
1004b7e8:	0748      	lsls	r0, r1, #29
1004b7ea:	d40b      	bmi.n	1004b804 <GAP_check_flags+0x6c>
1004b7ec:	20d4      	movs	r0, #212	@ 0xd4
1004b7ee:	e000      	b.n	1004b7f2 <GAP_check_flags+0x5a>
1004b7f0:	4628      	mov	r0, r5
1004b7f2:	b2c0      	uxtb	r0, r0
1004b7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004b7f6:	2e03      	cmp	r6, #3
1004b7f8:	4628      	mov	r0, r5
1004b7fa:	d8fa      	bhi.n	1004b7f2 <GAP_check_flags+0x5a>
1004b7fc:	00f1      	lsls	r1, r6, #3
1004b7fe:	4812      	ldr	r0, [pc, #72]	@ (1004b848 <__arm_cp.5_3>)
1004b800:	40c8      	lsrs	r0, r1
1004b802:	e7f6      	b.n	1004b7f2 <GAP_check_flags+0x5a>
1004b804:	2e03      	cmp	r6, #3
1004b806:	4628      	mov	r0, r5
1004b808:	d8f3      	bhi.n	1004b7f2 <GAP_check_flags+0x5a>
1004b80a:	46c0      	nop			@ (mov r8, r8)
1004b80c:	447e      	add	r6, pc
1004b80e:	7936      	ldrb	r6, [r6, #4]
1004b810:	0076      	lsls	r6, r6, #1
1004b812:	44b7      	add	pc, r6
1004b814:	010d0601 	.word	0x010d0601
1004b818:	2003      	movs	r0, #3
1004b81a:	4001      	ands	r1, r0
1004b81c:	d105      	bne.n	1004b82a <GAP_check_flags+0x92>
1004b81e:	4608      	mov	r0, r1
1004b820:	e7e7      	b.n	1004b7f2 <GAP_check_flags+0x5a>
1004b822:	2003      	movs	r0, #3
1004b824:	4001      	ands	r1, r0
1004b826:	2901      	cmp	r1, #1
1004b828:	d006      	beq.n	1004b838 <GAP_check_flags+0xa0>
1004b82a:	202b      	movs	r0, #43	@ 0x2b
1004b82c:	43c0      	mvns	r0, r0
1004b82e:	e7e0      	b.n	1004b7f2 <GAP_check_flags+0x5a>
1004b830:	2003      	movs	r0, #3
1004b832:	4001      	ands	r1, r0
1004b834:	2902      	cmp	r1, #2
1004b836:	d1f8      	bne.n	1004b82a <GAP_check_flags+0x92>
1004b838:	2000      	movs	r0, #0
1004b83a:	e7da      	b.n	1004b7f2 <GAP_check_flags+0x5a>

1004b83c <__arm_cp.5_0>:
1004b83c:	20000b50 	.word	0x20000b50

1004b840 <__arm_cp.5_1>:
1004b840:	20000b38 	.word	0x20000b38

1004b844 <__arm_cp.5_2>:
1004b844:	0000ffff 	.word	0x0000ffff

1004b848 <__arm_cp.5_3>:
1004b848:	00d4d400 	.word	0x00d4d400

1004b84c <GAP_set_discoverability_mode>:
1004b84c:	b570      	push	{r4, r5, r6, lr}
1004b84e:	4603      	mov	r3, r0
1004b850:	2900      	cmp	r1, #0
1004b852:	d100      	bne.n	1004b856 <GAP_set_discoverability_mode+0xa>
1004b854:	460a      	mov	r2, r1
1004b856:	4829      	ldr	r0, [pc, #164]	@ (1004b8fc <__arm_cp.6_0>)
1004b858:	6800      	ldr	r0, [r0, #0]
1004b85a:	6d41      	ldr	r1, [r0, #84]	@ 0x54
1004b85c:	2b01      	cmp	r3, #1
1004b85e:	d10c      	bne.n	1004b87a <GAP_set_discoverability_mode+0x2e>
1004b860:	2314      	movs	r3, #20
1004b862:	4353      	muls	r3, r2
1004b864:	5cca      	ldrb	r2, [r1, r3]
1004b866:	2a01      	cmp	r2, #1
1004b868:	d033      	beq.n	1004b8d2 <GAP_set_discoverability_mode+0x86>
1004b86a:	2a02      	cmp	r2, #2
1004b86c:	d13e      	bne.n	1004b8ec <GAP_set_discoverability_mode+0xa0>
1004b86e:	18ca      	adds	r2, r1, r3
1004b870:	7894      	ldrb	r4, [r2, #2]
1004b872:	2004      	movs	r0, #4
1004b874:	4320      	orrs	r0, r4
1004b876:	7090      	strb	r0, [r2, #2]
1004b878:	e03a      	b.n	1004b8f0 <GAP_set_discoverability_mode+0xa4>
1004b87a:	2314      	movs	r3, #20
1004b87c:	4353      	muls	r3, r2
1004b87e:	18c9      	adds	r1, r1, r3
1004b880:	1c8e      	adds	r6, r1, #2
1004b882:	7889      	ldrb	r1, [r1, #2]
1004b884:	0789      	lsls	r1, r1, #30
1004b886:	d521      	bpl.n	1004b8cc <GAP_set_discoverability_mode+0x80>
1004b888:	2400      	movs	r4, #0
1004b88a:	4621      	mov	r1, r4
1004b88c:	f002 fca9 	bl	1004e1e2 <CST_stop>
1004b890:	481b      	ldr	r0, [pc, #108]	@ (1004b900 <__arm_cp.6_1>)
1004b892:	6800      	ldr	r0, [r0, #0]
1004b894:	214e      	movs	r1, #78	@ 0x4e
1004b896:	5c40      	ldrb	r0, [r0, r1]
1004b898:	07c0      	lsls	r0, r0, #31
1004b89a:	d017      	beq.n	1004b8cc <GAP_set_discoverability_mode+0x80>
1004b89c:	4819      	ldr	r0, [pc, #100]	@ (1004b904 <__arm_cp.6_2>)
1004b89e:	6800      	ldr	r0, [r0, #0]
1004b8a0:	6980      	ldr	r0, [r0, #24]
1004b8a2:	2244      	movs	r2, #68	@ 0x44
1004b8a4:	2502      	movs	r5, #2
1004b8a6:	4629      	mov	r1, r5
1004b8a8:	462b      	mov	r3, r5
1004b8aa:	f7ff fabb 	bl	1004ae24 <aci_event_fifo_push_header>
1004b8ae:	2800      	cmp	r0, #0
1004b8b0:	d00c      	beq.n	1004b8cc <GAP_set_discoverability_mode+0x80>
1004b8b2:	4601      	mov	r1, r0
1004b8b4:	7185      	strb	r5, [r0, #6]
1004b8b6:	71c4      	strb	r4, [r0, #7]
1004b8b8:	7204      	strb	r4, [r0, #8]
1004b8ba:	20ff      	movs	r0, #255	@ 0xff
1004b8bc:	7148      	strb	r0, [r1, #5]
1004b8be:	2082      	movs	r0, #130	@ 0x82
1004b8c0:	7108      	strb	r0, [r1, #4]
1004b8c2:	2004      	movs	r0, #4
1004b8c4:	7248      	strb	r0, [r1, #9]
1004b8c6:	4628      	mov	r0, r5
1004b8c8:	f7ff fb49 	bl	1004af5e <aci_event_fifo_push>
1004b8cc:	2000      	movs	r0, #0
1004b8ce:	7030      	strb	r0, [r6, #0]
1004b8d0:	bd70      	pop	{r4, r5, r6, pc}
1004b8d2:	18c9      	adds	r1, r1, r3
1004b8d4:	784a      	ldrb	r2, [r1, #1]
1004b8d6:	788b      	ldrb	r3, [r1, #2]
1004b8d8:	4313      	orrs	r3, r2
1004b8da:	2202      	movs	r2, #2
1004b8dc:	431a      	orrs	r2, r3
1004b8de:	708a      	strb	r2, [r1, #2]
1004b8e0:	2100      	movs	r1, #0
1004b8e2:	2201      	movs	r2, #1
1004b8e4:	4b08      	ldr	r3, [pc, #32]	@ (1004b908 <__arm_cp.6_3>)
1004b8e6:	f002 fcb2 	bl	1004e24e <CST_start>
1004b8ea:	bd70      	pop	{r4, r5, r6, pc}
1004b8ec:	18c8      	adds	r0, r1, r3
1004b8ee:	7880      	ldrb	r0, [r0, #2]
1004b8f0:	18c9      	adds	r1, r1, r3
1004b8f2:	784a      	ldrb	r2, [r1, #1]
1004b8f4:	4302      	orrs	r2, r0
1004b8f6:	708a      	strb	r2, [r1, #2]
1004b8f8:	bd70      	pop	{r4, r5, r6, pc}
1004b8fa:	46c0      	nop			@ (mov r8, r8)

1004b8fc <__arm_cp.6_0>:
1004b8fc:	20000b38 	.word	0x20000b38

1004b900 <__arm_cp.6_1>:
1004b900:	20000b40 	.word	0x20000b40

1004b904 <__arm_cp.6_2>:
1004b904:	20000b34 	.word	0x20000b34

1004b908 <__arm_cp.6_3>:
1004b908:	0002bf20 	.word	0x0002bf20

1004b90c <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
1004b90c:	b580      	push	{r7, lr}
1004b90e:	f000 f801 	bl	1004b914 <GAP_suspend_resume_active_advertising_sets_legacy>
1004b912:	bd80      	pop	{r7, pc}

1004b914 <GAP_suspend_resume_active_advertising_sets_legacy>:
1004b914:	b580      	push	{r7, lr}
1004b916:	4905      	ldr	r1, [pc, #20]	@ (1004b92c <__arm_cp.10_0>)
1004b918:	6809      	ldr	r1, [r1, #0]
1004b91a:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1004b91c:	7cc9      	ldrb	r1, [r1, #19]
1004b91e:	2901      	cmp	r1, #1
1004b920:	d102      	bne.n	1004b928 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
1004b922:	f000 f8da 	bl	1004bada <hci_le_set_advertising_enable>
1004b926:	bd80      	pop	{r7, pc}
1004b928:	2000      	movs	r0, #0
1004b92a:	bd80      	pop	{r7, pc}

1004b92c <__arm_cp.10_0>:
1004b92c:	20000b38 	.word	0x20000b38

1004b930 <GAP_set_legacy_advertising_data>:
1004b930:	b5b0      	push	{r4, r5, r7, lr}
1004b932:	460c      	mov	r4, r1
1004b934:	4605      	mov	r5, r0
1004b936:	b2c0      	uxtb	r0, r0
1004b938:	f001 f830 	bl	1004c99c <ll_set_legacy_advertising_data_ptr>
1004b93c:	2800      	cmp	r0, #0
1004b93e:	d000      	beq.n	1004b942 <GAP_set_legacy_advertising_data+0x12>
1004b940:	bdb0      	pop	{r4, r5, r7, pc}
1004b942:	4903      	ldr	r1, [pc, #12]	@ (1004b950 <__arm_cp.11_0>)
1004b944:	6809      	ldr	r1, [r1, #0]
1004b946:	6d49      	ldr	r1, [r1, #84]	@ 0x54
1004b948:	810d      	strh	r5, [r1, #8]
1004b94a:	604c      	str	r4, [r1, #4]
1004b94c:	bdb0      	pop	{r4, r5, r7, pc}
1004b94e:	46c0      	nop			@ (mov r8, r8)

1004b950 <__arm_cp.11_0>:
1004b950:	20000b38 	.word	0x20000b38

1004b954 <GAP_search_flags_index>:
1004b954:	b5b0      	push	{r4, r5, r7, lr}
1004b956:	4a0a      	ldr	r2, [pc, #40]	@ (1004b980 <__arm_cp.15_0>)
1004b958:	2803      	cmp	r0, #3
1004b95a:	d30f      	bcc.n	1004b97c <GAP_search_flags_index+0x28>
1004b95c:	2300      	movs	r3, #0
1004b95e:	b29d      	uxth	r5, r3
1004b960:	5d4c      	ldrb	r4, [r1, r5]
1004b962:	2c02      	cmp	r4, #2
1004b964:	d103      	bne.n	1004b96e <GAP_search_flags_index+0x1a>
1004b966:	186d      	adds	r5, r5, r1
1004b968:	786d      	ldrb	r5, [r5, #1]
1004b96a:	2d01      	cmp	r5, #1
1004b96c:	d005      	beq.n	1004b97a <GAP_search_flags_index+0x26>
1004b96e:	191b      	adds	r3, r3, r4
1004b970:	1c5b      	adds	r3, r3, #1
1004b972:	b29c      	uxth	r4, r3
1004b974:	4284      	cmp	r4, r0
1004b976:	d3f2      	bcc.n	1004b95e <GAP_search_flags_index+0xa>
1004b978:	e000      	b.n	1004b97c <GAP_search_flags_index+0x28>
1004b97a:	461a      	mov	r2, r3
1004b97c:	b290      	uxth	r0, r2
1004b97e:	bdb0      	pop	{r4, r5, r7, pc}

1004b980 <__arm_cp.15_0>:
1004b980:	0000ffff 	.word	0x0000ffff

1004b984 <GAP_check_adv_status>:
1004b984:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004b986:	460c      	mov	r4, r1
1004b988:	4605      	mov	r5, r0
1004b98a:	481c      	ldr	r0, [pc, #112]	@ (1004b9fc <__arm_cp.16_0>)
1004b98c:	6806      	ldr	r6, [r0, #0]
1004b98e:	f7ff fd4d 	bl	1004b42c <gap_extended_adv_scan_supported>
1004b992:	491b      	ldr	r1, [pc, #108]	@ (1004ba00 <__arm_cp.16_1>)
1004b994:	7e8a      	ldrb	r2, [r1, #26]
1004b996:	2100      	movs	r1, #0
1004b998:	9501      	str	r5, [sp, #4]
1004b99a:	7029      	strb	r1, [r5, #0]
1004b99c:	2301      	movs	r3, #1
1004b99e:	9402      	str	r4, [sp, #8]
1004b9a0:	7023      	strb	r3, [r4, #0]
1004b9a2:	2800      	cmp	r0, #0
1004b9a4:	d000      	beq.n	1004b9a8 <GAP_check_adv_status+0x24>
1004b9a6:	4613      	mov	r3, r2
1004b9a8:	b2d8      	uxtb	r0, r3
1004b9aa:	2714      	movs	r7, #20
1004b9ac:	4347      	muls	r7, r0
1004b9ae:	4608      	mov	r0, r1
1004b9b0:	460b      	mov	r3, r1
1004b9b2:	460a      	mov	r2, r1
1004b9b4:	428f      	cmp	r7, r1
1004b9b6:	d011      	beq.n	1004b9dc <GAP_check_adv_status+0x58>
1004b9b8:	6d74      	ldr	r4, [r6, #84]	@ 0x54
1004b9ba:	1864      	adds	r4, r4, r1
1004b9bc:	7ca5      	ldrb	r5, [r4, #18]
1004b9be:	2d01      	cmp	r5, #1
1004b9c0:	d10a      	bne.n	1004b9d8 <GAP_check_adv_status+0x54>
1004b9c2:	7ce5      	ldrb	r5, [r4, #19]
1004b9c4:	2d00      	cmp	r5, #0
1004b9c6:	d007      	beq.n	1004b9d8 <GAP_check_adv_status+0x54>
1004b9c8:	2d02      	cmp	r5, #2
1004b9ca:	d100      	bne.n	1004b9ce <GAP_check_adv_status+0x4a>
1004b9cc:	2301      	movs	r3, #1
1004b9ce:	78a4      	ldrb	r4, [r4, #2]
1004b9d0:	2001      	movs	r0, #1
1004b9d2:	07a4      	lsls	r4, r4, #30
1004b9d4:	d500      	bpl.n	1004b9d8 <GAP_check_adv_status+0x54>
1004b9d6:	4602      	mov	r2, r0
1004b9d8:	3114      	adds	r1, #20
1004b9da:	e7eb      	b.n	1004b9b4 <GAP_check_adv_status+0x30>
1004b9dc:	2801      	cmp	r0, #1
1004b9de:	d102      	bne.n	1004b9e6 <GAP_check_adv_status+0x62>
1004b9e0:	2101      	movs	r1, #1
1004b9e2:	9c01      	ldr	r4, [sp, #4]
1004b9e4:	7021      	strb	r1, [r4, #0]
1004b9e6:	2b01      	cmp	r3, #1
1004b9e8:	d002      	beq.n	1004b9f0 <GAP_check_adv_status+0x6c>
1004b9ea:	b2d1      	uxtb	r1, r2
1004b9ec:	2901      	cmp	r1, #1
1004b9ee:	d102      	bne.n	1004b9f6 <GAP_check_adv_status+0x72>
1004b9f0:	2100      	movs	r1, #0
1004b9f2:	9a02      	ldr	r2, [sp, #8]
1004b9f4:	7011      	strb	r1, [r2, #0]
1004b9f6:	b2c0      	uxtb	r0, r0
1004b9f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004b9fa:	46c0      	nop			@ (mov r8, r8)

1004b9fc <__arm_cp.16_0>:
1004b9fc:	20000b38 	.word	0x20000b38

1004ba00 <__arm_cp.16_1>:
1004ba00:	20000b50 	.word	0x20000b50

1004ba04 <GAP_ResumeAdvertising_ucfg_weak>:
1004ba04:	b580      	push	{r7, lr}
1004ba06:	2001      	movs	r0, #1
1004ba08:	f7ff ff84 	bl	1004b914 <GAP_suspend_resume_active_advertising_sets_legacy>
1004ba0c:	bd80      	pop	{r7, pc}

1004ba0e <GAT_att_cmn_init_ucfg_weak>:
1004ba0e:	4770      	bx	lr

1004ba10 <GAT_att_cmn_timer_expire_tsk_ucfg_weak>:
1004ba10:	4770      	bx	lr

1004ba12 <GAT_att_cmn_tx_pool_evt_tsk_ucfg_weak>:
1004ba12:	4770      	bx	lr

1004ba14 <GAT_att_srv_process_rx_pckt_tsk_ucfg_weak>:
1004ba14:	4770      	bx	lr

1004ba16 <GAT_srv_db_hash_tsk_ucfg_weak>:
1004ba16:	4770      	bx	lr

1004ba18 <GAT_srv_send_srv_change_tsk_ucfg_weak>:
1004ba18:	4770      	bx	lr

1004ba1a <hci_le_set_advertising_parameters>:
1004ba1a:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ba1c:	b089      	sub	sp, #36	@ 0x24
1004ba1e:	461d      	mov	r5, r3
1004ba20:	4616      	mov	r6, r2
1004ba22:	460f      	mov	r7, r1
1004ba24:	9004      	str	r0, [sp, #16]
1004ba26:	2002      	movs	r0, #2
1004ba28:	2401      	movs	r4, #1
1004ba2a:	4621      	mov	r1, r4
1004ba2c:	f000 f8c6 	bl	1004bbbc <hci_get_set_legacy_ext_flag>
1004ba30:	2800      	cmp	r0, #0
1004ba32:	d150      	bne.n	1004bad6 <hci_le_set_advertising_parameters+0xbc>
1004ba34:	9703      	str	r7, [sp, #12]
1004ba36:	2012      	movs	r0, #18
1004ba38:	2e04      	cmp	r6, #4
1004ba3a:	d84c      	bhi.n	1004bad6 <hci_le_set_advertising_parameters+0xbc>
1004ba3c:	9002      	str	r0, [sp, #8]
1004ba3e:	f000 f8e2 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004ba42:	2e01      	cmp	r6, #1
1004ba44:	d803      	bhi.n	1004ba4e <hci_le_set_advertising_parameters+0x34>
1004ba46:	2800      	cmp	r0, #0
1004ba48:	d101      	bne.n	1004ba4e <hci_le_set_advertising_parameters+0x34>
1004ba4a:	2011      	movs	r0, #17
1004ba4c:	e043      	b.n	1004bad6 <hci_le_set_advertising_parameters+0xbc>
1004ba4e:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004ba50:	9000      	str	r0, [sp, #0]
1004ba52:	9810      	ldr	r0, [sp, #64]	@ 0x40
1004ba54:	9001      	str	r0, [sp, #4]
1004ba56:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1004ba58:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004ba5a:	af05      	add	r7, sp, #20
1004ba5c:	7238      	strb	r0, [r7, #8]
1004ba5e:	71fd      	strb	r5, [r7, #7]
1004ba60:	713e      	strb	r6, [r7, #4]
1004ba62:	9803      	ldr	r0, [sp, #12]
1004ba64:	8078      	strh	r0, [r7, #2]
1004ba66:	9804      	ldr	r0, [sp, #16]
1004ba68:	8038      	strh	r0, [r7, #0]
1004ba6a:	4638      	mov	r0, r7
1004ba6c:	3009      	adds	r0, #9
1004ba6e:	2206      	movs	r2, #6
1004ba70:	f7f5 ffce 	bl	10041a10 <BLEPLAT_MemCpy>
1004ba74:	9900      	ldr	r1, [sp, #0]
1004ba76:	71b9      	strb	r1, [r7, #6]
1004ba78:	9801      	ldr	r0, [sp, #4]
1004ba7a:	7178      	strb	r0, [r7, #5]
1004ba7c:	7938      	ldrb	r0, [r7, #4]
1004ba7e:	2804      	cmp	r0, #4
1004ba80:	d001      	beq.n	1004ba86 <hci_le_set_advertising_parameters+0x6c>
1004ba82:	2801      	cmp	r0, #1
1004ba84:	d104      	bne.n	1004ba90 <hci_le_set_advertising_parameters+0x76>
1004ba86:	a905      	add	r1, sp, #20
1004ba88:	7a09      	ldrb	r1, [r1, #8]
1004ba8a:	2902      	cmp	r1, #2
1004ba8c:	d302      	bcc.n	1004ba94 <hci_le_set_advertising_parameters+0x7a>
1004ba8e:	e021      	b.n	1004bad4 <hci_le_set_advertising_parameters+0xba>
1004ba90:	2903      	cmp	r1, #3
1004ba92:	d81f      	bhi.n	1004bad4 <hci_le_set_advertising_parameters+0xba>
1004ba94:	2801      	cmp	r0, #1
1004ba96:	d10e      	bne.n	1004bab6 <hci_le_set_advertising_parameters+0x9c>
1004ba98:	f000 f8ab 	bl	1004bbf2 <hci_le_check_own_address_type_max_value_ucfg_weak>
1004ba9c:	a905      	add	r1, sp, #20
1004ba9e:	79c9      	ldrb	r1, [r1, #7]
1004baa0:	4281      	cmp	r1, r0
1004baa2:	d817      	bhi.n	1004bad4 <hci_le_set_advertising_parameters+0xba>
1004baa4:	a805      	add	r0, sp, #20
1004baa6:	7940      	ldrb	r0, [r0, #5]
1004baa8:	0740      	lsls	r0, r0, #29
1004baaa:	9802      	ldr	r0, [sp, #8]
1004baac:	d013      	beq.n	1004bad6 <hci_le_set_advertising_parameters+0xbc>
1004baae:	a805      	add	r0, sp, #20
1004bab0:	f000 fc52 	bl	1004c358 <LL_LE_Set_Advertising_Parameters>
1004bab4:	e00f      	b.n	1004bad6 <hci_le_set_advertising_parameters+0xbc>
1004bab6:	a805      	add	r0, sp, #20
1004bab8:	8800      	ldrh	r0, [r0, #0]
1004baba:	2820      	cmp	r0, #32
1004babc:	d30a      	bcc.n	1004bad4 <hci_le_set_advertising_parameters+0xba>
1004babe:	03a1      	lsls	r1, r4, #14
1004bac0:	4288      	cmp	r0, r1
1004bac2:	d807      	bhi.n	1004bad4 <hci_le_set_advertising_parameters+0xba>
1004bac4:	aa05      	add	r2, sp, #20
1004bac6:	8852      	ldrh	r2, [r2, #2]
1004bac8:	2a20      	cmp	r2, #32
1004baca:	d303      	bcc.n	1004bad4 <hci_le_set_advertising_parameters+0xba>
1004bacc:	428a      	cmp	r2, r1
1004bace:	d801      	bhi.n	1004bad4 <hci_le_set_advertising_parameters+0xba>
1004bad0:	4290      	cmp	r0, r2
1004bad2:	d9e1      	bls.n	1004ba98 <hci_le_set_advertising_parameters+0x7e>
1004bad4:	9802      	ldr	r0, [sp, #8]
1004bad6:	b009      	add	sp, #36	@ 0x24
1004bad8:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004bada <hci_le_set_advertising_enable>:
1004bada:	b510      	push	{r4, lr}
1004badc:	4604      	mov	r4, r0
1004bade:	2002      	movs	r0, #2
1004bae0:	2101      	movs	r1, #1
1004bae2:	f000 f86b 	bl	1004bbbc <hci_get_set_legacy_ext_flag>
1004bae6:	2800      	cmp	r0, #0
1004bae8:	d000      	beq.n	1004baec <hci_le_set_advertising_enable+0x12>
1004baea:	bd10      	pop	{r4, pc}
1004baec:	2c01      	cmp	r4, #1
1004baee:	d803      	bhi.n	1004baf8 <hci_le_set_advertising_enable+0x1e>
1004baf0:	4620      	mov	r0, r4
1004baf2:	f000 fcb5 	bl	1004c460 <LL_LE_Set_Advertise_Enable>
1004baf6:	bd10      	pop	{r4, pc}
1004baf8:	2012      	movs	r0, #18
1004bafa:	bd10      	pop	{r4, pc}

1004bafc <chc_csr_ucfg_weak>:
1004bafc:	2000      	movs	r0, #0
1004bafe:	4770      	bx	lr

1004bb00 <HCI_Init>:
1004bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004bb02:	4917      	ldr	r1, [pc, #92]	@ (1004bb60 <__arm_cp.0_0>)
1004bb04:	6808      	ldr	r0, [r1, #0]
1004bb06:	460d      	mov	r5, r1
1004bb08:	2124      	movs	r1, #36	@ 0x24
1004bb0a:	2400      	movs	r4, #0
1004bb0c:	5444      	strb	r4, [r0, r1]
1004bb0e:	3025      	adds	r0, #37	@ 0x25
1004bb10:	2211      	movs	r2, #17
1004bb12:	4f14      	ldr	r7, [pc, #80]	@ (1004bb64 <__arm_cp.0_1>)
1004bb14:	4621      	mov	r1, r4
1004bb16:	47b8      	blx	r7
1004bb18:	6828      	ldr	r0, [r5, #0]
1004bb1a:	3036      	adds	r0, #54	@ 0x36
1004bb1c:	26ff      	movs	r6, #255	@ 0xff
1004bb1e:	2205      	movs	r2, #5
1004bb20:	4631      	mov	r1, r6
1004bb22:	47b8      	blx	r7
1004bb24:	6829      	ldr	r1, [r5, #0]
1004bb26:	203b      	movs	r0, #59	@ 0x3b
1004bb28:	231f      	movs	r3, #31
1004bb2a:	540b      	strb	r3, [r1, r0]
1004bb2c:	2201      	movs	r2, #1
1004bb2e:	0355      	lsls	r5, r2, #13
1004bb30:	4608      	mov	r0, r1
1004bb32:	303b      	adds	r0, #59	@ 0x3b
1004bb34:	5285      	strh	r5, [r0, r2]
1004bb36:	72c3      	strb	r3, [r0, #11]
1004bb38:	3147      	adds	r1, #71	@ 0x47
1004bb3a:	2207      	movs	r2, #7
1004bb3c:	4608      	mov	r0, r1
1004bb3e:	4621      	mov	r1, r4
1004bb40:	47b8      	blx	r7
1004bb42:	4d07      	ldr	r5, [pc, #28]	@ (1004bb60 <__arm_cp.0_0>)
1004bb44:	6828      	ldr	r0, [r5, #0]
1004bb46:	304e      	adds	r0, #78	@ 0x4e
1004bb48:	2208      	movs	r2, #8
1004bb4a:	4631      	mov	r1, r6
1004bb4c:	47b8      	blx	r7
1004bb4e:	4806      	ldr	r0, [pc, #24]	@ (1004bb68 <__arm_cp.0_2>)
1004bb50:	6800      	ldr	r0, [r0, #0]
1004bb52:	2135      	movs	r1, #53	@ 0x35
1004bb54:	5444      	strb	r4, [r0, r1]
1004bb56:	6828      	ldr	r0, [r5, #0]
1004bb58:	4904      	ldr	r1, [pc, #16]	@ (1004bb6c <__arm_cp.0_3>)
1004bb5a:	6201      	str	r1, [r0, #32]
1004bb5c:	65c4      	str	r4, [r0, #92]	@ 0x5c
1004bb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004bb60 <__arm_cp.0_0>:
1004bb60:	20000b40 	.word	0x20000b40

1004bb64 <__arm_cp.0_1>:
1004bb64:	10041a31 	.word	0x10041a31

1004bb68 <__arm_cp.0_2>:
1004bb68:	20000b30 	.word	0x20000b30

1004bb6c <__arm_cp.0_3>:
1004bb6c:	fffffdbe 	.word	0xfffffdbe

1004bb70 <Controller_Process_Q_ucfg_weak>:
1004bb70:	4770      	bx	lr

1004bb72 <hci_le_set_random_address>:
1004bb72:	b580      	push	{r7, lr}
1004bb74:	f000 fe84 	bl	1004c880 <LL_Set_Advertising_Set_Random_Address>
1004bb78:	bd80      	pop	{r7, pc}
	...

1004bb7c <hci_set_event_mask>:
1004bb7c:	b510      	push	{r4, lr}
1004bb7e:	2136      	movs	r1, #54	@ 0x36
1004bb80:	4a05      	ldr	r2, [pc, #20]	@ (1004bb98 <__arm_cp.14_0>)
1004bb82:	293e      	cmp	r1, #62	@ 0x3e
1004bb84:	d006      	beq.n	1004bb94 <hci_set_event_mask+0x18>
1004bb86:	1843      	adds	r3, r0, r1
1004bb88:	3b36      	subs	r3, #54	@ 0x36
1004bb8a:	781b      	ldrb	r3, [r3, #0]
1004bb8c:	6814      	ldr	r4, [r2, #0]
1004bb8e:	5463      	strb	r3, [r4, r1]
1004bb90:	1c49      	adds	r1, r1, #1
1004bb92:	e7f6      	b.n	1004bb82 <hci_set_event_mask+0x6>
1004bb94:	2000      	movs	r0, #0
1004bb96:	bd10      	pop	{r4, pc}

1004bb98 <__arm_cp.14_0>:
1004bb98:	20000b40 	.word	0x20000b40

1004bb9c <hci_le_set_event_mask>:
1004bb9c:	b510      	push	{r4, lr}
1004bb9e:	2146      	movs	r1, #70	@ 0x46
1004bba0:	4a05      	ldr	r2, [pc, #20]	@ (1004bbb8 <__arm_cp.16_0>)
1004bba2:	294e      	cmp	r1, #78	@ 0x4e
1004bba4:	d006      	beq.n	1004bbb4 <hci_le_set_event_mask+0x18>
1004bba6:	1843      	adds	r3, r0, r1
1004bba8:	3b46      	subs	r3, #70	@ 0x46
1004bbaa:	781b      	ldrb	r3, [r3, #0]
1004bbac:	6814      	ldr	r4, [r2, #0]
1004bbae:	5463      	strb	r3, [r4, r1]
1004bbb0:	1c49      	adds	r1, r1, #1
1004bbb2:	e7f6      	b.n	1004bba2 <hci_le_set_event_mask+0x6>
1004bbb4:	2000      	movs	r0, #0
1004bbb6:	bd10      	pop	{r4, pc}

1004bbb8 <__arm_cp.16_0>:
1004bbb8:	20000b40 	.word	0x20000b40

1004bbbc <hci_get_set_legacy_ext_flag>:
1004bbbc:	4a05      	ldr	r2, [pc, #20]	@ (1004bbd4 <__arm_cp.18_0>)
1004bbbe:	6812      	ldr	r2, [r2, #0]
1004bbc0:	2335      	movs	r3, #53	@ 0x35
1004bbc2:	5cd3      	ldrb	r3, [r2, r3]
1004bbc4:	4203      	tst	r3, r0
1004bbc6:	d001      	beq.n	1004bbcc <hci_get_set_legacy_ext_flag+0x10>
1004bbc8:	200c      	movs	r0, #12
1004bbca:	4770      	bx	lr
1004bbcc:	3235      	adds	r2, #53	@ 0x35
1004bbce:	7011      	strb	r1, [r2, #0]
1004bbd0:	2000      	movs	r0, #0
1004bbd2:	4770      	bx	lr

1004bbd4 <__arm_cp.18_0>:
1004bbd4:	20000b30 	.word	0x20000b30

1004bbd8 <hci_check_legacy_ext_flag>:
1004bbd8:	4903      	ldr	r1, [pc, #12]	@ (1004bbe8 <__arm_cp.25_0>)
1004bbda:	6809      	ldr	r1, [r1, #0]
1004bbdc:	2235      	movs	r2, #53	@ 0x35
1004bbde:	5c89      	ldrb	r1, [r1, r2]
1004bbe0:	4008      	ands	r0, r1
1004bbe2:	1e41      	subs	r1, r0, #1
1004bbe4:	4188      	sbcs	r0, r1
1004bbe6:	4770      	bx	lr

1004bbe8 <__arm_cp.25_0>:
1004bbe8:	20000b30 	.word	0x20000b30

1004bbec <LLC_offline_control_procedures_processing_ucfg_weak>:
1004bbec:	4770      	bx	lr

1004bbee <cte_csr_ucfg_weak>:
1004bbee:	2000      	movs	r0, #0
1004bbf0:	4770      	bx	lr

1004bbf2 <hci_le_check_own_address_type_max_value_ucfg_weak>:
1004bbf2:	2001      	movs	r0, #1
1004bbf4:	4770      	bx	lr

1004bbf6 <data_length_extension_csr_ucfg_weak>:
1004bbf6:	2000      	movs	r0, #0
1004bbf8:	4770      	bx	lr

1004bbfa <pcl_csr_ucfg_weak>:
1004bbfa:	2000      	movs	r0, #0
1004bbfc:	4770      	bx	lr

1004bbfe <phy_upd_csr_ucfg_weak>:
1004bbfe:	2000      	movs	r0, #0
1004bc00:	4770      	bx	lr

1004bc02 <scan_csr_ucfg_weak>:
1004bc02:	2000      	movs	r0, #0
1004bc04:	4770      	bx	lr

1004bc06 <conn_supp_csr_ucfg_weak>:
1004bc06:	2000      	movs	r0, #0
1004bc08:	4770      	bx	lr

1004bc0a <l2c_cos_csr_ucfg_weak>:
1004bc0a:	2000      	movs	r0, #0
1004bc0c:	4770      	bx	lr

1004bc0e <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
1004bc0e:	4770      	bx	lr

1004bc10 <L2C_init_ucfg_weak>:
1004bc10:	2000      	movs	r0, #0
1004bc12:	4770      	bx	lr

1004bc14 <llc_conn_get_cntxt_p>:
1004bc14:	4803      	ldr	r0, [pc, #12]	@ (1004bc24 <__arm_cp.0_0>)
1004bc16:	6800      	ldr	r0, [r0, #0]
1004bc18:	219c      	movs	r1, #156	@ 0x9c
1004bc1a:	5840      	ldr	r0, [r0, r1]
1004bc1c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004bc1e:	6800      	ldr	r0, [r0, #0]
1004bc20:	4770      	bx	lr
1004bc22:	46c0      	nop			@ (mov r8, r8)

1004bc24 <__arm_cp.0_0>:
1004bc24:	20000b40 	.word	0x20000b40

1004bc28 <llc_conn_get_cntxt_per_p>:
1004bc28:	214d      	movs	r1, #77	@ 0x4d
1004bc2a:	0089      	lsls	r1, r1, #2
1004bc2c:	4341      	muls	r1, r0
1004bc2e:	4804      	ldr	r0, [pc, #16]	@ (1004bc40 <__arm_cp.1_0>)
1004bc30:	6800      	ldr	r0, [r0, #0]
1004bc32:	229c      	movs	r2, #156	@ 0x9c
1004bc34:	5880      	ldr	r0, [r0, r2]
1004bc36:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004bc38:	6840      	ldr	r0, [r0, #4]
1004bc3a:	1840      	adds	r0, r0, r1
1004bc3c:	4770      	bx	lr
1004bc3e:	46c0      	nop			@ (mov r8, r8)

1004bc40 <__arm_cp.1_0>:
1004bc40:	20000b40 	.word	0x20000b40

1004bc44 <llc_conn_mem_allocate>:
1004bc44:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bc46:	b085      	sub	sp, #20
1004bc48:	2b01      	cmp	r3, #1
1004bc4a:	d000      	beq.n	1004bc4e <llc_conn_mem_allocate+0xa>
1004bc4c:	e082      	b.n	1004bd54 <llc_conn_mem_allocate+0x110>
1004bc4e:	ab02      	add	r3, sp, #8
1004bc50:	c307      	stmia	r3!, {r0, r1, r2}
1004bc52:	4841      	ldr	r0, [pc, #260]	@ (1004bd58 <__arm_cp.10_0>)
1004bc54:	7fc1      	ldrb	r1, [r0, #31]
1004bc56:	9101      	str	r1, [sp, #4]
1004bc58:	7ac4      	ldrb	r4, [r0, #11]
1004bc5a:	9400      	str	r4, [sp, #0]
1004bc5c:	2601      	movs	r6, #1
1004bc5e:	2124      	movs	r1, #36	@ 0x24
1004bc60:	4a3e      	ldr	r2, [pc, #248]	@ (1004bd5c <__arm_cp.10_1>)
1004bc62:	4630      	mov	r0, r6
1004bc64:	4790      	blx	r2
1004bc66:	493e      	ldr	r1, [pc, #248]	@ (1004bd60 <__arm_cp.10_2>)
1004bc68:	6809      	ldr	r1, [r1, #0]
1004bc6a:	279c      	movs	r7, #156	@ 0x9c
1004bc6c:	59c9      	ldr	r1, [r1, r7]
1004bc6e:	63c8      	str	r0, [r1, #60]	@ 0x3c
1004bc70:	2538      	movs	r5, #56	@ 0x38
1004bc72:	4630      	mov	r0, r6
1004bc74:	4629      	mov	r1, r5
1004bc76:	4a39      	ldr	r2, [pc, #228]	@ (1004bd5c <__arm_cp.10_1>)
1004bc78:	4790      	blx	r2
1004bc7a:	4939      	ldr	r1, [pc, #228]	@ (1004bd60 <__arm_cp.10_2>)
1004bc7c:	6809      	ldr	r1, [r1, #0]
1004bc7e:	59c9      	ldr	r1, [r1, r7]
1004bc80:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bc82:	6008      	str	r0, [r1, #0]
1004bc84:	204d      	movs	r0, #77	@ 0x4d
1004bc86:	0081      	lsls	r1, r0, #2
1004bc88:	4620      	mov	r0, r4
1004bc8a:	4c34      	ldr	r4, [pc, #208]	@ (1004bd5c <__arm_cp.10_1>)
1004bc8c:	47a0      	blx	r4
1004bc8e:	4934      	ldr	r1, [pc, #208]	@ (1004bd60 <__arm_cp.10_2>)
1004bc90:	6809      	ldr	r1, [r1, #0]
1004bc92:	59c9      	ldr	r1, [r1, r7]
1004bc94:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bc96:	6048      	str	r0, [r1, #4]
1004bc98:	9801      	ldr	r0, [sp, #4]
1004bc9a:	4086      	lsls	r6, r0
1004bc9c:	b2f0      	uxtb	r0, r6
1004bc9e:	2108      	movs	r1, #8
1004bca0:	47a0      	blx	r4
1004bca2:	492f      	ldr	r1, [pc, #188]	@ (1004bd60 <__arm_cp.10_2>)
1004bca4:	6809      	ldr	r1, [r1, #0]
1004bca6:	59c9      	ldr	r1, [r1, r7]
1004bca8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bcaa:	6809      	ldr	r1, [r1, #0]
1004bcac:	2228      	movs	r2, #40	@ 0x28
1004bcae:	2300      	movs	r3, #0
1004bcb0:	548b      	strb	r3, [r1, r2]
1004bcb2:	6248      	str	r0, [r1, #36]	@ 0x24
1004bcb4:	3128      	adds	r1, #40	@ 0x28
1004bcb6:	704e      	strb	r6, [r1, #1]
1004bcb8:	9c00      	ldr	r4, [sp, #0]
1004bcba:	2013      	movs	r0, #19
1004bcbc:	2104      	movs	r1, #4
1004bcbe:	4e27      	ldr	r6, [pc, #156]	@ (1004bd5c <__arm_cp.10_1>)
1004bcc0:	47b0      	blx	r6
1004bcc2:	4927      	ldr	r1, [pc, #156]	@ (1004bd60 <__arm_cp.10_2>)
1004bcc4:	6809      	ldr	r1, [r1, #0]
1004bcc6:	59c9      	ldr	r1, [r1, r7]
1004bcc8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bcca:	6108      	str	r0, [r1, #16]
1004bccc:	4620      	mov	r0, r4
1004bcce:	4629      	mov	r1, r5
1004bcd0:	47b0      	blx	r6
1004bcd2:	4633      	mov	r3, r6
1004bcd4:	4a22      	ldr	r2, [pc, #136]	@ (1004bd60 <__arm_cp.10_2>)
1004bcd6:	6811      	ldr	r1, [r2, #0]
1004bcd8:	59c9      	ldr	r1, [r1, r7]
1004bcda:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bcdc:	6088      	str	r0, [r1, #8]
1004bcde:	4626      	mov	r6, r4
1004bce0:	4620      	mov	r0, r4
1004bce2:	4629      	mov	r1, r5
1004bce4:	4615      	mov	r5, r2
1004bce6:	4798      	blx	r3
1004bce8:	6829      	ldr	r1, [r5, #0]
1004bcea:	59c9      	ldr	r1, [r1, r7]
1004bcec:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bcee:	60c8      	str	r0, [r1, #12]
1004bcf0:	9802      	ldr	r0, [sp, #8]
1004bcf2:	2801      	cmp	r0, #1
1004bcf4:	d107      	bne.n	1004bd06 <llc_conn_mem_allocate+0xc2>
1004bcf6:	210e      	movs	r1, #14
1004bcf8:	4630      	mov	r0, r6
1004bcfa:	f001 ff1b 	bl	1004db34 <csmem_mem_0_assign>
1004bcfe:	6829      	ldr	r1, [r5, #0]
1004bd00:	59c9      	ldr	r1, [r1, r7]
1004bd02:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bd04:	6148      	str	r0, [r1, #20]
1004bd06:	9803      	ldr	r0, [sp, #12]
1004bd08:	2801      	cmp	r0, #1
1004bd0a:	d107      	bne.n	1004bd1c <llc_conn_mem_allocate+0xd8>
1004bd0c:	2108      	movs	r1, #8
1004bd0e:	4630      	mov	r0, r6
1004bd10:	f001 ff10 	bl	1004db34 <csmem_mem_0_assign>
1004bd14:	6829      	ldr	r1, [r5, #0]
1004bd16:	59c9      	ldr	r1, [r1, r7]
1004bd18:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bd1a:	6188      	str	r0, [r1, #24]
1004bd1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1004bd1e:	9804      	ldr	r0, [sp, #16]
1004bd20:	2801      	cmp	r0, #1
1004bd22:	d10d      	bne.n	1004bd40 <llc_conn_mem_allocate+0xfc>
1004bd24:	2120      	movs	r1, #32
1004bd26:	4630      	mov	r0, r6
1004bd28:	f001 ff04 	bl	1004db34 <csmem_mem_0_assign>
1004bd2c:	6829      	ldr	r1, [r5, #0]
1004bd2e:	59c9      	ldr	r1, [r1, r7]
1004bd30:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bd32:	61c8      	str	r0, [r1, #28]
1004bd34:	2001      	movs	r0, #1
1004bd36:	2111      	movs	r1, #17
1004bd38:	f001 fefc 	bl	1004db34 <csmem_mem_0_assign>
1004bd3c:	6829      	ldr	r1, [r5, #0]
1004bd3e:	6648      	str	r0, [r1, #100]	@ 0x64
1004bd40:	2c01      	cmp	r4, #1
1004bd42:	d107      	bne.n	1004bd54 <llc_conn_mem_allocate+0x110>
1004bd44:	211c      	movs	r1, #28
1004bd46:	4630      	mov	r0, r6
1004bd48:	f001 fef4 	bl	1004db34 <csmem_mem_0_assign>
1004bd4c:	6829      	ldr	r1, [r5, #0]
1004bd4e:	59c9      	ldr	r1, [r1, r7]
1004bd50:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1004bd52:	6208      	str	r0, [r1, #32]
1004bd54:	b005      	add	sp, #20
1004bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004bd58 <__arm_cp.10_0>:
1004bd58:	20000b50 	.word	0x20000b50

1004bd5c <__arm_cp.10_1>:
1004bd5c:	1004db35 	.word	0x1004db35

1004bd60 <__arm_cp.10_2>:
1004bd60:	20000b40 	.word	0x20000b40

1004bd64 <llc_conn_list_search_address>:
1004bd64:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1004bd66:	460c      	mov	r4, r1
1004bd68:	4605      	mov	r5, r0
1004bd6a:	f7ff ff53 	bl	1004bc14 <llc_conn_get_cntxt_p>
1004bd6e:	2136      	movs	r1, #54	@ 0x36
1004bd70:	5c40      	ldrb	r0, [r0, r1]
1004bd72:	2800      	cmp	r0, #0
1004bd74:	d001      	beq.n	1004bd7a <llc_conn_list_search_address+0x16>
1004bd76:	2000      	movs	r0, #0
1004bd78:	e011      	b.n	1004bd9e <llc_conn_list_search_address+0x3a>
1004bd7a:	480a      	ldr	r0, [pc, #40]	@ (1004bda4 <__arm_cp.26_0>)
1004bd7c:	6800      	ldr	r0, [r0, #0]
1004bd7e:	219c      	movs	r1, #156	@ 0x9c
1004bd80:	5840      	ldr	r0, [r0, r1]
1004bd82:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1004bd84:	6801      	ldr	r1, [r0, #0]
1004bd86:	6a48      	ldr	r0, [r1, #36]	@ 0x24
1004bd88:	6a89      	ldr	r1, [r1, #40]	@ 0x28
1004bd8a:	aa03      	add	r2, sp, #12
1004bd8c:	2300      	movs	r3, #0
1004bd8e:	9300      	str	r3, [sp, #0]
1004bd90:	9201      	str	r2, [sp, #4]
1004bd92:	22fe      	movs	r2, #254	@ 0xfe
1004bd94:	4395      	bics	r5, r2
1004bd96:	462a      	mov	r2, r5
1004bd98:	4623      	mov	r3, r4
1004bd9a:	f002 fb35 	bl	1004e408 <addr8_list_search>
1004bd9e:	b004      	add	sp, #16
1004bda0:	bdb0      	pop	{r4, r5, r7, pc}
1004bda2:	46c0      	nop			@ (mov r8, r8)

1004bda4 <__arm_cp.26_0>:
1004bda4:	20000b40 	.word	0x20000b40

1004bda8 <llc_conn_push_connection_complete_event>:
1004bda8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bdaa:	b08d      	sub	sp, #52	@ 0x34
1004bdac:	4604      	mov	r4, r0
1004bdae:	4895      	ldr	r0, [pc, #596]	@ (1004c004 <__arm_cp.28_0>)
1004bdb0:	6800      	ldr	r0, [r0, #0]
1004bdb2:	212c      	movs	r1, #44	@ 0x2c
1004bdb4:	5c40      	ldrb	r0, [r0, r1]
1004bdb6:	07c0      	lsls	r0, r0, #31
1004bdb8:	0ec5      	lsrs	r5, r0, #27
1004bdba:	206f      	movs	r0, #111	@ 0x6f
1004bdbc:	43c6      	mvns	r6, r0
1004bdbe:	406e      	eors	r6, r5
1004bdc0:	f000 f93a 	bl	1004c038 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004bdc4:	4990      	ldr	r1, [pc, #576]	@ (1004c008 <__arm_cp.28_1>)
1004bdc6:	6809      	ldr	r1, [r1, #0]
1004bdc8:	223d      	movs	r2, #61	@ 0x3d
1004bdca:	5c8b      	ldrb	r3, [r1, r2]
1004bdcc:	2220      	movs	r2, #32
1004bdce:	4013      	ands	r3, r2
1004bdd0:	313d      	adds	r1, #61	@ 0x3d
1004bdd2:	2800      	cmp	r0, #0
1004bdd4:	d066      	beq.n	1004bea4 <llc_conn_push_connection_complete_event+0xfc>
1004bdd6:	2b00      	cmp	r3, #0
1004bdd8:	d100      	bne.n	1004bddc <llc_conn_push_connection_complete_event+0x34>
1004bdda:	e110      	b.n	1004bffe <llc_conn_push_connection_complete_event+0x256>
1004bddc:	7b88      	ldrb	r0, [r1, #14]
1004bdde:	07c0      	lsls	r0, r0, #31
1004bde0:	d063      	beq.n	1004beaa <llc_conn_push_connection_complete_event+0x102>
1004bde2:	2d00      	cmp	r5, #0
1004bde4:	d100      	bne.n	1004bde8 <llc_conn_push_connection_complete_event+0x40>
1004bde6:	2212      	movs	r2, #18
1004bde8:	8aa0      	ldrh	r0, [r4, #20]
1004bdea:	900c      	str	r0, [sp, #48]	@ 0x30
1004bdec:	7da7      	ldrb	r7, [r4, #22]
1004bdee:	7de0      	ldrb	r0, [r4, #23]
1004bdf0:	9008      	str	r0, [sp, #32]
1004bdf2:	8a60      	ldrh	r0, [r4, #18]
1004bdf4:	900b      	str	r0, [sp, #44]	@ 0x2c
1004bdf6:	8a20      	ldrh	r0, [r4, #16]
1004bdf8:	9009      	str	r0, [sp, #36]	@ 0x24
1004bdfa:	89a0      	ldrh	r0, [r4, #12]
1004bdfc:	900a      	str	r0, [sp, #40]	@ 0x28
1004bdfe:	6820      	ldr	r0, [r4, #0]
1004be00:	9005      	str	r0, [sp, #20]
1004be02:	6860      	ldr	r0, [r4, #4]
1004be04:	9007      	str	r0, [sp, #28]
1004be06:	68a0      	ldr	r0, [r4, #8]
1004be08:	9006      	str	r0, [sp, #24]
1004be0a:	7e20      	ldrb	r0, [r4, #24]
1004be0c:	9003      	str	r0, [sp, #12]
1004be0e:	7e60      	ldrb	r0, [r4, #25]
1004be10:	9004      	str	r0, [sp, #16]
1004be12:	89e5      	ldrh	r5, [r4, #14]
1004be14:	7ea0      	ldrb	r0, [r4, #26]
1004be16:	9002      	str	r0, [sp, #8]
1004be18:	487c      	ldr	r0, [pc, #496]	@ (1004c00c <__arm_cp.28_2>)
1004be1a:	6800      	ldr	r0, [r0, #0]
1004be1c:	6900      	ldr	r0, [r0, #16]
1004be1e:	b2f1      	uxtb	r1, r6
1004be20:	230a      	movs	r3, #10
1004be22:	f7fe ffff 	bl	1004ae24 <aci_event_fifo_push_header>
1004be26:	2800      	cmp	r0, #0
1004be28:	d100      	bne.n	1004be2c <llc_conn_push_connection_complete_event+0x84>
1004be2a:	e0e8      	b.n	1004bffe <llc_conn_push_connection_complete_event+0x256>
1004be2c:	4604      	mov	r4, r0
1004be2e:	9701      	str	r7, [sp, #4]
1004be30:	4607      	mov	r7, r0
1004be32:	371f      	adds	r7, #31
1004be34:	7245      	strb	r5, [r0, #9]
1004be36:	9803      	ldr	r0, [sp, #12]
1004be38:	7320      	strb	r0, [r4, #12]
1004be3a:	9804      	ldr	r0, [sp, #16]
1004be3c:	72e0      	strb	r0, [r4, #11]
1004be3e:	9802      	ldr	r0, [sp, #8]
1004be40:	7220      	strb	r0, [r4, #8]
1004be42:	0a28      	lsrs	r0, r5, #8
1004be44:	72a0      	strb	r0, [r4, #10]
1004be46:	4620      	mov	r0, r4
1004be48:	300d      	adds	r0, #13
1004be4a:	2506      	movs	r5, #6
1004be4c:	9905      	ldr	r1, [sp, #20]
1004be4e:	462a      	mov	r2, r5
1004be50:	4b6f      	ldr	r3, [pc, #444]	@ (1004c010 <__arm_cp.28_3>)
1004be52:	4798      	blx	r3
1004be54:	4620      	mov	r0, r4
1004be56:	3013      	adds	r0, #19
1004be58:	9906      	ldr	r1, [sp, #24]
1004be5a:	462a      	mov	r2, r5
1004be5c:	4b6c      	ldr	r3, [pc, #432]	@ (1004c010 <__arm_cp.28_3>)
1004be5e:	4798      	blx	r3
1004be60:	4b6b      	ldr	r3, [pc, #428]	@ (1004c010 <__arm_cp.28_3>)
1004be62:	4620      	mov	r0, r4
1004be64:	3019      	adds	r0, #25
1004be66:	9907      	ldr	r1, [sp, #28]
1004be68:	462a      	mov	r2, r5
1004be6a:	4798      	blx	r3
1004be6c:	2021      	movs	r0, #33	@ 0x21
1004be6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004be70:	5421      	strb	r1, [r4, r0]
1004be72:	2025      	movs	r0, #37	@ 0x25
1004be74:	9a08      	ldr	r2, [sp, #32]
1004be76:	5422      	strb	r2, [r4, r0]
1004be78:	4620      	mov	r0, r4
1004be7a:	3021      	adds	r0, #33	@ 0x21
1004be7c:	0a09      	lsrs	r1, r1, #8
1004be7e:	7041      	strb	r1, [r0, #1]
1004be80:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004be82:	0a08      	lsrs	r0, r1, #8
1004be84:	7078      	strb	r0, [r7, #1]
1004be86:	7039      	strb	r1, [r7, #0]
1004be88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004be8a:	0a08      	lsrs	r0, r1, #8
1004be8c:	7178      	strb	r0, [r7, #5]
1004be8e:	7139      	strb	r1, [r7, #4]
1004be90:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004be92:	0a08      	lsrs	r0, r1, #8
1004be94:	7278      	strb	r0, [r7, #9]
1004be96:	7239      	strb	r1, [r7, #8]
1004be98:	9801      	ldr	r0, [sp, #4]
1004be9a:	71f8      	strb	r0, [r7, #7]
1004be9c:	1d20      	adds	r0, r4, #4
1004be9e:	2129      	movs	r1, #41	@ 0x29
1004bea0:	2222      	movs	r2, #34	@ 0x22
1004bea2:	e0a2      	b.n	1004bfea <llc_conn_push_connection_complete_event+0x242>
1004bea4:	2b00      	cmp	r3, #0
1004bea6:	d100      	bne.n	1004beaa <llc_conn_push_connection_complete_event+0x102>
1004bea8:	e0a9      	b.n	1004bffe <llc_conn_push_connection_complete_event+0x256>
1004beaa:	7a88      	ldrb	r0, [r1, #10]
1004beac:	0780      	lsls	r0, r0, #30
1004beae:	d445      	bmi.n	1004bf3c <llc_conn_push_connection_complete_event+0x194>
1004beb0:	7a48      	ldrb	r0, [r1, #9]
1004beb2:	07c0      	lsls	r0, r0, #31
1004beb4:	d100      	bne.n	1004beb8 <llc_conn_push_connection_complete_event+0x110>
1004beb6:	e0a2      	b.n	1004bffe <llc_conn_push_connection_complete_event+0x256>
1004beb8:	2008      	movs	r0, #8
1004beba:	4305      	orrs	r5, r0
1004bebc:	7de0      	ldrb	r0, [r4, #23]
1004bebe:	900c      	str	r0, [sp, #48]	@ 0x30
1004bec0:	8a60      	ldrh	r0, [r4, #18]
1004bec2:	900b      	str	r0, [sp, #44]	@ 0x2c
1004bec4:	8a20      	ldrh	r0, [r4, #16]
1004bec6:	9009      	str	r0, [sp, #36]	@ 0x24
1004bec8:	89a0      	ldrh	r0, [r4, #12]
1004beca:	900a      	str	r0, [sp, #40]	@ 0x28
1004becc:	6820      	ldr	r0, [r4, #0]
1004bece:	9008      	str	r0, [sp, #32]
1004bed0:	7e20      	ldrb	r0, [r4, #24]
1004bed2:	9006      	str	r0, [sp, #24]
1004bed4:	7e60      	ldrb	r0, [r4, #25]
1004bed6:	9007      	str	r0, [sp, #28]
1004bed8:	89e7      	ldrh	r7, [r4, #14]
1004beda:	7ea0      	ldrb	r0, [r4, #26]
1004bedc:	9005      	str	r0, [sp, #20]
1004bede:	484b      	ldr	r0, [pc, #300]	@ (1004c00c <__arm_cp.28_2>)
1004bee0:	6800      	ldr	r0, [r0, #0]
1004bee2:	6900      	ldr	r0, [r0, #16]
1004bee4:	b2f1      	uxtb	r1, r6
1004bee6:	2306      	movs	r3, #6
1004bee8:	462a      	mov	r2, r5
1004beea:	f7fe ff9b 	bl	1004ae24 <aci_event_fifo_push_header>
1004beee:	2800      	cmp	r0, #0
1004bef0:	d100      	bne.n	1004bef4 <llc_conn_push_connection_complete_event+0x14c>
1004bef2:	e084      	b.n	1004bffe <llc_conn_push_connection_complete_event+0x256>
1004bef4:	4604      	mov	r4, r0
1004bef6:	4605      	mov	r5, r0
1004bef8:	3513      	adds	r5, #19
1004befa:	7247      	strb	r7, [r0, #9]
1004befc:	9806      	ldr	r0, [sp, #24]
1004befe:	7320      	strb	r0, [r4, #12]
1004bf00:	9807      	ldr	r0, [sp, #28]
1004bf02:	72e0      	strb	r0, [r4, #11]
1004bf04:	9805      	ldr	r0, [sp, #20]
1004bf06:	7220      	strb	r0, [r4, #8]
1004bf08:	0a38      	lsrs	r0, r7, #8
1004bf0a:	72a0      	strb	r0, [r4, #10]
1004bf0c:	4620      	mov	r0, r4
1004bf0e:	300d      	adds	r0, #13
1004bf10:	2206      	movs	r2, #6
1004bf12:	9908      	ldr	r1, [sp, #32]
1004bf14:	f7f5 fd7c 	bl	10041a10 <BLEPLAT_MemCpy>
1004bf18:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004bf1a:	0a08      	lsrs	r0, r1, #8
1004bf1c:	75a0      	strb	r0, [r4, #22]
1004bf1e:	7561      	strb	r1, [r4, #21]
1004bf20:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004bf22:	0a08      	lsrs	r0, r1, #8
1004bf24:	7068      	strb	r0, [r5, #1]
1004bf26:	7029      	strb	r1, [r5, #0]
1004bf28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004bf2a:	0a08      	lsrs	r0, r1, #8
1004bf2c:	7168      	strb	r0, [r5, #5]
1004bf2e:	7129      	strb	r1, [r5, #4]
1004bf30:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004bf32:	7660      	strb	r0, [r4, #25]
1004bf34:	1d20      	adds	r0, r4, #4
1004bf36:	2101      	movs	r1, #1
1004bf38:	2213      	movs	r2, #19
1004bf3a:	e056      	b.n	1004bfea <llc_conn_push_connection_complete_event+0x242>
1004bf3c:	2d00      	cmp	r5, #0
1004bf3e:	d001      	beq.n	1004bf44 <llc_conn_push_connection_complete_event+0x19c>
1004bf40:	221c      	movs	r2, #28
1004bf42:	e000      	b.n	1004bf46 <llc_conn_push_connection_complete_event+0x19e>
1004bf44:	220d      	movs	r2, #13
1004bf46:	7de0      	ldrb	r0, [r4, #23]
1004bf48:	900a      	str	r0, [sp, #40]	@ 0x28
1004bf4a:	8a67      	ldrh	r7, [r4, #18]
1004bf4c:	8a20      	ldrh	r0, [r4, #16]
1004bf4e:	900b      	str	r0, [sp, #44]	@ 0x2c
1004bf50:	89a0      	ldrh	r0, [r4, #12]
1004bf52:	900c      	str	r0, [sp, #48]	@ 0x30
1004bf54:	6820      	ldr	r0, [r4, #0]
1004bf56:	9007      	str	r0, [sp, #28]
1004bf58:	6860      	ldr	r0, [r4, #4]
1004bf5a:	9009      	str	r0, [sp, #36]	@ 0x24
1004bf5c:	68a0      	ldr	r0, [r4, #8]
1004bf5e:	9008      	str	r0, [sp, #32]
1004bf60:	7e20      	ldrb	r0, [r4, #24]
1004bf62:	9005      	str	r0, [sp, #20]
1004bf64:	7e60      	ldrb	r0, [r4, #25]
1004bf66:	9006      	str	r0, [sp, #24]
1004bf68:	89e5      	ldrh	r5, [r4, #14]
1004bf6a:	7ea0      	ldrb	r0, [r4, #26]
1004bf6c:	9004      	str	r0, [sp, #16]
1004bf6e:	4827      	ldr	r0, [pc, #156]	@ (1004c00c <__arm_cp.28_2>)
1004bf70:	6800      	ldr	r0, [r0, #0]
1004bf72:	6900      	ldr	r0, [r0, #16]
1004bf74:	b2f1      	uxtb	r1, r6
1004bf76:	2309      	movs	r3, #9
1004bf78:	f7fe ff54 	bl	1004ae24 <aci_event_fifo_push_header>
1004bf7c:	2800      	cmp	r0, #0
1004bf7e:	d03e      	beq.n	1004bffe <llc_conn_push_connection_complete_event+0x256>
1004bf80:	4604      	mov	r4, r0
1004bf82:	9703      	str	r7, [sp, #12]
1004bf84:	4607      	mov	r7, r0
1004bf86:	371f      	adds	r7, #31
1004bf88:	7245      	strb	r5, [r0, #9]
1004bf8a:	9805      	ldr	r0, [sp, #20]
1004bf8c:	7320      	strb	r0, [r4, #12]
1004bf8e:	9806      	ldr	r0, [sp, #24]
1004bf90:	72e0      	strb	r0, [r4, #11]
1004bf92:	9804      	ldr	r0, [sp, #16]
1004bf94:	7220      	strb	r0, [r4, #8]
1004bf96:	0a28      	lsrs	r0, r5, #8
1004bf98:	72a0      	strb	r0, [r4, #10]
1004bf9a:	4620      	mov	r0, r4
1004bf9c:	300d      	adds	r0, #13
1004bf9e:	2506      	movs	r5, #6
1004bfa0:	9907      	ldr	r1, [sp, #28]
1004bfa2:	462a      	mov	r2, r5
1004bfa4:	4b1a      	ldr	r3, [pc, #104]	@ (1004c010 <__arm_cp.28_3>)
1004bfa6:	4798      	blx	r3
1004bfa8:	4620      	mov	r0, r4
1004bfaa:	3013      	adds	r0, #19
1004bfac:	9908      	ldr	r1, [sp, #32]
1004bfae:	462a      	mov	r2, r5
1004bfb0:	4b17      	ldr	r3, [pc, #92]	@ (1004c010 <__arm_cp.28_3>)
1004bfb2:	4798      	blx	r3
1004bfb4:	4b16      	ldr	r3, [pc, #88]	@ (1004c010 <__arm_cp.28_3>)
1004bfb6:	4620      	mov	r0, r4
1004bfb8:	3019      	adds	r0, #25
1004bfba:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004bfbc:	462a      	mov	r2, r5
1004bfbe:	4798      	blx	r3
1004bfc0:	2021      	movs	r0, #33	@ 0x21
1004bfc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004bfc4:	5422      	strb	r2, [r4, r0]
1004bfc6:	2025      	movs	r0, #37	@ 0x25
1004bfc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
1004bfca:	5421      	strb	r1, [r4, r0]
1004bfcc:	1d20      	adds	r0, r4, #4
1004bfce:	4621      	mov	r1, r4
1004bfd0:	3121      	adds	r1, #33	@ 0x21
1004bfd2:	0a12      	lsrs	r2, r2, #8
1004bfd4:	704a      	strb	r2, [r1, #1]
1004bfd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004bfd8:	0a11      	lsrs	r1, r2, #8
1004bfda:	7079      	strb	r1, [r7, #1]
1004bfdc:	703a      	strb	r2, [r7, #0]
1004bfde:	9a03      	ldr	r2, [sp, #12]
1004bfe0:	0a11      	lsrs	r1, r2, #8
1004bfe2:	7179      	strb	r1, [r7, #5]
1004bfe4:	713a      	strb	r2, [r7, #4]
1004bfe6:	210a      	movs	r1, #10
1004bfe8:	221f      	movs	r2, #31
1004bfea:	2304      	movs	r3, #4
1004bfec:	7123      	strb	r3, [r4, #4]
1004bfee:	233e      	movs	r3, #62	@ 0x3e
1004bff0:	7043      	strb	r3, [r0, #1]
1004bff2:	71e1      	strb	r1, [r4, #7]
1004bff4:	71a2      	strb	r2, [r4, #6]
1004bff6:	b2f0      	uxtb	r0, r6
1004bff8:	4621      	mov	r1, r4
1004bffa:	f7fe ffb0 	bl	1004af5e <aci_event_fifo_push>
1004bffe:	b00d      	add	sp, #52	@ 0x34
1004c000:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c002:	46c0      	nop			@ (mov r8, r8)

1004c004 <__arm_cp.28_0>:
1004c004:	20000b30 	.word	0x20000b30

1004c008 <__arm_cp.28_1>:
1004c008:	20000b40 	.word	0x20000b40

1004c00c <__arm_cp.28_2>:
1004c00c:	20000b34 	.word	0x20000b34

1004c010 <__arm_cp.28_3>:
1004c010:	10041a11 	.word	0x10041a11

1004c014 <llc_conn_release_conn_idx>:
1004c014:	b580      	push	{r7, lr}
1004c016:	f7ff fe07 	bl	1004bc28 <llc_conn_get_cntxt_per_p>
1004c01a:	212c      	movs	r1, #44	@ 0x2c
1004c01c:	2200      	movs	r2, #0
1004c01e:	5442      	strb	r2, [r0, r1]
1004c020:	bd80      	pop	{r7, pc}

1004c022 <llc_conn_peripheral_roll_back_params_tsk_ucfg_weak>:
1004c022:	4770      	bx	lr

1004c024 <llc_isoal_mem_alloc_ucfg_weak>:
1004c024:	4770      	bx	lr

1004c026 <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1004c026:	2000      	movs	r0, #0
1004c028:	4770      	bx	lr

1004c02a <iso_terminate_event_int_cb_ucfg_weak>:
1004c02a:	2000      	movs	r0, #0
1004c02c:	4770      	bx	lr

1004c02e <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1004c02e:	2000      	movs	r0, #0
1004c030:	4770      	bx	lr

1004c032 <llc_iso_cmn_mem_alloc_ucfg_weak>:
1004c032:	4770      	bx	lr

1004c034 <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1004c034:	2000      	movs	r0, #0
1004c036:	4770      	bx	lr

1004c038 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1004c038:	2000      	movs	r0, #0
1004c03a:	4770      	bx	lr

1004c03c <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1004c03c:	4770      	bx	lr

1004c03e <llc_priv_init_ucfg_weak>:
1004c03e:	4770      	bx	lr

1004c040 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1004c040:	4770      	bx	lr

1004c042 <llc_priv_offline_rpa_resolution_ucfg_weak>:
1004c042:	4770      	bx	lr

1004c044 <llc_priv_controller_privacy_csr_ucfg_weak>:
1004c044:	2000      	movs	r0, #0
1004c046:	4770      	bx	lr

1004c048 <llc_priv_start_privacy_timer_ucfg_weak>:
1004c048:	4770      	bx	lr

1004c04a <llc_priv_stop_privacy_timer_ucfg_weak>:
1004c04a:	4770      	bx	lr

1004c04c <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1004c04c:	4770      	bx	lr
	...

1004c050 <llc_scan_get_cntxt_p>:
1004c050:	4802      	ldr	r0, [pc, #8]	@ (1004c05c <__arm_cp.0_0>)
1004c052:	6800      	ldr	r0, [r0, #0]
1004c054:	219c      	movs	r1, #156	@ 0x9c
1004c056:	5840      	ldr	r0, [r0, r1]
1004c058:	6840      	ldr	r0, [r0, #4]
1004c05a:	4770      	bx	lr

1004c05c <__arm_cp.0_0>:
1004c05c:	20000b40 	.word	0x20000b40

1004c060 <llc_scan_init_ucfg_weak>:
1004c060:	4770      	bx	lr

1004c062 <llc_scan_mem_allocate_ucfg_weak>:
1004c062:	4770      	bx	lr

1004c064 <llc_scan_stop_ucfg_weak>:
1004c064:	2000      	movs	r0, #0
1004c066:	4770      	bx	lr

1004c068 <llc_convert_hci_phy_enum_to_hw_phy>:
1004c068:	1e80      	subs	r0, r0, #2
1004c06a:	b2c0      	uxtb	r0, r0
1004c06c:	2803      	cmp	r0, #3
1004c06e:	d301      	bcc.n	1004c074 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1004c070:	2000      	movs	r0, #0
1004c072:	e002      	b.n	1004c07a <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1004c074:	00c1      	lsls	r1, r0, #3
1004c076:	4802      	ldr	r0, [pc, #8]	@ (1004c080 <__arm_cp.4_0>)
1004c078:	40c8      	lsrs	r0, r1
1004c07a:	b2c0      	uxtb	r0, r0
1004c07c:	4770      	bx	lr
1004c07e:	46c0      	nop			@ (mov r8, r8)

1004c080 <__arm_cp.4_0>:
1004c080:	00060401 	.word	0x00060401

1004c084 <LL_cpf_cis_processing_ucfg_weak>:
1004c084:	4770      	bx	lr

1004c086 <LLC_authenticated_payload_timeout_processing_ucfg_weak>:
1004c086:	4770      	bx	lr

1004c088 <llc_past_mem_allocate_ucfg_weak>:
1004c088:	4770      	bx	lr

1004c08a <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1004c08a:	4770      	bx	lr

1004c08c <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1004c08c:	4770      	bx	lr
	...

1004c090 <llc_cte_get_ctxt>:
1004c090:	4802      	ldr	r0, [pc, #8]	@ (1004c09c <__arm_cp.2_0>)
1004c092:	6800      	ldr	r0, [r0, #0]
1004c094:	219c      	movs	r1, #156	@ 0x9c
1004c096:	5840      	ldr	r0, [r0, r1]
1004c098:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1004c09a:	4770      	bx	lr

1004c09c <__arm_cp.2_0>:
1004c09c:	20000b40 	.word	0x20000b40

1004c0a0 <llc_cte_init_ucfg_weak>:
1004c0a0:	4770      	bx	lr

1004c0a2 <llc_cte_mem_allocate_ucfg_weak>:
1004c0a2:	4770      	bx	lr

1004c0a4 <llc_cte_timer_error_ucfg_weak>:
1004c0a4:	4770      	bx	lr

1004c0a6 <llc_cte_timer_stop_ucfg_weak>:
1004c0a6:	2000      	movs	r0, #0
1004c0a8:	4770      	bx	lr
	...

1004c0ac <LL_dtm_init>:
1004c0ac:	b5b0      	push	{r4, r5, r7, lr}
1004c0ae:	480e      	ldr	r0, [pc, #56]	@ (1004c0e8 <__arm_cp.0_0>)
1004c0b0:	6800      	ldr	r0, [r0, #0]
1004c0b2:	21ac      	movs	r1, #172	@ 0xac
1004c0b4:	5844      	ldr	r4, [r0, r1]
1004c0b6:	20ff      	movs	r0, #255	@ 0xff
1004c0b8:	77a0      	strb	r0, [r4, #30]
1004c0ba:	2500      	movs	r5, #0
1004c0bc:	77e5      	strb	r5, [r4, #31]
1004c0be:	f7ff fd96 	bl	1004bbee <cte_csr_ucfg_weak>
1004c0c2:	2801      	cmp	r0, #1
1004c0c4:	d10f      	bne.n	1004c0e6 <LL_dtm_init+0x3a>
1004c0c6:	f7ff ffe3 	bl	1004c090 <llc_cte_get_ctxt>
1004c0ca:	2224      	movs	r2, #36	@ 0x24
1004c0cc:	4907      	ldr	r1, [pc, #28]	@ (1004c0ec <__arm_cp.0_1>)
1004c0ce:	5c8a      	ldrb	r2, [r1, r2]
1004c0d0:	2a00      	cmp	r2, #0
1004c0d2:	462a      	mov	r2, r5
1004c0d4:	d000      	beq.n	1004c0d8 <LL_dtm_init+0x2c>
1004c0d6:	6802      	ldr	r2, [r0, #0]
1004c0d8:	62a2      	str	r2, [r4, #40]	@ 0x28
1004c0da:	2223      	movs	r2, #35	@ 0x23
1004c0dc:	5c89      	ldrb	r1, [r1, r2]
1004c0de:	2900      	cmp	r1, #0
1004c0e0:	d000      	beq.n	1004c0e4 <LL_dtm_init+0x38>
1004c0e2:	6845      	ldr	r5, [r0, #4]
1004c0e4:	62e5      	str	r5, [r4, #44]	@ 0x2c
1004c0e6:	bdb0      	pop	{r4, r5, r7, pc}

1004c0e8 <__arm_cp.0_0>:
1004c0e8:	20000b40 	.word	0x20000b40

1004c0ec <__arm_cp.0_1>:
1004c0ec:	20000b50 	.word	0x20000b50

1004c0f0 <LL_eadv_switchbackupdata_data_struc>:
1004c0f0:	b510      	push	{r4, lr}
1004c0f2:	7c01      	ldrb	r1, [r0, #16]
1004c0f4:	2902      	cmp	r1, #2
1004c0f6:	d109      	bne.n	1004c10c <LL_eadv_switchbackupdata_data_struc+0x1c>
1004c0f8:	2401      	movs	r4, #1
1004c0fa:	7404      	strb	r4, [r0, #16]
1004c0fc:	6801      	ldr	r1, [r0, #0]
1004c0fe:	6882      	ldr	r2, [r0, #8]
1004c100:	68c3      	ldr	r3, [r0, #12]
1004c102:	c00c      	stmia	r0!, {r2, r3}
1004c104:	20a1      	movs	r0, #161	@ 0xa1
1004c106:	f002 faa7 	bl	1004e658 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1004c10a:	e000      	b.n	1004c10e <LL_eadv_switchbackupdata_data_struc+0x1e>
1004c10c:	2400      	movs	r4, #0
1004c10e:	4620      	mov	r0, r4
1004c110:	bd10      	pop	{r4, pc}

1004c112 <LL_eadv_Blue_Tx>:
1004c112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c114:	461e      	mov	r6, r3
1004c116:	4617      	mov	r7, r2
1004c118:	460d      	mov	r5, r1
1004c11a:	4604      	mov	r4, r0
1004c11c:	f7f6 fa2e 	bl	1004257c <BLEPLAT_CNTR_PacketInitTo0>
1004c120:	4620      	mov	r0, r4
1004c122:	f7f6 fa39 	bl	10042598 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1004c126:	4620      	mov	r0, r4
1004c128:	f7f6 fa6a 	bl	10042600 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1004c12c:	4620      	mov	r0, r4
1004c12e:	4621      	mov	r1, r4
1004c130:	f7f6 fa73 	bl	1004261a <BLEPLAT_CNTR_PacketSetNextPtr>
1004c134:	4620      	mov	r0, r4
1004c136:	4639      	mov	r1, r7
1004c138:	f7f6 fa3b 	bl	100425b2 <BLEPLAT_CNTR_PacketSetDataPtr>
1004c13c:	4620      	mov	r0, r4
1004c13e:	4631      	mov	r1, r6
1004c140:	f7f6 fab9 	bl	100426b6 <BLEPLAT_CNTR_PacketSetTimeout>
1004c144:	9f06      	ldr	r7, [sp, #24]
1004c146:	2e00      	cmp	r6, #0
1004c148:	d002      	beq.n	1004c150 <LL_eadv_Blue_Tx+0x3e>
1004c14a:	4620      	mov	r0, r4
1004c14c:	f7f6 fac2 	bl	100426d4 <BLEPLAT_CNTR_PacketSetTimer2Active>
1004c150:	4620      	mov	r0, r4
1004c152:	f7f6 f9fa 	bl	1004254a <BLEPLAT_CNTR_PacketClrIncChan>
1004c156:	4620      	mov	r0, r4
1004c158:	f7f6 fa3a 	bl	100425d0 <BLEPLAT_CNTR_PacketSetIntDone>
1004c15c:	4620      	mov	r0, r4
1004c15e:	f7f6 fadf 	bl	10042720 <BLEPLAT_CNTR_PacketSetTxReady>
1004c162:	4620      	mov	r0, r4
1004c164:	2f81      	cmp	r7, #129	@ 0x81
1004c166:	d109      	bne.n	1004c17c <LL_eadv_Blue_Tx+0x6a>
1004c168:	4629      	mov	r1, r5
1004c16a:	f7f6 fa72 	bl	10042652 <BLEPLAT_CNTR_PacketSetNextSlot>
1004c16e:	4620      	mov	r0, r4
1004c170:	f7f6 fa87 	bl	10042682 <BLEPLAT_CNTR_PacketSetPllTrig>
1004c174:	4620      	mov	r0, r4
1004c176:	f7f6 fab9 	bl	100426ec <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1004c17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c17c:	f7f6 fac3 	bl	10042706 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1004c180:	4620      	mov	r0, r4
1004c182:	f7f6 fa59 	bl	10042638 <BLEPLAT_CNTR_PacketSetNextRxMode>
1004c186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004c188 <LL_eadv_Blue_Rx>:
1004c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c18a:	461e      	mov	r6, r3
1004c18c:	4617      	mov	r7, r2
1004c18e:	460d      	mov	r5, r1
1004c190:	4604      	mov	r4, r0
1004c192:	f7f6 f9f3 	bl	1004257c <BLEPLAT_CNTR_PacketInitTo0>
1004c196:	4620      	mov	r0, r4
1004c198:	f7f6 f9fe 	bl	10042598 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1004c19c:	4620      	mov	r0, r4
1004c19e:	f7f6 fa2f 	bl	10042600 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1004c1a2:	4620      	mov	r0, r4
1004c1a4:	4621      	mov	r1, r4
1004c1a6:	f7f6 fa38 	bl	1004261a <BLEPLAT_CNTR_PacketSetNextPtr>
1004c1aa:	4620      	mov	r0, r4
1004c1ac:	4639      	mov	r1, r7
1004c1ae:	f7f6 fa00 	bl	100425b2 <BLEPLAT_CNTR_PacketSetDataPtr>
1004c1b2:	4620      	mov	r0, r4
1004c1b4:	4631      	mov	r1, r6
1004c1b6:	f7f6 fa7e 	bl	100426b6 <BLEPLAT_CNTR_PacketSetTimeout>
1004c1ba:	9f07      	ldr	r7, [sp, #28]
1004c1bc:	2e00      	cmp	r6, #0
1004c1be:	d002      	beq.n	1004c1c6 <LL_eadv_Blue_Rx+0x3e>
1004c1c0:	4620      	mov	r0, r4
1004c1c2:	f7f6 fa87 	bl	100426d4 <BLEPLAT_CNTR_PacketSetTimer2Active>
1004c1c6:	4620      	mov	r0, r4
1004c1c8:	f7f6 fa4e 	bl	10042668 <BLEPLAT_CNTR_PacketSetNextTxMode>
1004c1cc:	4620      	mov	r0, r4
1004c1ce:	f7f6 f9bc 	bl	1004254a <BLEPLAT_CNTR_PacketClrIncChan>
1004c1d2:	4620      	mov	r0, r4
1004c1d4:	f7f6 f9fc 	bl	100425d0 <BLEPLAT_CNTR_PacketSetIntDone>
1004c1d8:	4620      	mov	r0, r4
1004c1da:	f7f6 fa94 	bl	10042706 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1004c1de:	4620      	mov	r0, r4
1004c1e0:	f7f6 fa02 	bl	100425e8 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1004c1e4:	4620      	mov	r0, r4
1004c1e6:	f7f6 fa59 	bl	1004269c <BLEPLAT_CNTR_PacketSetRxReady>
1004c1ea:	2f81      	cmp	r7, #129	@ 0x81
1004c1ec:	d107      	bne.n	1004c1fe <LL_eadv_Blue_Rx+0x76>
1004c1ee:	4620      	mov	r0, r4
1004c1f0:	4629      	mov	r1, r5
1004c1f2:	f7f6 fa2e 	bl	10042652 <BLEPLAT_CNTR_PacketSetNextSlot>
1004c1f6:	4620      	mov	r0, r4
1004c1f8:	f7f6 f9b3 	bl	10042562 <BLEPLAT_CNTR_PacketClrPllTrig>
1004c1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c1fe:	4620      	mov	r0, r4
1004c200:	f7f6 fa3f 	bl	10042682 <BLEPLAT_CNTR_PacketSetPllTrig>
1004c204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1004c208 <LL_eadv_BLUE_SM>:
1004c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c20a:	461d      	mov	r5, r3
1004c20c:	4616      	mov	r6, r2
1004c20e:	460f      	mov	r7, r1
1004c210:	4604      	mov	r4, r0
1004c212:	f7f6 fabf 	bl	10042794 <BLEPLAT_CNTR_SmInitTo0>
1004c216:	4911      	ldr	r1, [pc, #68]	@ (1004c25c <__arm_cp.10_0>)
1004c218:	4620      	mov	r0, r4
1004c21a:	f7f6 fad9 	bl	100427d0 <BLEPLAT_CNTR_SmSetAccessAddr>
1004c21e:	4910      	ldr	r1, [pc, #64]	@ (1004c260 <__arm_cp.10_1>)
1004c220:	4620      	mov	r0, r4
1004c222:	f7f6 fae7 	bl	100427f4 <BLEPLAT_CNTR_SmSetCrcInit>
1004c226:	4620      	mov	r0, r4
1004c228:	4639      	mov	r1, r7
1004c22a:	f7f6 fba0 	bl	1004296e <BLEPLAT_CNTR_SmSetTxPwr>
1004c22e:	4620      	mov	r0, r4
1004c230:	4631      	mov	r1, r6
1004c232:	f7f6 fb75 	bl	10042920 <BLEPLAT_CNTR_SmSetTxPacketPtr>
1004c236:	4620      	mov	r0, r4
1004c238:	4629      	mov	r1, r5
1004c23a:	f7f6 fb3b 	bl	100428b4 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1004c23e:	9806      	ldr	r0, [sp, #24]
1004c240:	2881      	cmp	r0, #129	@ 0x81
1004c242:	d103      	bne.n	1004c24c <LL_eadv_BLUE_SM+0x44>
1004c244:	4620      	mov	r0, r4
1004c246:	f7f6 fb5c 	bl	10042902 <BLEPLAT_CNTR_SmSetTxMode>
1004c24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c24c:	4620      	mov	r0, r4
1004c24e:	f7f6 fb22 	bl	10042896 <BLEPLAT_CNTR_SmSetRxMode>
1004c252:	2101      	movs	r1, #1
1004c254:	4620      	mov	r0, r4
1004c256:	f7f6 faf4 	bl	10042842 <BLEPLAT_CNTR_SmSetHopIncr>
1004c25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004c25c <__arm_cp.10_0>:
1004c25c:	8e89bed6 	.word	0x8e89bed6

1004c260 <__arm_cp.10_1>:
1004c260:	00555555 	.word	0x00555555

1004c264 <llc_get_advertising_set_index>:
1004c264:	b570      	push	{r4, r5, r6, lr}
1004c266:	4604      	mov	r4, r0
1004c268:	f001 f96c 	bl	1004d544 <llc_get_linkms_cntxt_p>
1004c26c:	214d      	movs	r1, #77	@ 0x4d
1004c26e:	5c41      	ldrb	r1, [r0, r1]
1004c270:	4d09      	ldr	r5, [pc, #36]	@ (1004c298 <__arm_cp.12_0>)
1004c272:	2200      	movs	r2, #0
1004c274:	23be      	movs	r3, #190	@ 0xbe
1004c276:	4291      	cmp	r1, r2
1004c278:	d00b      	beq.n	1004c292 <llc_get_advertising_set_index+0x2e>
1004c27a:	6806      	ldr	r6, [r0, #0]
1004c27c:	5af6      	ldrh	r6, [r6, r3]
1004c27e:	42a6      	cmp	r6, r4
1004c280:	4616      	mov	r6, r2
1004c282:	d000      	beq.n	1004c286 <llc_get_advertising_set_index+0x22>
1004c284:	462e      	mov	r6, r5
1004c286:	2501      	movs	r5, #1
1004c288:	022d      	lsls	r5, r5, #8
1004c28a:	195b      	adds	r3, r3, r5
1004c28c:	1c52      	adds	r2, r2, #1
1004c28e:	4635      	mov	r5, r6
1004c290:	e7f1      	b.n	1004c276 <llc_get_advertising_set_index+0x12>
1004c292:	b2a8      	uxth	r0, r5
1004c294:	bd70      	pop	{r4, r5, r6, pc}
1004c296:	46c0      	nop			@ (mov r8, r8)

1004c298 <__arm_cp.12_0>:
1004c298:	0000ffff 	.word	0x0000ffff

1004c29c <llc_eadv_generate_new_rpa_for_one_adv_set>:
1004c29c:	b5b0      	push	{r4, r5, r7, lr}
1004c29e:	4604      	mov	r4, r0
1004c2a0:	20d6      	movs	r0, #214	@ 0xd6
1004c2a2:	5c20      	ldrb	r0, [r4, r0]
1004c2a4:	0780      	lsls	r0, r0, #30
1004c2a6:	d401      	bmi.n	1004c2ac <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1004c2a8:	2000      	movs	r0, #0
1004c2aa:	bdb0      	pop	{r4, r5, r7, pc}
1004c2ac:	4625      	mov	r5, r4
1004c2ae:	3584      	adds	r5, #132	@ 0x84
1004c2b0:	4628      	mov	r0, r5
1004c2b2:	f7ff fecb 	bl	1004c04c <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1004c2b6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1004c2b8:	4628      	mov	r0, r5
1004c2ba:	f7ff fec1 	bl	1004c040 <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1004c2be:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1004c2c0:	3008      	adds	r0, #8
1004c2c2:	2100      	movs	r1, #0
1004c2c4:	f7ff feba 	bl	1004c03c <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1004c2c8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1004c2ca:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1004c2cc:	6761      	str	r1, [r4, #116]	@ 0x74
1004c2ce:	67a0      	str	r0, [r4, #120]	@ 0x78
1004c2d0:	2001      	movs	r0, #1
1004c2d2:	bdb0      	pop	{r4, r5, r7, pc}

1004c2d4 <EADV_init>:
1004c2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c2d6:	b085      	sub	sp, #20
1004c2d8:	9204      	str	r2, [sp, #16]
1004c2da:	460e      	mov	r6, r1
1004c2dc:	4605      	mov	r5, r0
1004c2de:	244d      	movs	r4, #77	@ 0x4d
1004c2e0:	f001 f930 	bl	1004d544 <llc_get_linkms_cntxt_p>
1004c2e4:	5505      	strb	r5, [r0, r4]
1004c2e6:	6006      	str	r6, [r0, #0]
1004c2e8:	9003      	str	r0, [sp, #12]
1004c2ea:	304d      	adds	r0, #77	@ 0x4d
1004c2ec:	2101      	movs	r1, #1
1004c2ee:	9002      	str	r0, [sp, #8]
1004c2f0:	7041      	strb	r1, [r0, #1]
1004c2f2:	9101      	str	r1, [sp, #4]
1004c2f4:	04cb      	lsls	r3, r1, #19
1004c2f6:	2600      	movs	r6, #0
1004c2f8:	277c      	movs	r7, #124	@ 0x7c
1004c2fa:	9a04      	ldr	r2, [sp, #16]
1004c2fc:	b2e8      	uxtb	r0, r5
1004c2fe:	4286      	cmp	r6, r0
1004c300:	d226      	bcs.n	1004c350 <EADV_init+0x7c>
1004c302:	9803      	ldr	r0, [sp, #12]
1004c304:	6800      	ldr	r0, [r0, #0]
1004c306:	51c3      	str	r3, [r0, r7]
1004c308:	19c5      	adds	r5, r0, r7
1004c30a:	2054      	movs	r0, #84	@ 0x54
1004c30c:	4911      	ldr	r1, [pc, #68]	@ (1004c354 <__arm_cp.19_0>)
1004c30e:	5229      	strh	r1, [r5, r0]
1004c310:	2452      	movs	r4, #82	@ 0x52
1004c312:	2000      	movs	r0, #0
1004c314:	5328      	strh	r0, [r5, r4]
1004c316:	2442      	movs	r4, #66	@ 0x42
1004c318:	5329      	strh	r1, [r5, r4]
1004c31a:	245e      	movs	r4, #94	@ 0x5e
1004c31c:	5528      	strb	r0, [r5, r4]
1004c31e:	245c      	movs	r4, #92	@ 0x5c
1004c320:	21ff      	movs	r1, #255	@ 0xff
1004c322:	5529      	strb	r1, [r5, r4]
1004c324:	215a      	movs	r1, #90	@ 0x5a
1004c326:	5468      	strb	r0, [r5, r1]
1004c328:	2146      	movs	r1, #70	@ 0x46
1004c32a:	2407      	movs	r4, #7
1004c32c:	526c      	strh	r4, [r5, r1]
1004c32e:	6128      	str	r0, [r5, #16]
1004c330:	6168      	str	r0, [r5, #20]
1004c332:	606b      	str	r3, [r5, #4]
1004c334:	9904      	ldr	r1, [sp, #16]
1004c336:	2900      	cmp	r1, #0
1004c338:	d002      	beq.n	1004c340 <EADV_init+0x6c>
1004c33a:	6550      	str	r0, [r2, #84]	@ 0x54
1004c33c:	3d2c      	subs	r5, #44	@ 0x2c
1004c33e:	602a      	str	r2, [r5, #0]
1004c340:	9801      	ldr	r0, [sp, #4]
1004c342:	0200      	lsls	r0, r0, #8
1004c344:	183f      	adds	r7, r7, r0
1004c346:	325c      	adds	r2, #92	@ 0x5c
1004c348:	9802      	ldr	r0, [sp, #8]
1004c34a:	7805      	ldrb	r5, [r0, #0]
1004c34c:	1c76      	adds	r6, r6, #1
1004c34e:	e7d5      	b.n	1004c2fc <EADV_init+0x28>
1004c350:	b005      	add	sp, #20
1004c352:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004c354 <__arm_cp.19_0>:
1004c354:	0000ffff 	.word	0x0000ffff

1004c358 <LL_LE_Set_Advertising_Parameters>:
1004c358:	b570      	push	{r4, r5, r6, lr}
1004c35a:	4604      	mov	r4, r0
1004c35c:	f001 f8f2 	bl	1004d544 <llc_get_linkms_cntxt_p>
1004c360:	4605      	mov	r5, r0
1004c362:	4e30      	ldr	r6, [pc, #192]	@ (1004c424 <__arm_cp.20_0>)
1004c364:	4630      	mov	r0, r6
1004c366:	f7ff ff7d 	bl	1004c264 <llc_get_advertising_set_index>
1004c36a:	492f      	ldr	r1, [pc, #188]	@ (1004c428 <__arm_cp.20_1>)
1004c36c:	4288      	cmp	r0, r1
1004c36e:	d112      	bne.n	1004c396 <LL_LE_Set_Advertising_Parameters+0x3e>
1004c370:	f000 f860 	bl	1004c434 <LL_Context_ReturnFree>
1004c374:	28ff      	cmp	r0, #255	@ 0xff
1004c376:	d034      	beq.n	1004c3e2 <LL_LE_Set_Advertising_Parameters+0x8a>
1004c378:	0200      	lsls	r0, r0, #8
1004c37a:	6829      	ldr	r1, [r5, #0]
1004c37c:	1808      	adds	r0, r1, r0
1004c37e:	21be      	movs	r1, #190	@ 0xbe
1004c380:	5246      	strh	r6, [r0, r1]
1004c382:	214c      	movs	r1, #76	@ 0x4c
1004c384:	2200      	movs	r2, #0
1004c386:	5442      	strb	r2, [r0, r1]
1004c388:	2138      	movs	r1, #56	@ 0x38
1004c38a:	5442      	strb	r2, [r0, r1]
1004c38c:	63c2      	str	r2, [r0, #60]	@ 0x3c
1004c38e:	6402      	str	r2, [r0, #64]	@ 0x40
1004c390:	6282      	str	r2, [r0, #40]	@ 0x28
1004c392:	62c2      	str	r2, [r0, #44]	@ 0x2c
1004c394:	e008      	b.n	1004c3a8 <LL_LE_Set_Advertising_Parameters+0x50>
1004c396:	0200      	lsls	r0, r0, #8
1004c398:	6829      	ldr	r1, [r5, #0]
1004c39a:	1808      	adds	r0, r1, r0
1004c39c:	21ce      	movs	r1, #206	@ 0xce
1004c39e:	5c41      	ldrb	r1, [r0, r1]
1004c3a0:	2901      	cmp	r1, #1
1004c3a2:	d101      	bne.n	1004c3a8 <LL_LE_Set_Advertising_Parameters+0x50>
1004c3a4:	250c      	movs	r5, #12
1004c3a6:	e03a      	b.n	1004c41e <LL_LE_Set_Advertising_Parameters+0xc6>
1004c3a8:	7961      	ldrb	r1, [r4, #5]
1004c3aa:	22c2      	movs	r2, #194	@ 0xc2
1004c3ac:	5481      	strb	r1, [r0, r2]
1004c3ae:	4606      	mov	r6, r0
1004c3b0:	36c2      	adds	r6, #194	@ 0xc2
1004c3b2:	2500      	movs	r5, #0
1004c3b4:	72f5      	strb	r5, [r6, #11]
1004c3b6:	2101      	movs	r1, #1
1004c3b8:	70f1      	strb	r1, [r6, #3]
1004c3ba:	79a1      	ldrb	r1, [r4, #6]
1004c3bc:	7071      	strb	r1, [r6, #1]
1004c3be:	8821      	ldrh	r1, [r4, #0]
1004c3c0:	0209      	lsls	r1, r1, #8
1004c3c2:	67c1      	str	r1, [r0, #124]	@ 0x7c
1004c3c4:	4601      	mov	r1, r0
1004c3c6:	3184      	adds	r1, #132	@ 0x84
1004c3c8:	7922      	ldrb	r2, [r4, #4]
1004c3ca:	2a04      	cmp	r2, #4
1004c3cc:	d815      	bhi.n	1004c3fa <LL_LE_Set_Advertising_Parameters+0xa2>
1004c3ce:	46c0      	nop			@ (mov r8, r8)
1004c3d0:	447a      	add	r2, pc
1004c3d2:	7912      	ldrb	r2, [r2, #4]
1004c3d4:	0052      	lsls	r2, r2, #1
1004c3d6:	4497      	add	pc, r2
1004c3d8:	0c0a0602 	.word	0x0c0a0602
1004c3dc:	000e      	.short	0x000e
1004c3de:	20f3      	movs	r0, #243	@ 0xf3
1004c3e0:	e00a      	b.n	1004c3f8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004c3e2:	2507      	movs	r5, #7
1004c3e4:	e01b      	b.n	1004c41e <LL_LE_Set_Advertising_Parameters+0xc6>
1004c3e6:	4a11      	ldr	r2, [pc, #68]	@ (1004c42c <__arm_cp.20_2>)
1004c3e8:	67c2      	str	r2, [r0, #124]	@ 0x7c
1004c3ea:	20fd      	movs	r0, #253	@ 0xfd
1004c3ec:	e004      	b.n	1004c3f8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004c3ee:	20f2      	movs	r0, #242	@ 0xf2
1004c3f0:	e002      	b.n	1004c3f8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004c3f2:	20f0      	movs	r0, #240	@ 0xf0
1004c3f4:	e000      	b.n	1004c3f8 <LL_LE_Set_Advertising_Parameters+0xa0>
1004c3f6:	20f5      	movs	r0, #245	@ 0xf5
1004c3f8:	8688      	strh	r0, [r1, #52]	@ 0x34
1004c3fa:	7a20      	ldrb	r0, [r4, #8]
1004c3fc:	79e2      	ldrb	r2, [r4, #7]
1004c3fe:	600d      	str	r5, [r1, #0]
1004c400:	604d      	str	r5, [r1, #4]
1004c402:	7532      	strb	r2, [r6, #20]
1004c404:	7570      	strb	r0, [r6, #21]
1004c406:	7a20      	ldrb	r0, [r4, #8]
1004c408:	7008      	strb	r0, [r1, #0]
1004c40a:	1c48      	adds	r0, r1, #1
1004c40c:	3409      	adds	r4, #9
1004c40e:	2206      	movs	r2, #6
1004c410:	4621      	mov	r1, r4
1004c412:	f7f5 fafd 	bl	10041a10 <BLEPLAT_MemCpy>
1004c416:	4806      	ldr	r0, [pc, #24]	@ (1004c430 <__arm_cp.20_3>)
1004c418:	6800      	ldr	r0, [r0, #0]
1004c41a:	7a40      	ldrb	r0, [r0, #9]
1004c41c:	70b0      	strb	r0, [r6, #2]
1004c41e:	4628      	mov	r0, r5
1004c420:	bd70      	pop	{r4, r5, r6, pc}
1004c422:	46c0      	nop			@ (mov r8, r8)

1004c424 <__arm_cp.20_0>:
1004c424:	0000fffc 	.word	0x0000fffc

1004c428 <__arm_cp.20_1>:
1004c428:	0000ffff 	.word	0x0000ffff

1004c42c <__arm_cp.20_2>:
1004c42c:	000005dc 	.word	0x000005dc

1004c430 <__arm_cp.20_3>:
1004c430:	20000b40 	.word	0x20000b40

1004c434 <LL_Context_ReturnFree>:
1004c434:	b510      	push	{r4, lr}
1004c436:	f001 f885 	bl	1004d544 <llc_get_linkms_cntxt_p>
1004c43a:	214d      	movs	r1, #77	@ 0x4d
1004c43c:	5c42      	ldrb	r2, [r0, r1]
1004c43e:	2100      	movs	r1, #0
1004c440:	23be      	movs	r3, #190	@ 0xbe
1004c442:	428a      	cmp	r2, r1
1004c444:	d008      	beq.n	1004c458 <LL_Context_ReturnFree+0x24>
1004c446:	6804      	ldr	r4, [r0, #0]
1004c448:	5ae4      	ldrh	r4, [r4, r3]
1004c44a:	0b24      	lsrs	r4, r4, #12
1004c44c:	d105      	bne.n	1004c45a <LL_Context_ReturnFree+0x26>
1004c44e:	2401      	movs	r4, #1
1004c450:	0224      	lsls	r4, r4, #8
1004c452:	191b      	adds	r3, r3, r4
1004c454:	1c49      	adds	r1, r1, #1
1004c456:	e7f4      	b.n	1004c442 <LL_Context_ReturnFree+0xe>
1004c458:	21ff      	movs	r1, #255	@ 0xff
1004c45a:	b2c8      	uxtb	r0, r1
1004c45c:	bd10      	pop	{r4, pc}
	...

1004c460 <LL_LE_Set_Advertise_Enable>:
1004c460:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1004c462:	4604      	mov	r4, r0
1004c464:	f000 f816 	bl	1004c494 <LL_LE_Set_Advertising_Parameters_Default>
1004c468:	2300      	movs	r3, #0
1004c46a:	9300      	str	r3, [sp, #0]
1004c46c:	2101      	movs	r1, #1
1004c46e:	4d07      	ldr	r5, [pc, #28]	@ (1004c48c <__arm_cp.22_0>)
1004c470:	4620      	mov	r0, r4
1004c472:	462a      	mov	r2, r5
1004c474:	f000 f82c 	bl	1004c4d0 <LL_Set_Extented_Advertising_Enable>
1004c478:	4604      	mov	r4, r0
1004c47a:	4805      	ldr	r0, [pc, #20]	@ (1004c490 <__arm_cp.22_1>)
1004c47c:	6801      	ldr	r1, [r0, #0]
1004c47e:	3156      	adds	r1, #86	@ 0x56
1004c480:	4628      	mov	r0, r5
1004c482:	f000 f98f 	bl	1004c7a4 <LL_Set_Extented_Advertising_Set_Random_Address>
1004c486:	4620      	mov	r0, r4
1004c488:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1004c48a:	46c0      	nop			@ (mov r8, r8)

1004c48c <__arm_cp.22_0>:
1004c48c:	0000fffc 	.word	0x0000fffc

1004c490 <__arm_cp.22_1>:
1004c490:	20000b40 	.word	0x20000b40

1004c494 <LL_LE_Set_Advertising_Parameters_Default>:
1004c494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004c496:	480c      	ldr	r0, [pc, #48]	@ (1004c4c8 <__arm_cp.23_0>)
1004c498:	f7ff fee4 	bl	1004c264 <llc_get_advertising_set_index>
1004c49c:	490b      	ldr	r1, [pc, #44]	@ (1004c4cc <__arm_cp.23_1>)
1004c49e:	4288      	cmp	r0, r1
1004c4a0:	d110      	bne.n	1004c4c4 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1004c4a2:	466c      	mov	r4, sp
1004c4a4:	2100      	movs	r1, #0
1004c4a6:	7221      	strb	r1, [r4, #8]
1004c4a8:	2001      	movs	r0, #1
1004c4aa:	02c0      	lsls	r0, r0, #11
1004c4ac:	8020      	strh	r0, [r4, #0]
1004c4ae:	2007      	movs	r0, #7
1004c4b0:	0200      	lsls	r0, r0, #8
1004c4b2:	9001      	str	r0, [sp, #4]
1004c4b4:	4620      	mov	r0, r4
1004c4b6:	3009      	adds	r0, #9
1004c4b8:	2206      	movs	r2, #6
1004c4ba:	f7f5 fab9 	bl	10041a30 <BLEPLAT_MemSet>
1004c4be:	4620      	mov	r0, r4
1004c4c0:	f7ff ff4a 	bl	1004c358 <LL_LE_Set_Advertising_Parameters>
1004c4c4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1004c4c6:	46c0      	nop			@ (mov r8, r8)

1004c4c8 <__arm_cp.23_0>:
1004c4c8:	0000fffc 	.word	0x0000fffc

1004c4cc <__arm_cp.23_1>:
1004c4cc:	0000ffff 	.word	0x0000ffff

1004c4d0 <LL_Set_Extented_Advertising_Enable>:
1004c4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c4d2:	b08f      	sub	sp, #60	@ 0x3c
1004c4d4:	930e      	str	r3, [sp, #56]	@ 0x38
1004c4d6:	4617      	mov	r7, r2
1004c4d8:	460d      	mov	r5, r1
1004c4da:	4606      	mov	r6, r0
1004c4dc:	4305      	orrs	r5, r0
1004c4de:	f001 f831 	bl	1004d544 <llc_get_linkms_cntxt_p>
1004c4e2:	4604      	mov	r4, r0
1004c4e4:	2d00      	cmp	r5, #0
1004c4e6:	d007      	beq.n	1004c4f8 <LL_Set_Extented_Advertising_Enable+0x28>
1004c4e8:	4638      	mov	r0, r7
1004c4ea:	f7ff febb 	bl	1004c264 <llc_get_advertising_set_index>
1004c4ee:	49a7      	ldr	r1, [pc, #668]	@ (1004c78c <__arm_cp.24_1>)
1004c4f0:	4288      	cmp	r0, r1
1004c4f2:	d118      	bne.n	1004c526 <LL_Set_Extented_Advertising_Enable+0x56>
1004c4f4:	2042      	movs	r0, #66	@ 0x42
1004c4f6:	e04a      	b.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c4f8:	4625      	mov	r5, r4
1004c4fa:	354d      	adds	r5, #77	@ 0x4d
1004c4fc:	2600      	movs	r6, #0
1004c4fe:	4637      	mov	r7, r6
1004c500:	960e      	str	r6, [sp, #56]	@ 0x38
1004c502:	7828      	ldrb	r0, [r5, #0]
1004c504:	4286      	cmp	r6, r0
1004c506:	d20c      	bcs.n	1004c522 <LL_Set_Extented_Advertising_Enable+0x52>
1004c508:	6820      	ldr	r0, [r4, #0]
1004c50a:	19c0      	adds	r0, r0, r7
1004c50c:	21ce      	movs	r1, #206	@ 0xce
1004c50e:	5c41      	ldrb	r1, [r0, r1]
1004c510:	2901      	cmp	r1, #1
1004c512:	d101      	bne.n	1004c518 <LL_Set_Extented_Advertising_Enable+0x48>
1004c514:	f000 f992 	bl	1004c83c <EADV_stop>
1004c518:	2001      	movs	r0, #1
1004c51a:	0200      	lsls	r0, r0, #8
1004c51c:	183f      	adds	r7, r7, r0
1004c51e:	1c76      	adds	r6, r6, #1
1004c520:	e7ef      	b.n	1004c502 <LL_Set_Extented_Advertising_Enable+0x32>
1004c522:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c524:	e033      	b.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c526:	0201      	lsls	r1, r0, #8
1004c528:	6822      	ldr	r2, [r4, #0]
1004c52a:	1854      	adds	r4, r2, r1
1004c52c:	21ce      	movs	r1, #206	@ 0xce
1004c52e:	5c61      	ldrb	r1, [r4, r1]
1004c530:	2e01      	cmp	r6, #1
1004c532:	d124      	bne.n	1004c57e <LL_Set_Extented_Advertising_Enable+0xae>
1004c534:	0200      	lsls	r0, r0, #8
1004c536:	1815      	adds	r5, r2, r0
1004c538:	20d6      	movs	r0, #214	@ 0xd6
1004c53a:	5c28      	ldrb	r0, [r5, r0]
1004c53c:	2701      	movs	r7, #1
1004c53e:	4038      	ands	r0, r7
1004c540:	2900      	cmp	r1, #0
1004c542:	d026      	beq.n	1004c592 <LL_Set_Extented_Advertising_Enable+0xc2>
1004c544:	2800      	cmp	r0, #0
1004c546:	d00a      	beq.n	1004c55e <LL_Set_Extented_Advertising_Enable+0x8e>
1004c548:	208c      	movs	r0, #140	@ 0x8c
1004c54a:	5828      	ldr	r0, [r5, r0]
1004c54c:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1004c54e:	462a      	mov	r2, r5
1004c550:	328c      	adds	r2, #140	@ 0x8c
1004c552:	6852      	ldr	r2, [r2, #4]
1004c554:	c105      	stmia	r1!, {r0, r2}
1004c556:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1004c558:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1004c55a:	6769      	str	r1, [r5, #116]	@ 0x74
1004c55c:	67a8      	str	r0, [r5, #120]	@ 0x78
1004c55e:	2094      	movs	r0, #148	@ 0x94
1004c560:	5828      	ldr	r0, [r5, r0]
1004c562:	2600      	movs	r6, #0
1004c564:	2800      	cmp	r0, #0
1004c566:	d008      	beq.n	1004c57a <LL_Set_Extented_Advertising_Enable+0xaa>
1004c568:	3594      	adds	r5, #148	@ 0x94
1004c56a:	207d      	movs	r0, #125	@ 0x7d
1004c56c:	0144      	lsls	r4, r0, #5
1004c56e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c570:	4344      	muls	r4, r0
1004c572:	f7f5 fad0 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004c576:	1820      	adds	r0, r4, r0
1004c578:	6028      	str	r0, [r5, #0]
1004c57a:	4630      	mov	r0, r6
1004c57c:	e007      	b.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c57e:	2000      	movs	r0, #0
1004c580:	2901      	cmp	r1, #1
1004c582:	d104      	bne.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c584:	4605      	mov	r5, r0
1004c586:	4620      	mov	r0, r4
1004c588:	f000 f958 	bl	1004c83c <EADV_stop>
1004c58c:	4628      	mov	r0, r5
1004c58e:	b00f      	add	sp, #60	@ 0x3c
1004c590:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004c592:	2800      	cmp	r0, #0
1004c594:	d007      	beq.n	1004c5a6 <LL_Set_Extented_Advertising_Enable+0xd6>
1004c596:	208c      	movs	r0, #140	@ 0x8c
1004c598:	5828      	ldr	r0, [r5, r0]
1004c59a:	2800      	cmp	r0, #0
1004c59c:	d103      	bne.n	1004c5a6 <LL_Set_Extented_Advertising_Enable+0xd6>
1004c59e:	2090      	movs	r0, #144	@ 0x90
1004c5a0:	5828      	ldr	r0, [r5, r0]
1004c5a2:	2800      	cmp	r0, #0
1004c5a4:	d006      	beq.n	1004c5b4 <LL_Set_Extented_Advertising_Enable+0xe4>
1004c5a6:	20b8      	movs	r0, #184	@ 0xb8
1004c5a8:	5a28      	ldrh	r0, [r5, r0]
1004c5aa:	07c1      	lsls	r1, r0, #31
1004c5ac:	d004      	beq.n	1004c5b8 <LL_Set_Extented_Advertising_Enable+0xe8>
1004c5ae:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1004c5b0:	29f5      	cmp	r1, #245	@ 0xf5
1004c5b2:	d901      	bls.n	1004c5b8 <LL_Set_Extented_Advertising_Enable+0xe8>
1004c5b4:	2012      	movs	r0, #18
1004c5b6:	e7ea      	b.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c5b8:	2312      	movs	r3, #18
1004c5ba:	4601      	mov	r1, r0
1004c5bc:	461a      	mov	r2, r3
1004c5be:	4019      	ands	r1, r3
1004c5c0:	2902      	cmp	r1, #2
1004c5c2:	d103      	bne.n	1004c5cc <LL_Set_Extented_Advertising_Enable+0xfc>
1004c5c4:	2142      	movs	r1, #66	@ 0x42
1004c5c6:	5a69      	ldrh	r1, [r5, r1]
1004c5c8:	2900      	cmp	r1, #0
1004c5ca:	d040      	beq.n	1004c64e <LL_Set_Extented_Advertising_Enable+0x17e>
1004c5cc:	0700      	lsls	r0, r0, #28
1004c5ce:	d50f      	bpl.n	1004c5f0 <LL_Set_Extented_Advertising_Enable+0x120>
1004c5d0:	486d      	ldr	r0, [pc, #436]	@ (1004c788 <__arm_cp.24_0>)
1004c5d2:	21be      	movs	r1, #190	@ 0xbe
1004c5d4:	5a69      	ldrh	r1, [r5, r1]
1004c5d6:	4281      	cmp	r1, r0
1004c5d8:	d001      	beq.n	1004c5de <LL_Set_Extented_Advertising_Enable+0x10e>
1004c5da:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c5dc:	e000      	b.n	1004c5e0 <LL_Set_Extented_Advertising_Enable+0x110>
1004c5de:	2080      	movs	r0, #128	@ 0x80
1004c5e0:	2880      	cmp	r0, #128	@ 0x80
1004c5e2:	d901      	bls.n	1004c5e8 <LL_Set_Extented_Advertising_Enable+0x118>
1004c5e4:	4610      	mov	r0, r2
1004c5e6:	e7d2      	b.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c5e8:	900e      	str	r0, [sp, #56]	@ 0x38
1004c5ea:	2800      	cmp	r0, #0
1004c5ec:	4610      	mov	r0, r2
1004c5ee:	d0ce      	beq.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c5f0:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004c5f2:	21ba      	movs	r1, #186	@ 0xba
1004c5f4:	5268      	strh	r0, [r5, r1]
1004c5f6:	267d      	movs	r6, #125	@ 0x7d
1004c5f8:	0171      	lsls	r1, r6, #5
1004c5fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c5fc:	4351      	muls	r1, r2
1004c5fe:	2294      	movs	r2, #148	@ 0x94
1004c600:	50a9      	str	r1, [r5, r2]
1004c602:	2800      	cmp	r0, #0
1004c604:	d001      	beq.n	1004c60a <LL_Set_Extented_Advertising_Enable+0x13a>
1004c606:	21cf      	movs	r1, #207	@ 0xcf
1004c608:	546f      	strb	r7, [r5, r1]
1004c60a:	21bc      	movs	r1, #188	@ 0xbc
1004c60c:	5268      	strh	r0, [r5, r1]
1004c60e:	4620      	mov	r0, r4
1004c610:	f000 fd34 	bl	1004d07c <EADV_start_request_radio_tasks_ucfg_weak>
1004c614:	2800      	cmp	r0, #0
1004c616:	d1ba      	bne.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c618:	4629      	mov	r1, r5
1004c61a:	31d6      	adds	r1, #214	@ 0xd6
1004c61c:	4628      	mov	r0, r5
1004c61e:	3064      	adds	r0, #100	@ 0x64
1004c620:	462a      	mov	r2, r5
1004c622:	3254      	adds	r2, #84	@ 0x54
1004c624:	676a      	str	r2, [r5, #116]	@ 0x74
1004c626:	67a8      	str	r0, [r5, #120]	@ 0x78
1004c628:	462b      	mov	r3, r5
1004c62a:	3378      	adds	r3, #120	@ 0x78
1004c62c:	7809      	ldrb	r1, [r1, #0]
1004c62e:	07c9      	lsls	r1, r1, #31
1004c630:	930d      	str	r3, [sp, #52]	@ 0x34
1004c632:	d10e      	bne.n	1004c652 <LL_Set_Extented_Advertising_Enable+0x182>
1004c634:	2100      	movs	r1, #0
1004c636:	6001      	str	r1, [r0, #0]
1004c638:	66a9      	str	r1, [r5, #104]	@ 0x68
1004c63a:	4855      	ldr	r0, [pc, #340]	@ (1004c790 <__arm_cp.24_2>)
1004c63c:	6801      	ldr	r1, [r0, #0]
1004c63e:	4620      	mov	r0, r4
1004c640:	3065      	adds	r0, #101	@ 0x65
1004c642:	2206      	movs	r2, #6
1004c644:	f7f5 f9e4 	bl	10041a10 <BLEPLAT_MemCpy>
1004c648:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c64a:	6800      	ldr	r0, [r0, #0]
1004c64c:	e008      	b.n	1004c660 <LL_Set_Extented_Advertising_Enable+0x190>
1004c64e:	200c      	movs	r0, #12
1004c650:	e79d      	b.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c652:	218c      	movs	r1, #140	@ 0x8c
1004c654:	5869      	ldr	r1, [r5, r1]
1004c656:	462a      	mov	r2, r5
1004c658:	328c      	adds	r2, #140	@ 0x8c
1004c65a:	6852      	ldr	r2, [r2, #4]
1004c65c:	c006      	stmia	r0!, {r1, r2}
1004c65e:	3808      	subs	r0, #8
1004c660:	4629      	mov	r1, r5
1004c662:	3194      	adds	r1, #148	@ 0x94
1004c664:	910e      	str	r1, [sp, #56]	@ 0x38
1004c666:	2184      	movs	r1, #132	@ 0x84
1004c668:	5869      	ldr	r1, [r5, r1]
1004c66a:	462a      	mov	r2, r5
1004c66c:	3284      	adds	r2, #132	@ 0x84
1004c66e:	6852      	ldr	r2, [r2, #4]
1004c670:	6081      	str	r1, [r0, #8]
1004c672:	60c2      	str	r2, [r0, #12]
1004c674:	4620      	mov	r0, r4
1004c676:	f7ff fe11 	bl	1004c29c <llc_eadv_generate_new_rpa_for_one_adv_set>
1004c67a:	2800      	cmp	r0, #0
1004c67c:	960c      	str	r6, [sp, #48]	@ 0x30
1004c67e:	d002      	beq.n	1004c686 <LL_Set_Extented_Advertising_Enable+0x1b6>
1004c680:	f7ff fce2 	bl	1004c048 <llc_priv_start_privacy_timer_ucfg_weak>
1004c684:	e006      	b.n	1004c694 <LL_Set_Extented_Advertising_Enable+0x1c4>
1004c686:	4628      	mov	r0, r5
1004c688:	3074      	adds	r0, #116	@ 0x74
1004c68a:	6801      	ldr	r1, [r0, #0]
1004c68c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1004c68e:	681a      	ldr	r2, [r3, #0]
1004c690:	6002      	str	r2, [r0, #0]
1004c692:	6019      	str	r1, [r3, #0]
1004c694:	990e      	ldr	r1, [sp, #56]	@ 0x38
1004c696:	4626      	mov	r6, r4
1004c698:	36ce      	adds	r6, #206	@ 0xce
1004c69a:	4628      	mov	r0, r5
1004c69c:	30b8      	adds	r0, #184	@ 0xb8
1004c69e:	900d      	str	r0, [sp, #52]	@ 0x34
1004c6a0:	6808      	ldr	r0, [r1, #0]
1004c6a2:	2800      	cmp	r0, #0
1004c6a4:	d005      	beq.n	1004c6b2 <LL_Set_Extented_Advertising_Enable+0x1e2>
1004c6a6:	f7f5 fa36 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004c6aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c6ac:	6811      	ldr	r1, [r2, #0]
1004c6ae:	1808      	adds	r0, r1, r0
1004c6b0:	6010      	str	r0, [r2, #0]
1004c6b2:	7037      	strb	r7, [r6, #0]
1004c6b4:	20c4      	movs	r0, #196	@ 0xc4
1004c6b6:	5c29      	ldrb	r1, [r5, r0]
1004c6b8:	27d0      	movs	r7, #208	@ 0xd0
1004c6ba:	5de8      	ldrb	r0, [r5, r7]
1004c6bc:	2281      	movs	r2, #129	@ 0x81
1004c6be:	920e      	str	r2, [sp, #56]	@ 0x38
1004c6c0:	9200      	str	r2, [sp, #0]
1004c6c2:	462e      	mov	r6, r5
1004c6c4:	3614      	adds	r6, #20
1004c6c6:	4622      	mov	r2, r4
1004c6c8:	4633      	mov	r3, r6
1004c6ca:	f7ff fd9d 	bl	1004c208 <LL_eadv_BLUE_SM>
1004c6ce:	5de8      	ldrb	r0, [r5, r7]
1004c6d0:	2125      	movs	r1, #37	@ 0x25
1004c6d2:	f7f6 f8a1 	bl	10042818 <BLEPLAT_CNTR_SmSetDataLength>
1004c6d6:	462f      	mov	r7, r5
1004c6d8:	37d0      	adds	r7, #208	@ 0xd0
1004c6da:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c6dc:	8800      	ldrh	r0, [r0, #0]
1004c6de:	06c0      	lsls	r0, r0, #27
1004c6e0:	d403      	bmi.n	1004c6ea <LL_Set_Extented_Advertising_Enable+0x21a>
1004c6e2:	4620      	mov	r0, r4
1004c6e4:	f000 fcee 	bl	1004d0c4 <LL_eadv_start_extended_ucfg_weak>
1004c6e8:	e042      	b.n	1004c770 <LL_Set_Extented_Advertising_Enable+0x2a0>
1004c6ea:	f7f5 fa14 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004c6ee:	219c      	movs	r1, #156	@ 0x9c
1004c6f0:	910b      	str	r1, [sp, #44]	@ 0x2c
1004c6f2:	5068      	str	r0, [r5, r1]
1004c6f4:	f000 ff16 	bl	1004d524 <LL_get_tx_common_buffer_p>
1004c6f8:	9009      	str	r0, [sp, #36]	@ 0x24
1004c6fa:	f000 ff1b 	bl	1004d534 <LL_get_rx_common_buffer_p>
1004c6fe:	900a      	str	r0, [sp, #40]	@ 0x28
1004c700:	7838      	ldrb	r0, [r7, #0]
1004c702:	9008      	str	r0, [sp, #32]
1004c704:	2094      	movs	r0, #148	@ 0x94
1004c706:	2100      	movs	r1, #0
1004c708:	910d      	str	r1, [sp, #52]	@ 0x34
1004c70a:	460a      	mov	r2, r1
1004c70c:	f7f5 fe1a 	bl	10042344 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1004c710:	4603      	mov	r3, r0
1004c712:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c714:	9000      	str	r0, [sp, #0]
1004c716:	4620      	mov	r0, r4
1004c718:	9908      	ldr	r1, [sp, #32]
1004c71a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004c71c:	f7ff fcf9 	bl	1004c112 <LL_eadv_Blue_Tx>
1004c720:	7838      	ldrb	r0, [r7, #0]
1004c722:	9009      	str	r0, [sp, #36]	@ 0x24
1004c724:	2096      	movs	r0, #150	@ 0x96
1004c726:	2101      	movs	r1, #1
1004c728:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004c72a:	f7f5 fe0b 	bl	10042344 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1004c72e:	4603      	mov	r3, r0
1004c730:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004c732:	9000      	str	r0, [sp, #0]
1004c734:	980e      	ldr	r0, [sp, #56]	@ 0x38
1004c736:	9001      	str	r0, [sp, #4]
1004c738:	4630      	mov	r0, r6
1004c73a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004c73c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1004c73e:	f7ff fd23 	bl	1004c188 <LL_eadv_Blue_Rx>
1004c742:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1004c744:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004c746:	582a      	ldr	r2, [r5, r0]
1004c748:	7838      	ldrb	r0, [r7, #0]
1004c74a:	4b12      	ldr	r3, [pc, #72]	@ (1004c794 <__arm_cp.24_3>)
1004c74c:	9307      	str	r3, [sp, #28]
1004c74e:	4b12      	ldr	r3, [pc, #72]	@ (1004c798 <__arm_cp.24_4>)
1004c750:	9306      	str	r3, [sp, #24]
1004c752:	4b12      	ldr	r3, [pc, #72]	@ (1004c79c <__arm_cp.24_5>)
1004c754:	9305      	str	r3, [sp, #20]
1004c756:	4b12      	ldr	r3, [pc, #72]	@ (1004c7a0 <__arm_cp.24_6>)
1004c758:	9304      	str	r3, [sp, #16]
1004c75a:	2314      	movs	r3, #20
1004c75c:	9303      	str	r3, [sp, #12]
1004c75e:	231f      	movs	r3, #31
1004c760:	ae00      	add	r6, sp, #0
1004c762:	c60e      	stmia	r6!, {r1, r2, r3}
1004c764:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004c766:	00cb      	lsls	r3, r1, #3
1004c768:	4621      	mov	r1, r4
1004c76a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004c76c:	f000 ff30 	bl	1004d5d0 <LL_sched_enable_taskslot>
1004c770:	249c      	movs	r4, #156	@ 0x9c
1004c772:	5929      	ldr	r1, [r5, r4]
1004c774:	7838      	ldrb	r0, [r7, #0]
1004c776:	f000 ff11 	bl	1004d59c <LL_sched_set_anchor>
1004c77a:	5928      	ldr	r0, [r5, r4]
1004c77c:	7839      	ldrb	r1, [r7, #0]
1004c77e:	f001 f97f 	bl	1004da80 <LL_sched_check_and_call_sched>
1004c782:	2000      	movs	r0, #0
1004c784:	e703      	b.n	1004c58e <LL_Set_Extented_Advertising_Enable+0xbe>
1004c786:	46c0      	nop			@ (mov r8, r8)

1004c788 <__arm_cp.24_0>:
1004c788:	0000fffc 	.word	0x0000fffc

1004c78c <__arm_cp.24_1>:
1004c78c:	0000ffff 	.word	0x0000ffff

1004c790 <__arm_cp.24_2>:
1004c790:	20000b30 	.word	0x20000b30

1004c794 <__arm_cp.24_3>:
1004c794:	1004c9e9 	.word	0x1004c9e9

1004c798 <__arm_cp.24_4>:
1004c798:	1004cde1 	.word	0x1004cde1

1004c79c <__arm_cp.24_5>:
1004c79c:	1004ccbd 	.word	0x1004ccbd

1004c7a0 <__arm_cp.24_6>:
1004c7a0:	1004c9f1 	.word	0x1004c9f1

1004c7a4 <LL_Set_Extented_Advertising_Set_Random_Address>:
1004c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c7a6:	460c      	mov	r4, r1
1004c7a8:	4606      	mov	r6, r0
1004c7aa:	f000 fecb 	bl	1004d544 <llc_get_linkms_cntxt_p>
1004c7ae:	4607      	mov	r7, r0
1004c7b0:	4630      	mov	r0, r6
1004c7b2:	f7ff fd57 	bl	1004c264 <llc_get_advertising_set_index>
1004c7b6:	4605      	mov	r5, r0
1004c7b8:	4816      	ldr	r0, [pc, #88]	@ (1004c814 <__arm_cp.25_0>)
1004c7ba:	4285      	cmp	r5, r0
1004c7bc:	d027      	beq.n	1004c80e <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1004c7be:	0228      	lsls	r0, r5, #8
1004c7c0:	683f      	ldr	r7, [r7, #0]
1004c7c2:	1838      	adds	r0, r7, r0
1004c7c4:	21be      	movs	r1, #190	@ 0xbe
1004c7c6:	5246      	strh	r6, [r0, r1]
1004c7c8:	21b8      	movs	r1, #184	@ 0xb8
1004c7ca:	5c40      	ldrb	r0, [r0, r1]
1004c7cc:	07c0      	lsls	r0, r0, #31
1004c7ce:	d007      	beq.n	1004c7e0 <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1004c7d0:	0228      	lsls	r0, r5, #8
1004c7d2:	1838      	adds	r0, r7, r0
1004c7d4:	21ce      	movs	r1, #206	@ 0xce
1004c7d6:	5c40      	ldrb	r0, [r0, r1]
1004c7d8:	2801      	cmp	r0, #1
1004c7da:	d101      	bne.n	1004c7e0 <LL_Set_Extented_Advertising_Set_Random_Address+0x3c>
1004c7dc:	250c      	movs	r5, #12
1004c7de:	e017      	b.n	1004c810 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1004c7e0:	480d      	ldr	r0, [pc, #52]	@ (1004c818 <__arm_cp.25_1>)
1004c7e2:	6800      	ldr	r0, [r0, #0]
1004c7e4:	3056      	adds	r0, #86	@ 0x56
1004c7e6:	2606      	movs	r6, #6
1004c7e8:	4621      	mov	r1, r4
1004c7ea:	4632      	mov	r2, r6
1004c7ec:	f7f5 f910 	bl	10041a10 <BLEPLAT_MemCpy>
1004c7f0:	0228      	lsls	r0, r5, #8
1004c7f2:	1838      	adds	r0, r7, r0
1004c7f4:	218c      	movs	r1, #140	@ 0x8c
1004c7f6:	2201      	movs	r2, #1
1004c7f8:	5042      	str	r2, [r0, r1]
1004c7fa:	4601      	mov	r1, r0
1004c7fc:	318c      	adds	r1, #140	@ 0x8c
1004c7fe:	2500      	movs	r5, #0
1004c800:	604d      	str	r5, [r1, #4]
1004c802:	308d      	adds	r0, #141	@ 0x8d
1004c804:	4621      	mov	r1, r4
1004c806:	4632      	mov	r2, r6
1004c808:	f7f5 f902 	bl	10041a10 <BLEPLAT_MemCpy>
1004c80c:	e000      	b.n	1004c810 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1004c80e:	2512      	movs	r5, #18
1004c810:	4628      	mov	r0, r5
1004c812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004c814 <__arm_cp.25_0>:
1004c814:	0000ffff 	.word	0x0000ffff

1004c818 <__arm_cp.25_1>:
1004c818:	20000b40 	.word	0x20000b40

1004c81c <LL_eadv_update_did>:
1004c81c:	b510      	push	{r4, lr}
1004c81e:	4604      	mov	r4, r0
1004c820:	2000      	movs	r0, #0
1004c822:	f001 fe3c 	bl	1004e49e <Hal_Get_Random_Number>
1004c826:	4904      	ldr	r1, [pc, #16]	@ (1004c838 <__arm_cp.27_0>)
1004c828:	4001      	ands	r1, r0
1004c82a:	8820      	ldrh	r0, [r4, #0]
1004c82c:	1a40      	subs	r0, r0, r1
1004c82e:	4242      	negs	r2, r0
1004c830:	4142      	adcs	r2, r0
1004c832:	404a      	eors	r2, r1
1004c834:	8022      	strh	r2, [r4, #0]
1004c836:	bd10      	pop	{r4, pc}

1004c838 <__arm_cp.27_0>:
1004c838:	00000fff 	.word	0x00000fff

1004c83c <EADV_stop>:
1004c83c:	b5b0      	push	{r4, r5, r7, lr}
1004c83e:	4604      	mov	r4, r0
1004c840:	f3ef 8010 	mrs	r0, PRIMASK
1004c844:	b672      	cpsid	i
1004c846:	4625      	mov	r5, r4
1004c848:	35ce      	adds	r5, #206	@ 0xce
1004c84a:	78a8      	ldrb	r0, [r5, #2]
1004c84c:	f000 feae 	bl	1004d5ac <LL_sched_set_cancel_request>
1004c850:	20d1      	movs	r0, #209	@ 0xd1
1004c852:	5c20      	ldrb	r0, [r4, r0]
1004c854:	f000 feaa 	bl	1004d5ac <LL_sched_set_cancel_request>
1004c858:	b662      	cpsie	i
1004c85a:	78a8      	ldrb	r0, [r5, #2]
1004c85c:	f001 f920 	bl	1004daa0 <LL_sched_check_and_wait_sched>
1004c860:	20ce      	movs	r0, #206	@ 0xce
1004c862:	2100      	movs	r1, #0
1004c864:	5221      	strh	r1, [r4, r0]
1004c866:	7aa8      	ldrb	r0, [r5, #10]
1004c868:	28ff      	cmp	r0, #255	@ 0xff
1004c86a:	d001      	beq.n	1004c870 <EADV_stop+0x34>
1004c86c:	f7ff fbd2 	bl	1004c014 <llc_conn_release_conn_idx>
1004c870:	20ff      	movs	r0, #255	@ 0xff
1004c872:	72a8      	strb	r0, [r5, #10]
1004c874:	7a28      	ldrb	r0, [r5, #8]
1004c876:	0780      	lsls	r0, r0, #30
1004c878:	d501      	bpl.n	1004c87e <EADV_stop+0x42>
1004c87a:	f7ff fbe6 	bl	1004c04a <llc_priv_stop_privacy_timer_ucfg_weak>
1004c87e:	bdb0      	pop	{r4, r5, r7, pc}

1004c880 <LL_Set_Advertising_Set_Random_Address>:
1004c880:	b510      	push	{r4, lr}
1004c882:	4604      	mov	r4, r0
1004c884:	f7ff f9bd 	bl	1004bc02 <scan_csr_ucfg_weak>
1004c888:	2801      	cmp	r0, #1
1004c88a:	d105      	bne.n	1004c898 <LL_Set_Advertising_Set_Random_Address+0x18>
1004c88c:	f7ff fbe0 	bl	1004c050 <llc_scan_get_cntxt_p>
1004c890:	21eb      	movs	r1, #235	@ 0xeb
1004c892:	5c40      	ldrb	r0, [r0, r1]
1004c894:	07c0      	lsls	r0, r0, #31
1004c896:	d106      	bne.n	1004c8a6 <LL_Set_Advertising_Set_Random_Address+0x26>
1004c898:	f7ff fdfc 	bl	1004c494 <LL_LE_Set_Advertising_Parameters_Default>
1004c89c:	4803      	ldr	r0, [pc, #12]	@ (1004c8ac <__arm_cp.29_0>)
1004c89e:	4621      	mov	r1, r4
1004c8a0:	f7ff ff80 	bl	1004c7a4 <LL_Set_Extented_Advertising_Set_Random_Address>
1004c8a4:	bd10      	pop	{r4, pc}
1004c8a6:	200c      	movs	r0, #12
1004c8a8:	bd10      	pop	{r4, pc}
1004c8aa:	46c0      	nop			@ (mov r8, r8)

1004c8ac <__arm_cp.29_0>:
1004c8ac:	0000fffc 	.word	0x0000fffc

1004c8b0 <ll_set_advertising_data_ptr>:
1004c8b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004c8b2:	9301      	str	r3, [sp, #4]
1004c8b4:	4614      	mov	r4, r2
1004c8b6:	9102      	str	r1, [sp, #8]
1004c8b8:	4605      	mov	r5, r0
1004c8ba:	f000 fe43 	bl	1004d544 <llc_get_linkms_cntxt_p>
1004c8be:	4607      	mov	r7, r0
1004c8c0:	4834      	ldr	r0, [pc, #208]	@ (1004c994 <__arm_cp.33_0>)
1004c8c2:	4285      	cmp	r5, r0
1004c8c4:	d101      	bne.n	1004c8ca <ll_set_advertising_data_ptr+0x1a>
1004c8c6:	201f      	movs	r0, #31
1004c8c8:	e007      	b.n	1004c8da <ll_set_advertising_data_ptr+0x2a>
1004c8ca:	2001      	movs	r0, #1
1004c8cc:	2102      	movs	r1, #2
1004c8ce:	f7ff f975 	bl	1004bbbc <hci_get_set_legacy_ext_flag>
1004c8d2:	4606      	mov	r6, r0
1004c8d4:	2800      	cmp	r0, #0
1004c8d6:	d111      	bne.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c8d8:	482f      	ldr	r0, [pc, #188]	@ (1004c998 <__arm_cp.33_1>)
1004c8da:	2612      	movs	r6, #18
1004c8dc:	42a0      	cmp	r0, r4
1004c8de:	d30d      	bcc.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c8e0:	9600      	str	r6, [sp, #0]
1004c8e2:	4628      	mov	r0, r5
1004c8e4:	f7ff fcbe 	bl	1004c264 <llc_get_advertising_set_index>
1004c8e8:	0200      	lsls	r0, r0, #8
1004c8ea:	6839      	ldr	r1, [r7, #0]
1004c8ec:	180f      	adds	r7, r1, r0
1004c8ee:	4620      	mov	r0, r4
1004c8f0:	4639      	mov	r1, r7
1004c8f2:	f000 fbe5 	bl	1004d0c0 <llc_eadv_max_supported_data_check_ucfg_weak>
1004c8f6:	4606      	mov	r6, r0
1004c8f8:	2800      	cmp	r0, #0
1004c8fa:	d001      	beq.n	1004c900 <ll_set_advertising_data_ptr+0x50>
1004c8fc:	4630      	mov	r0, r6
1004c8fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004c900:	20ce      	movs	r0, #206	@ 0xce
1004c902:	5c39      	ldrb	r1, [r7, r0]
1004c904:	2038      	movs	r0, #56	@ 0x38
1004c906:	5c38      	ldrb	r0, [r7, r0]
1004c908:	9a02      	ldr	r2, [sp, #8]
1004c90a:	2a04      	cmp	r2, #4
1004c90c:	d111      	bne.n	1004c932 <ll_set_advertising_data_ptr+0x82>
1004c90e:	2900      	cmp	r1, #0
1004c910:	d03d      	beq.n	1004c98e <ll_set_advertising_data_ptr+0xde>
1004c912:	2800      	cmp	r0, #0
1004c914:	9e00      	ldr	r6, [sp, #0]
1004c916:	d0f1      	beq.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c918:	481e      	ldr	r0, [pc, #120]	@ (1004c994 <__arm_cp.33_0>)
1004c91a:	4285      	cmp	r5, r0
1004c91c:	d1ee      	bne.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c91e:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
1004c920:	2800      	cmp	r0, #0
1004c922:	d0eb      	beq.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c924:	20b8      	movs	r0, #184	@ 0xb8
1004c926:	5a38      	ldrh	r0, [r7, r0]
1004c928:	2110      	movs	r1, #16
1004c92a:	4001      	ands	r1, r0
1004c92c:	4321      	orrs	r1, r4
1004c92e:	d1e5      	bne.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c930:	e00d      	b.n	1004c94e <ll_set_advertising_data_ptr+0x9e>
1004c932:	463d      	mov	r5, r7
1004c934:	3538      	adds	r5, #56	@ 0x38
1004c936:	2900      	cmp	r1, #0
1004c938:	d016      	beq.n	1004c968 <ll_set_advertising_data_ptr+0xb8>
1004c93a:	2a03      	cmp	r2, #3
1004c93c:	d107      	bne.n	1004c94e <ll_set_advertising_data_ptr+0x9e>
1004c93e:	2002      	movs	r0, #2
1004c940:	7028      	strb	r0, [r5, #0]
1004c942:	86fc      	strh	r4, [r7, #54]	@ 0x36
1004c944:	2000      	movs	r0, #0
1004c946:	86b8      	strh	r0, [r7, #52]	@ 0x34
1004c948:	9801      	ldr	r0, [sp, #4]
1004c94a:	6338      	str	r0, [r7, #48]	@ 0x30
1004c94c:	e003      	b.n	1004c956 <ll_set_advertising_data_ptr+0xa6>
1004c94e:	4638      	mov	r0, r7
1004c950:	30b6      	adds	r0, #182	@ 0xb6
1004c952:	f7ff ff63 	bl	1004c81c <LL_eadv_update_did>
1004c956:	20da      	movs	r0, #218	@ 0xda
1004c958:	5c38      	ldrb	r0, [r7, r0]
1004c95a:	2600      	movs	r6, #0
1004c95c:	07c0      	lsls	r0, r0, #31
1004c95e:	d0cd      	beq.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c960:	4638      	mov	r0, r7
1004c962:	f7ff fc9b 	bl	1004c29c <llc_eadv_generate_new_rpa_for_one_adv_set>
1004c966:	e7c9      	b.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c968:	9702      	str	r7, [sp, #8]
1004c96a:	463e      	mov	r6, r7
1004c96c:	3628      	adds	r6, #40	@ 0x28
1004c96e:	2800      	cmp	r0, #0
1004c970:	9f01      	ldr	r7, [sp, #4]
1004c972:	d004      	beq.n	1004c97e <ll_set_advertising_data_ptr+0xce>
1004c974:	6831      	ldr	r1, [r6, #0]
1004c976:	20a1      	movs	r0, #161	@ 0xa1
1004c978:	463a      	mov	r2, r7
1004c97a:	f001 fe6d 	bl	1004e658 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1004c97e:	6037      	str	r7, [r6, #0]
1004c980:	2001      	movs	r0, #1
1004c982:	7028      	strb	r0, [r5, #0]
1004c984:	9802      	ldr	r0, [sp, #8]
1004c986:	85c4      	strh	r4, [r0, #46]	@ 0x2e
1004c988:	2600      	movs	r6, #0
1004c98a:	8586      	strh	r6, [r0, #44]	@ 0x2c
1004c98c:	e7b6      	b.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c98e:	9e00      	ldr	r6, [sp, #0]
1004c990:	e7b4      	b.n	1004c8fc <ll_set_advertising_data_ptr+0x4c>
1004c992:	46c0      	nop			@ (mov r8, r8)

1004c994 <__arm_cp.33_0>:
1004c994:	0000fffc 	.word	0x0000fffc

1004c998 <__arm_cp.33_1>:
1004c998:	00000672 	.word	0x00000672

1004c99c <ll_set_legacy_advertising_data_ptr>:
1004c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004c99e:	460c      	mov	r4, r1
1004c9a0:	4605      	mov	r5, r0
1004c9a2:	f000 fdcf 	bl	1004d544 <llc_get_linkms_cntxt_p>
1004c9a6:	4607      	mov	r7, r0
1004c9a8:	f7ff fd74 	bl	1004c494 <LL_LE_Set_Advertising_Parameters_Default>
1004c9ac:	4e0c      	ldr	r6, [pc, #48]	@ (1004c9e0 <__arm_cp.36_0>)
1004c9ae:	4630      	mov	r0, r6
1004c9b0:	f7ff fc58 	bl	1004c264 <llc_get_advertising_set_index>
1004c9b4:	490b      	ldr	r1, [pc, #44]	@ (1004c9e4 <__arm_cp.36_1>)
1004c9b6:	4288      	cmp	r0, r1
1004c9b8:	d108      	bne.n	1004c9cc <ll_set_legacy_advertising_data_ptr+0x30>
1004c9ba:	f7ff fd3b 	bl	1004c434 <LL_Context_ReturnFree>
1004c9be:	28ff      	cmp	r0, #255	@ 0xff
1004c9c0:	d00b      	beq.n	1004c9da <ll_set_legacy_advertising_data_ptr+0x3e>
1004c9c2:	0200      	lsls	r0, r0, #8
1004c9c4:	6839      	ldr	r1, [r7, #0]
1004c9c6:	1808      	adds	r0, r1, r0
1004c9c8:	21be      	movs	r1, #190	@ 0xbe
1004c9ca:	5246      	strh	r6, [r0, r1]
1004c9cc:	2103      	movs	r1, #3
1004c9ce:	4630      	mov	r0, r6
1004c9d0:	462a      	mov	r2, r5
1004c9d2:	4623      	mov	r3, r4
1004c9d4:	f7ff ff6c 	bl	1004c8b0 <ll_set_advertising_data_ptr>
1004c9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c9da:	2001      	movs	r0, #1
1004c9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004c9de:	46c0      	nop			@ (mov r8, r8)

1004c9e0 <__arm_cp.36_0>:
1004c9e0:	0000fffc 	.word	0x0000fffc

1004c9e4 <__arm_cp.36_1>:
1004c9e4:	0000ffff 	.word	0x0000ffff

1004c9e8 <ADV_cancelslot>:
1004c9e8:	21d0      	movs	r1, #208	@ 0xd0
1004c9ea:	22ff      	movs	r2, #255	@ 0xff
1004c9ec:	5442      	strb	r2, [r0, r1]
1004c9ee:	4770      	bx	lr

1004c9f0 <ADV_skiproutine>:
1004c9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004c9f2:	b08d      	sub	sp, #52	@ 0x34
1004c9f4:	4607      	mov	r7, r0
1004c9f6:	20d0      	movs	r0, #208	@ 0xd0
1004c9f8:	5c38      	ldrb	r0, [r7, r0]
1004c9fa:	232c      	movs	r3, #44	@ 0x2c
1004c9fc:	4358      	muls	r0, r3
1004c9fe:	4a5f      	ldr	r2, [pc, #380]	@ (1004cb7c <__arm_cp.40_0>)
1004ca00:	6812      	ldr	r2, [r2, #0]
1004ca02:	1810      	adds	r0, r2, r0
1004ca04:	7d80      	ldrb	r0, [r0, #22]
1004ca06:	463c      	mov	r4, r7
1004ca08:	3494      	adds	r4, #148	@ 0x94
1004ca0a:	463a      	mov	r2, r7
1004ca0c:	32b4      	adds	r2, #180	@ 0xb4
1004ca0e:	9203      	str	r2, [sp, #12]
1004ca10:	463a      	mov	r2, r7
1004ca12:	32d6      	adds	r2, #214	@ 0xd6
1004ca14:	9202      	str	r2, [sp, #8]
1004ca16:	2814      	cmp	r0, #20
1004ca18:	9301      	str	r3, [sp, #4]
1004ca1a:	d10a      	bne.n	1004ca32 <ADV_skiproutine+0x42>
1004ca1c:	f7f5 f87b 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004ca20:	4605      	mov	r5, r0
1004ca22:	f000 fd9b 	bl	1004d55c <LL_sched_engine_return_actual_scheduler_margin>
1004ca26:	9b03      	ldr	r3, [sp, #12]
1004ca28:	1828      	adds	r0, r5, r0
1004ca2a:	3032      	adds	r0, #50	@ 0x32
1004ca2c:	60a0      	str	r0, [r4, #8]
1004ca2e:	2501      	movs	r5, #1
1004ca30:	e01b      	b.n	1004ca6a <ADV_skiproutine+0x7a>
1004ca32:	68a2      	ldr	r2, [r4, #8]
1004ca34:	1856      	adds	r6, r2, r1
1004ca36:	2500      	movs	r5, #0
1004ca38:	4630      	mov	r0, r6
1004ca3a:	4611      	mov	r1, r2
1004ca3c:	f000 fd8a 	bl	1004d554 <LL_sched_time_t1_ge_t2>
1004ca40:	2800      	cmp	r0, #0
1004ca42:	d005      	beq.n	1004ca50 <ADV_skiproutine+0x60>
1004ca44:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1004ca46:	68a1      	ldr	r1, [r4, #8]
1004ca48:	180a      	adds	r2, r1, r0
1004ca4a:	60a2      	str	r2, [r4, #8]
1004ca4c:	1c6d      	adds	r5, r5, #1
1004ca4e:	e7f3      	b.n	1004ca38 <ADV_skiproutine+0x48>
1004ca50:	9b03      	ldr	r3, [sp, #12]
1004ca52:	8898      	ldrh	r0, [r3, #4]
1004ca54:	0700      	lsls	r0, r0, #28
1004ca56:	d408      	bmi.n	1004ca6a <ADV_skiproutine+0x7a>
1004ca58:	2001      	movs	r0, #1
1004ca5a:	f001 fd27 	bl	1004e4ac <Hal_Get_Random_Number32>
1004ca5e:	9b03      	ldr	r3, [sp, #12]
1004ca60:	4947      	ldr	r1, [pc, #284]	@ (1004cb80 <__arm_cp.40_1>)
1004ca62:	4001      	ands	r1, r0
1004ca64:	68a0      	ldr	r0, [r4, #8]
1004ca66:	1840      	adds	r0, r0, r1
1004ca68:	60a0      	str	r0, [r4, #8]
1004ca6a:	8898      	ldrh	r0, [r3, #4]
1004ca6c:	2103      	movs	r1, #3
1004ca6e:	4001      	ands	r1, r0
1004ca70:	1e48      	subs	r0, r1, #1
1004ca72:	4181      	sbcs	r1, r0
1004ca74:	0048      	lsls	r0, r1, #1
1004ca76:	8018      	strh	r0, [r3, #0]
1004ca78:	7b98      	ldrb	r0, [r3, #14]
1004ca7a:	2201      	movs	r2, #1
1004ca7c:	4601      	mov	r1, r0
1004ca7e:	9200      	str	r2, [sp, #0]
1004ca80:	4011      	ands	r1, r2
1004ca82:	0782      	lsls	r2, r0, #30
1004ca84:	0fd2      	lsrs	r2, r2, #31
1004ca86:	1889      	adds	r1, r1, r2
1004ca88:	0740      	lsls	r0, r0, #29
1004ca8a:	0fc0      	lsrs	r0, r0, #31
1004ca8c:	1808      	adds	r0, r1, r0
1004ca8e:	1e40      	subs	r0, r0, #1
1004ca90:	7798      	strb	r0, [r3, #30]
1004ca92:	4638      	mov	r0, r7
1004ca94:	f000 f87a 	bl	1004cb8c <UTIL_u8GetNextAdvChannel>
1004ca98:	4601      	mov	r1, r0
1004ca9a:	9803      	ldr	r0, [sp, #12]
1004ca9c:	7f00      	ldrb	r0, [r0, #28]
1004ca9e:	f7f5 fee5 	bl	1004286c <BLEPLAT_CNTR_SmSetRemapChan>
1004caa2:	9803      	ldr	r0, [sp, #12]
1004caa4:	7f00      	ldrb	r0, [r0, #28]
1004caa6:	f7f5 ff2c 	bl	10042902 <BLEPLAT_CNTR_SmSetTxMode>
1004caaa:	2600      	movs	r6, #0
1004caac:	9802      	ldr	r0, [sp, #8]
1004caae:	7146      	strb	r6, [r0, #5]
1004cab0:	4638      	mov	r0, r7
1004cab2:	3028      	adds	r0, #40	@ 0x28
1004cab4:	f7ff fb1c 	bl	1004c0f0 <LL_eadv_switchbackupdata_data_struc>
1004cab8:	4638      	mov	r0, r7
1004caba:	303c      	adds	r0, #60	@ 0x3c
1004cabc:	f7ff fb18 	bl	1004c0f0 <LL_eadv_switchbackupdata_data_struc>
1004cac0:	9b03      	ldr	r3, [sp, #12]
1004cac2:	68a1      	ldr	r1, [r4, #8]
1004cac4:	6820      	ldr	r0, [r4, #0]
1004cac6:	88da      	ldrh	r2, [r3, #6]
1004cac8:	2a00      	cmp	r2, #0
1004caca:	d102      	bne.n	1004cad2 <ADV_skiproutine+0xe2>
1004cacc:	7eda      	ldrb	r2, [r3, #27]
1004cace:	2a01      	cmp	r2, #1
1004cad0:	d003      	beq.n	1004cada <ADV_skiproutine+0xea>
1004cad2:	4288      	cmp	r0, r1
1004cad4:	da4a      	bge.n	1004cb6c <ADV_skiproutine+0x17c>
1004cad6:	2800      	cmp	r0, #0
1004cad8:	d048      	beq.n	1004cb6c <ADV_skiproutine+0x17c>
1004cada:	7e98      	ldrb	r0, [r3, #26]
1004cadc:	2800      	cmp	r0, #0
1004cade:	d045      	beq.n	1004cb6c <ADV_skiproutine+0x17c>
1004cae0:	8898      	ldrh	r0, [r3, #4]
1004cae2:	0700      	lsls	r0, r0, #28
1004cae4:	d51e      	bpl.n	1004cb24 <ADV_skiproutine+0x134>
1004cae6:	a90b      	add	r1, sp, #44	@ 0x2c
1004cae8:	808e      	strh	r6, [r1, #4]
1004caea:	960b      	str	r6, [sp, #44]	@ 0x2c
1004caec:	a804      	add	r0, sp, #16
1004caee:	9a00      	ldr	r2, [sp, #0]
1004caf0:	7642      	strb	r2, [r0, #25]
1004caf2:	223c      	movs	r2, #60	@ 0x3c
1004caf4:	7682      	strb	r2, [r0, #26]
1004caf6:	22ff      	movs	r2, #255	@ 0xff
1004caf8:	7582      	strb	r2, [r0, #22]
1004cafa:	81c6      	strh	r6, [r0, #14]
1004cafc:	4a21      	ldr	r2, [pc, #132]	@ (1004cb84 <__arm_cp.40_2>)
1004cafe:	8282      	strh	r2, [r0, #20]
1004cb00:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1004cb02:	7a13      	ldrb	r3, [r2, #8]
1004cb04:	7603      	strb	r3, [r0, #24]
1004cb06:	8186      	strh	r6, [r0, #12]
1004cb08:	75c6      	strb	r6, [r0, #23]
1004cb0a:	9105      	str	r1, [sp, #20]
1004cb0c:	3209      	adds	r2, #9
1004cb0e:	9204      	str	r2, [sp, #16]
1004cb10:	9608      	str	r6, [sp, #32]
1004cb12:	9106      	str	r1, [sp, #24]
1004cb14:	f7ff f948 	bl	1004bda8 <llc_conn_push_connection_complete_event>
1004cb18:	9802      	ldr	r0, [sp, #8]
1004cb1a:	7800      	ldrb	r0, [r0, #0]
1004cb1c:	0780      	lsls	r0, r0, #30
1004cb1e:	d501      	bpl.n	1004cb24 <ADV_skiproutine+0x134>
1004cb20:	f7ff fa93 	bl	1004c04a <llc_priv_stop_privacy_timer_ucfg_weak>
1004cb24:	2002      	movs	r0, #2
1004cb26:	f7ff f857 	bl	1004bbd8 <hci_check_legacy_ext_flag>
1004cb2a:	2801      	cmp	r0, #1
1004cb2c:	d119      	bne.n	1004cb62 <ADV_skiproutine+0x172>
1004cb2e:	9b03      	ldr	r3, [sp, #12]
1004cb30:	88da      	ldrh	r2, [r3, #6]
1004cb32:	2a00      	cmp	r2, #0
1004cb34:	d001      	beq.n	1004cb3a <ADV_skiproutine+0x14a>
1004cb36:	203c      	movs	r0, #60	@ 0x3c
1004cb38:	e000      	b.n	1004cb3c <ADV_skiproutine+0x14c>
1004cb3a:	2043      	movs	r0, #67	@ 0x43
1004cb3c:	9000      	str	r0, [sp, #0]
1004cb3e:	4812      	ldr	r0, [pc, #72]	@ (1004cb88 <__arm_cp.40_3>)
1004cb40:	6800      	ldr	r0, [r0, #0]
1004cb42:	9901      	ldr	r1, [sp, #4]
1004cb44:	5c40      	ldrb	r0, [r0, r1]
1004cb46:	0100      	lsls	r0, r0, #4
1004cb48:	43c0      	mvns	r0, r0
1004cb4a:	4619      	mov	r1, r3
1004cb4c:	23a1      	movs	r3, #161	@ 0xa1
1004cb4e:	4303      	orrs	r3, r0
1004cb50:	20b1      	movs	r0, #177	@ 0xb1
1004cb52:	4018      	ands	r0, r3
1004cb54:	7a0b      	ldrb	r3, [r1, #8]
1004cb56:	1a9a      	subs	r2, r3, r2
1004cb58:	b2d3      	uxtb	r3, r2
1004cb5a:	7a8a      	ldrb	r2, [r1, #10]
1004cb5c:	9900      	ldr	r1, [sp, #0]
1004cb5e:	f000 f85d 	bl	1004cc1c <hci_le_advertising_set_terminated_event_push>
1004cb62:	4638      	mov	r0, r7
1004cb64:	f000 f894 	bl	1004cc90 <EADV_stop_isr>
1004cb68:	68a1      	ldr	r1, [r4, #8]
1004cb6a:	9b03      	ldr	r3, [sp, #12]
1004cb6c:	7f18      	ldrb	r0, [r3, #28]
1004cb6e:	f000 fd15 	bl	1004d59c <LL_sched_set_anchor>
1004cb72:	9802      	ldr	r0, [sp, #8]
1004cb74:	7146      	strb	r6, [r0, #5]
1004cb76:	4628      	mov	r0, r5
1004cb78:	b00d      	add	sp, #52	@ 0x34
1004cb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004cb7c <__arm_cp.40_0>:
1004cb7c:	20000b48 	.word	0x20000b48

1004cb80 <__arm_cp.40_1>:
1004cb80:	00000fff 	.word	0x00000fff

1004cb84 <__arm_cp.40_2>:
1004cb84:	0000ffff 	.word	0x0000ffff

1004cb88 <__arm_cp.40_3>:
1004cb88:	20000b30 	.word	0x20000b30

1004cb8c <UTIL_u8GetNextAdvChannel>:
1004cb8c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004cb8e:	4604      	mov	r4, r0
1004cb90:	20c2      	movs	r0, #194	@ 0xc2
1004cb92:	5c27      	ldrb	r7, [r4, r0]
1004cb94:	2501      	movs	r5, #1
1004cb96:	403d      	ands	r5, r7
1004cb98:	07ba      	lsls	r2, r7, #30
1004cb9a:	0fd0      	lsrs	r0, r2, #31
1004cb9c:	1828      	adds	r0, r5, r0
1004cb9e:	0779      	lsls	r1, r7, #29
1004cba0:	0fc9      	lsrs	r1, r1, #31
1004cba2:	1840      	adds	r0, r0, r1
1004cba4:	1e40      	subs	r0, r0, #1
1004cba6:	b2c0      	uxtb	r0, r0
1004cba8:	34c2      	adds	r4, #194	@ 0xc2
1004cbaa:	7c26      	ldrb	r6, [r4, #16]
1004cbac:	42b0      	cmp	r0, r6
1004cbae:	d10f      	bne.n	1004cbd0 <UTIL_u8GetNextAdvChannel+0x44>
1004cbb0:	9201      	str	r2, [sp, #4]
1004cbb2:	2001      	movs	r0, #1
1004cbb4:	9002      	str	r0, [sp, #8]
1004cbb6:	f001 fc72 	bl	1004e49e <Hal_Get_Random_Number>
1004cbba:	2e01      	cmp	r6, #1
1004cbbc:	d00a      	beq.n	1004cbd4 <UTIL_u8GetNextAdvChannel+0x48>
1004cbbe:	2e02      	cmp	r6, #2
1004cbc0:	d10e      	bne.n	1004cbe0 <UTIL_u8GetNextAdvChannel+0x54>
1004cbc2:	b2c0      	uxtb	r0, r0
1004cbc4:	2106      	movs	r1, #6
1004cbc6:	f7f3 fbb9 	bl	1004033c <__aeabi_uidivmod>
1004cbca:	a012      	add	r0, pc, #72	@ (adr r0, 1004cc14 <UTIL_u8GetNextAdvChannel+0x88>)
1004cbcc:	5c40      	ldrb	r0, [r0, r1]
1004cbce:	e012      	b.n	1004cbf6 <UTIL_u8GetNextAdvChannel+0x6a>
1004cbd0:	7c60      	ldrb	r0, [r4, #17]
1004cbd2:	e011      	b.n	1004cbf8 <UTIL_u8GetNextAdvChannel+0x6c>
1004cbd4:	9902      	ldr	r1, [sp, #8]
1004cbd6:	4008      	ands	r0, r1
1004cbd8:	2d00      	cmp	r5, #0
1004cbda:	d104      	bne.n	1004cbe6 <UTIL_u8GetNextAdvChannel+0x5a>
1004cbdc:	a10c      	add	r1, pc, #48	@ (adr r1, 1004cc10 <UTIL_u8GetNextAdvChannel+0x84>)
1004cbde:	e008      	b.n	1004cbf2 <UTIL_u8GetNextAdvChannel+0x66>
1004cbe0:	08b8      	lsrs	r0, r7, #2
1004cbe2:	1a38      	subs	r0, r7, r0
1004cbe4:	e007      	b.n	1004cbf6 <UTIL_u8GetNextAdvChannel+0x6a>
1004cbe6:	9901      	ldr	r1, [sp, #4]
1004cbe8:	2900      	cmp	r1, #0
1004cbea:	d401      	bmi.n	1004cbf0 <UTIL_u8GetNextAdvChannel+0x64>
1004cbec:	a107      	add	r1, pc, #28	@ (adr r1, 1004cc0c <UTIL_u8GetNextAdvChannel+0x80>)
1004cbee:	e000      	b.n	1004cbf2 <UTIL_u8GetNextAdvChannel+0x66>
1004cbf0:	a105      	add	r1, pc, #20	@ (adr r1, 1004cc08 <UTIL_u8GetNextAdvChannel+0x7c>)
1004cbf2:	1808      	adds	r0, r1, r0
1004cbf4:	7800      	ldrb	r0, [r0, #0]
1004cbf6:	7460      	strb	r0, [r4, #17]
1004cbf8:	0071      	lsls	r1, r6, #1
1004cbfa:	b2c2      	uxtb	r2, r0
1004cbfc:	40ca      	lsrs	r2, r1
1004cbfe:	2003      	movs	r0, #3
1004cc00:	4010      	ands	r0, r2
1004cc02:	3024      	adds	r0, #36	@ 0x24
1004cc04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004cc06:	46c0      	nop			@ (mov r8, r8)
1004cc08:	00000906 	.word	0x00000906
1004cc0c:	00000d07 	.word	0x00000d07
1004cc10:	00000e0b 	.word	0x00000e0b
1004cc14:	2d271e1b 	.word	0x2d271e1b
1004cc18:	00003936 	.word	0x00003936

1004cc1c <hci_le_advertising_set_terminated_event_push>:
1004cc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004cc1e:	461f      	mov	r7, r3
1004cc20:	4616      	mov	r6, r2
1004cc22:	460d      	mov	r5, r1
1004cc24:	4604      	mov	r4, r0
1004cc26:	06c0      	lsls	r0, r0, #27
1004cc28:	d40b      	bmi.n	1004cc42 <hci_le_advertising_set_terminated_event_push+0x26>
1004cc2a:	4817      	ldr	r0, [pc, #92]	@ (1004cc88 <__arm_cp.42_0>)
1004cc2c:	6800      	ldr	r0, [r0, #0]
1004cc2e:	213d      	movs	r1, #61	@ 0x3d
1004cc30:	5c41      	ldrb	r1, [r0, r1]
1004cc32:	0689      	lsls	r1, r1, #26
1004cc34:	d527      	bpl.n	1004cc86 <hci_le_advertising_set_terminated_event_push+0x6a>
1004cc36:	303d      	adds	r0, #61	@ 0x3d
1004cc38:	7ac0      	ldrb	r0, [r0, #11]
1004cc3a:	0780      	lsls	r0, r0, #30
1004cc3c:	d523      	bpl.n	1004cc86 <hci_le_advertising_set_terminated_event_push+0x6a>
1004cc3e:	221f      	movs	r2, #31
1004cc40:	e002      	b.n	1004cc48 <hci_le_advertising_set_terminated_event_push+0x2c>
1004cc42:	20bf      	movs	r0, #191	@ 0xbf
1004cc44:	4004      	ands	r4, r0
1004cc46:	2211      	movs	r2, #17
1004cc48:	4810      	ldr	r0, [pc, #64]	@ (1004cc8c <__arm_cp.42_1>)
1004cc4a:	6800      	ldr	r0, [r0, #0]
1004cc4c:	0761      	lsls	r1, r4, #29
1004cc4e:	0ec9      	lsrs	r1, r1, #27
1004cc50:	1840      	adds	r0, r0, r1
1004cc52:	6900      	ldr	r0, [r0, #16]
1004cc54:	2303      	movs	r3, #3
1004cc56:	4621      	mov	r1, r4
1004cc58:	f7fe f8e4 	bl	1004ae24 <aci_event_fifo_push_header>
1004cc5c:	2800      	cmp	r0, #0
1004cc5e:	d012      	beq.n	1004cc86 <hci_le_advertising_set_terminated_event_push+0x6a>
1004cc60:	4601      	mov	r1, r0
1004cc62:	200f      	movs	r0, #15
1004cc64:	72c8      	strb	r0, [r1, #11]
1004cc66:	20ff      	movs	r0, #255	@ 0xff
1004cc68:	7288      	strb	r0, [r1, #10]
1004cc6a:	730f      	strb	r7, [r1, #12]
1004cc6c:	724e      	strb	r6, [r1, #9]
1004cc6e:	720d      	strb	r5, [r1, #8]
1004cc70:	2012      	movs	r0, #18
1004cc72:	71c8      	strb	r0, [r1, #7]
1004cc74:	2006      	movs	r0, #6
1004cc76:	7188      	strb	r0, [r1, #6]
1004cc78:	203e      	movs	r0, #62	@ 0x3e
1004cc7a:	7148      	strb	r0, [r1, #5]
1004cc7c:	2004      	movs	r0, #4
1004cc7e:	7108      	strb	r0, [r1, #4]
1004cc80:	4620      	mov	r0, r4
1004cc82:	f7fe f96c 	bl	1004af5e <aci_event_fifo_push>
1004cc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004cc88 <__arm_cp.42_0>:
1004cc88:	20000b40 	.word	0x20000b40

1004cc8c <__arm_cp.42_1>:
1004cc8c:	20000b34 	.word	0x20000b34

1004cc90 <EADV_stop_isr>:
1004cc90:	b5b0      	push	{r4, r5, r7, lr}
1004cc92:	4604      	mov	r4, r0
1004cc94:	20d1      	movs	r0, #209	@ 0xd1
1004cc96:	5c20      	ldrb	r0, [r4, r0]
1004cc98:	f000 fc88 	bl	1004d5ac <LL_sched_set_cancel_request>
1004cc9c:	4625      	mov	r5, r4
1004cc9e:	35ce      	adds	r5, #206	@ 0xce
1004cca0:	78a8      	ldrb	r0, [r5, #2]
1004cca2:	f000 fc83 	bl	1004d5ac <LL_sched_set_cancel_request>
1004cca6:	20ce      	movs	r0, #206	@ 0xce
1004cca8:	2100      	movs	r1, #0
1004ccaa:	5221      	strh	r1, [r4, r0]
1004ccac:	7aa8      	ldrb	r0, [r5, #10]
1004ccae:	28ff      	cmp	r0, #255	@ 0xff
1004ccb0:	d001      	beq.n	1004ccb6 <EADV_stop_isr+0x26>
1004ccb2:	f7ff f9af 	bl	1004c014 <llc_conn_release_conn_idx>
1004ccb6:	20ff      	movs	r0, #255	@ 0xff
1004ccb8:	72a8      	strb	r0, [r5, #10]
1004ccba:	bdb0      	pop	{r4, r5, r7, pc}

1004ccbc <ADV_createslot>:
1004ccbc:	b570      	push	{r4, r5, r6, lr}
1004ccbe:	4604      	mov	r4, r0
1004ccc0:	20c5      	movs	r0, #197	@ 0xc5
1004ccc2:	5c20      	ldrb	r0, [r4, r0]
1004ccc4:	f7ff f9d0 	bl	1004c068 <llc_convert_hci_phy_enum_to_hw_phy>
1004ccc8:	4605      	mov	r5, r0
1004ccca:	4626      	mov	r6, r4
1004cccc:	36c5      	adds	r6, #197	@ 0xc5
1004ccce:	7af0      	ldrb	r0, [r6, #11]
1004ccd0:	4629      	mov	r1, r5
1004ccd2:	f7f5 fe37 	bl	10042944 <BLEPLAT_CNTR_SmSetTxPhy>
1004ccd6:	7af0      	ldrb	r0, [r6, #11]
1004ccd8:	4629      	mov	r1, r5
1004ccda:	f7f5 fdfd 	bl	100428d8 <BLEPLAT_CNTR_SmSetRxPhy>
1004ccde:	f7f5 fba8 	bl	10042432 <BLEPLAT_CNTR_GlobEnableBlue>
1004cce2:	f000 fc1f 	bl	1004d524 <LL_get_tx_common_buffer_p>
1004cce6:	4602      	mov	r2, r0
1004cce8:	7db0      	ldrb	r0, [r6, #22]
1004ccea:	4621      	mov	r1, r4
1004ccec:	f000 f801 	bl	1004ccf2 <EADV_vPrepareAdvOrRspLegacyPacket>
1004ccf0:	bd70      	pop	{r4, r5, r6, pc}

1004ccf2 <EADV_vPrepareAdvOrRspLegacyPacket>:
1004ccf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ccf4:	4614      	mov	r4, r2
1004ccf6:	460d      	mov	r5, r1
1004ccf8:	4606      	mov	r6, r0
1004ccfa:	460f      	mov	r7, r1
1004ccfc:	37b8      	adds	r7, #184	@ 0xb8
1004ccfe:	2004      	movs	r0, #4
1004cd00:	2e00      	cmp	r6, #0
1004cd02:	4601      	mov	r1, r0
1004cd04:	d10d      	bne.n	1004cd22 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004cd06:	8839      	ldrh	r1, [r7, #0]
1004cd08:	074a      	lsls	r2, r1, #29
1004cd0a:	d407      	bmi.n	1004cd1c <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1004cd0c:	2203      	movs	r2, #3
1004cd0e:	4011      	ands	r1, r2
1004cd10:	424a      	negs	r2, r1
1004cd12:	414a      	adcs	r2, r1
1004cd14:	2902      	cmp	r1, #2
1004cd16:	d003      	beq.n	1004cd20 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1004cd18:	0051      	lsls	r1, r2, #1
1004cd1a:	e002      	b.n	1004cd22 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004cd1c:	2101      	movs	r1, #1
1004cd1e:	e000      	b.n	1004cd22 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1004cd20:	2106      	movs	r1, #6
1004cd22:	7021      	strb	r1, [r4, #0]
1004cd24:	2e00      	cmp	r6, #0
1004cd26:	d107      	bne.n	1004cd38 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1004cd28:	8839      	ldrh	r1, [r7, #0]
1004cd2a:	4001      	ands	r1, r0
1004cd2c:	d104      	bne.n	1004cd38 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1004cd2e:	202e      	movs	r0, #46	@ 0x2e
1004cd30:	5c28      	ldrb	r0, [r5, r0]
1004cd32:	1d80      	adds	r0, r0, #6
1004cd34:	7060      	strb	r0, [r4, #1]
1004cd36:	e00f      	b.n	1004cd58 <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1004cd38:	2e00      	cmp	r6, #0
1004cd3a:	d004      	beq.n	1004cd46 <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1004cd3c:	4628      	mov	r0, r5
1004cd3e:	3042      	adds	r0, #66	@ 0x42
1004cd40:	7800      	ldrb	r0, [r0, #0]
1004cd42:	1d80      	adds	r0, r0, #6
1004cd44:	e000      	b.n	1004cd48 <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1004cd46:	200c      	movs	r0, #12
1004cd48:	7060      	strb	r0, [r4, #1]
1004cd4a:	4620      	mov	r0, r4
1004cd4c:	3008      	adds	r0, #8
1004cd4e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004cd50:	3109      	adds	r1, #9
1004cd52:	2206      	movs	r2, #6
1004cd54:	f7f4 fe5c 	bl	10041a10 <BLEPLAT_MemCpy>
1004cd58:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004cd5a:	1ca0      	adds	r0, r4, #2
1004cd5c:	1c49      	adds	r1, r1, #1
1004cd5e:	2206      	movs	r2, #6
1004cd60:	f7f4 fe56 	bl	10041a10 <BLEPLAT_MemCpy>
1004cd64:	7820      	ldrb	r0, [r4, #0]
1004cd66:	212f      	movs	r1, #47	@ 0x2f
1004cd68:	4001      	ands	r1, r0
1004cd6a:	7021      	strb	r1, [r4, #0]
1004cd6c:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1004cd6e:	7800      	ldrb	r0, [r0, #0]
1004cd70:	07c0      	lsls	r0, r0, #31
1004cd72:	0e40      	lsrs	r0, r0, #25
1004cd74:	1840      	adds	r0, r0, r1
1004cd76:	7020      	strb	r0, [r4, #0]
1004cd78:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004cd7a:	7a09      	ldrb	r1, [r1, #8]
1004cd7c:	01c9      	lsls	r1, r1, #7
1004cd7e:	1808      	adds	r0, r1, r0
1004cd80:	7020      	strb	r0, [r4, #0]
1004cd82:	f000 f997 	bl	1004d0b4 <llc_get_channel_sel_algo2_enabled>
1004cd86:	7821      	ldrb	r1, [r4, #0]
1004cd88:	0140      	lsls	r0, r0, #5
1004cd8a:	4308      	orrs	r0, r1
1004cd8c:	7020      	strb	r0, [r4, #0]
1004cd8e:	4271      	negs	r1, r6
1004cd90:	4171      	adcs	r1, r6
1004cd92:	8838      	ldrh	r0, [r7, #0]
1004cd94:	2204      	movs	r2, #4
1004cd96:	4002      	ands	r2, r0
1004cd98:	0890      	lsrs	r0, r2, #2
1004cd9a:	4008      	ands	r0, r1
1004cd9c:	d101      	bne.n	1004cda2 <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1004cd9e:	2708      	movs	r7, #8
1004cda0:	e000      	b.n	1004cda4 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1004cda2:	270e      	movs	r7, #14
1004cda4:	2800      	cmp	r0, #0
1004cda6:	d001      	beq.n	1004cdac <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1004cda8:	200c      	movs	r0, #12
1004cdaa:	e011      	b.n	1004cdd0 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1004cdac:	2e00      	cmp	r6, #0
1004cdae:	d001      	beq.n	1004cdb4 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1004cdb0:	203c      	movs	r0, #60	@ 0x3c
1004cdb2:	e000      	b.n	1004cdb6 <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1004cdb4:	2028      	movs	r0, #40	@ 0x28
1004cdb6:	5829      	ldr	r1, [r5, r0]
1004cdb8:	2e00      	cmp	r6, #0
1004cdba:	d001      	beq.n	1004cdc0 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1004cdbc:	2042      	movs	r0, #66	@ 0x42
1004cdbe:	e000      	b.n	1004cdc2 <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1004cdc0:	202e      	movs	r0, #46	@ 0x2e
1004cdc2:	5a2d      	ldrh	r5, [r5, r0]
1004cdc4:	19e0      	adds	r0, r4, r7
1004cdc6:	462a      	mov	r2, r5
1004cdc8:	f7f4 fe22 	bl	10041a10 <BLEPLAT_MemCpy>
1004cdcc:	1978      	adds	r0, r7, r5
1004cdce:	1e80      	subs	r0, r0, #2
1004cdd0:	7060      	strb	r0, [r4, #1]
1004cdd2:	2000      	movs	r0, #0
1004cdd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004cdd6 <ADV_ISR_connect_request_received_ucfg_weak>:
1004cdd6:	21b4      	movs	r1, #180	@ 0xb4
1004cdd8:	2200      	movs	r2, #0
1004cdda:	5242      	strh	r2, [r0, r1]
1004cddc:	4770      	bx	lr
	...

1004cde0 <ADV_ISR>:
1004cde0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004cde2:	b08d      	sub	sp, #52	@ 0x34
1004cde4:	4605      	mov	r5, r0
1004cde6:	f000 fba5 	bl	1004d534 <LL_get_rx_common_buffer_p>
1004cdea:	9005      	str	r0, [sp, #20]
1004cdec:	4c85      	ldr	r4, [pc, #532]	@ (1004d004 <__arm_cp.48_0>)
1004cdee:	6820      	ldr	r0, [r4, #0]
1004cdf0:	f7f5 fb95 	bl	1004251e <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1004cdf4:	4606      	mov	r6, r0
1004cdf6:	6820      	ldr	r0, [r4, #0]
1004cdf8:	f7f5 fb9c 	bl	10042534 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1004cdfc:	4607      	mov	r7, r0
1004cdfe:	20d0      	movs	r0, #208	@ 0xd0
1004ce00:	5c28      	ldrb	r0, [r5, r0]
1004ce02:	212c      	movs	r1, #44	@ 0x2c
1004ce04:	4341      	muls	r1, r0
1004ce06:	4a80      	ldr	r2, [pc, #512]	@ (1004d008 <__arm_cp.48_1>)
1004ce08:	6812      	ldr	r2, [r2, #0]
1004ce0a:	1851      	adds	r1, r2, r1
1004ce0c:	7d89      	ldrb	r1, [r1, #22]
1004ce0e:	2914      	cmp	r1, #20
1004ce10:	d103      	bne.n	1004ce1a <ADV_ISR+0x3a>
1004ce12:	210a      	movs	r1, #10
1004ce14:	2203      	movs	r2, #3
1004ce16:	f000 fdf7 	bl	1004da08 <LL_sched_set_priority>
1004ce1a:	462c      	mov	r4, r5
1004ce1c:	34b4      	adds	r4, #180	@ 0xb4
1004ce1e:	4628      	mov	r0, r5
1004ce20:	30db      	adds	r0, #219	@ 0xdb
1004ce22:	9004      	str	r0, [sp, #16]
1004ce24:	2e00      	cmp	r6, #0
1004ce26:	d038      	beq.n	1004ce9a <ADV_ISR+0xba>
1004ce28:	9506      	str	r5, [sp, #24]
1004ce2a:	2700      	movs	r7, #0
1004ce2c:	970c      	str	r7, [sp, #48]	@ 0x30
1004ce2e:	970b      	str	r7, [sp, #44]	@ 0x2c
1004ce30:	9d05      	ldr	r5, [sp, #20]
1004ce32:	7828      	ldrb	r0, [r5, #0]
1004ce34:	09c0      	lsrs	r0, r0, #7
1004ce36:	a90b      	add	r1, sp, #44	@ 0x2c
1004ce38:	7008      	strb	r0, [r1, #0]
1004ce3a:	4874      	ldr	r0, [pc, #464]	@ (1004d00c <__arm_cp.48_2>)
1004ce3c:	6800      	ldr	r0, [r0, #0]
1004ce3e:	22d8      	movs	r2, #216	@ 0xd8
1004ce40:	5c80      	ldrb	r0, [r0, r2]
1004ce42:	9003      	str	r0, [sp, #12]
1004ce44:	1c48      	adds	r0, r1, #1
1004ce46:	4629      	mov	r1, r5
1004ce48:	3108      	adds	r1, #8
1004ce4a:	2606      	movs	r6, #6
1004ce4c:	4632      	mov	r2, r6
1004ce4e:	f7f4 fddf 	bl	10041a10 <BLEPLAT_MemCpy>
1004ce52:	970a      	str	r7, [sp, #40]	@ 0x28
1004ce54:	9709      	str	r7, [sp, #36]	@ 0x24
1004ce56:	7828      	ldrb	r0, [r5, #0]
1004ce58:	0640      	lsls	r0, r0, #25
1004ce5a:	0fc0      	lsrs	r0, r0, #31
1004ce5c:	a909      	add	r1, sp, #36	@ 0x24
1004ce5e:	7008      	strb	r0, [r1, #0]
1004ce60:	1c48      	adds	r0, r1, #1
1004ce62:	1ca9      	adds	r1, r5, #2
1004ce64:	4632      	mov	r2, r6
1004ce66:	f7f4 fdd3 	bl	10041a10 <BLEPLAT_MemCpy>
1004ce6a:	7828      	ldrb	r0, [r5, #0]
1004ce6c:	260f      	movs	r6, #15
1004ce6e:	4006      	ands	r6, r0
1004ce70:	2e05      	cmp	r6, #5
1004ce72:	d101      	bne.n	1004ce78 <ADV_ISR+0x98>
1004ce74:	f7f4 fe90 	bl	10041b98 <BLEPLAT_ClearRadioTimerValue>
1004ce78:	7be3      	ldrb	r3, [r4, #15]
1004ce7a:	7922      	ldrb	r2, [r4, #4]
1004ce7c:	9702      	str	r7, [sp, #8]
1004ce7e:	ad07      	add	r5, sp, #28
1004ce80:	9501      	str	r5, [sp, #4]
1004ce82:	9806      	ldr	r0, [sp, #24]
1004ce84:	3084      	adds	r0, #132	@ 0x84
1004ce86:	9000      	str	r0, [sp, #0]
1004ce88:	a809      	add	r0, sp, #36	@ 0x24
1004ce8a:	4631      	mov	r1, r6
1004ce8c:	f001 fc84 	bl	1004e798 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1004ce90:	0841      	lsrs	r1, r0, #1
1004ce92:	297e      	cmp	r1, #126	@ 0x7e
1004ce94:	d807      	bhi.n	1004cea6 <ADV_ISR+0xc6>
1004ce96:	4601      	mov	r1, r0
1004ce98:	e006      	b.n	1004cea8 <ADV_ISR+0xc8>
1004ce9a:	2601      	movs	r6, #1
1004ce9c:	2f00      	cmp	r7, #0
1004ce9e:	d14f      	bne.n	1004cf40 <ADV_ISR+0x160>
1004cea0:	2700      	movs	r7, #0
1004cea2:	8027      	strh	r7, [r4, #0]
1004cea4:	e051      	b.n	1004cf4a <ADV_ISR+0x16a>
1004cea6:	2101      	movs	r1, #1
1004cea8:	7029      	strb	r1, [r5, #0]
1004ceaa:	9d06      	ldr	r5, [sp, #24]
1004ceac:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1004ceae:	680a      	ldr	r2, [r1, #0]
1004ceb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004ceb2:	429a      	cmp	r2, r3
1004ceb4:	d12d      	bne.n	1004cf12 <ADV_ISR+0x132>
1004ceb6:	6849      	ldr	r1, [r1, #4]
1004ceb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004ceba:	4291      	cmp	r1, r2
1004cebc:	d129      	bne.n	1004cf12 <ADV_ISR+0x132>
1004cebe:	4607      	mov	r7, r0
1004cec0:	3fff      	subs	r7, #255	@ 0xff
1004cec2:	1e79      	subs	r1, r7, #1
1004cec4:	418f      	sbcs	r7, r1
1004cec6:	2e03      	cmp	r6, #3
1004cec8:	d123      	bne.n	1004cf12 <ADV_ISR+0x132>
1004ceca:	28ff      	cmp	r0, #255	@ 0xff
1004cecc:	d021      	beq.n	1004cf12 <ADV_ISR+0x132>
1004cece:	88a0      	ldrh	r0, [r4, #4]
1004ced0:	2701      	movs	r7, #1
1004ced2:	0780      	lsls	r0, r0, #30
1004ced4:	d51d      	bpl.n	1004cf12 <ADV_ISR+0x132>
1004ced6:	9803      	ldr	r0, [sp, #12]
1004ced8:	2801      	cmp	r0, #1
1004ceda:	d11a      	bne.n	1004cf12 <ADV_ISR+0x132>
1004cedc:	4628      	mov	r0, r5
1004cede:	f7f5 fb40 	bl	10042562 <BLEPLAT_CNTR_PacketClrPllTrig>
1004cee2:	7e60      	ldrb	r0, [r4, #25]
1004cee4:	2801      	cmp	r0, #1
1004cee6:	d109      	bne.n	1004cefc <ADV_ISR+0x11c>
1004cee8:	8960      	ldrh	r0, [r4, #10]
1004ceea:	4949      	ldr	r1, [pc, #292]	@ (1004d010 <__arm_cp.48_3>)
1004ceec:	4288      	cmp	r0, r1
1004ceee:	d005      	beq.n	1004cefc <ADV_ISR+0x11c>
1004cef0:	aa07      	add	r2, sp, #28
1004cef2:	7811      	ldrb	r1, [r2, #0]
1004cef4:	b2c0      	uxtb	r0, r0
1004cef6:	1c52      	adds	r2, r2, #1
1004cef8:	f000 f88e 	bl	1004d018 <hci_le_scan_request_received_event_push>
1004cefc:	7f20      	ldrb	r0, [r4, #28]
1004cefe:	f7f5 fd00 	bl	10042902 <BLEPLAT_CNTR_SmSetTxMode>
1004cf02:	2001      	movs	r0, #1
1004cf04:	9904      	ldr	r1, [sp, #16]
1004cf06:	7008      	strb	r0, [r1, #0]
1004cf08:	4628      	mov	r0, r5
1004cf0a:	f7ff fed7 	bl	1004ccbc <ADV_createslot>
1004cf0e:	2600      	movs	r6, #0
1004cf10:	e01b      	b.n	1004cf4a <ADV_ISR+0x16a>
1004cf12:	88a0      	ldrh	r0, [r4, #4]
1004cf14:	07c0      	lsls	r0, r0, #31
1004cf16:	d015      	beq.n	1004cf44 <ADV_ISR+0x164>
1004cf18:	2e05      	cmp	r6, #5
1004cf1a:	d113      	bne.n	1004cf44 <ADV_ISR+0x164>
1004cf1c:	9908      	ldr	r1, [sp, #32]
1004cf1e:	9807      	ldr	r0, [sp, #28]
1004cf20:	f7fe ff20 	bl	1004bd64 <llc_conn_list_search_address>
1004cf24:	4241      	negs	r1, r0
1004cf26:	4141      	adcs	r1, r0
1004cf28:	4039      	ands	r1, r7
1004cf2a:	2901      	cmp	r1, #1
1004cf2c:	d10a      	bne.n	1004cf44 <ADV_ISR+0x164>
1004cf2e:	9803      	ldr	r0, [sp, #12]
1004cf30:	2801      	cmp	r0, #1
1004cf32:	d107      	bne.n	1004cf44 <ADV_ISR+0x164>
1004cf34:	aa07      	add	r2, sp, #28
1004cf36:	4628      	mov	r0, r5
1004cf38:	9905      	ldr	r1, [sp, #20]
1004cf3a:	f7ff ff4c 	bl	1004cdd6 <ADV_ISR_connect_request_received_ucfg_weak>
1004cf3e:	2601      	movs	r6, #1
1004cf40:	2700      	movs	r7, #0
1004cf42:	e002      	b.n	1004cf4a <ADV_ISR+0x16a>
1004cf44:	2700      	movs	r7, #0
1004cf46:	8027      	strh	r7, [r4, #0]
1004cf48:	2601      	movs	r6, #1
1004cf4a:	8821      	ldrh	r1, [r4, #0]
1004cf4c:	7fa0      	ldrb	r0, [r4, #30]
1004cf4e:	2800      	cmp	r0, #0
1004cf50:	d022      	beq.n	1004cf98 <ADV_ISR+0x1b8>
1004cf52:	2900      	cmp	r1, #0
1004cf54:	d122      	bne.n	1004cf9c <ADV_ISR+0x1bc>
1004cf56:	1e40      	subs	r0, r0, #1
1004cf58:	77a0      	strb	r0, [r4, #30]
1004cf5a:	88a0      	ldrh	r0, [r4, #4]
1004cf5c:	2103      	movs	r1, #3
1004cf5e:	4001      	ands	r1, r0
1004cf60:	1e48      	subs	r0, r1, #1
1004cf62:	4181      	sbcs	r1, r0
1004cf64:	0048      	lsls	r0, r1, #1
1004cf66:	8020      	strh	r0, [r4, #0]
1004cf68:	4628      	mov	r0, r5
1004cf6a:	f7ff fe0f 	bl	1004cb8c <UTIL_u8GetNextAdvChannel>
1004cf6e:	4601      	mov	r1, r0
1004cf70:	7f20      	ldrb	r0, [r4, #28]
1004cf72:	f7f5 fc7b 	bl	1004286c <BLEPLAT_CNTR_SmSetRemapChan>
1004cf76:	7f20      	ldrb	r0, [r4, #28]
1004cf78:	f7f5 fcc3 	bl	10042902 <BLEPLAT_CNTR_SmSetTxMode>
1004cf7c:	4628      	mov	r0, r5
1004cf7e:	f7f5 fb80 	bl	10042682 <BLEPLAT_CNTR_PacketSetPllTrig>
1004cf82:	f7f4 fe09 	bl	10041b98 <BLEPLAT_ClearRadioTimerValue>
1004cf86:	2000      	movs	r0, #0
1004cf88:	9904      	ldr	r1, [sp, #16]
1004cf8a:	7008      	strb	r0, [r1, #0]
1004cf8c:	4628      	mov	r0, r5
1004cf8e:	f7ff fe95 	bl	1004ccbc <ADV_createslot>
1004cf92:	f7f4 fe19 	bl	10041bc8 <BLEPLAT_SetRadioCloseTimeout>
1004cf96:	e02a      	b.n	1004cfee <ADV_ISR+0x20e>
1004cf98:	2900      	cmp	r1, #0
1004cf9a:	d019      	beq.n	1004cfd0 <ADV_ISR+0x1f0>
1004cf9c:	4819      	ldr	r0, [pc, #100]	@ (1004d004 <__arm_cp.48_0>)
1004cf9e:	6800      	ldr	r0, [r0, #0]
1004cfa0:	f7f5 fac8 	bl	10042534 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1004cfa4:	2800      	cmp	r0, #0
1004cfa6:	d022      	beq.n	1004cfee <ADV_ISR+0x20e>
1004cfa8:	4628      	mov	r0, r5
1004cfaa:	f7f5 fb6a 	bl	10042682 <BLEPLAT_CNTR_PacketSetPllTrig>
1004cfae:	7c60      	ldrb	r0, [r4, #17]
1004cfb0:	2801      	cmp	r0, #1
1004cfb2:	d001      	beq.n	1004cfb8 <ADV_ISR+0x1d8>
1004cfb4:	4917      	ldr	r1, [pc, #92]	@ (1004d014 <__arm_cp.48_4>)
1004cfb6:	e000      	b.n	1004cfba <ADV_ISR+0x1da>
1004cfb8:	2146      	movs	r1, #70	@ 0x46
1004cfba:	3514      	adds	r5, #20
1004cfbc:	4628      	mov	r0, r5
1004cfbe:	f7f5 fbc1 	bl	10042744 <BLEPLAT_CNTR_SetRcvLen>
1004cfc2:	8820      	ldrh	r0, [r4, #0]
1004cfc4:	1e40      	subs	r0, r0, #1
1004cfc6:	8020      	strh	r0, [r4, #0]
1004cfc8:	f7f5 fa33 	bl	10042432 <BLEPLAT_CNTR_GlobEnableBlue>
1004cfcc:	2600      	movs	r6, #0
1004cfce:	e00e      	b.n	1004cfee <ADV_ISR+0x20e>
1004cfd0:	f7f4 fde2 	bl	10041b98 <BLEPLAT_ClearRadioTimerValue>
1004cfd4:	4628      	mov	r0, r5
1004cfd6:	f7f5 fb54 	bl	10042682 <BLEPLAT_CNTR_PacketSetPllTrig>
1004cfda:	88e0      	ldrh	r0, [r4, #6]
1004cfdc:	1e40      	subs	r0, r0, #1
1004cfde:	80e0      	strh	r0, [r4, #6]
1004cfe0:	2100      	movs	r1, #0
1004cfe2:	4628      	mov	r0, r5
1004cfe4:	f7ff fd04 	bl	1004c9f0 <ADV_skiproutine>
1004cfe8:	7f20      	ldrb	r0, [r4, #28]
1004cfea:	f000 fb47 	bl	1004d67c <LL_sched_engine>
1004cfee:	2f00      	cmp	r7, #0
1004cff0:	d002      	beq.n	1004cff8 <ADV_ISR+0x218>
1004cff2:	8820      	ldrh	r0, [r4, #0]
1004cff4:	1e40      	subs	r0, r0, #1
1004cff6:	8020      	strh	r0, [r4, #0]
1004cff8:	f7fd ff10 	bl	1004ae1c <log_notify_us_flush_ucfg_weak>
1004cffc:	4630      	mov	r0, r6
1004cffe:	b00d      	add	sp, #52	@ 0x34
1004d000:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d002:	46c0      	nop			@ (mov r8, r8)

1004d004 <__arm_cp.48_0>:
1004d004:	20000b3c 	.word	0x20000b3c

1004d008 <__arm_cp.48_1>:
1004d008:	20000b48 	.word	0x20000b48

1004d00c <__arm_cp.48_2>:
1004d00c:	20000b40 	.word	0x20000b40

1004d010 <__arm_cp.48_3>:
1004d010:	0000fffc 	.word	0x0000fffc

1004d014 <__arm_cp.48_4>:
1004d014:	000002ee 	.word	0x000002ee

1004d018 <hci_le_scan_request_received_event_push>:
1004d018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d01a:	460e      	mov	r6, r1
1004d01c:	4605      	mov	r5, r0
1004d01e:	4815      	ldr	r0, [pc, #84]	@ (1004d074 <__arm_cp.49_0>)
1004d020:	6800      	ldr	r0, [r0, #0]
1004d022:	213d      	movs	r1, #61	@ 0x3d
1004d024:	5c41      	ldrb	r1, [r0, r1]
1004d026:	0689      	lsls	r1, r1, #26
1004d028:	d522      	bpl.n	1004d070 <hci_le_scan_request_received_event_push+0x58>
1004d02a:	303d      	adds	r0, #61	@ 0x3d
1004d02c:	7ac0      	ldrb	r0, [r0, #11]
1004d02e:	0740      	lsls	r0, r0, #29
1004d030:	d51e      	bpl.n	1004d070 <hci_le_scan_request_received_event_push+0x58>
1004d032:	4614      	mov	r4, r2
1004d034:	4810      	ldr	r0, [pc, #64]	@ (1004d078 <__arm_cp.49_1>)
1004d036:	6800      	ldr	r0, [r0, #0]
1004d038:	6940      	ldr	r0, [r0, #20]
1004d03a:	21a1      	movs	r1, #161	@ 0xa1
1004d03c:	222b      	movs	r2, #43	@ 0x2b
1004d03e:	2303      	movs	r3, #3
1004d040:	f7fd fef0 	bl	1004ae24 <aci_event_fifo_push_header>
1004d044:	2800      	cmp	r0, #0
1004d046:	d013      	beq.n	1004d070 <hci_le_scan_request_received_event_push+0x58>
1004d048:	4607      	mov	r7, r0
1004d04a:	7246      	strb	r6, [r0, #9]
1004d04c:	7205      	strb	r5, [r0, #8]
1004d04e:	300a      	adds	r0, #10
1004d050:	2206      	movs	r2, #6
1004d052:	4621      	mov	r1, r4
1004d054:	f7f4 fcdc 	bl	10041a10 <BLEPLAT_MemCpy>
1004d058:	2013      	movs	r0, #19
1004d05a:	71f8      	strb	r0, [r7, #7]
1004d05c:	2009      	movs	r0, #9
1004d05e:	71b8      	strb	r0, [r7, #6]
1004d060:	203e      	movs	r0, #62	@ 0x3e
1004d062:	7178      	strb	r0, [r7, #5]
1004d064:	2004      	movs	r0, #4
1004d066:	7138      	strb	r0, [r7, #4]
1004d068:	20a1      	movs	r0, #161	@ 0xa1
1004d06a:	4639      	mov	r1, r7
1004d06c:	f7fd ff77 	bl	1004af5e <aci_event_fifo_push>
1004d070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004d072:	46c0      	nop			@ (mov r8, r8)

1004d074 <__arm_cp.49_0>:
1004d074:	20000b40 	.word	0x20000b40

1004d078 <__arm_cp.49_1>:
1004d078:	20000b34 	.word	0x20000b34

1004d07c <EADV_start_request_radio_tasks_ucfg_weak>:
1004d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004d07e:	4604      	mov	r4, r0
1004d080:	20d8      	movs	r0, #216	@ 0xd8
1004d082:	21ff      	movs	r1, #255	@ 0xff
1004d084:	5421      	strb	r1, [r4, r0]
1004d086:	20b8      	movs	r0, #184	@ 0xb8
1004d088:	5a27      	ldrh	r7, [r4, r0]
1004d08a:	34b8      	adds	r4, #184	@ 0xb8
1004d08c:	f000 fcca 	bl	1004da24 <LL_sched_reserve_taskslot>
1004d090:	7620      	strb	r0, [r4, #24]
1004d092:	2607      	movs	r6, #7
1004d094:	28ff      	cmp	r0, #255	@ 0xff
1004d096:	d00a      	beq.n	1004d0ae <EADV_start_request_radio_tasks_ucfg_weak+0x32>
1004d098:	2500      	movs	r5, #0
1004d09a:	06f8      	lsls	r0, r7, #27
1004d09c:	d408      	bmi.n	1004d0b0 <EADV_start_request_radio_tasks_ucfg_weak+0x34>
1004d09e:	f000 fcc1 	bl	1004da24 <LL_sched_reserve_taskslot>
1004d0a2:	7660      	strb	r0, [r4, #25]
1004d0a4:	28ff      	cmp	r0, #255	@ 0xff
1004d0a6:	d103      	bne.n	1004d0b0 <EADV_start_request_radio_tasks_ucfg_weak+0x34>
1004d0a8:	7e20      	ldrb	r0, [r4, #24]
1004d0aa:	f000 fcdd 	bl	1004da68 <LL_sched_release_taskslot>
1004d0ae:	4635      	mov	r5, r6
1004d0b0:	4628      	mov	r0, r5
1004d0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004d0b4 <llc_get_channel_sel_algo2_enabled>:
1004d0b4:	b580      	push	{r7, lr}
1004d0b6:	f000 fa45 	bl	1004d544 <llc_get_linkms_cntxt_p>
1004d0ba:	214e      	movs	r1, #78	@ 0x4e
1004d0bc:	5c40      	ldrb	r0, [r0, r1]
1004d0be:	bd80      	pop	{r7, pc}

1004d0c0 <llc_eadv_max_supported_data_check_ucfg_weak>:
1004d0c0:	2000      	movs	r0, #0
1004d0c2:	4770      	bx	lr

1004d0c4 <LL_eadv_start_extended_ucfg_weak>:
1004d0c4:	4770      	bx	lr

1004d0c6 <ext_adv_scan_enabled_ucfg_weak>:
1004d0c6:	2000      	movs	r0, #0
1004d0c8:	4770      	bx	lr

1004d0ca <BLE_STACK_EndOfRadioActivityCb>:
1004d0ca:	4770      	bx	lr

1004d0cc <BLE_STACK_RadioHandler>:
1004d0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d0ce:	b083      	sub	sp, #12
1004d0d0:	4604      	mov	r4, r0
1004d0d2:	484c      	ldr	r0, [pc, #304]	@ (1004d204 <__arm_cp.1_0>)
1004d0d4:	6004      	str	r4, [r0, #0]
1004d0d6:	4620      	mov	r0, r4
1004d0d8:	f7f5 f9fd 	bl	100424d6 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1004d0dc:	4605      	mov	r5, r0
1004d0de:	4620      	mov	r0, r4
1004d0e0:	f7f5 f9e1 	bl	100424a6 <BLEPLAT_CNTR_IntGetIntStatusDone>
1004d0e4:	4606      	mov	r6, r0
1004d0e6:	4668      	mov	r0, sp
1004d0e8:	f7f4 fd5f 	bl	10041baa <BLEPLAT_GetAnchorPoint>
1004d0ec:	9900      	ldr	r1, [sp, #0]
1004d0ee:	1a09      	subs	r1, r1, r0
1004d0f0:	0b4b      	lsrs	r3, r1, #13
1004d0f2:	4945      	ldr	r1, [pc, #276]	@ (1004d208 <__arm_cp.1_1>)
1004d0f4:	680a      	ldr	r2, [r1, #0]
1004d0f6:	4611      	mov	r1, r2
1004d0f8:	31d8      	adds	r1, #216	@ 0xd8
1004d0fa:	2b00      	cmp	r3, #0
1004d0fc:	d102      	bne.n	1004d104 <BLE_STACK_RadioHandler+0x38>
1004d0fe:	6010      	str	r0, [r2, #0]
1004d100:	2001      	movs	r0, #1
1004d102:	e000      	b.n	1004d106 <BLE_STACK_RadioHandler+0x3a>
1004d104:	2000      	movs	r0, #0
1004d106:	7008      	strb	r0, [r1, #0]
1004d108:	4840      	ldr	r0, [pc, #256]	@ (1004d20c <__arm_cp.1_2>)
1004d10a:	6800      	ldr	r0, [r0, #0]
1004d10c:	7b44      	ldrb	r4, [r0, #13]
1004d10e:	2100      	movs	r1, #0
1004d110:	2cff      	cmp	r4, #255	@ 0xff
1004d112:	d00a      	beq.n	1004d12a <BLE_STACK_RadioHandler+0x5e>
1004d114:	202c      	movs	r0, #44	@ 0x2c
1004d116:	4360      	muls	r0, r4
1004d118:	4a3d      	ldr	r2, [pc, #244]	@ (1004d210 <__arm_cp.1_3>)
1004d11a:	6812      	ldr	r2, [r2, #0]
1004d11c:	1810      	adds	r0, r2, r0
1004d11e:	7c82      	ldrb	r2, [r0, #18]
1004d120:	2a00      	cmp	r2, #0
1004d122:	d002      	beq.n	1004d12a <BLE_STACK_RadioHandler+0x5e>
1004d124:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1004d126:	68c0      	ldr	r0, [r0, #12]
1004d128:	e7ff      	b.n	1004d12a <BLE_STACK_RadioHandler+0x5e>
1004d12a:	2701      	movs	r7, #1
1004d12c:	2e00      	cmp	r6, #0
1004d12e:	d003      	beq.n	1004d138 <BLE_STACK_RadioHandler+0x6c>
1004d130:	2d00      	cmp	r5, #0
1004d132:	d101      	bne.n	1004d138 <BLE_STACK_RadioHandler+0x6c>
1004d134:	2900      	cmp	r1, #0
1004d136:	e011      	b.n	1004d15c <BLE_STACK_RadioHandler+0x90>
1004d138:	2d00      	cmp	r5, #0
1004d13a:	d015      	beq.n	1004d168 <BLE_STACK_RadioHandler+0x9c>
1004d13c:	4a35      	ldr	r2, [pc, #212]	@ (1004d214 <__arm_cp.1_4>)
1004d13e:	1a8b      	subs	r3, r1, r2
1004d140:	425a      	negs	r2, r3
1004d142:	415a      	adcs	r2, r3
1004d144:	4b34      	ldr	r3, [pc, #208]	@ (1004d218 <__arm_cp.1_5>)
1004d146:	1acd      	subs	r5, r1, r3
1004d148:	426b      	negs	r3, r5
1004d14a:	416b      	adcs	r3, r5
1004d14c:	4d33      	ldr	r5, [pc, #204]	@ (1004d21c <__arm_cp.1_6>)
1004d14e:	1b4e      	subs	r6, r1, r5
1004d150:	4275      	negs	r5, r6
1004d152:	4175      	adcs	r5, r6
1004d154:	2900      	cmp	r1, #0
1004d156:	d007      	beq.n	1004d168 <BLE_STACK_RadioHandler+0x9c>
1004d158:	4313      	orrs	r3, r2
1004d15a:	431d      	orrs	r5, r3
1004d15c:	4e2a      	ldr	r6, [pc, #168]	@ (1004d208 <__arm_cp.1_1>)
1004d15e:	4d29      	ldr	r5, [pc, #164]	@ (1004d204 <__arm_cp.1_0>)
1004d160:	d004      	beq.n	1004d16c <BLE_STACK_RadioHandler+0xa0>
1004d162:	4788      	blx	r1
1004d164:	2700      	movs	r7, #0
1004d166:	e001      	b.n	1004d16c <BLE_STACK_RadioHandler+0xa0>
1004d168:	4e27      	ldr	r6, [pc, #156]	@ (1004d208 <__arm_cp.1_1>)
1004d16a:	4d26      	ldr	r5, [pc, #152]	@ (1004d204 <__arm_cp.1_0>)
1004d16c:	6828      	ldr	r0, [r5, #0]
1004d16e:	f7f5 f9a6 	bl	100424be <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1004d172:	2800      	cmp	r0, #0
1004d174:	d001      	beq.n	1004d17a <BLE_STACK_RadioHandler+0xae>
1004d176:	2504      	movs	r5, #4
1004d178:	e020      	b.n	1004d1bc <BLE_STACK_RadioHandler+0xf0>
1004d17a:	6828      	ldr	r0, [r5, #0]
1004d17c:	f7f5 f97e 	bl	1004247c <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1004d180:	2800      	cmp	r0, #0
1004d182:	d001      	beq.n	1004d188 <BLE_STACK_RadioHandler+0xbc>
1004d184:	2501      	movs	r5, #1
1004d186:	e019      	b.n	1004d1bc <BLE_STACK_RadioHandler+0xf0>
1004d188:	6828      	ldr	r0, [r5, #0]
1004d18a:	f7f5 f983 	bl	10042494 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1004d18e:	2800      	cmp	r0, #0
1004d190:	d001      	beq.n	1004d196 <BLE_STACK_RadioHandler+0xca>
1004d192:	2502      	movs	r5, #2
1004d194:	e012      	b.n	1004d1bc <BLE_STACK_RadioHandler+0xf0>
1004d196:	6828      	ldr	r0, [r5, #0]
1004d198:	f7f5 f9a9 	bl	100424ee <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1004d19c:	4629      	mov	r1, r5
1004d19e:	2505      	movs	r5, #5
1004d1a0:	2800      	cmp	r0, #0
1004d1a2:	d10b      	bne.n	1004d1bc <BLE_STACK_RadioHandler+0xf0>
1004d1a4:	6808      	ldr	r0, [r1, #0]
1004d1a6:	f7f5 f9ae 	bl	10042506 <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1004d1aa:	2800      	cmp	r0, #0
1004d1ac:	d106      	bne.n	1004d1bc <BLE_STACK_RadioHandler+0xf0>
1004d1ae:	4815      	ldr	r0, [pc, #84]	@ (1004d204 <__arm_cp.1_0>)
1004d1b0:	6800      	ldr	r0, [r0, #0]
1004d1b2:	f7f5 f955 	bl	10042460 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1004d1b6:	2800      	cmp	r0, #0
1004d1b8:	d020      	beq.n	1004d1fc <BLE_STACK_RadioHandler+0x130>
1004d1ba:	2500      	movs	r5, #0
1004d1bc:	2001      	movs	r0, #1
1004d1be:	40a8      	lsls	r0, r5
1004d1c0:	4917      	ldr	r1, [pc, #92]	@ (1004d220 <__arm_cp.1_7>)
1004d1c2:	6809      	ldr	r1, [r1, #0]
1004d1c4:	680a      	ldr	r2, [r1, #0]
1004d1c6:	4302      	orrs	r2, r0
1004d1c8:	600a      	str	r2, [r1, #0]
1004d1ca:	2000      	movs	r0, #0
1004d1cc:	f000 ffc0 	bl	1004e150 <tsk_notify_idx>
1004d1d0:	f7f4 fa41 	bl	10041656 <BLE_STACK_ProcessRequest>
1004d1d4:	f7f4 fce0 	bl	10041b98 <BLEPLAT_ClearRadioTimerValue>
1004d1d8:	4620      	mov	r0, r4
1004d1da:	f000 fa4f 	bl	1004d67c <LL_sched_engine>
1004d1de:	6834      	ldr	r4, [r6, #0]
1004d1e0:	7d60      	ldrb	r0, [r4, #21]
1004d1e2:	2801      	cmp	r0, #1
1004d1e4:	d108      	bne.n	1004d1f8 <BLE_STACK_RadioHandler+0x12c>
1004d1e6:	7c21      	ldrb	r1, [r4, #16]
1004d1e8:	200f      	movs	r0, #15
1004d1ea:	4008      	ands	r0, r1
1004d1ec:	68e2      	ldr	r2, [r4, #12]
1004d1ee:	0909      	lsrs	r1, r1, #4
1004d1f0:	f7ff ff6b 	bl	1004d0ca <BLE_STACK_EndOfRadioActivityCb>
1004d1f4:	2000      	movs	r0, #0
1004d1f6:	7560      	strb	r0, [r4, #21]
1004d1f8:	b003      	add	sp, #12
1004d1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d1fc:	2f00      	cmp	r7, #0
1004d1fe:	d1e9      	bne.n	1004d1d4 <BLE_STACK_RadioHandler+0x108>
1004d200:	e7ed      	b.n	1004d1de <BLE_STACK_RadioHandler+0x112>
1004d202:	46c0      	nop			@ (mov r8, r8)

1004d204 <__arm_cp.1_0>:
1004d204:	20000b3c 	.word	0x20000b3c

1004d208 <__arm_cp.1_1>:
1004d208:	20000b40 	.word	0x20000b40

1004d20c <__arm_cp.1_2>:
1004d20c:	20000b44 	.word	0x20000b44

1004d210 <__arm_cp.1_3>:
1004d210:	20000b48 	.word	0x20000b48

1004d214 <__arm_cp.1_4>:
1004d214:	1004e901 	.word	0x1004e901

1004d218 <__arm_cp.1_5>:
1004d218:	1004e8ad 	.word	0x1004e8ad

1004d21c <__arm_cp.1_6>:
1004d21c:	1004e905 	.word	0x1004e905

1004d220 <__arm_cp.1_7>:
1004d220:	20000b34 	.word	0x20000b34

1004d224 <LL_init_ucfg_weak>:
1004d224:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d226:	b091      	sub	sp, #68	@ 0x44
1004d228:	9306      	str	r3, [sp, #24]
1004d22a:	4614      	mov	r4, r2
1004d22c:	910d      	str	r1, [sp, #52]	@ 0x34
1004d22e:	900b      	str	r0, [sp, #44]	@ 0x2c
1004d230:	48b8      	ldr	r0, [pc, #736]	@ (1004d514 <__arm_cp.6_0>)
1004d232:	7ac1      	ldrb	r1, [r0, #11]
1004d234:	910c      	str	r1, [sp, #48]	@ 0x30
1004d236:	7f01      	ldrb	r1, [r0, #28]
1004d238:	9109      	str	r1, [sp, #36]	@ 0x24
1004d23a:	7ec1      	ldrb	r1, [r0, #27]
1004d23c:	910a      	str	r1, [sp, #40]	@ 0x28
1004d23e:	7e81      	ldrb	r1, [r0, #26]
1004d240:	9108      	str	r1, [sp, #32]
1004d242:	7fc7      	ldrb	r7, [r0, #31]
1004d244:	2501      	movs	r5, #1
1004d246:	21e8      	movs	r1, #232	@ 0xe8
1004d248:	4628      	mov	r0, r5
1004d24a:	f000 fc73 	bl	1004db34 <csmem_mem_0_assign>
1004d24e:	4eb2      	ldr	r6, [pc, #712]	@ (1004d518 <__arm_cp.6_1>)
1004d250:	6030      	str	r0, [r6, #0]
1004d252:	2158      	movs	r1, #88	@ 0x58
1004d254:	4628      	mov	r0, r5
1004d256:	f000 fc6d 	bl	1004db34 <csmem_mem_0_assign>
1004d25a:	6831      	ldr	r1, [r6, #0]
1004d25c:	229c      	movs	r2, #156	@ 0x9c
1004d25e:	9207      	str	r2, [sp, #28]
1004d260:	5088      	str	r0, [r1, r2]
1004d262:	4638      	mov	r0, r7
1004d264:	f001 fac0 	bl	1004e7e8 <llc_wl_mem_allocate>
1004d268:	2107      	movs	r1, #7
1004d26a:	4039      	ands	r1, r7
1004d26c:	9806      	ldr	r0, [sp, #24]
1004d26e:	f001 facd 	bl	1004e80c <llc_priv_mem_allocate>
1004d272:	981c      	ldr	r0, [sp, #112]	@ 0x70
1004d274:	9000      	str	r0, [sp, #0]
1004d276:	ab19      	add	r3, sp, #100	@ 0x64
1004d278:	cb0e      	ldmia	r3, {r1, r2, r3}
1004d27a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004d27c:	9106      	str	r1, [sp, #24]
1004d27e:	930d      	str	r3, [sp, #52]	@ 0x34
1004d280:	f7fe fce0 	bl	1004bc44 <llc_conn_mem_allocate>
1004d284:	2c01      	cmp	r4, #1
1004d286:	d000      	beq.n	1004d28a <LL_init_ucfg_weak+0x66>
1004d288:	9508      	str	r5, [sp, #32]
1004d28a:	2000      	movs	r0, #0
1004d28c:	2c01      	cmp	r4, #1
1004d28e:	d000      	beq.n	1004d292 <LL_init_ucfg_weak+0x6e>
1004d290:	900a      	str	r0, [sp, #40]	@ 0x28
1004d292:	2c01      	cmp	r4, #1
1004d294:	4fa0      	ldr	r7, [pc, #640]	@ (1004d518 <__arm_cp.6_1>)
1004d296:	d000      	beq.n	1004d29a <LL_init_ucfg_weak+0x76>
1004d298:	9009      	str	r0, [sp, #36]	@ 0x24
1004d29a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
1004d29c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004d29e:	2801      	cmp	r0, #1
1004d2a0:	9205      	str	r2, [sp, #20]
1004d2a2:	d118      	bne.n	1004d2d6 <LL_init_ucfg_weak+0xb2>
1004d2a4:	2029      	movs	r0, #41	@ 0x29
1004d2a6:	499b      	ldr	r1, [pc, #620]	@ (1004d514 <__arm_cp.6_0>)
1004d2a8:	5c08      	ldrb	r0, [r1, r0]
1004d2aa:	1e41      	subs	r1, r0, #1
1004d2ac:	4188      	sbcs	r0, r1
1004d2ae:	4310      	orrs	r0, r2
1004d2b0:	d001      	beq.n	1004d2b6 <LL_init_ucfg_weak+0x92>
1004d2b2:	2530      	movs	r5, #48	@ 0x30
1004d2b4:	e000      	b.n	1004d2b8 <LL_init_ucfg_weak+0x94>
1004d2b6:	2520      	movs	r5, #32
1004d2b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1004d2ba:	4630      	mov	r0, r6
1004d2bc:	4629      	mov	r1, r5
1004d2be:	f000 fc39 	bl	1004db34 <csmem_mem_0_assign>
1004d2c2:	6839      	ldr	r1, [r7, #0]
1004d2c4:	2294      	movs	r2, #148	@ 0x94
1004d2c6:	5088      	str	r0, [r1, r2]
1004d2c8:	4630      	mov	r0, r6
1004d2ca:	4629      	mov	r1, r5
1004d2cc:	f000 fc32 	bl	1004db34 <csmem_mem_0_assign>
1004d2d0:	6839      	ldr	r1, [r7, #0]
1004d2d2:	2298      	movs	r2, #152	@ 0x98
1004d2d4:	5088      	str	r0, [r1, r2]
1004d2d6:	262c      	movs	r6, #44	@ 0x2c
1004d2d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
1004d2da:	4631      	mov	r1, r6
1004d2dc:	f000 fc2a 	bl	1004db34 <csmem_mem_0_assign>
1004d2e0:	6839      	ldr	r1, [r7, #0]
1004d2e2:	22a4      	movs	r2, #164	@ 0xa4
1004d2e4:	5088      	str	r0, [r1, r2]
1004d2e6:	2041      	movs	r0, #65	@ 0x41
1004d2e8:	0082      	lsls	r2, r0, #2
1004d2ea:	2c01      	cmp	r4, #1
1004d2ec:	9402      	str	r4, [sp, #8]
1004d2ee:	d10a      	bne.n	1004d306 <LL_init_ucfg_weak+0xe2>
1004d2f0:	4611      	mov	r1, r2
1004d2f2:	3120      	adds	r1, #32
1004d2f4:	2001      	movs	r0, #1
1004d2f6:	4614      	mov	r4, r2
1004d2f8:	f000 fc1c 	bl	1004db34 <csmem_mem_0_assign>
1004d2fc:	6839      	ldr	r1, [r7, #0]
1004d2fe:	228c      	movs	r2, #140	@ 0x8c
1004d300:	5088      	str	r0, [r1, r2]
1004d302:	4621      	mov	r1, r4
1004d304:	e038      	b.n	1004d378 <LL_init_ucfg_weak+0x154>
1004d306:	2125      	movs	r1, #37	@ 0x25
1004d308:	4882      	ldr	r0, [pc, #520]	@ (1004d514 <__arm_cp.6_0>)
1004d30a:	910c      	str	r1, [sp, #48]	@ 0x30
1004d30c:	5c41      	ldrb	r1, [r0, r1]
1004d30e:	4610      	mov	r0, r2
1004d310:	3020      	adds	r0, #32
1004d312:	2900      	cmp	r1, #0
1004d314:	9201      	str	r2, [sp, #4]
1004d316:	d001      	beq.n	1004d31c <LL_init_ucfg_weak+0xf8>
1004d318:	4601      	mov	r1, r0
1004d31a:	e000      	b.n	1004d31e <LL_init_ucfg_weak+0xfa>
1004d31c:	2144      	movs	r1, #68	@ 0x44
1004d31e:	2726      	movs	r7, #38	@ 0x26
1004d320:	4a7c      	ldr	r2, [pc, #496]	@ (1004d514 <__arm_cp.6_0>)
1004d322:	5dd2      	ldrb	r2, [r2, r7]
1004d324:	2a00      	cmp	r2, #0
1004d326:	d000      	beq.n	1004d32a <LL_init_ucfg_weak+0x106>
1004d328:	4601      	mov	r1, r0
1004d32a:	2529      	movs	r5, #41	@ 0x29
1004d32c:	4a79      	ldr	r2, [pc, #484]	@ (1004d514 <__arm_cp.6_0>)
1004d32e:	5d52      	ldrb	r2, [r2, r5]
1004d330:	2a00      	cmp	r2, #0
1004d332:	d000      	beq.n	1004d336 <LL_init_ucfg_weak+0x112>
1004d334:	4601      	mov	r1, r0
1004d336:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1004d338:	2a01      	cmp	r2, #1
1004d33a:	d100      	bne.n	1004d33e <LL_init_ucfg_weak+0x11a>
1004d33c:	4601      	mov	r1, r0
1004d33e:	2001      	movs	r0, #1
1004d340:	f000 fbf8 	bl	1004db34 <csmem_mem_0_assign>
1004d344:	4974      	ldr	r1, [pc, #464]	@ (1004d518 <__arm_cp.6_1>)
1004d346:	6809      	ldr	r1, [r1, #0]
1004d348:	228c      	movs	r2, #140	@ 0x8c
1004d34a:	5088      	str	r0, [r1, r2]
1004d34c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d34e:	2801      	cmp	r0, #1
1004d350:	9c01      	ldr	r4, [sp, #4]
1004d352:	4621      	mov	r1, r4
1004d354:	d010      	beq.n	1004d378 <LL_init_ucfg_weak+0x154>
1004d356:	486f      	ldr	r0, [pc, #444]	@ (1004d514 <__arm_cp.6_0>)
1004d358:	5d40      	ldrb	r0, [r0, r5]
1004d35a:	2800      	cmp	r0, #0
1004d35c:	4621      	mov	r1, r4
1004d35e:	d10b      	bne.n	1004d378 <LL_init_ucfg_weak+0x154>
1004d360:	486c      	ldr	r0, [pc, #432]	@ (1004d514 <__arm_cp.6_0>)
1004d362:	5dc0      	ldrb	r0, [r0, r7]
1004d364:	2800      	cmp	r0, #0
1004d366:	4621      	mov	r1, r4
1004d368:	d106      	bne.n	1004d378 <LL_init_ucfg_weak+0x154>
1004d36a:	486a      	ldr	r0, [pc, #424]	@ (1004d514 <__arm_cp.6_0>)
1004d36c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004d36e:	5c40      	ldrb	r0, [r0, r1]
1004d370:	2800      	cmp	r0, #0
1004d372:	d000      	beq.n	1004d376 <LL_init_ucfg_weak+0x152>
1004d374:	4626      	mov	r6, r4
1004d376:	4631      	mov	r1, r6
1004d378:	9818      	ldr	r0, [sp, #96]	@ 0x60
1004d37a:	900b      	str	r0, [sp, #44]	@ 0x2c
1004d37c:	9816      	ldr	r0, [sp, #88]	@ 0x58
1004d37e:	9003      	str	r0, [sp, #12]
1004d380:	2601      	movs	r6, #1
1004d382:	4d66      	ldr	r5, [pc, #408]	@ (1004d51c <__arm_cp.6_2>)
1004d384:	4630      	mov	r0, r6
1004d386:	47a8      	blx	r5
1004d388:	4f63      	ldr	r7, [pc, #396]	@ (1004d518 <__arm_cp.6_1>)
1004d38a:	6839      	ldr	r1, [r7, #0]
1004d38c:	2290      	movs	r2, #144	@ 0x90
1004d38e:	5088      	str	r0, [r1, r2]
1004d390:	2110      	movs	r1, #16
1004d392:	4630      	mov	r0, r6
1004d394:	47a8      	blx	r5
1004d396:	6839      	ldr	r1, [r7, #0]
1004d398:	22a0      	movs	r2, #160	@ 0xa0
1004d39a:	9204      	str	r2, [sp, #16]
1004d39c:	5088      	str	r0, [r1, r2]
1004d39e:	2104      	movs	r1, #4
1004d3a0:	4630      	mov	r0, r6
1004d3a2:	47a8      	blx	r5
1004d3a4:	6839      	ldr	r1, [r7, #0]
1004d3a6:	22a8      	movs	r2, #168	@ 0xa8
1004d3a8:	5088      	str	r0, [r1, r2]
1004d3aa:	2134      	movs	r1, #52	@ 0x34
1004d3ac:	960c      	str	r6, [sp, #48]	@ 0x30
1004d3ae:	4630      	mov	r0, r6
1004d3b0:	47a8      	blx	r5
1004d3b2:	6839      	ldr	r1, [r7, #0]
1004d3b4:	22ac      	movs	r2, #172	@ 0xac
1004d3b6:	5088      	str	r0, [r1, r2]
1004d3b8:	9808      	ldr	r0, [sp, #32]
1004d3ba:	b2c7      	uxtb	r7, r0
1004d3bc:	1f21      	subs	r1, r4, #4
1004d3be:	4638      	mov	r0, r7
1004d3c0:	47a8      	blx	r5
1004d3c2:	4605      	mov	r5, r0
1004d3c4:	9c02      	ldr	r4, [sp, #8]
1004d3c6:	2c01      	cmp	r4, #1
1004d3c8:	d105      	bne.n	1004d3d6 <LL_init_ucfg_weak+0x1b2>
1004d3ca:	215c      	movs	r1, #92	@ 0x5c
1004d3cc:	4638      	mov	r0, r7
1004d3ce:	f000 fbb1 	bl	1004db34 <csmem_mem_0_assign>
1004d3d2:	4602      	mov	r2, r0
1004d3d4:	e000      	b.n	1004d3d8 <LL_init_ucfg_weak+0x1b4>
1004d3d6:	2200      	movs	r2, #0
1004d3d8:	4638      	mov	r0, r7
1004d3da:	4629      	mov	r1, r5
1004d3dc:	f7fe ff7a 	bl	1004c2d4 <EADV_init>
1004d3e0:	ab10      	add	r3, sp, #64	@ 0x40
1004d3e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004d3e4:	70d8      	strb	r0, [r3, #3]
1004d3e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004d3e8:	7098      	strb	r0, [r3, #2]
1004d3ea:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1004d3ec:	705e      	strb	r6, [r3, #1]
1004d3ee:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d3f0:	7018      	strb	r0, [r3, #0]
1004d3f2:	4620      	mov	r0, r4
1004d3f4:	9d05      	ldr	r5, [sp, #20]
1004d3f6:	4629      	mov	r1, r5
1004d3f8:	463a      	mov	r2, r7
1004d3fa:	f001 fa05 	bl	1004e808 <llc_padv_mem_allocate_ucfg_weak>
1004d3fe:	9f03      	ldr	r7, [sp, #12]
1004d400:	4638      	mov	r0, r7
1004d402:	4621      	mov	r1, r4
1004d404:	f7fe fe2d 	bl	1004c062 <llc_scan_mem_allocate_ucfg_weak>
1004d408:	4638      	mov	r0, r7
1004d40a:	4621      	mov	r1, r4
1004d40c:	462a      	mov	r2, r5
1004d40e:	f001 fa5e 	bl	1004e8ce <llc_pscan_mem_allocate_ucfg_weak>
1004d412:	4638      	mov	r0, r7
1004d414:	4621      	mov	r1, r4
1004d416:	462a      	mov	r2, r5
1004d418:	4633      	mov	r3, r6
1004d41a:	f7fe fe35 	bl	1004c088 <llc_past_mem_allocate_ucfg_weak>
1004d41e:	9600      	str	r6, [sp, #0]
1004d420:	463e      	mov	r6, r7
1004d422:	4638      	mov	r0, r7
1004d424:	4621      	mov	r1, r4
1004d426:	462a      	mov	r2, r5
1004d428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1004d42a:	f001 fa51 	bl	1004e8d0 <llc_pscan_wr_mem_allocate_ucfg_weak>
1004d42e:	f7fe fe00 	bl	1004c032 <llc_iso_cmn_mem_alloc_ucfg_weak>
1004d432:	2c01      	cmp	r4, #1
1004d434:	d107      	bne.n	1004d446 <LL_init_ucfg_weak+0x222>
1004d436:	2d01      	cmp	r5, #1
1004d438:	d105      	bne.n	1004d446 <LL_init_ucfg_weak+0x222>
1004d43a:	f001 f97a 	bl	1004e732 <llc_big_brc_mem_alloc_ucfg_weak>
1004d43e:	2e01      	cmp	r6, #1
1004d440:	d101      	bne.n	1004d446 <LL_init_ucfg_weak+0x222>
1004d442:	f001 f977 	bl	1004e734 <llc_big_sync_mem_alloc_ucfg_weak>
1004d446:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004d448:	2801      	cmp	r0, #1
1004d44a:	4f33      	ldr	r7, [pc, #204]	@ (1004d518 <__arm_cp.6_1>)
1004d44c:	d101      	bne.n	1004d452 <LL_init_ucfg_weak+0x22e>
1004d44e:	f001 f972 	bl	1004e736 <llc_cig_cmn_mem_alloc_ucfg_weak>
1004d452:	f7fe fde7 	bl	1004c024 <llc_isoal_mem_alloc_ucfg_weak>
1004d456:	9806      	ldr	r0, [sp, #24]
1004d458:	4631      	mov	r1, r6
1004d45a:	4622      	mov	r2, r4
1004d45c:	462b      	mov	r3, r5
1004d45e:	f7fe fe20 	bl	1004c0a2 <llc_cte_mem_allocate_ucfg_weak>
1004d462:	4e2c      	ldr	r6, [pc, #176]	@ (1004d514 <__arm_cp.6_0>)
1004d464:	7af0      	ldrb	r0, [r6, #11]
1004d466:	1c41      	adds	r1, r0, #1
1004d468:	4d2d      	ldr	r5, [pc, #180]	@ (1004d520 <__arm_cp.6_3>)
1004d46a:	4628      	mov	r0, r5
1004d46c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004d46e:	f000 fb4f 	bl	1004db10 <csmem_mem_assign>
1004d472:	6839      	ldr	r1, [r7, #0]
1004d474:	22d0      	movs	r2, #208	@ 0xd0
1004d476:	5088      	str	r0, [r1, r2]
1004d478:	7af1      	ldrb	r1, [r6, #11]
1004d47a:	2202      	movs	r2, #2
1004d47c:	4628      	mov	r0, r5
1004d47e:	f000 fb47 	bl	1004db10 <csmem_mem_assign>
1004d482:	6839      	ldr	r1, [r7, #0]
1004d484:	460a      	mov	r2, r1
1004d486:	32a0      	adds	r2, #160	@ 0xa0
1004d488:	6350      	str	r0, [r2, #52]	@ 0x34
1004d48a:	9804      	ldr	r0, [sp, #16]
1004d48c:	5808      	ldr	r0, [r1, r0]
1004d48e:	6078      	str	r0, [r7, #4]
1004d490:	6850      	ldr	r0, [r2, #4]
1004d492:	60b8      	str	r0, [r7, #8]
1004d494:	4620      	mov	r0, r4
1004d496:	f7fe fde3 	bl	1004c060 <llc_scan_init_ucfg_weak>
1004d49a:	f001 fa17 	bl	1004e8cc <llc_pscan_init_ucfg_weak>
1004d49e:	f000 f863 	bl	1004d568 <LL_sched_init>
1004d4a2:	f7fe fe03 	bl	1004c0ac <LL_dtm_init>
1004d4a6:	f001 f9b0 	bl	1004e80a <llc_padv_init_ucfg_weak>
1004d4aa:	f7fe fdf9 	bl	1004c0a0 <llc_cte_init_ucfg_weak>
1004d4ae:	f7fe fb27 	bl	1004bb00 <HCI_Init>
1004d4b2:	f7f4 fb19 	bl	10041ae8 <BLEPLAT_GetDefaultPALevel>
1004d4b6:	6839      	ldr	r1, [r7, #0]
1004d4b8:	2400      	movs	r4, #0
1004d4ba:	728c      	strb	r4, [r1, #10]
1004d4bc:	7248      	strb	r0, [r1, #9]
1004d4be:	4620      	mov	r0, r4
1004d4c0:	f7f4 fb1a 	bl	10041af8 <BLEPLAT_SetHighPower>
1004d4c4:	f7fd fb1c 	bl	1004ab00 <ble_HAL_Init>
1004d4c8:	6838      	ldr	r0, [r7, #0]
1004d4ca:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1004d4cc:	f7fe fddd 	bl	1004c08a <LLC_pcl_hal_cntxt_init_ucfg_weak>
1004d4d0:	6838      	ldr	r0, [r7, #0]
1004d4d2:	9d07      	ldr	r5, [sp, #28]
1004d4d4:	5940      	ldr	r0, [r0, r5]
1004d4d6:	300c      	adds	r0, #12
1004d4d8:	f000 ffda 	bl	1004e490 <addr8_list_clear>
1004d4dc:	463e      	mov	r6, r7
1004d4de:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
1004d4e0:	4638      	mov	r0, r7
1004d4e2:	f7fe fdac 	bl	1004c03e <llc_priv_init_ucfg_weak>
1004d4e6:	6830      	ldr	r0, [r6, #0]
1004d4e8:	5941      	ldr	r1, [r0, r5]
1004d4ea:	2240      	movs	r2, #64	@ 0x40
1004d4ec:	548c      	strb	r4, [r1, r2]
1004d4ee:	4a09      	ldr	r2, [pc, #36]	@ (1004d514 <__arm_cp.6_0>)
1004d4f0:	8b12      	ldrh	r2, [r2, #24]
1004d4f2:	8302      	strh	r2, [r0, #24]
1004d4f4:	201f      	movs	r0, #31
1004d4f6:	900f      	str	r0, [sp, #60]	@ 0x3c
1004d4f8:	43e0      	mvns	r0, r4
1004d4fa:	900e      	str	r0, [sp, #56]	@ 0x38
1004d4fc:	3148      	adds	r1, #72	@ 0x48
1004d4fe:	a80e      	add	r0, sp, #56	@ 0x38
1004d500:	2205      	movs	r2, #5
1004d502:	f000 ff73 	bl	1004e3ec <char_copy>
1004d506:	6830      	ldr	r0, [r6, #0]
1004d508:	5940      	ldr	r0, [r0, r5]
1004d50a:	02f9      	lsls	r1, r7, #11
1004d50c:	2254      	movs	r2, #84	@ 0x54
1004d50e:	5281      	strh	r1, [r0, r2]
1004d510:	b011      	add	sp, #68	@ 0x44
1004d512:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004d514 <__arm_cp.6_0>:
1004d514:	20000b50 	.word	0x20000b50

1004d518 <__arm_cp.6_1>:
1004d518:	20000b40 	.word	0x20000b40

1004d51c <__arm_cp.6_2>:
1004d51c:	1004db35 	.word	0x1004db35

1004d520 <__arm_cp.6_3>:
1004d520:	20000b4c 	.word	0x20000b4c

1004d524 <LL_get_tx_common_buffer_p>:
1004d524:	4802      	ldr	r0, [pc, #8]	@ (1004d530 <__arm_cp.11_0>)
1004d526:	6800      	ldr	r0, [r0, #0]
1004d528:	218c      	movs	r1, #140	@ 0x8c
1004d52a:	5840      	ldr	r0, [r0, r1]
1004d52c:	4770      	bx	lr
1004d52e:	46c0      	nop			@ (mov r8, r8)

1004d530 <__arm_cp.11_0>:
1004d530:	20000b40 	.word	0x20000b40

1004d534 <LL_get_rx_common_buffer_p>:
1004d534:	4802      	ldr	r0, [pc, #8]	@ (1004d540 <__arm_cp.12_0>)
1004d536:	6800      	ldr	r0, [r0, #0]
1004d538:	2190      	movs	r1, #144	@ 0x90
1004d53a:	5840      	ldr	r0, [r0, r1]
1004d53c:	4770      	bx	lr
1004d53e:	46c0      	nop			@ (mov r8, r8)

1004d540 <__arm_cp.12_0>:
1004d540:	20000b40 	.word	0x20000b40

1004d544 <llc_get_linkms_cntxt_p>:
1004d544:	4802      	ldr	r0, [pc, #8]	@ (1004d550 <__arm_cp.15_0>)
1004d546:	6800      	ldr	r0, [r0, #0]
1004d548:	219c      	movs	r1, #156	@ 0x9c
1004d54a:	5840      	ldr	r0, [r0, r1]
1004d54c:	4770      	bx	lr
1004d54e:	46c0      	nop			@ (mov r8, r8)

1004d550 <__arm_cp.15_0>:
1004d550:	20000b40 	.word	0x20000b40

1004d554 <LL_sched_time_t1_ge_t2>:
1004d554:	43c0      	mvns	r0, r0
1004d556:	1840      	adds	r0, r0, r1
1004d558:	0fc0      	lsrs	r0, r0, #31
1004d55a:	4770      	bx	lr

1004d55c <LL_sched_engine_return_actual_scheduler_margin>:
1004d55c:	4801      	ldr	r0, [pc, #4]	@ (1004d564 <__arm_cp.2_0>)
1004d55e:	6800      	ldr	r0, [r0, #0]
1004d560:	6880      	ldr	r0, [r0, #8]
1004d562:	4770      	bx	lr

1004d564 <__arm_cp.2_0>:
1004d564:	20000b44 	.word	0x20000b44

1004d568 <LL_sched_init>:
1004d568:	4809      	ldr	r0, [pc, #36]	@ (1004d590 <__arm_cp.4_0>)
1004d56a:	7ac0      	ldrb	r0, [r0, #11]
1004d56c:	4909      	ldr	r1, [pc, #36]	@ (1004d594 <__arm_cp.4_1>)
1004d56e:	6809      	ldr	r1, [r1, #0]
1004d570:	3112      	adds	r1, #18
1004d572:	2800      	cmp	r0, #0
1004d574:	d004      	beq.n	1004d580 <LL_sched_init+0x18>
1004d576:	2200      	movs	r2, #0
1004d578:	800a      	strh	r2, [r1, #0]
1004d57a:	312c      	adds	r1, #44	@ 0x2c
1004d57c:	1e40      	subs	r0, r0, #1
1004d57e:	e7f8      	b.n	1004d572 <LL_sched_init+0xa>
1004d580:	4805      	ldr	r0, [pc, #20]	@ (1004d598 <__arm_cp.4_2>)
1004d582:	6800      	ldr	r0, [r0, #0]
1004d584:	2100      	movs	r1, #0
1004d586:	73c1      	strb	r1, [r0, #15]
1004d588:	21ff      	movs	r1, #255	@ 0xff
1004d58a:	0209      	lsls	r1, r1, #8
1004d58c:	8181      	strh	r1, [r0, #12]
1004d58e:	4770      	bx	lr

1004d590 <__arm_cp.4_0>:
1004d590:	20000b50 	.word	0x20000b50

1004d594 <__arm_cp.4_1>:
1004d594:	20000b48 	.word	0x20000b48

1004d598 <__arm_cp.4_2>:
1004d598:	20000b44 	.word	0x20000b44

1004d59c <LL_sched_set_anchor>:
1004d59c:	222c      	movs	r2, #44	@ 0x2c
1004d59e:	4342      	muls	r2, r0
1004d5a0:	4801      	ldr	r0, [pc, #4]	@ (1004d5a8 <__arm_cp.5_0>)
1004d5a2:	6800      	ldr	r0, [r0, #0]
1004d5a4:	5081      	str	r1, [r0, r2]
1004d5a6:	4770      	bx	lr

1004d5a8 <__arm_cp.5_0>:
1004d5a8:	20000b48 	.word	0x20000b48

1004d5ac <LL_sched_set_cancel_request>:
1004d5ac:	28ff      	cmp	r0, #255	@ 0xff
1004d5ae:	d00b      	beq.n	1004d5c8 <LL_sched_set_cancel_request+0x1c>
1004d5b0:	212c      	movs	r1, #44	@ 0x2c
1004d5b2:	4341      	muls	r1, r0
1004d5b4:	4805      	ldr	r0, [pc, #20]	@ (1004d5cc <__arm_cp.9_0>)
1004d5b6:	6800      	ldr	r0, [r0, #0]
1004d5b8:	1840      	adds	r0, r0, r1
1004d5ba:	7c81      	ldrb	r1, [r0, #18]
1004d5bc:	2908      	cmp	r1, #8
1004d5be:	d001      	beq.n	1004d5c4 <LL_sched_set_cancel_request+0x18>
1004d5c0:	2110      	movs	r1, #16
1004d5c2:	e000      	b.n	1004d5c6 <LL_sched_set_cancel_request+0x1a>
1004d5c4:	2120      	movs	r1, #32
1004d5c6:	7481      	strb	r1, [r0, #18]
1004d5c8:	4770      	bx	lr
1004d5ca:	46c0      	nop			@ (mov r8, r8)

1004d5cc <__arm_cp.9_0>:
1004d5cc:	20000b48 	.word	0x20000b48

1004d5d0 <LL_sched_enable_taskslot>:
1004d5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d5d2:	b088      	sub	sp, #32
1004d5d4:	9307      	str	r3, [sp, #28]
1004d5d6:	272c      	movs	r7, #44	@ 0x2c
1004d5d8:	4347      	muls	r7, r0
1004d5da:	481a      	ldr	r0, [pc, #104]	@ (1004d644 <__arm_cp.10_0>)
1004d5dc:	6806      	ldr	r6, [r0, #0]
1004d5de:	19f0      	adds	r0, r6, r7
1004d5e0:	7c84      	ldrb	r4, [r0, #18]
1004d5e2:	2c01      	cmp	r4, #1
1004d5e4:	d12b      	bne.n	1004d63e <LL_sched_enable_taskslot+0x6e>
1004d5e6:	4603      	mov	r3, r0
1004d5e8:	3312      	adds	r3, #18
1004d5ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1004d5ec:	9506      	str	r5, [sp, #24]
1004d5ee:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1004d5f0:	9505      	str	r5, [sp, #20]
1004d5f2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1004d5f4:	9503      	str	r5, [sp, #12]
1004d5f6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
1004d5f8:	9502      	str	r5, [sp, #8]
1004d5fa:	9104      	str	r1, [sp, #16]
1004d5fc:	9910      	ldr	r1, [sp, #64]	@ 0x40
1004d5fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004d600:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1004d602:	9400      	str	r4, [sp, #0]
1004d604:	9201      	str	r2, [sp, #4]
1004d606:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1004d608:	9c07      	ldr	r4, [sp, #28]
1004d60a:	6044      	str	r4, [r0, #4]
1004d60c:	6082      	str	r2, [r0, #8]
1004d60e:	9a00      	ldr	r2, [sp, #0]
1004d610:	51f2      	str	r2, [r6, r7]
1004d612:	221f      	movs	r2, #31
1004d614:	4015      	ands	r5, r2
1004d616:	7545      	strb	r5, [r0, #21]
1004d618:	4011      	ands	r1, r2
1004d61a:	7581      	strb	r1, [r0, #22]
1004d61c:	2101      	movs	r1, #1
1004d61e:	7501      	strb	r1, [r0, #20]
1004d620:	9a01      	ldr	r2, [sp, #4]
1004d622:	74c2      	strb	r2, [r0, #19]
1004d624:	8201      	strh	r1, [r0, #16]
1004d626:	9902      	ldr	r1, [sp, #8]
1004d628:	61c1      	str	r1, [r0, #28]
1004d62a:	9903      	ldr	r1, [sp, #12]
1004d62c:	6201      	str	r1, [r0, #32]
1004d62e:	9905      	ldr	r1, [sp, #20]
1004d630:	6241      	str	r1, [r0, #36]	@ 0x24
1004d632:	9906      	ldr	r1, [sp, #24]
1004d634:	6281      	str	r1, [r0, #40]	@ 0x28
1004d636:	9904      	ldr	r1, [sp, #16]
1004d638:	60c1      	str	r1, [r0, #12]
1004d63a:	2002      	movs	r0, #2
1004d63c:	7018      	strb	r0, [r3, #0]
1004d63e:	b008      	add	sp, #32
1004d640:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004d642:	46c0      	nop			@ (mov r8, r8)

1004d644 <__arm_cp.10_0>:
1004d644:	20000b48 	.word	0x20000b48

1004d648 <LL_sched_is_scheduler_call_pending>:
1004d648:	b580      	push	{r7, lr}
1004d64a:	490a      	ldr	r1, [pc, #40]	@ (1004d674 <__arm_cp.11_0>)
1004d64c:	6809      	ldr	r1, [r1, #0]
1004d64e:	7b0a      	ldrb	r2, [r1, #12]
1004d650:	2a01      	cmp	r2, #1
1004d652:	d106      	bne.n	1004d662 <LL_sched_is_scheduler_call_pending+0x1a>
1004d654:	7bca      	ldrb	r2, [r1, #15]
1004d656:	2a03      	cmp	r2, #3
1004d658:	d105      	bne.n	1004d666 <LL_sched_is_scheduler_call_pending+0x1e>
1004d65a:	2000      	movs	r0, #0
1004d65c:	f7fe fd02 	bl	1004c064 <llc_scan_stop_ucfg_weak>
1004d660:	bd80      	pop	{r7, pc}
1004d662:	2000      	movs	r0, #0
1004d664:	bd80      	pop	{r7, pc}
1004d666:	6809      	ldr	r1, [r1, #0]
1004d668:	1a08      	subs	r0, r1, r0
1004d66a:	4903      	ldr	r1, [pc, #12]	@ (1004d678 <__arm_cp.11_1>)
1004d66c:	1840      	adds	r0, r0, r1
1004d66e:	0fc0      	lsrs	r0, r0, #31
1004d670:	bd80      	pop	{r7, pc}
1004d672:	46c0      	nop			@ (mov r8, r8)

1004d674 <__arm_cp.11_0>:
1004d674:	20000b44 	.word	0x20000b44

1004d678 <__arm_cp.11_1>:
1004d678:	fffffe0b 	.word	0xfffffe0b

1004d67c <LL_sched_engine>:
1004d67c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004d67e:	b0b3      	sub	sp, #204	@ 0xcc
1004d680:	4607      	mov	r7, r0
1004d682:	48dc      	ldr	r0, [pc, #880]	@ (1004d9f4 <__arm_cp.13_0>)
1004d684:	6800      	ldr	r0, [r0, #0]
1004d686:	900b      	str	r0, [sp, #44]	@ 0x2c
1004d688:	2001      	movs	r0, #1
1004d68a:	9001      	str	r0, [sp, #4]
1004d68c:	9009      	str	r0, [sp, #36]	@ 0x24
1004d68e:	2100      	movs	r1, #0
1004d690:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d692:	7381      	strb	r1, [r0, #14]
1004d694:	48d8      	ldr	r0, [pc, #864]	@ (1004d9f8 <__arm_cp.13_1>)
1004d696:	6803      	ldr	r3, [r0, #0]
1004d698:	910a      	str	r1, [sp, #40]	@ 0x28
1004d69a:	7219      	strb	r1, [r3, #8]
1004d69c:	20ff      	movs	r0, #255	@ 0xff
1004d69e:	9008      	str	r0, [sp, #32]
1004d6a0:	3002      	adds	r0, #2
1004d6a2:	8298      	strh	r0, [r3, #20]
1004d6a4:	7c18      	ldrb	r0, [r3, #16]
1004d6a6:	21f0      	movs	r1, #240	@ 0xf0
1004d6a8:	4001      	ands	r1, r0
1004d6aa:	090a      	lsrs	r2, r1, #4
1004d6ac:	1888      	adds	r0, r1, r2
1004d6ae:	7418      	strb	r0, [r3, #16]
1004d6b0:	8a59      	ldrh	r1, [r3, #18]
1004d6b2:	40d1      	lsrs	r1, r2
1004d6b4:	07c9      	lsls	r1, r1, #31
1004d6b6:	49d1      	ldr	r1, [pc, #836]	@ (1004d9fc <__arm_cp.13_2>)
1004d6b8:	6809      	ldr	r1, [r1, #0]
1004d6ba:	9107      	str	r1, [sp, #28]
1004d6bc:	9305      	str	r3, [sp, #20]
1004d6be:	d006      	beq.n	1004d6ce <LL_sched_engine+0x52>
1004d6c0:	2000      	movs	r0, #0
1004d6c2:	f000 fd45 	bl	1004e150 <tsk_notify_idx>
1004d6c6:	f7f3 ffc6 	bl	10041656 <BLE_STACK_ProcessRequest>
1004d6ca:	9b05      	ldr	r3, [sp, #20]
1004d6cc:	7c18      	ldrb	r0, [r3, #16]
1004d6ce:	210f      	movs	r1, #15
1004d6d0:	9102      	str	r1, [sp, #8]
1004d6d2:	4008      	ands	r0, r1
1004d6d4:	7418      	strb	r0, [r3, #16]
1004d6d6:	2196      	movs	r1, #150	@ 0x96
1004d6d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004d6da:	4341      	muls	r1, r0
1004d6dc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d6de:	9112      	str	r1, [sp, #72]	@ 0x48
1004d6e0:	6081      	str	r1, [r0, #8]
1004d6e2:	2001      	movs	r0, #1
1004d6e4:	9004      	str	r0, [sp, #16]
1004d6e6:	43c0      	mvns	r0, r0
1004d6e8:	b279      	sxtb	r1, r7
1004d6ea:	4281      	cmp	r1, r0
1004d6ec:	dc10      	bgt.n	1004d710 <LL_sched_engine+0x94>
1004d6ee:	207f      	movs	r0, #127	@ 0x7f
1004d6f0:	4007      	ands	r7, r0
1004d6f2:	252c      	movs	r5, #44	@ 0x2c
1004d6f4:	437d      	muls	r5, r7
1004d6f6:	9c07      	ldr	r4, [sp, #28]
1004d6f8:	1960      	adds	r0, r4, r5
1004d6fa:	900a      	str	r0, [sp, #40]	@ 0x28
1004d6fc:	5966      	ldr	r6, [r4, r5]
1004d6fe:	f7f4 fa0a 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004d702:	1a30      	subs	r0, r6, r0
1004d704:	49be      	ldr	r1, [pc, #760]	@ (1004da00 <__arm_cp.13_3>)
1004d706:	1840      	adds	r0, r0, r1
1004d708:	d500      	bpl.n	1004d70c <LL_sched_engine+0x90>
1004d70a:	e0ef      	b.n	1004d8ec <LL_sched_engine+0x270>
1004d70c:	4638      	mov	r0, r7
1004d70e:	e004      	b.n	1004d71a <LL_sched_engine+0x9e>
1004d710:	b2f8      	uxtb	r0, r7
1004d712:	28ff      	cmp	r0, #255	@ 0xff
1004d714:	d00e      	beq.n	1004d734 <LL_sched_engine+0xb8>
1004d716:	2100      	movs	r1, #0
1004d718:	910a      	str	r1, [sp, #40]	@ 0x28
1004d71a:	212c      	movs	r1, #44	@ 0x2c
1004d71c:	4341      	muls	r1, r0
1004d71e:	9807      	ldr	r0, [sp, #28]
1004d720:	1840      	adds	r0, r0, r1
1004d722:	2101      	movs	r1, #1
1004d724:	7501      	strb	r1, [r0, #20]
1004d726:	7c81      	ldrb	r1, [r0, #18]
1004d728:	2908      	cmp	r1, #8
1004d72a:	d102      	bne.n	1004d732 <LL_sched_engine+0xb6>
1004d72c:	3012      	adds	r0, #18
1004d72e:	2104      	movs	r1, #4
1004d730:	7001      	strb	r1, [r0, #0]
1004d732:	9708      	str	r7, [sp, #32]
1004d734:	f7f4 f9ef 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004d738:	9912      	ldr	r1, [sp, #72]	@ 0x48
1004d73a:	180c      	adds	r4, r1, r0
1004d73c:	48af      	ldr	r0, [pc, #700]	@ (1004d9fc <__arm_cp.13_2>)
1004d73e:	6807      	ldr	r7, [r0, #0]
1004d740:	3728      	adds	r7, #40	@ 0x28
1004d742:	2500      	movs	r5, #0
1004d744:	4628      	mov	r0, r5
1004d746:	49af      	ldr	r1, [pc, #700]	@ (1004da04 <__arm_cp.13_4>)
1004d748:	7aca      	ldrb	r2, [r1, #11]
1004d74a:	4295      	cmp	r5, r2
1004d74c:	d23a      	bcs.n	1004d7c4 <LL_sched_engine+0x148>
1004d74e:	463e      	mov	r6, r7
1004d750:	3e16      	subs	r6, #22
1004d752:	7831      	ldrb	r1, [r6, #0]
1004d754:	070a      	lsls	r2, r1, #28
1004d756:	0f52      	lsrs	r2, r2, #29
1004d758:	d01e      	beq.n	1004d798 <LL_sched_engine+0x11c>
1004d75a:	2104      	movs	r1, #4
1004d75c:	7031      	strb	r1, [r6, #0]
1004d75e:	4639      	mov	r1, r7
1004d760:	3928      	subs	r1, #40	@ 0x28
1004d762:	6809      	ldr	r1, [r1, #0]
1004d764:	43ca      	mvns	r2, r1
1004d766:	18a2      	adds	r2, r4, r2
1004d768:	d429      	bmi.n	1004d7be <LL_sched_engine+0x142>
1004d76a:	1a61      	subs	r1, r4, r1
1004d76c:	4638      	mov	r0, r7
1004d76e:	381c      	subs	r0, #28
1004d770:	6800      	ldr	r0, [r0, #0]
1004d772:	463a      	mov	r2, r7
1004d774:	3a0c      	subs	r2, #12
1004d776:	6812      	ldr	r2, [r2, #0]
1004d778:	4790      	blx	r2
1004d77a:	4639      	mov	r1, r7
1004d77c:	3918      	subs	r1, #24
1004d77e:	880a      	ldrh	r2, [r1, #0]
1004d780:	1812      	adds	r2, r2, r0
1004d782:	800a      	strh	r2, [r1, #0]
1004d784:	4639      	mov	r1, r7
1004d786:	3914      	subs	r1, #20
1004d788:	780a      	ldrb	r2, [r1, #0]
1004d78a:	1880      	adds	r0, r0, r2
1004d78c:	287f      	cmp	r0, #127	@ 0x7f
1004d78e:	d300      	bcc.n	1004d792 <LL_sched_engine+0x116>
1004d790:	207f      	movs	r0, #127	@ 0x7f
1004d792:	7008      	strb	r0, [r1, #0]
1004d794:	7831      	ldrb	r1, [r6, #0]
1004d796:	2001      	movs	r0, #1
1004d798:	0689      	lsls	r1, r1, #26
1004d79a:	0f89      	lsrs	r1, r1, #30
1004d79c:	d00f      	beq.n	1004d7be <LL_sched_engine+0x142>
1004d79e:	6839      	ldr	r1, [r7, #0]
1004d7a0:	2900      	cmp	r1, #0
1004d7a2:	d006      	beq.n	1004d7b2 <LL_sched_engine+0x136>
1004d7a4:	4638      	mov	r0, r7
1004d7a6:	381c      	subs	r0, #28
1004d7a8:	6800      	ldr	r0, [r0, #0]
1004d7aa:	4788      	blx	r1
1004d7ac:	7830      	ldrb	r0, [r6, #0]
1004d7ae:	2801      	cmp	r0, #1
1004d7b0:	d004      	beq.n	1004d7bc <LL_sched_engine+0x140>
1004d7b2:	2000      	movs	r0, #0
1004d7b4:	7030      	strb	r0, [r6, #0]
1004d7b6:	4639      	mov	r1, r7
1004d7b8:	3915      	subs	r1, #21
1004d7ba:	7008      	strb	r0, [r1, #0]
1004d7bc:	2001      	movs	r0, #1
1004d7be:	372c      	adds	r7, #44	@ 0x2c
1004d7c0:	1c6d      	adds	r5, r5, #1
1004d7c2:	e7c0      	b.n	1004d746 <LL_sched_engine+0xca>
1004d7c4:	2800      	cmp	r0, #0
1004d7c6:	d1b5      	bne.n	1004d734 <LL_sched_engine+0xb8>
1004d7c8:	488c      	ldr	r0, [pc, #560]	@ (1004d9fc <__arm_cp.13_2>)
1004d7ca:	6800      	ldr	r0, [r0, #0]
1004d7cc:	4603      	mov	r3, r0
1004d7ce:	3312      	adds	r3, #18
1004d7d0:	2400      	movs	r4, #0
1004d7d2:	4621      	mov	r1, r4
1004d7d4:	42a2      	cmp	r2, r4
1004d7d6:	d009      	beq.n	1004d7ec <LL_sched_engine+0x170>
1004d7d8:	781d      	ldrb	r5, [r3, #0]
1004d7da:	2d04      	cmp	r5, #4
1004d7dc:	d103      	bne.n	1004d7e6 <LL_sched_engine+0x16a>
1004d7de:	b2cd      	uxtb	r5, r1
1004d7e0:	ae13      	add	r6, sp, #76	@ 0x4c
1004d7e2:	5574      	strb	r4, [r6, r5]
1004d7e4:	1c49      	adds	r1, r1, #1
1004d7e6:	332c      	adds	r3, #44	@ 0x2c
1004d7e8:	1c64      	adds	r4, r4, #1
1004d7ea:	e7f3      	b.n	1004d7d4 <LL_sched_engine+0x158>
1004d7ec:	060a      	lsls	r2, r1, #24
1004d7ee:	d074      	beq.n	1004d8da <LL_sched_engine+0x25e>
1004d7f0:	b2ca      	uxtb	r2, r1
1004d7f2:	920e      	str	r2, [sp, #56]	@ 0x38
1004d7f4:	2200      	movs	r2, #0
1004d7f6:	9206      	str	r2, [sp, #24]
1004d7f8:	460c      	mov	r4, r1
1004d7fa:	9203      	str	r2, [sp, #12]
1004d7fc:	4616      	mov	r6, r2
1004d7fe:	910d      	str	r1, [sp, #52]	@ 0x34
1004d800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004d802:	4296      	cmp	r6, r2
1004d804:	d06e      	beq.n	1004d8e4 <LL_sched_engine+0x268>
1004d806:	9612      	str	r6, [sp, #72]	@ 0x48
1004d808:	9410      	str	r4, [sp, #64]	@ 0x40
1004d80a:	b2e3      	uxtb	r3, r4
1004d80c:	2700      	movs	r7, #0
1004d80e:	462c      	mov	r4, r5
1004d810:	463e      	mov	r6, r7
1004d812:	42bb      	cmp	r3, r7
1004d814:	d00d      	beq.n	1004d832 <LL_sched_engine+0x1b6>
1004d816:	aa13      	add	r2, sp, #76	@ 0x4c
1004d818:	5dd2      	ldrb	r2, [r2, r7]
1004d81a:	252c      	movs	r5, #44	@ 0x2c
1004d81c:	4355      	muls	r5, r2
1004d81e:	5945      	ldr	r5, [r0, r5]
1004d820:	2f00      	cmp	r7, #0
1004d822:	d002      	beq.n	1004d82a <LL_sched_engine+0x1ae>
1004d824:	43f2      	mvns	r2, r6
1004d826:	18aa      	adds	r2, r5, r2
1004d828:	d501      	bpl.n	1004d82e <LL_sched_engine+0x1b2>
1004d82a:	463c      	mov	r4, r7
1004d82c:	462e      	mov	r6, r5
1004d82e:	1c7f      	adds	r7, r7, #1
1004d830:	e7ef      	b.n	1004d812 <LL_sched_engine+0x196>
1004d832:	9d12      	ldr	r5, [sp, #72]	@ 0x48
1004d834:	1b4a      	subs	r2, r1, r5
1004d836:	b2d2      	uxtb	r2, r2
1004d838:	1e51      	subs	r1, r2, #1
1004d83a:	aa13      	add	r2, sp, #76	@ 0x4c
1004d83c:	5c53      	ldrb	r3, [r2, r1]
1004d83e:	b2e4      	uxtb	r4, r4
1004d840:	5d17      	ldrb	r7, [r2, r4]
1004d842:	5457      	strb	r7, [r2, r1]
1004d844:	5513      	strb	r3, [r2, r4]
1004d846:	910f      	str	r1, [sp, #60]	@ 0x3c
1004d848:	b2cb      	uxtb	r3, r1
1004d84a:	5cd3      	ldrb	r3, [r2, r3]
1004d84c:	2d00      	cmp	r5, #0
1004d84e:	d02e      	beq.n	1004d8ae <LL_sched_engine+0x232>
1004d850:	461d      	mov	r5, r3
1004d852:	9911      	ldr	r1, [sp, #68]	@ 0x44
1004d854:	b2ca      	uxtb	r2, r1
1004d856:	ac13      	add	r4, sp, #76	@ 0x4c
1004d858:	5ca4      	ldrb	r4, [r4, r2]
1004d85a:	272c      	movs	r7, #44	@ 0x2c
1004d85c:	437c      	muls	r4, r7
1004d85e:	5902      	ldr	r2, [r0, r4]
1004d860:	1b91      	subs	r1, r2, r6
1004d862:	1904      	adds	r4, r0, r4
1004d864:	6863      	ldr	r3, [r4, #4]
1004d866:	18c9      	adds	r1, r1, r3
1004d868:	3195      	adds	r1, #149	@ 0x95
1004d86a:	d44a      	bmi.n	1004d902 <LL_sched_engine+0x286>
1004d86c:	43d1      	mvns	r1, r2
1004d86e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1004d870:	1851      	adds	r1, r2, r1
1004d872:	d449      	bmi.n	1004d908 <LL_sched_engine+0x28c>
1004d874:	436f      	muls	r7, r5
1004d876:	19c1      	adds	r1, r0, r7
1004d878:	7d8a      	ldrb	r2, [r1, #22]
1004d87a:	7d0b      	ldrb	r3, [r1, #20]
1004d87c:	4093      	lsls	r3, r2
1004d87e:	7d49      	ldrb	r1, [r1, #21]
1004d880:	2601      	movs	r6, #1
1004d882:	4632      	mov	r2, r6
1004d884:	408a      	lsls	r2, r1
1004d886:	429a      	cmp	r2, r3
1004d888:	d800      	bhi.n	1004d88c <LL_sched_engine+0x210>
1004d88a:	4613      	mov	r3, r2
1004d88c:	7da1      	ldrb	r1, [r4, #22]
1004d88e:	7d27      	ldrb	r7, [r4, #20]
1004d890:	408f      	lsls	r7, r1
1004d892:	7d61      	ldrb	r1, [r4, #21]
1004d894:	408e      	lsls	r6, r1
1004d896:	42be      	cmp	r6, r7
1004d898:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004d89a:	d800      	bhi.n	1004d89e <LL_sched_engine+0x222>
1004d89c:	4637      	mov	r7, r6
1004d89e:	429f      	cmp	r7, r3
1004d8a0:	462b      	mov	r3, r5
1004d8a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004d8a4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1004d8a6:	d300      	bcc.n	1004d8aa <LL_sched_engine+0x22e>
1004d8a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1004d8aa:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1004d8ac:	e011      	b.n	1004d8d2 <LL_sched_engine+0x256>
1004d8ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004d8b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1004d8b2:	2a01      	cmp	r2, #1
1004d8b4:	d101      	bne.n	1004d8ba <LL_sched_engine+0x23e>
1004d8b6:	2202      	movs	r2, #2
1004d8b8:	9206      	str	r2, [sp, #24]
1004d8ba:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1004d8bc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1004d8be:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1004d8c0:	222c      	movs	r2, #44	@ 0x2c
1004d8c2:	435a      	muls	r2, r3
1004d8c4:	5883      	ldr	r3, [r0, r2]
1004d8c6:	1882      	adds	r2, r0, r2
1004d8c8:	6852      	ldr	r2, [r2, #4]
1004d8ca:	189a      	adds	r2, r3, r2
1004d8cc:	3296      	adds	r2, #150	@ 0x96
1004d8ce:	920c      	str	r2, [sp, #48]	@ 0x30
1004d8d0:	462b      	mov	r3, r5
1004d8d2:	1e64      	subs	r4, r4, #1
1004d8d4:	1c76      	adds	r6, r6, #1
1004d8d6:	9311      	str	r3, [sp, #68]	@ 0x44
1004d8d8:	e792      	b.n	1004d800 <LL_sched_engine+0x184>
1004d8da:	2000      	movs	r0, #0
1004d8dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004d8de:	6048      	str	r0, [r1, #4]
1004d8e0:	7388      	strb	r0, [r1, #14]
1004d8e2:	e02d      	b.n	1004d940 <LL_sched_engine+0x2c4>
1004d8e4:	9a03      	ldr	r2, [sp, #12]
1004d8e6:	4616      	mov	r6, r2
1004d8e8:	9b06      	ldr	r3, [sp, #24]
1004d8ea:	e013      	b.n	1004d914 <LL_sched_engine+0x298>
1004d8ec:	1960      	adds	r0, r4, r5
1004d8ee:	7c80      	ldrb	r0, [r0, #18]
1004d8f0:	2810      	cmp	r0, #16
1004d8f2:	d100      	bne.n	1004d8f6 <LL_sched_engine+0x27a>
1004d8f4:	e70a      	b.n	1004d70c <LL_sched_engine+0x90>
1004d8f6:	2820      	cmp	r0, #32
1004d8f8:	d100      	bne.n	1004d8fc <LL_sched_engine+0x280>
1004d8fa:	e707      	b.n	1004d70c <LL_sched_engine+0x90>
1004d8fc:	2400      	movs	r4, #0
1004d8fe:	463d      	mov	r5, r7
1004d900:	e021      	b.n	1004d946 <LL_sched_engine+0x2ca>
1004d902:	3e96      	subs	r6, #150	@ 0x96
1004d904:	9b04      	ldr	r3, [sp, #16]
1004d906:	e004      	b.n	1004d912 <LL_sched_engine+0x296>
1004d908:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004d90a:	1e40      	subs	r0, r0, #1
1004d90c:	9011      	str	r0, [sp, #68]	@ 0x44
1004d90e:	2600      	movs	r6, #0
1004d910:	4633      	mov	r3, r6
1004d912:	9a03      	ldr	r2, [sp, #12]
1004d914:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004d916:	b2c0      	uxtb	r0, r0
1004d918:	a913      	add	r1, sp, #76	@ 0x4c
1004d91a:	5c0d      	ldrb	r5, [r1, r0]
1004d91c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004d91e:	6042      	str	r2, [r0, #4]
1004d920:	7383      	strb	r3, [r0, #14]
1004d922:	2dff      	cmp	r5, #255	@ 0xff
1004d924:	d00c      	beq.n	1004d940 <LL_sched_engine+0x2c4>
1004d926:	202c      	movs	r0, #44	@ 0x2c
1004d928:	4368      	muls	r0, r5
1004d92a:	9907      	ldr	r1, [sp, #28]
1004d92c:	1809      	adds	r1, r1, r0
1004d92e:	b2d8      	uxtb	r0, r3
1004d930:	2801      	cmp	r0, #1
1004d932:	910a      	str	r1, [sp, #40]	@ 0x28
1004d934:	d105      	bne.n	1004d942 <LL_sched_engine+0x2c6>
1004d936:	6808      	ldr	r0, [r1, #0]
1004d938:	1a30      	subs	r0, r6, r0
1004d93a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004d93c:	6048      	str	r0, [r1, #4]
1004d93e:	e000      	b.n	1004d942 <LL_sched_engine+0x2c6>
1004d940:	25ff      	movs	r5, #255	@ 0xff
1004d942:	9c01      	ldr	r4, [sp, #4]
1004d944:	9f08      	ldr	r7, [sp, #32]
1004d946:	f7f4 fd65 	bl	10042414 <BLEPLAT_CNTR_ClearSemareq>
1004d94a:	482a      	ldr	r0, [pc, #168]	@ (1004d9f4 <__arm_cp.13_0>)
1004d94c:	6800      	ldr	r0, [r0, #0]
1004d94e:	2dff      	cmp	r5, #255	@ 0xff
1004d950:	d02f      	beq.n	1004d9b2 <LL_sched_engine+0x336>
1004d952:	9711      	str	r7, [sp, #68]	@ 0x44
1004d954:	9412      	str	r4, [sp, #72]	@ 0x48
1004d956:	4604      	mov	r4, r0
1004d958:	2008      	movs	r0, #8
1004d95a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
1004d95c:	74b8      	strb	r0, [r7, #18]
1004d95e:	f7fe fba2 	bl	1004c0a6 <llc_cte_timer_stop_ucfg_weak>
1004d962:	7365      	strb	r5, [r4, #13]
1004d964:	6a3a      	ldr	r2, [r7, #32]
1004d966:	68f8      	ldr	r0, [r7, #12]
1004d968:	6879      	ldr	r1, [r7, #4]
1004d96a:	4790      	blx	r2
1004d96c:	683e      	ldr	r6, [r7, #0]
1004d96e:	940b      	str	r4, [sp, #44]	@ 0x2c
1004d970:	6026      	str	r6, [r4, #0]
1004d972:	4628      	mov	r0, r5
1004d974:	f7f4 fd64 	bl	10042440 <BLEPLAT_CNTR_GlobWriteSlot>
1004d978:	f7f4 fd5b 	bl	10042432 <BLEPLAT_CNTR_GlobEnableBlue>
1004d97c:	9812      	ldr	r0, [sp, #72]	@ 0x48
1004d97e:	2800      	cmp	r0, #0
1004d980:	d023      	beq.n	1004d9ca <LL_sched_engine+0x34e>
1004d982:	7cf8      	ldrb	r0, [r7, #19]
1004d984:	09c1      	lsrs	r1, r0, #7
1004d986:	2201      	movs	r2, #1
1004d988:	4630      	mov	r0, r6
1004d98a:	f7f4 f8eb 	bl	10041b64 <BLEPLAT_SetRadioTimerValue>
1004d98e:	2800      	cmp	r0, #0
1004d990:	d01d      	beq.n	1004d9ce <LL_sched_engine+0x352>
1004d992:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004d994:	0040      	lsls	r0, r0, #1
1004d996:	9009      	str	r0, [sp, #36]	@ 0x24
1004d998:	2810      	cmp	r0, #16
1004d99a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
1004d99c:	d200      	bcs.n	1004d9a0 <LL_sched_engine+0x324>
1004d99e:	e676      	b.n	1004d68e <LL_sched_engine+0x12>
1004d9a0:	f7fe fb80 	bl	1004c0a4 <llc_cte_timer_error_ucfg_weak>
1004d9a4:	20a1      	movs	r0, #161	@ 0xa1
1004d9a6:	2106      	movs	r1, #6
1004d9a8:	2200      	movs	r2, #0
1004d9aa:	4613      	mov	r3, r2
1004d9ac:	f000 fe1a 	bl	1004e5e4 <aci_hal_fw_error_event_push_noinline>
1004d9b0:	e009      	b.n	1004d9c6 <LL_sched_engine+0x34a>
1004d9b2:	4604      	mov	r4, r0
1004d9b4:	f7f4 f8f0 	bl	10041b98 <BLEPLAT_ClearRadioTimerValue>
1004d9b8:	f7f4 fd34 	bl	10042424 <BLEPLAT_CNTR_GlobDisableBlue>
1004d9bc:	2000      	movs	r0, #0
1004d9be:	73e0      	strb	r0, [r4, #15]
1004d9c0:	20ff      	movs	r0, #255	@ 0xff
1004d9c2:	0200      	lsls	r0, r0, #8
1004d9c4:	81a0      	strh	r0, [r4, #12]
1004d9c6:	9904      	ldr	r1, [sp, #16]
1004d9c8:	e00f      	b.n	1004d9ea <LL_sched_engine+0x36e>
1004d9ca:	f7f4 f8fd 	bl	10041bc8 <BLEPLAT_SetRadioCloseTimeout>
1004d9ce:	9b04      	ldr	r3, [sp, #16]
1004d9d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004d9d2:	730b      	strb	r3, [r1, #12]
1004d9d4:	7cf8      	ldrb	r0, [r7, #19]
1004d9d6:	73c8      	strb	r0, [r1, #15]
1004d9d8:	9a05      	ldr	r2, [sp, #20]
1004d9da:	60d6      	str	r6, [r2, #12]
1004d9dc:	7c11      	ldrb	r1, [r2, #16]
1004d9de:	9c02      	ldr	r4, [sp, #8]
1004d9e0:	4021      	ands	r1, r4
1004d9e2:	0100      	lsls	r0, r0, #4
1004d9e4:	1808      	adds	r0, r1, r0
1004d9e6:	4619      	mov	r1, r3
1004d9e8:	7410      	strb	r0, [r2, #16]
1004d9ea:	4803      	ldr	r0, [pc, #12]	@ (1004d9f8 <__arm_cp.13_1>)
1004d9ec:	6800      	ldr	r0, [r0, #0]
1004d9ee:	7201      	strb	r1, [r0, #8]
1004d9f0:	b033      	add	sp, #204	@ 0xcc
1004d9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004d9f4 <__arm_cp.13_0>:
1004d9f4:	20000b44 	.word	0x20000b44

1004d9f8 <__arm_cp.13_1>:
1004d9f8:	20000b40 	.word	0x20000b40

1004d9fc <__arm_cp.13_2>:
1004d9fc:	20000b48 	.word	0x20000b48

1004da00 <__arm_cp.13_3>:
1004da00:	fffffed4 	.word	0xfffffed4

1004da04 <__arm_cp.13_4>:
1004da04:	20000b50 	.word	0x20000b50

1004da08 <LL_sched_set_priority>:
1004da08:	b510      	push	{r4, lr}
1004da0a:	231f      	movs	r3, #31
1004da0c:	401a      	ands	r2, r3
1004da0e:	242c      	movs	r4, #44	@ 0x2c
1004da10:	4344      	muls	r4, r0
1004da12:	4803      	ldr	r0, [pc, #12]	@ (1004da20 <__arm_cp.14_0>)
1004da14:	6800      	ldr	r0, [r0, #0]
1004da16:	1900      	adds	r0, r0, r4
1004da18:	7582      	strb	r2, [r0, #22]
1004da1a:	4019      	ands	r1, r3
1004da1c:	7541      	strb	r1, [r0, #21]
1004da1e:	bd10      	pop	{r4, pc}

1004da20 <__arm_cp.14_0>:
1004da20:	20000b48 	.word	0x20000b48

1004da24 <LL_sched_reserve_taskslot>:
1004da24:	b510      	push	{r4, lr}
1004da26:	480e      	ldr	r0, [pc, #56]	@ (1004da60 <__arm_cp.22_0>)
1004da28:	6801      	ldr	r1, [r0, #0]
1004da2a:	3128      	adds	r1, #40	@ 0x28
1004da2c:	2000      	movs	r0, #0
1004da2e:	4a0d      	ldr	r2, [pc, #52]	@ (1004da64 <__arm_cp.22_1>)
1004da30:	7ad3      	ldrb	r3, [r2, #11]
1004da32:	4298      	cmp	r0, r3
1004da34:	d20b      	bcs.n	1004da4e <LL_sched_reserve_taskslot+0x2a>
1004da36:	f3ef 8310 	mrs	r3, PRIMASK
1004da3a:	b672      	cpsid	i
1004da3c:	460b      	mov	r3, r1
1004da3e:	3b16      	subs	r3, #22
1004da40:	781c      	ldrb	r4, [r3, #0]
1004da42:	2c00      	cmp	r4, #0
1004da44:	d005      	beq.n	1004da52 <LL_sched_reserve_taskslot+0x2e>
1004da46:	b662      	cpsie	i
1004da48:	312c      	adds	r1, #44	@ 0x2c
1004da4a:	1c40      	adds	r0, r0, #1
1004da4c:	e7f0      	b.n	1004da30 <LL_sched_reserve_taskslot+0xc>
1004da4e:	20ff      	movs	r0, #255	@ 0xff
1004da50:	e004      	b.n	1004da5c <LL_sched_reserve_taskslot+0x38>
1004da52:	2200      	movs	r2, #0
1004da54:	600a      	str	r2, [r1, #0]
1004da56:	2101      	movs	r1, #1
1004da58:	7019      	strb	r1, [r3, #0]
1004da5a:	b662      	cpsie	i
1004da5c:	b2c0      	uxtb	r0, r0
1004da5e:	bd10      	pop	{r4, pc}

1004da60 <__arm_cp.22_0>:
1004da60:	20000b48 	.word	0x20000b48

1004da64 <__arm_cp.22_1>:
1004da64:	20000b50 	.word	0x20000b50

1004da68 <LL_sched_release_taskslot>:
1004da68:	28ff      	cmp	r0, #255	@ 0xff
1004da6a:	d006      	beq.n	1004da7a <LL_sched_release_taskslot+0x12>
1004da6c:	212c      	movs	r1, #44	@ 0x2c
1004da6e:	4341      	muls	r1, r0
1004da70:	4802      	ldr	r0, [pc, #8]	@ (1004da7c <__arm_cp.23_0>)
1004da72:	6800      	ldr	r0, [r0, #0]
1004da74:	1840      	adds	r0, r0, r1
1004da76:	2100      	movs	r1, #0
1004da78:	8241      	strh	r1, [r0, #18]
1004da7a:	4770      	bx	lr

1004da7c <__arm_cp.23_0>:
1004da7c:	20000b48 	.word	0x20000b48

1004da80 <LL_sched_check_and_call_sched>:
1004da80:	b510      	push	{r4, lr}
1004da82:	460c      	mov	r4, r1
1004da84:	f3ef 8110 	mrs	r1, PRIMASK
1004da88:	b672      	cpsid	i
1004da8a:	f7ff fddd 	bl	1004d648 <LL_sched_is_scheduler_call_pending>
1004da8e:	b662      	cpsie	i
1004da90:	2800      	cmp	r0, #0
1004da92:	d000      	beq.n	1004da96 <LL_sched_check_and_call_sched+0x16>
1004da94:	bd10      	pop	{r4, pc}
1004da96:	4620      	mov	r0, r4
1004da98:	f7ff fdf0 	bl	1004d67c <LL_sched_engine>
1004da9c:	bd10      	pop	{r4, pc}
	...

1004daa0 <LL_sched_check_and_wait_sched>:
1004daa0:	b5b0      	push	{r4, r5, r7, lr}
1004daa2:	4604      	mov	r4, r0
1004daa4:	4813      	ldr	r0, [pc, #76]	@ (1004daf4 <__arm_cp.25_0>)
1004daa6:	7ac0      	ldrb	r0, [r0, #11]
1004daa8:	42a0      	cmp	r0, r4
1004daaa:	d922      	bls.n	1004daf2 <LL_sched_check_and_wait_sched+0x52>
1004daac:	f3ef 8010 	mrs	r0, PRIMASK
1004dab0:	b672      	cpsid	i
1004dab2:	25ff      	movs	r5, #255	@ 0xff
1004dab4:	35ec      	adds	r5, #236	@ 0xec
1004dab6:	f7f4 f82e 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004daba:	1940      	adds	r0, r0, r5
1004dabc:	f7ff fdc4 	bl	1004d648 <LL_sched_is_scheduler_call_pending>
1004dac0:	4a0d      	ldr	r2, [pc, #52]	@ (1004daf8 <__arm_cp.25_1>)
1004dac2:	6813      	ldr	r3, [r2, #0]
1004dac4:	2100      	movs	r1, #0
1004dac6:	7219      	strb	r1, [r3, #8]
1004dac8:	b662      	cpsie	i
1004daca:	2801      	cmp	r0, #1
1004dacc:	d10c      	bne.n	1004dae8 <LL_sched_check_and_wait_sched+0x48>
1004dace:	6810      	ldr	r0, [r2, #0]
1004dad0:	6041      	str	r1, [r0, #4]
1004dad2:	4a0a      	ldr	r2, [pc, #40]	@ (1004dafc <__arm_cp.25_2>)
1004dad4:	6843      	ldr	r3, [r0, #4]
1004dad6:	4293      	cmp	r3, r2
1004dad8:	d80b      	bhi.n	1004daf2 <LL_sched_check_and_wait_sched+0x52>
1004dada:	7a03      	ldrb	r3, [r0, #8]
1004dadc:	2b00      	cmp	r3, #0
1004dade:	d107      	bne.n	1004daf0 <LL_sched_check_and_wait_sched+0x50>
1004dae0:	6843      	ldr	r3, [r0, #4]
1004dae2:	1c5b      	adds	r3, r3, #1
1004dae4:	6043      	str	r3, [r0, #4]
1004dae6:	e7f5      	b.n	1004dad4 <LL_sched_check_and_wait_sched+0x34>
1004dae8:	4620      	mov	r0, r4
1004daea:	f7ff fdc7 	bl	1004d67c <LL_sched_engine>
1004daee:	bdb0      	pop	{r4, r5, r7, pc}
1004daf0:	7201      	strb	r1, [r0, #8]
1004daf2:	bdb0      	pop	{r4, r5, r7, pc}

1004daf4 <__arm_cp.25_0>:
1004daf4:	20000b50 	.word	0x20000b50

1004daf8 <__arm_cp.25_1>:
1004daf8:	20000b40 	.word	0x20000b40

1004dafc <__arm_cp.25_2>:
1004dafc:	0004e1ff 	.word	0x0004e1ff

1004db00 <MBM_init_ucfg_weak>:
1004db00:	2000      	movs	r0, #0
1004db02:	4770      	bx	lr

1004db04 <csmem_init>:
1004db04:	4801      	ldr	r0, [pc, #4]	@ (1004db0c <__arm_cp.0_0>)
1004db06:	6841      	ldr	r1, [r0, #4]
1004db08:	6001      	str	r1, [r0, #0]
1004db0a:	4770      	bx	lr

1004db0c <__arm_cp.0_0>:
1004db0c:	20000b4c 	.word	0x20000b4c

1004db10 <csmem_mem_assign>:
1004db10:	b570      	push	{r4, r5, r6, lr}
1004db12:	4614      	mov	r4, r2
1004db14:	4605      	mov	r5, r0
1004db16:	434c      	muls	r4, r1
1004db18:	6800      	ldr	r0, [r0, #0]
1004db1a:	1e40      	subs	r0, r0, #1
1004db1c:	2103      	movs	r1, #3
1004db1e:	4301      	orrs	r1, r0
1004db20:	1c4e      	adds	r6, r1, #1
1004db22:	2100      	movs	r1, #0
1004db24:	4630      	mov	r0, r6
1004db26:	4622      	mov	r2, r4
1004db28:	f7f3 ff82 	bl	10041a30 <BLEPLAT_MemSet>
1004db2c:	1930      	adds	r0, r6, r4
1004db2e:	6028      	str	r0, [r5, #0]
1004db30:	4630      	mov	r0, r6
1004db32:	bd70      	pop	{r4, r5, r6, pc}

1004db34 <csmem_mem_0_assign>:
1004db34:	b580      	push	{r7, lr}
1004db36:	460a      	mov	r2, r1
1004db38:	4601      	mov	r1, r0
1004db3a:	4802      	ldr	r0, [pc, #8]	@ (1004db44 <__arm_cp.3_0>)
1004db3c:	f7ff ffe8 	bl	1004db10 <csmem_mem_assign>
1004db40:	bd80      	pop	{r7, pc}
1004db42:	46c0      	nop			@ (mov r8, r8)

1004db44 <__arm_cp.3_0>:
1004db44:	20000b4c 	.word	0x20000b4c

1004db48 <BlueNRG_Stack_Initialize_RAM_check>:
1004db48:	b5f0      	push	{r4, r5, r6, r7, lr}
1004db4a:	b097      	sub	sp, #92	@ 0x5c
1004db4c:	4ce5      	ldr	r4, [pc, #916]	@ (1004dee4 <__arm_cp.0_4>)
1004db4e:	2067      	movs	r0, #103	@ 0x67
1004db50:	43c5      	mvns	r5, r0
1004db52:	f7fe f858 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004db56:	4ee4      	ldr	r6, [pc, #912]	@ (1004dee8 <__arm_cp.0_5>)
1004db58:	2801      	cmp	r0, #1
1004db5a:	d002      	beq.n	1004db62 <BlueNRG_Stack_Initialize_RAM_check+0x1a>
1004db5c:	7af0      	ldrb	r0, [r6, #11]
1004db5e:	2800      	cmp	r0, #0
1004db60:	d010      	beq.n	1004db84 <BlueNRG_Stack_Initialize_RAM_check+0x3c>
1004db62:	4627      	mov	r7, r4
1004db64:	462c      	mov	r4, r5
1004db66:	3438      	adds	r4, #56	@ 0x38
1004db68:	f7fe f84d 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004db6c:	7af1      	ldrb	r1, [r6, #11]
1004db6e:	4361      	muls	r1, r4
1004db70:	4378      	muls	r0, r7
1004db72:	1838      	adds	r0, r7, r0
1004db74:	1844      	adds	r4, r0, r1
1004db76:	f7fe f846 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004db7a:	7af1      	ldrb	r1, [r6, #11]
1004db7c:	4341      	muls	r1, r0
1004db7e:	48db      	ldr	r0, [pc, #876]	@ (1004deec <__arm_cp.0_6>)
1004db80:	4348      	muls	r0, r1
1004db82:	1824      	adds	r4, r4, r0
1004db84:	3416      	adds	r4, #22
1004db86:	f7fe f83e 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004db8a:	2801      	cmp	r0, #1
1004db8c:	d10e      	bne.n	1004dbac <BlueNRG_Stack_Initialize_RAM_check+0x64>
1004db8e:	4628      	mov	r0, r5
1004db90:	3060      	adds	r0, #96	@ 0x60
1004db92:	8931      	ldrh	r1, [r6, #8]
1004db94:	4341      	muls	r1, r0
1004db96:	4628      	mov	r0, r5
1004db98:	3044      	adds	r0, #68	@ 0x44
1004db9a:	7ab2      	ldrb	r2, [r6, #10]
1004db9c:	4342      	muls	r2, r0
1004db9e:	1850      	adds	r0, r2, r1
1004dba0:	4629      	mov	r1, r5
1004dba2:	3148      	adds	r1, #72	@ 0x48
1004dba4:	7b32      	ldrb	r2, [r6, #12]
1004dba6:	434a      	muls	r2, r1
1004dba8:	1880      	adds	r0, r0, r2
1004dbaa:	e000      	b.n	1004dbae <BlueNRG_Stack_Initialize_RAM_check+0x66>
1004dbac:	2000      	movs	r0, #0
1004dbae:	9003      	str	r0, [sp, #12]
1004dbb0:	89f0      	ldrh	r0, [r6, #14]
1004dbb2:	900a      	str	r0, [sp, #40]	@ 0x28
1004dbb4:	f7fe f81f 	bl	1004bbf6 <data_length_extension_csr_ucfg_weak>
1004dbb8:	2801      	cmp	r0, #1
1004dbba:	d001      	beq.n	1004dbc0 <BlueNRG_Stack_Initialize_RAM_check+0x78>
1004dbbc:	f7ff fa83 	bl	1004d0c6 <ext_adv_scan_enabled_ucfg_weak>
1004dbc0:	f7fe f81d 	bl	1004bbfe <phy_upd_csr_ucfg_weak>
1004dbc4:	2801      	cmp	r0, #1
1004dbc6:	9411      	str	r4, [sp, #68]	@ 0x44
1004dbc8:	d109      	bne.n	1004dbde <BlueNRG_Stack_Initialize_RAM_check+0x96>
1004dbca:	462c      	mov	r4, r5
1004dbcc:	3438      	adds	r4, #56	@ 0x38
1004dbce:	f7fe f81a 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004dbd2:	4360      	muls	r0, r4
1004dbd4:	7af1      	ldrb	r1, [r6, #11]
1004dbd6:	4341      	muls	r1, r0
1004dbd8:	3908      	subs	r1, #8
1004dbda:	9109      	str	r1, [sp, #36]	@ 0x24
1004dbdc:	e001      	b.n	1004dbe2 <BlueNRG_Stack_Initialize_RAM_check+0x9a>
1004dbde:	2000      	movs	r0, #0
1004dbe0:	9009      	str	r0, [sp, #36]	@ 0x24
1004dbe2:	48f2      	ldr	r0, [pc, #968]	@ (1004dfac <__arm_cp.0_3>)
1004dbe4:	304c      	adds	r0, #76	@ 0x4c
1004dbe6:	9013      	str	r0, [sp, #76]	@ 0x4c
1004dbe8:	f7ff fa6d 	bl	1004d0c6 <ext_adv_scan_enabled_ucfg_weak>
1004dbec:	2801      	cmp	r0, #1
1004dbee:	d015      	beq.n	1004dc1c <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004dbf0:	f7fe f801 	bl	1004bbf6 <data_length_extension_csr_ucfg_weak>
1004dbf4:	2801      	cmp	r0, #1
1004dbf6:	d011      	beq.n	1004dc1c <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004dbf8:	2029      	movs	r0, #41	@ 0x29
1004dbfa:	5c30      	ldrb	r0, [r6, r0]
1004dbfc:	2800      	cmp	r0, #0
1004dbfe:	d10d      	bne.n	1004dc1c <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004dc00:	2025      	movs	r0, #37	@ 0x25
1004dc02:	5c30      	ldrb	r0, [r6, r0]
1004dc04:	2800      	cmp	r0, #0
1004dc06:	d109      	bne.n	1004dc1c <BlueNRG_Stack_Initialize_RAM_check+0xd4>
1004dc08:	2026      	movs	r0, #38	@ 0x26
1004dc0a:	5c30      	ldrb	r0, [r6, r0]
1004dc0c:	2800      	cmp	r0, #0
1004dc0e:	d002      	beq.n	1004dc16 <BlueNRG_Stack_Initialize_RAM_check+0xce>
1004dc10:	48e6      	ldr	r0, [pc, #920]	@ (1004dfac <__arm_cp.0_3>)
1004dc12:	304c      	adds	r0, #76	@ 0x4c
1004dc14:	e001      	b.n	1004dc1a <BlueNRG_Stack_Initialize_RAM_check+0xd2>
1004dc16:	4628      	mov	r0, r5
1004dc18:	3024      	adds	r0, #36	@ 0x24
1004dc1a:	9013      	str	r0, [sp, #76]	@ 0x4c
1004dc1c:	48e3      	ldr	r0, [pc, #908]	@ (1004dfac <__arm_cp.0_3>)
1004dc1e:	306c      	adds	r0, #108	@ 0x6c
1004dc20:	9012      	str	r0, [sp, #72]	@ 0x48
1004dc22:	f7ff fa50 	bl	1004d0c6 <ext_adv_scan_enabled_ucfg_weak>
1004dc26:	2801      	cmp	r0, #1
1004dc28:	d015      	beq.n	1004dc56 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004dc2a:	f7fd ffe4 	bl	1004bbf6 <data_length_extension_csr_ucfg_weak>
1004dc2e:	2801      	cmp	r0, #1
1004dc30:	d011      	beq.n	1004dc56 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004dc32:	2029      	movs	r0, #41	@ 0x29
1004dc34:	5c30      	ldrb	r0, [r6, r0]
1004dc36:	2800      	cmp	r0, #0
1004dc38:	d10d      	bne.n	1004dc56 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004dc3a:	2025      	movs	r0, #37	@ 0x25
1004dc3c:	5c30      	ldrb	r0, [r6, r0]
1004dc3e:	2800      	cmp	r0, #0
1004dc40:	d109      	bne.n	1004dc56 <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1004dc42:	2026      	movs	r0, #38	@ 0x26
1004dc44:	5c30      	ldrb	r0, [r6, r0]
1004dc46:	2800      	cmp	r0, #0
1004dc48:	d002      	beq.n	1004dc50 <BlueNRG_Stack_Initialize_RAM_check+0x108>
1004dc4a:	48d8      	ldr	r0, [pc, #864]	@ (1004dfac <__arm_cp.0_3>)
1004dc4c:	306c      	adds	r0, #108	@ 0x6c
1004dc4e:	e001      	b.n	1004dc54 <BlueNRG_Stack_Initialize_RAM_check+0x10c>
1004dc50:	4628      	mov	r0, r5
1004dc52:	303c      	adds	r0, #60	@ 0x3c
1004dc54:	9012      	str	r0, [sp, #72]	@ 0x48
1004dc56:	f7ff fa36 	bl	1004d0c6 <ext_adv_scan_enabled_ucfg_weak>
1004dc5a:	9010      	str	r0, [sp, #64]	@ 0x40
1004dc5c:	7eb0      	ldrb	r0, [r6, #26]
1004dc5e:	9000      	str	r0, [sp, #0]
1004dc60:	7ff0      	ldrb	r0, [r6, #31]
1004dc62:	900f      	str	r0, [sp, #60]	@ 0x3c
1004dc64:	f7fd ffcf 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004dc68:	9007      	str	r0, [sp, #28]
1004dc6a:	7ff0      	ldrb	r0, [r6, #31]
1004dc6c:	9001      	str	r0, [sp, #4]
1004dc6e:	f7fe f9e9 	bl	1004c044 <llc_priv_controller_privacy_csr_ucfg_weak>
1004dc72:	9008      	str	r0, [sp, #32]
1004dc74:	7ff0      	ldrb	r0, [r6, #31]
1004dc76:	9002      	str	r0, [sp, #8]
1004dc78:	f000 fa07 	bl	1004e08a <secure_connections_csr_ucfg_weak>
1004dc7c:	2700      	movs	r7, #0
1004dc7e:	f7fd ffc0 	bl	1004bc02 <scan_csr_ucfg_weak>
1004dc82:	2801      	cmp	r0, #1
1004dc84:	4638      	mov	r0, r7
1004dc86:	9515      	str	r5, [sp, #84]	@ 0x54
1004dc88:	9716      	str	r7, [sp, #88]	@ 0x58
1004dc8a:	d14f      	bne.n	1004dd2c <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
1004dc8c:	7f70      	ldrb	r0, [r6, #29]
1004dc8e:	280a      	cmp	r0, #10
1004dc90:	d300      	bcc.n	1004dc94 <BlueNRG_Stack_Initialize_RAM_check+0x14c>
1004dc92:	200a      	movs	r0, #10
1004dc94:	462c      	mov	r4, r5
1004dc96:	3438      	adds	r4, #56	@ 0x38
1004dc98:	4344      	muls	r4, r0
1004dc9a:	3cc0      	subs	r4, #192	@ 0xc0
1004dc9c:	2500      	movs	r5, #0
1004dc9e:	f7fe f9c9 	bl	1004c034 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004dca2:	2801      	cmp	r0, #1
1004dca4:	462f      	mov	r7, r5
1004dca6:	d120      	bne.n	1004dcea <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
1004dca8:	f7fd ffad 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004dcac:	2801      	cmp	r0, #1
1004dcae:	950e      	str	r5, [sp, #56]	@ 0x38
1004dcb0:	d003      	beq.n	1004dcba <BlueNRG_Stack_Initialize_RAM_check+0x172>
1004dcb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004dcb4:	4618      	mov	r0, r3
1004dcb6:	3054      	adds	r0, #84	@ 0x54
1004dcb8:	e002      	b.n	1004dcc0 <BlueNRG_Stack_Initialize_RAM_check+0x178>
1004dcba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1004dcbc:	4618      	mov	r0, r3
1004dcbe:	3048      	adds	r0, #72	@ 0x48
1004dcc0:	49ba      	ldr	r1, [pc, #744]	@ (1004dfac <__arm_cp.0_3>)
1004dcc2:	31e0      	adds	r1, #224	@ 0xe0
1004dcc4:	7fb2      	ldrb	r2, [r6, #30]
1004dcc6:	434a      	muls	r2, r1
1004dcc8:	1810      	adds	r0, r2, r0
1004dcca:	4619      	mov	r1, r3
1004dccc:	3160      	adds	r1, #96	@ 0x60
1004dcce:	7ff2      	ldrb	r2, [r6, #31]
1004dcd0:	4091      	lsls	r1, r2
1004dcd2:	461d      	mov	r5, r3
1004dcd4:	1847      	adds	r7, r0, r1
1004dcd6:	f7fd ff96 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004dcda:	2801      	cmp	r0, #1
1004dcdc:	d104      	bne.n	1004dce8 <BlueNRG_Stack_Initialize_RAM_check+0x1a0>
1004dcde:	4628      	mov	r0, r5
1004dce0:	3050      	adds	r0, #80	@ 0x50
1004dce2:	7af1      	ldrb	r1, [r6, #11]
1004dce4:	4341      	muls	r1, r0
1004dce6:	187f      	adds	r7, r7, r1
1004dce8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1004dcea:	19e0      	adds	r0, r4, r7
1004dcec:	9014      	str	r0, [sp, #80]	@ 0x50
1004dcee:	f7fe f9a3 	bl	1004c038 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004dcf2:	4607      	mov	r7, r0
1004dcf4:	f7fe f99e 	bl	1004c034 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004dcf8:	4604      	mov	r4, r0
1004dcfa:	403c      	ands	r4, r7
1004dcfc:	f7fd ff83 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004dd00:	4020      	ands	r0, r4
1004dd02:	2801      	cmp	r0, #1
1004dd04:	d108      	bne.n	1004dd18 <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
1004dd06:	7ef0      	ldrb	r0, [r6, #27]
1004dd08:	1e40      	subs	r0, r0, #1
1004dd0a:	2103      	movs	r1, #3
1004dd0c:	4301      	orrs	r1, r0
1004dd0e:	7fb0      	ldrb	r0, [r6, #30]
1004dd10:	22b0      	movs	r2, #176	@ 0xb0
1004dd12:	4342      	muls	r2, r0
1004dd14:	43d0      	mvns	r0, r2
1004dd16:	1a45      	subs	r5, r0, r1
1004dd18:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004dd1a:	1944      	adds	r4, r0, r5
1004dd1c:	f7ff f9d3 	bl	1004d0c6 <ext_adv_scan_enabled_ucfg_weak>
1004dd20:	4360      	muls	r0, r4
1004dd22:	49a2      	ldr	r1, [pc, #648]	@ (1004dfac <__arm_cp.0_3>)
1004dd24:	1808      	adds	r0, r1, r0
1004dd26:	302c      	adds	r0, #44	@ 0x2c
1004dd28:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004dd2a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004dd2c:	9006      	str	r0, [sp, #24]
1004dd2e:	f7fd ff6a 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004dd32:	2801      	cmp	r0, #1
1004dd34:	4639      	mov	r1, r7
1004dd36:	d109      	bne.n	1004dd4c <BlueNRG_Stack_Initialize_RAM_check+0x204>
1004dd38:	f7fd ff67 	bl	1004bc0a <l2c_cos_csr_ucfg_weak>
1004dd3c:	2801      	cmp	r0, #1
1004dd3e:	4639      	mov	r1, r7
1004dd40:	d104      	bne.n	1004dd4c <BlueNRG_Stack_Initialize_RAM_check+0x204>
1004dd42:	2022      	movs	r0, #34	@ 0x22
1004dd44:	5c30      	ldrb	r0, [r6, r0]
1004dd46:	4629      	mov	r1, r5
1004dd48:	3114      	adds	r1, #20
1004dd4a:	4341      	muls	r1, r0
1004dd4c:	9105      	str	r1, [sp, #20]
1004dd4e:	f7fe f971 	bl	1004c034 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004dd52:	2801      	cmp	r0, #1
1004dd54:	4638      	mov	r0, r7
1004dd56:	d121      	bne.n	1004dd9c <BlueNRG_Stack_Initialize_RAM_check+0x254>
1004dd58:	4894      	ldr	r0, [pc, #592]	@ (1004dfac <__arm_cp.0_3>)
1004dd5a:	30d4      	adds	r0, #212	@ 0xd4
1004dd5c:	7eb1      	ldrb	r1, [r6, #26]
1004dd5e:	4341      	muls	r1, r0
1004dd60:	4628      	mov	r0, r5
1004dd62:	3048      	adds	r0, #72	@ 0x48
1004dd64:	7af2      	ldrb	r2, [r6, #11]
1004dd66:	4342      	muls	r2, r0
1004dd68:	1854      	adds	r4, r2, r1
1004dd6a:	2700      	movs	r7, #0
1004dd6c:	f7fe f964 	bl	1004c038 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1004dd70:	2801      	cmp	r0, #1
1004dd72:	d110      	bne.n	1004dd96 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1004dd74:	f7fd ff47 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004dd78:	2801      	cmp	r0, #1
1004dd7a:	d10c      	bne.n	1004dd96 <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1004dd7c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1004dd7e:	4610      	mov	r0, r2
1004dd80:	3058      	adds	r0, #88	@ 0x58
1004dd82:	7f31      	ldrb	r1, [r6, #28]
1004dd84:	4341      	muls	r1, r0
1004dd86:	4610      	mov	r0, r2
1004dd88:	3060      	adds	r0, #96	@ 0x60
1004dd8a:	7ef2      	ldrb	r2, [r6, #27]
1004dd8c:	4342      	muls	r2, r0
1004dd8e:	1850      	adds	r0, r2, r1
1004dd90:	3884      	subs	r0, #132	@ 0x84
1004dd92:	7eb7      	ldrb	r7, [r6, #26]
1004dd94:	4347      	muls	r7, r0
1004dd96:	19e0      	adds	r0, r4, r7
1004dd98:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004dd9a:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004dd9c:	900e      	str	r0, [sp, #56]	@ 0x38
1004dd9e:	f7fd ff26 	bl	1004bbee <cte_csr_ucfg_weak>
1004dda2:	2801      	cmp	r0, #1
1004dda4:	4638      	mov	r0, r7
1004dda6:	d133      	bne.n	1004de10 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
1004dda8:	f7fd ff2d 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004ddac:	2801      	cmp	r0, #1
1004ddae:	d002      	beq.n	1004ddb6 <BlueNRG_Stack_Initialize_RAM_check+0x26e>
1004ddb0:	462f      	mov	r7, r5
1004ddb2:	375c      	adds	r7, #92	@ 0x5c
1004ddb4:	e004      	b.n	1004ddc0 <BlueNRG_Stack_Initialize_RAM_check+0x278>
1004ddb6:	4628      	mov	r0, r5
1004ddb8:	3060      	adds	r0, #96	@ 0x60
1004ddba:	7af7      	ldrb	r7, [r6, #11]
1004ddbc:	4347      	muls	r7, r0
1004ddbe:	3f0c      	subs	r7, #12
1004ddc0:	2523      	movs	r5, #35	@ 0x23
1004ddc2:	5d70      	ldrb	r0, [r6, r5]
1004ddc4:	2400      	movs	r4, #0
1004ddc6:	2800      	cmp	r0, #0
1004ddc8:	4620      	mov	r0, r4
1004ddca:	d005      	beq.n	1004ddd8 <BlueNRG_Stack_Initialize_RAM_check+0x290>
1004ddcc:	f7fd ff1b 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004ddd0:	5d70      	ldrb	r0, [r6, r5]
1004ddd2:	4240      	negs	r0, r0
1004ddd4:	2103      	movs	r1, #3
1004ddd6:	4388      	bics	r0, r1
1004ddd8:	19c0      	adds	r0, r0, r7
1004ddda:	2724      	movs	r7, #36	@ 0x24
1004dddc:	5df1      	ldrb	r1, [r6, r7]
1004ddde:	9a15      	ldr	r2, [sp, #84]	@ 0x54
1004dde0:	3264      	adds	r2, #100	@ 0x64
1004dde2:	434a      	muls	r2, r1
1004dde4:	1885      	adds	r5, r0, r2
1004dde6:	f7fd ff0c 	bl	1004bc02 <scan_csr_ucfg_weak>
1004ddea:	2801      	cmp	r0, #1
1004ddec:	d10d      	bne.n	1004de0a <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004ddee:	f7ff f96a 	bl	1004d0c6 <ext_adv_scan_enabled_ucfg_weak>
1004ddf2:	2801      	cmp	r0, #1
1004ddf4:	d109      	bne.n	1004de0a <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004ddf6:	f7fe f91d 	bl	1004c034 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1004ddfa:	2801      	cmp	r0, #1
1004ddfc:	d105      	bne.n	1004de0a <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004ddfe:	5df4      	ldrb	r4, [r6, r7]
1004de00:	2c00      	cmp	r4, #0
1004de02:	9815      	ldr	r0, [sp, #84]	@ 0x54
1004de04:	d001      	beq.n	1004de0a <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
1004de06:	4604      	mov	r4, r0
1004de08:	3450      	adds	r4, #80	@ 0x50
1004de0a:	1928      	adds	r0, r5, r4
1004de0c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1004de0e:	9f16      	ldr	r7, [sp, #88]	@ 0x58
1004de10:	900d      	str	r0, [sp, #52]	@ 0x34
1004de12:	f7fd fef8 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004de16:	2801      	cmp	r0, #1
1004de18:	4639      	mov	r1, r7
1004de1a:	d109      	bne.n	1004de30 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1004de1c:	f7fd feed 	bl	1004bbfa <pcl_csr_ucfg_weak>
1004de20:	2801      	cmp	r0, #1
1004de22:	4639      	mov	r1, r7
1004de24:	d104      	bne.n	1004de30 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
1004de26:	4628      	mov	r0, r5
1004de28:	3048      	adds	r0, #72	@ 0x48
1004de2a:	7af1      	ldrb	r1, [r6, #11]
1004de2c:	4341      	muls	r1, r0
1004de2e:	3914      	subs	r1, #20
1004de30:	910c      	str	r1, [sp, #48]	@ 0x30
1004de32:	f7fd fee8 	bl	1004bc06 <conn_supp_csr_ucfg_weak>
1004de36:	2801      	cmp	r0, #1
1004de38:	463a      	mov	r2, r7
1004de3a:	d108      	bne.n	1004de4e <BlueNRG_Stack_Initialize_RAM_check+0x306>
1004de3c:	f7fd fe5e 	bl	1004bafc <chc_csr_ucfg_weak>
1004de40:	2801      	cmp	r0, #1
1004de42:	463a      	mov	r2, r7
1004de44:	d103      	bne.n	1004de4e <BlueNRG_Stack_Initialize_RAM_check+0x306>
1004de46:	4628      	mov	r0, r5
1004de48:	304c      	adds	r0, #76	@ 0x4c
1004de4a:	7af2      	ldrb	r2, [r6, #11]
1004de4c:	4342      	muls	r2, r0
1004de4e:	2026      	movs	r0, #38	@ 0x26
1004de50:	5c31      	ldrb	r1, [r6, r0]
1004de52:	2025      	movs	r0, #37	@ 0x25
1004de54:	5c34      	ldrb	r4, [r6, r0]
1004de56:	1863      	adds	r3, r4, r1
1004de58:	2029      	movs	r0, #41	@ 0x29
1004de5a:	5c30      	ldrb	r0, [r6, r0]
1004de5c:	9304      	str	r3, [sp, #16]
1004de5e:	2b00      	cmp	r3, #0
1004de60:	9014      	str	r0, [sp, #80]	@ 0x50
1004de62:	d010      	beq.n	1004de86 <BlueNRG_Stack_Initialize_RAM_check+0x33e>
1004de64:	2028      	movs	r0, #40	@ 0x28
1004de66:	5c33      	ldrb	r3, [r6, r0]
1004de68:	4628      	mov	r0, r5
1004de6a:	3060      	adds	r0, #96	@ 0x60
1004de6c:	4358      	muls	r0, r3
1004de6e:	38f8      	subs	r0, #248	@ 0xf8
1004de70:	4348      	muls	r0, r1
1004de72:	2327      	movs	r3, #39	@ 0x27
1004de74:	5cf3      	ldrb	r3, [r6, r3]
1004de76:	3554      	adds	r5, #84	@ 0x54
1004de78:	435d      	muls	r5, r3
1004de7a:	4b4c      	ldr	r3, [pc, #304]	@ (1004dfac <__arm_cp.0_3>)
1004de7c:	195b      	adds	r3, r3, r5
1004de7e:	3348      	adds	r3, #72	@ 0x48
1004de80:	4363      	muls	r3, r4
1004de82:	181f      	adds	r7, r3, r0
1004de84:	9814      	ldr	r0, [sp, #80]	@ 0x50
1004de86:	2800      	cmp	r0, #0
1004de88:	9716      	str	r7, [sp, #88]	@ 0x58
1004de8a:	920b      	str	r2, [sp, #44]	@ 0x2c
1004de8c:	d00d      	beq.n	1004deaa <BlueNRG_Stack_Initialize_RAM_check+0x362>
1004de8e:	4602      	mov	r2, r0
1004de90:	202a      	movs	r0, #42	@ 0x2a
1004de92:	5c30      	ldrb	r0, [r6, r0]
1004de94:	4d45      	ldr	r5, [pc, #276]	@ (1004dfac <__arm_cp.0_3>)
1004de96:	462b      	mov	r3, r5
1004de98:	33b0      	adds	r3, #176	@ 0xb0
1004de9a:	4343      	muls	r3, r0
1004de9c:	4637      	mov	r7, r6
1004de9e:	462e      	mov	r6, r5
1004dea0:	36c8      	adds	r6, #200	@ 0xc8
1004dea2:	4356      	muls	r6, r2
1004dea4:	18f3      	adds	r3, r6, r3
1004dea6:	3b48      	subs	r3, #72	@ 0x48
1004dea8:	e003      	b.n	1004deb2 <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1004deaa:	202a      	movs	r0, #42	@ 0x2a
1004deac:	5c30      	ldrb	r0, [r6, r0]
1004deae:	2300      	movs	r3, #0
1004deb0:	4637      	mov	r7, r6
1004deb2:	2628      	movs	r6, #40	@ 0x28
1004deb4:	5dbe      	ldrb	r6, [r7, r6]
1004deb6:	4371      	muls	r1, r6
1004deb8:	1809      	adds	r1, r1, r0
1004deba:	2627      	movs	r6, #39	@ 0x27
1004debc:	463d      	mov	r5, r7
1004debe:	5dbe      	ldrb	r6, [r7, r6]
1004dec0:	4374      	muls	r4, r6
1004dec2:	1824      	adds	r4, r4, r0
1004dec4:	1860      	adds	r0, r4, r1
1004dec6:	d013      	beq.n	1004def0 <__arm_cp.0_6+0x4>
1004dec8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1004deca:	463e      	mov	r6, r7
1004decc:	364c      	adds	r6, #76	@ 0x4c
1004dece:	4366      	muls	r6, r4
1004ded0:	463c      	mov	r4, r7
1004ded2:	3434      	adds	r4, #52	@ 0x34
1004ded4:	434c      	muls	r4, r1
1004ded6:	19a1      	adds	r1, r4, r6
1004ded8:	463c      	mov	r4, r7
1004deda:	345c      	adds	r4, #92	@ 0x5c
1004dedc:	4344      	muls	r4, r0
1004dede:	190c      	adds	r4, r1, r4
1004dee0:	3c14      	subs	r4, #20
1004dee2:	e007      	b.n	1004def4 <__arm_cp.0_6+0x8>

1004dee4 <__arm_cp.0_4>:
1004dee4:	fffffc18 	.word	0xfffffc18

1004dee8 <__arm_cp.0_5>:
1004dee8:	20000b50 	.word	0x20000b50

1004deec <__arm_cp.0_6>:
1004deec:	fffffd70 	.word	0xfffffd70
1004def0:	2400      	movs	r4, #0
1004def2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1004def4:	9903      	ldr	r1, [sp, #12]
1004def6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1004def8:	9811      	ldr	r0, [sp, #68]	@ 0x44
1004defa:	1808      	adds	r0, r1, r0
1004defc:	4639      	mov	r1, r7
1004defe:	3144      	adds	r1, #68	@ 0x44
1004df00:	4371      	muls	r1, r6
1004df02:	1840      	adds	r0, r0, r1
1004df04:	9909      	ldr	r1, [sp, #36]	@ 0x24
1004df06:	1840      	adds	r0, r0, r1
1004df08:	9913      	ldr	r1, [sp, #76]	@ 0x4c
1004df0a:	1840      	adds	r0, r0, r1
1004df0c:	9912      	ldr	r1, [sp, #72]	@ 0x48
1004df0e:	1841      	adds	r1, r0, r1
1004df10:	4638      	mov	r0, r7
1004df12:	3060      	adds	r0, #96	@ 0x60
1004df14:	4606      	mov	r6, r0
1004df16:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1004df18:	4096      	lsls	r6, r2
1004df1a:	1989      	adds	r1, r1, r6
1004df1c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1004df1e:	2a01      	cmp	r2, #1
1004df20:	d106      	bne.n	1004df30 <__arm_cp.0_6+0x44>
1004df22:	4e22      	ldr	r6, [pc, #136]	@ (1004dfac <__arm_cp.0_3>)
1004df24:	9a00      	ldr	r2, [sp, #0]
1004df26:	4356      	muls	r6, r2
1004df28:	1871      	adds	r1, r6, r1
1004df2a:	2645      	movs	r6, #69	@ 0x45
1004df2c:	00b6      	lsls	r6, r6, #2
1004df2e:	1989      	adds	r1, r1, r6
1004df30:	462e      	mov	r6, r5
1004df32:	9d07      	ldr	r5, [sp, #28]
1004df34:	9a05      	ldr	r2, [sp, #20]
1004df36:	2d01      	cmp	r5, #1
1004df38:	d102      	bne.n	1004df40 <__arm_cp.0_6+0x54>
1004df3a:	9d01      	ldr	r5, [sp, #4]
1004df3c:	40a8      	lsls	r0, r5
1004df3e:	1809      	adds	r1, r1, r0
1004df40:	9808      	ldr	r0, [sp, #32]
1004df42:	2801      	cmp	r0, #1
1004df44:	d105      	bne.n	1004df52 <__arm_cp.0_6+0x66>
1004df46:	4638      	mov	r0, r7
1004df48:	3018      	adds	r0, #24
1004df4a:	9d02      	ldr	r5, [sp, #8]
1004df4c:	40a8      	lsls	r0, r5
1004df4e:	1841      	adds	r1, r0, r1
1004df50:	3970      	subs	r1, #112	@ 0x70
1004df52:	9806      	ldr	r0, [sp, #24]
1004df54:	9d04      	ldr	r5, [sp, #16]
1004df56:	1808      	adds	r0, r1, r0
1004df58:	1880      	adds	r0, r0, r2
1004df5a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1004df5c:	1840      	adds	r0, r0, r1
1004df5e:	990d      	ldr	r1, [sp, #52]	@ 0x34
1004df60:	1840      	adds	r0, r0, r1
1004df62:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004df64:	1840      	adds	r0, r0, r1
1004df66:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1004df68:	1840      	adds	r0, r0, r1
1004df6a:	9914      	ldr	r1, [sp, #80]	@ 0x50
1004df6c:	42cd      	cmn	r5, r1
1004df6e:	d001      	beq.n	1004df74 <__arm_cp.0_6+0x88>
1004df70:	1838      	adds	r0, r7, r0
1004df72:	3058      	adds	r0, #88	@ 0x58
1004df74:	9916      	ldr	r1, [sp, #88]	@ 0x58
1004df76:	1840      	adds	r0, r0, r1
1004df78:	18c0      	adds	r0, r0, r3
1004df7a:	1904      	adds	r4, r0, r4
1004df7c:	f7fc ff4f 	bl	1004ae1e <log_csr_ucfg_weak>
1004df80:	2801      	cmp	r0, #1
1004df82:	d100      	bne.n	1004df86 <__arm_cp.0_6+0x9a>
1004df84:	19e4      	adds	r4, r4, r7
1004df86:	6870      	ldr	r0, [r6, #4]
1004df88:	1820      	adds	r0, r4, r0
1004df8a:	2103      	movs	r1, #3
1004df8c:	43c9      	mvns	r1, r1
1004df8e:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
1004df90:	1cd2      	adds	r2, r2, #3
1004df92:	400a      	ands	r2, r1
1004df94:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1004df96:	1cdb      	adds	r3, r3, #3
1004df98:	400b      	ands	r3, r1
1004df9a:	189a      	adds	r2, r3, r2
1004df9c:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
1004df9e:	1cdb      	adds	r3, r3, #3
1004dfa0:	400b      	ands	r3, r1
1004dfa2:	18d1      	adds	r1, r2, r3
1004dfa4:	1a40      	subs	r0, r0, r1
1004dfa6:	b017      	add	sp, #92	@ 0x5c
1004dfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004dfaa:	46c0      	nop			@ (mov r8, r8)

1004dfac <__arm_cp.0_3>:
1004dfac:	fffffe90 	.word	0xfffffe90

1004dfb0 <smp_crt_diversify>:
1004dfb0:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1004dfb2:	780d      	ldrb	r5, [r1, #0]
1004dfb4:	466c      	mov	r4, sp
1004dfb6:	7025      	strb	r5, [r4, #0]
1004dfb8:	7849      	ldrb	r1, [r1, #1]
1004dfba:	7061      	strb	r1, [r4, #1]
1004dfbc:	7811      	ldrb	r1, [r2, #0]
1004dfbe:	70a1      	strb	r1, [r4, #2]
1004dfc0:	7851      	ldrb	r1, [r2, #1]
1004dfc2:	70e1      	strb	r1, [r4, #3]
1004dfc4:	2100      	movs	r1, #0
1004dfc6:	9103      	str	r1, [sp, #12]
1004dfc8:	9102      	str	r1, [sp, #8]
1004dfca:	9101      	str	r1, [sp, #4]
1004dfcc:	4621      	mov	r1, r4
1004dfce:	461a      	mov	r2, r3
1004dfd0:	f000 fb8a 	bl	1004e6e8 <hci_le_encrypt>
1004dfd4:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

1004dfd8 <smp_sap_crt_generate_local_irk>:
1004dfd8:	b5e0      	push	{r5, r6, r7, lr}
1004dfda:	4603      	mov	r3, r0
1004dfdc:	a901      	add	r1, sp, #4
1004dfde:	2001      	movs	r0, #1
1004dfe0:	8008      	strh	r0, [r1, #0]
1004dfe2:	466a      	mov	r2, sp
1004dfe4:	2000      	movs	r0, #0
1004dfe6:	8010      	strh	r0, [r2, #0]
1004dfe8:	4802      	ldr	r0, [pc, #8]	@ (1004dff4 <__arm_cp.2_0>)
1004dfea:	6800      	ldr	r0, [r0, #0]
1004dfec:	3018      	adds	r0, #24
1004dfee:	f7ff ffdf 	bl	1004dfb0 <smp_crt_diversify>
1004dff2:	bd8c      	pop	{r2, r3, r7, pc}

1004dff4 <__arm_cp.2_0>:
1004dff4:	20000b30 	.word	0x20000b30

1004dff8 <smp_sap_crt_generate_rpa>:
1004dff8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004dffa:	b087      	sub	sp, #28
1004dffc:	9000      	str	r0, [sp, #0]
1004dffe:	ae03      	add	r6, sp, #12
1004e000:	4630      	mov	r0, r6
1004e002:	f7ff ffe9 	bl	1004dfd8 <smp_sap_crt_generate_local_irk>
1004e006:	2700      	movs	r7, #0
1004e008:	4638      	mov	r0, r7
1004e00a:	f000 fa48 	bl	1004e49e <Hal_Get_Random_Number>
1004e00e:	0a01      	lsrs	r1, r0, #8
1004e010:	ad02      	add	r5, sp, #8
1004e012:	7069      	strb	r1, [r5, #1]
1004e014:	243f      	movs	r4, #63	@ 0x3f
1004e016:	4004      	ands	r4, r0
1004e018:	3440      	adds	r4, #64	@ 0x40
1004e01a:	4638      	mov	r0, r7
1004e01c:	f000 fa3f 	bl	1004e49e <Hal_Get_Random_Number>
1004e020:	70ac      	strb	r4, [r5, #2]
1004e022:	7028      	strb	r0, [r5, #0]
1004e024:	af01      	add	r7, sp, #4
1004e026:	4630      	mov	r0, r6
1004e028:	4629      	mov	r1, r5
1004e02a:	463a      	mov	r2, r7
1004e02c:	f000 f80e 	bl	1004e04c <smp_crt_calculate_hash>
1004e030:	2603      	movs	r6, #3
1004e032:	9c00      	ldr	r4, [sp, #0]
1004e034:	4620      	mov	r0, r4
1004e036:	4639      	mov	r1, r7
1004e038:	4632      	mov	r2, r6
1004e03a:	f7f3 fce9 	bl	10041a10 <BLEPLAT_MemCpy>
1004e03e:	1ce0      	adds	r0, r4, #3
1004e040:	4629      	mov	r1, r5
1004e042:	4632      	mov	r2, r6
1004e044:	f7f3 fce4 	bl	10041a10 <BLEPLAT_MemCpy>
1004e048:	b007      	add	sp, #28
1004e04a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004e04c <smp_crt_calculate_hash>:
1004e04c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e04e:	b089      	sub	sp, #36	@ 0x24
1004e050:	9200      	str	r2, [sp, #0]
1004e052:	460f      	mov	r7, r1
1004e054:	4605      	mov	r5, r0
1004e056:	ae05      	add	r6, sp, #20
1004e058:	2100      	movs	r1, #0
1004e05a:	2210      	movs	r2, #16
1004e05c:	4630      	mov	r0, r6
1004e05e:	f7f3 fce7 	bl	10041a30 <BLEPLAT_MemSet>
1004e062:	2403      	movs	r4, #3
1004e064:	4630      	mov	r0, r6
1004e066:	4639      	mov	r1, r7
1004e068:	4622      	mov	r2, r4
1004e06a:	f7f3 fcd1 	bl	10041a10 <BLEPLAT_MemCpy>
1004e06e:	af01      	add	r7, sp, #4
1004e070:	4628      	mov	r0, r5
1004e072:	4631      	mov	r1, r6
1004e074:	463a      	mov	r2, r7
1004e076:	f000 fb37 	bl	1004e6e8 <hci_le_encrypt>
1004e07a:	9800      	ldr	r0, [sp, #0]
1004e07c:	4639      	mov	r1, r7
1004e07e:	4622      	mov	r2, r4
1004e080:	f7f3 fcc6 	bl	10041a10 <BLEPLAT_MemCpy>
1004e084:	b009      	add	sp, #36	@ 0x24
1004e086:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004e088 <smp_init_ucfg_weak>:
1004e088:	4770      	bx	lr

1004e08a <secure_connections_csr_ucfg_weak>:
1004e08a:	2000      	movs	r0, #0
1004e08c:	4770      	bx	lr

1004e08e <nvm_dev_id_data_get_record>:
1004e08e:	b5e0      	push	{r5, r6, r7, lr}
1004e090:	4603      	mov	r3, r0
1004e092:	2026      	movs	r0, #38	@ 0x26
1004e094:	9000      	str	r0, [sp, #0]
1004e096:	2102      	movs	r1, #2
1004e098:	2000      	movs	r0, #0
1004e09a:	4602      	mov	r2, r0
1004e09c:	f7f3 fc40 	bl	10041920 <BLEPLAT_NvmGet>
1004e0a0:	2800      	cmp	r0, #0
1004e0a2:	d000      	beq.n	1004e0a6 <nvm_dev_id_data_get_record+0x18>
1004e0a4:	2081      	movs	r0, #129	@ 0x81
1004e0a6:	bd8c      	pop	{r2, r3, r7, pc}

1004e0a8 <nvm_dev_id_data_add_record>:
1004e0a8:	b5e0      	push	{r5, r6, r7, lr}
1004e0aa:	4601      	mov	r1, r0
1004e0ac:	2300      	movs	r3, #0
1004e0ae:	9300      	str	r3, [sp, #0]
1004e0b0:	2002      	movs	r0, #2
1004e0b2:	2226      	movs	r2, #38	@ 0x26
1004e0b4:	f7f3 fbe6 	bl	10041884 <BLEPLAT_NvmAdd>
1004e0b8:	2800      	cmp	r0, #0
1004e0ba:	d000      	beq.n	1004e0be <nvm_dev_id_data_add_record+0x16>
1004e0bc:	2081      	movs	r0, #129	@ 0x81
1004e0be:	bd8c      	pop	{r2, r3, r7, pc}

1004e0c0 <tsk_init>:
1004e0c0:	4803      	ldr	r0, [pc, #12]	@ (1004e0d0 <__arm_cp.0_0>)
1004e0c2:	6800      	ldr	r0, [r0, #0]
1004e0c4:	2100      	movs	r1, #0
1004e0c6:	6081      	str	r1, [r0, #8]
1004e0c8:	60c1      	str	r1, [r0, #12]
1004e0ca:	6101      	str	r1, [r0, #16]
1004e0cc:	6001      	str	r1, [r0, #0]
1004e0ce:	4770      	bx	lr

1004e0d0 <__arm_cp.0_0>:
1004e0d0:	20000b84 	.word	0x20000b84

1004e0d4 <tsk_scheduler>:
1004e0d4:	b570      	push	{r4, r5, r6, lr}
1004e0d6:	4d17      	ldr	r5, [pc, #92]	@ (1004e134 <__arm_cp.1_0>)
1004e0d8:	6828      	ldr	r0, [r5, #0]
1004e0da:	f3ef 8110 	mrs	r1, PRIMASK
1004e0de:	b672      	cpsid	i
1004e0e0:	6801      	ldr	r1, [r0, #0]
1004e0e2:	2600      	movs	r6, #0
1004e0e4:	6006      	str	r6, [r0, #0]
1004e0e6:	6842      	ldr	r2, [r0, #4]
1004e0e8:	430a      	orrs	r2, r1
1004e0ea:	6042      	str	r2, [r0, #4]
1004e0ec:	b662      	cpsie	i
1004e0ee:	682c      	ldr	r4, [r5, #0]
1004e0f0:	3410      	adds	r4, #16
1004e0f2:	6820      	ldr	r0, [r4, #0]
1004e0f4:	2800      	cmp	r0, #0
1004e0f6:	d00f      	beq.n	1004e118 <tsk_scheduler+0x44>
1004e0f8:	4620      	mov	r0, r4
1004e0fa:	f000 f83b 	bl	1004e174 <lsbit>
1004e0fe:	0080      	lsls	r0, r0, #2
1004e100:	6829      	ldr	r1, [r5, #0]
1004e102:	1808      	adds	r0, r1, r0
1004e104:	f3ef 8210 	mrs	r2, PRIMASK
1004e108:	b672      	cpsid	i
1004e10a:	6882      	ldr	r2, [r0, #8]
1004e10c:	6086      	str	r6, [r0, #8]
1004e10e:	6848      	ldr	r0, [r1, #4]
1004e110:	4310      	orrs	r0, r2
1004e112:	6048      	str	r0, [r1, #4]
1004e114:	b662      	cpsie	i
1004e116:	e7ec      	b.n	1004e0f2 <tsk_scheduler+0x1e>
1004e118:	6828      	ldr	r0, [r5, #0]
1004e11a:	1d04      	adds	r4, r0, #4
1004e11c:	4d06      	ldr	r5, [pc, #24]	@ (1004e138 <__arm_cp.1_1>)
1004e11e:	6820      	ldr	r0, [r4, #0]
1004e120:	2800      	cmp	r0, #0
1004e122:	d006      	beq.n	1004e132 <tsk_scheduler+0x5e>
1004e124:	4620      	mov	r0, r4
1004e126:	f000 f825 	bl	1004e174 <lsbit>
1004e12a:	0081      	lsls	r1, r0, #2
1004e12c:	5869      	ldr	r1, [r5, r1]
1004e12e:	4788      	blx	r1
1004e130:	e7f5      	b.n	1004e11e <tsk_scheduler+0x4a>
1004e132:	bd70      	pop	{r4, r5, r6, pc}

1004e134 <__arm_cp.1_0>:
1004e134:	20000b84 	.word	0x20000b84

1004e138 <__arm_cp.1_1>:
1004e138:	1004fe58 	.word	0x1004fe58

1004e13c <tsk_no_idle_check>:
1004e13c:	4803      	ldr	r0, [pc, #12]	@ (1004e14c <__arm_cp.2_0>)
1004e13e:	6800      	ldr	r0, [r0, #0]
1004e140:	6801      	ldr	r1, [r0, #0]
1004e142:	6900      	ldr	r0, [r0, #16]
1004e144:	4308      	orrs	r0, r1
1004e146:	1e41      	subs	r1, r0, #1
1004e148:	4188      	sbcs	r0, r1
1004e14a:	4770      	bx	lr

1004e14c <__arm_cp.2_0>:
1004e14c:	20000b84 	.word	0x20000b84

1004e150 <tsk_notify_idx>:
1004e150:	211f      	movs	r1, #31
1004e152:	4001      	ands	r1, r0
1004e154:	2201      	movs	r2, #1
1004e156:	408a      	lsls	r2, r1
1004e158:	f3ef 8110 	mrs	r1, PRIMASK
1004e15c:	b672      	cpsid	i
1004e15e:	4904      	ldr	r1, [pc, #16]	@ (1004e170 <__arm_cp.3_0>)
1004e160:	6809      	ldr	r1, [r1, #0]
1004e162:	0940      	lsrs	r0, r0, #5
1004e164:	0080      	lsls	r0, r0, #2
1004e166:	580b      	ldr	r3, [r1, r0]
1004e168:	4313      	orrs	r3, r2
1004e16a:	500b      	str	r3, [r1, r0]
1004e16c:	b662      	cpsie	i
1004e16e:	4770      	bx	lr

1004e170 <__arm_cp.3_0>:
1004e170:	20000b84 	.word	0x20000b84

1004e174 <lsbit>:
1004e174:	f3ef 8110 	mrs	r1, PRIMASK
1004e178:	b672      	cpsid	i
1004e17a:	6801      	ldr	r1, [r0, #0]
1004e17c:	424a      	negs	r2, r1
1004e17e:	400a      	ands	r2, r1
1004e180:	4051      	eors	r1, r2
1004e182:	6001      	str	r1, [r0, #0]
1004e184:	4803      	ldr	r0, [pc, #12]	@ (1004e194 <__arm_cp.7_0>)
1004e186:	4350      	muls	r0, r2
1004e188:	0ec0      	lsrs	r0, r0, #27
1004e18a:	a103      	add	r1, pc, #12	@ (adr r1, 1004e198 <__arm_cp.7_0+0x4>)
1004e18c:	5c08      	ldrb	r0, [r1, r0]
1004e18e:	b662      	cpsie	i
1004e190:	4770      	bx	lr
1004e192:	46c0      	nop			@ (mov r8, r8)

1004e194 <__arm_cp.7_0>:
1004e194:	04653adf 	.word	0x04653adf
1004e198:	06020100 	.word	0x06020100
1004e19c:	10070b03 	.word	0x10070b03
1004e1a0:	150c0e04 	.word	0x150c0e04
1004e1a4:	1a111708 	.word	0x1a111708
1004e1a8:	0f0a051f 	.word	0x0f0a051f
1004e1ac:	1916140d 	.word	0x1916140d
1004e1b0:	1813091e 	.word	0x1813091e
1004e1b4:	1b1c121d 	.word	0x1b1c121d

1004e1b8 <CST_init>:
1004e1b8:	b510      	push	{r4, lr}
1004e1ba:	2412      	movs	r4, #18
1004e1bc:	2800      	cmp	r0, #0
1004e1be:	d00e      	beq.n	1004e1de <CST_init+0x26>
1004e1c0:	2a00      	cmp	r2, #0
1004e1c2:	d00c      	beq.n	1004e1de <CST_init+0x26>
1004e1c4:	2b0b      	cmp	r3, #11
1004e1c6:	d80a      	bhi.n	1004e1de <CST_init+0x26>
1004e1c8:	7041      	strb	r1, [r0, #1]
1004e1ca:	7003      	strb	r3, [r0, #0]
1004e1cc:	6a03      	ldr	r3, [r0, #32]
1004e1ce:	5459      	strb	r1, [r3, r1]
1004e1d0:	1e49      	subs	r1, r1, #1
1004e1d2:	1c4b      	adds	r3, r1, #1
1004e1d4:	d3fa      	bcc.n	1004e1cc <CST_init+0x14>
1004e1d6:	6102      	str	r2, [r0, #16]
1004e1d8:	2400      	movs	r4, #0
1004e1da:	7504      	strb	r4, [r0, #20]
1004e1dc:	61c0      	str	r0, [r0, #28]
1004e1de:	4620      	mov	r0, r4
1004e1e0:	bd10      	pop	{r4, pc}

1004e1e2 <CST_stop>:
1004e1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e1e4:	4605      	mov	r5, r0
1004e1e6:	2012      	movs	r0, #18
1004e1e8:	2d00      	cmp	r5, #0
1004e1ea:	d01b      	beq.n	1004e224 <CST_stop+0x42>
1004e1ec:	460c      	mov	r4, r1
1004e1ee:	786a      	ldrb	r2, [r5, #1]
1004e1f0:	428a      	cmp	r2, r1
1004e1f2:	d917      	bls.n	1004e224 <CST_stop+0x42>
1004e1f4:	6a2b      	ldr	r3, [r5, #32]
1004e1f6:	5d19      	ldrb	r1, [r3, r4]
1004e1f8:	42a1      	cmp	r1, r4
1004e1fa:	d101      	bne.n	1004e200 <CST_stop+0x1e>
1004e1fc:	2000      	movs	r0, #0
1004e1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004e200:	4617      	mov	r7, r2
1004e202:	463e      	mov	r6, r7
1004e204:	5ddf      	ldrb	r7, [r3, r7]
1004e206:	4297      	cmp	r7, r2
1004e208:	d001      	beq.n	1004e20e <CST_stop+0x2c>
1004e20a:	42a7      	cmp	r7, r4
1004e20c:	d1f9      	bne.n	1004e202 <CST_stop+0x20>
1004e20e:	2000      	movs	r0, #0
1004e210:	4297      	cmp	r7, r2
1004e212:	d005      	beq.n	1004e220 <CST_stop+0x3e>
1004e214:	5599      	strb	r1, [r3, r6]
1004e216:	4296      	cmp	r6, r2
1004e218:	d102      	bne.n	1004e220 <CST_stop+0x3e>
1004e21a:	4628      	mov	r0, r5
1004e21c:	f000 f803 	bl	1004e226 <Timer_TryStartFirstActive>
1004e220:	6a29      	ldr	r1, [r5, #32]
1004e222:	550c      	strb	r4, [r1, r4]
1004e224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1004e226 <Timer_TryStartFirstActive>:
1004e226:	b510      	push	{r4, lr}
1004e228:	7842      	ldrb	r2, [r0, #1]
1004e22a:	428a      	cmp	r2, r1
1004e22c:	d107      	bne.n	1004e23e <Timer_TryStartFirstActive+0x18>
1004e22e:	7d01      	ldrb	r1, [r0, #20]
1004e230:	2400      	movs	r4, #0
1004e232:	2900      	cmp	r1, #0
1004e234:	d009      	beq.n	1004e24a <Timer_TryStartFirstActive+0x24>
1004e236:	3008      	adds	r0, #8
1004e238:	f7f3 fc88 	bl	10041b4c <BLEPLAT_StopTimer>
1004e23c:	e005      	b.n	1004e24a <Timer_TryStartFirstActive+0x24>
1004e23e:	0049      	lsls	r1, r1, #1
1004e240:	6a42      	ldr	r2, [r0, #36]	@ 0x24
1004e242:	5e51      	ldrsh	r1, [r2, r1]
1004e244:	f000 f86a 	bl	1004e31c <Timer_StartFirstActive_sysT>
1004e248:	4604      	mov	r4, r0
1004e24a:	4620      	mov	r0, r4
1004e24c:	bd10      	pop	{r4, pc}

1004e24e <CST_start>:
1004e24e:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e250:	b085      	sub	sp, #20
1004e252:	2612      	movs	r6, #18
1004e254:	2800      	cmp	r0, #0
1004e256:	d05e      	beq.n	1004e316 <CST_start+0xc8>
1004e258:	461f      	mov	r7, r3
1004e25a:	460d      	mov	r5, r1
1004e25c:	4604      	mov	r4, r0
1004e25e:	7843      	ldrb	r3, [r0, #1]
1004e260:	428b      	cmp	r3, r1
1004e262:	d958      	bls.n	1004e316 <CST_start+0xc8>
1004e264:	7820      	ldrb	r0, [r4, #0]
1004e266:	2105      	movs	r1, #5
1004e268:	0309      	lsls	r1, r1, #12
1004e26a:	4081      	lsls	r1, r0
1004e26c:	428f      	cmp	r7, r1
1004e26e:	d852      	bhi.n	1004e316 <CST_start+0xc8>
1004e270:	9204      	str	r2, [sp, #16]
1004e272:	9302      	str	r3, [sp, #8]
1004e274:	f7f3 fc4f 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004e278:	4602      	mov	r2, r0
1004e27a:	7823      	ldrb	r3, [r4, #0]
1004e27c:	6a20      	ldr	r0, [r4, #32]
1004e27e:	5d40      	ldrb	r0, [r0, r5]
1004e280:	42a8      	cmp	r0, r5
1004e282:	d00c      	beq.n	1004e29e <CST_start+0x50>
1004e284:	9804      	ldr	r0, [sp, #16]
1004e286:	2800      	cmp	r0, #0
1004e288:	d045      	beq.n	1004e316 <CST_start+0xc8>
1004e28a:	4620      	mov	r0, r4
1004e28c:	9103      	str	r1, [sp, #12]
1004e28e:	4629      	mov	r1, r5
1004e290:	9304      	str	r3, [sp, #16]
1004e292:	4616      	mov	r6, r2
1004e294:	f7ff ffa5 	bl	1004e1e2 <CST_stop>
1004e298:	9903      	ldr	r1, [sp, #12]
1004e29a:	4632      	mov	r2, r6
1004e29c:	9b04      	ldr	r3, [sp, #16]
1004e29e:	2033      	movs	r0, #51	@ 0x33
1004e2a0:	4378      	muls	r0, r7
1004e2a2:	460e      	mov	r6, r1
1004e2a4:	0a01      	lsrs	r1, r0, #8
1004e2a6:	1808      	adds	r0, r1, r0
1004e2a8:	0c01      	lsrs	r1, r0, #16
1004e2aa:	1808      	adds	r0, r1, r0
1004e2ac:	0771      	lsls	r1, r6, #29
1004e2ae:	08d2      	lsrs	r2, r2, #3
1004e2b0:	1851      	adds	r1, r2, r1
1004e2b2:	1842      	adds	r2, r0, r1
1004e2b4:	1d58      	adds	r0, r3, #5
1004e2b6:	b2c0      	uxtb	r0, r0
1004e2b8:	40c2      	lsrs	r2, r0
1004e2ba:	9501      	str	r5, [sp, #4]
1004e2bc:	0068      	lsls	r0, r5, #1
1004e2be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
1004e2c0:	9204      	str	r2, [sp, #16]
1004e2c2:	520a      	strh	r2, [r1, r0]
1004e2c4:	f7f3 fc27 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004e2c8:	08c0      	lsrs	r0, r0, #3
1004e2ca:	9003      	str	r0, [sp, #12]
1004e2cc:	7862      	ldrb	r2, [r4, #1]
1004e2ce:	6a20      	ldr	r0, [r4, #32]
1004e2d0:	4617      	mov	r7, r2
1004e2d2:	463b      	mov	r3, r7
1004e2d4:	5dc7      	ldrb	r7, [r0, r7]
1004e2d6:	4297      	cmp	r7, r2
1004e2d8:	d00d      	beq.n	1004e2f6 <CST_start+0xa8>
1004e2da:	007d      	lsls	r5, r7, #1
1004e2dc:	6a66      	ldr	r6, [r4, #36]	@ 0x24
1004e2de:	5b75      	ldrh	r5, [r6, r5]
1004e2e0:	7826      	ldrb	r6, [r4, #0]
1004e2e2:	1d76      	adds	r6, r6, #5
1004e2e4:	9903      	ldr	r1, [sp, #12]
1004e2e6:	40f1      	lsrs	r1, r6
1004e2e8:	1a6d      	subs	r5, r5, r1
1004e2ea:	b22d      	sxth	r5, r5
1004e2ec:	9e04      	ldr	r6, [sp, #16]
1004e2ee:	1a71      	subs	r1, r6, r1
1004e2f0:	b209      	sxth	r1, r1
1004e2f2:	428d      	cmp	r5, r1
1004e2f4:	dded      	ble.n	1004e2d2 <CST_start+0x84>
1004e2f6:	5cc1      	ldrb	r1, [r0, r3]
1004e2f8:	9a01      	ldr	r2, [sp, #4]
1004e2fa:	5481      	strb	r1, [r0, r2]
1004e2fc:	6a20      	ldr	r0, [r4, #32]
1004e2fe:	54c2      	strb	r2, [r0, r3]
1004e300:	9802      	ldr	r0, [sp, #8]
1004e302:	4283      	cmp	r3, r0
1004e304:	d106      	bne.n	1004e314 <CST_start+0xc6>
1004e306:	9804      	ldr	r0, [sp, #16]
1004e308:	b201      	sxth	r1, r0
1004e30a:	4620      	mov	r0, r4
1004e30c:	f000 f806 	bl	1004e31c <Timer_StartFirstActive_sysT>
1004e310:	4606      	mov	r6, r0
1004e312:	e000      	b.n	1004e316 <CST_start+0xc8>
1004e314:	2600      	movs	r6, #0
1004e316:	4630      	mov	r0, r6
1004e318:	b005      	add	sp, #20
1004e31a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004e31c <Timer_StartFirstActive_sysT>:
1004e31c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004e31e:	9101      	str	r1, [sp, #4]
1004e320:	4604      	mov	r4, r0
1004e322:	4607      	mov	r7, r0
1004e324:	3708      	adds	r7, #8
1004e326:	f7f3 fbf6 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004e32a:	9002      	str	r0, [sp, #8]
1004e32c:	460d      	mov	r5, r1
1004e32e:	7826      	ldrb	r6, [r4, #0]
1004e330:	7d20      	ldrb	r0, [r4, #20]
1004e332:	2800      	cmp	r0, #0
1004e334:	d004      	beq.n	1004e340 <Timer_StartFirstActive_sysT+0x24>
1004e336:	4638      	mov	r0, r7
1004e338:	f7f3 fc08 	bl	10041b4c <BLEPLAT_StopTimer>
1004e33c:	7822      	ldrb	r2, [r4, #0]
1004e33e:	e000      	b.n	1004e342 <Timer_StartFirstActive_sysT+0x26>
1004e340:	4632      	mov	r2, r6
1004e342:	1d70      	adds	r0, r6, #5
1004e344:	9c02      	ldr	r4, [sp, #8]
1004e346:	08e1      	lsrs	r1, r4, #3
1004e348:	40c1      	lsrs	r1, r0
1004e34a:	9801      	ldr	r0, [sp, #4]
1004e34c:	1a40      	subs	r0, r0, r1
1004e34e:	b200      	sxth	r0, r0
1004e350:	1e40      	subs	r0, r0, #1
1004e352:	17c1      	asrs	r1, r0, #31
1004e354:	3208      	adds	r2, #8
1004e356:	f7f2 f8e1 	bl	1004051c <__aeabi_llsl>
1004e35a:	1902      	adds	r2, r0, r4
1004e35c:	414d      	adcs	r5, r1
1004e35e:	4638      	mov	r0, r7
1004e360:	462b      	mov	r3, r5
1004e362:	f7f3 fbe2 	bl	10041b2a <BLEPLAT_StartTimer>
1004e366:	b2c0      	uxtb	r0, r0
1004e368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004e36a <cst_sharedCallback>:
1004e36a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1004e36c:	9102      	str	r1, [sp, #8]
1004e36e:	4605      	mov	r5, r0
1004e370:	7847      	ldrb	r7, [r0, #1]
1004e372:	6a00      	ldr	r0, [r0, #32]
1004e374:	5dc4      	ldrb	r4, [r0, r7]
1004e376:	f7f3 fbce 	bl	10041b16 <BLEPLAT_GetCurrentSysTime>
1004e37a:	08c0      	lsrs	r0, r0, #3
1004e37c:	9001      	str	r0, [sp, #4]
1004e37e:	4620      	mov	r0, r4
1004e380:	b2c2      	uxtb	r2, r0
1004e382:	42ba      	cmp	r2, r7
1004e384:	d00d      	beq.n	1004e3a2 <cst_sharedCallback+0x38>
1004e386:	0053      	lsls	r3, r2, #1
1004e388:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
1004e38a:	5af3      	ldrh	r3, [r6, r3]
1004e38c:	782e      	ldrb	r6, [r5, #0]
1004e38e:	1d76      	adds	r6, r6, #5
1004e390:	9901      	ldr	r1, [sp, #4]
1004e392:	40f1      	lsrs	r1, r6
1004e394:	1a59      	subs	r1, r3, r1
1004e396:	b209      	sxth	r1, r1
1004e398:	2901      	cmp	r1, #1
1004e39a:	dc03      	bgt.n	1004e3a4 <cst_sharedCallback+0x3a>
1004e39c:	6a28      	ldr	r0, [r5, #32]
1004e39e:	5c80      	ldrb	r0, [r0, r2]
1004e3a0:	e7ee      	b.n	1004e380 <cst_sharedCallback+0x16>
1004e3a2:	4638      	mov	r0, r7
1004e3a4:	6a29      	ldr	r1, [r5, #32]
1004e3a6:	55c8      	strb	r0, [r1, r7]
1004e3a8:	b2c6      	uxtb	r6, r0
1004e3aa:	4628      	mov	r0, r5
1004e3ac:	4631      	mov	r1, r6
1004e3ae:	f7ff ff3a 	bl	1004e226 <Timer_TryStartFirstActive>
1004e3b2:	b2e0      	uxtb	r0, r4
1004e3b4:	42b0      	cmp	r0, r6
1004e3b6:	d006      	beq.n	1004e3c6 <cst_sharedCallback+0x5c>
1004e3b8:	6a29      	ldr	r1, [r5, #32]
1004e3ba:	5c0f      	ldrb	r7, [r1, r0]
1004e3bc:	540c      	strb	r4, [r1, r0]
1004e3be:	9902      	ldr	r1, [sp, #8]
1004e3c0:	4788      	blx	r1
1004e3c2:	463c      	mov	r4, r7
1004e3c4:	e7f5      	b.n	1004e3b2 <cst_sharedCallback+0x48>
1004e3c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1004e3c8 <is_Buffer_All_Set_To>:
1004e3c8:	b570      	push	{r4, r5, r6, lr}
1004e3ca:	4603      	mov	r3, r0
1004e3cc:	2001      	movs	r0, #1
1004e3ce:	2900      	cmp	r1, #0
1004e3d0:	d009      	beq.n	1004e3e6 <is_Buffer_All_Set_To+0x1e>
1004e3d2:	2400      	movs	r4, #0
1004e3d4:	4626      	mov	r6, r4
1004e3d6:	4625      	mov	r5, r4
1004e3d8:	5d96      	ldrb	r6, [r2, r6]
1004e3da:	429e      	cmp	r6, r3
1004e3dc:	d104      	bne.n	1004e3e8 <is_Buffer_All_Set_To+0x20>
1004e3de:	1c6d      	adds	r5, r5, #1
1004e3e0:	b2ee      	uxtb	r6, r5
1004e3e2:	428e      	cmp	r6, r1
1004e3e4:	d3f8      	bcc.n	1004e3d8 <is_Buffer_All_Set_To+0x10>
1004e3e6:	bd70      	pop	{r4, r5, r6, pc}
1004e3e8:	4620      	mov	r0, r4
1004e3ea:	bd70      	pop	{r4, r5, r6, pc}

1004e3ec <char_copy>:
1004e3ec:	2a00      	cmp	r2, #0
1004e3ee:	d005      	beq.n	1004e3fc <char_copy+0x10>
1004e3f0:	7803      	ldrb	r3, [r0, #0]
1004e3f2:	700b      	strb	r3, [r1, #0]
1004e3f4:	1e52      	subs	r2, r2, #1
1004e3f6:	1c49      	adds	r1, r1, #1
1004e3f8:	1c40      	adds	r0, r0, #1
1004e3fa:	e7f7      	b.n	1004e3ec <char_copy>
1004e3fc:	4770      	bx	lr

1004e3fe <hci_acl_data_tx_cmpl_event_int_cb_ucfg_weak>:
1004e3fe:	2000      	movs	r0, #0
1004e400:	4770      	bx	lr

1004e402 <hci_acl_data_ind_event_int_cb_ucfg_weak>:
1004e402:	2000      	movs	r0, #0
1004e404:	4770      	bx	lr
	...

1004e408 <addr8_list_search>:
1004e408:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e40a:	b083      	sub	sp, #12
1004e40c:	9202      	str	r2, [sp, #8]
1004e40e:	9d08      	ldr	r5, [sp, #32]
1004e410:	2d00      	cmp	r5, #0
1004e412:	d101      	bne.n	1004e418 <addr8_list_search+0x10>
1004e414:	462e      	mov	r6, r5
1004e416:	e002      	b.n	1004e41e <addr8_list_search+0x16>
1004e418:	24ff      	movs	r4, #255	@ 0xff
1004e41a:	0626      	lsls	r6, r4, #24
1004e41c:	401e      	ands	r6, r3
1004e41e:	060c      	lsls	r4, r1, #24
1004e420:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1004e422:	d02a      	beq.n	1004e47a <addr8_list_search+0x72>
1004e424:	9501      	str	r5, [sp, #4]
1004e426:	9400      	str	r4, [sp, #0]
1004e428:	4a18      	ldr	r2, [pc, #96]	@ (1004e48c <__arm_cp.0_0>)
1004e42a:	4013      	ands	r3, r2
1004e42c:	431e      	orrs	r6, r3
1004e42e:	1e4a      	subs	r2, r1, #1
1004e430:	b2c9      	uxtb	r1, r1
1004e432:	0849      	lsrs	r1, r1, #1
1004e434:	2400      	movs	r4, #0
1004e436:	b2cd      	uxtb	r5, r1
1004e438:	00ed      	lsls	r5, r5, #3
1004e43a:	1947      	adds	r7, r0, r5
1004e43c:	687f      	ldr	r7, [r7, #4]
1004e43e:	9b01      	ldr	r3, [sp, #4]
1004e440:	2b00      	cmp	r3, #0
1004e442:	d101      	bne.n	1004e448 <addr8_list_search+0x40>
1004e444:	4b11      	ldr	r3, [pc, #68]	@ (1004e48c <__arm_cp.0_0>)
1004e446:	401f      	ands	r7, r3
1004e448:	5945      	ldr	r5, [r0, r5]
1004e44a:	9b02      	ldr	r3, [sp, #8]
1004e44c:	42ab      	cmp	r3, r5
1004e44e:	d101      	bne.n	1004e454 <addr8_list_search+0x4c>
1004e450:	42be      	cmp	r6, r7
1004e452:	d015      	beq.n	1004e480 <addr8_list_search+0x78>
1004e454:	42be      	cmp	r6, r7
1004e456:	d803      	bhi.n	1004e460 <addr8_list_search+0x58>
1004e458:	d104      	bne.n	1004e464 <addr8_list_search+0x5c>
1004e45a:	9b02      	ldr	r3, [sp, #8]
1004e45c:	42ab      	cmp	r3, r5
1004e45e:	d901      	bls.n	1004e464 <addr8_list_search+0x5c>
1004e460:	1c4c      	adds	r4, r1, #1
1004e462:	e000      	b.n	1004e466 <addr8_list_search+0x5e>
1004e464:	1e4a      	subs	r2, r1, #1
1004e466:	1b11      	subs	r1, r2, r4
1004e468:	b2c9      	uxtb	r1, r1
1004e46a:	1c4d      	adds	r5, r1, #1
1004e46c:	b2ef      	uxtb	r7, r5
1004e46e:	0879      	lsrs	r1, r7, #1
1004e470:	1909      	adds	r1, r1, r4
1004e472:	42af      	cmp	r7, r5
1004e474:	d0df      	beq.n	1004e436 <addr8_list_search+0x2e>
1004e476:	2000      	movs	r0, #0
1004e478:	e003      	b.n	1004e482 <addr8_list_search+0x7a>
1004e47a:	2100      	movs	r1, #0
1004e47c:	4608      	mov	r0, r1
1004e47e:	e001      	b.n	1004e484 <addr8_list_search+0x7c>
1004e480:	2001      	movs	r0, #1
1004e482:	9c00      	ldr	r4, [sp, #0]
1004e484:	7021      	strb	r1, [r4, #0]
1004e486:	b003      	add	sp, #12
1004e488:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e48a:	46c0      	nop			@ (mov r8, r8)

1004e48c <__arm_cp.0_0>:
1004e48c:	00ffffff 	.word	0x00ffffff

1004e490 <addr8_list_clear>:
1004e490:	2100      	movs	r1, #0
1004e492:	7101      	strb	r1, [r0, #4]
1004e494:	4770      	bx	lr

1004e496 <BLEPLAT_aes128_encrypt>:
1004e496:	b580      	push	{r7, lr}
1004e498:	f7f3 faf6 	bl	10041a88 <BLEPLAT_AesEcbEncrypt>
1004e49c:	bd80      	pop	{r7, pc}

1004e49e <Hal_Get_Random_Number>:
1004e49e:	b51c      	push	{r2, r3, r4, lr}
1004e4a0:	ac01      	add	r4, sp, #4
1004e4a2:	4620      	mov	r0, r4
1004e4a4:	f7f3 fb00 	bl	10041aa8 <BLEPLAT_RngGetRandom16>
1004e4a8:	8820      	ldrh	r0, [r4, #0]
1004e4aa:	bd1c      	pop	{r2, r3, r4, pc}

1004e4ac <Hal_Get_Random_Number32>:
1004e4ac:	b5e0      	push	{r5, r6, r7, lr}
1004e4ae:	a801      	add	r0, sp, #4
1004e4b0:	f7f3 fb06 	bl	10041ac0 <BLEPLAT_RngGetRandom32>
1004e4b4:	9801      	ldr	r0, [sp, #4]
1004e4b6:	bd8c      	pop	{r2, r3, r7, pc}

1004e4b8 <HAL_Generate_Random_Bytes_To>:
1004e4b8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1004e4ba:	460c      	mov	r4, r1
1004e4bc:	4605      	mov	r5, r0
1004e4be:	2000      	movs	r0, #0
1004e4c0:	b2c6      	uxtb	r6, r0
1004e4c2:	42a6      	cmp	r6, r4
1004e4c4:	d20e      	bcs.n	1004e4e4 <HAL_Generate_Random_Bytes_To+0x2c>
1004e4c6:	2000      	movs	r0, #0
1004e4c8:	f7ff ffe9 	bl	1004e49e <Hal_Get_Random_Number>
1004e4cc:	55a8      	strb	r0, [r5, r6]
1004e4ce:	a901      	add	r1, sp, #4
1004e4d0:	7008      	strb	r0, [r1, #0]
1004e4d2:	0a00      	lsrs	r0, r0, #8
1004e4d4:	4669      	mov	r1, sp
1004e4d6:	7008      	strb	r0, [r1, #0]
1004e4d8:	1c71      	adds	r1, r6, #1
1004e4da:	42a1      	cmp	r1, r4
1004e4dc:	d200      	bcs.n	1004e4e0 <HAL_Generate_Random_Bytes_To+0x28>
1004e4de:	5468      	strb	r0, [r5, r1]
1004e4e0:	1cb0      	adds	r0, r6, #2
1004e4e2:	e7ed      	b.n	1004e4c0 <HAL_Generate_Random_Bytes_To+0x8>
1004e4e4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

1004e4e8 <IDD_Initialize_Device_IDs>:
1004e4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e4ea:	b095      	sub	sp, #84	@ 0x54
1004e4ec:	4839      	ldr	r0, [pc, #228]	@ (1004e5d4 <__arm_cp.0_0>)
1004e4ee:	6800      	ldr	r0, [r0, #0]
1004e4f0:	9000      	str	r0, [sp, #0]
1004e4f2:	a80b      	add	r0, sp, #44	@ 0x2c
1004e4f4:	f7ff fdcb 	bl	1004e08e <nvm_dev_id_data_get_record>
1004e4f8:	2800      	cmp	r0, #0
1004e4fa:	d031      	beq.n	1004e560 <IDD_Initialize_Device_IDs+0x78>
1004e4fc:	af01      	add	r7, sp, #4
1004e4fe:	2406      	movs	r4, #6
1004e500:	2500      	movs	r5, #0
1004e502:	4b35      	ldr	r3, [pc, #212]	@ (1004e5d8 <__arm_cp.0_1>)
1004e504:	4638      	mov	r0, r7
1004e506:	4621      	mov	r1, r4
1004e508:	462a      	mov	r2, r5
1004e50a:	4798      	blx	r3
1004e50c:	7978      	ldrb	r0, [r7, #5]
1004e50e:	21c0      	movs	r1, #192	@ 0xc0
1004e510:	4301      	orrs	r1, r0
1004e512:	7179      	strb	r1, [r7, #5]
1004e514:	ae0b      	add	r6, sp, #44	@ 0x2c
1004e516:	4630      	mov	r0, r6
1004e518:	3020      	adds	r0, #32
1004e51a:	4b30      	ldr	r3, [pc, #192]	@ (1004e5dc <__arm_cp.0_2>)
1004e51c:	4639      	mov	r1, r7
1004e51e:	4622      	mov	r2, r4
1004e520:	4798      	blx	r3
1004e522:	ac07      	add	r4, sp, #28
1004e524:	2710      	movs	r7, #16
1004e526:	4620      	mov	r0, r4
1004e528:	4639      	mov	r1, r7
1004e52a:	462a      	mov	r2, r5
1004e52c:	4b2a      	ldr	r3, [pc, #168]	@ (1004e5d8 <__arm_cp.0_1>)
1004e52e:	4798      	blx	r3
1004e530:	4630      	mov	r0, r6
1004e532:	4621      	mov	r1, r4
1004e534:	463a      	mov	r2, r7
1004e536:	4b29      	ldr	r3, [pc, #164]	@ (1004e5dc <__arm_cp.0_2>)
1004e538:	4798      	blx	r3
1004e53a:	ac03      	add	r4, sp, #12
1004e53c:	4620      	mov	r0, r4
1004e53e:	4639      	mov	r1, r7
1004e540:	462a      	mov	r2, r5
1004e542:	4b25      	ldr	r3, [pc, #148]	@ (1004e5d8 <__arm_cp.0_1>)
1004e544:	4798      	blx	r3
1004e546:	4630      	mov	r0, r6
1004e548:	3010      	adds	r0, #16
1004e54a:	4621      	mov	r1, r4
1004e54c:	463a      	mov	r2, r7
1004e54e:	4b23      	ldr	r3, [pc, #140]	@ (1004e5dc <__arm_cp.0_2>)
1004e550:	4798      	blx	r3
1004e552:	4630      	mov	r0, r6
1004e554:	f7ff fda8 	bl	1004e0a8 <nvm_dev_id_data_add_record>
1004e558:	2800      	cmp	r0, #0
1004e55a:	d103      	bne.n	1004e564 <IDD_Initialize_Device_IDs+0x7c>
1004e55c:	4605      	mov	r5, r0
1004e55e:	e003      	b.n	1004e568 <IDD_Initialize_Device_IDs+0x80>
1004e560:	2500      	movs	r5, #0
1004e562:	e001      	b.n	1004e568 <IDD_Initialize_Device_IDs+0x80>
1004e564:	200e      	movs	r0, #14
1004e566:	43c5      	mvns	r5, r0
1004e568:	4c1d      	ldr	r4, [pc, #116]	@ (1004e5e0 <__arm_cp.0_3>)
1004e56a:	6822      	ldr	r2, [r4, #0]
1004e56c:	322e      	adds	r2, #46	@ 0x2e
1004e56e:	2600      	movs	r6, #0
1004e570:	2706      	movs	r7, #6
1004e572:	4630      	mov	r0, r6
1004e574:	4639      	mov	r1, r7
1004e576:	f7ff ff27 	bl	1004e3c8 <is_Buffer_All_Set_To>
1004e57a:	a90b      	add	r1, sp, #44	@ 0x2c
1004e57c:	2800      	cmp	r0, #0
1004e57e:	d001      	beq.n	1004e584 <IDD_Initialize_Device_IDs+0x9c>
1004e580:	3120      	adds	r1, #32
1004e582:	e001      	b.n	1004e588 <IDD_Initialize_Device_IDs+0xa0>
1004e584:	6821      	ldr	r1, [r4, #0]
1004e586:	312e      	adds	r1, #46	@ 0x2e
1004e588:	9800      	ldr	r0, [sp, #0]
1004e58a:	3060      	adds	r0, #96	@ 0x60
1004e58c:	463a      	mov	r2, r7
1004e58e:	f7f3 fa3f 	bl	10041a10 <BLEPLAT_MemCpy>
1004e592:	6822      	ldr	r2, [r4, #0]
1004e594:	3208      	adds	r2, #8
1004e596:	2110      	movs	r1, #16
1004e598:	4630      	mov	r0, r6
1004e59a:	f7ff ff15 	bl	1004e3c8 <is_Buffer_All_Set_To>
1004e59e:	2800      	cmp	r0, #0
1004e5a0:	d005      	beq.n	1004e5ae <IDD_Initialize_Device_IDs+0xc6>
1004e5a2:	6820      	ldr	r0, [r4, #0]
1004e5a4:	3008      	adds	r0, #8
1004e5a6:	a90b      	add	r1, sp, #44	@ 0x2c
1004e5a8:	2210      	movs	r2, #16
1004e5aa:	f7f3 fa31 	bl	10041a10 <BLEPLAT_MemCpy>
1004e5ae:	6822      	ldr	r2, [r4, #0]
1004e5b0:	3218      	adds	r2, #24
1004e5b2:	2000      	movs	r0, #0
1004e5b4:	2110      	movs	r1, #16
1004e5b6:	f7ff ff07 	bl	1004e3c8 <is_Buffer_All_Set_To>
1004e5ba:	2800      	cmp	r0, #0
1004e5bc:	d006      	beq.n	1004e5cc <IDD_Initialize_Device_IDs+0xe4>
1004e5be:	a90b      	add	r1, sp, #44	@ 0x2c
1004e5c0:	3110      	adds	r1, #16
1004e5c2:	6820      	ldr	r0, [r4, #0]
1004e5c4:	3018      	adds	r0, #24
1004e5c6:	2210      	movs	r2, #16
1004e5c8:	f7f3 fa22 	bl	10041a10 <BLEPLAT_MemCpy>
1004e5cc:	b2e8      	uxtb	r0, r5
1004e5ce:	b015      	add	sp, #84	@ 0x54
1004e5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e5d2:	46c0      	nop			@ (mov r8, r8)

1004e5d4 <__arm_cp.0_0>:
1004e5d4:	20000b38 	.word	0x20000b38

1004e5d8 <__arm_cp.0_1>:
1004e5d8:	1004e4b9 	.word	0x1004e4b9

1004e5dc <__arm_cp.0_2>:
1004e5dc:	10041a11 	.word	0x10041a11

1004e5e0 <__arm_cp.0_3>:
1004e5e0:	20000b30 	.word	0x20000b30

1004e5e4 <aci_hal_fw_error_event_push_noinline>:
1004e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e5e6:	4604      	mov	r4, r0
1004e5e8:	06c0      	lsls	r0, r0, #27
1004e5ea:	d42d      	bmi.n	1004e648 <aci_hal_fw_error_event_push_noinline+0x64>
1004e5ec:	4615      	mov	r5, r2
1004e5ee:	460f      	mov	r7, r1
1004e5f0:	9300      	str	r3, [sp, #0]
1004e5f2:	4818      	ldr	r0, [pc, #96]	@ (1004e654 <__arm_cp.0_0>)
1004e5f4:	6800      	ldr	r0, [r0, #0]
1004e5f6:	0761      	lsls	r1, r4, #29
1004e5f8:	0ec9      	lsrs	r1, r1, #27
1004e5fa:	1840      	adds	r0, r0, r1
1004e5fc:	6900      	ldr	r0, [r0, #16]
1004e5fe:	1e51      	subs	r1, r2, #1
1004e600:	2203      	movs	r2, #3
1004e602:	430a      	orrs	r2, r1
1004e604:	3209      	adds	r2, #9
1004e606:	0891      	lsrs	r1, r2, #2
1004e608:	b28b      	uxth	r3, r1
1004e60a:	2240      	movs	r2, #64	@ 0x40
1004e60c:	4621      	mov	r1, r4
1004e60e:	f7fc fc09 	bl	1004ae24 <aci_event_fifo_push_header>
1004e612:	2800      	cmp	r0, #0
1004e614:	d01a      	beq.n	1004e64c <aci_hal_fw_error_event_push_noinline+0x68>
1004e616:	4606      	mov	r6, r0
1004e618:	72c5      	strb	r5, [r0, #11]
1004e61a:	7287      	strb	r7, [r0, #10]
1004e61c:	300c      	adds	r0, #12
1004e61e:	9900      	ldr	r1, [sp, #0]
1004e620:	462a      	mov	r2, r5
1004e622:	f7f3 f9f5 	bl	10041a10 <BLEPLAT_MemCpy>
1004e626:	2700      	movs	r7, #0
1004e628:	7277      	strb	r7, [r6, #9]
1004e62a:	2006      	movs	r0, #6
1004e62c:	7230      	strb	r0, [r6, #8]
1004e62e:	1d28      	adds	r0, r5, #4
1004e630:	0a01      	lsrs	r1, r0, #8
1004e632:	71f1      	strb	r1, [r6, #7]
1004e634:	71b0      	strb	r0, [r6, #6]
1004e636:	20ff      	movs	r0, #255	@ 0xff
1004e638:	7170      	strb	r0, [r6, #5]
1004e63a:	2082      	movs	r0, #130	@ 0x82
1004e63c:	7130      	strb	r0, [r6, #4]
1004e63e:	4620      	mov	r0, r4
1004e640:	4631      	mov	r1, r6
1004e642:	f7fc fc8c 	bl	1004af5e <aci_event_fifo_push>
1004e646:	e002      	b.n	1004e64e <aci_hal_fw_error_event_push_noinline+0x6a>
1004e648:	2786      	movs	r7, #134	@ 0x86
1004e64a:	e000      	b.n	1004e64e <aci_hal_fw_error_event_push_noinline+0x6a>
1004e64c:	2707      	movs	r7, #7
1004e64e:	4638      	mov	r0, r7
1004e650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004e652:	46c0      	nop			@ (mov r8, r8)

1004e654 <__arm_cp.0_0>:
1004e654:	20000b34 	.word	0x20000b34

1004e658 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
1004e658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e65a:	4604      	mov	r4, r0
1004e65c:	06c0      	lsls	r0, r0, #27
1004e65e:	d42d      	bmi.n	1004e6bc <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
1004e660:	4616      	mov	r6, r2
1004e662:	460d      	mov	r5, r1
1004e664:	4818      	ldr	r0, [pc, #96]	@ (1004e6c8 <__arm_cp.1_0>)
1004e666:	6800      	ldr	r0, [r0, #0]
1004e668:	0761      	lsls	r1, r4, #29
1004e66a:	0ec9      	lsrs	r1, r1, #27
1004e66c:	1840      	adds	r0, r0, r1
1004e66e:	6900      	ldr	r0, [r0, #16]
1004e670:	2241      	movs	r2, #65	@ 0x41
1004e672:	2304      	movs	r3, #4
1004e674:	4621      	mov	r1, r4
1004e676:	f7fc fbd5 	bl	1004ae24 <aci_event_fifo_push_header>
1004e67a:	2800      	cmp	r0, #0
1004e67c:	d020      	beq.n	1004e6c0 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
1004e67e:	4601      	mov	r1, r0
1004e680:	300a      	adds	r0, #10
1004e682:	7106      	strb	r6, [r0, #4]
1004e684:	7005      	strb	r5, [r0, #0]
1004e686:	2700      	movs	r7, #0
1004e688:	724f      	strb	r7, [r1, #9]
1004e68a:	2210      	movs	r2, #16
1004e68c:	720a      	strb	r2, [r1, #8]
1004e68e:	71cf      	strb	r7, [r1, #7]
1004e690:	220a      	movs	r2, #10
1004e692:	718a      	strb	r2, [r1, #6]
1004e694:	22ff      	movs	r2, #255	@ 0xff
1004e696:	714a      	strb	r2, [r1, #5]
1004e698:	2282      	movs	r2, #130	@ 0x82
1004e69a:	710a      	strb	r2, [r1, #4]
1004e69c:	0e32      	lsrs	r2, r6, #24
1004e69e:	71c2      	strb	r2, [r0, #7]
1004e6a0:	0c32      	lsrs	r2, r6, #16
1004e6a2:	7182      	strb	r2, [r0, #6]
1004e6a4:	0a32      	lsrs	r2, r6, #8
1004e6a6:	7142      	strb	r2, [r0, #5]
1004e6a8:	0e2a      	lsrs	r2, r5, #24
1004e6aa:	70c2      	strb	r2, [r0, #3]
1004e6ac:	0c2a      	lsrs	r2, r5, #16
1004e6ae:	7082      	strb	r2, [r0, #2]
1004e6b0:	0a2a      	lsrs	r2, r5, #8
1004e6b2:	7042      	strb	r2, [r0, #1]
1004e6b4:	4620      	mov	r0, r4
1004e6b6:	f7fc fc52 	bl	1004af5e <aci_event_fifo_push>
1004e6ba:	e002      	b.n	1004e6c2 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1004e6bc:	2786      	movs	r7, #134	@ 0x86
1004e6be:	e000      	b.n	1004e6c2 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1004e6c0:	2707      	movs	r7, #7
1004e6c2:	4638      	mov	r0, r7
1004e6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004e6c6:	46c0      	nop			@ (mov r8, r8)

1004e6c8 <__arm_cp.1_0>:
1004e6c8:	20000b34 	.word	0x20000b34

1004e6cc <GAP_enable_disable_scan_ucfg_weak>:
1004e6cc:	2000      	movs	r0, #0
1004e6ce:	4770      	bx	lr

1004e6d0 <GAP_name_disc_proc_connected_check_ucfg_weak>:
1004e6d0:	4770      	bx	lr

1004e6d2 <GAP_DiscProcTimeoutcb_ucfg_weak>:
1004e6d2:	4770      	bx	lr

1004e6d4 <GAT_clt_proc_exec_tsk>:
1004e6d4:	b580      	push	{r7, lr}
1004e6d6:	4802      	ldr	r0, [pc, #8]	@ (1004e6e0 <__arm_cp.3_0>)
1004e6d8:	6800      	ldr	r0, [r0, #0]
1004e6da:	4780      	blx	r0
1004e6dc:	bd80      	pop	{r7, pc}
1004e6de:	46c0      	nop			@ (mov r8, r8)

1004e6e0 <__arm_cp.3_0>:
1004e6e0:	20000d24 	.word	0x20000d24

1004e6e4 <GAT_clt_exec_empty>:
1004e6e4:	4770      	bx	lr
	...

1004e6e8 <hci_le_encrypt>:
1004e6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e6ea:	b08f      	sub	sp, #60	@ 0x3c
1004e6ec:	9202      	str	r2, [sp, #8]
1004e6ee:	4607      	mov	r7, r0
1004e6f0:	a807      	add	r0, sp, #28
1004e6f2:	9001      	str	r0, [sp, #4]
1004e6f4:	2510      	movs	r5, #16
1004e6f6:	4e0c      	ldr	r6, [pc, #48]	@ (1004e728 <__arm_cp.0_0>)
1004e6f8:	462a      	mov	r2, r5
1004e6fa:	47b0      	blx	r6
1004e6fc:	ac0b      	add	r4, sp, #44	@ 0x2c
1004e6fe:	4620      	mov	r0, r4
1004e700:	4639      	mov	r1, r7
1004e702:	462a      	mov	r2, r5
1004e704:	47b0      	blx	r6
1004e706:	af03      	add	r7, sp, #12
1004e708:	2600      	movs	r6, #0
1004e70a:	9801      	ldr	r0, [sp, #4]
1004e70c:	4621      	mov	r1, r4
1004e70e:	463a      	mov	r2, r7
1004e710:	4633      	mov	r3, r6
1004e712:	f7ff fec0 	bl	1004e496 <BLEPLAT_aes128_encrypt>
1004e716:	9802      	ldr	r0, [sp, #8]
1004e718:	4639      	mov	r1, r7
1004e71a:	462a      	mov	r2, r5
1004e71c:	4b02      	ldr	r3, [pc, #8]	@ (1004e728 <__arm_cp.0_0>)
1004e71e:	4798      	blx	r3
1004e720:	4630      	mov	r0, r6
1004e722:	b00f      	add	sp, #60	@ 0x3c
1004e724:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e726:	46c0      	nop			@ (mov r8, r8)

1004e728 <__arm_cp.0_0>:
1004e728:	10041a11 	.word	0x10041a11

1004e72c <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
1004e72c:	4770      	bx	lr

1004e72e <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
1004e72e:	4770      	bx	lr

1004e730 <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
1004e730:	4770      	bx	lr

1004e732 <llc_big_brc_mem_alloc_ucfg_weak>:
1004e732:	4770      	bx	lr

1004e734 <llc_big_sync_mem_alloc_ucfg_weak>:
1004e734:	4770      	bx	lr

1004e736 <llc_cig_cmn_mem_alloc_ucfg_weak>:
1004e736:	4770      	bx	lr

1004e738 <llc_check_sreq_or_creq_tx_addr_res_off>:
1004e738:	b570      	push	{r4, r5, r6, lr}
1004e73a:	b084      	sub	sp, #16
1004e73c:	4615      	mov	r5, r2
1004e73e:	460a      	mov	r2, r1
1004e740:	4604      	mov	r4, r0
1004e742:	2b00      	cmp	r3, #0
1004e744:	d007      	beq.n	1004e756 <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
1004e746:	980a      	ldr	r0, [sp, #40]	@ 0x28
1004e748:	4282      	cmp	r2, r0
1004e74a:	d11f      	bne.n	1004e78c <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
1004e74c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1004e74e:	4068      	eors	r0, r5
1004e750:	0200      	lsls	r0, r0, #8
1004e752:	d11b      	bne.n	1004e78c <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
1004e754:	e01b      	b.n	1004e78e <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004e756:	9809      	ldr	r0, [sp, #36]	@ 0x24
1004e758:	9908      	ldr	r1, [sp, #32]
1004e75a:	2900      	cmp	r1, #0
1004e75c:	d002      	beq.n	1004e764 <llc_check_sreq_or_creq_tx_addr_res_off+0x2c>
1004e75e:	2301      	movs	r3, #1
1004e760:	4003      	ands	r3, r0
1004e762:	d104      	bne.n	1004e76e <llc_check_sreq_or_creq_tx_addr_res_off+0x36>
1004e764:	2900      	cmp	r1, #0
1004e766:	d112      	bne.n	1004e78e <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004e768:	2102      	movs	r1, #2
1004e76a:	4008      	ands	r0, r1
1004e76c:	d00f      	beq.n	1004e78e <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004e76e:	4809      	ldr	r0, [pc, #36]	@ (1004e794 <__arm_cp.1_0>)
1004e770:	6800      	ldr	r0, [r0, #0]
1004e772:	219c      	movs	r1, #156	@ 0x9c
1004e774:	5841      	ldr	r1, [r0, r1]
1004e776:	68c8      	ldr	r0, [r1, #12]
1004e778:	6909      	ldr	r1, [r1, #16]
1004e77a:	ab03      	add	r3, sp, #12
1004e77c:	2600      	movs	r6, #0
1004e77e:	9600      	str	r6, [sp, #0]
1004e780:	9301      	str	r3, [sp, #4]
1004e782:	462b      	mov	r3, r5
1004e784:	f7ff fe40 	bl	1004e408 <addr8_list_search>
1004e788:	2800      	cmp	r0, #0
1004e78a:	d100      	bne.n	1004e78e <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
1004e78c:	24ff      	movs	r4, #255	@ 0xff
1004e78e:	4620      	mov	r0, r4
1004e790:	b004      	add	sp, #16
1004e792:	bd70      	pop	{r4, r5, r6, pc}

1004e794 <__arm_cp.1_0>:
1004e794:	20000b40 	.word	0x20000b40

1004e798 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
1004e798:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e79a:	b087      	sub	sp, #28
1004e79c:	1ecd      	subs	r5, r1, #3
1004e79e:	21ff      	movs	r1, #255	@ 0xff
1004e7a0:	24fd      	movs	r4, #253	@ 0xfd
1004e7a2:	4225      	tst	r5, r4
1004e7a4:	d11c      	bne.n	1004e7e0 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1004e7a6:	2a00      	cmp	r2, #0
1004e7a8:	d01a      	beq.n	1004e7e0 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1004e7aa:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1004e7ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
1004e7ae:	680c      	ldr	r4, [r1, #0]
1004e7b0:	9405      	str	r4, [sp, #20]
1004e7b2:	9306      	str	r3, [sp, #24]
1004e7b4:	684b      	ldr	r3, [r1, #4]
1004e7b6:	c882      	ldmia	r0!, {r1, r7}
1004e7b8:	20ff      	movs	r0, #255	@ 0xff
1004e7ba:	0600      	lsls	r0, r0, #24
1004e7bc:	463c      	mov	r4, r7
1004e7be:	4384      	bics	r4, r0
1004e7c0:	c612      	stmia	r6!, {r1, r4}
1004e7c2:	9303      	str	r3, [sp, #12]
1004e7c4:	9805      	ldr	r0, [sp, #20]
1004e7c6:	9002      	str	r0, [sp, #8]
1004e7c8:	9806      	ldr	r0, [sp, #24]
1004e7ca:	9001      	str	r0, [sp, #4]
1004e7cc:	4268      	negs	r0, r5
1004e7ce:	4168      	adcs	r0, r5
1004e7d0:	9000      	str	r0, [sp, #0]
1004e7d2:	b2c8      	uxtb	r0, r1
1004e7d4:	0752      	lsls	r2, r2, #29
1004e7d6:	0fd3      	lsrs	r3, r2, #31
1004e7d8:	463a      	mov	r2, r7
1004e7da:	f7ff ffad 	bl	1004e738 <llc_check_sreq_or_creq_tx_addr_res_off>
1004e7de:	4601      	mov	r1, r0
1004e7e0:	4608      	mov	r0, r1
1004e7e2:	b007      	add	sp, #28
1004e7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1004e7e8 <llc_wl_mem_allocate>:
1004e7e8:	b510      	push	{r4, lr}
1004e7ea:	2401      	movs	r4, #1
1004e7ec:	4084      	lsls	r4, r0
1004e7ee:	2108      	movs	r1, #8
1004e7f0:	4620      	mov	r0, r4
1004e7f2:	f7ff f99f 	bl	1004db34 <csmem_mem_0_assign>
1004e7f6:	4903      	ldr	r1, [pc, #12]	@ (1004e804 <__arm_cp.0_0>)
1004e7f8:	6809      	ldr	r1, [r1, #0]
1004e7fa:	229c      	movs	r2, #156	@ 0x9c
1004e7fc:	5889      	ldr	r1, [r1, r2]
1004e7fe:	744c      	strb	r4, [r1, #17]
1004e800:	60c8      	str	r0, [r1, #12]
1004e802:	bd10      	pop	{r4, pc}

1004e804 <__arm_cp.0_0>:
1004e804:	20000b40 	.word	0x20000b40

1004e808 <llc_padv_mem_allocate_ucfg_weak>:
1004e808:	4770      	bx	lr

1004e80a <llc_padv_init_ucfg_weak>:
1004e80a:	4770      	bx	lr

1004e80c <llc_priv_mem_allocate>:
1004e80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004e80e:	2800      	cmp	r0, #0
1004e810:	d046      	beq.n	1004e8a0 <llc_priv_mem_allocate+0x94>
1004e812:	460e      	mov	r6, r1
1004e814:	2501      	movs	r5, #1
1004e816:	2168      	movs	r1, #104	@ 0x68
1004e818:	4628      	mov	r0, r5
1004e81a:	f7ff f98b 	bl	1004db34 <csmem_mem_0_assign>
1004e81e:	4f21      	ldr	r7, [pc, #132]	@ (1004e8a4 <__arm_cp.0_0>)
1004e820:	6839      	ldr	r1, [r7, #0]
1004e822:	249c      	movs	r4, #156	@ 0x9c
1004e824:	5909      	ldr	r1, [r1, r4]
1004e826:	6088      	str	r0, [r1, #8]
1004e828:	40b5      	lsls	r5, r6
1004e82a:	b2ee      	uxtb	r6, r5
1004e82c:	2108      	movs	r1, #8
1004e82e:	4630      	mov	r0, r6
1004e830:	f7ff f980 	bl	1004db34 <csmem_mem_0_assign>
1004e834:	6839      	ldr	r1, [r7, #0]
1004e836:	5909      	ldr	r1, [r1, r4]
1004e838:	6889      	ldr	r1, [r1, #8]
1004e83a:	724d      	strb	r5, [r1, #9]
1004e83c:	6048      	str	r0, [r1, #4]
1004e83e:	9600      	str	r6, [sp, #0]
1004e840:	0075      	lsls	r5, r6, #1
1004e842:	2611      	movs	r6, #17
1004e844:	2e21      	cmp	r6, #33	@ 0x21
1004e846:	d00f      	beq.n	1004e868 <llc_priv_mem_allocate+0x5c>
1004e848:	2108      	movs	r1, #8
1004e84a:	4628      	mov	r0, r5
1004e84c:	f7ff f972 	bl	1004db34 <csmem_mem_0_assign>
1004e850:	6839      	ldr	r1, [r7, #0]
1004e852:	5909      	ldr	r1, [r1, r4]
1004e854:	6889      	ldr	r1, [r1, #8]
1004e856:	1989      	adds	r1, r1, r6
1004e858:	1f49      	subs	r1, r1, #5
1004e85a:	6008      	str	r0, [r1, #0]
1004e85c:	6838      	ldr	r0, [r7, #0]
1004e85e:	5900      	ldr	r0, [r0, r4]
1004e860:	6880      	ldr	r0, [r0, #8]
1004e862:	5585      	strb	r5, [r0, r6]
1004e864:	3608      	adds	r6, #8
1004e866:	e7ed      	b.n	1004e844 <llc_priv_mem_allocate+0x38>
1004e868:	2128      	movs	r1, #40	@ 0x28
1004e86a:	9800      	ldr	r0, [sp, #0]
1004e86c:	f7ff f962 	bl	1004db34 <csmem_mem_0_assign>
1004e870:	6839      	ldr	r1, [r7, #0]
1004e872:	5909      	ldr	r1, [r1, r4]
1004e874:	6889      	ldr	r1, [r1, #8]
1004e876:	6008      	str	r0, [r1, #0]
1004e878:	480b      	ldr	r0, [pc, #44]	@ (1004e8a8 <__arm_cp.0_1>)
1004e87a:	2502      	movs	r5, #2
1004e87c:	2601      	movs	r6, #1
1004e87e:	4629      	mov	r1, r5
1004e880:	4632      	mov	r2, r6
1004e882:	f7ff f945 	bl	1004db10 <csmem_mem_assign>
1004e886:	6839      	ldr	r1, [r7, #0]
1004e888:	5909      	ldr	r1, [r1, r4]
1004e88a:	6889      	ldr	r1, [r1, #8]
1004e88c:	6488      	str	r0, [r1, #72]	@ 0x48
1004e88e:	4806      	ldr	r0, [pc, #24]	@ (1004e8a8 <__arm_cp.0_1>)
1004e890:	4631      	mov	r1, r6
1004e892:	462a      	mov	r2, r5
1004e894:	f7ff f93c 	bl	1004db10 <csmem_mem_assign>
1004e898:	6839      	ldr	r1, [r7, #0]
1004e89a:	5909      	ldr	r1, [r1, r4]
1004e89c:	6889      	ldr	r1, [r1, #8]
1004e89e:	64c8      	str	r0, [r1, #76]	@ 0x4c
1004e8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004e8a2:	46c0      	nop			@ (mov r8, r8)

1004e8a4 <__arm_cp.0_0>:
1004e8a4:	20000b40 	.word	0x20000b40

1004e8a8 <__arm_cp.0_1>:
1004e8a8:	20000b4c 	.word	0x20000b4c

1004e8ac <llc_pscan_isr_ucfg_weak>:
1004e8ac:	2000      	movs	r0, #0
1004e8ae:	4770      	bx	lr

1004e8b0 <llc_pscan_get_cntxt_per_p>:
1004e8b0:	2190      	movs	r1, #144	@ 0x90
1004e8b2:	4341      	muls	r1, r0
1004e8b4:	4804      	ldr	r0, [pc, #16]	@ (1004e8c8 <__arm_cp.1_0>)
1004e8b6:	6800      	ldr	r0, [r0, #0]
1004e8b8:	229c      	movs	r2, #156	@ 0x9c
1004e8ba:	5880      	ldr	r0, [r0, r2]
1004e8bc:	6840      	ldr	r0, [r0, #4]
1004e8be:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1004e8c0:	6800      	ldr	r0, [r0, #0]
1004e8c2:	6800      	ldr	r0, [r0, #0]
1004e8c4:	1840      	adds	r0, r0, r1
1004e8c6:	4770      	bx	lr

1004e8c8 <__arm_cp.1_0>:
1004e8c8:	20000b40 	.word	0x20000b40

1004e8cc <llc_pscan_init_ucfg_weak>:
1004e8cc:	4770      	bx	lr

1004e8ce <llc_pscan_mem_allocate_ucfg_weak>:
1004e8ce:	4770      	bx	lr

1004e8d0 <llc_pscan_wr_mem_allocate_ucfg_weak>:
1004e8d0:	b510      	push	{r4, lr}
1004e8d2:	2801      	cmp	r0, #1
1004e8d4:	d110      	bne.n	1004e8f8 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004e8d6:	2901      	cmp	r1, #1
1004e8d8:	d10e      	bne.n	1004e8f8 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004e8da:	2a01      	cmp	r2, #1
1004e8dc:	d10c      	bne.n	1004e8f8 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004e8de:	2400      	movs	r4, #0
1004e8e0:	4620      	mov	r0, r4
1004e8e2:	f7ff ffe5 	bl	1004e8b0 <llc_pscan_get_cntxt_per_p>
1004e8e6:	3014      	adds	r0, #20
1004e8e8:	4904      	ldr	r1, [pc, #16]	@ (1004e8fc <__arm_cp.5_0>)
1004e8ea:	7f89      	ldrb	r1, [r1, #30]
1004e8ec:	2900      	cmp	r1, #0
1004e8ee:	d003      	beq.n	1004e8f8 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1004e8f0:	6004      	str	r4, [r0, #0]
1004e8f2:	3090      	adds	r0, #144	@ 0x90
1004e8f4:	1e49      	subs	r1, r1, #1
1004e8f6:	e7f9      	b.n	1004e8ec <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1004e8f8:	bd10      	pop	{r4, pc}
1004e8fa:	46c0      	nop			@ (mov r8, r8)

1004e8fc <__arm_cp.5_0>:
1004e8fc:	20000b50 	.word	0x20000b50

1004e900 <llc_scan_isr_uncoded_ucfg_weak>:
1004e900:	2000      	movs	r0, #0
1004e902:	4770      	bx	lr

1004e904 <llc_scan_isr_coded_ucfg_weak>:
1004e904:	2000      	movs	r0, #0
1004e906:	4770      	bx	lr

1004e908 <smp_fsm_process_actions_wrt_state_tsk_ucfg_weak>:
1004e908:	4770      	bx	lr

1004e90a <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
1004e90a:	4770      	bx	lr

1004e90c <smp_rxp_process_rxed_packets_tsk_ucfg_weak>:
1004e90c:	4770      	bx	lr
	...

1004e910 <std>:
1004e910:	2300      	movs	r3, #0
1004e912:	b510      	push	{r4, lr}
1004e914:	0004      	movs	r4, r0
1004e916:	6003      	str	r3, [r0, #0]
1004e918:	6043      	str	r3, [r0, #4]
1004e91a:	6083      	str	r3, [r0, #8]
1004e91c:	8181      	strh	r1, [r0, #12]
1004e91e:	6643      	str	r3, [r0, #100]	@ 0x64
1004e920:	81c2      	strh	r2, [r0, #14]
1004e922:	6103      	str	r3, [r0, #16]
1004e924:	6143      	str	r3, [r0, #20]
1004e926:	6183      	str	r3, [r0, #24]
1004e928:	0019      	movs	r1, r3
1004e92a:	2208      	movs	r2, #8
1004e92c:	305c      	adds	r0, #92	@ 0x5c
1004e92e:	f000 fad3 	bl	1004eed8 <memset>
1004e932:	4b0b      	ldr	r3, [pc, #44]	@ (1004e960 <std+0x50>)
1004e934:	6224      	str	r4, [r4, #32]
1004e936:	6263      	str	r3, [r4, #36]	@ 0x24
1004e938:	4b0a      	ldr	r3, [pc, #40]	@ (1004e964 <std+0x54>)
1004e93a:	62a3      	str	r3, [r4, #40]	@ 0x28
1004e93c:	4b0a      	ldr	r3, [pc, #40]	@ (1004e968 <std+0x58>)
1004e93e:	62e3      	str	r3, [r4, #44]	@ 0x2c
1004e940:	4b0a      	ldr	r3, [pc, #40]	@ (1004e96c <std+0x5c>)
1004e942:	6323      	str	r3, [r4, #48]	@ 0x30
1004e944:	4b0a      	ldr	r3, [pc, #40]	@ (1004e970 <std+0x60>)
1004e946:	429c      	cmp	r4, r3
1004e948:	d005      	beq.n	1004e956 <std+0x46>
1004e94a:	4b0a      	ldr	r3, [pc, #40]	@ (1004e974 <std+0x64>)
1004e94c:	429c      	cmp	r4, r3
1004e94e:	d002      	beq.n	1004e956 <std+0x46>
1004e950:	4b09      	ldr	r3, [pc, #36]	@ (1004e978 <std+0x68>)
1004e952:	429c      	cmp	r4, r3
1004e954:	d103      	bne.n	1004e95e <std+0x4e>
1004e956:	0020      	movs	r0, r4
1004e958:	3058      	adds	r0, #88	@ 0x58
1004e95a:	f000 fb19 	bl	1004ef90 <__retarget_lock_init_recursive>
1004e95e:	bd10      	pop	{r4, pc}
1004e960:	1004ece5 	.word	0x1004ece5
1004e964:	1004ed0d 	.word	0x1004ed0d
1004e968:	1004ed45 	.word	0x1004ed45
1004e96c:	1004ed71 	.word	0x1004ed71
1004e970:	20000b88 	.word	0x20000b88
1004e974:	20000bf0 	.word	0x20000bf0
1004e978:	20000c58 	.word	0x20000c58

1004e97c <stdio_exit_handler>:
1004e97c:	b510      	push	{r4, lr}
1004e97e:	4a03      	ldr	r2, [pc, #12]	@ (1004e98c <stdio_exit_handler+0x10>)
1004e980:	4903      	ldr	r1, [pc, #12]	@ (1004e990 <stdio_exit_handler+0x14>)
1004e982:	4804      	ldr	r0, [pc, #16]	@ (1004e994 <stdio_exit_handler+0x18>)
1004e984:	f000 f86c 	bl	1004ea60 <_fwalk_sglue>
1004e988:	bd10      	pop	{r4, pc}
1004e98a:	46c0      	nop			@ (mov r8, r8)
1004e98c:	20000d28 	.word	0x20000d28
1004e990:	1004f845 	.word	0x1004f845
1004e994:	20000d38 	.word	0x20000d38

1004e998 <cleanup_stdio>:
1004e998:	6841      	ldr	r1, [r0, #4]
1004e99a:	4b0b      	ldr	r3, [pc, #44]	@ (1004e9c8 <cleanup_stdio+0x30>)
1004e99c:	b510      	push	{r4, lr}
1004e99e:	0004      	movs	r4, r0
1004e9a0:	4299      	cmp	r1, r3
1004e9a2:	d001      	beq.n	1004e9a8 <cleanup_stdio+0x10>
1004e9a4:	f000 ff4e 	bl	1004f844 <_fflush_r>
1004e9a8:	68a1      	ldr	r1, [r4, #8]
1004e9aa:	4b08      	ldr	r3, [pc, #32]	@ (1004e9cc <cleanup_stdio+0x34>)
1004e9ac:	4299      	cmp	r1, r3
1004e9ae:	d002      	beq.n	1004e9b6 <cleanup_stdio+0x1e>
1004e9b0:	0020      	movs	r0, r4
1004e9b2:	f000 ff47 	bl	1004f844 <_fflush_r>
1004e9b6:	68e1      	ldr	r1, [r4, #12]
1004e9b8:	4b05      	ldr	r3, [pc, #20]	@ (1004e9d0 <cleanup_stdio+0x38>)
1004e9ba:	4299      	cmp	r1, r3
1004e9bc:	d002      	beq.n	1004e9c4 <cleanup_stdio+0x2c>
1004e9be:	0020      	movs	r0, r4
1004e9c0:	f000 ff40 	bl	1004f844 <_fflush_r>
1004e9c4:	bd10      	pop	{r4, pc}
1004e9c6:	46c0      	nop			@ (mov r8, r8)
1004e9c8:	20000b88 	.word	0x20000b88
1004e9cc:	20000bf0 	.word	0x20000bf0
1004e9d0:	20000c58 	.word	0x20000c58

1004e9d4 <global_stdio_init.part.0>:
1004e9d4:	b510      	push	{r4, lr}
1004e9d6:	4b09      	ldr	r3, [pc, #36]	@ (1004e9fc <global_stdio_init.part.0+0x28>)
1004e9d8:	4a09      	ldr	r2, [pc, #36]	@ (1004ea00 <global_stdio_init.part.0+0x2c>)
1004e9da:	2104      	movs	r1, #4
1004e9dc:	601a      	str	r2, [r3, #0]
1004e9de:	4809      	ldr	r0, [pc, #36]	@ (1004ea04 <global_stdio_init.part.0+0x30>)
1004e9e0:	2200      	movs	r2, #0
1004e9e2:	f7ff ff95 	bl	1004e910 <std>
1004e9e6:	2201      	movs	r2, #1
1004e9e8:	2109      	movs	r1, #9
1004e9ea:	4807      	ldr	r0, [pc, #28]	@ (1004ea08 <global_stdio_init.part.0+0x34>)
1004e9ec:	f7ff ff90 	bl	1004e910 <std>
1004e9f0:	2202      	movs	r2, #2
1004e9f2:	2112      	movs	r1, #18
1004e9f4:	4805      	ldr	r0, [pc, #20]	@ (1004ea0c <global_stdio_init.part.0+0x38>)
1004e9f6:	f7ff ff8b 	bl	1004e910 <std>
1004e9fa:	bd10      	pop	{r4, pc}
1004e9fc:	20000cc0 	.word	0x20000cc0
1004ea00:	1004e97d 	.word	0x1004e97d
1004ea04:	20000b88 	.word	0x20000b88
1004ea08:	20000bf0 	.word	0x20000bf0
1004ea0c:	20000c58 	.word	0x20000c58

1004ea10 <__sfp_lock_acquire>:
1004ea10:	b510      	push	{r4, lr}
1004ea12:	4802      	ldr	r0, [pc, #8]	@ (1004ea1c <__sfp_lock_acquire+0xc>)
1004ea14:	f000 fabd 	bl	1004ef92 <__retarget_lock_acquire_recursive>
1004ea18:	bd10      	pop	{r4, pc}
1004ea1a:	46c0      	nop			@ (mov r8, r8)
1004ea1c:	20000cc9 	.word	0x20000cc9

1004ea20 <__sfp_lock_release>:
1004ea20:	b510      	push	{r4, lr}
1004ea22:	4802      	ldr	r0, [pc, #8]	@ (1004ea2c <__sfp_lock_release+0xc>)
1004ea24:	f000 fab6 	bl	1004ef94 <__retarget_lock_release_recursive>
1004ea28:	bd10      	pop	{r4, pc}
1004ea2a:	46c0      	nop			@ (mov r8, r8)
1004ea2c:	20000cc9 	.word	0x20000cc9

1004ea30 <__sinit>:
1004ea30:	b510      	push	{r4, lr}
1004ea32:	0004      	movs	r4, r0
1004ea34:	f7ff ffec 	bl	1004ea10 <__sfp_lock_acquire>
1004ea38:	6a23      	ldr	r3, [r4, #32]
1004ea3a:	2b00      	cmp	r3, #0
1004ea3c:	d002      	beq.n	1004ea44 <__sinit+0x14>
1004ea3e:	f7ff ffef 	bl	1004ea20 <__sfp_lock_release>
1004ea42:	bd10      	pop	{r4, pc}
1004ea44:	4b04      	ldr	r3, [pc, #16]	@ (1004ea58 <__sinit+0x28>)
1004ea46:	6223      	str	r3, [r4, #32]
1004ea48:	4b04      	ldr	r3, [pc, #16]	@ (1004ea5c <__sinit+0x2c>)
1004ea4a:	681b      	ldr	r3, [r3, #0]
1004ea4c:	2b00      	cmp	r3, #0
1004ea4e:	d1f6      	bne.n	1004ea3e <__sinit+0xe>
1004ea50:	f7ff ffc0 	bl	1004e9d4 <global_stdio_init.part.0>
1004ea54:	e7f3      	b.n	1004ea3e <__sinit+0xe>
1004ea56:	46c0      	nop			@ (mov r8, r8)
1004ea58:	1004e999 	.word	0x1004e999
1004ea5c:	20000cc0 	.word	0x20000cc0

1004ea60 <_fwalk_sglue>:
1004ea60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004ea62:	0014      	movs	r4, r2
1004ea64:	2600      	movs	r6, #0
1004ea66:	9000      	str	r0, [sp, #0]
1004ea68:	9101      	str	r1, [sp, #4]
1004ea6a:	68a5      	ldr	r5, [r4, #8]
1004ea6c:	6867      	ldr	r7, [r4, #4]
1004ea6e:	3f01      	subs	r7, #1
1004ea70:	d504      	bpl.n	1004ea7c <_fwalk_sglue+0x1c>
1004ea72:	6824      	ldr	r4, [r4, #0]
1004ea74:	2c00      	cmp	r4, #0
1004ea76:	d1f8      	bne.n	1004ea6a <_fwalk_sglue+0xa>
1004ea78:	0030      	movs	r0, r6
1004ea7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004ea7c:	89ab      	ldrh	r3, [r5, #12]
1004ea7e:	2b01      	cmp	r3, #1
1004ea80:	d908      	bls.n	1004ea94 <_fwalk_sglue+0x34>
1004ea82:	220e      	movs	r2, #14
1004ea84:	5eab      	ldrsh	r3, [r5, r2]
1004ea86:	3301      	adds	r3, #1
1004ea88:	d004      	beq.n	1004ea94 <_fwalk_sglue+0x34>
1004ea8a:	0029      	movs	r1, r5
1004ea8c:	9800      	ldr	r0, [sp, #0]
1004ea8e:	9b01      	ldr	r3, [sp, #4]
1004ea90:	4798      	blx	r3
1004ea92:	4306      	orrs	r6, r0
1004ea94:	3568      	adds	r5, #104	@ 0x68
1004ea96:	e7ea      	b.n	1004ea6e <_fwalk_sglue+0xe>

1004ea98 <iprintf>:
1004ea98:	b40f      	push	{r0, r1, r2, r3}
1004ea9a:	b507      	push	{r0, r1, r2, lr}
1004ea9c:	4905      	ldr	r1, [pc, #20]	@ (1004eab4 <iprintf+0x1c>)
1004ea9e:	ab04      	add	r3, sp, #16
1004eaa0:	6808      	ldr	r0, [r1, #0]
1004eaa2:	cb04      	ldmia	r3!, {r2}
1004eaa4:	6881      	ldr	r1, [r0, #8]
1004eaa6:	9301      	str	r3, [sp, #4]
1004eaa8:	f000 fbac 	bl	1004f204 <_vfiprintf_r>
1004eaac:	b003      	add	sp, #12
1004eaae:	bc08      	pop	{r3}
1004eab0:	b004      	add	sp, #16
1004eab2:	4718      	bx	r3
1004eab4:	20000d34 	.word	0x20000d34

1004eab8 <_puts_r>:
1004eab8:	6a03      	ldr	r3, [r0, #32]
1004eaba:	b570      	push	{r4, r5, r6, lr}
1004eabc:	0005      	movs	r5, r0
1004eabe:	000e      	movs	r6, r1
1004eac0:	6884      	ldr	r4, [r0, #8]
1004eac2:	2b00      	cmp	r3, #0
1004eac4:	d101      	bne.n	1004eaca <_puts_r+0x12>
1004eac6:	f7ff ffb3 	bl	1004ea30 <__sinit>
1004eaca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004eacc:	07db      	lsls	r3, r3, #31
1004eace:	d405      	bmi.n	1004eadc <_puts_r+0x24>
1004ead0:	89a3      	ldrh	r3, [r4, #12]
1004ead2:	059b      	lsls	r3, r3, #22
1004ead4:	d402      	bmi.n	1004eadc <_puts_r+0x24>
1004ead6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004ead8:	f000 fa5b 	bl	1004ef92 <__retarget_lock_acquire_recursive>
1004eadc:	89a3      	ldrh	r3, [r4, #12]
1004eade:	071b      	lsls	r3, r3, #28
1004eae0:	d502      	bpl.n	1004eae8 <_puts_r+0x30>
1004eae2:	6923      	ldr	r3, [r4, #16]
1004eae4:	2b00      	cmp	r3, #0
1004eae6:	d11f      	bne.n	1004eb28 <_puts_r+0x70>
1004eae8:	0021      	movs	r1, r4
1004eaea:	0028      	movs	r0, r5
1004eaec:	f000 f988 	bl	1004ee00 <__swsetup_r>
1004eaf0:	2800      	cmp	r0, #0
1004eaf2:	d019      	beq.n	1004eb28 <_puts_r+0x70>
1004eaf4:	2501      	movs	r5, #1
1004eaf6:	426d      	negs	r5, r5
1004eaf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004eafa:	07db      	lsls	r3, r3, #31
1004eafc:	d405      	bmi.n	1004eb0a <_puts_r+0x52>
1004eafe:	89a3      	ldrh	r3, [r4, #12]
1004eb00:	059b      	lsls	r3, r3, #22
1004eb02:	d402      	bmi.n	1004eb0a <_puts_r+0x52>
1004eb04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004eb06:	f000 fa45 	bl	1004ef94 <__retarget_lock_release_recursive>
1004eb0a:	0028      	movs	r0, r5
1004eb0c:	bd70      	pop	{r4, r5, r6, pc}
1004eb0e:	3601      	adds	r6, #1
1004eb10:	60a3      	str	r3, [r4, #8]
1004eb12:	2b00      	cmp	r3, #0
1004eb14:	da04      	bge.n	1004eb20 <_puts_r+0x68>
1004eb16:	69a2      	ldr	r2, [r4, #24]
1004eb18:	429a      	cmp	r2, r3
1004eb1a:	dc16      	bgt.n	1004eb4a <_puts_r+0x92>
1004eb1c:	290a      	cmp	r1, #10
1004eb1e:	d014      	beq.n	1004eb4a <_puts_r+0x92>
1004eb20:	6823      	ldr	r3, [r4, #0]
1004eb22:	1c5a      	adds	r2, r3, #1
1004eb24:	6022      	str	r2, [r4, #0]
1004eb26:	7019      	strb	r1, [r3, #0]
1004eb28:	68a3      	ldr	r3, [r4, #8]
1004eb2a:	7831      	ldrb	r1, [r6, #0]
1004eb2c:	3b01      	subs	r3, #1
1004eb2e:	2900      	cmp	r1, #0
1004eb30:	d1ed      	bne.n	1004eb0e <_puts_r+0x56>
1004eb32:	60a3      	str	r3, [r4, #8]
1004eb34:	2b00      	cmp	r3, #0
1004eb36:	da0f      	bge.n	1004eb58 <_puts_r+0xa0>
1004eb38:	0022      	movs	r2, r4
1004eb3a:	0028      	movs	r0, r5
1004eb3c:	310a      	adds	r1, #10
1004eb3e:	f000 f91d 	bl	1004ed7c <__swbuf_r>
1004eb42:	3001      	adds	r0, #1
1004eb44:	d0d6      	beq.n	1004eaf4 <_puts_r+0x3c>
1004eb46:	250a      	movs	r5, #10
1004eb48:	e7d6      	b.n	1004eaf8 <_puts_r+0x40>
1004eb4a:	0022      	movs	r2, r4
1004eb4c:	0028      	movs	r0, r5
1004eb4e:	f000 f915 	bl	1004ed7c <__swbuf_r>
1004eb52:	3001      	adds	r0, #1
1004eb54:	d1e8      	bne.n	1004eb28 <_puts_r+0x70>
1004eb56:	e7cd      	b.n	1004eaf4 <_puts_r+0x3c>
1004eb58:	6823      	ldr	r3, [r4, #0]
1004eb5a:	1c5a      	adds	r2, r3, #1
1004eb5c:	6022      	str	r2, [r4, #0]
1004eb5e:	220a      	movs	r2, #10
1004eb60:	701a      	strb	r2, [r3, #0]
1004eb62:	e7f0      	b.n	1004eb46 <_puts_r+0x8e>

1004eb64 <puts>:
1004eb64:	b510      	push	{r4, lr}
1004eb66:	4b03      	ldr	r3, [pc, #12]	@ (1004eb74 <puts+0x10>)
1004eb68:	0001      	movs	r1, r0
1004eb6a:	6818      	ldr	r0, [r3, #0]
1004eb6c:	f7ff ffa4 	bl	1004eab8 <_puts_r>
1004eb70:	bd10      	pop	{r4, pc}
1004eb72:	46c0      	nop			@ (mov r8, r8)
1004eb74:	20000d34 	.word	0x20000d34

1004eb78 <setvbuf>:
1004eb78:	b5f0      	push	{r4, r5, r6, r7, lr}
1004eb7a:	001d      	movs	r5, r3
1004eb7c:	4b57      	ldr	r3, [pc, #348]	@ (1004ecdc <setvbuf+0x164>)
1004eb7e:	b085      	sub	sp, #20
1004eb80:	681e      	ldr	r6, [r3, #0]
1004eb82:	0004      	movs	r4, r0
1004eb84:	000f      	movs	r7, r1
1004eb86:	9200      	str	r2, [sp, #0]
1004eb88:	2e00      	cmp	r6, #0
1004eb8a:	d005      	beq.n	1004eb98 <setvbuf+0x20>
1004eb8c:	6a33      	ldr	r3, [r6, #32]
1004eb8e:	2b00      	cmp	r3, #0
1004eb90:	d102      	bne.n	1004eb98 <setvbuf+0x20>
1004eb92:	0030      	movs	r0, r6
1004eb94:	f7ff ff4c 	bl	1004ea30 <__sinit>
1004eb98:	9b00      	ldr	r3, [sp, #0]
1004eb9a:	2b02      	cmp	r3, #2
1004eb9c:	d005      	beq.n	1004ebaa <setvbuf+0x32>
1004eb9e:	2b01      	cmp	r3, #1
1004eba0:	d900      	bls.n	1004eba4 <setvbuf+0x2c>
1004eba2:	e097      	b.n	1004ecd4 <setvbuf+0x15c>
1004eba4:	2d00      	cmp	r5, #0
1004eba6:	da00      	bge.n	1004ebaa <setvbuf+0x32>
1004eba8:	e094      	b.n	1004ecd4 <setvbuf+0x15c>
1004ebaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004ebac:	07db      	lsls	r3, r3, #31
1004ebae:	d405      	bmi.n	1004ebbc <setvbuf+0x44>
1004ebb0:	89a3      	ldrh	r3, [r4, #12]
1004ebb2:	059b      	lsls	r3, r3, #22
1004ebb4:	d402      	bmi.n	1004ebbc <setvbuf+0x44>
1004ebb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004ebb8:	f000 f9eb 	bl	1004ef92 <__retarget_lock_acquire_recursive>
1004ebbc:	0021      	movs	r1, r4
1004ebbe:	0030      	movs	r0, r6
1004ebc0:	f000 fe40 	bl	1004f844 <_fflush_r>
1004ebc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004ebc6:	2900      	cmp	r1, #0
1004ebc8:	d008      	beq.n	1004ebdc <setvbuf+0x64>
1004ebca:	0023      	movs	r3, r4
1004ebcc:	3344      	adds	r3, #68	@ 0x44
1004ebce:	4299      	cmp	r1, r3
1004ebd0:	d002      	beq.n	1004ebd8 <setvbuf+0x60>
1004ebd2:	0030      	movs	r0, r6
1004ebd4:	f000 f9e8 	bl	1004efa8 <_free_r>
1004ebd8:	2300      	movs	r3, #0
1004ebda:	6363      	str	r3, [r4, #52]	@ 0x34
1004ebdc:	2300      	movs	r3, #0
1004ebde:	61a3      	str	r3, [r4, #24]
1004ebe0:	6063      	str	r3, [r4, #4]
1004ebe2:	89a3      	ldrh	r3, [r4, #12]
1004ebe4:	061b      	lsls	r3, r3, #24
1004ebe6:	d503      	bpl.n	1004ebf0 <setvbuf+0x78>
1004ebe8:	0030      	movs	r0, r6
1004ebea:	6921      	ldr	r1, [r4, #16]
1004ebec:	f000 f9dc 	bl	1004efa8 <_free_r>
1004ebf0:	89a3      	ldrh	r3, [r4, #12]
1004ebf2:	4a3b      	ldr	r2, [pc, #236]	@ (1004ece0 <setvbuf+0x168>)
1004ebf4:	4013      	ands	r3, r2
1004ebf6:	81a3      	strh	r3, [r4, #12]
1004ebf8:	9b00      	ldr	r3, [sp, #0]
1004ebfa:	2b02      	cmp	r3, #2
1004ebfc:	d060      	beq.n	1004ecc0 <setvbuf+0x148>
1004ebfe:	ab03      	add	r3, sp, #12
1004ec00:	0021      	movs	r1, r4
1004ec02:	0030      	movs	r0, r6
1004ec04:	aa02      	add	r2, sp, #8
1004ec06:	f000 fe49 	bl	1004f89c <__swhatbuf_r>
1004ec0a:	89a3      	ldrh	r3, [r4, #12]
1004ec0c:	4303      	orrs	r3, r0
1004ec0e:	81a3      	strh	r3, [r4, #12]
1004ec10:	2d00      	cmp	r5, #0
1004ec12:	d124      	bne.n	1004ec5e <setvbuf+0xe6>
1004ec14:	9d02      	ldr	r5, [sp, #8]
1004ec16:	0028      	movs	r0, r5
1004ec18:	f000 fa10 	bl	1004f03c <malloc>
1004ec1c:	9501      	str	r5, [sp, #4]
1004ec1e:	1e07      	subs	r7, r0, #0
1004ec20:	d148      	bne.n	1004ecb4 <setvbuf+0x13c>
1004ec22:	9b02      	ldr	r3, [sp, #8]
1004ec24:	9301      	str	r3, [sp, #4]
1004ec26:	42ab      	cmp	r3, r5
1004ec28:	d13f      	bne.n	1004ecaa <setvbuf+0x132>
1004ec2a:	2501      	movs	r5, #1
1004ec2c:	426d      	negs	r5, r5
1004ec2e:	220c      	movs	r2, #12
1004ec30:	5ea3      	ldrsh	r3, [r4, r2]
1004ec32:	2202      	movs	r2, #2
1004ec34:	431a      	orrs	r2, r3
1004ec36:	81a2      	strh	r2, [r4, #12]
1004ec38:	2200      	movs	r2, #0
1004ec3a:	60a2      	str	r2, [r4, #8]
1004ec3c:	0022      	movs	r2, r4
1004ec3e:	3247      	adds	r2, #71	@ 0x47
1004ec40:	6022      	str	r2, [r4, #0]
1004ec42:	6122      	str	r2, [r4, #16]
1004ec44:	2201      	movs	r2, #1
1004ec46:	6e61      	ldr	r1, [r4, #100]	@ 0x64
1004ec48:	6162      	str	r2, [r4, #20]
1004ec4a:	4211      	tst	r1, r2
1004ec4c:	d104      	bne.n	1004ec58 <setvbuf+0xe0>
1004ec4e:	059b      	lsls	r3, r3, #22
1004ec50:	d402      	bmi.n	1004ec58 <setvbuf+0xe0>
1004ec52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004ec54:	f000 f99e 	bl	1004ef94 <__retarget_lock_release_recursive>
1004ec58:	0028      	movs	r0, r5
1004ec5a:	b005      	add	sp, #20
1004ec5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ec5e:	2f00      	cmp	r7, #0
1004ec60:	d0d9      	beq.n	1004ec16 <setvbuf+0x9e>
1004ec62:	6a33      	ldr	r3, [r6, #32]
1004ec64:	2b00      	cmp	r3, #0
1004ec66:	d102      	bne.n	1004ec6e <setvbuf+0xf6>
1004ec68:	0030      	movs	r0, r6
1004ec6a:	f7ff fee1 	bl	1004ea30 <__sinit>
1004ec6e:	9b00      	ldr	r3, [sp, #0]
1004ec70:	2b01      	cmp	r3, #1
1004ec72:	d103      	bne.n	1004ec7c <setvbuf+0x104>
1004ec74:	89a3      	ldrh	r3, [r4, #12]
1004ec76:	9a00      	ldr	r2, [sp, #0]
1004ec78:	431a      	orrs	r2, r3
1004ec7a:	81a2      	strh	r2, [r4, #12]
1004ec7c:	220c      	movs	r2, #12
1004ec7e:	5ea3      	ldrsh	r3, [r4, r2]
1004ec80:	2208      	movs	r2, #8
1004ec82:	0019      	movs	r1, r3
1004ec84:	6027      	str	r7, [r4, #0]
1004ec86:	6127      	str	r7, [r4, #16]
1004ec88:	6165      	str	r5, [r4, #20]
1004ec8a:	4011      	ands	r1, r2
1004ec8c:	4213      	tst	r3, r2
1004ec8e:	d01b      	beq.n	1004ecc8 <setvbuf+0x150>
1004ec90:	07da      	lsls	r2, r3, #31
1004ec92:	d517      	bpl.n	1004ecc4 <setvbuf+0x14c>
1004ec94:	2200      	movs	r2, #0
1004ec96:	426d      	negs	r5, r5
1004ec98:	60a2      	str	r2, [r4, #8]
1004ec9a:	61a5      	str	r5, [r4, #24]
1004ec9c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004ec9e:	07d2      	lsls	r2, r2, #31
1004eca0:	d401      	bmi.n	1004eca6 <setvbuf+0x12e>
1004eca2:	059b      	lsls	r3, r3, #22
1004eca4:	d512      	bpl.n	1004eccc <setvbuf+0x154>
1004eca6:	2500      	movs	r5, #0
1004eca8:	e7d6      	b.n	1004ec58 <setvbuf+0xe0>
1004ecaa:	9801      	ldr	r0, [sp, #4]
1004ecac:	f000 f9c6 	bl	1004f03c <malloc>
1004ecb0:	1e07      	subs	r7, r0, #0
1004ecb2:	d0ba      	beq.n	1004ec2a <setvbuf+0xb2>
1004ecb4:	2380      	movs	r3, #128	@ 0x80
1004ecb6:	89a2      	ldrh	r2, [r4, #12]
1004ecb8:	9d01      	ldr	r5, [sp, #4]
1004ecba:	4313      	orrs	r3, r2
1004ecbc:	81a3      	strh	r3, [r4, #12]
1004ecbe:	e7d0      	b.n	1004ec62 <setvbuf+0xea>
1004ecc0:	2500      	movs	r5, #0
1004ecc2:	e7b4      	b.n	1004ec2e <setvbuf+0xb6>
1004ecc4:	60a5      	str	r5, [r4, #8]
1004ecc6:	e7e9      	b.n	1004ec9c <setvbuf+0x124>
1004ecc8:	60a1      	str	r1, [r4, #8]
1004ecca:	e7e7      	b.n	1004ec9c <setvbuf+0x124>
1004eccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004ecce:	f000 f961 	bl	1004ef94 <__retarget_lock_release_recursive>
1004ecd2:	e7e8      	b.n	1004eca6 <setvbuf+0x12e>
1004ecd4:	2501      	movs	r5, #1
1004ecd6:	426d      	negs	r5, r5
1004ecd8:	e7be      	b.n	1004ec58 <setvbuf+0xe0>
1004ecda:	46c0      	nop			@ (mov r8, r8)
1004ecdc:	20000d34 	.word	0x20000d34
1004ece0:	fffff35c 	.word	0xfffff35c

1004ece4 <__sread>:
1004ece4:	b570      	push	{r4, r5, r6, lr}
1004ece6:	000c      	movs	r4, r1
1004ece8:	250e      	movs	r5, #14
1004ecea:	5f49      	ldrsh	r1, [r1, r5]
1004ecec:	f000 f922 	bl	1004ef34 <_read_r>
1004ecf0:	2800      	cmp	r0, #0
1004ecf2:	db03      	blt.n	1004ecfc <__sread+0x18>
1004ecf4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
1004ecf6:	181b      	adds	r3, r3, r0
1004ecf8:	6563      	str	r3, [r4, #84]	@ 0x54
1004ecfa:	bd70      	pop	{r4, r5, r6, pc}
1004ecfc:	89a3      	ldrh	r3, [r4, #12]
1004ecfe:	4a02      	ldr	r2, [pc, #8]	@ (1004ed08 <__sread+0x24>)
1004ed00:	4013      	ands	r3, r2
1004ed02:	81a3      	strh	r3, [r4, #12]
1004ed04:	e7f9      	b.n	1004ecfa <__sread+0x16>
1004ed06:	46c0      	nop			@ (mov r8, r8)
1004ed08:	ffffefff 	.word	0xffffefff

1004ed0c <__swrite>:
1004ed0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ed0e:	001f      	movs	r7, r3
1004ed10:	898b      	ldrh	r3, [r1, #12]
1004ed12:	0005      	movs	r5, r0
1004ed14:	000c      	movs	r4, r1
1004ed16:	0016      	movs	r6, r2
1004ed18:	05db      	lsls	r3, r3, #23
1004ed1a:	d505      	bpl.n	1004ed28 <__swrite+0x1c>
1004ed1c:	230e      	movs	r3, #14
1004ed1e:	5ec9      	ldrsh	r1, [r1, r3]
1004ed20:	2200      	movs	r2, #0
1004ed22:	2302      	movs	r3, #2
1004ed24:	f000 f8f2 	bl	1004ef0c <_lseek_r>
1004ed28:	89a3      	ldrh	r3, [r4, #12]
1004ed2a:	4a05      	ldr	r2, [pc, #20]	@ (1004ed40 <__swrite+0x34>)
1004ed2c:	0028      	movs	r0, r5
1004ed2e:	4013      	ands	r3, r2
1004ed30:	81a3      	strh	r3, [r4, #12]
1004ed32:	0032      	movs	r2, r6
1004ed34:	230e      	movs	r3, #14
1004ed36:	5ee1      	ldrsh	r1, [r4, r3]
1004ed38:	003b      	movs	r3, r7
1004ed3a:	f000 f90f 	bl	1004ef5c <_write_r>
1004ed3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004ed40:	ffffefff 	.word	0xffffefff

1004ed44 <__sseek>:
1004ed44:	b570      	push	{r4, r5, r6, lr}
1004ed46:	000c      	movs	r4, r1
1004ed48:	250e      	movs	r5, #14
1004ed4a:	5f49      	ldrsh	r1, [r1, r5]
1004ed4c:	f000 f8de 	bl	1004ef0c <_lseek_r>
1004ed50:	89a3      	ldrh	r3, [r4, #12]
1004ed52:	1c42      	adds	r2, r0, #1
1004ed54:	d103      	bne.n	1004ed5e <__sseek+0x1a>
1004ed56:	4a05      	ldr	r2, [pc, #20]	@ (1004ed6c <__sseek+0x28>)
1004ed58:	4013      	ands	r3, r2
1004ed5a:	81a3      	strh	r3, [r4, #12]
1004ed5c:	bd70      	pop	{r4, r5, r6, pc}
1004ed5e:	2280      	movs	r2, #128	@ 0x80
1004ed60:	0152      	lsls	r2, r2, #5
1004ed62:	4313      	orrs	r3, r2
1004ed64:	81a3      	strh	r3, [r4, #12]
1004ed66:	6560      	str	r0, [r4, #84]	@ 0x54
1004ed68:	e7f8      	b.n	1004ed5c <__sseek+0x18>
1004ed6a:	46c0      	nop			@ (mov r8, r8)
1004ed6c:	ffffefff 	.word	0xffffefff

1004ed70 <__sclose>:
1004ed70:	b510      	push	{r4, lr}
1004ed72:	230e      	movs	r3, #14
1004ed74:	5ec9      	ldrsh	r1, [r1, r3]
1004ed76:	f000 f8b7 	bl	1004eee8 <_close_r>
1004ed7a:	bd10      	pop	{r4, pc}

1004ed7c <__swbuf_r>:
1004ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004ed7e:	0006      	movs	r6, r0
1004ed80:	000d      	movs	r5, r1
1004ed82:	0014      	movs	r4, r2
1004ed84:	2800      	cmp	r0, #0
1004ed86:	d004      	beq.n	1004ed92 <__swbuf_r+0x16>
1004ed88:	6a03      	ldr	r3, [r0, #32]
1004ed8a:	2b00      	cmp	r3, #0
1004ed8c:	d101      	bne.n	1004ed92 <__swbuf_r+0x16>
1004ed8e:	f7ff fe4f 	bl	1004ea30 <__sinit>
1004ed92:	69a3      	ldr	r3, [r4, #24]
1004ed94:	60a3      	str	r3, [r4, #8]
1004ed96:	89a3      	ldrh	r3, [r4, #12]
1004ed98:	071b      	lsls	r3, r3, #28
1004ed9a:	d502      	bpl.n	1004eda2 <__swbuf_r+0x26>
1004ed9c:	6923      	ldr	r3, [r4, #16]
1004ed9e:	2b00      	cmp	r3, #0
1004eda0:	d109      	bne.n	1004edb6 <__swbuf_r+0x3a>
1004eda2:	0021      	movs	r1, r4
1004eda4:	0030      	movs	r0, r6
1004eda6:	f000 f82b 	bl	1004ee00 <__swsetup_r>
1004edaa:	2800      	cmp	r0, #0
1004edac:	d003      	beq.n	1004edb6 <__swbuf_r+0x3a>
1004edae:	2501      	movs	r5, #1
1004edb0:	426d      	negs	r5, r5
1004edb2:	0028      	movs	r0, r5
1004edb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1004edb6:	6923      	ldr	r3, [r4, #16]
1004edb8:	6820      	ldr	r0, [r4, #0]
1004edba:	b2ef      	uxtb	r7, r5
1004edbc:	1ac0      	subs	r0, r0, r3
1004edbe:	6963      	ldr	r3, [r4, #20]
1004edc0:	b2ed      	uxtb	r5, r5
1004edc2:	4283      	cmp	r3, r0
1004edc4:	dc05      	bgt.n	1004edd2 <__swbuf_r+0x56>
1004edc6:	0021      	movs	r1, r4
1004edc8:	0030      	movs	r0, r6
1004edca:	f000 fd3b 	bl	1004f844 <_fflush_r>
1004edce:	2800      	cmp	r0, #0
1004edd0:	d1ed      	bne.n	1004edae <__swbuf_r+0x32>
1004edd2:	68a3      	ldr	r3, [r4, #8]
1004edd4:	3001      	adds	r0, #1
1004edd6:	3b01      	subs	r3, #1
1004edd8:	60a3      	str	r3, [r4, #8]
1004edda:	6823      	ldr	r3, [r4, #0]
1004eddc:	1c5a      	adds	r2, r3, #1
1004edde:	6022      	str	r2, [r4, #0]
1004ede0:	701f      	strb	r7, [r3, #0]
1004ede2:	6963      	ldr	r3, [r4, #20]
1004ede4:	4283      	cmp	r3, r0
1004ede6:	d004      	beq.n	1004edf2 <__swbuf_r+0x76>
1004ede8:	89a3      	ldrh	r3, [r4, #12]
1004edea:	07db      	lsls	r3, r3, #31
1004edec:	d5e1      	bpl.n	1004edb2 <__swbuf_r+0x36>
1004edee:	2d0a      	cmp	r5, #10
1004edf0:	d1df      	bne.n	1004edb2 <__swbuf_r+0x36>
1004edf2:	0021      	movs	r1, r4
1004edf4:	0030      	movs	r0, r6
1004edf6:	f000 fd25 	bl	1004f844 <_fflush_r>
1004edfa:	2800      	cmp	r0, #0
1004edfc:	d0d9      	beq.n	1004edb2 <__swbuf_r+0x36>
1004edfe:	e7d6      	b.n	1004edae <__swbuf_r+0x32>

1004ee00 <__swsetup_r>:
1004ee00:	4b2d      	ldr	r3, [pc, #180]	@ (1004eeb8 <__swsetup_r+0xb8>)
1004ee02:	b570      	push	{r4, r5, r6, lr}
1004ee04:	0005      	movs	r5, r0
1004ee06:	6818      	ldr	r0, [r3, #0]
1004ee08:	000c      	movs	r4, r1
1004ee0a:	2800      	cmp	r0, #0
1004ee0c:	d004      	beq.n	1004ee18 <__swsetup_r+0x18>
1004ee0e:	6a03      	ldr	r3, [r0, #32]
1004ee10:	2b00      	cmp	r3, #0
1004ee12:	d101      	bne.n	1004ee18 <__swsetup_r+0x18>
1004ee14:	f7ff fe0c 	bl	1004ea30 <__sinit>
1004ee18:	230c      	movs	r3, #12
1004ee1a:	5ee2      	ldrsh	r2, [r4, r3]
1004ee1c:	0713      	lsls	r3, r2, #28
1004ee1e:	d423      	bmi.n	1004ee68 <__swsetup_r+0x68>
1004ee20:	06d3      	lsls	r3, r2, #27
1004ee22:	d407      	bmi.n	1004ee34 <__swsetup_r+0x34>
1004ee24:	2309      	movs	r3, #9
1004ee26:	602b      	str	r3, [r5, #0]
1004ee28:	2340      	movs	r3, #64	@ 0x40
1004ee2a:	2001      	movs	r0, #1
1004ee2c:	4313      	orrs	r3, r2
1004ee2e:	81a3      	strh	r3, [r4, #12]
1004ee30:	4240      	negs	r0, r0
1004ee32:	e03a      	b.n	1004eeaa <__swsetup_r+0xaa>
1004ee34:	0752      	lsls	r2, r2, #29
1004ee36:	d513      	bpl.n	1004ee60 <__swsetup_r+0x60>
1004ee38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004ee3a:	2900      	cmp	r1, #0
1004ee3c:	d008      	beq.n	1004ee50 <__swsetup_r+0x50>
1004ee3e:	0023      	movs	r3, r4
1004ee40:	3344      	adds	r3, #68	@ 0x44
1004ee42:	4299      	cmp	r1, r3
1004ee44:	d002      	beq.n	1004ee4c <__swsetup_r+0x4c>
1004ee46:	0028      	movs	r0, r5
1004ee48:	f000 f8ae 	bl	1004efa8 <_free_r>
1004ee4c:	2300      	movs	r3, #0
1004ee4e:	6363      	str	r3, [r4, #52]	@ 0x34
1004ee50:	2224      	movs	r2, #36	@ 0x24
1004ee52:	89a3      	ldrh	r3, [r4, #12]
1004ee54:	4393      	bics	r3, r2
1004ee56:	81a3      	strh	r3, [r4, #12]
1004ee58:	2300      	movs	r3, #0
1004ee5a:	6063      	str	r3, [r4, #4]
1004ee5c:	6923      	ldr	r3, [r4, #16]
1004ee5e:	6023      	str	r3, [r4, #0]
1004ee60:	2308      	movs	r3, #8
1004ee62:	89a2      	ldrh	r2, [r4, #12]
1004ee64:	4313      	orrs	r3, r2
1004ee66:	81a3      	strh	r3, [r4, #12]
1004ee68:	6923      	ldr	r3, [r4, #16]
1004ee6a:	2b00      	cmp	r3, #0
1004ee6c:	d10b      	bne.n	1004ee86 <__swsetup_r+0x86>
1004ee6e:	21a0      	movs	r1, #160	@ 0xa0
1004ee70:	2280      	movs	r2, #128	@ 0x80
1004ee72:	89a3      	ldrh	r3, [r4, #12]
1004ee74:	0089      	lsls	r1, r1, #2
1004ee76:	0092      	lsls	r2, r2, #2
1004ee78:	400b      	ands	r3, r1
1004ee7a:	4293      	cmp	r3, r2
1004ee7c:	d003      	beq.n	1004ee86 <__swsetup_r+0x86>
1004ee7e:	0021      	movs	r1, r4
1004ee80:	0028      	movs	r0, r5
1004ee82:	f000 fd35 	bl	1004f8f0 <__smakebuf_r>
1004ee86:	230c      	movs	r3, #12
1004ee88:	5ee2      	ldrsh	r2, [r4, r3]
1004ee8a:	2101      	movs	r1, #1
1004ee8c:	0013      	movs	r3, r2
1004ee8e:	400b      	ands	r3, r1
1004ee90:	420a      	tst	r2, r1
1004ee92:	d00b      	beq.n	1004eeac <__swsetup_r+0xac>
1004ee94:	2300      	movs	r3, #0
1004ee96:	60a3      	str	r3, [r4, #8]
1004ee98:	6963      	ldr	r3, [r4, #20]
1004ee9a:	425b      	negs	r3, r3
1004ee9c:	61a3      	str	r3, [r4, #24]
1004ee9e:	2000      	movs	r0, #0
1004eea0:	6923      	ldr	r3, [r4, #16]
1004eea2:	4283      	cmp	r3, r0
1004eea4:	d101      	bne.n	1004eeaa <__swsetup_r+0xaa>
1004eea6:	0613      	lsls	r3, r2, #24
1004eea8:	d4be      	bmi.n	1004ee28 <__swsetup_r+0x28>
1004eeaa:	bd70      	pop	{r4, r5, r6, pc}
1004eeac:	0791      	lsls	r1, r2, #30
1004eeae:	d400      	bmi.n	1004eeb2 <__swsetup_r+0xb2>
1004eeb0:	6963      	ldr	r3, [r4, #20]
1004eeb2:	60a3      	str	r3, [r4, #8]
1004eeb4:	e7f3      	b.n	1004ee9e <__swsetup_r+0x9e>
1004eeb6:	46c0      	nop			@ (mov r8, r8)
1004eeb8:	20000d34 	.word	0x20000d34

1004eebc <memcmp>:
1004eebc:	b530      	push	{r4, r5, lr}
1004eebe:	2400      	movs	r4, #0
1004eec0:	3901      	subs	r1, #1
1004eec2:	42a2      	cmp	r2, r4
1004eec4:	d101      	bne.n	1004eeca <memcmp+0xe>
1004eec6:	2000      	movs	r0, #0
1004eec8:	e005      	b.n	1004eed6 <memcmp+0x1a>
1004eeca:	5d03      	ldrb	r3, [r0, r4]
1004eecc:	3401      	adds	r4, #1
1004eece:	5d0d      	ldrb	r5, [r1, r4]
1004eed0:	42ab      	cmp	r3, r5
1004eed2:	d0f6      	beq.n	1004eec2 <memcmp+0x6>
1004eed4:	1b58      	subs	r0, r3, r5
1004eed6:	bd30      	pop	{r4, r5, pc}

1004eed8 <memset>:
1004eed8:	0003      	movs	r3, r0
1004eeda:	1882      	adds	r2, r0, r2
1004eedc:	4293      	cmp	r3, r2
1004eede:	d100      	bne.n	1004eee2 <memset+0xa>
1004eee0:	4770      	bx	lr
1004eee2:	7019      	strb	r1, [r3, #0]
1004eee4:	3301      	adds	r3, #1
1004eee6:	e7f9      	b.n	1004eedc <memset+0x4>

1004eee8 <_close_r>:
1004eee8:	2300      	movs	r3, #0
1004eeea:	b570      	push	{r4, r5, r6, lr}
1004eeec:	4d06      	ldr	r5, [pc, #24]	@ (1004ef08 <_close_r+0x20>)
1004eeee:	0004      	movs	r4, r0
1004eef0:	0008      	movs	r0, r1
1004eef2:	602b      	str	r3, [r5, #0]
1004eef4:	f7f2 fa27 	bl	10041346 <_close>
1004eef8:	1c43      	adds	r3, r0, #1
1004eefa:	d103      	bne.n	1004ef04 <_close_r+0x1c>
1004eefc:	682b      	ldr	r3, [r5, #0]
1004eefe:	2b00      	cmp	r3, #0
1004ef00:	d000      	beq.n	1004ef04 <_close_r+0x1c>
1004ef02:	6023      	str	r3, [r4, #0]
1004ef04:	bd70      	pop	{r4, r5, r6, pc}
1004ef06:	46c0      	nop			@ (mov r8, r8)
1004ef08:	20000cc4 	.word	0x20000cc4

1004ef0c <_lseek_r>:
1004ef0c:	b570      	push	{r4, r5, r6, lr}
1004ef0e:	0004      	movs	r4, r0
1004ef10:	0008      	movs	r0, r1
1004ef12:	0011      	movs	r1, r2
1004ef14:	001a      	movs	r2, r3
1004ef16:	2300      	movs	r3, #0
1004ef18:	4d05      	ldr	r5, [pc, #20]	@ (1004ef30 <_lseek_r+0x24>)
1004ef1a:	602b      	str	r3, [r5, #0]
1004ef1c:	f7f2 fa34 	bl	10041388 <_lseek>
1004ef20:	1c43      	adds	r3, r0, #1
1004ef22:	d103      	bne.n	1004ef2c <_lseek_r+0x20>
1004ef24:	682b      	ldr	r3, [r5, #0]
1004ef26:	2b00      	cmp	r3, #0
1004ef28:	d000      	beq.n	1004ef2c <_lseek_r+0x20>
1004ef2a:	6023      	str	r3, [r4, #0]
1004ef2c:	bd70      	pop	{r4, r5, r6, pc}
1004ef2e:	46c0      	nop			@ (mov r8, r8)
1004ef30:	20000cc4 	.word	0x20000cc4

1004ef34 <_read_r>:
1004ef34:	b570      	push	{r4, r5, r6, lr}
1004ef36:	0004      	movs	r4, r0
1004ef38:	0008      	movs	r0, r1
1004ef3a:	0011      	movs	r1, r2
1004ef3c:	001a      	movs	r2, r3
1004ef3e:	2300      	movs	r3, #0
1004ef40:	4d05      	ldr	r5, [pc, #20]	@ (1004ef58 <_read_r+0x24>)
1004ef42:	602b      	str	r3, [r5, #0]
1004ef44:	f7f2 f9c6 	bl	100412d4 <_read>
1004ef48:	1c43      	adds	r3, r0, #1
1004ef4a:	d103      	bne.n	1004ef54 <_read_r+0x20>
1004ef4c:	682b      	ldr	r3, [r5, #0]
1004ef4e:	2b00      	cmp	r3, #0
1004ef50:	d000      	beq.n	1004ef54 <_read_r+0x20>
1004ef52:	6023      	str	r3, [r4, #0]
1004ef54:	bd70      	pop	{r4, r5, r6, pc}
1004ef56:	46c0      	nop			@ (mov r8, r8)
1004ef58:	20000cc4 	.word	0x20000cc4

1004ef5c <_write_r>:
1004ef5c:	b570      	push	{r4, r5, r6, lr}
1004ef5e:	0004      	movs	r4, r0
1004ef60:	0008      	movs	r0, r1
1004ef62:	0011      	movs	r1, r2
1004ef64:	001a      	movs	r2, r3
1004ef66:	2300      	movs	r3, #0
1004ef68:	4d05      	ldr	r5, [pc, #20]	@ (1004ef80 <_write_r+0x24>)
1004ef6a:	602b      	str	r3, [r5, #0]
1004ef6c:	f7f2 f9cf 	bl	1004130e <_write>
1004ef70:	1c43      	adds	r3, r0, #1
1004ef72:	d103      	bne.n	1004ef7c <_write_r+0x20>
1004ef74:	682b      	ldr	r3, [r5, #0]
1004ef76:	2b00      	cmp	r3, #0
1004ef78:	d000      	beq.n	1004ef7c <_write_r+0x20>
1004ef7a:	6023      	str	r3, [r4, #0]
1004ef7c:	bd70      	pop	{r4, r5, r6, pc}
1004ef7e:	46c0      	nop			@ (mov r8, r8)
1004ef80:	20000cc4 	.word	0x20000cc4

1004ef84 <__errno>:
1004ef84:	4b01      	ldr	r3, [pc, #4]	@ (1004ef8c <__errno+0x8>)
1004ef86:	6818      	ldr	r0, [r3, #0]
1004ef88:	4770      	bx	lr
1004ef8a:	46c0      	nop			@ (mov r8, r8)
1004ef8c:	20000d34 	.word	0x20000d34

1004ef90 <__retarget_lock_init_recursive>:
1004ef90:	4770      	bx	lr

1004ef92 <__retarget_lock_acquire_recursive>:
1004ef92:	4770      	bx	lr

1004ef94 <__retarget_lock_release_recursive>:
1004ef94:	4770      	bx	lr

1004ef96 <memcpy>:
1004ef96:	2300      	movs	r3, #0
1004ef98:	b510      	push	{r4, lr}
1004ef9a:	429a      	cmp	r2, r3
1004ef9c:	d100      	bne.n	1004efa0 <memcpy+0xa>
1004ef9e:	bd10      	pop	{r4, pc}
1004efa0:	5ccc      	ldrb	r4, [r1, r3]
1004efa2:	54c4      	strb	r4, [r0, r3]
1004efa4:	3301      	adds	r3, #1
1004efa6:	e7f8      	b.n	1004ef9a <memcpy+0x4>

1004efa8 <_free_r>:
1004efa8:	b570      	push	{r4, r5, r6, lr}
1004efaa:	0005      	movs	r5, r0
1004efac:	1e0c      	subs	r4, r1, #0
1004efae:	d010      	beq.n	1004efd2 <_free_r+0x2a>
1004efb0:	3c04      	subs	r4, #4
1004efb2:	6823      	ldr	r3, [r4, #0]
1004efb4:	2b00      	cmp	r3, #0
1004efb6:	da00      	bge.n	1004efba <_free_r+0x12>
1004efb8:	18e4      	adds	r4, r4, r3
1004efba:	0028      	movs	r0, r5
1004efbc:	f000 f8ea 	bl	1004f194 <__malloc_lock>
1004efc0:	4a1d      	ldr	r2, [pc, #116]	@ (1004f038 <_free_r+0x90>)
1004efc2:	6813      	ldr	r3, [r2, #0]
1004efc4:	2b00      	cmp	r3, #0
1004efc6:	d105      	bne.n	1004efd4 <_free_r+0x2c>
1004efc8:	6063      	str	r3, [r4, #4]
1004efca:	6014      	str	r4, [r2, #0]
1004efcc:	0028      	movs	r0, r5
1004efce:	f000 f8e9 	bl	1004f1a4 <__malloc_unlock>
1004efd2:	bd70      	pop	{r4, r5, r6, pc}
1004efd4:	42a3      	cmp	r3, r4
1004efd6:	d908      	bls.n	1004efea <_free_r+0x42>
1004efd8:	6820      	ldr	r0, [r4, #0]
1004efda:	1821      	adds	r1, r4, r0
1004efdc:	428b      	cmp	r3, r1
1004efde:	d1f3      	bne.n	1004efc8 <_free_r+0x20>
1004efe0:	6819      	ldr	r1, [r3, #0]
1004efe2:	685b      	ldr	r3, [r3, #4]
1004efe4:	1809      	adds	r1, r1, r0
1004efe6:	6021      	str	r1, [r4, #0]
1004efe8:	e7ee      	b.n	1004efc8 <_free_r+0x20>
1004efea:	001a      	movs	r2, r3
1004efec:	685b      	ldr	r3, [r3, #4]
1004efee:	2b00      	cmp	r3, #0
1004eff0:	d001      	beq.n	1004eff6 <_free_r+0x4e>
1004eff2:	42a3      	cmp	r3, r4
1004eff4:	d9f9      	bls.n	1004efea <_free_r+0x42>
1004eff6:	6811      	ldr	r1, [r2, #0]
1004eff8:	1850      	adds	r0, r2, r1
1004effa:	42a0      	cmp	r0, r4
1004effc:	d10b      	bne.n	1004f016 <_free_r+0x6e>
1004effe:	6820      	ldr	r0, [r4, #0]
1004f000:	1809      	adds	r1, r1, r0
1004f002:	1850      	adds	r0, r2, r1
1004f004:	6011      	str	r1, [r2, #0]
1004f006:	4283      	cmp	r3, r0
1004f008:	d1e0      	bne.n	1004efcc <_free_r+0x24>
1004f00a:	6818      	ldr	r0, [r3, #0]
1004f00c:	685b      	ldr	r3, [r3, #4]
1004f00e:	1841      	adds	r1, r0, r1
1004f010:	6011      	str	r1, [r2, #0]
1004f012:	6053      	str	r3, [r2, #4]
1004f014:	e7da      	b.n	1004efcc <_free_r+0x24>
1004f016:	42a0      	cmp	r0, r4
1004f018:	d902      	bls.n	1004f020 <_free_r+0x78>
1004f01a:	230c      	movs	r3, #12
1004f01c:	602b      	str	r3, [r5, #0]
1004f01e:	e7d5      	b.n	1004efcc <_free_r+0x24>
1004f020:	6820      	ldr	r0, [r4, #0]
1004f022:	1821      	adds	r1, r4, r0
1004f024:	428b      	cmp	r3, r1
1004f026:	d103      	bne.n	1004f030 <_free_r+0x88>
1004f028:	6819      	ldr	r1, [r3, #0]
1004f02a:	685b      	ldr	r3, [r3, #4]
1004f02c:	1809      	adds	r1, r1, r0
1004f02e:	6021      	str	r1, [r4, #0]
1004f030:	6063      	str	r3, [r4, #4]
1004f032:	6054      	str	r4, [r2, #4]
1004f034:	e7ca      	b.n	1004efcc <_free_r+0x24>
1004f036:	46c0      	nop			@ (mov r8, r8)
1004f038:	20000cd0 	.word	0x20000cd0

1004f03c <malloc>:
1004f03c:	b510      	push	{r4, lr}
1004f03e:	4b03      	ldr	r3, [pc, #12]	@ (1004f04c <malloc+0x10>)
1004f040:	0001      	movs	r1, r0
1004f042:	6818      	ldr	r0, [r3, #0]
1004f044:	f000 f826 	bl	1004f094 <_malloc_r>
1004f048:	bd10      	pop	{r4, pc}
1004f04a:	46c0      	nop			@ (mov r8, r8)
1004f04c:	20000d34 	.word	0x20000d34

1004f050 <sbrk_aligned>:
1004f050:	b570      	push	{r4, r5, r6, lr}
1004f052:	4e0f      	ldr	r6, [pc, #60]	@ (1004f090 <sbrk_aligned+0x40>)
1004f054:	000d      	movs	r5, r1
1004f056:	6831      	ldr	r1, [r6, #0]
1004f058:	0004      	movs	r4, r0
1004f05a:	2900      	cmp	r1, #0
1004f05c:	d102      	bne.n	1004f064 <sbrk_aligned+0x14>
1004f05e:	f000 fcad 	bl	1004f9bc <_sbrk_r>
1004f062:	6030      	str	r0, [r6, #0]
1004f064:	0029      	movs	r1, r5
1004f066:	0020      	movs	r0, r4
1004f068:	f000 fca8 	bl	1004f9bc <_sbrk_r>
1004f06c:	1c43      	adds	r3, r0, #1
1004f06e:	d103      	bne.n	1004f078 <sbrk_aligned+0x28>
1004f070:	2501      	movs	r5, #1
1004f072:	426d      	negs	r5, r5
1004f074:	0028      	movs	r0, r5
1004f076:	bd70      	pop	{r4, r5, r6, pc}
1004f078:	2303      	movs	r3, #3
1004f07a:	1cc5      	adds	r5, r0, #3
1004f07c:	439d      	bics	r5, r3
1004f07e:	42a8      	cmp	r0, r5
1004f080:	d0f8      	beq.n	1004f074 <sbrk_aligned+0x24>
1004f082:	1a29      	subs	r1, r5, r0
1004f084:	0020      	movs	r0, r4
1004f086:	f000 fc99 	bl	1004f9bc <_sbrk_r>
1004f08a:	3001      	adds	r0, #1
1004f08c:	d1f2      	bne.n	1004f074 <sbrk_aligned+0x24>
1004f08e:	e7ef      	b.n	1004f070 <sbrk_aligned+0x20>
1004f090:	20000ccc 	.word	0x20000ccc

1004f094 <_malloc_r>:
1004f094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004f096:	2203      	movs	r2, #3
1004f098:	1ccb      	adds	r3, r1, #3
1004f09a:	4393      	bics	r3, r2
1004f09c:	3308      	adds	r3, #8
1004f09e:	0005      	movs	r5, r0
1004f0a0:	001f      	movs	r7, r3
1004f0a2:	2b0c      	cmp	r3, #12
1004f0a4:	d234      	bcs.n	1004f110 <_malloc_r+0x7c>
1004f0a6:	270c      	movs	r7, #12
1004f0a8:	42b9      	cmp	r1, r7
1004f0aa:	d833      	bhi.n	1004f114 <_malloc_r+0x80>
1004f0ac:	0028      	movs	r0, r5
1004f0ae:	f000 f871 	bl	1004f194 <__malloc_lock>
1004f0b2:	4e37      	ldr	r6, [pc, #220]	@ (1004f190 <_malloc_r+0xfc>)
1004f0b4:	6833      	ldr	r3, [r6, #0]
1004f0b6:	001c      	movs	r4, r3
1004f0b8:	2c00      	cmp	r4, #0
1004f0ba:	d12f      	bne.n	1004f11c <_malloc_r+0x88>
1004f0bc:	0039      	movs	r1, r7
1004f0be:	0028      	movs	r0, r5
1004f0c0:	f7ff ffc6 	bl	1004f050 <sbrk_aligned>
1004f0c4:	0004      	movs	r4, r0
1004f0c6:	1c43      	adds	r3, r0, #1
1004f0c8:	d15f      	bne.n	1004f18a <_malloc_r+0xf6>
1004f0ca:	6834      	ldr	r4, [r6, #0]
1004f0cc:	9400      	str	r4, [sp, #0]
1004f0ce:	9b00      	ldr	r3, [sp, #0]
1004f0d0:	2b00      	cmp	r3, #0
1004f0d2:	d14a      	bne.n	1004f16a <_malloc_r+0xd6>
1004f0d4:	2c00      	cmp	r4, #0
1004f0d6:	d052      	beq.n	1004f17e <_malloc_r+0xea>
1004f0d8:	6823      	ldr	r3, [r4, #0]
1004f0da:	0028      	movs	r0, r5
1004f0dc:	18e3      	adds	r3, r4, r3
1004f0de:	9900      	ldr	r1, [sp, #0]
1004f0e0:	9301      	str	r3, [sp, #4]
1004f0e2:	f000 fc6b 	bl	1004f9bc <_sbrk_r>
1004f0e6:	9b01      	ldr	r3, [sp, #4]
1004f0e8:	4283      	cmp	r3, r0
1004f0ea:	d148      	bne.n	1004f17e <_malloc_r+0xea>
1004f0ec:	6823      	ldr	r3, [r4, #0]
1004f0ee:	0028      	movs	r0, r5
1004f0f0:	1aff      	subs	r7, r7, r3
1004f0f2:	0039      	movs	r1, r7
1004f0f4:	f7ff ffac 	bl	1004f050 <sbrk_aligned>
1004f0f8:	3001      	adds	r0, #1
1004f0fa:	d040      	beq.n	1004f17e <_malloc_r+0xea>
1004f0fc:	6823      	ldr	r3, [r4, #0]
1004f0fe:	19db      	adds	r3, r3, r7
1004f100:	6023      	str	r3, [r4, #0]
1004f102:	6833      	ldr	r3, [r6, #0]
1004f104:	685a      	ldr	r2, [r3, #4]
1004f106:	2a00      	cmp	r2, #0
1004f108:	d133      	bne.n	1004f172 <_malloc_r+0xde>
1004f10a:	9b00      	ldr	r3, [sp, #0]
1004f10c:	6033      	str	r3, [r6, #0]
1004f10e:	e019      	b.n	1004f144 <_malloc_r+0xb0>
1004f110:	2b00      	cmp	r3, #0
1004f112:	dac9      	bge.n	1004f0a8 <_malloc_r+0x14>
1004f114:	230c      	movs	r3, #12
1004f116:	602b      	str	r3, [r5, #0]
1004f118:	2000      	movs	r0, #0
1004f11a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004f11c:	6821      	ldr	r1, [r4, #0]
1004f11e:	1bc9      	subs	r1, r1, r7
1004f120:	d420      	bmi.n	1004f164 <_malloc_r+0xd0>
1004f122:	290b      	cmp	r1, #11
1004f124:	d90a      	bls.n	1004f13c <_malloc_r+0xa8>
1004f126:	19e2      	adds	r2, r4, r7
1004f128:	6027      	str	r7, [r4, #0]
1004f12a:	42a3      	cmp	r3, r4
1004f12c:	d104      	bne.n	1004f138 <_malloc_r+0xa4>
1004f12e:	6032      	str	r2, [r6, #0]
1004f130:	6863      	ldr	r3, [r4, #4]
1004f132:	6011      	str	r1, [r2, #0]
1004f134:	6053      	str	r3, [r2, #4]
1004f136:	e005      	b.n	1004f144 <_malloc_r+0xb0>
1004f138:	605a      	str	r2, [r3, #4]
1004f13a:	e7f9      	b.n	1004f130 <_malloc_r+0x9c>
1004f13c:	6862      	ldr	r2, [r4, #4]
1004f13e:	42a3      	cmp	r3, r4
1004f140:	d10e      	bne.n	1004f160 <_malloc_r+0xcc>
1004f142:	6032      	str	r2, [r6, #0]
1004f144:	0028      	movs	r0, r5
1004f146:	f000 f82d 	bl	1004f1a4 <__malloc_unlock>
1004f14a:	0020      	movs	r0, r4
1004f14c:	2207      	movs	r2, #7
1004f14e:	300b      	adds	r0, #11
1004f150:	1d23      	adds	r3, r4, #4
1004f152:	4390      	bics	r0, r2
1004f154:	1ac2      	subs	r2, r0, r3
1004f156:	4298      	cmp	r0, r3
1004f158:	d0df      	beq.n	1004f11a <_malloc_r+0x86>
1004f15a:	1a1b      	subs	r3, r3, r0
1004f15c:	50a3      	str	r3, [r4, r2]
1004f15e:	e7dc      	b.n	1004f11a <_malloc_r+0x86>
1004f160:	605a      	str	r2, [r3, #4]
1004f162:	e7ef      	b.n	1004f144 <_malloc_r+0xb0>
1004f164:	0023      	movs	r3, r4
1004f166:	6864      	ldr	r4, [r4, #4]
1004f168:	e7a6      	b.n	1004f0b8 <_malloc_r+0x24>
1004f16a:	9c00      	ldr	r4, [sp, #0]
1004f16c:	6863      	ldr	r3, [r4, #4]
1004f16e:	9300      	str	r3, [sp, #0]
1004f170:	e7ad      	b.n	1004f0ce <_malloc_r+0x3a>
1004f172:	001a      	movs	r2, r3
1004f174:	685b      	ldr	r3, [r3, #4]
1004f176:	42a3      	cmp	r3, r4
1004f178:	d1fb      	bne.n	1004f172 <_malloc_r+0xde>
1004f17a:	2300      	movs	r3, #0
1004f17c:	e7da      	b.n	1004f134 <_malloc_r+0xa0>
1004f17e:	230c      	movs	r3, #12
1004f180:	0028      	movs	r0, r5
1004f182:	602b      	str	r3, [r5, #0]
1004f184:	f000 f80e 	bl	1004f1a4 <__malloc_unlock>
1004f188:	e7c6      	b.n	1004f118 <_malloc_r+0x84>
1004f18a:	6007      	str	r7, [r0, #0]
1004f18c:	e7da      	b.n	1004f144 <_malloc_r+0xb0>
1004f18e:	46c0      	nop			@ (mov r8, r8)
1004f190:	20000cd0 	.word	0x20000cd0

1004f194 <__malloc_lock>:
1004f194:	b510      	push	{r4, lr}
1004f196:	4802      	ldr	r0, [pc, #8]	@ (1004f1a0 <__malloc_lock+0xc>)
1004f198:	f7ff fefb 	bl	1004ef92 <__retarget_lock_acquire_recursive>
1004f19c:	bd10      	pop	{r4, pc}
1004f19e:	46c0      	nop			@ (mov r8, r8)
1004f1a0:	20000cc8 	.word	0x20000cc8

1004f1a4 <__malloc_unlock>:
1004f1a4:	b510      	push	{r4, lr}
1004f1a6:	4802      	ldr	r0, [pc, #8]	@ (1004f1b0 <__malloc_unlock+0xc>)
1004f1a8:	f7ff fef4 	bl	1004ef94 <__retarget_lock_release_recursive>
1004f1ac:	bd10      	pop	{r4, pc}
1004f1ae:	46c0      	nop			@ (mov r8, r8)
1004f1b0:	20000cc8 	.word	0x20000cc8

1004f1b4 <__sfputc_r>:
1004f1b4:	6893      	ldr	r3, [r2, #8]
1004f1b6:	b510      	push	{r4, lr}
1004f1b8:	3b01      	subs	r3, #1
1004f1ba:	6093      	str	r3, [r2, #8]
1004f1bc:	2b00      	cmp	r3, #0
1004f1be:	da04      	bge.n	1004f1ca <__sfputc_r+0x16>
1004f1c0:	6994      	ldr	r4, [r2, #24]
1004f1c2:	42a3      	cmp	r3, r4
1004f1c4:	db07      	blt.n	1004f1d6 <__sfputc_r+0x22>
1004f1c6:	290a      	cmp	r1, #10
1004f1c8:	d005      	beq.n	1004f1d6 <__sfputc_r+0x22>
1004f1ca:	6813      	ldr	r3, [r2, #0]
1004f1cc:	1c58      	adds	r0, r3, #1
1004f1ce:	6010      	str	r0, [r2, #0]
1004f1d0:	7019      	strb	r1, [r3, #0]
1004f1d2:	0008      	movs	r0, r1
1004f1d4:	bd10      	pop	{r4, pc}
1004f1d6:	f7ff fdd1 	bl	1004ed7c <__swbuf_r>
1004f1da:	0001      	movs	r1, r0
1004f1dc:	e7f9      	b.n	1004f1d2 <__sfputc_r+0x1e>

1004f1de <__sfputs_r>:
1004f1de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004f1e0:	0006      	movs	r6, r0
1004f1e2:	000f      	movs	r7, r1
1004f1e4:	0014      	movs	r4, r2
1004f1e6:	18d5      	adds	r5, r2, r3
1004f1e8:	42ac      	cmp	r4, r5
1004f1ea:	d101      	bne.n	1004f1f0 <__sfputs_r+0x12>
1004f1ec:	2000      	movs	r0, #0
1004f1ee:	e007      	b.n	1004f200 <__sfputs_r+0x22>
1004f1f0:	7821      	ldrb	r1, [r4, #0]
1004f1f2:	003a      	movs	r2, r7
1004f1f4:	0030      	movs	r0, r6
1004f1f6:	f7ff ffdd 	bl	1004f1b4 <__sfputc_r>
1004f1fa:	3401      	adds	r4, #1
1004f1fc:	1c43      	adds	r3, r0, #1
1004f1fe:	d1f3      	bne.n	1004f1e8 <__sfputs_r+0xa>
1004f200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1004f204 <_vfiprintf_r>:
1004f204:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f206:	b0a1      	sub	sp, #132	@ 0x84
1004f208:	000f      	movs	r7, r1
1004f20a:	0015      	movs	r5, r2
1004f20c:	001e      	movs	r6, r3
1004f20e:	9003      	str	r0, [sp, #12]
1004f210:	2800      	cmp	r0, #0
1004f212:	d004      	beq.n	1004f21e <_vfiprintf_r+0x1a>
1004f214:	6a03      	ldr	r3, [r0, #32]
1004f216:	2b00      	cmp	r3, #0
1004f218:	d101      	bne.n	1004f21e <_vfiprintf_r+0x1a>
1004f21a:	f7ff fc09 	bl	1004ea30 <__sinit>
1004f21e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004f220:	07db      	lsls	r3, r3, #31
1004f222:	d405      	bmi.n	1004f230 <_vfiprintf_r+0x2c>
1004f224:	89bb      	ldrh	r3, [r7, #12]
1004f226:	059b      	lsls	r3, r3, #22
1004f228:	d402      	bmi.n	1004f230 <_vfiprintf_r+0x2c>
1004f22a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004f22c:	f7ff feb1 	bl	1004ef92 <__retarget_lock_acquire_recursive>
1004f230:	89bb      	ldrh	r3, [r7, #12]
1004f232:	071b      	lsls	r3, r3, #28
1004f234:	d502      	bpl.n	1004f23c <_vfiprintf_r+0x38>
1004f236:	693b      	ldr	r3, [r7, #16]
1004f238:	2b00      	cmp	r3, #0
1004f23a:	d113      	bne.n	1004f264 <_vfiprintf_r+0x60>
1004f23c:	0039      	movs	r1, r7
1004f23e:	9803      	ldr	r0, [sp, #12]
1004f240:	f7ff fdde 	bl	1004ee00 <__swsetup_r>
1004f244:	2800      	cmp	r0, #0
1004f246:	d00d      	beq.n	1004f264 <_vfiprintf_r+0x60>
1004f248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004f24a:	07db      	lsls	r3, r3, #31
1004f24c:	d503      	bpl.n	1004f256 <_vfiprintf_r+0x52>
1004f24e:	2001      	movs	r0, #1
1004f250:	4240      	negs	r0, r0
1004f252:	b021      	add	sp, #132	@ 0x84
1004f254:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f256:	89bb      	ldrh	r3, [r7, #12]
1004f258:	059b      	lsls	r3, r3, #22
1004f25a:	d4f8      	bmi.n	1004f24e <_vfiprintf_r+0x4a>
1004f25c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004f25e:	f7ff fe99 	bl	1004ef94 <__retarget_lock_release_recursive>
1004f262:	e7f4      	b.n	1004f24e <_vfiprintf_r+0x4a>
1004f264:	2300      	movs	r3, #0
1004f266:	ac08      	add	r4, sp, #32
1004f268:	6163      	str	r3, [r4, #20]
1004f26a:	3320      	adds	r3, #32
1004f26c:	7663      	strb	r3, [r4, #25]
1004f26e:	3310      	adds	r3, #16
1004f270:	76a3      	strb	r3, [r4, #26]
1004f272:	9607      	str	r6, [sp, #28]
1004f274:	002e      	movs	r6, r5
1004f276:	7833      	ldrb	r3, [r6, #0]
1004f278:	2b00      	cmp	r3, #0
1004f27a:	d001      	beq.n	1004f280 <_vfiprintf_r+0x7c>
1004f27c:	2b25      	cmp	r3, #37	@ 0x25
1004f27e:	d148      	bne.n	1004f312 <_vfiprintf_r+0x10e>
1004f280:	1b73      	subs	r3, r6, r5
1004f282:	9305      	str	r3, [sp, #20]
1004f284:	42ae      	cmp	r6, r5
1004f286:	d00b      	beq.n	1004f2a0 <_vfiprintf_r+0x9c>
1004f288:	002a      	movs	r2, r5
1004f28a:	0039      	movs	r1, r7
1004f28c:	9803      	ldr	r0, [sp, #12]
1004f28e:	f7ff ffa6 	bl	1004f1de <__sfputs_r>
1004f292:	3001      	adds	r0, #1
1004f294:	d100      	bne.n	1004f298 <_vfiprintf_r+0x94>
1004f296:	e0ae      	b.n	1004f3f6 <_vfiprintf_r+0x1f2>
1004f298:	6963      	ldr	r3, [r4, #20]
1004f29a:	9a05      	ldr	r2, [sp, #20]
1004f29c:	189b      	adds	r3, r3, r2
1004f29e:	6163      	str	r3, [r4, #20]
1004f2a0:	7833      	ldrb	r3, [r6, #0]
1004f2a2:	2b00      	cmp	r3, #0
1004f2a4:	d100      	bne.n	1004f2a8 <_vfiprintf_r+0xa4>
1004f2a6:	e0a6      	b.n	1004f3f6 <_vfiprintf_r+0x1f2>
1004f2a8:	2201      	movs	r2, #1
1004f2aa:	2300      	movs	r3, #0
1004f2ac:	4252      	negs	r2, r2
1004f2ae:	6062      	str	r2, [r4, #4]
1004f2b0:	a904      	add	r1, sp, #16
1004f2b2:	3254      	adds	r2, #84	@ 0x54
1004f2b4:	1852      	adds	r2, r2, r1
1004f2b6:	1c75      	adds	r5, r6, #1
1004f2b8:	6023      	str	r3, [r4, #0]
1004f2ba:	60e3      	str	r3, [r4, #12]
1004f2bc:	60a3      	str	r3, [r4, #8]
1004f2be:	7013      	strb	r3, [r2, #0]
1004f2c0:	65a3      	str	r3, [r4, #88]	@ 0x58
1004f2c2:	4b59      	ldr	r3, [pc, #356]	@ (1004f428 <_vfiprintf_r+0x224>)
1004f2c4:	2205      	movs	r2, #5
1004f2c6:	0018      	movs	r0, r3
1004f2c8:	7829      	ldrb	r1, [r5, #0]
1004f2ca:	9305      	str	r3, [sp, #20]
1004f2cc:	f000 fb88 	bl	1004f9e0 <memchr>
1004f2d0:	1c6e      	adds	r6, r5, #1
1004f2d2:	2800      	cmp	r0, #0
1004f2d4:	d11f      	bne.n	1004f316 <_vfiprintf_r+0x112>
1004f2d6:	6822      	ldr	r2, [r4, #0]
1004f2d8:	06d3      	lsls	r3, r2, #27
1004f2da:	d504      	bpl.n	1004f2e6 <_vfiprintf_r+0xe2>
1004f2dc:	2353      	movs	r3, #83	@ 0x53
1004f2de:	a904      	add	r1, sp, #16
1004f2e0:	185b      	adds	r3, r3, r1
1004f2e2:	2120      	movs	r1, #32
1004f2e4:	7019      	strb	r1, [r3, #0]
1004f2e6:	0713      	lsls	r3, r2, #28
1004f2e8:	d504      	bpl.n	1004f2f4 <_vfiprintf_r+0xf0>
1004f2ea:	2353      	movs	r3, #83	@ 0x53
1004f2ec:	a904      	add	r1, sp, #16
1004f2ee:	185b      	adds	r3, r3, r1
1004f2f0:	212b      	movs	r1, #43	@ 0x2b
1004f2f2:	7019      	strb	r1, [r3, #0]
1004f2f4:	782b      	ldrb	r3, [r5, #0]
1004f2f6:	2b2a      	cmp	r3, #42	@ 0x2a
1004f2f8:	d016      	beq.n	1004f328 <_vfiprintf_r+0x124>
1004f2fa:	002e      	movs	r6, r5
1004f2fc:	2100      	movs	r1, #0
1004f2fe:	200a      	movs	r0, #10
1004f300:	68e3      	ldr	r3, [r4, #12]
1004f302:	7832      	ldrb	r2, [r6, #0]
1004f304:	1c75      	adds	r5, r6, #1
1004f306:	3a30      	subs	r2, #48	@ 0x30
1004f308:	2a09      	cmp	r2, #9
1004f30a:	d950      	bls.n	1004f3ae <_vfiprintf_r+0x1aa>
1004f30c:	2900      	cmp	r1, #0
1004f30e:	d111      	bne.n	1004f334 <_vfiprintf_r+0x130>
1004f310:	e017      	b.n	1004f342 <_vfiprintf_r+0x13e>
1004f312:	3601      	adds	r6, #1
1004f314:	e7af      	b.n	1004f276 <_vfiprintf_r+0x72>
1004f316:	9b05      	ldr	r3, [sp, #20]
1004f318:	6822      	ldr	r2, [r4, #0]
1004f31a:	1ac0      	subs	r0, r0, r3
1004f31c:	2301      	movs	r3, #1
1004f31e:	4083      	lsls	r3, r0
1004f320:	4313      	orrs	r3, r2
1004f322:	0035      	movs	r5, r6
1004f324:	6023      	str	r3, [r4, #0]
1004f326:	e7cc      	b.n	1004f2c2 <_vfiprintf_r+0xbe>
1004f328:	9b07      	ldr	r3, [sp, #28]
1004f32a:	1d19      	adds	r1, r3, #4
1004f32c:	681b      	ldr	r3, [r3, #0]
1004f32e:	9107      	str	r1, [sp, #28]
1004f330:	2b00      	cmp	r3, #0
1004f332:	db01      	blt.n	1004f338 <_vfiprintf_r+0x134>
1004f334:	930b      	str	r3, [sp, #44]	@ 0x2c
1004f336:	e004      	b.n	1004f342 <_vfiprintf_r+0x13e>
1004f338:	425b      	negs	r3, r3
1004f33a:	60e3      	str	r3, [r4, #12]
1004f33c:	2302      	movs	r3, #2
1004f33e:	4313      	orrs	r3, r2
1004f340:	6023      	str	r3, [r4, #0]
1004f342:	7833      	ldrb	r3, [r6, #0]
1004f344:	2b2e      	cmp	r3, #46	@ 0x2e
1004f346:	d10c      	bne.n	1004f362 <_vfiprintf_r+0x15e>
1004f348:	7873      	ldrb	r3, [r6, #1]
1004f34a:	2b2a      	cmp	r3, #42	@ 0x2a
1004f34c:	d134      	bne.n	1004f3b8 <_vfiprintf_r+0x1b4>
1004f34e:	9b07      	ldr	r3, [sp, #28]
1004f350:	3602      	adds	r6, #2
1004f352:	1d1a      	adds	r2, r3, #4
1004f354:	681b      	ldr	r3, [r3, #0]
1004f356:	9207      	str	r2, [sp, #28]
1004f358:	2b00      	cmp	r3, #0
1004f35a:	da01      	bge.n	1004f360 <_vfiprintf_r+0x15c>
1004f35c:	2301      	movs	r3, #1
1004f35e:	425b      	negs	r3, r3
1004f360:	9309      	str	r3, [sp, #36]	@ 0x24
1004f362:	4d32      	ldr	r5, [pc, #200]	@ (1004f42c <_vfiprintf_r+0x228>)
1004f364:	2203      	movs	r2, #3
1004f366:	0028      	movs	r0, r5
1004f368:	7831      	ldrb	r1, [r6, #0]
1004f36a:	f000 fb39 	bl	1004f9e0 <memchr>
1004f36e:	2800      	cmp	r0, #0
1004f370:	d006      	beq.n	1004f380 <_vfiprintf_r+0x17c>
1004f372:	2340      	movs	r3, #64	@ 0x40
1004f374:	1b40      	subs	r0, r0, r5
1004f376:	4083      	lsls	r3, r0
1004f378:	6822      	ldr	r2, [r4, #0]
1004f37a:	3601      	adds	r6, #1
1004f37c:	4313      	orrs	r3, r2
1004f37e:	6023      	str	r3, [r4, #0]
1004f380:	7831      	ldrb	r1, [r6, #0]
1004f382:	2206      	movs	r2, #6
1004f384:	482a      	ldr	r0, [pc, #168]	@ (1004f430 <_vfiprintf_r+0x22c>)
1004f386:	1c75      	adds	r5, r6, #1
1004f388:	7621      	strb	r1, [r4, #24]
1004f38a:	f000 fb29 	bl	1004f9e0 <memchr>
1004f38e:	2800      	cmp	r0, #0
1004f390:	d040      	beq.n	1004f414 <_vfiprintf_r+0x210>
1004f392:	4b28      	ldr	r3, [pc, #160]	@ (1004f434 <_vfiprintf_r+0x230>)
1004f394:	2b00      	cmp	r3, #0
1004f396:	d122      	bne.n	1004f3de <_vfiprintf_r+0x1da>
1004f398:	2207      	movs	r2, #7
1004f39a:	9b07      	ldr	r3, [sp, #28]
1004f39c:	3307      	adds	r3, #7
1004f39e:	4393      	bics	r3, r2
1004f3a0:	3308      	adds	r3, #8
1004f3a2:	9307      	str	r3, [sp, #28]
1004f3a4:	6963      	ldr	r3, [r4, #20]
1004f3a6:	9a04      	ldr	r2, [sp, #16]
1004f3a8:	189b      	adds	r3, r3, r2
1004f3aa:	6163      	str	r3, [r4, #20]
1004f3ac:	e762      	b.n	1004f274 <_vfiprintf_r+0x70>
1004f3ae:	4343      	muls	r3, r0
1004f3b0:	002e      	movs	r6, r5
1004f3b2:	2101      	movs	r1, #1
1004f3b4:	189b      	adds	r3, r3, r2
1004f3b6:	e7a4      	b.n	1004f302 <_vfiprintf_r+0xfe>
1004f3b8:	2300      	movs	r3, #0
1004f3ba:	200a      	movs	r0, #10
1004f3bc:	0019      	movs	r1, r3
1004f3be:	3601      	adds	r6, #1
1004f3c0:	6063      	str	r3, [r4, #4]
1004f3c2:	7832      	ldrb	r2, [r6, #0]
1004f3c4:	1c75      	adds	r5, r6, #1
1004f3c6:	3a30      	subs	r2, #48	@ 0x30
1004f3c8:	2a09      	cmp	r2, #9
1004f3ca:	d903      	bls.n	1004f3d4 <_vfiprintf_r+0x1d0>
1004f3cc:	2b00      	cmp	r3, #0
1004f3ce:	d0c8      	beq.n	1004f362 <_vfiprintf_r+0x15e>
1004f3d0:	9109      	str	r1, [sp, #36]	@ 0x24
1004f3d2:	e7c6      	b.n	1004f362 <_vfiprintf_r+0x15e>
1004f3d4:	4341      	muls	r1, r0
1004f3d6:	002e      	movs	r6, r5
1004f3d8:	2301      	movs	r3, #1
1004f3da:	1889      	adds	r1, r1, r2
1004f3dc:	e7f1      	b.n	1004f3c2 <_vfiprintf_r+0x1be>
1004f3de:	aa07      	add	r2, sp, #28
1004f3e0:	9200      	str	r2, [sp, #0]
1004f3e2:	0021      	movs	r1, r4
1004f3e4:	003a      	movs	r2, r7
1004f3e6:	4b14      	ldr	r3, [pc, #80]	@ (1004f438 <_vfiprintf_r+0x234>)
1004f3e8:	9803      	ldr	r0, [sp, #12]
1004f3ea:	e000      	b.n	1004f3ee <_vfiprintf_r+0x1ea>
1004f3ec:	bf00      	nop
1004f3ee:	9004      	str	r0, [sp, #16]
1004f3f0:	9b04      	ldr	r3, [sp, #16]
1004f3f2:	3301      	adds	r3, #1
1004f3f4:	d1d6      	bne.n	1004f3a4 <_vfiprintf_r+0x1a0>
1004f3f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004f3f8:	07db      	lsls	r3, r3, #31
1004f3fa:	d405      	bmi.n	1004f408 <_vfiprintf_r+0x204>
1004f3fc:	89bb      	ldrh	r3, [r7, #12]
1004f3fe:	059b      	lsls	r3, r3, #22
1004f400:	d402      	bmi.n	1004f408 <_vfiprintf_r+0x204>
1004f402:	6db8      	ldr	r0, [r7, #88]	@ 0x58
1004f404:	f7ff fdc6 	bl	1004ef94 <__retarget_lock_release_recursive>
1004f408:	89bb      	ldrh	r3, [r7, #12]
1004f40a:	065b      	lsls	r3, r3, #25
1004f40c:	d500      	bpl.n	1004f410 <_vfiprintf_r+0x20c>
1004f40e:	e71e      	b.n	1004f24e <_vfiprintf_r+0x4a>
1004f410:	980d      	ldr	r0, [sp, #52]	@ 0x34
1004f412:	e71e      	b.n	1004f252 <_vfiprintf_r+0x4e>
1004f414:	aa07      	add	r2, sp, #28
1004f416:	9200      	str	r2, [sp, #0]
1004f418:	0021      	movs	r1, r4
1004f41a:	003a      	movs	r2, r7
1004f41c:	4b06      	ldr	r3, [pc, #24]	@ (1004f438 <_vfiprintf_r+0x234>)
1004f41e:	9803      	ldr	r0, [sp, #12]
1004f420:	f000 f87c 	bl	1004f51c <_printf_i>
1004f424:	e7e3      	b.n	1004f3ee <_vfiprintf_r+0x1ea>
1004f426:	46c0      	nop			@ (mov r8, r8)
1004f428:	1004feb0 	.word	0x1004feb0
1004f42c:	1004feb6 	.word	0x1004feb6
1004f430:	1004feba 	.word	0x1004feba
1004f434:	00000000 	.word	0x00000000
1004f438:	1004f1df 	.word	0x1004f1df

1004f43c <_printf_common>:
1004f43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004f43e:	0016      	movs	r6, r2
1004f440:	9301      	str	r3, [sp, #4]
1004f442:	688a      	ldr	r2, [r1, #8]
1004f444:	690b      	ldr	r3, [r1, #16]
1004f446:	000c      	movs	r4, r1
1004f448:	9000      	str	r0, [sp, #0]
1004f44a:	4293      	cmp	r3, r2
1004f44c:	da00      	bge.n	1004f450 <_printf_common+0x14>
1004f44e:	0013      	movs	r3, r2
1004f450:	0022      	movs	r2, r4
1004f452:	6033      	str	r3, [r6, #0]
1004f454:	3243      	adds	r2, #67	@ 0x43
1004f456:	7812      	ldrb	r2, [r2, #0]
1004f458:	2a00      	cmp	r2, #0
1004f45a:	d001      	beq.n	1004f460 <_printf_common+0x24>
1004f45c:	3301      	adds	r3, #1
1004f45e:	6033      	str	r3, [r6, #0]
1004f460:	6823      	ldr	r3, [r4, #0]
1004f462:	069b      	lsls	r3, r3, #26
1004f464:	d502      	bpl.n	1004f46c <_printf_common+0x30>
1004f466:	6833      	ldr	r3, [r6, #0]
1004f468:	3302      	adds	r3, #2
1004f46a:	6033      	str	r3, [r6, #0]
1004f46c:	6822      	ldr	r2, [r4, #0]
1004f46e:	2306      	movs	r3, #6
1004f470:	0015      	movs	r5, r2
1004f472:	401d      	ands	r5, r3
1004f474:	421a      	tst	r2, r3
1004f476:	d027      	beq.n	1004f4c8 <_printf_common+0x8c>
1004f478:	0023      	movs	r3, r4
1004f47a:	3343      	adds	r3, #67	@ 0x43
1004f47c:	781b      	ldrb	r3, [r3, #0]
1004f47e:	1e5a      	subs	r2, r3, #1
1004f480:	4193      	sbcs	r3, r2
1004f482:	6822      	ldr	r2, [r4, #0]
1004f484:	0692      	lsls	r2, r2, #26
1004f486:	d430      	bmi.n	1004f4ea <_printf_common+0xae>
1004f488:	0022      	movs	r2, r4
1004f48a:	9901      	ldr	r1, [sp, #4]
1004f48c:	9800      	ldr	r0, [sp, #0]
1004f48e:	9d08      	ldr	r5, [sp, #32]
1004f490:	3243      	adds	r2, #67	@ 0x43
1004f492:	47a8      	blx	r5
1004f494:	3001      	adds	r0, #1
1004f496:	d025      	beq.n	1004f4e4 <_printf_common+0xa8>
1004f498:	2206      	movs	r2, #6
1004f49a:	6823      	ldr	r3, [r4, #0]
1004f49c:	2500      	movs	r5, #0
1004f49e:	4013      	ands	r3, r2
1004f4a0:	2b04      	cmp	r3, #4
1004f4a2:	d105      	bne.n	1004f4b0 <_printf_common+0x74>
1004f4a4:	6833      	ldr	r3, [r6, #0]
1004f4a6:	68e5      	ldr	r5, [r4, #12]
1004f4a8:	1aed      	subs	r5, r5, r3
1004f4aa:	43eb      	mvns	r3, r5
1004f4ac:	17db      	asrs	r3, r3, #31
1004f4ae:	401d      	ands	r5, r3
1004f4b0:	68a3      	ldr	r3, [r4, #8]
1004f4b2:	6922      	ldr	r2, [r4, #16]
1004f4b4:	4293      	cmp	r3, r2
1004f4b6:	dd01      	ble.n	1004f4bc <_printf_common+0x80>
1004f4b8:	1a9b      	subs	r3, r3, r2
1004f4ba:	18ed      	adds	r5, r5, r3
1004f4bc:	2600      	movs	r6, #0
1004f4be:	42b5      	cmp	r5, r6
1004f4c0:	d120      	bne.n	1004f504 <_printf_common+0xc8>
1004f4c2:	2000      	movs	r0, #0
1004f4c4:	e010      	b.n	1004f4e8 <_printf_common+0xac>
1004f4c6:	3501      	adds	r5, #1
1004f4c8:	68e3      	ldr	r3, [r4, #12]
1004f4ca:	6832      	ldr	r2, [r6, #0]
1004f4cc:	1a9b      	subs	r3, r3, r2
1004f4ce:	42ab      	cmp	r3, r5
1004f4d0:	ddd2      	ble.n	1004f478 <_printf_common+0x3c>
1004f4d2:	0022      	movs	r2, r4
1004f4d4:	2301      	movs	r3, #1
1004f4d6:	9901      	ldr	r1, [sp, #4]
1004f4d8:	9800      	ldr	r0, [sp, #0]
1004f4da:	9f08      	ldr	r7, [sp, #32]
1004f4dc:	3219      	adds	r2, #25
1004f4de:	47b8      	blx	r7
1004f4e0:	3001      	adds	r0, #1
1004f4e2:	d1f0      	bne.n	1004f4c6 <_printf_common+0x8a>
1004f4e4:	2001      	movs	r0, #1
1004f4e6:	4240      	negs	r0, r0
1004f4e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004f4ea:	2030      	movs	r0, #48	@ 0x30
1004f4ec:	18e1      	adds	r1, r4, r3
1004f4ee:	3143      	adds	r1, #67	@ 0x43
1004f4f0:	7008      	strb	r0, [r1, #0]
1004f4f2:	0021      	movs	r1, r4
1004f4f4:	1c5a      	adds	r2, r3, #1
1004f4f6:	3145      	adds	r1, #69	@ 0x45
1004f4f8:	7809      	ldrb	r1, [r1, #0]
1004f4fa:	18a2      	adds	r2, r4, r2
1004f4fc:	3243      	adds	r2, #67	@ 0x43
1004f4fe:	3302      	adds	r3, #2
1004f500:	7011      	strb	r1, [r2, #0]
1004f502:	e7c1      	b.n	1004f488 <_printf_common+0x4c>
1004f504:	0022      	movs	r2, r4
1004f506:	2301      	movs	r3, #1
1004f508:	9901      	ldr	r1, [sp, #4]
1004f50a:	9800      	ldr	r0, [sp, #0]
1004f50c:	9f08      	ldr	r7, [sp, #32]
1004f50e:	321a      	adds	r2, #26
1004f510:	47b8      	blx	r7
1004f512:	3001      	adds	r0, #1
1004f514:	d0e6      	beq.n	1004f4e4 <_printf_common+0xa8>
1004f516:	3601      	adds	r6, #1
1004f518:	e7d1      	b.n	1004f4be <_printf_common+0x82>
	...

1004f51c <_printf_i>:
1004f51c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f51e:	b08b      	sub	sp, #44	@ 0x2c
1004f520:	9206      	str	r2, [sp, #24]
1004f522:	000a      	movs	r2, r1
1004f524:	3243      	adds	r2, #67	@ 0x43
1004f526:	9307      	str	r3, [sp, #28]
1004f528:	9005      	str	r0, [sp, #20]
1004f52a:	9203      	str	r2, [sp, #12]
1004f52c:	7e0a      	ldrb	r2, [r1, #24]
1004f52e:	000c      	movs	r4, r1
1004f530:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1004f532:	2a78      	cmp	r2, #120	@ 0x78
1004f534:	d809      	bhi.n	1004f54a <_printf_i+0x2e>
1004f536:	2a62      	cmp	r2, #98	@ 0x62
1004f538:	d80b      	bhi.n	1004f552 <_printf_i+0x36>
1004f53a:	2a00      	cmp	r2, #0
1004f53c:	d100      	bne.n	1004f540 <_printf_i+0x24>
1004f53e:	e0bc      	b.n	1004f6ba <_printf_i+0x19e>
1004f540:	497b      	ldr	r1, [pc, #492]	@ (1004f730 <_printf_i+0x214>)
1004f542:	9104      	str	r1, [sp, #16]
1004f544:	2a58      	cmp	r2, #88	@ 0x58
1004f546:	d100      	bne.n	1004f54a <_printf_i+0x2e>
1004f548:	e090      	b.n	1004f66c <_printf_i+0x150>
1004f54a:	0025      	movs	r5, r4
1004f54c:	3542      	adds	r5, #66	@ 0x42
1004f54e:	702a      	strb	r2, [r5, #0]
1004f550:	e022      	b.n	1004f598 <_printf_i+0x7c>
1004f552:	0010      	movs	r0, r2
1004f554:	3863      	subs	r0, #99	@ 0x63
1004f556:	2815      	cmp	r0, #21
1004f558:	d8f7      	bhi.n	1004f54a <_printf_i+0x2e>
1004f55a:	f7f0 fe5f 	bl	1004021c <__gnu_thumb1_case_shi>
1004f55e:	0016      	.short	0x0016
1004f560:	fff6001f 	.word	0xfff6001f
1004f564:	fff6fff6 	.word	0xfff6fff6
1004f568:	001ffff6 	.word	0x001ffff6
1004f56c:	fff6fff6 	.word	0xfff6fff6
1004f570:	fff6fff6 	.word	0xfff6fff6
1004f574:	003600a1 	.word	0x003600a1
1004f578:	fff60080 	.word	0xfff60080
1004f57c:	00b2fff6 	.word	0x00b2fff6
1004f580:	0036fff6 	.word	0x0036fff6
1004f584:	fff6fff6 	.word	0xfff6fff6
1004f588:	0084      	.short	0x0084
1004f58a:	0025      	movs	r5, r4
1004f58c:	681a      	ldr	r2, [r3, #0]
1004f58e:	3542      	adds	r5, #66	@ 0x42
1004f590:	1d11      	adds	r1, r2, #4
1004f592:	6019      	str	r1, [r3, #0]
1004f594:	6813      	ldr	r3, [r2, #0]
1004f596:	702b      	strb	r3, [r5, #0]
1004f598:	2301      	movs	r3, #1
1004f59a:	e0a0      	b.n	1004f6de <_printf_i+0x1c2>
1004f59c:	6818      	ldr	r0, [r3, #0]
1004f59e:	6809      	ldr	r1, [r1, #0]
1004f5a0:	1d02      	adds	r2, r0, #4
1004f5a2:	060d      	lsls	r5, r1, #24
1004f5a4:	d50b      	bpl.n	1004f5be <_printf_i+0xa2>
1004f5a6:	6806      	ldr	r6, [r0, #0]
1004f5a8:	601a      	str	r2, [r3, #0]
1004f5aa:	2e00      	cmp	r6, #0
1004f5ac:	da03      	bge.n	1004f5b6 <_printf_i+0x9a>
1004f5ae:	232d      	movs	r3, #45	@ 0x2d
1004f5b0:	9a03      	ldr	r2, [sp, #12]
1004f5b2:	4276      	negs	r6, r6
1004f5b4:	7013      	strb	r3, [r2, #0]
1004f5b6:	4b5e      	ldr	r3, [pc, #376]	@ (1004f730 <_printf_i+0x214>)
1004f5b8:	270a      	movs	r7, #10
1004f5ba:	9304      	str	r3, [sp, #16]
1004f5bc:	e018      	b.n	1004f5f0 <_printf_i+0xd4>
1004f5be:	6806      	ldr	r6, [r0, #0]
1004f5c0:	601a      	str	r2, [r3, #0]
1004f5c2:	0649      	lsls	r1, r1, #25
1004f5c4:	d5f1      	bpl.n	1004f5aa <_printf_i+0x8e>
1004f5c6:	b236      	sxth	r6, r6
1004f5c8:	e7ef      	b.n	1004f5aa <_printf_i+0x8e>
1004f5ca:	6808      	ldr	r0, [r1, #0]
1004f5cc:	6819      	ldr	r1, [r3, #0]
1004f5ce:	c940      	ldmia	r1!, {r6}
1004f5d0:	0605      	lsls	r5, r0, #24
1004f5d2:	d402      	bmi.n	1004f5da <_printf_i+0xbe>
1004f5d4:	0640      	lsls	r0, r0, #25
1004f5d6:	d500      	bpl.n	1004f5da <_printf_i+0xbe>
1004f5d8:	b2b6      	uxth	r6, r6
1004f5da:	6019      	str	r1, [r3, #0]
1004f5dc:	4b54      	ldr	r3, [pc, #336]	@ (1004f730 <_printf_i+0x214>)
1004f5de:	270a      	movs	r7, #10
1004f5e0:	9304      	str	r3, [sp, #16]
1004f5e2:	2a6f      	cmp	r2, #111	@ 0x6f
1004f5e4:	d100      	bne.n	1004f5e8 <_printf_i+0xcc>
1004f5e6:	3f02      	subs	r7, #2
1004f5e8:	0023      	movs	r3, r4
1004f5ea:	2200      	movs	r2, #0
1004f5ec:	3343      	adds	r3, #67	@ 0x43
1004f5ee:	701a      	strb	r2, [r3, #0]
1004f5f0:	6863      	ldr	r3, [r4, #4]
1004f5f2:	60a3      	str	r3, [r4, #8]
1004f5f4:	2b00      	cmp	r3, #0
1004f5f6:	db03      	blt.n	1004f600 <_printf_i+0xe4>
1004f5f8:	2104      	movs	r1, #4
1004f5fa:	6822      	ldr	r2, [r4, #0]
1004f5fc:	438a      	bics	r2, r1
1004f5fe:	6022      	str	r2, [r4, #0]
1004f600:	2e00      	cmp	r6, #0
1004f602:	d102      	bne.n	1004f60a <_printf_i+0xee>
1004f604:	9d03      	ldr	r5, [sp, #12]
1004f606:	2b00      	cmp	r3, #0
1004f608:	d00c      	beq.n	1004f624 <_printf_i+0x108>
1004f60a:	9d03      	ldr	r5, [sp, #12]
1004f60c:	0030      	movs	r0, r6
1004f60e:	0039      	movs	r1, r7
1004f610:	f7f0 fe94 	bl	1004033c <__aeabi_uidivmod>
1004f614:	9b04      	ldr	r3, [sp, #16]
1004f616:	3d01      	subs	r5, #1
1004f618:	5c5b      	ldrb	r3, [r3, r1]
1004f61a:	702b      	strb	r3, [r5, #0]
1004f61c:	0033      	movs	r3, r6
1004f61e:	0006      	movs	r6, r0
1004f620:	429f      	cmp	r7, r3
1004f622:	d9f3      	bls.n	1004f60c <_printf_i+0xf0>
1004f624:	2f08      	cmp	r7, #8
1004f626:	d109      	bne.n	1004f63c <_printf_i+0x120>
1004f628:	6823      	ldr	r3, [r4, #0]
1004f62a:	07db      	lsls	r3, r3, #31
1004f62c:	d506      	bpl.n	1004f63c <_printf_i+0x120>
1004f62e:	6862      	ldr	r2, [r4, #4]
1004f630:	6923      	ldr	r3, [r4, #16]
1004f632:	429a      	cmp	r2, r3
1004f634:	dc02      	bgt.n	1004f63c <_printf_i+0x120>
1004f636:	2330      	movs	r3, #48	@ 0x30
1004f638:	3d01      	subs	r5, #1
1004f63a:	702b      	strb	r3, [r5, #0]
1004f63c:	9b03      	ldr	r3, [sp, #12]
1004f63e:	1b5b      	subs	r3, r3, r5
1004f640:	6123      	str	r3, [r4, #16]
1004f642:	9b07      	ldr	r3, [sp, #28]
1004f644:	0021      	movs	r1, r4
1004f646:	9300      	str	r3, [sp, #0]
1004f648:	9805      	ldr	r0, [sp, #20]
1004f64a:	9b06      	ldr	r3, [sp, #24]
1004f64c:	aa09      	add	r2, sp, #36	@ 0x24
1004f64e:	f7ff fef5 	bl	1004f43c <_printf_common>
1004f652:	3001      	adds	r0, #1
1004f654:	d148      	bne.n	1004f6e8 <_printf_i+0x1cc>
1004f656:	2001      	movs	r0, #1
1004f658:	4240      	negs	r0, r0
1004f65a:	b00b      	add	sp, #44	@ 0x2c
1004f65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f65e:	2220      	movs	r2, #32
1004f660:	6809      	ldr	r1, [r1, #0]
1004f662:	430a      	orrs	r2, r1
1004f664:	6022      	str	r2, [r4, #0]
1004f666:	2278      	movs	r2, #120	@ 0x78
1004f668:	4932      	ldr	r1, [pc, #200]	@ (1004f734 <_printf_i+0x218>)
1004f66a:	9104      	str	r1, [sp, #16]
1004f66c:	0021      	movs	r1, r4
1004f66e:	3145      	adds	r1, #69	@ 0x45
1004f670:	700a      	strb	r2, [r1, #0]
1004f672:	6819      	ldr	r1, [r3, #0]
1004f674:	6822      	ldr	r2, [r4, #0]
1004f676:	c940      	ldmia	r1!, {r6}
1004f678:	0610      	lsls	r0, r2, #24
1004f67a:	d402      	bmi.n	1004f682 <_printf_i+0x166>
1004f67c:	0650      	lsls	r0, r2, #25
1004f67e:	d500      	bpl.n	1004f682 <_printf_i+0x166>
1004f680:	b2b6      	uxth	r6, r6
1004f682:	6019      	str	r1, [r3, #0]
1004f684:	07d3      	lsls	r3, r2, #31
1004f686:	d502      	bpl.n	1004f68e <_printf_i+0x172>
1004f688:	2320      	movs	r3, #32
1004f68a:	4313      	orrs	r3, r2
1004f68c:	6023      	str	r3, [r4, #0]
1004f68e:	2e00      	cmp	r6, #0
1004f690:	d001      	beq.n	1004f696 <_printf_i+0x17a>
1004f692:	2710      	movs	r7, #16
1004f694:	e7a8      	b.n	1004f5e8 <_printf_i+0xcc>
1004f696:	2220      	movs	r2, #32
1004f698:	6823      	ldr	r3, [r4, #0]
1004f69a:	4393      	bics	r3, r2
1004f69c:	6023      	str	r3, [r4, #0]
1004f69e:	e7f8      	b.n	1004f692 <_printf_i+0x176>
1004f6a0:	681a      	ldr	r2, [r3, #0]
1004f6a2:	680d      	ldr	r5, [r1, #0]
1004f6a4:	1d10      	adds	r0, r2, #4
1004f6a6:	6949      	ldr	r1, [r1, #20]
1004f6a8:	6018      	str	r0, [r3, #0]
1004f6aa:	6813      	ldr	r3, [r2, #0]
1004f6ac:	062e      	lsls	r6, r5, #24
1004f6ae:	d501      	bpl.n	1004f6b4 <_printf_i+0x198>
1004f6b0:	6019      	str	r1, [r3, #0]
1004f6b2:	e002      	b.n	1004f6ba <_printf_i+0x19e>
1004f6b4:	066d      	lsls	r5, r5, #25
1004f6b6:	d5fb      	bpl.n	1004f6b0 <_printf_i+0x194>
1004f6b8:	8019      	strh	r1, [r3, #0]
1004f6ba:	2300      	movs	r3, #0
1004f6bc:	9d03      	ldr	r5, [sp, #12]
1004f6be:	6123      	str	r3, [r4, #16]
1004f6c0:	e7bf      	b.n	1004f642 <_printf_i+0x126>
1004f6c2:	681a      	ldr	r2, [r3, #0]
1004f6c4:	1d11      	adds	r1, r2, #4
1004f6c6:	6019      	str	r1, [r3, #0]
1004f6c8:	6815      	ldr	r5, [r2, #0]
1004f6ca:	2100      	movs	r1, #0
1004f6cc:	0028      	movs	r0, r5
1004f6ce:	6862      	ldr	r2, [r4, #4]
1004f6d0:	f000 f986 	bl	1004f9e0 <memchr>
1004f6d4:	2800      	cmp	r0, #0
1004f6d6:	d001      	beq.n	1004f6dc <_printf_i+0x1c0>
1004f6d8:	1b40      	subs	r0, r0, r5
1004f6da:	6060      	str	r0, [r4, #4]
1004f6dc:	6863      	ldr	r3, [r4, #4]
1004f6de:	6123      	str	r3, [r4, #16]
1004f6e0:	2300      	movs	r3, #0
1004f6e2:	9a03      	ldr	r2, [sp, #12]
1004f6e4:	7013      	strb	r3, [r2, #0]
1004f6e6:	e7ac      	b.n	1004f642 <_printf_i+0x126>
1004f6e8:	002a      	movs	r2, r5
1004f6ea:	6923      	ldr	r3, [r4, #16]
1004f6ec:	9906      	ldr	r1, [sp, #24]
1004f6ee:	9805      	ldr	r0, [sp, #20]
1004f6f0:	9d07      	ldr	r5, [sp, #28]
1004f6f2:	47a8      	blx	r5
1004f6f4:	3001      	adds	r0, #1
1004f6f6:	d0ae      	beq.n	1004f656 <_printf_i+0x13a>
1004f6f8:	6823      	ldr	r3, [r4, #0]
1004f6fa:	079b      	lsls	r3, r3, #30
1004f6fc:	d415      	bmi.n	1004f72a <_printf_i+0x20e>
1004f6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1004f700:	68e0      	ldr	r0, [r4, #12]
1004f702:	4298      	cmp	r0, r3
1004f704:	daa9      	bge.n	1004f65a <_printf_i+0x13e>
1004f706:	0018      	movs	r0, r3
1004f708:	e7a7      	b.n	1004f65a <_printf_i+0x13e>
1004f70a:	0022      	movs	r2, r4
1004f70c:	2301      	movs	r3, #1
1004f70e:	9906      	ldr	r1, [sp, #24]
1004f710:	9805      	ldr	r0, [sp, #20]
1004f712:	9e07      	ldr	r6, [sp, #28]
1004f714:	3219      	adds	r2, #25
1004f716:	47b0      	blx	r6
1004f718:	3001      	adds	r0, #1
1004f71a:	d09c      	beq.n	1004f656 <_printf_i+0x13a>
1004f71c:	3501      	adds	r5, #1
1004f71e:	68e3      	ldr	r3, [r4, #12]
1004f720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1004f722:	1a9b      	subs	r3, r3, r2
1004f724:	42ab      	cmp	r3, r5
1004f726:	dcf0      	bgt.n	1004f70a <_printf_i+0x1ee>
1004f728:	e7e9      	b.n	1004f6fe <_printf_i+0x1e2>
1004f72a:	2500      	movs	r5, #0
1004f72c:	e7f7      	b.n	1004f71e <_printf_i+0x202>
1004f72e:	46c0      	nop			@ (mov r8, r8)
1004f730:	1004fec1 	.word	0x1004fec1
1004f734:	1004fed2 	.word	0x1004fed2

1004f738 <__sflush_r>:
1004f738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1004f73a:	220c      	movs	r2, #12
1004f73c:	5e8b      	ldrsh	r3, [r1, r2]
1004f73e:	0005      	movs	r5, r0
1004f740:	000c      	movs	r4, r1
1004f742:	071a      	lsls	r2, r3, #28
1004f744:	d456      	bmi.n	1004f7f4 <__sflush_r+0xbc>
1004f746:	684a      	ldr	r2, [r1, #4]
1004f748:	2a00      	cmp	r2, #0
1004f74a:	dc02      	bgt.n	1004f752 <__sflush_r+0x1a>
1004f74c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
1004f74e:	2a00      	cmp	r2, #0
1004f750:	dd4e      	ble.n	1004f7f0 <__sflush_r+0xb8>
1004f752:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004f754:	2f00      	cmp	r7, #0
1004f756:	d04b      	beq.n	1004f7f0 <__sflush_r+0xb8>
1004f758:	2200      	movs	r2, #0
1004f75a:	2080      	movs	r0, #128	@ 0x80
1004f75c:	682e      	ldr	r6, [r5, #0]
1004f75e:	602a      	str	r2, [r5, #0]
1004f760:	001a      	movs	r2, r3
1004f762:	0140      	lsls	r0, r0, #5
1004f764:	6a21      	ldr	r1, [r4, #32]
1004f766:	4002      	ands	r2, r0
1004f768:	4203      	tst	r3, r0
1004f76a:	d033      	beq.n	1004f7d4 <__sflush_r+0x9c>
1004f76c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1004f76e:	89a3      	ldrh	r3, [r4, #12]
1004f770:	075b      	lsls	r3, r3, #29
1004f772:	d506      	bpl.n	1004f782 <__sflush_r+0x4a>
1004f774:	6863      	ldr	r3, [r4, #4]
1004f776:	1ad2      	subs	r2, r2, r3
1004f778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1004f77a:	2b00      	cmp	r3, #0
1004f77c:	d001      	beq.n	1004f782 <__sflush_r+0x4a>
1004f77e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1004f780:	1ad2      	subs	r2, r2, r3
1004f782:	2300      	movs	r3, #0
1004f784:	0028      	movs	r0, r5
1004f786:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
1004f788:	6a21      	ldr	r1, [r4, #32]
1004f78a:	47b8      	blx	r7
1004f78c:	89a2      	ldrh	r2, [r4, #12]
1004f78e:	1c43      	adds	r3, r0, #1
1004f790:	d106      	bne.n	1004f7a0 <__sflush_r+0x68>
1004f792:	6829      	ldr	r1, [r5, #0]
1004f794:	291d      	cmp	r1, #29
1004f796:	d846      	bhi.n	1004f826 <__sflush_r+0xee>
1004f798:	4b29      	ldr	r3, [pc, #164]	@ (1004f840 <__sflush_r+0x108>)
1004f79a:	410b      	asrs	r3, r1
1004f79c:	07db      	lsls	r3, r3, #31
1004f79e:	d442      	bmi.n	1004f826 <__sflush_r+0xee>
1004f7a0:	2300      	movs	r3, #0
1004f7a2:	6063      	str	r3, [r4, #4]
1004f7a4:	6923      	ldr	r3, [r4, #16]
1004f7a6:	6023      	str	r3, [r4, #0]
1004f7a8:	04d2      	lsls	r2, r2, #19
1004f7aa:	d505      	bpl.n	1004f7b8 <__sflush_r+0x80>
1004f7ac:	1c43      	adds	r3, r0, #1
1004f7ae:	d102      	bne.n	1004f7b6 <__sflush_r+0x7e>
1004f7b0:	682b      	ldr	r3, [r5, #0]
1004f7b2:	2b00      	cmp	r3, #0
1004f7b4:	d100      	bne.n	1004f7b8 <__sflush_r+0x80>
1004f7b6:	6560      	str	r0, [r4, #84]	@ 0x54
1004f7b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1004f7ba:	602e      	str	r6, [r5, #0]
1004f7bc:	2900      	cmp	r1, #0
1004f7be:	d017      	beq.n	1004f7f0 <__sflush_r+0xb8>
1004f7c0:	0023      	movs	r3, r4
1004f7c2:	3344      	adds	r3, #68	@ 0x44
1004f7c4:	4299      	cmp	r1, r3
1004f7c6:	d002      	beq.n	1004f7ce <__sflush_r+0x96>
1004f7c8:	0028      	movs	r0, r5
1004f7ca:	f7ff fbed 	bl	1004efa8 <_free_r>
1004f7ce:	2300      	movs	r3, #0
1004f7d0:	6363      	str	r3, [r4, #52]	@ 0x34
1004f7d2:	e00d      	b.n	1004f7f0 <__sflush_r+0xb8>
1004f7d4:	2301      	movs	r3, #1
1004f7d6:	0028      	movs	r0, r5
1004f7d8:	47b8      	blx	r7
1004f7da:	0002      	movs	r2, r0
1004f7dc:	1c43      	adds	r3, r0, #1
1004f7de:	d1c6      	bne.n	1004f76e <__sflush_r+0x36>
1004f7e0:	682b      	ldr	r3, [r5, #0]
1004f7e2:	2b00      	cmp	r3, #0
1004f7e4:	d0c3      	beq.n	1004f76e <__sflush_r+0x36>
1004f7e6:	2b1d      	cmp	r3, #29
1004f7e8:	d001      	beq.n	1004f7ee <__sflush_r+0xb6>
1004f7ea:	2b16      	cmp	r3, #22
1004f7ec:	d11a      	bne.n	1004f824 <__sflush_r+0xec>
1004f7ee:	602e      	str	r6, [r5, #0]
1004f7f0:	2000      	movs	r0, #0
1004f7f2:	e01e      	b.n	1004f832 <__sflush_r+0xfa>
1004f7f4:	690e      	ldr	r6, [r1, #16]
1004f7f6:	2e00      	cmp	r6, #0
1004f7f8:	d0fa      	beq.n	1004f7f0 <__sflush_r+0xb8>
1004f7fa:	680f      	ldr	r7, [r1, #0]
1004f7fc:	600e      	str	r6, [r1, #0]
1004f7fe:	1bba      	subs	r2, r7, r6
1004f800:	9201      	str	r2, [sp, #4]
1004f802:	2200      	movs	r2, #0
1004f804:	079b      	lsls	r3, r3, #30
1004f806:	d100      	bne.n	1004f80a <__sflush_r+0xd2>
1004f808:	694a      	ldr	r2, [r1, #20]
1004f80a:	60a2      	str	r2, [r4, #8]
1004f80c:	9b01      	ldr	r3, [sp, #4]
1004f80e:	2b00      	cmp	r3, #0
1004f810:	ddee      	ble.n	1004f7f0 <__sflush_r+0xb8>
1004f812:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
1004f814:	0032      	movs	r2, r6
1004f816:	001f      	movs	r7, r3
1004f818:	0028      	movs	r0, r5
1004f81a:	9b01      	ldr	r3, [sp, #4]
1004f81c:	6a21      	ldr	r1, [r4, #32]
1004f81e:	47b8      	blx	r7
1004f820:	2800      	cmp	r0, #0
1004f822:	dc07      	bgt.n	1004f834 <__sflush_r+0xfc>
1004f824:	89a2      	ldrh	r2, [r4, #12]
1004f826:	2340      	movs	r3, #64	@ 0x40
1004f828:	2001      	movs	r0, #1
1004f82a:	4313      	orrs	r3, r2
1004f82c:	b21b      	sxth	r3, r3
1004f82e:	81a3      	strh	r3, [r4, #12]
1004f830:	4240      	negs	r0, r0
1004f832:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1004f834:	9b01      	ldr	r3, [sp, #4]
1004f836:	1836      	adds	r6, r6, r0
1004f838:	1a1b      	subs	r3, r3, r0
1004f83a:	9301      	str	r3, [sp, #4]
1004f83c:	e7e6      	b.n	1004f80c <__sflush_r+0xd4>
1004f83e:	46c0      	nop			@ (mov r8, r8)
1004f840:	dfbffffe 	.word	0xdfbffffe

1004f844 <_fflush_r>:
1004f844:	690b      	ldr	r3, [r1, #16]
1004f846:	b570      	push	{r4, r5, r6, lr}
1004f848:	0005      	movs	r5, r0
1004f84a:	000c      	movs	r4, r1
1004f84c:	2b00      	cmp	r3, #0
1004f84e:	d102      	bne.n	1004f856 <_fflush_r+0x12>
1004f850:	2500      	movs	r5, #0
1004f852:	0028      	movs	r0, r5
1004f854:	bd70      	pop	{r4, r5, r6, pc}
1004f856:	2800      	cmp	r0, #0
1004f858:	d004      	beq.n	1004f864 <_fflush_r+0x20>
1004f85a:	6a03      	ldr	r3, [r0, #32]
1004f85c:	2b00      	cmp	r3, #0
1004f85e:	d101      	bne.n	1004f864 <_fflush_r+0x20>
1004f860:	f7ff f8e6 	bl	1004ea30 <__sinit>
1004f864:	220c      	movs	r2, #12
1004f866:	5ea3      	ldrsh	r3, [r4, r2]
1004f868:	2b00      	cmp	r3, #0
1004f86a:	d0f1      	beq.n	1004f850 <_fflush_r+0xc>
1004f86c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1004f86e:	07d2      	lsls	r2, r2, #31
1004f870:	d404      	bmi.n	1004f87c <_fflush_r+0x38>
1004f872:	059b      	lsls	r3, r3, #22
1004f874:	d402      	bmi.n	1004f87c <_fflush_r+0x38>
1004f876:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004f878:	f7ff fb8b 	bl	1004ef92 <__retarget_lock_acquire_recursive>
1004f87c:	0028      	movs	r0, r5
1004f87e:	0021      	movs	r1, r4
1004f880:	f7ff ff5a 	bl	1004f738 <__sflush_r>
1004f884:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1004f886:	0005      	movs	r5, r0
1004f888:	07db      	lsls	r3, r3, #31
1004f88a:	d4e2      	bmi.n	1004f852 <_fflush_r+0xe>
1004f88c:	89a3      	ldrh	r3, [r4, #12]
1004f88e:	059b      	lsls	r3, r3, #22
1004f890:	d4df      	bmi.n	1004f852 <_fflush_r+0xe>
1004f892:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1004f894:	f7ff fb7e 	bl	1004ef94 <__retarget_lock_release_recursive>
1004f898:	e7db      	b.n	1004f852 <_fflush_r+0xe>
	...

1004f89c <__swhatbuf_r>:
1004f89c:	b570      	push	{r4, r5, r6, lr}
1004f89e:	000e      	movs	r6, r1
1004f8a0:	001d      	movs	r5, r3
1004f8a2:	230e      	movs	r3, #14
1004f8a4:	5ec9      	ldrsh	r1, [r1, r3]
1004f8a6:	0014      	movs	r4, r2
1004f8a8:	b096      	sub	sp, #88	@ 0x58
1004f8aa:	2900      	cmp	r1, #0
1004f8ac:	da0c      	bge.n	1004f8c8 <__swhatbuf_r+0x2c>
1004f8ae:	89b2      	ldrh	r2, [r6, #12]
1004f8b0:	2380      	movs	r3, #128	@ 0x80
1004f8b2:	0011      	movs	r1, r2
1004f8b4:	4019      	ands	r1, r3
1004f8b6:	421a      	tst	r2, r3
1004f8b8:	d114      	bne.n	1004f8e4 <__swhatbuf_r+0x48>
1004f8ba:	2380      	movs	r3, #128	@ 0x80
1004f8bc:	00db      	lsls	r3, r3, #3
1004f8be:	2000      	movs	r0, #0
1004f8c0:	6029      	str	r1, [r5, #0]
1004f8c2:	6023      	str	r3, [r4, #0]
1004f8c4:	b016      	add	sp, #88	@ 0x58
1004f8c6:	bd70      	pop	{r4, r5, r6, pc}
1004f8c8:	466a      	mov	r2, sp
1004f8ca:	f000 f853 	bl	1004f974 <_fstat_r>
1004f8ce:	2800      	cmp	r0, #0
1004f8d0:	dbed      	blt.n	1004f8ae <__swhatbuf_r+0x12>
1004f8d2:	23f0      	movs	r3, #240	@ 0xf0
1004f8d4:	9901      	ldr	r1, [sp, #4]
1004f8d6:	021b      	lsls	r3, r3, #8
1004f8d8:	4019      	ands	r1, r3
1004f8da:	4b04      	ldr	r3, [pc, #16]	@ (1004f8ec <__swhatbuf_r+0x50>)
1004f8dc:	18c9      	adds	r1, r1, r3
1004f8de:	424b      	negs	r3, r1
1004f8e0:	4159      	adcs	r1, r3
1004f8e2:	e7ea      	b.n	1004f8ba <__swhatbuf_r+0x1e>
1004f8e4:	2100      	movs	r1, #0
1004f8e6:	2340      	movs	r3, #64	@ 0x40
1004f8e8:	e7e9      	b.n	1004f8be <__swhatbuf_r+0x22>
1004f8ea:	46c0      	nop			@ (mov r8, r8)
1004f8ec:	ffffe000 	.word	0xffffe000

1004f8f0 <__smakebuf_r>:
1004f8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f8f2:	2602      	movs	r6, #2
1004f8f4:	898b      	ldrh	r3, [r1, #12]
1004f8f6:	0005      	movs	r5, r0
1004f8f8:	000c      	movs	r4, r1
1004f8fa:	b085      	sub	sp, #20
1004f8fc:	4233      	tst	r3, r6
1004f8fe:	d007      	beq.n	1004f910 <__smakebuf_r+0x20>
1004f900:	0023      	movs	r3, r4
1004f902:	3347      	adds	r3, #71	@ 0x47
1004f904:	6023      	str	r3, [r4, #0]
1004f906:	6123      	str	r3, [r4, #16]
1004f908:	2301      	movs	r3, #1
1004f90a:	6163      	str	r3, [r4, #20]
1004f90c:	b005      	add	sp, #20
1004f90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004f910:	ab03      	add	r3, sp, #12
1004f912:	aa02      	add	r2, sp, #8
1004f914:	f7ff ffc2 	bl	1004f89c <__swhatbuf_r>
1004f918:	9f02      	ldr	r7, [sp, #8]
1004f91a:	9001      	str	r0, [sp, #4]
1004f91c:	0039      	movs	r1, r7
1004f91e:	0028      	movs	r0, r5
1004f920:	f7ff fbb8 	bl	1004f094 <_malloc_r>
1004f924:	2800      	cmp	r0, #0
1004f926:	d108      	bne.n	1004f93a <__smakebuf_r+0x4a>
1004f928:	220c      	movs	r2, #12
1004f92a:	5ea3      	ldrsh	r3, [r4, r2]
1004f92c:	059a      	lsls	r2, r3, #22
1004f92e:	d4ed      	bmi.n	1004f90c <__smakebuf_r+0x1c>
1004f930:	2203      	movs	r2, #3
1004f932:	4393      	bics	r3, r2
1004f934:	431e      	orrs	r6, r3
1004f936:	81a6      	strh	r6, [r4, #12]
1004f938:	e7e2      	b.n	1004f900 <__smakebuf_r+0x10>
1004f93a:	2380      	movs	r3, #128	@ 0x80
1004f93c:	89a2      	ldrh	r2, [r4, #12]
1004f93e:	6020      	str	r0, [r4, #0]
1004f940:	4313      	orrs	r3, r2
1004f942:	81a3      	strh	r3, [r4, #12]
1004f944:	9b03      	ldr	r3, [sp, #12]
1004f946:	6120      	str	r0, [r4, #16]
1004f948:	6167      	str	r7, [r4, #20]
1004f94a:	2b00      	cmp	r3, #0
1004f94c:	d00c      	beq.n	1004f968 <__smakebuf_r+0x78>
1004f94e:	0028      	movs	r0, r5
1004f950:	230e      	movs	r3, #14
1004f952:	5ee1      	ldrsh	r1, [r4, r3]
1004f954:	f000 f820 	bl	1004f998 <_isatty_r>
1004f958:	2800      	cmp	r0, #0
1004f95a:	d005      	beq.n	1004f968 <__smakebuf_r+0x78>
1004f95c:	2303      	movs	r3, #3
1004f95e:	89a2      	ldrh	r2, [r4, #12]
1004f960:	439a      	bics	r2, r3
1004f962:	3b02      	subs	r3, #2
1004f964:	4313      	orrs	r3, r2
1004f966:	81a3      	strh	r3, [r4, #12]
1004f968:	89a3      	ldrh	r3, [r4, #12]
1004f96a:	9a01      	ldr	r2, [sp, #4]
1004f96c:	4313      	orrs	r3, r2
1004f96e:	81a3      	strh	r3, [r4, #12]
1004f970:	e7cc      	b.n	1004f90c <__smakebuf_r+0x1c>
	...

1004f974 <_fstat_r>:
1004f974:	2300      	movs	r3, #0
1004f976:	b570      	push	{r4, r5, r6, lr}
1004f978:	4d06      	ldr	r5, [pc, #24]	@ (1004f994 <_fstat_r+0x20>)
1004f97a:	0004      	movs	r4, r0
1004f97c:	0008      	movs	r0, r1
1004f97e:	0011      	movs	r1, r2
1004f980:	602b      	str	r3, [r5, #0]
1004f982:	f7f1 fcea 	bl	1004135a <_fstat>
1004f986:	1c43      	adds	r3, r0, #1
1004f988:	d103      	bne.n	1004f992 <_fstat_r+0x1e>
1004f98a:	682b      	ldr	r3, [r5, #0]
1004f98c:	2b00      	cmp	r3, #0
1004f98e:	d000      	beq.n	1004f992 <_fstat_r+0x1e>
1004f990:	6023      	str	r3, [r4, #0]
1004f992:	bd70      	pop	{r4, r5, r6, pc}
1004f994:	20000cc4 	.word	0x20000cc4

1004f998 <_isatty_r>:
1004f998:	2300      	movs	r3, #0
1004f99a:	b570      	push	{r4, r5, r6, lr}
1004f99c:	4d06      	ldr	r5, [pc, #24]	@ (1004f9b8 <_isatty_r+0x20>)
1004f99e:	0004      	movs	r4, r0
1004f9a0:	0008      	movs	r0, r1
1004f9a2:	602b      	str	r3, [r5, #0]
1004f9a4:	f7f1 fce7 	bl	10041376 <_isatty>
1004f9a8:	1c43      	adds	r3, r0, #1
1004f9aa:	d103      	bne.n	1004f9b4 <_isatty_r+0x1c>
1004f9ac:	682b      	ldr	r3, [r5, #0]
1004f9ae:	2b00      	cmp	r3, #0
1004f9b0:	d000      	beq.n	1004f9b4 <_isatty_r+0x1c>
1004f9b2:	6023      	str	r3, [r4, #0]
1004f9b4:	bd70      	pop	{r4, r5, r6, pc}
1004f9b6:	46c0      	nop			@ (mov r8, r8)
1004f9b8:	20000cc4 	.word	0x20000cc4

1004f9bc <_sbrk_r>:
1004f9bc:	2300      	movs	r3, #0
1004f9be:	b570      	push	{r4, r5, r6, lr}
1004f9c0:	4d06      	ldr	r5, [pc, #24]	@ (1004f9dc <_sbrk_r+0x20>)
1004f9c2:	0004      	movs	r4, r0
1004f9c4:	0008      	movs	r0, r1
1004f9c6:	602b      	str	r3, [r5, #0]
1004f9c8:	f7f1 fcea 	bl	100413a0 <_sbrk>
1004f9cc:	1c43      	adds	r3, r0, #1
1004f9ce:	d103      	bne.n	1004f9d8 <_sbrk_r+0x1c>
1004f9d0:	682b      	ldr	r3, [r5, #0]
1004f9d2:	2b00      	cmp	r3, #0
1004f9d4:	d000      	beq.n	1004f9d8 <_sbrk_r+0x1c>
1004f9d6:	6023      	str	r3, [r4, #0]
1004f9d8:	bd70      	pop	{r4, r5, r6, pc}
1004f9da:	46c0      	nop			@ (mov r8, r8)
1004f9dc:	20000cc4 	.word	0x20000cc4

1004f9e0 <memchr>:
1004f9e0:	b2c9      	uxtb	r1, r1
1004f9e2:	1882      	adds	r2, r0, r2
1004f9e4:	4290      	cmp	r0, r2
1004f9e6:	d101      	bne.n	1004f9ec <memchr+0xc>
1004f9e8:	2000      	movs	r0, #0
1004f9ea:	4770      	bx	lr
1004f9ec:	7803      	ldrb	r3, [r0, #0]
1004f9ee:	428b      	cmp	r3, r1
1004f9f0:	d0fb      	beq.n	1004f9ea <memchr+0xa>
1004f9f2:	3001      	adds	r0, #1
1004f9f4:	e7f6      	b.n	1004f9e4 <memchr+0x4>
	...

Disassembly of section .init:

1004f9f8 <_init>:
1004f9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004f9fa:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

1004f9fc <_fini>:
1004f9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1004f9fe:	46c0      	nop			@ (mov r8, r8)
